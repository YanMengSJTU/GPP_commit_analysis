diff --git a/facebook/src/main/java/com/facebook/appevents/AccessTokenAppIdPair.java b/facebook/src/main/java/com/facebook/appevents/AccessTokenAppIdPair1.java
similarity index 100%
rename from facebook/src/main/java/com/facebook/appevents/AccessTokenAppIdPair.java
rename to facebook/src/main/java/com/facebook/appevents/AccessTokenAppIdPair1.java
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEvent.java b/facebook/src/main/java/com/facebook/appevents/AppEvent1.java
similarity index 100%
rename from facebook/src/main/java/com/facebook/appevents/AppEvent.java
rename to facebook/src/main/java/com/facebook/appevents/AppEvent1.java
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventCollection.java b/facebook/src/main/java/com/facebook/appevents/AppEventCollection1.java
similarity index 100%
rename from facebook/src/main/java/com/facebook/appevents/AppEventCollection.java
rename to facebook/src/main/java/com/facebook/appevents/AppEventCollection1.java
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventQueue.java b/facebook/src/main/java/com/facebook/appevents/AppEventQueue1.java
similarity index 100%
rename from facebook/src/main/java/com/facebook/appevents/AppEventQueue.java
rename to facebook/src/main/java/com/facebook/appevents/AppEventQueue1.java
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventStore.java b/facebook/src/main/java/com/facebook/appevents/AppEventStore1.java
similarity index 100%
rename from facebook/src/main/java/com/facebook/appevents/AppEventStore.java
rename to facebook/src/main/java/com/facebook/appevents/AppEventStore1.java
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventsConstants.java b/facebook/src/main/java/com/facebook/appevents/AppEventsConstants1.java
similarity index 100%
rename from facebook/src/main/java/com/facebook/appevents/AppEventsConstants.java
rename to facebook/src/main/java/com/facebook/appevents/AppEventsConstants1.java
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java b/facebook/src/main/java/com/facebook/appevents/AppEventsLogger1.java
similarity index 100%
rename from facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java
rename to facebook/src/main/java/com/facebook/appevents/AppEventsLogger1.java
diff --git a/facebook/src/main/java/com/facebook/appevents/FacebookTimeSpentData.java b/facebook/src/main/java/com/facebook/appevents/FacebookTimeSpentData1.java
similarity index 100%
rename from facebook/src/main/java/com/facebook/appevents/FacebookTimeSpentData.java
rename to facebook/src/main/java/com/facebook/appevents/FacebookTimeSpentData1.java
diff --git a/facebook/src/main/java/com/facebook/appevents/FlushReason.java b/facebook/src/main/java/com/facebook/appevents/FlushReason1.java
similarity index 100%
rename from facebook/src/main/java/com/facebook/appevents/FlushReason.java
rename to facebook/src/main/java/com/facebook/appevents/FlushReason1.java
diff --git a/facebook/src/main/java/com/facebook/appevents/FlushResult.java b/facebook/src/main/java/com/facebook/appevents/FlushResult1.java
similarity index 100%
rename from facebook/src/main/java/com/facebook/appevents/FlushResult.java
rename to facebook/src/main/java/com/facebook/appevents/FlushResult1.java
diff --git a/facebook/src/main/java/com/facebook/appevents/FlushStatistics.java b/facebook/src/main/java/com/facebook/appevents/FlushStatistics1.java
similarity index 100%
rename from facebook/src/main/java/com/facebook/appevents/FlushStatistics.java
rename to facebook/src/main/java/com/facebook/appevents/FlushStatistics1.java
diff --git a/facebook/src/main/java/com/facebook/appevents/PersistedEvents.java b/facebook/src/main/java/com/facebook/appevents/PersistedEvents1.java
similarity index 100%
rename from facebook/src/main/java/com/facebook/appevents/PersistedEvents.java
rename to facebook/src/main/java/com/facebook/appevents/PersistedEvents1.java
diff --git a/facebook/src/main/java/com/facebook/appevents/SessionEventsState.java b/facebook/src/main/java/com/facebook/appevents/SessionEventsState1.java
similarity index 100%
rename from facebook/src/main/java/com/facebook/appevents/SessionEventsState.java
rename to facebook/src/main/java/com/facebook/appevents/SessionEventsState1.java
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java b/facebook/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker1.java
similarity index 100%
rename from facebook/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java
rename to facebook/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker1.java
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/Constants.java b/facebook/src/main/java/com/facebook/appevents/internal/Constants1.java
similarity index 100%
rename from facebook/src/main/java/com/facebook/appevents/internal/Constants.java
rename to facebook/src/main/java/com/facebook/appevents/internal/Constants1.java
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/InternalAppEventsLogger.java b/facebook/src/main/java/com/facebook/appevents/internal/InternalAppEventsLogger1.java
similarity index 100%
rename from facebook/src/main/java/com/facebook/appevents/internal/InternalAppEventsLogger.java
rename to facebook/src/main/java/com/facebook/appevents/internal/InternalAppEventsLogger1.java
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/SessionInfo.java b/facebook/src/main/java/com/facebook/appevents/internal/SessionInfo1.java
similarity index 100%
rename from facebook/src/main/java/com/facebook/appevents/internal/SessionInfo.java
rename to facebook/src/main/java/com/facebook/appevents/internal/SessionInfo1.java
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/SessionLogger.java b/facebook/src/main/java/com/facebook/appevents/internal/SessionLogger1.java
similarity index 100%
rename from facebook/src/main/java/com/facebook/appevents/internal/SessionLogger.java
rename to facebook/src/main/java/com/facebook/appevents/internal/SessionLogger1.java
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/SourceApplicationInfo.java b/facebook/src/main/java/com/facebook/appevents/internal/SourceApplicationInfo1.java
similarity index 100%
rename from facebook/src/main/java/com/facebook/appevents/internal/SourceApplicationInfo.java
rename to facebook/src/main/java/com/facebook/appevents/internal/SourceApplicationInfo1.java
diff --git a/facebook/src/main/java/com/facebook/applinks/AppLinkData.java b/facebook/src/main/java/com/facebook/applinks/AppLinkData1.java
similarity index 100%
rename from facebook/src/main/java/com/facebook/applinks/AppLinkData.java
rename to facebook/src/main/java/com/facebook/applinks/AppLinkData1.java
diff --git a/facebook/src/main/java/com/facebook/applinks/FacebookAppLinkResolver.java b/facebook/src/main/java/com/facebook/applinks/FacebookAppLinkResolver1.java
similarity index 100%
rename from facebook/src/main/java/com/facebook/applinks/FacebookAppLinkResolver.java
rename to facebook/src/main/java/com/facebook/applinks/FacebookAppLinkResolver1.java
diff --git a/facebook/src/test/java/com/facebook/AccessTokenCacheTest.java b/facebook/src/test/java/com/facebook/AccessTokenCacheTest.java
deleted file mode 100644
index caf1f87c0..000000000
--- a/facebook/src/test/java/com/facebook/AccessTokenCacheTest.java
+++ /dev/null
@@ -1,275 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.os.Bundle;
-
-import com.facebook.internal.Utility;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.junit.Before;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.powermock.api.mockito.PowerMockito;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-
-import java.util.Arrays;
-import java.util.Date;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
-import static org.powermock.api.mockito.PowerMockito.mockStatic;
-import static org.powermock.api.mockito.PowerMockito.when;
-import static org.powermock.api.mockito.PowerMockito.mock;
-import static org.powermock.api.support.membermodification.MemberModifier.stub;
-
-@PrepareForTest( {
-        AccessTokenCache.class,
-        FacebookSdk.class,
-        LegacyTokenHelper.class,
-        Utility.class})
-public class AccessTokenCacheTest extends FacebookPowerMockTestCase {
-
-    private final String TOKEN_STRING = "A token of my esteem";
-    private final String USER_ID = "1000";
-    private final List<String> PERMISSIONS = Arrays.asList("walk", "chew gum");
-    private final Date EXPIRES = new Date(2025, 5, 3);
-    private final Date LAST_REFRESH = new Date(2023, 8, 15);
-    private final String APP_ID = "1234";
-
-    private SharedPreferences sharedPreferences;
-    @Mock private LegacyTokenHelper cachingStrategy;
-    private AccessTokenCache.SharedPreferencesTokenCachingStrategyFactory
-            cachingStrategyFactory;
-
-    @Before
-    public void before() throws Exception {
-        mockStatic(FacebookSdk.class);
-        sharedPreferences = RuntimeEnvironment.application.getSharedPreferences(
-                AccessTokenManager.SHARED_PREFERENCES_NAME, Context.MODE_PRIVATE);
-        sharedPreferences.edit().clear().commit();
-        cachingStrategyFactory = mock(
-                AccessTokenCache.SharedPreferencesTokenCachingStrategyFactory.class);
-        when(cachingStrategyFactory.create()).thenReturn(cachingStrategy);
-        stub(PowerMockito.method(Utility.class, "awaitGetGraphMeRequestWithCache")).toReturn(
-                new JSONObject().put("id", "1000"));
-    }
-
-
-    @Test
-    public void testLoadReturnsFalseIfNoCachedToken() {
-        AccessTokenCache cache = new AccessTokenCache(sharedPreferences, cachingStrategyFactory);
-
-        AccessToken accessToken = cache.load();
-
-        assertNull(accessToken);
-        PowerMockito.verifyZeroInteractions(cachingStrategy);
-    }
-
-    @Test
-    public void testLoadReturnsFalseIfNoCachedOrLegacyToken() {
-        when(FacebookSdk.isLegacyTokenUpgradeSupported()).thenReturn(true);
-
-        AccessTokenCache cache = new AccessTokenCache(sharedPreferences, cachingStrategyFactory);
-
-        AccessToken accessToken = cache.load();
-
-        assertNull(accessToken);
-    }
-
-    @Test
-    public void testLoadReturnsFalseIfEmptyCachedTokenAndDoesNotCheckLegacy() {
-
-        JSONObject jsonObject = new JSONObject();
-        sharedPreferences.edit().putString(AccessTokenCache.CACHED_ACCESS_TOKEN_KEY,
-                jsonObject.toString()).commit();
-
-        AccessTokenCache cache = new AccessTokenCache(sharedPreferences, cachingStrategyFactory);
-
-        AccessToken accessToken = cache.load();
-
-        assertNull(accessToken);
-        verifyZeroInteractions(cachingStrategy);
-    }
-
-    @Test
-    public void testLoadReturnsFalseIfNoCachedTokenAndEmptyLegacyToken() {
-        when(FacebookSdk.isLegacyTokenUpgradeSupported()).thenReturn(true);
-
-        when(cachingStrategy.load()).thenReturn(new Bundle());
-
-        AccessTokenCache cache = new AccessTokenCache(sharedPreferences, cachingStrategyFactory);
-
-        AccessToken accessToken = cache.load();
-
-        assertNull(accessToken);
-    }
-
-    @Test
-    public void testLoadValidCachedToken() throws JSONException {
-        AccessToken accessToken = createAccessToken();
-        JSONObject jsonObject = accessToken.toJSONObject();
-        sharedPreferences.edit().putString(AccessTokenCache.CACHED_ACCESS_TOKEN_KEY,
-                jsonObject.toString()).commit();
-
-        AccessTokenCache cache = new AccessTokenCache(sharedPreferences, cachingStrategyFactory);
-
-        AccessToken loadedAccessToken = cache.load();
-
-        assertNotNull(loadedAccessToken);
-        assertEquals(accessToken, loadedAccessToken);
-    }
-
-    @Test
-    public void testLoadSetsCurrentTokenIfNoCachedTokenButValidLegacyToken() {
-        when(FacebookSdk.isLegacyTokenUpgradeSupported()).thenReturn(true);
-
-        AccessToken accessToken = createAccessToken();
-        when(cachingStrategy.load()).thenReturn(
-                AccessTokenTestHelper.toLegacyCacheBundle(accessToken));
-
-        AccessTokenCache cache = new AccessTokenCache(sharedPreferences, cachingStrategyFactory);
-
-        AccessToken loadedAccessToken = cache.load();
-
-        assertNotNull(loadedAccessToken);
-        assertEquals(accessToken, loadedAccessToken);
-    }
-
-    @Test
-    public void testLoadSavesTokenWhenUpgradingFromLegacyToken() throws JSONException {
-        when(FacebookSdk.isLegacyTokenUpgradeSupported()).thenReturn(true);
-
-        AccessToken accessToken = createAccessToken();
-        when(cachingStrategy.load()).thenReturn(
-                AccessTokenTestHelper.toLegacyCacheBundle(accessToken));
-
-        AccessTokenCache cache = new AccessTokenCache(sharedPreferences, cachingStrategyFactory);
-        cache.load();
-
-        assertTrue(sharedPreferences.contains(AccessTokenCache.CACHED_ACCESS_TOKEN_KEY));
-
-        AccessToken savedAccessToken = AccessToken.createFromJSONObject(
-                new JSONObject(sharedPreferences.getString(
-                        AccessTokenCache.CACHED_ACCESS_TOKEN_KEY, null)));
-        assertEquals(accessToken, savedAccessToken);
-    }
-
-    @Test
-    public void testLoadClearsLegacyCacheWhenUpgradingFromLegacyToken() {
-        when(FacebookSdk.isLegacyTokenUpgradeSupported()).thenReturn(true);
-
-        AccessToken accessToken = createAccessToken();
-        when(cachingStrategy.load()).thenReturn(
-                AccessTokenTestHelper.toLegacyCacheBundle(accessToken));
-
-        AccessTokenCache cache = new AccessTokenCache(sharedPreferences, cachingStrategyFactory);
-        cache.load();
-
-        verify(cachingStrategy, times(1)).clear();
-    }
-
-    @Test
-    public void testSaveRequiresToken() {
-        AccessTokenCache cache = new AccessTokenCache(sharedPreferences, cachingStrategyFactory);
-
-        try {
-            cache.save(null);
-            fail();
-        } catch (NullPointerException exception) {
-        }
-    }
-
-    @Test
-    public void testSaveWritesToCacheIfToken() throws JSONException {
-        AccessToken accessToken = createAccessToken();
-        AccessTokenCache cache = new AccessTokenCache(sharedPreferences, cachingStrategyFactory);
-
-        cache.save(accessToken);
-
-        verify(cachingStrategy, never()).save(any(Bundle.class));
-        assertTrue(sharedPreferences.contains(AccessTokenCache.CACHED_ACCESS_TOKEN_KEY));
-
-        AccessToken savedAccessToken = AccessToken.createFromJSONObject(
-                new JSONObject(sharedPreferences.getString(
-                        AccessTokenCache.CACHED_ACCESS_TOKEN_KEY, null)));
-        assertEquals(accessToken, savedAccessToken);
-    }
-
-    @Test
-    public void testClearCacheClearsCache() {
-        AccessToken accessToken = createAccessToken();
-        AccessTokenCache cache = new AccessTokenCache(sharedPreferences, cachingStrategyFactory);
-
-        cache.save(accessToken);
-
-        cache.clear();
-
-        assertFalse(sharedPreferences.contains(AccessTokenCache.CACHED_ACCESS_TOKEN_KEY));
-        verify(cachingStrategy, never()).clear();
-    }
-
-    @Test
-    public void testClearCacheClearsLegacyCache() {
-        when(FacebookSdk.isLegacyTokenUpgradeSupported()).thenReturn(true);
-
-        AccessToken accessToken = createAccessToken();
-        AccessTokenCache cache = new AccessTokenCache(sharedPreferences, cachingStrategyFactory);
-
-        cache.save(accessToken);
-
-        cache.clear();
-
-        assertFalse(sharedPreferences.contains(AccessTokenCache.CACHED_ACCESS_TOKEN_KEY));
-        verify(cachingStrategy, times(1)).clear();
-    }
-
-    private AccessToken createAccessToken() {
-        return createAccessToken(TOKEN_STRING, USER_ID);
-    }
-
-    private AccessToken createAccessToken(String tokenString, String userId) {
-        return new AccessToken(
-                tokenString,
-                APP_ID,
-                userId,
-                PERMISSIONS,
-                null,
-                AccessTokenSource.WEB_VIEW,
-                EXPIRES,
-                LAST_REFRESH);
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/AccessTokenManagerTest.java b/facebook/src/test/java/com/facebook/AccessTokenManagerTest.java
deleted file mode 100644
index 3ae3d47a6..000000000
--- a/facebook/src/test/java/com/facebook/AccessTokenManagerTest.java
+++ /dev/null
@@ -1,233 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.support.v4.content.LocalBroadcastManager;
-
-import com.facebook.internal.Utility;
-
-import org.json.JSONException;
-import org.junit.Before;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.powermock.api.mockito.PowerMockito;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-
-import java.util.Arrays;
-import java.util.Date;
-import java.util.List;
-
-import static org.mockito.Mockito.*;
-import static org.junit.Assert.*;
-import static org.powermock.api.mockito.PowerMockito.mockStatic;
-import static org.powermock.api.mockito.PowerMockito.when;
-import static org.powermock.api.support.membermodification.MemberMatcher.method;
-import static org.powermock.api.support.membermodification.MemberModifier.suppress;
-
-@PrepareForTest({FacebookSdk.class, AccessTokenCache.class, Utility.class})
-public class AccessTokenManagerTest extends FacebookPowerMockTestCase {
-
-    private final String TOKEN_STRING = "A token of my esteem";
-    private final String USER_ID = "1000";
-    private final List<String> PERMISSIONS = Arrays.asList("walk", "chew gum");
-    private final Date EXPIRES = new Date(2025, 5, 3);
-    private final Date LAST_REFRESH = new Date(2023, 8, 15);
-    private final String APP_ID = "1234";
-
-    private LocalBroadcastManager localBroadcastManager;
-    private AccessTokenCache accessTokenCache;
-
-    @Before
-    public void before() throws Exception {
-        mockStatic(FacebookSdk.class);
-        when(FacebookSdk.isInitialized()).thenReturn(true);
-        when(FacebookSdk.getApplicationContext()).thenReturn(RuntimeEnvironment.application);
-        suppress(method(Utility.class, "clearFacebookCookies"));
-
-        localBroadcastManager = LocalBroadcastManager.getInstance(RuntimeEnvironment.application);
-        accessTokenCache = mock(AccessTokenCache.class);
-    }
-
-    @Test
-    public void testRequiresLocalBroadcastManager() {
-        try {
-            AccessTokenManager accessTokenManager = new AccessTokenManager(null, accessTokenCache);
-            fail();
-        } catch (NullPointerException ex) {
-        }
-    }
-
-    @Test
-    public void testRequiresTokenCache() {
-        try {
-            AccessTokenManager accessTokenManager = new AccessTokenManager(localBroadcastManager,
-                    null);
-            fail();
-        } catch (NullPointerException ex) {
-        }
-    }
-
-    @Test
-    public void testDefaultsToNoCurrentAccessToken() {
-        AccessTokenManager accessTokenManager = createAccessTokenManager();
-
-        assertNull(accessTokenManager.getCurrentAccessToken());
-    }
-
-    @Test
-    public void testCanSetCurrentAccessToken() {
-        AccessTokenManager accessTokenManager = createAccessTokenManager();
-
-        AccessToken accessToken = createAccessToken();
-
-        accessTokenManager.setCurrentAccessToken(accessToken);
-
-        assertEquals(accessToken, accessTokenManager.getCurrentAccessToken());
-    }
-
-    @Test
-    public void testChangingAccessTokenSendsBroadcast() {
-        AccessTokenManager accessTokenManager = createAccessTokenManager();
-
-        AccessToken accessToken = createAccessToken();
-
-        accessTokenManager.setCurrentAccessToken(accessToken);
-
-        final Intent intents[] = new Intent[1];
-        final BroadcastReceiver broadcastReceiver = new BroadcastReceiver() {
-            @Override
-            public void onReceive(Context context, Intent intent) {
-                intents[0] = intent;
-            }
-        };
-
-        localBroadcastManager.registerReceiver(broadcastReceiver,
-                new IntentFilter(AccessTokenManager.ACTION_CURRENT_ACCESS_TOKEN_CHANGED));
-
-        AccessToken anotherAccessToken = createAccessToken("another string", "1000");
-
-        accessTokenManager.setCurrentAccessToken(anotherAccessToken);
-
-        localBroadcastManager.unregisterReceiver(broadcastReceiver);
-
-        Intent intent = intents[0];
-
-        assertNotNull(intent);
-
-        AccessToken oldAccessToken =
-                (AccessToken) intent.getParcelableExtra(AccessTokenManager.EXTRA_OLD_ACCESS_TOKEN);
-        AccessToken newAccessToken =
-                (AccessToken) intent.getParcelableExtra(AccessTokenManager.EXTRA_NEW_ACCESS_TOKEN);
-
-        assertEquals(accessToken.getToken(), oldAccessToken.getToken());
-        assertEquals(anotherAccessToken.getToken(), newAccessToken.getToken());
-    }
-
-    @Test
-    public void testLoadReturnsFalseIfNoCachedToken() {
-        AccessTokenManager accessTokenManager = createAccessTokenManager();
-
-        boolean result = accessTokenManager.loadCurrentAccessToken();
-
-        assertFalse(result);
-    }
-
-    @Test
-    public void testLoadReturnsTrueIfCachedToken() {
-        AccessToken accessToken = createAccessToken();
-        when(accessTokenCache.load()).thenReturn(accessToken);
-
-        AccessTokenManager accessTokenManager = createAccessTokenManager();
-
-        boolean result = accessTokenManager.loadCurrentAccessToken();
-
-        assertTrue(result);
-    }
-
-    @Test
-    public void testLoadSetsCurrentTokenIfCached() {
-        AccessToken accessToken = createAccessToken();
-        when(accessTokenCache.load()).thenReturn(accessToken);
-
-        AccessTokenManager accessTokenManager = createAccessTokenManager();
-
-        accessTokenManager.loadCurrentAccessToken();
-
-        assertEquals(accessToken, accessTokenManager.getCurrentAccessToken());
-    }
-
-    @Test
-    public void testSaveWritesToCacheIfToken() throws JSONException {
-        AccessToken accessToken = createAccessToken();
-        AccessTokenManager accessTokenManager = createAccessTokenManager();
-
-        accessTokenManager.setCurrentAccessToken(accessToken);
-
-        verify(accessTokenCache, times(1)).save(any(AccessToken.class));
-    }
-
-    @Test
-    public void testSetEmptyTokenClearsCache() {
-        AccessTokenManager accessTokenManager = createAccessTokenManager();
-
-        accessTokenManager.setCurrentAccessToken(null);
-
-        verify(accessTokenCache, times(1)).clear();
-    }
-
-    @Test
-    public void testLoadDoesNotSave() {
-        AccessToken accessToken = createAccessToken();
-        when(accessTokenCache.load()).thenReturn(accessToken);
-
-        AccessTokenManager accessTokenManager = createAccessTokenManager();
-
-        accessTokenManager.loadCurrentAccessToken();
-
-        verify(accessTokenCache, never()).save(any(AccessToken.class));
-    }
-
-    private AccessTokenManager createAccessTokenManager() {
-        return new AccessTokenManager(localBroadcastManager, accessTokenCache);
-    }
-
-    private AccessToken createAccessToken() {
-        return createAccessToken(TOKEN_STRING, USER_ID);
-    }
-
-    private AccessToken createAccessToken(String tokenString, String userId) {
-        return new AccessToken(
-                tokenString,
-                APP_ID,
-                userId,
-                PERMISSIONS,
-                null,
-                AccessTokenSource.WEB_VIEW,
-                EXPIRES,
-                LAST_REFRESH);
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/AccessTokenTest.java b/facebook/src/test/java/com/facebook/AccessTokenTest.java
deleted file mode 100644
index 8ec902bbe..000000000
--- a/facebook/src/test/java/com/facebook/AccessTokenTest.java
+++ /dev/null
@@ -1,378 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.os.Bundle;
-
-import com.facebook.internal.Utility;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.junit.Before;
-import org.junit.Test;
-import org.powermock.api.mockito.PowerMockito;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-
-import java.io.IOException;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Date;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-
-import static org.junit.Assert.*;
-import static org.powermock.api.support.membermodification.MemberModifier.stub;
-
-@PrepareForTest( {Utility.class})
-public final class AccessTokenTest extends FacebookPowerMockTestCase {
-
-    @Before
-    public void before() throws Exception {
-        stub(PowerMockito.method(Utility.class, "awaitGetGraphMeRequestWithCache")).toReturn(
-                new JSONObject().put("id", "1000"));
-    }
-
-    @Test
-    public void testNullTokenThrows() {
-        try {
-            AccessToken token = new AccessToken(
-                    null,
-                    "1234",
-                    "1000",
-                    Utility.arrayList("something"),
-                    Utility.arrayList("something_else"),
-                    AccessTokenSource.CLIENT_TOKEN,
-                    new Date(),
-                    new Date());
-            fail();
-        } catch (IllegalArgumentException e) {
-        }
-    }
-
-    @Test
-    public void testEmptyTokenThrows() {
-        try {
-            AccessToken token = new AccessToken(
-                    "",
-                    "1234",
-                    "1000",
-                    Utility.arrayList("something"),
-                    Utility.arrayList("something_else"),
-                    AccessTokenSource.CLIENT_TOKEN,
-                    new Date(),
-                    new Date());
-            fail();
-        } catch (IllegalArgumentException e) {
-        }
-    }
-
-    @Test
-    public void testNullUserIdThrows() {
-        try {
-            AccessToken token = new AccessToken(
-                    "a token",
-                    "1234",
-                    null,
-                    Utility.arrayList("something"),
-                    Utility.arrayList("something_else"),
-                    AccessTokenSource.CLIENT_TOKEN,
-                    new Date(),
-                    new Date());
-            fail();
-        } catch (IllegalArgumentException e) {
-        }
-    }
-
-    @Test
-    public void testEmptyUserIdThrows() {
-        try {
-            AccessToken token = new AccessToken(
-                    "a token",
-                    "1234",
-                    "",
-                    Utility.arrayList("something"),
-                    Utility.arrayList("something_else"),
-                    AccessTokenSource.CLIENT_TOKEN,
-                    new Date(),
-                    new Date());
-            fail();
-        } catch (IllegalArgumentException e) {
-        }
-    }
-
-    @Test
-    public void testCreateFromRefreshFailure() {
-        AccessToken accessToken = new AccessToken(
-                "a token",
-                "1234",
-                "1000",
-                Utility.arrayList("stream_publish"),
-                null,
-                AccessTokenSource.WEB_VIEW,
-                null,
-                null);
-
-        String token = "AnImaginaryTokenValue";
-
-        Bundle bundle = new Bundle();
-        bundle.putString("access_token", "AnImaginaryTokenValue");
-        bundle.putString("expires_in", "60");
-
-        try {
-            AccessToken.createFromRefresh(accessToken, bundle);
-            fail("Expected exception");
-        } catch (FacebookException ex) {
-            assertEquals("Invalid token source: " + AccessTokenSource.WEB_VIEW, ex.getMessage());
-        }
-    }
-
-    @Test
-    public void testCacheRoundtrip() {
-        Set<String> permissions = Utility.hashSet("stream_publish", "go_outside_and_play");
-        Set<String> declinedPermissions = Utility.hashSet("no you may not", "no soup for you");
-        String token = "AnImaginaryTokenValue";
-        Date later = TestUtils.nowPlusSeconds(60);
-        Date earlier = TestUtils.nowPlusSeconds(-60);
-        String applicationId = "1234";
-
-        Bundle bundle = new Bundle();
-        LegacyTokenHelper.putToken(bundle, token);
-        LegacyTokenHelper.putExpirationDate(bundle, later);
-        LegacyTokenHelper.putSource(
-                bundle,
-                AccessTokenSource.FACEBOOK_APPLICATION_WEB);
-        LegacyTokenHelper.putLastRefreshDate(bundle, earlier);
-        LegacyTokenHelper.putPermissions(bundle, permissions);
-        LegacyTokenHelper.putDeclinedPermissions(bundle, declinedPermissions);
-        LegacyTokenHelper.putApplicationId(bundle, applicationId);
-
-        AccessToken accessToken = AccessToken.createFromLegacyCache(bundle);
-        TestUtils.assertSamePermissions(permissions, accessToken);
-        assertEquals(token, accessToken.getToken());
-        assertEquals(AccessTokenSource.FACEBOOK_APPLICATION_WEB, accessToken.getSource());
-        assertTrue(!accessToken.isExpired());
-
-        Bundle cache = AccessTokenTestHelper.toLegacyCacheBundle(accessToken);
-        TestUtils.assertEqualContentsWithoutOrder(bundle, cache);
-    }
-
-    @Test
-    public void testFromCacheWithMissingApplicationId() {
-        String token = "AnImaginaryTokenValue";
-        String applicationId = "1234";
-
-        Bundle bundle = new Bundle();
-        LegacyTokenHelper.putToken(bundle, token);
-        // no app id
-
-        FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
-        FacebookSdk.setApplicationId(applicationId);
-
-        AccessToken accessToken = AccessToken.createFromLegacyCache(bundle);
-
-        assertEquals(applicationId, accessToken.getApplicationId());
-    }
-
-    @Test
-    public void testCachePutGet() {
-        Bundle bundle = new Bundle();
-
-        for (String token : new String[] { "", "A completely random token value" }) {
-            LegacyTokenHelper.putToken(bundle, token);
-            assertEquals(token, LegacyTokenHelper.getToken(bundle));
-        }
-
-        for (Date date : new Date[] { new Date(42), new Date() }) {
-            LegacyTokenHelper.putExpirationDate(bundle, date);
-            assertEquals(date, LegacyTokenHelper.getExpirationDate(bundle));
-
-            LegacyTokenHelper.putLastRefreshDate(bundle, date);
-            assertEquals(date, LegacyTokenHelper.getLastRefreshDate(bundle));
-        }
-
-        for (long milliseconds : new long[] { 0, -1, System.currentTimeMillis() }) {
-            LegacyTokenHelper.putExpirationMilliseconds(bundle, milliseconds);
-            assertEquals(
-                    milliseconds,
-                    LegacyTokenHelper.getExpirationMilliseconds(bundle));
-
-            LegacyTokenHelper.putLastRefreshMilliseconds(bundle, milliseconds);
-            assertEquals(
-                    milliseconds,
-                    LegacyTokenHelper.getLastRefreshMilliseconds(bundle));
-        }
-
-        for (AccessTokenSource source : AccessTokenSource.values()) {
-            LegacyTokenHelper.putSource(bundle, source);
-            assertEquals(source, LegacyTokenHelper.getSource(bundle));
-        }
-
-        String userId = "1000";
-
-        List<String> normalList = Arrays.asList("", "Another completely random token value");
-        List<String> emptyList = Arrays.asList();
-        HashSet<String> normalArrayList = new HashSet<String>(normalList);
-        HashSet<String> emptyArrayList = new HashSet<String>();
-        @SuppressWarnings("unchecked")
-        List<Collection<String>> permissionLists = Arrays
-                .asList(normalList, emptyList, normalArrayList, emptyArrayList);
-        for (Collection<String> list : permissionLists) {
-            LegacyTokenHelper.putPermissions(bundle, list);
-            TestUtils.assertSamePermissions(
-                    list,
-                    LegacyTokenHelper.getPermissions(bundle));
-        }
-        normalArrayList.add(null);
-    }
-
-    @Test
-    public void testRoundtripJSONObject() throws JSONException {
-        AccessToken accessToken = new AccessToken(
-                "a token",
-                "1234",
-                "1000",
-                Arrays.asList("permission_1", "permission_2"),
-                Arrays.asList("declined permission_1", "declined permission_2"),
-                AccessTokenSource.WEB_VIEW,
-                new Date(2015, 3, 3),
-                new Date(2015, 1, 1));
-
-        JSONObject jsonObject = accessToken.toJSONObject();
-
-        AccessToken deserializedAccessToken = AccessToken.createFromJSONObject(jsonObject);
-
-        assertEquals(accessToken, deserializedAccessToken);
-    }
-
-    @Test
-    public void testParceling() throws IOException {
-        String token = "a token";
-        String appId = "1234";
-        String userId = "1000";
-        Set<String> permissions = new HashSet<String>(
-                Arrays.asList("permission_1", "permission_2"));
-        Set<String> declinedPermissions = new HashSet<String>(
-                Arrays.asList("permission_3"));
-        AccessTokenSource source = AccessTokenSource.WEB_VIEW;
-        AccessToken accessToken1 = new AccessToken(
-                token,
-                appId,
-                userId,
-                permissions,
-                declinedPermissions,
-                source,
-                null,
-                null);
-
-        AccessToken accessToken2 = TestUtils.parcelAndUnparcel(accessToken1);
-        assertEquals(accessToken1, accessToken2);
-        assertEquals(token, accessToken2.getToken());
-        assertEquals(appId, accessToken2.getApplicationId());
-        assertEquals(permissions, accessToken2.getPermissions());
-        assertEquals(declinedPermissions, accessToken2.getDeclinedPermissions());
-        assertEquals(accessToken1.getExpires(), accessToken2.getExpires());
-        assertEquals(accessToken1.getLastRefresh(), accessToken2.getLastRefresh());
-        assertEquals(accessToken1.getUserId(), accessToken2.getUserId());
-    }
-
-    @Test
-    public void testPermissionsAreImmutable() {
-        Set<String> permissions = Utility.hashSet("go to Jail", "do not pass Go");
-        AccessToken accessToken = new AccessToken(
-                "some token",
-                "1234",
-                "1000",
-                permissions,
-                null,
-                AccessTokenSource.FACEBOOK_APPLICATION_WEB,
-                new Date(),
-                new Date());
-
-        permissions = accessToken.getPermissions();
-
-        try {
-            permissions.add("can't touch this");
-            fail();
-        } catch (UnsupportedOperationException ex) {
-        }
-    }
-
-    @Test
-    public void testCreateFromExistingTokenDefaults() {
-        final String token = "A token of my esteem";
-        final String applicationId = "1234";
-        final String userId = "1000";
-
-        AccessToken accessToken = new AccessToken(
-                token,
-                applicationId,
-                userId,
-                null,
-                null,
-                null,
-                null,
-                null);
-
-        assertEquals(token, accessToken.getToken());
-        assertEquals(new Date(Long.MAX_VALUE), accessToken.getExpires());
-        assertEquals(AccessTokenSource.FACEBOOK_APPLICATION_WEB, accessToken.getSource());
-        assertEquals(0, accessToken.getPermissions().size());
-        assertEquals(applicationId, accessToken.getApplicationId());
-        assertEquals(userId, accessToken.getUserId());
-        // Allow slight variation for test execution time
-        long delta = accessToken.getLastRefresh().getTime() - new Date().getTime();
-        assertTrue(delta < 1000);
-    }
-
-    @Test
-    public void testAccessTokenConstructor() {
-        final String token = "A token of my esteem";
-        final Set<String> permissions = Utility.hashSet("walk", "chew gum");
-        final Set<String> declinedPermissions = Utility.hashSet("jump");
-        final Date expires = new Date(2025, 5, 3);
-        final Date lastRefresh = new Date(2023, 8, 15);
-        final AccessTokenSource source = AccessTokenSource.WEB_VIEW;
-        final String applicationId = "1234";
-        final String userId = "1000";
-
-        AccessToken accessToken = new AccessToken(
-                token,
-                applicationId,
-                userId,
-                permissions,
-                declinedPermissions,
-                source,
-                expires,
-                lastRefresh);
-
-        assertEquals(token, accessToken.getToken());
-        assertEquals(expires, accessToken.getExpires());
-        assertEquals(lastRefresh, accessToken.getLastRefresh());
-        assertEquals(source, accessToken.getSource());
-        assertEquals(permissions, accessToken.getPermissions());
-        assertEquals(declinedPermissions, accessToken.getDeclinedPermissions());
-        assertEquals(applicationId, accessToken.getApplicationId());
-        assertEquals(userId, accessToken.getUserId());
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/AccessTokenTestHelper.java b/facebook/src/test/java/com/facebook/AccessTokenTestHelper.java
deleted file mode 100644
index 49bda1adf..000000000
--- a/facebook/src/test/java/com/facebook/AccessTokenTestHelper.java
+++ /dev/null
@@ -1,48 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.os.Bundle;
-
-public final class AccessTokenTestHelper {
-
-    public static Bundle toLegacyCacheBundle(AccessToken accessToken) {
-        Bundle bundle = new Bundle();
-
-        LegacyTokenHelper.putToken(bundle, accessToken.getToken());
-        LegacyTokenHelper.putDate(
-                bundle,
-                LegacyTokenHelper.EXPIRATION_DATE_KEY,
-                accessToken.getExpires());
-        LegacyTokenHelper.putPermissions(bundle, accessToken.getPermissions());
-        LegacyTokenHelper.putDeclinedPermissions(
-                bundle, accessToken.getDeclinedPermissions());
-        LegacyTokenHelper.putSource(bundle, accessToken.getSource());
-        LegacyTokenHelper.putDate(
-                bundle,
-                LegacyTokenHelper.LAST_REFRESH_DATE_KEY,
-                accessToken.getLastRefresh());
-        LegacyTokenHelper.putApplicationId(
-                bundle, accessToken.getApplicationId());
-
-        return bundle;
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/AccessTokenTrackerTest.java b/facebook/src/test/java/com/facebook/AccessTokenTrackerTest.java
deleted file mode 100644
index 670ecfaac..000000000
--- a/facebook/src/test/java/com/facebook/AccessTokenTrackerTest.java
+++ /dev/null
@@ -1,159 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.content.Intent;
-import android.support.v4.content.LocalBroadcastManager;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-
-import java.util.Arrays;
-import java.util.Date;
-import java.util.List;
-
-import static org.junit.Assert.*;
-import static org.powermock.api.mockito.PowerMockito.*;
-
-@PrepareForTest( { FacebookSdk.class })
-public class AccessTokenTrackerTest extends FacebookPowerMockTestCase {
-
-    private final List<String> PERMISSIONS = Arrays.asList("walk", "chew gum");
-    private final Date EXPIRES = new Date(2025, 5, 3);
-    private final Date LAST_REFRESH = new Date(2023, 8, 15);
-    private final String APP_ID = "1234";
-    private final String USER_ID = "1000";
-
-    private LocalBroadcastManager localBroadcastManager;
-    private TestAccessTokenTracker accessTokenTracker = null;
-
-    @Before
-    public void before() throws Exception {
-        mockStatic(FacebookSdk.class);
-        when(FacebookSdk.isInitialized()).thenReturn(true);
-        when(FacebookSdk.getApplicationContext()).thenReturn(RuntimeEnvironment.application);
-
-        localBroadcastManager = LocalBroadcastManager.getInstance(RuntimeEnvironment.application);
-    }
-
-    @After
-    public void after() throws Exception {
-        if (accessTokenTracker != null && accessTokenTracker.isTracking()) {
-            accessTokenTracker.stopTracking();
-        }
-    }
-
-    @Test
-    public void testRequiresSdkToBeInitialized() {
-        try {
-            when(FacebookSdk.isInitialized()).thenReturn(false);
-
-            accessTokenTracker = new TestAccessTokenTracker();
-
-            fail();
-        } catch (FacebookSdkNotInitializedException exception) {
-        }
-    }
-
-    @Test
-    public void testDefaultsToTracking() {
-        accessTokenTracker = new TestAccessTokenTracker();
-
-        assertTrue(accessTokenTracker.isTracking());
-    }
-
-    @Test
-    public void testCanTurnTrackingOff() {
-        accessTokenTracker = new TestAccessTokenTracker();
-
-        accessTokenTracker.stopTracking();
-
-        assertFalse(accessTokenTracker.isTracking());
-    }
-
-    @Test
-    public void testCanTurnTrackingOn() {
-        accessTokenTracker = new TestAccessTokenTracker();
-
-        accessTokenTracker.stopTracking();
-        accessTokenTracker.startTracking();
-
-        assertTrue(accessTokenTracker.isTracking());
-    }
-
-    @Test
-    public void testCallbackCalledOnBroadcastReceived() throws Exception {
-        accessTokenTracker = new TestAccessTokenTracker();
-
-        AccessToken oldAccessToken = createAccessToken("I'm old!");
-        AccessToken currentAccessToken = createAccessToken("I'm current!");
-
-        sendBroadcast(oldAccessToken, currentAccessToken);
-
-
-        assertNotNull(accessTokenTracker.currentAccessToken);
-        assertEquals(currentAccessToken.getToken(), accessTokenTracker.currentAccessToken.getToken());
-        assertNotNull(accessTokenTracker.oldAccessToken);
-        assertEquals(oldAccessToken.getToken(), accessTokenTracker.oldAccessToken.getToken());
-    }
-
-    private AccessToken createAccessToken(String tokenString) {
-        return new AccessToken(
-                tokenString,
-                APP_ID,
-                USER_ID,
-                PERMISSIONS,
-                null,
-                AccessTokenSource.WEB_VIEW,
-                EXPIRES,
-                LAST_REFRESH);
-    }
-
-    private void sendBroadcast(AccessToken oldAccessToken, AccessToken currentAccessToken) {
-        Intent intent = new Intent(AccessTokenManager.ACTION_CURRENT_ACCESS_TOKEN_CHANGED);
-
-        intent.putExtra(AccessTokenManager.EXTRA_OLD_ACCESS_TOKEN, oldAccessToken);
-        intent.putExtra(AccessTokenManager.EXTRA_NEW_ACCESS_TOKEN, currentAccessToken);
-
-        localBroadcastManager.sendBroadcast(intent);
-    }
-
-    class TestAccessTokenTracker extends AccessTokenTracker {
-
-        public AccessToken currentAccessToken;
-        public AccessToken oldAccessToken;
-
-        public TestAccessTokenTracker() {
-            super();
-        }
-
-        @Override
-        protected void onCurrentAccessTokenChanged(AccessToken oldAccessToken,
-            AccessToken currentAccessToken) {
-            this.oldAccessToken = oldAccessToken;
-            this.currentAccessToken = currentAccessToken;
-        }
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/ErrorClassificationTest.java b/facebook/src/test/java/com/facebook/ErrorClassificationTest.java
deleted file mode 100644
index 960ec3658..000000000
--- a/facebook/src/test/java/com/facebook/ErrorClassificationTest.java
+++ /dev/null
@@ -1,102 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import com.facebook.internal.FacebookRequestErrorClassification;
-
-import org.junit.Test;
-
-import static org.junit.Assert.*;
-
-public class ErrorClassificationTest extends FacebookTestCase {
-
-    @Test
-    public void testDefaultErrorClassification() {
-        FacebookRequestErrorClassification errorClassification =
-                FacebookRequestErrorClassification.getDefaultErrorClassification();
-        // Test transient takes precedence
-        assertEquals(
-                FacebookRequestError.Category.TRANSIENT,
-                errorClassification.classify(
-                        FacebookRequestErrorClassification.EC_INVALID_TOKEN,
-                        0,
-                        true)
-        );
-
-        assertEquals(
-                FacebookRequestError.Category.LOGIN_RECOVERABLE,
-                errorClassification.classify(
-                        FacebookRequestErrorClassification.EC_INVALID_SESSION,
-                        0,
-                        false)
-        );
-
-        assertEquals(
-                FacebookRequestError.Category.LOGIN_RECOVERABLE,
-                errorClassification.classify(
-                        FacebookRequestErrorClassification.EC_INVALID_TOKEN,
-                        0,
-                        false)
-        );
-
-        assertEquals(
-                FacebookRequestError.Category.TRANSIENT,
-                errorClassification.classify(
-                        FacebookRequestErrorClassification.EC_SERVICE_UNAVAILABLE,
-                        0,
-                        false)
-        );
-
-        assertEquals(
-                FacebookRequestError.Category.TRANSIENT,
-                errorClassification.classify(
-                        FacebookRequestErrorClassification.EC_APP_TOO_MANY_CALLS,
-                        0,
-                        false)
-        );
-
-
-        assertEquals(
-                FacebookRequestError.Category.TRANSIENT,
-                errorClassification.classify(
-                        FacebookRequestErrorClassification.EC_RATE,
-                        0,
-                        false)
-        );
-
-        assertEquals(
-                FacebookRequestError.Category.TRANSIENT,
-                errorClassification.classify(
-                        FacebookRequestErrorClassification.EC_USER_TOO_MANY_CALLS,
-                        0,
-                        false)
-        );
-
-
-        assertEquals(
-                FacebookRequestError.Category.TRANSIENT,
-                errorClassification.classify(
-                        FacebookRequestErrorClassification.EC_TOO_MANY_USER_ACTION_CALLS,
-                        0,
-                        false)
-        );
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/FacebookContentProviderTest.java b/facebook/src/test/java/com/facebook/FacebookContentProviderTest.java
deleted file mode 100644
index 24f1c28be..000000000
--- a/facebook/src/test/java/com/facebook/FacebookContentProviderTest.java
+++ /dev/null
@@ -1,195 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.net.Uri;
-import android.os.ParcelFileDescriptor;
-import android.util.Pair;
-
-import com.facebook.internal.NativeAppCallAttachmentStore;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.UUID;
-
-import static org.junit.Assert.*;
-import static org.powermock.api.mockito.PowerMockito.mockStatic;
-import static org.powermock.api.mockito.PowerMockito.when;
-
-@PrepareForTest({ NativeAppCallAttachmentStore.class })
-public class FacebookContentProviderTest extends FacebookPowerMockTestCase {
-    private static final String APP_ID = "12345";
-    private static final UUID CALL_ID = UUID.randomUUID();
-    private static final String ATTACHMENT_NAME = "attachMe";
-
-    private FacebookContentProvider providerUnderTest;
-
-    @Before
-    public void before() throws Exception {
-        mockStatic(NativeAppCallAttachmentStore.class);
-        providerUnderTest = new FacebookContentProvider();
-    }
-
-    @Test
-    public void testGetAttachmentUrl() {
-        String url = FacebookContentProvider.getAttachmentUrl(APP_ID, CALL_ID, ATTACHMENT_NAME);
-        assertEquals("content://com.facebook.app.FacebookContentProvider" +
-                APP_ID + "/" + CALL_ID + "/" + ATTACHMENT_NAME, url);
-    }
-
-    @Test
-    public void testOnCreate() throws Exception {
-        assertTrue(providerUnderTest.onCreate());
-    }
-
-    @Test
-    public void testQuery() throws Exception {
-        assertNull(providerUnderTest.query(null, null, null, null, null));
-    }
-
-    @Test
-    public void testGetType() throws Exception {
-        assertNull(providerUnderTest.getType(null));
-    }
-
-    @Test
-    public void testInsert() throws Exception {
-        assertNull(providerUnderTest.insert(null, null));
-    }
-
-    @Test
-    public void testDelete() throws Exception {
-        assertEquals(0, providerUnderTest.delete(null, null, null));
-    }
-
-    @Test
-    public void testUpdate() throws Exception {
-        assertEquals(0, providerUnderTest.update(null, null, null, null));
-    }
-
-    @SuppressWarnings("unused")
-    @Test
-    public void testOpenFileWithNullUri() throws Exception {
-        try {
-            ParcelFileDescriptor pfd = providerUnderTest.openFile(null, "r");
-            fail("expected FileNotFoundException");
-        } catch (FileNotFoundException e) {
-        }
-    }
-
-    @SuppressWarnings("unused")
-    @Test
-    public void testOpenFileWithBadPath() throws Exception {
-        try {
-            ParcelFileDescriptor pfd = providerUnderTest.openFile(Uri.parse("/"), "r");
-            fail("expected FileNotFoundException");
-        } catch (FileNotFoundException e) {
-        }
-    }
-
-    @SuppressWarnings("unused")
-    @Test
-    public void testOpenFileWithoutCallIdAndAttachment() throws Exception {
-        try {
-            ParcelFileDescriptor pfd = providerUnderTest.openFile(Uri.parse("/foo"), "r");
-            fail("expected FileNotFoundException");
-        } catch (FileNotFoundException e) {
-        }
-    }
-
-    @SuppressWarnings("unused")
-    @Test
-    public void testOpenFileWithBadCallID() throws Exception {
-        try {
-            ParcelFileDescriptor pfd = providerUnderTest.openFile(Uri.parse("/foo/bar"), "r");
-            fail("expected FileNotFoundException");
-        } catch (FileNotFoundException e) {
-        }
-    }
-
-    @Test
-    public void testOpenFileWithUnknownUri() throws Exception {
-        try {
-            ParcelFileDescriptor pfd = getTestAttachmentParcelFileDescriptor(UUID.randomUUID());
-            assertNotNull(pfd);
-            pfd.close();
-
-            fail("expected FileNotFoundException");
-        } catch (FileNotFoundException e) {
-        }
-    }
-
-    @Test
-    public void testOpenFileWithKnownUri() throws Exception {
-        MockAttachmentStore.addAttachment(CALL_ID, ATTACHMENT_NAME);
-
-        ParcelFileDescriptor pfd = getTestAttachmentParcelFileDescriptor(CALL_ID);
-        assertNotNull(pfd);
-        pfd.close();
-    }
-
-    private ParcelFileDescriptor getTestAttachmentParcelFileDescriptor(UUID callId)
-            throws Exception {
-        when(NativeAppCallAttachmentStore.openAttachment(callId, ATTACHMENT_NAME))
-                .thenReturn(MockAttachmentStore.openAttachment(callId, ATTACHMENT_NAME));
-
-        Uri uri = Uri.parse(
-                FacebookContentProvider.getAttachmentUrl(APP_ID, callId, ATTACHMENT_NAME));
-
-        return providerUnderTest.openFile(uri, "r");
-    }
-
-    static class MockAttachmentStore {
-        private static List<Pair<UUID, String>> attachments = new ArrayList<>();
-        private static final String DUMMY_FILE_NAME = "dummyfile";
-
-        public static void addAttachment(UUID callId, String attachmentName) {
-            attachments.add(new Pair<>(callId, attachmentName));
-        }
-
-        public static File openAttachment(UUID callId, String attachmentName)
-                throws FileNotFoundException {
-            if (attachments.contains(new Pair<>(callId, attachmentName))) {
-                File cacheDir = RuntimeEnvironment.application.getCacheDir();
-                File dummyFile = new File(cacheDir, DUMMY_FILE_NAME);
-                if (!dummyFile.exists()) {
-                    try {
-                        dummyFile.createNewFile();
-                    } catch (IOException e) {
-                    }
-                }
-
-                return dummyFile;
-            }
-
-            throw new FileNotFoundException();
-        }
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/FacebookGraphRequestErrorTest.java b/facebook/src/test/java/com/facebook/FacebookGraphRequestErrorTest.java
deleted file mode 100644
index 7877efacd..000000000
--- a/facebook/src/test/java/com/facebook/FacebookGraphRequestErrorTest.java
+++ /dev/null
@@ -1,349 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import com.facebook.R;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.junit.Before;
-import org.junit.Test;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-
-import static org.junit.Assert.*;
-
-public class FacebookGraphRequestErrorTest extends FacebookTestCase {
-    public static final String ERROR_SINGLE_RESPONSE =
-            "{\n" +
-            "  \"error\": {\n" +
-            "    \"message\": \"Unknown path components: /unknown\",\n" +
-            "    \"type\": \"OAuthException\",\n" +
-            "    \"code\": 2500\n" +
-            "  }\n" +
-            "}";
-
-    public static final String ERROR_BATCH_RESPONSE =
-            "[\n" +
-            "  {\n" +
-            "    \"headers\": [\n" +
-            "      {\n" +
-            "        \"value\": \"*\",\n" +
-            "        \"name\": \"Access-Control-Allow-Origin\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"no-store\",\n" +
-            "        \"name\": \"Cache-Control\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"close\",\n" +
-            "        \"name\": \"Connection\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"text\\/javascript; charset=UTF-8\",\n" +
-            "        \"name\": \"Content-Type\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"Sat, 01 Jan 2000 00:00:00 GMT\",\n" +
-            "        \"name\": \"Expires\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"no-cache\",\n" +
-            "        \"name\": \"Pragma\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"OAuth \\\"Facebook Platform\\\" \\\"invalid_request\\\" \\\"An active access token must be used to query information about the current user.\\\"\",\n" +
-            "        \"name\": \"WWW-Authenticate\"\n" +
-            "      }\n" +
-            "    ],\n" +
-            "    \"body\": \"{\\\"error\\\":{\\\"message\\\":\\\"An active access token must be used to query information about the current user.\\\",\\\"type\\\":\\\"OAuthException\\\",\\\"code\\\":2500}}\",\n" +
-            "    \"code\": 400\n" +
-            "  },\n" +
-            "  {\n" +
-            "    \"headers\": [\n" +
-            "      {\n" +
-            "        \"value\": \"*\",\n" +
-            "        \"name\": \"Access-Control-Allow-Origin\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"no-store\",\n" +
-            "        \"name\": \"Cache-Control\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"close\",\n" +
-            "        \"name\": \"Connection\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"text\\/javascript; charset=UTF-8\",\n" +
-            "        \"name\": \"Content-Type\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"Sat, 01 Jan 2000 00:00:00 GMT\",\n" +
-            "        \"name\": \"Expires\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"no-cache\",\n" +
-            "        \"name\": \"Pragma\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"OAuth \\\"Facebook Platform\\\" \\\"invalid_request\\\" \\\"An active access token must be used to query information about the current user.\\\"\",\n" +
-            "        \"name\": \"WWW-Authenticate\"\n" +
-            "      }\n" +
-            "    ],\n" +
-            "    \"body\": \"{\\\"error\\\":{\\\"message\\\":\\\"An active access token must be used to query information about the current user.\\\",\\\"type\\\":\\\"OAuthException\\\",\\\"code\\\":2500}}\",\n" +
-            "    \"code\": 400\n" +
-            "  }\n" +
-            "]";
-
-
-    public static final String ERROR_SINGLE_RESPONSE_THROTTLE =
-            "{\n" +
-            "  \"error\": {\n" +
-            "    \"message\": \"Application request limit reached\",\n" +
-            "    \"code\": 4\n" +
-            "  }\n" +
-            "}";
-
-    public static final String ERROR_SINGLE_RESPONSE_SERVER =
-            "{\n" +
-            "  \"error\": {\n" +
-            "    \"message\": \"Some Server Error\",\n" +
-            "    \"code\": 2\n" +
-            "  }\n" +
-            "}";
-
-    public static final String ERROR_SINGLE_RESPONSE_PERMISSION =
-            "{\n" +
-            "  \"error\": {\n" +
-            "    \"type\": \"OAuthException\",\n" +
-            "    \"message\": \"(#200) Requires extended permission: publish_actions\",\n" +
-            "    \"code\": 200\n" +
-            "  }\n" +
-            "}";
-
-    public static final String ERROR_SINGLE_RESPONSE_WEB_LOGIN =
-            "{\n" +
-            "  \"error\": {\n" +
-            "    \"message\": \"User need to login\",\n" +
-            "    \"type\": \"OAuthException\",\n" +
-            "    \"code\": 102,\n" +
-            "    \"error_subcode\": 459\n" +
-            "  }\n" +
-            "}";
-
-    public static final String ERROR_SINGLE_RESPONSE_RELOGIN =
-            "{\n" +
-            "  \"error\": {\n" +
-            "    \"message\": \"User need to relogin\",\n" +
-            "    \"type\": \"OAuthException\",\n" +
-            "    \"code\": 102\n" +
-            "  }\n" +
-            "}";
-
-    public static final String ERROR_SINGLE_RESPONSE_RELOGIN_DELETED_APP =
-            "{\n" +
-            "  \"error\": {\n" +
-            "    \"message\": \"User need to relogin\",\n" +
-            "    \"type\": \"OAuthException\",\n" +
-            "    \"code\": 190,\n" +
-            "    \"error_subcode\": 458\n" +
-            "  }\n" +
-            "}";
-
-    @Before
-    public void before() throws Exception {
-        FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
-    }
-
-    @Test
-    public void testClientException() {
-        final String errorMsg = "some error happened";
-        FacebookRequestError error =
-                new FacebookRequestError(null, new FacebookException(errorMsg));
-        assertEquals(errorMsg, error.getErrorMessage());
-        assertEquals(FacebookRequestError.Category.OTHER, error.getCategory());
-        assertEquals(FacebookRequestError.INVALID_ERROR_CODE, error.getErrorCode());
-        assertEquals(FacebookRequestError.INVALID_HTTP_STATUS_CODE, error.getRequestStatusCode());
-    }
-
-    @Test
-    public void testSingleRequestWithoutBody() throws JSONException {
-        JSONObject withStatusCode = new JSONObject();
-        withStatusCode.put("code", 400);
-        FacebookRequestError error =
-                FacebookRequestError.checkResponseAndCreateError(
-                        withStatusCode, withStatusCode, null);
-        assertNotNull(error);
-        assertEquals(400, error.getRequestStatusCode());
-        assertEquals(FacebookRequestError.Category.OTHER, error.getCategory());
-    }
-
-    @Test
-    public void testSingleErrorWithBody() throws JSONException {
-        JSONObject originalResponse = new JSONObject(ERROR_SINGLE_RESPONSE);
-        JSONObject withStatusCodeAndBody = new JSONObject();
-        withStatusCodeAndBody.put("code", 400);
-        withStatusCodeAndBody.put("body", originalResponse);
-        FacebookRequestError error =
-                FacebookRequestError.checkResponseAndCreateError(
-                        withStatusCodeAndBody, originalResponse, null);
-        assertNotNull(error);
-        assertEquals(400, error.getRequestStatusCode());
-        assertEquals("Unknown path components: /unknown", error.getErrorMessage());
-        assertEquals("OAuthException", error.getErrorType());
-        assertEquals(2500, error.getErrorCode());
-        assertTrue(error.getBatchRequestResult() instanceof JSONObject);
-        assertEquals(FacebookRequestError.Category.OTHER, error.getCategory());
-    }
-
-    @Test
-    public void testBatchRequest() throws JSONException {
-        JSONArray batchResponse = new JSONArray(ERROR_BATCH_RESPONSE);
-        assertEquals(2, batchResponse.length());
-        JSONObject firstResponse = (JSONObject) batchResponse.get(0);
-        FacebookRequestError error =
-                FacebookRequestError.checkResponseAndCreateError(
-                        firstResponse, batchResponse, null);
-        assertNotNull(error);
-        assertEquals(400, error.getRequestStatusCode());
-        assertEquals("An active access token must be used to query information about the current user.",
-                error.getErrorMessage());
-        assertEquals("OAuthException", error.getErrorType());
-        assertEquals(2500, error.getErrorCode());
-        assertTrue(error.getBatchRequestResult() instanceof  JSONArray);
-        assertEquals(FacebookRequestError.Category.OTHER, error.getCategory());
-    }
-
-    @Test
-    public void testSingleThrottledError() throws JSONException {
-        JSONObject originalResponse = new JSONObject(ERROR_SINGLE_RESPONSE_THROTTLE);
-        JSONObject withStatusCodeAndBody = new JSONObject();
-        withStatusCodeAndBody.put("code", 403);
-        withStatusCodeAndBody.put("body", originalResponse);
-        FacebookRequestError error =
-                FacebookRequestError.checkResponseAndCreateError(
-                        withStatusCodeAndBody, originalResponse, null);
-        assertNotNull(error);
-        assertEquals(403, error.getRequestStatusCode());
-        assertEquals("Application request limit reached", error.getErrorMessage());
-        assertNull(error.getErrorType());
-        assertEquals(4, error.getErrorCode());
-        assertTrue(error.getBatchRequestResult() instanceof JSONObject);
-        assertEquals(FacebookRequestError.Category.TRANSIENT, error.getCategory());
-    }
-
-    @Test
-    public void testSingleServerError() throws JSONException {
-        JSONObject originalResponse = new JSONObject(ERROR_SINGLE_RESPONSE_SERVER);
-        JSONObject withStatusCodeAndBody = new JSONObject();
-        withStatusCodeAndBody.put("code", 500);
-        withStatusCodeAndBody.put("body", originalResponse);
-        FacebookRequestError error =
-                FacebookRequestError.checkResponseAndCreateError(
-                        withStatusCodeAndBody, originalResponse, null);
-        assertNotNull(error);
-        assertEquals(500, error.getRequestStatusCode());
-        assertEquals("Some Server Error", error.getErrorMessage());
-        assertNull(error.getErrorType());
-        assertEquals(2, error.getErrorCode());
-        assertTrue(error.getBatchRequestResult() instanceof JSONObject);
-        assertEquals(FacebookRequestError.Category.TRANSIENT, error.getCategory());
-    }
-
-    @Test
-    public void testSinglePermissionError() throws JSONException {
-        JSONObject originalResponse = new JSONObject(ERROR_SINGLE_RESPONSE_PERMISSION);
-        JSONObject withStatusCodeAndBody = new JSONObject();
-        withStatusCodeAndBody.put("code", 400);
-        withStatusCodeAndBody.put("body", originalResponse);
-        FacebookRequestError error =
-                FacebookRequestError.checkResponseAndCreateError(
-                        withStatusCodeAndBody, originalResponse, null);
-        assertNotNull(error);
-        assertEquals(400, error.getRequestStatusCode());
-        assertEquals(
-                "(#200) Requires extended permission: publish_actions",
-                error.getErrorMessage());
-        assertEquals("OAuthException", error.getErrorType());
-        assertEquals(200, error.getErrorCode());
-        assertEquals(FacebookRequestError.INVALID_ERROR_CODE, error.getSubErrorCode());
-        assertTrue(error.getBatchRequestResult() instanceof JSONObject);
-        assertEquals(FacebookRequestError.Category.OTHER, error.getCategory());
-    }
-
-    @Test
-    public void testSingleWebLoginError() throws JSONException {
-        JSONObject originalResponse = new JSONObject(ERROR_SINGLE_RESPONSE_WEB_LOGIN);
-        JSONObject withStatusCodeAndBody = new JSONObject();
-        withStatusCodeAndBody.put("code", 400);
-        withStatusCodeAndBody.put("body", originalResponse);
-        FacebookRequestError error =
-                FacebookRequestError.checkResponseAndCreateError(
-                        withStatusCodeAndBody, originalResponse, null);
-        assertNotNull(error);
-        assertEquals(400, error.getRequestStatusCode());
-        assertEquals("User need to login", error.getErrorMessage());
-        assertEquals("OAuthException", error.getErrorType());
-        assertEquals(102, error.getErrorCode());
-        assertEquals(459, error.getSubErrorCode());
-        assertTrue(error.getBatchRequestResult() instanceof JSONObject);
-        assertEquals(FacebookRequestError.Category.LOGIN_RECOVERABLE, error.getCategory());
-    }
-
-    @Test
-    public void testSingleReloginError() throws JSONException {
-        JSONObject originalResponse = new JSONObject(ERROR_SINGLE_RESPONSE_RELOGIN);
-        JSONObject withStatusCodeAndBody = new JSONObject();
-        withStatusCodeAndBody.put("code", 400);
-        withStatusCodeAndBody.put("body", originalResponse);
-        FacebookRequestError error =
-                FacebookRequestError.checkResponseAndCreateError(
-                        withStatusCodeAndBody, originalResponse, null);
-        assertNotNull(error);
-        assertEquals(400, error.getRequestStatusCode());
-        assertEquals("User need to relogin", error.getErrorMessage());
-        assertEquals("OAuthException", error.getErrorType());
-        assertEquals(102, error.getErrorCode());
-        assertEquals(FacebookRequestError.INVALID_ERROR_CODE, error.getSubErrorCode());
-        assertTrue(error.getBatchRequestResult() instanceof JSONObject);
-        assertEquals(FacebookRequestError.Category.LOGIN_RECOVERABLE, error.getCategory());
-    }
-
-    @Test
-    public void testSingleReloginDeletedAppError() throws JSONException {
-        JSONObject originalResponse = new JSONObject(ERROR_SINGLE_RESPONSE_RELOGIN_DELETED_APP);
-        JSONObject withStatusCodeAndBody = new JSONObject();
-        withStatusCodeAndBody.put("code", 400);
-        withStatusCodeAndBody.put("body", originalResponse);
-        FacebookRequestError error =
-                FacebookRequestError.checkResponseAndCreateError(
-                        withStatusCodeAndBody, originalResponse, null);
-        assertNotNull(error);
-        assertEquals(400, error.getRequestStatusCode());
-        assertEquals("User need to relogin", error.getErrorMessage());
-        assertEquals("OAuthException", error.getErrorType());
-        assertEquals(190, error.getErrorCode());
-        assertEquals(458, error.getSubErrorCode());
-        assertTrue(error.getBatchRequestResult() instanceof JSONObject);
-        assertEquals(FacebookRequestError.Category.LOGIN_RECOVERABLE, error.getCategory());
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/FacebookPowerMockTestCase.java b/facebook/src/test/java/com/facebook/FacebookPowerMockTestCase.java
deleted file mode 100644
index 6d8b835c8..000000000
--- a/facebook/src/test/java/com/facebook/FacebookPowerMockTestCase.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.runner.RunWith;
-import org.mockito.MockitoAnnotations;
-import org.powermock.core.classloader.annotations.PowerMockIgnore;
-import org.powermock.modules.junit4.rule.PowerMockRule;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowLog;
-
-// ShadowLog is used to redirect the android.util.Log calls to System.out
-@Config(shadows = {ShadowLog.class}, manifest = Config.NONE)
-@RunWith(RobolectricTestRunner.class)
-@PowerMockIgnore({ "org.mockito.*", "org.robolectric.*", "android.*", "org.json.*" })
-
-/**
- * Base class for PowerMock tests.
- * Important: the classes that derive from this should end with Test (i.e. not Tests) otherwise the
- * gradle task "test" doesn't pick them up.
- */
-public abstract class FacebookPowerMockTestCase {
-    @Rule
-    public PowerMockRule rule = new PowerMockRule();
-
-    @Before
-    public void setUp() {
-        ShadowLog.stream = System.out;
-        MockitoAnnotations.initMocks(this);
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/FacebookSdkPowerMockTest.java b/facebook/src/test/java/com/facebook/FacebookSdkPowerMockTest.java
deleted file mode 100644
index 3893e5c16..000000000
--- a/facebook/src/test/java/com/facebook/FacebookSdkPowerMockTest.java
+++ /dev/null
@@ -1,196 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.content.Context;
-import android.content.pm.ApplicationInfo;
-import android.content.pm.PackageManager;
-import android.os.Bundle;
-import android.os.ConditionVariable;
-
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.internal.ServerProtocol;
-import com.facebook.internal.Utility;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.powermock.reflect.Whitebox;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-
-import java.util.concurrent.Executor;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-import static org.powermock.api.support.membermodification.MemberMatcher.method;
-import static org.powermock.api.support.membermodification.MemberModifier.stub;
-
-@PrepareForTest({ FacebookSdk.class, Utility.class })
-public final class FacebookSdkPowerMockTest extends FacebookPowerMockTestCase {
-
-    @Before
-    public void before() {
-        Whitebox.setInternalState(FacebookSdk.class, "callbackRequestCodeOffset", 0xface);
-        Whitebox.setInternalState(FacebookSdk.class, "sdkInitialized", false);
-        stub(method(Utility.class, "loadAppSettingsAsync")).toReturn(null);
-
-    }
-
-    @Test
-    public void testGetExecutor() {
-        final ConditionVariable condition = new ConditionVariable();
-
-        FacebookSdk.getExecutor().execute(new Runnable() {
-            @Override
-            public void run() {
-                condition.open();
-            }
-        });
-
-        boolean success = condition.block(5000);
-        assertTrue(success);
-    }
-
-    @Test
-    public void testSetExecutor() {
-        final ConditionVariable condition = new ConditionVariable();
-
-        final Runnable runnable = new Runnable() {
-            @Override
-            public void run() { }
-        };
-
-        final Executor executor = new Executor() {
-            @Override
-            public void execute(Runnable command) {
-                assertEquals(runnable, command);
-                command.run();
-
-                condition.open();
-            }
-        };
-
-        Executor original = FacebookSdk.getExecutor();
-        try {
-            FacebookSdk.setExecutor(executor);
-            FacebookSdk.getExecutor().execute(runnable);
-
-            boolean success = condition.block(5000);
-            assertTrue(success);
-        } finally {
-            FacebookSdk.setExecutor(original);
-        }
-    }
-
-    @Test
-    public void testFacebookDomain() {
-        FacebookSdk.setFacebookDomain("beta.facebook.com");
-
-        String graphUrlBase = ServerProtocol.getGraphUrlBase();
-        assertEquals("https://graph.beta.facebook.com", graphUrlBase);
-
-        FacebookSdk.setFacebookDomain("facebook.com");
-    }
-
-    @Test
-    public void testLoadDefaults() throws Exception {
-        stub(method(FacebookSdk.class, "isInitialized")).toReturn(true);
-        FacebookSdk.loadDefaultsFromMetadata(mockContextWithAppIdAndClientToken());
-
-        assertEquals("1234", FacebookSdk.getApplicationId());
-        assertEquals("abcd", FacebookSdk.getClientToken());
-    }
-
-
-    private Context mockContextWithAppIdAndClientToken() throws Exception {
-        Bundle bundle = mock(Bundle.class);
-
-        when(bundle.get(FacebookSdk.APPLICATION_ID_PROPERTY)).thenReturn("1234");
-        when(bundle.getString(FacebookSdk.CLIENT_TOKEN_PROPERTY)).thenReturn("abcd");
-        ApplicationInfo applicationInfo = mock(ApplicationInfo.class);
-        applicationInfo.metaData = bundle;
-
-        PackageManager packageManager = mock(PackageManager.class);
-        when(packageManager.getApplicationInfo("packageName", PackageManager.GET_META_DATA))
-                .thenReturn(applicationInfo);
-
-        Context context = mock(Context.class);
-        when(context.getPackageName()).thenReturn("packageName");
-        when(context.getPackageManager()).thenReturn(packageManager);
-        return context;
-    }
-
-    @Test
-    public void testLoadDefaultsDoesNotOverwrite() throws Exception {
-        stub(method(FacebookSdk.class, "isInitialized")).toReturn(true);
-        FacebookSdk.setApplicationId("hello");
-        FacebookSdk.setClientToken("world");
-
-        FacebookSdk.loadDefaultsFromMetadata(mockContextWithAppIdAndClientToken());
-
-        assertEquals("hello", FacebookSdk.getApplicationId());
-        assertEquals("world", FacebookSdk.getClientToken());
-    }
-
-    @Test
-    public void testRequestCodeOffsetAfterInit() throws Exception {
-        FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
-
-        try {
-            FacebookSdk.sdkInitialize(RuntimeEnvironment.application, 1000);
-            fail();
-        } catch (FacebookException exception) {
-            assertEquals(FacebookSdk.CALLBACK_OFFSET_CHANGED_AFTER_INIT, exception.getMessage());
-        }
-    }
-
-    @Test
-    public void testRequestCodeOffsetNegative() throws Exception {
-        try {
-            // last bit set, so negative
-            FacebookSdk.sdkInitialize(RuntimeEnvironment.application, 0xFACEB00C);
-            fail();
-        } catch (FacebookException exception) {
-            assertEquals(FacebookSdk.CALLBACK_OFFSET_NEGATIVE, exception.getMessage());
-        }
-    }
-
-    @Test
-    public void testRequestCodeOffset() throws Exception {
-        FacebookSdk.sdkInitialize(RuntimeEnvironment.application, 1000);
-        assertEquals(1000, FacebookSdk.getCallbackRequestCodeOffset());
-    }
-
-    @Test
-    public void testRequestCodeRange() {
-        FacebookSdk.sdkInitialize(RuntimeEnvironment.application, 1000);
-        assertTrue(FacebookSdk.isFacebookRequestCode(1000));
-        assertTrue(FacebookSdk.isFacebookRequestCode(1099));
-        assertFalse(FacebookSdk.isFacebookRequestCode(999));
-        assertFalse(FacebookSdk.isFacebookRequestCode(1100));
-        assertFalse(FacebookSdk.isFacebookRequestCode(0));
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/FacebookTestCase.java b/facebook/src/test/java/com/facebook/FacebookTestCase.java
deleted file mode 100644
index 8bb781884..000000000
--- a/facebook/src/test/java/com/facebook/FacebookTestCase.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import org.junit.Before;
-import org.junit.runner.RunWith;
-import org.mockito.MockitoAnnotations;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowLog;
-
-// ShadowLog is used to redirect the android.util.Log calls to System.out
-@Config(shadows = {ShadowLog.class}, manifest = "src/test/AndroidManifest.xml", sdk = 21)
-@RunWith(RobolectricTestRunner.class)
-
-/**
- * Base class for Robolectric tests.
- * Important: the classes that derive from this should end with Test (i.e. not Tests) otherwise the
- * gradle task "test" doesn't pick them up.
- */
-public abstract class FacebookTestCase {
-    @Before
-    public void setUp() {
-        ShadowLog.stream = System.out;
-        MockitoAnnotations.initMocks(this);
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/GraphErrorTest.java b/facebook/src/test/java/com/facebook/GraphErrorTest.java
deleted file mode 100644
index 23fcc6000..000000000
--- a/facebook/src/test/java/com/facebook/GraphErrorTest.java
+++ /dev/null
@@ -1,89 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import com.facebook.internal.FacebookRequestErrorClassification;
-import com.facebook.internal.Utility;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.junit.Before;
-import org.junit.Test;
-import org.powermock.api.mockito.PowerMockito;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-
-import java.io.IOException;
-import java.net.HttpURLConnection;
-
-import static org.junit.Assert.*;
-import static org.powermock.api.mockito.PowerMockito.doNothing;
-import static org.powermock.api.mockito.PowerMockito.mock;
-import static org.powermock.api.mockito.PowerMockito.mockStatic;
-import static org.powermock.api.mockito.PowerMockito.when;
-import static org.powermock.api.support.membermodification.MemberMatcher.method;
-import static org.powermock.api.support.membermodification.MemberModifier.stub;
-import static org.powermock.api.support.membermodification.MemberModifier.suppress;
-
-@PrepareForTest( {
-        AccessToken.class,
-        AccessTokenCache.class,
-        FacebookSdk.class,
-        GraphRequest.class,
-        Utility.class
-})
-public final class GraphErrorTest extends FacebookPowerMockTestCase {
-
-    @Before
-    public void before() throws Exception {
-        mockStatic(FacebookSdk.class);
-        suppress(method(Utility.class, "clearFacebookCookies"));
-        when(FacebookSdk.isInitialized()).thenReturn(true);
-        when(FacebookSdk.getApplicationContext()).thenReturn(RuntimeEnvironment.application);
-        stub(method(AccessTokenCache.class, "save")).toReturn(null);
-    }
-
-    @Test
-    public void testAccessTokenResetOnTokenError() throws JSONException, IOException {
-        AccessToken accessToken = mock(AccessToken.class);
-        AccessToken.setCurrentAccessToken(accessToken);
-
-        JSONObject errorBody = new JSONObject();
-        errorBody.put("message", "Invalid OAuth access token.");
-        errorBody.put("type", "OAuthException");
-        errorBody.put("code", FacebookRequestErrorClassification.EC_INVALID_TOKEN);
-        JSONObject error = new JSONObject();
-        error.put("error", errorBody);
-        String errorString = error.toString();
-
-        HttpURLConnection connection = mock(HttpURLConnection.class);
-        when(connection.getResponseCode()).thenReturn(400);
-
-        GraphRequest request = mock(GraphRequest.class);
-        when(request.getAccessToken()).thenReturn(accessToken);
-        GraphRequestBatch batch = new GraphRequestBatch(request);
-
-        assertNotNull(AccessToken.getCurrentAccessToken());
-        GraphResponse.createResponsesFromString(errorString, connection, batch);
-        assertNull(AccessToken.getCurrentAccessToken());
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/GraphRequestTest.java b/facebook/src/test/java/com/facebook/GraphRequestTest.java
deleted file mode 100644
index 3aca6e1c5..000000000
--- a/facebook/src/test/java/com/facebook/GraphRequestTest.java
+++ /dev/null
@@ -1,236 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.graphics.Bitmap;
-import android.location.Location;
-import android.net.Uri;
-import android.os.Bundle;
-
-import com.facebook.internal.GraphUtil;
-import com.facebook.internal.ServerProtocol;
-import com.facebook.share.internal.ShareInternalUtility;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.junit.Before;
-import org.junit.Test;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-
-import java.net.HttpURLConnection;
-
-import static org.junit.Assert.*;
-import static org.powermock.api.mockito.PowerMockito.mockStatic;
-import static org.powermock.api.mockito.PowerMockito.when;
-
-@PrepareForTest( { FacebookSdk.class, AccessTokenManager.class })
-public class GraphRequestTest extends FacebookPowerMockTestCase {
-
-    @Before
-    public void before() {
-        mockStatic(FacebookSdk.class);
-        when(FacebookSdk.isInitialized()).thenReturn(true);
-        when(FacebookSdk.getApplicationId()).thenReturn("1234");
-        when(FacebookSdk.getClientToken()).thenReturn("5678");
-    }
-
-    @Test
-    public void testCreateRequest() {
-        GraphRequest request = new GraphRequest();
-        assertTrue(request != null);
-        assertEquals(HttpMethod.GET, request.getHttpMethod());
-    }
-
-    @Test
-    public void testCreatePostRequest() {
-        JSONObject graphObject = new JSONObject();
-        GraphRequest request = GraphRequest.newPostRequest(null, "me/statuses", graphObject, null);
-        assertTrue(request != null);
-        assertEquals(HttpMethod.POST, request.getHttpMethod());
-        assertEquals("me/statuses", request.getGraphPath());
-        assertEquals(graphObject, request.getGraphObject());
-    }
-
-    @Test
-    public void testCreateMeRequest() {
-        GraphRequest request = GraphRequest.newMeRequest(null, null);
-        assertTrue(request != null);
-        assertEquals(HttpMethod.GET, request.getHttpMethod());
-        assertEquals("me", request.getGraphPath());
-    }
-
-    @Test
-    public void testCreateMyFriendsRequest() {
-        GraphRequest request = GraphRequest.newMyFriendsRequest(null, null);
-        assertTrue(request != null);
-        assertEquals(HttpMethod.GET, request.getHttpMethod());
-        assertEquals("me/friends", request.getGraphPath());
-    }
-
-    @Test
-    public void testCreateUploadPhotoRequest() {
-        Bitmap image = Bitmap.createBitmap(128, 128, Bitmap.Config.ALPHA_8);
-
-        GraphRequest request =
-                GraphRequest.newUploadPhotoRequest(
-                        null,
-                        ShareInternalUtility.MY_PHOTOS,
-                        image,
-                        null,
-                        null,
-                        null);
-        assertTrue(request != null);
-
-        Bundle parameters = request.getParameters();
-        assertTrue(parameters != null);
-
-        assertTrue(parameters.containsKey("picture"));
-        assertEquals(image, parameters.getParcelable("picture"));
-        assertEquals("me/photos", request.getGraphPath());
-    }
-
-    @Test
-    public void testCreatePlacesSearchRequestWithLocation() {
-        Location location = new Location("");
-        location.setLatitude(47.6204);
-        location.setLongitude(-122.3491);
-
-        GraphRequest request = GraphRequest.newPlacesSearchRequest(null, location, 1000, 50, null, null);
-
-        assertTrue(request != null);
-        assertEquals(HttpMethod.GET, request.getHttpMethod());
-        assertEquals("search", request.getGraphPath());
-    }
-
-    @Test
-    public void testCreatePlacesSearchRequestWithSearchText() {
-        GraphRequest request = GraphRequest.newPlacesSearchRequest(null, null, 1000, 50, "Starbucks", null);
-
-        assertTrue(request != null);
-        assertEquals(HttpMethod.GET, request.getHttpMethod());
-        assertEquals("search", request.getGraphPath());
-    }
-
-    @Test
-    public void testCreatePlacesSearchRequestRequiresLocationOrSearchText() {
-        try {
-            GraphRequest.newPlacesSearchRequest(null, null, 1000, 50, null, null);
-            fail("expected exception");
-        } catch (FacebookException exception) {
-            // Success
-        }
-    }
-
-    @Test
-    public void testSetHttpMethodToNilGivesDefault() {
-        GraphRequest request = new GraphRequest();
-        assertEquals(HttpMethod.GET, request.getHttpMethod());
-
-        request.setHttpMethod(null);
-        assertEquals(HttpMethod.GET, request.getHttpMethod());
-    }
-
-    @Test
-    public void testExecuteBatchWithNullRequestsThrows() {
-        try {
-            GraphRequest.executeBatchAndWait((GraphRequest[]) null);
-            fail("expected NullPointerException");
-        } catch (NullPointerException exception) {
-        }
-    }
-
-    @Test
-    public void testExecuteBatchWithZeroRequestsThrows() {
-        try {
-            GraphRequest.executeBatchAndWait(new GraphRequest[]{});
-            fail("expected IllegalArgumentException");
-        } catch (IllegalArgumentException exception) {
-        }
-    }
-
-    @Test
-    public void testExecuteBatchWithNullRequestThrows() {
-        try {
-            GraphRequest.executeBatchAndWait(new GraphRequest[]{null});
-            fail("expected NullPointerException");
-        } catch (NullPointerException exception) {
-        }
-    }
-
-    @Test
-    public void testToHttpConnectionWithNullRequestsThrows() {
-        try {
-            GraphRequest.toHttpConnection((GraphRequest[]) null);
-            fail("expected NullPointerException");
-        } catch (NullPointerException exception) {
-        }
-    }
-
-    @Test
-    public void testToHttpConnectionWithZeroRequestsThrows() {
-        try {
-            GraphRequest.toHttpConnection(new GraphRequest[]{});
-            fail("expected IllegalArgumentException");
-        } catch (IllegalArgumentException exception) {
-        }
-    }
-
-    @Test
-    public void testToHttpConnectionWithNullRequestThrows() {
-        try {
-            GraphRequest.toHttpConnection(new GraphRequest[]{null});
-            fail("expected NullPointerException");
-        } catch (NullPointerException exception) {
-        }
-    }
-
-    @Test
-    public void testSingleGetToHttpRequest() throws Exception {
-        GraphRequest requestMe = new GraphRequest(null, "TourEiffel");
-        HttpURLConnection connection = GraphRequest.toHttpConnection(requestMe);
-
-        assertTrue(connection != null);
-
-        assertEquals("GET", connection.getRequestMethod());
-        assertEquals("/" + ServerProtocol.getAPIVersion() + "/TourEiffel",
-            connection.getURL().getPath());
-
-        assertTrue(connection.getRequestProperty("User-Agent").startsWith("FBAndroidSDK"));
-
-        Uri uri = Uri.parse(connection.getURL().toString());
-        assertEquals("android", uri.getQueryParameter("sdk"));
-        assertEquals("json", uri.getQueryParameter("format"));
-    }
-
-    @Test
-    public void testBuildsClientTokenIfNeeded() throws Exception {
-        GraphRequest requestMe = new GraphRequest(null, "TourEiffel");
-        HttpURLConnection connection = GraphRequest.toHttpConnection(requestMe);
-
-        assertTrue(connection != null);
-
-        Uri uri = Uri.parse(connection.getURL().toString());
-        String accessToken = uri.getQueryParameter("access_token");
-        assertNotNull(accessToken);
-        assertTrue(accessToken.contains(FacebookSdk.getApplicationId()));
-        assertTrue(accessToken.contains(FacebookSdk.getClientToken()));
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/GraphUtilTest.java b/facebook/src/test/java/com/facebook/GraphUtilTest.java
deleted file mode 100644
index a89fcf846..000000000
--- a/facebook/src/test/java/com/facebook/GraphUtilTest.java
+++ /dev/null
@@ -1,41 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import com.facebook.internal.GraphUtil;
-import com.facebook.internal.NativeProtocol;
-
-import org.json.JSONObject;
-import org.junit.Test;
-
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-import static org.junit.Assert.*;
-
-public class GraphUtilTest extends FacebookTestCase {
-    @Test
-    public void testIsOpenGraphObjectForPost() {
-        JSONObject jsonObject = mock(JSONObject.class);
-        when(jsonObject.optBoolean(NativeProtocol.OPEN_GRAPH_CREATE_OBJECT_KEY)).thenReturn(true);
-        assertTrue(GraphUtil.isOpenGraphObjectForPost(jsonObject));
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/LegacyTokenCacheTest.java b/facebook/src/test/java/com/facebook/LegacyTokenCacheTest.java
deleted file mode 100644
index c7a80713b..000000000
--- a/facebook/src/test/java/com/facebook/LegacyTokenCacheTest.java
+++ /dev/null
@@ -1,383 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.os.Bundle;
-
-import com.facebook.internal.Utility;
-
-import org.json.JSONObject;
-import org.junit.Before;
-import org.junit.Test;
-import org.powermock.api.mockito.PowerMockito;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-
-import java.lang.reflect.Array;
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Random;
-import java.util.Set;
-
-import static org.junit.Assert.*;
-import static org.powermock.api.support.membermodification.MemberModifier.stub;
-
-@PrepareForTest( {Utility.class})
-public final class LegacyTokenCacheTest extends FacebookPowerMockTestCase {
-
-    private static final String BOOLEAN_KEY = "booleanKey";
-    private static final String BOOLEAN_ARRAY_KEY = "booleanArrayKey";
-    private static final String BYTE_KEY = "byteKey";
-    private static final String BYTE_ARRAY_KEY = "byteArrayKey";
-    private static final String SHORT_KEY = "shortKey";
-    private static final String SHORT_ARRAY_KEY = "shortArrayKey";
-    private static final String INT_KEY = "intKey";
-    private static final String INT_ARRAY_KEY = "intArrayKey";
-    private static final String LONG_KEY = "longKey";
-    private static final String LONG_ARRAY_KEY = "longArrayKey";
-    private static final String FLOAT_ARRAY_KEY = "floatKey";
-    private static final String FLOAT_KEY = "floatArrayKey";
-    private static final String DOUBLE_KEY = "doubleKey";
-    private static final String DOUBLE_ARRAY_KEY = "doubleArrayKey";
-    private static final String CHAR_KEY = "charKey";
-    private static final String CHAR_ARRAY_KEY = "charArrayKey";
-    private static final String STRING_KEY = "stringKey";
-    private static final String STRING_LIST_KEY = "stringListKey";
-    private static final String SERIALIZABLE_KEY = "serializableKey";
-
-    private static Random random = new Random((new Date()).getTime());
-
-    @Override
-    public void setUp() {
-        super.setUp();
-
-        FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
-    }
-
-    @Before
-    public void before() throws Exception {
-        stub(PowerMockito.method(Utility.class, "awaitGetGraphMeRequestWithCache")).toReturn(
-                new JSONObject().put("id", "1000"));
-    }
-
-    @Test
-    public void testAllTypes() {
-        Bundle originalBundle = new Bundle();
-
-        putBoolean(BOOLEAN_KEY, originalBundle);
-        putBooleanArray(BOOLEAN_ARRAY_KEY, originalBundle);
-        putByte(BYTE_KEY, originalBundle);
-        putByteArray(BYTE_ARRAY_KEY, originalBundle);
-        putShort(SHORT_KEY, originalBundle);
-        putShortArray(SHORT_ARRAY_KEY, originalBundle);
-        putInt(INT_KEY, originalBundle);
-        putIntArray(INT_ARRAY_KEY, originalBundle);
-        putLong(LONG_KEY, originalBundle);
-        putLongArray(LONG_ARRAY_KEY, originalBundle);
-        putFloat(FLOAT_KEY, originalBundle);
-        putFloatArray(FLOAT_ARRAY_KEY, originalBundle);
-        putDouble(DOUBLE_KEY, originalBundle);
-        putDoubleArray(DOUBLE_ARRAY_KEY, originalBundle);
-        putChar(CHAR_KEY, originalBundle);
-        putCharArray(CHAR_ARRAY_KEY, originalBundle);
-        putString(STRING_KEY, originalBundle);
-        putStringList(STRING_LIST_KEY, originalBundle);
-        originalBundle.putSerializable(SERIALIZABLE_KEY, AccessTokenSource.FACEBOOK_APPLICATION_WEB);
-
-        ensureApplicationContext();
-
-        LegacyTokenHelper cache = new LegacyTokenHelper(RuntimeEnvironment.application);
-        cache.save(originalBundle);
-
-        LegacyTokenHelper cache2 = new LegacyTokenHelper(RuntimeEnvironment.application);
-        Bundle cachedBundle = cache2.load();
-
-        assertEquals(originalBundle.getBoolean(BOOLEAN_KEY), cachedBundle.getBoolean(BOOLEAN_KEY));
-        assertArrayEquals(originalBundle.getBooleanArray(BOOLEAN_ARRAY_KEY), cachedBundle.getBooleanArray(BOOLEAN_ARRAY_KEY));
-        assertEquals(originalBundle.getByte(BYTE_KEY), cachedBundle.getByte(BYTE_KEY));
-        assertArrayEquals(originalBundle.getByteArray(BYTE_ARRAY_KEY), cachedBundle.getByteArray(BYTE_ARRAY_KEY));
-        assertEquals(originalBundle.getShort(SHORT_KEY), cachedBundle.getShort(SHORT_KEY));
-        assertArrayEquals(originalBundle.getShortArray(SHORT_ARRAY_KEY), cachedBundle.getShortArray(SHORT_ARRAY_KEY));
-        assertEquals(originalBundle.getInt(INT_KEY), cachedBundle.getInt(INT_KEY));
-        assertArrayEquals(originalBundle.getIntArray(INT_ARRAY_KEY), cachedBundle.getIntArray(INT_ARRAY_KEY));
-        assertEquals(originalBundle.getLong(LONG_KEY), cachedBundle.getLong(LONG_KEY));
-        assertArrayEquals(originalBundle.getLongArray(LONG_ARRAY_KEY), cachedBundle.getLongArray(LONG_ARRAY_KEY));
-        assertEquals(originalBundle.getFloat(FLOAT_KEY), cachedBundle.getFloat(FLOAT_KEY), TestUtils.DOUBLE_EQUALS_DELTA);
-        assertArrayEquals(originalBundle.getFloatArray(FLOAT_ARRAY_KEY), cachedBundle.getFloatArray(FLOAT_ARRAY_KEY));
-        assertEquals(originalBundle.getDouble(DOUBLE_KEY), cachedBundle.getDouble(DOUBLE_KEY), TestUtils.DOUBLE_EQUALS_DELTA);
-        assertArrayEquals(originalBundle.getDoubleArray(DOUBLE_ARRAY_KEY), cachedBundle.getDoubleArray(DOUBLE_ARRAY_KEY));
-        assertEquals(originalBundle.getChar(CHAR_KEY), cachedBundle.getChar(CHAR_KEY));
-        assertArrayEquals(originalBundle.getCharArray(CHAR_ARRAY_KEY), cachedBundle.getCharArray(CHAR_ARRAY_KEY));
-        assertEquals(originalBundle.getString(STRING_KEY), cachedBundle.getString(STRING_KEY));
-        assertListEquals(originalBundle.getStringArrayList(STRING_LIST_KEY), cachedBundle.getStringArrayList(
-                STRING_LIST_KEY));
-        assertEquals(originalBundle.getSerializable(SERIALIZABLE_KEY),
-                cachedBundle.getSerializable(SERIALIZABLE_KEY));
-    }
-
-    @Test
-    public void testMultipleCaches() {
-        Bundle bundle1 = new Bundle(), bundle2 = new Bundle();
-
-        bundle1.putInt(INT_KEY, 10);
-        bundle1.putString(STRING_KEY, "ABC");
-        bundle2.putInt(INT_KEY, 100);
-        bundle2.putString(STRING_KEY, "xyz");
-
-        ensureApplicationContext();
-
-        LegacyTokenHelper cache1 = new LegacyTokenHelper(RuntimeEnvironment.application);
-        LegacyTokenHelper cache2 = new LegacyTokenHelper(
-                RuntimeEnvironment.application,
-                "CustomCache");
-
-        cache1.save(bundle1);
-        cache2.save(bundle2);
-
-        // Get new references to make sure we are getting persisted data.
-        // Reverse the cache references for fun.
-        cache1 = new LegacyTokenHelper(RuntimeEnvironment.application, "CustomCache");
-        cache2 = new LegacyTokenHelper(RuntimeEnvironment.application);
-
-        Bundle newBundle1 = cache1.load(), newBundle2 = cache2.load();
-
-        assertEquals(bundle2.getInt(INT_KEY), newBundle1.getInt(INT_KEY));
-        assertEquals(bundle2.getString(STRING_KEY), newBundle1.getString(STRING_KEY));
-        assertEquals(bundle1.getInt(INT_KEY), newBundle2.getInt(INT_KEY));
-        assertEquals(bundle1.getString(STRING_KEY), newBundle2.getString(STRING_KEY));
-    }
-
-    @Test
-    public void testCacheRoundtrip() {
-        Set<String> permissions = Utility.hashSet("stream_publish", "go_outside_and_play");
-        String token = "AnImaginaryTokenValue";
-        Date later = TestUtils.nowPlusSeconds(60);
-        Date earlier = TestUtils.nowPlusSeconds(-60);
-        String applicationId = "1234";
-
-        LegacyTokenHelper cache =
-                new LegacyTokenHelper(RuntimeEnvironment.application);
-        cache.clear();
-
-        Bundle bundle = new Bundle();
-        LegacyTokenHelper.putToken(bundle, token);
-        LegacyTokenHelper.putExpirationDate(bundle, later);
-        LegacyTokenHelper.putSource(
-                bundle,
-                AccessTokenSource.FACEBOOK_APPLICATION_NATIVE);
-        LegacyTokenHelper.putLastRefreshDate(bundle, earlier);
-        LegacyTokenHelper.putPermissions(bundle, permissions);
-        LegacyTokenHelper.putDeclinedPermissions(
-                bundle,
-                Utility.arrayList("whatever"));
-        LegacyTokenHelper.putApplicationId(bundle, applicationId);
-
-        cache.save(bundle);
-        bundle = cache.load();
-
-        AccessToken accessToken = AccessToken.createFromLegacyCache(bundle);
-        TestUtils.assertSamePermissions(permissions, accessToken);
-        assertEquals(token, accessToken.getToken());
-        assertEquals(AccessTokenSource.FACEBOOK_APPLICATION_NATIVE, accessToken.getSource());
-        assertTrue(!accessToken.isExpired());
-
-        Bundle cachedBundle = AccessTokenTestHelper.toLegacyCacheBundle(accessToken);
-        TestUtils.assertEqualContentsWithoutOrder(bundle, cachedBundle);
-    }
-
-    private static void assertArrayEquals(Object a1, Object a2) {
-        assertNotNull(a1);
-        assertNotNull(a2);
-        assertEquals(a1.getClass(), a2.getClass());
-        assertTrue("Not an array", a1.getClass().isArray());
-
-        int length = Array.getLength(a1);
-        assertEquals(length, Array.getLength(a2));
-        for (int i = 0; i < length; i++) {
-            Object a1Value = Array.get(a1, i);
-            Object a2Value = Array.get(a2, i);
-
-            assertEquals(a1Value, a2Value);
-        }
-    }
-
-    private static void assertListEquals(List<?> l1, List<?> l2) {
-        assertNotNull(l1);
-        assertNotNull(l2);
-
-        Iterator<?> i1 = l1.iterator(), i2 = l2.iterator();
-        while (i1.hasNext() && i2.hasNext()) {
-            assertEquals(i1.next(), i2.next());
-        }
-
-        assertTrue("Lists not of the same length", !i1.hasNext());
-        assertTrue("Lists not of the same length", !i2.hasNext());
-    }
-
-    private static void putInt(String key, Bundle bundle) {
-        bundle.putInt(key, random.nextInt());
-    }
-
-    private static void putIntArray(String key, Bundle bundle) {
-        int length = random.nextInt(50);
-        int[] array = new int[length];
-        for (int i = 0; i < length; i++) {
-            array[i] = random.nextInt();
-        }
-        bundle.putIntArray(key, array);
-    }
-
-    private static void putShort(String key, Bundle bundle) {
-        bundle.putShort(key, (short)random.nextInt());
-    }
-
-    private static void putShortArray(String key, Bundle bundle) {
-        int length = random.nextInt(50);
-        short[] array = new short[length];
-        for (int i = 0; i < length; i++) {
-            array[i] = (short)random.nextInt();
-        }
-        bundle.putShortArray(key, array);
-    }
-
-    private static void putByte(String key, Bundle bundle) {
-        bundle.putByte(key, (byte)random.nextInt());
-    }
-
-    private static void putByteArray(String key, Bundle bundle) {
-        int length = random.nextInt(50);
-        byte[] array = new byte[length];
-        random.nextBytes(array);
-        bundle.putByteArray(key, array);
-    }
-
-    private static void putBoolean(String key, Bundle bundle) {
-        bundle.putBoolean(key, random.nextBoolean());
-    }
-
-    private static void putBooleanArray(String key, Bundle bundle) {
-        int length = random.nextInt(50);
-        boolean[] array = new boolean[length];
-        for (int i = 0; i < length; i++) {
-            array[i] = random.nextBoolean();
-        }
-        bundle.putBooleanArray(key, array);
-    }
-
-    private static void putLong(String key, Bundle bundle) {
-        bundle.putLong(key, random.nextLong());
-    }
-
-    private static void putLongArray(String key, Bundle bundle) {
-        int length = random.nextInt(50);
-        long[] array = new long[length];
-        for (int i = 0; i < length; i++) {
-            array[i] = random.nextLong();
-        }
-        bundle.putLongArray(key, array);
-    }
-
-    private static void putFloat(String key, Bundle bundle) {
-        bundle.putFloat(key, random.nextFloat());
-    }
-
-    private static void putFloatArray(String key, Bundle bundle) {
-        int length = random.nextInt(50);
-        float[] array = new float[length];
-        for (int i = 0; i < length; i++) {
-            array[i] = random.nextFloat();
-        }
-        bundle.putFloatArray(key, array);
-    }
-
-    private static void putDouble(String key, Bundle bundle) {
-        bundle.putDouble(key, random.nextDouble());
-    }
-
-    private static void putDoubleArray(String key, Bundle bundle) {
-        int length = random.nextInt(50);
-        double[] array = new double[length];
-        for (int i = 0; i < length; i++) {
-            array[i] = random.nextDouble();
-        }
-        bundle.putDoubleArray(key, array);
-    }
-
-    private static void putChar(String key, Bundle bundle) {
-        bundle.putChar(key, getChar());
-    }
-
-    private static void putCharArray(String key, Bundle bundle) {
-        bundle.putCharArray(key, getCharArray());
-    }
-
-    private static void putString(String key, Bundle bundle) {
-        bundle.putString(key, new String(getCharArray()));
-    }
-
-    private static void putStringList(String key, Bundle bundle) {
-        int length = random.nextInt(50);
-        ArrayList<String> stringList = new ArrayList<String>(length);
-        while (0 < length--) {
-            if (length == 0) {
-                stringList.add(null);
-            } else {
-                stringList.add(new String(getCharArray()));
-            }
-        }
-
-        bundle.putStringArrayList(key, stringList);
-    }
-
-    private static char[] getCharArray() {
-        int length = random.nextInt(50);
-        char[] array = new char[length];
-        for (int i = 0; i < length; i++) {
-            array[i] = getChar();
-        }
-
-        return array;
-    }
-
-    private static char getChar() {
-        return (char)random.nextInt(255);
-    }
-
-    private void ensureApplicationContext() {
-        // Since the test case is not running on the UI thread, the applicationContext might
-        // not be ready (i.e. it might be null). Wait for a bit to resolve this.
-        long waitedFor = 0;
-        try {
-            // Don't hold up execution for too long.
-            while (RuntimeEnvironment.application.getApplicationContext() == null
-                    && waitedFor <= 2000) {
-                Thread.sleep(50);
-                waitedFor += 50;
-            }
-        }
-        catch (InterruptedException e) {
-        }
-    }
-
-}
diff --git a/facebook/src/test/java/com/facebook/PowerMockIntegrationTest.java b/facebook/src/test/java/com/facebook/PowerMockIntegrationTest.java
deleted file mode 100644
index 873299207..000000000
--- a/facebook/src/test/java/com/facebook/PowerMockIntegrationTest.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import org.junit.Test;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import static org.powermock.api.mockito.PowerMockito.*;
-import static org.junit.Assert.*;
-
-/**
- * This test makes sure PowerMock integration works.
- */
-@PrepareForTest( { FacebookSdk.class })
-public class PowerMockIntegrationTest extends FacebookPowerMockTestCase {
-
-    @Test
-    public void testStaticMethodOverrides() {
-        mockStatic(FacebookSdk.class);
-        String applicationId = "1234";
-
-        when(FacebookSdk.getApplicationId()).thenReturn(applicationId);
-        assertEquals(applicationId, FacebookSdk.getApplicationId());
-
-        String clientToken = "clienttoken";
-        when(FacebookSdk.getClientToken()).thenReturn(clientToken);
-        assertEquals(clientToken, FacebookSdk.getClientToken());
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/ProfileCacheTest.java b/facebook/src/test/java/com/facebook/ProfileCacheTest.java
deleted file mode 100644
index e77179d7e..000000000
--- a/facebook/src/test/java/com/facebook/ProfileCacheTest.java
+++ /dev/null
@@ -1,68 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.content.Context;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-
-import static org.junit.Assert.*;
-
-public final class ProfileCacheTest extends FacebookTestCase {
-    @Before
-    public void before() throws Exception {
-        FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
-        RuntimeEnvironment.application.getSharedPreferences(
-                ProfileCache.SHARED_PREFERENCES_NAME,
-                Context.MODE_PRIVATE)
-                .edit().
-                clear().
-                commit();
-    }
-
-    @Test
-    public void testEmptyCase() {
-        ProfileCache cache = new ProfileCache();
-        assertNull(cache.load());
-    }
-
-    @Test
-    public void testSaveGetAndClear() {
-        ProfileCache cache = new ProfileCache();
-        Profile profile1 = ProfileTest.createDefaultProfile();
-        cache.save(profile1);
-        Profile profile2 = cache.load();
-        ProfileTest.assertDefaultObjectGetters(profile2);
-        assertEquals(profile1, profile2);
-
-        profile1 = ProfileTest.createMostlyNullsProfile();
-        cache.save(profile1);
-        profile2 = cache.load();
-        ProfileTest.assertMostlyNullsObjectGetters(profile2);
-        assertEquals(profile1, profile2);
-
-        cache.clear();
-        assertNull(cache.load());
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/ProfileManagerTest.java b/facebook/src/test/java/com/facebook/ProfileManagerTest.java
deleted file mode 100644
index 1747f5af4..000000000
--- a/facebook/src/test/java/com/facebook/ProfileManagerTest.java
+++ /dev/null
@@ -1,90 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.content.Intent;
-import android.support.v4.content.LocalBroadcastManager;
-
-import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Test;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-
-import java.util.InputMismatchException;
-
-import static org.junit.Assert.*;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-import static org.powermock.api.mockito.PowerMockito.mock;
-
-@PrepareForTest( { ProfileCache.class })
-public class ProfileManagerTest extends FacebookPowerMockTestCase {
-
-    @Before
-    public void before() {
-        FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
-    }
-
-    @Test
-    public void testLoadCurrentProfileEmptyCache() {
-        ProfileCache profileCache = mock(ProfileCache.class);
-        LocalBroadcastManager localBroadcastManager = mock(LocalBroadcastManager.class);
-        ProfileManager profileManager = new ProfileManager(
-                localBroadcastManager,
-                profileCache
-        );
-        assertFalse(profileManager.loadCurrentProfile());
-        verify(profileCache, times(1)).load();
-    }
-
-    @Test
-    public void testLoadCurrentProfileWithCache() {
-        ProfileCache profileCache = mock(ProfileCache.class);
-        Profile profile = ProfileTest.createDefaultProfile();
-        when(profileCache.load()).thenReturn(profile);
-        LocalBroadcastManager localBroadcastManager = mock(LocalBroadcastManager.class);
-        ProfileManager profileManager = new ProfileManager(
-                localBroadcastManager,
-                profileCache
-        );
-        assertTrue(profileManager.loadCurrentProfile());
-        verify(profileCache, times(1)).load();
-
-        // Verify that we don't save it back
-        verify(profileCache, never()).save(any(Profile.class));
-
-        // Verify that we broadcast
-        verify(localBroadcastManager).sendBroadcast(any(Intent.class));
-
-        // Verify that if we set the same (semantically) profile there is no additional broadcast.
-        profileManager.setCurrentProfile(ProfileTest.createDefaultProfile());
-        verify(localBroadcastManager, times(1)).sendBroadcast(any(Intent.class));
-
-        // Verify that if we unset the profile there is a broadcast
-        profileManager.setCurrentProfile(null);
-        verify(localBroadcastManager, times(2)).sendBroadcast(any(Intent.class));
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/ProfileTest.java b/facebook/src/test/java/com/facebook/ProfileTest.java
deleted file mode 100644
index 980986d80..000000000
--- a/facebook/src/test/java/com/facebook/ProfileTest.java
+++ /dev/null
@@ -1,148 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.net.Uri;
-import android.os.Parcel;
-
-import org.json.JSONObject;
-import org.junit.Test;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-
-import static org.junit.Assert.*;
-
-public final class ProfileTest extends FacebookTestCase {
-    static final String ID = "ID";
-    static final String ANOTHER_ID = "ANOTHER_ID";
-    static final String FIRST_NAME = "FIRST_NAME";
-    static final String MIDDLE_NAME = "MIDDLE_NAME";
-    static final String LAST_NAME = "LAST_NAME";
-    static final String NAME = "NAME";
-    static final Uri LINK_URI = Uri.parse("https://www.facebook.com/name");
-
-    public static Profile createDefaultProfile() {
-        return new Profile(
-                ID,
-                FIRST_NAME,
-                MIDDLE_NAME,
-                LAST_NAME,
-                NAME,
-                LINK_URI
-        );
-    }
-
-    static void assertDefaultObjectGetters(Profile profile) {
-        assertEquals(ID, profile.getId());
-        assertEquals(FIRST_NAME, profile.getFirstName());
-        assertEquals(MIDDLE_NAME, profile.getMiddleName());
-        assertEquals(LAST_NAME, profile.getLastName());
-        assertEquals(NAME, profile.getName());
-        assertEquals(LINK_URI, profile.getLinkUri());
-    }
-
-    static Profile createMostlyNullsProfile() {
-        return new Profile(ANOTHER_ID, null, null, null, null, null);
-    }
-
-    static void assertMostlyNullsObjectGetters(Profile profile) {
-        assertEquals(ANOTHER_ID, profile.getId());
-        assertNull(profile.getFirstName());
-        assertNull(profile.getMiddleName());
-        assertNull(profile.getLastName());
-        assertNull(profile.getName());
-        assertNull(profile.getLinkUri());
-    }
-
-
-    @Test
-    public void testProfileCtorAndGetters() {
-        Profile profile = createDefaultProfile();
-        assertDefaultObjectGetters(profile);
-
-        profile = createMostlyNullsProfile();
-        assertMostlyNullsObjectGetters(profile);
-    }
-
-    @Test
-    public void testHashCode() {
-        Profile profile1 = createDefaultProfile();
-        Profile profile2 = createDefaultProfile();
-        assertEquals(profile1.hashCode(), profile2.hashCode());
-
-        Profile profile3 = createMostlyNullsProfile();
-        assertNotEquals(profile1.hashCode(), profile3.hashCode());
-    }
-
-    @Test
-    public void testEquals() {
-        Profile profile1 = createDefaultProfile();
-        Profile profile2 = createDefaultProfile();
-        assertEquals(profile1, profile2);
-
-        Profile profile3 = createMostlyNullsProfile();
-        assertNotEquals(profile1, profile3);
-    }
-
-    @Test
-    public void testJsonSerialization() {
-        Profile profile1 = createDefaultProfile();
-        JSONObject jsonObject = profile1.toJSONObject();
-        Profile profile2 = new Profile(jsonObject);
-        assertDefaultObjectGetters(profile2);
-        assertEquals(profile1, profile2);
-
-        // Check with nulls
-        profile1 = createMostlyNullsProfile();
-        jsonObject = profile1.toJSONObject();
-        profile2 = new Profile(jsonObject);
-        assertMostlyNullsObjectGetters(profile2);
-        assertEquals(profile1, profile2);
-    }
-
-    @Test
-    public void testParcelSerialization() {
-        Profile profile1 = createDefaultProfile();
-        Profile profile2 = TestUtils.parcelAndUnparcel(profile1);
-
-        assertDefaultObjectGetters(profile2);
-        assertEquals(profile1, profile2);
-
-        // Check with nulls
-        profile1 = createMostlyNullsProfile();
-        profile2 = TestUtils.parcelAndUnparcel(profile1);
-        assertMostlyNullsObjectGetters(profile2);
-        assertEquals(profile1, profile2);
-    }
-
-    @Test
-    public void testGetSetCurrentProfile() {
-        FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
-        Profile profile1 = createDefaultProfile();
-        Profile.setCurrentProfile(profile1);
-        assertEquals(ProfileManager.getInstance().getCurrentProfile(), profile1);
-        assertEquals(profile1, Profile.getCurrentProfile());
-
-        Profile.setCurrentProfile(null);
-        assertNull(ProfileManager.getInstance().getCurrentProfile());
-        assertNull(Profile.getCurrentProfile());
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/ProfileTrackerTest.java b/facebook/src/test/java/com/facebook/ProfileTrackerTest.java
deleted file mode 100644
index 0c8a60890..000000000
--- a/facebook/src/test/java/com/facebook/ProfileTrackerTest.java
+++ /dev/null
@@ -1,90 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.content.Intent;
-import android.support.v4.content.LocalBroadcastManager;
-
-import org.junit.Test;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-
-import static org.junit.Assert.*;
-
-public class ProfileTrackerTest extends FacebookPowerMockTestCase {
-    @Test
-    public void testStartStopTrackingAndBroadcast() {
-        FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
-        LocalBroadcastManager localBroadcastManager =
-                LocalBroadcastManager.getInstance(RuntimeEnvironment.application);
-        TestProfileTracker testProfileTracker = new TestProfileTracker();
-        // Starts tracking
-        assertTrue(testProfileTracker.isTracking());
-
-        testProfileTracker.stopTracking();
-        assertFalse(testProfileTracker.isTracking());
-        sendBroadcast(localBroadcastManager, null, ProfileTest.createDefaultProfile());
-        assertFalse(testProfileTracker.isCallbackCalled);
-        testProfileTracker.startTracking();
-        assertTrue(testProfileTracker.isTracking());
-        Profile profile = ProfileTest.createDefaultProfile();
-        sendBroadcast(localBroadcastManager, null, profile);
-        assertNull(testProfileTracker.oldProfile);
-        assertEquals(profile, testProfileTracker.currentProfile);
-        assertTrue(testProfileTracker.isCallbackCalled);
-
-        Profile profile1 = ProfileTest.createMostlyNullsProfile();
-        Profile profile2 = ProfileTest.createDefaultProfile();
-        sendBroadcast(localBroadcastManager, profile1, profile2);
-        ProfileTest.assertMostlyNullsObjectGetters(testProfileTracker.oldProfile);
-        ProfileTest.assertDefaultObjectGetters(testProfileTracker.currentProfile);
-        assertEquals(profile1, testProfileTracker.oldProfile);
-        assertEquals(profile2, testProfileTracker.currentProfile);
-
-        testProfileTracker.stopTracking();
-    }
-
-    private static void sendBroadcast(
-            LocalBroadcastManager localBroadcastManager,
-            Profile oldProfile,
-            Profile currentProfile) {
-        Intent intent = new Intent(ProfileManager.ACTION_CURRENT_PROFILE_CHANGED);
-
-        intent.putExtra(ProfileManager.EXTRA_OLD_PROFILE, oldProfile);
-        intent.putExtra(ProfileManager.EXTRA_NEW_PROFILE, currentProfile);
-
-        localBroadcastManager.sendBroadcast(intent);
-    }
-
-    static class TestProfileTracker extends ProfileTracker {
-        Profile oldProfile;
-        Profile currentProfile;
-        boolean isCallbackCalled = false;
-
-        @Override
-        protected void onCurrentProfileChanged(Profile oldProfile, Profile currentProfile) {
-            this.oldProfile = oldProfile;
-            this.currentProfile = currentProfile;
-            isCallbackCalled = true;
-        }
-    }
-
-}
diff --git a/facebook/src/test/java/com/facebook/ProgressNoopOutputStreamTest.java b/facebook/src/test/java/com/facebook/ProgressNoopOutputStreamTest.java
deleted file mode 100644
index 7296683fe..000000000
--- a/facebook/src/test/java/com/facebook/ProgressNoopOutputStreamTest.java
+++ /dev/null
@@ -1,70 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-
-import static org.junit.Assert.*;
-
-
-public class ProgressNoopOutputStreamTest extends FacebookTestCase {
-    private ProgressNoopOutputStream stream;
-
-    @Before
-    public void before() throws Exception {
-        FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
-        stream = new ProgressNoopOutputStream(null);
-    }
-
-    @After
-    public void after() throws Exception {
-        stream.close();
-    }
-
-    @Test
-    public void testSetup() {
-        assertEquals(0, stream.getMaxProgress());
-        assertTrue(stream.getProgressMap().isEmpty());
-    }
-
-    @Test
-    public void testWriting() {
-        assertEquals(0, stream.getMaxProgress());
-
-        stream.write(0);
-        assertEquals(1, stream.getMaxProgress());
-
-        final byte[] buf = new byte[8];
-
-        stream.write(buf);
-        assertEquals(9, stream.getMaxProgress());
-
-        stream.write(buf, 2, 2);
-        assertEquals(11, stream.getMaxProgress());
-
-        stream.addProgress(16);
-        assertEquals(27, stream.getMaxProgress());
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/ProgressOutputStreamTest.java b/facebook/src/test/java/com/facebook/ProgressOutputStreamTest.java
deleted file mode 100644
index dfc408638..000000000
--- a/facebook/src/test/java/com/facebook/ProgressOutputStreamTest.java
+++ /dev/null
@@ -1,103 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-
-import java.io.ByteArrayOutputStream;
-import java.util.HashMap;
-import java.util.Map;
-
-import static org.junit.Assert.*;
-
-public class ProgressOutputStreamTest extends FacebookTestCase {
-    private static final int MAX_PROGRESS = 10;
-
-    private GraphRequest r1, r2;
-    private Map<GraphRequest, RequestProgress> progressMap;
-    private GraphRequestBatch requests;
-    private ProgressOutputStream stream;
-
-    @Before
-    public void before() throws Exception {
-        FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
-        r1 = new GraphRequest(null, "4");
-        r2 = new GraphRequest(null, "4");
-
-        progressMap = new HashMap<GraphRequest, RequestProgress>();
-        progressMap.put(r1, new RequestProgress(null, r1));
-        progressMap.get(r1).addToMax(5);
-        progressMap.put(r2, new RequestProgress(null, r2));
-        progressMap.get(r2).addToMax(5);
-
-        requests = new GraphRequestBatch(r1, r2);
-
-        ByteArrayOutputStream backing = new ByteArrayOutputStream();
-        stream = new ProgressOutputStream(backing, requests, progressMap, MAX_PROGRESS);
-    }
-
-    @After
-    public void after() throws Exception {
-        stream.close();
-    }
-
-    @Test
-    public void testSetup() {
-        assertEquals(0, stream.getBatchProgress());
-        assertEquals(MAX_PROGRESS, stream.getMaxProgress());
-
-        for (RequestProgress p : progressMap.values()) {
-            assertEquals(0, p.getProgress());
-            assertEquals(5, p.getMaxProgress());
-        }
-    }
-
-    @Test
-    public void testWriting() {
-        try {
-            assertEquals(0, stream.getBatchProgress());
-
-            stream.setCurrentRequest(r1);
-            stream.write(0);
-            assertEquals(1, stream.getBatchProgress());
-
-            final byte[] buf = new byte[4];
-            stream.write(buf);
-            assertEquals(5, stream.getBatchProgress());
-
-            stream.setCurrentRequest(r2);
-            stream.write(buf, 2, 2);
-            stream.write(buf, 1, 3);
-            assertEquals(MAX_PROGRESS, stream.getBatchProgress());
-
-            assertEquals(stream.getMaxProgress(), stream.getBatchProgress());
-            assertEquals(progressMap.get(r1).getMaxProgress(), progressMap.get(r1).getProgress());
-            assertEquals(progressMap.get(r2).getMaxProgress(), progressMap.get(r2).getProgress());
-        }
-        catch (Exception ex) {
-            fail(ex.getMessage());
-        }
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/TestUtils.java b/facebook/src/test/java/com/facebook/TestUtils.java
deleted file mode 100644
index def8ca2e5..000000000
--- a/facebook/src/test/java/com/facebook/TestUtils.java
+++ /dev/null
@@ -1,305 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.annotation.TargetApi;
-import android.content.Context;
-import android.content.res.AssetManager;
-import android.os.Bundle;
-import android.os.Parcel;
-import android.os.Parcelable;
-
-import com.facebook.internal.FileLruCache;
-import com.facebook.internal.Utility;
-
-import junit.framework.Assert;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
-
-import java.io.BufferedReader;
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.File;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
-import java.io.Serializable;
-import java.util.Collection;
-import java.util.Date;
-import java.util.HashSet;
-import java.util.Iterator;
-
-public class TestUtils {
-    private static long CACHE_CLEAR_TIMEOUT = 100;
-    public static final double DOUBLE_EQUALS_DELTA = 0.00001;
-
-
-    public static <T extends Serializable> T serializeAndUnserialize(final T t) {
-        try {
-            ByteArrayOutputStream os = new ByteArrayOutputStream();
-            new ObjectOutputStream(os).writeObject(t);
-            ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());
-
-            @SuppressWarnings("unchecked")
-            T ret = (T) (new ObjectInputStream(is)).readObject();
-
-            return ret;
-        } catch (IOException e) {
-            throw new RuntimeException(e);
-        } catch (ClassNotFoundException e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-    public static <E extends Parcelable> E parcelAndUnparcel(final E object) {
-        final Parcel writeParcel = Parcel.obtain();
-        final Parcel readParcel = Parcel.obtain();
-        try {
-            writeParcel.writeParcelable(object, 0);
-            final byte[] bytes = writeParcel.marshall();
-            readParcel.unmarshall(bytes, 0, bytes.length);
-            readParcel.setDataPosition(0);
-            return readParcel.readParcelable(object.getClass().getClassLoader());
-        } finally {
-            writeParcel.recycle();
-            readParcel.recycle();
-        }
-    }
-
-    public static Date nowPlusSeconds(final long offset) {
-        return new Date(new Date().getTime() + (offset * 1000L));
-    }
-
-    public static void assertSamePermissions(final Collection<String> expected, final AccessToken actual) {
-        if (expected == null) {
-            Assert.assertEquals(null, actual.getPermissions());
-        } else {
-            for (String p : expected) {
-                Assert.assertTrue(actual.getPermissions().contains(p));
-            }
-            for (String p : actual.getPermissions()) {
-                Assert.assertTrue(expected.contains(p));
-            }
-        }
-    }
-
-    public static void assertSameCollectionContents(
-            final Collection expected,
-            final Collection actual) {
-        if (expected == null) {
-            Assert.assertEquals(null, actual);
-        } else {
-            for (Object p : expected) {
-                Assert.assertTrue(actual.contains(p));
-            }
-            for (Object p : actual) {
-                Assert.assertTrue(expected.contains(p));
-            }
-        }
-    }
-
-    public static void assertSamePermissions(
-            final Collection<String> expected,
-            final Collection<String> actual) {
-        assertSameCollectionContents(expected, actual);
-    }
-
-    public static void assertAtLeastExpectedPermissions(
-            final Collection<String> expected,
-            final Collection<String> actual) {
-        if (expected != null) {
-            for (String p : expected) {
-                Assert.assertTrue(actual.contains(p));
-            }
-        }
-    }
-
-    private static void assertEqualContents(
-            final Bundle a,
-            final Bundle b,
-            boolean collectionOrderMatters) {
-        for (String key : a.keySet()) {
-            if (!b.containsKey(key)) {
-                Assert.fail("bundle does not include key " + key);
-            }
-            Object aValue = a.get(key);
-            Object bValue = b.get(key);
-            if (!collectionOrderMatters &&
-                aValue instanceof Collection &&
-                bValue instanceof Collection) {
-                assertSameCollectionContents((Collection) aValue, (Collection) bValue);
-            } else {
-                Assert.assertEquals(a.get(key), b.get(key));
-            }
-        }
-        for (String key : b.keySet()) {
-            if (!a.containsKey(key)) {
-                Assert.fail("bundle does not include key " + key);
-            }
-        }
-    }
-
-    public static void assertEqualContentsWithoutOrder(
-            final Bundle a,
-            final Bundle b) {
-        assertEqualContents(a, b, false);
-    }
-
-    public static void assertEqualContents(
-            final Bundle a,
-            final Bundle b) {
-        assertEqualContents(a, b, true);
-    }
-
-    @TargetApi(16)
-    public static void assertEquals(final JSONObject expected, final JSONObject actual) {
-        // JSONObject.equals does not do an order-independent comparison, so let's roll our own  :(
-        if (areEqual(expected, actual)) {
-            return;
-        }
-        Assert.failNotEquals("", expected, actual);
-    }
-
-    @TargetApi(16)
-    public static void assertEquals(final JSONArray expected, final JSONArray actual) {
-        // JSONObject.equals does not do an order-independent comparison, so let's roll our own  :(
-        if (areEqual(expected, actual)) {
-            return;
-        }
-        Assert.failNotEquals("", expected, actual);
-    }
-
-    private static boolean areEqual(final JSONObject expected, final JSONObject actual) {
-        // JSONObject.equals does not do an order-independent comparison, so let's roll our own  :(
-        if (expected == actual) {
-            return true;
-        }
-        if ((expected == null) || (actual == null)) {
-            return false;
-        }
-
-        final Iterator<String> expectedKeysIterator = expected.keys();
-        final HashSet<String> expectedKeys = new HashSet<String>();
-        while (expectedKeysIterator.hasNext()) {
-            expectedKeys.add(expectedKeysIterator.next());
-        }
-
-        final Iterator<String> actualKeysIterator = actual.keys();
-        while (actualKeysIterator.hasNext()) {
-            final String key = actualKeysIterator.next();
-            if (!areEqual(expected.opt(key), actual.opt(key))) {
-                return false;
-            }
-            expectedKeys.remove(key);
-        }
-        return expectedKeys.size() == 0;
-    }
-
-    private static boolean areEqual(final JSONArray expected, final JSONArray actual) {
-        // JSONObject.equals does not do an order-independent comparison, so we need to check values that are JSONObject
-        // manually
-        if (expected == actual) {
-            return true;
-        }
-        if ((expected == null) || (actual == null)) {
-            return false;
-        }
-        if (expected.length() != actual.length()) {
-            return false;
-        }
-
-        final int length = expected.length();
-        for (int i = 0; i < length; ++i) {
-            if (!areEqual(expected.opt(i), actual.opt(i))) {
-                return false;
-            }
-        }
-        return true;
-    }
-
-    private static boolean areEqual(final Object expected, final Object actual) {
-        if (expected == actual) {
-            return true;
-        }
-        if ((expected == null) || (actual == null)) {
-            return false;
-        }
-        if ((expected instanceof JSONObject) && (actual instanceof JSONObject)) {
-            return areEqual((JSONObject)expected, (JSONObject)actual);
-        }
-        if ((expected instanceof JSONArray) && (actual instanceof JSONArray)) {
-            return areEqual((JSONArray)expected, (JSONArray)actual);
-        }
-        return expected.equals(actual);
-    }
-
-    public static void clearFileLruCache(final FileLruCache cache) throws InterruptedException {
-        // since the cache clearing happens in a separate thread, we need to wait until
-        // the clear is complete before we can check for the existence of the old files
-        synchronized (cache) {
-            cache.clearCache();
-            FacebookSdk.getExecutor().execute(new Runnable() {
-                @Override
-                public void run() {
-                    synchronized (cache) {
-                        cache.notifyAll();
-                    }
-                }
-            });
-            cache.wait(CACHE_CLEAR_TIMEOUT);
-        }
-        // sleep a little more just to make sure all the files are deleted.
-        Thread.sleep(CACHE_CLEAR_TIMEOUT);
-    }
-
-    public static void deleteLruCacheDirectory(final FileLruCache cache) {
-        File directory = new File(cache.getLocation());
-        directory.delete();
-    }
-
-    public static void clearAndDeleteLruCacheDirectory(final FileLruCache cache)
-            throws InterruptedException {
-        clearFileLruCache(cache);
-        deleteLruCacheDirectory(cache);
-    }
-
-    public static String getAssetFileStringContents(final Context context, final String assetPath) throws IOException {
-        InputStream inputStream = null;
-        BufferedReader reader = null;
-        try {
-            final AssetManager assets = context.getResources().getAssets();
-            inputStream = assets.open(assetPath);
-            reader = new BufferedReader(new InputStreamReader(inputStream));
-            final StringBuilder sb = new StringBuilder();
-            String line;
-            while ((line = reader.readLine()) != null) {
-                sb.append(line).append("\n");
-            }
-            return sb.toString();
-        } finally {
-            Utility.closeQuietly(inputStream);
-            Utility.closeQuietly(reader);
-        }
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/appevents/AppEventTest.java b/facebook/src/test/java/com/facebook/appevents/AppEventTest.java
deleted file mode 100644
index d20e42e7f..000000000
--- a/facebook/src/test/java/com/facebook/appevents/AppEventTest.java
+++ /dev/null
@@ -1,79 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents;
-
-import android.os.Bundle;
-
-import com.facebook.FacebookTestCase;
-
-import org.junit.Assert;
-import org.junit.Test;
-
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
-import java.util.UUID;
-
-public class AppEventTest extends FacebookTestCase {
-    @Test
-    public void testChecksumOfAppEvent() throws Exception {
-        AppEvent appEvent = getTestAppEvent();
-        Assert.assertTrue(getTestAppEvent().isChecksumValid());
-        appEvent.getJSONObject().put("new_key", "corrupted");
-        Assert.assertFalse(appEvent.isChecksumValid());
-    }
-
-    @Test
-    public void testAppEventSerializedChecksum() throws Exception {
-        AppEvent appEvent1 = getTestAppEvent();
-
-        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
-        ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
-        objectOutputStream.writeObject(appEvent1);
-
-        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(
-                byteArrayOutputStream.toByteArray());
-        ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
-
-        AppEvent appEvent2 = (AppEvent)objectInputStream.readObject();
-        Assert.assertTrue(appEvent2.isChecksumValid());
-
-        // A secondary validation ensure that the json string matches the original
-        Assert.assertTrue(
-                appEvent1.getJSONObject().toString().equals(appEvent2.getJSONObject().toString()));
-    }
-
-    public AppEvent getTestAppEvent() throws Exception {
-        Bundle customParams = new Bundle();
-        customParams.putString("key1", "value1");
-        customParams.putString("key2", "value2");
-        AppEvent appEvent = new AppEvent(
-                "contextName",
-                "eventName",
-                1.0,
-                customParams,
-                false,
-                UUID.fromString("65565271-1ace-4580-bd13-b2bc6d0df035"));
-        appEvent.isChecksumValid();
-        return appEvent;
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/applinks/AppLinkDataTest.java b/facebook/src/test/java/com/facebook/applinks/AppLinkDataTest.java
deleted file mode 100644
index 85f30f9ea..000000000
--- a/facebook/src/test/java/com/facebook/applinks/AppLinkDataTest.java
+++ /dev/null
@@ -1,203 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.applinks;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Bundle;
-
-import com.facebook.FacebookTestCase;
-import com.facebook.applinks.AppLinkData;
-
-import org.junit.Test;
-
-import static org.junit.Assert.*;
-
-public class AppLinkDataTest extends FacebookTestCase {
-    private static final String TARGET_URI_STRING = "http://test.app/foo";
-    private static final String FB_REF_KEY = "fb_ref";
-    private static final String FB_REF_VALUE = "foobar";
-    private static final String REFERER_DATA_KEY = "referer_data";
-    private static final String EXTRA_ARGS_KEY = "extra_args";
-    private static final String EXTRA_ARGS_VALUE = "extra_value";
-    private static final String TARGET_URL_KEY = "target_url";
-    private static final String USER_AGENT_KEY = "user_agent";
-    private static final String USER_AGENT_VALUE = "foobarUserAgent";
-    private static final String EXTRAS_KEY = "extras";
-    private static final String DEEPLINK_CONTEXT_KEY = "deeplink_context";
-    private static final String PROMO_CODE_KEY = "promo_code";
-    private static final String PROMO_CODE = "PROMO1";
-
-    private static final String JSON_DATA_REGULAR =
-            "{"
-                    + "\"version\":2,"
-                    + "\"bridge_args\": {\"method\": \"applink\"},"
-                    + "\"method_args\": {"
-                    + "    \"ref\": \"" + FB_REF_VALUE + "\","
-                    + "    \"" + TARGET_URL_KEY + "\": \"" + TARGET_URI_STRING + "\""
-                    + "  }"
-                    + "}";
-
-    private static final String JSON_DATA_REGULAR_WITH_NESTED_ARRAY =
-            "{"
-                    + "\"version\":2,"
-                    + "\"bridge_args\": {\"method\": \"applink\"},"
-                    + "\"method_args\": {"
-                    + "    \"ref\": \"" + FB_REF_VALUE + "\","
-                    + "    \"" + TARGET_URL_KEY + "\": \"" + TARGET_URI_STRING + "\","
-                    + "    \"other\": [ [1, 2], [3, 4] ]"
-                    + "  }"
-                    + "}";
-
-    private static final String JSON_DATA_WITH_REFERER_DATA =
-            "{"
-                    + "\"version\":2,"
-                    + "\"bridge_args\": {\"method\": \"applink\"},"
-                    + "\"method_args\": {"
-                    + "    \"referer_data\" : {"
-                    + "      \"" + FB_REF_KEY + "\": \"" + FB_REF_VALUE + "\","
-                    + "      \"" + EXTRA_ARGS_KEY + "\": \"" + EXTRA_ARGS_VALUE + "\""
-                    + "    },"
-                    + "    \"" + TARGET_URL_KEY + "\": \"" + TARGET_URI_STRING + "\""
-                    + "  }"
-                    + "}";
-
-    private static final String JSON_DATA_WITH_DEEPLINK_CONTEXT =
-            "{"
-                    + "\"version\":2,"
-                    + "\"bridge_args\": {\"method\": \"applink\"},"
-                    + "\"method_args\": {"
-                    + "    \"ref\": \"" + FB_REF_VALUE + "\","
-                    + "    \"" + TARGET_URL_KEY + "\": \"" + TARGET_URI_STRING + "\","
-                    + "    \"" + EXTRAS_KEY + "\": {"
-                    + "        \"" + DEEPLINK_CONTEXT_KEY + "\": {"
-                    + "            \"" + PROMO_CODE_KEY + "\": \""+ PROMO_CODE + "\""
-                    + "        }"
-                    + "    }"
-                    + "  }"
-                    + "}";
-
-    private static class MockActivityWithAppLinkData extends Activity {
-        public Intent getIntent() {
-            Uri targetUri = Uri.parse(TARGET_URI_STRING);
-            Intent intent = new Intent(Intent.ACTION_VIEW, targetUri);
-            Bundle applinks = new Bundle();
-            Bundle refererData = new Bundle();
-            Bundle extras = new Bundle();
-            String deeplinkContext = "{\"" + PROMO_CODE_KEY + "\": \""+ PROMO_CODE + "\"}";
-            extras.putString(DEEPLINK_CONTEXT_KEY, deeplinkContext);
-            refererData.putString(FB_REF_KEY, FB_REF_VALUE);
-            refererData.putString(EXTRA_ARGS_KEY, EXTRA_ARGS_VALUE);
-            applinks.putBundle(REFERER_DATA_KEY, refererData);
-            applinks.putString(TARGET_URL_KEY, TARGET_URI_STRING);
-            applinks.putString(USER_AGENT_KEY, USER_AGENT_VALUE);
-            applinks.putBundle(EXTRAS_KEY, extras);
-            intent.putExtra("al_applink_data", applinks);
-            return intent;
-        }
-    }
-
-    private static class MockActivityWithJsonData extends Activity {
-        private String jsonString;
-
-        public MockActivityWithJsonData(String jsonString) {
-            this.jsonString = jsonString;
-        }
-        public Intent getIntent() {
-            Intent intent = new Intent(Intent.ACTION_VIEW);
-            intent.putExtra(AppLinkData.BUNDLE_APPLINK_ARGS_KEY, jsonString);
-            return intent;
-        }
-    }
-
-    @Test
-    public void testCreateFromAlApplinkData() {
-        AppLinkData appLinkData = AppLinkData.createFromActivity(new MockActivityWithAppLinkData());
-        assertNotNull("app link data not null", appLinkData);
-        assertEquals("ref param", FB_REF_VALUE, appLinkData.getRef());
-        assertEquals("target_url", TARGET_URI_STRING, appLinkData.getTargetUri().toString());
-        Bundle args = appLinkData.getArgumentBundle();
-        assertNotNull("app link args not null", args);
-        assertEquals("user agent", USER_AGENT_VALUE, args.getString(USER_AGENT_KEY));
-        Bundle refererData = appLinkData.getRefererData();
-        assertNotNull("referer data not null", refererData);
-        assertEquals("ref param in referer data", FB_REF_VALUE, refererData.getString(FB_REF_KEY));
-        assertEquals("extra param", EXTRA_ARGS_VALUE, refererData.getString(EXTRA_ARGS_KEY));
-        assertEquals("promo_code", PROMO_CODE, appLinkData.getPromotionCode());
-    }
-
-    @Test
-    public void testCreateFromJson() {
-        AppLinkData appLinkData =
-                AppLinkData.createFromActivity(new MockActivityWithJsonData(JSON_DATA_REGULAR));
-        assertNotNull("app link data not null", appLinkData);
-        assertEquals("ref param", FB_REF_VALUE, appLinkData.getRef());
-        assertEquals("target_url", TARGET_URI_STRING, appLinkData.getTargetUri().toString());
-        Bundle args = appLinkData.getArgumentBundle();
-        assertNotNull("app link args not null", args);
-        assertNull("user agent", args.getString(USER_AGENT_KEY));
-        Bundle refererData = appLinkData.getRefererData();
-        assertNull("referer data", refererData);
-    }
-
-    @Test
-    public void testCreateFromJsonWithNestedArray() {
-        AppLinkData appLinkData =
-                AppLinkData.createFromActivity(
-                        new MockActivityWithJsonData(JSON_DATA_REGULAR_WITH_NESTED_ARRAY));
-        assertNull(appLinkData);
-    }
-
-    @Test
-    public void testCreateFromJsonWithRefererData() {
-        AppLinkData appLinkData =
-                AppLinkData.createFromActivity(
-                        new MockActivityWithJsonData(JSON_DATA_WITH_REFERER_DATA));
-        assertNotNull("app link data not null", appLinkData);
-        assertEquals("ref param", FB_REF_VALUE, appLinkData.getRef());
-        assertEquals("target_url", TARGET_URI_STRING, appLinkData.getTargetUri().toString());
-        Bundle args = appLinkData.getArgumentBundle();
-        assertNotNull("app link args not null", args);
-        assertNull("user agent", args.getString(USER_AGENT_KEY));
-        Bundle refererData = appLinkData.getRefererData();
-        assertNotNull("referer data", refererData);
-        assertEquals("ref param in referer data", FB_REF_VALUE, refererData.getString(FB_REF_KEY));
-        assertEquals("extra param", EXTRA_ARGS_VALUE, refererData.getString(EXTRA_ARGS_KEY));
-    }
-
-    @Test
-    public void testCreateFromJsonWithDeeplinkContext() {
-        AppLinkData appLinkData =
-                AppLinkData.createFromActivity(
-                        new MockActivityWithJsonData(JSON_DATA_WITH_DEEPLINK_CONTEXT));
-        assertNotNull("app link data not null", appLinkData);
-        assertEquals("ref param", FB_REF_VALUE, appLinkData.getRef());
-        assertEquals("target_url", TARGET_URI_STRING, appLinkData.getTargetUri().toString());
-        assertEquals("promo_code", PROMO_CODE, appLinkData.getPromotionCode());
-        Bundle args = appLinkData.getArgumentBundle();
-        assertNotNull("app link args not null", args);
-        assertNull("user agent", args.getString(USER_AGENT_KEY));
-        Bundle refererData = appLinkData.getRefererData();
-        assertNull("referer data", refererData);
-    }
-
-}
diff --git a/facebook/src/test/java/com/facebook/internal/BundleJSONConverterTest.java b/facebook/src/test/java/com/facebook/internal/BundleJSONConverterTest.java
deleted file mode 100644
index 986acd464..000000000
--- a/facebook/src/test/java/com/facebook/internal/BundleJSONConverterTest.java
+++ /dev/null
@@ -1,156 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-
-package com.facebook.internal;
-
-import android.os.Bundle;
-
-import com.facebook.FacebookTestCase;
-import com.facebook.TestUtils;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.junit.Assert.*;
-
-public class BundleJSONConverterTest extends FacebookTestCase {
-
-    @Test
-    public void testSimpleValues() throws JSONException {
-        ArrayList<String> arrayList = new ArrayList<String>();
-        arrayList.add("1st");
-        arrayList.add("2nd");
-        arrayList.add("third");
-
-        Bundle innerBundle1 = new Bundle();
-        innerBundle1.putInt("inner", 1);
-
-        Bundle innerBundle2 = new Bundle();
-        innerBundle2.putString("inner", "2");
-        innerBundle2.putStringArray("deep list", new String[] {"7", "8"});
-
-        innerBundle1.putBundle("nested bundle", innerBundle2);
-
-
-        Bundle b = new Bundle();
-        b.putBoolean("boolValue", true);
-        b.putInt("intValue", 7);
-        b.putLong("longValue", 5000000000l);
-        b.putDouble("doubleValue", 3.14);
-        b.putString("stringValue", "hello world");
-        b.putStringArray("stringArrayValue", new String[] {"first", "second"});
-        b.putStringArrayList("stringArrayListValue", arrayList);
-        b.putBundle("nested", innerBundle1);
-
-
-        JSONObject json = BundleJSONConverter.convertToJSON(b);
-        assertNotNull(json);
-
-        assertEquals(true, json.getBoolean("boolValue"));
-        assertEquals(7, json.getInt("intValue"));
-        assertEquals(5000000000l, json.getLong("longValue"));
-        assertEquals(3.14, json.getDouble("doubleValue"), TestUtils.DOUBLE_EQUALS_DELTA);
-        assertEquals("hello world", json.getString("stringValue"));
-
-        JSONArray jsonArray = json.getJSONArray("stringArrayValue");
-        assertEquals(2, jsonArray.length());
-        assertEquals("first", jsonArray.getString(0));
-        assertEquals("second", jsonArray.getString(1));
-
-        jsonArray = json.getJSONArray("stringArrayListValue");
-        assertEquals(3, jsonArray.length());
-        assertEquals("1st", jsonArray.getString(0));
-        assertEquals("2nd", jsonArray.getString(1));
-        assertEquals("third", jsonArray.getString(2));
-
-        JSONObject innerJson = json.getJSONObject("nested");
-        assertEquals(1, innerJson.getInt("inner"));
-        innerJson = innerJson.getJSONObject("nested bundle");
-        assertEquals("2", innerJson.getString("inner"));
-
-        jsonArray = innerJson.getJSONArray("deep list");
-        assertEquals(2, jsonArray.length());
-        assertEquals("7", jsonArray.getString(0));
-        assertEquals("8", jsonArray.getString(1));
-
-        Bundle finalBundle = BundleJSONConverter.convertToBundle(json);
-        assertNotNull(finalBundle);
-
-        assertEquals(true, finalBundle.getBoolean("boolValue"));
-        assertEquals(7, finalBundle.getInt("intValue"));
-        assertEquals(5000000000l, finalBundle.getLong("longValue"));
-        assertEquals(3.14, finalBundle.getDouble("doubleValue"), TestUtils.DOUBLE_EQUALS_DELTA);
-        assertEquals("hello world", finalBundle.getString("stringValue"));
-
-        List<String> stringList = finalBundle.getStringArrayList("stringArrayValue");
-        assertEquals(2, stringList.size());
-        assertEquals("first", stringList.get(0));
-        assertEquals("second", stringList.get(1));
-
-        stringList = finalBundle.getStringArrayList("stringArrayListValue");
-        assertEquals(3, stringList.size());
-        assertEquals("1st", stringList.get(0));
-        assertEquals("2nd", stringList.get(1));
-        assertEquals("third", stringList.get(2));
-
-        Bundle finalInnerBundle = finalBundle.getBundle("nested");
-        assertEquals(1, finalInnerBundle.getInt("inner"));
-        finalBundle = finalInnerBundle.getBundle("nested bundle");
-        assertEquals("2", finalBundle.getString("inner"));
-
-        stringList = finalBundle.getStringArrayList("deep list");
-        assertEquals(2, stringList.size());
-        assertEquals("7", stringList.get(0));
-        assertEquals("8", stringList.get(1));
-    }
-
-    @Test
-    public void testUnsupportedValues() throws JSONException {
-        Bundle b = new Bundle();
-        b.putShort("shortValue", (short)7);
-
-        boolean exceptionCaught = false;
-        try {
-            BundleJSONConverter.convertToJSON(b);
-        } catch (IllegalArgumentException a) {
-            exceptionCaught = true;
-        }
-        assertTrue(exceptionCaught);
-
-        JSONArray jsonArray = new JSONArray();
-        jsonArray.put(10);
-        JSONObject json = new JSONObject();
-        json.put("arrayValue", jsonArray);
-
-        exceptionCaught = false;
-        try {
-            BundleJSONConverter.convertToBundle(json);
-        } catch (IllegalArgumentException a) {
-            exceptionCaught = true;
-        }
-        assertTrue(exceptionCaught);
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/internal/CallbackManagerImplPowerMockTest.java b/facebook/src/test/java/com/facebook/internal/CallbackManagerImplPowerMockTest.java
deleted file mode 100644
index 27dcb3125..000000000
--- a/facebook/src/test/java/com/facebook/internal/CallbackManagerImplPowerMockTest.java
+++ /dev/null
@@ -1,179 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.content.Intent;
-
-import com.facebook.FacebookPowerMockTestCase;
-import com.facebook.FacebookSdk;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.powermock.reflect.Whitebox;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-
-import java.util.HashMap;
-
-import bolts.Capture;
-
-import static org.junit.Assert.*;
-
-@PrepareForTest({ CallbackManagerImpl.class })
-public final class CallbackManagerImplPowerMockTest extends FacebookPowerMockTestCase {
-
-    @Before
-    public void before() {
-        FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
-        // Reset the static state every time so tests don't interfere with each other.
-        Whitebox.setInternalState(
-                CallbackManagerImpl.class,
-                "staticCallbacks",
-                new HashMap<Integer, CallbackManagerImpl.Callback>());
-    }
-
-    @Test
-    public void testStaticRegisterValidations() {
-        try {
-            CallbackManagerImpl.registerStaticCallback(
-                    CallbackManagerImpl.RequestCodeOffset.Login.toRequestCode(), null);
-            fail();
-        } catch (NullPointerException exception) { }
-    }
-
-    @Test
-    public void testRegisterValidations() {
-        CallbackManagerImpl callbackManagerImpl = new CallbackManagerImpl();
-        try {
-            callbackManagerImpl.registerCallback(
-                    CallbackManagerImpl.RequestCodeOffset.Login.toRequestCode(), null);
-            fail();
-        } catch (NullPointerException exception) { }
-    }
-
-    @Test
-    public void testCallbackExecuted() {
-        final Capture<Boolean> capture = new Capture(false);
-
-        final CallbackManagerImpl callbackManagerImpl = new CallbackManagerImpl();
-
-        callbackManagerImpl.registerCallback(
-                CallbackManagerImpl.RequestCodeOffset.Login.toRequestCode(),
-                new CallbackManagerImpl.Callback() {
-                    @Override
-                    public boolean onActivityResult(int resultCode, Intent data) {
-                        capture.set(true);
-                        return true;
-                    }
-                });
-        callbackManagerImpl.onActivityResult(
-                FacebookSdk.getCallbackRequestCodeOffset(),
-                1,
-                new Intent());
-        assertTrue(capture.get());
-    }
-
-    @Test
-    public void testRightCallbackExecuted() {
-        final Capture<Boolean> capture = new Capture(false);
-
-        final CallbackManagerImpl callbackManagerImpl = new CallbackManagerImpl();
-
-        callbackManagerImpl.registerCallback(
-                123,
-                new CallbackManagerImpl.Callback() {
-                    @Override
-                    public boolean onActivityResult(int resultCode, Intent data) {
-                        capture.set(true);
-                        return true;
-                    }
-                });
-        callbackManagerImpl.registerCallback(
-                456,
-                new CallbackManagerImpl.Callback() {
-                    @Override
-                    public boolean onActivityResult(int resultCode, Intent data) {
-                        return false;
-                    }
-                });
-        callbackManagerImpl.onActivityResult(
-                123,
-                1,
-                new Intent());
-        assertTrue(capture.get());
-    }
-
-    @Test
-    public void testStaticCallbackExecuted() {
-        final Capture<Boolean> capture = new Capture(false);
-
-        final CallbackManagerImpl callbackManagerImpl = new CallbackManagerImpl();
-
-        callbackManagerImpl.registerStaticCallback(
-                CallbackManagerImpl.RequestCodeOffset.Login.toRequestCode(),
-                new CallbackManagerImpl.Callback() {
-                    @Override
-                    public boolean onActivityResult(int resultCode, Intent data) {
-                        capture.set(true);
-                        return true;
-                    }
-                });
-        callbackManagerImpl.onActivityResult(
-                FacebookSdk.getCallbackRequestCodeOffset(),
-                1,
-                new Intent());
-        assertTrue(capture.get());
-    }
-
-    @Test
-    public void testStaticCallbackSkipped() {
-        final Capture<Boolean> capture = new Capture(false);
-        final Capture<Boolean> captureStatic = new Capture(false);
-
-        final CallbackManagerImpl callbackManagerImpl = new CallbackManagerImpl();
-
-        callbackManagerImpl.registerCallback(
-                CallbackManagerImpl.RequestCodeOffset.Login.toRequestCode(),
-                new CallbackManagerImpl.Callback() {
-                    @Override
-                    public boolean onActivityResult(int resultCode, Intent data) {
-                        capture.set(true);
-                        return true;
-                    }
-                });
-        callbackManagerImpl.registerStaticCallback(
-                CallbackManagerImpl.RequestCodeOffset.Login.toRequestCode(),
-                new CallbackManagerImpl.Callback() {
-                    @Override
-                    public boolean onActivityResult(int resultCode, Intent data) {
-                        captureStatic.set(true);
-                        return true;
-                    }
-                });
-        callbackManagerImpl.onActivityResult(
-                FacebookSdk.getCallbackRequestCodeOffset(),
-                1,
-                new Intent());
-        assertTrue(capture.get());
-        assertFalse(captureStatic.get());
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/internal/FacebookRequestErrorClassificationTest.java b/facebook/src/test/java/com/facebook/internal/FacebookRequestErrorClassificationTest.java
deleted file mode 100644
index d6ec8b7c3..000000000
--- a/facebook/src/test/java/com/facebook/internal/FacebookRequestErrorClassificationTest.java
+++ /dev/null
@@ -1,75 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import com.facebook.FacebookRequestError;
-import com.facebook.FacebookTestCase;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
-import org.junit.Test;
-
-import static org.junit.Assert.*;
-
-public class FacebookRequestErrorClassificationTest extends FacebookTestCase {
-    private final String errorClassificationJSON =
-        "{" +
-        "   \"android_sdk_error_categories\": [" +
-        "      {" +
-        "         \"name\": \"other\"," +
-        "         \"items\": [" +
-        "           { \"code\": 102, \"subcodes\": [ 459, 464 ] }," +
-        "           { \"code\": 190, \"subcodes\": [ 459, 464 ] }" +
-        "         ]" +
-        "      }," +
-        "      {" +
-        "         \"name\": \"login_recoverable\"," +
-        "         \"items\": [ { \"code\": 102 }, { \"code\": 190 } ]," +
-        "         \"recovery_message\": \"Please log into this app again to reconnect your Facebook account.\"" +
-        "      }," +
-        "      {" +
-        "         \"name\": \"transient\"," +
-        "         \"items\": [ { \"code\": 1 }, { \"code\": 2 }, { \"code\": 4 }, { \"code\": 9 }, { \"code\": 17 }, { \"code\": 341 } ]" +
-        "      }" +
-        "   ]," +
-        "   \"id\": \"233936543368280\"" +
-        "}";
-
-
-    @Test
-    public void testX() throws Exception {
-        JSONObject serverResponse = new JSONObject(errorClassificationJSON);
-        JSONArray jsonArray = serverResponse.getJSONArray("android_sdk_error_categories");
-        FacebookRequestErrorClassification errorClassification =
-                FacebookRequestErrorClassification.createFromJSON(jsonArray);
-        assertNotNull(errorClassification);
-        assertNull(errorClassification.getRecoveryMessage(FacebookRequestError.Category.OTHER));
-        assertNull(errorClassification.getRecoveryMessage(FacebookRequestError.Category.TRANSIENT));
-        assertNotNull(errorClassification.getRecoveryMessage(
-                FacebookRequestError.Category.LOGIN_RECOVERABLE));
-        assertEquals(2, errorClassification.getOtherErrors().size());
-        assertEquals(2, errorClassification.getLoginRecoverableErrors().size());
-        assertEquals(6, errorClassification.getTransientErrors().size());
-        // test subcodes
-        assertEquals(2, errorClassification.getOtherErrors().get(102).size());
-        assertNull(errorClassification.getLoginRecoverableErrors().get(102));
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/internal/FileLruCacheTest.java b/facebook/src/test/java/com/facebook/internal/FileLruCacheTest.java
deleted file mode 100644
index e4a6e00e2..000000000
--- a/facebook/src/test/java/com/facebook/internal/FileLruCacheTest.java
+++ /dev/null
@@ -1,442 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-
-import com.facebook.FacebookSdk;
-import com.facebook.FacebookTestCase;
-import com.facebook.TestUtils;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-
-import java.io.ByteArrayInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.util.Random;
-
-import static org.junit.Assert.*;
-
-public final class FileLruCacheTest extends FacebookTestCase {
-    private static final Random random = new Random();
-
-    @Before
-    public void before() {
-        FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
-    }
-
-    @Test
-    public void testCacheOutputStream() throws Exception {
-        int dataSize = 1024;
-        byte[] data = generateBytes(dataSize);
-        String key = "a";
-
-        // Limit to 2x to allow for extra header data
-        FileLruCache cache = new FileLruCache("testCacheOutputStream", limitCacheSize(2*dataSize));
-
-        try {
-            put(cache, key, data);
-            checkValue(cache, key, data);
-        } finally {
-            TestUtils.clearAndDeleteLruCacheDirectory(cache);
-        }
-    }
-
-    @Test
-    public void testCacheInputStream() throws Exception {
-        int dataSize = 1024;
-        byte[] data = generateBytes(dataSize);
-        String key = "a";
-        InputStream stream = new ByteArrayInputStream(data);
-
-        // Limit to 2x to allow for extra header data
-        FileLruCache cache = new FileLruCache("testCacheInputStream", limitCacheSize(2*dataSize));
-        try {
-            TestUtils.clearFileLruCache(cache);
-
-            InputStream wrapped = cache.interceptAndPut(key, stream);
-            consumeAndClose(wrapped);
-            checkValue(cache, key, data);
-        } finally {
-            TestUtils.clearAndDeleteLruCacheDirectory(cache);
-        }
-    }
-
-    @Test
-    public void testCacheClear() throws Exception {
-        int dataSize = 1024;
-        byte[] data = generateBytes(dataSize);
-        String key = "a";
-
-        // Limit to 2x to allow for extra header data
-        FileLruCache cache = new FileLruCache("testCacheClear", limitCacheSize(2*dataSize));
-        try {
-            TestUtils.clearFileLruCache(cache);
-
-            put(cache, key, data);
-            checkValue(cache, key, data);
-
-            TestUtils.clearFileLruCache(cache);
-            assertEquals(false, hasValue(cache, key));
-            assertEquals(0, cache.sizeInBytesForTest());
-        } finally {
-            TestUtils.clearAndDeleteLruCacheDirectory(cache);
-        }
-    }
-
-    @Test
-    public void testCacheClearMidBuffer() throws Exception {
-        int dataSize = 1024;
-        byte[] data = generateBytes(dataSize);
-        String key = "a";
-        String key2 = "b";
-
-        // Limit to 2x to allow for extra header data
-        FileLruCache cache = new FileLruCache("testCacheClear", limitCacheSize(2*dataSize));
-        try {
-            TestUtils.clearFileLruCache(cache);
-
-            put(cache, key, data);
-            checkValue(cache, key, data);
-            OutputStream stream = cache.openPutStream(key2);
-            Thread.sleep(200);
-
-            TestUtils.clearFileLruCache(cache);
-
-            stream.write(data);
-            stream.close();
-
-            assertEquals(false, hasValue(cache, key));
-            assertEquals(false, hasValue(cache, key2));
-            assertEquals(0, cache.sizeInBytesForTest());
-        } finally {
-            TestUtils.clearAndDeleteLruCacheDirectory(cache);
-        }
-    }
-
-    @Test
-    public void testSizeInBytes() throws Exception {
-        int count = 17;
-        int dataSize = 53;
-        int cacheSize = count * dataSize;
-        byte[] data = generateBytes(dataSize);
-
-        // Limit to 2x to allow for extra header data
-        FileLruCache cache = new FileLruCache("testSizeInBytes", limitCacheSize(2*cacheSize));
-        try {
-            TestUtils.clearFileLruCache(cache);
-
-            for (int i = 0; i < count; i++) {
-                put(cache, i, data);
-
-                // The size reported by sizeInBytes includes a version/size token as well
-                // as a JSON blob that records the name.  Verify that the cache size is larger
-                // than the data content but not more than twice as large.  This guarantees
-                // that sizeInBytes is doing at least approximately the right thing.
-                int totalDataSize = (i + 1) * dataSize;
-                assertTrue(cache.sizeInBytesForTest() > totalDataSize);
-                assertTrue(cache.sizeInBytesForTest() < 2 * totalDataSize);
-            }
-            for (int i = 0; i < count; i++) {
-                String key = Integer.valueOf(i).toString();
-                checkValue(cache, key, data);
-            }
-        } finally {
-            TestUtils.clearAndDeleteLruCacheDirectory(cache);
-        }
-    }
-
-    @Test
-    public void testCacheSizeLimit() throws Exception {
-        int count = 64;
-        int dataSize = 32;
-        int cacheSize = count * dataSize / 2;
-        byte[] data = generateBytes(dataSize);
-
-        // Here we do not set the limit to 2x to make sure we hit the limit well before we have
-        // added all the data.
-        FileLruCache cache = new FileLruCache("testCacheSizeLimit", limitCacheSize(cacheSize));
-        try {
-            TestUtils.clearFileLruCache(cache);
-
-            for (int i = 0; i < count; i++) {
-                put(cache, i, data);
-
-                // See comment in testSizeInBytes for why this is not an exact calculation.
-                //
-                // This changes verification such that the final cache size lands somewhere
-                // between half and full quota.
-                int totalDataSize = (i + 1) * dataSize;
-                assertTrue(cache.sizeInBytesForTest() > Math.min(totalDataSize, cacheSize / 2));
-                assertTrue(cache.sizeInBytesForTest() < Math.min(2 * totalDataSize, cacheSize));
-            }
-
-            // sleep for a bit to make sure the trim finishes
-            Thread.sleep(200);
-
-            // Verify that some keys exist and others do not
-            boolean hasValueExists = false;
-            boolean hasNoValueExists = false;
-
-            for (int i = 0; i < count; i++) {
-                String key = Integer.valueOf(i).toString();
-                if (hasValue(cache, key)) {
-                    hasValueExists = true;
-                    checkValue(cache, key, data);
-                } else {
-                    hasNoValueExists = true;
-                }
-            }
-
-            assertEquals(true, hasValueExists);
-            assertEquals(true, hasNoValueExists);
-        } finally {
-            TestUtils.clearAndDeleteLruCacheDirectory(cache);
-        }
-    }
-
-    @Test
-    public void testCacheCountLimit() throws Exception {
-        int count = 64;
-        int dataSize = 32;
-        int cacheCount = count / 2;
-        byte[] data = generateBytes(dataSize);
-
-        // Here we only limit by count, and we allow half of the entries.
-        FileLruCache cache = new FileLruCache("testCacheCountLimit", limitCacheCount(cacheCount));
-        try {
-            TestUtils.clearFileLruCache(cache);
-
-            for (int i = 0; i < count; i++) {
-                put(cache, i, data);
-            }
-
-            // sleep for a bit to make sure the trim finishes
-            Thread.sleep(200);
-
-            // Verify that some keys exist and others do not
-            boolean hasValueExists = false;
-            boolean hasNoValueExists = false;
-
-            for (int i = 0; i < count; i++) {
-                if (hasValue(cache, i)) {
-                    hasValueExists = true;
-                    checkValue(cache, i, data);
-                } else {
-                    hasNoValueExists = true;
-                }
-            }
-
-            assertEquals(true, hasValueExists);
-            assertEquals(true, hasNoValueExists);
-        } finally {
-            TestUtils.clearAndDeleteLruCacheDirectory(cache);
-        }
-    }
-
-    @Test
-    public void testCacheLru() throws IOException, InterruptedException {
-        int keepCount = 10;
-        int otherCount = 5;
-        int dataSize = 64;
-        byte[] data = generateBytes(dataSize);
-
-        // Limit by count, and allow all the keep keys plus one other.
-        FileLruCache cache = new FileLruCache("testCacheLru", limitCacheCount(keepCount + 1));
-        try {
-            TestUtils.clearFileLruCache(cache);
-
-            for (int i = 0; i < keepCount; i++) {
-                put(cache, i, data);
-            }
-
-            // Make sure operations are separated by enough time that the file timestamps are all different.
-            // On the test device, it looks like lastModified has 1-second resolution, so we have to wait at
-            // least a second to guarantee that updated timestamps will come later.
-            Thread.sleep(1000);
-            for (int i = 0; i < otherCount; i++) {
-                put(cache, keepCount + i, data);
-                Thread.sleep(1000);
-
-                // By verifying all the keep keys, they should be LRU and survive while the others do not.
-                for (int keepIndex = 0; keepIndex < keepCount; keepIndex++) {
-                    checkValue(cache, keepIndex, data);
-                }
-                Thread.sleep(200);
-            }
-
-            // All but the last other key should have been pushed out
-            for (int i = 0; i < (otherCount - 1); i++) {
-                String key = Integer.valueOf(keepCount + i).toString();
-                assertEquals(false, hasValue(cache, key));
-            }
-        } finally {
-            TestUtils.clearAndDeleteLruCacheDirectory(cache);
-        }
-    }
-
-    @Test
-    public void testConcurrentWritesToSameKey() throws IOException, InterruptedException {
-        final int count = 5;
-        final int dataSize = 81;
-        final int threadCount = 31;
-        final int iterationCount = 10;
-        final byte[] data = generateBytes(dataSize);
-
-        final FileLruCache cache = new FileLruCache(
-                "testConcurrentWritesToSameKey", limitCacheCount(count+1));
-        try {
-            TestUtils.clearFileLruCache(cache);
-
-            Runnable run = new Runnable() {
-                @Override
-                public void run() {
-                    for (int iterations = 0; iterations < iterationCount; iterations++) {
-                        for (int i = 0; i < count; i++) {
-                            put(cache, i, data);
-                        }
-                    }
-                }
-            };
-
-            // Create a bunch of threads to write a set of keys repeatedly
-            Thread[] threads = new Thread[threadCount];
-            for (int i = 0; i < threads.length; i++) {
-                threads[i] = new Thread(run);
-            }
-
-            for (Thread thread : threads) {
-                thread.start();
-            }
-
-            for (Thread thread : threads) {
-                thread.join(10 * 1000, 0);
-            }
-
-            // Verify that the file state ended up consistent in the end
-            for (int i = 0; i < count; i++) {
-                checkValue(cache, i, data);
-            }
-        } finally {
-            TestUtils.clearAndDeleteLruCacheDirectory(cache);
-        }
-    }
-
-    byte[] generateBytes(int n) {
-        byte[] bytes = new byte[n];
-        random.nextBytes(bytes);
-        return bytes;
-    }
-
-    FileLruCache.Limits limitCacheSize(int n) {
-        FileLruCache.Limits limits = new FileLruCache.Limits();
-        limits.setByteCount(n);
-        return limits;
-    }
-
-    FileLruCache.Limits limitCacheCount(int n) {
-        FileLruCache.Limits limits = new FileLruCache.Limits();
-        limits.setFileCount(n);
-        return limits;
-    }
-
-    void put(FileLruCache cache, int i, byte[] data) {
-        put(cache, Integer.valueOf(i).toString(), data);
-    }
-
-    void put(FileLruCache cache, String key, byte[] data) {
-        try {
-            OutputStream stream = cache.openPutStream(key);
-            assertNotNull(stream);
-
-            stream.write(data);
-            stream.close();
-        } catch (IOException e) {
-            // Fail test and print Exception
-            assertNull(e);
-        }
-    }
-
-    void checkValue(FileLruCache cache, int i, byte[] expected) {
-        checkValue(cache, Integer.valueOf(i).toString(), expected);
-    }
-
-    void checkValue(FileLruCache cache, String key, byte[] expected) {
-        try {
-            InputStream stream = cache.get(key);
-            assertNotNull(stream);
-
-            checkInputStream(expected, stream);
-            stream.close();
-        } catch (IOException e) {
-            // Fail test and print Exception
-            assertNull(e);
-        }
-    }
-
-    boolean hasValue(FileLruCache cache, int i) {
-        return hasValue(cache, Integer.valueOf(i).toString());
-    }
-
-    boolean hasValue(FileLruCache cache, String key) {
-        InputStream stream = null;
-
-        try {
-            stream = cache.get(key);
-        } catch (IOException e) {
-            // Fail test and print Exception
-            assertNull(e);
-        }
-
-        return stream != null;
-    }
-
-    void checkInputStream(byte[] expected, InputStream actual) {
-        try {
-            for (int i = 0; i < expected.length; i++) {
-                int b = actual.read();
-                assertEquals(((int)expected[i]) & 0xff, b);
-            }
-
-            int eof = actual.read();
-            assertEquals(-1, eof);
-        } catch (IOException e) {
-            // Fail test and print Exception
-            assertNull(e);
-        }
-    }
-
-    void consumeAndClose(InputStream stream) {
-        try {
-            byte[] buffer = new byte[1024];
-            while (stream.read(buffer) > -1) {
-                // these bytes intentionally ignored
-            }
-            stream.close();
-        } catch (IOException e) {
-            // Fail test and print Exception
-            assertNull(e);
-        }
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/internal/JsonUtilTest.java b/facebook/src/test/java/com/facebook/internal/JsonUtilTest.java
deleted file mode 100644
index c3cf07344..000000000
--- a/facebook/src/test/java/com/facebook/internal/JsonUtilTest.java
+++ /dev/null
@@ -1,109 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import com.facebook.FacebookTestCase;
-
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Map.Entry;
-import java.util.Set;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.junit.Test;
-
-import static org.junit.Assert.*;
-
-
-public final class JsonUtilTest extends FacebookTestCase {
-
-    @Test
-    public void testJsonObjectClear() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        JsonUtil.jsonObjectClear(jsonObject);
-        assertEquals(0, jsonObject.length());
-    }
-
-    @Test
-    public void testJsonObjectContainsValue() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        assertTrue(JsonUtil.jsonObjectContainsValue(jsonObject, "pocus"));
-        assertFalse(JsonUtil.jsonObjectContainsValue(jsonObject, "Fred"));
-    }
-
-    @Test
-    public void testJsonObjectEntrySet() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        Set<Entry<String, Object>> entrySet = JsonUtil.jsonObjectEntrySet(jsonObject);
-        assertEquals(2, entrySet.size());
-    }
-
-    @Test
-    public void testJsonObjectKeySet() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        Set<String> keySet = JsonUtil.jsonObjectKeySet(jsonObject);
-        assertEquals(2, keySet.size());
-        assertTrue(keySet.contains("hello"));
-        assertFalse(keySet.contains("world"));
-    }
-
-    @Test
-    public void testJsonObjectPutAll() throws JSONException {
-        HashMap<String, Object> map = new HashMap<String, Object>();
-        map.put("hello", "world");
-        map.put("hocus", "pocus");
-
-        JSONObject jsonObject = new JSONObject();
-        JsonUtil.jsonObjectPutAll(jsonObject, map);
-
-        assertEquals("pocus", jsonObject.get("hocus"));
-        assertEquals(2, jsonObject.length());
-    }
-
-    @Test
-    public void testJsonObjectValues() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        Collection<Object> values = JsonUtil.jsonObjectValues(jsonObject);
-
-        assertEquals(2, values.size());
-        assertTrue(values.contains("world"));
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/internal/NativeAppCallAttachmentStoreTest.java b/facebook/src/test/java/com/facebook/internal/NativeAppCallAttachmentStoreTest.java
deleted file mode 100644
index e4aff2a8d..000000000
--- a/facebook/src/test/java/com/facebook/internal/NativeAppCallAttachmentStoreTest.java
+++ /dev/null
@@ -1,111 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.graphics.Bitmap;
-
-import com.facebook.FacebookTestCase;
-
-import org.junit.Test;
-import org.robolectric.Robolectric;
-
-import java.io.File;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.UUID;
-
-import static org.junit.Assert.*;
-
-
-public class NativeAppCallAttachmentStoreTest extends FacebookTestCase {
-    private static final UUID CALL_ID = UUID.randomUUID();
-    private static final String ATTACHMENT_NAME = "hello";
-
-    @Override
-    public void setUp() {
-        super.setUp();
-    }
-
-    private Bitmap createBitmap() {
-        return Bitmap.createBitmap(20, 20, Bitmap.Config.ALPHA_8);
-    }
-
-    private List<NativeAppCallAttachmentStore.Attachment> createAttachments(
-            UUID callId, Bitmap bitmap) {
-        List<NativeAppCallAttachmentStore.Attachment> attachments = new ArrayList<>();
-        attachments.add(NativeAppCallAttachmentStore.createAttachment(callId, bitmap));
-
-        return attachments;
-    }
-
-    @Test
-    public void testAddAttachmentsForCallWithNullCallId() throws Exception {
-        try {
-            List<NativeAppCallAttachmentStore.Attachment> attachments =
-                    createAttachments(null, createBitmap());
-            NativeAppCallAttachmentStore.addAttachments(attachments);
-            fail("expected exception");
-        } catch (NullPointerException ex) {
-            assertTrue(ex.getMessage().contains("callId"));
-        }
-    }
-
-    @Test
-    public void testAddAttachmentsForCallWithNullBitmap() throws Exception {
-        try {
-            List<NativeAppCallAttachmentStore.Attachment> attachments =
-                    createAttachments(CALL_ID, null);
-            NativeAppCallAttachmentStore.addAttachments(attachments);
-            fail("expected exception");
-        } catch (NullPointerException ex) {
-            assertTrue(ex.getMessage().contains("attachmentBitmap"));
-        }
-    }
-
-    @Test
-    public void testGetAttachmentsDirectory() throws Exception {
-        File dir = NativeAppCallAttachmentStore.getAttachmentsDirectory();
-        assertNotNull(dir);
-        assertTrue(
-                dir.getAbsolutePath().contains(NativeAppCallAttachmentStore.ATTACHMENTS_DIR_NAME));
-    }
-
-    @Test
-    public void testGetAttachmentsDirectoryForCall() throws Exception {
-        NativeAppCallAttachmentStore.ensureAttachmentsDirectoryExists();
-        File dir = NativeAppCallAttachmentStore.getAttachmentsDirectoryForCall(CALL_ID, false);
-        assertNotNull(dir);
-        assertTrue(
-                dir.getAbsolutePath().contains(NativeAppCallAttachmentStore.ATTACHMENTS_DIR_NAME));
-        assertTrue(dir.getAbsolutePath().contains(CALL_ID.toString()));
-    }
-
-    @Test
-    public void testGetAttachmentFile() throws Exception {
-        NativeAppCallAttachmentStore.ensureAttachmentsDirectoryExists();
-        File dir = NativeAppCallAttachmentStore.getAttachmentFile(CALL_ID, ATTACHMENT_NAME, false);
-        assertNotNull(dir);
-        assertTrue(
-                dir.getAbsolutePath().contains(NativeAppCallAttachmentStore.ATTACHMENTS_DIR_NAME));
-        assertTrue(dir.getAbsolutePath().contains(CALL_ID.toString()));
-        assertTrue(dir.getAbsolutePath().contains(ATTACHMENT_NAME.toString()));
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/internal/NativeProtocolVersionTest.java b/facebook/src/test/java/com/facebook/internal/NativeProtocolVersionTest.java
deleted file mode 100644
index 58f330a41..000000000
--- a/facebook/src/test/java/com/facebook/internal/NativeProtocolVersionTest.java
+++ /dev/null
@@ -1,167 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.test.suitebuilder.annotation.SmallTest;
-
-import com.facebook.FacebookTestCase;
-
-import org.junit.Test;
-
-import java.util.TreeSet;
-
-import static org.junit.Assert.*;
-
-
-public class NativeProtocolVersionTest extends FacebookTestCase {
-    @Test
-    public void testSdkOlderThanApp_versionSpecOpen() {
-        // Base case where a feature was enabled a while ago and the SDK and Native app have been updated
-        // since then.
-        int[] versionSpec = new int[] {3};
-        int latestSdkVersion = 7;
-        int[] availableFbAppVersions = new int[] {1,2,3,4,5,6,7,8};
-
-        int resultVersion = NativeProtocol.computeLatestAvailableVersionFromVersionSpec(
-                getTreeSetFromIntArray(availableFbAppVersions),
-                latestSdkVersion,
-                versionSpec);
-
-        assertEquals(resultVersion, 7);
-    }
-
-    @Test
-    public void testSdkNewerThanApp_versionSpecOpen() {
-        // Base case where a feature was enabled a while ago and the SDK and Native app have been updated
-        // since then.
-        int[] versionSpec = new int[] {3};
-        int latestSdkVersion = 8;
-        int[] availableFbAppVersions = new int[] {1,2,3,4,5,6,7};
-
-        int resultVersion = NativeProtocol.computeLatestAvailableVersionFromVersionSpec(
-                getTreeSetFromIntArray(availableFbAppVersions),
-                latestSdkVersion,
-                versionSpec);
-
-        assertEquals(resultVersion, 7);
-    }
-
-    @Test
-    public void testSdkOlderThanApp_versionSpecDisabled() {
-        // Case where a feature was enabled AND disabled a while ago and the SDK and Native app have been
-        // updated since then.
-        int[] versionSpec = new int[] {1,3,7,8};
-        int latestSdkVersion = 7;
-        int[] availableFbAppVersions = new int[] {1,2,3,4,5,6,7,8};
-
-        int resultVersion = NativeProtocol.computeLatestAvailableVersionFromVersionSpec(
-                getTreeSetFromIntArray(availableFbAppVersions),
-                latestSdkVersion,
-                versionSpec);
-
-        assertEquals(resultVersion, NativeProtocol.NO_PROTOCOL_AVAILABLE);
-    }
-
-    @Test
-    public void testSdkNewerThanApp_versionSpecDisabled() {
-        // Case where a feature was enabled AND disabled a while ago and the SDK and Native app have been
-        // updated since then.
-        int[] versionSpec = new int[] {1,3,6,7};
-        int latestSdkVersion = 8;
-        int[] availableFbAppVersions = new int[] {1,2,3,4,5,6,7};
-
-        int resultVersion = NativeProtocol.computeLatestAvailableVersionFromVersionSpec(
-                getTreeSetFromIntArray(availableFbAppVersions),
-                latestSdkVersion,
-                versionSpec);
-
-        assertEquals(resultVersion, NativeProtocol.NO_PROTOCOL_AVAILABLE);
-    }
-
-    @Test
-    public void testSdkOlderThanApp_versionSpecNewerAndEnabled() {
-        // Case where the sdk and app are older, but the app is still enabled
-        int[] versionSpec = new int[] {1,3,7,9,10,11,12,13};
-        int latestSdkVersion = 7;
-        int[] availableFbAppVersions = new int[] {1,2,3,4,5,6,7,8};
-
-        int resultVersion = NativeProtocol.computeLatestAvailableVersionFromVersionSpec(
-                getTreeSetFromIntArray(availableFbAppVersions),
-                latestSdkVersion,
-                versionSpec);
-
-        assertEquals(resultVersion, 7);
-    }
-
-    @Test
-    public void testSdkNewerThanApp_versionSpecNewerAndEnabled() {
-        // Case where the sdk and app are older, but the app is still enabled
-        int[] versionSpec = new int[] {1,3,7,9,10,11,12,13};
-        int latestSdkVersion = 8;
-        int[] availableFbAppVersions = new int[] {1,2,3,4,5,6,7};
-
-        int resultVersion = NativeProtocol.computeLatestAvailableVersionFromVersionSpec(
-                getTreeSetFromIntArray(availableFbAppVersions),
-                latestSdkVersion,
-                versionSpec);
-
-        assertEquals(resultVersion, 7);
-    }
-
-    @Test
-    public void testSdkOlderThanApp_versionSpecNewerAndDisabled() {
-        // Case where the sdk and app are older, and the app is a disabled version
-        int[] versionSpec = new int[] {1,3,7,8,10,11,12,13};
-        int latestSdkVersion = 7;
-        int[] availableFbAppVersions = new int[] {1,2,3,4,5,6,7,8};
-
-        int resultVersion = NativeProtocol.computeLatestAvailableVersionFromVersionSpec(
-                getTreeSetFromIntArray(availableFbAppVersions),
-                latestSdkVersion,
-                versionSpec);
-
-        assertEquals(resultVersion, NativeProtocol.NO_PROTOCOL_AVAILABLE);
-    }
-
-    @Test
-    public void testSdkNewerThanApp_versionSpecNewerAndDisabled() {
-        // Case where the sdk and app are older, and the app is a disabled version
-        int[] versionSpec = new int[] {1,3,6,7,10,11,12,13};
-        int latestSdkVersion = 8;
-        int[] availableFbAppVersions = new int[] {1,2,3,4,5,6,7};
-
-        int resultVersion = NativeProtocol.computeLatestAvailableVersionFromVersionSpec(
-                getTreeSetFromIntArray(availableFbAppVersions),
-                latestSdkVersion,
-                versionSpec);
-
-        assertEquals(resultVersion, NativeProtocol.NO_PROTOCOL_AVAILABLE);
-    }
-
-    private TreeSet<Integer> getTreeSetFromIntArray(int[] array) {
-        TreeSet<Integer> treeSet = new TreeSet<Integer>();
-        for (int a : array) {
-            treeSet.add(a);
-        }
-
-        return treeSet;
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/internal/ShareInternalUtilityTest.java b/facebook/src/test/java/com/facebook/internal/ShareInternalUtilityTest.java
deleted file mode 100644
index 78249805b..000000000
--- a/facebook/src/test/java/com/facebook/internal/ShareInternalUtilityTest.java
+++ /dev/null
@@ -1,251 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-
-package com.facebook.internal;
-
-import com.facebook.FacebookTestCase;
-import com.facebook.share.internal.ShareInternalUtility;
-import com.facebook.share.model.ShareOpenGraphAction;
-import com.facebook.share.model.ShareOpenGraphContent;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Locale;
-import java.util.UUID;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
-public class ShareInternalUtilityTest extends FacebookTestCase {
-
-    @Test
-    public void testRemoveNamespaceFromNullOGJsonObject() {
-        assertNull(ShareInternalUtility.removeNamespacesFromOGJsonObject(null, false));
-    }
-
-    @Test
-    public void testRemoveNamespaceFromComplexOGJsonObject() {
-        try {
-            JSONObject testObject = getJsonOGActionTestObject();
-            testObject = ShareInternalUtility.removeNamespacesFromOGJsonObject(testObject, false);
-            JSONObject expectedResult = getJsonOGActionTestObjectWithoutNamespace();
-            if(!simpleJsonObjComparer(testObject, expectedResult)){
-                fail(String.format(
-                        Locale.ROOT,
-                        "Actual: %s\nExpected: %s",
-                        testObject.toString(),
-                        expectedResult.toString()));
-            }
-        } catch (JSONException ex) {
-            // Fail
-            assertNotNull(ex);
-        }
-    }
-
-    @Test
-    public void testJsonSerializationOfOpenGraph() {
-        String placeId = "1";
-        ShareOpenGraphContent content = new ShareOpenGraphContent.Builder()
-                .setAction(
-                        new ShareOpenGraphAction.Builder()
-                                .putStringArrayList("tags", new ArrayList<String>() {{
-                                    add("2");
-                                    add("4");
-                                }})
-                                .build()
-                ).setPeopleIds(new ArrayList<String>() {{
-                    add("1");
-                    add("1");
-                    add("2");
-                    add("3");
-                }}).setPlaceId(placeId)
-                .build();
-
-        try {
-            JSONObject object = ShareInternalUtility.toJSONObjectForCall(null, content);
-            List<String> peopleIds = Utility.jsonArrayToStringList(object.getJSONArray("tags"));
-            assertEquals(4, peopleIds.size());
-            for (int i = 1; i < 5; ++i) {
-                assertTrue(peopleIds.contains(new Integer(i).toString()));
-            }
-
-            assertEquals(placeId, object.getString("place"));
-        } catch (JSONException ex) {
-            // Fail
-            assertNotNull(ex);
-            return;
-        }
-    }
-
-    @Test
-    public void testJsonSerializationOfOpenGraphExistingPlace() {
-        ShareOpenGraphContent content = new ShareOpenGraphContent.Builder()
-                .setAction(
-                        new ShareOpenGraphAction.Builder()
-                                .putString("place", "1")
-                                .build()
-                ).setPlaceId("2")
-                .build();
-
-        try {
-            JSONObject object = ShareInternalUtility.toJSONObjectForCall(null, content);
-            assertEquals("1", object.getString("place"));
-        } catch (JSONException ex) {
-            // Fail
-            assertNotNull(ex);
-            return;
-        }
-    }
-
-    private static JSONObject getJsonOGActionTestObject() throws JSONException {
-        JSONObject testAction = new JSONObject();
-        testAction.put("og:field", 1);
-        testAction.put("namespaced:custom:field", 3);
-
-        JSONObject testOGContent = getJsonOGContentTestObject();
-        testAction.put("namespaced:content", testOGContent);
-        testAction.put("array", getJsonOGArrayTestObject());
-
-        return testAction;
-    }
-
-    private static JSONObject getJsonOGActionTestObjectWithoutNamespace() throws JSONException {
-        JSONObject testAction = new JSONObject();
-        testAction.put("field", 1);
-        testAction.put("custom:field", 3);
-
-        JSONObject testOGContent = getJsonOGContentTestObjectWithoutNamespace();
-        testAction.put("content", testOGContent);
-        testAction.put("array", getJsonOGArrayTestObjectWithoutNamespace());
-
-        return testAction;
-    }
-
-    private static JSONArray getJsonOGArrayTestObject() throws JSONException {
-        JSONArray testArray = new JSONArray();
-        testArray.put(10);
-        testArray.put(getJsonOGContentTestObject());
-        return testArray;
-    }
-
-    private static JSONArray getJsonOGArrayTestObjectWithoutNamespace() throws JSONException {
-        JSONArray testArray = new JSONArray();
-        testArray.put(10);
-        testArray.put(getJsonOGContentTestObjectWithoutNamespace());
-        return testArray;
-    }
-
-    private static JSONObject getJsonOGContentTestObject() throws JSONException {
-        JSONObject testOGContent = new JSONObject();
-        testOGContent.put("fbsdk:create", true);
-        testOGContent.put("namespaced:field", 4);
-        testOGContent.put("og:field", 5);
-        testOGContent.put("custom:namespaced:field", 6);
-
-        JSONObject innerContent = new JSONObject();
-        innerContent.put("namespaced:field", 7);
-        innerContent.put("og:field", 8);
-        testOGContent.put("namespaced:innerContent", innerContent);
-        return testOGContent;
-    }
-
-    private static JSONObject getJsonOGContentTestObjectWithoutNamespace() throws JSONException {
-        JSONObject testOGContent = new JSONObject();
-        testOGContent.put("fbsdk:create", true);
-        testOGContent.put("field", 5);
-
-        JSONObject innerContent = new JSONObject();
-        innerContent.put("field", 8);
-        JSONObject innerData = new JSONObject();
-        innerData.put("field", 7);
-        innerContent.put("data", innerData);
-
-        JSONObject data = new JSONObject();
-        data.put("field", 4);
-        data.put("namespaced:field", 6);
-        data.put("innerContent", innerContent);
-
-        testOGContent.put("data", data);
-        return testOGContent;
-    }
-
-    private boolean simpleJsonObjComparer(JSONObject obj1, JSONObject obj2) {
-        if (obj1.names().length() != obj2.names().length()) {
-            return false;
-        }
-
-        Iterator<String> keys = obj1.keys();
-        while (keys.hasNext()) {
-            try {
-                String key = keys.next();
-                Object value1 = obj1.get(key);
-                Object value2 = obj2.get(key);
-                if (!jsonObjectValueComparer(value1, value2)){
-                    return false;
-                }
-            } catch (Exception ex) {
-                return false;
-            }
-        }
-
-        return true;
-    }
-
-    private boolean simpleJsonArrayComparer(JSONArray array1, JSONArray array2)
-            throws JSONException{
-        if(array1.length() != array2.length()) {
-            return  false;
-        }
-
-        for(int i = 0; i < array1.length(); ++i) {
-            if (!jsonObjectValueComparer(array1.get(i), array2.get(i))){
-                return false;
-            }
-        }
-        return true;
-    }
-
-    private boolean jsonObjectValueComparer(Object value1, Object value2)
-    throws JSONException{
-        if (value1 instanceof JSONObject) {
-            if (!simpleJsonObjComparer((JSONObject) value1, (JSONObject) value2)) {
-                return false;
-            }
-        } else if (value1 instanceof JSONArray) {
-            if (!simpleJsonArrayComparer((JSONArray) value1, (JSONArray) value2)) {
-                return false;
-            }
-        } else if (value1 != value2) {
-            return false;
-        }
-
-        return true;
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/internal/UtilityIntersectRangeTest.java b/facebook/src/test/java/com/facebook/internal/UtilityIntersectRangeTest.java
deleted file mode 100644
index d134cffc7..000000000
--- a/facebook/src/test/java/com/facebook/internal/UtilityIntersectRangeTest.java
+++ /dev/null
@@ -1,105 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import com.facebook.FacebookTestCase;
-
-import org.junit.Test;
-
-import java.util.Arrays;
-
-import static org.junit.Assert.*;
-
-
-public class UtilityIntersectRangeTest extends FacebookTestCase {
-
-    @Test
-    public void testIntersectRangesBothEmpty() {
-        int[] range1 = new int[0];
-        int[] range2 = new int[0];
-        int[] intersectRange = Utility.intersectRanges(range1, range2);
-        assertTrue(Arrays.equals(intersectRange, new int[]{}));
-    }
-
-    @Test
-    public void testIntersectRangesOneEmpty() {
-        int[] range1 = new int[0];
-        int[] range2 = new int[]{1, 10};
-        int[] intersectRange = Utility.intersectRanges(range1, range2);
-        assertTrue(Arrays.equals(intersectRange, new int[]{}));
-    }
-
-    @Test
-    public void testIntersectRangesBothSameAndClosed() {
-        int[] range1 = new int[]{20, 30};
-        int[] range2 = new int[]{20, 30};
-        int[] intersectRange = Utility.intersectRanges(range1, range2);
-        assertTrue(Arrays.equals(intersectRange, new int[]{20, 30}));
-    }
-
-    @Test
-    public void testIntersectRangesNoIntersect() {
-        int[] range1 = new int[]{20, 30};
-        int[] range2 = new int[]{30, 50};
-        int[] intersectRange = Utility.intersectRanges(range1, range2);
-        assertTrue(Arrays.equals(intersectRange, new int[]{}));
-    }
-
-    @Test
-    public void testIntersectRangesSubsets() {
-        int[] range1 = new int[]{20, 100};
-        int[] range2 = new int[]{30, 40, 50, 60, 99, 100};
-        int[] intersectRange = Utility.intersectRanges(range1, range2);
-        assertTrue(Arrays.equals(intersectRange, new int[]{30, 40, 50, 60, 99, 100}));
-    }
-
-    @Test
-    public void testIntersectRangesOverlap() {
-        int[] range1 = new int[]{20, 40, 60, 80};
-        int[] range2 = new int[]{10, 30, 50, 70};
-        int[] intersectRange = Utility.intersectRanges(range1, range2);
-        assertTrue(Arrays.equals(intersectRange, new int[]{20, 30, 60, 70}));
-    }
-
-    @Test
-    public void testIntersectRangesDifferentLengthsClosed() {
-        int[] range1 = new int[]{20, 40, 60, 80};
-        int[] range2 = new int[]{10, 30, 50, 70, 90, 110};
-        int[] intersectRange = Utility.intersectRanges(range1, range2);
-        assertTrue(Arrays.equals(intersectRange, new int[]{20, 30, 60, 70}));
-    }
-
-    @Test
-    public void testIntersectRangesDifferentLengthsOneOpen() {
-        int[] range1 = new int[]{10, 30, 50, 70, 90, 110};
-        int[] range2 = new int[]{20, 40, 60};
-        int[] intersectRange = Utility.intersectRanges(range1, range2);
-        assertTrue(Arrays.equals(intersectRange, new int[]{20, 30, 60, 70, 90, 110}));
-    }
-
-    @Test
-    public void testIntersectRangesDifferentLengthsBothOpen() {
-        int[] range1 = new int[]{10, 30, 50};
-        int[] range2 = new int[]{20, 40, 60};
-        int[] intersectRange = Utility.intersectRanges(range1, range2);
-        assertTrue(Arrays.equals(intersectRange, new int[]{20, 30, 60}));
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/internal/UtilityTest.java b/facebook/src/test/java/com/facebook/internal/UtilityTest.java
deleted file mode 100644
index 205e3107f..000000000
--- a/facebook/src/test/java/com/facebook/internal/UtilityTest.java
+++ /dev/null
@@ -1,69 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import android.os.Parcel;
-
-import com.facebook.FacebookTestCase;
-
-import org.junit.Test;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static org.junit.Assert.*;
-
-public class UtilityTest extends FacebookTestCase {
-
-    @Test
-    public void testStringMapToParcel() {
-        // Test null
-        assertNull(roundtrip(null));
-
-        HashMap<String, String> map = new HashMap<>();
-
-        // Test empty
-        assertEquals(0, roundtrip(map).size());
-
-        // Test regular
-        map.put("a", "100");
-        map.put("b", null);
-        map.put("c", "hello");
-
-        Map<String, String> result = roundtrip(map);
-        assertEquals(3, result.size());
-        assertEquals(map, result);
-        assertEquals("100", result.get("a"));
-        assertNull(result.get("b"));
-        assertEquals("hello", result.get("c"));
-    }
-
-    private Map<String, String> roundtrip(Map<String, String> input) {
-        Parcel parcel = Parcel.obtain();
-        try {
-            Utility.writeStringMapToParcel(parcel, input);
-            parcel.setDataPosition(0);
-            return Utility.readStringMapFromParcel(parcel);
-        } finally {
-            parcel.recycle();
-        }
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/internal/ValidateTest.java b/facebook/src/test/java/com/facebook/internal/ValidateTest.java
deleted file mode 100644
index 60c1fde4a..000000000
--- a/facebook/src/test/java/com/facebook/internal/ValidateTest.java
+++ /dev/null
@@ -1,112 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import com.facebook.FacebookTestCase;
-
-import java.util.Arrays;
-
-import org.junit.Test;
-
-import static org.junit.Assert.*;
-
-
-public class ValidateTest extends FacebookTestCase {
-    
-    @Test
-    public void testNotNullOnNonNull() {
-        Validate.notNull("A string", "name");
-    }
-
-    @Test
-    public void testNotNullOnNull() {
-        try {
-            Validate.notNull(null, "name");
-            fail("expected exception");
-        } catch (Exception e) {
-        }
-    }
-
-    @Test
-    public void testNotEmptyOnNonEmpty() {
-        Validate.notEmpty(Arrays.asList(new String[] { "hi" }), "name");
-    }
-
-    @Test
-    public void testNotEmptylOnEmpty() {
-        try {
-            Validate.notEmpty(Arrays.asList(new String[] {}), "name");
-            fail("expected exception");
-        } catch (Exception e) {
-        }
-    }
-
-    @Test
-    public void testNotNullOrEmptyOnNonEmpty() {
-        Validate.notNullOrEmpty("hi", "name");
-    }
-
-    @Test
-    public void testNotNullOrEmptyOnEmpty() {
-        try {
-            Validate.notNullOrEmpty("", "name");
-            fail("expected exception");
-        } catch (Exception e) {
-        }
-    }
-
-    @Test
-    public void testNotNullOrEmptyOnNull() {
-        try {
-            Validate.notNullOrEmpty(null, "name");
-            fail("expected exception");
-        } catch (Exception e) {
-        }
-    }
-
-    @Test
-    public void testOneOfOnValid() {
-        Validate.oneOf("hi", "name", "hi", "there");
-    }
-
-    @Test
-    public void testOneOfOnInvalid() {
-        try {
-            Validate.oneOf("hit", "name", "hi", "there");
-            fail("expected exception");
-        } catch (Exception e) {
-        }
-    }
-
-    @Test
-    public void testOneOfOnValidNull() {
-        Validate.oneOf(null, "name", "hi", "there", null);
-    }
-
-    @Test
-    public void testOneOfOnInvalidNull() {
-        try {
-            Validate.oneOf(null, "name", "hi", "there");
-            fail("expected exception");
-        } catch (Exception e) {
-        }
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/internal/WorkQueueTest.java b/facebook/src/test/java/com/facebook/internal/WorkQueueTest.java
deleted file mode 100644
index 983410c58..000000000
--- a/facebook/src/test/java/com/facebook/internal/WorkQueueTest.java
+++ /dev/null
@@ -1,336 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.internal;
-
-import com.facebook.FacebookTestCase;
-
-import org.junit.Test;
-
-import java.security.SecureRandom;
-import java.util.ArrayList;
-import java.util.concurrent.Executor;
-
-import static org.junit.Assert.*;
-
-public class WorkQueueTest extends FacebookTestCase {
-
-    @Test
-    public void testEmptyValidate() {
-        WorkQueue manager = new WorkQueue();
-        manager.validate();
-    }
-
-    @Test
-    public void testRunSomething() {
-        CountingRunnable run = new CountingRunnable();
-        assertEquals(0, run.getRunCount());
-
-        ScriptableExecutor executor = new ScriptableExecutor();
-        assertEquals(0, executor.getPendingCount());
-
-        WorkQueue manager = new WorkQueue(1, executor);
-
-        addActiveWorkItem(manager, run);
-        assertEquals(1, executor.getPendingCount());
-        assertEquals(0, run.getRunCount());
-
-        executeNext(manager, executor);
-        assertEquals(0, executor.getPendingCount());
-        assertEquals(1, run.getRunCount());
-    }
-
-    @Test
-    public void testRunSequence() {
-        final int workTotal = 100;
-
-        CountingRunnable run = new CountingRunnable();
-        ScriptableExecutor executor = new ScriptableExecutor();
-        WorkQueue manager = new WorkQueue(1, executor);
-
-        for (int i = 0; i < workTotal; i++) {
-            addActiveWorkItem(manager, run);
-            assertEquals(1, executor.getPendingCount());
-        }
-
-        for (int i = 0; i < workTotal; i++) {
-            assertEquals(1, executor.getPendingCount());
-            assertEquals(i, run.getRunCount());
-            executeNext(manager, executor);
-        }
-        assertEquals(0, executor.getPendingCount());
-        assertEquals(workTotal, run.getRunCount());
-    }
-
-    @Test
-    public void testRunParallel() {
-        final int workTotal = 100;
-
-        CountingRunnable run = new CountingRunnable();
-        ScriptableExecutor executor = new ScriptableExecutor();
-        WorkQueue manager = new WorkQueue(workTotal, executor);
-
-        for (int i = 0; i < workTotal; i++) {
-            assertEquals(i, executor.getPendingCount());
-            addActiveWorkItem(manager, run);
-        }
-
-        for (int i = 0; i < workTotal; i++) {
-            assertEquals(workTotal - i, executor.getPendingCount());
-            assertEquals(i, run.getRunCount());
-            executeNext(manager, executor);
-        }
-        assertEquals(0, executor.getPendingCount());
-        assertEquals(workTotal, run.getRunCount());
-    }
-
-    @Test
-    public void testSimpleCancel() {
-        CountingRunnable run = new CountingRunnable();
-        ScriptableExecutor executor = new ScriptableExecutor();
-        WorkQueue manager = new WorkQueue(1, executor);
-
-        addActiveWorkItem(manager, run);
-        WorkQueue.WorkItem work1 = addActiveWorkItem(manager, run);
-        cancelWork(manager, work1);
-
-        assertEquals(1, executor.getPendingCount());
-        executeNext(manager, executor);
-        assertEquals(0, executor.getPendingCount());
-    }
-
-    @Test
-    public void testMoveToFront() {
-        final int firstCount = 8;
-        final int highCount = 17;
-
-        ArrayList<WorkQueue.WorkItem> highWorkItems = new ArrayList<WorkQueue.WorkItem>();
-        CountingRunnable highRun = new CountingRunnable();
-        CountingRunnable firstRun = new CountingRunnable();
-        CountingRunnable lowRun = new CountingRunnable();
-        ScriptableExecutor executor = new ScriptableExecutor();
-        WorkQueue manager = new WorkQueue(firstCount, executor);
-
-        for (int i = 0; i < firstCount; i++) {
-            addActiveWorkItem(manager, firstRun);
-        }
-
-        int lowCount = 0;
-        for (int h = 0; h < highCount; h++) {
-            highWorkItems.add(addActiveWorkItem(manager, highRun));
-            for (int l = 0; l < h; l++) {
-                addActiveWorkItem(manager, lowRun);
-                lowCount++;
-            }
-        }
-
-        assertEquals(firstCount, executor.getPendingCount());
-        for (WorkQueue.WorkItem highItem : highWorkItems) {
-            prioritizeWork(manager, highItem);
-        }
-
-        for (int i = 0; i < firstCount; i++) {
-            assertEquals(i, firstRun.getRunCount());
-            executeNext(manager, executor);
-        }
-
-        for (int i = 0; i < highCount; i++) {
-            assertEquals(i, highRun.getRunCount());
-            executeNext(manager, executor);
-        }
-
-        for (int i = 0; i < lowCount; i++) {
-            assertEquals(i, lowRun.getRunCount());
-            executeNext(manager, executor);
-        }
-
-        assertEquals(firstCount, firstRun.getRunCount());
-        assertEquals(highCount, highRun.getRunCount());
-        assertEquals(lowCount, lowRun.getRunCount());
-    }
-
-    // Test cancelling running work item, completed work item
-    @Test
-    public void testThreadStress() {
-        WorkQueue manager = new WorkQueue();
-        ArrayList<StressRunnable> runnables = new ArrayList<StressRunnable>();
-        final int threadCount = 20;
-
-        for (int i = 0; i < threadCount; i++) {
-            runnables.add(new StressRunnable(manager, 20));
-        }
-
-        for (int i = 0; i < threadCount; i++) {
-            manager.addActiveWorkItem(runnables.get(i));
-        }
-
-        for (int i = 0; i < threadCount; i++) {
-            runnables.get(i).waitForDone();
-        }
-    }
-
-    private WorkQueue.WorkItem addActiveWorkItem(WorkQueue manager, Runnable runnable) {
-        manager.validate();
-        WorkQueue.WorkItem workItem = manager.addActiveWorkItem(runnable);
-        manager.validate();
-        return workItem;
-    }
-
-    private void executeNext(WorkQueue manager, ScriptableExecutor executor) {
-        manager.validate();
-        executor.runNext();
-        manager.validate();
-    }
-
-    private void cancelWork(WorkQueue manager, WorkQueue.WorkItem workItem) {
-        manager.validate();
-        workItem.cancel();
-        manager.validate();
-    }
-
-    private void prioritizeWork(WorkQueue manager, WorkQueue.WorkItem workItem) {
-        manager.validate();
-        workItem.moveToFront();
-        manager.validate();
-    }
-
-    static class StressRunnable implements Runnable {
-        static ArrayList<WorkQueue.WorkItem> tracked = new ArrayList<WorkQueue.WorkItem>();
-
-        final WorkQueue manager;
-        final SecureRandom random = new SecureRandom();
-        final int iterationCount;
-        int iterationIndex = 0;
-        boolean isDone = false;
-
-        StressRunnable(WorkQueue manager, int iterationCount) {
-            this.manager = manager;
-            this.iterationCount = iterationCount;
-        }
-
-        @Override
-        public void run() {
-            // Each iteration runs a random action against the WorkQueue.
-            if (iterationIndex++ < iterationCount) {
-                final int sleepWeight = 80;
-                final int trackThisWeight = 10;
-                final int prioritizeTrackedWeight = 6;
-                final int validateWeight = 2;
-                int weight = 0;
-                final int n = random.nextInt(sleepWeight + trackThisWeight + prioritizeTrackedWeight + validateWeight);
-                WorkQueue.WorkItem workItem = manager.addActiveWorkItem(this);
-
-                if (n < (weight += sleepWeight)) {
-                    // Sleep
-                    try {
-                        Thread.sleep(n/4);
-                    } catch (InterruptedException e) {
-                    }
-                } else if (n < (weight += trackThisWeight)) {
-                    // Track this work item to activate later
-                    synchronized (tracked) {
-                        tracked.add(workItem);
-                    }
-                } else if (n < (weight += prioritizeTrackedWeight)) {
-                    // Background all pending items, prioritize tracked items, and clear tracked list
-                    ArrayList<WorkQueue.WorkItem> items = new ArrayList<WorkQueue.WorkItem>();
-
-                    synchronized (tracked) {
-                        items.addAll(tracked);
-                        tracked.clear();
-                    }
-
-                    for (WorkQueue.WorkItem item : items) {
-                        item.moveToFront();
-                    }
-                } else {
-                    // Validate
-                    manager.validate();
-                }
-            } else {
-                // Also have all threads validate once they are done.
-                manager.validate();
-                synchronized (this) {
-                    isDone = true;
-                    this.notifyAll();
-                }
-            }
-        }
-
-        void waitForDone() {
-            synchronized (this) {
-                while (!isDone) {
-                    try {
-                        this.wait();
-                    } catch (InterruptedException e) {
-                    }
-                }
-            }
-        }
-    }
-
-    static class ScriptableExecutor implements Executor {
-        private final ArrayList<Runnable> runnables = new ArrayList<Runnable>();
-
-        int getPendingCount() {
-            return runnables.size();
-        }
-
-        void runNext() {
-            assertTrue(runnables.size() > 0);
-            runnables.get(0).run();
-            runnables.remove(0);
-        }
-
-        void runLast() {
-            assertTrue(runnables.size() > 0);
-            int index = runnables.size() - 1;
-            runnables.get(index).run();
-            runnables.remove(index);
-        }
-
-        @Override
-        public void execute(Runnable runnable) {
-            synchronized (this) {
-                runnables.add(runnable);
-            }
-        }
-    }
-
-    static class CountingRunnable implements Runnable {
-        private int runCount = 0;
-
-        synchronized int getRunCount() {
-            return runCount;
-        }
-
-        @Override
-        public void run() {
-            synchronized (this) {
-                runCount++;
-            }
-
-            try {
-                Thread.sleep(1);
-            } catch (InterruptedException e) {
-            }
-        }
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/login/CustomTabLoginMethodHandlerTest.java b/facebook/src/test/java/com/facebook/login/CustomTabLoginMethodHandlerTest.java
deleted file mode 100644
index 4e50fc641..000000000
--- a/facebook/src/test/java/com/facebook/login/CustomTabLoginMethodHandlerTest.java
+++ /dev/null
@@ -1,232 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.content.pm.ResolveInfo;
-import android.content.pm.ServiceInfo;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentActivity;
-
-import com.facebook.AccessToken;
-import com.facebook.FacebookActivity;
-import com.facebook.FacebookException;
-import com.facebook.FacebookOperationCanceledException;
-import com.facebook.FacebookSdk;
-import com.facebook.TestUtils;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.mockito.ArgumentCaptor;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.powermock.api.mockito.PowerMockito.mockStatic;
-import static org.powermock.api.mockito.PowerMockito.when;
-
-@PrepareForTest({
-        LoginClient.class,
-        Validate.class,
-        Utility.class,
-        FacebookSdk.class,
-        AccessToken.class })
-public class CustomTabLoginMethodHandlerTest extends LoginHandlerTestCase {
-    private final static String SIGNED_REQUEST_STR = "ggarbage.eyJhbGdvcml0aG0iOiJITUFDSEEyNTYiLCJ"
-            + "jb2RlIjoid2h5bm90IiwiaXNzdWVkX2F0IjoxNDIyNTAyMDkyLCJ1c2VyX2lkIjoiMTIzIn0";
-    private final static String CHROME_PACKAGE = "com.android.chrome";
-    private final static String DEV_PACKAGE = "com.chrome.dev";
-    private final static String BETA_PACKAGE = "com.chrome.beta";
-
-    private CustomTabLoginMethodHandler handler;
-    private LoginClient.Request request;
-
-    @Before
-    public void setUp() {
-        handler = new CustomTabLoginMethodHandler(mockLoginClient);
-        request = createRequest();
-    }
-
-    @Test
-    public void testCustomTabHandlesSuccess() {
-        final Bundle bundle = new Bundle();
-        bundle.putString("access_token", ACCESS_TOKEN);
-        bundle.putString("expires_in", String.format("%d", EXPIRES_IN_DELTA));
-        bundle.putString("code", "Something else");
-        bundle.putString("signed_request", SIGNED_REQUEST_STR);
-        handler.onComplete(request, bundle, null);
-
-        final ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
-                ArgumentCaptor.forClass(LoginClient.Result.class);
-        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
-
-        final LoginClient.Result result = resultArgumentCaptor.getValue();
-        assertNotNull(result);
-        assertEquals(LoginClient.Result.Code.SUCCESS, result.code);
-
-        final AccessToken token = result.token;
-        assertNotNull(token);
-        assertEquals(ACCESS_TOKEN, token.getToken());
-        assertDateDiffersWithinDelta(new Date(), token.getExpires(), EXPIRES_IN_DELTA * 1000, 1000);
-        TestUtils.assertSamePermissions(PERMISSIONS, token.getPermissions());
-    }
-
-    @Test
-    public void testCustomTabHandlesCancel() {
-        handler.onComplete(request, null, new FacebookOperationCanceledException());
-
-        final ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
-                ArgumentCaptor.forClass(LoginClient.Result.class);
-        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
-        final LoginClient.Result result = resultArgumentCaptor.getValue();
-
-        assertNotNull(result);
-        assertEquals(LoginClient.Result.Code.CANCEL, result.code);
-        assertNull(result.token);
-        assertNotNull(result.errorMessage);
-    }
-
-    @Test
-    public void testCustomTabHandlesError() {
-        handler.onComplete(request, null, new FacebookException(ERROR_MESSAGE));
-
-        final ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
-                ArgumentCaptor.forClass(LoginClient.Result.class);
-        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
-        final LoginClient.Result result = resultArgumentCaptor.getValue();
-
-        assertNotNull(result);
-        assertEquals(LoginClient.Result.Code.ERROR, result.code);
-        assertNull(result.token);
-        assertNotNull(result.errorMessage);
-        assertEquals(ERROR_MESSAGE, result.errorMessage);
-    }
-
-    @Test
-    public void testTryAuthorizeNeedsRedirectActivity() {
-        mockTryAuthorize();
-
-        mockChromeCustomTabsSupported(true, CHROME_PACKAGE);
-        mockCustomTabsAllowed(true);
-        mockCustomTabRedirectActivity(true);
-        assertTrue(handler.tryAuthorize(request));
-
-        mockCustomTabsAllowed(false);
-        assertFalse(handler.tryAuthorize(request));
-    }
-
-    @Test
-    public void testTryAuthorizeWithChromePackage() {
-        mockTryAuthorize();
-        mockCustomTabsAllowed(true);
-        mockCustomTabRedirectActivity(true);
-
-        mockChromeCustomTabsSupported(true, CHROME_PACKAGE);
-        assertTrue(handler.tryAuthorize(request));
-    }
-
-    @Test
-    public void testTryAuthorizeWithChromeBetaPackage() {
-        mockTryAuthorize();
-        mockCustomTabsAllowed(true);
-        mockCustomTabRedirectActivity(true);
-
-        mockChromeCustomTabsSupported(true, BETA_PACKAGE);
-        assertTrue(handler.tryAuthorize(request));
-    }
-
-    @Test
-    public void testTryAuthorizeWithChromeDevPackage() {
-        mockTryAuthorize();
-        mockCustomTabsAllowed(true);
-        mockCustomTabRedirectActivity(true);
-
-        mockChromeCustomTabsSupported(true, DEV_PACKAGE);
-        assertTrue(handler.tryAuthorize(request));
-    }
-
-    @Test
-    public void testTryAuthorizeWithoutChromePackage() {
-        mockTryAuthorize();
-        mockCustomTabsAllowed(true);
-        mockCustomTabRedirectActivity(true);
-
-        mockChromeCustomTabsSupported(true, "not.chrome.package");
-        assertFalse(handler.tryAuthorize(request));
-    }
-
-    private void mockTryAuthorize() {
-        mockStatic(FacebookSdk.class);
-        when(FacebookSdk.isInitialized()).thenReturn(true);
-        mockStatic(AccessToken.class);
-        when(AccessToken.getCurrentAccessToken()).thenReturn(null);
-        Fragment fragment = mock(LoginFragment.class);
-        when(mockLoginClient.getFragment()).thenReturn(fragment);
-    }
-
-    private void mockChromeCustomTabsSupported(final boolean supported, final String packageName) {
-        final List<ResolveInfo> resolveInfos = new ArrayList<>();
-        ResolveInfo resolveInfo = new ResolveInfo();
-        ServiceInfo serviceInfo = new ServiceInfo();
-        serviceInfo.packageName = packageName;
-        resolveInfo.serviceInfo = serviceInfo;
-        if (supported) {
-            resolveInfos.add(resolveInfo);
-        }
-        final PackageManager packageManager = mock(PackageManager.class);
-        when(packageManager.queryIntentServices(any(Intent.class), anyInt()))
-                .thenReturn(resolveInfos);
-        activity = mock(FacebookActivity.class);
-        when(mockLoginClient.getActivity()).thenReturn(activity);
-        when(activity.getPackageManager()).thenReturn(packageManager);
-    }
-
-    private void mockCustomTabRedirectActivity(final boolean hasActivity) {
-        mockStatic(Validate.class);
-        when(Validate.hasCustomTabRedirectActivity(any(Context.class))).thenReturn(hasActivity);
-    }
-
-    private void mockCustomTabsAllowed(final boolean allowed) {
-        final Utility.FetchedAppSettings settings = mock(Utility.FetchedAppSettings.class);
-        when(settings.getCustomTabsEnabled()).thenReturn(allowed);
-        mockStatic(Utility.class);
-        when(Utility.getAppSettingsWithoutQuery(anyString())).thenReturn(settings);
-    }
-
-}
diff --git a/facebook/src/test/java/com/facebook/login/FacebookLiteLoginMethodHandlerTest.java b/facebook/src/test/java/com/facebook/login/FacebookLiteLoginMethodHandlerTest.java
deleted file mode 100644
index d8ee20708..000000000
--- a/facebook/src/test/java/com/facebook/login/FacebookLiteLoginMethodHandlerTest.java
+++ /dev/null
@@ -1,171 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-
-import com.facebook.AccessToken;
-import com.facebook.FacebookSdk;
-import com.facebook.TestUtils;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.mockito.ArgumentCaptor;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.robolectric.RuntimeEnvironment;
-
-import java.util.Date;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.powermock.api.mockito.PowerMockito.when;
-
-@PrepareForTest( { LoginClient.class })
-public class FacebookLiteLoginMethodHandlerTest extends LoginHandlerTestCase {
-    private static final String CANCEL_MESSAGE = "Permissions error";
-    private final static String SIGNED_REQUEST_STR = "ggarbage.eyJhbGdvcml0aG0iOiJITUFDSEEyNTYiLCJ"
-            + "jb2RlIjoid2h5bm90IiwiaXNzdWVkX2F0IjoxNDIyNTAyMDkyLCJ1c2VyX2lkIjoiMTIzIn0";
-
-    @Before
-    @Override
-    public void before() throws Exception {
-        super.before();
-        FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
-    }
-
-    @Test
-    public void testFacebookLiteHandlesSuccess() {
-        Bundle bundle = new Bundle();
-        bundle.putLong("expires_in", EXPIRES_IN_DELTA);
-        bundle.putString("access_token", ACCESS_TOKEN);
-        bundle.putString("signed_request", SIGNED_REQUEST_STR);
-
-        Intent intent = new Intent();
-        intent.putExtras(bundle);
-
-        FacebookLiteLoginMethodHandler handler =
-                new FacebookLiteLoginMethodHandler(mockLoginClient);
-
-        LoginClient.Request request = createRequest();
-        when(mockLoginClient.getPendingRequest()).thenReturn(request);
-
-        handler.tryAuthorize(request);
-        handler.onActivityResult(0, Activity.RESULT_OK, intent);
-
-        ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
-                ArgumentCaptor.forClass(LoginClient.Result.class);
-        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
-
-        LoginClient.Result result = resultArgumentCaptor.getValue();
-
-        assertNotNull(result);
-        assertEquals(LoginClient.Result.Code.SUCCESS, result.code);
-
-        AccessToken token = result.token;
-        assertNotNull(token);
-        assertEquals(ACCESS_TOKEN, token.getToken());
-        assertDateDiffersWithinDelta(new Date(), token.getExpires(), EXPIRES_IN_DELTA * 1000, 1000);
-        TestUtils.assertSamePermissions(PERMISSIONS, token.getPermissions());
-    }
-
-    @Test
-    public void testFacebookLiteHandlesBack() {
-        FacebookLiteLoginMethodHandler handler =
-                new FacebookLiteLoginMethodHandler(mockLoginClient);
-
-        LoginClient.Request request = createRequest();
-        handler.tryAuthorize(request);
-        handler.onActivityResult(0, Activity.RESULT_CANCELED, null);
-
-        ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
-                ArgumentCaptor.forClass(LoginClient.Result.class);
-        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
-
-        LoginClient.Result result = resultArgumentCaptor.getValue();
-
-        assertNotNull(result);
-        assertEquals(LoginClient.Result.Code.CANCEL, result.code);
-
-        assertNull(result.token);
-        assertEquals(result.errorMessage, "Operation canceled");
-    }
-
-    @Test
-    public void testFacebookLiteHandlesCancel() {
-        Bundle bundle = new Bundle();
-        bundle.putString("error", CANCEL_MESSAGE);
-
-        Intent intent = new Intent();
-        intent.putExtras(bundle);
-
-        FacebookLiteLoginMethodHandler handler =
-                new FacebookLiteLoginMethodHandler(mockLoginClient);
-
-        LoginClient.Request request = createRequest();
-        handler.tryAuthorize(request);
-        handler.onActivityResult(0, Activity.RESULT_CANCELED, intent);
-
-        ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
-                ArgumentCaptor.forClass(LoginClient.Result.class);
-        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
-
-        LoginClient.Result result = resultArgumentCaptor.getValue();
-
-        assertNotNull(result);
-    }
-
-    @Test
-    public void testFacebookLiteHandlesErrorMessage() {
-        Bundle bundle = new Bundle();
-        bundle.putString("error", ERROR_MESSAGE);
-
-        Intent intent = new Intent();
-        intent.putExtras(bundle);
-
-        FacebookLiteLoginMethodHandler handler =
-                new FacebookLiteLoginMethodHandler(mockLoginClient);
-
-        LoginClient.Request request = createRequest();
-        handler.tryAuthorize(request);
-        handler.onActivityResult(0, Activity.RESULT_CANCELED, intent);
-
-        ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
-                ArgumentCaptor.forClass(LoginClient.Result.class);
-        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
-
-        LoginClient.Result result = resultArgumentCaptor.getValue();
-
-        assertNotNull(result);
-        assertEquals(LoginClient.Result.Code.CANCEL, result.code);
-
-        assertNull(result.token);
-        assertNotNull(result.errorMessage);
-        assertTrue(result.errorMessage.contains(ERROR_MESSAGE));
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/login/GetTokenLoginMethodHandlerTest.java b/facebook/src/test/java/com/facebook/login/GetTokenLoginMethodHandlerTest.java
deleted file mode 100644
index 4f5e86e10..000000000
--- a/facebook/src/test/java/com/facebook/login/GetTokenLoginMethodHandlerTest.java
+++ /dev/null
@@ -1,137 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import android.content.Intent;
-import android.os.Bundle;
-
-import com.facebook.AccessToken;
-import com.facebook.AccessTokenSource;
-import com.facebook.TestUtils;
-import com.facebook.internal.NativeProtocol;
-import com.facebook.internal.Utility;
-
-import org.junit.Test;
-import org.mockito.ArgumentCaptor;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Date;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-
-@PrepareForTest( { LoginClient.class })
-public class GetTokenLoginMethodHandlerTest extends LoginHandlerTestCase {
-
-    @Test
-    public void testGetTokenHandlesSuccessWithAllPermissions() {
-        Bundle bundle = new Bundle();
-        bundle.putStringArrayList(NativeProtocol.EXTRA_PERMISSIONS,
-            new ArrayList<String>(PERMISSIONS));
-        bundle.putLong(NativeProtocol.EXTRA_EXPIRES_SECONDS_SINCE_EPOCH,
-            new Date().getTime() / 1000 + EXPIRES_IN_DELTA);
-        bundle.putString(NativeProtocol.EXTRA_ACCESS_TOKEN, ACCESS_TOKEN);
-        bundle.putString(NativeProtocol.EXTRA_USER_ID, USER_ID);
-
-        GetTokenLoginMethodHandler handler = new GetTokenLoginMethodHandler(mockLoginClient);
-
-        LoginClient.Request request = createRequest();
-        handler.getTokenCompleted(request, bundle);
-
-        ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
-                ArgumentCaptor.forClass(LoginClient.Result.class);
-        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
-
-        LoginClient.Result result = resultArgumentCaptor.getValue();
-
-        assertNotNull(result);
-        assertEquals(LoginClient.Result.Code.SUCCESS, result.code);
-
-        AccessToken token = result.token;
-        assertNotNull(token);
-        assertEquals(ACCESS_TOKEN, token.getToken());
-        assertDateDiffersWithinDelta(new Date(), token.getExpires(), EXPIRES_IN_DELTA * 1000, 1000);
-        TestUtils.assertSamePermissions(PERMISSIONS, token.getPermissions());
-    }
-
-    @Test
-    public void testGetTokenHandlesSuccessWithOnlySomePermissions() {
-        Bundle bundle = new Bundle();
-        bundle.putStringArrayList(NativeProtocol.EXTRA_PERMISSIONS,
-            new ArrayList<String>(Arrays.asList("go outside")));
-        bundle.putLong(NativeProtocol.EXTRA_EXPIRES_SECONDS_SINCE_EPOCH,
-            new Date().getTime() / 1000 + EXPIRES_IN_DELTA);
-        bundle.putString(NativeProtocol.EXTRA_ACCESS_TOKEN, ACCESS_TOKEN);
-
-        GetTokenLoginMethodHandler handler = new GetTokenLoginMethodHandler(mockLoginClient);
-
-        LoginClient.Request request = createRequest();
-        assertEquals(PERMISSIONS.size(), request.getPermissions().size());
-
-        handler.getTokenCompleted(request, bundle);
-
-        verify(mockLoginClient, never()).completeAndValidate(any(LoginClient.Result.class));
-        verify(mockLoginClient, times(1)).tryNextHandler();
-    }
-
-    @Test
-    public void testGetTokenHandlesNoResult() {
-        GetTokenLoginMethodHandler handler = new GetTokenLoginMethodHandler(mockLoginClient);
-
-        LoginClient.Request request = createRequest();
-        assertEquals(PERMISSIONS.size(), request.getPermissions().size());
-
-        handler.getTokenCompleted(request, null);
-
-        verify(mockLoginClient, never()).completeAndValidate(any(LoginClient.Result.class));
-        verify(mockLoginClient, times(1)).tryNextHandler();
-    }
-
-
-    @Test
-    public void testFromNativeLogin() {
-        ArrayList<String> permissions = Utility.arrayList("stream_publish", "go_outside_and_play");
-        String token = "AnImaginaryTokenValue";
-        String userId = "1000";
-
-        long nowSeconds = new Date().getTime() / 1000;
-        Intent intent = new Intent();
-        intent.putExtra(NativeProtocol.EXTRA_ACCESS_TOKEN, token);
-        intent.putExtra(NativeProtocol.EXTRA_EXPIRES_SECONDS_SINCE_EPOCH, nowSeconds + 60L);
-        intent.putExtra(NativeProtocol.EXTRA_PERMISSIONS, permissions);
-        intent.putExtra(NativeProtocol.EXTRA_USER_ID, userId);
-
-        AccessToken accessToken = GetTokenLoginMethodHandler.createAccessTokenFromNativeLogin(
-                intent.getExtras(), AccessTokenSource.FACEBOOK_APPLICATION_NATIVE, "1234");
-        TestUtils.assertSamePermissions(permissions, accessToken);
-        assertEquals(token, accessToken.getToken());
-        assertEquals(AccessTokenSource.FACEBOOK_APPLICATION_NATIVE, accessToken.getSource());
-        assertTrue(!accessToken.isExpired());
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/login/KatanaProxyLoginMethodHandlerTest.java b/facebook/src/test/java/com/facebook/login/KatanaProxyLoginMethodHandlerTest.java
deleted file mode 100644
index c57831876..000000000
--- a/facebook/src/test/java/com/facebook/login/KatanaProxyLoginMethodHandlerTest.java
+++ /dev/null
@@ -1,167 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-
-import com.facebook.AccessToken;
-import com.facebook.FacebookSdk;
-import com.facebook.TestUtils;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.mockito.ArgumentCaptor;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-
-import java.util.Date;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.powermock.api.mockito.PowerMockito.when;
-
-@PrepareForTest( { LoginClient.class })
-public class KatanaProxyLoginMethodHandlerTest extends LoginHandlerTestCase {
-    private final static String SIGNED_REQUEST_STR = "ggarbage.eyJhbGdvcml0aG0iOiJITUFDSEEyNTYiLCJ"
-            + "jb2RlIjoid2h5bm90IiwiaXNzdWVkX2F0IjoxNDIyNTAyMDkyLCJ1c2VyX2lkIjoiMTIzIn0";
-
-    @Before
-    @Override
-    public void before() throws Exception {
-        super.before();
-        FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
-    }
-
-    @Test
-    public void testProxyAuthHandlesSuccess() {
-        Bundle bundle = new Bundle();
-        bundle.putLong("expires_in", EXPIRES_IN_DELTA);
-        bundle.putString("access_token", ACCESS_TOKEN);
-        bundle.putString("signed_request", SIGNED_REQUEST_STR);
-
-        Intent intent = new Intent();
-        intent.putExtras(bundle);
-
-        KatanaProxyLoginMethodHandler handler = new KatanaProxyLoginMethodHandler(mockLoginClient);
-
-        LoginClient.Request request = createRequest();
-        when(mockLoginClient.getPendingRequest()).thenReturn(request);
-
-        handler.tryAuthorize(request);
-        handler.onActivityResult(0, Activity.RESULT_OK, intent);
-
-        ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
-                ArgumentCaptor.forClass(LoginClient.Result.class);
-        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
-
-        LoginClient.Result result = resultArgumentCaptor.getValue();
-
-        assertNotNull(result);
-        assertEquals(LoginClient.Result.Code.SUCCESS, result.code);
-
-        AccessToken token = result.token;
-        assertNotNull(token);
-        assertEquals(ACCESS_TOKEN, token.getToken());
-        assertDateDiffersWithinDelta(new Date(), token.getExpires(), EXPIRES_IN_DELTA * 1000, 1000);
-        TestUtils.assertSamePermissions(PERMISSIONS, token.getPermissions());
-    }
-
-    @Test
-    public void testProxyAuthHandlesCancel() {
-        Bundle bundle = new Bundle();
-        bundle.putString("error", ERROR_MESSAGE);
-
-        Intent intent = new Intent();
-        intent.putExtras(bundle);
-
-        KatanaProxyLoginMethodHandler handler = new KatanaProxyLoginMethodHandler(mockLoginClient);
-
-        LoginClient.Request request = createRequest();
-        handler.tryAuthorize(request);
-        handler.onActivityResult(0, Activity.RESULT_CANCELED, intent);
-
-        ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
-                ArgumentCaptor.forClass(LoginClient.Result.class);
-        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
-
-        LoginClient.Result result = resultArgumentCaptor.getValue();
-
-        assertNotNull(result);
-        assertEquals(LoginClient.Result.Code.CANCEL, result.code);
-
-        assertNull(result.token);
-        assertNotNull(result.errorMessage);
-        assertTrue(result.errorMessage.contains(ERROR_MESSAGE));
-    }
-
-    @Test
-    public void testProxyAuthHandlesCancelErrorMessage() {
-        Bundle bundle = new Bundle();
-        bundle.putString("error", "access_denied");
-
-        Intent intent = new Intent();
-        intent.putExtras(bundle);
-
-        KatanaProxyLoginMethodHandler handler = new KatanaProxyLoginMethodHandler(mockLoginClient);
-
-        LoginClient.Request request = createRequest();
-        handler.tryAuthorize(request);
-        handler.onActivityResult(0, Activity.RESULT_CANCELED, intent);
-
-        ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
-                ArgumentCaptor.forClass(LoginClient.Result.class);
-        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
-
-        LoginClient.Result result = resultArgumentCaptor.getValue();
-
-        assertNotNull(result);
-        assertEquals(LoginClient.Result.Code.CANCEL, result.code);
-
-        assertNull(result.token);
-    }
-
-    @Test
-    public void testProxyAuthHandlesDisabled() {
-        Bundle bundle = new Bundle();
-        bundle.putString("error", "service_disabled");
-
-        Intent intent = new Intent();
-        intent.putExtras(bundle);
-
-        KatanaProxyLoginMethodHandler handler = new KatanaProxyLoginMethodHandler(mockLoginClient);
-
-        LoginClient.Request request = createRequest();
-        handler.tryAuthorize(request);
-        handler.onActivityResult(0, Activity.RESULT_OK, intent);
-
-        verify(mockLoginClient, never()).completeAndValidate(any(LoginClient.Result.class));
-        verify(mockLoginClient, times(1)).tryNextHandler();
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/login/LoginClientTest.java b/facebook/src/test/java/com/facebook/login/LoginClientTest.java
deleted file mode 100644
index 61076cbb8..000000000
--- a/facebook/src/test/java/com/facebook/login/LoginClientTest.java
+++ /dev/null
@@ -1,176 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentActivity;
-
-import com.facebook.AccessToken;
-import com.facebook.FacebookPowerMockTestCase;
-import com.facebook.FacebookSdk;
-import com.facebook.TestUtils;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.mockito.ArgumentCaptor;
-import org.mockito.Mock;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-
-import java.util.Arrays;
-import java.util.HashSet;
-
-import static org.junit.Assert.*;
-import static org.mockito.Mockito.verify;
-import static org.powermock.api.mockito.PowerMockito.mock;
-import static org.powermock.api.mockito.PowerMockito.when;
-
-@PrepareForTest({ LoginClient.class })
-public class LoginClientTest extends FacebookPowerMockTestCase {
-
-    private static final String ACCESS_TOKEN = "An access token for user 1";
-    private static final String USER_ID = "1001";
-    private static final String APP_ID = "2002";
-
-
-    private static final long EXPIRES_IN_DELTA = 3600 * 24 * 60;
-    private static final HashSet<String> PERMISSIONS = new HashSet<String>(
-        Arrays.asList("go outside", "come back in"));
-    private static final String ERROR_MESSAGE = "This is bad!";
-
-    @Mock private Fragment mockFragment;
-
-    @Before
-    public void before() throws Exception {
-        FragmentActivity activity =
-            Robolectric.buildActivity(FragmentActivity.class).create().get();
-        when(mockFragment.getActivity()).thenReturn(activity);
-    }
-
-    @Test
-    public void testReauthorizationWithSameFbidSucceeds() throws Exception {
-        FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
-        LoginClient.Request request = createRequest(ACCESS_TOKEN);
-
-        AccessToken token = new AccessToken(
-                ACCESS_TOKEN,
-                APP_ID,
-                USER_ID,
-                PERMISSIONS,
-                null,
-                null,
-                null,
-                null);
-        LoginClient.Result result = LoginClient.Result.createTokenResult(request, token);
-
-        LoginClient.OnCompletedListener listener = mock(LoginClient.OnCompletedListener.class);
-
-        LoginClient client = new LoginClient(mockFragment);
-        client.setOnCompletedListener(listener);
-
-        client.completeAndValidate(result);
-
-        ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
-            ArgumentCaptor.forClass(LoginClient.Result.class);
-
-        verify(listener).onCompleted(resultArgumentCaptor.capture());
-
-        result = resultArgumentCaptor.getValue();
-
-        assertNotNull(result);
-        assertEquals(LoginClient.Result.Code.SUCCESS, result.code);
-
-        AccessToken resultToken = result.token;
-        assertNotNull(resultToken);
-        assertEquals(ACCESS_TOKEN, resultToken.getToken());
-
-        // We don't care about ordering.
-        assertEquals(PERMISSIONS, resultToken.getPermissions());
-    }
-
-    @Test
-    public void testRequestParceling() {
-        LoginClient.Request request = createRequest(ACCESS_TOKEN);
-
-        LoginClient.Request unparceledRequest = TestUtils.parcelAndUnparcel(request);
-
-        assertEquals(LoginBehavior.NATIVE_WITH_FALLBACK, unparceledRequest.getLoginBehavior());
-        assertEquals(new HashSet<String>(PERMISSIONS), unparceledRequest.getPermissions());
-        assertEquals(DefaultAudience.FRIENDS, unparceledRequest.getDefaultAudience());
-        assertEquals("1234", unparceledRequest.getApplicationId());
-        assertEquals("5678", unparceledRequest.getAuthId());
-        assertFalse(unparceledRequest.isRerequest());
-    }
-
-    @Test
-    public void testResultParceling() {
-        LoginClient.Request request = new LoginClient.Request(
-                LoginBehavior.WEB_ONLY,
-                null,
-                DefaultAudience.EVERYONE,
-                null,
-                null);
-        request.setRerequest(true);
-        AccessToken token1 = new AccessToken(
-                "Token2",
-                "12345",
-                "1000",
-                null,
-                null,
-                null,
-                null,
-                null);
-        LoginClient.Result result = new LoginClient.Result(
-                request,
-                LoginClient.Result.Code.SUCCESS,
-                token1,
-                "error 1",
-                "123"
-        );
-
-        LoginClient.Result unparceledResult = TestUtils.parcelAndUnparcel(result);
-        LoginClient.Request unparceledRequest = unparceledResult.request;
-
-        assertEquals(LoginBehavior.WEB_ONLY, unparceledRequest.getLoginBehavior());
-        assertEquals(new HashSet<String>(), unparceledRequest.getPermissions());
-        assertEquals(DefaultAudience.EVERYONE, unparceledRequest.getDefaultAudience());
-        assertEquals(null, unparceledRequest.getApplicationId());
-        assertEquals(null, unparceledRequest.getAuthId());
-        assertTrue(unparceledRequest.isRerequest());
-
-        assertEquals(LoginClient.Result.Code.SUCCESS, unparceledResult.code);
-        assertEquals(token1, unparceledResult.token);
-        assertEquals("error 1", unparceledResult.errorMessage);
-        assertEquals("123", unparceledResult.errorCode);
-    }
-
-
-    protected LoginClient.Request createRequest(String previousAccessTokenString) {
-        return new LoginClient.Request(
-                LoginBehavior.NATIVE_WITH_FALLBACK,
-                new HashSet<String>(PERMISSIONS),
-                DefaultAudience.FRIENDS,
-                "1234",
-                "5678");
-    }
-
-}
diff --git a/facebook/src/test/java/com/facebook/login/LoginHandlerTestCase.java b/facebook/src/test/java/com/facebook/login/LoginHandlerTestCase.java
deleted file mode 100644
index 30fe97fa2..000000000
--- a/facebook/src/test/java/com/facebook/login/LoginHandlerTestCase.java
+++ /dev/null
@@ -1,76 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import android.support.v4.app.FragmentActivity;
-
-import com.facebook.FacebookPowerMockTestCase;
-
-import org.junit.Before;
-import org.robolectric.Robolectric;
-
-import java.util.Arrays;
-import java.util.Date;
-import java.util.HashSet;
-
-import static org.junit.Assert.assertTrue;
-import static org.powermock.api.mockito.PowerMockito.mock;
-import static org.powermock.api.mockito.PowerMockito.when;
-
-public abstract class LoginHandlerTestCase extends FacebookPowerMockTestCase {
-    protected static final String ACCESS_TOKEN = "An access token";
-    protected static final String USER_ID = "1000";
-    protected static final long EXPIRES_IN_DELTA = 3600 * 24 * 60;
-    protected static final HashSet<String> PERMISSIONS = new HashSet<String>(
-            Arrays.asList("go outside", "come back in"));
-    protected static final String ERROR_MESSAGE = "This is bad!";
-
-    protected FragmentActivity activity;
-    protected LoginClient mockLoginClient;
-
-    @Before
-    public void before() throws Exception {
-        mockLoginClient = mock(LoginClient.class);
-        activity = Robolectric.buildActivity(FragmentActivity.class).create().get();
-        when(mockLoginClient.getActivity()).thenReturn(activity);
-    }
-
-    protected LoginClient.Request createRequest() {
-        return createRequest(null);
-    }
-
-    protected LoginClient.Request createRequest(String previousAccessTokenString) {
-
-        return new LoginClient.Request(
-                LoginBehavior.NATIVE_WITH_FALLBACK,
-                new HashSet<String>(PERMISSIONS),
-                DefaultAudience.FRIENDS,
-                "1234",
-                "5678");
-    }
-
-    protected void assertDateDiffersWithinDelta(Date expected, Date actual, long expectedDifference,
-                                                long deltaInMsec) {
-
-        long delta = Math.abs(expected.getTime() - actual.getTime()) - expectedDifference;
-        assertTrue(delta < deltaInMsec);
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/login/LoginManagerTest.java b/facebook/src/test/java/com/facebook/login/LoginManagerTest.java
deleted file mode 100644
index c3b14805e..000000000
--- a/facebook/src/test/java/com/facebook/login/LoginManagerTest.java
+++ /dev/null
@@ -1,572 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import android.app.Activity;
-import android.content.ActivityNotFoundException;
-import android.content.ComponentName;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.content.pm.ResolveInfo;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentActivity;
-
-import com.facebook.AccessToken;
-import com.facebook.AccessTokenSource;
-import com.facebook.FacebookActivity;
-import com.facebook.FacebookCallback;
-import com.facebook.FacebookException;
-import com.facebook.FacebookPowerMockTestCase;
-import com.facebook.FacebookSdk;
-import com.facebook.FacebookSdkNotInitializedException;
-import com.facebook.Profile;
-import com.facebook.internal.CallbackManagerImpl;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.mockito.ArgumentCaptor;
-import org.mockito.ArgumentMatcher;
-import org.mockito.Mock;
-import org.mockito.internal.util.collections.Sets;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Date;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-import java.util.concurrent.ThreadPoolExecutor;
-
-import static org.junit.Assert.*;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.isA;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-import static org.powermock.api.mockito.PowerMockito.*;
-
-@PrepareForTest({ FacebookSdk.class, AccessToken.class, Profile.class})
-public class LoginManagerTest extends FacebookPowerMockTestCase {
-
-    private static final String MOCK_APP_ID = "1234";
-    private static final String USER_ID = "1000";
-    private final String TOKEN_STRING = "A token of my esteem";
-    private final List<String> PERMISSIONS = Arrays.asList("walk", "chew gum");
-    private final Date EXPIRES = new Date(2025, 5, 3);
-    private final Date LAST_REFRESH = new Date(2023, 8, 15);
-
-    @Mock private Activity mockActivity;
-    @Mock private Fragment mockFragment;
-    @Mock private Context mockApplicationContext;
-    @Mock private PackageManager mockPackageManager;
-    @Mock private FacebookCallback<LoginResult> mockCallback;
-    @Mock private ThreadPoolExecutor threadExecutor;
-    @Mock private FragmentActivity mockFragmentActivity;
-
-    @Before
-    public void before() throws Exception {
-        mockStatic(FacebookSdk.class);
-        stub(method(AccessToken.class, "getCurrentAccessToken")).toReturn(null);
-        stub(method(AccessToken.class, "setCurrentAccessToken")).toReturn(null);
-        stub(method(Profile.class, "fetchProfileForCurrentAccessToken")).toReturn(null);
-
-        when(FacebookSdk.isInitialized()).thenReturn(true);
-        when(FacebookSdk.getApplicationId()).thenReturn(MOCK_APP_ID);
-        when(FacebookSdk.getApplicationContext()).thenReturn(mockApplicationContext);
-        when(FacebookSdk.getExecutor()).thenReturn(threadExecutor);
-        when(mockFragment.getActivity()).thenReturn(mockFragmentActivity);
-        when(mockActivity.getApplicationContext()).thenReturn(mockApplicationContext);
-
-        // We use mocks rather than RobolectricPackageManager because it's simpler to not
-        // have to specify Intents. Default to resolving all intents to something.
-        ResolveInfo resolveInfo = new ResolveInfo();
-        when(mockApplicationContext.getPackageManager()).thenReturn(mockPackageManager);
-        when(mockPackageManager.resolveActivity(any(Intent.class), anyInt()))
-                .thenReturn(resolveInfo);
-    }
-
-    @Test
-    public void testRequiresSdkToBeInitialized() {
-        try {
-            when(FacebookSdk.isInitialized()).thenReturn(false);
-
-            LoginManager loginManager = new LoginManager();
-
-            fail();
-        } catch (FacebookSdkNotInitializedException exception) {
-        }
-    }
-
-    @Test
-    public void testGetInstance() {
-        LoginManager loginManager = LoginManager.getInstance();
-        assertNotNull(loginManager);
-    }
-
-    @Test
-    public void testLoginBehaviorDefaultsToSsoWithFallback() {
-        LoginManager loginManager = new LoginManager();
-        assertEquals(LoginBehavior.NATIVE_WITH_FALLBACK, loginManager.getLoginBehavior());
-    }
-
-    @Test
-    public void testCanChangeLoginBehavior() {
-        LoginManager loginManager = new LoginManager();
-        loginManager.setLoginBehavior(LoginBehavior.NATIVE_ONLY);
-        assertEquals(LoginBehavior.NATIVE_ONLY, loginManager.getLoginBehavior());
-    }
-
-    @Test
-    public void testDefaultAudienceDefaultsToFriends() {
-        LoginManager loginManager = new LoginManager();
-        assertEquals(DefaultAudience.FRIENDS, loginManager.getDefaultAudience());
-    }
-
-    @Test
-    public void testCanChangeDefaultAudience() {
-        LoginManager loginManager = new LoginManager();
-        loginManager.setDefaultAudience(DefaultAudience.EVERYONE);
-        assertEquals(DefaultAudience.EVERYONE, loginManager.getDefaultAudience());
-    }
-
-    @Test
-    public void testLogInWithReadAndActivityThrowsIfPublishPermissionGiven() {
-        LoginManager loginManager = new LoginManager();
-        try {
-            loginManager.logInWithReadPermissions(mockActivity,
-                    Arrays.asList("public_profile", "publish_actions"));
-            fail();
-        } catch(FacebookException exception) {
-        }
-    }
-
-    @Test
-    public void testLogInWithPublishAndActivityThrowsIfPublishPermissionGiven() {
-        LoginManager loginManager = new LoginManager();
-        try {
-            loginManager.logInWithPublishPermissions(mockActivity,
-                    Arrays.asList("public_profile", "publish_actions"));
-            fail();
-        } catch(FacebookException exception) {
-        }
-    }
-
-    @Test
-    public void testLogInThrowsIfCannotResolveFacebookActivity() {
-        when(mockPackageManager.resolveActivity(any(Intent.class), anyInt())).thenReturn(null);
-
-        LoginManager loginManager = new LoginManager();
-
-        try {
-            loginManager.logInWithReadPermissions(mockActivity,
-                Arrays.asList("public_profile", "user_friends"));
-            fail();
-        } catch(FacebookException exception) {
-        }
-    }
-
-    @Test
-    public void testLogInThrowsIfCannotStartFacebookActivity() {
-        doThrow(new ActivityNotFoundException()).when(mockActivity)
-            .startActivityForResult(any(Intent.class), anyInt());
-
-        LoginManager loginManager = new LoginManager();
-
-        try {
-            loginManager.logInWithReadPermissions(mockActivity,
-                Arrays.asList("public_profile", "user_friends"));
-            fail();
-        } catch(FacebookException exception) {
-        }
-    }
-
-    @Test
-    public void testRequiresNonNullActivity() {
-        try {
-            LoginManager loginManager = new LoginManager();
-            loginManager.logInWithReadPermissions((Activity) null,
-                Arrays.asList("public_profile", "user_friends"));
-            fail();
-        } catch (NullPointerException exception) {
-        }
-    }
-
-    @Test
-    public void testRequiresNonNullFragment() {
-        try {
-            LoginManager loginManager = new LoginManager();
-            loginManager.logInWithReadPermissions((Fragment) null,
-                    Arrays.asList("public_profile", "user_friends"));
-            fail();
-        } catch (NullPointerException exception) {
-        }
-    }
-
-    @Test
-    public void testLogInWithReadDoesNotThrowWithReadPermissions() {
-        LoginManager loginManager = new LoginManager();
-        loginManager.logInWithReadPermissions(mockActivity,
-                Arrays.asList("public_profile", "user_friends"));
-    }
-
-    @Test
-    public void testLogInWithReadListCreatesPendingRequestWithCorrectValues() {
-        LoginManager loginManager = new LoginManager();
-        // Change some defaults so we can verify the pending request picks them up.
-        loginManager.setLoginBehavior(LoginBehavior.NATIVE_ONLY);
-        loginManager.setDefaultAudience(DefaultAudience.EVERYONE);
-        loginManager.logInWithReadPermissions(mockActivity,
-                Arrays.asList("public_profile", "user_friends"));
-        implTestLogInCreatesPendingRequestWithCorrectValues(loginManager,
-                Arrays.asList("public_profile", "user_friends"));
-    }
-
-    @Test
-    public void testLogInWithReadAndAccessTokenCreatesReauthRequest() {
-        AccessToken accessToken = createAccessToken();
-        stub(method(AccessToken.class, "getCurrentAccessToken")).toReturn(accessToken);
-
-        LoginManager loginManager = new LoginManager();
-        loginManager.logInWithReadPermissions(mockActivity,
-            Arrays.asList("public_profile", "user_friends"));
-        int loginRequestCode = CallbackManagerImpl.RequestCodeOffset.Login.toRequestCode();
-        verify(mockActivity, times(1)).startActivityForResult(any(Intent.class),
-                eq(loginRequestCode));
-    }
-
-    public void implTestLogInCreatesPendingRequestWithCorrectValues(
-            LoginManager loginManager,
-            final Collection<String> expectedPermissions) {
-
-        ArgumentMatcher<Intent> m = new ArgumentMatcher<Intent>() {
-            @Override
-            public boolean matches(Object argument) {
-                Intent orig = (Intent)argument;
-                Bundle bundle = orig.getBundleExtra(LoginFragment.REQUEST_KEY);
-                LoginClient.Request request =
-                        (LoginClient.Request)bundle.getParcelable(LoginFragment.EXTRA_REQUEST);
-                assertEquals(MOCK_APP_ID, request.getApplicationId());
-                assertEquals(LoginBehavior.NATIVE_ONLY, request.getLoginBehavior());
-                assertEquals(DefaultAudience.EVERYONE, request.getDefaultAudience());
-
-                Set<String> permissions = request.getPermissions();
-                for (String permission : expectedPermissions) {
-                    assertTrue(permissions.contains(permission));
-
-                }
-
-                return true;
-            }
-        };
-        int loginRequestCode = CallbackManagerImpl.RequestCodeOffset.Login.toRequestCode();
-        verify(mockActivity, times(1)).startActivityForResult(argThat(m), eq(loginRequestCode));
-    }
-
-    @Test
-    public void testLogInWithReadAndActivityStartsFacebookActivityWithCorrectRequest() {
-
-        LoginManager loginManager = new LoginManager();
-        loginManager.logInWithReadPermissions(mockActivity,
-            Arrays.asList("public_profile", "user_friends"));
-
-        ArgumentCaptor<Intent> intentArgumentCaptor = ArgumentCaptor.forClass(Intent.class);
-        verify(mockActivity).startActivityForResult(intentArgumentCaptor.capture(), anyInt());
-        Intent intent = intentArgumentCaptor.getValue();
-
-        ComponentName componentName = intent.getComponent();
-        assertEquals(FacebookActivity.class.getName(), componentName.getClassName());
-        assertEquals(LoginBehavior.NATIVE_WITH_FALLBACK.name(), intent.getAction());
-    }
-
-    @Test
-    public void testLogInWithReadAndFragmentStartsFacebookActivityWithCorrectRequest() {
-
-        LoginManager loginManager = new LoginManager();
-        loginManager.logInWithReadPermissions(mockFragment,
-                Arrays.asList("public_profile", "user_friends"));
-
-        ArgumentCaptor<Intent> intentArgumentCaptor = ArgumentCaptor.forClass(Intent.class);
-        verify(mockFragment).startActivityForResult(intentArgumentCaptor.capture(), anyInt());
-        Intent intent = intentArgumentCaptor.getValue();
-
-        ComponentName componentName = intent.getComponent();
-        assertEquals(FacebookActivity.class.getName(), componentName.getClassName());
-        assertEquals(LoginBehavior.NATIVE_WITH_FALLBACK.name(), intent.getAction());
-    }
-
-    @Test
-    public void testLogInWitPublishDoesNotThrowWithPublishPermissions() {
-        LoginManager loginManager = new LoginManager();
-        loginManager.logInWithPublishPermissions(mockActivity,
-                Arrays.asList("publish_actions", "publish_stream"));
-    }
-
-    @Test
-    public void testLogInWithPublishListCreatesPendingRequestWithCorrectValues() {
-        LoginManager loginManager = new LoginManager();
-        // Change some defaults so we can verify the pending request picks them up.
-        loginManager.setLoginBehavior(LoginBehavior.NATIVE_ONLY);
-        loginManager.setDefaultAudience(DefaultAudience.EVERYONE);
-        loginManager.logInWithPublishPermissions(mockActivity,
-            Arrays.asList("publish_actions", "publish_stream"));
-
-        implTestLogInCreatesPendingRequestWithCorrectValues(loginManager,
-                Arrays.asList("publish_actions", "publish_stream"));
-    }
-
-    @Test
-    public void testLogInWithPublishAndAccessTokenCreatesReauthRequest() {
-        AccessToken accessToken = createAccessToken();
-        stub(method(AccessToken.class, "getCurrentAccessToken")).toReturn(accessToken);
-
-        LoginManager loginManager = new LoginManager();
-        loginManager.logInWithPublishPermissions(mockActivity,
-                Arrays.asList("publish_actions", "publish_stream"));
-
-        int loginRequestCode = CallbackManagerImpl.RequestCodeOffset.Login.toRequestCode();
-        verify(mockActivity, times(1)).startActivityForResult(any(Intent.class),
-                eq(loginRequestCode));
-    }
-
-    @Test
-    public void testOnActivityResultReturnsTrueAndCallsCallbackOnCancelResultCode() {
-        LoginManager loginManager = new LoginManager();
-        loginManager.logInWithReadPermissions(mockActivity,
-            Arrays.asList("public_profile", "user_friends"));
-
-        boolean result = loginManager.onActivityResult(
-                Activity.RESULT_CANCELED, null, mockCallback);
-
-        assertTrue(result);
-        verify(mockCallback, times(1)).onCancel();
-        verify(mockCallback, never()).onSuccess(isA(LoginResult.class));
-    }
-
-    @Test
-    public void testOnActivityResultReturnsTrueAndCallsCallbackOnCancelResultCodeEvenWithData() {
-        LoginManager loginManager = new LoginManager();
-        loginManager.logInWithReadPermissions(mockActivity,
-            Arrays.asList("public_profile", "user_friends"));
-
-        Intent intent = createSuccessResultIntent();
-        boolean result = loginManager.onActivityResult(
-                Activity.RESULT_CANCELED, intent, mockCallback);
-
-        assertTrue(result);
-        verify(mockCallback, times(1)).onCancel();
-        verify(mockCallback, never()).onSuccess(isA(LoginResult.class));
-    }
-
-    @Test
-    public void testOnActivityResultDoesNotModifyCurrentAccessTokenOnCancelResultCode() {
-        LoginManager loginManager = new LoginManager();
-        loginManager.logInWithReadPermissions(mockActivity,
-                Arrays.asList("public_profile", "user_friends"));
-
-        loginManager.onActivityResult(Activity.RESULT_CANCELED, null, mockCallback);
-
-        verifyStatic(never());
-        AccessToken.setCurrentAccessToken(any(AccessToken.class));
-    }
-
-    @Test
-    public void testOnActivityResultHandlesMissingCallbackOnCancelResultCode() {
-        LoginManager loginManager = new LoginManager();
-        loginManager.logInWithReadPermissions(mockActivity,
-                Arrays.asList("public_profile", "user_friends"));
-
-        boolean result = loginManager.onActivityResult(
-                Activity.RESULT_CANCELED,
-                null);
-
-        assertTrue(result);
-    }
-
-    @Test
-    public void testOnActivityResultReturnsTrueAndCallsCallbackOnNullData() {
-        LoginManager loginManager = new LoginManager();
-        loginManager.logInWithReadPermissions(mockActivity,
-                Arrays.asList("public_profile", "user_friends"));
-
-        boolean result = loginManager.onActivityResult(
-                Activity.RESULT_OK, null, mockCallback);
-
-        assertTrue(result);
-        verify(mockCallback, times(1)).onError(isA(FacebookException.class));
-        verify(mockCallback, never()).onSuccess(isA(LoginResult.class));
-    }
-
-    @Test
-    public void testOnActivityResultReturnsTrueAndCallsCallbackOnMissingResult() {
-        LoginManager loginManager = new LoginManager();
-        loginManager.logInWithReadPermissions(mockActivity,
-            Arrays.asList("public_profile", "user_friends"));
-
-        Intent intent = createSuccessResultIntent();
-        intent.removeExtra(LoginFragment.RESULT_KEY);
-        boolean result = loginManager.onActivityResult(
-                Activity.RESULT_OK, intent, mockCallback);
-
-        assertTrue(result);
-        verify(mockCallback, times(1)).onError(isA(FacebookException.class));
-        verify(mockCallback, never()).onSuccess(isA(LoginResult.class));
-    }
-
-    @Test
-    public void testOnActivityResultReturnsTrueAndCallsCallbackOnErrorResult() {
-        LoginManager loginManager = new LoginManager();
-        loginManager.logInWithReadPermissions(mockActivity,
-            Arrays.asList("public_profile", "user_friends"));
-
-        boolean result = loginManager.onActivityResult(
-                Activity.RESULT_OK, createErrorResultIntent(), mockCallback);
-
-        ArgumentCaptor<FacebookException> exceptionArgumentCaptor =
-                ArgumentCaptor.forClass(FacebookException.class);
-
-        assertTrue(result);
-        verify(mockCallback, times(1)).onError(exceptionArgumentCaptor.capture());
-        verify(mockCallback, never()).onSuccess(isA(LoginResult.class));
-        assertEquals("foo: bar", exceptionArgumentCaptor.getValue().getMessage());
-    }
-
-    @Test
-    public void testOnActivityResultReturnsTrueAndCallsCallbackOnCancelResult() {
-        LoginManager loginManager = new LoginManager();
-        loginManager.logInWithReadPermissions(mockActivity,
-            Arrays.asList("public_profile", "user_friends"));
-
-        boolean result = loginManager.onActivityResult(
-                Activity.RESULT_CANCELED, createCancelResultIntent(), mockCallback);
-
-        assertTrue(result);
-        verify(mockCallback, times(1)).onCancel();
-        verify(mockCallback, never()).onSuccess(isA(LoginResult.class));
-    }
-
-    @Test
-    public void testOnActivityResultDoesNotModifyCurrentAccessTokenOnErrorResultCode() {
-        LoginManager loginManager = new LoginManager();
-        loginManager.logInWithReadPermissions(mockActivity,
-            Arrays.asList("public_profile", "user_friends"));
-
-        loginManager.onActivityResult(
-                Activity.RESULT_CANCELED,
-                createErrorResultIntent(),
-                mockCallback);
-
-        verifyStatic(never());
-        AccessToken.setCurrentAccessToken(any(AccessToken.class));
-    }
-
-    @Test
-    public void testOnActivityResultReturnsTrueAndCallsCallbackOnSuccessResult() {
-        LoginManager loginManager = new LoginManager();
-        loginManager.logInWithReadPermissions(mockActivity,
-            Arrays.asList("public_profile", "user_friends"));
-
-        boolean result = loginManager.onActivityResult(
-                Activity.RESULT_OK, createSuccessResultIntent(), mockCallback);
-
-        assertTrue(result);
-        verify(mockCallback, never()).onError(any(FacebookException.class));
-        verify(mockCallback, times(1)).onSuccess(isA(LoginResult.class));
-    }
-
-    @Test
-    public void testOnHandlesMissingCallbackkOnSuccessResult() {
-        LoginManager loginManager = new LoginManager();
-        loginManager.logInWithReadPermissions(mockActivity,
-                Arrays.asList("public_profile", "user_friends"));
-
-        boolean result = loginManager.onActivityResult(
-                Activity.RESULT_OK, createSuccessResultIntent(), null);
-
-        assertTrue(result);
-    }
-
-    @Test
-    public void testOnActivityResultSetsCurrentAccessTokenOnSuccessResult() {
-        LoginManager loginManager = new LoginManager();
-        loginManager.logInWithReadPermissions(mockActivity,
-            Arrays.asList("public_profile", "user_friends"));
-
-        boolean result = loginManager.onActivityResult(
-                Activity.RESULT_OK, createSuccessResultIntent(), mockCallback);
-
-        verifyStatic(times(1));
-        AccessToken.setCurrentAccessToken(eq(createAccessToken()));
-    }
-
-    private Intent createSuccessResultIntent() {
-        Intent intent = new Intent();
-
-        Set<String> permissions = Sets.newSet("public_profile", "user_friends");
-        LoginClient.Request request = new LoginClient.Request(null, permissions, null, null, null);
-
-        AccessToken accessToken = createAccessToken();
-        LoginClient.Result result = LoginClient.Result.createTokenResult(request, accessToken);
-        intent.putExtra(LoginFragment.RESULT_KEY, result);
-
-        return intent;
-    }
-
-    private Intent createErrorResultIntent() {
-        Intent intent = new Intent();
-
-        LoginClient.Request request = mock(LoginClient.Request.class);
-
-        LoginClient.Result result = LoginClient.Result.createErrorResult(request, "foo", "bar");
-        intent.putExtra(LoginFragment.RESULT_KEY, result);
-
-        return intent;
-    }
-
-    private Intent createCancelResultIntent() {
-        Intent intent = new Intent();
-
-        LoginClient.Request request = mock(LoginClient.Request.class);
-
-        LoginClient.Result result = LoginClient.Result.createCancelResult(request, null);
-        intent.putExtra(LoginFragment.RESULT_KEY, result);
-
-        return intent;
-    }
-
-    private AccessToken createAccessToken() {
-        return new AccessToken(
-                TOKEN_STRING,
-                MOCK_APP_ID,
-                USER_ID,
-                PERMISSIONS,
-                null,
-                AccessTokenSource.WEB_VIEW,
-                EXPIRES,
-                LAST_REFRESH);
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/login/LoginResultTest.java b/facebook/src/test/java/com/facebook/login/LoginResultTest.java
deleted file mode 100644
index 38d6bf73a..000000000
--- a/facebook/src/test/java/com/facebook/login/LoginResultTest.java
+++ /dev/null
@@ -1,112 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import com.facebook.AccessToken;
-import com.facebook.FacebookSdk;
-import com.facebook.FacebookTestCase;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
-
-import java.util.HashSet;
-import java.util.Set;
-
-import static org.junit.Assert.*;
-
-public class LoginResultTest extends FacebookTestCase {
-
-    private final Set<String> EMAIL_SET = new HashSet<String>(){{ add("email"); }};
-    private final Set<String> LIKES_EMAIL_SET = new HashSet<String>(){{
-        add("user_likes");
-        add("email");
-    }};
-    private final Set<String> PROFILE_EMAIL_SET = new HashSet<String>(){{
-        add("user_profile");
-        add("email");
-    }};
-
-    @Before
-    public void before() throws Exception {
-        FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
-    }
-
-    @Test
-    public void testInitialLogin() {
-        LoginClient.Request request = createRequest(EMAIL_SET, false);
-        AccessToken accessToken = createAccessToken(PROFILE_EMAIL_SET, new HashSet<String>());
-        LoginResult result = LoginManager.computeLoginResult(request, accessToken);
-        assertEquals(accessToken, result.getAccessToken());
-        assertEquals(PROFILE_EMAIL_SET, result.getRecentlyGrantedPermissions());
-        assertEquals(0, result.getRecentlyDeniedPermissions().size());
-    }
-
-    @Test
-    public void testReAuth() {
-        LoginClient.Request request = createRequest(EMAIL_SET, true);
-        AccessToken accessToken = createAccessToken(PROFILE_EMAIL_SET, new HashSet<String>());
-        LoginResult result = LoginManager.computeLoginResult(request, accessToken);
-        assertEquals(accessToken, result.getAccessToken());
-        assertEquals(EMAIL_SET, result.getRecentlyGrantedPermissions());
-        assertEquals(0, result.getRecentlyDeniedPermissions().size());
-    }
-
-    @Test
-    public void testDeniedPermissions() {
-        LoginClient.Request request = createRequest(LIKES_EMAIL_SET, true);
-        AccessToken accessToken = createAccessToken(EMAIL_SET, new HashSet<String>());
-        LoginResult result = LoginManager.computeLoginResult(request, accessToken);
-        assertEquals(accessToken, result.getAccessToken());
-        assertEquals(EMAIL_SET, result.getRecentlyGrantedPermissions());
-        assertEquals(
-                new HashSet<String>(){{ add("user_likes"); }},
-                result.getRecentlyDeniedPermissions());
-    }
-
-
-    private AccessToken createAccessToken(Set<String> permissions,
-                                          Set<String> declinedPermissions) {
-        return new AccessToken(
-            "token",
-            "123",
-            "234",
-            permissions,
-            declinedPermissions,
-            null,
-            null,
-            null
-        );
-    }
-
-    private LoginClient.Request createRequest(Set<String> permissions, boolean isRerequest) {
-        LoginClient.Request request = new LoginClient.Request(
-                LoginBehavior.NATIVE_WITH_FALLBACK,
-                permissions,
-                DefaultAudience.EVERYONE,
-                "123",
-                "authid"
-        );
-        request.setRerequest(isRerequest);
-        return request;
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/login/WebViewLoginMethodHandlerTest.java b/facebook/src/test/java/com/facebook/login/WebViewLoginMethodHandlerTest.java
deleted file mode 100644
index b37f6cc23..000000000
--- a/facebook/src/test/java/com/facebook/login/WebViewLoginMethodHandlerTest.java
+++ /dev/null
@@ -1,186 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.login;
-
-import android.content.Intent;
-import android.os.Bundle;
-
-import com.facebook.AccessToken;
-import com.facebook.AccessTokenSource;
-import com.facebook.FacebookException;
-import com.facebook.FacebookOperationCanceledException;
-import com.facebook.TestUtils;
-import com.facebook.internal.Utility;
-
-import org.junit.Test;
-import org.mockito.ArgumentCaptor;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-
-import java.util.Date;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-
-@PrepareForTest( { LoginClient.class })
-public class WebViewLoginMethodHandlerTest extends LoginHandlerTestCase {
-    private final static String SIGNED_REQUEST_STR = "ggarbage.eyJhbGdvcml0aG0iOiJITUFDSEEyNTYiLCJ"
-            + "jb2RlIjoid2h5bm90IiwiaXNzdWVkX2F0IjoxNDIyNTAyMDkyLCJ1c2VyX2lkIjoiMTIzIn0";
-
-    @Test
-    public void testWebViewHandlesSuccess() {
-        Bundle bundle = new Bundle();
-        bundle.putString("access_token", ACCESS_TOKEN);
-        bundle.putString("expires_in", String.format("%d", EXPIRES_IN_DELTA));
-        bundle.putString("code", "Something else");
-        bundle.putString("signed_request", SIGNED_REQUEST_STR);
-
-        WebViewLoginMethodHandler handler = new WebViewLoginMethodHandler(mockLoginClient);
-
-        LoginClient.Request request = createRequest();
-        handler.onWebDialogComplete(request, bundle, null);
-
-        ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
-                ArgumentCaptor.forClass(LoginClient.Result.class);
-        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
-
-        LoginClient.Result result = resultArgumentCaptor.getValue();
-        assertNotNull(result);
-        assertEquals(LoginClient.Result.Code.SUCCESS, result.code);
-
-        AccessToken token = result.token;
-        assertNotNull(token);
-        assertEquals(ACCESS_TOKEN, token.getToken());
-        assertDateDiffersWithinDelta(new Date(), token.getExpires(), EXPIRES_IN_DELTA * 1000, 1000);
-        TestUtils.assertSamePermissions(PERMISSIONS, token.getPermissions());
-    }
-
-    @Test
-    public void testWebViewHandlesCancel() {
-        WebViewLoginMethodHandler handler = new WebViewLoginMethodHandler(mockLoginClient);
-
-        LoginClient.Request request = createRequest();
-        handler.onWebDialogComplete(request, null, new FacebookOperationCanceledException());
-
-        ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
-                ArgumentCaptor.forClass(LoginClient.Result.class);
-        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
-        LoginClient.Result result = resultArgumentCaptor.getValue();
-
-        assertNotNull(result);
-        assertEquals(LoginClient.Result.Code.CANCEL, result.code);
-        assertNull(result.token);
-        assertNotNull(result.errorMessage);
-    }
-
-    @Test
-    public void testWebViewHandlesError() {
-        WebViewLoginMethodHandler handler = new WebViewLoginMethodHandler(mockLoginClient);
-
-        LoginClient.Request request = createRequest();
-        handler.onWebDialogComplete(request, null, new FacebookException(ERROR_MESSAGE));
-
-        ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
-                ArgumentCaptor.forClass(LoginClient.Result.class);
-        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
-        LoginClient.Result result = resultArgumentCaptor.getValue();
-
-        assertNotNull(result);
-        assertEquals(LoginClient.Result.Code.ERROR, result.code);
-        assertNull(result.token);
-        assertNotNull(result.errorMessage);
-        assertEquals(ERROR_MESSAGE, result.errorMessage);
-    }
-
-
-    @Test
-    public void testFromDialog() {
-        List<String> permissions = Utility.arrayList("stream_publish", "go_outside_and_play");
-        String token = "AnImaginaryTokenValue";
-        String userId = "1000";
-
-        Bundle bundle = new Bundle();
-        bundle.putString("access_token", token);
-        bundle.putString("expires_in", "60");
-        bundle.putString("signed_request", SIGNED_REQUEST_STR);
-
-        AccessToken accessToken = LoginMethodHandler.createAccessTokenFromWebBundle(
-                permissions,
-                bundle,
-                AccessTokenSource.WEB_VIEW,
-                "1234");
-        TestUtils.assertSamePermissions(permissions, accessToken);
-        assertEquals(token, accessToken.getToken());
-        assertEquals(AccessTokenSource.WEB_VIEW, accessToken.getSource());
-        assertTrue(!accessToken.isExpired());
-    }
-
-    @Test
-    public void testFromSSOWithExpiresString() {
-        List<String> permissions = Utility.arrayList("stream_publish", "go_outside_and_play");
-        String token = "AnImaginaryTokenValue";
-
-        Intent intent = new Intent();
-        intent.putExtra("access_token", token);
-        intent.putExtra("expires_in", "60");
-        intent.putExtra("extra_extra", "Something unrelated");
-        intent.putExtra("signed_request", SIGNED_REQUEST_STR);
-
-        AccessToken accessToken = LoginMethodHandler.createAccessTokenFromWebBundle(
-                permissions,
-                intent.getExtras(),
-                AccessTokenSource.FACEBOOK_APPLICATION_WEB,
-                "1234");
-
-        TestUtils.assertSamePermissions(permissions, accessToken);
-        assertEquals(token, accessToken.getToken());
-        assertEquals(AccessTokenSource.FACEBOOK_APPLICATION_WEB, accessToken.getSource());
-        assertTrue(!accessToken.isExpired());
-    }
-
-    @Test
-    public void testFromSSOWithExpiresLong() {
-        List<String> permissions = Utility.arrayList("stream_publish", "go_outside_and_play");
-        String token = "AnImaginaryTokenValue";
-
-        Intent intent = new Intent();
-        intent.putExtra("access_token", token);
-        intent.putExtra("expires_in", 60L);
-        intent.putExtra("extra_extra", "Something unrelated");
-        intent.putExtra("signed_request", SIGNED_REQUEST_STR);
-
-        AccessToken accessToken = LoginMethodHandler.createAccessTokenFromWebBundle(
-                permissions,
-                intent.getExtras(),
-                AccessTokenSource.FACEBOOK_APPLICATION_WEB,
-                "1234");
-        TestUtils.assertSamePermissions(permissions, accessToken);
-        assertEquals(token, accessToken.getToken());
-        assertEquals(AccessTokenSource.FACEBOOK_APPLICATION_WEB, accessToken.getSource());
-        assertTrue(!accessToken.isExpired());
-    }
-
-
-}
diff --git a/facebook/src/test/java/com/facebook/messenger/MessengerUtilsTest.java b/facebook/src/test/java/com/facebook/messenger/MessengerUtilsTest.java
deleted file mode 100644
index f102ec1a5..000000000
--- a/facebook/src/test/java/com/facebook/messenger/MessengerUtilsTest.java
+++ /dev/null
@@ -1,274 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.messenger;
-
-import android.app.Activity;
-import android.content.ContentResolver;
-import android.content.Intent;
-import android.content.pm.PackageInfo;
-import android.content.pm.PackageManager;
-import android.database.MatrixCursor;
-import android.net.Uri;
-import android.os.Bundle;
-
-import com.facebook.FacebookSdk;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
-
-import java.util.Arrays;
-
-import static org.junit.Assert.*;
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.*;
-
-/**
- * Tests for {@link com.facebook.messenger.MessengerUtils}
- */
-@RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18, manifest = Config.NONE)
-public class MessengerUtilsTest {
-
-  private Activity mMockActivity;
-  private PackageManager mMockPackageManager;
-  private ContentResolver mMockContentResolver;
-
-  @Before
-  public void setup() {
-    mMockActivity = mock(Activity.class);
-    mMockPackageManager = mock(PackageManager.class);
-    mMockContentResolver = mock(ContentResolver.class);
-    when(mMockActivity.getPackageManager()).thenReturn(mMockPackageManager);
-    when(mMockActivity.getContentResolver()).thenReturn(mMockContentResolver);
-    FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
-    FacebookSdk.setApplicationId("200");
-  }
-
-  @Test
-  public void testMessengerIsInstalled() throws Exception {
-    setupPackageManagerForMessenger(true);
-    assertTrue(MessengerUtils.hasMessengerInstalled(mMockActivity));
-  }
-
-  @Test
-  public void testMessengerNotInstalled() throws Exception {
-    setupPackageManagerForMessenger(false);
-    assertFalse(MessengerUtils.hasMessengerInstalled(mMockActivity));
-  }
-
-  @Test
-  public void testShareToMessengerWith20150314Protocol() throws Exception {
-    setupPackageManagerForMessenger(true);
-    setupContentResolverForProtocolVersions(20150314);
-
-
-    Uri uri = Uri.parse("file:///foo.jpeg");
-    Uri externalUri = Uri.parse("http://example.com/foo.jpeg");
-    ShareToMessengerParams params = ShareToMessengerParams
-        .newBuilder(uri, "image/jpeg")
-        .setMetaData("{}")
-        .setExternalUri(externalUri)
-        .build();
-    MessengerUtils.shareToMessenger(mMockActivity, 1, params);
-
-    // Expect it to have launched messenger with the right intent.
-    ArgumentCaptor<Intent> intentArgumentCaptor = ArgumentCaptor.forClass(Intent.class);
-    verify(mMockActivity).startActivityForResult(
-        intentArgumentCaptor.capture(),
-        eq(1));
-    Intent intent = intentArgumentCaptor.getValue();
-    assertEquals(Intent.ACTION_SEND, intent.getAction());
-    assertEquals(Intent.FLAG_GRANT_READ_URI_PERMISSION, intent.getFlags());
-    assertEquals("com.facebook.orca", intent.getPackage());
-    assertEquals(uri, intent.getParcelableExtra(Intent.EXTRA_STREAM));
-    assertEquals("image/jpeg", intent.getType());
-    assertEquals("200", intent.getStringExtra("com.facebook.orca.extra.APPLICATION_ID"));
-    assertEquals(20150314, intent.getIntExtra("com.facebook.orca.extra.PROTOCOL_VERSION", -1));
-    assertEquals("{}", intent.getStringExtra("com.facebook.orca.extra.METADATA"));
-    assertEquals(externalUri, intent.getParcelableExtra("com.facebook.orca.extra.EXTERNAL_URI"));
-  }
-
-  @Test
-  public void testShareToMessengerWithNoProtocol() throws Exception {
-    setupPackageManagerForMessenger(true);
-    setupContentResolverForProtocolVersions(/* empty */);
-
-    Uri uri = Uri.parse("file:///foo.jpeg");
-    Uri externalUri = Uri.parse("http://example.com/foo.jpeg");
-    ShareToMessengerParams params = ShareToMessengerParams
-        .newBuilder(uri, "image/jpeg")
-        .setMetaData("{}")
-        .setExternalUri(externalUri)
-        .build();
-    MessengerUtils.shareToMessenger(mMockActivity, 1, params);
-
-
-    // Expect it to have gone to the play store.
-    ArgumentCaptor<Intent> intentArgumentCaptor = ArgumentCaptor.forClass(Intent.class);
-    verify(mMockActivity).startActivity(intentArgumentCaptor.capture());
-    Intent intent = intentArgumentCaptor.getValue();
-    assertEquals(Intent.ACTION_VIEW, intent.getAction());
-    assertEquals(Uri.parse("market://details?id=com.facebook.orca"), intent.getData());
-  }
-
-  @Test
-  public void testGetMessengerThreadParamsForIntentWith20150314Protocol() throws Exception {
-    // Simulate an intent that Messenger would send.
-    Intent intent = new Intent();
-    intent.addCategory("com.facebook.orca.category.PLATFORM_THREAD_20150314");
-    Bundle extrasBundle = setupIntentWithAppLinkExtrasBundle(intent);
-    extrasBundle.putString("com.facebook.orca.extra.THREAD_TOKEN", "thread_token");
-    extrasBundle.putString("com.facebook.orca.extra.METADATA", "{}");
-    extrasBundle.putString("com.facebook.orca.extra.PARTICIPANTS", "100,400,500");
-    extrasBundle.putBoolean("com.facebook.orca.extra.IS_REPLY", true);
-
-    // Check the parsing logic.
-    MessengerThreadParams params = MessengerUtils.getMessengerThreadParamsForIntent(intent);
-    assertEquals(MessengerThreadParams.Origin.REPLY_FLOW, params.origin);
-    assertEquals("thread_token", params.threadToken);
-    assertEquals("{}", params.metadata);
-    assertEquals(Arrays.asList("100", "400", "500"), params.participants);
-  }
-
-  @Test
-  public void testGetMessengerThreadParamsForIntentWithUnrecognizedIntent() throws Exception {
-    // Simulate an intent that Messenger would send.
-    Intent intent = new Intent();
-    assertNull(MessengerUtils.getMessengerThreadParamsForIntent(intent));
-  }
-
-  @Test
-  public void testFinishShareToMessengerWith20150314Protocol() throws Exception {
-    // Simulate an intent that Messenger would send.
-    Intent originalIntent = new Intent();
-    originalIntent.addCategory("com.facebook.orca.category.PLATFORM_THREAD_20150314");
-    Bundle extrasBundle = setupIntentWithAppLinkExtrasBundle(originalIntent);
-    extrasBundle.putString("com.facebook.orca.extra.THREAD_TOKEN", "thread_token");
-    extrasBundle.putString("com.facebook.orca.extra.METADATA", "{}");
-    extrasBundle.putString("com.facebook.orca.extra.PARTICIPANTS", "100,400,500");
-    when(mMockActivity.getIntent()).thenReturn(originalIntent);
-
-    // Setup the data the app will send back to messenger.
-    Uri uri = Uri.parse("file:///foo.jpeg");
-    Uri externalUri = Uri.parse("http://example.com/foo.jpeg");
-    ShareToMessengerParams params = ShareToMessengerParams
-        .newBuilder(uri, "image/jpeg")
-        .setMetaData("{}")
-        .setExternalUri(externalUri)
-        .build();
-
-    // Call finishShareToMessenger and verify the results.
-    MessengerUtils.finishShareToMessenger(mMockActivity, params);
-    ArgumentCaptor<Intent> intentArgumentCaptor = ArgumentCaptor.forClass(Intent.class);
-    verify(mMockActivity).setResult(eq(Activity.RESULT_OK), intentArgumentCaptor.capture());
-    verify(mMockActivity).finish();
-
-    Intent intent = intentArgumentCaptor.getValue();
-    assertNotNull(intent);
-    assertEquals(Intent.FLAG_GRANT_READ_URI_PERMISSION, intent.getFlags());
-    assertEquals(20150314, intent.getIntExtra("com.facebook.orca.extra.PROTOCOL_VERSION", -1));
-    assertEquals("thread_token", intent.getStringExtra("com.facebook.orca.extra.THREAD_TOKEN"));
-    assertEquals(uri, intent.getData());
-    assertEquals("image/jpeg", intent.getType());
-    assertEquals("200", intent.getStringExtra("com.facebook.orca.extra.APPLICATION_ID"));
-    assertEquals("{}", intent.getStringExtra("com.facebook.orca.extra.METADATA"));
-    assertEquals(externalUri, intent.getParcelableExtra("com.facebook.orca.extra.EXTERNAL_URI"));
-  }
-
-  @Test
-  public void testFinishShareToMessengerWithUnexpectedIntent() throws Exception {
-    // Simulate an intent that Messenger would send.
-    Intent originalIntent = new Intent();
-    when(mMockActivity.getIntent()).thenReturn(originalIntent);
-
-    // Setup the data the app will send back to messenger.
-    Uri uri = Uri.parse("file:///foo.jpeg");
-    Uri externalUri = Uri.parse("http://example.com/foo.jpeg");
-    ShareToMessengerParams params = ShareToMessengerParams
-        .newBuilder(uri, "image/jpeg")
-        .setMetaData("{}")
-        .setExternalUri(externalUri)
-        .build();
-
-    // Call finishShareToMessenger and verify the results.
-    MessengerUtils.finishShareToMessenger(mMockActivity, params);
-    verify(mMockActivity).setResult(Activity.RESULT_CANCELED, null);
-    verify(mMockActivity).finish();
-  }
-
-  /**
-   * Sets up the PackageManager to return what we expect depending on whether messenger is
-   * installed.
-   *
-   * @param isInstalled true to simulate that messenger is installed
-   */
-  private void setupPackageManagerForMessenger(boolean isInstalled) throws Exception {
-    if (isInstalled) {
-      when(mMockPackageManager.getPackageInfo("com.facebook.orca", 0))
-          .thenReturn(new PackageInfo());
-    } else {
-      when(mMockPackageManager.getPackageInfo("com.facebook.orca", 0))
-          .thenThrow(new PackageManager.NameNotFoundException());
-    }
-  }
-
-  /**
-   * Sets up the Messenger content resolver to reply that it supports the specified versions.
-   *
-   * @param versions the versions that it should support
-   */
-  private void setupContentResolverForProtocolVersions(int... versions) {
-    MatrixCursor matrixCursor = new MatrixCursor(new String[]{"version"});
-    for (int version : versions) {
-      matrixCursor.addRow(new Object[]{version});
-    }
-
-    when(mMockContentResolver.query(
-        Uri.parse("content://com.facebook.orca.provider.MessengerPlatformProvider/versions"),
-        new String[]{"version"},
-        null,
-        null,
-        null))
-        .thenReturn(matrixCursor);
-  }
-
-  /**
-   * Adds the structure to the Intent to look like an app link and returns the Extras section
-   * which is where the messenger parameters go.
-   *
-   * @param intent the intent to add to
-   * @return the extras Bundle
-   */
-  private Bundle setupIntentWithAppLinkExtrasBundle(Intent intent) {
-    Bundle appLinksDataBundle = new Bundle();
-    intent.putExtra("al_applink_data", appLinksDataBundle);
-    Bundle extrasBundle = new Bundle();
-    appLinksDataBundle.putBundle("extras", extrasBundle);
-    return extrasBundle;
-  }
-
-}
diff --git a/facebook/src/test/java/com/facebook/share/internal/ShareContentValidationTest.java b/facebook/src/test/java/com/facebook/share/internal/ShareContentValidationTest.java
deleted file mode 100644
index 775fd8051..000000000
--- a/facebook/src/test/java/com/facebook/share/internal/ShareContentValidationTest.java
+++ /dev/null
@@ -1,268 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-package com.facebook.share.internal;
-
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.net.Uri;
-
-import com.facebook.FacebookException;
-import com.facebook.FacebookPowerMockTestCase;
-import com.facebook.FacebookSdk;
-import com.facebook.internal.Validate;
-import com.facebook.share.model.ShareLinkContent;
-import com.facebook.share.model.ShareOpenGraphAction;
-import com.facebook.share.model.ShareOpenGraphContent;
-import com.facebook.share.model.SharePhoto;
-import com.facebook.share.model.SharePhotoContent;
-import com.facebook.share.model.ShareVideo;
-import com.facebook.share.model.ShareVideoContent;
-
-import org.junit.Test;
-import org.mockito.Mockito;
-import org.powermock.api.mockito.PowerMockito;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.robolectric.RuntimeEnvironment;
-
-import static org.powermock.api.mockito.PowerMockito.doNothing;
-
-
-/**
- * Tests for {@link ShareContentValidation}
- */
-@PrepareForTest(Validate.class)
-public class ShareContentValidationTest extends FacebookPowerMockTestCase {
-
-    // Share by Message
-    @Test(expected = FacebookException.class)
-    public void testItValidatesNullForMessage() {
-        ShareContentValidation.validateForMessage(null);
-    }
-
-    // -LinkContent
-    @Test(expected = FacebookException.class)
-    public void testItValidatesNoHttpForShareLinkContentMessage() {
-        Uri imageUri = Uri.parse("ftp://facebook.com/awesome-content.gif");
-        ShareLinkContent linkContent = buildShareLinkContent(imageUri);
-
-        ShareContentValidation.validateForMessage(linkContent);
-    }
-
-    // -PhotoContent
-    @Test(expected = FacebookException.class)
-    public void testItValidatesNullImageForPhotoShareByMessage() {
-        SharePhotoContent.Builder spcBuilder = new SharePhotoContent.Builder();
-        SharePhoto sharePhoto = new SharePhoto.Builder().setImageUrl(null).setBitmap(null)
-                .build();
-        SharePhotoContent sharePhotoContent = spcBuilder.addPhoto(sharePhoto).build();
-
-        ShareContentValidation.validateForMessage(sharePhotoContent);
-    }
-
-    @Test(expected = FacebookException.class)
-    public void testItValidatesEmptyListOfPhotoForPhotoShareByMessage() {
-        SharePhotoContent sharePhoto = new SharePhotoContent.Builder().build();
-
-        ShareContentValidation.validateForMessage(sharePhoto);
-    }
-
-    @Test(expected = FacebookException.class)
-    public void testItValidatesMaxSizeOfPhotoShareByMessage() {
-        SharePhotoContent sharePhotoContent =
-                new SharePhotoContent.Builder()
-                        .addPhoto(buildSharePhoto("https://facebook.com/awesome-1.gif"))
-                        .addPhoto(buildSharePhoto("https://facebook.com/awesome-2.gif"))
-                        .addPhoto(buildSharePhoto("https://facebook.com/awesome-3.gif"))
-                        .addPhoto(buildSharePhoto("https://facebook.com/awesome-4.gif"))
-                        .addPhoto(buildSharePhoto("https://facebook.com/awesome-5.gif"))
-                        .addPhoto(buildSharePhoto("https://facebook.com/awesome-6.gif"))
-                        .addPhoto(buildSharePhoto("https://facebook.com/awesome-7.gif"))
-                        .build();
-
-        ShareContentValidation.validateForMessage(sharePhotoContent);
-    }
-
-    // -ShareVideoContent
-    @Test(expected = FacebookException.class)
-    public void testItValidatesEmptyPreviewPhotoForShareVideoContentByMessage() {
-        ShareVideoContent sharePhoto = new ShareVideoContent.Builder()
-                .setPreviewPhoto(null).build();
-
-        ShareContentValidation.validateForMessage(sharePhoto);
-    }
-
-    // -ShareOpenGraphContent
-    @Test(expected = FacebookException.class)
-    public void testItValidatesShareOpenGraphWithNoActionByMessage() {
-        ShareOpenGraphContent shareOpenGraphContent =
-                new ShareOpenGraphContent.Builder().setAction(null).build();
-
-        ShareContentValidation.validateForMessage(shareOpenGraphContent);
-    }
-
-    @Test(expected = FacebookException.class)
-    public void testItValidateShareOpenGraphWithNoTypeByMessage() {
-        ShareOpenGraphAction shareOpenGraphAction
-                = new ShareOpenGraphAction.Builder().setActionType(null).build();
-
-        ShareOpenGraphContent shareOpenGraphContent =
-                new ShareOpenGraphContent.Builder()
-                        .setAction(shareOpenGraphAction).build();
-
-        ShareContentValidation.validateForMessage(shareOpenGraphContent);
-    }
-
-    @Test(expected = FacebookException.class)
-    public void testItValidatesShareOpenGraphWithPreviewPropertyNameByMessage() {
-        ShareOpenGraphAction shareOpenGraphAction
-                = new ShareOpenGraphAction.Builder().setActionType("foo").build();
-
-        ShareOpenGraphContent shareOpenGraphContent =
-                new ShareOpenGraphContent.Builder()
-                        .setAction(shareOpenGraphAction).build();
-
-        ShareContentValidation.validateForMessage(shareOpenGraphContent);
-    }
-
-    // Share by Native (Is the same as Message)
-    @Test(expected = FacebookException.class)
-    public void testItValidatesNullContentForNativeShare() {
-        ShareContentValidation.validateForNativeShare(null);
-    }
-
-    @Test(expected = FacebookException.class)
-    public void testItValidatesNotHttpForShareLinkContentByNative() {
-        Uri imageUri = Uri.parse("ftp://facebook.com/awesome-content.gif");
-        ShareLinkContent linkContent = buildShareLinkContent(imageUri);
-
-        ShareContentValidation.validateForNativeShare(linkContent);
-    }
-
-    // Share by Web
-    @Test(expected = FacebookException.class)
-    public void testItValidatesNullContentForWebShare() {
-        ShareContentValidation.validateForWebShare(null);
-    }
-
-    @Test(expected = FacebookException.class)
-    public void testItDoesNotAcceptSharePhotoContentByWeb() {
-        SharePhoto sharePhoto = buildSharePhoto("https://facebook.com/awesome.gif");
-        SharePhotoContent sharePhotoContent =
-                new SharePhotoContent.Builder().addPhoto(sharePhoto).build();
-
-        ShareContentValidation.validateForWebShare(sharePhotoContent);
-    }
-
-    @Test(expected = FacebookException.class)
-    public void testItDoesNotAcceptShareVideoContentByWeb() {
-        SharePhoto previewPhoto = buildSharePhoto("https://facebook.com/awesome.gif");
-        ShareVideoContent shareVideoContent =
-                new ShareVideoContent.Builder().setPreviewPhoto(previewPhoto).build();
-
-        ShareContentValidation.validateForWebShare(shareVideoContent);
-    }
-
-    // Share by Api
-    @Test(expected = FacebookException.class)
-    public void testItValidatesNullContentForApiShare() {
-        ShareContentValidation.validateForApiShare(null);
-    }
-
-    @Test(expected = FacebookException.class)
-    public void testItValidatesNullImageForSharePhotoContentByApi() {
-        SharePhotoContent.Builder spcBuilder = new SharePhotoContent.Builder();
-        SharePhoto sharePhoto = new SharePhoto.Builder().setImageUrl(null)
-                .build();
-        SharePhotoContent sharePhotoContent = spcBuilder.addPhoto(sharePhoto).build();
-
-        ShareContentValidation.validateForApiShare(sharePhotoContent);
-    }
-
-    // Valid Share Contents
-    @Test
-    public void testItAcceptNullImageForShareLinkContent() {
-        ShareLinkContent nullImageContent = buildShareLinkContent(null);
-
-        ShareContentValidation.validateForApiShare(nullImageContent);
-        ShareContentValidation.validateForMessage(nullImageContent);
-        ShareContentValidation.validateForNativeShare(nullImageContent);
-        ShareContentValidation.validateForWebShare(nullImageContent);
-    }
-
-    @Test
-    public void testItAcceptsHttpForShareLinkContent() {
-        Uri imageUri = Uri.parse("http://facebook.com/awesome-content.gif");
-        ShareLinkContent linkContent = buildShareLinkContent(imageUri);
-
-        ShareContentValidation.validateForApiShare(linkContent);
-        ShareContentValidation.validateForMessage(linkContent);
-        ShareContentValidation.validateForNativeShare(linkContent);
-        ShareContentValidation.validateForWebShare(linkContent);
-    }
-
-    @Test
-    public void testItAcceptsHttpsForShareLinkContent() {
-        Uri imageUri = Uri.parse("https://facebook.com/awesome-content.gif");
-        ShareLinkContent linkContent = buildShareLinkContent(imageUri);
-
-        ShareContentValidation.validateForApiShare(linkContent);
-        ShareContentValidation.validateForMessage(linkContent);
-        ShareContentValidation.validateForNativeShare(linkContent);
-        ShareContentValidation.validateForWebShare(linkContent);
-    }
-
-    @Test
-    public void testItAcceptsShareOpenGraphContent() {
-        String actionKey = "foo";
-        String actionValue = "fooValue";
-        ShareOpenGraphAction shareOpenGraphAction =
-                new ShareOpenGraphAction.Builder()
-                        .putString(actionKey, actionValue)
-                        .setActionType(actionKey)
-                        .build();
-
-        ShareOpenGraphContent shareOpenGraphContent =
-                new ShareOpenGraphContent.Builder()
-                        .setPreviewPropertyName(actionKey)
-                        .setAction(shareOpenGraphAction).build();
-
-        ShareContentValidation.validateForMessage(shareOpenGraphContent);
-        ShareContentValidation.validateForNativeShare(shareOpenGraphContent);
-        ShareContentValidation.validateForApiShare(shareOpenGraphContent);
-        ShareContentValidation.validateForWebShare(shareOpenGraphContent);
-    }
-
-    private ShareLinkContent buildShareLinkContent(Uri imageLink) {
-        ShareLinkContent.Builder builder = new ShareLinkContent.Builder();
-        return builder.setImageUrl(imageLink)
-                .setContentDescription("Some description")
-                .setContentTitle("some title").build();
-    }
-
-    private SharePhoto buildSharePhoto(String url) {
-        return new SharePhoto.Builder()
-                .setImageUrl(Uri.parse(url))
-                .build();
-    }
-
-    private Bitmap createStubBitmap() {
-        return Bitmap.createBitmap(10,10, Bitmap.Config.ARGB_8888);
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/share/internal/ShareOpenGraphUtilityTest.java b/facebook/src/test/java/com/facebook/share/internal/ShareOpenGraphUtilityTest.java
deleted file mode 100644
index 7c2a7a05c..000000000
--- a/facebook/src/test/java/com/facebook/share/internal/ShareOpenGraphUtilityTest.java
+++ /dev/null
@@ -1,89 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import com.facebook.FacebookTestCase;
-import com.facebook.TestUtils;
-import com.facebook.share.model.ShareOpenGraphAction;
-import com.facebook.share.model.ShareOpenGraphObject;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.junit.Test;
-import org.robolectric.shadows.ShadowApplication;
-
-import java.io.IOException;
-import java.util.ArrayList;
-
-public class ShareOpenGraphUtilityTest extends FacebookTestCase {
-    private static final String TYPE_KEY = "type";
-
-    @Test
-    public void testToJSONObject() throws IOException, JSONException {
-        final JSONObject actual = OpenGraphJSONUtility.toJSONObject(this.getAction(), null);
-        final JSONObject expected = this.getActionJSONObject();
-        TestUtils.assertEquals(expected, actual);
-    }
-
-    private static <E> ArrayList<E> createArrayList(E... params) {
-        final ArrayList<E> list = new ArrayList<E>();
-        for (E item : params) {
-            list.add(item);
-        }
-        return list;
-    }
-
-    private ShareOpenGraphAction getAction() {
-        return new ShareOpenGraphAction.Builder()
-                .putString(TYPE_KEY, "myActionType")
-                .putObject(
-                        "myObject",
-                        new ShareOpenGraphObject.Builder()
-                                .putString("myString", "value")
-                                .putInt("myInt", 42)
-                                .putBoolean("myBoolean", true)
-                                .putStringArrayList(
-                                        "myStringArray",
-                                        createArrayList(
-                                                "string1",
-                                                "string2",
-                                                "string3")
-                                )
-                                .putObject(
-                                        "myObject",
-                                        new ShareOpenGraphObject.Builder()
-                                                .putDouble("myPi", 3.14)
-                                                .build()
-                                )
-                                .build()).build();
-    }
-
-    private JSONObject getActionJSONObject() throws IOException, JSONException {
-        return new JSONObject(this.getActionJSONString());
-    }
-
-    private String getActionJSONString() throws IOException {
-        return TestUtils.getAssetFileStringContents(
-                ShadowApplication.getInstance().getApplicationContext(),
-                "ShareOpenGraphUtilityTests_actionJSON.json"
-        );
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/share/model/ShareLinkContentBuilderTest.java b/facebook/src/test/java/com/facebook/share/model/ShareLinkContentBuilderTest.java
deleted file mode 100644
index 23bfd895f..000000000
--- a/facebook/src/test/java/com/facebook/share/model/ShareLinkContentBuilderTest.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import com.facebook.FacebookTestCase;
-import com.facebook.TestUtils;
-
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-
-public class ShareLinkContentBuilderTest extends FacebookTestCase {
-    @Test
-    public void testVideoBuilder() {
-        final ShareLinkContent content = ShareModelTestUtility.getLinkContentBuilder().build();
-        assertEquals(
-                ShareModelTestUtility.STATUS_CONTENT_DESCRIPTION,
-                content.getContentDescription());
-        assertEquals(
-                ShareModelTestUtility.STATUS_CONTENT_IMAGE_URL,
-                content.getImageUrl());
-        assertEquals(
-                ShareModelTestUtility.STATUS_CONTENT_TITLE,
-                content.getContentTitle());
-        ShareModelTestUtility.assertEquals(content, TestUtils.parcelAndUnparcel(content));
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/share/model/ShareModelTestUtility.java b/facebook/src/test/java/com/facebook/share/model/ShareModelTestUtility.java
deleted file mode 100644
index 4fd059002..000000000
--- a/facebook/src/test/java/com/facebook/share/model/ShareModelTestUtility.java
+++ /dev/null
@@ -1,299 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.graphics.Bitmap;
-import android.net.Uri;
-import android.os.Environment;
-
-import junit.framework.Assert;
-
-import java.util.*;
-
-public class ShareModelTestUtility {
-    public static final String OPEN_GRAPH_ACTION_TYPE = "myActionType";
-    public static final boolean OPEN_GRAPH_BOOLEAN_VALUE = true;
-    public static final String OPEN_GRAPH_BOOLEAN_VALUE_KEY = "OPEN_GRAPH_BOOLEAN_VALUE";
-    public static final boolean[] OPEN_GRAPH_BOOLEAN_ARRAY = { true, false };
-    public static final String OPEN_GRAPH_BOOLEAN_ARRAY_KEY = "OPEN_GRAPH_BOOLEAN_ARRAY";
-    public static final ShareOpenGraphAction OPEN_GRAPH_CONTENT_ACTION =
-            getOpenGraphActionBuilder().build();
-    public static final String OPEN_GRAPH_CONTENT_PREVIEW_PROPERTY_NAME = "myActionProperty";
-    public static final String OPEN_GRAPH_CONTENT_PREVIEW_PROPERTY_VALUE = "myActionPropertyValue";
-    public static final double OPEN_GRAPH_DOUBLE_VALUE = Double.MAX_VALUE;
-    public static final String OPEN_GRAPH_DOUBLE_VALUE_KEY = "OPEN_GRAPH_DOUBLE_VALUE";
-    public static final double[] OPEN_GRAPH_DOUBLE_ARRAY =
-            { Double.MIN_VALUE, -7, 0, 42, Double.MAX_VALUE };
-    public static final String OPEN_GRAPH_DOUBLE_ARRAY_KEY = "OPEN_GRAPH_DOUBLE_ARRAY";
-    public static final int OPEN_GRAPH_INT_VALUE = 42;
-    public static final String OPEN_GRAPH_INT_VALUE_KEY = "OPEN_GRAPH_INT_VALUE";
-    public static final int[] OPEN_GRAPH_INT_ARRAY =
-            { Integer.MIN_VALUE, -7, 0, 42, Integer.MAX_VALUE };
-    public static final String OPEN_GRAPH_INT_ARRAY_KEY = "OPEN_GRAPH_INT_ARRAY";
-    public static final long OPEN_GRAPH_LONG_VALUE = Long.MAX_VALUE;
-    public static final String OPEN_GRAPH_LONG_VALUE_KEY = "OPEN_GRAPH_LONG_VALUE";
-    public static final long[] OPEN_GRAPH_LONG_ARRAY =
-            { Long.MIN_VALUE, -7, 0, 42, Long.MAX_VALUE };
-    public static final String OPEN_GRAPH_LONG_ARRAY_KEY = "OPEN_GRAPH_LONG_ARRAY";
-    public static final String OPEN_GRAPH_STRING = "this is a string";
-    public static final String OPEN_GRAPH_STRING_KEY = "OPEN_GRAPH_STRING";
-    public static final ArrayList<String> OPEN_GRAPH_STRING_ARRAY_LIST = new ArrayList<String>() {{
-        add("string1");
-        add("string2");
-        add("string3");
-    }};
-    public static final String OPEN_GRAPH_STRING_ARRAY_LIST_KEY = "OPEN_GRAPH_STRING_ARRAY_LIST";
-    public static final String OPEN_GRAPH_UNUSED_KEY = "unused";
-    public static final Bitmap PHOTO_BITMAP = Bitmap.createBitmap(10, 10, Bitmap.Config.ALPHA_8);
-    public static final ArrayList<SharePhoto> PHOTO_CONTENT_PHOTOS = new ArrayList<SharePhoto>() {{
-        add(getPhotoBuilder(PhotoBuilderType.LOCAL_URL).build());
-    }};
-    public static final boolean PHOTO_USER_GENERATED = true;
-    public static final String STATUS_CONTENT_DESCRIPTION = "this is a description";
-    public static final Uri STATUS_CONTENT_IMAGE_URL = Uri.parse(
-            "http://www.facebook.com/image/url");
-    public static final String STATUS_CONTENT_TITLE = "this is a title";
-    public static final SharePhoto VIDEO_CONTENT_PREVIEW_PHOTO = getPhotoBuilder(
-            PhotoBuilderType.LOCAL_URL).build();
-    public static final ShareVideo VIDEO_CONTENT_VIDEO = getVideoBuilder().build();
-
-    public enum PhotoBuilderType {
-        BITMAP,
-        LOCAL_URL,
-    }
-
-    public static Uri getTestPhotoImageUrl() {
-        return Uri.parse("file://" +
-                        Environment.getExternalStorageDirectory().getPath() +
-                        "crazy-cat-photo.jpg");
-    }
-
-    public static Uri getTestVideoLocalUrl() {
-        return Uri.parse("file://" +
-                Environment.getExternalStorageDirectory().getPath() +
-                "crazy-cat-video.mp4");
-    }
-
-    public static ShareOpenGraphAction.Builder getOpenGraphActionBuilder() {
-        return prepareOpenGraphValueContainerBuilder(
-                new ShareOpenGraphAction.Builder())
-                .setActionType(OPEN_GRAPH_ACTION_TYPE)
-                .putString(
-                        OPEN_GRAPH_CONTENT_PREVIEW_PROPERTY_NAME,
-                        OPEN_GRAPH_CONTENT_PREVIEW_PROPERTY_VALUE);
-    }
-
-    public static ShareOpenGraphContent.Builder getOpenGraphContentBuilder() {
-        return new ShareOpenGraphContent.Builder()
-                .setAction(OPEN_GRAPH_CONTENT_ACTION)
-                .setPreviewPropertyName(OPEN_GRAPH_CONTENT_PREVIEW_PROPERTY_NAME)
-                ;
-    }
-
-    public static ShareOpenGraphObject.Builder getOpenGraphObjectBuilder() {
-        return prepareOpenGraphValueContainerBuilder(new ShareOpenGraphObject.Builder());
-    }
-
-    public static SharePhoto.Builder getPhotoBuilder(final PhotoBuilderType type) {
-        final SharePhoto.Builder builder = new SharePhoto.Builder().setUserGenerated(
-                PHOTO_USER_GENERATED);
-        switch (type) {
-            case BITMAP:
-                builder.setBitmap(PHOTO_BITMAP);
-                break;
-            case LOCAL_URL:
-                builder.setImageUrl(getTestPhotoImageUrl());
-                break;
-        }
-        return builder;
-    }
-
-    public static SharePhotoContent.Builder getPhotoContentBuilder() {
-        return new SharePhotoContent.Builder().addPhotos(PHOTO_CONTENT_PHOTOS);
-    }
-
-    public static ShareLinkContent.Builder getLinkContentBuilder() {
-        return new ShareLinkContent.Builder()
-                .setContentDescription(STATUS_CONTENT_DESCRIPTION)
-                .setImageUrl(STATUS_CONTENT_IMAGE_URL)
-                .setContentTitle(STATUS_CONTENT_TITLE)
-                ;
-    }
-
-    public static ShareVideo.Builder getVideoBuilder() {
-        return new ShareVideo.Builder().setLocalUrl(getTestVideoLocalUrl());
-    }
-
-    public static ShareVideoContent.Builder getVideoContentBuilder() {
-        return new ShareVideoContent.Builder()
-                .setPreviewPhoto(VIDEO_CONTENT_PREVIEW_PHOTO)
-                .setVideo(VIDEO_CONTENT_VIDEO)
-                ;
-    }
-
-    private static <E extends ShareOpenGraphValueContainer.Builder> E
-    prepareOpenGraphValueContainerBuilder(
-            final E builder
-    ) {
-        return (E)builder
-                .putBoolean(OPEN_GRAPH_BOOLEAN_VALUE_KEY, OPEN_GRAPH_BOOLEAN_VALUE)
-                .putBooleanArray(OPEN_GRAPH_BOOLEAN_ARRAY_KEY, OPEN_GRAPH_BOOLEAN_ARRAY)
-                .putDouble(OPEN_GRAPH_DOUBLE_VALUE_KEY, OPEN_GRAPH_DOUBLE_VALUE)
-                .putDoubleArray(OPEN_GRAPH_DOUBLE_ARRAY_KEY, OPEN_GRAPH_DOUBLE_ARRAY)
-                .putInt(OPEN_GRAPH_INT_VALUE_KEY, OPEN_GRAPH_INT_VALUE)
-                .putIntArray(OPEN_GRAPH_INT_ARRAY_KEY, OPEN_GRAPH_INT_ARRAY)
-                .putLong(OPEN_GRAPH_LONG_VALUE_KEY, OPEN_GRAPH_LONG_VALUE)
-                .putLongArray(OPEN_GRAPH_LONG_ARRAY_KEY, OPEN_GRAPH_LONG_ARRAY)
-                .putString(OPEN_GRAPH_STRING_KEY, OPEN_GRAPH_STRING)
-                .putStringArrayList(OPEN_GRAPH_STRING_ARRAY_LIST_KEY, OPEN_GRAPH_STRING_ARRAY_LIST)
-                ;
-    }
-
-    public static <E> void assertEquals(final E a, final E b) {
-        if (a == null) {
-            // if a is null, b should be null
-            Assert.assertNull(b);
-        } else if ((a instanceof boolean[]) && (b instanceof boolean[])) {
-            // check for arrays of all of the primitive types, then arrays of Object, and route
-            // those through Arrays equals
-            Assert.assertTrue(Arrays.equals((boolean[]) a, (boolean[]) b));
-        } else if ((a instanceof byte[]) && (b instanceof byte[])) {
-            Assert.assertTrue(Arrays.equals((byte[])a, (byte[])b));
-        } else if ((a instanceof char[]) && (b instanceof char[])) {
-            Assert.assertTrue(Arrays.equals((char[])a, (char[])b));
-        } else if ((a instanceof double[]) && (b instanceof double[])) {
-            Assert.assertTrue(Arrays.equals((double[])a, (double[])b));
-        } else if ((a instanceof float[]) && (b instanceof float[])) {
-            Assert.assertTrue(Arrays.equals((float[])a, (float[])b));
-        } else if ((a instanceof int[]) && (b instanceof int[])) {
-            Assert.assertTrue(Arrays.equals((int[])a, (int[])b));
-        } else if ((a instanceof long[]) && (b instanceof long[])) {
-            Assert.assertTrue(Arrays.equals((long[])a, (long[])b));
-        } else if ((a instanceof short[]) && (b instanceof short[])) {
-            Assert.assertTrue(Arrays.equals((short[])a, (short[])b));
-        } else if ((a instanceof Object[]) && (b instanceof Object[])) {
-            Assert.assertTrue(Arrays.deepEquals((Object[])a, (Object[])b));
-        } else if ((a instanceof List) && (b instanceof List)) {
-            // check for Lists
-            assertEquals((List)a, (List)b);
-        } else if ((a instanceof ShareModel) && (b instanceof ShareModel)) {
-            // check for ShareModels
-            assertEquals((ShareModel)a, (ShareModel)b);
-        } else {
-            // now use Object.equals
-            Assert.assertTrue(a.equals(b));
-        }
-    }
-
-    public static void assertEquals(final List a, final List b) {
-        final int size = a.size();
-        Assert.assertEquals(size, b.size());
-        for (int i = 0; i < size; ++i) {
-            assertEquals(a.get(i), b.get(i));
-        }
-    }
-
-    public static <E extends ShareModel> void assertEquals(final E a, final E b) {
-        if ((a instanceof ShareOpenGraphAction) && (b instanceof ShareOpenGraphAction)) {
-            assertEquals((ShareOpenGraphAction)a, (ShareOpenGraphAction)b);
-        } else if ((a instanceof ShareOpenGraphObject) && (b instanceof ShareOpenGraphObject)) {
-            assertEquals((ShareOpenGraphObject) a, (ShareOpenGraphObject) b);
-        } else if ((a instanceof ShareOpenGraphContent) && (b instanceof ShareOpenGraphContent)) {
-            assertEquals((ShareOpenGraphContent)a, (ShareOpenGraphContent)b);
-        } else if ((a instanceof SharePhoto) && (b instanceof SharePhoto)) {
-            assertEquals((SharePhoto)a, (SharePhoto)b);
-        } else if ((a instanceof SharePhotoContent) && (b instanceof SharePhotoContent)) {
-            assertEquals((SharePhotoContent)a, (SharePhotoContent)b);
-        } else if ((a instanceof ShareLinkContent) && (b instanceof ShareLinkContent)) {
-            assertEquals((ShareLinkContent)a, (ShareLinkContent)b);
-        } else if ((a instanceof ShareVideo) && (b instanceof ShareVideo)) {
-            assertEquals((ShareVideo)a, (ShareVideo)b);
-        } else if ((a instanceof ShareVideoContent) && (b instanceof ShareVideoContent)) {
-            assertEquals((ShareVideoContent)a, (ShareVideoContent)b);
-        } else {
-            Assert.fail(a.getClass().toString() + " models do not have an equality test");
-        }
-    }
-
-    public static void assertEquals(final ShareOpenGraphAction a, final ShareOpenGraphAction b) {
-        Assert.assertEquals(a.getActionType(), b.getActionType());
-        assertOpenGraphValueContainerEquals(a, b);
-    }
-
-    public static void assertEquals(final ShareOpenGraphContent a, final ShareOpenGraphContent b) {
-        assertEquals(a.getAction(), b.getAction());
-        Assert.assertEquals(a.getPreviewPropertyName(), b.getPreviewPropertyName());
-        assertContentEquals(a, b);
-    }
-
-    public static void assertEquals(final ShareOpenGraphObject a, final ShareOpenGraphObject b) {
-        assertOpenGraphValueContainerEquals(a, b);
-    }
-
-    public static void assertEquals(final SharePhoto a, final SharePhoto b) {
-        Assert.assertEquals(a.getBitmap(), b.getBitmap());
-        Assert.assertEquals(a.getImageUrl(), b.getImageUrl());
-        Assert.assertEquals(a.getUserGenerated(), b.getUserGenerated());
-    }
-
-    public static void assertEquals(final SharePhotoContent a, final SharePhotoContent b) {
-        assertEquals(a.getPhotos(), b.getPhotos());
-        assertContentEquals(a, b);
-    }
-
-    public static void assertEquals(final ShareLinkContent a, final ShareLinkContent b) {
-        Assert.assertEquals(a.getContentDescription(), b.getContentDescription());
-        Assert.assertEquals(a.getImageUrl(), b.getImageUrl());
-        Assert.assertEquals(a.getContentTitle(), b.getContentTitle());
-        assertContentEquals(a, b);
-    }
-
-    public static void assertEquals(final ShareVideo a, final ShareVideo b) {
-        Assert.assertEquals(a.getLocalUrl(), b.getLocalUrl());
-    }
-
-    public static void assertEquals(final ShareVideoContent a, final ShareVideoContent b) {
-        assertEquals(a.getPreviewPhoto(), b.getPreviewPhoto());
-        assertEquals(a.getVideo(), b.getVideo());
-        assertContentEquals(a, b);
-    }
-
-    private static void assertContentEquals(final ShareContent a, final ShareContent b) {
-        Assert.assertEquals(a.getContentUrl(), b.getContentUrl());
-        Assert.assertEquals(a.getPeopleIds(), b.getPeopleIds());
-        Assert.assertEquals(a.getPlaceId(), b.getPlaceId());
-        Assert.assertEquals(a.getRef(), b.getRef());
-    }
-
-    private static void assertOpenGraphValueContainerEquals(
-            final ShareOpenGraphValueContainer a,
-            final ShareOpenGraphValueContainer b
-    ) {
-        final HashSet<String> keySet = new HashSet<String>();
-        keySet.addAll(a.keySet());
-        keySet.addAll(b.keySet());
-        for (String key : keySet) {
-            assertEquals(a.get(key), b.get(key));
-        }
-    }
-
-    private ShareModelTestUtility() {}
-}
diff --git a/facebook/src/test/java/com/facebook/share/model/ShareOpenGraphActionBuilderTest.java b/facebook/src/test/java/com/facebook/share/model/ShareOpenGraphActionBuilderTest.java
deleted file mode 100644
index cfba6e541..000000000
--- a/facebook/src/test/java/com/facebook/share/model/ShareOpenGraphActionBuilderTest.java
+++ /dev/null
@@ -1,98 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import com.facebook.FacebookTestCase;
-import com.facebook.TestUtils;
-
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-public class ShareOpenGraphActionBuilderTest extends FacebookTestCase {
-    @Test
-    public void testVideoBuilder() {
-        final ShareOpenGraphAction action =
-                ShareModelTestUtility.getOpenGraphActionBuilder().build();
-        assertEquals(ShareModelTestUtility.OPEN_GRAPH_ACTION_TYPE, action.getActionType());
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_VALUE,
-                action.getBoolean(
-                        ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_VALUE_KEY,
-                        !ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_VALUE));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_VALUE,
-                action.getBoolean(
-                        ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY,
-                        ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_VALUE));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_ARRAY,
-                action.getBooleanArray(ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_ARRAY_KEY));
-        assertNull(action.getBooleanArray(ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_DOUBLE_VALUE,
-                action.getDouble(ShareModelTestUtility.OPEN_GRAPH_DOUBLE_VALUE_KEY, 0),
-                TestUtils.DOUBLE_EQUALS_DELTA);
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_DOUBLE_VALUE,
-                action.getDouble(
-                        ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY,
-                        ShareModelTestUtility.OPEN_GRAPH_DOUBLE_VALUE),
-                TestUtils.DOUBLE_EQUALS_DELTA);
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_DOUBLE_ARRAY,
-                action.getDoubleArray(ShareModelTestUtility.OPEN_GRAPH_DOUBLE_ARRAY_KEY));
-        assertNull(action.getDoubleArray(ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_INT_VALUE,
-                action.getInt(ShareModelTestUtility.OPEN_GRAPH_INT_VALUE_KEY, 0));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_INT_VALUE,
-                action.getInt(ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY,
-                        ShareModelTestUtility.OPEN_GRAPH_INT_VALUE));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_INT_ARRAY,
-                action.getIntArray(ShareModelTestUtility.OPEN_GRAPH_INT_ARRAY_KEY));
-        assertNull(action.getIntArray(ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_LONG_VALUE,
-                action.getLong(ShareModelTestUtility.OPEN_GRAPH_LONG_VALUE_KEY, 0));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_LONG_VALUE,
-                action.getLong(
-                        ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY,
-                        ShareModelTestUtility.OPEN_GRAPH_LONG_VALUE));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_LONG_ARRAY,
-                action.getLongArray(ShareModelTestUtility.OPEN_GRAPH_LONG_ARRAY_KEY));
-        assertNull(action.getLongArray(ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_STRING,
-                action.getString(ShareModelTestUtility.OPEN_GRAPH_STRING_KEY));
-        assertNull(action.getString(ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_STRING_ARRAY_LIST,
-                action.getStringArrayList(ShareModelTestUtility.OPEN_GRAPH_STRING_ARRAY_LIST_KEY));
-        assertNull(action.getStringArrayList(ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY));
-        ShareModelTestUtility.assertEquals(action, TestUtils.parcelAndUnparcel(action));
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/share/model/ShareOpenGraphContentBuilderTest.java b/facebook/src/test/java/com/facebook/share/model/ShareOpenGraphContentBuilderTest.java
deleted file mode 100644
index a1a0bd163..000000000
--- a/facebook/src/test/java/com/facebook/share/model/ShareOpenGraphContentBuilderTest.java
+++ /dev/null
@@ -1,43 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import com.facebook.FacebookTestCase;
-import com.facebook.TestUtils;
-
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-
-public class ShareOpenGraphContentBuilderTest extends FacebookTestCase {
-    @Test
-    public void testOpenGraphBuilder() {
-        final ShareOpenGraphContent content =
-                ShareModelTestUtility.getOpenGraphContentBuilder().build();
-        ShareModelTestUtility.assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_CONTENT_ACTION,
-                content.getAction());
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_CONTENT_PREVIEW_PROPERTY_NAME,
-                content.getPreviewPropertyName());
-        ShareModelTestUtility.assertEquals(content, TestUtils.parcelAndUnparcel(content));
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/share/model/ShareOpenGraphObjectBuilderTest.java b/facebook/src/test/java/com/facebook/share/model/ShareOpenGraphObjectBuilderTest.java
deleted file mode 100644
index 0643ddf51..000000000
--- a/facebook/src/test/java/com/facebook/share/model/ShareOpenGraphObjectBuilderTest.java
+++ /dev/null
@@ -1,98 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import com.facebook.FacebookTestCase;
-import com.facebook.TestUtils;
-
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-public class ShareOpenGraphObjectBuilderTest extends FacebookTestCase {
-    @Test
-    public void testVideoBuilder() {
-        final ShareOpenGraphObject object =
-                ShareModelTestUtility.getOpenGraphObjectBuilder().build();
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_VALUE,
-                object.getBoolean(
-                        ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_VALUE_KEY,
-                        !ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_VALUE));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_VALUE,
-                object.getBoolean(
-                        ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY,
-                        ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_VALUE));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_ARRAY,
-                object.getBooleanArray(ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_ARRAY_KEY));
-        assertNull(object.getBooleanArray(ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_DOUBLE_VALUE,
-                object.getDouble(ShareModelTestUtility.OPEN_GRAPH_DOUBLE_VALUE_KEY, 0),
-                TestUtils.DOUBLE_EQUALS_DELTA);
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_DOUBLE_VALUE,
-                object.getDouble(
-                        ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY,
-                        ShareModelTestUtility.OPEN_GRAPH_DOUBLE_VALUE),
-                TestUtils.DOUBLE_EQUALS_DELTA);
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_DOUBLE_ARRAY,
-                object.getDoubleArray(ShareModelTestUtility.OPEN_GRAPH_DOUBLE_ARRAY_KEY));
-        assertNull(object.getDoubleArray(ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_INT_VALUE,
-                object.getInt(ShareModelTestUtility.OPEN_GRAPH_INT_VALUE_KEY, 0));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_INT_VALUE,
-                object.getInt(
-                        ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY,
-                        ShareModelTestUtility.OPEN_GRAPH_INT_VALUE));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_INT_ARRAY,
-                object.getIntArray(ShareModelTestUtility.OPEN_GRAPH_INT_ARRAY_KEY));
-        assertNull(object.getIntArray(ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_LONG_VALUE,
-                object.getLong(ShareModelTestUtility.OPEN_GRAPH_LONG_VALUE_KEY, 0));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_LONG_VALUE,
-                object.getLong(
-                        ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY,
-                        ShareModelTestUtility.OPEN_GRAPH_LONG_VALUE));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_LONG_ARRAY,
-                object.getLongArray(ShareModelTestUtility.OPEN_GRAPH_LONG_ARRAY_KEY));
-        assertNull(object.getLongArray(ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_STRING,
-                object.getString(ShareModelTestUtility.OPEN_GRAPH_STRING_KEY));
-        assertNull(object.getString(ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_STRING_ARRAY_LIST,
-                object.getStringArrayList(ShareModelTestUtility.OPEN_GRAPH_STRING_ARRAY_LIST_KEY));
-        assertNull(object.getStringArrayList(ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY));
-        ShareModelTestUtility.assertEquals(object, TestUtils.parcelAndUnparcel(object));
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/share/model/SharePhotoBuilderTest.java b/facebook/src/test/java/com/facebook/share/model/SharePhotoBuilderTest.java
deleted file mode 100644
index c6b9e53c5..000000000
--- a/facebook/src/test/java/com/facebook/share/model/SharePhotoBuilderTest.java
+++ /dev/null
@@ -1,40 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import com.facebook.FacebookTestCase;
-import com.facebook.TestUtils;
-
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-
-public class SharePhotoBuilderTest extends FacebookTestCase {
-    @Test
-    public void testPhotoBuilder() {
-        final SharePhoto photo = ShareModelTestUtility
-                .getPhotoBuilder(ShareModelTestUtility.PhotoBuilderType.LOCAL_URL)
-                .build();
-        assertEquals(ShareModelTestUtility.getTestPhotoImageUrl(), photo.getImageUrl());
-        assertEquals(ShareModelTestUtility.PHOTO_USER_GENERATED, photo.getUserGenerated());
-        ShareModelTestUtility.assertEquals(photo, TestUtils.parcelAndUnparcel(photo));
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/share/model/SharePhotoContentBuilderTest.java b/facebook/src/test/java/com/facebook/share/model/SharePhotoContentBuilderTest.java
deleted file mode 100644
index 6d327c2a6..000000000
--- a/facebook/src/test/java/com/facebook/share/model/SharePhotoContentBuilderTest.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import com.facebook.FacebookTestCase;
-import com.facebook.TestUtils;
-
-import org.junit.Test;
-
-public class SharePhotoContentBuilderTest extends FacebookTestCase {
-    @Test
-    public void testPhotoBuilder() {
-        final SharePhotoContent content = ShareModelTestUtility.getPhotoContentBuilder().build();
-        ShareModelTestUtility.assertEquals(
-                ShareModelTestUtility.PHOTO_CONTENT_PHOTOS,
-                content.getPhotos());
-        ShareModelTestUtility.assertEquals(content, TestUtils.parcelAndUnparcel(content));
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/share/model/ShareVideoBuilderTest.java b/facebook/src/test/java/com/facebook/share/model/ShareVideoBuilderTest.java
deleted file mode 100644
index 38ede93a4..000000000
--- a/facebook/src/test/java/com/facebook/share/model/ShareVideoBuilderTest.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import com.facebook.FacebookTestCase;
-import com.facebook.TestUtils;
-
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-
-public class ShareVideoBuilderTest extends FacebookTestCase {
-    @Test
-    public void testVideoBuilder() {
-        final ShareVideo video = ShareModelTestUtility.getVideoBuilder().build();
-        assertEquals(ShareModelTestUtility.getTestVideoLocalUrl(), video.getLocalUrl());
-        ShareModelTestUtility.assertEquals(video, TestUtils.parcelAndUnparcel(video));
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/share/model/ShareVideoContentBuilderTest.java b/facebook/src/test/java/com/facebook/share/model/ShareVideoContentBuilderTest.java
deleted file mode 100644
index 0d859b153..000000000
--- a/facebook/src/test/java/com/facebook/share/model/ShareVideoContentBuilderTest.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import com.facebook.FacebookTestCase;
-import com.facebook.TestUtils;
-
-import org.junit.Test;
-
-public class ShareVideoContentBuilderTest extends FacebookTestCase {
-    @Test
-    public void testVideoBuilder() {
-        final ShareVideoContent content = ShareModelTestUtility.getVideoContentBuilder().build();
-        ShareModelTestUtility.assertEquals(
-                ShareModelTestUtility.VIDEO_CONTENT_PREVIEW_PHOTO,
-                content.getPreviewPhoto());
-        ShareModelTestUtility.assertEquals(
-                ShareModelTestUtility.VIDEO_CONTENT_VIDEO,
-                content.getVideo());
-        ShareModelTestUtility.assertEquals(
-                content,
-                TestUtils.parcelAndUnparcel(content));
-    }
-}
diff --git a/facebook/src/test/java/org/mockito/configuration/MockitoConfiguration.java b/facebook/src/test/java/org/mockito/configuration/MockitoConfiguration.java
deleted file mode 100644
index 0b3b0efef..000000000
--- a/facebook/src/test/java/org/mockito/configuration/MockitoConfiguration.java
+++ /dev/null
@@ -1,9 +0,0 @@
-package org.mockito.configuration;
-
-public class MockitoConfiguration extends DefaultMockitoConfiguration {
-
-    @Override
-    public boolean enableClassCache() {
-        return false;
-    }
-}
\ No newline at end of file
