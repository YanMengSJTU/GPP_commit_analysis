diff --git a/facebook/src/com/facebook/android/Facebook.java b/facebook/src/com/facebook/android/Facebook.java
index f6bc197db..082f04b86 100644
--- a/facebook/src/com/facebook/android/Facebook.java
+++ b/facebook/src/com/facebook/android/Facebook.java
@@ -258,8 +258,7 @@ public String request(String graphPath, Bundle parameters)
     
     /**
      * Synchronously make a request to the Facebook Graph API with the given
-     * HTTP method and string parameters. Note that binary data parameters 
-     * (e.g. pictures) are not yet supported by this helper function.
+     * HTTP method and string parameters.
      * 
      * See http://developers.facebook.com/docs/api
      *  
@@ -286,6 +285,38 @@ public String request(String graphPath,
                           String httpMethod) 
           throws FileNotFoundException, IOException, URISyntaxException {
         parameters.putString("format", "json");
+        return new String(requestBinary(graphPath, parameters, httpMethod));
+    }
+
+    /**
+     * Synchronously make a request to the Facebook Graph API with the given
+     * HTTP method and string parameters. Use this method if you need to
+     * retrieve binary data (e.g. pictures)
+     * 
+     * See http://developers.facebook.com/docs/api
+     *  
+     * Note that this method blocks waiting for a network response, so do not 
+     * call it in a UI thread.
+     * 
+     * @param graphPath
+     *            Path to resource in the Facebook graph, e.g., to fetch data
+     *            about the currently logged authenticated user, provide "me",
+     *            which will fetch http://graph.facebook.com/me
+     * @param parameters
+     *            key-value string parameters, e.g. the path "search" with
+     *            parameters {"q" : "facebook"} would produce a query for the
+     *            following graph resource:
+     *            https://graph.facebook.com/search?q=facebook
+     * @param httpMethod
+     *            http verb, e.g. "GET", "POST", "DELETE"
+     * @throws IOException 
+     * @throws URISyntaxException 
+     * @return Binary server response
+     */
+    public byte[] requestBinary(String graphPath,
+                          Bundle parameters, 
+                          String httpMethod) 
+          throws FileNotFoundException, IOException, URISyntaxException {
         if (isSessionValid()) {
             parameters.putString(TOKEN, getAccessToken());
         }
diff --git a/facebook/src/com/facebook/android/Util.java b/facebook/src/com/facebook/android/Util.java
index 06731af9c..1880843b0 100644
--- a/facebook/src/com/facebook/android/Util.java
+++ b/facebook/src/com/facebook/android/Util.java
@@ -16,10 +16,7 @@
 
 package com.facebook.android;
 
-import java.io.BufferedReader;
 import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
 import java.net.MalformedURLException;
 import java.net.URISyntaxException;
 import java.net.URL;
@@ -33,6 +30,7 @@
 import org.apache.http.entity.ByteArrayEntity;
 import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.http.util.ByteArrayBuffer;
+import org.apache.http.util.EntityUtils;
 import org.json.JSONException;
 import org.json.JSONObject;
 
@@ -131,11 +129,11 @@ public static Bundle parseUrl(String url) {
      * @param url - the resource to open: must be a welformed URL
      * @param method - the HTTP method to use ("GET", "POST", etc.)
      * @param params - the query parameter for the URL (e.g. access_token=foo)
-     * @return the URL contents as a String
+     * @return the URL contents as a byte array
      * @throws IOException - if a network problem occurs
      * @throws URISyntaxException - if the URL format is invalid
      */
-    public static String openUrl(String url, String method, Bundle params) 
+    public static byte[] openUrl(String url, String method, Bundle params) 
           throws MalformedURLException, IOException, URISyntaxException {
      // random string as boundary for multi-part http post
         String strBoundary = "3i2ndDfv2rTHiSisAbouNdArYfORhtTPEefj3q2f";
@@ -155,7 +153,7 @@ public static String openUrl(String url, String method, Bundle params)
         }
         else {
             HttpPost postRequest = new HttpPost(url);
-            ByteArrayBuffer data = new ByteArrayBuffer(10);
+            ByteArrayBuffer data = new ByteArrayBuffer(1024);
 
             Bundle dataparams = new Bundle();
             for (String key : params.keySet()) {
@@ -198,7 +196,8 @@ public static String openUrl(String url, String method, Bundle params)
 
         HttpResponse httpResponse  = httpClient.execute(request);
         HttpEntity entity = httpResponse.getEntity();
-        String response = read(entity.getContent());
+        byte[] response = EntityUtils.toByteArray(entity);
+
         entity.consumeContent();
         return (response);
     }
@@ -208,16 +207,6 @@ private static void appendStringToByteArrayBuffer(String s, ByteArrayBuffer baf)
         baf.append(s.getBytes(), 0, s.length());
     }
 
-    private static String read(InputStream in) throws IOException {
-        StringBuilder sb = new StringBuilder();
-        BufferedReader r = new BufferedReader(new InputStreamReader(in), 1000);
-        for (String line = r.readLine(); line != null; line = r.readLine()) {
-            sb.append(line);
-        }
-        in.close();
-        return sb.toString();
-    }
-
     public static void clearCookies(Context context) {
         // Edge case: an illegal state exception is thrown if an instance of 
         // CookieSyncManager has not be created.  CookieSyncManager is normally
