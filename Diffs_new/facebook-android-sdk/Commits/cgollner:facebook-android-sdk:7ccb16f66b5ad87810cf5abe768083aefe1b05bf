diff --git a/facebook/src/com/facebook/Session.java b/facebook/src/com/facebook/Session.java
index 743a70f34..9be6ffe49 100644
--- a/facebook/src/com/facebook/Session.java
+++ b/facebook/src/com/facebook/Session.java
@@ -16,6 +16,7 @@
 
 package com.facebook;
 
+import android.annotation.TargetApi;
 import android.app.Activity;
 import android.content.*;
 import android.content.pm.ResolveInfo;
@@ -853,6 +854,30 @@ public static Session openActiveSession(Context context, Fragment fragment,
         return openActiveSession(context, allowLoginUI, new OpenRequest(fragment).setCallback(callback));
     }
 
+    /**
+     * @author Christian
+     * If allowLoginUI is true, this will create a new Session, make it active, and
+     * open it. If the default token cache is not available, then this will request
+     * basic permissions. If the default token cache is available and cached tokens
+     * are loaded, this will use the cached token and associated permissions.
+     * <p/>
+     * If allowedLoginUI is false, this will only create the active session and open
+     * it if it requires no user interaction (i.e. the token cache is available and
+     * there are cached tokens).
+     *
+     * @param context      The Activity or Service creating this Session
+     * @param fragment     The Fragment that is opening the new Session.
+     * @param allowLoginUI if false, only sets the active session and opens it if it
+     *                     does not require user interaction
+     * @param callback     The {@link StatusCallback SessionStatusCallback} to
+     *                     notify regarding Session state changes.
+     * @return The new Session or null if one could not be created
+     */
+    public static Session openActiveSession(Context context, android.app.Fragment fragment,
+            boolean allowLoginUI, StatusCallback callback) {
+        return openActiveSession(context, allowLoginUI, new OpenRequest(fragment).setCallback(callback));
+    }
+    
     /**
      * Opens a session based on an existing Facebook access token, and also makes this session
      * the currently active session. This method should be used
@@ -1679,6 +1704,25 @@ public Activity getActivityContext() {
                 }
             };
         }
+        
+        /**
+         * @author Christian
+         * @param fragment normal Fragment
+         */
+        @TargetApi(Build.VERSION_CODES.HONEYCOMB)
+        AuthorizationRequest(final android.app.Fragment fragment) {
+            startActivityDelegate = new StartActivityDelegate() {
+                @Override
+                public void startActivityForResult(Intent intent, int requestCode) {
+                    fragment.startActivityForResult(intent, requestCode);
+                }
+
+				@Override
+                public Activity getActivityContext() {
+                    return fragment.getActivity();
+                }
+            };
+        }
 
         /**
          * Constructor to be used for V1 serialization only, DO NOT CHANGE.
@@ -1883,6 +1927,16 @@ public OpenRequest(Fragment fragment) {
             super(fragment);
         }
 
+        /**
+         * @author Christian
+         * Constructs an OpenRequest.
+         *
+         * @param fragment the Fragment to use to open the Session
+         */
+        public OpenRequest(android.app.Fragment fragment) {
+            super(fragment);
+        }
+        
         /**
          * Sets the StatusCallback for the OpenRequest.
          *
