diff --git a/facebook/src/com/facebook/Session.java b/facebook/src/com/facebook/Session.java
index 16efff2e0..c424c9537 100644
--- a/facebook/src/com/facebook/Session.java
+++ b/facebook/src/com/facebook/Session.java
@@ -16,6 +16,7 @@
 
 package com.facebook;
 
+import android.annotation.TargetApi;
 import android.app.Activity;
 import android.content.*;
 import android.content.pm.ResolveInfo;
@@ -853,6 +854,29 @@ public static Session openActiveSession(Context context, Fragment fragment,
         return openActiveSession(context, allowLoginUI, new OpenRequest(fragment).setCallback(callback));
     }
 
+    /**
+     * If allowLoginUI is true, this will create a new Session, make it active, and
+     * open it. If the default token cache is not available, then this will request
+     * basic permissions. If the default token cache is available and cached tokens
+     * are loaded, this will use the cached token and associated permissions.
+     * <p/>
+     * If allowedLoginUI is false, this will only create the active session and open
+     * it if it requires no user interaction (i.e. the token cache is available and
+     * there are cached tokens).
+     *
+     * @param context      The Activity or Service creating this Session
+     * @param fragment     The Fragment that is opening the new Session.
+     * @param allowLoginUI if false, only sets the active session and opens it if it
+     *                     does not require user interaction
+     * @param callback     The {@link StatusCallback SessionStatusCallback} to
+     *                     notify regarding Session state changes.
+     * @return The new Session or null if one could not be created
+     */
+    public static Session openActiveSession(Context context, android.app.Fragment fragment,
+            boolean allowLoginUI, StatusCallback callback) {
+        return openActiveSession(context, allowLoginUI, new OpenRequest(fragment).setCallback(callback));
+    }
+
     /**
      * Opens a session based on an existing Facebook access token, and also makes this session
      * the currently active session. This method should be used
@@ -1681,6 +1705,21 @@ public Activity getActivityContext() {
             };
         }
 
+        @TargetApi(11)
+        AuthorizationRequest(final android.app.Fragment fragment) {
+            startActivityDelegate = new StartActivityDelegate() {
+                @Override
+                public void startActivityForResult(Intent intent, int requestCode) {
+                    fragment.startActivityForResult(intent, requestCode);
+                }
+
+                @Override
+                public Activity getActivityContext() {
+                    return fragment.getActivity();
+                }
+            };
+        }
+
         /**
          * Constructor to be used for V1 serialization only, DO NOT CHANGE.
          */
@@ -1884,6 +1923,16 @@ public OpenRequest(Fragment fragment) {
             super(fragment);
         }
 
+        /**
+         * Constructs an OpenRequest.
+         *
+         * @param fragment the Fragment to use to open the Session
+         */
+        @TargetApi(11)
+        public OpenRequest(android.app.Fragment fragment) {
+            super(fragment);
+        }
+
         /**
          * Sets the StatusCallback for the OpenRequest.
          *
@@ -1989,6 +2038,18 @@ public NewPermissionsRequest(Fragment fragment, List<String> permissions) {
             setPermissions(permissions);
         }
 
+        /**
+         * Constructs a NewPermissionsRequest.
+         *
+         * @param fragment    the Fragment used to issue the request
+         * @param permissions additional permissions to request
+         */
+        @TargetApi(11)
+        public NewPermissionsRequest(android.app.Fragment fragment, List<String> permissions) {
+            super(fragment);
+            setPermissions(permissions);
+        }
+
         /**
          * Constructs a NewPermissionsRequest.
          *
@@ -2011,6 +2072,18 @@ public NewPermissionsRequest(Fragment fragment, String... permissions) {
             setPermissions(permissions);
         }
 
+        /**
+         * Constructs a NewPermissionsRequest.
+         *
+         * @param fragment    the Fragment used to issue the request
+         * @param permissions additional permissions to request
+         */
+        @TargetApi(11)
+        public NewPermissionsRequest(android.app.Fragment fragment, String... permissions) {
+            super(fragment);
+            setPermissions(permissions);
+        }
+
         /**
          * Sets the StatusCallback for the NewPermissionsRequest. Note that once the request is made, this callback
          * will be added to the session, and will receive all future state changes on the session.
diff --git a/facebook/src/com/facebook/widget/FacebookDialog.java b/facebook/src/com/facebook/widget/FacebookDialog.java
index 058a9f145..f5dbb4d9b 100644
--- a/facebook/src/com/facebook/widget/FacebookDialog.java
+++ b/facebook/src/com/facebook/widget/FacebookDialog.java
@@ -180,12 +180,14 @@ public static String getNativeDialogPostId(Bundle result) {
 
     private Activity activity;
     private Fragment fragment;
+    private Object nativeFragment;
     private PendingCall appCall;
     private OnPresentCallback onPresentCallback;
 
-    private FacebookDialog(Activity activity, Fragment fragment, PendingCall appCall, OnPresentCallback onPresentCallback) {
+    private FacebookDialog(Activity activity, Fragment fragment, Object nativeFragment, PendingCall appCall, OnPresentCallback onPresentCallback) {
         this.activity = activity;
         this.fragment = fragment;
+        this.nativeFragment = nativeFragment;
         this.appCall = appCall;
         this.onPresentCallback = onPresentCallback;
     }
@@ -209,6 +211,8 @@ public PendingCall present() {
 
         if (fragment != null) {
             fragment.startActivityForResult(appCall.getRequestIntent(), appCall.getRequestCode());
+        } else if (nativeFragment != null) {
+            ((android.app.Fragment)nativeFragment).startActivityForResult(appCall.getRequestIntent(), appCall.getRequestCode());
         } else {
             activity.startActivityForResult(appCall.getRequestIntent(), appCall.getRequestCode());
         }
@@ -307,6 +311,7 @@ private static int getMinVersionForFeatures(Iterable<? extends DialogFeature> fe
         final protected String applicationId;
         final protected PendingCall appCall;
         protected Fragment fragment;
+        protected Object nativeFragment;
         protected String applicationName;
 
         Builder(Activity activity) {
@@ -358,6 +363,21 @@ public CONCRETE setFragment(Fragment fragment) {
             return result;
         }
 
+        /**
+         * Sets the fragment that should launch the dialog. This allows the dialog to be
+         * launched from a Fragment, and will allow the fragment to receive the
+         * {@link Fragment#onActivityResult(int, int, android.content.Intent) onActivityResult}
+         * call rather than the Activity.
+         *
+         * @param fragment the fragment that contains this control
+         */
+        public CONCRETE setFragment(android.app.Fragment fragment) {
+            this.nativeFragment = fragment;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
         /**
          * Constructs a FacebookDialog with an Intent that is correctly populated to present the dialog within
          * the Facebook application.
@@ -376,7 +396,7 @@ public FacebookDialog build() {
             }
             appCall.setRequestIntent(intent);
 
-            return new FacebookDialog(activity, fragment, appCall, getOnPresentCallback());
+            return new FacebookDialog(activity, fragment, nativeFragment, appCall, getOnPresentCallback());
         }
 
         /**
diff --git a/facebook/src/com/facebook/widget/LoginButton.java b/facebook/src/com/facebook/widget/LoginButton.java
index ce67f6955..b2b5be917 100644
--- a/facebook/src/com/facebook/widget/LoginButton.java
+++ b/facebook/src/com/facebook/widget/LoginButton.java
@@ -67,6 +67,7 @@
     private String logoutText;
     private UserInfoChangedCallback userInfoChangedCallback;
     private Fragment parentFragment;
+    private Object parentNativeFragment;
     private LoginButtonProperties properties = new LoginButtonProperties();
     private String loginLogoutEventName = AnalyticsEvents.EVENT_LOGIN_VIEW_USAGE;
 
@@ -547,6 +548,18 @@ public void setFragment(Fragment fragment) {
         parentFragment = fragment;
     }
 
+    /**
+     * Sets the fragment that contains this control. This allows the LoginButton to be
+     * embedded inside a Fragment, and will allow the fragment to receive the
+     * {@link Fragment#onActivityResult(int, int, android.content.Intent) onActivityResult}
+     * call rather than the Activity.
+     *
+     * @param fragment the fragment that contains this control
+     */
+    public void setFragment(android.app.Fragment fragment) {
+        parentNativeFragment = fragment;
+    }
+
     @Override
     protected void onAttachedToWindow() {
         super.onAttachedToWindow();
@@ -690,6 +703,8 @@ public void onClick(DialogInterface dialog, int which) {
                     Session.OpenRequest openRequest = null;
                     if (parentFragment != null) {
                         openRequest = new Session.OpenRequest(parentFragment);
+                    } else if (parentNativeFragment != null) {
+                        openRequest = new Session.OpenRequest((android.app.Fragment)parentNativeFragment);
                     } else if (context instanceof Activity) {
                         openRequest = new Session.OpenRequest((Activity)context);
                     }
