diff --git a/facebook-android-wrapper/AndroidManifest.xml b/facebook-android-wrapper/AndroidManifest.xml
new file mode 100644
index 000000000..1c455ec92
--- /dev/null
+++ b/facebook-android-wrapper/AndroidManifest.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+      package="com.facebook.android">
+    <application/>
+</manifest>
diff --git a/facebook-android-wrapper/build.gradle b/facebook-android-wrapper/build.gradle
new file mode 100644
index 000000000..a0d4ce340
--- /dev/null
+++ b/facebook-android-wrapper/build.gradle
@@ -0,0 +1,50 @@
+apply plugin: 'com.android.library'
+
+allprojects {
+    gradle.projectsEvaluated {
+        tasks.withType(JavaCompile) {
+            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
+        }
+    }
+}
+
+dependencies {
+    compile 'com.android.support:appcompat-v7:22.2.1'
+    compile fileTree(dir: 'libs', include: ['*.jar'])
+    compile project(':facebook')
+}
+
+android {
+//    compileSdkVersion 23
+//    buildToolsVersion '23.0.1'
+//
+//    defaultConfig {
+//        minSdkVersion 9
+//        targetSdkVersion 23
+//    }
+
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
+
+    defaultConfig {
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+    }
+
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_7
+        targetCompatibility JavaVersion.VERSION_1_7
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            resources.srcDirs = ['src']
+            aidl.srcDirs = ['src']
+            renderscript.srcDirs = ['src']
+            res.srcDirs = ['res']
+            assets.srcDirs = ['assets']
+        }
+    }
+}
diff --git a/facebook-android-wrapper/gradle/wrapper/gradle-wrapper.jar b/facebook-android-wrapper/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 000000000..b5166dad4
Binary files /dev/null and b/facebook-android-wrapper/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/facebook-android-wrapper/gradle/wrapper/gradle-wrapper.properties b/facebook-android-wrapper/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 000000000..40451d683
--- /dev/null
+++ b/facebook-android-wrapper/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Mon May 18 10:48:51 PDT 2015
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.6-all.zip
diff --git a/facebook-android-wrapper/src/com/facebook/unity/AppInviteDialogActivity.java b/facebook-android-wrapper/src/com/facebook/unity/AppInviteDialogActivity.java
new file mode 100644
index 000000000..e24788f83
--- /dev/null
+++ b/facebook-android-wrapper/src/com/facebook/unity/AppInviteDialogActivity.java
@@ -0,0 +1,74 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.unity;
+
+import android.os.Bundle;
+
+import com.facebook.FacebookCallback;
+import com.facebook.FacebookException;
+import com.facebook.share.model.AppInviteContent;
+import com.facebook.share.widget.AppInviteDialog;
+
+public class AppInviteDialogActivity extends BaseActivity {
+    public static final String DIALOG_PARAMS = "dialog_params";
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        final UnityMessage response = new UnityMessage("OnAppInviteComplete");
+        Bundle params = getIntent().getBundleExtra(DIALOG_PARAMS);
+
+        AppInviteContent.Builder contentBuilder = new AppInviteContent.Builder();
+        if (params.containsKey(Constants.CALLBACK_ID_KEY)) {
+            response.put(Constants.CALLBACK_ID_KEY, params.getString(Constants.CALLBACK_ID_KEY));
+        }
+
+        if (params.containsKey("appLinkUrl")) {
+            contentBuilder.setApplinkUrl(params.getString("appLinkUrl"));
+        }
+
+        if (params.containsKey("previewImageUrl")) {
+            contentBuilder.setPreviewImageUrl(params.getString("previewImageUrl"));
+        }
+
+        AppInviteDialog dialog = new AppInviteDialog(this);
+        dialog.registerCallback(this.mCallbackManager, new FacebookCallback<AppInviteDialog.Result>() {
+            @Override
+            public void onSuccess(AppInviteDialog.Result result) {
+                response.put("didComplete", true);
+                response.send();
+            }
+
+            @Override
+            public void onCancel() {
+                response.putCancelled();
+                response.send();
+            }
+
+            @Override
+            public void onError(FacebookException e) {
+                response.sendError(e.getMessage());
+            }
+        });
+        dialog.show(contentBuilder.build());
+    }
+}
diff --git a/facebook-android-wrapper/src/com/facebook/unity/BaseActivity.java b/facebook-android-wrapper/src/com/facebook/unity/BaseActivity.java
new file mode 100644
index 000000000..a4a2da809
--- /dev/null
+++ b/facebook-android-wrapper/src/com/facebook/unity/BaseActivity.java
@@ -0,0 +1,54 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.unity;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+
+import com.facebook.CallbackManager;
+import com.facebook.FacebookSdk;
+
+public abstract class BaseActivity extends Activity {
+    public static final String ACTIVITY_PARAMS = "activity_params";
+    protected CallbackManager mCallbackManager;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        mCallbackManager = CallbackManager.Factory.create();
+
+        // During a share or other activity switch this activity may be destroyed.
+        // The UnityActivity will also get killed and the developers game will need to restart and
+        // the callback won't be registered. But to avoid throwing an exception initialize the sdk
+        // to allow the callback to complete.
+        if (!FacebookSdk.isInitialized()) {
+            FacebookSdk.sdkInitialize(getApplicationContext());
+        }
+    }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        mCallbackManager.onActivityResult(requestCode, resultCode, data);
+        finish();
+    }
+}
diff --git a/facebook-android-wrapper/src/com/facebook/unity/Constants.java b/facebook-android-wrapper/src/com/facebook/unity/Constants.java
new file mode 100644
index 000000000..70dbaa052
--- /dev/null
+++ b/facebook-android-wrapper/src/com/facebook/unity/Constants.java
@@ -0,0 +1,25 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.unity;
+
+public class Constants {
+    public static final String CALLBACK_ID_KEY = "callback_id";
+}
diff --git a/facebook-android-wrapper/src/com/facebook/unity/FB.java b/facebook-android-wrapper/src/com/facebook/unity/FB.java
new file mode 100644
index 000000000..181a77f96
--- /dev/null
+++ b/facebook-android-wrapper/src/com/facebook/unity/FB.java
@@ -0,0 +1,422 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.unity;
+
+import java.math.BigDecimal;
+import java.util.*;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+
+import android.annotation.TargetApi;
+import android.content.Intent;
+import android.app.Activity;
+import android.os.Build;
+import android.os.Bundle;
+import android.util.Log;
+import android.util.Base64;
+import android.content.pm.*;
+import android.content.pm.PackageManager.NameNotFoundException;
+
+import com.facebook.*;
+import com.facebook.appevents.AppEventsLogger;
+import com.facebook.applinks.AppLinkData;
+import com.facebook.internal.BundleJSONConverter;
+import com.facebook.internal.Utility;
+import com.facebook.internal.InternalSettings;
+import com.facebook.login.LoginManager;
+import com.facebook.share.widget.ShareDialog;
+
+import org.json.JSONException;
+
+public class FB {
+    static final String TAG = FB.class.getName();
+    // i.e. the game object that receives this message
+    static final String FB_UNITY_OBJECT = "UnityFacebookSDKPlugin";
+    private static Intent intent;
+    private static AppEventsLogger appEventsLogger;
+    static ShareDialog.Mode ShareDialogMode = ShareDialog.Mode.AUTOMATIC;
+
+    private static AppEventsLogger getAppEventsLogger() {
+        if (appEventsLogger == null) {
+            appEventsLogger = AppEventsLogger.newLogger(getUnityActivity().getApplicationContext());
+        }
+        return appEventsLogger;
+    }
+
+    public static Activity getUnityActivity() {
+        return UnityReflection.GetUnityActivity();
+    }
+
+    @UnityCallable
+    public static void Init(String params_str) {
+        Log.v(TAG, "Init(" + params_str + ")");
+        UnityParams unity_params = UnityParams.parse(params_str, "couldn't parse init params: "+params_str);
+        String appID;
+        if (unity_params.hasString("appId")) {
+            appID = unity_params.getString("appId");
+        } else {
+            appID = Utility.getMetadataApplicationId(getUnityActivity());
+        }
+
+        FacebookSdk.setApplicationId(appID);
+        FacebookSdk.sdkInitialize(FB.getUnityActivity(), new FacebookSdk.InitializeCallback() {
+            @Override
+            public void onInitialized() {
+                final UnityMessage unityMessage = new UnityMessage("OnInitComplete");
+                // If we have a cached access token send it back as well
+                AccessToken token = AccessToken.getCurrentAccessToken();
+                if (token != null) {
+                    FBLogin.addLoginParametersToMessage(unityMessage, token, null);
+                } else {
+                    unityMessage.put("key_hash", FB.getKeyHash());
+                }
+
+                unityMessage.send();
+            }
+        });
+    }
+
+    @UnityCallable
+    public static void LoginWithReadPermissions(String params_str) {
+        Log.v(TAG, "LoginWithReadPermissions(" + params_str + ")");
+        Intent intent = new Intent(getUnityActivity(), FBUnityLoginActivity.class);
+        intent.putExtra(FBUnityLoginActivity.LOGIN_PARAMS, params_str);
+        intent.putExtra(FBUnityLoginActivity.LOGIN_TYPE, FBUnityLoginActivity.LoginType.READ);
+        getUnityActivity().startActivity(intent);
+    }
+
+    @UnityCallable
+    public static void LoginWithPublishPermissions(String params_str) {
+        Log.v(TAG, "LoginWithPublishPermissions(" + params_str + ")");
+        Intent intent = new Intent(getUnityActivity(), FBUnityLoginActivity.class);
+        intent.putExtra(FBUnityLoginActivity.LOGIN_PARAMS, params_str);
+        intent.putExtra(FBUnityLoginActivity.LOGIN_TYPE, FBUnityLoginActivity.LoginType.PUBLISH);
+        getUnityActivity().startActivity(intent);
+    }
+
+    @UnityCallable
+    public static void Logout(String params_str) {
+        Log.v(TAG, "Logout(" + params_str + ")");
+        LoginManager.getInstance().logOut();
+        UnityMessage message = new UnityMessage("OnLogoutComplete");
+        message.put("did_complete", true);
+        message.send();
+    }
+
+    @UnityCallable
+    public static void AppRequest(String params_str) {
+        Log.v(TAG, "AppRequest(" + params_str + ")");
+        Intent intent = new Intent(getUnityActivity(), FBUnityGameRequestActivity.class);
+        UnityParams unity_params = UnityParams.parse(params_str);
+        Bundle params = unity_params.getStringParams();
+        intent.putExtra(FBUnityGameRequestActivity.GAME_REQUEST_PARAMS, params);
+        getUnityActivity().startActivity(intent);
+    }
+
+    @UnityCallable
+    public static void GameGroupCreate(String params_str) {
+        Log.v(TAG, "GameGroupCreate(" + params_str + ")");
+        final UnityParams unity_params = UnityParams.parse(params_str);
+        final Bundle params = unity_params.getStringParams();
+        Intent intent = new Intent(getUnityActivity(), FBUnityCreateGameGroupActivity.class);
+        intent.putExtra(FBUnityCreateGameGroupActivity.CREATE_GAME_GROUP_PARAMS, params);
+        getUnityActivity().startActivity(intent);
+    }
+
+    @UnityCallable
+    public static void GameGroupJoin(String params_str) {
+        Log.v(TAG, "GameGroupJoin(" + params_str + ")");
+        final UnityParams unity_params = UnityParams.parse(params_str);
+        final Bundle params = unity_params.getStringParams();
+        Intent intent = new Intent(getUnityActivity(), FBUnityJoinGameGroupActivity.class);
+        intent.putExtra(FBUnityJoinGameGroupActivity.JOIN_GAME_GROUP_PARAMS, params);
+        getUnityActivity().startActivity(intent);
+    }
+
+    @UnityCallable
+    public static void ShareLink(String params_str) {
+        Log.v(TAG, "ShareLink(" + params_str + ")");
+        final UnityParams unity_params = UnityParams.parse(params_str);
+        final Bundle params = unity_params.getStringParams();
+        Intent intent = new Intent(getUnityActivity(), FBUnityDialogsActivity.class);
+        intent.putExtra(FBUnityDialogsActivity.DIALOG_TYPE, ShareDialogMode);
+        intent.putExtra(FBUnityDialogsActivity.SHARE_DIALOG_PARAMS, params);
+        getUnityActivity().startActivity(intent);
+    }
+
+    @UnityCallable
+    public static void FeedShare(String params_str) {
+        Log.v(TAG, "FeedShare(" + params_str + ")");
+        final UnityParams unityParams = UnityParams.parse(params_str);
+        final Bundle params = unityParams.getStringParams();
+        Intent intent = new Intent(getUnityActivity(), FBUnityDialogsActivity.class);
+        intent.putExtra(FBUnityDialogsActivity.DIALOG_TYPE, ShareDialog.Mode.FEED);
+        intent.putExtra(FBUnityDialogsActivity.FEED_DIALOG_PARAMS, params);
+        getUnityActivity().startActivity(intent);
+    }
+
+    @UnityCallable
+    public static void PublishInstall(String params_str) {
+        Log.v(TAG, "PublishInstall(" + params_str + ")");
+        final UnityMessage unityMessage = new UnityMessage("OnPublishInstallComplete");
+        final UnityParams unity_params = UnityParams.parse(params_str);
+        if (unity_params.hasString(Constants.CALLBACK_ID_KEY)) {
+            unityMessage.put(
+                    Constants.CALLBACK_ID_KEY,
+                    unity_params.getString(Constants.CALLBACK_ID_KEY));
+        }
+        AppEventsLogger.activateApp(getUnityActivity().getApplicationContext());
+        unityMessage.send();
+    }
+
+    @UnityCallable
+    public static void ActivateApp(String params_str) {
+        Log.v(TAG, "ActivateApp(" + params_str + ")");
+        final UnityParams unity_params = UnityParams.parse(params_str);
+        if (unity_params.hasString("app_id")) {
+            AppEventsLogger.activateApp(
+                    getUnityActivity().getApplicationContext(),
+                    unity_params.getString("app_id"));
+        } else {
+            AppEventsLogger.activateApp(getUnityActivity().getApplicationContext());
+        }
+    }
+
+    public static void SetIntent(Intent intent) {
+        FB.intent = intent;
+    }
+
+    public static void SetLimitEventUsage(String params_str) {
+        Log.v(TAG, "SetLimitEventUsage(" + params_str + ")");
+        FacebookSdk.setLimitEventAndDataUsage(
+                getUnityActivity().getApplicationContext(),
+                Boolean.valueOf(params_str));
+    }
+
+    @UnityCallable
+    public static void LogAppEvent(String params_str) {
+        Log.v(TAG, "LogAppEvent(" + params_str + ")");
+        UnityParams unity_params = UnityParams.parse(params_str);
+
+        Bundle parameters = new Bundle();
+        if (unity_params.has("parameters")) {
+            UnityParams unity_params_parameter = unity_params.getParamsObject("parameters");
+            parameters = unity_params_parameter.getStringParams();
+        }
+
+        if (unity_params.has("logPurchase")) {
+            FB.getAppEventsLogger().logPurchase(
+                    new BigDecimal(unity_params.getDouble("logPurchase")),
+                    Currency.getInstance(unity_params.getString("currency")),
+                    parameters
+            );
+        } else if (unity_params.hasString("logEvent")) {
+            if (unity_params.has("valueToSum")) {
+                FB.getAppEventsLogger().logEvent(
+                        unity_params.getString("logEvent"),
+                        unity_params.getDouble("valueToSum"),
+                        parameters
+                );
+            } else {
+                FB.getAppEventsLogger().logEvent(
+                        unity_params.getString("logEvent"),
+                        parameters
+                );
+            }
+        } else {
+            Log.e(TAG, "couldn't logPurchase or logEvent params: " + params_str);
+        }
+    }
+
+    @UnityCallable
+    public static void SetShareDialogMode(String mode) {
+        Log.v(TAG, "SetShareDialogMode(" + mode + ")");
+        if (mode.equalsIgnoreCase("NATIVE")) {
+            ShareDialogMode = ShareDialog.Mode.NATIVE;
+        } else if (mode.equalsIgnoreCase("WEB")) {
+            ShareDialogMode = ShareDialog.Mode.WEB;
+        } else if (mode.equalsIgnoreCase(("FEED"))) {
+            ShareDialogMode = ShareDialog.Mode.FEED;
+        } else {
+            ShareDialogMode = ShareDialog.Mode.AUTOMATIC;
+        }
+    }
+
+    @UnityCallable
+    public static String GetSdkVersion() {
+        return FacebookSdk.getSdkVersion();
+    }
+
+    @UnityCallable
+    public static void SetUserAgentSuffix(String suffix) {
+        Log.v(TAG, "SetUserAgentSuffix(" + suffix + ")");
+        InternalSettings.setCustomUserAgent(suffix);
+    }
+
+    @UnityCallable
+    public static void AppInvite(String paramsStr) {
+        Log.v(TAG, "AppInvite(" + paramsStr + ")");
+        Intent intent = new Intent(getUnityActivity(), AppInviteDialogActivity.class);
+        UnityParams unityParams = UnityParams.parse(paramsStr);
+        Bundle params = unityParams.getStringParams();
+        intent.putExtra(AppInviteDialogActivity.DIALOG_PARAMS, params);
+        getUnityActivity().startActivity(intent);
+    }
+
+    @UnityCallable
+    public static void FetchDeferredAppLinkData(String paramsStr) {
+        FB.LogMethodCall("FetchDeferredAppLinkData", paramsStr);
+
+        UnityParams unityParams = UnityParams.parse(paramsStr);
+        final UnityMessage unityMessage = new UnityMessage("OnFetchDeferredAppLinkComplete");
+        if (unityParams.hasString("callback_id")) {
+            unityMessage.put("callback_id", unityParams.getString("callback_id"));
+        }
+
+        AppLinkData.fetchDeferredAppLinkData(
+                getUnityActivity(),
+                new AppLinkData.CompletionHandler() {
+                    @Override
+                    public void onDeferredAppLinkDataFetched(AppLinkData appLinkData) {
+                        FB.addAppLinkToMessage(unityMessage, appLinkData);
+                        unityMessage.send();
+                    }
+                });
+    }
+
+    @UnityCallable
+    public static void GetAppLink(String paramsStr) {
+        Log.v(TAG, "GetAppLink(" + paramsStr + ")");
+        final UnityParams unityParams = UnityParams.parse(paramsStr);
+        UnityMessage unityMessage = UnityMessage.createWithCallbackFromParams(
+                "OnGetAppLinkComplete",
+                unityParams);
+
+        // If we don't have an intent return
+        if (intent == null)
+        {
+            unityMessage.put("did_complete", true);
+            unityMessage.send();
+            return;
+        }
+
+        // Check to see if we have any app link data on the intent
+        AppLinkData appLinkData = AppLinkData.createFromAlApplinkData(intent);
+        if (appLinkData != null) {
+            // We have an app link
+            FB.addAppLinkToMessage(unityMessage, appLinkData);
+        } else if (intent.getData() != null) {
+            // We have a deep link
+            unityMessage.put("url", intent.getDataString());
+        } else {
+            // No deep link or app link was provided when activity was started
+            unityMessage.put("did_complete", true);
+        }
+
+        unityMessage.send();
+    }
+
+    @UnityCallable
+    public static void RefreshCurrentAccessToken(String paramsStr) {
+        FB.LogMethodCall("RefreshCurrentAccessToken", paramsStr);
+
+        UnityParams unityParams = UnityParams.parse(paramsStr);
+        final UnityMessage unityMessage = new UnityMessage("OnRefreshCurrentAccessTokenComplete");
+        if (unityParams.hasString("callback_id")) {
+            unityMessage.put("callback_id", unityParams.getString("callback_id"));
+        }
+
+        AccessToken.refreshCurrentAccessTokenAsync(new AccessToken.AccessTokenRefreshCallback() {
+            @Override
+            public void OnTokenRefreshed(AccessToken accessToken) {
+                FBLogin.addLoginParametersToMessage(unityMessage, accessToken, null);
+                unityMessage.send();
+            }
+
+            @Override
+            public void OnTokenRefreshFailed(FacebookException e) {
+                unityMessage.sendError(e.getMessage());
+            }
+        });
+
+        AppLinkData.fetchDeferredAppLinkData(
+                getUnityActivity(),
+                new AppLinkData.CompletionHandler() {
+                    @Override
+                    public void onDeferredAppLinkDataFetched(AppLinkData appLinkData) {
+                        FB.addAppLinkToMessage(unityMessage, appLinkData);
+                        unityMessage.send();
+                    }
+                });
+    }
+
+    /**
+     * Provides the key hash to solve the openSSL issue with Amazon
+     * @return key hash
+     */
+    @TargetApi(Build.VERSION_CODES.FROYO)
+    public static String getKeyHash() {
+        try {
+            PackageInfo info = getUnityActivity().getPackageManager().getPackageInfo(
+                getUnityActivity().getPackageName(), PackageManager.GET_SIGNATURES);
+            for (Signature signature : info.signatures){
+                MessageDigest md = MessageDigest.getInstance("SHA");
+                md.update(signature.toByteArray());
+                String keyHash = Base64.encodeToString(md.digest(), Base64.DEFAULT);
+                Log.d(TAG, "KeyHash: " + keyHash);
+                return keyHash;
+            }
+        } catch (NameNotFoundException e) {
+        } catch (NoSuchAlgorithmException e) {
+        }
+        return "";
+    }
+
+    private static void startActivity(Class<?> cls, String paramsStr) {
+        Intent intent = new Intent(getUnityActivity(), cls);
+        UnityParams unityParams = UnityParams.parse(paramsStr);
+        Bundle params = unityParams.getStringParams();
+        intent.putExtra(BaseActivity.ACTIVITY_PARAMS, params);
+        getUnityActivity().startActivity(intent);
+    }
+
+    private static void LogMethodCall(String methodName, String paramsStr) {
+        Log.v(TAG, String.format(Locale.ROOT, "%s(%s)", methodName, paramsStr));
+    }
+
+    private static void addAppLinkToMessage(UnityMessage unityMessage, AppLinkData appLinkData) {
+        if (appLinkData == null) {
+            unityMessage.put("did_complete", true);
+            return;
+        }
+
+        unityMessage.put("ref", appLinkData.getRef());
+        unityMessage.put("target_url", appLinkData.getTargetUri().toString());
+        try {
+            if (appLinkData.getArgumentBundle() != null) {
+                unityMessage.put("extras", BundleJSONConverter.convertToJSON(
+                        appLinkData.getArgumentBundle()).toString());
+            }
+        } catch (JSONException ex) {
+            Log.e(TAG, ex.getLocalizedMessage());
+        }
+    }
+}
diff --git a/facebook-android-wrapper/src/com/facebook/unity/FBDialogUtils.java b/facebook-android-wrapper/src/com/facebook/unity/FBDialogUtils.java
new file mode 100644
index 000000000..46c206f0f
--- /dev/null
+++ b/facebook-android-wrapper/src/com/facebook/unity/FBDialogUtils.java
@@ -0,0 +1,101 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.unity;
+
+import com.facebook.share.internal.ShareFeedContent;
+import com.facebook.share.model.ShareLinkContent;
+import com.facebook.share.widget.ShareDialog;
+
+import android.net.Uri;
+import android.os.Bundle;
+
+class FBDialogUtils {
+    public static ShareLinkContent.Builder createShareContentBuilder(Bundle params) {
+        ShareLinkContent.Builder  builder = new ShareLinkContent.Builder();
+
+        if (params.containsKey("content_title")) {
+            builder.setContentTitle(params.getString("content_title"));
+        }
+
+        if (params.containsKey("content_description")) {
+            builder.setContentDescription(params.getString("content_description"));
+        }
+
+        if (params.containsKey("content_url")) {
+            builder.setContentUrl(Uri.parse(params.getString("content_url")));
+        }
+
+        if (params.containsKey("photo_url")) {
+            builder.setImageUrl(Uri.parse(params.getString("photo_url")));
+        }
+
+        return builder;
+    }
+
+    public static ShareFeedContent.Builder createFeedContentBuilder(Bundle params) {
+        ShareFeedContent.Builder builder = new ShareFeedContent.Builder();
+
+        if (params.containsKey("toId")) {
+            builder.setToId(params.getString("toId"));
+        }
+
+        if (params.containsKey("link")) {
+            builder.setLink(params.getString("link"));
+        }
+
+        if (params.containsKey("linkName")) {
+            builder.setLinkName(params.getString("linkName"));
+        }
+
+        if (params.containsKey("linkCaption")) {
+            builder.setLinkCaption(params.getString("linkCaption"));
+        }
+
+        if (params.containsKey("linkDescription")) {
+            builder.setLinkDescription(params.getString("linkDescription"));
+        }
+
+        if (params.containsKey("picture")) {
+            builder.setPicture(params.getString("picture"));
+        }
+
+        if (params.containsKey("mediaSource")) {
+            builder.setMediaSource(params.getString("mediaSource"));
+        }
+
+        return builder;
+    }
+
+    public static ShareDialog.Mode intToMode(int mode) {
+        switch (mode) {
+            case 0:
+                return ShareDialog.Mode.AUTOMATIC;
+            case 1:
+                return ShareDialog.Mode.NATIVE;
+            case 2:
+                return ShareDialog.Mode.WEB;
+            case 3:
+                return ShareDialog.Mode.FEED;
+            default:
+                return null;
+        }
+    }
+}
diff --git a/facebook-android-wrapper/src/com/facebook/unity/FBLogin.java b/facebook-android-wrapper/src/com/facebook/unity/FBLogin.java
new file mode 100644
index 000000000..cb0bbb8e7
--- /dev/null
+++ b/facebook-android-wrapper/src/com/facebook/unity/FBLogin.java
@@ -0,0 +1,137 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.unity;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.facebook.AccessToken;
+import com.facebook.FacebookCallback;
+import com.facebook.FacebookException;
+import com.facebook.FacebookSdk;
+import com.facebook.login.LoginBehavior;
+import com.facebook.login.LoginManager;
+import com.facebook.login.LoginResult;
+
+public class FBLogin {
+    public static void loginWithReadPermissions(
+            String params,
+            final FBUnityLoginActivity activity) {
+        login(params, activity, false);
+    }
+
+    public static void loginWithPublishPermissions(
+            String params,
+            final FBUnityLoginActivity activity) {
+        login(params, activity, true);
+    }
+
+    public static void sendLoginSuccessMessage(AccessToken token, String callbackID) {
+        UnityMessage unityMessage = new UnityMessage("OnLoginComplete");
+        FBLogin.addLoginParametersToMessage(unityMessage, token, callbackID);
+        unityMessage.send();
+    }
+
+    public static void addLoginParametersToMessage(
+            UnityMessage unityMessage,
+            AccessToken token,
+            String callbackID) {
+        unityMessage.put("key_hash", FB.getKeyHash());
+        unityMessage.put("opened", true);
+        unityMessage.put("access_token", token.getToken());
+        Long expiration = token.getExpires().getTime() / 1000;
+        unityMessage.put("expiration_timestamp", expiration.toString());
+        unityMessage.put("user_id", token.getUserId());
+        unityMessage.put("permissions",
+                TextUtils.join(",", token.getPermissions()));
+        unityMessage.put("declined_permissions",
+                TextUtils.join(",", token.getDeclinedPermissions()));
+
+        if (token.getLastRefresh() != null) {
+            Long lastRefresh = token.getLastRefresh().getTime() / 1000;
+            unityMessage.put("last_refresh", lastRefresh.toString());
+        }
+
+        if (callbackID != null && !callbackID.isEmpty()) {
+            unityMessage.put(Constants.CALLBACK_ID_KEY, callbackID);
+        }
+    }
+
+    private static void login(
+            String params,
+            final FBUnityLoginActivity activity,
+            boolean isPublishPermLogin) {
+        if (!FacebookSdk.isInitialized()) {
+            Log.w(FB.TAG, "Facebook SDK not initialized. Call init() before calling login()");
+            return;
+        }
+
+        final UnityMessage unityMessage = new UnityMessage("OnLoginComplete");
+        unityMessage.put("key_hash", FB.getKeyHash());
+        UnityParams unity_params = UnityParams.parse(params,
+                "couldn't parse login params: " + params);
+
+        List<String> permissions = null;
+        if (unity_params.hasString("scope")) {
+            permissions = new ArrayList<>(
+                    Arrays.asList(unity_params.getString("scope").split(",")));
+        }
+
+        String callbackIDString = null;
+        if (unity_params.has(Constants.CALLBACK_ID_KEY)) {
+            callbackIDString = unity_params.getString(Constants.CALLBACK_ID_KEY);
+            unityMessage.put(Constants.CALLBACK_ID_KEY, callbackIDString);
+        }
+
+        final String callbackID = callbackIDString;
+
+        // For now only web login
+        LoginManager.getInstance().registerCallback(
+                activity.getCallbackManager(),
+                new FacebookCallback<LoginResult>() {
+                    @Override
+                    public void onSuccess(LoginResult loginResult) {
+                        sendLoginSuccessMessage(loginResult.getAccessToken(), callbackID);
+                    }
+
+                    @Override
+                    public void onCancel() {
+                        unityMessage.putCancelled();
+                        unityMessage.send();
+                    }
+
+                    @Override
+                    public void onError(FacebookException e) {
+                        unityMessage.sendError(e.getMessage());
+                    }
+                });
+
+        if (isPublishPermLogin) {
+            LoginManager.getInstance().logInWithPublishPermissions(activity, permissions);
+        } else {
+            LoginManager.getInstance().logInWithReadPermissions(activity, permissions);
+        }
+    }
+}
diff --git a/facebook-android-wrapper/src/com/facebook/unity/FBUnityAppLinkActivity.java b/facebook-android-wrapper/src/com/facebook/unity/FBUnityAppLinkActivity.java
new file mode 100644
index 000000000..73e08d569
--- /dev/null
+++ b/facebook-android-wrapper/src/com/facebook/unity/FBUnityAppLinkActivity.java
@@ -0,0 +1,25 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.unity;
+
+public class FBUnityAppLinkActivity extends FBUnityAppLinkBaseActivity {
+
+}
diff --git a/facebook-android-wrapper/src/com/facebook/unity/FBUnityAppLinkBaseActivity.java b/facebook-android-wrapper/src/com/facebook/unity/FBUnityAppLinkBaseActivity.java
new file mode 100644
index 000000000..77b53c16e
--- /dev/null
+++ b/facebook-android-wrapper/src/com/facebook/unity/FBUnityAppLinkBaseActivity.java
@@ -0,0 +1,55 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.unity;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.Window;
+
+public abstract class FBUnityAppLinkBaseActivity extends Activity{
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        requestWindowFeature(Window.FEATURE_NO_TITLE);
+
+        Log.v(FB.TAG, "Saving deep link from deep linking activity");
+        FB.SetIntent(this.getIntent());
+
+        Log.v(FB.TAG, "Returning to main activity");
+        //start main activity
+        Intent newIntent = new Intent(this, getMainActivityClass());
+        this.startActivity(newIntent);
+        finish();
+    }
+
+    private Class<?> getMainActivityClass() {
+        String packageName = this.getPackageName();
+        Intent launchIntent = this.getPackageManager().getLaunchIntentForPackage(packageName);
+        try {
+            return Class.forName(launchIntent.getComponent().getClassName());
+        } catch (Exception e) {
+            Log.e(FB.TAG, "Unable to find Main Activity Class");
+            return null;
+        }
+    }
+}
diff --git a/facebook-android-wrapper/src/com/facebook/unity/FBUnityCreateGameGroupActivity.java b/facebook-android-wrapper/src/com/facebook/unity/FBUnityCreateGameGroupActivity.java
new file mode 100644
index 000000000..c3291b496
--- /dev/null
+++ b/facebook-android-wrapper/src/com/facebook/unity/FBUnityCreateGameGroupActivity.java
@@ -0,0 +1,97 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.unity;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+
+import com.facebook.CallbackManager;
+import com.facebook.FacebookCallback;
+import com.facebook.FacebookException;
+import com.facebook.share.model.AppGroupCreationContent;
+import com.facebook.share.model.AppGroupCreationContent.AppGroupPrivacy;
+import com.facebook.share.widget.CreateAppGroupDialog;
+
+import java.util.Locale;
+
+public class FBUnityCreateGameGroupActivity extends BaseActivity {
+    public static String CREATE_GAME_GROUP_PARAMS = "create_game_group_params";
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        AppGroupCreationContent.Builder contentBuilder = new AppGroupCreationContent.Builder();
+        Bundle params = getIntent().getBundleExtra(CREATE_GAME_GROUP_PARAMS);
+        final UnityMessage response = new UnityMessage("OnGroupCreateComplete");
+        if (params.containsKey(Constants.CALLBACK_ID_KEY)) {
+            response.put(Constants.CALLBACK_ID_KEY, params.getString(Constants.CALLBACK_ID_KEY));
+        }
+
+        if (params.containsKey("name")) {
+            contentBuilder.setName(params.getString("name"));
+        }
+
+        if (params.containsKey("description")) {
+            contentBuilder.setDescription(params.getString("name"));
+        }
+
+        if (params.containsKey("privacy")) {
+            String privacyStr = params.getString("privacy");
+            AppGroupPrivacy privacy = AppGroupPrivacy.Closed;
+            if (privacyStr.equalsIgnoreCase("closed")) {
+                privacy = AppGroupPrivacy.Closed;
+            } else if (privacyStr.equalsIgnoreCase("open")) {
+                privacy = AppGroupPrivacy.Open;
+            } else {
+                response.sendError(
+                        String.format(
+                                Locale.ROOT,
+                                "Unknown privacy setting for group creation: %s",
+                                privacyStr));
+                finish();
+            }
+            contentBuilder.setAppGroupPrivacy(privacy);
+        }
+
+        CreateAppGroupDialog dialog = new CreateAppGroupDialog(this);
+        dialog.registerCallback(mCallbackManager, new FacebookCallback<CreateAppGroupDialog.Result>() {
+            @Override
+            public void onSuccess(CreateAppGroupDialog.Result result) {
+                response.put("id", result.getId());
+                response.send();
+            }
+
+            @Override
+            public void onCancel() {
+                response.putCancelled();
+                response.send();
+            }
+
+            @Override
+            public void onError(FacebookException e) {
+                response.sendError(e.getLocalizedMessage());
+            }
+        });
+        dialog.show(contentBuilder.build());
+    }
+}
diff --git a/facebook-android-wrapper/src/com/facebook/unity/FBUnityDeepLinkingActivity.java b/facebook-android-wrapper/src/com/facebook/unity/FBUnityDeepLinkingActivity.java
new file mode 100644
index 000000000..86e7c9713
--- /dev/null
+++ b/facebook-android-wrapper/src/com/facebook/unity/FBUnityDeepLinkingActivity.java
@@ -0,0 +1,24 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.unity;
+
+public class FBUnityDeepLinkingActivity extends FBUnityAppLinkBaseActivity {
+}
diff --git a/facebook-android-wrapper/src/com/facebook/unity/FBUnityDialogsActivity.java b/facebook-android-wrapper/src/com/facebook/unity/FBUnityDialogsActivity.java
new file mode 100644
index 000000000..6e83db605
--- /dev/null
+++ b/facebook-android-wrapper/src/com/facebook/unity/FBUnityDialogsActivity.java
@@ -0,0 +1,97 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.unity;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.util.Log;
+
+import com.facebook.FacebookCallback;
+import com.facebook.FacebookException;
+import com.facebook.share.Sharer;
+import com.facebook.share.model.ShareContent;
+import com.facebook.share.widget.ShareDialog;
+
+import java.util.Locale;
+
+public class FBUnityDialogsActivity extends BaseActivity {
+    private static String TAG = FBUnityDialogsActivity.class.getName();
+    public static final String DIALOG_TYPE = "dialog_type";
+    public static final String SHARE_DIALOG_PARAMS = "share_dialog_params";
+    public static final String FEED_DIALOG_PARAMS = "feed_dialog_params";
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        Intent intent = getIntent();
+        ShareContent shareContent;
+        Bundle params;
+        if (intent.hasExtra(SHARE_DIALOG_PARAMS)) {
+            params = intent.getBundleExtra(SHARE_DIALOG_PARAMS);
+            shareContent = FBDialogUtils.createShareContentBuilder(params).build();
+        } else if (intent.hasExtra(FEED_DIALOG_PARAMS)) {
+            params = intent.getBundleExtra(FEED_DIALOG_PARAMS);
+            shareContent = FBDialogUtils.createFeedContentBuilder(params).build();
+        } else {
+            Log.e(TAG,
+                    String.format(
+                            Locale.ROOT,
+                            "Failed to find extra %s or %s",
+                            SHARE_DIALOG_PARAMS,
+                            FEED_DIALOG_PARAMS));
+            finish();
+            return;
+        }
+
+        ShareDialog dialog = new ShareDialog(this);
+        final UnityMessage response = new UnityMessage("OnShareLinkComplete");
+        String callbackID = params.getString(Constants.CALLBACK_ID_KEY);
+        if (callbackID != null) {
+            response.put(Constants.CALLBACK_ID_KEY, callbackID);
+        }
+
+        dialog.registerCallback(mCallbackManager, new FacebookCallback<Sharer.Result>() {
+            @Override
+            public void onSuccess(Sharer.Result result) {
+                if (result.getPostId() != null) {
+                    response.putID(result.getPostId());
+                }
+                // Unity SDK requires to have at least one key beside callback_id.
+                response.put("posted", true);
+                response.send();
+            }
+
+            @Override
+            public void onCancel() {
+                response.putCancelled();
+                response.send();
+            }
+
+            @Override
+            public void onError(FacebookException e) {
+                response.sendError(e.getMessage());
+            }
+        });
+        ShareDialog.Mode mode = (ShareDialog.Mode) getIntent().getSerializableExtra(DIALOG_TYPE);
+        dialog.show(shareContent, mode);
+    }
+}
diff --git a/facebook-android-wrapper/src/com/facebook/unity/FBUnityGameRequestActivity.java b/facebook-android-wrapper/src/com/facebook/unity/FBUnityGameRequestActivity.java
new file mode 100644
index 000000000..c0e5d4ff3
--- /dev/null
+++ b/facebook-android-wrapper/src/com/facebook/unity/FBUnityGameRequestActivity.java
@@ -0,0 +1,121 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.unity;
+
+import android.os.Bundle;
+import android.text.TextUtils;
+
+import com.facebook.FacebookCallback;
+import com.facebook.FacebookException;
+import com.facebook.share.model.GameRequestContent;
+import com.facebook.share.widget.GameRequestDialog;
+
+import java.util.Arrays;
+import java.util.Locale;
+
+public class FBUnityGameRequestActivity extends BaseActivity {
+    public static final String GAME_REQUEST_PARAMS = "game_request_params";
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        Bundle params = getIntent().getBundleExtra(GAME_REQUEST_PARAMS);
+
+        final UnityMessage response = new UnityMessage("OnAppRequestsComplete");
+        if (params.containsKey(Constants.CALLBACK_ID_KEY)) {
+            response.put(Constants.CALLBACK_ID_KEY, params.getString(Constants.CALLBACK_ID_KEY));
+        }
+
+        GameRequestContent.Builder contentBuilder = new GameRequestContent.Builder();
+        if (params.containsKey("message")) {
+            contentBuilder.setMessage(params.getString("message"));
+        }
+
+        if (params.containsKey("action_type")) {
+            String actionTypeStr = params.getString("action_type");
+            try {
+                GameRequestContent.ActionType type =
+                        GameRequestContent.ActionType.valueOf(actionTypeStr);
+                contentBuilder.setActionType(type);
+            } catch (IllegalArgumentException exception) {
+                response.sendError("Unknown action type: " + actionTypeStr);
+                return;
+            }
+        }
+
+        if(params.containsKey("object_id")) {
+            contentBuilder.setObjectId(params.getString("object_id"));
+
+        }
+
+        if (params.containsKey("to")) {
+            String toStr = params.getString("to");
+            contentBuilder.setRecipients(Arrays.asList(toStr.split(",")));
+        }
+
+        if (params.containsKey("filters")) {
+            String filtersStr = params.getString("filters").toUpperCase(Locale.ROOT);
+            try {
+                GameRequestContent.Filters filters = GameRequestContent.Filters.valueOf(filtersStr);
+                contentBuilder.setFilters(filters);
+            } catch (IllegalArgumentException exception) {
+                response.sendError("Unsupported filter type: " + filtersStr);
+                return;
+            }
+        }
+
+        if (params.containsKey("data")) {
+            contentBuilder.setData(params.getString("data"));
+        }
+
+        if (params.containsKey("title")) {
+            contentBuilder.setTitle(params.getString("title"));
+        }
+
+        final GameRequestContent content = contentBuilder.build();
+
+
+        GameRequestDialog requestDialog = new GameRequestDialog(this);
+        requestDialog.registerCallback(
+                mCallbackManager,
+                new FacebookCallback<GameRequestDialog.Result>() {
+                    @Override
+                    public void onSuccess(GameRequestDialog.Result result) {
+                        response.put("request", result.getRequestId());
+                        response.put("to", TextUtils.join(",",result.getRequestRecipients()));
+                        response.send();
+                    }
+
+                    @Override
+                    public void onCancel() {
+                        response.putCancelled();
+                        response.send();
+                    }
+
+                    @Override
+                    public void onError(FacebookException e) {
+                        response.sendError(e.getMessage());
+                    }
+                });
+        requestDialog.show(content);
+    }
+}
diff --git a/facebook-android-wrapper/src/com/facebook/unity/FBUnityJoinGameGroupActivity.java b/facebook-android-wrapper/src/com/facebook/unity/FBUnityJoinGameGroupActivity.java
new file mode 100644
index 000000000..bdb3d5769
--- /dev/null
+++ b/facebook-android-wrapper/src/com/facebook/unity/FBUnityJoinGameGroupActivity.java
@@ -0,0 +1,68 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.unity;
+
+import android.os.Bundle;
+
+import com.facebook.FacebookCallback;
+import com.facebook.FacebookException;
+import com.facebook.share.widget.JoinAppGroupDialog;
+
+public class FBUnityJoinGameGroupActivity extends BaseActivity {
+    public static String JOIN_GAME_GROUP_PARAMS = "join_game_group_params";
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        Bundle params = getIntent().getBundleExtra(JOIN_GAME_GROUP_PARAMS);
+        final UnityMessage response = new UnityMessage("OnJoinGroupComplete");
+        if (params.containsKey(Constants.CALLBACK_ID_KEY)) {
+            response.put(Constants.CALLBACK_ID_KEY, params.getString(Constants.CALLBACK_ID_KEY));
+        }
+
+        String groupId = "";
+        if (params.containsKey("id")) {
+            groupId = params.getString("id");
+        }
+
+        JoinAppGroupDialog dialog = new JoinAppGroupDialog(this);
+        dialog.registerCallback(mCallbackManager, new FacebookCallback<JoinAppGroupDialog.Result>() {
+            @Override
+            public void onSuccess(JoinAppGroupDialog.Result result) {
+                response.put("didComplete", true);
+                response.send();
+            }
+
+            @Override
+            public void onCancel() {
+                response.putCancelled();
+                response.send();
+            }
+
+            @Override
+            public void onError(FacebookException e) {
+                response.sendError(e.getLocalizedMessage());
+            }
+        });
+        dialog.show(groupId);
+    }
+}
diff --git a/facebook-android-wrapper/src/com/facebook/unity/FBUnityLoginActivity.java b/facebook-android-wrapper/src/com/facebook/unity/FBUnityLoginActivity.java
new file mode 100644
index 000000000..0bf7ad8c2
--- /dev/null
+++ b/facebook-android-wrapper/src/com/facebook/unity/FBUnityLoginActivity.java
@@ -0,0 +1,57 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.unity;
+
+import com.facebook.CallbackManager;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+
+public class FBUnityLoginActivity extends BaseActivity {
+    public static final String LOGIN_PARAMS = "login_params";
+    public static final String LOGIN_TYPE = "login_type";
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        LoginType type = (LoginType) getIntent().getSerializableExtra(LOGIN_TYPE);
+        String loginParams = getIntent().getStringExtra(LOGIN_PARAMS);
+        switch (type) {
+            case READ:
+                FBLogin.loginWithReadPermissions(loginParams, this);
+                break;
+            case PUBLISH:
+                FBLogin.loginWithPublishPermissions(loginParams, this);
+                break;
+        }
+    }
+
+    public CallbackManager getCallbackManager() {
+        return mCallbackManager;
+    }
+
+    public enum LoginType {
+        READ,
+        PUBLISH
+    }
+
+}
diff --git a/facebook-android-wrapper/src/com/facebook/unity/UnityCallable.java b/facebook-android-wrapper/src/com/facebook/unity/UnityCallable.java
new file mode 100644
index 000000000..3b9b0b002
--- /dev/null
+++ b/facebook-android-wrapper/src/com/facebook/unity/UnityCallable.java
@@ -0,0 +1,29 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.unity;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Target;
+
+@Target({ElementType.METHOD})
+public @interface UnityCallable {
+
+}
diff --git a/facebook-android-wrapper/src/com/facebook/unity/UnityMessage.java b/facebook-android-wrapper/src/com/facebook/unity/UnityMessage.java
new file mode 100644
index 000000000..b1da638d8
--- /dev/null
+++ b/facebook-android-wrapper/src/com/facebook/unity/UnityMessage.java
@@ -0,0 +1,77 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.unity;
+
+import java.io.Serializable;
+import java.util.HashMap;
+import java.util.Map;
+import android.util.Log;
+
+public class UnityMessage {
+    private String methodName;
+    private Map<String, Serializable> params = new HashMap<String, Serializable>();
+
+    public UnityMessage(String methodName) {
+        this.methodName = methodName;
+    }
+
+    public UnityMessage put(String name, Serializable value) {
+        params.put(name, value);
+        return this;
+    }
+
+    public UnityMessage putCancelled() {
+        put("cancelled", true);
+        return this;
+    }
+
+    public UnityMessage putID(String id) {
+        put("id", id);
+        return this;
+    }
+
+    public void sendError(String errorMsg) {
+        this.put("error", errorMsg);
+        send();
+    }
+
+    public void send() {
+        assert methodName != null : "no method specified";
+        String message = new UnityParams(this.params).toString();
+        Log.v(FB.TAG, "sending to Unity " + this.methodName + "(" + message + ")");
+        try {
+            UnityReflection.SendMessage(FB.FB_UNITY_OBJECT, this.methodName, message);
+        } catch (UnsatisfiedLinkError e) {
+            Log.v(FB.TAG, "message not send, Unity not initialized");
+        }
+    }
+
+    public static UnityMessage createWithCallbackFromParams(
+            String methodName,
+            UnityParams params) {
+        UnityMessage unityMessage = new UnityMessage(methodName);
+        if (params.hasString("callback_id")) {
+            unityMessage.put("callback_id", params.getString("callback_id"));
+        }
+
+        return unityMessage;
+    }
+}
diff --git a/facebook-android-wrapper/src/com/facebook/unity/UnityParams.java b/facebook-android-wrapper/src/com/facebook/unity/UnityParams.java
new file mode 100644
index 000000000..e68c1d744
--- /dev/null
+++ b/facebook-android-wrapper/src/com/facebook/unity/UnityParams.java
@@ -0,0 +1,132 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.unity;
+
+import java.io.Serializable;
+import java.util.Iterator;
+import java.util.Map;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+import android.os.Bundle;
+import android.util.Log;
+
+/**
+ * Wrapping JSONObject object used to communicate with Unity, catch errors, share code in one place
+ */
+public class UnityParams {
+    JSONObject json;
+
+    public UnityParams(String s) throws JSONException {
+        json = new JSONObject(s);
+    }
+
+    public UnityParams(JSONObject obj) {
+        json = obj;
+    }
+
+    public UnityParams(Map<String, Serializable> map) {
+        json = new JSONObject(map);
+    }
+
+    /*
+     * Parse params, log error
+     */
+    public static UnityParams parse(String data, String msg) {
+        try {
+            return new UnityParams(data);
+        } catch (JSONException e) {
+            Log.e(FB.TAG, msg);
+        }
+        return null;
+    }
+
+    public static UnityParams parse(String data) {
+        return parse(data, "couldn't parse params: " + data);
+    }
+
+    public String getString(String key) {
+        try {
+            return json.getString(key);
+        } catch (JSONException e) {
+            Log.e(FB.TAG, "cannot get string " + key + " from " + this.toString());
+            return "";
+        }
+    }
+
+    public double getDouble(String key) {
+        try {
+            return json.getDouble(key);
+        } catch (JSONException e) {
+            Log.e(FB.TAG, "cannot get double " + key + " from " + this.toString());
+            return 0;
+        }
+    }
+
+    public UnityParams getParamsObject(String key) {
+        try {
+            return new UnityParams(json.getJSONObject(key));
+        } catch (JSONException e) {
+            Log.e(FB.TAG, "cannot get object " + key + " from " + this.toString());
+            return null;
+        }
+    }
+
+    public void put(String name, Object value) {
+        try {
+            json.put(name, value);
+        } catch (JSONException e) {
+            Log.e(FB.TAG, "couldn't add key " + name + " to " + this.toString());
+        }
+    }
+
+    public boolean has(String key) {
+        return json.has(key) && !json.isNull(key);
+    }
+
+    public Boolean hasString(String key) {
+        return this.has(key) && this.getString(key) != "";
+    }
+
+    /*
+     * Gets all the string keys from JSON object
+     */
+    public Bundle getStringParams() {
+        Bundle result = new Bundle();
+        Iterator<?> keys = json.keys();
+        while(keys.hasNext()) {
+            String key = (String)keys.next();
+            try {
+                String value = json.getString(key);
+                if (value != null) {
+                    result.putString(key, value);
+                }
+            } catch (JSONException e) {
+            }
+        }
+        return result;
+    }
+
+    public String toString() {
+        return json.toString();
+    }
+
+}
diff --git a/facebook-android-wrapper/src/com/facebook/unity/UnityReflection.java b/facebook-android-wrapper/src/com/facebook/unity/UnityReflection.java
new file mode 100644
index 000000000..f48e62ef7
--- /dev/null
+++ b/facebook-android-wrapper/src/com/facebook/unity/UnityReflection.java
@@ -0,0 +1,66 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.unity;
+
+import android.app.Activity;
+import android.util.Log;
+
+import java.lang.reflect.Method;
+
+/**
+ * This class is a hack. Currently we can't have both the interative console and this
+ * aar include the unity_classes.jar. Unity will fail to build due to the duplicate jar to
+ * get around this we use reflection instead.
+ */
+public class UnityReflection {
+    private static Class<?> unityPlayer;
+
+    public static void SendMessage(String unityObject, String unityMethod, String message) {
+        try {
+            if (unityPlayer == null) {
+                unityPlayer = Class.forName("com.unity3d.player.UnityPlayer");
+            }
+
+            Method method = unityPlayer.getMethod(
+                    "UnitySendMessage", String.class, String.class, String.class);
+            method.invoke(unityPlayer, unityObject, unityMethod, message);
+        } catch (Exception ex) {
+            Log.d("TODO", ex.toString());
+        }
+    }
+
+    public static Activity GetUnityActivity() {
+        try {
+            if (unityPlayer == null) {
+                unityPlayer = Class.forName("com.unity3d.player.UnityPlayer");
+            }
+
+            Activity activity = (Activity) unityPlayer.getField("currentActivity").get(null);
+            if (activity == null) {
+                Log.d(FB.TAG, "Current unity activity is null");
+            }
+            return activity;
+        } catch (Exception ex) {
+            Log.d(FB.TAG, ex.toString());
+            return null;
+        }
+    }
+}
diff --git a/gradle.properties b/gradle.properties
index 475b38ce6..575e77040 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,4 +1,4 @@
-ANDROID_BUILD_MIN_SDK_VERSION=15
+ANDROID_BUILD_MIN_SDK_VERSION=9
 ANDROID_BUILD_TARGET_SDK_VERSION=23
 ANDROID_BUILD_TOOLS_VERSION=23.0.1
 ANDROID_BUILD_SDK_VERSION=23
diff --git a/settings.gradle b/settings.gradle
index 9b8e32a98..17c5db4b5 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,14 +1,15 @@
 // Facebook SDK
 include ':facebook'
+include ':facebook-android-wrapper'
 
 // Samples
-include ':samples:HelloFacebookSample'
-include ':samples:Iconicus'
-include ':samples:RPSSample'
-include ':samples:MessengerSendSample'
-include ':samples:Scrumptious'
-include ':samples:SwitchUserSample'
-include ':samples:ShareIt'
+//include ':samples:HelloFacebookSample'
+//include ':samples:Iconicus'
+//include ':samples:RPSSample'
+//include ':samples:MessengerSendSample'
+//include ':samples:Scrumptious'
+//include ':samples:SwitchUserSample'
+//include ':samples:ShareIt'
 
 if (file('internal/internal-settings.gradle').exists()) {
   apply from: 'internal/internal-settings.gradle'
