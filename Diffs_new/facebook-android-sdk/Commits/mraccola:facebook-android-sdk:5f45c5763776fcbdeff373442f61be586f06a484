diff --git a/facebook/src/com/facebook/LoginActivity.java b/facebook/src/com/facebook/LoginActivity.java
index 26e769a88..881a7ac3f 100644
--- a/facebook/src/com/facebook/LoginActivity.java
+++ b/facebook/src/com/facebook/LoginActivity.java
@@ -16,10 +16,16 @@
 
 package com.facebook;
 
+import java.util.PriorityQueue;
+import java.util.Queue;
+
 import android.app.Activity;
 import android.content.Intent;
+import android.content.pm.PackageManager;
 import android.os.Bundle;
 import android.view.View;
+
+import com.facebook.LoginActivity.Tracker.Callback;
 import com.facebook.android.R;
 
 /**
@@ -36,7 +42,11 @@
  * Do not start this activity directly.
  */
 public class LoginActivity extends Activity {
-    static final String RESULT_KEY = "com.facebook.LoginActivity:Result";
+	private static final int THRESHOLD_MS = 1000 * 5;
+	private static final int THRESHOLD_COUNT = 10;
+	private static Tracker tracker = new Tracker(THRESHOLD_MS, THRESHOLD_COUNT);
+
+	static final String RESULT_KEY = "com.facebook.LoginActivity:Result";
 
     private static final String NULL_CALLING_PKG_ERROR_MSG =
             "Cannot call LoginActivity with a null calling package. " +
@@ -51,7 +61,16 @@
 
     @Override
     public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
+		tracker.track(new Callback() {
+
+			@Override
+			public void execute() {
+				getPackageManager().setComponentEnabledSetting(getComponentName(),
+						PackageManager.COMPONENT_ENABLED_STATE_DISABLED, 0);
+			}
+		});
+
+		super.onCreate(savedInstanceState);
         setContentView(R.layout.com_facebook_login_activity_layout);
 
         if (savedInstanceState != null) {
@@ -139,4 +158,47 @@ static Bundle populateIntentExtras(AuthorizationClient.AuthorizationRequest requ
         extras.putSerializable(EXTRA_REQUEST, request);
         return extras;
     }
+
+	/**
+	 * Tracks velocity of requests over a period of time. If the number of
+	 * requests exceeds the <code>thresholdCount</code> in the
+	 * <code>thresholdMillis</code> then the <code>callback</code> will be
+	 * invoked.
+	 */
+	public static class Tracker {
+		private Queue<Long> queue = new PriorityQueue<Long>();
+
+		private final int thresholdMillis;
+		private final int thresholdCount;
+
+		public Tracker(int thresholdMillis, int thresholdCount) {
+			this.thresholdMillis = thresholdMillis;
+			this.thresholdCount = thresholdCount;
+		}
+
+		public synchronized void clear() {
+			queue.clear();
+		}
+
+		public synchronized void track(Callback callback) {
+			long current = System.currentTimeMillis();
+			long threshold = current - thresholdMillis;
+
+			Long next = queue.peek();
+			while (next != null && next.longValue() < threshold) {
+				queue.poll();
+				next = queue.peek();
+			}
+			queue.add(Long.valueOf(current));
+
+			if (queue.size() >= thresholdCount) {
+				queue.clear();
+				callback.execute();
+			}
+		}
+
+		public static interface Callback {
+			void execute();
+		}
+	}
 }
