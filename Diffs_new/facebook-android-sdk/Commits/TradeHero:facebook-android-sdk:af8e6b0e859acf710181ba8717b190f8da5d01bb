diff --git a/build.gradle b/build.gradle
index b5e81e6e2..f11e79ebd 100644
--- a/build.gradle
+++ b/build.gradle
@@ -7,3 +7,9 @@ buildscript {
         classpath 'com.android.tools.build:gradle:0.14.+'
     }
 }
+
+allprojects {
+    repositories {
+        mavenCentral()
+    }
+}
diff --git a/facebook/build.gradle b/facebook/build.gradle
index 36091f0c3..3c60bccdb 100644
--- a/facebook/build.gradle
+++ b/facebook/build.gradle
@@ -2,7 +2,7 @@ apply plugin: 'android-library'
 
 dependencies {
     compile 'com.android.support:support-v4:21.0.3'
-    compile files('../libs/bolts.jar')
+    compile 'com.parse.bolts:bolts-android:1.1.2'
 }
 
 android {
diff --git a/facebook/src/com/facebook/AppEventsConstants.java b/facebook/src/com/facebook/AppEventsConstants.java
index 51ba60e55..19031644b 100644
--- a/facebook/src/com/facebook/AppEventsConstants.java
+++ b/facebook/src/com/facebook/AppEventsConstants.java
@@ -162,6 +162,10 @@
     public static final String EVENT_PARAM_DESCRIPTION = "fb_description";
 
 
+    /**
+     * Parameter key used to specify source application package
+     */
+    public static final String EVENT_PARAM_SOURCE_APPLICATION = "fb_mobile_launch_source";
 
     // Parameter values
 
diff --git a/facebook/src/com/facebook/AppEventsLogger.java b/facebook/src/com/facebook/AppEventsLogger.java
index 05e747c09..c1ccd1dea 100644
--- a/facebook/src/com/facebook/AppEventsLogger.java
+++ b/facebook/src/com/facebook/AppEventsLogger.java
@@ -16,11 +16,14 @@
 
 package com.facebook;
 
+import android.app.Activity;
 import android.content.Context;
+import android.content.ComponentName;
 import android.content.Intent;
 import android.os.Bundle;
 import android.support.v4.content.LocalBroadcastManager;
 import android.util.Log;
+import bolts.AppLinks;
 import com.facebook.internal.AttributionIdentifiers;
 import com.facebook.internal.Logger;
 import com.facebook.internal.Utility;
@@ -50,6 +53,7 @@
  * </p>
  * <p>
  * The AppEventsLogger class has a few related roles:
+ * </p>
  * <ul>
  * <li>
  * Logging predefined and application-defined events to Facebook App Insights with a
@@ -130,10 +134,12 @@
     // Constants
     private static final String TAG = AppEventsLogger.class.getCanonicalName();
 
-    private static final int NUM_LOG_EVENTS_TO_TRY_TO_FLUSH_AFTER                  = 100;
-    private static final int FLUSH_PERIOD_IN_SECONDS                               = 60;
+    private static final int NUM_LOG_EVENTS_TO_TRY_TO_FLUSH_AFTER = 100;
+    private static final int FLUSH_PERIOD_IN_SECONDS = 60;
     private static final int APP_SUPPORTS_ATTRIBUTION_ID_RECHECK_PERIOD_IN_SECONDS = 60 * 60 * 24;
-    private static final int FLUSH_APP_SESSION_INFO_IN_SECONDS                     = 30;
+    private static final int FLUSH_APP_SESSION_INFO_IN_SECONDS = 30;
+
+    private static final String SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT = "_fbSourceApplicationHasBeenSet";
 
     // Instance member variables
     private final Context context;
@@ -147,6 +153,8 @@
     private static Context applicationContext;
     private static Object staticLock = new Object();
     private static String hashedDeviceAndAppId;
+    private static String sourceApplication;
+    private static boolean isOpenedByApplink;
 
     // Rather than retaining Sessions, we extract the information we need and track app events by
     // application ID and access token (which may be null for Session-less calls). This avoids needing to
@@ -233,7 +241,7 @@ public static void setLimitEventUsage(Context context, boolean limitEventUsage)
      * Use this method if your application ID is stored in application metadata, otherwise see
      * {@link AppEventsLogger#activateApp(android.content.Context, String)}.
      *
-     * @param context   Used to access the applicationId and the attributionId for non-authenticated users.
+     * @param context Used to access the applicationId and the attributionId for non-authenticated users.
      */
     public static void activateApp(Context context) {
         Settings.sdkInitialize(context);
@@ -244,9 +252,8 @@ public static void activateApp(Context context) {
      * Notifies the events system that the app has launched & logs an activatedApp event.  Should be called whenever
      * your app becomes active, typically in the onResume() method of each long-running Activity of your app.
      *
-     * @param context   Used to access the attributionId for non-authenticated users.
-     *
-     * @param applicationId  The specific applicationId to report the activation for.
+     * @param context       Used to access the attributionId for non-authenticated users.
+     * @param applicationId The specific applicationId to report the activation for.
      */
     @SuppressWarnings("deprecation")
     public static void activateApp(Context context, String applicationId) {
@@ -254,17 +261,27 @@ public static void activateApp(Context context, String applicationId) {
             throw new IllegalArgumentException("Both context and applicationId must be non-null");
         }
 
+        if ((context instanceof Activity)) {
+            setSourceApplication((Activity) context);
+        } else {
+          // If context is not an Activity, we cannot get intent nor calling activity.
+          resetSourceApplication();
+          Log.d(AppEventsLogger.class.getName(),
+              "To set source application the context of activateApp must be an instance of Activity");
+        }
+
         // activateApp supercedes publishInstall in the public API, so we need to explicitly invoke it, since the server
         // can't reliably infer install state for all conditions of an app activate.
         Settings.publishInstallAsync(context, applicationId, null);
 
         final AppEventsLogger logger = new AppEventsLogger(context, applicationId, null);
         final long eventTime = System.currentTimeMillis();
+        final String sourceApplicationInfo = getSourceApplication();
         backgroundExecutor.execute(new Runnable() {
-          @Override
-          public void run() {
-            logger.logAppSessionResumeEvent(eventTime);
-          }
+            @Override
+            public void run() {
+                logger.logAppSessionResumeEvent(eventTime, sourceApplicationInfo);
+            }
         });
     }
 
@@ -276,7 +293,7 @@ public void run() {
      * Use this method if your application ID is stored in application metadata, otherwise see
      * {@link AppEventsLogger#deactivateApp(android.content.Context, String)}.
      *
-     * @param context   Used to access the applicationId and the attributionId for non-authenticated users.
+     * @param context Used to access the applicationId and the attributionId for non-authenticated users.
      */
     public static void deactivateApp(Context context) {
         deactivateApp(context, Utility.getMetadataApplicationId(context));
@@ -287,27 +304,28 @@ public static void deactivateApp(Context context) {
      * tracks the application session information. Should be called whenever your app becomes
      * inactive, typically in the onPause() method of each long-running Activity of your app.
      *
-     * @param context   Used to access the attributionId for non-authenticated users.
-     *
-     * @param applicationId  The specific applicationId to track session information for.
+     * @param context       Used to access the attributionId for non-authenticated users.
+     * @param applicationId The specific applicationId to track session information for.
      */
     public static void deactivateApp(Context context, String applicationId) {
         if (context == null || applicationId == null) {
             throw new IllegalArgumentException("Both context and applicationId must be non-null");
         }
 
+        resetSourceApplication();
+
         final AppEventsLogger logger = new AppEventsLogger(context, applicationId, null);
         final long eventTime = System.currentTimeMillis();
         backgroundExecutor.execute(new Runnable() {
-          @Override
-          public void run() {
-            logger.logAppSessionSuspendEvent(eventTime);
-          }
+            @Override
+            public void run() {
+                logger.logAppSessionSuspendEvent(eventTime);
+            }
         });
     }
 
-    private void logAppSessionResumeEvent(long eventTime) {
-        PersistedAppSessionInfo.onResume(applicationContext, accessTokenAppId, this, eventTime);
+    private void logAppSessionResumeEvent(long eventTime, String sourceApplicationInfo) {
+        PersistedAppSessionInfo.onResume(applicationContext, accessTokenAppId, this, eventTime, sourceApplicationInfo);
     }
 
     private void logAppSessionSuspendEvent(long eventTime) {
@@ -319,9 +337,8 @@ private void logAppSessionSuspendEvent(long eventTime) {
      * comes from this application's metadata. The application ID used to log events will be determined from
      * the app ID specified in the package metadata.
      *
-     * @param context   Used to access the applicationId and the attributionId for non-authenticated users.
-     *
-     * @return          AppEventsLogger instance to invoke log* methods on.
+     * @param context Used to access the applicationId and the attributionId for non-authenticated users.
+     * @return AppEventsLogger instance to invoke log* methods on.
      */
     public static AppEventsLogger newLogger(Context context) {
         return new AppEventsLogger(context, null, null);
@@ -330,12 +347,11 @@ public static AppEventsLogger newLogger(Context context) {
     /**
      * Build an AppEventsLogger instance to log events through.
      *
-     * @param context        Used to access the attributionId for non-authenticated users.
-     * @param session        Explicitly specified Session to log events against.  If null, the activeSession
-     *                       will be used if it's open, otherwise the logging will happen against the default
-     *                       app ID specified via the app ID specified in the package metadata.
-     *
-     * @return          AppEventsLogger instance to invoke log* methods on.
+     * @param context Used to access the attributionId for non-authenticated users.
+     * @param session Explicitly specified Session to log events against.  If null, the activeSession
+     *                will be used if it's open, otherwise the logging will happen against the default
+     *                app ID specified via the app ID specified in the package metadata.
+     * @return AppEventsLogger instance to invoke log* methods on.
      */
     public static AppEventsLogger newLogger(Context context, Session session) {
         return new AppEventsLogger(context, null, session);
@@ -344,14 +360,13 @@ public static AppEventsLogger newLogger(Context context, Session session) {
     /**
      * Build an AppEventsLogger instance to log events through.
      *
-     * @param context        Used to access the attributionId for non-authenticated users.
-     * @param applicationId  Explicitly specified Facebook applicationId to log events against.  If null, the default
-     *                       app ID specified in the package metadata will be used.
-     * @param session        Explicitly specified Session to log events against.  If null, the activeSession
-     *                       will be used if it's open, otherwise the logging will happen against the specified
-     *                       app ID.
-     *
-     * @return          AppEventsLogger instance to invoke log* methods on.
+     * @param context       Used to access the attributionId for non-authenticated users.
+     * @param applicationId Explicitly specified Facebook applicationId to log events against.  If null, the default
+     *                      app ID specified in the package metadata will be used.
+     * @param session       Explicitly specified Session to log events against.  If null, the activeSession
+     *                      will be used if it's open, otherwise the logging will happen against the specified
+     *                      app ID.
+     * @return AppEventsLogger instance to invoke log* methods on.
      */
     public static AppEventsLogger newLogger(Context context, String applicationId, Session session) {
         return new AppEventsLogger(context, applicationId, session);
@@ -361,12 +376,11 @@ public static AppEventsLogger newLogger(Context context, String applicationId, S
      * Build an AppEventsLogger instance to log events that are attributed to the application but not to
      * any particular Session.
      *
-     * @param context        Used to access the attributionId for non-authenticated users.
-     * @param applicationId  Explicitly specified Facebook applicationId to log events against.  If null, the default
-     *                       app ID specified
-     *                       in the package metadata will be used.
-     *
-     * @return          AppEventsLogger instance to invoke log* methods on.
+     * @param context       Used to access the attributionId for non-authenticated users.
+     * @param applicationId Explicitly specified Facebook applicationId to log events against.  If null, the default
+     *                      app ID specified
+     *                      in the package metadata will be used.
+     * @return AppEventsLogger instance to invoke log* methods on.
      */
     public static AppEventsLogger newLogger(Context context, String applicationId) {
         return new AppEventsLogger(context, applicationId, null);
@@ -385,6 +399,7 @@ public static AppEventsLogger newLogger(Context context, String applicationId) {
     /**
      * Access the behavior that AppEventsLogger uses to determine when to flush logged events to the server. This
      * setting applies to all instances of AppEventsLogger.
+     *
      * @return specified flush behavior.
      */
     public static FlushBehavior getFlushBehavior() {
@@ -396,6 +411,7 @@ public static FlushBehavior getFlushBehavior() {
     /**
      * Set the behavior that this AppEventsLogger uses to determine when to flush logged events to the server. This
      * setting applies to all instances of AppEventsLogger.
+     *
      * @param flushBehavior the desired behavior.
      */
     public static void setFlushBehavior(FlushBehavior flushBehavior) {
@@ -406,26 +422,28 @@ public static void setFlushBehavior(FlushBehavior flushBehavior) {
 
     /**
      * Log an app event with the specified name.
+     *
      * @param eventName eventName used to denote the event.  Choose amongst the EVENT_NAME_* constants in
      *                  {@link AppEventsConstants} when possible.  Or create your own if none of the EVENT_NAME_*
      *                  constants are applicable.
      *                  Event names should be 40 characters or less, alphanumeric, and can include spaces, underscores
      *                  or hyphens, but mustn't have a space or hyphen as the first character.  Any given app should
      *                  have no more than ~300 distinct event names.
-      */
+     */
     public void logEvent(String eventName) {
         logEvent(eventName, null);
     }
 
     /**
      * Log an app event with the specified name and the supplied value.
-     * @param eventName eventName used to denote the event.  Choose amongst the EVENT_NAME_* constants in
-     *                  {@link AppEventsConstants} when possible.  Or create your own if none of the EVENT_NAME_*
-     *                  constants are applicable.
-     *                  Event names should be 40 characters or less, alphanumeric, and can include spaces, underscores
-     *                  or hyphens, but mustn't have a space or hyphen as the first character.  Any given app should
-     *                  have no more than ~300 distinct event names.
-     *                  * @param eventName
+     *
+     * @param eventName  eventName used to denote the event.  Choose amongst the EVENT_NAME_* constants in
+     *                   {@link AppEventsConstants} when possible.  Or create your own if none of the EVENT_NAME_*
+     *                   constants are applicable.
+     *                   Event names should be 40 characters or less, alphanumeric, and can include spaces, underscores
+     *                   or hyphens, but mustn't have a space or hyphen as the first character.  Any given app should
+     *                   have no more than ~300 distinct event names.
+     *                   * @param eventName
      * @param valueToSum a value to associate with the event which will be summed up in Insights for across all
      *                   instances of the event, so that average values can be determined, etc.
      */
@@ -435,12 +453,13 @@ public void logEvent(String eventName, double valueToSum) {
 
     /**
      * Log an app event with the specified name and set of parameters.
-     * @param eventName eventName used to denote the event.  Choose amongst the EVENT_NAME_* constants in
-     *                  {@link AppEventsConstants} when possible.  Or create your own if none of the EVENT_NAME_*
-     *                  constants are applicable.
-     *                  Event names should be 40 characters or less, alphanumeric, and can include spaces, underscores
-     *                  or hyphens, but mustn't have a space or hyphen as the first character.  Any given app should
-     *                  have no more than ~300 distinct event names.
+     *
+     * @param eventName  eventName used to denote the event.  Choose amongst the EVENT_NAME_* constants in
+     *                   {@link AppEventsConstants} when possible.  Or create your own if none of the EVENT_NAME_*
+     *                   constants are applicable.
+     *                   Event names should be 40 characters or less, alphanumeric, and can include spaces, underscores
+     *                   or hyphens, but mustn't have a space or hyphen as the first character.  Any given app should
+     *                   have no more than ~300 distinct event names.
      * @param parameters A Bundle of parameters to log with the event.  Insights will allow looking at the logs of these
      *                   events via different parameter values.  You can log on the order of 10 parameters with each
      *                   distinct eventName.  It's advisable to keep the number of unique values provided for each
@@ -454,12 +473,13 @@ public void logEvent(String eventName, Bundle parameters) {
 
     /**
      * Log an app event with the specified name, supplied value, and set of parameters.
-     * @param eventName eventName used to denote the event.  Choose amongst the EVENT_NAME_* constants in
-     *                  {@link AppEventsConstants} when possible.  Or create your own if none of the EVENT_NAME_*
-     *                  constants are applicable.
-     *                  Event names should be 40 characters or less, alphanumeric, and can include spaces, underscores
-     *                  or hyphens, but mustn't have a space or hyphen as the first character.  Any given app should
-     *                  have no more than ~300 distinct event names.
+     *
+     * @param eventName  eventName used to denote the event.  Choose amongst the EVENT_NAME_* constants in
+     *                   {@link AppEventsConstants} when possible.  Or create your own if none of the EVENT_NAME_*
+     *                   constants are applicable.
+     *                   Event names should be 40 characters or less, alphanumeric, and can include spaces, underscores
+     *                   or hyphens, but mustn't have a space or hyphen as the first character.  Any given app should
+     *                   have no more than ~300 distinct event names.
      * @param valueToSum a value to associate with the event which will be summed up in Insights for across all
      *                   instances of the event, so that average values can be determined, etc.
      * @param parameters A Bundle of parameters to log with the event.  Insights will allow looking at the logs of these
@@ -476,9 +496,9 @@ public void logEvent(String eventName, double valueToSum, Bundle parameters) {
     /**
      * Logs a purchase event with Facebook, in the specified amount and with the specified currency.
      *
-     * @param purchaseAmount  Amount of purchase, in the currency specified by the 'currency' parameter. This value
-     *                        will be rounded to the thousandths place (e.g., 12.34567 becomes 12.346).
-     * @param currency        Currency used to specify the amount.
+     * @param purchaseAmount Amount of purchase, in the currency specified by the 'currency' parameter. This value
+     *                       will be rounded to the thousandths place (e.g., 12.34567 becomes 12.346).
+     * @param currency       Currency used to specify the amount.
      */
     public void logPurchase(BigDecimal purchaseAmount, Currency currency) {
         logPurchase(purchaseAmount, currency, null);
@@ -488,11 +508,11 @@ public void logPurchase(BigDecimal purchaseAmount, Currency currency) {
      * Logs a purchase event with Facebook, in the specified amount and with the specified currency.  Additional
      * detail about the purchase can be passed in through the parameters bundle.
      *
-     * @param purchaseAmount  Amount of purchase, in the currency specified by the 'currency' parameter. This value
-     *                        will be rounded to the thousandths place (e.g., 12.34567 becomes 12.346).
-     * @param currency        Currency used to specify the amount.
-     * @param parameters      Arbitrary additional information for describing this event.  Should have no more than
-     *                        10 entries, and keys should be mostly consistent from one purchase event to the next.
+     * @param purchaseAmount Amount of purchase, in the currency specified by the 'currency' parameter. This value
+     *                       will be rounded to the thousandths place (e.g., 12.34567 becomes 12.346).
+     * @param currency       Currency used to specify the amount.
+     * @param parameters     Arbitrary additional information for describing this event.  Should have no more than
+     *                       10 entries, and keys should be mostly consistent from one purchase event to the next.
      */
     public void logPurchase(BigDecimal purchaseAmount, Currency currency, Bundle parameters) {
 
@@ -547,6 +567,7 @@ public void logSdkEvent(String eventName, Double valueToSum, Bundle parameters)
 
     /**
      * Returns the app ID this logger was configured to log to.
+     *
      * @return the Facebook app ID
      */
     public String getApplicationId() {
@@ -589,8 +610,8 @@ private AppEventsLogger(Context context, String applicationId, Session session)
 
         // If we have a session and the appId passed is null or matches the session's app ID:
         if (session != null &&
-            (applicationId == null || applicationId.equals(session.getApplicationId()))
-          ) {
+                (applicationId == null || applicationId.equals(session.getApplicationId()))
+                ) {
             accessTokenAppId = new AccessTokenAppIdPair(session);
         } else {
             // If no app ID passed, get it from the manifest:
@@ -632,10 +653,10 @@ public void run() {
         };
 
         backgroundExecutor.scheduleAtFixedRate(
-            flushRunnable,
-            0,
-            FLUSH_PERIOD_IN_SECONDS,
-            TimeUnit.SECONDS
+                flushRunnable,
+                0,
+                FLUSH_PERIOD_IN_SECONDS,
+                TimeUnit.SECONDS
         );
 
         final Runnable attributionRecheckRunnable = new Runnable() {
@@ -654,10 +675,10 @@ public void run() {
         };
 
         backgroundExecutor.scheduleAtFixedRate(
-            attributionRecheckRunnable,
-            0,
-            APP_SUPPORTS_ATTRIBUTION_ID_RECHECK_PERIOD_IN_SECONDS,
-            TimeUnit.SECONDS
+                attributionRecheckRunnable,
+                0,
+                APP_SUPPORTS_ATTRIBUTION_ID_RECHECK_PERIOD_IN_SECONDS,
+                TimeUnit.SECONDS
         );
     }
 
@@ -666,7 +687,9 @@ private void logEvent(String eventName, Double valueToSum, Bundle parameters, bo
         logEvent(context, event, accessTokenAppId);
     }
 
-   private static void logEvent(final Context context, final AppEvent event, final AccessTokenAppIdPair accessTokenAppId) {
+    private static void logEvent(final Context context,
+                                 final AppEvent event,
+                                 final AccessTokenAppIdPair accessTokenAppId) {
         Settings.getExecutor().execute(new Runnable() {
             @Override
             public void run() {
@@ -816,8 +839,9 @@ private static FlushStatistics buildAndExecuteRequests(FlushReason reason, Set<A
     }
 
     private static Request buildRequestForSession(final AccessTokenAppIdPair accessTokenAppId,
-            final SessionEventsState sessionEventsState, final boolean limitEventUsage,
-            final FlushStatistics flushState) {
+                                                  final SessionEventsState sessionEventsState,
+                                                  final boolean limitEventUsage,
+                                                  final FlushStatistics flushState) {
         String applicationId = accessTokenAppId.getApplicationId();
 
         Utility.FetchedAppSettings fetchedAppSettings = Utility.queryAppSettings(applicationId, false);
@@ -854,7 +878,7 @@ public void onCompleted(Response response) {
     }
 
     private static void handleResponse(AccessTokenAppIdPair accessTokenAppId, Request request, Response response,
-            SessionEventsState sessionEventsState, FlushStatistics flushState) {
+                                       SessionEventsState sessionEventsState, FlushStatistics flushState) {
         FacebookRequestError error = response.getError();
         String resultDescription = "Success";
 
@@ -913,7 +937,7 @@ private static int accumulatePersistedEvents() {
         PersistedEvents persistedEvents = PersistedEvents.readAndClearStore(applicationContext);
 
         int result = 0;
-        for(AccessTokenAppIdPair accessTokenAppId : persistedEvents.keySet()) {
+        for (AccessTokenAppIdPair accessTokenAppId : persistedEvents.keySet()) {
             SessionEventsState sessionEventsState = getSessionEventsState(applicationContext, accessTokenAppId);
 
             List<AppEvent> events = persistedEvents.getEvents(accessTokenAppId);
@@ -933,6 +957,75 @@ private static void notifyDeveloperError(String message) {
         Logger.log(LoggingBehavior.DEVELOPER_ERRORS, "AppEvents", message);
     }
 
+    /**
+     * Source Application setters and getters
+     */
+    private static void setSourceApplication(Activity activity) {
+
+        ComponentName callingApplication = activity.getCallingActivity();
+        if (callingApplication != null) {
+            String callingApplicationPackage = callingApplication.getPackageName();
+            if (callingApplicationPackage.equals(activity.getPackageName())) {
+                // open by own app.
+                resetSourceApplication();
+                return;
+            }
+            sourceApplication = callingApplicationPackage;
+        }
+
+        // Tap icon to open an app will still get the old intent if the activity was opened by an intent before.
+        // Introduce an extra field in the intent to force clear the sourceApplication.
+        Intent openIntent = activity.getIntent();
+        if (openIntent == null || openIntent.getBooleanExtra(SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT, false)) {
+            resetSourceApplication();
+            return;
+        }
+
+        Bundle applinkData = AppLinks.getAppLinkData(openIntent);
+
+        if (applinkData == null) {
+            resetSourceApplication();
+            return;
+        }
+
+        isOpenedByApplink = true;
+
+        Bundle applinkReferrerData = applinkData.getBundle("referer_app_link");
+
+        if (applinkReferrerData == null) {
+            sourceApplication = null;
+            return;
+        }
+
+        String applinkReferrerPackage = applinkReferrerData.getString("package");
+        sourceApplication = applinkReferrerPackage;
+
+        // Mark this intent has been used to avoid use this intent again and again.
+        openIntent.putExtra(SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT, true);
+
+        return;
+    }
+
+    static void setSourceApplication(String applicationPackage, boolean openByAppLink) {
+        sourceApplication = applicationPackage;
+        isOpenedByApplink = openByAppLink;
+    }
+
+    static String getSourceApplication() {
+        String openType = "Unclassified";
+        if (isOpenedByApplink) {
+            openType = "Applink";
+        }
+        if (sourceApplication != null) {
+            return openType + "(" + sourceApplication + ")";
+        }
+        return openType;
+    }
+
+    static void resetSourceApplication() {
+        sourceApplication = null;
+        isOpenedByApplink = false;
+    }
 
     //
     // Deprecated Stuff
@@ -982,7 +1075,7 @@ public synchronized void clearInFlightAndStats(boolean moveToAccumulated) {
         }
 
         public int populateRequest(Request request, boolean includeImplicitEvents,
-                boolean includeAttribution, boolean limitEventUsage) {
+                                   boolean includeAttribution, boolean limitEventUsage) {
 
             int numSkipped;
             JSONArray jsonArray;
@@ -1025,7 +1118,7 @@ public synchronized void accumulatePersistedEvents(List<AppEvent> events) {
         }
 
         private void populateRequest(Request request, int numSkipped, JSONArray events, boolean includeAttribution,
-                boolean limitEventUsage) {
+                                     boolean limitEventUsage) {
             GraphObject publishParams = GraphObject.Factory.create();
             publishParams.setProperty("event", "CUSTOM_APP_EVENTS");
 
@@ -1042,9 +1135,9 @@ private void populateRequest(Request request, int numSkipped, JSONArray events,
             // call in its own try/catch block since some of the things it does might cause
             // unexpected exceptions on rooted/funky devices:
             try {
-              Utility.setAppEventExtendedDeviceInfoParameters(publishParams, applicationContext);
+                Utility.setAppEventExtendedDeviceInfoParameters(publishParams, applicationContext);
             } catch (Exception e) {
-              // Swallow
+                // Swallow
             }
 
             publishParams.setProperty("application_package_name", packageName);
@@ -1085,11 +1178,11 @@ private void populateRequest(Request request, int numSkipped, JSONArray events,
         private String name;
 
         public AppEvent(
-            Context context,
-            String eventName,
-            Double valueToSum,
-            Bundle parameters,
-            boolean isImplicitlyLogged
+                Context context,
+                String eventName,
+                Double valueToSum,
+                Bundle parameters,
+                boolean isImplicitlyLogged
         ) {
 
             validateIdentifier(eventName);
@@ -1125,8 +1218,11 @@ public AppEvent(
                         Object value = parameters.get(key);
                         if (!(value instanceof String) && !(value instanceof Number)) {
                             throw new FacebookException(
-                                    String.format("Parameter value '%s' for key '%s' should be a string or a numeric type.",
-                                            value, key));
+                                    String.format(
+                                            "Parameter value '%s' for key '%s' should be a string or a numeric type.",
+                                            value,
+                                            key)
+                            );
                         }
 
                         jsonObject.put(key, value.toString());
@@ -1156,7 +1252,9 @@ private AppEvent(String jsonString, boolean isImplicit) throws JSONException {
             this.isImplicit = isImplicit;
         }
 
-        public boolean getIsImplicit() { return isImplicit; }
+        public boolean getIsImplicit() {
+            return isImplicit;
+        }
 
         public JSONObject getJSONObject() {
             return jsonObject;
@@ -1175,7 +1273,8 @@ private void validateIdentifier(String identifier) {
                     identifier = "<None Provided>";
                 }
                 throw new FacebookException(
-                    String.format("Identifier '%s' must be less than %d characters", identifier, MAX_IDENTIFIER_LENGTH));
+                    String.format("Identifier '%s' must be less than %d characters", identifier, MAX_IDENTIFIER_LENGTH)
+                );
             }
 
             boolean alreadyValidated = false;
@@ -1191,8 +1290,10 @@ private void validateIdentifier(String identifier) {
                 } else {
                     throw new FacebookException(
                             String.format("Skipping event named '%s' due to illegal name - must be under 40 chars " +
-                                          "and alphanumeric, _, - or space, and not start with a space or hyphen.",
-                                          identifier));
+                                            "and alphanumeric, _, - or space, and not start with a space or hyphen.",
+                                    identifier
+                            )
+                    );
                 }
             }
 
@@ -1248,14 +1349,14 @@ private static void restoreAppSessionInformation(Context context) {
                 if (!isLoaded) {
                     try {
                         ois =
-                            new ObjectInputStream(
-                                context.openFileInput(PERSISTED_SESSION_INFO_FILENAME));
+                                new ObjectInputStream(
+                                        context.openFileInput(PERSISTED_SESSION_INFO_FILENAME));
                         appSessionInfoMap =
-                            (HashMap<AccessTokenAppIdPair, FacebookTimeSpentData>) ois.readObject();
+                                (HashMap<AccessTokenAppIdPair, FacebookTimeSpentData>) ois.readObject();
                         Logger.log(
-                            LoggingBehavior.APP_EVENTS,
-                            "AppEvents",
-                            "App session info loaded");
+                                LoggingBehavior.APP_EVENTS,
+                                "AppEvents",
+                                "App session info loaded");
                     } catch (FileNotFoundException fex) {
                     } catch (Exception e) {
                         Log.d(TAG, "Got unexpected exception: " + e.toString());
@@ -1284,9 +1385,11 @@ static void saveAppSessionInformation(Context context) {
                     try {
                         oos = new ObjectOutputStream(
                                 new BufferedOutputStream(
-                                    context.openFileOutput(
-                                        PERSISTED_SESSION_INFO_FILENAME,
-                                        Context.MODE_PRIVATE)));
+                                        context.openFileOutput(
+                                                PERSISTED_SESSION_INFO_FILENAME,
+                                                Context.MODE_PRIVATE)
+                                )
+                        );
                         oos.writeObject(appSessionInfoMap);
                         hasChanges = false;
                         Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents", "App session info saved");
@@ -1300,34 +1403,35 @@ static void saveAppSessionInformation(Context context) {
         }
 
         static void onResume(
-          Context context,
-          AccessTokenAppIdPair accessTokenAppId,
-          AppEventsLogger logger,
-          long eventTime
+                Context context,
+                AccessTokenAppIdPair accessTokenAppId,
+                AppEventsLogger logger,
+                long eventTime,
+                String sourceApplicationInfo
         ) {
-          synchronized (staticLock) {
-            FacebookTimeSpentData timeSpentData = getTimeSpentData(context, accessTokenAppId);
-            timeSpentData.onResume(logger, eventTime);
-            onTimeSpentDataUpdate();
-          }
+            synchronized (staticLock) {
+                FacebookTimeSpentData timeSpentData = getTimeSpentData(context, accessTokenAppId);
+                timeSpentData.onResume(logger, eventTime, sourceApplicationInfo);
+                onTimeSpentDataUpdate();
+            }
         }
 
         static void onSuspend(
-          Context context,
-          AccessTokenAppIdPair accessTokenAppId,
-          AppEventsLogger logger,
-          long eventTime
+                Context context,
+                AccessTokenAppIdPair accessTokenAppId,
+                AppEventsLogger logger,
+                long eventTime
         ) {
-          synchronized (staticLock) {
-            FacebookTimeSpentData timeSpentData = getTimeSpentData(context, accessTokenAppId);
-            timeSpentData.onSuspend(logger, eventTime);
-            onTimeSpentDataUpdate();
-          }
+            synchronized (staticLock) {
+                FacebookTimeSpentData timeSpentData = getTimeSpentData(context, accessTokenAppId);
+                timeSpentData.onSuspend(logger, eventTime);
+                onTimeSpentDataUpdate();
+            }
         }
 
         private static FacebookTimeSpentData getTimeSpentData(
-            Context context,
-            AccessTokenAppIdPair accessTokenAppId
+                Context context,
+                AccessTokenAppIdPair accessTokenAppId
         ) {
             restoreAppSessionInformation(context);
             FacebookTimeSpentData result = null;
@@ -1345,9 +1449,9 @@ private static void onTimeSpentDataUpdate() {
             if (!hasChanges) {
                 hasChanges = true;
                 backgroundExecutor.schedule(
-                    appSessionInfoFlushRunnable,
-                    FLUSH_APP_SESSION_INFO_IN_SECONDS,
-                    TimeUnit.SECONDS);
+                        appSessionInfoFlushRunnable,
+                        FLUSH_APP_SESSION_INFO_IN_SECONDS,
+                        TimeUnit.SECONDS);
             }
         }
     }
@@ -1376,15 +1480,16 @@ public static PersistedEvents readAndClearStore(Context context) {
                 return persistedEvents;
             }
         }
+
         public static void persistEvents(Context context, AccessTokenAppIdPair accessTokenAppId,
-                SessionEventsState eventsToPersist) {
+                                         SessionEventsState eventsToPersist) {
             Map<AccessTokenAppIdPair, SessionEventsState> map = new HashMap<AccessTokenAppIdPair, SessionEventsState>();
             map.put(accessTokenAppId, eventsToPersist);
             persistEvents(context, map);
         }
 
         public static void persistEvents(Context context,
-                Map<AccessTokenAppIdPair, SessionEventsState> eventsToPersist) {
+                                         Map<AccessTokenAppIdPair, SessionEventsState> eventsToPersist) {
             synchronized (staticLock) {
                 // Note that we don't track which instance of AppEventsLogger added a particular event to
                 // SessionEventsState; when a particular Context is being destroyed, we'll persist all accumulated
diff --git a/facebook/src/com/facebook/FacebookSdkVersion.java b/facebook/src/com/facebook/FacebookSdkVersion.java
index 7067b769f..57f9241a3 100644
--- a/facebook/src/com/facebook/FacebookSdkVersion.java
+++ b/facebook/src/com/facebook/FacebookSdkVersion.java
@@ -17,5 +17,5 @@
 package com.facebook;
 
 final class FacebookSdkVersion {
-    public static final String BUILD = "3.17.0";
+    public static final String BUILD = "3.17.2";
 }
diff --git a/facebook/src/com/facebook/FacebookTimeSpentData.java b/facebook/src/com/facebook/FacebookTimeSpentData.java
index 08c2920b3..2a5e2155c 100644
--- a/facebook/src/com/facebook/FacebookTimeSpentData.java
+++ b/facebook/src/com/facebook/FacebookTimeSpentData.java
@@ -51,6 +51,7 @@
     private long lastSuspendTime;
     private long millisecondsSpentInSession;
     private int interruptionCount;
+    private String firstOpenSourceApplication;
 
     /**
      * Serialization proxy for the FacebookTimeSpentData class. This is version 1 of
@@ -87,32 +88,93 @@ private Object readResolve() {
         }
     }
 
+
+    /**
+     * Constructor to be used for V1 serialization only, DO NOT CHANGE.
+     */
+    private FacebookTimeSpentData(
+            long lastResumeTime,
+            long lastSuspendTime,
+            long millisecondsSpentInSession,
+            int interruptionCount
+
+    ) {
+        resetSession();
+        this.lastResumeTime = lastResumeTime;
+        this.lastSuspendTime = lastSuspendTime;
+        this.millisecondsSpentInSession = millisecondsSpentInSession;
+        this.interruptionCount = interruptionCount;
+    }
+
+    /**
+     * Serialization proxy for the FacebookTimeSpentData class. This is version 2 of
+     * serialization. Future serializations may differ in format. This
+     * class should not be modified. If serializations formats change,
+     * create a new class SerializationProxyVx.
+     */
+    private static class SerializationProxyV2 implements Serializable {
+        private static final long serialVersionUID = 6L;
+
+        private final long lastResumeTime;
+        private final long lastSuspendTime;
+        private final long millisecondsSpentInSession;
+        private final int interruptionCount;
+        private final String firstOpenSourceApplication;
+
+        SerializationProxyV2(
+                long lastResumeTime,
+                long lastSuspendTime,
+                long millisecondsSpentInSession,
+                int interruptionCount,
+                String firstOpenSourceApplication
+
+        ) {
+            this.lastResumeTime = lastResumeTime;
+            this.lastSuspendTime = lastSuspendTime;
+            this.millisecondsSpentInSession = millisecondsSpentInSession;
+            this.interruptionCount = interruptionCount;
+            this.firstOpenSourceApplication = firstOpenSourceApplication;
+        }
+
+        private Object readResolve() {
+            return new FacebookTimeSpentData(
+                    lastResumeTime,
+                    lastSuspendTime,
+                    millisecondsSpentInSession,
+                    interruptionCount,
+                    firstOpenSourceApplication);
+        }
+    }
+
     FacebookTimeSpentData() {
         resetSession();
     }
 
     /**
-     * Constructor to be used for V1 serialization only, DO NOT CHANGE.
+     * Constructor to be used for V2 serialization only, DO NOT CHANGE.
      */
     private FacebookTimeSpentData(
         long lastResumeTime,
         long lastSuspendTime,
         long millisecondsSpentInSession,
-        int interruptionCount
+        int interruptionCount,
+        String firstOpenSourceApplication
     ) {
         resetSession();
         this.lastResumeTime = lastResumeTime;
         this.lastSuspendTime = lastSuspendTime;
         this.millisecondsSpentInSession = millisecondsSpentInSession;
         this.interruptionCount = interruptionCount;
+        this.firstOpenSourceApplication = firstOpenSourceApplication;
     }
 
     private Object writeReplace() {
-        return new SerializationProxyV1(
-            lastResumeTime,
-            lastSuspendTime,
-            millisecondsSpentInSession,
-            interruptionCount
+        return new SerializationProxyV2(
+                lastResumeTime,
+                lastSuspendTime,
+                millisecondsSpentInSession,
+                interruptionCount,
+                firstOpenSourceApplication
         );
     }
 
@@ -133,7 +195,7 @@ void onSuspend(AppEventsLogger logger, long eventTime) {
         isAppActive = false;
     }
 
-    void onResume(AppEventsLogger logger, long eventTime) {
+    void onResume(AppEventsLogger logger, long eventTime, String sourceApplicationInfo) {
         long now = eventTime;
 
         // Retain old behavior for activated app event - log the event if the event hasn't
@@ -142,7 +204,11 @@ void onResume(AppEventsLogger logger, long eventTime) {
         // event log time to determine if the app activate should be suppressed or not.
         if (isColdLaunch() ||
             ((now - lastActivateEventLoggedTime) > APP_ACTIVATE_SUPPRESSION_PERIOD_IN_MILLISECONDS)) {
-            logger.logEvent(AppEventsConstants.EVENT_NAME_ACTIVATED_APP);
+            Bundle eventParams = new Bundle();
+            eventParams.putString(
+                    AppEventsConstants.EVENT_PARAM_SOURCE_APPLICATION,
+                    sourceApplicationInfo);
+            logger.logEvent(AppEventsConstants.EVENT_NAME_ACTIVATED_APP, eventParams);
             lastActivateEventLoggedTime = now;
         }
 
@@ -171,11 +237,17 @@ void onResume(AppEventsLogger logger, long eventTime) {
             }
         }
 
+        // Set source application only for the first resume of the timespent session.
+        if (interruptionCount == 0) {
+            firstOpenSourceApplication = sourceApplicationInfo;
+        }
+
         lastResumeTime = now;
         isAppActive = true;
     }
 
-    private void logAppDeactivatedEvent(AppEventsLogger logger, long interruptionDurationMillis) {
+    private void logAppDeactivatedEvent(AppEventsLogger logger,
+                                        long interruptionDurationMillis) {
         // Log the old session information and clear the data
         Bundle eventParams = new Bundle();
         eventParams.putInt(
@@ -184,6 +256,9 @@ private void logAppDeactivatedEvent(AppEventsLogger logger, long interruptionDur
         eventParams.putInt(
                 AppEventsConstants.EVENT_NAME_TIME_BETWEEN_SESSIONS,
                 getQuantaIndex(interruptionDurationMillis));
+        eventParams.putString(
+                AppEventsConstants.EVENT_PARAM_SOURCE_APPLICATION,
+                firstOpenSourceApplication);
         logger.logEvent(
                 AppEventsConstants.EVENT_NAME_DEACTIVATED_APP,
                 (millisecondsSpentInSession/DateUtils.SECOND_IN_MILLIS),
diff --git a/libs/bolts-android-1.1.2.jar b/libs/bolts-android-1.1.2.jar
new file mode 100644
index 000000000..88a01a30b
Binary files /dev/null and b/libs/bolts-android-1.1.2.jar differ
diff --git a/libs/bolts.jar b/libs/bolts.jar
deleted file mode 100644
index 9a9a1e94b..000000000
Binary files a/libs/bolts.jar and /dev/null differ
