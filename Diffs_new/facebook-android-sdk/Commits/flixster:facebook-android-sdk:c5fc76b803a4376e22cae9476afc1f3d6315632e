diff --git a/facebook/src/com/facebook/ads/Ad.java b/facebook/src/com/facebook/ads/Ad.java
index e869756bc..59c0a84c4 100644
--- a/facebook/src/com/facebook/ads/Ad.java
+++ b/facebook/src/com/facebook/ads/Ad.java
@@ -16,15 +16,33 @@
 
 package com.facebook.ads;
 
+/**
+ * Ad interface is a common interface implemented by all Facebook ad controls.
+ */
 public interface Ad {
 
-    void setAdListener(AdListener adListener);
-
-    void setTestMode(boolean testMode);
-
+    /**
+     * Loads an ad.
+     * <p>
+     * This method always returns immediately. The ad is loaded asynchronously. The control's
+     * ad listener will be called when loading finishes or fails.
+     */
     void loadAd();
 
+    /**
+     * Loads an ad with the given ad targeting option.
+     * <p>
+     * This method always returns immediately. The ad is loaded asynchronously. The control's
+     * ad listener will be called when loading finishes or fails.
+     *
+     * @param adTargetingOptions the ad targeting option
+     */
     void loadAd(AdTargetingOptions adTargetingOptions);
 
+    /**
+     * Destroys the ad control.
+     * <p>
+     * This method should be called when the hosting activity of the ad control is destroyed.
+     */
     void destroy();
 }
diff --git a/facebook/src/com/facebook/ads/AdError.java b/facebook/src/com/facebook/ads/AdError.java
index 193c7c4dc..833b4db6d 100644
--- a/facebook/src/com/facebook/ads/AdError.java
+++ b/facebook/src/com/facebook/ads/AdError.java
@@ -16,20 +16,42 @@
 
 package com.facebook.ads;
 
+/**
+ * AdError contains the error information returned by Facebook.
+ */
 public class AdError {
 
+    public static final AdError CLIENT_INVALIDATION = new AdError(2000, "Client Invalidation");
+    public static final AdError INTERNAL_ERROR = new AdError(2001, "Internal Error");
+    public static final AdError MISSING_PROPERTIES = new AdError(2002, "Native ad failed to load due to missing properties");
+
+    public static final int INVALID_ERROR_CODE = -1;
+
     private final int errorCode;
     private final String errorMessage;
 
+    /**
+     * Constructs an AdError using the given error code and error message
+     * @param errorCode the error code
+     * @param errorMessage the error message
+     */
     public AdError(int errorCode, String errorMessage) {
         this.errorCode = errorCode;
         this.errorMessage = errorMessage;
     }
 
+    /**
+     * Gets the error code
+     * @return the error code
+     */
     public int getErrorCode() {
         return errorCode;
     }
 
+    /**
+     * Gets the error message
+     * @return the error message
+     */
     public String getErrorMessage() {
         return errorMessage;
     }
diff --git a/facebook/src/com/facebook/ads/AdInterstitial.java b/facebook/src/com/facebook/ads/AdInterstitial.java
deleted file mode 100644
index 2b97985cf..000000000
--- a/facebook/src/com/facebook/ads/AdInterstitial.java
+++ /dev/null
@@ -1,172 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.ads;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.support.v4.content.LocalBroadcastManager;
-import android.webkit.WebView;
-import com.facebook.FacebookRequestError;
-import com.facebook.ads.internal.AdRequest;
-import com.facebook.ads.internal.AdRequestController;
-import com.facebook.ads.internal.AdResponse;
-
-public class AdInterstitial implements Ad {
-
-    public static final String AD_INTERSTITIAL_DISPLAYED = "com.facebook.ads.interstitial.displayed";
-    public static final String AD_INTERSTITIAL_DISMISSED = "com.facebook.ads.interstitial.dismissed";
-    public static final String AD_INTERSTITIAL_CLICKED = "com.facebook.ads.interstitial.clicked";
-    public static final String AD_INTERSTITIAL_LOADED = "com.facebook.ads.interstitial.loaded";
-
-    private final Context context;
-    private final String placementId;
-    private final AdRequestController adRequestController;
-    private final AdInterstitialBroadcastReceiver broadcastReceiver;
-
-    private AdListener adListener;
-    private boolean loadRequested = false;
-    private boolean adLoaded = false;
-    private AdResponse adResponse;
-
-    public AdInterstitial(Context context, String placementId) {
-        this.context = context;
-        this.placementId = placementId;
-
-        WebView webView = new WebView(context);
-        String userAgentString = webView.getSettings().getUserAgentString();
-        webView.destroy();
-
-        adRequestController = new AdRequestController(this.context, this.placementId, AdSize.INTERSTITIAL,
-                userAgentString, new AdRequest.AdRequestListener() {
-            @Override
-            public void onLoading() {
-                // Do nothing.
-            }
-
-            @Override
-            public void onCompleted(AdResponse adResponse) {
-                AdInterstitial.this.adResponse = adResponse;
-                if (adResponse.getDataModel() != null) {
-                    adLoaded = true;
-                    if (adListener != null) {
-                        adListener.onAdLoaded(AdInterstitial.this);
-                    }
-
-                    Intent intent = new Intent(AdInterstitial.AD_INTERSTITIAL_LOADED);
-                    adResponse.getDataModel().addToIntentExtra(intent);
-                    LocalBroadcastManager.getInstance(AdInterstitial.this.context).sendBroadcast(intent);
-                } else {
-                    if (adListener != null) {
-                        adListener.onError(AdInterstitial.this, adResponse.getError());
-                    }
-                }
-            }
-
-            @Override
-            public void onError(FacebookRequestError error) {
-                adLoaded = false;
-                if (adListener != null) {
-                    adListener.onError(AdInterstitial.this, new AdError(error.getErrorCode(), error.getErrorMessage()));
-                }
-            }
-        });
-        adRequestController.setShouldRefresh(false);
-
-        broadcastReceiver = new AdInterstitialBroadcastReceiver();
-        broadcastReceiver.register();
-    }
-
-    @Override
-    public void setAdListener(AdListener adListener) {
-        this.adListener = adListener;
-    }
-
-    @Override
-    public void setTestMode(boolean testMode) {
-        adRequestController.setTestMode(true);
-    }
-
-    @Override
-    public void loadAd() {
-        loadAd(null);
-    }
-
-    @Override
-    public void loadAd(AdTargetingOptions targetingOptions) {
-        loadRequested = true;
-        adLoaded = false;
-        adRequestController.loadAd(targetingOptions);
-    }
-
-    @Override
-    public void destroy() {
-        broadcastReceiver.unregister();
-    }
-
-    public boolean isAdLoaded() {
-        return adLoaded;
-    }
-
-    public void show() {
-        broadcastReceiver.register();
-
-        Intent intent = new Intent(context, AdInterstitialActivity.class);
-        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        if (adLoaded) {
-            adResponse.getDataModel().addToIntentExtra(intent);
-        }
-        context.startActivity(intent);
-
-        // Load the ad if not already requested.
-        if (!loadRequested) {
-            loadAd();
-        }
-    }
-
-    private class AdInterstitialBroadcastReceiver extends BroadcastReceiver {
-
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            if (adListener == null) {
-                return;
-            }
-
-            String action = intent.getAction();
-            if (action.equals(AD_INTERSTITIAL_CLICKED)) {
-                adListener.onLeaveApplication(AdInterstitial.this);
-            } else if (action.equals(AD_INTERSTITIAL_DISMISSED)) {
-                adListener.onInterstitialDismissed(AdInterstitial.this);
-            } else if (action.equals(AD_INTERSTITIAL_DISPLAYED)) {
-                adListener.onInterstitialDisplayed(AdInterstitial.this);
-            }
-        }
-
-        public void register() {
-            IntentFilter interstitialIntentFilter = new IntentFilter();
-            interstitialIntentFilter.addAction(AD_INTERSTITIAL_DISPLAYED);
-            interstitialIntentFilter.addAction(AD_INTERSTITIAL_DISMISSED);
-            interstitialIntentFilter.addAction(AD_INTERSTITIAL_CLICKED);
-            LocalBroadcastManager.getInstance(context).registerReceiver(this, interstitialIntentFilter);
-        }
-
-        public void unregister() {
-            LocalBroadcastManager.getInstance(context).unregisterReceiver(this);
-        }
-    }
-}
diff --git a/facebook/src/com/facebook/ads/AdInterstitialActivity.java b/facebook/src/com/facebook/ads/AdInterstitialActivity.java
deleted file mode 100644
index 583114c0c..000000000
--- a/facebook/src/com/facebook/ads/AdInterstitialActivity.java
+++ /dev/null
@@ -1,127 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.ads;
-
-import android.app.Activity;
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.net.Uri;
-import android.os.Bundle;
-import android.support.v4.content.LocalBroadcastManager;
-import android.util.Log;
-import android.view.View;
-import android.view.Window;
-import android.view.WindowManager;
-import android.webkit.WebView;
-import android.webkit.WebViewClient;
-import android.widget.ImageButton;
-import com.facebook.ads.internal.AdDataModel;
-import com.facebook.ads.internal.AdResponse;
-import com.facebook.ads.internal.AdWebViewUtils;
-import com.facebook.android.R;
-
-public class AdInterstitialActivity extends Activity {
-
-    private static final String TAG = AdInterstitialActivity.class.getSimpleName();
-
-    private WebView adWebView;
-    private ImageButton closeButton;
-    private AdInterstitialActivityBroadcastReceiver broadcastReceiver;
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        broadcastReceiver = new AdInterstitialActivityBroadcastReceiver();
-        broadcastReceiver.register();
-
-        // Hide title and nav bar, must be done before setContentView.
-        requestWindowFeature(Window.FEATURE_NO_TITLE);
-        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
-
-        setContentView(R.layout.com_facebook_ad_interstitial_layout);
-
-        adWebView = (WebView)findViewById(R.id.adWebView);
-        closeButton = (ImageButton)findViewById(R.id.closeButton);
-
-        closeButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                finish();
-            }
-        });
-
-        AdWebViewUtils.config(adWebView);
-        adWebView.setWebViewClient(new AdWebViewClient());
-
-        Intent intent = getIntent();
-        loadAdFromIntent(intent);
-
-        LocalBroadcastManager.getInstance(this).sendBroadcast(new Intent(AdInterstitial.AD_INTERSTITIAL_DISPLAYED));
-    }
-
-    private void loadAdFromIntent(Intent intent) {
-        AdDataModel dataModel = AdDataModel.fromIntentExtra(intent);
-        if (dataModel != null) {
-            AdResponse response = new AdResponse(0, dataModel, null);
-            adWebView.loadDataWithBaseURL(null, response.getDataModel().getMarkup(), "text/html", "utf-8", null);
-        }
-    }
-
-    @Override
-    public void finish() {
-        broadcastReceiver.unregister();
-        LocalBroadcastManager.getInstance(this).sendBroadcast(new Intent(AdInterstitial.AD_INTERSTITIAL_DISMISSED));
-        super.finish();
-    }
-
-    private class AdWebViewClient extends WebViewClient {
-        @Override
-        public boolean shouldOverrideUrlLoading(WebView view, String url) {
-            LocalBroadcastManager.getInstance(AdInterstitialActivity.this)
-                    .sendBroadcast(new Intent(AdInterstitial.AD_INTERSTITIAL_CLICKED));
-            // Open URL using default browser.
-            Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
-            try {
-                AdInterstitialActivity.this.startActivity(intent);
-            } catch (Exception ex) {
-                Log.d(TAG, "Failed to open ad url: " + url, ex);
-            }
-            return true;
-        }
-    }
-
-    private class AdInterstitialActivityBroadcastReceiver extends BroadcastReceiver {
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            loadAdFromIntent(intent);
-        }
-
-        public void register() {
-            IntentFilter adLoadedIntentFilter = new IntentFilter();
-            adLoadedIntentFilter.addAction(AdInterstitial.AD_INTERSTITIAL_LOADED);
-            LocalBroadcastManager.getInstance(AdInterstitialActivity.this).registerReceiver(this, adLoadedIntentFilter);
-
-        }
-
-        public void unregister() {
-            LocalBroadcastManager.getInstance(AdInterstitialActivity.this).unregisterReceiver(this);
-        }
-    }
-}
diff --git a/facebook/src/com/facebook/ads/AdListener.java b/facebook/src/com/facebook/ads/AdListener.java
index 5c2988f07..f3e41c80e 100644
--- a/facebook/src/com/facebook/ads/AdListener.java
+++ b/facebook/src/com/facebook/ads/AdListener.java
@@ -16,15 +16,27 @@
 
 package com.facebook.ads;
 
+/**
+ * AdListener interface is notified of events happened in ad control.
+ */
 public interface AdListener {
 
+    /**
+     * Called when an error happened while the ad control is attempting to load an ad.
+     * @param ad the ad control
+     * @param error the error
+     */
     void onError(Ad ad, AdError error);
 
+    /**
+     * Called when the ad control has loaded an ad.
+     * @param ad the ad control
+     */
     void onAdLoaded(Ad ad);
 
-    void onInterstitialDisplayed(Ad ad);
-
-    void onInterstitialDismissed(Ad ad);
-
-    void onLeaveApplication(Ad ad);
+    /**
+     * Called when the ad control is clicked and user is redirected to the link in the ad.
+     * @param ad the ad control
+     */
+    void onAdClicked(Ad ad);
 }
diff --git a/facebook/src/com/facebook/ads/AdSettings.java b/facebook/src/com/facebook/ads/AdSettings.java
new file mode 100644
index 000000000..08d8722d0
--- /dev/null
+++ b/facebook/src/com/facebook/ads/AdSettings.java
@@ -0,0 +1,161 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.os.Build;
+import android.util.Log;
+import com.facebook.ads.internal.StringUtils;
+
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.UUID;
+
+/**
+ * Global settings for ad controls.
+ */
+public class AdSettings {
+
+    public static final String TAG = AdSettings.class.getSimpleName();
+
+    private static final String PREFS_NAME = "FBAdPrefs";
+    private static final String DEVICE_ID_HASH_PREFS_KEY = "deviceIdHash";
+
+    private static final Collection<String> testDevices;
+    private static final Collection<String> emulatorProducts;
+
+    private static String urlPrefix = null;
+    private static boolean childDirected = false;
+    private static String deviceIdHash = null;
+
+    static {
+        testDevices = new HashSet<String>();
+
+        emulatorProducts = new HashSet<String>();
+        emulatorProducts.add("sdk");
+        emulatorProducts.add("google_sdk");
+        emulatorProducts.add("vbox86p");
+        emulatorProducts.add("vbox86tp");
+    }
+
+    /**
+     * Adds a test device.
+     * <p>
+     * Copy the current device Id from debug log and add it as a test device to get test ads.
+     * Apps running on emulator will automatically get test ads. Test devices should be added
+     * before {@link Ad#loadAd()} is called.
+     *
+     * @param deviceIdHash id of the device to use test mode, can be obtained from debug log
+     */
+    public static void addTestDevice(String deviceIdHash) {
+        testDevices.add(deviceIdHash);
+    }
+
+    /**
+     * Adds a collection of test devices.
+     * <p>
+     * Copy the current device Id from debug log and add it as a test device to get test ads.
+     * Apps running on emulator will automatically get test ads. Test devices should be added
+     * before {@link Ad#loadAd()} is called.
+     *
+     * @param deviceIdHashes ids of the device to use test mode, can be obtained from debug log
+     */
+    public static void addTestDevices(Collection<String> deviceIdHashes) {
+        testDevices.addAll(deviceIdHashes);
+    }
+
+    /**
+     * Clears the collection of test devices.
+     */
+    public static void clearTestDevices() {
+        testDevices.clear();
+    }
+
+    /**
+     * Gets whether ad controls are working in test mode.
+     * @param context android context
+     * @return whether in test mode
+     */
+    public static boolean isTestMode(Context context) {
+        if (emulatorProducts.contains(Build.PRODUCT)) {
+            return true;
+        }
+
+        if (deviceIdHash == null) {
+            SharedPreferences adPrefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
+            deviceIdHash = adPrefs.getString(DEVICE_ID_HASH_PREFS_KEY, null);
+            if (StringUtils.isNullOrEmpty(deviceIdHash)) {
+                deviceIdHash = StringUtils.md5(UUID.randomUUID().toString());
+                adPrefs.edit()
+                        .putString(DEVICE_ID_HASH_PREFS_KEY, deviceIdHash)
+                        .commit();
+            }
+        }
+
+        if (testDevices.contains(deviceIdHash)) {
+            return true;
+        }
+
+        printTestDeviceNotice(deviceIdHash);
+        return false;
+    }
+
+    static volatile boolean testDeviceNoticeDisplayed = false;
+    private static void printTestDeviceNotice(String deviceIdHash) {
+        if (testDeviceNoticeDisplayed) {
+            return;
+        }
+        testDeviceNoticeDisplayed = true;
+        Log.d(TAG, "Test mode device hash: " + deviceIdHash);
+        Log.d(TAG, "When testing your app with Facebook's ad units you must specify the device hashed ID " +
+                "to ensure the delivery of test ads, add the following code before loading an ad: " +
+                "AdSettings.addTestDevice(\"" + deviceIdHash + "\");");
+    }
+
+    /**
+     * Sets the url prefix to use when making requests. This method should never be used in production.
+     * @param urlPrefix url prefix
+     */
+    public static void setUrlPrefix(String urlPrefix) {
+        AdSettings.urlPrefix = urlPrefix;
+    }
+
+    /**
+     * Gets the url prefix.
+     * @return url prefix
+     */
+    public static String getUrlPrefix()  {
+        return urlPrefix;
+    }
+
+    /**
+     * Sets whether the ad control is targeting a child.
+     * @param childDirected whether the ad control is targeting a child
+     */
+    public static void setIsChildDirected(boolean childDirected) {
+        AdSettings.childDirected = childDirected;
+    }
+
+    /**
+     * Gets whether the ad control is targeting a child.
+     * @return whether the ad control is targeting a child
+     */
+    public static boolean isChildDirected() {
+        return childDirected;
+    }
+}
diff --git a/facebook/src/com/facebook/ads/AdSize.java b/facebook/src/com/facebook/ads/AdSize.java
index 7f206d89a..08e0ec6ba 100644
--- a/facebook/src/com/facebook/ads/AdSize.java
+++ b/facebook/src/com/facebook/ads/AdSize.java
@@ -16,6 +16,9 @@
 
 package com.facebook.ads;
 
+/**
+ * AdSize is the dimension of the ad control in DP.
+ */
 public enum AdSize {
 
     BANNER_320_50(320, 50),
@@ -29,10 +32,18 @@ private AdSize(int width, int height) {
         this.height = height;
     }
 
+    /**
+     * Gets the width of the ad control.
+     * @return width of the ad control in DP
+     */
     public int getWidth() {
         return width;
     }
 
+    /**
+     * Gets the height of the ad control.
+     * @return height of the ad control in DP
+     */
     public int getHeight() {
         return height;
     }
diff --git a/facebook/src/com/facebook/ads/AdView.java b/facebook/src/com/facebook/ads/AdView.java
index 22b7c3410..73f9edb38 100644
--- a/facebook/src/com/facebook/ads/AdView.java
+++ b/facebook/src/com/facebook/ads/AdView.java
@@ -1,56 +1,47 @@
 /**
  * Copyright 2010-present Facebook.
- * 
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
- * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
- * specific language governing permissions and limitations under the License.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 package com.facebook.ads;
 
 import android.content.Context;
-import android.content.Intent;
 import android.net.Uri;
 import android.os.Bundle;
 import android.os.Parcelable;
+import android.util.DisplayMetrics;
 import android.util.Log;
 import android.view.ViewGroup;
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
 import android.widget.RelativeLayout;
-
-import com.facebook.FacebookRequestError;
-import com.facebook.ads.internal.AdDataModel;
-import com.facebook.ads.internal.AdRequest;
-import com.facebook.ads.internal.AdRequestController;
-import com.facebook.ads.internal.AdResponse;
-import com.facebook.ads.internal.AdWebViewUtils;
+import com.facebook.ads.internal.*;
+import com.facebook.ads.internal.action.AdAction;
+import com.facebook.ads.internal.action.AdActionFactory;
 
 /**
  * View that displays advertisement by Facebook.
- * 
- * It can be included in layout XML file: <code>
- *   <com.facebook.ads.AdView
- *         android:id="@+id/adView"
- *         android:layout_width="wrap_content"
- *         android:layout_height="wrap_content"
- *         ad:placement_id="PLACEMENT_ID"
- *         ad:ad_size="BANNER_320_50" />
- * </code>
- * 
- * It can also be declared and added to view: <code>
- *     AdView adView = new AdView(context, "PLACEMENT_ID", AdSize.BANNER_320_50);
+ * <p>
+ * It can be declared and added to view:
+ * <code>
+ *     AdView adView = new AdView(context, "YOUR_PLACEMENT_ID", AdSize.BANNER_320_50);
  *     addView(adView);
  * </code>
- * 
- * AdView requires android.permission.INTERNET permission to make network requests. If
- * android.permission.ACCESS_NETWORK_STATE permission is granted, AdView will only make network requests when network is
- * connected.
+ *
+ * AdView requires android.permission.INTERNET permission to make network requests.
+ * If android.permission.ACCESS_NETWORK_STATE permission is granted, AdView will only
+ * make network requests when network is connected.
  */
 public class AdView extends RelativeLayout implements Ad {
 
@@ -68,37 +59,16 @@
 
     private WebView adWebView;
 
-    private AdDataModel loadedAdDataModel = null;
-
-    private final String userAgentString;
-    private final AdRequestController adRequestController;
-
-    public AdView(Context context) {
-        this(context, null, AdSize.BANNER_320_50);
-    }
+    private HtmlAdDataModel loadedAdDataModel = null;
 
-    /*
-    public AdView(Context context, AttributeSet attrs) {
-        super(context, attrs);
-
-        if (attrs != null) {
-            TypedArray a = getContext().obtainStyledAttributes(attrs, R.styleable.com_facebook_ad_view);
-            try {
-                placementId = a.getString(R.styleable.com_facebook_ad_view_placement_id);
-
-                String adSizeString = a.getString(R.styleable.com_facebook_ad_view_ad_size);
-                adSize = AdSize.valueOf(adSizeString.toUpperCase());
-            } finally {
-                a.recycle();
-            }
-        }
+    private AdRequestController adRequestController;
 
-        initializeView(context);
-        userAgentString = adWebView.getSettings().getUserAgentString();
-        adRequestController = new AdRequestController(getContext(), placementId, adSize, userAgentString,
-                createAdRequestListener());
-    }
-    */
+    /**
+     * Constructs an AdView using the given context, placement_id and size.
+     * @param context Android context
+     * @param placementId id of ad placement
+     * @param adSize size of the ad control
+     */
     public AdView(Context context, String placementId, AdSize adSize) {
         super(context);
 
@@ -106,9 +76,6 @@ public AdView(Context context, String placementId, AdSize adSize) {
         this.adSize = adSize;
 
         initializeView(context);
-        userAgentString = adWebView.getSettings().getUserAgentString();
-        adRequestController = new AdRequestController(getContext(), placementId, adSize, userAgentString,
-                createAdRequestListener());
     }
 
     private void initializeView(Context context) {
@@ -118,12 +85,19 @@ private void initializeView(Context context) {
 
         RelativeLayout.LayoutParams layoutParams;
         if (adSize == AdSize.INTERSTITIAL) {
-            layoutParams = new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,
+            layoutParams = new RelativeLayout.LayoutParams(
+                    ViewGroup.LayoutParams.MATCH_PARENT,
                     ViewGroup.LayoutParams.MATCH_PARENT);
         } else {
-            float density = context.getResources().getDisplayMetrics().density;
-            layoutParams = new RelativeLayout.LayoutParams((int) Math.ceil(adSize.getWidth() * density),
-                    (int) Math.ceil(adSize.getHeight() * density));
+            DisplayMetrics metrics = context.getResources().getDisplayMetrics();
+            float density = metrics.density;
+            int screenWidth = (int) (metrics.widthPixels / density);
+            layoutParams = new RelativeLayout.LayoutParams(
+                    screenWidth >= adSize.getWidth() ?
+                            metrics.widthPixels :
+                            (int) Math.ceil(adSize.getWidth() * density),
+                    (int) Math.ceil(adSize.getHeight() * density)
+            );
         }
         layoutParams.addRule(RelativeLayout.CENTER_HORIZONTAL);
 
@@ -133,55 +107,59 @@ private void initializeView(Context context) {
         AdWebViewUtils.config(adWebView);
         adWebView.setWebViewClient(new AdWebViewClient());
         addView(adWebView);
+
+        adRequestController = new AdRequestController(getContext(), placementId, adSize,
+                true, AdType.HTML, createAdRequestCallback());
     }
 
-    private AdRequest.AdRequestListener createAdRequestListener() {
-        return new AdRequest.AdRequestListener() {
-            @Override
-            public void onLoading() {
-                // Do nothing.
-            }
+    private AdRequest.Callback createAdRequestCallback() {
+        return new AdRequest.Callback() {
 
             @Override
-            public void onError(FacebookRequestError error) {
+            public void onError(AdError error) {
                 // Continue showing the previous ad in case of error.
                 updateView();
                 if (adListener != null) {
-                    adListener.onError(AdView.this, new AdError(error.getErrorCode(), error.getErrorMessage()));
+                    adListener.onError(AdView.this, error);
                 }
             }
 
             @Override
             public void onCompleted(AdResponse adResponse) {
-                AdDataModel adDataModel = adResponse.getDataModel();
-                if (adDataModel != null) {
+                AdDataModel dataModel = adResponse.getDataModel();
+                if (dataModel != null && dataModel instanceof HtmlAdDataModel) {
                     // Received an ad
-                    loadedAdDataModel = adDataModel;
+                    loadedAdDataModel = (HtmlAdDataModel) dataModel;
                     updateView();
                     if (adListener != null) {
                         adListener.onAdLoaded(AdView.this);
                     }
+                } else if (dataModel == null) {
+                    updateView();
+                    if (adListener != null) {
+                        adListener.onError(
+                                AdView.this,
+                                adResponse.getError() != null ? adResponse.getError() : AdError.INTERNAL_ERROR
+                        );
+                    }
                 } else {
-                    Log.d(TAG, "Ad request succeeded but no ad at this time.");
                     updateView();
                     if (adListener != null) {
-                        adListener.onError(AdView.this, adResponse.getError());
+                        adListener.onError(AdView.this, AdError.INTERNAL_ERROR);
                     }
                 }
             }
         };
     }
 
-    @Override
+    /**
+     * Sets an AdListener to be notified on events happened in control lifecycle.
+     * @param adListener the listener
+     */
     public void setAdListener(AdListener adListener) {
         this.adListener = adListener;
     }
 
-    @Override
-    public void setTestMode(boolean testMode) {
-        adRequestController.setTestMode(testMode);
-    }
-
     @Override
     public void loadAd() {
         loadAd(null);
@@ -189,15 +167,21 @@ public void loadAd() {
 
     @Override
     public void loadAd(AdTargetingOptions adTargetingOptions) {
+        ensureAdRequestController();
         adRequestController.loadAd(adTargetingOptions);
     }
 
+    private void ensureAdRequestController() {
+        if (adRequestController == null) {
+            throw new RuntimeException("No request controller available, has the AdView been destroyed?");
+        }
+    }
+
     private void updateView() {
         if (loadedAdDataModel != null) {
-            adWebView.clearView();
+            adWebView.loadUrl("about:blank");
             adWebView.setVisibility(GONE);
-            adWebView.loadDataWithBaseURL(null, loadedAdDataModel.getMarkup(), DEFAULT_MIME_TYPE, DEFAULT_ENCODING,
-                    null);
+            adWebView.loadDataWithBaseURL(AdWebViewUtils.WEBVIEW_BASE_URL, loadedAdDataModel.getMarkup(), DEFAULT_MIME_TYPE, DEFAULT_ENCODING, null);
             adWebView.setVisibility(VISIBLE);
         } else {
             adWebView.setVisibility(GONE);
@@ -206,7 +190,10 @@ private void updateView() {
 
     @Override
     public void destroy() {
-        adRequestController.destroy();
+        if (adRequestController != null) {
+            adRequestController.destroy();
+            adRequestController = null;
+        }
     }
 
     @Override
@@ -226,7 +213,7 @@ protected void onRestoreInstanceState(Parcelable state) {
         if (state.getClass() != Bundle.class) {
             super.onRestoreInstanceState(state);
         } else {
-            Bundle instanceState = (Bundle) state;
+            Bundle instanceState = (Bundle)state;
             super.onRestoreInstanceState(instanceState.getParcelable(SUPER_STATE_KEY));
 
             Bundle adRequestControllerBundle = instanceState.getParcelable(AD_REQUEST_CONTROLLER_KEY);
@@ -236,9 +223,9 @@ protected void onRestoreInstanceState(Parcelable state) {
 
             Bundle loadedAdDataModelBundle = instanceState.getParcelable(LOADED_AD_DATA_MODEL_KEY);
             if (loadedAdDataModelBundle != null) {
-                AdDataModel savedAdDataModel = null;
+                HtmlAdDataModel savedAdDataModel = null;
                 try {
-                    savedAdDataModel = AdDataModel.fromBundle(loadedAdDataModelBundle);
+                    savedAdDataModel = HtmlAdDataModel.fromBundle(loadedAdDataModelBundle);
                 } catch (Exception ex) {
                     Log.w(TAG, "Error restoring ad data model.", ex);
                 }
@@ -253,23 +240,32 @@ protected void onRestoreInstanceState(Parcelable state) {
     @Override
     protected void onWindowVisibilityChanged(int visibility) {
         super.onWindowVisibilityChanged(visibility);
-        adRequestController.onWindowVisibilityChanged(visibility);
+        if (adRequestController != null) {
+            adRequestController.onWindowVisibilityChanged(visibility);
+        }
     }
 
     private class AdWebViewClient extends WebViewClient {
+
         @Override
         public boolean shouldOverrideUrlLoading(WebView view, String url) {
             if (adListener != null) {
-                adListener.onLeaveApplication(AdView.this);
+                adListener.onAdClicked(AdView.this);
             }
-            // Open URL using default browser.
-            Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
-            try {
-                getContext().startActivity(intent);
-            } catch (Exception ex) {
-                Log.d(TAG, "Failed to open ad url: " + url, ex);
+
+            Uri uri = Uri.parse(url);
+            AdAction adAction = AdActionFactory.getAdAction(getContext(), uri);
+            if (adAction != null) {
+                try {
+                    adAction.execute();
+                } catch (Exception ex) {
+                    Log.e(TAG, "Error executing action", ex);
+                }
             }
+
             return true;
         }
+
+
     }
 }
diff --git a/facebook/src/com/facebook/ads/InterstitialAd.java b/facebook/src/com/facebook/ads/InterstitialAd.java
new file mode 100644
index 000000000..782bfc78d
--- /dev/null
+++ b/facebook/src/com/facebook/ads/InterstitialAd.java
@@ -0,0 +1,225 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.support.v4.content.LocalBroadcastManager;
+import android.util.DisplayMetrics;
+import android.view.Display;
+import android.view.WindowManager;
+import com.facebook.ads.internal.*;
+
+import java.util.UUID;
+
+/**
+ * InterstitialAd displays advertisement by Facebook in an interstitial.
+ * <p>
+ * To use the interstitial, do the following:
+ * <code>
+ *     InterstitialAd interstitial = new InterstitialAd(context, PLACEMENT_ID);
+ *     interstitial.setAdListener(new InterstitialAdListener() {
+ *         public void onAdLoaded(Ad ad) {
+ *             if (ad == interstitial) {
+ *                 interstitial.show();
+ *             }
+ *         }
+ *         // rest of InterstitialAdListener implementation omitted
+ *     });
+ *     interstitial.loadAd();
+ * </code>
+ */
+public class InterstitialAd implements Ad {
+
+    public static final String INTERSTITIAL_DISPLAYED = "com.facebook.ads.interstitial.displayed";
+    public static final String INTERSTITIAL_DISMISSED = "com.facebook.ads.interstitial.dismissed";
+    public static final String INTERSTITIAL_CLICKED = "com.facebook.ads.interstitial.clicked";
+
+    public static final String INTERSTITIAL_UNIQUE_ID_EXTRA = "adInterstitialUniqueId";
+    public static final String DISPLAY_ROTATION_INTENT_EXTRA = "displayRotation";
+    public static final String DISPLAY_WIDTH_INTENT_EXTRA = "displayWidth";
+    public static final String DISPLAY_HEIGHT_INTENT_EXTRA = "displayHeight";
+
+    private final Context context;
+    private final String uniqueId;
+    private AdRequestController adRequestController;
+    private final AdInterstitialBroadcastReceiver broadcastReceiver;
+
+    private InterstitialAdListener adListener;
+    private boolean adLoaded = false;
+    private AdResponse adResponse;
+
+    /**
+     * Constructs an InterstitialAd using the given context and placement id.
+     * @param context android context
+     * @param placementId id of ad placement
+     */
+    public InterstitialAd(Context context, String placementId) {
+        this.context = context;
+        uniqueId = UUID.randomUUID().toString();
+
+        adRequestController = new AdRequestController(this.context, placementId, AdSize.INTERSTITIAL,
+                false, AdType.HTML, new AdRequest.Callback() {
+
+            @Override
+            public void onCompleted(AdResponse adResponse) {
+                InterstitialAd.this.adResponse = adResponse;
+                if (adResponse.getDataModel() != null && adResponse.getDataModel() instanceof HtmlAdDataModel) {
+                    adLoaded = true;
+                    if (adListener != null) {
+                        adListener.onAdLoaded(InterstitialAd.this);
+                    }
+                } else if (adResponse.getDataModel() == null) {
+                    adLoaded = false;
+                    if (adListener != null) {
+                        adListener.onError(
+                                InterstitialAd.this,
+                                adResponse.getError() != null ? adResponse.getError() : AdError.INTERNAL_ERROR
+                        );
+                    }
+                } else {
+                    adLoaded = false;
+                    if (adListener != null) {
+                        adListener.onError(InterstitialAd.this, AdError.INTERNAL_ERROR);
+                    }
+                }
+            }
+
+            @Override
+            public void onError(AdError error) {
+                adLoaded = false;
+                if (adListener != null) {
+                    adListener.onError(InterstitialAd.this, error);
+                }
+            }
+        });
+
+        broadcastReceiver = new AdInterstitialBroadcastReceiver();
+        broadcastReceiver.register();
+    }
+
+    private void ensureAdRequestController() {
+        if (adRequestController == null) {
+            throw new RuntimeException("No request controller available, has the InterstitialAd been destroyed?");
+        }
+    }
+
+    /**
+     * Sets an InterstitialAdListener to be notified on events happened in control lifecycle.
+     * @param adListener the listener
+     */
+    public void setAdListener(InterstitialAdListener adListener) {
+        this.adListener = adListener;
+    }
+
+    @Override
+    public void loadAd() {
+        loadAd(null);
+    }
+
+    @Override
+    public void loadAd(AdTargetingOptions targetingOptions) {
+        ensureAdRequestController();
+        adLoaded = false;
+        adRequestController.loadAd(targetingOptions);
+    }
+
+    @Override
+    public void destroy() {
+        if (adRequestController != null) {
+            adRequestController.destroy();
+            adRequestController = null;
+            broadcastReceiver.unregister();
+        }
+    }
+
+    /**
+     * Gets whether an ad is loaded and ready to show.
+     * @return whether an ad is loaded
+     */
+    public boolean isAdLoaded() {
+        return adLoaded;
+    }
+
+    /**
+     * Shows the interstitial ad. If no ad is loaded, returns false.
+     */
+    public boolean show() {
+        if (!adLoaded) {
+            if (adListener != null) {
+                adListener.onError(this, new AdError(2001,
+                        "Interstitial ad units must be loaded with loadAd() before calling show()"));
+            }
+            return false;
+        }
+
+        Intent intent = new Intent(context, InterstitialAdActivity.class);
+        if (adLoaded) {
+            ((HtmlAdDataModel) adResponse.getDataModel()).addToIntentExtra(intent);
+        }
+
+        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
+        Display display = wm.getDefaultDisplay();
+        DisplayMetrics displayMetrics = new DisplayMetrics();
+        display.getMetrics(displayMetrics);
+        intent.putExtra(DISPLAY_ROTATION_INTENT_EXTRA, display.getRotation());
+        intent.putExtra(DISPLAY_WIDTH_INTENT_EXTRA, displayMetrics.widthPixels);
+        intent.putExtra(DISPLAY_HEIGHT_INTENT_EXTRA, displayMetrics.heightPixels);
+        intent.putExtra(INTERSTITIAL_UNIQUE_ID_EXTRA, uniqueId);
+        context.startActivity(intent);
+
+        return true;
+    }
+
+    private class AdInterstitialBroadcastReceiver extends BroadcastReceiver {
+
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            if (adListener == null) {
+                return;
+            }
+
+            String uniqueId = intent.getStringExtra(INTERSTITIAL_UNIQUE_ID_EXTRA);
+            if (!InterstitialAd.this.uniqueId.equals(uniqueId)) {
+                return;
+            }
+
+            String action = intent.getAction();
+            if (INTERSTITIAL_CLICKED.equals(action)) {
+                adListener.onAdClicked(InterstitialAd.this);
+            } else if (INTERSTITIAL_DISMISSED.equals(action)) {
+                adListener.onInterstitialDismissed(InterstitialAd.this);
+            } else if (INTERSTITIAL_DISPLAYED.equals(action)) {
+                adListener.onInterstitialDisplayed(InterstitialAd.this);
+            }
+        }
+
+        public void register() {
+            IntentFilter interstitialIntentFilter = new IntentFilter();
+            interstitialIntentFilter.addAction(INTERSTITIAL_DISPLAYED);
+            interstitialIntentFilter.addAction(INTERSTITIAL_DISMISSED);
+            interstitialIntentFilter.addAction(INTERSTITIAL_CLICKED);
+            LocalBroadcastManager.getInstance(context).registerReceiver(this, interstitialIntentFilter);
+        }
+
+        public void unregister() {
+            LocalBroadcastManager.getInstance(context).unregisterReceiver(this);
+        }
+    }
+}
diff --git a/facebook/src/com/facebook/ads/InterstitialAdActivity.java b/facebook/src/com/facebook/ads/InterstitialAdActivity.java
new file mode 100644
index 000000000..4a2c4d835
--- /dev/null
+++ b/facebook/src/com/facebook/ads/InterstitialAdActivity.java
@@ -0,0 +1,217 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.content.pm.ActivityInfo;
+import android.net.Uri;
+import android.os.Bundle;
+import android.support.v4.content.LocalBroadcastManager;
+import android.util.Log;
+import android.view.Surface;
+import android.view.Window;
+import android.view.WindowManager;
+import android.webkit.WebView;
+import android.webkit.WebViewClient;
+import android.widget.RelativeLayout;
+import com.facebook.ads.internal.AdWebViewUtils;
+import com.facebook.ads.internal.HtmlAdDataModel;
+import com.facebook.ads.internal.action.AdAction;
+import com.facebook.ads.internal.action.AdActionFactory;
+
+/**
+ * InterstitialAdActivity is the Android activity used by InterstitialAd to display the ad.
+ */
+public class InterstitialAdActivity extends Activity {
+
+    private static final String TAG = InterstitialAdActivity.class.getSimpleName();
+
+    private static final String DATA_MODEL_KEY = "dataModel";
+    private static final String LAST_REQUESTED_ORIENTATION_KEY = "lastRequestedOrientation";
+
+    private static final int AD_WEBVIEW_ID = 100001;
+
+    // Reverse portrait/landscape was added in api level 9 in ActivityInfo, redefine to compile for api level 8.
+    private static final int ORIENTATION_REVERSE_PORTRAIT = 9;
+    private static final int ORIENTATION_REVERSE_LANDSCAPE = 8;
+
+    private WebView adWebView;
+
+    private int lastRequestedOrientation;
+    private int displayWidth;
+    private int displayHeight;
+
+    private boolean isRestart = false;
+
+    private HtmlAdDataModel dataModel;
+
+    private String placementId;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        // Hide title and nav bar, must be done before setContentView.
+        requestWindowFeature(Window.FEATURE_NO_TITLE);
+        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
+
+        RelativeLayout relativelayout = new RelativeLayout(this);
+
+        adWebView = new WebView(this);
+        adWebView.setId(AD_WEBVIEW_ID);
+        adWebView.setLayoutParams(new RelativeLayout.LayoutParams(
+                RelativeLayout.LayoutParams.MATCH_PARENT,
+                RelativeLayout.LayoutParams.MATCH_PARENT
+        ));
+        AdWebViewUtils.config(adWebView);
+        adWebView.setWebViewClient(new AdWebViewClient());
+        relativelayout.addView(adWebView);
+
+        setContentView(relativelayout, new RelativeLayout.LayoutParams(
+                RelativeLayout.LayoutParams.MATCH_PARENT,
+                RelativeLayout.LayoutParams.MATCH_PARENT
+        ));
+
+        Intent intent = getIntent();
+        loadAdFromIntentOrSavedState(intent, savedInstanceState);
+
+        sendBroadcastForEvent(InterstitialAd.INTERSTITIAL_DISPLAYED);
+    }
+
+    @Override
+    public void onStart() {
+        super.onStart();
+
+        if (!isRestart) {
+            setScreenOrientation(displayWidth, displayHeight);
+        } else if (lastRequestedOrientation >= 0) {
+            setRequestedOrientation(lastRequestedOrientation);
+            lastRequestedOrientation = -1;
+        }
+        isRestart = false;
+    }
+
+    public void setRequestedOrientation(int requestedOrientation) {
+        lastRequestedOrientation = requestedOrientation;
+        super.setRequestedOrientation(requestedOrientation);
+    }
+
+    private void setScreenOrientation(int displayWidth, int displayHeight) {
+        boolean defaultInPortrait = displayHeight >= displayWidth;
+        int currentOrientation = ((WindowManager) getSystemService(WINDOW_SERVICE)).getDefaultDisplay().getRotation();
+        // Must call setRequestedOrientation once to lock the orientation of current activity.
+        if (defaultInPortrait) {
+            switch (currentOrientation) {
+                case Surface.ROTATION_90:
+                case Surface.ROTATION_180:
+                    setRequestedOrientation(ORIENTATION_REVERSE_PORTRAIT);
+                    break;
+                case Surface.ROTATION_270:
+                default :
+                    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
+            }
+        } else {
+            switch (currentOrientation) {
+                case Surface.ROTATION_180:
+                case Surface.ROTATION_270:
+                    setRequestedOrientation(ORIENTATION_REVERSE_LANDSCAPE);
+                    break;
+                case Surface.ROTATION_90:
+                default :
+                    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
+            }
+        }
+    }
+
+    @Override
+    public void onSaveInstanceState(Bundle savedInstanceState) {
+        super.onSaveInstanceState(savedInstanceState);
+
+        if (dataModel != null) {
+            savedInstanceState.putBundle(DATA_MODEL_KEY, dataModel.saveToBundle());
+        }
+        savedInstanceState.putInt(LAST_REQUESTED_ORIENTATION_KEY, lastRequestedOrientation);
+        savedInstanceState.putString(InterstitialAd.INTERSTITIAL_UNIQUE_ID_EXTRA, placementId);
+    }
+
+    @Override
+    public void onRestart() {
+        super.onRestart();
+        isRestart = true;
+    }
+
+    private void loadAdFromIntentOrSavedState(Intent intent, Bundle savedInstanceState) {
+        if (savedInstanceState != null && savedInstanceState.containsKey(DATA_MODEL_KEY)) {
+            dataModel = HtmlAdDataModel.fromBundle(savedInstanceState.getBundle(DATA_MODEL_KEY));
+            if (dataModel != null) {
+                adWebView.loadDataWithBaseURL(AdWebViewUtils.WEBVIEW_BASE_URL, dataModel.getMarkup(), "text/html", "utf-8", null);
+            }
+            lastRequestedOrientation = savedInstanceState.getInt(LAST_REQUESTED_ORIENTATION_KEY, -1);
+            placementId = savedInstanceState.getString(InterstitialAd.INTERSTITIAL_UNIQUE_ID_EXTRA);
+            isRestart = true;
+            return;
+        }
+
+        displayWidth = intent.getIntExtra(InterstitialAd.DISPLAY_WIDTH_INTENT_EXTRA, 0);
+        displayHeight = intent.getIntExtra(InterstitialAd.DISPLAY_HEIGHT_INTENT_EXTRA, 0);
+        placementId = intent.getStringExtra(InterstitialAd.INTERSTITIAL_UNIQUE_ID_EXTRA);
+        dataModel = HtmlAdDataModel.fromIntentExtra(intent);
+        if (dataModel != null) {
+            adWebView.loadDataWithBaseURL(AdWebViewUtils.WEBVIEW_BASE_URL, dataModel.getMarkup(), "text/html", "utf-8", null);
+        }
+    }
+
+    @Override
+    public void finish() {
+        sendBroadcastForEvent(InterstitialAd.INTERSTITIAL_DISMISSED);
+        super.finish();
+    }
+
+    private void sendBroadcastForEvent(String event) {
+        Intent intent = new Intent(event);
+        intent.putExtra(InterstitialAd.INTERSTITIAL_UNIQUE_ID_EXTRA, placementId);
+        LocalBroadcastManager.getInstance(this).sendBroadcast(intent);
+    }
+
+    private class AdWebViewClient extends WebViewClient {
+
+        private static final String FBAD_CLOSE = "close";
+
+        @Override
+        public boolean shouldOverrideUrlLoading(WebView view, String url) {
+            Uri uri = Uri.parse(url);
+            if (AdWebViewUtils.FBAD_SCHEME.equals(uri.getScheme()) && FBAD_CLOSE.equals(uri.getAuthority())) {
+                InterstitialAdActivity.this.finish();
+                return true;
+            }
+
+            sendBroadcastForEvent(InterstitialAd.INTERSTITIAL_CLICKED);
+
+            AdAction adAction = AdActionFactory.getAdAction(InterstitialAdActivity.this, uri);
+            if (adAction != null) {
+                try {
+                    adAction.execute();
+                } catch (Exception ex) {
+                    Log.e(TAG, "Error executing action", ex);
+                }
+            }
+
+            return true;
+        }
+    }
+}
diff --git a/facebook/src/com/facebook/ads/InterstitialAdListener.java b/facebook/src/com/facebook/ads/InterstitialAdListener.java
new file mode 100644
index 000000000..e3ffbcae0
--- /dev/null
+++ b/facebook/src/com/facebook/ads/InterstitialAdListener.java
@@ -0,0 +1,35 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads;
+
+/**
+ * InterstitialAdListener interface is notified of events happened in InterstitialAd.
+ */
+public interface InterstitialAdListener extends AdListener {
+
+    /**
+     * Called when the interstitial ad control is displayed.
+     * @param ad the ad control
+     */
+    void onInterstitialDisplayed(Ad ad);
+
+    /**
+     * Called when the interstitial ad control is dismissed.
+     * @param ad the ad control
+     */
+    void onInterstitialDismissed(Ad ad);
+}
diff --git a/facebook/src/com/facebook/ads/NativeAd.java b/facebook/src/com/facebook/ads/NativeAd.java
new file mode 100644
index 000000000..9ebe92ee6
--- /dev/null
+++ b/facebook/src/com/facebook/ads/NativeAd.java
@@ -0,0 +1,366 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.os.AsyncTask;
+import android.util.Log;
+import android.widget.ImageView;
+import com.facebook.ads.internal.*;
+import org.json.JSONObject;
+
+import java.io.InputStream;
+import java.net.URL;
+
+/**
+ * NativeAd enables displaying ad creative in custom layout.
+ * <p>
+ * To use NativeAd, do the following:
+ * <code>
+ *     NativeAd nativeAd = new NativeAd(context, PLACEMENT_ID);
+ *     nativeAd.setAdListener(new NativeAdListener() {
+ *         public void onAdLoaded(Ad ad) {
+ *             if (ad == this) {
+ *               // Renders the ad
+ *               String adTitle = getAdTitle();
+ *         }
+ *         // rest of AdListener implementation omitted
+ *     });
+ *     nativeAd.loadAd();
+ * </code>
+ */
+public class NativeAd implements Ad {
+
+    /**
+     * Image creative.
+     */
+    public static class Image {
+
+        private final String url;
+        private final int width;
+        private final int height;
+
+        private Image(String url, int width, int height) {
+            this.url = url;
+            this.width = width;
+            this.height = height;
+        }
+
+        /**
+         * Gets the url of the image.
+         * @return absolute url of the image
+         */
+        public String getUrl() {
+            return url;
+        }
+
+        /**
+         * Gets the width of the image.
+         * @return width of the image in dp
+         */
+        public int getWidth() {
+            return width;
+        }
+
+        /**
+         * Gets the height of the image.
+         * @return height of the image in dp
+         */
+        public int getHeight() {
+            return height;
+        }
+
+        public static Image fromJSONObject(JSONObject dataObject) {
+            if (dataObject == null) {
+                return null;
+            }
+
+            String url = dataObject.optString("url");
+            if (url == null) {
+                return null;
+            }
+            int width = dataObject.optInt("width", 0);
+            int height = dataObject.optInt("height", 0);
+            return new Image(url, width, height);
+        }
+    }
+
+    /**
+     * Rating info.
+     */
+    public static class Rating {
+
+        private final double value;
+        private final double scale;
+
+        private Rating(double value, double scale) {
+            this.value = value;
+            this.scale = scale;
+        }
+
+        /**
+         * Gets the rating value.
+         * @return the rating value
+         */
+        public double getValue() {
+            return value;
+        }
+
+        /**
+         * Gets the rating scale.
+         * @return the rating scale
+         */
+        public double getScale() {
+            return scale;
+        }
+
+        public static Rating fromJSONObject(JSONObject dataObject) {
+            if (dataObject == null) {
+                return null;
+            }
+
+            double value = dataObject.optDouble("width", 0.0);
+            double scale = dataObject.optDouble("height", 0.0);
+            return new Rating(value, scale);
+        }
+    }
+
+    private static final String TAG = NativeAd.class.getSimpleName();
+
+    private final Context context;
+
+    private AdRequestController adRequestController;
+    private AdListener adListener;
+
+    private volatile boolean loadRequested;
+    private boolean adLoaded;
+    private NativeAdDataModel adDataModel;
+
+    public NativeAd(Context context, String placementId) {
+        this.context = context;
+
+        adRequestController = new AdRequestController(this.context, placementId, AdSize.INTERSTITIAL,
+                false, AdType.NATIVE, new AdRequest.Callback() {
+            @Override
+            public void onCompleted(AdResponse adResponse) {
+                if (!(adResponse.getDataModel() instanceof NativeAdDataModel)) {
+                    if (adListener != null) {
+                        adListener.onError(NativeAd.this, AdError.INTERNAL_ERROR);
+                    }
+                }
+                adDataModel = (NativeAdDataModel) adResponse.getDataModel();
+                if (adDataModel != null && adDataModel.isValid()) {
+                    adLoaded = true;
+                    if (adListener != null) {
+                        adListener.onAdLoaded(NativeAd.this);
+                    }
+                } else if (adDataModel == null) {
+                    adLoaded = false;
+                    if (adListener != null) {
+                        adListener.onError(
+                                NativeAd.this,
+                                adResponse.getError() != null ? adResponse.getError() : AdError.INTERNAL_ERROR
+                        );
+                    }
+                } else {
+                    adLoaded = false;
+                    adDataModel = null;
+                    if (adListener != null) {
+                        adListener.onError(NativeAd.this, AdError.MISSING_PROPERTIES);
+                    }
+                }
+            }
+
+            @Override
+            public void onError(AdError error) {
+                adLoaded = false;
+                if (adListener != null) {
+                    adListener.onError(NativeAd.this, error);
+                }
+            }
+        });
+    }
+
+    private void ensureAdRequestController() {
+        if (adRequestController == null) {
+            throw new RuntimeException("No request controller available, has the NativeAd been destroyed?");
+        }
+    }
+
+    /**
+     * Sets an AdListener to be notified on events happened in control lifecycle.
+     * @param adListener the listener
+     */
+    public void setAdListener(AdListener adListener) {
+        this.adListener = adListener;
+    }
+
+    @Override
+    public void loadAd() {
+        loadAd(null);
+    }
+
+    @Override
+    public void loadAd(AdTargetingOptions adTargetingOptions) {
+        if (loadRequested) {
+            throw new IllegalStateException("Ad already loaded");
+        }
+        loadRequested = true;
+        ensureAdRequestController();
+        adRequestController.loadAd(adTargetingOptions);
+    }
+
+    @Override
+    public void destroy() {
+        if (adRequestController != null) {
+            adRequestController.destroy();
+            adRequestController = null;
+        }
+    }
+
+    /**
+     * Gets whether an ad is loaded and ready to show.
+     * @return whether an ad is loaded
+     */
+    public boolean isAdLoaded() {
+        return adLoaded;
+    }
+
+    /**
+     * Logs the ad impression.
+     */
+    public void logImpression() {
+        adDataModel.logImpression(context);
+    }
+
+    /**
+     * Handles click on the ad.
+     */
+    public void handleClick() {
+        if (adListener != null) {
+            adListener.onAdClicked(this);
+        }
+        adDataModel.handleClick(context);
+    }
+
+    /**
+     * Gets the icon creative.
+     * @return the ad icon
+     */
+    public Image getAdIcon() {
+        if (!adLoaded) {
+            return null;
+        }
+        return adDataModel.getIcon();
+    }
+
+    /**
+     * Gets the cover image creative.
+     * @return the ad cover image
+     */
+    public Image getAdCoverImage() {
+        if (!adLoaded) {
+            return null;
+        }
+        return adDataModel.getImage();
+    }
+
+    /**
+     * Gets the title.
+     * @return the ad title
+     */
+    public String getAdTitle() {
+        if (!adLoaded) {
+            return null;
+        }
+        return adDataModel.getTitle();
+    }
+
+    /**
+     * Gets the body, usually a longer description of the ad.
+     * @return the ad body
+     */
+    public String getAdBody() {
+        if (!adLoaded) {
+            return null;
+        }
+        return adDataModel.getBody();
+    }
+
+    /**
+     * Gets the call to action phrase.
+     * @return the call to action phrase
+     */
+    public String getAdCallToAction() {
+        if (!adLoaded) {
+            return null;
+        }
+        return adDataModel.getCallToAction();
+    }
+
+    /**
+     * Gets the social context.
+     * @return the social content sentence
+     */
+    public String getAdSocialContext() {
+        if (!adLoaded) {
+            return null;
+        }
+        return adDataModel.getSocialContext();
+    }
+
+    /**
+     * Gets the star rating.
+     * @return the star rating
+     */
+    public Rating getAdStarRating() {
+        if (!adLoaded) {
+            return null;
+        }
+        return adDataModel.getStarRating();
+    }
+
+    /**
+     * Helper AsyncTask to download image.
+     */
+    public static class DownloadImageTask extends AsyncTask<String, Void, Bitmap> {
+
+        private final ImageView imageView;
+
+        public DownloadImageTask(ImageView imageView) {
+            this.imageView = imageView;
+        }
+
+        protected Bitmap doInBackground(String... urls) {
+            String url = urls[0];
+            Bitmap bitmap = null;
+            try {
+                InputStream input = new URL(url).openStream();
+                bitmap = BitmapFactory.decodeStream(input);
+            } catch (Exception ex) {
+                Log.e(TAG, "Error downloading image: " + url, ex);
+            }
+            return bitmap;
+        }
+
+        protected void onPostExecute(Bitmap result) {
+            imageView.setImageBitmap(result);
+        }
+    }
+}
diff --git a/facebook/src/com/facebook/ads/internal/AdAnalogData.java b/facebook/src/com/facebook/ads/internal/AdAnalogData.java
new file mode 100644
index 000000000..c1d635446
--- /dev/null
+++ b/facebook/src/com/facebook/ads/internal/AdAnalogData.java
@@ -0,0 +1,137 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads.internal;
+
+import android.app.ActivityManager;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.hardware.Sensor;
+import android.hardware.SensorEvent;
+import android.hardware.SensorEventListener;
+import android.hardware.SensorManager;
+import android.os.BatteryManager;
+import android.os.Environment;
+import android.os.StatFs;
+import android.text.format.Formatter;
+
+import java.io.File;
+import java.util.HashMap;
+import java.util.Map;
+
+public class AdAnalogData {
+
+    private static AdSensorEventListener sensorEventListener = null;
+    private static SensorManager sensorManager = null;
+    private static Sensor accelerometer = null;
+    private static volatile float[] sensorValues;
+
+    public synchronized static void registerSensorListener(Context context) {
+        if (sensorEventListener != null) {
+            return;
+        }
+        if (sensorManager == null) {
+            sensorManager = (SensorManager) context.getSystemService(Context.SENSOR_SERVICE);
+            if (sensorManager == null) {
+                return;
+            }
+        }
+        if (accelerometer == null) {
+            accelerometer = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
+            if (accelerometer == null) {
+                return;
+            }
+        }
+        sensorEventListener = new AdSensorEventListener();
+        sensorManager.registerListener(sensorEventListener, accelerometer, SensorManager.SENSOR_DELAY_NORMAL);
+    }
+
+    public synchronized static void unregisterSensorListener() {
+        if (sensorEventListener == null || sensorManager == null) {
+            return;
+        }
+        sensorManager.unregisterListener(sensorEventListener);
+        sensorEventListener = null;
+    }
+
+    public static Map<String, Object> getAnalogInfo(Context context) {
+        Map<String, Object> analogInfo = new HashMap<String, Object>();
+        putMemoryInfo(context, analogInfo);
+        putDiskInfo(context, analogInfo);
+        putBatteryData(context, analogInfo);
+        putSensorData(analogInfo);
+
+        return analogInfo;
+    }
+
+    private static void putMemoryInfo(Context context, Map<String, Object> analogInfo) {
+        ActivityManager.MemoryInfo mi = new ActivityManager.MemoryInfo();
+        ActivityManager activityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
+        activityManager.getMemoryInfo(mi);
+        analogInfo.put("available_memory", String.valueOf(mi.availMem));
+    }
+
+    private static void putDiskInfo(Context context, Map<String, Object> analogInfo) {
+        File path = Environment.getDataDirectory();
+        StatFs stat = new StatFs(path.getPath());
+        long blockSize = stat.getBlockSize();
+        long availableBlocks = stat.getAvailableBlocks();
+        analogInfo.put("free_space", Formatter.formatFileSize(context, availableBlocks * blockSize));
+    }
+
+    private static void putBatteryData(Context context, Map<String, Object> analogInfo) {
+        Intent batteryIntent = context.registerReceiver(null, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));
+        if (batteryIntent == null) {
+            return;
+        }
+
+        int level = batteryIntent.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);
+        int scale = batteryIntent.getIntExtra(BatteryManager.EXTRA_SCALE, -1);
+
+        float batteryLevel = 0;
+        if (scale > 0) {
+            batteryLevel = ((float) level / (float) scale) * 100;
+        }
+
+        analogInfo.put("battery", batteryLevel);
+    }
+
+    private static void putSensorData(Map<String, Object> analogInfo) {
+        float[] currentSensorValues = sensorValues;
+        if (currentSensorValues == null || currentSensorValues.length == 0) {
+            return;
+        }
+
+        for (int i = 0; i < currentSensorValues.length; i++) {
+            analogInfo.put("sensor_" + i, currentSensorValues[i]);
+        }
+    }
+
+    public static class AdSensorEventListener implements SensorEventListener {
+
+        @Override
+        public void onSensorChanged(SensorEvent event) {
+            sensorValues = event.values;
+            AdAnalogData.unregisterSensorListener();
+        }
+
+        @Override
+        public void onAccuracyChanged(Sensor sensor, int accuracy) {
+            // ignore
+        }
+    }
+}
diff --git a/facebook/src/com/facebook/ads/internal/AdDataModel.java b/facebook/src/com/facebook/ads/internal/AdDataModel.java
index a1430d0ff..2178c8bd5 100644
--- a/facebook/src/com/facebook/ads/internal/AdDataModel.java
+++ b/facebook/src/com/facebook/ads/internal/AdDataModel.java
@@ -16,62 +16,11 @@
 
 package com.facebook.ads.internal;
 
-import android.content.Intent;
-import android.os.Bundle;
+import java.util.Collection;
 
-public class AdDataModel {
+public interface AdDataModel {
 
-    private static final String MARKUP_KEY = "markup";
-    private static final String STORE_ID_KEY = "storeId";
-    private static final String STORE_TYPE_KEY = "storeType";
+    public AdInvalidationBehavior getInvalidationBehavior();
 
-    private final String markup;
-    private final String storeId;
-    private final String storeType;
-
-    public AdDataModel(String markup, String storeId, String storeType) {
-        this.markup = markup;
-        this.storeId = storeId;
-        this.storeType = storeType;
-    }
-
-    public String getMarkup() {
-        return markup;
-    }
-
-    public String getStoreId() {
-        return storeId;
-    }
-
-    public String getStoreType() {
-        return storeType;
-    }
-
-    public Bundle saveToBundle() {
-        Bundle instanceState = new Bundle();
-        instanceState.putString(MARKUP_KEY, markup);
-        instanceState.putString(STORE_ID_KEY, storeId);
-        instanceState.putString(STORE_TYPE_KEY, storeType);
-        return instanceState;
-    }
-
-    public void addToIntentExtra(Intent intent) {
-        intent.putExtra(MARKUP_KEY, markup);
-        intent.putExtra(STORE_ID_KEY, storeId);
-        intent.putExtra(STORE_TYPE_KEY, storeType);
-    }
-
-    public static AdDataModel fromBundle(Bundle instanceState) {
-        String markup = instanceState.getString(MARKUP_KEY);
-        String storeId = instanceState.getString(STORE_ID_KEY);
-        String storeType = instanceState.getString(STORE_TYPE_KEY);
-        return new AdDataModel(markup, storeId, storeType);
-    }
-
-    public static AdDataModel fromIntentExtra(Intent intent) {
-        String markup = intent.getStringExtra(MARKUP_KEY);
-        String storeId = intent.getStringExtra(STORE_ID_KEY);
-        String storeType = intent.getStringExtra(STORE_TYPE_KEY);
-        return new AdDataModel(markup, storeId, storeType);
-    }
+    public Collection<String> getDetectionStrings();
 }
diff --git a/facebook/src/com/facebook/ads/internal/AdInvalidationBehavior.java b/facebook/src/com/facebook/ads/internal/AdInvalidationBehavior.java
new file mode 100644
index 000000000..1fdeb9871
--- /dev/null
+++ b/facebook/src/com/facebook/ads/internal/AdInvalidationBehavior.java
@@ -0,0 +1,36 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads.internal;
+
+import java.util.Locale;
+
+public enum AdInvalidationBehavior {
+    NONE,
+    INSTALLED,
+    NOT_INSTALLED;
+
+    public static AdInvalidationBehavior fromString(String invalidationBehaviorStr) {
+        if (StringUtils.isNullOrEmpty(invalidationBehaviorStr)) {
+            return AdInvalidationBehavior.NONE;
+        }
+        try {
+            return AdInvalidationBehavior.valueOf(invalidationBehaviorStr.toUpperCase(Locale.US));
+        } catch (IllegalArgumentException ex) {
+            return AdInvalidationBehavior.NONE;
+        }
+    }
+}
diff --git a/facebook/src/com/facebook/ads/internal/AdInvalidationUtils.java b/facebook/src/com/facebook/ads/internal/AdInvalidationUtils.java
new file mode 100644
index 000000000..3eb9306bc
--- /dev/null
+++ b/facebook/src/com/facebook/ads/internal/AdInvalidationUtils.java
@@ -0,0 +1,81 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads.internal;
+
+import android.content.Context;
+import android.content.pm.PackageManager;
+import org.json.JSONArray;
+
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Set;
+
+public class AdInvalidationUtils {
+
+    public static boolean shouldInvalidate(Context context, AdDataModel dataModel) {
+        AdInvalidationBehavior invalidationBehavior = dataModel.getInvalidationBehavior();
+        if (invalidationBehavior == null || invalidationBehavior == AdInvalidationBehavior.NONE) {
+            return false;
+        }
+
+        boolean packageInstalled = false;
+        Collection<String> detectionStrings = dataModel.getDetectionStrings();
+        if (detectionStrings == null || detectionStrings.isEmpty()) {
+            return false;
+        }
+
+        for (String packageName : detectionStrings) {
+            if (isNativePackageInstalled(context, packageName)) {
+                packageInstalled = true;
+                break;
+            }
+        }
+        if (invalidationBehavior == AdInvalidationBehavior.INSTALLED) {
+            return packageInstalled;
+        } else if (invalidationBehavior == AdInvalidationBehavior.NOT_INSTALLED) {
+            return !packageInstalled;
+        }
+        return false;
+    }
+
+    public static boolean isNativePackageInstalled(Context context, String packageName) {
+        if (StringUtils.isNullOrEmpty(packageName)) {
+            return false;
+        }
+
+        PackageManager pm = context.getPackageManager();
+        try {
+            pm.getPackageInfo(packageName, PackageManager.GET_ACTIVITIES);
+            return true;
+        } catch (PackageManager.NameNotFoundException e) {
+            // Expected when package is not installed.
+            return false;
+        }
+    }
+
+    public static Collection<String> parseDetectionStrings(JSONArray detectionStrings) {
+        if (detectionStrings == null || detectionStrings.length() == 0) {
+            return null;
+        }
+
+        Set<String> results = new HashSet<String>();
+        for (int i = 0; i < detectionStrings.length(); i++) {
+            results.add(detectionStrings.optString(i));
+        }
+        return results;
+    }
+}
diff --git a/facebook/src/com/facebook/ads/internal/AdRequest.java b/facebook/src/com/facebook/ads/internal/AdRequest.java
index d75558e3a..78ec9d7ba 100644
--- a/facebook/src/com/facebook/ads/internal/AdRequest.java
+++ b/facebook/src/com/facebook/ads/internal/AdRequest.java
@@ -17,22 +17,47 @@
 package com.facebook.ads.internal;
 
 import android.content.Context;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
+import android.os.AsyncTask;
 import android.os.Build;
-import android.os.Bundle;
+import android.util.DisplayMetrics;
 import android.util.Log;
-import com.facebook.*;
+import android.view.Display;
+import android.view.WindowManager;
+import com.facebook.ads.AdError;
+import com.facebook.ads.AdSettings;
 import com.facebook.ads.AdSize;
+import org.json.JSONObject;
+import org.json.JSONTokener;
+
+import java.io.*;
+import java.net.HttpURLConnection;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.net.URLEncoder;
+import java.util.HashMap;
+import java.util.Map;
 
 public class AdRequest {
 
-    public interface AdRequestListener {
-        void onLoading();
+    public interface Callback {
         void onCompleted(AdResponse adResponse);
-        void onError(FacebookRequestError error);
+        void onError(AdError error);
     }
 
     private static final String TAG = AdRequest.class.getSimpleName();
-    private static final String ADS_ENDPOINT = "ads";
+
+    private static final String GRAPH_URL_BASE = "https://graph.facebook.com";
+    private static final String GRAPH_URL_BASE_PREFIX_FORMAT = "http://graph.%s.facebook.com";
+    private static final String ADS_ENDPOINT = "network_ads";
+    private static final String NATIVE_ADS_ENDPOINT = "network_ads_native";
+
+    private static final String DEFAULT_ENCODING = "utf-8";
+    private static final String OS = "Android";
+
+    private static final String AD_TYPE_PARAM = "ad_type";
+    private static final String SDK_CAPABILITIES_PARAM = "sdk_capabilities";
 
     private static final String PLACEMENT_ID_PARAM = "placement_id";
     private static final String ATTRIBUTION_ID_PARAM = "attribution_id";
@@ -41,8 +66,15 @@
     private static final String TEST_MODE_PARAM = "test_mode";
 
     private static final String DEVICE_ID_PARAM = "device_id";
-    private static final String USER_AGENT_PARAM = "user_agent";
+    private static final String DEVICE_ID_TRACKING_ENABLED_PARAM = "tracking_enabled";
+    private static final String OS_PARAM = "os";
     private static final String OS_VERSION_PARAM = "os_version";
+    private static final String SCREEN_WIDTH_PARAM = "screen_width";
+    private static final String SCREEN_HEIGHT_PARAM = "screen_height";
+    private static final String APP_BUILD_PARAM = "app_build";
+    private static final String APP_VERSION_PARAM = "app_version";
+
+    private static final String CHILD_DIRECTED_PARAM = "child_directed";
 
     private static final String PACKAGE_NAME_PARAM = "package_name";
 
@@ -51,38 +83,55 @@
     private final AdSize adSize;
     private final String userAgentString;
 
-    private final AdRequestListener listener;
+    private final Callback callback;
 
+    private final AdType adType;
     private final boolean testMode;
 
-    public AdRequest(Context context, String placementId, AdSize adSize, String userAgentString,
-            AdRequestListener listener, boolean testMode) {
+    public AdRequest(Context context, String placementId, AdSize adSize,
+            AdType adType, boolean testMode, Callback callback) {
         this.context = context;
         this.placementId = placementId;
         this.adSize = adSize;
-        this.userAgentString = userAgentString;
-        this.listener = listener;
+        this.userAgentString = AdWebViewUtils.getUserAgentString(context);
+        this.adType = adType;
         this.testMode = testMode;
+        this.callback = callback;
 
         validate();
     }
 
-    public RequestAsyncTask executeAsync() {
-        Request.Callback adRequestCallback = new Request.Callback() {
+    private String getAdsEndpoint() {
+        switch (adType) {
+            case NATIVE:
+                return NATIVE_ADS_ENDPOINT;
+            case HTML:
+            default:
+                return ADS_ENDPOINT;
+        }
+    }
+
+    public AsyncTask executeAsync() {
+        AdAnalogData.registerSensorListener(context);
+        AsyncTask<Void, Void, AdRequestResponse> asyncTask = new AsyncTask<Void, Void, AdRequestResponse>() {
+            @Override
+            protected AdRequestResponse doInBackground(Void... params) {
+                return executeConnectionAndWait();
+            }
+
             @Override
-            public void onCompleted(Response response) {
-                if (response.getError() != null) {
-                    Log.e(TAG, response.getError().getErrorMessage(), response.getError().getException());
-                    listener.onError(response.getError());
+            protected void onPostExecute(AdRequestResponse response) {
+                if (response == null) {
+                    callback.onError(AdError.INTERNAL_ERROR);
+                } else if (response.error != null) {
+                    callback.onError(response.error);
                 } else {
-                    AdResponse adResponse = AdResponse.fromJSONObject(response.getGraphObject().getInnerJSONObject());
-                    listener.onCompleted(adResponse);
+                    AdResponse adResponse = AdResponse.parseResponse(context, response.body);
+                    callback.onCompleted(adResponse);
                 }
             }
         };
-        Request request = new Request(null, ADS_ENDPOINT, getRequestParameters(), HttpMethod.POST, adRequestCallback);
-        listener.onLoading();
-        return request.executeAsync();
+        return asyncTask.execute();
     }
 
     private void validate() {
@@ -92,33 +141,183 @@ private void validate() {
         if (adSize == null) {
             throw new IllegalArgumentException("adSize");
         }
-        if (listener == null) {
-            throw new IllegalArgumentException("listener");
+        if (callback == null) {
+            throw new IllegalArgumentException("callback");
+        }
+    }
+
+    private Map<String, Object> getRequestParameters() {
+        Map<String, Object> params = new HashMap<String, Object>();
+
+        params.put(AD_TYPE_PARAM, adType.getValue());
+        params.put(SDK_CAPABILITIES_PARAM, AdSdkCapability.getSupportedCapabilities());
+        params.put(PLACEMENT_ID_PARAM, placementId);
+        params.put(ATTRIBUTION_ID_PARAM, AdUtilities.getAttributionId(context.getContentResolver()));
+        params.put(WIDTH_PARAM, adSize.getWidth());
+        params.put(HEIGHT_PARAM, adSize.getHeight());
+        params.put(TEST_MODE_PARAM, testMode);
+        params.put(CHILD_DIRECTED_PARAM, AdSettings.isChildDirected());
+
+        addDeviceInfoParams(params);
+        addAppInfoParams(params);
+
+        addAdvertisingInfoParams(params);
+
+        return params;
+    }
+
+    private void addDeviceInfoParams(Map<String, Object> params) {
+        params.put(OS_PARAM, OS);
+        params.put(OS_VERSION_PARAM, Build.VERSION.RELEASE);
+
+        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
+        Display display = wm.getDefaultDisplay();
+        DisplayMetrics metrics = new DisplayMetrics();
+        display.getMetrics(metrics);
+        float density = metrics.density;
+        int screenWidth = (int) (metrics.widthPixels / density);
+        int screenHeight = (int) (metrics.heightPixels / density);
+        params.put(SCREEN_WIDTH_PARAM, screenWidth);
+        params.put(SCREEN_HEIGHT_PARAM, screenHeight);
+
+        try {
+            PackageInfo pInfo = context.getPackageManager().getPackageInfo(context.getPackageName(), 0);
+            params.put(APP_BUILD_PARAM, pInfo.versionCode);
+            params.put(APP_VERSION_PARAM, pInfo.versionName);
+        } catch (PackageManager.NameNotFoundException e) {
+            params.put(APP_VERSION_PARAM, 0);
         }
     }
 
-    private Bundle getRequestParameters() {
-        Bundle bundle = new Bundle();
-        bundle.putString(PLACEMENT_ID_PARAM, placementId);
-        bundle.putString(ATTRIBUTION_ID_PARAM, Settings.getAttributionId(context.getContentResolver()));
-        bundle.putInt(WIDTH_PARAM, adSize.getWidth());
-        bundle.putInt(HEIGHT_PARAM, adSize.getHeight());
-        bundle.putBoolean(TEST_MODE_PARAM, testMode);
+    private void addAdvertisingInfoParams(Map<String, Object> params) {
+        AdvertisingIdInfo advertisingIdInfo = AdvertisingIdInfo.getAdvertisingIdInfo(context);
+        if (advertisingIdInfo == null) {
+            params.put(DEVICE_ID_TRACKING_ENABLED_PARAM, true);
+            return;
+        }
 
-        addDeviceInfoParams(bundle);
-        addAppInfoParams(bundle);
+        params.put(DEVICE_ID_TRACKING_ENABLED_PARAM, !advertisingIdInfo.isLimitAdTrackingEnabled());
+        if (!advertisingIdInfo.isLimitAdTrackingEnabled()) {
+            params.put(DEVICE_ID_PARAM, advertisingIdInfo.getId());
+        }
+    }
 
-        return bundle;
+    private void addAppInfoParams(Map<String, Object> params) {
+        params.put(PACKAGE_NAME_PARAM, context.getPackageName());
     }
 
-    private void addDeviceInfoParams(Bundle bundle) {
-        bundle.putString(DEVICE_ID_PARAM, android.provider.Settings.Secure.getString(context.getContentResolver(),
-                android.provider.Settings.Secure.ANDROID_ID));
-        bundle.putString(OS_VERSION_PARAM, Build.VERSION.SDK);
-        bundle.putString(USER_AGENT_PARAM, userAgentString);
+    private URL getUrlForRequest() throws MalformedURLException {
+        String urlBase;
+        String urlPrefix = AdSettings.getUrlPrefix();
+        if (StringUtils.isNullOrEmpty(urlPrefix)) {
+            urlBase = GRAPH_URL_BASE;
+        } else {
+            urlBase = String.format(GRAPH_URL_BASE_PREFIX_FORMAT, urlPrefix);
+        }
+        return new URL(String.format("%s/%s", urlBase, getAdsEndpoint()));
+    }
+
+    private String getQueryString(Map<String, Object> params) throws UnsupportedEncodingException
+    {
+        StringBuilder sb = new StringBuilder(512);
+        boolean first = true;
+
+        for (Map.Entry<String, Object> entry : params.entrySet())
+        {
+            if (first) {
+                first = false;
+            } else {
+                sb.append("&");
+            }
+
+            sb.append(URLEncoder.encode(entry.getKey(), DEFAULT_ENCODING))
+              .append("=")
+              .append(URLEncoder.encode(String.valueOf(entry.getValue()), DEFAULT_ENCODING));
+        }
+
+        return sb.toString();
+    }
+
+    private HttpURLConnection makeRequest() throws IOException {
+        URL url = getUrlForRequest();
+        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
+        connection.setRequestProperty("User-Agent", userAgentString);
+        connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
+        connection.setRequestMethod("POST");
+        connection.setDoOutput(true);
+        connection.setConnectTimeout(0);
+        connection.setReadTimeout(0);
+
+        Map<String, Object> params = getRequestParameters();
+        String queryString = getQueryString(params);
+
+        OutputStream outputStream = new BufferedOutputStream(connection.getOutputStream());
+        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(outputStream, DEFAULT_ENCODING));
+        writer.write(queryString);
+        writer.flush();
+        writer.close();
+        outputStream.close();
+
+        connection.connect();
+        return connection;
+    }
+
+    public AdRequestResponse executeConnectionAndWait() {
+        InputStream stream = null;
+        HttpURLConnection connection = null;
+        try {
+            connection = makeRequest();
+            if (connection.getResponseCode() >= 400) {
+                stream = connection.getErrorStream();
+            } else {
+                stream = connection.getInputStream();
+            }
+
+            return createResponsesFromStream(stream);
+        } catch (IOException ex) {
+            AdRequestResponse response = new AdRequestResponse();
+            response.error = new AdError(AdError.INVALID_ERROR_CODE, ex.getMessage());
+            return response;
+        } catch (Exception ex) {
+            Log.e(TAG, "Unexpected error", ex);
+            AdRequestResponse response = new AdRequestResponse();
+            response.error = AdError.INTERNAL_ERROR;
+            return response;
+        } finally {
+            AdUtilities.closeQuietly(stream);
+            if (connection != null) {
+                connection.disconnect();
+            }
+        }
+    }
+
+    private AdRequestResponse createResponsesFromStream(InputStream stream) {
+        AdRequestResponse response = new AdRequestResponse();
+
+        try {
+            String responseString = AdUtilities.readStreamToString(stream);
+            JSONTokener tokener = new JSONTokener(responseString);
+            Object resultObject = tokener.nextValue();
+            if (resultObject instanceof JSONObject) {
+                JSONObject jsonObject = (JSONObject) resultObject;
+                if (jsonObject.has("error")) {
+                    JSONObject error = (JSONObject) AdUtilities.getStringPropertyAsJSON(jsonObject, "error");
+                    int errorCode = error.optInt("code", AdError.INVALID_ERROR_CODE);
+                    String errorMessage = error.optString("message", null);
+                    response.error = new AdError(errorCode, errorMessage);
+                } else {
+                    response.body = jsonObject;
+                    response.error = null;
+                }
+            }
+        } catch (Exception ex) {
+            response.error = new AdError(AdError.INVALID_ERROR_CODE, ex.getMessage());
+        }
+        return response;
     }
 
-    private void addAppInfoParams(Bundle bundle) {
-        bundle.putString(PACKAGE_NAME_PARAM, context.getPackageName());
+    private static class AdRequestResponse {
+        JSONObject body = null;
+        AdError error = null;
     }
 }
diff --git a/facebook/src/com/facebook/ads/internal/AdRequestController.java b/facebook/src/com/facebook/ads/internal/AdRequestController.java
index 9567218ba..a631036e8 100644
--- a/facebook/src/com/facebook/ads/internal/AdRequestController.java
+++ b/facebook/src/com/facebook/ads/internal/AdRequestController.java
@@ -26,56 +26,57 @@
 import android.os.AsyncTask;
 import android.os.Bundle;
 import android.os.Handler;
-import android.util.Log;
 import android.view.View;
-import com.facebook.FacebookRequestError;
-import com.facebook.RequestAsyncTask;
+import com.facebook.ads.AdError;
+import com.facebook.ads.AdSettings;
 import com.facebook.ads.AdSize;
 import com.facebook.ads.AdTargetingOptions;
 
 public class AdRequestController {
 
     private static final String TAG = AdRequestController.class.getSimpleName();
-    private static final int REFRESH_INTERVAL_MIN_SECONDS = 30;
+    private static final int MIN_REFRESH_INTERVAL_MILLIS = 30000;
 
     private static final String REFRESH_INTERVAL_KEY = "AdRequestController_refreshInterval";
-    private static final String INITIAL_LOAD_REQUESTED_KEY = "AdRequestController_initialLoadRequested";
+    private static final String INITIAL_LOAD_FINISHED_KEY = "AdRequestController_initialLoadFinished";
+
+    private static final String ANDROID_PERMISSION_ACCESS_NETWORK_STATE = "android.permission.ACCESS_NETWORK_STATE";
 
     private final Context context;
     private final String placementId;
     private final AdSize adSize;
-    private final String userAgentString;
-    private final AdRequest.AdRequestListener adViewRequestListener;
-    private boolean testMode;
-    private boolean shouldRefresh = true;
+    private final AdRequest.Callback adViewRequestCallback;
+    private final AdType adType;
+    private final boolean shouldRefresh;
     private AdTargetingOptions targetingOptions;
-    private final ScreenStateReceiver screenStateReceiver = new ScreenStateReceiver();
+    private final ScreenStateReceiver screenStateReceiver;
 
-    private int refreshInterval = REFRESH_INTERVAL_MIN_SECONDS;
-    private boolean initialLoadRequested = false;
+    private int refreshInterval = MIN_REFRESH_INTERVAL_MILLIS;
+    private boolean initialLoadFinished = false;
 
     private volatile boolean refreshScheduled = false;
-    private Handler handler;
-    private Runnable refreshRunnable;
+    private final Handler handler;
+    private final Runnable refreshRunnable;
 
-    private RequestAsyncTask lastRequest;
+    private AsyncTask lastRequest;
 
     private int currentVisibility = View.GONE;
 
-    public AdRequestController(Context context, String placementId, AdSize adSize, String userAgentString,
-            AdRequest.AdRequestListener adViewRequestListener) {
+    public AdRequestController(Context context, String placementId, AdSize adSize,
+            boolean shouldRefresh, AdType adType, AdRequest.Callback adViewRequestCallback) {
         this.context = context;
         this.placementId = placementId;
         this.adSize = adSize;
-        this.userAgentString = userAgentString;
-        this.adViewRequestListener = adViewRequestListener;
+        this.shouldRefresh = shouldRefresh;
+        this.adType = adType;
+        this.adViewRequestCallback = adViewRequestCallback;
         targetingOptions = null;
+        screenStateReceiver = new ScreenStateReceiver();
 
         handler = new Handler();
         refreshRunnable = new Runnable() {
             @Override
             public void run() {
-                Log.d(TAG, "Refreshing ad");
                 refreshScheduled = false;
                 loadAd(targetingOptions);
             }
@@ -85,33 +86,38 @@ public void run() {
     }
 
     private void registerScreenStateReceiver() {
+        if (!shouldRefresh) {
+            return;
+        }
+
         IntentFilter filter = new IntentFilter(Intent.ACTION_SCREEN_ON);
         filter.addAction(Intent.ACTION_SCREEN_OFF);
         context.registerReceiver(screenStateReceiver, filter);
     }
 
     private void unregisterScreenStateReceiver() {
+        if (!shouldRefresh) {
+            return;
+        }
+
         context.unregisterReceiver(screenStateReceiver);
     }
 
     private synchronized void scheduleRefresh(String reason) {
         if (!shouldRefresh) {
-            Log.d(TAG, "should not schedule refresh");
             return;
         }
 
-        Log.d(TAG, "schedule refresh " + reason);
         if (refreshInterval > 0) {
             if (refreshScheduled) {
                 return;
             }
-            handler.postDelayed(refreshRunnable, refreshInterval * 1000);
+            handler.postDelayed(refreshRunnable, refreshInterval);
             refreshScheduled = true;
         }
     }
 
     private synchronized void cancelRefresh(String reason) {
-        Log.d(TAG, "cancel refresh " + reason);
         if (!refreshScheduled) {
             return;
         }
@@ -119,32 +125,16 @@ private synchronized void cancelRefresh(String reason) {
         refreshScheduled = false;
     }
 
-    public void setTestMode(boolean testMode) {
-        this.testMode = testMode;
-    }
-
-    public void setShouldRefresh(boolean shouldRefresh) {
-        this.shouldRefresh = shouldRefresh;
-        if (shouldRefresh) {
-            scheduleRefresh("should start refresh");
-        } else {
-            cancelRefresh("should stop refresh");
-        }
-    }
-
     public void loadAd(AdTargetingOptions targetingOptions) {
         this.targetingOptions = targetingOptions;
 
-        initialLoadRequested = true;
-
         if (lastRequest != null && lastRequest.getStatus() != AsyncTask.Status.FINISHED) {
             lastRequest.cancel(true);
         }
 
         if (!isNetworkConnected()) {
-            refreshInterval = REFRESH_INTERVAL_MIN_SECONDS;
-            adViewRequestListener.onError(new FacebookRequestError(
-                    FacebookRequestError.INVALID_ERROR_CODE, "network unavailable", "network unavailable"));
+            refreshInterval = MIN_REFRESH_INTERVAL_MILLIS;
+            adViewRequestCallback.onError(new AdError(AdError.INVALID_ERROR_CODE, "network unavailable"));
             scheduleRefresh("no network connection");
             return;
         }
@@ -153,27 +143,25 @@ public void loadAd(AdTargetingOptions targetingOptions) {
                 context,
                 placementId,
                 adSize,
-                userAgentString,
-                new AdRequest.AdRequestListener() {
-                    @Override
-                    public void onLoading() {
-                        adViewRequestListener.onLoading();
-                    }
+                adType,
+                AdSettings.isTestMode(context),
+                new AdRequest.Callback() {
 
                     @Override
-                    public void onError(FacebookRequestError error) {
-                        adViewRequestListener.onError(error);
+                    public void onError(AdError error) {
+                        adViewRequestCallback.onError(error);
+                        initialLoadFinished = true;
                         scheduleRefresh("onError");
                     }
 
                     @Override
                     public void onCompleted(AdResponse adResponse) {
-                        refreshInterval = adResponse.getRefreshInterval();
-                        adViewRequestListener.onCompleted(adResponse);
+                        refreshInterval = adResponse.getRefreshIntervalMillis();
+                        adViewRequestCallback.onCompleted(adResponse);
+                        initialLoadFinished = true;
                         scheduleRefresh("onCompleted");
                     }
-                },
-                testMode
+                }
         );
         lastRequest = adRequest.executeAsync();
     }
@@ -186,23 +174,23 @@ public void destroy() {
     public Bundle onSaveInstanceState() {
         Bundle instanceState = new Bundle();
         instanceState.putInt(REFRESH_INTERVAL_KEY, refreshInterval);
-        instanceState.putBoolean(INITIAL_LOAD_REQUESTED_KEY, initialLoadRequested);
+        instanceState.putBoolean(INITIAL_LOAD_FINISHED_KEY, initialLoadFinished);
         return instanceState;
     }
 
     public void onRestoreInstanceState(Bundle instanceState) {
-        refreshInterval = instanceState.getInt(REFRESH_INTERVAL_KEY, REFRESH_INTERVAL_MIN_SECONDS);
-        initialLoadRequested = instanceState.getBoolean(INITIAL_LOAD_REQUESTED_KEY, false);
+        refreshInterval = instanceState.getInt(REFRESH_INTERVAL_KEY, MIN_REFRESH_INTERVAL_MILLIS);
+        initialLoadFinished = instanceState.getBoolean(INITIAL_LOAD_FINISHED_KEY, false);
     }
 
     public void onWindowVisibilityChanged(int visibility) {
         currentVisibility = visibility;
         if (visibility == View.VISIBLE) {
             // When the window first becomes visible (no ad has been requested), we don't want to schedule
-            // a refresh at that time.
+            // a refresh at that time. Wait until the initial load has finished.
             // When returning to the app from play store, onRestoreInstanceState() is not called so we need
             // to schedule a refresh to keep new ads coming.
-            if (initialLoadRequested) {
+            if (initialLoadFinished) {
                 scheduleRefresh("onWindowVisibilityChanged");
             }
         } else {
@@ -211,8 +199,7 @@ public void onWindowVisibilityChanged(int visibility) {
     }
 
     private boolean isNetworkConnected() {
-        String permission = "android.permission.ACCESS_NETWORK_STATE";
-        int result = context.checkCallingOrSelfPermission(permission);
+        int result = context.checkCallingOrSelfPermission(ANDROID_PERMISSION_ACCESS_NETWORK_STATE);
         if (result != PackageManager.PERMISSION_GRANTED) {
             return true;
         }
@@ -225,9 +212,10 @@ private boolean isNetworkConnected() {
     private class ScreenStateReceiver extends BroadcastReceiver {
         @Override
         public void onReceive(Context context, Intent intent) {
-            if (intent.getAction().equals(Intent.ACTION_SCREEN_OFF)) {
+            String action  = intent.getAction();
+            if (Intent.ACTION_SCREEN_OFF.equals(action)) {
                 cancelRefresh(intent.getAction());
-            } else if (intent.getAction().equals(Intent.ACTION_SCREEN_ON)) {
+            } else if (Intent.ACTION_SCREEN_ON.equals(action)) {
                 if (currentVisibility == View.VISIBLE) {
                     scheduleRefresh(intent.getAction());
                 }
diff --git a/facebook/src/com/facebook/ads/internal/AdResponse.java b/facebook/src/com/facebook/ads/internal/AdResponse.java
index 8cf67e7f8..df1e3c535 100644
--- a/facebook/src/com/facebook/ads/internal/AdResponse.java
+++ b/facebook/src/com/facebook/ads/internal/AdResponse.java
@@ -16,47 +16,46 @@
 
 package com.facebook.ads.internal;
 
+import android.content.Context;
 import com.facebook.ads.AdError;
+import org.json.JSONArray;
 import org.json.JSONObject;
 
+import java.util.ArrayList;
+import java.util.List;
+
 public class AdResponse {
 
-    private static final String TAG = AdResponse.class.getSimpleName();
     private static final int DEFAULT_REFRESH_INTERVAL_SECONDS = 0;
 
-    private final int refreshInterval;
-    private final AdDataModel dataModel;
+    private final int refreshIntervalMillis;
+    private final List<AdDataModel> dataModels;
     private final AdError error;
 
-    public AdResponse(int refreshInterval, AdDataModel dataModel, AdError error) {
-        this.refreshInterval = refreshInterval;
-        this.dataModel = dataModel;
+    private AdResponse(int refreshIntervalMillis, List<AdDataModel> dataModels, AdError error) {
+        this.refreshIntervalMillis = refreshIntervalMillis;
+        this.dataModels = dataModels;
         this.error = error;
     }
 
-    public int getRefreshInterval() {
-        return refreshInterval;
+    public int getRefreshIntervalMillis() {
+        return refreshIntervalMillis;
     }
 
     public AdDataModel getDataModel() {
-        return dataModel;
+        if (dataModels == null || dataModels.isEmpty()) {
+            return null;
+        }
+        return dataModels.get(0);
     }
 
     public AdError getError() {
         return error;
     }
 
-    public static AdResponse fromJSONObject(JSONObject jsonObject) {
-        int refreshInterval = jsonObject.optInt("refresh", DEFAULT_REFRESH_INTERVAL_SECONDS);
-
-        AdDataModel data = null;
-        JSONObject dataObject = jsonObject.optJSONObject("data");
-        if (dataObject != null) {
-            String markup = dataObject.optString("markup");
-            String storeId = dataObject.optString("store_id");
-            String storeType = dataObject.optString("store_type");
-            data = new AdDataModel(markup, storeId, storeType);
-        }
+    public static AdResponse parseResponse(Context context, JSONObject jsonObject) {
+        // Server returns refresh interval in seconds
+        int refreshIntervalInMilli = jsonObject.optInt("refresh", DEFAULT_REFRESH_INTERVAL_SECONDS) * 1000;
 
         AdError error = null;
         JSONObject errorObject = jsonObject.optJSONObject("reason");
@@ -64,6 +63,29 @@ public static AdResponse fromJSONObject(JSONObject jsonObject) {
             error = new AdError(errorObject.optInt("code"), errorObject.optString("message"));
         }
 
-        return new AdResponse(refreshInterval, data, error);
+        int adType = jsonObject.optInt("ad_type");
+        List<AdDataModel> dataModels =  new ArrayList<AdDataModel>();
+        JSONArray adsArray = jsonObject.optJSONArray("ads");
+        if (adsArray != null && adsArray.length() > 0) {
+            for (int i = 0; i < adsArray.length(); i++) {
+                AdDataModel dataModel = null;
+                if (adType == AdType.HTML.getValue()) {
+                    JSONObject dataObject = adsArray.optJSONObject(i).optJSONObject("data");
+                    dataModel = HtmlAdDataModel.fromJSONObject(dataObject);
+                } else if (adType == AdType.NATIVE.getValue()) {
+                    JSONObject dataObject = adsArray.optJSONObject(i).optJSONObject("metadata");
+                    dataModel = NativeAdDataModel.fromJSONObject(dataObject);
+                }
+                if (dataModel != null && !AdInvalidationUtils.shouldInvalidate(context, dataModel)) {
+                    dataModels.add(dataModel);
+                }
+            }
+            if (dataModels.isEmpty()) {
+                // All ads have been invalidated
+                error = AdError.CLIENT_INVALIDATION;
+            }
+        }
+
+        return new AdResponse(refreshIntervalInMilli, dataModels, error);
     }
 }
diff --git a/facebook/src/com/facebook/ads/internal/AdSdkCapability.java b/facebook/src/com/facebook/ads/internal/AdSdkCapability.java
new file mode 100644
index 000000000..60b3e2bf7
--- /dev/null
+++ b/facebook/src/com/facebook/ads/internal/AdSdkCapability.java
@@ -0,0 +1,59 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads.internal;
+
+import org.json.JSONArray;
+
+enum AdSdkCapability {
+
+    APP_AD(0),
+    LINK_AD(1),
+    APP_AD_V2(2),
+    LINK_AD_V2(3),
+    APP_ENGAGEMENT_AD(4),
+    AD_CHOICES(5);
+
+    private final int value;
+
+    private AdSdkCapability(int value) {
+        this.value = value;
+    }
+
+    int getValue() {
+        return value;
+    }
+
+    private static final AdSdkCapability[] supportedCapabilities = new AdSdkCapability[] {
+            APP_ENGAGEMENT_AD,
+            LINK_AD_V2,
+            AD_CHOICES
+    };
+
+    private static final String supportedCapabilitiesStr;
+
+    static {
+        JSONArray array = new JSONArray();
+        for (AdSdkCapability supportedCapability : supportedCapabilities) {
+            array.put(supportedCapability.getValue());
+        }
+        supportedCapabilitiesStr = array.toString();
+    }
+
+    public static String getSupportedCapabilities() {
+        return supportedCapabilitiesStr;
+    }
+}
diff --git a/facebook/src/com/facebook/ads/internal/AdType.java b/facebook/src/com/facebook/ads/internal/AdType.java
new file mode 100644
index 000000000..3487af026
--- /dev/null
+++ b/facebook/src/com/facebook/ads/internal/AdType.java
@@ -0,0 +1,32 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads.internal;
+
+public enum AdType {
+    HTML(0),
+    NATIVE(1);
+
+    private final int value;
+
+    private AdType(int value) {
+        this.value = value;
+    }
+
+    public int getValue() {
+        return value;
+    }
+}
diff --git a/facebook/src/com/facebook/ads/internal/AdUtilities.java b/facebook/src/com/facebook/ads/internal/AdUtilities.java
new file mode 100644
index 000000000..5a61b8379
--- /dev/null
+++ b/facebook/src/com/facebook/ads/internal/AdUtilities.java
@@ -0,0 +1,145 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads.internal;
+
+import android.content.ContentResolver;
+import android.database.Cursor;
+import android.net.Uri;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.json.JSONTokener;
+
+import java.io.*;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.Map;
+
+class AdUtilities {
+
+    private static final String TAG = AdUtilities.class.getSimpleName();
+
+    private static final Uri ATTRIBUTION_ID_CONTENT_URI =
+            Uri.parse("content://com.facebook.katana.provider.AttributionIdProvider");
+    private static final String ATTRIBUTION_ID_COLUMN_NAME = "aid";
+
+    public static String readStreamToString(InputStream inputStream) throws IOException {
+        BufferedInputStream bufferedInputStream = null;
+        InputStreamReader reader = null;
+        try {
+            bufferedInputStream = new BufferedInputStream(inputStream);
+            reader = new InputStreamReader(bufferedInputStream);
+            StringBuilder stringBuilder = new StringBuilder();
+
+            final int bufferSize = 1024 * 2;
+            char[] buffer = new char[bufferSize];
+            int n;
+            while ((n = reader.read(buffer)) != -1) {
+                stringBuilder.append(buffer, 0, n);
+            }
+
+            return stringBuilder.toString();
+        } finally {
+            AdUtilities.closeQuietly(bufferedInputStream);
+            AdUtilities.closeQuietly(reader);
+        }
+    }
+
+    public static void closeQuietly(Closeable closeable) {
+        if (closeable == null) {
+            return;
+        }
+
+        try {
+            closeable.close();
+        } catch (IOException ioe) {
+            // ignore quietly
+        }
+    }
+
+    public static String jsonEncode(Map<String, Object> analogInfo) {
+        JSONObject jsonObject = new JSONObject();
+        for (Map.Entry<String, Object> entry : analogInfo.entrySet()) {
+            try {
+                jsonObject.put(entry.getKey(), entry.getValue());
+            } catch (JSONException e) {
+                e.printStackTrace();
+            }
+        }
+        return jsonObject.toString();
+    }
+
+    public static Object getStringPropertyAsJSON(JSONObject jsonObject, String key) throws JSONException {
+        Object value = jsonObject.opt(key);
+        if (value != null && value instanceof String) {
+            JSONTokener tokener = new JSONTokener((String) value);
+            value = tokener.nextValue();
+        }
+
+        if (value != null && !(value instanceof JSONObject || value instanceof JSONArray)) {
+            throw new IllegalArgumentException(key);
+        }
+
+        return value;
+    }
+
+    /**
+     * Acquire the current attribution id from the facebook app.
+     * @return returns null if the facebook app is not present on the phone.
+     */
+    public static String getAttributionId(ContentResolver contentResolver) {
+        try {
+            String [] projection = {ATTRIBUTION_ID_COLUMN_NAME};
+            Cursor c = contentResolver.query(ATTRIBUTION_ID_CONTENT_URI, projection, null, null, null);
+            if (c == null || !c.moveToFirst()) {
+                return null;
+            }
+            String attributionId = c.getString(c.getColumnIndex(ATTRIBUTION_ID_COLUMN_NAME));
+            c.close();
+            return attributionId;
+        } catch (Exception e) {
+            return null;
+        }
+    }
+
+    public static Method getMethod(Class<?> clazz, String methodName, Class<?>... parameterTypes) {
+        try {
+            return clazz.getMethod(methodName, parameterTypes);
+        } catch (NoSuchMethodException ex) {
+            return null;
+        }
+    }
+
+    public static Method getMethod(String className, String methodName, Class<?>... parameterTypes) {
+        try {
+            Class<?> clazz = Class.forName(className);
+            return getMethod(clazz, methodName, parameterTypes);
+        } catch (ClassNotFoundException ex) {
+            return null;
+        }
+    }
+
+    public static Object invokeMethod(Object receiver, Method method, Object... args) {
+        try {
+            return method.invoke(receiver, args);
+        } catch (IllegalAccessException ex) {
+            return null;
+        } catch (InvocationTargetException ex) {
+            return null;
+        }
+    }
+}
diff --git a/facebook/src/com/facebook/ads/internal/AdWebViewInterface.java b/facebook/src/com/facebook/ads/internal/AdWebViewInterface.java
new file mode 100644
index 000000000..6ef6a872b
--- /dev/null
+++ b/facebook/src/com/facebook/ads/internal/AdWebViewInterface.java
@@ -0,0 +1,32 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads.internal;
+
+import android.content.Context;
+
+public class AdWebViewInterface {
+
+    private final Context context;
+
+    public AdWebViewInterface(Context context) {
+        this.context = context;
+    }
+
+    public String getAnalogInfo() {
+        return AdUtilities.jsonEncode(AdAnalogData.getAnalogInfo(context));
+    }
+}
diff --git a/facebook/src/com/facebook/ads/internal/AdWebViewUtils.java b/facebook/src/com/facebook/ads/internal/AdWebViewUtils.java
index f0dace7e2..fb9001606 100644
--- a/facebook/src/com/facebook/ads/internal/AdWebViewUtils.java
+++ b/facebook/src/com/facebook/ads/internal/AdWebViewUtils.java
@@ -16,10 +16,17 @@
 
 package com.facebook.ads.internal;
 
+import android.content.Context;
 import android.webkit.WebView;
 
 public class AdWebViewUtils {
 
+	public static final String WEBVIEW_BASE_URL = "http://www.facebook.com/";
+
+    public static final String FBAD_SCHEME = "fbad";
+
+    private static String userAgentString = null;
+
     public static void config(WebView adWebView) {
         adWebView.getSettings().setJavaScriptEnabled(true);
         adWebView.getSettings().setSupportZoom(false);
@@ -27,5 +34,15 @@ public static void config(WebView adWebView) {
         adWebView.setHorizontalScrollbarOverlay(false);
         adWebView.setVerticalScrollBarEnabled(false);
         adWebView.setVerticalScrollbarOverlay(false);
+        adWebView.addJavascriptInterface(new AdWebViewInterface(adWebView.getContext()), "AdControl");
+    }
+
+    public static String getUserAgentString(Context context) {
+        if (userAgentString == null) {
+            WebView webView = new WebView(context.getApplicationContext());
+            userAgentString = webView.getSettings().getUserAgentString();
+            webView.destroy();
+        }
+        return userAgentString;
     }
 }
diff --git a/facebook/src/com/facebook/ads/internal/AdvertisingIdInfo.java b/facebook/src/com/facebook/ads/internal/AdvertisingIdInfo.java
new file mode 100644
index 000000000..0cbc71d16
--- /dev/null
+++ b/facebook/src/com/facebook/ads/internal/AdvertisingIdInfo.java
@@ -0,0 +1,93 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads.internal;
+
+import android.content.Context;
+import android.os.Looper;
+
+import java.lang.reflect.Method;
+
+public class AdvertisingIdInfo {
+
+    // com.google.android.gms.common.ConnectionResult.SUCCESS
+    private static final int CONNECTION_RESULT_SUCCESS = 0;
+
+    private final String id;
+    private final boolean limitAdTrackingEnabled;
+
+    private AdvertisingIdInfo(String id, boolean limitAdTrackingEnabled) {
+        this.id = id;
+        this.limitAdTrackingEnabled = limitAdTrackingEnabled;
+    }
+
+    public String getId() {
+        return id;
+    }
+
+    public boolean isLimitAdTrackingEnabled() {
+        return limitAdTrackingEnabled;
+    }
+
+    /**
+     * Note: This cannot be called on the UI thread, because AdvertisingIdClient.getAdvertisingIdInfo
+     * throws on UI thread.
+     *
+     * @param context
+     * @return
+     */
+    public static AdvertisingIdInfo getAdvertisingIdInfo(Context context) {
+        if (Looper.myLooper() == Looper.getMainLooper()) {
+            throw new IllegalStateException("Cannot get advertising info on main thread.");
+        }
+
+        Method isGooglePlayServicesAvailable = AdUtilities.getMethod(
+                "com.google.android.gms.common.GooglePlayServicesUtil",
+                "isGooglePlayServicesAvailable",
+                Context.class
+        );
+        if (isGooglePlayServicesAvailable == null) {
+            return null;
+        }
+        Object connectionResult = AdUtilities.invokeMethod(null, isGooglePlayServicesAvailable, context);
+        if (connectionResult == null || (Integer) connectionResult != CONNECTION_RESULT_SUCCESS) {
+            return null;
+        }
+
+        Method getAdvertisingIdInfo = AdUtilities.getMethod(
+                "com.google.android.gms.ads.identifier.AdvertisingIdClient",
+                "getAdvertisingIdInfo",
+                Context.class
+        );
+        if (getAdvertisingIdInfo == null) {
+            return null;
+        }
+        Object advertisingInfo = AdUtilities.invokeMethod(null, getAdvertisingIdInfo, context);
+        if (advertisingInfo == null) {
+            return null;
+        }
+
+        Method getId = AdUtilities.getMethod(advertisingInfo.getClass(), "getId");
+        Method isLimitAdTrackingEnabled = AdUtilities.getMethod(advertisingInfo.getClass(), "isLimitAdTrackingEnabled");
+        if (getId == null || isLimitAdTrackingEnabled == null) {
+            return null;
+        }
+
+        String id = (String) AdUtilities.invokeMethod(advertisingInfo, getId);
+        Boolean limitAdTrackingEnabled = (Boolean) AdUtilities.invokeMethod(advertisingInfo, isLimitAdTrackingEnabled);
+        return new AdvertisingIdInfo(id, limitAdTrackingEnabled);
+    }
+}
diff --git a/facebook/src/com/facebook/ads/internal/AppSiteData.java b/facebook/src/com/facebook/ads/internal/AppSiteData.java
new file mode 100644
index 000000000..16875d720
--- /dev/null
+++ b/facebook/src/com/facebook/ads/internal/AppSiteData.java
@@ -0,0 +1,87 @@
+package com.facebook.ads.internal;
+
+import org.json.JSONArray;
+import org.json.JSONObject;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+public class AppSiteData {
+
+    private final String packageName;
+    private final String className;
+    private final String appLinkUri;
+    private final List<String> keyHashes;
+    private final String marketUri;
+    private final String fallbackUrl;
+
+    private AppSiteData(String packageName, String className, String appLinkUri, List<String> keyHashes,
+                       String marketUri, String fallbackUrl) {
+        this.packageName = packageName;
+        this.className = className;
+        this.appLinkUri = appLinkUri;
+        this.keyHashes = keyHashes;
+        this.marketUri = marketUri;
+        this.fallbackUrl = fallbackUrl;
+    }
+
+    public String getPackageName() {
+        return packageName;
+    }
+
+    public String getClassName() {
+        return className;
+    }
+
+    public String getAppLinkUri() {
+        return appLinkUri;
+    }
+
+    public List<String> getKeyHashes() {
+        return keyHashes;
+    }
+
+    public String getMarketUri() {
+        return marketUri;
+    }
+
+    public String getFallbackUrl() {
+        return fallbackUrl;
+    }
+
+    public static AppSiteData fromJSONObject(JSONObject dataObject) {
+        if (dataObject == null) {
+            return null;
+        }
+
+        String packageName = dataObject.optString("package");
+        String appsite = dataObject.optString("appsite");
+        String appsiteUri = dataObject.optString("appsite_url");
+        JSONArray keyHashesArray = dataObject.optJSONArray("key_hashes");
+        List<String> keyHashes = new ArrayList<String>();
+        if (keyHashesArray != null) {
+            for (int i = 0; i < keyHashesArray.length(); i++) {
+                keyHashes.add(keyHashesArray.optString(i));
+            }
+        }
+        String marketUri = dataObject.optString("market_uri");
+        String fallbackUrl = dataObject.optString("fallback_url");
+        return new AppSiteData(packageName, appsite, appsiteUri, keyHashes, marketUri, fallbackUrl);
+    }
+
+}
diff --git a/facebook/src/com/facebook/ads/internal/HtmlAdDataModel.java b/facebook/src/com/facebook/ads/internal/HtmlAdDataModel.java
new file mode 100644
index 000000000..e6492564c
--- /dev/null
+++ b/facebook/src/com/facebook/ads/internal/HtmlAdDataModel.java
@@ -0,0 +1,95 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads.internal;
+
+import android.content.Intent;
+import android.os.Bundle;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.Collection;
+
+public class HtmlAdDataModel implements AdDataModel {
+
+    private static final String MARKUP_KEY = "markup";
+    private static final String INVALIDATION_BEHAVIOR_KEY = "invalidation_behavior";
+    private static final String DETECTION_STRINGS_KEY = "detection_strings";
+
+    private final String markup;
+    private final AdInvalidationBehavior invalidationBehavior;
+    private final Collection<String> detectionStrings;
+
+    private HtmlAdDataModel(String markup, AdInvalidationBehavior invalidationBehavior, Collection<String> detectionStrings) {
+        this.markup = markup;
+        this.invalidationBehavior = invalidationBehavior;
+        this.detectionStrings = detectionStrings;
+    }
+
+    public String getMarkup() {
+        return markup;
+    }
+
+    @Override
+    public AdInvalidationBehavior getInvalidationBehavior() {
+        return invalidationBehavior;
+    }
+
+    @Override
+    public Collection<String> getDetectionStrings() {
+        return detectionStrings;
+    }
+
+    public Bundle saveToBundle() {
+        Bundle instanceState = new Bundle();
+        instanceState.putString(MARKUP_KEY, markup);
+        return instanceState;
+    }
+
+    public void addToIntentExtra(Intent intent) {
+        intent.putExtra(MARKUP_KEY, markup);
+    }
+
+    public static HtmlAdDataModel fromBundle(Bundle instanceState) {
+        String markup = instanceState.getString(MARKUP_KEY);
+        return new HtmlAdDataModel(markup, AdInvalidationBehavior.NONE, null);
+    }
+
+    public static HtmlAdDataModel fromIntentExtra(Intent intent) {
+        String markup = intent.getStringExtra(MARKUP_KEY);
+        return new HtmlAdDataModel(markup, AdInvalidationBehavior.NONE, null);
+    }
+
+    public static HtmlAdDataModel fromJSONObject(JSONObject dataObject) {
+        if (dataObject == null) {
+            return null;
+        }
+
+        String markup = dataObject.optString(MARKUP_KEY);
+        AdInvalidationBehavior invalidationBehavior =
+                AdInvalidationBehavior.fromString(dataObject.optString(INVALIDATION_BEHAVIOR_KEY));
+        JSONArray detectionStringsArray = null;
+        try {
+            detectionStringsArray = new JSONArray(dataObject.optString(DETECTION_STRINGS_KEY));
+        } catch (JSONException e) {
+            e.printStackTrace();
+        }
+        Collection<String> detectionStrings =
+                AdInvalidationUtils.parseDetectionStrings(detectionStringsArray);
+        return new HtmlAdDataModel(markup, invalidationBehavior, detectionStrings);
+    }
+}
diff --git a/facebook/src/com/facebook/ads/internal/NativeAdDataModel.java b/facebook/src/com/facebook/ads/internal/NativeAdDataModel.java
new file mode 100644
index 000000000..ac1ded938
--- /dev/null
+++ b/facebook/src/com/facebook/ads/internal/NativeAdDataModel.java
@@ -0,0 +1,162 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads.internal;
+
+import android.content.Context;
+import android.net.Uri;
+import android.util.Log;
+import com.facebook.ads.NativeAd;
+import com.facebook.ads.internal.action.AdAction;
+import com.facebook.ads.internal.action.AdActionFactory;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.Collection;
+
+/**
+ * NativeAdDataModel contains creative info about an ad.
+ */
+public class NativeAdDataModel implements AdDataModel {
+
+    private static final String TAG = NativeAdDataModel.class.getSimpleName();
+
+    private final Uri adCommand;
+    private final String title;
+    private final String body;
+    private final String callToAction;
+    private final String socialContext;
+    private final NativeAd.Image icon;
+    private final NativeAd.Image image;
+    private final NativeAd.Rating starRating;
+    private final String impressionReportUrl;
+    private final String clickReportUrl;
+    private final AdInvalidationBehavior invalidationBehavior;
+    private final Collection<String> detectionStrings;
+
+    private NativeAdDataModel(Uri adCommand, String title, String body, String callToAction, String socialContext,
+            NativeAd.Image icon, NativeAd.Image image, NativeAd.Rating starRating, String impressionReportUrl,
+            String clickReportUrl, AdInvalidationBehavior invalidationBehavior, Collection<String> detectionStrings) {
+        this.adCommand = adCommand;
+        this.title = title;
+        this.body = body;
+        this.callToAction = callToAction;
+        this.socialContext = socialContext;
+        this.icon = icon;
+        this.image = image;
+        this.starRating = starRating;
+        this.impressionReportUrl = impressionReportUrl;
+        this.clickReportUrl = clickReportUrl;
+        this.invalidationBehavior = invalidationBehavior;
+        this.detectionStrings = detectionStrings;
+    }
+
+    @Override
+    public AdInvalidationBehavior getInvalidationBehavior() {
+        return invalidationBehavior;
+    }
+
+    @Override
+    public Collection<String> getDetectionStrings() {
+        return detectionStrings;
+    }
+
+    public NativeAd.Image getIcon() {
+        return icon;
+    }
+
+    public NativeAd.Image getImage() {
+        return image;
+    }
+
+    public String getTitle() {
+        return title;
+    }
+
+    public String getBody() {
+        return body;
+    }
+
+    public String getCallToAction() {
+        return callToAction;
+    }
+
+    public String getSocialContext() {
+        return socialContext;
+    }
+
+    public NativeAd.Rating getStarRating() {
+        return starRating;
+    }
+
+    public void logImpression(Context context) {
+        new OpenUrlTask(context).execute(impressionReportUrl);
+    }
+
+    /**
+     * Handles click on the ad.
+     * @param context activity context
+     */
+    public void handleClick(Context context) {
+        new OpenUrlTask(context).execute(clickReportUrl);
+        AdAction adAction = AdActionFactory.getAdAction(context, adCommand);
+        if (adAction != null) {
+            try {
+                adAction.execute();
+            } catch (Exception ex) {
+                Log.e(TAG, "Error executing action", ex);
+            }
+        }
+    }
+
+    public boolean isValid() {
+        return title != null && title.length() > 0 && callToAction != null && callToAction.length() > 0 &&
+                icon != null && image != null;
+    }
+
+    public static NativeAdDataModel fromJSONObject(JSONObject jsonObject) {
+        if (jsonObject == null) {
+            return null;
+        }
+
+        String fbadCommand = jsonObject.optString("fbad_command");
+        Uri adCommand = Uri.parse(fbadCommand);
+        String title = jsonObject.optString("title");
+        String body = jsonObject.optString("body");
+        String callToAction = jsonObject.optString("call_to_action");
+        String socialContext = jsonObject.optString("social_context");
+        NativeAd.Image icon = NativeAd.Image.fromJSONObject(jsonObject.optJSONObject("icon"));
+        NativeAd.Image image = NativeAd.Image.fromJSONObject(jsonObject.optJSONObject("image"));
+        NativeAd.Rating starRating = NativeAd.Rating.fromJSONObject(jsonObject.optJSONObject("star_rating"));
+        String impressionReportUrl = jsonObject.optString("impression_report_url");
+        String clickReportUrl = jsonObject.optString("click_report_url");
+
+        AdInvalidationBehavior invalidationBehavior =
+                AdInvalidationBehavior.fromString(jsonObject.optString("invalidation_behavior"));
+        JSONArray detectionStringsArray = null;
+        try {
+            detectionStringsArray = new JSONArray(jsonObject.optString("detection_strings"));
+        } catch (JSONException e) {
+            e.printStackTrace();
+        }
+        Collection<String> detectionStrings =
+                AdInvalidationUtils.parseDetectionStrings(detectionStringsArray);
+        return new NativeAdDataModel(adCommand, title, body, callToAction, socialContext, icon, image, starRating,
+                impressionReportUrl, clickReportUrl, invalidationBehavior, detectionStrings);
+    }
+
+}
diff --git a/facebook/src/com/facebook/ads/internal/OpenUrlTask.java b/facebook/src/com/facebook/ads/internal/OpenUrlTask.java
new file mode 100644
index 000000000..f97c5ebc4
--- /dev/null
+++ b/facebook/src/com/facebook/ads/internal/OpenUrlTask.java
@@ -0,0 +1,71 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads.internal;
+
+import android.content.Context;
+import android.os.AsyncTask;
+import android.util.Log;
+import org.apache.http.client.HttpClient;
+import org.apache.http.client.methods.HttpGet;
+import org.apache.http.impl.client.DefaultHttpClient;
+
+import java.net.URLEncoder;
+import java.util.Map;
+
+public class OpenUrlTask extends AsyncTask<String, Void, Void> {
+
+    private static final String TAG = OpenUrlTask.class.getSimpleName();
+    private static final String INVALID_ADDRESS = "#";
+
+    private final Context context;
+
+    public OpenUrlTask(Context context) {
+        this.context = context;
+    }
+
+    @Override
+    protected Void doInBackground(String... urls) {
+        String url = urls[0];
+        if (StringUtils.isNullOrEmpty(url) || url.equals(INVALID_ADDRESS)) {
+            return null;
+        }
+        url = addAnalogInfo(url);
+
+        HttpClient client = new DefaultHttpClient();
+        HttpGet get = new HttpGet(url);
+        try {
+            client.execute(get);
+        } catch (Exception ex) {
+            Log.e(TAG, "Error opening url: " + url, ex);
+        }
+        return null;
+    }
+
+    private String addAnalogInfo(String url) {
+        if (StringUtils.isNullOrEmpty(url)) {
+            return url;
+        }
+
+        Map<String, Object> analogData = AdAnalogData.getAnalogInfo(context);
+        String analogDataQuery = URLEncoder.encode(AdUtilities.jsonEncode(analogData));
+        if (url.contains("?")) {
+            return url + "&analog=" + analogDataQuery;
+        } else {
+            return url + "?analog=" + analogDataQuery;
+        }
+    }
+}
diff --git a/facebook/src/com/facebook/ads/internal/StringUtils.java b/facebook/src/com/facebook/ads/internal/StringUtils.java
new file mode 100644
index 000000000..da43d4b8a
--- /dev/null
+++ b/facebook/src/com/facebook/ads/internal/StringUtils.java
@@ -0,0 +1,41 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads.internal;
+
+import java.security.MessageDigest;
+
+public class StringUtils {
+
+    public static boolean isNullOrEmpty(String checkString) {
+        return checkString == null || checkString.length() <= 0;
+    }
+
+    public static String md5(String input) {
+        try {
+            MessageDigest md = MessageDigest.getInstance("MD5");
+            byte[] hash = md.digest(input.getBytes("utf-8"));
+            StringBuilder sb = new StringBuilder();
+            for (int i = 0; i < hash.length ;i++)
+            {
+                sb.append(Integer.toString((hash[i] & 0xff) + 0x100, 16).substring(1));
+            }
+            return sb.toString();
+        } catch (Exception ex) {
+            return null;
+        }
+    }
+}
diff --git a/facebook/src/com/facebook/ads/internal/action/AdAction.java b/facebook/src/com/facebook/ads/internal/action/AdAction.java
new file mode 100644
index 000000000..e5f53cb51
--- /dev/null
+++ b/facebook/src/com/facebook/ads/internal/action/AdAction.java
@@ -0,0 +1,22 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads.internal.action;
+
+public interface AdAction {
+
+    public void execute();
+}
diff --git a/facebook/src/com/facebook/ads/internal/action/AdActionFactory.java b/facebook/src/com/facebook/ads/internal/action/AdActionFactory.java
new file mode 100644
index 000000000..d80d665b2
--- /dev/null
+++ b/facebook/src/com/facebook/ads/internal/action/AdActionFactory.java
@@ -0,0 +1,37 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads.internal.action;
+
+import android.content.Context;
+import android.net.Uri;
+
+public class AdActionFactory {
+
+    private static final String AD_ACTION_APP_AD = "store";
+    private static final String AD_ACTION_LINK_AD = "open_link";
+
+    public static AdAction getAdAction(Context context, Uri uri) {
+        String action = uri.getAuthority();
+        if (AD_ACTION_APP_AD.equals(action)) {
+            return new AppAdAction(context, uri);
+        }
+        if (AD_ACTION_LINK_AD.equals(action)) {
+            return new LinkAdAction(context, uri);
+        }
+        return null;
+    }
+}
diff --git a/facebook/src/com/facebook/ads/internal/action/AppAdAction.java b/facebook/src/com/facebook/ads/internal/action/AppAdAction.java
new file mode 100644
index 000000000..d54a69932
--- /dev/null
+++ b/facebook/src/com/facebook/ads/internal/action/AppAdAction.java
@@ -0,0 +1,198 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads.internal.action;
+
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.net.Uri;
+import android.util.Log;
+import com.facebook.ads.internal.AdInvalidationUtils;
+import com.facebook.ads.internal.AppSiteData;
+import com.facebook.ads.internal.OpenUrlTask;
+import com.facebook.ads.internal.StringUtils;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class AppAdAction implements AdAction {
+
+    private static final String TAG = AppAdAction.class.getSimpleName();
+
+    private static final String MARKET_DETAIL_URI_FORMAT = "market://details?id=%s";
+
+    private final Context context;
+    private final Uri uri;
+
+    public AppAdAction(Context context, Uri uri) {
+        this.context = context;
+        this.uri = uri;
+    }
+
+    private Uri getMarketUri() {
+        String storeId = uri.getQueryParameter("store_id");
+        return Uri.parse(String.format(MARKET_DETAIL_URI_FORMAT, storeId));
+    }
+
+    private List<AppSiteData> getAppsiteDatas() {
+        String appsiteDataString = uri.getQueryParameter("appsite_data");
+        if (StringUtils.isNullOrEmpty(appsiteDataString) || "[]".equals(appsiteDataString)) {
+            return null;
+        }
+
+        List<AppSiteData> appSiteDatas = new ArrayList<AppSiteData>();
+        try {
+            JSONObject dataObject = new JSONObject(appsiteDataString);
+            JSONArray appsiteDataArray = dataObject.optJSONArray("android");
+            if (appsiteDataArray != null) {
+                for (int i = 0; i < appsiteDataArray.length(); i++) {
+                    AppSiteData appSiteData = AppSiteData.fromJSONObject(appsiteDataArray.optJSONObject(i));
+                    if (appSiteData != null) {
+                        appSiteDatas.add(appSiteData);
+                    }
+                }
+            }
+        } catch (JSONException e) {
+            Log.w(TAG, "Error parsing appsite_data", e);
+        }
+        return appSiteDatas;
+    }
+
+    private void logAdClick() {
+        String clickReportUrl = uri.getQueryParameter("native_click_report_url");
+        if (StringUtils.isNullOrEmpty(clickReportUrl)) {
+            return;
+        }
+        new OpenUrlTask(context).execute(clickReportUrl);
+    }
+
+    private Intent getAppLinkIntentUnresolved(AppSiteData appSiteData) {
+        Intent intent = new Intent(Intent.ACTION_VIEW);
+        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+
+        if (!StringUtils.isNullOrEmpty(appSiteData.getPackageName()) &&
+                !StringUtils.isNullOrEmpty(appSiteData.getClassName())) {
+            intent.setComponent(new ComponentName(appSiteData.getPackageName(), appSiteData.getClassName()));
+        }
+
+        if (!StringUtils.isNullOrEmpty(appSiteData.getAppLinkUri())) {
+            intent.setData(Uri.parse(appSiteData.getAppLinkUri()));
+        }
+
+        return intent;
+    }
+
+    private Intent getAppLaunchIntent(AppSiteData appSiteData) {
+        if (StringUtils.isNullOrEmpty(appSiteData.getPackageName())) {
+            return null;
+        }
+
+        if (!AdInvalidationUtils.isNativePackageInstalled(context, appSiteData.getPackageName())) {
+            return null;
+        }
+
+        // if this is click to call, we have a special case path to hit the registered dialer.
+        String appLinkUri = appSiteData.getAppLinkUri();
+        if (!StringUtils.isNullOrEmpty(appLinkUri) &&
+                (appLinkUri.startsWith("tel:") || appLinkUri.startsWith("telprompt:"))) {
+            return new Intent(Intent.ACTION_CALL, Uri.parse(appLinkUri));
+        }
+
+        PackageManager pm = context.getPackageManager();
+        // if there is no class or deep link, this is a launch by itself.
+        if (StringUtils.isNullOrEmpty(appSiteData.getClassName()) &&
+                StringUtils.isNullOrEmpty(appLinkUri)) {
+            return pm.getLaunchIntentForPackage(appSiteData.getPackageName());
+        }
+
+        Intent unresolvedAppIntent = getAppLinkIntentUnresolved(appSiteData);
+        List<ResolveInfo> resolved = pm.queryIntentActivities(
+                unresolvedAppIntent,
+                PackageManager.MATCH_DEFAULT_ONLY
+        );
+
+        if (unresolvedAppIntent.getComponent() == null) {
+            for (ResolveInfo ri : resolved) {
+                if (ri.activityInfo.packageName.equals(appSiteData.getPackageName())) {
+                    unresolvedAppIntent.setComponent(
+                            new ComponentName(ri.activityInfo.packageName, ri.activityInfo.name)
+                    );
+                    break;
+                }
+            }
+        }
+
+        if (resolved.isEmpty() || unresolvedAppIntent.getComponent() == null) {
+            return null;
+        }
+
+        return unresolvedAppIntent;
+    }
+
+    private List<Intent> getAppLaunchIntents() {
+        List<AppSiteData> appSiteDatas = getAppsiteDatas();
+        List<Intent> intents = new ArrayList<Intent>();
+        if (appSiteDatas != null) {
+            for (AppSiteData appSiteData : appSiteDatas) {
+                Intent intent = getAppLaunchIntent(appSiteData);
+                if (intent != null) {
+                    intents.add(intent);
+                }
+            }
+        }
+        return intents;
+    }
+
+    @Override
+    public void execute() {
+        logAdClick();
+
+        List<Intent> appLaunchIntents = getAppLaunchIntents();
+        if (appLaunchIntents != null) {
+            for (Intent appLaunchIntent : appLaunchIntents) {
+                try {
+                    context.startActivity(appLaunchIntent);
+                    return;
+                } catch (Exception ex) {
+                    Log.d(TAG, "Failed to open app intent, falling back", ex);
+                }
+            }
+        }
+
+        Uri marketUri = getMarketUri();
+        Intent intent = new Intent(Intent.ACTION_VIEW, marketUri);
+        try {
+            context.startActivity(intent);
+        } catch (Exception ex) {
+            Log.d(TAG, "Failed to open market url: " + uri.toString(), ex);
+            String fallbackUrl = uri.getQueryParameter("store_url_web_fallback");
+            if (fallbackUrl != null && fallbackUrl.length() > 0) {
+                intent = new Intent(Intent.ACTION_VIEW, Uri.parse(fallbackUrl));
+                try {
+                    context.startActivity(intent);
+                } catch (Exception ex2) {
+                    Log.d(TAG, "Failed to open fallback url: " + fallbackUrl, ex2);
+                }
+            }
+        }
+    }
+}
diff --git a/facebook/src/com/facebook/ads/internal/action/LinkAdAction.java b/facebook/src/com/facebook/ads/internal/action/LinkAdAction.java
new file mode 100644
index 000000000..57674761c
--- /dev/null
+++ b/facebook/src/com/facebook/ads/internal/action/LinkAdAction.java
@@ -0,0 +1,48 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.ads.internal.action;
+
+import android.content.Context;
+import android.content.Intent;
+import android.net.Uri;
+import android.util.Log;
+
+public class LinkAdAction implements AdAction {
+
+    private static final String TAG = LinkAdAction.class.getSimpleName();
+
+    private final Context context;
+    private final Uri uri;
+
+    public LinkAdAction(Context context, Uri uri) {
+        this.context = context;
+        this.uri = uri;
+    }
+
+    @Override
+    public void execute() {
+        String link = uri.getQueryParameter("link");
+        Uri linkUri = Uri.parse(link);
+        Intent intent = new Intent(Intent.ACTION_VIEW, linkUri);
+        try {
+            context.startActivity(intent);
+        } catch (Exception ex) {
+            Log.d(TAG, "Failed to open market url: " + uri.toString(), ex);
+        }
+    }
+
+}
