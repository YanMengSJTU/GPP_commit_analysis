diff --git a/facebook/src/main/java/com/facebook/picker/FriendPickerFragment.java b/facebook/src/main/java/com/facebook/picker/FriendPickerFragment.java
new file mode 100644
index 000000000..c7812d020
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/picker/FriendPickerFragment.java
@@ -0,0 +1,344 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.picker;
+
+import android.app.Activity;
+import android.content.res.TypedArray;
+import android.os.Bundle;
+import android.text.TextUtils;
+import android.util.AttributeSet;
+
+import com.facebook.AccessToken;
+import com.facebook.GraphRequest;
+import com.facebook.appevents.AppEventsLogger;
+import com.facebook.FacebookException;
+import com.facebook.R;
+import com.facebook.internal.AnalyticsEvents;
+import com.facebook.internal.Validate;
+
+import org.json.JSONObject;
+
+import java.util.*;
+
+/**
+ * Provides a Fragment that displays a list of a user's friends and allows one or more of the
+ * friends to be selected.
+ */
+public class FriendPickerFragment extends PickerFragment {
+    /**
+     * The key for a String parameter in the fragment's Intent bundle to indicate what user's
+     * friends should be shown. The default is to display the currently authenticated user's friends.
+     */
+    public static final String USER_ID_BUNDLE_KEY = "com.facebook.widget.FriendPickerFragment.UserId";
+    /**
+     * The key for a boolean parameter in the fragment's Intent bundle to indicate whether the
+     * picker should allow more than one friend to be selected or not.
+     */
+    public static final String MULTI_SELECT_BUNDLE_KEY = "com.facebook.widget.FriendPickerFragment.MultiSelect";
+    /**
+     * The key for a String parameter in the fragment's Intent bundle to indicate the type of friend picker to use.
+     * This value is case sensitive, and must match the enum @{link FriendPickerType}
+     */
+    public static final String FRIEND_PICKER_TYPE_KEY = "com.facebook.widget.FriendPickerFragment.FriendPickerType";
+
+    public enum FriendPickerType {
+        FRIENDS("/friends"),
+        TAGGABLE_FRIENDS("/taggable_friends"),
+        INVITABLE_FRIENDS("/invitable_friends");
+
+        private final String requestPath;
+
+        FriendPickerType(String path) {
+            this.requestPath = path;
+        }
+
+        String getRequestPath() {
+            return requestPath;
+        }
+    }
+
+    private static final String ID = "id";
+    private static final String NAME = "name";
+
+    private String userId;
+
+    private boolean multiSelect = true;
+
+    // default to Friends for backwards compatibility
+    private FriendPickerType friendPickerType = FriendPickerType.FRIENDS;
+
+    private List<String> preSelectedFriendIds = new ArrayList<String>();
+
+    /**
+     * Default constructor. Creates a Fragment with all default properties.
+     */
+    public FriendPickerFragment() {
+        super(R.layout.picker_friendpickerfragment);
+    }
+
+    /**
+     * Gets the ID of the user whose friends should be displayed. If null, the default is to
+     * show the currently authenticated user's friends.
+     * @return the user ID, or null
+     */
+    public String getUserId() {
+        return userId;
+    }
+
+    /**
+     * Sets the ID of the user whose friends should be displayed. If null, the default is to
+     * show the currently authenticated user's friends.
+     * @param userId     the user ID, or null
+     */
+    public void setUserId(String userId) {
+        this.userId = userId;
+    }
+
+    /**
+     * Gets whether the user can select multiple friends, or only one friend.
+     * @return true if the user can select multiple friends, false if only one friend
+     */
+    public boolean getMultiSelect() {
+        return multiSelect;
+    }
+
+    /**
+     * Sets whether the user can select multiple friends, or only one friend.
+     * @param multiSelect    true if the user can select multiple friends, false if only one friend
+     */
+    public void setMultiSelect(boolean multiSelect) {
+        if (this.multiSelect != multiSelect) {
+            this.multiSelect = multiSelect;
+            setSelectionStrategy(createSelectionStrategy());
+        }
+    }
+
+    /**
+     * Sets the friend picker type for this fragment.
+     * @param type the type of friend picker to use.
+     */
+    public void setFriendPickerType(FriendPickerType type) {
+        this.friendPickerType = type;
+    }
+
+    /**
+     * Sets the list of friends for pre selection. These friends will be selected by default.
+     * @param userIds list of friends as ids
+     */
+    public void setSelectionByIds(List<String> userIds) {
+        preSelectedFriendIds.addAll(userIds);
+    }
+
+    /**
+     * Sets the list of friends for pre selection. These friends will be selected by default.
+     * @param userIds list of friends as ids
+     */
+    public void setSelectionByIds(String... userIds) {
+        setSelectionByIds(Arrays.asList(userIds));
+    }
+
+    /**
+     * Sets the list of friends for pre selection. These friends will be selected by default.
+     * @param graphUsers list of friends as GraphUsers
+     */
+    public void setSelection(JSONObject... graphUsers) {
+        setSelection(Arrays.asList(graphUsers));
+    }
+
+    /**
+     * Sets the list of friends for pre selection. These friends will be selected by default.
+     * @param graphUsers list of friends as GraphUsers
+     */
+    public void setSelection(List<JSONObject> graphUsers) {
+        List<String> userIds = new ArrayList<String>();
+        for(JSONObject graphUser: graphUsers) {
+            String id = graphUser.optString("id");
+            Validate.notNullOrEmpty(id, "id");
+            userIds.add(id);
+        }
+        setSelectionByIds(userIds);
+    }
+
+    /**
+     * Gets the currently-selected list of users.
+     * @return the currently-selected list of users
+     */
+    public List<JSONObject> getSelection() {
+        return getSelectedGraphObjects();
+    }
+
+    @Override
+    public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {
+        super.onInflate(activity, attrs, savedInstanceState);
+        TypedArray a = activity.obtainStyledAttributes(attrs, R.styleable.picker_friend_picker_fragment);
+
+        setMultiSelect(a.getBoolean(R.styleable.picker_friend_picker_fragment_multi_select, multiSelect));
+
+        a.recycle();
+    }
+
+    @Override
+    public void setSettingsFromBundle(Bundle inState) {
+        super.setSettingsFromBundle(inState);
+        if (inState != null) {
+            if (inState.containsKey(USER_ID_BUNDLE_KEY)) {
+                setUserId(inState.getString(USER_ID_BUNDLE_KEY));
+            }
+            setMultiSelect(inState.getBoolean(MULTI_SELECT_BUNDLE_KEY, multiSelect));
+            if (inState.containsKey(FRIEND_PICKER_TYPE_KEY)) {
+                try {
+                    friendPickerType = FriendPickerType.valueOf(inState.getString(FRIEND_PICKER_TYPE_KEY));
+                } catch (Exception e) {
+                    // NOOP
+                }
+            }
+        }
+    }
+
+    void saveSettingsToBundle(Bundle outState) {
+        super.saveSettingsToBundle(outState);
+
+        outState.putString(USER_ID_BUNDLE_KEY, userId);
+        outState.putBoolean(MULTI_SELECT_BUNDLE_KEY, multiSelect);
+    }
+
+    @Override
+    PickerFragmentAdapter createAdapter() {
+        PickerFragmentAdapter adapter = new PickerFragmentAdapter(this.getActivity()) {
+            @Override
+            protected int getGraphObjectRowLayoutId(JSONObject graphObject) {
+                return R.layout.picker_list_row;
+            }
+
+            @Override
+            protected int getDefaultPicture() {
+                return R.drawable.profile_default_icon;
+            }
+
+        };
+        adapter.setShowCheckbox(true);
+        adapter.setShowPicture(getShowPictures());
+        adapter.setSortFields(Arrays.asList(new String[]{NAME}));
+        adapter.setGroupByField(NAME);
+
+        return adapter;
+    }
+
+    @Override
+    LoadingStrategy createLoadingStrategy() {
+        return new ImmediateLoadingStrategy();
+    }
+
+    @Override
+    SelectionStrategy createSelectionStrategy() {
+        return multiSelect ? new MultiSelectionStrategy() : new SingleSelectionStrategy();
+    }
+
+    @Override
+    GraphRequest getRequestForLoadData() {
+        if (adapter == null) {
+            throw new FacebookException("Can't issue requests until Fragment has been created.");
+        }
+
+        String userToFetch = (userId != null) ? userId : "me";
+        return createRequest(userToFetch, extraFields);
+    }
+
+    @Override
+    String getDefaultTitleText() {
+        return getResources().getString(R.string.choose_friends);
+    }
+
+    @Override
+    void logAppEvents(boolean doneButtonClicked) {
+        AppEventsLogger logger = AppEventsLogger.newLogger(this.getActivity(),
+                AccessToken.getCurrentAccessToken().getToken());
+        Bundle parameters = new Bundle();
+
+        // If Done was clicked, we know this completed successfully. If not, we don't know (caller might have
+        // dismissed us in response to selection changing, or user might have hit back button). Either way
+        // we'll log the number of selections.
+        String outcome = doneButtonClicked ? AnalyticsEvents.PARAMETER_DIALOG_OUTCOME_VALUE_COMPLETED :
+                AnalyticsEvents.PARAMETER_DIALOG_OUTCOME_VALUE_UNKNOWN;
+        parameters.putString(AnalyticsEvents.PARAMETER_DIALOG_OUTCOME, outcome);
+        parameters.putInt("num_friends_picked", getSelection().size());
+
+        logger.logSdkEvent(AnalyticsEvents.EVENT_FRIEND_PICKER_USAGE, null, parameters);
+    }
+
+    @Override
+    public void loadData(boolean forceReload) {
+        super.loadData(forceReload);
+        setSelectedGraphObjects(preSelectedFriendIds);
+    }
+
+    private GraphRequest createRequest(String userID, Set<String> extraFields) {
+        AccessToken accessToken = AccessToken.getCurrentAccessToken();
+        GraphRequest request = GraphRequest.newGraphPathRequest(
+                accessToken, userID + friendPickerType.getRequestPath(), null);
+
+        Set<String> fields = new HashSet<String>(extraFields);
+        String[] requiredFields = new String[]{
+                ID,
+                NAME
+        };
+        fields.addAll(Arrays.asList(requiredFields));
+
+        String pictureField = adapter.getPictureFieldSpecifier();
+        if (pictureField != null) {
+            fields.add(pictureField);
+        }
+
+        Bundle parameters = request.getParameters();
+        parameters.putString("fields", TextUtils.join(",", fields));
+        request.setParameters(parameters);
+
+        return request;
+    }
+
+    private class ImmediateLoadingStrategy extends LoadingStrategy {
+        @Override
+        protected void onLoadFinished(GraphObjectPagingLoader loader, GraphObjectCursor data) {
+            super.onLoadFinished(loader, data);
+
+            // We could be called in this state if we are clearing data or if we are being re-attached
+            // in the middle of a query.
+            if (data == null || loader.isLoading()) {
+                return;
+            }
+
+            if (data.areMoreObjectsAvailable()) {
+                // We got results, but more are available.
+                followNextLink();
+            } else {
+                // We finished loading results.
+                hideActivityCircle();
+            }
+        }
+
+        private void followNextLink() {
+            // This may look redundant, but this causes the circle to be alpha-dimmed if we have results.
+            displayActivityCircle();
+
+            loader.followNextLink();
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/picker/GraphObjectAdapter.java b/facebook/src/main/java/com/facebook/picker/GraphObjectAdapter.java
new file mode 100644
index 000000000..b466dfce4
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/picker/GraphObjectAdapter.java
@@ -0,0 +1,821 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.picker;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.net.Uri;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewStub;
+import android.widget.*;
+import com.facebook.FacebookException;
+import com.facebook.R;
+import com.facebook.internal.ImageDownloader;
+import com.facebook.internal.ImageRequest;
+import com.facebook.internal.ImageResponse;
+import com.facebook.internal.Utility;
+
+import org.json.JSONObject;
+
+import java.text.Collator;
+import java.util.*;
+
+class GraphObjectAdapter extends BaseAdapter implements SectionIndexer {
+    private static final int DISPLAY_SECTIONS_THRESHOLD = 1;
+    private static final int HEADER_VIEW_TYPE = 0;
+    private static final int GRAPH_OBJECT_VIEW_TYPE = 1;
+    private static final int ACTIVITY_CIRCLE_VIEW_TYPE = 2;
+    private static final int MAX_PREFETCHED_PICTURES = 20;
+
+    private static final String ID = "id";
+    private static final String NAME = "name";
+    private static final String PICTURE = "picture";
+
+    private final Map<String, ImageRequest> pendingRequests = new HashMap<String, ImageRequest>();
+    private final LayoutInflater inflater;
+    private List<String> sectionKeys = new ArrayList<String>();
+    private Map<String, ArrayList<JSONObject>> graphObjectsBySection = new HashMap<String, ArrayList<JSONObject>>();
+    private Map<String, JSONObject> graphObjectsById = new HashMap<String, JSONObject>();
+    private boolean displaySections;
+    private List<String> sortFields;
+    private String groupByField;
+    private boolean showPicture;
+    private boolean showCheckbox;
+    private Filter filter;
+    private DataNeededListener dataNeededListener;
+    private GraphObjectCursor cursor;
+    private Context context;
+    private Map<String, ImageResponse> prefetchedPictureCache = new HashMap<String, ImageResponse>();
+    private ArrayList<String> prefetchedProfilePictureIds = new ArrayList<String>();
+    private OnErrorListener onErrorListener;
+
+    public interface DataNeededListener {
+        public void onDataNeeded();
+    }
+
+    public interface OnErrorListener {
+        void onError(GraphObjectAdapter adapter, FacebookException error);
+    }
+
+    public static class SectionAndItem {
+        public String sectionKey;
+        public JSONObject graphObject;
+
+        public enum Type {
+            GRAPH_OBJECT,
+            SECTION_HEADER,
+            ACTIVITY_CIRCLE
+        }
+
+        public SectionAndItem(String sectionKey, JSONObject graphObject) {
+            this.sectionKey = sectionKey;
+            this.graphObject = graphObject;
+        }
+
+        public Type getType() {
+            if (sectionKey == null) {
+                return Type.ACTIVITY_CIRCLE;
+            } else if (graphObject == null) {
+                return Type.SECTION_HEADER;
+            } else {
+                return Type.GRAPH_OBJECT;
+            }
+        }
+    }
+
+    interface Filter {
+        boolean includeItem(JSONObject graphObject);
+    }
+
+    public GraphObjectAdapter(Context context) {
+        this.context = context;
+        this.inflater = LayoutInflater.from(context);
+    }
+
+    public List<String> getSortFields() {
+        return sortFields;
+    }
+
+    public void setSortFields(List<String> sortFields) {
+        this.sortFields = sortFields;
+    }
+
+    public String getGroupByField() {
+        return groupByField;
+    }
+
+    public void setGroupByField(String groupByField) {
+        this.groupByField = groupByField;
+    }
+
+    public boolean getShowPicture() {
+        return showPicture;
+    }
+
+    public void setShowPicture(boolean showPicture) {
+        this.showPicture = showPicture;
+    }
+
+    public boolean getShowCheckbox() {
+        return showCheckbox;
+    }
+
+    public void setShowCheckbox(boolean showCheckbox) {
+        this.showCheckbox = showCheckbox;
+    }
+
+    public DataNeededListener getDataNeededListener() {
+        return dataNeededListener;
+    }
+
+    public void setDataNeededListener(DataNeededListener dataNeededListener) {
+        this.dataNeededListener = dataNeededListener;
+    }
+
+    public OnErrorListener getOnErrorListener() {
+        return onErrorListener;
+    }
+
+    public void setOnErrorListener(OnErrorListener onErrorListener) {
+        this.onErrorListener = onErrorListener;
+    }
+
+    public GraphObjectCursor getCursor() {
+        return cursor;
+    }
+
+    public boolean changeCursor(GraphObjectCursor cursor) {
+        if (this.cursor == cursor) {
+            return false;
+        }
+        if (this.cursor != null) {
+            this.cursor.close();
+        }
+        this.cursor = cursor;
+
+        rebuildAndNotify();
+        return true;
+    }
+
+    public void rebuildAndNotify() {
+        rebuildSections();
+        notifyDataSetChanged();
+    }
+
+    public void prioritizeViewRange(int firstVisibleItem, int lastVisibleItem, int prefetchBuffer) {
+        if ((lastVisibleItem < firstVisibleItem) || (sectionKeys.size() == 0)) {
+            return;
+        }
+
+        // We want to prioritize requests for items which are visible but do not have pictures
+        // loaded yet. We also want to pre-fetch pictures for items which are not yet visible
+        // but are within a buffer on either side of the visible items, on the assumption that
+        // they will be visible soon. For these latter items, we'll store the images in memory
+        // in the hopes we can immediately populate their image view when needed.
+
+        // Prioritize the requests in reverse order since each call to prioritizeRequest will just
+        // move it to the front of the queue. And we want the earliest ones in the range to be at
+        // the front of the queue, so all else being equal, the list will appear to populate from
+        // the top down.
+        for (int i = lastVisibleItem; i >= 0; i--) {
+            SectionAndItem sectionAndItem = getSectionAndItem(i);
+            if (sectionAndItem.graphObject != null) {
+                String id = getIdOfGraphObject(sectionAndItem.graphObject);
+                ImageRequest request = pendingRequests.get(id);
+                if (request != null) {
+                    ImageDownloader.prioritizeRequest(request);
+                }
+            }
+        }
+
+        // For items which are not visible, but within the buffer on either side, we want to
+        // fetch those items and store them in a small in-memory cache of bitmaps.
+        int start = Math.max(0, firstVisibleItem - prefetchBuffer);
+        int end = Math.min(lastVisibleItem + prefetchBuffer, getCount() - 1);
+        ArrayList<JSONObject> graphObjectsToPrefetchPicturesFor = new ArrayList<JSONObject>();
+        // Add the IDs before and after the visible range.
+        for (int i = start; i < firstVisibleItem; ++i) {
+            SectionAndItem sectionAndItem = getSectionAndItem(i);
+            if (sectionAndItem.graphObject != null) {
+                graphObjectsToPrefetchPicturesFor.add(sectionAndItem.graphObject);
+            }
+        }
+        for (int i = lastVisibleItem + 1; i <= end; ++i) {
+            SectionAndItem sectionAndItem = getSectionAndItem(i);
+            if (sectionAndItem.graphObject != null) {
+                graphObjectsToPrefetchPicturesFor.add(sectionAndItem.graphObject);
+            }
+        }
+        for (JSONObject graphObject : graphObjectsToPrefetchPicturesFor) {
+            Uri uri = getPictureUriOfGraphObject(graphObject);
+            final String id = getIdOfGraphObject(graphObject);
+
+            // This URL already have been requested for pre-fetching, but we want to act in an LRU manner, so move
+            // it to the end of the list regardless.
+            boolean alreadyPrefetching = prefetchedProfilePictureIds.remove(id);
+            prefetchedProfilePictureIds.add(id);
+
+            // If we've already requested it for pre-fetching, no need to do so again.
+            if (!alreadyPrefetching) {
+                downloadProfilePicture(id, uri, null);
+            }
+        }
+    }
+
+    protected String getSectionKeyOfGraphObject(JSONObject graphObject) {
+        String result = null;
+
+        if (groupByField != null) {
+            result = graphObject.optString(groupByField);
+            if (result != null && result.length() > 0) {
+                result = result.substring(0, 1).toUpperCase();
+            }
+        }
+
+        return (result != null) ? result : "";
+    }
+
+    protected CharSequence getTitleOfGraphObject(JSONObject graphObject) {
+        return graphObject.optString(NAME);
+    }
+
+    protected CharSequence getSubTitleOfGraphObject(JSONObject graphObject) {
+        return null;
+    }
+
+    protected Uri getPictureUriOfGraphObject(JSONObject graphObject) {
+        String uri = null;
+        Object o = graphObject.opt(PICTURE);
+        if (o instanceof String) {
+            uri = (String) o;
+        } else if (o instanceof JSONObject) {
+            JSONObject data = ((JSONObject) o).optJSONObject("data");
+            uri = data != null ? data.optString("url") : null;
+        }
+
+        if (uri != null) {
+            return Uri.parse(uri);
+        }
+        return null;
+    }
+
+    protected View getSectionHeaderView(String sectionHeader, View convertView, ViewGroup parent) {
+        TextView result = (TextView) convertView;
+
+        if (result == null) {
+            result = (TextView) inflater.inflate(R.layout.picker_list_section_header, null);
+        }
+
+        result.setText(sectionHeader);
+
+        return result;
+    }
+
+    protected View getGraphObjectView(JSONObject graphObject, View convertView, ViewGroup parent) {
+        View result = convertView;
+
+        if (result == null) {
+            result = createGraphObjectView(graphObject);
+        }
+
+        populateGraphObjectView(result, graphObject);
+        return result;
+    }
+
+    private View getActivityCircleView(View convertView, ViewGroup parent) {
+        View result = convertView;
+
+        if (result == null) {
+            result = inflater.inflate(R.layout.picker_activity_circle_row, null);
+        }
+        ProgressBar activityCircle = (ProgressBar) result.findViewById(R.id.com_facebook_picker_row_activity_circle);
+        activityCircle.setVisibility(View.VISIBLE);
+
+        return result;
+    }
+
+    protected int getGraphObjectRowLayoutId(JSONObject graphObject) {
+        return R.layout.picker_list_row;
+    }
+
+    protected int getDefaultPicture() {
+        return R.drawable.profile_default_icon;
+    }
+
+    protected View createGraphObjectView(JSONObject graphObject) {
+        View result = inflater.inflate(getGraphObjectRowLayoutId(graphObject), null);
+
+        ViewStub checkboxStub = (ViewStub) result.findViewById(R.id.com_facebook_picker_checkbox_stub);
+        if (checkboxStub != null) {
+            if (!getShowCheckbox()) {
+                checkboxStub.setVisibility(View.GONE);
+            } else {
+                CheckBox checkBox = (CheckBox) checkboxStub.inflate();
+                updateCheckboxState(checkBox, false);
+            }
+        }
+
+        ViewStub profilePicStub = (ViewStub) result.findViewById(R.id.com_facebook_picker_profile_pic_stub);
+        if (!getShowPicture()) {
+            profilePicStub.setVisibility(View.GONE);
+        } else {
+            ImageView imageView = (ImageView) profilePicStub.inflate();
+            imageView.setVisibility(View.VISIBLE);
+        }
+
+        return result;
+    }
+
+    protected void populateGraphObjectView(View view, JSONObject graphObject) {
+        String id = getIdOfGraphObject(graphObject);
+        view.setTag(id);
+
+        CharSequence title = getTitleOfGraphObject(graphObject);
+        TextView titleView = (TextView) view.findViewById(R.id.com_facebook_picker_title);
+        if (titleView != null) {
+            titleView.setText(title, TextView.BufferType.SPANNABLE);
+        }
+
+        CharSequence subtitle = getSubTitleOfGraphObject(graphObject);
+        TextView subtitleView = (TextView) view.findViewById(R.id.picker_subtitle);
+        if (subtitleView != null) {
+            if (subtitle != null) {
+                subtitleView.setText(subtitle, TextView.BufferType.SPANNABLE);
+                subtitleView.setVisibility(View.VISIBLE);
+            } else {
+                subtitleView.setVisibility(View.GONE);
+            }
+        }
+
+        if (getShowCheckbox()) {
+            CheckBox checkBox = (CheckBox) view.findViewById(R.id.com_facebook_picker_checkbox);
+            updateCheckboxState(checkBox, isGraphObjectSelected(id));
+        }
+
+        if (getShowPicture()) {
+            Uri pictureURI = getPictureUriOfGraphObject(graphObject);
+
+            if (pictureURI != null) {
+                ImageView profilePic = (ImageView) view.findViewById(R.id.com_facebook_picker_image);
+
+                // See if we have already pre-fetched this; if not, download it.
+                if (prefetchedPictureCache.containsKey(id)) {
+                    ImageResponse response = prefetchedPictureCache.get(id);
+                    profilePic.setImageBitmap(response.getBitmap());
+                    profilePic.setTag(response.getRequest().getImageUri());
+                } else {
+                    downloadProfilePicture(id, pictureURI, profilePic);
+                }
+            }
+        }
+    }
+
+    /**
+     * @throws FacebookException if the GraphObject doesn't have an ID.
+     */
+    String getIdOfGraphObject(JSONObject graphObject) {
+        String id = graphObject.optString(ID);
+        if (id != null) {
+            return id;
+        }
+        throw new FacebookException("Received an object without an ID.");
+    }
+
+    boolean filterIncludesItem(JSONObject graphObject) {
+        return filter == null || filter.includeItem(graphObject);
+    }
+
+    Filter getFilter() {
+        return filter;
+    }
+
+    void setFilter(Filter filter) {
+        this.filter = filter;
+    }
+
+    boolean isGraphObjectSelected(String graphObjectId) {
+        return false;
+    }
+
+    void updateCheckboxState(CheckBox checkBox, boolean graphObjectSelected) {
+        // Default is no-op
+    }
+
+    String getPictureFieldSpecifier() {
+        // How big is our image?
+        View view = createGraphObjectView(null);
+        ImageView picture = (ImageView) view.findViewById(R.id.com_facebook_picker_image);
+        if (picture == null) {
+            return null;
+        }
+
+        // Note: these dimensions are in pixels, not dips
+        ViewGroup.LayoutParams layoutParams = picture.getLayoutParams();
+        return String.format(Locale.US, "picture.height(%d).width(%d)", layoutParams.height, layoutParams.width);
+    }
+
+
+    private boolean shouldShowActivityCircleCell() {
+        // We show the "more data" activity circle cell if we have a listener to request more data,
+        // we are expecting more data, and we have some data already (i.e., not on a fresh query).
+        return (cursor != null) && cursor.areMoreObjectsAvailable() && (dataNeededListener != null) && !isEmpty();
+    }
+
+    private void rebuildSections() {
+        sectionKeys = new ArrayList<String>();
+        graphObjectsBySection = new HashMap<String, ArrayList<JSONObject>>();
+        graphObjectsById = new HashMap<String, JSONObject>();
+        displaySections = false;
+
+        if (cursor == null || cursor.getCount() == 0) {
+            return;
+        }
+
+        int objectsAdded = 0;
+        cursor.moveToFirst();
+        do {
+            JSONObject graphObject = cursor.getGraphObject();
+
+            if (!filterIncludesItem(graphObject)) {
+                continue;
+            }
+
+            objectsAdded++;
+
+            String sectionKeyOfItem = getSectionKeyOfGraphObject(graphObject);
+            if (!graphObjectsBySection.containsKey(sectionKeyOfItem)) {
+                sectionKeys.add(sectionKeyOfItem);
+                graphObjectsBySection.put(sectionKeyOfItem, new ArrayList<JSONObject>());
+            }
+            List<JSONObject> section = graphObjectsBySection.get(sectionKeyOfItem);
+            section.add(graphObject);
+
+            graphObjectsById.put(getIdOfGraphObject(graphObject), graphObject);
+        } while (cursor.moveToNext());
+
+        if (sortFields != null) {
+            final Collator collator = Collator.getInstance();
+            for (List<JSONObject> section : graphObjectsBySection.values()) {
+                Collections.sort(section, new Comparator<JSONObject>() {
+                    @Override
+                    public int compare(JSONObject a, JSONObject b) {
+                        return compareGraphObjects(a, b, sortFields, collator);
+                    }
+                });
+            }
+        }
+
+        Collections.sort(sectionKeys, Collator.getInstance());
+
+        displaySections = sectionKeys.size() > 1 && objectsAdded > DISPLAY_SECTIONS_THRESHOLD;
+    }
+
+    SectionAndItem getSectionAndItem(int position) {
+        if (sectionKeys.size() == 0) {
+            return null;
+        }
+        String sectionKey = null;
+        JSONObject graphObject = null;
+
+        if (!displaySections) {
+            sectionKey = sectionKeys.get(0);
+            List<JSONObject> section = graphObjectsBySection.get(sectionKey);
+            if (position >= 0 && position < section.size()) {
+                graphObject = graphObjectsBySection.get(sectionKey).get(position);
+            } else {
+                // We are off the end; we must be adding an activity circle to indicate more data is coming.
+                assert dataNeededListener != null && cursor.areMoreObjectsAvailable();
+                // We return null for both to indicate this.
+                return new SectionAndItem(null, null);
+            }
+        } else {
+            // Count through the sections; the "0" position in each section is the header. We decrement
+            // position each time we skip forward a certain number of elements, including the header.
+            for (String key : sectionKeys) {
+                // Decrement if we skip over the header
+                if (position-- == 0) {
+                    sectionKey = key;
+                    break;
+                }
+
+                List<JSONObject> section = graphObjectsBySection.get(key);
+                if (position < section.size()) {
+                    // The position is somewhere in this section. Get the corresponding graph object.
+                    sectionKey = key;
+                    graphObject = section.get(position);
+                    break;
+                }
+                // Decrement by as many items as we skipped over
+                position -= section.size();
+            }
+        }
+        if (sectionKey != null) {
+            // Note: graphObject will be null if this represents a section header.
+            return new SectionAndItem(sectionKey, graphObject);
+        } else {
+            throw new IndexOutOfBoundsException("position");
+        }
+    }
+
+    int getPosition(String sectionKey, JSONObject graphObject) {
+        int position = 0;
+        boolean found = false;
+
+        // First find the section key and increment position one for each header we will render;
+        // increment by the size of each section prior to the one we want.
+        for (String key : sectionKeys) {
+            if (displaySections) {
+                position++;
+            }
+            if (key.equals(sectionKey)) {
+                found = true;
+                break;
+            } else {
+                position += graphObjectsBySection.get(key).size();
+            }
+        }
+
+        if (!found) {
+            return -1;
+        } else if (graphObject == null) {
+            // null represents the header for a section; we counted this header in position earlier,
+            // so subtract it back out.
+            return position - (displaySections ? 1 : 0);
+        }
+
+        // Now find index of this item within that section.
+        for (JSONObject t : graphObjectsBySection.get(sectionKey)) {
+            if (Utility.hasSameId(t, graphObject)) {
+                return position;
+            }
+            position++;
+        }
+        return -1;
+    }
+
+    @Override
+    public boolean isEmpty() {
+        // We'll never populate sectionKeys unless we have at least one object.
+        return sectionKeys.size() == 0;
+    }
+
+    @Override
+    public int getCount() {
+        if (sectionKeys.size() == 0) {
+            return 0;
+        }
+
+        // If we are not displaying sections, we don't display a header; otherwise, we have one header per item in
+        // addition to the actual items.
+        int count = (displaySections) ? sectionKeys.size() : 0;
+        for (List<JSONObject> section : graphObjectsBySection.values()) {
+            count += section.size();
+        }
+
+        // If we should show a cell with an activity circle indicating more data is coming, add it to the count.
+        if (shouldShowActivityCircleCell()) {
+            ++count;
+        }
+
+        return count;
+    }
+
+    @Override
+    public boolean areAllItemsEnabled() {
+        return displaySections;
+    }
+
+    @Override
+    public boolean hasStableIds() {
+        return true;
+    }
+
+    @Override
+    public boolean isEnabled(int position) {
+        SectionAndItem sectionAndItem = getSectionAndItem(position);
+        return sectionAndItem.getType() == SectionAndItem.Type.GRAPH_OBJECT;
+    }
+
+    @Override
+    public Object getItem(int position) {
+        SectionAndItem sectionAndItem = getSectionAndItem(position);
+        return (sectionAndItem.getType() == SectionAndItem.Type.GRAPH_OBJECT) ? sectionAndItem.graphObject : null;
+    }
+
+    @Override
+    public long getItemId(int position) {
+        // We assume IDs that can be converted to longs. If this is not the case for certain types of
+        // GraphObjects, subclasses should override this to return, e.g., position, and override hasStableIds
+        // to return false.
+        SectionAndItem sectionAndItem = getSectionAndItem(position);
+        if (sectionAndItem != null && sectionAndItem.graphObject != null) {
+            String id = getIdOfGraphObject(sectionAndItem.graphObject);
+            if (id != null) {
+                try {
+                    return Long.parseLong(id);
+                } catch (NumberFormatException e) {
+                    // NOOP
+                }
+            }
+        }
+        return 0;
+    }
+
+    @Override
+    public int getViewTypeCount() {
+        return 3;
+    }
+
+    @Override
+    public int getItemViewType(int position) {
+        SectionAndItem sectionAndItem = getSectionAndItem(position);
+        switch (sectionAndItem.getType()) {
+            case SECTION_HEADER:
+                return HEADER_VIEW_TYPE;
+            case GRAPH_OBJECT:
+                return GRAPH_OBJECT_VIEW_TYPE;
+            case ACTIVITY_CIRCLE:
+                return ACTIVITY_CIRCLE_VIEW_TYPE;
+            default:
+                throw new FacebookException("Unexpected type of section and item.");
+        }
+    }
+
+    @Override
+    public View getView(int position, View convertView, ViewGroup parent) {
+        SectionAndItem sectionAndItem = getSectionAndItem(position);
+
+        switch (sectionAndItem.getType()) {
+            case SECTION_HEADER:
+                return getSectionHeaderView(sectionAndItem.sectionKey, convertView, parent);
+            case GRAPH_OBJECT:
+                return getGraphObjectView(sectionAndItem.graphObject, convertView, parent);
+            case ACTIVITY_CIRCLE:
+                // If we get a request for this view, it means we need more data.
+                assert cursor.areMoreObjectsAvailable() && (dataNeededListener != null);
+                dataNeededListener.onDataNeeded();
+                return getActivityCircleView(convertView, parent);
+            default:
+                throw new FacebookException("Unexpected type of section and item.");
+        }
+    }
+
+    @Override
+    public Object[] getSections() {
+        if (displaySections) {
+            return sectionKeys.toArray();
+        } else {
+            return new Object[0];
+        }
+    }
+
+    @Override
+    public int getPositionForSection(int section) {
+        if (displaySections) {
+            section = Math.max(0, Math.min(section, sectionKeys.size() - 1));
+            if (section < sectionKeys.size()) {
+                return getPosition(sectionKeys.get(section), null);
+            }
+        }
+        return 0;
+    }
+
+    @Override
+    public int getSectionForPosition(int position) {
+        SectionAndItem sectionAndItem = getSectionAndItem(position);
+        if (sectionAndItem != null &&
+                sectionAndItem.getType() != SectionAndItem.Type.ACTIVITY_CIRCLE) {
+            return Math.max(0, Math.min(sectionKeys.indexOf(sectionAndItem.sectionKey), sectionKeys.size() - 1));
+        }
+        return 0;
+    }
+
+    public List<JSONObject> getGraphObjectsById(Collection<String> ids) {
+        Set<String> idSet = new HashSet<String>();
+        idSet.addAll(ids);
+
+        ArrayList<JSONObject> result = new ArrayList<JSONObject>(idSet.size());
+        for (String id : idSet) {
+            JSONObject graphObject = graphObjectsById.get(id);
+            if (graphObject != null) {
+                result.add(graphObject);
+            }
+        }
+
+        return result;
+    }
+
+    private void downloadProfilePicture(
+            final String profileId,
+            Uri pictureUri,
+            final ImageView imageView) {
+        if (pictureUri == null) {
+            return;
+        }
+
+        // If we don't have an imageView, we are pre-fetching this image to store in-memory because we
+        // think the user might scroll to its corresponding list row. If we do have an imageView, we
+        // only want to queue a download if the view's tag isn't already set to the URL (which would mean
+        // it's already got the correct picture).
+        boolean prefetching = imageView == null;
+        if (prefetching || !pictureUri.equals(imageView.getTag())) {
+            if (!prefetching) {
+                // Setting the tag to the profile ID indicates that we're currently downloading the
+                // picture for this profile; we'll set it to the actual picture URL when complete.
+                imageView.setTag(profileId);
+                imageView.setImageResource(getDefaultPicture());
+            }
+
+            ImageRequest.Builder builder = new ImageRequest.Builder(
+                    context.getApplicationContext(),
+                    pictureUri)
+                    .setCallerTag(this)
+                    .setCallback(
+                            new ImageRequest.Callback() {
+                                @Override
+                                public void onCompleted(ImageResponse response) {
+                                    processImageResponse(response, profileId, imageView);
+                                }
+                            });
+
+            ImageRequest newRequest = builder.build();
+            pendingRequests.put(profileId, newRequest);
+
+            ImageDownloader.downloadAsync(newRequest);
+        }
+    }
+
+    private void callOnErrorListener(Exception exception) {
+        if (onErrorListener != null) {
+            if (!(exception instanceof FacebookException)) {
+                exception = new FacebookException(exception);
+            }
+            onErrorListener.onError(this, (FacebookException) exception);
+        }
+    }
+
+    private void processImageResponse(ImageResponse response, String graphObjectId, ImageView imageView) {
+        pendingRequests.remove(graphObjectId);
+        if (response.getError() != null) {
+            callOnErrorListener(response.getError());
+        }
+
+        if (imageView == null) {
+            // This was a pre-fetch request.
+            if (response.getBitmap() != null) {
+                // Is the cache too big?
+                if (prefetchedPictureCache.size() >= MAX_PREFETCHED_PICTURES) {
+                    // Find the oldest one and remove it.
+                    String oldestId = prefetchedProfilePictureIds.remove(0);
+                    prefetchedPictureCache.remove(oldestId);
+                }
+                prefetchedPictureCache.put(graphObjectId, response);
+            }
+        } else if (graphObjectId.equals(imageView.getTag())) {
+            Exception error = response.getError();
+            Bitmap bitmap = response.getBitmap();
+            if (error == null && bitmap != null) {
+                imageView.setImageBitmap(bitmap);
+                imageView.setTag(response.getRequest().getImageUri());
+            }
+        }
+    }
+
+    private static int compareGraphObjects(JSONObject a, JSONObject b, Collection<String> sortFields,
+            Collator collator) {
+        for (String sortField : sortFields) {
+            String sa = a.optString(sortField);
+            String sb = b.optString(sortField);
+
+            if (sa != null && sb != null) {
+                int result = collator.compare(sa, sb);
+                if (result != 0) {
+                    return result;
+                }
+            } else if (!(sa == null && sb == null)) {
+                return (sa == null) ? -1 : 1;
+            }
+        }
+        return 0;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/picker/GraphObjectCursor.java b/facebook/src/main/java/com/facebook/picker/GraphObjectCursor.java
new file mode 100644
index 000000000..d01ffc6b2
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/picker/GraphObjectCursor.java
@@ -0,0 +1,142 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.picker;
+
+import android.database.CursorIndexOutOfBoundsException;
+import org.json.JSONArray;
+import org.json.JSONObject;
+
+import java.util.ArrayList;
+import java.util.List;
+
+class GraphObjectCursor {
+    private int pos = -1;
+    private boolean closed = false;
+    private List<JSONObject> graphObjects = new ArrayList<JSONObject>();
+    private boolean moreObjectsAvailable = false;
+
+    GraphObjectCursor() {
+    }
+
+    GraphObjectCursor(GraphObjectCursor other) {
+        pos = other.pos;
+        closed = other.closed;
+        graphObjects = new ArrayList<JSONObject>();
+        graphObjects.addAll(other.graphObjects);
+
+        // We do not copy observers.
+    }
+
+    public void addGraphObjects(JSONArray graphObjects) {
+        for (int i = 0; i < graphObjects.length(); ++i) {
+            this.graphObjects.add(graphObjects.optJSONObject(i));
+        }
+    }
+
+    public boolean areMoreObjectsAvailable() {
+        return moreObjectsAvailable;
+    }
+
+    public void setMoreObjectsAvailable(boolean moreObjectsAvailable) {
+        this.moreObjectsAvailable = moreObjectsAvailable;
+    }
+
+    public int getCount() {
+        return graphObjects.size();
+    }
+
+    public int getPosition() {
+        return pos;
+    }
+
+    public boolean move(int offset) {
+        return moveToPosition(pos + offset);
+    }
+
+    public boolean moveToPosition(int position) {
+        final int count = getCount();
+        if (position >= count) {
+            pos = count;
+            return false;
+        }
+
+        if (position < 0) {
+            pos = -1;
+            return false;
+        }
+
+        pos = position;
+        return true;
+    }
+
+    public boolean moveToFirst() {
+        return moveToPosition(0);
+    }
+
+    public boolean moveToLast() {
+        return moveToPosition(getCount() - 1);
+    }
+
+    public boolean moveToNext() {
+        return moveToPosition(pos + 1);
+    }
+
+    public boolean moveToPrevious() {
+        return moveToPosition(pos - 1);
+    }
+
+    public boolean isFirst() {
+        return (pos == 0) && (getCount() != 0);
+    }
+
+    public boolean isLast() {
+        final int count = getCount();
+        return (pos == (count - 1)) && (count != 0);
+    }
+
+    public boolean isBeforeFirst() {
+        return (getCount() == 0) || (pos == -1);
+    }
+
+    public boolean isAfterLast() {
+        final int count = getCount();
+        return (count == 0) || (pos == count);
+    }
+
+    public JSONObject getGraphObject() {
+        if (pos < 0) {
+            throw new CursorIndexOutOfBoundsException("Before first object.");
+        }
+        if (pos >= graphObjects.size()) {
+            throw new CursorIndexOutOfBoundsException("After last object.");
+        }
+        return graphObjects.get(pos);
+    }
+
+    public void close() {
+        closed = true;
+    }
+
+    public boolean isClosed() {
+        return closed;
+    }
+
+}
diff --git a/facebook/src/main/java/com/facebook/picker/GraphObjectPagingLoader.java b/facebook/src/main/java/com/facebook/picker/GraphObjectPagingLoader.java
new file mode 100644
index 000000000..93bbd5642
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/picker/GraphObjectPagingLoader.java
@@ -0,0 +1,170 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.picker;
+
+import android.content.Context;
+import android.support.v4.content.Loader;
+
+import com.facebook.*;
+import org.json.JSONArray;
+
+class GraphObjectPagingLoader extends Loader<GraphObjectCursor> {
+    private GraphRequest originalRequest;
+    private GraphRequest currentRequest;
+    private GraphRequest nextRequest;
+    private OnErrorListener onErrorListener;
+    private GraphObjectCursor cursor;
+    private boolean appendResults = false;
+    private boolean loading = false;
+
+    public interface OnErrorListener {
+        public void onError(FacebookException error, GraphObjectPagingLoader loader);
+    }
+
+    public GraphObjectPagingLoader(Context context) {
+        super(context);
+    }
+
+    public OnErrorListener getOnErrorListener() {
+        return onErrorListener;
+    }
+
+    public void setOnErrorListener(OnErrorListener listener) {
+        this.onErrorListener = listener;
+    }
+
+    public GraphObjectCursor getCursor() {
+        return cursor;
+    }
+
+    public void clearResults() {
+        nextRequest = null;
+        originalRequest = null;
+        currentRequest = null;
+
+        deliverResult(null);
+    }
+
+    public boolean isLoading() {
+        return loading;
+    }
+
+    public void startLoading(GraphRequest request) {
+        appendResults = false;
+        nextRequest = null;
+        currentRequest = request;
+        currentRequest.setCallback(new GraphRequest.Callback() {
+            @Override
+            public void onCompleted(GraphResponse response) {
+                requestCompleted(response);
+            }
+        });
+
+        loading = true;
+        final GraphRequestBatch batch = new GraphRequestBatch(request);
+        GraphRequest.executeBatchAsync(batch);
+    }
+
+    public void followNextLink() {
+        if (nextRequest != null) {
+            appendResults = true;
+            currentRequest = nextRequest;
+
+            currentRequest.setCallback(new GraphRequest.Callback() {
+                @Override
+                public void onCompleted(GraphResponse response) {
+                    requestCompleted(response);
+                }
+            });
+
+            loading = true;
+            GraphRequest.executeBatchAsync(new GraphRequestBatch(currentRequest));
+        }
+    }
+
+    @Override
+    public void deliverResult(GraphObjectCursor cursor) {
+        GraphObjectCursor oldCursor = this.cursor;
+        this.cursor = cursor;
+
+        if (isStarted()) {
+            super.deliverResult(cursor);
+
+            if (oldCursor != null && oldCursor != cursor && !oldCursor.isClosed()) {
+                oldCursor.close();
+            }
+        }
+    }
+
+    @Override
+    protected void onStartLoading() {
+        super.onStartLoading();
+
+        if (cursor != null) {
+            deliverResult(cursor);
+        }
+    }
+
+    private void requestCompleted(GraphResponse response) {
+        GraphRequest request = response.getRequest();
+        if (request != currentRequest) {
+            return;
+        }
+
+        loading = false;
+        currentRequest = null;
+
+        FacebookRequestError requestError = response.getError();
+        FacebookException exception = (requestError == null) ? null : requestError.getException();
+        if (response.getJSONObject() == null && exception == null) {
+            exception = new FacebookException("GraphObjectPagingLoader received neither a result nor an error.");
+        }
+
+        if (exception != null) {
+            nextRequest = null;
+
+            if (onErrorListener != null) {
+                onErrorListener.onError(exception, this);
+            }
+        } else {
+            addResults(response);
+        }
+    }
+
+    private void addResults(GraphResponse response) {
+        GraphObjectCursor cursorToModify = (cursor == null || !appendResults) ? new GraphObjectCursor() :
+                new GraphObjectCursor(cursor);
+
+        JSONArray data = response.getJSONObject().optJSONArray("data");
+
+        boolean haveData = data.length() > 0;
+
+        if (haveData) {
+            nextRequest = response.getRequestForPagedResults(GraphResponse.PagingDirection.NEXT);
+            cursorToModify.addGraphObjects(data);
+        } else {
+            nextRequest = null;
+        }
+        cursorToModify.setMoreObjectsAvailable(nextRequest != null);
+
+        deliverResult(cursorToModify);
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/picker/PickerFragment.java b/facebook/src/main/java/com/facebook/picker/PickerFragment.java
new file mode 100644
index 000000000..580ee6e77
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/picker/PickerFragment.java
@@ -0,0 +1,1085 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.picker;
+
+import android.app.Activity;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.LoaderManager;
+import android.content.Context;
+import android.support.v4.content.Loader;
+import android.content.res.TypedArray;
+import android.graphics.drawable.Drawable;
+import android.os.Bundle;
+import android.text.TextUtils;
+import android.util.AttributeSet;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewStub;
+import android.view.animation.AlphaAnimation;
+import android.widget.*;
+
+import com.facebook.AccessToken;
+import com.facebook.AccessTokenTracker;
+import com.facebook.FacebookException;
+import com.facebook.GraphRequest;
+import com.facebook.R;
+
+import org.json.JSONObject;
+
+import java.util.*;
+
+/**
+ * Provides functionality common to SDK UI elements that allow the user to pick one or more
+ * graph objects (e.g., places, friends) from a list of possibilities. The UI is exposed as a
+ * Fragment to allow to it to be included in an Activity along with other Fragments. The Fragments
+ * can be configured by passing parameters as part of their Intent bundle, or (for certain
+ * properties) by specifying attributes in their XML layout files.
+ * <br/>
+ * PickerFragments support callbacks that will be called in the event of an error, when the
+ * underlying data has been changed, or when the set of selected graph objects changes.
+ */
+public abstract class PickerFragment extends Fragment {
+    /**
+     * The key for a boolean parameter in the fragment's Intent bundle to indicate whether the
+     * picker should show pictures (if available) for the graph objects.
+     */
+    public static final String SHOW_PICTURES_BUNDLE_KEY = "com.facebook.widget.PickerFragment.ShowPictures";
+    /**
+     * The key for a String parameter in the fragment's Intent bundle to indicate which extra fields
+     * beyond the default fields should be retrieved for any graph objects in the results.
+     */
+    public static final String EXTRA_FIELDS_BUNDLE_KEY = "com.facebook.widget.PickerFragment.ExtraFields";
+    /**
+     * The key for a boolean parameter in the fragment's Intent bundle to indicate whether the
+     * picker should display a title bar with a Done button.
+     */
+    public static final String SHOW_TITLE_BAR_BUNDLE_KEY = "com.facebook.widget.PickerFragment.ShowTitleBar";
+    /**
+     * The key for a String parameter in the fragment's Intent bundle to indicate the text to
+     * display in the title bar.
+     */
+    public static final String TITLE_TEXT_BUNDLE_KEY = "com.facebook.widget.PickerFragment.TitleText";
+    /**
+     * The key for a String parameter in the fragment's Intent bundle to indicate the text to
+     * display in the Done button.
+     */
+    public static final String DONE_BUTTON_TEXT_BUNDLE_KEY = "com.facebook.widget.PickerFragment.DoneButtonText";
+
+    private static final String SELECTION_BUNDLE_KEY = "com.facebook.android.PickerFragment.Selection";
+    private static final String ACTIVITY_CIRCLE_SHOW_KEY = "com.facebook.android.PickerFragment.ActivityCircleShown";
+    private static final int PROFILE_PICTURE_PREFETCH_BUFFER = 5;
+
+    private final int layout;
+    private OnErrorListener onErrorListener;
+    private OnDataChangedListener onDataChangedListener;
+    private OnSelectionChangedListener onSelectionChangedListener;
+    private OnDoneButtonClickedListener onDoneButtonClickedListener;
+    private GraphObjectFilter filter;
+    private boolean showPictures = true;
+    private boolean showTitleBar = true;
+    private ListView listView;
+    HashSet<String> extraFields = new HashSet<String>();
+    GraphObjectAdapter adapter;
+    private LoadingStrategy loadingStrategy;
+    private SelectionStrategy selectionStrategy;
+    private Set<String> selectionHint;
+    private ProgressBar activityCircle;
+    private AccessTokenTracker accessTokenTracker;
+    private String titleText;
+    private String doneButtonText;
+    private TextView titleTextView;
+    private Button doneButton;
+    private Drawable titleBarBackground;
+    private Drawable doneButtonBackground;
+    private boolean appEventsLogged;
+
+    protected PickerFragment(int layout) {
+        this.layout = layout;
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        adapter = createAdapter();
+        adapter.setFilter(new GraphObjectAdapter.Filter() {
+            @Override
+            public boolean includeItem(JSONObject graphObject) {
+                return filterIncludesItem(graphObject);
+            }
+        });
+    }
+
+    @Override
+    public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {
+        super.onInflate(activity, attrs, savedInstanceState);
+        TypedArray a = activity.obtainStyledAttributes(attrs, R.styleable.picker_fragment);
+
+        setShowPictures(a.getBoolean(R.styleable.picker_fragment_show_pictures, showPictures));
+        String extraFieldsString = a.getString(R.styleable.picker_fragment_extra_fields);
+        if (extraFieldsString != null) {
+            String[] strings = extraFieldsString.split(",");
+            setExtraFields(Arrays.asList(strings));
+        }
+
+        showTitleBar = a.getBoolean(R.styleable.picker_fragment_show_title_bar, showTitleBar);
+        titleText = a.getString(R.styleable.picker_fragment_title_text);
+        doneButtonText = a.getString(R.styleable.picker_fragment_done_button_text);
+        titleBarBackground = a.getDrawable(R.styleable.picker_fragment_title_bar_background);
+        doneButtonBackground = a.getDrawable(R.styleable.picker_fragment_done_button_background);
+
+        a.recycle();
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        ViewGroup view = (ViewGroup) inflater.inflate(layout, container, false);
+
+        listView = (ListView) view.findViewById(R.id.com_facebook_picker_list_view);
+        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> parent, View v, int position, long id) {
+                onListItemClick((ListView) parent, v, position);
+            }
+        });
+        listView.setOnLongClickListener(new View.OnLongClickListener() {
+            @Override
+            public boolean onLongClick(View v) {
+                // We don't actually do anything differently on long-clicks, but setting the listener
+                // enables the selector transition that we have for visual consistency with the
+                // Facebook app's pickers.
+                return false;
+            }
+        });
+        listView.setOnScrollListener(onScrollListener);
+
+        activityCircle = (ProgressBar) view.findViewById(R.id.com_facebook_picker_activity_circle);
+
+        setupViews(view);
+
+        listView.setAdapter(adapter);
+
+        return view;
+    }
+
+    @Override
+    public void onActivityCreated(final Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+
+        accessTokenTracker = new AccessTokenTracker() {
+            @Override
+            protected void onCurrentAccessTokenChanged(AccessToken oldAccessToken,
+                                                       AccessToken currentAccessToken) {
+                clearResults();
+            }
+        };
+
+        setSettingsFromBundle(savedInstanceState);
+
+        loadingStrategy = createLoadingStrategy();
+        loadingStrategy.attach(adapter);
+
+        selectionStrategy = createSelectionStrategy();
+        selectionStrategy.readSelectionFromBundle(savedInstanceState, SELECTION_BUNDLE_KEY);
+
+        // Should we display a title bar? (We need to do this after we've retrieved our bundle settings.)
+        if (showTitleBar) {
+            inflateTitleBar((ViewGroup) getView());
+        }
+
+        if (activityCircle != null && savedInstanceState != null) {
+            boolean shown = savedInstanceState.getBoolean(ACTIVITY_CIRCLE_SHOW_KEY, false);
+            if (shown) {
+                displayActivityCircle();
+            } else {
+                // Should be hidden already, but just to be sure.
+                hideActivityCircle();
+            }
+        }
+    }
+
+    @Override
+    public void onDetach() {
+        super.onDetach();
+
+        listView.setOnScrollListener(null);
+        listView.setAdapter(null);
+
+        loadingStrategy.detach();
+        accessTokenTracker.stopTracking();
+    }
+
+    @Override
+    public void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+
+        saveSettingsToBundle(outState);
+        selectionStrategy.saveSelectionToBundle(outState, SELECTION_BUNDLE_KEY);
+        if (activityCircle != null) {
+            outState.putBoolean(ACTIVITY_CIRCLE_SHOW_KEY, activityCircle.getVisibility() == View.VISIBLE);
+        }
+    }
+
+    @Override
+    public void onStop() {
+        if (!appEventsLogged) {
+            logAppEvents(false);
+        }
+        super.onStop();
+    }
+
+    @Override
+    public void setArguments(Bundle args) {
+        super.setArguments(args);
+        setSettingsFromBundle(args);
+    }
+
+    /**
+     * Gets the current OnDataChangedListener for this fragment, which will be called whenever
+     * the underlying data being displaying in the picker has changed.
+     *
+     * @return the OnDataChangedListener, or null if there is none
+     */
+    public OnDataChangedListener getOnDataChangedListener() {
+        return onDataChangedListener;
+    }
+
+    /**
+     * Sets the current OnDataChangedListener for this fragment, which will be called whenever
+     * the underlying data being displaying in the picker has changed.
+     *
+     * @param onDataChangedListener the OnDataChangedListener, or null if there is none
+     */
+    public void setOnDataChangedListener(OnDataChangedListener onDataChangedListener) {
+        this.onDataChangedListener = onDataChangedListener;
+    }
+
+    /**
+     * Gets the current OnSelectionChangedListener for this fragment, which will be called
+     * whenever the user selects or unselects a graph object in the list.
+     *
+     * @return the OnSelectionChangedListener, or null if there is none
+     */
+    public OnSelectionChangedListener getOnSelectionChangedListener() {
+        return onSelectionChangedListener;
+    }
+
+    /**
+     * Sets the current OnSelectionChangedListener for this fragment, which will be called
+     * whenever the user selects or unselects a graph object in the list.
+     *
+     * @param onSelectionChangedListener the OnSelectionChangedListener, or null if there is none
+     */
+    public void setOnSelectionChangedListener(
+            OnSelectionChangedListener onSelectionChangedListener) {
+        this.onSelectionChangedListener = onSelectionChangedListener;
+    }
+
+    /**
+     * Gets the current OnDoneButtonClickedListener for this fragment, which will be called
+     * when the user clicks the Done button.
+     *
+     * @return the OnDoneButtonClickedListener, or null if there is none
+     */
+    public OnDoneButtonClickedListener getOnDoneButtonClickedListener() {
+        return onDoneButtonClickedListener;
+    }
+
+    /**
+     * Sets the current OnDoneButtonClickedListener for this fragment, which will be called
+     * when the user clicks the Done button. This will only be possible if the title bar is
+     * being shown in this fragment.
+     *
+     * @param onDoneButtonClickedListener the OnDoneButtonClickedListener, or null if there is none
+     */
+    public void setOnDoneButtonClickedListener(OnDoneButtonClickedListener onDoneButtonClickedListener) {
+        this.onDoneButtonClickedListener = onDoneButtonClickedListener;
+    }
+
+    /**
+     * Gets the current OnErrorListener for this fragment, which will be called in the event
+     * of network or other errors encountered while populating the graph objects in the list.
+     *
+     * @return the OnErrorListener, or null if there is none
+     */
+    public OnErrorListener getOnErrorListener() {
+        return onErrorListener;
+    }
+
+    /**
+     * Sets the current OnErrorListener for this fragment, which will be called in the event
+     * of network or other errors encountered while populating the graph objects in the list.
+     *
+     * @param onErrorListener the OnErrorListener, or null if there is none
+     */
+    public void setOnErrorListener(OnErrorListener onErrorListener) {
+        this.onErrorListener = onErrorListener;
+    }
+
+    /**
+     * Gets the current filter for this fragment, which will be called for each graph object
+     * returned from the service to determine if it should be displayed in the list.
+     * If no filter is specified, all retrieved graph objects will be displayed.
+     *
+     * @return the GraphObjectFilter, or null if there is none
+     */
+    public GraphObjectFilter getFilter() {
+        return filter;
+    }
+
+    /**
+     * Sets the current filter for this fragment, which will be called for each graph object
+     * returned from the service to determine if it should be displayed in the list.
+     * If no filter is specified, all retrieved graph objects will be displayed.
+     *
+     * @param filter the GraphObjectFilter, or null if there is none
+     */
+    public void setFilter(GraphObjectFilter filter) {
+        this.filter = filter;
+    }
+
+    /**
+     * Gets whether to display pictures, if available, for displayed graph objects.
+     *
+     * @return true if pictures should be displayed, false if not
+     */
+    public boolean getShowPictures() {
+        return showPictures;
+    }
+
+    /**
+     * Sets whether to display pictures, if available, for displayed graph objects.
+     *
+     * @param showPictures true if pictures should be displayed, false if not
+     */
+    public void setShowPictures(boolean showPictures) {
+        this.showPictures = showPictures;
+    }
+
+    /**
+     * Gets the extra fields to request for the retrieved graph objects.
+     *
+     * @return the extra fields to request
+     */
+    public Set<String> getExtraFields() {
+        return new HashSet<String>(extraFields);
+    }
+
+    /**
+     * Sets the extra fields to request for the retrieved graph objects.
+     *
+     * @param fields the extra fields to request
+     */
+    public void setExtraFields(Collection<String> fields) {
+        extraFields = new HashSet<String>();
+        if (fields != null) {
+            extraFields.addAll(fields);
+        }
+    }
+
+    /**
+     * Sets whether to show a title bar with a Done button. This must be
+     * called prior to the Fragment going through its creation lifecycle to have an effect.
+     *
+     * @param showTitleBar true if a title bar should be displayed, false if not
+     */
+    public void setShowTitleBar(boolean showTitleBar) {
+        this.showTitleBar = showTitleBar;
+    }
+
+    /**
+     * Gets whether to show a title bar with a Done button. The default is true.
+     *
+     * @return true if a title bar will be shown, false if not.
+     */
+    public boolean getShowTitleBar() {
+        return showTitleBar;
+    }
+
+    /**
+     * Sets the text to show in the title bar, if a title bar is to be shown. This must be
+     * called prior to the Fragment going through its creation lifecycle to have an effect, or
+     * the default will be used.
+     *
+     * @param titleText the text to show in the title bar
+     */
+    public void setTitleText(String titleText) {
+        this.titleText = titleText;
+    }
+
+    /**
+     * Gets the text to show in the title bar, if a title bar is to be shown.
+     *
+     * @return the text to show in the title bar
+     */
+    public String getTitleText() {
+        if (titleText == null) {
+            titleText = getDefaultTitleText();
+        }
+        return titleText;
+    }
+
+    /**
+     * Sets the text to show in the Done button, if a title bar is to be shown. This must be
+     * called prior to the Fragment going through its creation lifecycle to have an effect, or
+     * the default will be used.
+     *
+     * @param doneButtonText the text to show in the Done button
+     */
+    public void setDoneButtonText(String doneButtonText) {
+        this.doneButtonText = doneButtonText;
+    }
+
+    /**
+     * Gets the text to show in the Done button, if a title bar is to be shown.
+     *
+     * @return the text to show in the Done button
+     */
+    public String getDoneButtonText() {
+        if (doneButtonText == null) {
+            doneButtonText = getDefaultDoneButtonText();
+        }
+        return doneButtonText;
+    }
+
+    /**
+     * Causes the picker to load data from the service and display it to the user.
+     *
+     * @param forceReload if true, data will be loaded even if there is already data being displayed (or loading);
+     *                    if false, data will not be re-loaded if it is already displayed (or loading)
+     */
+    public void loadData(boolean forceReload) {
+        loadData(forceReload, null);
+    }
+
+    /**
+     * Causes the picker to load data from the service and display it to the user.
+     *
+     * @param forceReload if true, data will be loaded even if there is already data being displayed (or loading);
+     *                    if false, data will not be re-loaded if it is already displayed (or loading)
+     * @param selectIds ids to select, if they are present in the loaded data
+     */
+    public void loadData(boolean forceReload, Set<String> selectIds) {
+        if (!forceReload && loadingStrategy.isDataPresentOrLoading()) {
+            return;
+        }
+        selectionHint = selectIds;
+        clearResults();
+
+        GraphRequest request = getRequestForLoadData();
+        if (request != null) {
+            onLoadingData();
+            loadingStrategy.startLoading(request);
+        }
+    }
+
+    /**
+     * Updates the properties of the PickerFragment based on the contents of the supplied Bundle;
+     * calling Activities may use this to pass additional configuration information to the
+     * PickerFragment beyond what is specified in its XML layout.
+     *
+     * @param inState a Bundle containing keys corresponding to properties of the PickerFragment
+     */
+    public void setSettingsFromBundle(Bundle inState) {
+        if (inState != null) {
+            showPictures = inState.getBoolean(SHOW_PICTURES_BUNDLE_KEY, showPictures);
+            String extraFieldsString = inState.getString(EXTRA_FIELDS_BUNDLE_KEY);
+            if (extraFieldsString != null) {
+                String[] strings = extraFieldsString.split(",");
+                setExtraFields(Arrays.asList(strings));
+            }
+            showTitleBar = inState.getBoolean(SHOW_TITLE_BAR_BUNDLE_KEY, showTitleBar);
+            String titleTextString = inState.getString(TITLE_TEXT_BUNDLE_KEY);
+            if (titleTextString != null) {
+                titleText = titleTextString;
+                if (titleTextView != null) {
+                    titleTextView.setText(titleText);
+                }
+            }
+            String doneButtonTextString = inState.getString(DONE_BUTTON_TEXT_BUNDLE_KEY);
+            if (doneButtonTextString != null) {
+                doneButtonText = doneButtonTextString;
+                if (doneButton != null) {
+                    doneButton.setText(doneButtonText);
+                }
+            }
+        }
+
+    }
+
+    void setupViews(ViewGroup view) {
+    }
+
+    boolean filterIncludesItem(JSONObject graphObject) {
+        if (filter != null) {
+            return filter.includeItem(graphObject);
+        }
+        return true;
+    }
+
+    List<JSONObject> getSelectedGraphObjects() {
+        return adapter.getGraphObjectsById(selectionStrategy.getSelectedIds());
+    }
+
+    void setSelectedGraphObjects(List<String> objectIds) {
+        for(String objectId : objectIds) {
+            if(!this.selectionStrategy.isSelected(objectId)) {
+                this.selectionStrategy.toggleSelection(objectId);
+            }
+        }
+    }
+
+    void saveSettingsToBundle(Bundle outState) {
+        outState.putBoolean(SHOW_PICTURES_BUNDLE_KEY, showPictures);
+        if (!extraFields.isEmpty()) {
+            outState.putString(EXTRA_FIELDS_BUNDLE_KEY, TextUtils.join(",", extraFields));
+        }
+        outState.putBoolean(SHOW_TITLE_BAR_BUNDLE_KEY, showTitleBar);
+        outState.putString(TITLE_TEXT_BUNDLE_KEY, titleText);
+        outState.putString(DONE_BUTTON_TEXT_BUNDLE_KEY, doneButtonText);
+    }
+
+    abstract GraphRequest getRequestForLoadData();
+
+    abstract PickerFragmentAdapter createAdapter();
+
+    abstract LoadingStrategy createLoadingStrategy();
+
+    abstract SelectionStrategy createSelectionStrategy();
+
+    void onLoadingData() {
+    }
+
+    String getDefaultTitleText() {
+        return null;
+    }
+
+    String getDefaultDoneButtonText() {
+        return getString(R.string.picker_picker_done_button_text);
+    }
+
+    void displayActivityCircle() {
+        if (activityCircle != null) {
+            layoutActivityCircle();
+            activityCircle.setVisibility(View.VISIBLE);
+        }
+    }
+
+    void layoutActivityCircle() {
+        // If we've got no data, make the activity circle full-opacity. Otherwise we'll dim it to avoid
+        //  cluttering the UI.
+        float alpha = (!adapter.isEmpty()) ? .25f : 1.0f;
+        setAlpha(activityCircle, alpha);
+    }
+
+    void hideActivityCircle() {
+        if (activityCircle != null) {
+            // We use an animation to dim the activity circle; need to clear this or it will remain visible.
+            activityCircle.clearAnimation();
+            activityCircle.setVisibility(View.INVISIBLE);
+        }
+    }
+
+    void setSelectionStrategy(SelectionStrategy selectionStrategy) {
+        if (selectionStrategy != this.selectionStrategy) {
+            this.selectionStrategy = selectionStrategy;
+            if (adapter != null) {
+                // Adapter should cause a re-render.
+                adapter.notifyDataSetChanged();
+            }
+        }
+    }
+
+    void logAppEvents(boolean doneButtonClicked) {
+    }
+
+    private static void setAlpha(View view, float alpha) {
+        // Set the alpha appropriately (setAlpha is API >= 11, this technique works on all API levels).
+        AlphaAnimation alphaAnimation = new AlphaAnimation(alpha, alpha);
+        alphaAnimation.setDuration(0);
+        alphaAnimation.setFillAfter(true);
+        view.startAnimation(alphaAnimation);
+    }
+
+    private void inflateTitleBar(ViewGroup view) {
+        ViewStub stub = (ViewStub) view.findViewById(R.id.com_facebook_picker_title_bar_stub);
+        if (stub != null) {
+            View titleBar = stub.inflate();
+
+            final RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(
+                    RelativeLayout.LayoutParams.MATCH_PARENT,
+                    RelativeLayout.LayoutParams.MATCH_PARENT);
+            layoutParams.addRule(RelativeLayout.BELOW, R.id.com_facebook_picker_title_bar);
+            listView.setLayoutParams(layoutParams);
+
+            if (titleBarBackground != null) {
+                titleBar.setBackgroundDrawable(titleBarBackground);
+            }
+
+            doneButton = (Button) view.findViewById(R.id.com_facebook_picker_done_button);
+            if (doneButton != null) {
+                doneButton.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        logAppEvents(true);
+                        appEventsLogged = true;
+
+                        if (onDoneButtonClickedListener != null) {
+                            onDoneButtonClickedListener.onDoneButtonClicked(PickerFragment.this);
+                        }
+                    }
+                });
+
+                if (getDoneButtonText() != null) {
+                    doneButton.setText(getDoneButtonText());
+                }
+
+                if (doneButtonBackground != null) {
+                    doneButton.setBackgroundDrawable(doneButtonBackground);
+                }
+            }
+
+            titleTextView = (TextView) view.findViewById(R.id.com_facebook_picker_title);
+            if (titleTextView != null) {
+                if (getTitleText() != null) {
+                    titleTextView.setText(getTitleText());
+                }
+            }
+        }
+    }
+
+    private void onListItemClick(ListView listView, View v, int position) {
+        @SuppressWarnings("unchecked")
+        JSONObject graphObject = (JSONObject) listView.getItemAtPosition(position);
+        String id = adapter.getIdOfGraphObject(graphObject);
+        selectionStrategy.toggleSelection(id);
+        adapter.notifyDataSetChanged();
+
+        if (onSelectionChangedListener != null) {
+            onSelectionChangedListener.onSelectionChanged(PickerFragment.this);
+        }
+    }
+
+    private void clearResults() {
+        if (adapter != null) {
+            boolean wasSelection = !selectionStrategy.isEmpty();
+            boolean wasData = !adapter.isEmpty();
+
+            loadingStrategy.clearResults();
+            selectionStrategy.clear();
+            adapter.notifyDataSetChanged();
+
+            // Tell anyone who cares the data and selection has changed, if they have.
+            if (wasData && onDataChangedListener != null) {
+                onDataChangedListener.onDataChanged(PickerFragment.this);
+            }
+            if (wasSelection && onSelectionChangedListener != null) {
+                onSelectionChangedListener.onSelectionChanged(PickerFragment.this);
+            }
+        }
+    }
+
+    void updateAdapter(GraphObjectCursor data) {
+        if (adapter != null) {
+            // As we fetch additional results and add them to the table, we do not
+            // want the items displayed jumping around seemingly at random, frustrating the user's
+            // attempts at scrolling, etc. Since results may be added anywhere in
+            // the table, we choose to try to keep the first visible row in a fixed
+            // position (from the user's perspective). We try to keep it positioned at
+            // the same offset from the top of the screen so adding new items seems
+            // smoother, as opposed to having it "snap" to a multiple of row height
+
+            // We use the second row, to give context above and below it and avoid
+            // cases where the first row is only barely visible, thus providing little context.
+            // The exception is where the very first row is visible, in which case we use that.
+            View view = listView.getChildAt(1);
+            int anchorPosition = listView.getFirstVisiblePosition();
+            if (anchorPosition > 0) {
+                anchorPosition++;
+            }
+            GraphObjectAdapter.SectionAndItem anchorItem = adapter.getSectionAndItem(anchorPosition);
+            final int top = (view != null &&
+                    anchorItem.getType() != GraphObjectAdapter.SectionAndItem.Type.ACTIVITY_CIRCLE) ?
+                    view.getTop() : 0;
+
+            // Now actually add the results.
+            boolean dataChanged = adapter.changeCursor(data);
+
+            if (view != null && anchorItem != null) {
+                // Put the item back in the same spot it was.
+                final int newPositionOfItem = adapter.getPosition(anchorItem.sectionKey, anchorItem.graphObject);
+                if (newPositionOfItem != -1) {
+                    listView.setSelectionFromTop(newPositionOfItem, top);
+                }
+            }
+
+            if (dataChanged && onDataChangedListener != null) {
+                onDataChangedListener.onDataChanged(PickerFragment.this);
+            }
+            if (selectionHint != null && !selectionHint.isEmpty() && data != null) {
+                data.moveToFirst();
+                boolean changed = false;
+                for (int i = 0; i < data.getCount(); i++) {
+                    data.moveToPosition(i);
+                    String id = data.getGraphObject().optString("id");
+                    if (id == null) {
+                        continue;
+                    }
+                    if (selectionHint.contains(id)) {
+                        selectionStrategy.toggleSelection(id);
+                        selectionHint.remove(id);
+                        changed = true;
+                    }
+                    if (selectionHint.isEmpty()) {
+                        break;
+                    }
+                }
+                if (onSelectionChangedListener != null && changed) {
+                    onSelectionChangedListener.onSelectionChanged(PickerFragment.this);
+                }
+            }
+        }
+    }
+
+    private void reprioritizeDownloads() {
+        int lastVisibleItem = listView.getLastVisiblePosition();
+        if (lastVisibleItem >= 0) {
+            int firstVisibleItem = listView.getFirstVisiblePosition();
+            adapter.prioritizeViewRange(firstVisibleItem, lastVisibleItem, PROFILE_PICTURE_PREFETCH_BUFFER);
+        }
+    }
+
+    private ListView.OnScrollListener onScrollListener = new ListView.OnScrollListener() {
+        @Override
+        public void onScrollStateChanged(AbsListView view, int scrollState) {
+        }
+
+        @Override
+        public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+            reprioritizeDownloads();
+        }
+    };
+
+    /**
+     * Callback interface that will be called when a network or other error is encountered
+     * while retrieving graph objects.
+     */
+    public interface OnErrorListener {
+        /**
+         * Called when a network or other error is encountered.
+         *
+         * @param error a FacebookException representing the error that was encountered.
+         */
+        void onError(PickerFragment fragment, FacebookException error);
+    }
+
+    /**
+     * Callback interface that will be called when the underlying data being displayed in the
+     * picker has been updated.
+     */
+    public interface OnDataChangedListener {
+        /**
+         * Called when the set of data being displayed in the picker has changed.
+         */
+        void onDataChanged(PickerFragment fragment);
+    }
+
+    /**
+     * Callback interface that will be called when the user selects or unselects graph objects
+     * in the picker.
+     */
+    public interface OnSelectionChangedListener {
+        /**
+         * Called when the user selects or unselects graph objects in the picker.
+         */
+        void onSelectionChanged(PickerFragment fragment);
+    }
+
+    /**
+     * Callback interface that will be called when the user clicks the Done button on the
+     * title bar.
+     */
+    public interface OnDoneButtonClickedListener {
+        /**
+         * Called when the user clicks the Done button.
+         */
+        void onDoneButtonClicked(PickerFragment fragment);
+    }
+
+    /**
+     * Callback interface that will be called to determine if a graph object should be displayed.
+     */
+    public interface GraphObjectFilter {
+        /**
+         * Called to determine if a graph object should be displayed.
+         *
+         * @param graphObject the graph object
+         * @return true to display the graph object, false to hide it
+         */
+        boolean includeItem(JSONObject graphObject);
+    }
+
+    abstract class LoadingStrategy {
+        protected final static int CACHED_RESULT_REFRESH_DELAY = 2 * 1000;
+
+        protected GraphObjectPagingLoader loader;
+        protected GraphObjectAdapter adapter;
+
+        public void attach(GraphObjectAdapter adapter) {
+            loader = (GraphObjectPagingLoader) getLoaderManager().initLoader(0, null,
+                    new LoaderManager.LoaderCallbacks<GraphObjectCursor>() {
+                        @Override
+                        public Loader<GraphObjectCursor> onCreateLoader(int id, Bundle args) {
+                            return LoadingStrategy.this.onCreateLoader();
+                        }
+
+                        @Override
+                        public void onLoadFinished(Loader<GraphObjectCursor> loader,
+                                GraphObjectCursor data) {
+                            if (loader != LoadingStrategy.this.loader) {
+                                throw new FacebookException("Received callback for unknown loader.");
+                            }
+                            LoadingStrategy.this.onLoadFinished((GraphObjectPagingLoader) loader, data);
+                        }
+
+                        @Override
+                        public void onLoaderReset(Loader<GraphObjectCursor> loader) {
+                            if (loader != LoadingStrategy.this.loader) {
+                                throw new FacebookException("Received callback for unknown loader.");
+                            }
+                            LoadingStrategy.this.onLoadReset((GraphObjectPagingLoader) loader);
+                        }
+                    });
+
+            loader.setOnErrorListener(new GraphObjectPagingLoader.OnErrorListener() {
+                @Override
+                public void onError(FacebookException error, GraphObjectPagingLoader loader) {
+                    hideActivityCircle();
+                    if (onErrorListener != null) {
+                        onErrorListener.onError(PickerFragment.this, error);
+                    }
+                }
+            });
+
+            this.adapter = adapter;
+            // Tell the adapter about any data we might already have.
+            this.adapter.changeCursor(loader.getCursor());
+            this.adapter.setOnErrorListener(new GraphObjectAdapter.OnErrorListener() {
+                @Override
+                public void onError(GraphObjectAdapter adapter, FacebookException error) {
+                    if (onErrorListener != null) {
+                        onErrorListener.onError(PickerFragment.this, error);
+                    }
+                }
+            });
+        }
+
+        public void detach() {
+            adapter.setDataNeededListener(null);
+            adapter.setOnErrorListener(null);
+            loader.setOnErrorListener(null);
+
+            loader = null;
+            adapter = null;
+        }
+
+        public void clearResults() {
+            if (loader != null) {
+                loader.clearResults();
+            }
+        }
+
+        public void startLoading(GraphRequest request) {
+            if (loader != null) {
+                loader.startLoading(request);
+                onStartLoading(loader, request);
+            }
+        }
+
+        public boolean isDataPresentOrLoading() {
+            return !adapter.isEmpty() || loader.isLoading();
+        }
+
+        protected GraphObjectPagingLoader onCreateLoader() {
+            return new GraphObjectPagingLoader(getActivity());
+        }
+
+        protected void onStartLoading(GraphObjectPagingLoader loader, GraphRequest request) {
+            displayActivityCircle();
+        }
+
+        protected void onLoadReset(GraphObjectPagingLoader loader) {
+            adapter.changeCursor(null);
+        }
+
+        protected void onLoadFinished(GraphObjectPagingLoader loader, GraphObjectCursor data) {
+            updateAdapter(data);
+        }
+    }
+
+    abstract class SelectionStrategy {
+        abstract boolean isSelected(String id);
+
+        abstract void toggleSelection(String id);
+
+        abstract Collection<String> getSelectedIds();
+
+        abstract void clear();
+
+        abstract boolean isEmpty();
+
+        abstract boolean shouldShowCheckBoxIfUnselected();
+
+        abstract void saveSelectionToBundle(Bundle outBundle, String key);
+
+        abstract void readSelectionFromBundle(Bundle inBundle, String key);
+    }
+
+    class SingleSelectionStrategy extends SelectionStrategy {
+        private String selectedId;
+
+        public Collection<String> getSelectedIds() {
+            return Arrays.asList(new String[]{selectedId});
+        }
+
+        @Override
+        boolean isSelected(String id) {
+            return selectedId != null && id != null && selectedId.equals(id);
+        }
+
+        @Override
+        void toggleSelection(String id) {
+            if (selectedId != null && selectedId.equals(id)) {
+                selectedId = null;
+            } else {
+                selectedId = id;
+            }
+        }
+
+        @Override
+        void saveSelectionToBundle(Bundle outBundle, String key) {
+            if (!TextUtils.isEmpty(selectedId)) {
+                outBundle.putString(key, selectedId);
+            }
+        }
+
+        @Override
+        void readSelectionFromBundle(Bundle inBundle, String key) {
+            if (inBundle != null) {
+                selectedId = inBundle.getString(key);
+            }
+        }
+
+        @Override
+        public void clear() {
+            selectedId = null;
+        }
+
+        @Override
+        boolean isEmpty() {
+            return selectedId == null;
+        }
+
+        @Override
+        boolean shouldShowCheckBoxIfUnselected() {
+            return false;
+        }
+    }
+
+    class MultiSelectionStrategy extends SelectionStrategy {
+        private Set<String> selectedIds = new HashSet<String>();
+
+        public Collection<String> getSelectedIds() {
+            return selectedIds;
+        }
+
+        @Override
+        boolean isSelected(String id) {
+            return id != null && selectedIds.contains(id);
+        }
+
+        @Override
+        void toggleSelection(String id) {
+            if (id != null) {
+                if (selectedIds.contains(id)) {
+                    selectedIds.remove(id);
+                } else {
+                    selectedIds.add(id);
+                }
+            }
+        }
+
+        @Override
+        void saveSelectionToBundle(Bundle outBundle, String key) {
+            if (!selectedIds.isEmpty()) {
+                String ids = TextUtils.join(",", selectedIds);
+                outBundle.putString(key, ids);
+            }
+        }
+
+        @Override
+        void readSelectionFromBundle(Bundle inBundle, String key) {
+            if (inBundle != null) {
+                String ids = inBundle.getString(key);
+                if (ids != null) {
+                    String[] splitIds = TextUtils.split(ids, ",");
+                    selectedIds.clear();
+                    Collections.addAll(selectedIds, splitIds);
+                }
+            }
+        }
+
+        @Override
+        public void clear() {
+            selectedIds.clear();
+        }
+
+        @Override
+        boolean isEmpty() {
+            return selectedIds.isEmpty();
+        }
+
+        @Override
+        boolean shouldShowCheckBoxIfUnselected() {
+            return true;
+        }
+    }
+
+    abstract class PickerFragmentAdapter extends GraphObjectAdapter {
+        public PickerFragmentAdapter(Context context) {
+            super(context);
+        }
+
+        @Override
+        boolean isGraphObjectSelected(String graphObjectId) {
+            return selectionStrategy.isSelected(graphObjectId);
+        }
+
+        @Override
+        void updateCheckboxState(CheckBox checkBox, boolean graphObjectSelected) {
+            checkBox.setChecked(graphObjectSelected);
+            int visible = (graphObjectSelected || selectionStrategy.shouldShowCheckBoxIfUnselected())
+                    ? View.VISIBLE : View.GONE;
+            checkBox.setVisibility(visible);
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/picker/PlacePickerFragment.java b/facebook/src/main/java/com/facebook/picker/PlacePickerFragment.java
new file mode 100644
index 000000000..f1b6f8304
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/picker/PlacePickerFragment.java
@@ -0,0 +1,514 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.picker;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.location.Location;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Looper;
+import android.text.Editable;
+import android.text.TextUtils;
+import android.text.TextWatcher;
+import android.util.AttributeSet;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.inputmethod.InputMethodManager;
+import android.widget.EditText;
+import android.widget.ListView;
+import com.facebook.*;
+import com.facebook.appevents.AppEventsLogger;
+import com.facebook.R;
+import com.facebook.internal.AnalyticsEvents;
+import com.facebook.internal.Logger;
+import com.facebook.internal.Utility;
+
+import org.json.JSONObject;
+
+import java.util.*;
+
+public class PlacePickerFragment extends PickerFragment {
+    /**
+     * The key for an int parameter in the fragment's Intent bundle to indicate the radius in meters around
+     * the center point to search. The default is 1000 meters.
+     */
+    public static final String RADIUS_IN_METERS_BUNDLE_KEY = "com.facebook.widget.PlacePickerFragment.RadiusInMeters";
+    /**
+     * The key for an int parameter in the fragment's Intent bundle to indicate what how many results to
+     * return at a time. The default is 100 results.
+     */
+    public static final String RESULTS_LIMIT_BUNDLE_KEY = "com.facebook.widget.PlacePickerFragment.ResultsLimit";
+    /**
+     * The key for a String parameter in the fragment's Intent bundle to indicate what search text should
+     * be sent to the service. The default is to have no search text.
+     */
+    public static final String SEARCH_TEXT_BUNDLE_KEY = "com.facebook.widget.PlacePickerFragment.SearchText";
+    /**
+     * The key for a Location parameter in the fragment's Intent bundle to indicate what geographical
+     * location should be the center of the search.
+     */
+    public static final String LOCATION_BUNDLE_KEY = "com.facebook.widget.PlacePickerFragment.Location";
+    /**
+     * The key for a boolean parameter in the fragment's Intent bundle to indicate that the fragment
+     * should display a search box and automatically update the search text as it changes.
+     */
+    public static final String SHOW_SEARCH_BOX_BUNDLE_KEY = "com.facebook.widget.PlacePickerFragment.ShowSearchBox";
+
+    /**
+     * The default radius around the center point to search.
+     */
+    public static final int DEFAULT_RADIUS_IN_METERS = 1000;
+    /**
+     * The default number of results to retrieve.
+     */
+    public static final int DEFAULT_RESULTS_LIMIT = 100;
+
+    private static final int searchTextTimerDelayInMilliseconds = 2 * 1000;
+
+    private static final String ID = "id";
+    private static final String NAME = "name";
+    private static final String LOCATION = "location";
+    private static final String CATEGORY = "category";
+    private static final String WERE_HERE_COUNT = "were_here_count";
+    private static final String TAG = "PlacePickerFragment";
+
+    private Location location;
+    private int radiusInMeters = DEFAULT_RADIUS_IN_METERS;
+    private int resultsLimit = DEFAULT_RESULTS_LIMIT;
+    private String searchText;
+    private Timer searchTextTimer;
+    private boolean hasSearchTextChangedSinceLastQuery;
+    private boolean showSearchBox = true;
+    private EditText searchBox;
+
+    /**
+     * Default constructor. Creates a Fragment with all default properties.
+     */
+    public PlacePickerFragment() {
+        super(R.layout.picker_placepickerfragment);
+    }
+
+    /**
+     * Gets the location to search around. Either the location or the search text (or both) must be specified.
+     *
+     * @return the Location to search around
+     */
+    public Location getLocation() {
+        return location;
+    }
+
+    /**
+     * Sets the location to search around. Either the location or the search text (or both) must be specified.
+     *
+     * @param location the Location to search around
+     */
+    public void setLocation(Location location) {
+        this.location = location;
+    }
+
+    /**
+     * Gets the radius in meters around the location to search.
+     *
+     * @return the radius in meters
+     */
+    public int getRadiusInMeters() {
+        return radiusInMeters;
+    }
+
+    /**
+     * Sets the radius in meters around the location to search.
+     *
+     * @param radiusInMeters the radius in meters
+     */
+    public void setRadiusInMeters(int radiusInMeters) {
+        this.radiusInMeters = radiusInMeters;
+    }
+
+    /**
+     * Gets the number of results to retrieve.
+     *
+     * @return the number of results to retrieve
+     */
+    public int getResultsLimit() {
+        return resultsLimit;
+    }
+
+    /**
+     * Sets the number of results to retrieve.
+     *
+     * @param resultsLimit the number of results to retrieve
+     */
+    public void setResultsLimit(int resultsLimit) {
+        this.resultsLimit = resultsLimit;
+    }
+
+    /**
+     * Gets the search text (e.g., category, name) to search for. Either the location or the search
+     * text (or both) must be specified.
+     *
+     * @return the search text
+     */
+    public String getSearchText() {
+        return searchText;
+    }
+
+    /**
+     * Sets the search text (e.g., category, name) to search for. Either the location or the search
+     * text (or both) must be specified. If a search box is displayed, this will update its contents
+     * to the specified text.
+     *
+     * @param searchText the search text
+     */
+    public void setSearchText(String searchText) {
+        if (TextUtils.isEmpty(searchText)) {
+            searchText = null;
+        }
+        this.searchText = searchText;
+        if (this.searchBox != null) {
+            this.searchBox.setText(searchText);
+        }
+    }
+
+    /**
+     * Sets the search text and reloads the data in the control. This is used to provide search-box
+     * functionality where the user may be typing or editing text rapidly. It uses a timer to avoid repeated
+     * requerying, preferring to wait until the user pauses typing to refresh the data. Note that this
+     * method will NOT update the text in the search box, if any, as it is intended to be called as a result
+     * of changes to the search box (and is public to enable applications to provide their own search box
+     * UI instead of the default one).
+     *
+     * @param searchText                 the search text
+     * @param forceReloadEventIfSameText if true, will reload even if the search text has not changed; if false,
+     *                                   identical search text will not force a reload
+     */
+    public void onSearchBoxTextChanged(String searchText, boolean forceReloadEventIfSameText) {
+        if (!forceReloadEventIfSameText && Utility.stringsEqualOrEmpty(this.searchText, searchText)) {
+            return;
+        }
+
+        if (TextUtils.isEmpty(searchText)) {
+            searchText = null;
+        }
+        this.searchText = searchText;
+
+        // If search text is being set in response to user input, it is wasteful to send a new request
+        // with every keystroke. Send a request the first time the search text is set, then set up a 2-second timer
+        // and send whatever changes the user has made since then. (If nothing has changed
+        // in 2 seconds, we reset so the next change will cause an immediate re-query.)
+        hasSearchTextChangedSinceLastQuery = true;
+        if (searchTextTimer == null) {
+            searchTextTimer = createSearchTextTimer();
+        }
+    }
+
+    /**
+     * Gets the currently-selected place.
+     *
+     * @return the currently-selected place, or null if there is none
+     */
+    public JSONObject getSelection() {
+        Collection<JSONObject> selection = getSelectedGraphObjects();
+        return (selection != null && !selection.isEmpty()) ? selection.iterator().next() : null;
+    }
+
+    @Override
+    public void setSettingsFromBundle(Bundle inState) {
+        super.setSettingsFromBundle(inState);
+        if (inState != null) {
+            setRadiusInMeters(inState.getInt(RADIUS_IN_METERS_BUNDLE_KEY, radiusInMeters));
+            setResultsLimit(inState.getInt(RESULTS_LIMIT_BUNDLE_KEY, resultsLimit));
+            if (inState.containsKey(SEARCH_TEXT_BUNDLE_KEY)) {
+                setSearchText(inState.getString(SEARCH_TEXT_BUNDLE_KEY));
+            }
+            if (inState.containsKey(LOCATION_BUNDLE_KEY)) {
+                Location location = inState.getParcelable(LOCATION_BUNDLE_KEY);
+                setLocation(location);
+            }
+            showSearchBox = inState.getBoolean(SHOW_SEARCH_BOX_BUNDLE_KEY, showSearchBox);
+        }
+    }
+
+    @Override
+    public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {
+        super.onInflate(activity, attrs, savedInstanceState);
+        TypedArray a = activity.obtainStyledAttributes(attrs, R.styleable.picker_place_picker_fragment);
+
+        setRadiusInMeters(a.getInt(R.styleable.picker_place_picker_fragment_radius_in_meters, radiusInMeters));
+        setResultsLimit(a.getInt(R.styleable.picker_place_picker_fragment_results_limit, resultsLimit));
+        if (a.hasValue(R.styleable.picker_place_picker_fragment_results_limit)) {
+            setSearchText(a.getString(R.styleable.picker_place_picker_fragment_search_text));
+        }
+        showSearchBox = a.getBoolean(R.styleable.picker_place_picker_fragment_show_search_box, showSearchBox);
+
+        a.recycle();
+    }
+
+    @Override
+    void setupViews(ViewGroup view) {
+        if (showSearchBox) {
+            ListView listView = (ListView) view.findViewById(R.id.com_facebook_picker_list_view);
+
+            View searchHeaderView = getActivity().getLayoutInflater().inflate(
+                    R.layout.picker_search_box, listView, false);
+
+            listView.addHeaderView(searchHeaderView, null, false);
+
+            searchBox = (EditText) view.findViewById(R.id.com_facebook_picker_search_text);
+
+            searchBox.addTextChangedListener(new SearchTextWatcher());
+            if (!TextUtils.isEmpty(searchText)) {
+                searchBox.setText(searchText);
+            }
+        }
+    }
+
+    @Override
+    public void onAttach(Activity activity) {
+        super.onAttach(activity);
+
+        if (searchBox != null) {
+            InputMethodManager imm = (InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
+            imm.showSoftInput(searchBox, InputMethodManager.SHOW_IMPLICIT);
+        }
+    }
+
+    @Override
+    public void onDetach() {
+        super.onDetach();
+
+        if (searchBox != null) {
+            InputMethodManager imm = (InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
+            imm.hideSoftInputFromWindow(searchBox.getWindowToken(), 0);
+        }
+    }
+
+    void saveSettingsToBundle(Bundle outState) {
+        super.saveSettingsToBundle(outState);
+
+        outState.putInt(RADIUS_IN_METERS_BUNDLE_KEY, radiusInMeters);
+        outState.putInt(RESULTS_LIMIT_BUNDLE_KEY, resultsLimit);
+        outState.putString(SEARCH_TEXT_BUNDLE_KEY, searchText);
+        outState.putParcelable(LOCATION_BUNDLE_KEY, location);
+        outState.putBoolean(SHOW_SEARCH_BOX_BUNDLE_KEY, showSearchBox);
+    }
+
+    @Override
+    void onLoadingData() {
+        hasSearchTextChangedSinceLastQuery = false;
+    }
+
+    @Override
+    GraphRequest getRequestForLoadData() {
+        return createRequest(location, radiusInMeters, resultsLimit, searchText, extraFields);
+    }
+
+    @Override
+    String getDefaultTitleText() {
+        return getResources().getString(R.string.nearby);
+    }
+
+    @Override
+    void logAppEvents(boolean doneButtonClicked) {
+        AppEventsLogger logger = AppEventsLogger.newLogger(this.getActivity(),
+                AccessToken.getCurrentAccessToken().getToken());
+        Bundle parameters = new Bundle();
+
+        // If Done was clicked, we know this completed successfully. If not, we don't know (caller might have
+        // dismissed us in response to selection changing, or user might have hit back button). Either way
+        // we'll log the number of selections.
+        String outcome = doneButtonClicked ? AnalyticsEvents.PARAMETER_DIALOG_OUTCOME_VALUE_COMPLETED :
+                AnalyticsEvents.PARAMETER_DIALOG_OUTCOME_VALUE_UNKNOWN;
+        parameters.putString(AnalyticsEvents.PARAMETER_DIALOG_OUTCOME, outcome);
+        parameters.putInt("num_places_picked", (getSelection() != null) ? 1 : 0);
+
+        logger.logSdkEvent(AnalyticsEvents.EVENT_PLACE_PICKER_USAGE, null, parameters);
+    }
+
+    @Override
+    PickerFragmentAdapter createAdapter() {
+        PickerFragmentAdapter adapter = new PickerFragmentAdapter(
+                // TODO: Figure out why getActivity() is suddenly not being linked in, but getContext() will work just fine?
+                //this.getActivity()) {
+                this.getContext()) {
+            @Override
+            protected CharSequence getSubTitleOfGraphObject(JSONObject graphObject) {
+                String category = graphObject.optString(CATEGORY);
+                int wereHereCount = graphObject.optInt(WERE_HERE_COUNT);
+
+                String result = null;
+                if (category != null && wereHereCount != 0) {
+                    result = getString(R.string.picker_placepicker_subtitle_format, category, wereHereCount);
+                } else if (category == null && wereHereCount != 0) {
+                    result = getString(R.string.picker_placepicker_subtitle_were_here_only_format, wereHereCount);
+                } else if (category != null && wereHereCount == 0) {
+                    result = getString(R.string.picker_placepicker_subtitle_catetory_only_format, category);
+                }
+                return result;
+            }
+
+            @Override
+            protected int getGraphObjectRowLayoutId(JSONObject graphObject) {
+                return R.layout.picker_placepickerfragment_list_row;
+            }
+
+            @Override
+            protected int getDefaultPicture() {
+                return R.drawable.picker_place_default_icon;
+            }
+
+        };
+        adapter.setShowCheckbox(false);
+        adapter.setShowPicture(getShowPictures());
+        return adapter;
+    }
+
+    @Override
+    LoadingStrategy createLoadingStrategy() {
+        return new AsNeededLoadingStrategy();
+    }
+
+    @Override
+    SelectionStrategy createSelectionStrategy() {
+        return new SingleSelectionStrategy();
+    }
+
+    private GraphRequest createRequest(Location location, int radiusInMeters, int resultsLimit,
+                                  String searchText, Set<String> extraFields) {
+        AccessToken accessToken = AccessToken.getCurrentAccessToken();
+        GraphRequest request = GraphRequest.newPlacesSearchRequest(accessToken, location, radiusInMeters,
+                resultsLimit, searchText, null);
+
+        Set<String> fields = new HashSet<String>(extraFields);
+        String[] requiredFields = new String[]{
+                ID,
+                NAME,
+                LOCATION,
+                CATEGORY,
+                WERE_HERE_COUNT
+        };
+        fields.addAll(Arrays.asList(requiredFields));
+
+        String pictureField = adapter.getPictureFieldSpecifier();
+        if (pictureField != null) {
+            fields.add(pictureField);
+        }
+
+        Bundle parameters = request.getParameters();
+        parameters.putString("fields", TextUtils.join(",", fields));
+        request.setParameters(parameters);
+
+        return request;
+    }
+
+    private Timer createSearchTextTimer() {
+        Timer timer = new Timer();
+        timer.schedule(new TimerTask() {
+            @Override
+            public void run() {
+                onSearchTextTimerTriggered();
+            }
+        }, 0, searchTextTimerDelayInMilliseconds);
+
+        return timer;
+    }
+
+    private void onSearchTextTimerTriggered() {
+        if (hasSearchTextChangedSinceLastQuery) {
+            Handler handler = new Handler(Looper.getMainLooper());
+            handler.post(new Runnable() {
+                @Override
+                public void run() {
+                    FacebookException error = null;
+                    try {
+                        loadData(true);
+                    } catch (FacebookException fe) {
+                        error = fe;
+                    } catch (Exception e) {
+                        error = new FacebookException(e);
+                    } finally {
+                        if (error != null) {
+                            OnErrorListener onErrorListener = getOnErrorListener();
+                            if (onErrorListener != null) {
+                                onErrorListener.onError(PlacePickerFragment.this, error);
+                            } else {
+                                Logger.log(LoggingBehavior.REQUESTS, TAG, "Error loading data : %s", error);
+                            }
+                        }
+                    }
+                }
+            });
+        } else {
+            // Nothing has changed in 2 seconds. Invalidate and forget about this timer.
+            // Next time the user types, we will fire a query immediately again.
+            searchTextTimer.cancel();
+            searchTextTimer = null;
+        }
+    }
+
+    private class AsNeededLoadingStrategy extends LoadingStrategy {
+        @Override
+        public void attach(GraphObjectAdapter adapter) {
+            super.attach(adapter);
+
+            this.adapter.setDataNeededListener(new GraphObjectAdapter.DataNeededListener() {
+                @Override
+                public void onDataNeeded() {
+                    // Do nothing if we are currently loading data . We will get notified again when that load finishes
+                    // if the adapter still needs more data. Otherwise, follow the next link.
+                    if (!loader.isLoading()) {
+                        loader.followNextLink();
+                    }
+                }
+            });
+        }
+
+        @Override
+        protected void onLoadFinished(GraphObjectPagingLoader loader, GraphObjectCursor data) {
+            super.onLoadFinished(loader, data);
+
+            // We could be called in this state if we are clearing data or if we are being re-attached
+            // in the middle of a query.
+            if (data == null || loader.isLoading()) {
+                return;
+            }
+
+            hideActivityCircle();
+        }
+    }
+
+    private class SearchTextWatcher implements TextWatcher {
+
+        @Override
+        public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+        }
+
+        @Override
+        public void onTextChanged(CharSequence s, int start, int before, int count) {
+            onSearchBoxTextChanged(s.toString(), false);
+        }
+
+        @Override
+        public void afterTextChanged(Editable s) {
+        }
+    }
+}
diff --git a/facebook/src/main/res/drawable-hdpi/picker_magnifier.png b/facebook/src/main/res/drawable-hdpi/picker_magnifier.png
new file mode 100644
index 000000000..0dcd013d6
Binary files /dev/null and b/facebook/src/main/res/drawable-hdpi/picker_magnifier.png differ
diff --git a/facebook/src/main/res/drawable-mdpi/picker_magnifier.png b/facebook/src/main/res/drawable-mdpi/picker_magnifier.png
new file mode 100644
index 000000000..3013a5519
Binary files /dev/null and b/facebook/src/main/res/drawable-mdpi/picker_magnifier.png differ
diff --git a/facebook/src/main/res/drawable-xhdpi/picker_magnifier.png b/facebook/src/main/res/drawable-xhdpi/picker_magnifier.png
new file mode 100644
index 000000000..a5eb056a1
Binary files /dev/null and b/facebook/src/main/res/drawable-xhdpi/picker_magnifier.png differ
diff --git a/facebook/src/main/res/drawable/picker_button_check.xml b/facebook/src/main/res/drawable/picker_button_check.xml
new file mode 100644
index 000000000..6f3d22950
--- /dev/null
+++ b/facebook/src/main/res/drawable/picker_button_check.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+  <item android:state_checked="true" android:drawable="@drawable/picker_button_check_on" />
+  <item android:drawable="@drawable/picker_button_check_off" />
+</selector>
diff --git a/facebook/src/main/res/drawable/picker_button_check_off.png b/facebook/src/main/res/drawable/picker_button_check_off.png
new file mode 100644
index 000000000..c25695d53
Binary files /dev/null and b/facebook/src/main/res/drawable/picker_button_check_off.png differ
diff --git a/facebook/src/main/res/drawable/picker_button_check_on.png b/facebook/src/main/res/drawable/picker_button_check_on.png
new file mode 100644
index 000000000..d793151e6
Binary files /dev/null and b/facebook/src/main/res/drawable/picker_button_check_on.png differ
diff --git a/facebook/src/main/res/drawable/picker_list_divider.9.png b/facebook/src/main/res/drawable/picker_list_divider.9.png
new file mode 100644
index 000000000..4c0df0768
Binary files /dev/null and b/facebook/src/main/res/drawable/picker_list_divider.9.png differ
diff --git a/facebook/src/main/res/drawable/picker_list_focused.9.png b/facebook/src/main/res/drawable/picker_list_focused.9.png
new file mode 100644
index 000000000..3efadc352
Binary files /dev/null and b/facebook/src/main/res/drawable/picker_list_focused.9.png differ
diff --git a/facebook/src/main/res/drawable/picker_list_longpressed.9.png b/facebook/src/main/res/drawable/picker_list_longpressed.9.png
new file mode 100644
index 000000000..5fcd5b207
Binary files /dev/null and b/facebook/src/main/res/drawable/picker_list_longpressed.9.png differ
diff --git a/facebook/src/main/res/drawable/picker_list_pressed.9.png b/facebook/src/main/res/drawable/picker_list_pressed.9.png
new file mode 100644
index 000000000..0e557469e
Binary files /dev/null and b/facebook/src/main/res/drawable/picker_list_pressed.9.png differ
diff --git a/facebook/src/main/res/drawable/picker_list_section_header_background.9.png b/facebook/src/main/res/drawable/picker_list_section_header_background.9.png
new file mode 100644
index 000000000..0ee16ffb6
Binary files /dev/null and b/facebook/src/main/res/drawable/picker_list_section_header_background.9.png differ
diff --git a/facebook/src/main/res/drawable/picker_list_selector.xml b/facebook/src/main/res/drawable/picker_list_selector.xml
new file mode 100644
index 000000000..ceb4f87de
--- /dev/null
+++ b/facebook/src/main/res/drawable/picker_list_selector.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:state_window_focused="false" android:drawable="@android:color/transparent" />
+
+    <item android:state_focused="true"  android:state_enabled="false" android:state_pressed="true" android:drawable="@drawable/picker_list_selector_disabled" />
+    <item android:state_focused="true"  android:state_enabled="false"                              android:drawable="@drawable/picker_list_selector_disabled" />
+    <item android:state_focused="true"                                android:state_pressed="true" android:drawable="@drawable/picker_list_selector_background_transition" />
+    <item android:state_focused="false"                               android:state_pressed="true" android:drawable="@drawable/picker_list_selector_background_transition" />
+    <item android:state_focused="true"                                                             android:drawable="@drawable/picker_list_focused" />
+
+</selector>
diff --git a/facebook/src/main/res/drawable/picker_list_selector_background_transition.xml b/facebook/src/main/res/drawable/picker_list_selector_background_transition.xml
new file mode 100644
index 000000000..935189b31
--- /dev/null
+++ b/facebook/src/main/res/drawable/picker_list_selector_background_transition.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<transition xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@drawable/picker_list_pressed"  />
+    <item android:drawable="@drawable/picker_list_longpressed"  />
+</transition>
diff --git a/facebook/src/main/res/drawable/picker_list_selector_disabled.9.png b/facebook/src/main/res/drawable/picker_list_selector_disabled.9.png
new file mode 100644
index 000000000..10851f6c8
Binary files /dev/null and b/facebook/src/main/res/drawable/picker_list_selector_disabled.9.png differ
diff --git a/facebook/src/main/res/drawable/picker_place_default_icon.png b/facebook/src/main/res/drawable/picker_place_default_icon.png
new file mode 100644
index 000000000..97ec3e608
Binary files /dev/null and b/facebook/src/main/res/drawable/picker_place_default_icon.png differ
diff --git a/facebook/src/main/res/drawable/picker_selector_top_button.xml b/facebook/src/main/res/drawable/picker_selector_top_button.xml
new file mode 100644
index 000000000..6aed2827c
--- /dev/null
+++ b/facebook/src/main/res/drawable/picker_selector_top_button.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_pressed="true"
+          android:drawable="@drawable/picker_top_button" />
+    <item android:state_focused="true"
+          android:drawable="@drawable/picker_top_button" />
+    <item android:state_selected="true"
+          android:drawable="@drawable/picker_top_button" />
+    <item
+            android:drawable="@drawable/picker_top_background" />
+</selector>
diff --git a/facebook/src/main/res/drawable/picker_top_background.xml b/facebook/src/main/res/drawable/picker_top_background.xml
new file mode 100644
index 000000000..49649c05b
--- /dev/null
+++ b/facebook/src/main/res/drawable/picker_top_background.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+  <gradient
+      android:startColor="#FF5975b0"
+      android:endColor="#FF47639e"
+      android:angle="270"/>
+</shape>
diff --git a/facebook/src/main/res/drawable/picker_top_button.xml b/facebook/src/main/res/drawable/picker_top_button.xml
new file mode 100644
index 000000000..098883e70
--- /dev/null
+++ b/facebook/src/main/res/drawable/picker_top_button.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+    <gradient
+            android:startColor="#3f5b96"
+            android:endColor="#2d4984"
+            android:angle="270"/>
+</shape>
diff --git a/facebook/src/main/res/drawable/profile_default_icon.png b/facebook/src/main/res/drawable/profile_default_icon.png
new file mode 100644
index 000000000..15864ccdb
Binary files /dev/null and b/facebook/src/main/res/drawable/profile_default_icon.png differ
diff --git a/facebook/src/main/res/layout/picker_activity_circle_row.xml b/facebook/src/main/res/layout/picker_activity_circle_row.xml
new file mode 100644
index 000000000..ceb3d92e2
--- /dev/null
+++ b/facebook/src/main/res/layout/picker_activity_circle_row.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<RelativeLayout
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_height="50dip"
+        android:layout_width="match_parent"
+        >
+    <ProgressBar android:indeterminate="true"
+                 android:layout_width="wrap_content"
+                 android:layout_height="50dip"
+                 android:id="@+id/com_facebook_picker_row_activity_circle"
+                 style="@android:style/Widget.ProgressBar.Small"
+                 android:layout_centerInParent="true"
+                 android:visibility="visible"
+                 android:indeterminateOnly="true"
+            />
+</RelativeLayout>
diff --git a/facebook/src/main/res/layout/picker_checkbox.xml b/facebook/src/main/res/layout/picker_checkbox.xml
new file mode 100644
index 000000000..c2b2a6e5f
--- /dev/null
+++ b/facebook/src/main/res/layout/picker_checkbox.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<CheckBox
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/com_facebook_picker_checkbox"
+    android:layout_width="23dip"
+    android:layout_height="23dip"
+    android:focusable="false"
+    android:clickable="false"
+    android:button="@drawable/picker_button_check" />
diff --git a/facebook/src/main/res/layout/picker_friendpickerfragment.xml b/facebook/src/main/res/layout/picker_friendpickerfragment.xml
new file mode 100644
index 000000000..abdd3941c
--- /dev/null
+++ b/facebook/src/main/res/layout/picker_friendpickerfragment.xml
@@ -0,0 +1,48 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+              android:background="#FFFFFF">
+
+    <include layout="@layout/picker_title_bar_stub"/>
+
+    <ListView
+            android:id="@+id/com_facebook_picker_list_view"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:divider="@drawable/picker_list_divider"
+            android:fastScrollEnabled="true"
+            android:scrollbars="vertical"
+            android:listSelector="@drawable/picker_list_selector"
+            android:cacheColorHint="#FFFFFF"
+            />
+
+    <ProgressBar android:indeterminate="true"
+                 android:layout_width="wrap_content"
+                 android:layout_height="wrap_content"
+                 android:id="@+id/com_facebook_picker_activity_circle"
+                 style="@android:style/Widget.ProgressBar"
+                 android:layout_centerInParent="true"
+                 android:visibility="invisible"
+            />
+</RelativeLayout>
diff --git a/facebook/src/main/res/layout/picker_image.xml b/facebook/src/main/res/layout/picker_image.xml
new file mode 100644
index 000000000..9cbb41bbb
--- /dev/null
+++ b/facebook/src/main/res/layout/picker_image.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<ImageView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/com_facebook_picker_image"
+    android:layout_width="50dip"
+    android:layout_height="50dip"
+    android:layout_gravity="center_vertical"
+    android:src="@drawable/profile_default_icon" />
diff --git a/facebook/src/main/res/layout/picker_list_row.xml b/facebook/src/main/res/layout/picker_list_row.xml
new file mode 100644
index 000000000..4e87484b0
--- /dev/null
+++ b/facebook/src/main/res/layout/picker_list_row.xml
@@ -0,0 +1,52 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_height="wrap_content"
+        android:layout_width="match_parent"
+        >
+    <ViewStub
+            android:id="@+id/com_facebook_picker_profile_pic_stub"
+            android:inflatedId="@+id/com_facebook_picker_image"
+            android:layout="@layout/picker_image"
+            android:layout_width="50dip"
+            android:layout_height="50dip" />
+    <TextView
+            android:id="@+id/com_facebook_picker_title"
+            android:layout_width="100dip"
+            android:layout_height="50dip"
+            android:layout_weight="1.0"
+            android:paddingLeft="5dip"
+            android:textStyle="bold"
+            android:textColor="#000000"
+            android:singleLine="true"
+            android:ellipsize="end"
+            android:textSize="18sp"
+            android:gravity="left|center_vertical"/>
+    <ViewStub
+            android:id="@+id/com_facebook_picker_checkbox_stub"
+            android:inflatedId="@+id/com_facebook_picker_checkbox"
+            android:layout="@layout/picker_checkbox"
+            android:layout_width="23dip"
+            android:layout_height="23dip"
+            android:layout_marginRight="10dip"/>
+</LinearLayout>
diff --git a/facebook/src/main/res/layout/picker_list_section_header.xml b/facebook/src/main/res/layout/picker_list_section_header.xml
new file mode 100644
index 000000000..ea3a4bba0
--- /dev/null
+++ b/facebook/src/main/res/layout/picker_list_section_header.xml
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<TextView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/com_facebook_picker_list_section_header"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:textStyle="bold"
+    android:background="@drawable/picker_list_section_header_background"
+    android:orientation="horizontal"
+    android:gravity="left|center_vertical"
+    android:textColor="#68768a"
+    android:textSize="17sp"
+    android:paddingLeft="8dip"
+    android:paddingBottom="0px"
+    android:shadowDx="1"
+    android:shadowDy="1"
+    android:shadowRadius="1"
+    android:shadowColor="#BFFFFFFF" />
diff --git a/facebook/src/main/res/layout/picker_placepickerfragment.xml b/facebook/src/main/res/layout/picker_placepickerfragment.xml
new file mode 100644
index 000000000..f6ba9a965
--- /dev/null
+++ b/facebook/src/main/res/layout/picker_placepickerfragment.xml
@@ -0,0 +1,52 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+              android:background="#FFFFFF"
+              android:descendantFocusability="beforeDescendants"
+              android:focusableInTouchMode="true">
+
+    <include layout="@layout/picker_title_bar_stub"/>
+
+    <ListView
+            android:id="@+id/com_facebook_picker_list_view"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:layout_alignParentTop="true"
+            android:divider="@null"
+            android:fastScrollEnabled="true"
+            android:scrollbars="vertical"
+            android:listSelector="@drawable/picker_list_selector"
+            android:cacheColorHint="#FFFFFF"
+            />
+
+    <!-- TODO: Apply the theme depending on the OS version of the device we're running on -->
+    <ProgressBar android:indeterminate="true"
+                 android:layout_width="wrap_content"
+                 android:layout_height="wrap_content"
+                 android:id="@+id/com_facebook_picker_activity_circle"
+                 style="@android:style/Widget.ProgressBar"
+                 android:layout_centerInParent="true"
+                 android:visibility="invisible"
+            />
+</RelativeLayout>
diff --git a/facebook/src/main/res/layout/picker_placepickerfragment_list_row.xml b/facebook/src/main/res/layout/picker_placepickerfragment_list_row.xml
new file mode 100644
index 000000000..d20989c37
--- /dev/null
+++ b/facebook/src/main/res/layout/picker_placepickerfragment_list_row.xml
@@ -0,0 +1,94 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<RelativeLayout
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_height="wrap_content"
+        android:layout_width="match_parent"
+        android:focusable="false">
+    <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal"
+            android:focusable="false"
+            >
+        <FrameLayout
+                android:layout_width="80dp"
+                android:layout_height="wrap_content"
+                >
+            <ViewStub
+                    android:id="@+id/com_facebook_picker_profile_pic_stub"
+                    android:inflatedId="@+id/com_facebook_picker_image"
+                    android:layout="@layout/picker_image"
+                    android:layout_gravity="left|center_vertical"
+                    android:layout_width="@dimen/picker_place_image_size"
+                    android:layout_height="@dimen/picker_place_image_size" />
+        </FrameLayout>
+        <LinearLayout
+                android:orientation="vertical"
+                android:focusable="false"
+                android:layout_width="0dip"
+                android:layout_height="wrap_content"
+                android:layout_marginRight="16dp"
+                android:layout_gravity="center_vertical"
+                android:layout_weight="1">
+            <TextView
+                    android:id="@+id/com_facebook_picker_title"
+                    android:layout_width="fill_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="1.0"
+                    android:ellipsize="end"
+                    android:singleLine="true"
+                    android:typeface="sans"
+                    android:textColor="#000000"
+                    android:lines="1"
+                    android:textSize="16sp"
+                    android:gravity="left|center_vertical"/>
+            <TextView
+                    android:id="@+id/picker_subtitle"
+                    android:layout_width="fill_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="1.0"
+                    android:ellipsize="end"
+                    android:singleLine="true"
+                    android:textColor="#666666"
+                    android:lines="1"
+                    android:typeface="sans"
+                    android:textSize="12sp"
+                    android:gravity="left|center_vertical"/>
+        </LinearLayout>
+        <!--ViewStub
+                android:id="@+id/checkbox_stub"
+                android:inflatedId="@+id/picker_checkbox"
+                android:layout="@layout/checkbox_layout"
+                android:layout_width="23dip"
+                android:layout_height="23dip"
+                android:layout_marginRight="10dip"/-->
+    </LinearLayout>
+    <View
+            android:layout_width="0dp"
+            android:layout_height="@dimen/picker_divider_width"
+            android:layout_alignParentLeft="true"
+            android:layout_alignParentRight="true"
+            android:layout_alignParentBottom="true"
+            android:background="@drawable/picker_default_separator_color"
+            />
+</RelativeLayout>
diff --git a/facebook/src/main/res/layout/picker_search_bar_layout.xml b/facebook/src/main/res/layout/picker_search_bar_layout.xml
new file mode 100644
index 000000000..9846507de
--- /dev/null
+++ b/facebook/src/main/res/layout/picker_search_bar_layout.xml
@@ -0,0 +1,51 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+
+<LinearLayout
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        android:id="@+id/com_facebook_search_bar_view"
+        android:orientation="horizontal"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:paddingTop="0dp"
+        android:paddingBottom="0dp"
+        android:paddingLeft="5dp"
+        android:paddingRight="5dp"
+        android:background="@color/picker_search_bar_background"
+        >
+    <EditText
+            android:id="@+id/com_facebook_picker_search_text"
+            android:layout_width="match_parent"
+            android:layout_height="48dp"
+            android:layout_marginLeft="5dp"
+            android:singleLine="true"
+            android:layout_gravity="center"
+            android:gravity="center_vertical"
+            android:textSize="16sp"
+            android:textColor="@android:color/black"
+            android:textColorHint="@color/picker_search_bar_text"
+            android:background="@color/picker_search_bar_background"
+            android:drawableLeft="@drawable/picker_magnifier"
+            android:drawablePadding="5dp"
+            android:imeOptions="actionDone"
+            />
+</LinearLayout>
diff --git a/facebook/src/main/res/layout/picker_search_box.xml b/facebook/src/main/res/layout/picker_search_box.xml
new file mode 100644
index 000000000..8f21217f4
--- /dev/null
+++ b/facebook/src/main/res/layout/picker_search_box.xml
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:layout_width="match_parent"
+              android:layout_height="wrap_content"
+              android:orientation="vertical"
+        >
+    <include layout="@layout/picker_search_bar_layout" />
+    <View
+            android:layout_width="match_parent"
+            android:layout_height="@dimen/picker_divider_width"
+            android:background="@drawable/picker_default_separator_color"
+            />
+</LinearLayout>
diff --git a/facebook/src/main/res/layout/picker_title_bar.xml b/facebook/src/main/res/layout/picker_title_bar.xml
new file mode 100644
index 000000000..fe6b9e533
--- /dev/null
+++ b/facebook/src/main/res/layout/picker_title_bar.xml
@@ -0,0 +1,69 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                android:id="@+id/com_facebook_picker_top_bar"
+                android:layout_width="match_parent"
+                android:layout_height="48dp"
+                android:background="@drawable/picker_top_background"
+                android:gravity="right">
+    <Button
+            android:id="@+id/com_facebook_picker_done_button"
+            android:layout_width="wrap_content"
+            android:minWidth="55dp"
+            android:layout_height="48dp"
+            android:background="@drawable/picker_selector_top_button"
+            android:paddingLeft="5dip"
+            android:paddingRight="5dip"
+            android:textColor="#ffffff"
+            android:textSize="14sp"
+            android:shadowColor="#66000000"
+            android:shadowDx="1"
+            android:shadowDy="1"
+            android:shadowRadius="1"
+            android:layout_alignParentRight="true"
+            />
+    <LinearLayout
+            android:id="@+id/com_facebook_picker_divider"
+            android:layout_width="1dp"
+            android:layout_height="match_parent"
+            android:background="#40000000"
+            android:layout_alignLeft="@id/com_facebook_picker_done_button"
+            android:layout_alignStart="@id/com_facebook_picker_done_button"
+            android:orientation="horizontal"/>
+    <TextView
+            android:id="@+id/com_facebook_picker_title"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:textSize="22sp"
+            android:textColor="#FFFFFF"
+            android:gravity="left|center_vertical"
+            android:ellipsize="end"
+            android:singleLine="true"
+            android:scaleType="center"
+            android:shadowColor="#66000000"
+            android:shadowDx="1"
+            android:shadowDy="1"
+            android:shadowRadius="1"
+            android:layout_marginLeft="10dip"
+            android:layout_marginRight="10dip"
+            android:layout_toLeftOf="@id/com_facebook_picker_divider"/>
+</RelativeLayout>
diff --git a/facebook/src/main/res/layout/picker_title_bar_stub.xml b/facebook/src/main/res/layout/picker_title_bar_stub.xml
new file mode 100644
index 000000000..76fbf9b41
--- /dev/null
+++ b/facebook/src/main/res/layout/picker_title_bar_stub.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<merge xmlns:android="http://schemas.android.com/apk/res/android">
+    <ViewStub android:id="@+id/com_facebook_picker_title_bar_stub"
+              android:inflatedId="@+id/com_facebook_picker_title_bar"
+              android:layout="@layout/picker_title_bar"
+              android:layout_height="48dip"
+              android:layout_width="match_parent"/>
+
+</merge>
diff --git a/facebook/src/main/res/values-hdpi/dimens.xml b/facebook/src/main/res/values-hdpi/dimens.xml
new file mode 100644
index 000000000..2cbb2f58d
--- /dev/null
+++ b/facebook/src/main/res/values-hdpi/dimens.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <dimen name="picker_divider_width">1px</dimen>
+</resources>
diff --git a/facebook/src/main/res/values-ldpi/dimens.xml b/facebook/src/main/res/values-ldpi/dimens.xml
new file mode 100644
index 000000000..2cbb2f58d
--- /dev/null
+++ b/facebook/src/main/res/values-ldpi/dimens.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <dimen name="picker_divider_width">1px</dimen>
+</resources>
diff --git a/facebook/src/main/res/values-mdpi/dimens.xml b/facebook/src/main/res/values-mdpi/dimens.xml
new file mode 100644
index 000000000..2cbb2f58d
--- /dev/null
+++ b/facebook/src/main/res/values-mdpi/dimens.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <dimen name="picker_divider_width">1px</dimen>
+</resources>
diff --git a/facebook/src/main/res/values-xhdpi/dimens.xml b/facebook/src/main/res/values-xhdpi/dimens.xml
new file mode 100644
index 000000000..9d344308d
--- /dev/null
+++ b/facebook/src/main/res/values-xhdpi/dimens.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <dimen name="picker_divider_width">2px</dimen>
+</resources>
diff --git a/facebook/src/main/res/values/attrs.xml b/facebook/src/main/res/values/attrs.xml
index ecd88b321..dd334aa79 100644
--- a/facebook/src/main/res/values/attrs.xml
+++ b/facebook/src/main/res/values/attrs.xml
@@ -20,6 +20,7 @@
 -->
 
 <resources>
+    <!-- Standard facebook SDK attrs. -->
     <declare-styleable name="com_facebook_login_view">
         <attr name="com_facebook_confirm_logout" format="boolean"/>
         <attr name="com_facebook_login_text" format="string"/>
@@ -68,4 +69,51 @@
             <enum name="right" value="2" />
         </attr>
     </declare-styleable>
+
+    <!-- Picker additions from Scrumptious sample -->
+    <declare-styleable name="picker_fragment">
+        <attr name="show_pictures" format="boolean"/>
+        <attr name="extra_fields" format="string"/>
+        <attr name="show_title_bar" format="boolean" />
+        <attr name="title_text" format="string" />
+        <attr name="done_button_text" format="string" />
+        <attr name="title_bar_background" format="reference" />
+        <attr name="done_button_background" format="reference" />
+    </declare-styleable>
+    <declare-styleable name="picker_friend_picker_fragment">
+        <attr name="multi_select" format="boolean"/>
+    </declare-styleable>
+    <declare-styleable name="picker_place_picker_fragment">
+        <attr name="radius_in_meters" format="integer"/>
+        <attr name="results_limit" format="integer"/>
+        <attr name="search_text" format="string"/>
+        <attr name="show_search_box" format="boolean" />
+    </declare-styleable>
+
+    <!-- CardView additions for device login support -->
+    <declare-styleable name="CardView">
+        <!-- Background color for CardView. -->
+        <attr name="cardBackgroundColor" format="color" />
+        <!-- Corner radius for CardView. -->
+        <attr name="cardCornerRadius" format="dimension" />
+        <!-- Elevation for CardView. -->
+        <attr name="cardElevation" format="dimension" />
+        <!-- Maximum Elevation for CardView. -->
+        <attr name="cardMaxElevation" format="dimension" />
+        <!-- Add padding in API v21+ as well to have the same measurements with previous versions. -->
+        <attr name="cardUseCompatPadding" format="boolean" />
+        <!-- Add padding to CardView on v20 and before to prevent intersections between the Card content and rounded corners. -->
+        <attr name="cardPreventCornerOverlap" format="boolean" />
+        <!-- Inner padding between the edges of the Card and children of the CardView. -->
+        <attr name="contentPadding" format="dimension" />
+        <!-- Inner padding between the left edge of the Card and children of the CardView. -->
+        <attr name="contentPaddingLeft" format="dimension" />
+        <!-- Inner padding between the right edge of the Card and children of the CardView. -->
+        <attr name="contentPaddingRight" format="dimension" />
+        <!-- Inner padding between the top edge of the Card and children of the CardView. -->
+        <attr name="contentPaddingTop" format="dimension" />
+        <!-- Inner padding between the bottom edge of the Card and children of the CardView. -->
+        <attr name="contentPaddingBottom" format="dimension" />
+    </declare-styleable>
 </resources>
+
diff --git a/facebook/src/main/res/values/colors.xml b/facebook/src/main/res/values/colors.xml
new file mode 100644
index 000000000..7b1f02e2d
--- /dev/null
+++ b/facebook/src/main/res/values/colors.xml
@@ -0,0 +1,39 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <!-- Picker additions from Scrumptious sample -->
+    <dimen name="picker_place_image_size">64dp</dimen>
+    <color name="picker_search_bar_background">#f5f5f7</color>
+    <color name="picker_search_bar_text">#bcbdc2</color>
+	<color name="scrumptious_main_orange">#FFFD5720</color>
+    <color name="disabled_button_color">#FFB7B7B7</color>
+
+    <!-- CardView additions for device login support -->
+    <!-- Background color for light CardView. -->
+    <color name="cardview_light_background">#FFFAFAFA</color>
+    <!-- Background color for dark CardView. -->
+    <color name="cardview_dark_background">#FF202020</color>
+    <!-- Shadow color for the first pixels around CardView. -->
+    <color name="cardview_shadow_start_color">#37000000</color>
+    <!-- Shadow color for the furthest pixels around CardView. -->
+    <color name="cardview_shadow_end_color">#03000000</color>
+</resources>
diff --git a/facebook/src/main/res/values/dimens.xml b/facebook/src/main/res/values/dimens.xml
index 5ae0ed683..0a6bbf32e 100644
--- a/facebook/src/main/res/values/dimens.xml
+++ b/facebook/src/main/res/values/dimens.xml
@@ -20,9 +20,19 @@
 -->
 
 <resources>
+    <!-- Standard facebook SDK dimens. -->
     <dimen name="com_facebook_auth_dialog_corner_radius">2dp</dimen>
     <!--Oversized radius for making sure that when two frames are overlayed the button
     one does not stick out-->
     <dimen name="com_facebook_auth_dialog_corner_radius_oversized">4dp</dimen>
     <dimen name="com_facebook_button_corner_radius">2dp</dimen>
+
+    <!-- CardView additions for device login support -->
+    <!-- Default radius for CardView corners. -->
+    <dimen name="cardview_default_radius">2dp</dimen>
+    <!-- Elevation value to use for CardViews. Pre-L, it is equal to shadow size. -->
+    <dimen name="cardview_default_elevation">2dp</dimen>
+    <!-- Inset shadow for RoundRectDrawableWithShadow. It is used to avoid gaps between the card
+     and the shadow. -->
+    <dimen name="cardview_compat_inset_shadow">1dp</dimen>
 </resources>
diff --git a/facebook/src/main/res/values/drawables.xml b/facebook/src/main/res/values/drawables.xml
new file mode 100644
index 000000000..cdb56f864
--- /dev/null
+++ b/facebook/src/main/res/values/drawables.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <drawable name="picker_default_separator_color">#33464c59</drawable>
+</resources>
diff --git a/facebook/src/main/res/values/strings.xml b/facebook/src/main/res/values/strings.xml
index 2c7d8a066..ca8ed5464 100644
--- a/facebook/src/main/res/values/strings.xml
+++ b/facebook/src/main/res/values/strings.xml
@@ -37,4 +37,13 @@
     <string name="com_facebook_share_button_text">Share</string>
     <string name="com_facebook_send_button_text">Send</string>
     <string name="com_facebook_device_auth_instructions">Visit &lt;b&gt;facebook.com/device&lt;/b&gt;&lt;br /&gt;on your smartphone or computer&lt;br /&gt;and enter this code</string>
+
+    <!-- Picker additions from Scrumptious sample -->
+    <string name="picker_placepicker_subtitle_format">%1$s • %2$,d were here</string>
+    <string name="picker_placepicker_subtitle_catetory_only_format">%1$s</string>
+    <string name="picker_placepicker_subtitle_were_here_only_format">%1$,d were here</string>
+    <string name="picker_picker_done_button_text">Done</string>
+    <string name="choose_friends">Choose Friends</string>
+	<string name="nearby">Nearby</string>
 </resources>
+
diff --git a/facebook/src/main/res/values/styles.xml b/facebook/src/main/res/values/styles.xml
index b7824d208..4488f14ad 100644
--- a/facebook/src/main/res/values/styles.xml
+++ b/facebook/src/main/res/values/styles.xml
@@ -20,6 +20,7 @@
 -->
 
 <resources xmlns:android="http://schemas.android.com/apk/res/android">
+    <!-- Standard facebook SDK styles. -->
     <color name="com_facebook_blue">#3B5998</color>
     <color name="com_facebook_messenger_blue">#0084ff</color>
 
@@ -120,4 +121,19 @@
         <item name="android:windowIsFloating">true</item>
     </style>
 
+    <!-- CardView additions for device login support -->
+    <style name="CardView">
+        <item name="cardBackgroundColor">@color/cardview_light_background</item>
+        <item name="cardCornerRadius">@dimen/cardview_default_radius</item>
+        <item name="cardElevation">@dimen/cardview_default_elevation</item>
+        <item name="cardMaxElevation">@dimen/cardview_default_elevation</item>
+        <item name="cardUseCompatPadding">false</item>
+        <item name="cardPreventCornerOverlap">true</item>
+    </style>
+    <style name="CardView.Light">
+        <item name="cardBackgroundColor">@color/cardview_light_background</item>
+    </style>
+    <style name="CardView.Dark">
+        <item name="cardBackgroundColor">@color/cardview_dark_background</item>
+    </style>
 </resources>
