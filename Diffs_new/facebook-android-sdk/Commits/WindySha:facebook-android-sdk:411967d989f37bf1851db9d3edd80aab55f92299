diff --git a/facebook/src/test/java/com/facebook/appevents/AppEventTestUtilities.java b/facebook/src/test/java/com/facebook/appevents/AppEventTestUtilities.java
index dc5590c6c..83ca0e659 100644
--- a/facebook/src/test/java/com/facebook/appevents/AppEventTestUtilities.java
+++ b/facebook/src/test/java/com/facebook/appevents/AppEventTestUtilities.java
@@ -26,6 +26,7 @@
 
 import org.json.JSONException;
 import org.json.JSONObject;
+import org.mockito.ArgumentMatcher;
 
 import java.util.HashSet;
 import java.util.Iterator;
@@ -67,6 +68,21 @@ public static void assertEquals(JSONObject expected, JSONObject actual) throws J
         }
     }
 
+    public static void assertEquals(Bundle expected, Bundle actual) {
+        if (expected == null) {
+            assertNull(actual);
+        }
+        assertNotNull(actual);
+
+        Set<String> set1 = expected.keySet();
+        Set<String> set2 = actual.keySet();
+        Assert.assertEquals(set1, set2);
+
+        for (String k : set1) {
+            Assert.assertEquals(expected.get(k), actual.get(k));
+        }
+    }
+
     public static Set<String> getKeySet(JSONObject object){
         Set<String> set = new HashSet<>();
 
@@ -78,4 +94,20 @@ public static void assertEquals(JSONObject expected, JSONObject actual) throws J
         return set;
     }
 
+    public static class BundleMatcher extends ArgumentMatcher<Bundle> {
+
+        private Bundle wanted;
+
+        public BundleMatcher(Bundle wanted) {
+            this.wanted = wanted;
+        }
+
+        public boolean matches(Object bundle) {
+            if (!(bundle instanceof Bundle)) {
+                return false;
+            }
+            assertEquals(this.wanted, (Bundle)bundle);
+            return true;
+        }
+    }
 }
diff --git a/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerTest.java b/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerTest.java
index b126fc8d9..2e3c3d1a6 100644
--- a/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerTest.java
+++ b/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerTest.java
@@ -21,10 +21,7 @@
 package com.facebook.appevents;
 
 import android.content.Context;
-import android.content.SharedPreferences;
 import android.os.Bundle;
-import android.test.mock.MockContext;
-import android.util.Log;
 
 import com.facebook.FacebookPowerMockTestCase;
 import com.facebook.FacebookSdk;
@@ -58,6 +55,7 @@
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyString;
+import static org.mockito.Matchers.argThat;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.powermock.api.mockito.PowerMockito.doReturn;
@@ -180,11 +178,12 @@ public void testLogPurchase() throws Exception {
         parameters.putString(
                 AppEventsConstants.EVENT_PARAM_CURRENCY,
                 Currency.getInstance(Locale.US).getCurrencyCode());
+
         verifyNew(AppEvent.class).withArguments(
                 Matchers.anyString(),
                 Matchers.eq(AppEventsConstants.EVENT_NAME_PURCHASED),
                 Matchers.eq(1.0),
-                Matchers.eq(parameters),
+                argThat(new AppEventTestUtilities.BundleMatcher(parameters)),
                 Matchers.anyBoolean(),
                 Matchers.anyBoolean(),
                 Matchers.any(UUID.class));
@@ -233,7 +232,7 @@ public void testLogProductItemWithGtinMpnBrand() throws Exception {
                 Matchers.anyString(),
                 Matchers.eq(AppEventsConstants.EVENT_NAME_PRODUCT_CATALOG_UPDATE),
                 Matchers.anyDouble(),
-                Matchers.eq(parameters),
+                argThat(new AppEventTestUtilities.BundleMatcher(parameters)),
                 Matchers.anyBoolean(),
                 Matchers.anyBoolean(),
                 Matchers.any(UUID.class));
@@ -279,7 +278,7 @@ public void testLogProductItemWithoutGtinMpnBrand() throws Exception {
                 Matchers.anyString(),
                 Matchers.eq(AppEventsConstants.EVENT_NAME_PRODUCT_CATALOG_UPDATE),
                 Matchers.anyDouble(),
-                Matchers.eq(parameters),
+                argThat(new AppEventTestUtilities.BundleMatcher(parameters)),
                 Matchers.anyBoolean(),
                 Matchers.anyBoolean(),
                 Matchers.any(UUID.class));
@@ -297,7 +296,7 @@ public void testLogPushNotificationOpen() throws Exception {
                 Matchers.anyString(),
                 Matchers.eq("fb_mobile_push_opened"),
                 Matchers.anyDouble(),
-                Matchers.eq(parameters),
+                argThat(new AppEventTestUtilities.BundleMatcher(parameters)),
                 Matchers.anyBoolean(),
                 Matchers.anyBoolean(),
                 Matchers.any(UUID.class));
@@ -332,7 +331,7 @@ public void testLogPushNotificationOpenWithAction() throws Exception {
                 Matchers.anyString(),
                 Matchers.eq("fb_mobile_push_opened"),
                 Matchers.anyDouble(),
-                Matchers.eq(parameters),
+                argThat(new AppEventTestUtilities.BundleMatcher(parameters)),
                 Matchers.anyBoolean(),
                 Matchers.anyBoolean(),
                 Matchers.any(UUID.class));
@@ -392,4 +391,5 @@ public void testPublishInstall() throws Exception {
         verify(mockRequest).setGraphObject(captor.capture());
         assertEquals(expectedEvent, captor.getValue().getString("event"));
     }
+
 }
