diff --git a/facebook/src/com/facebook/AuthorizationClient.java b/facebook/src/com/facebook/AuthorizationClient.java
index 3dd3aefa1..311c830c2 100644
--- a/facebook/src/com/facebook/AuthorizationClient.java
+++ b/facebook/src/com/facebook/AuthorizationClient.java
@@ -37,7 +37,10 @@
 
 import java.io.Serializable;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
+
 
 
 
@@ -496,11 +499,11 @@ void onWebDialogComplete(AuthorizationRequest request, Bundle values,
                         .createFromWebBundle(request.getPermissions(), values, AccessTokenSource.WEB_VIEW);
                 //outcome = Result.createTokenResult(token);
                 if(values.getString(AUTH_CODE_KEY) != null) {
-                	outcome = Result.createCodeResult(values.getString(AUTH_CODE_KEY));                	
+                	outcome = Result.createCodeBundleResult(values.getString(AUTH_CODE_KEY),values);               	
                 }
                 else if(token!=null 
                 		&& values.getString(SESSION_KEY_KEY)!=null) {
-                	outcome = Result.createTokenResult(token, values.getString(SESSION_KEY_KEY));                 	  	
+                	outcome = Result.createTokenBundleResult(token, values);                  
                 }
                 else 
                 {
@@ -849,17 +852,21 @@ boolean needsNewTokenValidation() {
 
         final Code code;
         final AccessToken token;
-        final String authCode; 
-        final String sessionKey;           
+        final String authCode;         
         final String errorMessage;
-
+        final Map<String, String>values;
+        
 //        private Result(Code code, AccessToken token, String errorMessage) {
-        private Result(Code code, String authCode, AccessToken token, String SessionKey,String errorMessage) {        
+        private Result(Code code, String authCode, AccessToken token, String errorMessage, Bundle bundle) {        
             this.token = token;
             this.errorMessage = errorMessage;
-            this.authCode=authCode;
-            this.sessionKey=SessionKey;            
-            this.code = code;         
+            this.authCode=authCode;           
+            this.code = code;     
+            //Bundle can't be Serialize
+            values = new HashMap<String, String>();
+            for (String key : bundle.keySet()) {
+            	values.put(key, bundle.getString(key));
+            }    
         }
 
         static Result createTokenResult(AccessToken token) {
@@ -869,15 +876,19 @@ static Result createTokenResult(AccessToken token) {
 
         static Result createCodeResult(String authCode) {
             return new Result(Code.SUCCESS, authCode, null, null, null);
-        }    
+        }      
+               
+        static Result createCodeBundleResult(String authCode, Bundle bundle) {
+            return new Result(Code.SUCCESS, authCode, null, null, bundle);
+        }   
+ 
+        static Result createTokenBundleResult(AccessToken token, Bundle bundle) {
+            return new Result(Code.SUCCESS, null, token,  null,bundle);
+        }              
         
-        static Result createTokenResult(AccessToken token,String sessionKey) {
-            return new Result(Code.SUCCESS, null, token, sessionKey, null);
-        }        
-                
         static Result createCancelResult(String message) {
             //return new Result(Code.CANCEL, null, message);
-            return new Result(Code.CANCEL, null, null, null, message);        	
+            return new Result(Code.CANCEL, null, null, message,null);        	
         }
 
         static Result createErrorResult(String errorType, String errorDescription) {
@@ -886,7 +897,7 @@ static Result createErrorResult(String errorType, String errorDescription) {
                 message += ": " + errorDescription;
             }
             //return new Result(Code.ERROR, null, message);
-            return new Result(Code.ERROR, null, null, null, message);            
+            return new Result(Code.ERROR, null, null, message, null);            
         }
     }
 }
diff --git a/facebook/src/com/facebook/Session.java b/facebook/src/com/facebook/Session.java
index 9f3cf72b7..612ef3aae 100644
--- a/facebook/src/com/facebook/Session.java
+++ b/facebook/src/com/facebook/Session.java
@@ -32,6 +32,7 @@
 import java.util.*;
 
 
+
 import com.facebook.AccessToken;
 
 /**
@@ -141,7 +142,7 @@
     private SessionState state;
     private String authCode;    
     private AccessToken tokenInfo;
-    private String sessionKey;     
+    private Map<String,String> values;      
     private Date lastAttemptedTokenExtendDate = new Date(0);
     private String redirectUri;
     
@@ -267,7 +268,7 @@ public Session(Context currentContext) {
             this.tokenInfo = AccessToken.createEmptyToken(Collections.<String>emptyList());
         }
     }
-
+    
     /**
      * Returns a Bundle containing data that was returned from Facebook during
      * authorization.
@@ -334,9 +335,18 @@ public final String getAuthCode() {
         return this.authCode;
     }
     
-    public final String getSessionKey() {
-        return this.sessionKey;
+    public final Map<String,String> getValues() {
+        return this.values;
     }  
+    
+	public final String getRedirectUri() {
+		return this.redirectUri;
+	}
+
+	public void setRedirectUri(String redirectUri) {
+		this.redirectUri = redirectUri;
+	} 
+	
     /**
      * <p>
      * Returns the Date at which the current token will expire.
@@ -1053,11 +1063,13 @@ static boolean isPublishPermission(String permission) {
     private void handleAuthorizationResult(int resultCode, AuthorizationClient.Result result) {
         AccessToken newToken = null;
         Exception exception = null;
+        Map<String,String> values = null;
+        
         if (resultCode == Activity.RESULT_OK) {
             if (result.code == AuthorizationClient.Result.Code.SUCCESS) {
                 newToken = result.token;
                 authCode = result.authCode;
-                sessionKey= result.sessionKey;                
+                values= result.values;             
             } else {
                 exception = new FacebookAuthorizationException(result.errorMessage);
             }
@@ -1066,7 +1078,7 @@ private void handleAuthorizationResult(int resultCode, AuthorizationClient.Resul
         }
 
         authorizationClient = null;
-        finishAuthOrReauth(authCode, newToken, sessionKey, exception);        
+        finishAuthOrReauth(authCode, newToken, values, exception);        
         //finishAuthOrReauth(newToken, exception);
     }
 
@@ -1129,7 +1141,7 @@ public void onCompleted(AuthorizationClient.Result result) {
 
     @SuppressWarnings("incomplete-switch")
     //void finishAuthOrReauth(AccessToken newToken, Exception exception) {
-    void finishAuthOrReauth(String authCode, AccessToken newToken, String sessonKey, Exception exception) {    
+    void finishAuthOrReauth(String authCode, AccessToken newToken, Map<String,String> values, Exception exception) {    
         // If the token we came up with is expired/invalid, then auth failed.
         if ((newToken != null) && newToken.isInvalid()) {
             newToken = null;
@@ -1139,12 +1151,15 @@ void finishAuthOrReauth(String authCode, AccessToken newToken, String sessonKey,
         synchronized (this.lock) {
         	
         	this.authCode = authCode;
-        	this.sessionKey = sessonKey;
+        	this.values = values;
         	
             switch (this.state) {
                 case OPENING:
                     // This means we are authorizing for the first time in this Session.
-                    finishAuthorization(newToken, exception);
+                	if(authCode != null)  
+                		finishAuthorization(authCode, exception);
+                	else
+                		finishAuthorization(newToken, exception);
                     break;
 
                 case OPENED:
@@ -1156,7 +1171,20 @@ void finishAuthOrReauth(String authCode, AccessToken newToken, String sessonKey,
             }
         }
     }
+    
+    private void finishAuthorization(String code, Exception exception) {
+        final SessionState oldState = state;
+        if (code != null) {
+        	authCode = code;
 
+            state = SessionState.OPENED;
+        } else if (exception != null) {
+            state = SessionState.CLOSED_LOGIN_FAILED;
+        }
+        pendingRequest = null;
+        postStateChange(oldState, state, exception);
+    }
+    
     private void finishAuthorization(AccessToken newToken, Exception exception) {
         final SessionState oldState = state;
         if (newToken != null) {
diff --git a/funtown/src/tw/com/funtown/AuthorizationClient.java b/funtown/src/tw/com/funtown/AuthorizationClient.java
index 75debd341..b06d8ef7b 100644
--- a/funtown/src/tw/com/funtown/AuthorizationClient.java
+++ b/funtown/src/tw/com/funtown/AuthorizationClient.java
@@ -29,6 +29,8 @@
 import tw.com.funtown.android.R;
 import tw.com.funtown.internal.ServerProtocol;
 import tw.com.funtown.internal.Utility;
+
+import tw.com.funtown.AccessToken;
 import com.facebook.model.GraphMultiResult;
 import com.facebook.model.GraphObject;
 import com.facebook.model.GraphObjectList;
@@ -37,7 +39,9 @@
 
 import java.io.Serializable;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
 class AuthorizationClient implements Serializable {
     private static final long serialVersionUID = 1L;
@@ -498,11 +502,11 @@ void onWebDialogComplete(AuthorizationRequest request, Bundle values,
                 AccessToken token = AccessToken
                         .createFromWebBundle(request.getPermissions(), values, AccessTokenSource.WEB_VIEW);
                 if(values.getString(AUTH_CODE_KEY) != null) {
-                	outcome = Result.createCodeResult(values.getString(AUTH_CODE_KEY));                	
+                	outcome = Result.createCodeBundleResult(values.getString(AUTH_CODE_KEY),values);                	
                 }
                 else if(token!=null 
                 		&& values.getString(SESSION_KEY_KEY)!=null) {
-                	outcome = Result.createTokenResult(token, values.getString(SESSION_KEY_KEY));                 	  	
+                	outcome = Result.createTokenBundleResult(token, values);                 	  	
                 }
                 else 
                 {
@@ -738,9 +742,9 @@ private Result handleResultOk(Intent data) {
         }
     }
     static class UUIDAuthDialogBuilder extends WebDialog.Builder {
-        private static final String UUID_AUTHROITY = "newpartner.funtown.com.tw";    
-        private static final String UUID_PATH = "gameview/";         
-        private static final String UUID_DIALOG = "index.php";
+        private static final String UUID_AUTHROITY = "weblogin.funtown.com.tw";    
+        private static final String UUID_PATH = "oauth/";         
+        private static final String UUID_DIALOG = "oauth_mobile.php";
         private static final String UUID_PARAMETER = "uuid";
         static final String RESPONSE_TYPE = "code";
         private String uuid;
@@ -753,7 +757,6 @@ public UUIDAuthDialogBuilder(Context context, String applicationId, Bundle param
         @Override
         public WebDialog build() {
             Bundle parameters = getParameters();
-            //parameters.putString(ServerProtocol.DIALOG_PARAM_REDIRECT_URI, REDIRECT_URI);
             parameters.putString(ServerProtocol.DIALOG_PARAM_CLIENT_ID, getApplicationId());
             parameters.putString(ServerProtocol.DIALOG_PARAM_RESPONSE_TYPE, RESPONSE_TYPE);
             parameters.putString(UUID_PARAMETER, uuid);
@@ -875,32 +878,40 @@ boolean needsNewTokenValidation() {
 
         final Code code;
         final AccessToken token;
-        final String authCode; 
-        final String sessionKey;         
+        final String authCode;         
         final String errorMessage;
-
-        private Result(Code code, String authCode, AccessToken token, String SessionKey,String errorMessage) {
+        final Map<String, String>values;
+        
+        private Result(Code code, String authCode, AccessToken token, String errorMessage, Bundle bundle) {
             this.token = token;
             this.errorMessage = errorMessage;
-            this.authCode=authCode;
-            this.sessionKey=SessionKey;            
+            this.authCode=authCode;          
             this.code = code;
+            //Bundle can't be Serialize
+            values = new HashMap<String, String>();
+            for (String key : bundle.keySet()) {
+            	values.put(key, bundle.getString(key));
+            }           
         }
 
         static Result createTokenResult(AccessToken token) {
-            return new Result(Code.SUCCESS, null,token, null, null);
+            return new Result(Code.SUCCESS, null,token,  null , null);
         }
         
         static Result createCodeResult(String authCode) {
             return new Result(Code.SUCCESS, authCode, null, null, null);
         }
-
-        static Result createTokenResult(AccessToken token,String sessionKey) {
-            return new Result(Code.SUCCESS, null, token, sessionKey, null);
-        }        
+        
+        static Result createCodeBundleResult(String authCode, Bundle bundle) {
+            return new Result(Code.SUCCESS, authCode, null, null, bundle);
+        }   
+ 
+        static Result createTokenBundleResult(AccessToken token, Bundle bundle) {
+            return new Result(Code.SUCCESS, null, token,  null,bundle);
+        }            
         
         static Result createCancelResult(String message) {
-            return new Result(Code.CANCEL, null, null, null, message);
+            return new Result(Code.CANCEL, null, null, message, null);
         }
 
         static Result createErrorResult(String errorType, String errorDescription) {
@@ -908,7 +919,7 @@ static Result createErrorResult(String errorType, String errorDescription) {
             if (errorDescription != null) {
                 message += ": " + errorDescription;
             }
-            return new Result(Code.ERROR, null, null, null, message);
+            return new Result(Code.ERROR, null, null, message, null);
         }
     }
 }
diff --git a/funtown/src/tw/com/funtown/Session.java b/funtown/src/tw/com/funtown/Session.java
index a348df5f6..aa3cb3d7e 100644
--- a/funtown/src/tw/com/funtown/Session.java
+++ b/funtown/src/tw/com/funtown/Session.java
@@ -138,7 +138,7 @@
     private SessionState state;
     private String authCode;    
     private AccessToken tokenInfo;
-    private String sessionKey;      
+    private Map<String,String> values;      
     private Date lastAttemptedTokenExtendDate = new Date(0);
     private String redirectUri;
     
@@ -263,8 +263,8 @@ public Session(Context currentContext) {
         } else {
             this.tokenInfo = AccessToken.createEmptyToken(Collections.<String>emptyList());
         }
-    }
-
+    }    
+    
     /**
      * Returns a Bundle containing data that was returned from Facebook during
      * authorization.
@@ -331,10 +331,17 @@ public final String getAuthCode() {
         return this.authCode;
     }
     
-    public final String getSessionKey() {
-        return this.sessionKey;
+    public final Map<String,String> getValues() {
+        return this.values;
     }  
-    
+
+	public final String getRedirectUri() {
+		return this.redirectUri;
+	}
+
+	public void setRedirectUri(String redirectUri) {
+		this.redirectUri = redirectUri;
+	}  
     /**
      * <p>
      * Returns the Date at which the current token will expire.
@@ -1051,13 +1058,13 @@ private void handleAuthorizationResult(int resultCode, AuthorizationClient.Resul
         String authCode = null;
     	AccessToken newToken = null;
         Exception exception = null;
-        String sessionKey = null;
+        Map<String,String> values = null;
         
         if (resultCode == Activity.RESULT_OK) {
             if (result.code == AuthorizationClient.Result.Code.SUCCESS) {
                 newToken = result.token;
                 authCode = result.authCode;
-                sessionKey= result.sessionKey;
+                values= result.values;
             } else {
                 exception = new FuntownAuthorizationException(result.errorMessage);
             }
@@ -1066,7 +1073,7 @@ private void handleAuthorizationResult(int resultCode, AuthorizationClient.Resul
         }
 
         authorizationClient = null;
-        finishAuthOrReauth(authCode, newToken, sessionKey, exception);
+        finishAuthOrReauth(authCode, newToken, values, exception);
     }
 
     private boolean tryLoginActivity(AuthorizationRequest request) {
@@ -1127,7 +1134,7 @@ public void onCompleted(AuthorizationClient.Result result) {
     }
 
     @SuppressWarnings("incomplete-switch")
-    void finishAuthOrReauth(String authCode, AccessToken newToken, String sessonKey, Exception exception) {
+    void finishAuthOrReauth(String authCode, AccessToken newToken, Map<String,String> values, Exception exception) {
         // If the token we came up with is expired/invalid, then auth failed.
         if ((newToken != null) && newToken.isInvalid()) {
             newToken = null;
@@ -1137,7 +1144,7 @@ void finishAuthOrReauth(String authCode, AccessToken newToken, String sessonKey,
         synchronized (this.lock) {
         	
         	this.authCode = authCode;
-        	this.sessionKey = sessonKey;
+        	this.values = values;
         	
             switch (this.state) {
                 case OPENING:
@@ -1185,7 +1192,7 @@ private void finishAuthorization(String code, Exception exception) {
         postStateChange(oldState, state, exception);
     }    
     
-    private void finishReauthorization(final AccessToken newToken, Exception exception) {
+    private void finishReauthorization(AccessToken newToken, Exception exception) {
         final SessionState oldState = state;
 
         if (newToken != null) {
diff --git a/libs/android-support-v4.jar b/libs/android-support-v4.jar
index 428bdbc02..feaf44f80 100644
Binary files a/libs/android-support-v4.jar and b/libs/android-support-v4.jar differ
diff --git a/samples/SessionLoginSample/res/layout/activity.xml b/samples/SessionLoginSample/res/layout/activity.xml
index 52ca3daf9..176995f99 100644
--- a/samples/SessionLoginSample/res/layout/activity.xml
+++ b/samples/SessionLoginSample/res/layout/activity.xml
@@ -34,5 +34,10 @@
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:text="@string/login" />
-
+    
+    <Button
+        android:id="@+id/buttonUUIDBinding"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:text="@string/funtownLogin" />  
 </LinearLayout>
diff --git a/samples/SessionLoginSample/res/layout/funtown_activity.xml b/samples/SessionLoginSample/res/layout/funtown_activity.xml
index 289ba9076..f54007713 100644
--- a/samples/SessionLoginSample/res/layout/funtown_activity.xml
+++ b/samples/SessionLoginSample/res/layout/funtown_activity.xml
@@ -39,5 +39,10 @@
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:text="@string/funtownLogin" />
-    
+
+    <Button
+        android:id="@+id/buttonFuntownUUIDBinding"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:text="@string/funtownLogin" />    
 </LinearLayout>
diff --git a/samples/SessionLoginSample/res/values/strings.xml b/samples/SessionLoginSample/res/values/strings.xml
index 5e8c52443..5bd622516 100644
--- a/samples/SessionLoginSample/res/values/strings.xml
+++ b/samples/SessionLoginSample/res/values/strings.xml
@@ -30,6 +30,8 @@
     <string name="login_using_funtown_activity">Login using Funtown Activity</string>
     <string name="funtownLogin">Login Funtown</string>
     <string name="funtownUUIDGenerator">Generate Device UUID</string>    
+    <string name="funtownUUIDBinding">Binding Account for Funtown</string>
+    <string name="facebookUUIDBinding">Binding Account for Faceboook</string>    
      <string name="funtownLogout">Log out Funtown</string>  
     <string name="client_id">105</string>
     <string name="funtown_redirect_uri">https://weblogin.funtown.com.tw/oauth/login_success.html</string>           
diff --git a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingActivityActivity.java b/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingActivityActivity.java
index 762c6742b..380f1d9cb 100644
--- a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingActivityActivity.java
+++ b/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingActivityActivity.java
@@ -16,8 +16,11 @@
 
 package com.facebook.samples.sessionlogin;
 
+import tw.com.funtown.UUID;
+import tw.com.funtown.internal.Utility;
 import android.app.Activity;
 import android.content.Intent;
+import android.net.Uri;
 import android.os.Bundle;
 import android.view.View;
 import android.view.View.OnClickListener;
@@ -34,12 +37,14 @@
     private TextView textInstructionsOrLink;
     private Button buttonLoginLogout;
     private Session.StatusCallback statusCallback = new SessionStatusCallback();
-
+    private Button buttonUUIDBinding;   
+    
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity);
         buttonLoginLogout = (Button)findViewById(R.id.buttonLoginLogout);
+        buttonUUIDBinding  = (Button)findViewById(R.id.buttonUUIDBinding);           
         textInstructionsOrLink = (TextView)findViewById(R.id.instructionsOrLink);
 
         Settings.addLoggingBehavior(LoggingBehavior.INCLUDE_ACCESS_TOKENS);
@@ -88,7 +93,7 @@ protected void onSaveInstanceState(Bundle outState) {
     private void updateView() {
         Session session = Session.getActiveSession();
         if (session.isOpened()) {
-            textInstructionsOrLink.setText(URL_PREFIX_FRIENDS + session.getAccessToken() + "&session_key=" + session.getSessionKey());        	
+            textInstructionsOrLink.setText(URL_PREFIX_FRIENDS + session.getAccessToken() + "&session_key=" + session.getValues().get("session_key"));        	
 //            textInstructionsOrLink.setText(URL_PREFIX_FRIENDS + session.getAccessToken());
             buttonLoginLogout.setText(R.string.logout);
             buttonLoginLogout.setOnClickListener(new OnClickListener() {
@@ -100,6 +105,10 @@ private void updateView() {
             buttonLoginLogout.setOnClickListener(new OnClickListener() {
                 public void onClick(View view) { onClickLogin(); }
             });
+            buttonUUIDBinding.setText(R.string.facebookUUIDBinding);
+            buttonUUIDBinding.setOnClickListener(new OnClickListener() {
+                public void onClick(View view) { onClickUUIDBinding(); }
+            });                
         }
     }
 
@@ -118,7 +127,28 @@ private void onClickLogout() {
             session.closeAndClearTokenInformation();
         }
     }
-
+    
+    private void onClickUUIDBinding() {
+    	UUID uuid= UUID.getInstance(this);
+    	final Activity ac = this;
+    	uuid.generateUUID(new UUID.OnUUIDGeneratedListener() {			
+			@Override
+			public void onUUIDGenerated(String UUID) {
+	            textInstructionsOrLink.setText("UUID : "+UUID);	
+	            Session session = Session.getActiveSession();
+	            Uri redirectUri = Uri.parse(Utility.getMetadataRedirctUri(ac));
+	            Bundle parameters= new Bundle();
+	            parameters.putString("uuid", UUID);
+	            Uri redirectUriWithUUID=Utility.buildUri(redirectUri.getAuthority(), redirectUri.getPath(), parameters);
+	            session.setRedirectUri(redirectUriWithUUID.toString());
+	            if (!session.isOpened() && !session.isClosed()) {
+	                session.openForRead(new Session.OpenRequest(ac).setCallback(statusCallback));
+	            } else {
+	                Session.openActiveSession(ac, true, statusCallback);
+	            }	            
+			}     		
+    	});
+    }
     private class SessionStatusCallback implements Session.StatusCallback {
         @Override
         public void call(Session session, SessionState state, Exception exception) {
diff --git a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingFuntownActivityActivity.java b/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingFuntownActivityActivity.java
index 22963a3ef..e22e18d74 100644
--- a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingFuntownActivityActivity.java
+++ b/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingFuntownActivityActivity.java
@@ -18,6 +18,7 @@
 
 import android.app.Activity;
 import android.content.Intent;
+import android.net.Uri;
 import android.os.Bundle;
 import android.view.View;
 import android.view.View.OnClickListener;
@@ -28,6 +29,7 @@
 import tw.com.funtown.SessionState;
 import tw.com.funtown.Settings;
 import tw.com.funtown.UUID;
+import tw.com.funtown.internal.Utility;
 
 public class LoginUsingFuntownActivityActivity extends Activity {
     private static final String URL_PREFIX_PROFILE = "https://weblogin.funtown.com.tw/oauth/profile.php?access_token=";
@@ -35,6 +37,7 @@
     private TextView textInstructionsOrLink;
     private Button buttonLoginLogout;
     private Button buttonUUIDGenerator;    
+    private Button buttonUUIDBinding;     
     private Session.StatusCallback statusCallback = new SessionStatusCallback();
 
     @Override
@@ -43,6 +46,7 @@ public void onCreate(Bundle savedInstanceState) {
         setContentView(R.layout.funtown_activity);
         buttonLoginLogout = (Button)findViewById(R.id.buttonFuntownLoginLogout);
         buttonUUIDGenerator  = (Button)findViewById(R.id.buttonFuntownUUIDGenerator);
+        buttonUUIDBinding  = (Button)findViewById(R.id.buttonFuntownUUIDBinding);               
         textInstructionsOrLink = (TextView)findViewById(R.id.instructionsOrLink);
 
         Settings.addLoggingBehavior(LoggingBehavior.INCLUDE_ACCESS_TOKENS);
@@ -92,7 +96,7 @@ protected void onSaveInstanceState(Bundle outState) {
     private void updateView() {
         Session session = Session.getActiveSession();
         if (session.isOpened()) {
-        	textInstructionsOrLink.setText(URL_PREFIX_PROFILE + session.getAccessToken() + "&session_key=" + session.getSessionKey());
+        	textInstructionsOrLink.setText(URL_PREFIX_PROFILE + session.getAccessToken() + "&session_key=" + session.getValues().get("session_key"));
             buttonLoginLogout.setText(R.string.logout);
             buttonLoginLogout.setOnClickListener(new OnClickListener() {
                 public void onClick(View view) { onClickLogout(); }
@@ -107,7 +111,10 @@ private void updateView() {
             buttonUUIDGenerator.setOnClickListener(new OnClickListener() {
                 public void onClick(View view) { onClickUUIDGenerator(); }
             });                  
-            
+            buttonUUIDBinding.setText(R.string.funtownUUIDBinding);
+            buttonUUIDBinding.setOnClickListener(new OnClickListener() {
+                public void onClick(View view) { onClickUUIDBinding(); }
+            });             
         }
     }
 
@@ -134,7 +141,27 @@ private void onClickLogout() {
             session.closeAndClearTokenInformation();
         }
     }
-
+    private void onClickUUIDBinding() {
+    	UUID uuid= UUID.getInstance(this);
+    	final Activity ac = this;
+    	uuid.generateUUID(new UUID.OnUUIDGeneratedListener() {			
+			@Override
+			public void onUUIDGenerated(String UUID) {
+	            textInstructionsOrLink.setText("UUID : "+UUID);	
+	            Session session = Session.getActiveSession();
+	            Uri redirectUri = Uri.parse(Utility.getMetadataRedirctUri(ac));
+	            Bundle parameters= new Bundle();
+	            parameters.putString("uuid", UUID);
+	            Uri redirectUriWithUUID=Utility.buildUri(redirectUri.getAuthority(), redirectUri.getPath(), parameters);
+	            session.setRedirectUri(redirectUriWithUUID.toString());
+	            if (!session.isOpened() && !session.isClosed()) {
+	                session.openForRead(new Session.OpenRequest(ac).setCallback(statusCallback));
+	            } else {
+	                Session.openActiveSession(ac, true, statusCallback);
+	            }	            
+			}     		
+    	});
+    }
     private class SessionStatusCallback implements Session.StatusCallback {
         @Override
         public void call(Session session, SessionState state, Exception exception) {
