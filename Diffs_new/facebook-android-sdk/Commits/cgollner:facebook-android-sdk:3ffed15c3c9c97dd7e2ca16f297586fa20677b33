diff --git a/facebook/.classpath b/facebook/.classpath
index 7bc01d9a9..b76ec6cd4 100644
--- a/facebook/.classpath
+++ b/facebook/.classpath
@@ -1,9 +1,9 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="src" path="gen"/>
+	<classpathentry kind="output" path="bin/classes"/>
+</classpath>
diff --git a/facebook/AndroidManifest.xml b/facebook/AndroidManifest.xml
index 2f9284fb0..dfeb0b5c8 100644
--- a/facebook/AndroidManifest.xml
+++ b/facebook/AndroidManifest.xml
@@ -18,5 +18,5 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.facebook.android">
     <application/>
-    <uses-sdk android:minSdkVersion="8" />
+    <uses-sdk android:minSdkVersion="8" android:targetSdkVersion="19"/>
 </manifest>
diff --git a/facebook/project.properties b/facebook/project.properties
index cd0ca122a..b34b5776e 100644
--- a/facebook/project.properties
+++ b/facebook/project.properties
@@ -12,4 +12,5 @@
 
 android.library=true
 # Project target.
-target=android-8
+target=Google Inc.:Google APIs:19
+android.library.reference.1=../../pullrefresh/extras/pullactionbarsherlock
diff --git a/facebook/res/layout/com_facebook_usersettingsfragment.xml b/facebook/res/layout/com_facebook_usersettingsfragment.xml
index 04a9a1ded..c35c18654 100644
--- a/facebook/res/layout/com_facebook_usersettingsfragment.xml
+++ b/facebook/res/layout/com_facebook_usersettingsfragment.xml
@@ -23,7 +23,7 @@
     android:background="@drawable/com_facebook_usersettingsfragment_background_gradient" >
     <LinearLayout
         android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
+        android:layout_height="wrap_content"
         android:orientation="vertical">
 
         <ImageView
diff --git a/facebook/src/com/facebook/AppEventsLogger.java b/facebook/src/com/facebook/AppEventsLogger.java
index ebac646eb..37a36c736 100644
--- a/facebook/src/com/facebook/AppEventsLogger.java
+++ b/facebook/src/com/facebook/AppEventsLogger.java
@@ -787,7 +787,7 @@ private static Request buildRequestForSession(final AccessTokenAppIdPair accessT
 
         final Request postRequest = Request.newPostRequest(
                 null,
-                String.format("%s/activities", applicationId),
+                String.format(Locale.US,"%s/activities", applicationId),
                 null,
                 null);
 
@@ -829,7 +829,7 @@ private static void handleResponse(AccessTokenAppIdPair accessTokenAppId, Reques
                 resultDescription = "Failed: No Connectivity";
                 flushResult = FlushResult.NO_CONNECTIVITY;
             } else {
-                resultDescription = String.format("Failed:\n  Response: %s\n  Error %s",
+                resultDescription = String.format(Locale.US,"Failed:\n  Response: %s\n  Error %s",
                         response.toString(),
                         error.toString());
                 flushResult = FlushResult.SERVER_ERROR;
@@ -1068,7 +1068,7 @@ public AppEvent(String eventName, Double valueToSum, Bundle parameters, boolean
                         Object value = parameters.get(key);
                         if (!(value instanceof String) && !(value instanceof Number)) {
                             throw new FacebookException(
-                                    String.format("Parameter value '%s' for key '%s' should be a string or a numeric type.",
+                                    String.format(Locale.US,"Parameter value '%s' for key '%s' should be a string or a numeric type.",
                                             value, key));
                         }
 
@@ -1114,7 +1114,7 @@ private void validateIdentifier(String identifier) {
                     identifier = "<None Provided>";
                 }
                 throw new FacebookException(
-                    String.format("Identifier '%s' must be less than %d characters", identifier, MAX_IDENTIFIER_LENGTH));
+                    String.format(Locale.US,"Identifier '%s' must be less than %d characters", identifier, MAX_IDENTIFIER_LENGTH));
             }
 
             boolean alreadyValidated = false;
@@ -1129,7 +1129,7 @@ private void validateIdentifier(String identifier) {
                     }
                 } else {
                     throw new FacebookException(
-                            String.format("Skipping event named '%s' due to illegal name - must be under 40 chars " +
+                            String.format(Locale.US,"Skipping event named '%s' due to illegal name - must be under 40 chars " +
                                           "and alphanumeric, _, - or space, and not start with a space or hyphen.",
                                           identifier));
                 }
@@ -1158,7 +1158,7 @@ private Object writeReplace() {
 
         @Override
         public String toString() {
-            return String.format("\"%s\", implicit: %b, json: %s", jsonObject.optString("_eventName"),
+            return String.format(Locale.US,"\"%s\", implicit: %b, json: %s", jsonObject.optString("_eventName"),
                     isImplicit, jsonObject.toString());
         }
     }
diff --git a/facebook/src/com/facebook/AuthorizationClient.java b/facebook/src/com/facebook/AuthorizationClient.java
index 88c3c298e..cccb48f96 100644
--- a/facebook/src/com/facebook/AuthorizationClient.java
+++ b/facebook/src/com/facebook/AuthorizationClient.java
@@ -665,7 +665,7 @@ void onWebDialogComplete(AuthorizationRequest request, Bundle values,
                     String errorMessage = error.getMessage();
                     if (error instanceof FacebookServiceException) {
                         FacebookRequestError requestError = ((FacebookServiceException)error).getRequestError();
-                        errorCode = String.format("%d", requestError.getErrorCode());
+                        errorCode = String.format(Locale.US,"%d", requestError.getErrorCode());
                         errorMessage = requestError.toString();
                     }
                     outcome = Result.createErrorResult(pendingRequest, null, errorMessage, errorCode);
diff --git a/facebook/src/com/facebook/NativeAppCallContentProvider.java b/facebook/src/com/facebook/NativeAppCallContentProvider.java
index bde165f58..0a71256c4 100644
--- a/facebook/src/com/facebook/NativeAppCallContentProvider.java
+++ b/facebook/src/com/facebook/NativeAppCallContentProvider.java
@@ -67,7 +67,7 @@ public NativeAppCallContentProvider() {
      * @return the String to use as the authority portion of a content URI.
      */
     public static String getAttachmentUrl(String applicationId, UUID callId, String attachmentName) {
-        return String.format("%s%s/%s/%s", ATTACHMENT_URL_BASE, applicationId, callId.toString(), attachmentName);
+        return String.format(Locale.US,"%s%s/%s/%s", ATTACHMENT_URL_BASE, applicationId, callId.toString(), attachmentName);
     }
 
     @Override
diff --git a/facebook/src/com/facebook/Request.java b/facebook/src/com/facebook/Request.java
index 2dfd3d92e..331e7e4b3 100644
--- a/facebook/src/com/facebook/Request.java
+++ b/facebook/src/com/facebook/Request.java
@@ -1532,7 +1532,7 @@ public static RequestAsyncTask executeBatchAsync(RequestBatch requests) {
 
         int numRequests = requests.size();
         if (numRequests != responses.size()) {
-            throw new FacebookException(String.format("Received %d responses while expecting %d", responses.size(),
+            throw new FacebookException(String.format(Locale.US,"Received %d responses while expecting %d", responses.size(),
                     numRequests));
         }
 
@@ -1693,7 +1693,7 @@ private String appendParametersToBaseUrl(String baseUrl) {
                 value = parameterToString(value);
             } else {
                 if (httpMethod == HttpMethod.GET) {
-                    throw new IllegalArgumentException(String.format("Unsupported parameter type for GET request: %s",
+                    throw new IllegalArgumentException(String.format(Locale.US,"Unsupported parameter type for GET request: %s",
                                     value.getClass().getSimpleName()));
                 }
                 continue;
@@ -1728,9 +1728,9 @@ final String getUrlForSingleRequest() {
 
         String baseUrl;
         if (this.restMethod != null) {
-            baseUrl = String.format("%s/%s", ServerProtocol.getRestUrlBase(), restMethod);
+            baseUrl = String.format(Locale.US,"%s/%s", ServerProtocol.getRestUrlBase(), restMethod);
         } else {
-            baseUrl = String.format("%s/%s", ServerProtocol.getGraphUrlBase(), graphPath);
+            baseUrl = String.format(Locale.US,"%s/%s", ServerProtocol.getGraphUrlBase(), graphPath);
         }
 
         addCommonParameters();
@@ -1763,7 +1763,7 @@ private void serializeToBatch(JSONArray batch, Bundle attachments) throws JSONEx
             Object value = this.parameters.get(key);
             if (isSupportedAttachmentType(value)) {
                 // Make the name unique across this entire batch.
-                String name = String.format("%s%d", ATTACHMENT_FILENAME_PREFIX, attachments.size());
+                String name = String.format(Locale.US,"%s%d", ATTACHMENT_FILENAME_PREFIX, attachments.size());
                 attachmentNames.add(name);
                 Utility.putObjectInBundle(attachments, name, value);
             }
@@ -1780,7 +1780,7 @@ private void serializeToBatch(JSONArray batch, Bundle attachments) throws JSONEx
             processGraphObject(this.graphObject, relativeURL, new KeyValueSerializer() {
                 @Override
                 public void writeString(String key, String value) throws IOException {
-                    keysAndValues.add(String.format("%s=%s", key, URLEncoder.encode(value, "UTF-8")));
+                    keysAndValues.add(String.format(Locale.US,"%s=%s", key, URLEncoder.encode(value, "UTF-8")));
                 }
             });
             String bodyValue = TextUtils.join("&", keysAndValues);
@@ -1907,7 +1907,7 @@ private static void processGraphObjectProperty(String key, Object value, KeyValu
                 Iterator<String> keys = jsonObject.keys();
                 while (keys.hasNext()) {
                     String propertyName = keys.next();
-                    String subKey = String.format("%s[%s]", key, propertyName);
+                    String subKey = String.format(Locale.US,"%s[%s]", key, propertyName);
                     processGraphObjectProperty(subKey, jsonObject.opt(propertyName), serializer, passByValue);
                 }
             } else {
@@ -1923,7 +1923,7 @@ private static void processGraphObjectProperty(String key, Object value, KeyValu
             JSONArray jsonArray = (JSONArray) value;
             int length = jsonArray.length();
             for (int i = 0; i < length; ++i) {
-                String subKey = String.format("%s[%d]", key, i);
+                String subKey = String.format(Locale.US,"%s[%d]", key, i);
                 processGraphObjectProperty(subKey, jsonArray.opt(i), serializer, passByValue);
             }
         } else if (String.class.isAssignableFrom(valueClass) ||
@@ -1976,14 +1976,14 @@ private static void serializeRequestsAsJSON(Serializer serializer, Collection<Re
     }
 
     private static String getMimeContentType() {
-        return String.format("multipart/form-data; boundary=%s", MIME_BOUNDARY);
+        return String.format(Locale.US,"multipart/form-data; boundary=%s", MIME_BOUNDARY);
     }
 
     private static volatile String userAgent;
 
     private static String getUserAgent() {
         if (userAgent == null) {
-            userAgent = String.format("%s.%s", USER_AGENT_BASE, FacebookSdkVersion.BUILD);
+            userAgent = String.format(Locale.US,"%s.%s", USER_AGENT_BASE, FacebookSdkVersion.BUILD);
         }
 
         return userAgent;
@@ -2092,7 +2092,7 @@ public void writeBytes(String key, byte[] bytes) throws IOException {
             this.outputStream.write(bytes);
             writeLine("");
             writeRecordBoundary();
-            logger.appendKeyValue("    " + key, String.format("<Data: %d>", bytes.length));
+            logger.appendKeyValue("    " + key, String.format(Locale.US,"<Data: %d>", bytes.length));
         }
 
         public void writeFile(String key, ParcelFileDescriptorWithMimeType descriptorWithMimeType) throws IOException {
@@ -2128,7 +2128,7 @@ public void writeFile(String key, ParcelFileDescriptor descriptor, String mimeTy
             }
             writeLine("");
             writeRecordBoundary();
-            logger.appendKeyValue("    " + key, String.format("<Data: %d>", totalBytes));
+            logger.appendKeyValue("    " + key, String.format(Locale.US,"<Data: %d>", totalBytes));
         }
 
         public void writeRecordBoundary() throws IOException {
diff --git a/facebook/src/com/facebook/RequestAsyncTask.java b/facebook/src/com/facebook/RequestAsyncTask.java
index db60a18f9..67a66cc20 100644
--- a/facebook/src/com/facebook/RequestAsyncTask.java
+++ b/facebook/src/com/facebook/RequestAsyncTask.java
@@ -16,18 +16,19 @@
 
 package com.facebook;
 
-import android.annotation.TargetApi;
-import android.os.AsyncTask;
-import android.os.Handler;
-import android.util.Log;
-
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.net.HttpURLConnection;
 import java.util.Collection;
 import java.util.List;
+import java.util.Locale;
 import java.util.concurrent.Executor;
 
+import android.annotation.TargetApi;
+import android.os.AsyncTask;
+import android.os.Handler;
+import android.util.Log;
+
 /**
  * Defines an AsyncTask suitable for executing a Request in the background. May be subclassed
  * by applications having unique threading model needs.
@@ -153,7 +154,7 @@ protected void onPostExecute(List<Response> result) {
         super.onPostExecute(result);
 
         if (exception != null) {
-            Log.d(TAG, String.format("onPostExecute: exception encountered during request: %s", exception.getMessage()));
+            Log.d(TAG, String.format(Locale.US,"onPostExecute: exception encountered during request: %s", exception.getMessage()));
         }
     }
 
diff --git a/facebook/src/com/facebook/Response.java b/facebook/src/com/facebook/Response.java
index 4697aaf12..a400b1f25 100644
--- a/facebook/src/com/facebook/Response.java
+++ b/facebook/src/com/facebook/Response.java
@@ -16,15 +16,6 @@
 
 package com.facebook;
 
-import android.content.Context;
-import com.facebook.internal.*;
-import com.facebook.model.GraphObject;
-import com.facebook.model.GraphObjectList;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.json.JSONTokener;
-
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.HttpURLConnection;
@@ -32,6 +23,21 @@
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Locale;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.json.JSONTokener;
+
+import android.content.Context;
+
+import com.facebook.internal.CacheableRequestBatch;
+import com.facebook.internal.FileLruCache;
+import com.facebook.internal.Logger;
+import com.facebook.internal.Utility;
+import com.facebook.model.GraphObject;
+import com.facebook.model.GraphObjectList;
 
 /**
  * Encapsulates the response, successful or otherwise, of a call to the Facebook platform.
@@ -229,7 +235,7 @@ public Request getRequestForPagedResults(PagingDirection direction) {
     public String toString() {
         String responseCode;
         try {
-            responseCode = String.format("%d", (connection != null) ? connection.getResponseCode() : 200);
+            responseCode = String.format(Locale.US,"%d", (connection != null) ? connection.getResponseCode() : 200);
         } catch (IOException e) {
             responseCode = "unknown";
         }
diff --git a/facebook/src/com/facebook/TestSession.java b/facebook/src/com/facebook/TestSession.java
index 9133cb91f..5023ce75d 100644
--- a/facebook/src/com/facebook/TestSession.java
+++ b/facebook/src/com/facebook/TestSession.java
@@ -225,7 +225,7 @@ private static synchronized void retrieveTestAccountsForAppIfNeeded() {
         // together (the second one refers to the first one), then cross-reference the results.
 
         // Get the test accounts for this app.
-        String testAccountQuery = String.format("SELECT id,access_token FROM test_account WHERE app_id = %s",
+        String testAccountQuery = String.format(Locale.US,"SELECT id,access_token FROM test_account WHERE app_id = %s",
                 testApplicationId);
         // Get the user names for those accounts.
         String userQuery = "SELECT uid,name FROM user WHERE uid IN (SELECT id FROM #test_accounts)";
@@ -391,10 +391,10 @@ private TestAccount createTestAccountAndFinishAuth() {
         // in another shared session. If we're in private mode, don't bother renaming it since we're just going to
         // delete it at the end of the session.
         if (mode == Mode.SHARED) {
-            parameters.putString("name", String.format("Shared %s Testuser", getSharedTestAccountIdentifier()));
+            parameters.putString("name", String.format(Locale.US,"Shared %s Testuser", getSharedTestAccountIdentifier()));
         }
 
-        String graphPath = String.format("%s/accounts/test-users", testApplicationId);
+        String graphPath = String.format(Locale.US,"%s/accounts/test-users", testApplicationId);
         Request createUserRequest = new Request(null, graphPath, parameters, HttpMethod.POST);
         Response response = createUserRequest.executeAndWait();
 
@@ -429,9 +429,9 @@ private void deleteTestAccount(String testAccountId, String appAccessToken) {
         FacebookRequestError error = response.getError();
         GraphObject graphObject = response.getGraphObject();
         if (error != null) {
-            Log.w(LOG_TAG, String.format("Could not delete test account %s: %s", testAccountId, error.getException().toString()));
+            Log.w(LOG_TAG, String.format(Locale.US,"Could not delete test account %s: %s", testAccountId, error.getException().toString()));
         } else if (graphObject.getProperty(Response.NON_JSON_RESPONSE_PROPERTY) == (Boolean) false) {
-            Log.w(LOG_TAG, String.format("Could not delete test account %s: unknown reason", testAccountId));
+            Log.w(LOG_TAG, String.format(Locale.US,"Could not delete test account %s: unknown reason", testAccountId));
         }
     }
 
diff --git a/facebook/src/com/facebook/android/Facebook.java b/facebook/src/com/facebook/android/Facebook.java
index 83cdabe9b..44725b249 100644
--- a/facebook/src/com/facebook/android/Facebook.java
+++ b/facebook/src/com/facebook/android/Facebook.java
@@ -16,26 +16,46 @@
 
 package com.facebook.android;
 
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.lang.ref.WeakReference;
+import java.net.MalformedURLException;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.Locale;
+
 import android.Manifest;
 import android.app.Activity;
-import android.content.*;
+import android.content.ComponentName;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.ServiceConnection;
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
 import android.content.pm.PackageManager.NameNotFoundException;
 import android.content.pm.ResolveInfo;
 import android.content.pm.Signature;
 import android.net.Uri;
-import android.os.*;
-import com.facebook.*;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.IBinder;
+import android.os.Message;
+import android.os.Messenger;
+import android.os.RemoteException;
+
+import com.facebook.AccessTokenSource;
+import com.facebook.FacebookAuthorizationException;
+import com.facebook.FacebookOperationCanceledException;
+import com.facebook.LegacyHelper;
+import com.facebook.Request;
+import com.facebook.Session;
 import com.facebook.Session.StatusCallback;
-
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.lang.ref.WeakReference;
-import java.net.MalformedURLException;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
+import com.facebook.SessionLoginBehavior;
+import com.facebook.SessionState;
+import com.facebook.Settings;
+import com.facebook.TokenCachingStrategy;
 
 /**
  * THIS CLASS SHOULD BE CONSIDERED DEPRECATED.
@@ -901,7 +921,7 @@ public void setSession(Session session) {
     private void checkUserSession(String methodName) {
         if (userSetSession != null) {
             throw new UnsupportedOperationException(
-                    String.format("Cannot call %s after setSession has been called.", methodName));
+                    String.format(Locale.US,"Cannot call %s after setSession has been called.", methodName));
         }
     }
 
diff --git a/facebook/src/com/facebook/model/GraphObject.java b/facebook/src/com/facebook/model/GraphObject.java
index c6684e698..4ba3d4890 100644
--- a/facebook/src/com/facebook/model/GraphObject.java
+++ b/facebook/src/com/facebook/model/GraphObject.java
@@ -374,11 +374,11 @@ public static boolean hasSameId(GraphObject a, GraphObject b) {
                 if (Double.class.isAssignableFrom(valueType) ||
                         Float.class.isAssignableFrom(valueType)) {
                     @SuppressWarnings("unchecked")
-                    U result = (U) String.format("%f", value);
+                    U result = (U) String.format(Locale.US,"%f", value);
                     return result;
                 } else if (Number.class.isAssignableFrom(valueType)) {
                     @SuppressWarnings("unchecked")
-                    U result = (U) String.format("%d", value);
+                    U result = (U) String.format(Locale.US,"%d", value);
                     return result;
                 }
             } else if (Date.class.equals(expectedType)) {
@@ -506,7 +506,7 @@ public GraphObjectProxy(JSONObject state, Class<?> graphObjectClass) {
 
             @Override
             public String toString() {
-                return String.format("GraphObject{graphObjectClass=%s, state=%s}", graphObjectClass.getSimpleName(), state);
+                return String.format(Locale.US,"GraphObject{graphObjectClass=%s, state=%s}", graphObjectClass.getSimpleName(), state);
             }
 
             @Override
@@ -717,7 +717,7 @@ public GraphObjectListImpl(JSONArray state, Class<?> itemType) {
 
             @Override
             public String toString() {
-                return String.format("GraphObjectList{itemType=%s, state=%s}", itemType.getSimpleName(), state);
+                return String.format(Locale.US,"GraphObjectList{itemType=%s, state=%s}", itemType.getSimpleName(), state);
             }
 
             @Override
diff --git a/facebook/src/com/facebook/widget/GraphObjectAdapter.java b/facebook/src/com/facebook/widget/GraphObjectAdapter.java
index 3686cb8b2..e4a7b72c8 100644
--- a/facebook/src/com/facebook/widget/GraphObjectAdapter.java
+++ b/facebook/src/com/facebook/widget/GraphObjectAdapter.java
@@ -244,7 +244,7 @@ protected String getSectionKeyOfGraphObject(T graphObject) {
         if (groupByField != null) {
             result = (String) graphObject.getProperty(groupByField);
             if (result != null && result.length() > 0) {
-                result = result.substring(0, 1).toUpperCase();
+                result = result.substring(0, 1).toUpperCase(Locale.US);
             }
         }
 
@@ -435,7 +435,7 @@ String getPictureFieldSpecifier() {
 
         // Note: these dimensions are in pixels, not dips
         ViewGroup.LayoutParams layoutParams = picture.getLayoutParams();
-        return String.format("picture.height(%d).width(%d)", layoutParams.height, layoutParams.width);
+        return String.format(Locale.US,"picture.height(%d).width(%d)", layoutParams.height, layoutParams.width);
     }
 
 
diff --git a/facebook/tests/src/com/facebook/AuthorizationClientTests.java b/facebook/tests/src/com/facebook/AuthorizationClientTests.java
index 0a96adf35..59ad632d3 100644
--- a/facebook/tests/src/com/facebook/AuthorizationClientTests.java
+++ b/facebook/tests/src/com/facebook/AuthorizationClientTests.java
@@ -80,7 +80,7 @@ void tryNextHandler() {
     public void testWebViewHandlesSuccess() {
         Bundle bundle = new Bundle();
         bundle.putString("access_token", ACCESS_TOKEN);
-        bundle.putString("expires_in", String.format("%d", EXPIRES_IN_DELTA));
+        bundle.putString("expires_in", String.format(Locale.US,"%d", EXPIRES_IN_DELTA));
         bundle.putString("code", "Something else");
 
         MockAuthorizationClient client = new MockAuthorizationClient();
diff --git a/facebook/tests/src/com/facebook/TestSessionTests.java b/facebook/tests/src/com/facebook/TestSessionTests.java
index 8c72f4567..ac1c2f275 100644
--- a/facebook/tests/src/com/facebook/TestSessionTests.java
+++ b/facebook/tests/src/com/facebook/TestSessionTests.java
@@ -137,7 +137,7 @@ private int countTestUsers() {
         String applicationId = session.getApplicationId();
         assertNotNull(applicationId);
 
-        String fqlQuery = String.format("SELECT id FROM test_account WHERE app_id = %s", applicationId);
+        String fqlQuery = String.format(Locale.US,"SELECT id FROM test_account WHERE app_id = %s", applicationId);
         Bundle parameters = new Bundle();
         parameters.putString("q", fqlQuery);
         parameters.putString("access_token", appAccessToken);
diff --git a/facebook/tests/src/com/facebook/model/GraphObjectFactoryTests.java b/facebook/tests/src/com/facebook/model/GraphObjectFactoryTests.java
index 801b1d5cb..4a1e5989b 100644
--- a/facebook/tests/src/com/facebook/model/GraphObjectFactoryTests.java
+++ b/facebook/tests/src/com/facebook/model/GraphObjectFactoryTests.java
@@ -1176,7 +1176,7 @@ public void testCollectionPutOfWrapperPutsJSONObject() throws JSONException {
     @SmallTest
     @MediumTest
     @LargeTest
-    public void testCamelCaseToLowercase() {
+    public void testCamelCasetoLowerCase(Locale.US) {
         assertEquals("hello_world", GraphObject.Factory
                 .convertCamelCaseToLowercaseWithUnderscores("HelloWorld"));
         assertEquals("hello_world", GraphObject.Factory
