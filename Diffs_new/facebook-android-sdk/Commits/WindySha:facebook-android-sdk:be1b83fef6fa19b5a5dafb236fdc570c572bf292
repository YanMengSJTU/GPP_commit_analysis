diff --git a/facebook/src/test/java/com/facebook/GraphRequestTest.java b/facebook/src/test/java/com/facebook/GraphRequestTest.java
index 30643c089..0165abc1f 100644
--- a/facebook/src/test/java/com/facebook/GraphRequestTest.java
+++ b/facebook/src/test/java/com/facebook/GraphRequestTest.java
@@ -212,19 +212,16 @@ public void testSetHttpMethodToNilGivesDefault() {
     }
 
     @Test
-    public void testExecuteBatchWithInvalidRequestsThrows() {
+    public void testExecuteBatchWithNullRequestsThrows() {
         try {
             GraphRequest.executeBatchAndWait((GraphRequest[]) null);
             fail("expected NullPointerException");
         } catch (NullPointerException exception) {
         }
+    }
 
-        try {
-            GraphRequest.executeBatchAndWait(new GraphRequest[]{null});
-            fail("expected NullPointerException");
-        } catch (NullPointerException exception) {
-        }
-
+    @Test
+    public void testExecuteBatchWithZeroRequestsThrows() {
         try {
             GraphRequest.executeBatchAndWait(new GraphRequest[]{});
             fail("expected IllegalArgumentException");
@@ -233,21 +230,39 @@ public void testExecuteBatchWithInvalidRequestsThrows() {
     }
 
     @Test
-    public void testToHttpConnectionWithInvalidRequestsThrows() {
+    public void testExecuteBatchWithNullRequestThrows() {
         try {
-            GraphRequest.toHttpConnection((GraphRequest[]) null);
+            GraphRequest.executeBatchAndWait(new GraphRequest[]{null});
             fail("expected NullPointerException");
-        } catch (NullPointerException exception) { }
+        } catch (NullPointerException exception) {
+        }
+    }
 
+    @Test
+    public void testToHttpConnectionWithNullRequestsThrows() {
         try {
-            GraphRequest.toHttpConnection(new GraphRequest[]{null});
+            GraphRequest.toHttpConnection((GraphRequest[]) null);
             fail("expected NullPointerException");
-        } catch (NullPointerException exception) { }
+        } catch (NullPointerException exception) {
+        }
+    }
 
+    @Test
+    public void testToHttpConnectionWithZeroRequestsThrows() {
         try {
             GraphRequest.toHttpConnection(new GraphRequest[]{});
             fail("expected IllegalArgumentException");
-        } catch (IllegalArgumentException exception) { }
+        } catch (IllegalArgumentException exception) {
+        }
+    }
+
+    @Test
+    public void testToHttpConnectionWithNullRequestThrows() {
+        try {
+            GraphRequest.toHttpConnection(new GraphRequest[]{null});
+            fail("expected NullPointerException");
+        } catch (NullPointerException exception) {
+        }
     }
 
     @Test
diff --git a/facebook/src/test/java/com/facebook/appevents/AutomaticAnalyticsTest.java b/facebook/src/test/java/com/facebook/appevents/AutomaticAnalyticsTest.java
index d324418d8..398f49d14 100644
--- a/facebook/src/test/java/com/facebook/appevents/AutomaticAnalyticsTest.java
+++ b/facebook/src/test/java/com/facebook/appevents/AutomaticAnalyticsTest.java
@@ -21,20 +21,23 @@
 package com.facebook.appevents;
 
 import android.app.Activity;
+import android.os.Bundle;
 
 import com.facebook.FacebookPowerMockTestCase;
 import com.facebook.FacebookSdk;
+import com.facebook.GraphRequest;
 import com.facebook.appevents.internal.ActivityLifecycleTracker;
+import com.facebook.internal.FetchedAppGateKeepersManager;
 import com.facebook.internal.FetchedAppSettingsManager;
 import com.facebook.internal.FetchedAppSettings;
 
 import org.json.JSONObject;
-import static org.junit.Assert.assertEquals;
-import static org.powermock.api.support.membermodification.MemberMatcher.method;
-import static org.powermock.api.support.membermodification.MemberModifier.stub;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 import org.junit.Test;
 import org.mockito.Matchers;
+import org.mockito.Mockito;
 import org.powermock.api.mockito.PowerMockito;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.reflect.Whitebox;
@@ -44,8 +47,15 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
 
-@PrepareForTest({ ActivityLifecycleTracker.class, FacebookSdk.class, FetchedAppSettingsManager.class,
-        Executors.class})
+@PrepareForTest({
+        AppEventQueue.class,
+        ActivityLifecycleTracker.class,
+        FacebookSdk.class,
+        FetchedAppSettingsManager.class,
+        FetchedAppGateKeepersManager.class,
+        Executors.class,
+        GraphRequest.class,
+})
 public class AutomaticAnalyticsTest extends FacebookPowerMockTestCase {
 
     @Test
@@ -54,38 +64,37 @@ public void testAutomaticLoggingEnabledServerConfiguration() throws Exception {
         settingsJSON.put("app_events_feature_bitmask", "0");
         FetchedAppSettings settings = Whitebox.invokeMethod(
                 FetchedAppSettingsManager.class, "parseAppSettingsFromJSON", "123", settingsJSON);
-        assertEquals(settings.getAutomaticLoggingEnabled(),false);
+        assertFalse(settings.getAutomaticLoggingEnabled());
 
         settingsJSON.put("app_events_feature_bitmask", "7");
         settings = Whitebox.invokeMethod(
                 FetchedAppSettingsManager.class, "parseAppSettingsFromJSON", "123", settingsJSON);
-        assertEquals(settings.getAutomaticLoggingEnabled(),false);
+        assertFalse(settings.getAutomaticLoggingEnabled());
 
         settingsJSON.put("app_events_feature_bitmask", "23");
         settings = Whitebox.invokeMethod(
                 FetchedAppSettingsManager.class, "parseAppSettingsFromJSON", "123", settingsJSON);
-        assertEquals(settings.getAutomaticLoggingEnabled(),false);
+        assertFalse(settings.getAutomaticLoggingEnabled());
 
         settingsJSON.put("app_events_feature_bitmask", "8");
         settings = Whitebox.invokeMethod(
                 FetchedAppSettingsManager.class, "parseAppSettingsFromJSON", "123", settingsJSON);
-        assertEquals(settings.getAutomaticLoggingEnabled(),true);
+        assertTrue(settings.getAutomaticLoggingEnabled());
 
         settingsJSON.put("app_events_feature_bitmask", "9");
         settings = Whitebox.invokeMethod(
                 FetchedAppSettingsManager.class, "parseAppSettingsFromJSON", "123", settingsJSON);
-        assertEquals(settings.getAutomaticLoggingEnabled(),true);
+        assertTrue(settings.getAutomaticLoggingEnabled());
 
         JSONObject noBitmaskFieldSettings = new JSONObject();
         settings = Whitebox.invokeMethod(
                 FetchedAppSettingsManager.class, "parseAppSettingsFromJSON", "123", noBitmaskFieldSettings);
-        assertEquals(settings.getAutomaticLoggingEnabled(),false);
+        assertFalse(settings.getAutomaticLoggingEnabled());
     }
 
     @Test
     public void testAutoTrackingWhenInitialized() throws Exception {
-        stub(method(FetchedAppSettingsManager.class, "loadAppSettingsAsync")).toReturn(null);
-
+        PowerMockito.mockStatic(FetchedAppSettingsManager.class);
         ScheduledExecutorService mockExecutor = new FacebookPowerMockTestCase.FacebookSerialThreadPoolExecutor(1);
         PowerMockito.spy(Executors.class);
         PowerMockito.when(Executors.newSingleThreadExecutor()).thenReturn(mockExecutor);
@@ -97,10 +106,37 @@ public void testAutoTrackingWhenInitialized() throws Exception {
         Activity activity =
                 Robolectric.buildActivity(Activity.class).create().start().resume().visible().get();
 
-        PowerMockito.doCallRealMethod().when(ActivityLifecycleTracker.class, "onActivityCreated",
-                Matchers.any(Activity.class));
         PowerMockito.doCallRealMethod().when(ActivityLifecycleTracker.class, "onActivityResumed",
-                Matchers.any(Activity.class));
+                activity);
+    }
+
+    @Test
+    public void testLogAndSendAppEvent() throws Exception {
+        Whitebox.setInternalState(FacebookSdk.class, "sdkInitialized", true);
+        Whitebox.setInternalState(FacebookSdk.class, "applicationId", "1234");
+        Whitebox.setInternalState(
+                FacebookSdk.class, "applicationContext", RuntimeEnvironment.application);
+        // Disable Kill Switch
+        PowerMockito.mockStatic(FetchedAppGateKeepersManager.class);
+        PowerMockito.when(FetchedAppGateKeepersManager.getGateKeeperForKey(
+                Matchers.eq(FetchedAppGateKeepersManager.APP_EVENTS_KILLSWITCH),
+                Matchers.anyString(), Matchers.anyBoolean())).thenReturn(false);
+        // Mock App Settings to avoid App Setting request
+        PowerMockito.mockStatic(FetchedAppSettingsManager.class);
+        // Mock graph request
+        GraphRequest mockRequest = PowerMockito.mock(GraphRequest.class);
+        PowerMockito.whenNew(GraphRequest.class).withAnyArguments().thenReturn(mockRequest);
+        PowerMockito.spy(AppEventQueue.class);
+        PowerMockito.doReturn(mockRequest).when(AppEventQueue.class, "buildRequestForSession",
+                Matchers.any(), Matchers.any(), Matchers.anyBoolean(), Matchers.any());
+
+        AppEventsLoggerImpl loggerImpl = new AppEventsLoggerImpl(RuntimeEnvironment.application,
+                "1234", null);
+        loggerImpl.logEvent("fb_mock_event", 1.0, new Bundle(), true, null);
+        loggerImpl.flush();
+        Thread.sleep(200);
+
+        Mockito.verify(mockRequest).executeAndWait();
     }
 
 }
