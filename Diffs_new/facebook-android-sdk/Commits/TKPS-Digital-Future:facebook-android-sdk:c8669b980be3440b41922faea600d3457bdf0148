diff --git a/NOTICE.txt b/NOTICE.txt
index 8a7b5c546..d9493d5bc 100644
--- a/NOTICE.txt
+++ b/NOTICE.txt
@@ -1,61 +1,61 @@
-THE FOLLOWING SETS FORTH ATTRIBUTION NOTICES FOR THIRD PARTY SOFTWARE THAT MAY BE CONTAINED IN PORTIONS OF THE FACEBOOK PRODUCT.
-
------
-
-The following software may be included in this product: Android. This software contains the following license and notice below:
-
-Apache License
-Version 2.0, January 2004
-http://www.apache.org/licenses/
-
-TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
-
-1. Definitions.
-
-"License" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.
-
-"Licensor" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.
-
-"Legal Entity" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, "control" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.
-
-"You" (or "Your") shall mean an individual or Legal Entity exercising permissions granted by this License.
-
-"Source" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.
-
-"Object" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.
-
-"Work" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).
-
-"Derivative Works" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.
-
-"Contribution" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, "submitted" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as "Not a Contribution."
-
-"Contributor" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.
-
-2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.
-
-3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.
-
-4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:
-
-(a) You must give any other recipients of the Work or Derivative Works a copy of this License; and
-
-(b) You must cause any modified files to carry prominent notices stating that You changed the files; and
-
-(c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and
-
-(d) If the Work includes a "NOTICE" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.
-
-You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.
-
-5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.
-
-6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.
-
-7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.
-
-8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.
-
-9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.
-
-END OF TERMS AND CONDITIONS
+THE FOLLOWING SETS FORTH ATTRIBUTION NOTICES FOR THIRD PARTY SOFTWARE THAT MAY BE CONTAINED IN PORTIONS OF THE FACEBOOK PRODUCT.
+
+-----
+
+The following software may be included in this product: Android. This software contains the following license and notice below:
+
+Apache License
+Version 2.0, January 2004
+http://www.apache.org/licenses/
+
+TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+1. Definitions.
+
+"License" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.
+
+"Licensor" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.
+
+"Legal Entity" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, "control" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.
+
+"You" (or "Your") shall mean an individual or Legal Entity exercising permissions granted by this License.
+
+"Source" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.
+
+"Object" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.
+
+"Work" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).
+
+"Derivative Works" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.
+
+"Contribution" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, "submitted" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as "Not a Contribution."
+
+"Contributor" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.
+
+2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.
+
+3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.
+
+4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:
+
+(a) You must give any other recipients of the Work or Derivative Works a copy of this License; and
+
+(b) You must cause any modified files to carry prominent notices stating that You changed the files; and
+
+(c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and
+
+(d) If the Work includes a "NOTICE" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.
+
+You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.
+
+5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.
+
+6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.
+
+7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.
+
+8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.
+
+9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.
+
+END OF TERMS AND CONDITIONS
diff --git a/facebook/.classpath b/facebook/.classpath
index c5c5afd01..b32c66a10 100644
--- a/facebook/.classpath
+++ b/facebook/.classpath
@@ -1,9 +1,17 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
-	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="src" output="bin/classes" path="src">
+		<attributes>
+			<attribute name="maven.pomderived" value="true"/>
+		</attributes>
+	</classpathentry>
 	<classpathentry kind="src" path="gen"/>
+	<classpathentry exported="true" kind="con" path="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER">
+		<attributes>
+			<attribute name="maven.pomderived" value="true"/>
+		</attributes>
+	</classpathentry>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry kind="lib" path="libs/android-support-v4.jar"/>
+	<classpathentry kind="lib" path="C:/Program Files (x86)/Android/android-sdk/extras/android/support/v4/android-support-v4.jar"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/facebook/.project b/facebook/.project
index d0551a112..f97466549 100644
--- a/facebook/.project
+++ b/facebook/.project
@@ -25,8 +25,14 @@
 			<arguments>
 			</arguments>
 		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.m2e.core.maven2Builder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
 	</buildSpec>
 	<natures>
+		<nature>org.eclipse.m2e.core.maven2Nature</nature>
 		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
 		<nature>org.eclipse.jdt.core.javanature</nature>
 	</natures>
diff --git a/facebook/TestApp/AndroidManifest.xml b/facebook/TestApp/AndroidManifest.xml
deleted file mode 100644
index cccc2923d..000000000
--- a/facebook/TestApp/AndroidManifest.xml
+++ /dev/null
@@ -1,15 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-      package="com.facebook.sdk"
-      android:versionCode="1"
-      android:versionName="1.0">
-    <application android:label="@string/app_name" android:icon="@drawable/ic_launcher">
-        <activity android:name="StatusActivity"
-                  android:label="@string/app_name">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-    </application>
-</manifest>
diff --git a/facebook/TestApp/SdkTestApp.eml b/facebook/TestApp/SdkTestApp.eml
deleted file mode 100644
index 4104d1ffc..000000000
--- a/facebook/TestApp/SdkTestApp.eml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<component>
-	<exclude-output/>
-	<contentEntry url="file://$MODULE_DIR$"/>
-</component>
diff --git a/facebook/TestApp/SdkTestApp.iml b/facebook/TestApp/SdkTestApp.iml
deleted file mode 100644
index 1e6d309b6..000000000
--- a/facebook/TestApp/SdkTestApp.iml
+++ /dev/null
@@ -1,53 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="EclipseModuleManager">
-    <conelement value="com.android.ide.eclipse.adt.LIBRARIES" />
-    <src_description expected_position="0">
-      <src_folder value="file://$MODULE_DIR$/src" expected_position="0" />
-      <src_folder value="file://$MODULE_DIR$/gen" expected_position="1" />
-    </src_description>
-  </component>
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="GEN_FOLDER_RELATIVE_PATH_APT" value="/gen" />
-        <option name="GEN_FOLDER_RELATIVE_PATH_AIDL" value="/gen" />
-        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/AndroidManifest.xml" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/res" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/assets" />
-        <option name="LIBS_FOLDER_RELATIVE_PATH" value="/libs" />
-        <option name="REGENERATE_R_JAVA" value="true" />
-        <option name="REGENERATE_JAVA_BY_AIDL" value="true" />
-        <option name="USE_CUSTOM_APK_RESOURCE_FOLDER" value="false" />
-        <option name="CUSTOM_APK_RESOURCE_FOLDER" value="" />
-        <option name="USE_CUSTOM_COMPILER_MANIFEST" value="false" />
-        <option name="CUSTOM_COMPILER_MANIFEST" value="" />
-        <option name="APK_PATH" value="" />
-        <option name="LIBRARY_PROJECT" value="false" />
-        <option name="RUN_PROCESS_RESOURCES_MAVEN_TASK" value="true" />
-        <option name="GENERATE_UNSIGNED_APK" value="false" />
-        <option name="CUSTOM_DEBUG_KEYSTORE_PATH" value="" />
-        <option name="PACK_TEST_CODE" value="true" />
-        <option name="RUN_PROGUARD" value="false" />
-        <option name="PROGUARD_CFG_PATH" value="/proguard-project.txt" />
-        <resOverlayFolders>
-          <path>/res-overlay</path>
-        </resOverlayFolders>
-        <includeSystemProguardFile>true</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <additionalNativeLibs />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/bin/classes" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-  </component>
-</module>
-
diff --git a/facebook/TestApp/ant.properties b/facebook/TestApp/ant.properties
deleted file mode 100644
index b0971e891..000000000
--- a/facebook/TestApp/ant.properties
+++ /dev/null
@@ -1,17 +0,0 @@
-# This file is used to override default values used by the Ant build system.
-#
-# This file must be checked into Version Control Systems, as it is
-# integral to the build system of your project.
-
-# This file is only used by the Ant script.
-
-# You can use this to override default values such as
-#  'source.dir' for the location of your java source folder and
-#  'out.dir' for the location of your output folder.
-
-# You can also use it define how the release builds are signed by declaring
-# the following properties:
-#  'key.store' for the location of your keystore and
-#  'key.alias' for the name of the key to use.
-# The password will be asked during the build when you use the 'release' target.
-
diff --git a/facebook/TestApp/build.xml b/facebook/TestApp/build.xml
deleted file mode 100644
index ea49a3fca..000000000
--- a/facebook/TestApp/build.xml
+++ /dev/null
@@ -1,83 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="FacebookSdk" default="help">
-
-    <!-- The local.properties file is created and updated by the 'android' tool.
-         It contains the path to the SDK. It should *NOT* be checked into
-         Version Control Systems. -->
-    <property file="local.properties" />
-
-    <!-- The ant.properties file can be created by you. It is only edited by the
-         'android' tool to add properties to it.
-         This is the place to change some Ant specific build properties.
-         Here are some properties you may want to change/update:
-
-         source.dir
-             The name of the source directory. Default is 'src'.
-         out.dir
-             The name of the output directory. Default is 'bin'.
-
-         For other overridable properties, look at the beginning of the rules
-         files in the SDK, at tools/ant/build.xml
-
-         Properties related to the SDK location or the project target should
-         be updated using the 'android' tool with the 'update' action.
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems.
-
-         -->
-    <property file="ant.properties" />
-
-    <!-- The project.properties file is created and updated by the 'android'
-         tool, as well as ADT.
-
-         This contains project specific properties such as project target, and library
-         dependencies. Lower level build properties are stored in ant.properties
-         (or in .classpath for Eclipse projects).
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems. -->
-    <loadproperties srcFile="project.properties" />
-
-    <!-- quick check on sdk.dir -->
-    <fail
-            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through an env var"
-            unless="sdk.dir"
-    />
-
-    <!--
-        Import per project custom build rules if present at the root of the project.
-        This is the place to put custom intermediary targets such as:
-            -pre-build
-            -pre-compile
-            -post-compile (This is typically used for code obfuscation.
-                           Compiled code location: ${out.classes.absolute.dir}
-                           If this is not done in place, override ${out.dex.input.absolute.dir})
-            -post-package
-            -post-build
-            -pre-clean
-    -->
-    <import file="custom_rules.xml" optional="true" />
-
-    <!-- Import the actual build file.
-
-         To customize existing targets, there are two options:
-         - Customize only one target:
-             - copy/paste the target into this file, *before* the
-               <import> task.
-             - customize it to your needs.
-         - Customize the whole content of build.xml
-             - copy/paste the content of the rules files (minus the top node)
-               into this file, replacing the <import> task.
-             - customize to your needs.
-
-         ***********************
-         ****** IMPORTANT ******
-         ***********************
-         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
-         in order to avoid having your file be overridden by tools such as "android update project"
-    -->
-    <!-- version-tag: 1 -->
-    <import file="${sdk.dir}/tools/ant/build.xml" />
-
-</project>
diff --git a/facebook/TestApp/proguard-project.txt b/facebook/TestApp/proguard-project.txt
deleted file mode 100644
index f2fe1559a..000000000
--- a/facebook/TestApp/proguard-project.txt
+++ /dev/null
@@ -1,20 +0,0 @@
-# To enable ProGuard in your project, edit project.properties
-# to define the proguard.config property as described in that file.
-#
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in ${sdk.dir}/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the ProGuard
-# include property in project.properties.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/facebook/TestApp/project.properties b/facebook/TestApp/project.properties
deleted file mode 100644
index b0620672e..000000000
--- a/facebook/TestApp/project.properties
+++ /dev/null
@@ -1,15 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-8
-
diff --git a/facebook/TestApp/res/drawable-hdpi/ic_launcher.png b/facebook/TestApp/res/drawable-hdpi/ic_launcher.png
deleted file mode 100644
index 8074c4c57..000000000
Binary files a/facebook/TestApp/res/drawable-hdpi/ic_launcher.png and /dev/null differ
diff --git a/facebook/TestApp/res/drawable-ldpi/ic_launcher.png b/facebook/TestApp/res/drawable-ldpi/ic_launcher.png
deleted file mode 100644
index 1095584ec..000000000
Binary files a/facebook/TestApp/res/drawable-ldpi/ic_launcher.png and /dev/null differ
diff --git a/facebook/TestApp/res/drawable-mdpi/ic_launcher.png b/facebook/TestApp/res/drawable-mdpi/ic_launcher.png
deleted file mode 100644
index a07c69fa5..000000000
Binary files a/facebook/TestApp/res/drawable-mdpi/ic_launcher.png and /dev/null differ
diff --git a/facebook/TestApp/res/layout/main.xml b/facebook/TestApp/res/layout/main.xml
deleted file mode 100644
index da713e268..000000000
--- a/facebook/TestApp/res/layout/main.xml
+++ /dev/null
@@ -1,29 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2012 Facebook
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    >
-<TextView
-    android:layout_width="match_parent"
-    android:layout_height="wrap_content"
-    android:text="SDK Unit Tests"
-    />
-</LinearLayout>
-
diff --git a/facebook/TestApp/res/values/strings.xml b/facebook/TestApp/res/values/strings.xml
deleted file mode 100644
index b2e26a0c0..000000000
--- a/facebook/TestApp/res/values/strings.xml
+++ /dev/null
@@ -1,20 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2012 Facebook
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-    <string name="app_name">StatusActivity</string>
-</resources>
diff --git a/facebook/TestApp/src/com/facebook/sdk/StatusActivity.java b/facebook/TestApp/src/com/facebook/sdk/StatusActivity.java
deleted file mode 100644
index d0930d9ad..000000000
--- a/facebook/TestApp/src/com/facebook/sdk/StatusActivity.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/**
- * Copyright 2012 Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.sdk;
-
-import android.app.Activity;
-import android.os.Bundle;
-
-public class StatusActivity extends Activity
-{
-    /** Called when the activity is first created. */
-    @Override
-    public void onCreate(Bundle savedInstanceState)
-    {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.main);
-    }
-}
diff --git a/facebook/android-sdk.eml b/facebook/android-sdk.eml
deleted file mode 100644
index 4104d1ffc..000000000
--- a/facebook/android-sdk.eml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<component>
-	<exclude-output/>
-	<contentEntry url="file://$MODULE_DIR$"/>
-</component>
diff --git a/facebook/android-sdk.iml b/facebook/android-sdk.iml
deleted file mode 100644
index 52b1b195c..000000000
--- a/facebook/android-sdk.iml
+++ /dev/null
@@ -1,55 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="EclipseModuleManager">
-    <conelement value="com.android.ide.eclipse.adt.LIBRARIES" />
-    <src_description expected_position="0">
-      <src_folder value="file://$MODULE_DIR$/src" expected_position="0" />
-      <src_folder value="file://$MODULE_DIR$/gen" expected_position="1" />
-    </src_description>
-  </component>
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="GEN_FOLDER_RELATIVE_PATH_APT" value="/gen" />
-        <option name="GEN_FOLDER_RELATIVE_PATH_AIDL" value="/gen" />
-        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/AndroidManifest.xml" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/res" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/assets" />
-        <option name="LIBS_FOLDER_RELATIVE_PATH" value="/libs" />
-        <option name="REGENERATE_R_JAVA" value="true" />
-        <option name="REGENERATE_JAVA_BY_AIDL" value="true" />
-        <option name="USE_CUSTOM_APK_RESOURCE_FOLDER" value="false" />
-        <option name="CUSTOM_APK_RESOURCE_FOLDER" value="" />
-        <option name="USE_CUSTOM_COMPILER_MANIFEST" value="false" />
-        <option name="CUSTOM_COMPILER_MANIFEST" value="" />
-        <option name="APK_PATH" value="" />
-        <option name="LIBRARY_PROJECT" value="true" />
-        <option name="RUN_PROCESS_RESOURCES_MAVEN_TASK" value="true" />
-        <option name="GENERATE_UNSIGNED_APK" value="false" />
-        <option name="CUSTOM_DEBUG_KEYSTORE_PATH" value="" />
-        <option name="PACK_TEST_CODE" value="false" />
-        <option name="RUN_PROGUARD" value="false" />
-        <option name="PROGUARD_CFG_PATH" value="/proguard-project.txt" />
-        <resOverlayFolders>
-          <path>/res-overlay</path>
-        </resOverlayFolders>
-        <includeSystemProguardFile>true</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <additionalNativeLibs />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/bin/classes" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/res" isTestSource="false" />
-    </content>
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/facebook/ant.properties b/facebook/ant.properties
deleted file mode 100644
index b206ddecc..000000000
--- a/facebook/ant.properties
+++ /dev/null
@@ -1,2 +0,0 @@
-jar.libs.dir=../lib
-java.compilerargs=-Xlint -Werror
\ No newline at end of file
diff --git a/facebook/build.xml b/facebook/build.xml
deleted file mode 100644
index d85ad3e64..000000000
--- a/facebook/build.xml
+++ /dev/null
@@ -1,83 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="facebook" default="help">
-
-    <!-- The local.properties file is created and updated by the 'android' tool.
-         It contains the path to the SDK. It should *NOT* be checked into
-         Version Control Systems. -->
-    <property file="local.properties" />
-
-    <!-- The ant.properties file can be created by you. It is only edited by the
-         'android' tool to add properties to it.
-         This is the place to change some Ant specific build properties.
-         Here are some properties you may want to change/update:
-
-         source.dir
-             The name of the source directory. Default is 'src'.
-         out.dir
-             The name of the output directory. Default is 'bin'.
-
-         For other overridable properties, look at the beginning of the rules
-         files in the SDK, at tools/ant/build.xml
-
-         Properties related to the SDK location or the project target should
-         be updated using the 'android' tool with the 'update' action.
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems.
-
-         -->
-    <property file="ant.properties" />
-
-    <!-- The project.properties file is created and updated by the 'android'
-         tool, as well as ADT.
-
-         This contains project specific properties such as project target, and library
-         dependencies. Lower level build properties are stored in ant.properties
-         (or in .classpath for Eclipse projects).
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems. -->
-    <loadproperties srcFile="project.properties" />
-
-    <!-- quick check on sdk.dir -->
-    <fail
-            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through an env var"
-            unless="sdk.dir"
-    />
-
-    <!--
-        Import per project custom build rules if present at the root of the project.
-        This is the place to put custom intermediary targets such as:
-            -pre-build
-            -pre-compile
-            -post-compile (This is typically used for code obfuscation.
-                           Compiled code location: ${out.classes.absolute.dir}
-                           If this is not done in place, override ${out.dex.input.absolute.dir})
-            -post-package
-            -post-build
-            -pre-clean
-    -->
-    <import file="custom_rules.xml" optional="true" />
-
-    <!-- Import the actual build file.
-
-         To customize existing targets, there are two options:
-         - Customize only one target:
-             - copy/paste the target into this file, *before* the
-               <import> task.
-             - customize it to your needs.
-         - Customize the whole content of build.xml
-             - copy/paste the content of the rules files (minus the top node)
-               into this file, replacing the <import> task.
-             - customize to your needs.
-
-         ***********************
-         ****** IMPORTANT ******
-         ***********************
-         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
-         in order to avoid having your file be overridden by tools such as "android update project"
-    -->
-    <!-- version-tag: 1 -->
-    <import file="${sdk.dir}/tools/ant/build.xml" />
-
-</project>
diff --git a/facebook/libs b/facebook/libs
deleted file mode 120000
index d4bda9b46..000000000
--- a/facebook/libs
+++ /dev/null
@@ -1 +0,0 @@
-../libs
\ No newline at end of file
diff --git a/facebook/pom.xml b/facebook/pom.xml
new file mode 100644
index 000000000..b5d0d8c40
--- /dev/null
+++ b/facebook/pom.xml
@@ -0,0 +1,65 @@
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+	<groupId>tv.px.android</groupId>
+	<artifactId>facebook-android-sdk</artifactId>
+	<version>3.0.2.b-SNAPSHOT</version>
+	<packaging>apklib</packaging>
+
+	<dependencies>
+        <dependency>
+            <groupId>com.google.android</groupId>
+            <artifactId>android</artifactId>
+            <version>4.1.1.4</version>
+        </dependency>
+        <dependency>
+            <groupId>com.google.android</groupId>
+            <artifactId>support-v4</artifactId>
+            <version>r7</version>
+        </dependency>
+    </dependencies>
+	
+	<build>
+		<sourceDirectory>src</sourceDirectory>
+		<plugins>
+			<plugin>
+				<artifactId>maven-compiler-plugin</artifactId>
+				<version>2.3.2</version>
+				<configuration>
+					<source />
+					<target />
+				</configuration>
+			</plugin>
+			<plugin>
+				<groupId>com.jayway.maven.plugins.android.generation2</groupId>
+				<artifactId>android-maven-plugin</artifactId>
+				<extensions>true</extensions>
+				<configuration>
+					<nativeLibrariesDirectory>ignored</nativeLibrariesDirectory>
+				</configuration>
+			</plugin>
+			
+			<plugin>
+                <groupId>org.codehaus.mojo</groupId>
+                <artifactId>build-helper-maven-plugin</artifactId>
+                <version>1.7</version>
+                <executions>
+                    <execution>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>attach-artifact</goal>
+                        </goals>
+                        <configuration>
+                            <artifacts>
+                                <artifact>
+                                    <type>jar</type>
+                                    <file>${project.build.directory}/${project.build.finalName}.jar</file>
+                                </artifact>
+                            </artifacts>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+		</plugins>
+	</build>
+</project>
\ No newline at end of file
diff --git a/facebook/project.properties b/facebook/project.properties
index cd0ca122a..b2ed0b007 100644
--- a/facebook/project.properties
+++ b/facebook/project.properties
@@ -12,4 +12,4 @@
 
 android.library=true
 # Project target.
-target=android-8
+target=android-16
diff --git a/facebook/target/facebook-android-sdk-3.0.2.b-SNAPSHOT.ap_ b/facebook/target/facebook-android-sdk-3.0.2.b-SNAPSHOT.ap_
new file mode 100644
index 000000000..2cabefbf5
Binary files /dev/null and b/facebook/target/facebook-android-sdk-3.0.2.b-SNAPSHOT.ap_ differ
diff --git a/facebook/target/facebook-android-sdk-3.0.2.b-SNAPSHOT.apklib b/facebook/target/facebook-android-sdk-3.0.2.b-SNAPSHOT.apklib
new file mode 100644
index 000000000..740c4965e
Binary files /dev/null and b/facebook/target/facebook-android-sdk-3.0.2.b-SNAPSHOT.apklib differ
diff --git a/facebook/target/facebook-android-sdk-3.0.2.b-SNAPSHOT.jar b/facebook/target/facebook-android-sdk-3.0.2.b-SNAPSHOT.jar
new file mode 100644
index 000000000..3a3bbe44f
Binary files /dev/null and b/facebook/target/facebook-android-sdk-3.0.2.b-SNAPSHOT.jar differ
diff --git a/facebook/target/generated-sources/r/com/facebook/android/BuildConfig.java b/facebook/target/generated-sources/r/com/facebook/android/BuildConfig.java
new file mode 100644
index 000000000..2e422f60a
--- /dev/null
+++ b/facebook/target/generated-sources/r/com/facebook/android/BuildConfig.java
@@ -0,0 +1,5 @@
+package com.facebook.android;
+
+public final class BuildConfig {
+  public static final boolean DEBUG = true;
+}
diff --git a/facebook/target/generated-sources/r/com/facebook/android/R.java b/facebook/target/generated-sources/r/com/facebook/android/R.java
new file mode 100644
index 000000000..a6aceb027
--- /dev/null
+++ b/facebook/target/generated-sources/r/com/facebook/android/R.java
@@ -0,0 +1,612 @@
+/* AUTO-GENERATED FILE.  DO NOT MODIFY.
+ *
+ * This class was automatically generated by the
+ * aapt tool from the resource data it found.  It
+ * should not be modified by hand.
+ */
+
+package com.facebook.android;
+
+public final class R {
+    public static final class attr {
+        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static final int confirm_logout=0x7f01000c;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static final int done_button_background=0x7f010006;
+        /** <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static final int done_button_text=0x7f010004;
+        /** <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static final int extra_fields=0x7f010001;
+        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static final int fetch_user_info=0x7f01000d;
+        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static final int is_cropped=0x7f010011;
+        /** <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static final int login_text=0x7f01000e;
+        /** <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static final int logout_text=0x7f01000f;
+        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static final int multi_select=0x7f010007;
+        /** <p>Must be one of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>small</code></td><td>-2</td><td> Keep in sync with constants in ProfilePictureView </td></tr>
+<tr><td><code>normal</code></td><td>-3</td><td></td></tr>
+<tr><td><code>large</code></td><td>-4</td><td></td></tr>
+</table>
+         */
+        public static final int preset_size=0x7f010010;
+        /** <p>Must be an integer value, such as "<code>100</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static final int radius_in_meters=0x7f010008;
+        /** <p>Must be an integer value, such as "<code>100</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static final int results_limit=0x7f010009;
+        /** <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static final int search_text=0x7f01000a;
+        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static final int show_pictures=0x7f010000;
+        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static final int show_search_box=0x7f01000b;
+        /** <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static final int show_title_bar=0x7f010002;
+        /** <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+         */
+        public static final int title_bar_background=0x7f010005;
+        /** <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+         */
+        public static final int title_text=0x7f010003;
+    }
+    public static final class color {
+        public static final int com_facebook_blue=0x7f060000;
+        public static final int com_facebook_loginfragment_connected_shadow_color=0x7f060002;
+        public static final int com_facebook_loginfragment_connected_text_color=0x7f060001;
+        public static final int com_facebook_loginfragment_not_connected_text_color=0x7f060003;
+        public static final int com_facebook_loginview_text_color=0x7f060004;
+    }
+    public static final class dimen {
+        public static final int com_facebook_loginfragment_profile_picture_height=0x7f070001;
+        public static final int com_facebook_loginfragment_profile_picture_width=0x7f070000;
+        public static final int com_facebook_loginview_height=0x7f070007;
+        public static final int com_facebook_loginview_padding_bottom=0x7f070005;
+        public static final int com_facebook_loginview_padding_left=0x7f070002;
+        public static final int com_facebook_loginview_padding_right=0x7f070003;
+        public static final int com_facebook_loginview_padding_top=0x7f070004;
+        public static final int com_facebook_loginview_text_size=0x7f070008;
+        public static final int com_facebook_loginview_width=0x7f070006;
+        public static final int com_facebook_profilepictureview_preset_size_large=0x7f07000b;
+        public static final int com_facebook_profilepictureview_preset_size_normal=0x7f07000a;
+        public static final int com_facebook_profilepictureview_preset_size_small=0x7f070009;
+    }
+    public static final class drawable {
+        public static final int com_facebook_button_check=0x7f020000;
+        public static final int com_facebook_button_check_off=0x7f020001;
+        public static final int com_facebook_button_check_on=0x7f020002;
+        public static final int com_facebook_button_grey_focused=0x7f020003;
+        public static final int com_facebook_button_grey_normal=0x7f020004;
+        public static final int com_facebook_button_grey_pressed=0x7f020005;
+        public static final int com_facebook_close=0x7f020006;
+        public static final int com_facebook_icon=0x7f020007;
+        public static final int com_facebook_list_divider=0x7f020008;
+        public static final int com_facebook_list_section_header_background=0x7f020009;
+        public static final int com_facebook_loginbutton_blue=0x7f02000a;
+        public static final int com_facebook_loginbutton_blue_focused=0x7f02000b;
+        public static final int com_facebook_loginbutton_blue_normal=0x7f02000c;
+        public static final int com_facebook_loginbutton_blue_pressed=0x7f02000d;
+        public static final int com_facebook_loginbutton_silver=0x7f02000e;
+        public static final int com_facebook_loginfragment_background_gradient=0x7f02000f;
+        public static final int com_facebook_logo=0x7f020010;
+        public static final int com_facebook_picker_item_background=0x7f020011;
+        public static final int com_facebook_picker_list_focused=0x7f020012;
+        public static final int com_facebook_picker_list_longpressed=0x7f020013;
+        public static final int com_facebook_picker_list_pressed=0x7f020014;
+        public static final int com_facebook_picker_list_selector=0x7f020015;
+        public static final int com_facebook_picker_list_selector_background_transition=0x7f020016;
+        public static final int com_facebook_picker_list_selector_disabled=0x7f020017;
+        public static final int com_facebook_picker_top_button=0x7f020018;
+        public static final int com_facebook_place_default_icon=0x7f020019;
+        public static final int com_facebook_profile_default_icon=0x7f02001a;
+        public static final int com_facebook_profile_picture_blank_portrait=0x7f02001b;
+        public static final int com_facebook_profile_picture_blank_square=0x7f02001c;
+        public static final int com_facebook_top_background=0x7f02001d;
+        public static final int com_facebook_top_button=0x7f02001e;
+    }
+    public static final class id {
+        public static final int com_facebook_loginfragment_login_button=0x7f040007;
+        public static final int com_facebook_loginfragment_logo_image=0x7f040005;
+        public static final int com_facebook_loginfragment_profile_name=0x7f040006;
+        public static final int com_facebook_picker_activity_circle=0x7f040004;
+        public static final int com_facebook_picker_checkbox=0x7f040009;
+        public static final int com_facebook_picker_checkbox_stub=0x7f04000d;
+        public static final int com_facebook_picker_divider=0x7f040011;
+        public static final int com_facebook_picker_done_button=0x7f040010;
+        public static final int com_facebook_picker_image=0x7f04000a;
+        public static final int com_facebook_picker_list_section_header=0x7f04000e;
+        public static final int com_facebook_picker_list_view=0x7f040003;
+        public static final int com_facebook_picker_profile_pic_stub=0x7f04000b;
+        public static final int com_facebook_picker_row_activity_circle=0x7f040008;
+        public static final int com_facebook_picker_title=0x7f04000c;
+        public static final int com_facebook_picker_title_bar=0x7f040013;
+        public static final int com_facebook_picker_title_bar_stub=0x7f040012;
+        public static final int com_facebook_picker_top_bar=0x7f04000f;
+        public static final int com_facebook_placepickerfragment_search_box_stub=0x7f040014;
+        public static final int large=0x7f040002;
+        public static final int normal=0x7f040001;
+        public static final int picker_subtitle=0x7f040016;
+        public static final int search_box=0x7f040015;
+        public static final int small=0x7f040000;
+    }
+    public static final class layout {
+        public static final int com_facebook_friendpickerfragment=0x7f030000;
+        public static final int com_facebook_loginfragment=0x7f030001;
+        public static final int com_facebook_picker_activity_circle_row=0x7f030002;
+        public static final int com_facebook_picker_checkbox=0x7f030003;
+        public static final int com_facebook_picker_image=0x7f030004;
+        public static final int com_facebook_picker_list_row=0x7f030005;
+        public static final int com_facebook_picker_list_section_header=0x7f030006;
+        public static final int com_facebook_picker_search_box=0x7f030007;
+        public static final int com_facebook_picker_title_bar=0x7f030008;
+        public static final int com_facebook_picker_title_bar_stub=0x7f030009;
+        public static final int com_facebook_placepickerfragment=0x7f03000a;
+        public static final int com_facebook_placepickerfragment_list_row=0x7f03000b;
+    }
+    public static final class string {
+        public static final int com_facebook_choose_friends=0x7f05000f;
+        public static final int com_facebook_dialogloginactivity_ok_button=0x7f050000;
+        public static final int com_facebook_loading=0x7f050011;
+        public static final int com_facebook_loginfragment_log_in_button=0x7f050008;
+        public static final int com_facebook_loginfragment_logged_in=0x7f050009;
+        public static final int com_facebook_loginfragment_not_logged_in=0x7f05000a;
+        public static final int com_facebook_loginview_cancel_action=0x7f050006;
+        public static final int com_facebook_loginview_log_in_button=0x7f050002;
+        public static final int com_facebook_loginview_log_out_action=0x7f050005;
+        public static final int com_facebook_loginview_log_out_button=0x7f050001;
+        public static final int com_facebook_loginview_logged_in_as=0x7f050003;
+        public static final int com_facebook_loginview_logged_in_using_facebook=0x7f050004;
+        public static final int com_facebook_logo_content_description=0x7f050007;
+        public static final int com_facebook_nearby=0x7f050010;
+        public static final int com_facebook_picker_done_button_text=0x7f05000e;
+        public static final int com_facebook_placepicker_subtitle_catetory_only_format=0x7f05000c;
+        public static final int com_facebook_placepicker_subtitle_format=0x7f05000b;
+        public static final int com_facebook_placepicker_subtitle_were_here_only_format=0x7f05000d;
+    }
+    public static final class style {
+        public static final int com_facebook_loginview_default_style=0x7f080000;
+        public static final int com_facebook_loginview_silver_style=0x7f080001;
+    }
+    public static final class styleable {
+        /** Attributes that can be used with a com_facebook_friend_picker_fragment.
+           <p>Includes the following attributes:</p>
+           <table>
+           <colgroup align="left" />
+           <colgroup align="left" />
+           <tr><th>Attribute</th><th>Description</th></tr>
+           <tr><td><code>{@link #com_facebook_friend_picker_fragment_multi_select com.facebook.android:multi_select}</code></td><td></td></tr>
+           </table>
+           @see #com_facebook_friend_picker_fragment_multi_select
+         */
+        public static final int[] com_facebook_friend_picker_fragment = {
+            0x7f010007
+        };
+        /**
+          <p>This symbol is the offset where the {@link com.facebook.android.R.attr#multi_select}
+          attribute's value can be found in the {@link #com_facebook_friend_picker_fragment} array.
+
+
+          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name android:multi_select
+        */
+        public static final int com_facebook_friend_picker_fragment_multi_select = 0;
+        /** Attributes that can be used with a com_facebook_login_view.
+           <p>Includes the following attributes:</p>
+           <table>
+           <colgroup align="left" />
+           <colgroup align="left" />
+           <tr><th>Attribute</th><th>Description</th></tr>
+           <tr><td><code>{@link #com_facebook_login_view_confirm_logout com.facebook.android:confirm_logout}</code></td><td></td></tr>
+           <tr><td><code>{@link #com_facebook_login_view_fetch_user_info com.facebook.android:fetch_user_info}</code></td><td></td></tr>
+           <tr><td><code>{@link #com_facebook_login_view_login_text com.facebook.android:login_text}</code></td><td></td></tr>
+           <tr><td><code>{@link #com_facebook_login_view_logout_text com.facebook.android:logout_text}</code></td><td></td></tr>
+           </table>
+           @see #com_facebook_login_view_confirm_logout
+           @see #com_facebook_login_view_fetch_user_info
+           @see #com_facebook_login_view_login_text
+           @see #com_facebook_login_view_logout_text
+         */
+        public static final int[] com_facebook_login_view = {
+            0x7f01000c, 0x7f01000d, 0x7f01000e, 0x7f01000f
+        };
+        /**
+          <p>This symbol is the offset where the {@link com.facebook.android.R.attr#confirm_logout}
+          attribute's value can be found in the {@link #com_facebook_login_view} array.
+
+
+          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name android:confirm_logout
+        */
+        public static final int com_facebook_login_view_confirm_logout = 0;
+        /**
+          <p>This symbol is the offset where the {@link com.facebook.android.R.attr#fetch_user_info}
+          attribute's value can be found in the {@link #com_facebook_login_view} array.
+
+
+          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name android:fetch_user_info
+        */
+        public static final int com_facebook_login_view_fetch_user_info = 1;
+        /**
+          <p>This symbol is the offset where the {@link com.facebook.android.R.attr#login_text}
+          attribute's value can be found in the {@link #com_facebook_login_view} array.
+
+
+          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name android:login_text
+        */
+        public static final int com_facebook_login_view_login_text = 2;
+        /**
+          <p>This symbol is the offset where the {@link com.facebook.android.R.attr#logout_text}
+          attribute's value can be found in the {@link #com_facebook_login_view} array.
+
+
+          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name android:logout_text
+        */
+        public static final int com_facebook_login_view_logout_text = 3;
+        /** Attributes that can be used with a com_facebook_picker_fragment.
+           <p>Includes the following attributes:</p>
+           <table>
+           <colgroup align="left" />
+           <colgroup align="left" />
+           <tr><th>Attribute</th><th>Description</th></tr>
+           <tr><td><code>{@link #com_facebook_picker_fragment_done_button_background com.facebook.android:done_button_background}</code></td><td></td></tr>
+           <tr><td><code>{@link #com_facebook_picker_fragment_done_button_text com.facebook.android:done_button_text}</code></td><td></td></tr>
+           <tr><td><code>{@link #com_facebook_picker_fragment_extra_fields com.facebook.android:extra_fields}</code></td><td></td></tr>
+           <tr><td><code>{@link #com_facebook_picker_fragment_show_pictures com.facebook.android:show_pictures}</code></td><td></td></tr>
+           <tr><td><code>{@link #com_facebook_picker_fragment_show_title_bar com.facebook.android:show_title_bar}</code></td><td></td></tr>
+           <tr><td><code>{@link #com_facebook_picker_fragment_title_bar_background com.facebook.android:title_bar_background}</code></td><td></td></tr>
+           <tr><td><code>{@link #com_facebook_picker_fragment_title_text com.facebook.android:title_text}</code></td><td></td></tr>
+           </table>
+           @see #com_facebook_picker_fragment_done_button_background
+           @see #com_facebook_picker_fragment_done_button_text
+           @see #com_facebook_picker_fragment_extra_fields
+           @see #com_facebook_picker_fragment_show_pictures
+           @see #com_facebook_picker_fragment_show_title_bar
+           @see #com_facebook_picker_fragment_title_bar_background
+           @see #com_facebook_picker_fragment_title_text
+         */
+        public static final int[] com_facebook_picker_fragment = {
+            0x7f010000, 0x7f010001, 0x7f010002, 0x7f010003,
+            0x7f010004, 0x7f010005, 0x7f010006
+        };
+        /**
+          <p>This symbol is the offset where the {@link com.facebook.android.R.attr#done_button_background}
+          attribute's value can be found in the {@link #com_facebook_picker_fragment} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name android:done_button_background
+        */
+        public static final int com_facebook_picker_fragment_done_button_background = 6;
+        /**
+          <p>This symbol is the offset where the {@link com.facebook.android.R.attr#done_button_text}
+          attribute's value can be found in the {@link #com_facebook_picker_fragment} array.
+
+
+          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name android:done_button_text
+        */
+        public static final int com_facebook_picker_fragment_done_button_text = 4;
+        /**
+          <p>This symbol is the offset where the {@link com.facebook.android.R.attr#extra_fields}
+          attribute's value can be found in the {@link #com_facebook_picker_fragment} array.
+
+
+          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name android:extra_fields
+        */
+        public static final int com_facebook_picker_fragment_extra_fields = 1;
+        /**
+          <p>This symbol is the offset where the {@link com.facebook.android.R.attr#show_pictures}
+          attribute's value can be found in the {@link #com_facebook_picker_fragment} array.
+
+
+          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name android:show_pictures
+        */
+        public static final int com_facebook_picker_fragment_show_pictures = 0;
+        /**
+          <p>This symbol is the offset where the {@link com.facebook.android.R.attr#show_title_bar}
+          attribute's value can be found in the {@link #com_facebook_picker_fragment} array.
+
+
+          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name android:show_title_bar
+        */
+        public static final int com_facebook_picker_fragment_show_title_bar = 2;
+        /**
+          <p>This symbol is the offset where the {@link com.facebook.android.R.attr#title_bar_background}
+          attribute's value can be found in the {@link #com_facebook_picker_fragment} array.
+
+
+          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
+or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
+          @attr name android:title_bar_background
+        */
+        public static final int com_facebook_picker_fragment_title_bar_background = 5;
+        /**
+          <p>This symbol is the offset where the {@link com.facebook.android.R.attr#title_text}
+          attribute's value can be found in the {@link #com_facebook_picker_fragment} array.
+
+
+          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name android:title_text
+        */
+        public static final int com_facebook_picker_fragment_title_text = 3;
+        /** Attributes that can be used with a com_facebook_place_picker_fragment.
+           <p>Includes the following attributes:</p>
+           <table>
+           <colgroup align="left" />
+           <colgroup align="left" />
+           <tr><th>Attribute</th><th>Description</th></tr>
+           <tr><td><code>{@link #com_facebook_place_picker_fragment_radius_in_meters com.facebook.android:radius_in_meters}</code></td><td></td></tr>
+           <tr><td><code>{@link #com_facebook_place_picker_fragment_results_limit com.facebook.android:results_limit}</code></td><td></td></tr>
+           <tr><td><code>{@link #com_facebook_place_picker_fragment_search_text com.facebook.android:search_text}</code></td><td></td></tr>
+           <tr><td><code>{@link #com_facebook_place_picker_fragment_show_search_box com.facebook.android:show_search_box}</code></td><td></td></tr>
+           </table>
+           @see #com_facebook_place_picker_fragment_radius_in_meters
+           @see #com_facebook_place_picker_fragment_results_limit
+           @see #com_facebook_place_picker_fragment_search_text
+           @see #com_facebook_place_picker_fragment_show_search_box
+         */
+        public static final int[] com_facebook_place_picker_fragment = {
+            0x7f010008, 0x7f010009, 0x7f01000a, 0x7f01000b
+        };
+        /**
+          <p>This symbol is the offset where the {@link com.facebook.android.R.attr#radius_in_meters}
+          attribute's value can be found in the {@link #com_facebook_place_picker_fragment} array.
+
+
+          <p>Must be an integer value, such as "<code>100</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name android:radius_in_meters
+        */
+        public static final int com_facebook_place_picker_fragment_radius_in_meters = 0;
+        /**
+          <p>This symbol is the offset where the {@link com.facebook.android.R.attr#results_limit}
+          attribute's value can be found in the {@link #com_facebook_place_picker_fragment} array.
+
+
+          <p>Must be an integer value, such as "<code>100</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name android:results_limit
+        */
+        public static final int com_facebook_place_picker_fragment_results_limit = 1;
+        /**
+          <p>This symbol is the offset where the {@link com.facebook.android.R.attr#search_text}
+          attribute's value can be found in the {@link #com_facebook_place_picker_fragment} array.
+
+
+          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name android:search_text
+        */
+        public static final int com_facebook_place_picker_fragment_search_text = 2;
+        /**
+          <p>This symbol is the offset where the {@link com.facebook.android.R.attr#show_search_box}
+          attribute's value can be found in the {@link #com_facebook_place_picker_fragment} array.
+
+
+          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name android:show_search_box
+        */
+        public static final int com_facebook_place_picker_fragment_show_search_box = 3;
+        /** Attributes that can be used with a com_facebook_profile_picture_view.
+           <p>Includes the following attributes:</p>
+           <table>
+           <colgroup align="left" />
+           <colgroup align="left" />
+           <tr><th>Attribute</th><th>Description</th></tr>
+           <tr><td><code>{@link #com_facebook_profile_picture_view_is_cropped com.facebook.android:is_cropped}</code></td><td></td></tr>
+           <tr><td><code>{@link #com_facebook_profile_picture_view_preset_size com.facebook.android:preset_size}</code></td><td></td></tr>
+           </table>
+           @see #com_facebook_profile_picture_view_is_cropped
+           @see #com_facebook_profile_picture_view_preset_size
+         */
+        public static final int[] com_facebook_profile_picture_view = {
+            0x7f010010, 0x7f010011
+        };
+        /**
+          <p>This symbol is the offset where the {@link com.facebook.android.R.attr#is_cropped}
+          attribute's value can be found in the {@link #com_facebook_profile_picture_view} array.
+
+
+          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
+<p>This may also be a reference to a resource (in the form
+"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
+theme attribute (in the form
+"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
+containing a value of this type.
+          @attr name android:is_cropped
+        */
+        public static final int com_facebook_profile_picture_view_is_cropped = 1;
+        /**
+          <p>This symbol is the offset where the {@link com.facebook.android.R.attr#preset_size}
+          attribute's value can be found in the {@link #com_facebook_profile_picture_view} array.
+
+
+          <p>Must be one of the following constant values.</p>
+<table>
+<colgroup align="left" />
+<colgroup align="left" />
+<colgroup align="left" />
+<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
+<tr><td><code>small</code></td><td>-2</td><td> Keep in sync with constants in ProfilePictureView </td></tr>
+<tr><td><code>normal</code></td><td>-3</td><td></td></tr>
+<tr><td><code>large</code></td><td>-4</td><td></td></tr>
+</table>
+          @attr name android:preset_size
+        */
+        public static final int com_facebook_profile_picture_view_preset_size = 0;
+    };
+}
diff --git a/facebook/target/maven-archiver/pom.properties b/facebook/target/maven-archiver/pom.properties
new file mode 100644
index 000000000..8a41f5e1a
--- /dev/null
+++ b/facebook/target/maven-archiver/pom.properties
@@ -0,0 +1,5 @@
+#Generated by Maven
+#Thu Dec 13 10:28:07 UTC 2012
+version=3.0.2.b-SNAPSHOT
+groupId=tv.px.android
+artifactId=facebook-android-sdk
diff --git a/facebook/tests/.classpath b/facebook/tests/.classpath
deleted file mode 100644
index a4763d1ee..000000000
--- a/facebook/tests/.classpath
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
diff --git a/facebook/tests/.project b/facebook/tests/.project
deleted file mode 100644
index 82993b5a8..000000000
--- a/facebook/tests/.project
+++ /dev/null
@@ -1,33 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>SDKTests</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
diff --git a/facebook/tests/AndroidManifest.xml b/facebook/tests/AndroidManifest.xml
deleted file mode 100644
index 1cd5a9298..000000000
--- a/facebook/tests/AndroidManifest.xml
+++ /dev/null
@@ -1,29 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- package name must be unique so suffix with "tests" so package loader doesn't ignore us -->
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="com.facebook.sdk.tests"
-          android:versionCode="1"
-          android:versionName="1.0">
-    <uses-permission android:name="android.permission.INTERNET"></uses-permission>
-    <uses-sdk android:minSdkVersion="7" android:targetSdkVersion="7"/>
-    <!-- We add an application tag here just so that we can indicate that
-         this package needs to link against the android.test library,
-         which is needed when building test cases. -->
-    <application>
-        <uses-library android:name="android.test.runner"/>
-        <activity android:name="com.facebook.FacebookTestCase$FacebookTestActivity"/>
-        <activity android:name="com.facebook.widget.FriendPickerFragmentTests$TestActivity"/>
-        <activity android:name="com.facebook.widget.PlacePickerFragmentTests$TestActivity"/>
-        <activity android:name="com.facebook.widget.GraphObjectPagingLoaderTests$TestActivity"/>
-        <activity android:name="com.facebook.LoginActivity" />
-        <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id"/>
-    </application>
-    <!--
-    This declares that this application uses the instrumentation test runner targeting
-    the package of com.facebook.sdk.  To run the tests use the command:
-    "adb shell am instrument -w com.facebook.sdk.tests/android.test.InstrumentationTestRunner"
-    -->
-    <instrumentation android:name="android.test.InstrumentationTestRunner"
-                     android:targetPackage="com.facebook.sdk.tests"
-                     android:label="Tests for com.facebook.sdk.tests"/>
-</manifest>
diff --git a/facebook/tests/SdkTests.eml b/facebook/tests/SdkTests.eml
deleted file mode 100644
index 3bbc2f8d5..000000000
--- a/facebook/tests/SdkTests.eml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<component>
-	<exclude-output/>
-	<contentEntry url="file://$MODULE_DIR$"/>
-	<module name="SdkTestApp" scope="PROVIDED"/>
-</component>
diff --git a/facebook/tests/SdkTests.iml b/facebook/tests/SdkTests.iml
deleted file mode 100644
index 0db1700c9..000000000
--- a/facebook/tests/SdkTests.iml
+++ /dev/null
@@ -1,57 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="EclipseModuleManager">
-    <conelement value="com.android.ide.eclipse.adt.LIBRARIES" />
-    <src_description expected_position="1">
-      <src_folder value="file://$MODULE_DIR$/src" expected_position="1" />
-      <src_folder value="file://$MODULE_DIR$/gen" expected_position="2" />
-    </src_description>
-  </component>
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="GEN_FOLDER_RELATIVE_PATH_APT" value="/gen" />
-        <option name="GEN_FOLDER_RELATIVE_PATH_AIDL" value="/gen" />
-        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/AndroidManifest.xml" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/res" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/assets" />
-        <option name="LIBS_FOLDER_RELATIVE_PATH" value="/libs" />
-        <option name="REGENERATE_R_JAVA" value="true" />
-        <option name="REGENERATE_JAVA_BY_AIDL" value="true" />
-        <option name="USE_CUSTOM_APK_RESOURCE_FOLDER" value="false" />
-        <option name="CUSTOM_APK_RESOURCE_FOLDER" value="" />
-        <option name="USE_CUSTOM_COMPILER_MANIFEST" value="false" />
-        <option name="CUSTOM_COMPILER_MANIFEST" value="" />
-        <option name="APK_PATH" value="" />
-        <option name="LIBRARY_PROJECT" value="false" />
-        <option name="RUN_PROCESS_RESOURCES_MAVEN_TASK" value="true" />
-        <option name="GENERATE_UNSIGNED_APK" value="false" />
-        <option name="CUSTOM_DEBUG_KEYSTORE_PATH" value="" />
-        <option name="PACK_TEST_CODE" value="true" />
-        <option name="RUN_PROGUARD" value="false" />
-        <option name="PROGUARD_CFG_PATH" value="/proguard-project.txt" />
-        <resOverlayFolders>
-          <path>/res-overlay</path>
-        </resOverlayFolders>
-        <includeSystemProguardFile>true</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <additionalNativeLibs />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/bin/classes" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/assets" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" exported="" />
-    <orderEntry type="module" module-name="SdkTestApp" scope="PROVIDED" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/facebook/tests/ant.properties b/facebook/tests/ant.properties
deleted file mode 100644
index 928de2ff9..000000000
--- a/facebook/tests/ant.properties
+++ /dev/null
@@ -1,20 +0,0 @@
-# This file is used to override default values used by the Ant build system.
-#
-# This file must be checked into Version Control Systems, as it is
-# integral to the build system of your project.
-
-# This file is only used by the Ant script.
-
-# You can use this to override default values such as
-#  'source.dir' for the location of your java source folder and
-#  'out.dir' for the location of your output folder.
-
-# You can also use it define how the release builds are signed by declaring
-# the following properties:
-#  'key.store' for the location of your keystore and
-#  'key.alias' for the name of the key to use.
-# The password will be asked during the build when you use the 'release' target.
-
-# Removed based on advice at code.google.com/p/android/issues/detail?id=21108#c2
-# and the comment that follows.
-# tested.project.dir=../TestApp
diff --git a/facebook/tests/assets/DarkScreen.mov b/facebook/tests/assets/DarkScreen.mov
deleted file mode 100644
index 2e86e5c49..000000000
Binary files a/facebook/tests/assets/DarkScreen.mov and /dev/null differ
diff --git a/facebook/tests/build.xml b/facebook/tests/build.xml
deleted file mode 100644
index 34c89faa8..000000000
--- a/facebook/tests/build.xml
+++ /dev/null
@@ -1,101 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="FacebookSdkTests" default="help">
-
-    <!-- The local.properties file is created and updated by the 'android' tool.
-         It contains the path to the SDK. It should *NOT* be checked into
-         Version Control Systems. -->
-    <property file="local.properties" />
-
-    <!-- The ant.properties file can be created by you. It is only edited by the
-         'android' tool to add properties to it.
-         This is the place to change some Ant specific build properties.
-         Here are some properties you may want to change/update:
-
-         source.dir
-             The name of the source directory. Default is 'src'.
-         out.dir
-             The name of the output directory. Default is 'bin'.
-
-         For other overridable properties, look at the beginning of the rules
-         files in the SDK, at tools/ant/build.xml
-
-         Properties related to the SDK location or the project target should
-         be updated using the 'android' tool with the 'update' action.
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems.
-
-         -->
-    <property file="ant.properties" />
-
-    <!-- The project.properties file is created and updated by the 'android'
-         tool, as well as ADT.
-
-         This contains project specific properties such as project target, and library
-         dependencies. Lower level build properties are stored in ant.properties
-         (or in .classpath for Eclipse projects).
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems. -->
-    <loadproperties srcFile="project.properties" />
-
-    <!-- quick check on sdk.dir -->
-    <fail
-            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through an env var"
-            unless="sdk.dir"
-    />
-
-    <!--
-        Import per project custom build rules if present at the root of the project.
-        This is the place to put custom intermediary targets such as:
-            -pre-build
-            -pre-compile
-            -post-compile (This is typically used for code obfuscation.
-                           Compiled code location: ${out.classes.absolute.dir}
-                           If this is not done in place, override ${out.dex.input.absolute.dir})
-            -post-package
-            -post-build
-            -pre-clean
-    -->
-    <import file="custom_rules.xml" optional="true" />
-
-    <!-- Import the actual build file.
-
-         To customize existing targets, there are two options:
-         - Customize only one target:
-             - copy/paste the target into this file, *before* the
-               <import> task.
-             - customize it to your needs.
-         - Customize the whole content of build.xml
-             - copy/paste the content of the rules files (minus the top node)
-               into this file, replacing the <import> task.
-             - customize to your needs.
-
-         ***********************
-         ****** IMPORTANT ******
-         ***********************
-         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
-         in order to avoid having your file be overridden by tools such as "android update project"
-    -->
-    <!-- version-tag: 1 -->
-    <import file="${sdk.dir}/tools/ant/build.xml" />
-
-    <!-- SDK Tools r15 workaround -->
-    <property name="tested.manifest.package" value="com.facebook.sdk.tests" />
-
-    <!-- This seems to have no effect.  The value remains android.test.AndroidTestRunner -->
-    <!-- <property name="test.runner" value="android.test.InstrumentationTestRunner" /> -->
-
-    <target name="run-tests">
-      <echo>Running tests...</echo>
-      <exec executable="${adb}" failonerror="true">
-        <arg line="${adb.device.arg}" />
-        <arg value="shell" />
-        <arg value="am" />
-        <arg value="instrument" />
-        <arg value="-w" />
-        <!-- was <arg value="${tested.manifest.package}/${test.runner}" /> -->
-        <arg value="${tested.manifest.package}/android.test.InstrumentationTestRunner" />
-      </exec>
-    </target>
-</project>
diff --git a/facebook/tests/proguard-project.txt b/facebook/tests/proguard-project.txt
deleted file mode 100644
index f2fe1559a..000000000
--- a/facebook/tests/proguard-project.txt
+++ /dev/null
@@ -1,20 +0,0 @@
-# To enable ProGuard in your project, edit project.properties
-# to define the proguard.config property as described in that file.
-#
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in ${sdk.dir}/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the ProGuard
-# include property in project.properties.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/facebook/tests/project.properties b/facebook/tests/project.properties
deleted file mode 100644
index 705d57d8d..000000000
--- a/facebook/tests/project.properties
+++ /dev/null
@@ -1,16 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-8
-test.runner=android.test.AndroidTestRunner
-android.library.reference.1=../../facebook
diff --git a/facebook/tests/res/layout/friend_picker_test_layout_1.xml b/facebook/tests/res/layout/friend_picker_test_layout_1.xml
deleted file mode 100644
index 34c2c9a48..000000000
--- a/facebook/tests/res/layout/friend_picker_test_layout_1.xml
+++ /dev/null
@@ -1,32 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2012 Facebook
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              xmlns:app="http://schemas.android.com/apk/res-auto"
-              android:layout_width="fill_parent"
-              android:layout_height="fill_parent">
-
-    <fragment
-            android:id="@+id/friend_picker_fragment"
-            android:name="com.facebook.widget.FriendPickerFragment"
-            android:layout_width="fill_parent"
-            android:layout_height="fill_parent"
-            app:show_pictures="false"
-            app:multi_select="false"
-            app:extra_fields="middle_name,link"
-            />
-</LinearLayout>
diff --git a/facebook/tests/res/layout/place_picker_test_layout_1.xml b/facebook/tests/res/layout/place_picker_test_layout_1.xml
deleted file mode 100644
index 9f2789178..000000000
--- a/facebook/tests/res/layout/place_picker_test_layout_1.xml
+++ /dev/null
@@ -1,34 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2012 Facebook
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              xmlns:app="http://schemas.android.com/apk/res-auto"
-              android:layout_width="fill_parent"
-              android:layout_height="fill_parent">
-
-    <fragment
-            android:id="@+id/place_picker_fragment"
-            android:name="com.facebook.widget.PlacePickerFragment"
-            android:layout_width="fill_parent"
-            android:layout_height="fill_parent"
-            app:show_pictures="false"
-            app:radius_in_meters="75"
-            app:results_limit="5"
-            app:search_text="coffee"
-            app:extra_fields="checkins,general_info"
-            />
-</LinearLayout>
diff --git a/facebook/tests/res/values/strings.xml b/facebook/tests/res/values/strings.xml
deleted file mode 100644
index fa585a791..000000000
--- a/facebook/tests/res/values/strings.xml
+++ /dev/null
@@ -1,20 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2012 Facebook
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-    <string name="app_id">1234567890</string>
-</resources>
diff --git a/facebook/tests/src/com/facebook/AccessTokenTests.java b/facebook/tests/src/com/facebook/AccessTokenTests.java
deleted file mode 100644
index d93e4d894..000000000
--- a/facebook/tests/src/com/facebook/AccessTokenTests.java
+++ /dev/null
@@ -1,250 +0,0 @@
-/**
- * Copyright 2012 Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.content.Intent;
-import android.os.Bundle;
-import android.test.AndroidTestCase;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Date;
-import java.util.List;
-
-public final class AccessTokenTests extends AndroidTestCase {
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testEmptyToken() {
-        List<String> permissions = list();
-        AccessToken token = AccessToken.createEmptyToken(permissions);
-        assertSamePermissions(permissions, token);
-        assertEquals("", token.getToken());
-        assertTrue(token.isInvalid());
-        assertTrue(token.getExpires().before(new Date()));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testEmptyTokenWithPermissions() {
-        List<String> permissions = list("stream_publish");
-        AccessToken token = AccessToken.createEmptyToken(permissions);
-        assertSamePermissions(permissions, token);
-        assertEquals("", token.getToken());
-        assertTrue(token.isInvalid());
-        assertTrue(token.getExpires().before(new Date()));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testFromDialog() {
-        List<String> permissions = list("stream_publish", "go_outside_and_play");
-        String token = "AnImaginaryTokenValue";
-
-        Bundle bundle = new Bundle();
-        bundle.putString("access_token", token);
-        bundle.putString("expires_in", "60");
-
-        AccessToken accessToken = AccessToken.createFromDialog(permissions, bundle);
-        assertSamePermissions(permissions, accessToken);
-        assertEquals(token, accessToken.getToken());
-        assertEquals(AccessTokenSource.WEB_VIEW, accessToken.getSource());
-        assertTrue(!accessToken.isInvalid());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testFromSSOWithExpiresString() {
-        List<String> permissions = list("stream_publish", "go_outside_and_play");
-        String token = "AnImaginaryTokenValue";
-
-        Intent intent = new Intent();
-        intent.putExtra("access_token", token);
-        intent.putExtra("expires_in", "60");
-        intent.putExtra("extra_extra", "Something unrelated");
-
-        AccessToken accessToken = AccessToken.createFromSSO(permissions, intent);
-        assertSamePermissions(permissions, accessToken);
-        assertEquals(token, accessToken.getToken());
-        assertEquals(AccessTokenSource.FACEBOOK_APPLICATION, accessToken.getSource());
-        assertTrue(!accessToken.isInvalid());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testFromSSOWithExpiresLong() {
-        List<String> permissions = list("stream_publish", "go_outside_and_play");
-        String token = "AnImaginaryTokenValue";
-
-        Intent intent = new Intent();
-        intent.putExtra("access_token", token);
-        intent.putExtra("expires_in", 60L);
-        intent.putExtra("extra_extra", "Something unrelated");
-
-        AccessToken accessToken = AccessToken.createFromSSO(permissions, intent);
-        assertSamePermissions(permissions, accessToken);
-        assertEquals(token, accessToken.getToken());
-        assertEquals(AccessTokenSource.FACEBOOK_APPLICATION, accessToken.getSource());
-        assertTrue(!accessToken.isInvalid());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCacheRoundtrip() {
-        ArrayList<String> permissions = list("stream_publish", "go_outside_and_play");
-        String token = "AnImaginaryTokenValue";
-        Date later = nowPlusSeconds(60);
-        Date earlier = nowPlusSeconds(-60);
-
-        Bundle bundle = new Bundle();
-        TokenCache.putToken(bundle, token);
-        TokenCache.putExpirationDate(bundle, later);
-        TokenCache.putSource(bundle, AccessTokenSource.FACEBOOK_APPLICATION);
-        TokenCache.putLastRefreshDate(bundle, earlier);
-        TokenCache.putPermissions(bundle, permissions);
-
-        AccessToken accessToken = AccessToken.createFromCache(bundle);
-        assertSamePermissions(permissions, accessToken);
-        assertEquals(token, accessToken.getToken());
-        assertEquals(AccessTokenSource.FACEBOOK_APPLICATION, accessToken.getSource());
-        assertTrue(!accessToken.isInvalid());
-
-        Bundle cache = accessToken.toCacheBundle();
-        assertEqualContents(bundle, cache);
-    }
-
-    @SmallTest @MediumTest @LargeTest
-    public void testCachePutGet() {
-        Bundle bundle = new Bundle();
-
-        for (String token : new String[] { "", "A completely random token value" }) {
-            TokenCache.putToken(bundle, token);
-            assertEquals(token, TokenCache.getToken(bundle));
-        }
-
-        for (Date date : new Date[] { new Date(42), new Date() }) {
-            TokenCache.putExpirationDate(bundle, date);
-            assertEquals(date, TokenCache.getExpirationDate(bundle));
-
-            TokenCache.putLastRefreshDate(bundle, date);
-            assertEquals(date, TokenCache.getLastRefreshDate(bundle));
-        }
-
-        for (long milliseconds : new long[] { 0, -1, System.currentTimeMillis() }) {
-            TokenCache.putExpirationMilliseconds(bundle, milliseconds);
-            assertEquals(milliseconds, TokenCache.getExpirationMilliseconds(bundle));
-
-            TokenCache.putLastRefreshMilliseconds(bundle, milliseconds);
-            assertEquals(milliseconds, TokenCache.getLastRefreshMilliseconds(bundle));
-        }
-
-        for (AccessTokenSource source : AccessTokenSource.values()) {
-            TokenCache.putSource(bundle, source);
-            assertEquals(source, TokenCache.getSource(bundle));
-        }
-
-        List<String> normalList = Arrays.asList("", "Another completely random token value");
-        List<String> emptyList = Arrays.asList();
-        ArrayList<String> normalArrayList = new ArrayList<String>(normalList);
-        ArrayList<String> emptyArrayList = new ArrayList<String>();
-        @SuppressWarnings("unchecked")
-        List<List<String>> permissionLists = Arrays
-                .asList(normalList, emptyList, normalArrayList, emptyArrayList);
-        for (List<String> list : permissionLists) {
-            TokenCache.putPermissions(bundle, list);
-            assertSamePermissions(list, TokenCache.getPermissions(bundle));
-        }
-        normalArrayList.add(null);
-    }
-    
-    @SmallTest
-    public void testBasicSerialization() throws IOException {
-        AccessToken accessToken = AccessToken.createFromString("a token",
-                Arrays.asList("permission_1", "permission_2"), AccessTokenSource.WEB_VIEW);
-        AccessToken res = TestUtils.serializeAndUnserialize(accessToken);
-        
-        // if one field got serialized most likely all other non transient fields
-        // got serialized correctly.
-        assertEquals(accessToken.getPermissions(), res.getPermissions());
-        assertEquals(accessToken.getToken(), res.getToken());
-        assertEquals(accessToken.getSource(), res.getSource());
-    }
-
-    private ArrayList<String> list(String... ss) {
-        ArrayList<String> result = new ArrayList<String>();
-
-        for (String s : ss) {
-            result.add(s);
-        }
-
-        return result;
-    }
-
-    private static Date nowPlusSeconds(long offset) {
-        return new Date(new Date().getTime() + (offset * 1000L));
-    }
-
-    private static void assertSamePermissions(List<String> expected, AccessToken actual) {
-        if (expected == null) {
-            assertEquals(null, actual.getPermissions());
-        } else {
-            for (String p : expected) {
-                assertTrue(actual.getPermissions().contains(p));
-            }
-            for (String p : actual.getPermissions()) {
-                assertTrue(expected.contains(p));
-            }
-        }
-    }
-
-    private static void assertSamePermissions(List<String> expected, List<String> actual) {
-        if (expected == null) {
-            assertEquals(null, actual);
-        } else {
-            for (String p : expected) {
-                assertTrue(actual.contains(p));
-            }
-            for (String p : actual) {
-                assertTrue(expected.contains(p));
-            }
-        }
-    }
-
-    private static void assertEqualContents(Bundle a, Bundle b) {
-        for (String key : a.keySet()) {
-            if (!b.containsKey(key)) {
-                fail("bundle does not include key " + key);
-            }
-            assertEquals(a.get(key), b.get(key));
-        }
-        for (String key : b.keySet()) {
-            if (!a.containsKey(key)) {
-                fail("bundle does not include key " + key);
-            }
-        }
-    }
-}
diff --git a/facebook/tests/src/com/facebook/AsyncRequestTests.java b/facebook/tests/src/com/facebook/AsyncRequestTests.java
deleted file mode 100644
index 43dbde900..000000000
--- a/facebook/tests/src/com/facebook/AsyncRequestTests.java
+++ /dev/null
@@ -1,311 +0,0 @@
-/**
- * Copyright 2012 Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.facebook;
-
-import android.graphics.Bitmap;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import com.facebook.model.GraphObject;
-import com.facebook.model.GraphPlace;
-import com.facebook.model.GraphUser;
-
-import java.net.HttpURLConnection;
-import java.util.Arrays;
-import java.util.List;
-
-public class AsyncRequestTests extends FacebookTestCase {
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanLaunchAsyncRequestFromUiThread() {
-        Request request = Request.newPostRequest(null, "me/feeds", null, null);
-        try {
-            TestRequestAsyncTask task = createAsyncTaskOnUiThread(request);
-            assertNotNull(task);
-        } catch (Throwable throwable) {
-            assertNull(throwable);
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testExecuteWithNullRequestsThrows() throws Exception {
-        try {
-            TestRequestAsyncTask task = new TestRequestAsyncTask((Request[]) null);
-
-            task.executeOnBlockerThread();
-
-            waitAndAssertSuccessOrRethrow(1);
-
-            fail("expected NullPointerException");
-        } catch (NullPointerException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testExecuteBatchWithZeroRequestsThrows() throws Exception {
-        try {
-            TestRequestAsyncTask task = new TestRequestAsyncTask(new Request[] {});
-
-            task.executeOnBlockerThread();
-
-            waitAndAssertSuccessOrRethrow(1);
-
-            fail("expected IllegalArgumentException");
-        } catch (IllegalArgumentException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testExecuteBatchWithNullRequestThrows() throws Exception {
-        try {
-            TestRequestAsyncTask task = new TestRequestAsyncTask(new Request[] { null });
-
-            task.executeOnBlockerThread();
-
-            waitAndAssertSuccessOrRethrow(1);
-
-            fail("expected NullPointerException");
-        } catch (NullPointerException exception) {
-        }
-
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExecuteSingleGet() {
-        Request request = new Request(null, "TourEiffel", null, null, new ExpectSuccessCallback() {
-            @Override
-            protected void performAsserts(Response response) {
-                assertNotNull(response);
-                GraphPlace graphPlace = response.getGraphObjectAs(GraphPlace.class);
-                assertEquals("Paris", graphPlace.getLocation().getCity());
-            }
-        });
-
-        TestRequestAsyncTask task = new TestRequestAsyncTask(request);
-
-        task.executeOnBlockerThread();
-
-        // Wait on 2 signals: request and task will both signal.
-        waitAndAssertSuccess(2);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExecuteSingleGetUsingHttpURLConnection() {
-        Request request = new Request(null, "TourEiffel", null, null, new ExpectSuccessCallback() {
-            @Override
-            protected void performAsserts(Response response) {
-                assertNotNull(response);
-                GraphPlace graphPlace = response.getGraphObjectAs(GraphPlace.class);
-                assertEquals("Paris", graphPlace.getLocation().getCity());
-            }
-        });
-        HttpURLConnection connection = Request.toHttpConnection(request);
-
-        TestRequestAsyncTask task = new TestRequestAsyncTask(connection, Arrays.asList(new Request[] { request }));
-
-        task.executeOnBlockerThread();
-
-        // Wait on 2 signals: request and task will both signal.
-        waitAndAssertSuccess(2);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExecuteSingleGetFailureCase() {
-        Request request = new Request(null, "-1", null, null, new ExpectFailureCallback());
-
-        TestRequestAsyncTask task = new TestRequestAsyncTask(request);
-
-        task.executeOnBlockerThread();
-
-        // Wait on 2 signals: request and task will both signal.
-        waitAndAssertSuccess(2);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testBatchWithoutAppIDIsError() throws Throwable {
-        Request request1 = new Request(null, "TourEiffel", null, null, new ExpectFailureCallback());
-        Request request2 = new Request(null, "SpaceNeedle", null, null, new ExpectFailureCallback());
-
-        TestRequestAsyncTask task = new TestRequestAsyncTask(request1, request2);
-
-        task.executeOnBlockerThread();
-
-        // Wait on 3 signals: request1, request2, and task will all signal.
-        waitAndAssertSuccessOrRethrow(3);
-    }
-
-    @LargeTest
-    public void testMixedSuccessAndFailure() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        final int NUM_REQUESTS = 8;
-        Request[] requests = new Request[NUM_REQUESTS];
-        for (int i = 0; i < NUM_REQUESTS; ++i) {
-            boolean shouldSucceed = (i % 2) == 1;
-            if (shouldSucceed) {
-                requests[i] = new Request(session, "me", null, null, new ExpectSuccessCallback());
-            } else {
-                requests[i] = new Request(session, "-1", null, null, new ExpectFailureCallback());
-            }
-        }
-
-        TestRequestAsyncTask task = new TestRequestAsyncTask(requests);
-
-        task.executeOnBlockerThread();
-
-        // Note: plus 1, because the overall async task signals as well.
-        waitAndAssertSuccess(NUM_REQUESTS + 1);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testStaticExecuteMeAsync() {
-        final TestSession session = openTestSessionWithSharedUser();
-
-        class MeCallback extends ExpectSuccessCallback implements Request.GraphUserCallback {
-            @Override
-            public void onCompleted(GraphUser me, Response response) {
-                assertNotNull(me);
-                assertEquals(session.getTestUserId(), me.getId());
-                RequestTests.validateMeResponse(session, response);
-                onCompleted(response);
-            }
-        }
-
-        runOnBlockerThread(new Runnable() {
-            @Override
-            public void run() {
-                Request.executeMeRequestAsync(session, new MeCallback());
-            }
-        }, false);
-        waitAndAssertSuccess(1);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testStaticExecuteMyFriendsAsync() {
-        final TestSession session = openTestSessionWithSharedUser();
-
-        class FriendsCallback extends ExpectSuccessCallback implements Request.GraphUserListCallback {
-            @Override
-            public void onCompleted(List<GraphUser> friends, Response response) {
-                assertNotNull(friends);
-                RequestTests.validateMyFriendsResponse(session, response);
-                onCompleted(response);
-            }
-        }
-
-        runOnBlockerThread(new Runnable() {
-            @Override
-            public void run() {
-                Request.executeMyFriendsRequestAsync(session, new FriendsCallback());
-            }
-        }, false);
-        waitAndAssertSuccess(1);
-    }
-
-    @LargeTest
-    public void testBatchUploadPhoto() {
-        TestSession session = openTestSessionWithSharedUserAndPermissions(null, "user_photos");
-
-        final int image1Size = 120;
-        final int image2Size = 150;
-
-        Bitmap bitmap1 = createTestBitmap(image1Size);
-        Bitmap bitmap2 = createTestBitmap(image2Size);
-
-        Request uploadRequest1 = Request.newUploadPhotoRequest(session, bitmap1, null);
-        uploadRequest1.setBatchEntryName("uploadRequest1");
-        Request uploadRequest2 = Request.newUploadPhotoRequest(session, bitmap2, null);
-        uploadRequest2.setBatchEntryName("uploadRequest2");
-        Request getRequest1 = new Request(session, "{result=uploadRequest1:$.id}", null, null,
-                new ExpectSuccessCallback() {
-                    @Override
-                    protected void performAsserts(Response response) {
-                        assertNotNull(response);
-                        GraphObject retrievedPhoto = response.getGraphObject();
-                        assertNotNull(retrievedPhoto);
-                        assertEquals(image1Size, retrievedPhoto.getProperty("width"));
-                    }
-                });
-        Request getRequest2 = new Request(session, "{result=uploadRequest2:$.id}", null, null,
-                new ExpectSuccessCallback() {
-                    @Override
-                    protected void performAsserts(Response response) {
-                        assertNotNull(response);
-                        GraphObject retrievedPhoto = response.getGraphObject();
-                        assertNotNull(retrievedPhoto);
-                        assertEquals(image2Size, retrievedPhoto.getProperty("width"));
-                    }
-                });
-
-        TestRequestAsyncTask task = new TestRequestAsyncTask(uploadRequest1, uploadRequest2, getRequest1, getRequest2);
-        task.executeOnBlockerThread();
-
-        // Wait on 3 signals: getRequest1, getRequest2, and task will all signal.
-        waitAndAssertSuccess(3);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testShortTimeoutCausesFailure() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        Request request = new Request(session, "me/likes", null, null, new ExpectFailureCallback());
-
-        RequestBatch requestBatch = new RequestBatch(request);
-
-        // 1 millisecond timeout should be too short for response from server.
-        requestBatch.setTimeout(1);
-
-        TestRequestAsyncTask task = new TestRequestAsyncTask(requestBatch);
-        task.executeOnBlockerThread();
-
-        // Note: plus 1, because the overall async task signals as well.
-        waitAndAssertSuccess(2);
-    }
-
-    @LargeTest
-    public void testLongTimeoutAllowsSuccess() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        Request request = new Request(session, "me", null, null, new ExpectSuccessCallback());
-
-        RequestBatch requestBatch = new RequestBatch(request);
-
-        // 10 second timeout should be long enough for successful response from server.
-        requestBatch.setTimeout(10000);
-
-        TestRequestAsyncTask task = new TestRequestAsyncTask(requestBatch);
-        task.executeOnBlockerThread();
-
-        // Note: plus 1, because the overall async task signals as well.
-        waitAndAssertSuccess(2);
-    }
-}
diff --git a/facebook/tests/src/com/facebook/BatchRequestTests.java b/facebook/tests/src/com/facebook/BatchRequestTests.java
deleted file mode 100644
index d42a14194..000000000
--- a/facebook/tests/src/com/facebook/BatchRequestTests.java
+++ /dev/null
@@ -1,477 +0,0 @@
-/**
- * Copyright 2012 Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.facebook;
-
-import android.graphics.Bitmap;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import com.facebook.model.GraphObject;
-import com.facebook.model.GraphPlace;
-import com.facebook.model.GraphUser;
-import com.facebook.internal.CacheableRequestBatch;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-
-public class BatchRequestTests extends FacebookTestCase {
-    protected void setUp() throws Exception {
-        super.setUp();
-
-        // Tests that need this set should explicitly set it.
-        Request.setDefaultBatchApplicationId(null);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCreateEmptyRequestBatch() {
-        CacheableRequestBatch batch = new CacheableRequestBatch();
-
-        Request meRequest = Request.newMeRequest(null, null);
-        assertEquals(0, batch.size());
-        batch.add(meRequest);
-        assertEquals(1, batch.size());
-        assertEquals(meRequest, batch.get(0));
-
-        String key = "The Key";
-        assertNull(batch.getCacheKeyOverride());
-        batch.setCacheKeyOverride(key);
-        assertEquals(key, batch.getCacheKeyOverride());
-
-        assertTrue(!batch.getForceRoundTrip());
-        batch.setForceRoundTrip(true);
-        assertTrue(batch.getForceRoundTrip());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCreateNonemptyRequestBatch() {
-        Request meRequest = Request.newMeRequest(null, null);
-
-        RequestBatch batch = new RequestBatch(new Request[] { meRequest, meRequest });
-        assertEquals(2, batch.size());
-        assertEquals(meRequest, batch.get(0));
-        assertEquals(meRequest, batch.get(1));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testBatchWithoutAppIDIsError() {
-        Request request1 = new Request(null, "TourEiffel", null, null, new ExpectFailureCallback());
-        Request request2 = new Request(null, "SpaceNeedle", null, null, new ExpectFailureCallback());
-        Request.executeBatchAndWait(request1, request2);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExecuteBatchedGets() throws IOException {
-        setBatchApplicationIdForTestApp();
-
-        Request request1 = new Request(null, "TourEiffel");
-        Request request2 = new Request(null, "SpaceNeedle");
-
-        List<Response> responses = Request.executeBatchAndWait(request1, request2);
-        assertEquals(2, responses.size());
-        assertTrue(responses.get(0).getError() == null);
-        assertTrue(responses.get(1).getError() == null);
-
-        GraphPlace eiffelTower = responses.get(0).getGraphObjectAs(GraphPlace.class);
-        GraphPlace spaceNeedle = responses.get(1).getGraphObjectAs(GraphPlace.class);
-        assertTrue(eiffelTower != null);
-        assertTrue(spaceNeedle != null);
-
-        assertEquals("Paris", eiffelTower.getLocation().getCity());
-        assertEquals("Seattle", spaceNeedle.getLocation().getCity());
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testFacebookErrorResponsesCreateErrors() {
-        setBatchApplicationIdForTestApp();
-
-        Request request1 = new Request(null, "somestringthatshouldneverbeavalidfobjectid");
-        Request request2 = new Request(null, "someotherstringthatshouldneverbeavalidfobjectid");
-        List<Response> responses = Request.executeBatchAndWait(request1, request2);
-
-        assertEquals(2, responses.size());
-        assertTrue(responses.get(0).getError() != null);
-        assertTrue(responses.get(1).getError() != null);
-
-        FacebookRequestError error = responses.get(0).getError();
-        assertTrue(error.getException() instanceof FacebookServiceException);
-        assertTrue(error.getErrorType() != null);
-        assertTrue(error.getErrorCode() != FacebookRequestError.INVALID_ERROR_CODE);
-    }
-
-    @LargeTest
-    public void testBatchPostStatusUpdate() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        GraphObject statusUpdate1 = createStatusUpdate();
-        GraphObject statusUpdate2 = createStatusUpdate();
-
-        Request postRequest1 = Request.newPostRequest(session, "me/feed", statusUpdate1, null);
-        postRequest1.setBatchEntryName("postRequest1");
-        Request postRequest2 = Request.newPostRequest(session, "me/feed", statusUpdate2, null);
-        postRequest2.setBatchEntryName("postRequest2");
-        Request getRequest1 = new Request(session, "{result=postRequest1:$.id}");
-        Request getRequest2 = new Request(session, "{result=postRequest2:$.id}");
-
-        List<Response> responses = Request.executeBatchAndWait(postRequest1, postRequest2, getRequest1, getRequest2);
-        assertNotNull(responses);
-        assertEquals(4, responses.size());
-        assertNoErrors(responses);
-
-        GraphObject retrievedStatusUpdate1 = responses.get(2).getGraphObject();
-        GraphObject retrievedStatusUpdate2 = responses.get(3).getGraphObject();
-        assertNotNull(retrievedStatusUpdate1);
-        assertNotNull(retrievedStatusUpdate2);
-
-        assertEquals(statusUpdate1.getProperty("message"), retrievedStatusUpdate1.getProperty("message"));
-        assertEquals(statusUpdate2.getProperty("message"), retrievedStatusUpdate2.getProperty("message"));
-    }
-
-    @LargeTest
-    public void testTwoDifferentAccessTokens() {
-        TestSession session1 = openTestSessionWithSharedUser();
-        TestSession session2 = openTestSessionWithSharedUser(SECOND_TEST_USER_TAG);
-
-        Request request1 = Request.newMeRequest(session1, null);
-        Request request2 = Request.newMeRequest(session2, null);
-
-        List<Response> responses = Request.executeBatchAndWait(request1, request2);
-        assertNotNull(responses);
-        assertEquals(2, responses.size());
-
-        GraphUser user1 = responses.get(0).getGraphObjectAs(GraphUser.class);
-        GraphUser user2 = responses.get(1).getGraphObjectAs(GraphUser.class);
-
-        assertNotNull(user1);
-        assertNotNull(user2);
-
-        assertFalse(user1.getId().equals(user2.getId()));
-        assertEquals(session1.getTestUserId(), user1.getId());
-        assertEquals(session2.getTestUserId(), user2.getId());
-    }
-
-    @LargeTest
-    public void testBatchWithValidSessionAndNoSession() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        Request request1 = new Request(session, "me");
-        Request request2 = new Request(null, "zuck");
-
-        List<Response> responses = Request.executeBatchAndWait(request1, request2);
-        assertNotNull(responses);
-        assertEquals(2, responses.size());
-
-        GraphUser user1 = responses.get(0).getGraphObjectAs(GraphUser.class);
-        GraphUser user2 = responses.get(1).getGraphObjectAs(GraphUser.class);
-
-        assertNotNull(user1);
-        assertNotNull(user2);
-
-        assertFalse(user1.getId().equals(user2.getId()));
-        assertEquals(session.getTestUserId(), user1.getId());
-        assertEquals("4", user2.getId());
-    }
-
-    @LargeTest
-    public void testBatchWithNoSessionAndValidSession() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        Request request1 = new Request(null, "zuck");
-        Request request2 = new Request(session, "me");
-
-        List<Response> responses = Request.executeBatchAndWait(request1, request2);
-        assertNotNull(responses);
-        assertEquals(2, responses.size());
-
-        GraphUser user1 = responses.get(0).getGraphObjectAs(GraphUser.class);
-        GraphUser user2 = responses.get(1).getGraphObjectAs(GraphUser.class);
-
-        assertNotNull(user1);
-        assertNotNull(user2);
-
-        assertFalse(user1.getId().equals(user2.getId()));
-        assertEquals("4", user1.getId());
-        assertEquals(session.getTestUserId(), user2.getId());
-    }
-
-    @LargeTest
-    public void testBatchWithTwoSessionlessRequestsAndDefaultAppID() {
-        TestSession session = getTestSessionWithSharedUser(null);
-        String appId = session.getApplicationId();
-        Request.setDefaultBatchApplicationId(appId);
-
-        Request request1 = new Request(null, "zuck");
-        Request request2 = new Request(null, "zuck");
-
-        List<Response> responses = Request.executeBatchAndWait(request1, request2);
-        assertNotNull(responses);
-        assertEquals(2, responses.size());
-
-        GraphUser user1 = responses.get(0).getGraphObjectAs(GraphUser.class);
-        GraphUser user2 = responses.get(1).getGraphObjectAs(GraphUser.class);
-
-        assertNotNull(user1);
-        assertNotNull(user2);
-
-        assertEquals("4", user1.getId());
-        assertEquals("4", user2.getId());
-    }
-
-    @LargeTest
-    public void testMixedSuccessAndFailure() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        final int NUM_REQUESTS = 8;
-        Request[] requests = new Request[NUM_REQUESTS];
-        for (int i = 0; i < NUM_REQUESTS; ++i) {
-            boolean shouldSucceed = (i % 2) == 1;
-            requests[i] = new Request(session, shouldSucceed ? "me" : "-1");
-        }
-
-        List<Response> responses = Request.executeBatchAndWait(requests);
-        assertNotNull(responses);
-        assertEquals(NUM_REQUESTS, responses.size());
-
-        for (int i = 0; i < NUM_REQUESTS; ++i) {
-            boolean shouldSucceed = (i % 2) == 1;
-
-            Response response = responses.get(i);
-            assertNotNull(response);
-            if (shouldSucceed) {
-                assertNull(response.getError());
-                assertNotNull(response.getGraphObject());
-            } else {
-                assertNotNull(response.getError());
-                assertNull(response.getGraphObject());
-            }
-        }
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testClosedSessionDoesntAppendAccessToken() {
-        TestSession session = openTestSessionWithSharedUser();
-        session.close();
-        Request request1 = new Request(session, "me", null, null, new ExpectFailureCallback());
-        Request request2 = new Request(session, "me", null, null, new ExpectFailureCallback());
-
-        TestRequestAsyncTask task = new TestRequestAsyncTask(request1, request2);
-        task.executeOnBlockerThread();
-
-        waitAndAssertSuccess(2);
-    }
-
-    @LargeTest
-    public void testBatchUploadPhoto() {
-        TestSession session = openTestSessionWithSharedUserAndPermissions(null, "user_photos");
-
-        final int image1Size = 120;
-        final int image2Size = 150;
-
-        Bitmap bitmap1 = createTestBitmap(image1Size);
-        Bitmap bitmap2 = createTestBitmap(image2Size);
-
-        Request uploadRequest1 = Request.newUploadPhotoRequest(session, bitmap1, null);
-        uploadRequest1.setBatchEntryName("uploadRequest1");
-        Request uploadRequest2 = Request.newUploadPhotoRequest(session, bitmap2, null);
-        uploadRequest2.setBatchEntryName("uploadRequest2");
-        Request getRequest1 = new Request(session, "{result=uploadRequest1:$.id}");
-        Request getRequest2 = new Request(session, "{result=uploadRequest2:$.id}");
-
-        List<Response> responses = Request.executeBatchAndWait(uploadRequest1, uploadRequest2, getRequest1, getRequest2);
-        assertNotNull(responses);
-        assertEquals(4, responses.size());
-        assertNoErrors(responses);
-
-        GraphObject retrievedPhoto1 = responses.get(2).getGraphObject();
-        GraphObject retrievedPhoto2 = responses.get(3).getGraphObject();
-        assertNotNull(retrievedPhoto1);
-        assertNotNull(retrievedPhoto2);
-
-        assertEquals(image1Size, retrievedPhoto1.getProperty("width"));
-        assertEquals(image2Size, retrievedPhoto2.getProperty("width"));
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testCallbacksAreCalled() {
-        setBatchApplicationIdForTestApp();
-
-        ArrayList<Request> requests = new ArrayList<Request>();
-        final ArrayList<Boolean> calledBack = new ArrayList<Boolean>();
-
-        final int NUM_REQUESTS = 4;
-        for (int i = 0; i < NUM_REQUESTS; ++i) {
-            Request request = new Request(null, "4");
-
-            request.setCallback(new Request.Callback() {
-                @Override
-                public void onCompleted(Response response) {
-                    calledBack.add(true);
-                }
-            });
-
-            requests.add(request);
-        }
-
-        List<Response> responses = Request.executeBatchAndWait(requests);
-        assertNotNull(responses);
-        assertTrue(calledBack.size() == NUM_REQUESTS);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testCacheMyFriendsRequest() throws IOException {
-        Response.getResponseCache().clearForTest();
-        TestSession session = openTestSessionWithSharedUser();
-
-        Request request = Request.newMyFriendsRequest(session, null);
-
-        CacheableRequestBatch batch = new CacheableRequestBatch(request);
-        batch.setCacheKeyOverride("MyFriends");
-
-        // Running the request with empty cache should hit the server.
-        List<Response> responses = Request.executeBatchAndWait(batch);
-        assertNotNull(responses);
-        assertEquals(1, responses.size());
-
-        Response response = responses.get(0);
-        assertNotNull(response);
-        assertNull(response.getError());
-        assertTrue(!response.getIsFromCache());
-
-        // Running again should hit the cache.
-        responses = Request.executeBatchAndWait(batch);
-        assertNotNull(responses);
-        assertEquals(1, responses.size());
-
-        response = responses.get(0);
-        assertNotNull(response);
-        assertNull(response.getError());
-        assertTrue(response.getIsFromCache());
-
-        // Forcing roundtrip should hit the server again.
-        batch.setForceRoundTrip(true);
-        responses = Request.executeBatchAndWait(batch);
-        assertNotNull(responses);
-        assertEquals(1, responses.size());
-
-        response = responses.get(0);
-        assertNotNull(response);
-        assertNull(response.getError());
-        assertTrue(!response.getIsFromCache());
-
-        Response.getResponseCache().clearForTest();
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testCacheMeAndMyFriendsRequest() throws IOException {
-        Response.getResponseCache().clearForTest();
-        TestSession session = openTestSessionWithSharedUser();
-
-        Request requestMe = Request.newMeRequest(session, null);
-        Request requestMyFriends = Request.newMyFriendsRequest(session, null);
-
-        CacheableRequestBatch batch = new CacheableRequestBatch(new Request[] { requestMyFriends, requestMe });
-        batch.setCacheKeyOverride("MyFriends");
-
-        // Running the request with empty cache should hit the server.
-        List<Response> responses = Request.executeBatchAndWait(batch);
-        assertNotNull(responses);
-        assertEquals(2, responses.size());
-
-        for (Response response : responses) {
-            assertNotNull(response);
-            assertNull(response.getError());
-            assertTrue(!response.getIsFromCache());
-        }
-
-        // Running again should hit the cache.
-        responses = Request.executeBatchAndWait(batch);
-        assertNotNull(responses);
-        assertEquals(2, responses.size());
-
-        for (Response response : responses) {
-            assertNotNull(response);
-            assertNull(response.getError());
-            assertTrue(response.getIsFromCache());
-        }
-
-        // Forcing roundtrip should hit the server again.
-        batch.setForceRoundTrip(true);
-        responses = Request.executeBatchAndWait(batch);
-        assertNotNull(responses);
-        assertEquals(2, responses.size());
-
-        for (Response response : responses) {
-            assertNotNull(response);
-            assertNull(response.getError());
-            assertTrue(!response.getIsFromCache());
-        }
-
-        Response.getResponseCache().clearForTest();
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExplicitDependencyDefaultsToOmitFirstResponse() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        Request requestMe = Request.newMeRequest(session, null);
-        requestMe.setBatchEntryName("me_request");
-
-        Request requestMyFriends = Request.newMyFriendsRequest(session, null);
-        requestMyFriends.setBatchEntryDependsOn("me_request");
-
-        List<Response> responses = Request.executeBatchAndWait(requestMe, requestMyFriends);
-
-        Response meResponse = responses.get(0);
-        Response myFriendsResponse = responses.get(1);
-
-        assertNull(meResponse.getGraphObject());
-        assertNotNull(myFriendsResponse.getGraphObject());
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExplicitDependencyCanIncludeFirstResponse() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        Request requestMe = Request.newMeRequest(session, null);
-        requestMe.setBatchEntryName("me_request");
-        requestMe.setBatchEntryOmitResultOnSuccess(false);
-
-        Request requestMyFriends = Request.newMyFriendsRequest(session, null);
-        requestMyFriends.setBatchEntryDependsOn("me_request");
-
-        List<Response> responses = Request.executeBatchAndWait(requestMe, requestMyFriends);
-
-        Response meResponse = responses.get(0);
-        Response myFriendsResponse = responses.get(1);
-
-        assertNotNull(meResponse.getGraphObject());
-        assertNotNull(myFriendsResponse.getGraphObject());
-    }
-}
diff --git a/facebook/tests/src/com/facebook/FacebookActivityTestCase.java b/facebook/tests/src/com/facebook/FacebookActivityTestCase.java
deleted file mode 100644
index ebd34c5d8..000000000
--- a/facebook/tests/src/com/facebook/FacebookActivityTestCase.java
+++ /dev/null
@@ -1,621 +0,0 @@
-/**
- * Copyright 2012 Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.app.Activity;
-import android.content.res.AssetManager;
-import android.graphics.Bitmap;
-import android.graphics.Color;
-import android.os.Bundle;
-import android.os.ConditionVariable;
-import android.os.Handler;
-import android.test.ActivityInstrumentationTestCase2;
-import android.util.Log;
-import com.facebook.model.GraphObject;
-import com.facebook.internal.Utility;
-import junit.framework.AssertionFailedError;
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.json.JSONTokener;
-
-import java.io.*;
-import java.net.HttpURLConnection;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Date;
-import java.util.List;
-import java.util.concurrent.atomic.AtomicBoolean;
-
-public class FacebookActivityTestCase<T extends Activity> extends ActivityInstrumentationTestCase2<T> {
-    private static final String TAG = FacebookActivityTestCase.class.getSimpleName();
-
-    private static String applicationId;
-    private static String applicationSecret;
-
-    public final static String SECOND_TEST_USER_TAG = "Second";
-    public final static String THIRD_TEST_USER_TAG = "Third";
-
-    private TestBlocker testBlocker;
-
-    protected synchronized TestBlocker getTestBlocker() {
-        if (testBlocker == null) {
-            testBlocker = TestBlocker.createTestBlocker();
-        }
-        return testBlocker;
-    }
-
-    public FacebookActivityTestCase(Class<T> activityClass) {
-        super("", activityClass);
-    }
-
-    // Returns an un-opened TestSession
-    protected TestSession getTestSessionWithSharedUser() {
-        return getTestSessionWithSharedUser(null);
-    }
-
-    // Returns an un-opened TestSession
-    protected TestSession getTestSessionWithSharedUser(String sessionUniqueUserTag) {
-        return getTestSessionWithSharedUserAndPermissions(sessionUniqueUserTag, (String[]) null);
-    }
-
-    protected TestSession getTestSessionWithSharedUserAndPermissions(String sessionUniqueUserTag,
-            String... permissions) {
-        List<String> permissionsList = (permissions != null) ? Arrays.asList(permissions) : null;
-        return TestSession.createSessionWithSharedUser(getActivity(), permissionsList, sessionUniqueUserTag);
-    }
-
-    // Returns an un-opened TestSession
-    protected TestSession getTestSessionWithPrivateUser(TestBlocker testBlocker) {
-        return TestSession.createSessionWithPrivateUser(getActivity(), null);
-    }
-
-    protected TestSession openTestSessionWithSharedUser(final TestBlocker blocker) {
-        return openTestSessionWithSharedUser(blocker, null);
-    }
-
-    protected TestSession openTestSessionWithSharedUser(final TestBlocker blocker, String sessionUniqueUserTag) {
-        TestSession session = getTestSessionWithSharedUser();
-        openSession(getActivity(), session, blocker);
-        return session;
-    }
-
-    protected TestSession openTestSessionWithSharedUser() {
-        return openTestSessionWithSharedUser((String) null);
-    }
-
-    protected TestSession openTestSessionWithSharedUser(String sessionUniqueUserTag) {
-        return openTestSessionWithSharedUserAndPermissions(sessionUniqueUserTag, (String[]) null);
-    }
-
-    protected TestSession openTestSessionWithSharedUserAndPermissions(String sessionUniqueUserTag,
-            String... permissions) {
-        final TestBlocker blocker = getTestBlocker();
-        TestSession session = getTestSessionWithSharedUserAndPermissions(sessionUniqueUserTag, permissions);
-        openSession(getActivity(), session, blocker);
-        return session;
-    }
-
-    // Turns exceptions from the TestBlocker into JUnit assertions
-    protected void waitAndAssertSuccess(TestBlocker testBlocker, int numSignals) {
-        try {
-            testBlocker.waitForSignalsAndAssertSuccess(numSignals);
-        } catch (AssertionFailedError e) {
-            throw e;
-        } catch (Exception e) {
-            fail("Got exception: " + e.getMessage());
-        }
-    }
-
-    protected void waitAndAssertSuccess(int numSignals) {
-        waitAndAssertSuccess(getTestBlocker(), numSignals);
-    }
-
-    protected void waitAndAssertSuccessOrRethrow(int numSignals) throws Exception {
-        getTestBlocker().waitForSignalsAndAssertSuccess(numSignals);
-    }
-
-    protected void runAndBlockOnUiThread(final int expectedSignals, final Runnable runnable) throws Throwable {
-        final TestBlocker blocker = getTestBlocker();
-        runTestOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                runnable.run();
-                blocker.signal();
-            }
-        });
-        // We wait for the operation to complete; wait for as many other signals as we expect.
-        blocker.waitForSignals(1 + expectedSignals);
-        // Wait for the UI thread to become idle so any UI updates the runnable triggered have a chance
-        // to finish before we return.
-        getInstrumentation().waitForIdleSync();
-    }
-
-    protected synchronized void readApplicationIdAndSecret() {
-        synchronized (FacebookTestCase.class) {
-            if (applicationId != null && applicationSecret != null) {
-                return;
-            }
-
-            AssetManager assets = getInstrumentation().getContext().getResources().getAssets();
-            InputStream stream = null;
-            final String errorMessage = "could not read applicationId and applicationSecret from config.json; ensure "
-                    + "you have run 'configure_unit_tests.sh'. Error: ";
-            try {
-                stream = assets.open("config.json");
-                String string = Utility.readStreamToString(stream);
-
-                JSONTokener tokener = new JSONTokener(string);
-                Object obj = tokener.nextValue();
-                if (!(obj instanceof JSONObject)) {
-                    fail(errorMessage + "could not deserialize a JSONObject");
-                }
-                JSONObject jsonObject = (JSONObject) obj;
-
-                applicationId = jsonObject.optString("applicationId");
-                applicationSecret = jsonObject.optString("applicationSecret");
-
-                if (Utility.isNullOrEmpty(applicationId) || Utility.isNullOrEmpty(applicationSecret)) {
-                    fail(errorMessage + "one or both config values are missing");
-                }
-
-                TestSession.setTestApplicationId(applicationId);
-                TestSession.setTestApplicationSecret(applicationSecret);
-            } catch (IOException e) {
-                fail(errorMessage + e.toString());
-            } catch (JSONException e) {
-                fail(errorMessage + e.toString());
-            } finally {
-                if (stream != null) {
-                    try {
-                        stream.close();
-                    } catch (IOException e) {
-                        fail(errorMessage + e.toString());
-                    }
-                }
-            }
-        }
-    }
-
-    protected void openSession(Activity activity, TestSession session) {
-        final TestBlocker blocker = getTestBlocker();
-        openSession(activity, session, blocker);
-    }
-
-    protected void openSession(Activity activity, TestSession session, final TestBlocker blocker) {
-        Session.OpenRequest openRequest = new Session.OpenRequest(activity).
-                setCallback(new Session.StatusCallback() {
-                    boolean signaled = false;
-
-                    @Override
-                    public void call(Session session, SessionState state, Exception exception) {
-                        if (exception != null) {
-                            Log.w(TAG,
-                                    "openSession: received an error opening session: " + exception.toString());
-                        }
-                        assertTrue(exception == null);
-                        // Only signal once, or we might screw up the count on the blocker.
-                        if (!signaled) {
-                            blocker.signal();
-                            signaled = true;
-                        }
-                    }
-                });
-
-        session.openForRead(openRequest);
-        waitAndAssertSuccess(blocker, 1);
-    }
-
-    protected void setUp() throws Exception {
-        super.setUp();
-
-        // Make sure we have read application ID and secret.
-        readApplicationIdAndSecret();
-
-        // These are useful for debugging unit test failures.
-        Settings.addLoggingBehavior(LoggingBehaviors.REQUESTS);
-        Settings.addLoggingBehavior(LoggingBehaviors.INCLUDE_ACCESS_TOKENS);
-
-        // We want the UI thread to be in StrictMode to catch any violations.
-        turnOnStrictModeForUiThread();
-    }
-
-    protected void tearDown() throws Exception {
-        super.tearDown();
-
-        if (testBlocker != null) {
-            testBlocker.quit();
-        }
-    }
-
-    interface GraphObjectPostResult extends GraphObject {
-        String getId();
-    }
-
-    protected GraphObject getAndAssert(Session session, String id) {
-        Request request = new Request(session, id);
-        Response response = request.executeAndWait();
-        assertNotNull(response);
-
-        assertNull(response.getError());
-
-        GraphObject result = response.getGraphObject();
-        assertNotNull(result);
-
-        return result;
-    }
-
-    protected GraphObject postGetAndAssert(Session session, String path, GraphObject graphObject) {
-        Request request = Request.newPostRequest(session, path, graphObject, null);
-        Response response = request.executeAndWait();
-        assertNotNull(response);
-
-        assertNull(response.getError());
-
-        GraphObjectPostResult result = response.getGraphObjectAs(GraphObjectPostResult.class);
-        assertNotNull(result);
-        assertNotNull(result.getId());
-
-        return getAndAssert(session, result.getId());
-    }
-
-    protected void setBatchApplicationIdForTestApp() {
-        String appId = TestSession.getTestApplicationId();
-        Request.setDefaultBatchApplicationId(appId);
-    }
-
-    protected <U extends GraphObject> U batchCreateAndGet(Session session, String graphPath, GraphObject graphObject,
-            String fields, Class<U> resultClass) {
-        Request create = Request.newPostRequest(session, graphPath, graphObject, new ExpectSuccessCallback());
-        create.setBatchEntryName("create");
-        Request get = Request.newGraphPathRequest(session, "{result=create:$.id}", new ExpectSuccessCallback());
-        if (fields != null) {
-            Bundle parameters = new Bundle();
-            parameters.putString("fields", fields);
-            get.setParameters(parameters);
-        }
-
-        return batchPostAndGet(create, get, resultClass);
-    }
-
-    protected <U extends GraphObject> U batchUpdateAndGet(Session session, String graphPath, GraphObject graphObject,
-            String fields, Class<U> resultClass) {
-        Request update = Request.newPostRequest(session, graphPath, graphObject, new ExpectSuccessCallback());
-        Request get = Request.newGraphPathRequest(session, graphPath, new ExpectSuccessCallback());
-        if (fields != null) {
-            Bundle parameters = new Bundle();
-            parameters.putString("fields", fields);
-            get.setParameters(parameters);
-        }
-
-        return batchPostAndGet(update, get, resultClass);
-    }
-
-    protected <U extends GraphObject> U batchPostAndGet(Request post, Request get, Class<U> resultClass) {
-        List<Response> responses = Request.executeBatchAndWait(post, get);
-        assertEquals(2, responses.size());
-
-        U resultGraphObject = responses.get(1).getGraphObjectAs(resultClass);
-        assertNotNull(resultGraphObject);
-        return resultGraphObject;
-    }
-
-    protected GraphObject createStatusUpdate() {
-        GraphObject statusUpdate = GraphObject.Factory.create();
-        String message = String.format(
-                "Check out my awesome new status update posted at: %s. Some chars for you: +\"[]:,", new Date());
-        statusUpdate.setProperty("message", message);
-        return statusUpdate;
-    }
-
-    protected Bitmap createTestBitmap(int size) {
-        Bitmap image = Bitmap.createBitmap(size, size, Bitmap.Config.RGB_565);
-        image.eraseColor(Color.BLUE);
-        return image;
-    }
-
-    protected void issueFriendRequest(TestSession session, String targetUserId) {
-        String graphPath = "me/friends/" + targetUserId;
-        Request request = Request.newPostRequest(session, graphPath, null, null);
-        Response response = request.executeAndWait();
-        // We will get a 400 error if the users are already friends.
-        FacebookRequestError error = response.getError();
-        assertTrue(error == null || error.getRequestStatusCode() == 400);
-    }
-
-    protected void makeTestUsersFriends(TestSession session1, TestSession session2) {
-        issueFriendRequest(session1, session2.getTestUserId());
-        issueFriendRequest(session2, session1.getTestUserId());
-    }
-
-    protected void assertNoErrors(List<Response> responses) {
-        for (int i = 0; i < responses.size(); ++i) {
-            Response response = responses.get(i);
-            assertNotNull(response);
-            assertNull(response.getError());
-        }
-    }
-
-    protected File createTempFileFromAsset(String assetPath) throws IOException {
-        InputStream inputStream = null;
-        FileOutputStream outStream = null;
-
-        try {
-            AssetManager assets = getInstrumentation().getContext().getResources().getAssets();
-            inputStream = assets.open(assetPath);
-
-            File outputDir = getActivity().getCacheDir(); // context being the Activity pointer
-            File outputFile = File.createTempFile("prefix", assetPath, outputDir);
-            outStream = new FileOutputStream(outputFile);
-
-            final int bufferSize = 1024 * 2;
-            byte[] buffer = new byte[bufferSize];
-            int n = 0;
-            while ((n = inputStream.read(buffer)) != -1) {
-                outStream.write(buffer, 0, n);
-            }
-
-            return outputFile;
-        } finally {
-            Utility.closeQuietly(outStream);
-            Utility.closeQuietly(inputStream);
-        }
-    }
-
-    protected void runOnBlockerThread(final Runnable runnable, boolean waitForCompletion) {
-        Runnable runnableToPost = runnable;
-        final ConditionVariable condition = waitForCompletion ? new ConditionVariable(!waitForCompletion) : null;
-
-        if (waitForCompletion) {
-            runnableToPost = new Runnable() {
-                @Override
-                public void run() {
-                    runnable.run();
-                    condition.open();
-                }
-            };
-        }
-
-        TestBlocker blocker = getTestBlocker();
-        Handler handler = blocker.getHandler();
-        handler.post(runnableToPost);
-
-        if (waitForCompletion) {
-            boolean success = condition.block(10000);
-            assertTrue(success);
-        }
-    }
-
-    protected void closeBlockerAndAssertSuccess() {
-        TestBlocker blocker = getTestBlocker();
-        testBlocker = null;
-
-        blocker.quit();
-
-        boolean joined = false;
-        while (!joined) {
-            try {
-                blocker.join();
-                joined = true;
-            } catch (InterruptedException e) {
-            }
-        }
-
-        try {
-            blocker.assertSuccess();
-        } catch (Exception e) {
-            fail(e.toString());
-        }
-    }
-
-    protected TestRequestAsyncTask createAsyncTaskOnUiThread(final Request... requests) throws Throwable {
-        final ArrayList<TestRequestAsyncTask> result = new ArrayList<TestRequestAsyncTask>();
-        runTestOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                result.add(new TestRequestAsyncTask(requests));
-            }
-        });
-        return result.isEmpty() ? null : result.get(0);
-    }
-
-
-    /*
-     * Classes and helpers related to asynchronous requests.
-     */
-
-    // A subclass of RequestAsyncTask that knows how to interact with TestBlocker to ensure that tests can wait
-    // on and assert success of async tasks.
-    protected class TestRequestAsyncTask extends RequestAsyncTask {
-        private final TestBlocker blocker = FacebookActivityTestCase.this.getTestBlocker();
-
-        public TestRequestAsyncTask(Request... requests) {
-            super(requests);
-        }
-
-        public TestRequestAsyncTask(List<Request> requests) {
-            super(requests);
-        }
-
-        public TestRequestAsyncTask(RequestBatch requests) {
-            super(requests);
-        }
-
-        public TestRequestAsyncTask(HttpURLConnection connection, Request... requests) {
-            super(connection, requests);
-        }
-
-        public TestRequestAsyncTask(HttpURLConnection connection, List<Request> requests) {
-            super(connection, requests);
-        }
-
-        public TestRequestAsyncTask(HttpURLConnection connection, RequestBatch requests) {
-            super(connection, requests);
-        }
-
-        public final TestBlocker getBlocker() {
-            return blocker;
-        }
-
-        public final Exception getThrowable() {
-            return getException();
-        }
-
-        protected void onPostExecute(List<Response> result) {
-            try {
-                super.onPostExecute(result);
-
-                if (getException() != null) {
-                    blocker.setException(getException());
-                }
-            } finally {
-                Log.d("TestRequestAsyncTask", "signaling blocker");
-                blocker.signal();
-            }
-        }
-
-        // In order to be able to block and accumulate exceptions, we want to ensure the async task is really
-        // being started on the blocker's thread, rather than the test's thread. Use this instead of calling
-        // execute directly in unit tests.
-        public void executeOnBlockerThread() {
-            ensureAsyncTaskLoaded();
-
-            Runnable runnable = new Runnable() {
-                public void run() {
-                    execute();
-                }
-            };
-            Handler handler = new Handler(blocker.getLooper());
-            handler.post(runnable);
-        }
-
-        private void ensureAsyncTaskLoaded() {
-            // Work around this issue on earlier frameworks: http://stackoverflow.com/a/7818839/782044
-            try {
-                runAndBlockOnUiThread(0, new Runnable() {
-                    @Override
-                    public void run() {
-                        try {
-                            Class.forName("android.os.AsyncTask");
-                        } catch (ClassNotFoundException e) {
-                        }
-                    }
-                });
-            } catch (Throwable throwable) {
-            }
-        }
-    }
-
-    // Provides an implementation of Request.Callback that will assert either success (no error) or failure (error)
-    // of a request, and allow derived classes to perform additional asserts.
-    protected class TestCallback implements Request.Callback {
-        private final TestBlocker blocker;
-        private final boolean expectSuccess;
-
-        public TestCallback(TestBlocker blocker, boolean expectSuccess) {
-            this.blocker = blocker;
-            this.expectSuccess = expectSuccess;
-        }
-
-        public TestCallback(boolean expectSuccess) {
-            this(FacebookActivityTestCase.this.getTestBlocker(), expectSuccess);
-        }
-
-        @Override
-        public void onCompleted(Response response) {
-            try {
-                // We expect to be called on the right thread.
-                if (Thread.currentThread() != blocker) {
-                    throw new FacebookException("Invalid thread " + Thread.currentThread().getId()
-                            + "; expected to be called on thread " + blocker.getId());
-                }
-
-                // We expect either success or failure.
-                if (expectSuccess && response.getError() != null) {
-                    throw response.getError().getException();
-                } else if (!expectSuccess && response.getError() == null) {
-                    throw new FacebookException("Expected failure case, received no error");
-                }
-
-                // Some tests may want more fine-grained control and assert additional conditions.
-                performAsserts(response);
-            } catch (Exception e) {
-                blocker.setException(e);
-            } finally {
-                // Tell anyone waiting on us that this callback was called.
-                blocker.signal();
-            }
-        }
-
-        protected void performAsserts(Response response) {
-        }
-    }
-
-    // A callback that will assert if the request resulted in an error.
-    protected class ExpectSuccessCallback extends TestCallback {
-        public ExpectSuccessCallback() {
-            super(true);
-        }
-    }
-
-    // A callback that will assert if the request did NOT result in an error.
-    protected class ExpectFailureCallback extends TestCallback {
-        public ExpectFailureCallback() {
-            super(false);
-        }
-    }
-
-    private AtomicBoolean strictModeOnForUiThread = new AtomicBoolean();
-    protected void turnOnStrictModeForUiThread() {
-        // We only ever need to do this once. If the boolean is true, we know that the next runnable
-        // posted to the UI thread will have strict mode on.
-        if (strictModeOnForUiThread.get() == false) {
-            try {
-                runTestOnUiThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        // Double-check whether we really need to still do this on the UI thread.
-                        if (strictModeOnForUiThread.compareAndSet(false, true)) {
-                            turnOnStrictModeForThisThread();
-                        }
-                    }
-                });
-            } catch (Throwable throwable) {
-            }
-        }
-    }
-
-    protected void turnOnStrictModeForThisThread() {
-        // We use reflection, because Instrumentation will complain about any references to StrictMode in API versions < 9
-        // when attempting to run the unit tests. No particular effort has been made to make this efficient, since we
-        // expect to call it just once.
-        try {
-            ClassLoader loader = Thread.currentThread().getContextClassLoader();
-            Class<?> strictModeClass = Class.forName("android.os.StrictMode", true, loader);
-            Class<?> threadPolicyClass = Class.forName("android.os.StrictMode$ThreadPolicy", true, loader);
-            Class<?> threadPolicyBuilderClass = Class.forName("android.os.StrictMode$ThreadPolicy$Builder", true,
-                    loader);
-
-            Object threadPolicyBuilder = threadPolicyBuilderClass.getConstructor().newInstance();
-            threadPolicyBuilder = threadPolicyBuilderClass.getMethod("detectAll").invoke(threadPolicyBuilder);
-            threadPolicyBuilder = threadPolicyBuilderClass.getMethod("penaltyDeath").invoke(threadPolicyBuilder);
-
-            Object threadPolicy = threadPolicyBuilderClass.getMethod("build").invoke(threadPolicyBuilder);
-            strictModeClass.getMethod("setThreadPolicy", threadPolicyClass).invoke(strictModeClass, threadPolicy);
-        } catch (Exception ex) {
-        }
-    }
-}
diff --git a/facebook/tests/src/com/facebook/FacebookRequestErrorTests.java b/facebook/tests/src/com/facebook/FacebookRequestErrorTests.java
deleted file mode 100644
index 64f7968a2..000000000
--- a/facebook/tests/src/com/facebook/FacebookRequestErrorTests.java
+++ /dev/null
@@ -1,143 +0,0 @@
-/**
- * Copyright 2012 Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-public class FacebookRequestErrorTests extends FacebookTestCase {
-    public static final String ERROR_SINGLE_RESPONSE =
-            "{\n" +
-            "  \"error\": {\n" +
-            "    \"message\": \"Unknown path components: /unknown\",\n" +
-            "    \"type\": \"OAuthException\",\n" +
-            "    \"code\": 2500\n" +
-            "  }\n" +
-            "}";
-
-    public static final String ERROR_BATCH_RESPONSE =
-            "[\n" +
-            "  {\n" +
-            "    \"headers\": [\n" +
-            "      {\n" +
-            "        \"value\": \"*\",\n" +
-            "        \"name\": \"Access-Control-Allow-Origin\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"no-store\",\n" +
-            "        \"name\": \"Cache-Control\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"close\",\n" +
-            "        \"name\": \"Connection\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"text\\/javascript; charset=UTF-8\",\n" +
-            "        \"name\": \"Content-Type\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"Sat, 01 Jan 2000 00:00:00 GMT\",\n" +
-            "        \"name\": \"Expires\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"no-cache\",\n" +
-            "        \"name\": \"Pragma\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"OAuth \\\"Facebook Platform\\\" \\\"invalid_request\\\" \\\"An active access token must be used to query information about the current user.\\\"\",\n" +
-            "        \"name\": \"WWW-Authenticate\"\n" +
-            "      }\n" +
-            "    ],\n" +
-            "    \"body\": \"{\\\"error\\\":{\\\"message\\\":\\\"An active access token must be used to query information about the current user.\\\",\\\"type\\\":\\\"OAuthException\\\",\\\"code\\\":2500}}\",\n" +
-            "    \"code\": 400\n" +
-            "  },\n" +
-            "  {\n" +
-            "    \"headers\": [\n" +
-            "      {\n" +
-            "        \"value\": \"*\",\n" +
-            "        \"name\": \"Access-Control-Allow-Origin\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"no-store\",\n" +
-            "        \"name\": \"Cache-Control\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"close\",\n" +
-            "        \"name\": \"Connection\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"text\\/javascript; charset=UTF-8\",\n" +
-            "        \"name\": \"Content-Type\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"Sat, 01 Jan 2000 00:00:00 GMT\",\n" +
-            "        \"name\": \"Expires\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"no-cache\",\n" +
-            "        \"name\": \"Pragma\"\n" +
-            "      },\n" +
-            "      {\n" +
-            "        \"value\": \"OAuth \\\"Facebook Platform\\\" \\\"invalid_request\\\" \\\"An active access token must be used to query information about the current user.\\\"\",\n" +
-            "        \"name\": \"WWW-Authenticate\"\n" +
-            "      }\n" +
-            "    ],\n" +
-            "    \"body\": \"{\\\"error\\\":{\\\"message\\\":\\\"An active access token must be used to query information about the current user.\\\",\\\"type\\\":\\\"OAuthException\\\",\\\"code\\\":2500}}\",\n" +
-            "    \"code\": 400\n" +
-            "  }\n" +
-            "]";
-
-    public void testSingleRequestWithoutBody() throws JSONException {
-        JSONObject withStatusCode = new JSONObject();
-        withStatusCode.put("code", 400);
-        FacebookRequestError error =
-                FacebookRequestError.checkResponseAndCreateError(withStatusCode, withStatusCode, null);
-        assertNotNull(error);
-        assertEquals(400, error.getRequestStatusCode());
-    }
-
-    public void testSingleRequestWithBody() throws JSONException {
-        JSONObject originalResponse = new JSONObject(ERROR_SINGLE_RESPONSE);
-        JSONObject withStatusCodeAndBody = new JSONObject();
-        withStatusCodeAndBody.put("code", 400);
-        withStatusCodeAndBody.put("body", originalResponse);
-        FacebookRequestError error =
-                FacebookRequestError.checkResponseAndCreateError(withStatusCodeAndBody, originalResponse, null);
-        assertNotNull(error);
-        assertEquals(400, error.getRequestStatusCode());
-        assertEquals("Unknown path components: /unknown", error.getErrorMessage());
-        assertEquals("OAuthException", error.getErrorType());
-        assertEquals(2500, error.getErrorCode());
-        assertTrue(error.getBatchRequestResult() instanceof JSONObject);
-    }
-
-    public void testBatchRequest() throws JSONException {
-        JSONArray batchResponse = new JSONArray(ERROR_BATCH_RESPONSE);
-        assertEquals(2, batchResponse.length());
-        JSONObject firstResponse = (JSONObject) batchResponse.get(0);
-        FacebookRequestError error =
-                FacebookRequestError.checkResponseAndCreateError(firstResponse, batchResponse, null);
-        assertNotNull(error);
-        assertEquals(400, error.getRequestStatusCode());
-        assertEquals("An active access token must be used to query information about the current user.",
-                error.getErrorMessage());
-        assertEquals("OAuthException", error.getErrorType());
-        assertEquals(2500, error.getErrorCode());
-        assertTrue(error.getBatchRequestResult() instanceof  JSONArray);
-    }
-}
diff --git a/facebook/tests/src/com/facebook/FacebookTestCase.java b/facebook/tests/src/com/facebook/FacebookTestCase.java
deleted file mode 100644
index 9900de8a3..000000000
--- a/facebook/tests/src/com/facebook/FacebookTestCase.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/**
- * Copyright 2012 Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.app.Activity;
-
-public class FacebookTestCase extends FacebookActivityTestCase<FacebookTestCase.FacebookTestActivity> {
-    public FacebookTestCase() {
-        super(FacebookTestCase.FacebookTestActivity.class);
-        Settings.addLoggingBehavior(LoggingBehaviors.REQUESTS);
-        Settings.addLoggingBehavior(LoggingBehaviors.INCLUDE_RAW_RESPONSES);
-    }
-
-    public static class FacebookTestActivity extends Activity {
-    }
-}
-
diff --git a/facebook/tests/src/com/facebook/GraphRequestTests.java b/facebook/tests/src/com/facebook/GraphRequestTests.java
deleted file mode 100644
index 34456442f..000000000
--- a/facebook/tests/src/com/facebook/GraphRequestTests.java
+++ /dev/null
@@ -1,89 +0,0 @@
-/**
- * Copyright 2012 Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.facebook;
-
-import android.test.suitebuilder.annotation.LargeTest;
-import com.facebook.model.GraphObject;
-
-import java.util.Date;
-
-// These tests relate to serialization/de-serialization of graph objects in a variety of scenarios, rather than
-// to the underlying request/batch plumbing.
-public class GraphRequestTests extends FacebookTestCase {
-
-    @LargeTest
-    public void testCommentRoundTrip() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        GraphObject status = createStatusUpdate();
-        GraphObject createdStatus = batchCreateAndGet(session, "me/feed", status, null, GraphObject.class);
-        String statusID = (String) createdStatus.getProperty("id");
-
-        GraphObject comment = GraphObject.Factory.create();
-        final String commentMessage = "It truly is a wonderful status update.";
-        comment.setProperty("message", commentMessage);
-
-        GraphObject createdComment1 = batchCreateAndGet(session, statusID + "/comments", comment, null,
-                GraphObject.class);
-        assertNotNull(createdComment1);
-
-        String comment1ID = (String) createdComment1.getProperty("id");
-        String comment1Message = (String) createdComment1.getProperty("message");
-        assertNotNull(comment1ID);
-        assertNotNull(comment1Message);
-        assertEquals(commentMessage, comment1Message);
-
-        // Try posting the same comment to the same status update. We need to clear its ID first.
-        createdComment1.removeProperty("id");
-        GraphObject createdComment2 = batchCreateAndGet(session, statusID + "/comments", createdComment1, null,
-                GraphObject.class);
-        assertNotNull(createdComment2);
-
-        String comment2ID = (String) createdComment2.getProperty("id");
-        String comment2Message = (String) createdComment2.getProperty("message");
-        assertNotNull(comment2ID);
-        assertFalse(comment1ID.equals(comment2ID));
-        assertNotNull(comment2Message);
-        assertEquals(commentMessage, comment2Message);
-    }
-
-    @LargeTest
-    public void testEventRoundTrip() {
-        TestSession session = openTestSessionWithSharedUserAndPermissions(null, "create_event");
-
-        GraphObject event = GraphObject.Factory.create();
-        // Android emulators tend to not have the right date/time. To avoid issues with posting events in the past
-        // or too far in the future, we use a constant year. This test will break in 2030, angering our robot overlords.
-        Date startTime = new Date(130, 2, 17, 12, 34, 56);
-        event.setProperty("name", "My awesome St. Patrick's Day party on " + startTime.toString());
-        final String eventDescription = "This is a great event. You should all come.";
-        event.setProperty("description", eventDescription);
-        Date endTime = new Date(startTime.getTime() + 3600 * 1000);
-        event.setProperty("start_time", startTime);
-        event.setProperty("end_time", endTime);
-        event.setProperty("location", "My house");
-
-        GraphObject event1 = batchCreateAndGet(session, "me/events", event, null, GraphObject.class);
-        assertNotNull(event1);
-        assertEquals(eventDescription, event1.getProperty("description"));
-
-        event1.removeProperty("id");
-        GraphObject event2 = batchCreateAndGet(session, "me/events", event1, null, GraphObject.class);
-        assertNotNull(event2);
-        assertEquals(eventDescription, event2.getProperty("description"));
-    }
-
-}
diff --git a/facebook/tests/src/com/facebook/RequestTests.java b/facebook/tests/src/com/facebook/RequestTests.java
deleted file mode 100644
index b78b47cf2..000000000
--- a/facebook/tests/src/com/facebook/RequestTests.java
+++ /dev/null
@@ -1,614 +0,0 @@
-/**
- * Copyright 2012 Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.facebook;
-
-import android.graphics.Bitmap;
-import android.location.Location;
-import android.net.Uri;
-import android.os.Bundle;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import com.facebook.model.*;
-
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.net.HttpURLConnection;
-import java.net.URISyntaxException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-public class RequestTests extends FacebookTestCase {
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCreateRequest() {
-        Request request = new Request();
-        assertTrue(request != null);
-        assertEquals(HttpMethod.GET, request.getHttpMethod());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCreatePostRequest() {
-        GraphObject graphObject = GraphObject.Factory.create();
-        Request request = Request.newPostRequest(null, "me/statuses", graphObject, null);
-        assertTrue(request != null);
-        assertEquals(HttpMethod.POST, request.getHttpMethod());
-        assertEquals("me/statuses", request.getGraphPath());
-        assertEquals(graphObject, request.getGraphObject());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCreateMeRequest() {
-        Request request = Request.newMeRequest(null, null);
-        assertTrue(request != null);
-        assertEquals(HttpMethod.GET, request.getHttpMethod());
-        assertEquals("me", request.getGraphPath());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCreateMyFriendsRequest() {
-        Request request = Request.newMyFriendsRequest(null, null);
-        assertTrue(request != null);
-        assertEquals(HttpMethod.GET, request.getHttpMethod());
-        assertEquals("me/friends", request.getGraphPath());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCreateUploadPhotoRequest() {
-        Bitmap image = Bitmap.createBitmap(128, 128, Bitmap.Config.ALPHA_8);
-
-        Request request = Request.newUploadPhotoRequest(null, image, null);
-        assertTrue(request != null);
-
-        Bundle parameters = request.getParameters();
-        assertTrue(parameters != null);
-
-        assertTrue(parameters.containsKey("picture"));
-        assertEquals(image, parameters.getParcelable("picture"));
-        assertEquals("me/photos", request.getGraphPath());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCreatePlacesSearchRequest() {
-        Location location = new Location("");
-        location.setLatitude(47.6204);
-        location.setLongitude(-122.3491);
-
-        Request request = Request.newPlacesSearchRequest(null, location, 1000, 50, null, null);
-
-        assertTrue(request != null);
-        assertEquals(HttpMethod.GET, request.getHttpMethod());
-        assertEquals("search", request.getGraphPath());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCreatePlacesSearchRequestRequiresLocationOrSearchText() {
-        try {
-            Request request = Request.newPlacesSearchRequest(null, null, 1000, 50, null, null);
-
-            assertTrue(request != null);
-            assertEquals(HttpMethod.GET, request.getHttpMethod());
-            assertEquals("search", request.getGraphPath());
-
-            fail("expected exception");
-        } catch (FacebookException exception) {
-            // Success
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCreatePlacesSearchRequestRequiresLocation() {
-        try {
-            Request.newPlacesSearchRequest(null, null, 1000, 50, null, null);
-            fail("expected NullPointerException");
-        } catch (FacebookException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testSetHttpMethodToNilGivesDefault() {
-        Request request = new Request();
-        assertEquals(HttpMethod.GET, request.getHttpMethod());
-
-        request.setHttpMethod(null);
-        assertEquals(HttpMethod.GET, request.getHttpMethod());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testExecuteBatchWithNullRequestsThrows() {
-        try {
-            Request.executeBatchAndWait((Request[]) null);
-            fail("expected NullPointerException");
-        } catch (NullPointerException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testExecuteBatchWithZeroRequestsThrows() {
-        try {
-            Request.executeBatchAndWait(new Request[]{});
-            fail("expected IllegalArgumentException");
-        } catch (IllegalArgumentException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testExecuteBatchWithNullRequestThrows() {
-        try {
-            Request.executeBatchAndWait(new Request[]{null});
-            fail("expected NullPointerException");
-        } catch (NullPointerException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testToHttpConnectionWithNullRequestsThrows() {
-        try {
-            Request.toHttpConnection((Request[]) null);
-            fail("expected NullPointerException");
-        } catch (NullPointerException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testToHttpConnectionWithZeroRequestsThrows() {
-        try {
-            Request.toHttpConnection(new Request[]{});
-            fail("expected IllegalArgumentException");
-        } catch (IllegalArgumentException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testToHttpConnectionWithNullRequestThrows() {
-        try {
-            Request.toHttpConnection(new Request[]{null});
-            fail("expected NullPointerException");
-        } catch (NullPointerException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testSingleGetToHttpRequest() throws Exception {
-        Request requestMe = new Request(null, "TourEiffel");
-        HttpURLConnection connection = Request.toHttpConnection(requestMe);
-
-        assertTrue(connection != null);
-
-        assertEquals("GET", connection.getRequestMethod());
-        assertEquals("/TourEiffel", connection.getURL().getPath());
-
-        assertTrue(connection.getRequestProperty("User-Agent").startsWith("FBAndroidSDK"));
-
-        Uri uri = Uri.parse(connection.getURL().toString());
-        assertEquals("android", uri.getQueryParameter("sdk"));
-        assertEquals("json", uri.getQueryParameter("format"));
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExecuteSingleGet() {
-        Request request = new Request(null, "TourEiffel");
-        Response response = request.executeAndWait();
-
-        assertTrue(response != null);
-        assertTrue(response.getError() == null);
-        assertTrue(response.getGraphObject() != null);
-
-        GraphPlace graphPlace = response.getGraphObjectAs(GraphPlace.class);
-        assertEquals("Paris", graphPlace.getLocation().getCity());
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExecuteSingleGetUsingHttpURLConnection() throws IOException {
-        Request request = new Request(null, "TourEiffel");
-        HttpURLConnection connection = Request.toHttpConnection(request);
-
-        List<Response> responses = Request.executeConnectionAndWait(connection, Arrays.asList(new Request[]{request}));
-        assertNotNull(responses);
-        assertEquals(1, responses.size());
-
-        Response response = responses.get(0);
-
-        assertTrue(response != null);
-        assertTrue(response.getError() == null);
-        assertTrue(response.getGraphObject() != null);
-
-        GraphPlace graphPlace = response.getGraphObjectAs(GraphPlace.class);
-        assertEquals("Paris", graphPlace.getLocation().getCity());
-
-        // Make sure calling code can still access HTTP headers and call disconnect themselves.
-        int code = connection.getResponseCode();
-        assertEquals(200, code);
-        assertTrue(connection.getHeaderFields().keySet().contains("Content-Length"));
-        connection.disconnect();
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testFacebookErrorResponseCreatesError() {
-        Request request = new Request(null, "somestringthatshouldneverbeavalidfobjectid");
-        Response response = request.executeAndWait();
-
-        assertTrue(response != null);
-
-        FacebookRequestError error = response.getError();
-        assertNotNull(error);
-        FacebookException exception = error.getException();
-        assertNotNull(exception);
-
-        assertTrue(exception instanceof FacebookServiceException);
-        assertNotNull(error.getErrorType());
-        assertTrue(error.getErrorCode() != FacebookRequestError.INVALID_ERROR_CODE);
-        assertNotNull(error.getRequestResultBody());
-    }
-
-    @LargeTest
-    public void testFacebookSuccessResponseWithErrorCodeCreatesError() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        Request request = Request.newRestRequest(session, "auth.extendSSOAccessToken", null, null);
-        assertNotNull(request);
-
-        // Because TestSession access tokens were not created via SSO, we expect to get an error from the service,
-        // but with a 200 (success) code.
-        Response response = request.executeAndWait();
-
-        assertTrue(response != null);
-
-        FacebookRequestError error = response.getError();
-        assertNotNull(error);
-
-        assertTrue(error.getException() instanceof FacebookServiceException);
-        assertTrue(error.getErrorCode() != FacebookRequestError.INVALID_ERROR_CODE);
-        assertNotNull(error.getRequestResultBody());
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testRequestWithUnopenedSessionFails() {
-        TestSession session = getTestSessionWithSharedUser(null);
-        Request request = new Request(session, "me");
-        Response response = request.executeAndWait();
-
-        assertNotNull(response.getError());
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExecuteRequestMe() {
-        TestSession session = openTestSessionWithSharedUser();
-        Request request = Request.newMeRequest(session, null);
-        Response response = request.executeAndWait();
-
-        validateMeResponse(session, response);
-    }
-
-    static void validateMeResponse(TestSession session, Response response) {
-        assertNull(response.getError());
-
-        GraphUser me = response.getGraphObjectAs(GraphUser.class);
-        assertNotNull(me);
-        assertEquals(session.getTestUserId(), me.getId());
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExecuteMyFriendsRequest() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        Request request = Request.newMyFriendsRequest(session, null);
-        Response response = request.executeAndWait();
-
-        validateMyFriendsResponse(session, response);
-    }
-
-    static void validateMyFriendsResponse(TestSession session, Response response) {
-        assertNotNull(response);
-
-        assertNull(response.getError());
-
-        GraphMultiResult graphResult = response.getGraphObjectAs(GraphMultiResult.class);
-        assertNotNull(graphResult);
-
-        List<GraphObject> results = graphResult.getData();
-        assertNotNull(results);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExecutePlaceRequest() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        Location location = new Location("");
-        location.setLatitude(47.6204);
-        location.setLongitude(-122.3491);
-
-        Request request = Request.newPlacesSearchRequest(session, location, 5, 5, null, null);
-        Response response = request.executeAndWait();
-        assertNotNull(response);
-
-        assertNull(response.getError());
-
-        GraphMultiResult graphResult = response.getGraphObjectAs(GraphMultiResult.class);
-        assertNotNull(graphResult);
-
-        List<GraphObject> results = graphResult.getData();
-        assertNotNull(results);
-    }
-
-    @LargeTest
-    public void testExecuteUploadPhoto() {
-        TestSession session = openTestSessionWithSharedUser();
-        Bitmap image = createTestBitmap(128);
-
-        Request request = Request.newUploadPhotoRequest(session, image, null);
-        Response response = request.executeAndWait();
-        assertNotNull(response);
-
-        assertNull(response.getError());
-
-        GraphObject result = response.getGraphObject();
-        assertNotNull(result);
-    }
-
-    @LargeTest
-    public void testExecuteUploadPhotoViaFile() throws IOException {
-        File outputFile = null;
-        FileOutputStream outStream = null;
-
-        try {
-            TestSession session = openTestSessionWithSharedUser();
-            Bitmap image = createTestBitmap(128);
-
-            File outputDir = getActivity().getCacheDir(); // context being the Activity pointer
-            outputFile = File.createTempFile("prefix", "extension", outputDir);
-
-            outStream = new FileOutputStream(outputFile);
-            image.compress(Bitmap.CompressFormat.PNG, 100, outStream);
-            outStream.close();
-            outStream = null;
-
-            Request request = Request.newUploadPhotoRequest(session, outputFile, null);
-            Response response = request.executeAndWait();
-            assertNotNull(response);
-
-            assertNull(response.getError());
-
-            GraphObject result = response.getGraphObject();
-            assertNotNull(result);
-        } finally {
-            if (outStream != null) {
-                outStream.close();
-            }
-            if (outputFile != null) {
-                outputFile.delete();
-            }
-        }
-    }
-
-    @LargeTest
-    public void testUploadVideoFile() throws IOException, URISyntaxException {
-        File tempFile = null;
-        try {
-            TestSession session = openTestSessionWithSharedUser();
-            tempFile = createTempFileFromAsset("DarkScreen.mov");
-
-            Request request = Request.newUploadVideoRequest(session, tempFile, null);
-            Response response = request.executeAndWait();
-            assertNotNull(response);
-
-            assertNull(response.getError());
-
-            GraphObject result = response.getGraphObject();
-            assertNotNull(result);
-        } catch(Exception ex) {
-            return;
-        } finally {
-            if (tempFile != null) {
-                tempFile.delete();
-            }
-        }
-    }
-
-    @LargeTest
-    public void testPostStatusUpdate() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        GraphObject statusUpdate = createStatusUpdate();
-
-        GraphObject retrievedStatusUpdate = postGetAndAssert(session, "me/feed", statusUpdate);
-
-        assertEquals(statusUpdate.getProperty("message"), retrievedStatusUpdate.getProperty("message"));
-    }
-
-    @LargeTest
-    public void testRestMethodGetUser() {
-        TestSession session = openTestSessionWithSharedUser();
-        String testUserId = session.getTestUserId();
-
-        Bundle parameters = new Bundle();
-        parameters.putString("uids", testUserId);
-        parameters.putString("fields", "uid,name");
-
-        Request request = Request.newRestRequest(session, "users.getInfo", parameters, null);
-        Response response = request.executeAndWait();
-        assertNotNull(response);
-
-        GraphObjectList<GraphObject> graphObjects = response.getGraphObjectList();
-        assertNotNull(graphObjects);
-        assertEquals(1, graphObjects.size());
-
-        GraphObject user = graphObjects.get(0);
-        assertNotNull(user);
-        assertEquals(testUserId, user.getProperty("uid").toString());
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testCallbackIsCalled() {
-        Request request = new Request(null, "4");
-
-        final ArrayList<Boolean> calledBack = new ArrayList<Boolean>();
-        request.setCallback(new Request.Callback() {
-            @Override
-            public void onCompleted(Response response) {
-                calledBack.add(true);
-            }
-        });
-
-        Response response = request.executeAndWait();
-        assertNotNull(response);
-        assertTrue(calledBack.size() == 1);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testBatchTimeoutIsApplied() {
-        Request request = new Request(null, "me");
-        RequestBatch batch = new RequestBatch(request);
-
-        // We assume 1 ms is short enough to fail
-        batch.setTimeout(1);
-
-        List<Response> responses = Request.executeBatchAndWait(batch);
-        assertNotNull(responses);
-        assertTrue(responses.size() == 1);
-        Response response = responses.get(0);
-        assertNotNull(response);
-        assertNotNull(response.getError());
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testBatchTimeoutCantBeNegative() {
-        try {
-            RequestBatch batch = new RequestBatch();
-            batch.setTimeout(-1);
-            fail();
-        } catch (IllegalArgumentException ex) {
-        }
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testCantSetBothGraphPathAndRestMethod() {
-        Request request = new Request();
-        request.setGraphPath("me");
-        request.setRestMethod("amethod");
-        request.setCallback(new ExpectFailureCallback());
-
-        TestRequestAsyncTask task = new TestRequestAsyncTask(request);
-        task.executeOnBlockerThread();
-
-        waitAndAssertSuccess(1);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testClosedSessionDoesntAppendAccessToken() {
-        TestSession session = openTestSessionWithSharedUser();
-        session.close();
-        Request request = new Request(session, "me", null, null, new ExpectFailureCallback());
-
-        TestRequestAsyncTask task = new TestRequestAsyncTask(request);
-        task.executeOnBlockerThread();
-
-        waitAndAssertSuccess(1);
-    }
-
-    private final Location SEATTLE_LOCATION = new Location("") {
-        {
-            setLatitude(47.6097);
-            setLongitude(-122.3331);
-        }
-    };
-
-    public void testPaging() {
-        TestSession session = openTestSessionWithSharedUser();
-        final List<GraphPlace> returnedPlaces = new ArrayList<GraphPlace>();
-        Request request = Request.newPlacesSearchRequest(session, SEATTLE_LOCATION, 1000, 5, null, new Request.GraphPlaceListCallback() {
-            @Override
-            public void onCompleted(List<GraphPlace> places, Response response) {
-                returnedPlaces.addAll(places);
-            }
-        });
-        Response response = request.executeAndWait();
-
-        assertNull(response.getError());
-        assertNotNull(response.getGraphObject());
-        assertNotSame(0, returnedPlaces.size());
-
-        returnedPlaces.clear();
-
-        Request nextRequest = response.getRequestForPagedResults(Response.PagingDirection.NEXT);
-        assertNotNull(nextRequest);
-
-        nextRequest.setCallback(request.getCallback());
-        response = nextRequest.executeAndWait();
-
-        assertNull(response.getError());
-        assertNotNull(response.getGraphObject());
-        assertNotSame(0, returnedPlaces.size());
-
-        returnedPlaces.clear();
-
-        Request previousRequest = response.getRequestForPagedResults(Response.PagingDirection.PREVIOUS);
-        assertNotNull(previousRequest);
-
-        previousRequest.setCallback(request.getCallback());
-        response = previousRequest.executeAndWait();
-
-        assertNull(response.getError());
-        assertNotNull(response.getGraphObject());
-        assertNotSame(0, returnedPlaces.size());
-    }
-}
diff --git a/facebook/tests/src/com/facebook/SessionTests.java b/facebook/tests/src/com/facebook/SessionTests.java
deleted file mode 100644
index 84c081ae5..000000000
--- a/facebook/tests/src/com/facebook/SessionTests.java
+++ /dev/null
@@ -1,663 +0,0 @@
-/**
- * Copyright 2012 Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.content.IntentFilter;
-import android.support.v4.content.LocalBroadcastManager;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Date;
-import java.util.List;
-
-public class SessionTests extends SessionTestsBase {
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testFailNullArguments() {
-        try {
-            new Session(null);
-
-            // Should not get here
-            assertFalse(true);
-        } catch (NullPointerException e) {
-            // got expected exception
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testActiveSessionChangeRegistration() {
-        final WaitForBroadcastReceiver receiver0 = new WaitForBroadcastReceiver();
-        final WaitForBroadcastReceiver receiver1 = new WaitForBroadcastReceiver();
-        final WaitForBroadcastReceiver receiver2 = new WaitForBroadcastReceiver();
-        final LocalBroadcastManager broadcastManager = LocalBroadcastManager.getInstance(getActivity());
-
-        try {
-            // Register these on the blocker thread so they will send
-            // notifications there as well. The notifications need to be on a
-            // different thread than the progress.
-            Runnable initialize0 = new Runnable() {
-                @Override
-                public void run() {
-                    broadcastManager.registerReceiver(receiver0, getActiveSessionAllFilter());
-
-                    broadcastManager.registerReceiver(receiver1,
-                            getActiveSessionFilter(Session.ACTION_ACTIVE_SESSION_SET));
-                    broadcastManager.registerReceiver(receiver1,
-                            getActiveSessionFilter(Session.ACTION_ACTIVE_SESSION_OPENED));
-                    broadcastManager.registerReceiver(receiver1,
-                            getActiveSessionFilter(Session.ACTION_ACTIVE_SESSION_CLOSED));
-
-                    broadcastManager.registerReceiver(receiver2,
-                            getActiveSessionFilter(Session.ACTION_ACTIVE_SESSION_OPENED));
-                    broadcastManager.registerReceiver(receiver2,
-                            getActiveSessionFilter(Session.ACTION_ACTIVE_SESSION_CLOSED));
-                }
-            };
-            runOnBlockerThread(initialize0, true);
-
-            // Verify all actions show up where they are expected
-            WaitForBroadcastReceiver.incrementExpectCounts(receiver0, receiver1, receiver2);
-            Session.postActiveSessionAction(Session.ACTION_ACTIVE_SESSION_OPENED);
-            WaitForBroadcastReceiver.waitForExpectedCalls(receiver0, receiver1, receiver2);
-
-            WaitForBroadcastReceiver.incrementExpectCounts(receiver0, receiver1, receiver2);
-            Session.postActiveSessionAction(Session.ACTION_ACTIVE_SESSION_CLOSED);
-            WaitForBroadcastReceiver.waitForExpectedCalls(receiver0, receiver1, receiver2);
-
-            WaitForBroadcastReceiver.incrementExpectCounts(receiver0, receiver1);
-            Session.postActiveSessionAction(Session.ACTION_ACTIVE_SESSION_SET);
-            WaitForBroadcastReceiver.waitForExpectedCalls(receiver0, receiver1);
-
-            receiver0.incrementExpectCount();
-            Session.postActiveSessionAction(Session.ACTION_ACTIVE_SESSION_UNSET);
-            receiver0.waitForExpectedCalls();
-
-            // Remove receiver1 and verify actions continue to show up where
-            // expected
-            broadcastManager.unregisterReceiver(receiver1);
-
-            WaitForBroadcastReceiver.incrementExpectCounts(receiver0, receiver2);
-            Session.postActiveSessionAction(Session.ACTION_ACTIVE_SESSION_OPENED);
-            WaitForBroadcastReceiver.waitForExpectedCalls(receiver0, receiver2);
-
-            WaitForBroadcastReceiver.incrementExpectCounts(receiver0, receiver2);
-            Session.postActiveSessionAction(Session.ACTION_ACTIVE_SESSION_CLOSED);
-            WaitForBroadcastReceiver.waitForExpectedCalls(receiver0, receiver2);
-
-            receiver0.incrementExpectCount();
-            Session.postActiveSessionAction(Session.ACTION_ACTIVE_SESSION_SET);
-            receiver0.waitForExpectedCalls();
-
-            receiver0.incrementExpectCount();
-            Session.postActiveSessionAction(Session.ACTION_ACTIVE_SESSION_UNSET);
-            receiver0.waitForExpectedCalls();
-
-            // Remove receiver0 and register receiver1 multiple times for one
-            // action
-            broadcastManager.unregisterReceiver(receiver0);
-
-            Runnable initialize1 = new Runnable() {
-                @Override
-                public void run() {
-                    broadcastManager.registerReceiver(receiver1,
-                            getActiveSessionFilter(Session.ACTION_ACTIVE_SESSION_OPENED));
-                    broadcastManager.registerReceiver(receiver1,
-                            getActiveSessionFilter(Session.ACTION_ACTIVE_SESSION_OPENED));
-                    broadcastManager.registerReceiver(receiver1,
-                            getActiveSessionFilter(Session.ACTION_ACTIVE_SESSION_OPENED));
-                }
-            };
-            runOnBlockerThread(initialize1, true);
-
-            receiver1.incrementExpectCount(3);
-            receiver2.incrementExpectCount();
-            Session.postActiveSessionAction(Session.ACTION_ACTIVE_SESSION_OPENED);
-            receiver1.waitForExpectedCalls();
-            receiver2.waitForExpectedCalls();
-
-            receiver2.incrementExpectCount();
-            Session.postActiveSessionAction(Session.ACTION_ACTIVE_SESSION_CLOSED);
-            receiver2.waitForExpectedCalls();
-
-            Session.postActiveSessionAction(Session.ACTION_ACTIVE_SESSION_SET);
-            Session.postActiveSessionAction(Session.ACTION_ACTIVE_SESSION_UNSET);
-
-            closeBlockerAndAssertSuccess();
-        } finally {
-            broadcastManager.unregisterReceiver(receiver0);
-            broadcastManager.unregisterReceiver(receiver1);
-            broadcastManager.unregisterReceiver(receiver2);
-            Session.setActiveSession(null);
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testSetActiveSession() {
-        Session.setActiveSession(null);
-
-        final WaitForBroadcastReceiver receiverOpened = new WaitForBroadcastReceiver();
-        final WaitForBroadcastReceiver receiverClosed = new WaitForBroadcastReceiver();
-        final WaitForBroadcastReceiver receiverSet = new WaitForBroadcastReceiver();
-        final WaitForBroadcastReceiver receiverUnset = new WaitForBroadcastReceiver();
-        final LocalBroadcastManager broadcastManager = LocalBroadcastManager.getInstance(getActivity());
-
-        try {
-            Runnable initializeOnBlockerThread = new Runnable() {
-                @Override
-                public void run() {
-                    broadcastManager.registerReceiver(receiverOpened,
-                            getActiveSessionFilter(Session.ACTION_ACTIVE_SESSION_OPENED));
-                    broadcastManager.registerReceiver(receiverClosed,
-                            getActiveSessionFilter(Session.ACTION_ACTIVE_SESSION_CLOSED));
-                    broadcastManager.registerReceiver(receiverSet,
-                            getActiveSessionFilter(Session.ACTION_ACTIVE_SESSION_SET));
-                    broadcastManager.registerReceiver(receiverUnset,
-                            getActiveSessionFilter(Session.ACTION_ACTIVE_SESSION_UNSET));
-                }
-            };
-            runOnBlockerThread(initializeOnBlockerThread, true);
-
-            // null -> null should not fire events
-            assertEquals(null, Session.getActiveSession());
-            Session.setActiveSession(null);
-            assertEquals(null, Session.getActiveSession());
-
-            Session session0 = new Session.Builder(getActivity()).
-                    setApplicationId("FakeAppId").
-                    setTokenCache(new MockTokenCache()).
-                    build();
-            assertEquals(SessionState.CREATED_TOKEN_LOADED, session0.getState());
-
-            // For unopened session, we should only see the Set event.
-            receiverSet.incrementExpectCount();
-            Session.setActiveSession(session0);
-            assertEquals(session0, Session.getActiveSession());
-            receiverSet.waitForExpectedCalls();
-
-            // When we open it, then we should see the Opened event.
-            receiverOpened.incrementExpectCount();
-            session0.open();
-            receiverOpened.waitForExpectedCalls();
-
-            // Setting to itself should not fire events
-            Session.setActiveSession(session0);
-            assertEquals(session0, Session.getActiveSession());
-
-            // Setting from one opened session to another should deliver a full
-            // cycle of events
-            WaitForBroadcastReceiver.incrementExpectCounts(receiverClosed, receiverUnset, receiverSet, receiverOpened);
-            Session session1 = new Session.Builder(getActivity()).
-                    setApplicationId("FakeAppId").
-                    setTokenCache(new MockTokenCache()).
-                    build();
-            assertEquals(SessionState.CREATED_TOKEN_LOADED, session1.getState());
-            session1.open();
-            assertEquals(SessionState.OPENED, session1.getState());
-            Session.setActiveSession(session1);
-            WaitForBroadcastReceiver.waitForExpectedCalls(receiverClosed, receiverUnset, receiverSet, receiverOpened);
-            assertEquals(SessionState.CLOSED, session0.getState());
-            assertEquals(session1, Session.getActiveSession());
-
-            closeBlockerAndAssertSuccess();
-        } finally {
-            broadcastManager.unregisterReceiver(receiverOpened);
-            broadcastManager.unregisterReceiver(receiverClosed);
-            broadcastManager.unregisterReceiver(receiverSet);
-            broadcastManager.unregisterReceiver(receiverUnset);
-            Session.setActiveSession(null);
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testOpenSuccess() {
-        ArrayList<String> permissions = new ArrayList<String>();
-        MockTokenCache cache = new MockTokenCache(null, 0);
-        SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder();
-        ScriptedSession session = createScriptedSessionOnBlockerThread(cache);
-        AccessToken openToken = AccessToken
-                .createFromString("A token of thanks", permissions, AccessTokenSource.TEST_USER);
-
-        // Verify state with no token in cache
-        assertEquals(SessionState.CREATED, session.getState());
-
-        session.addAuthorizeResult(openToken);
-        session.openForRead(new Session.OpenRequest(getActivity()).setCallback(statusRecorder));
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-
-        verifySessionHasToken(session, openToken);
-
-        // Verify we get a close callback.
-        session.close();
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        // Verify we saved the token to cache.
-        assertTrue(cache.getSavedState() != null);
-        assertEquals(openToken.getToken(), TokenCache.getToken(cache.getSavedState()));
-
-        // Verify token information is cleared.
-        session.closeAndClearTokenInformation();
-        assertTrue(cache.getSavedState() == null);
-
-        // Wait a bit so we can fail if any unexpected calls arrive on the
-        // recorder.
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testOpenForPublishSuccess() {
-        ArrayList<String> permissions = new ArrayList<String>();
-        MockTokenCache cache = new MockTokenCache(null, 0);
-        SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder();
-        ScriptedSession session = createScriptedSessionOnBlockerThread(cache);
-        AccessToken openToken = AccessToken
-                .createFromString("A token of thanks", permissions, AccessTokenSource.TEST_USER);
-
-        // Verify state with no token in cache
-        assertEquals(SessionState.CREATED, session.getState());
-
-        session.addAuthorizeResult(openToken);
-        session.openForPublish(new Session.OpenRequest(getActivity()).setCallback(statusRecorder).
-                setPermissions(Arrays.asList(new String[]{
-                        "publish_something",
-                        "manage_something",
-                        "ads_management",
-                        "create_event",
-                        "rsvp_event"
-                })));
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-
-        verifySessionHasToken(session, openToken);
-
-        // Verify we get a close callback.
-        session.close();
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        // Verify we saved the token to cache.
-        assertTrue(cache.getSavedState() != null);
-        assertEquals(openToken.getToken(), TokenCache.getToken(cache.getSavedState()));
-
-        // Verify token information is cleared.
-        session.closeAndClearTokenInformation();
-        assertTrue(cache.getSavedState() == null);
-
-        // Wait a bit so we can fail if any unexpected calls arrive on the
-        // recorder.
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testOpenForPublishSuccessWithReadPermissions() {
-        ArrayList<String> permissions = new ArrayList<String>();
-        MockTokenCache cache = new MockTokenCache(null, 0);
-        SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder();
-        ScriptedSession session = createScriptedSessionOnBlockerThread(cache);
-        AccessToken openToken = AccessToken
-                .createFromString("A token of thanks", permissions, AccessTokenSource.TEST_USER);
-
-        // Verify state with no token in cache
-        assertEquals(SessionState.CREATED, session.getState());
-
-        session.addAuthorizeResult(openToken);
-        session.openForPublish(new Session.OpenRequest(getActivity()).setCallback(statusRecorder).
-                setPermissions(Arrays.asList(new String[]{
-                        "publish_something",
-                        "manage_something",
-                        "ads_management",
-                        "create_event",
-                        "rsvp_event",
-                        "read_something"
-                })));
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-
-        verifySessionHasToken(session, openToken);
-
-        // Verify we get a close callback.
-        session.close();
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        // Verify we saved the token to cache.
-        assertTrue(cache.getSavedState() != null);
-        assertEquals(openToken.getToken(), TokenCache.getToken(cache.getSavedState()));
-
-        // Verify token information is cleared.
-        session.closeAndClearTokenInformation();
-        assertTrue(cache.getSavedState() == null);
-
-        // Wait a bit so we can fail if any unexpected calls arrive on the
-        // recorder.
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testOpenFromTokenCache() {
-        SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder();
-        String token = "A token less unique than most";
-        MockTokenCache cache = new MockTokenCache(token, DEFAULT_TIMEOUT_MILLISECONDS);
-        ScriptedSession session = createScriptedSessionOnBlockerThread("app-id", cache);
-
-        // Verify state when we have a token in cache.
-        assertEquals(SessionState.CREATED_TOKEN_LOADED, session.getState());
-
-        session.openForRead(new Session.OpenRequest(getActivity()).setCallback(statusRecorder));
-
-        // Verify we open with no authorize call.
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-
-        // Verify no token information is saved.
-        assertTrue(cache.getSavedState() == null);
-
-        // Verify we get a close callback.
-        session.close();
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        // Wait a bit so we can fail if any unexpected calls arrive on the
-        // recorder.
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testOpenActiveFromEmptyTokenCache() {
-        assertNull(Session.openActiveSession(getActivity(), false));
-    }
-
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testOpenFailure() {
-        SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder();
-        MockTokenCache cache = new MockTokenCache(null, 0);
-        ScriptedSession session = createScriptedSessionOnBlockerThread(cache);
-        Exception openException = new Exception();
-
-        session.addAuthorizeResult(openException);
-        session.openForRead(new Session.OpenRequest(getActivity()).setCallback(statusRecorder));
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-
-        // Verify we get the expected exception and no saved state.
-        statusRecorder.waitForCall(session, SessionState.CLOSED_LOGIN_FAILED, openException);
-        assertTrue(cache.getSavedState() == null);
-
-        // Wait a bit so we can fail if any unexpected calls arrive on the
-        // recorder.
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testOpenForReadFailure() {
-        SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder();
-        MockTokenCache cache = new MockTokenCache(null, 0);
-        ScriptedSession session = createScriptedSessionOnBlockerThread(cache);
-
-        try {
-            session.openForRead(new Session.OpenRequest(getActivity()).setCallback(statusRecorder).
-                    setPermissions(Arrays.asList(new String[]{"publish_something"})));
-            fail("should not reach here without an exception");
-        } catch (FacebookException e) {
-            assertTrue(e.getMessage().contains("Cannot pass a publish permission"));
-        } finally {
-            stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-            statusRecorder.close();
-        }
-    }
-
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testReauthorizeSuccess() {
-        ArrayList<String> permissions = new ArrayList<String>();
-        SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder();
-        MockTokenCache cache = new MockTokenCache(null, 0);
-        ScriptedSession session = createScriptedSessionOnBlockerThread(cache);
-
-        // Session.open
-        final AccessToken openToken = AccessToken
-                .createFromString("Allows playing outside", permissions, AccessTokenSource.TEST_USER);
-        permissions.add("play_outside");
-
-        session.addAuthorizeResult(openToken);
-        session.openForRead(new Session.OpenRequest(getActivity()).setCallback(statusRecorder));
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-
-        verifySessionHasToken(session, openToken);
-        assertTrue(cache.getSavedState() != null);
-        assertEquals(openToken.getToken(), TokenCache.getToken(cache.getSavedState()));
-
-        // Successful Session.reauthorize with new permissions
-        final AccessToken reauthorizeToken = AccessToken.createFromString(
-                "Allows playing outside and eating ice cream", permissions, AccessTokenSource.TEST_USER);
-        permissions.add("eat_ice_cream");
-
-        session.addAuthorizeResult(reauthorizeToken);
-        session.reauthorizeForRead(new Session.ReauthorizeRequest(getActivity(), permissions));
-        statusRecorder.waitForCall(session, SessionState.OPENED_TOKEN_UPDATED, null);
-
-        verifySessionHasToken(session, reauthorizeToken);
-        assertTrue(cache.getSavedState() != null);
-        assertEquals(reauthorizeToken.getToken(), TokenCache.getToken(cache.getSavedState()));
-
-        // Failing reauthorization with new permissions
-        final Exception reauthorizeException = new Exception("Don't run with scissors");
-        permissions.add("run_with_scissors");
-
-        session.addAuthorizeResult(reauthorizeException);
-        session.reauthorizeForRead(new Session.ReauthorizeRequest(getActivity(), permissions));
-        statusRecorder.waitForCall(session, SessionState.OPENED_TOKEN_UPDATED, reauthorizeException);
-
-        // Verify we do not overwrite cache if reauthorize fails
-        assertTrue(cache.getSavedState() != null);
-        assertEquals(reauthorizeToken.getToken(), TokenCache.getToken(cache.getSavedState()));
-
-        // Wait a bit so we can fail if any unexpected calls arrive on the
-        // recorders.
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testReauthorizeForPublishSuccess() {
-        ArrayList<String> permissions = new ArrayList<String>();
-        SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder();
-        MockTokenCache cache = new MockTokenCache(null, 0);
-        ScriptedSession session = createScriptedSessionOnBlockerThread(cache);
-
-        // Session.open
-        final AccessToken openToken = AccessToken
-                .createFromString("Allows playing outside", permissions, AccessTokenSource.TEST_USER);
-        permissions.add("play_outside");
-
-        session.addAuthorizeResult(openToken);
-        session.openForRead(new Session.OpenRequest(getActivity()).setCallback(statusRecorder));
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-
-        verifySessionHasToken(session, openToken);
-        assertTrue(cache.getSavedState() != null);
-        assertEquals(openToken.getToken(), TokenCache.getToken(cache.getSavedState()));
-
-        // Successful Session.reauthorize with new permissions
-        final AccessToken reauthorizeToken = AccessToken.createFromString(
-                "Allows playing outside and publish eating ice cream", permissions, AccessTokenSource.TEST_USER);
-        permissions.add("publish_eat_ice_cream");
-
-        session.addAuthorizeResult(reauthorizeToken);
-        session.reauthorizeForPublish(new Session.ReauthorizeRequest(getActivity(), permissions));
-        statusRecorder.waitForCall(session, SessionState.OPENED_TOKEN_UPDATED, null);
-
-        verifySessionHasToken(session, reauthorizeToken);
-        assertTrue(cache.getSavedState() != null);
-        assertEquals(reauthorizeToken.getToken(), TokenCache.getToken(cache.getSavedState()));
-
-        // Failing reauthorization with publish permissions on a read request
-        permissions.add("publish_run_with_scissors");
-
-        try {
-            session.reauthorizeForRead(new Session.ReauthorizeRequest(getActivity(), permissions));
-            fail("Should not reach here without an exception");
-        } catch (FacebookException e) {
-            assertTrue(e.getMessage().contains("Cannot pass a publish permission"));
-        } finally {
-            stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-            statusRecorder.close();
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testOpenWithImportedAccessToken() {
-        String token = "This is a fake token.";
-        Date expirationDate = new Date(new Date().getTime() + 3600 * 1000);
-        Date lastRefreshDate = new Date();
-        List<String> permissions = Arrays.asList(new String[]{"email", "publish_stream"});
-
-        MockTokenCache cache = new MockTokenCache(null, 0);
-        SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder();
-        ScriptedSession session = createScriptedSessionOnBlockerThread(cache);
-
-        // Verify state with no token in cache
-        assertEquals(SessionState.CREATED, session.getState());
-
-        session.openWithImportedAccessToken(token, expirationDate, lastRefreshDate,
-                AccessTokenSource.FACEBOOK_APPLICATION, permissions, statusRecorder);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-
-        AccessToken expectedToken = new AccessToken(token, expirationDate, permissions,
-                AccessTokenSource.FACEBOOK_APPLICATION, lastRefreshDate);
-        verifySessionHasToken(session, expectedToken);
-
-        // Verify we get a close callback.
-        session.close();
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        // Verify we saved the token to cache.
-        assertTrue(cache.getSavedState() != null);
-        assertEquals(expectedToken.getToken(), TokenCache.getToken(cache.getSavedState()));
-
-        // Verify token information is cleared.
-        session.closeAndClearTokenInformation();
-        assertTrue(cache.getSavedState() == null);
-
-        // Wait a bit so we can fail if any unexpected calls arrive on the
-        // recorder.
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        statusRecorder.close();
-
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testSessionWillExtendTokenIfNeeded() {
-        TestSession session = openTestSessionWithSharedUser();
-        session.forceExtendAccessToken(true);
-
-        Request request = Request.newMeRequest(session, null);
-        request.executeAndWait();
-
-        assertTrue(session.getWasAskedToExtendAccessToken());
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testSessionWillNotExtendTokenIfCurrentlyAttempting() {
-        TestSession session = openTestSessionWithSharedUser();
-        session.forceExtendAccessToken(true);
-        session.fakeTokenRefreshAttempt();
-
-        Request request = Request.newMeRequest(session, null);
-        request.executeAndWait();
-        assertFalse(session.getWasAskedToExtendAccessToken());
-    }
-
-
-    @LargeTest
-    public void testBasicSerialization() throws IOException, ClassNotFoundException {
-        // Try to test the happy path, that there are no unserializable fields
-        // in the session.
-        Session session0 = new Session.Builder(getActivity()).setApplicationId("fakeID").
-                setShouldAutoPublishInstall(false).build();
-        Session session1 = TestUtils.serializeAndUnserialize(session0);
-
-        // do some basic assertions
-        assertNotNull(session0.getAccessToken());
-        assertEquals(session0, session1);
-
-        Session.AuthorizationRequest authRequest0 =
-                new Session.OpenRequest(getActivity()).
-                        setRequestCode(123).
-                        setLoginBehavior(SessionLoginBehavior.SSO_ONLY);
-        Session.AuthorizationRequest authRequest1 = TestUtils.serializeAndUnserialize(authRequest0);
-
-        assertEquals(authRequest0.getLoginBehavior(), authRequest1.getLoginBehavior());
-        assertEquals(authRequest0.getRequestCode(), authRequest1.getRequestCode());
-    }
-
-    static IntentFilter getActiveSessionFilter(String... actions) {
-        IntentFilter filter = new IntentFilter();
-
-        for (String action : actions) {
-            filter.addAction(action);
-        }
-
-        return filter;
-    }
-
-    static IntentFilter getActiveSessionAllFilter() {
-        return getActiveSessionFilter(Session.ACTION_ACTIVE_SESSION_CLOSED, Session.ACTION_ACTIVE_SESSION_OPENED,
-                Session.ACTION_ACTIVE_SESSION_SET, Session.ACTION_ACTIVE_SESSION_UNSET);
-    }
-
-    private void verifySessionHasToken(Session session, AccessToken token) {
-        assertEquals(token.getToken(), session.getAccessToken());
-        assertEquals(token.getExpires(), session.getExpirationDate());
-        assertEquals(token.getPermissions(), session.getPermissions());
-    }
-}
diff --git a/facebook/tests/src/com/facebook/SessionTestsBase.java b/facebook/tests/src/com/facebook/SessionTestsBase.java
deleted file mode 100644
index 527662dae..000000000
--- a/facebook/tests/src/com/facebook/SessionTestsBase.java
+++ /dev/null
@@ -1,268 +0,0 @@
-/**
- * Copyright 2012 Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.os.Bundle;
-import android.os.ConditionVariable;
-import android.os.Looper;
-
-import java.util.LinkedList;
-import java.util.List;
-import java.util.concurrent.BlockingQueue;
-import java.util.concurrent.LinkedBlockingQueue;
-import java.util.concurrent.TimeUnit;
-
-public class SessionTestsBase extends FacebookTestCase {
-    public static final int DEFAULT_TIMEOUT_MILLISECONDS = 10 * 1000;
-    static final int SIMULATED_WORKING_MILLISECONDS = 20;
-    public static final int STRAY_CALLBACK_WAIT_MILLISECONDS = 50;
-
-    public ScriptedSession createScriptedSessionOnBlockerThread(TokenCache cache) {
-        return createScriptedSessionOnBlockerThread("SomeApplicationId", cache);
-    }
-
-    ScriptedSession createScriptedSessionOnBlockerThread(final String applicationId,
-            final TokenCache cache) {
-        class MutableState {
-            ScriptedSession session;
-        }
-        ;
-        final MutableState mutable = new MutableState();
-
-        runOnBlockerThread(new Runnable() {
-            @Override
-            public void run() {
-                mutable.session = new ScriptedSession(getActivity(), applicationId, cache);
-            }
-        }, true);
-
-        return mutable.session;
-    }
-
-    public static void stall(int stallMsec) {
-        try {
-            Thread.sleep(stallMsec);
-        } catch (InterruptedException e) {
-            fail("InterruptedException while stalling");
-        }
-    }
-
-    public static class ScriptedSession extends Session {
-        private static final long serialVersionUID = 1L;
-        private final LinkedList<AuthorizeResult> pendingAuthorizations = new LinkedList<AuthorizeResult>();
-
-        public ScriptedSession(Context currentContext, String applicationId, TokenCache tokenCache) {
-            super(currentContext, applicationId, tokenCache, false);
-        }
-
-        public void addAuthorizeResult(String token, List<String> permissions, AccessTokenSource source) {
-            addAuthorizeResult(AccessToken.createFromString(token, permissions, source));
-        }
-
-        public void addAuthorizeResult(AccessToken token) {
-            pendingAuthorizations.add(new AuthorizeResult(token));
-        }
-
-        public void addAuthorizeResult(Exception exception) {
-            pendingAuthorizations.add(new AuthorizeResult(exception));
-        }
-
-        // Overrides authorize to return the next AuthorizeResult we added.
-        @Override
-        void authorize(final AuthorizationRequest request) {
-            Settings.getExecutor().execute(new Runnable() {
-                @Override
-                public void run() {
-                    stall(SIMULATED_WORKING_MILLISECONDS);
-                    AuthorizeResult result = pendingAuthorizations.poll();
-
-                    if (result == null) {
-                        fail("Missing call to addScriptedAuthorization");
-                    }
-
-                    finishAuth(result.token, result.exception);
-                }
-            });
-        }
-
-        private static class AuthorizeResult {
-            final AccessToken token;
-            final Exception exception;
-
-            private AuthorizeResult(AccessToken token, Exception exception) {
-                this.token = token;
-                this.exception = exception;
-            }
-
-            AuthorizeResult(AccessToken token) {
-                this(token, null);
-            }
-
-            AuthorizeResult(Exception exception) {
-                this(null, exception);
-            }
-        }
-    }
-
-    public static class SessionStatusCallbackRecorder implements Session.StatusCallback {
-        private final BlockingQueue<Call> calls = new LinkedBlockingQueue<Call>();
-        volatile boolean isClosed = false;
-
-        public void waitForCall(Session session, SessionState state, Exception exception) {
-            Call call = null;
-
-            try {
-                call = calls.poll(DEFAULT_TIMEOUT_MILLISECONDS, TimeUnit.MILLISECONDS);
-                if (call == null) {
-                    fail("Did not get a status callback within timeout.");
-                }
-            } catch (InterruptedException e) {
-                fail("InterruptedException while waiting for status callback: " + e);
-            }
-
-            assertEquals(session, call.session);
-            assertEquals(state, call.state);
-            assertEquals(exception, call.exception);
-        }
-
-        public void close() {
-            isClosed = true;
-            assertEquals(0, calls.size());
-        }
-
-        @Override
-        public void call(Session session, SessionState state, Exception exception) {
-            Call call = new Call(session, state, exception);
-            if (!calls.offer(call)) {
-                fail("Test Error: Blocking queue ran out of capacity");
-            }
-            if (isClosed) {
-                fail("Reauthorize callback called after closed");
-            }
-            assertEquals("Callback should run on main UI thread", Thread.currentThread(),
-                    Looper.getMainLooper().getThread());
-        }
-
-        private static class Call {
-            final Session session;
-            final SessionState state;
-            final Exception exception;
-
-            Call(Session session, SessionState state, Exception exception) {
-                this.session = session;
-                this.state = state;
-                this.exception = exception;
-            }
-        }
-
-    }
-
-    public static class MockTokenCache extends TokenCache {
-        private final String token;
-        private final long expires_in;
-        private Bundle saved;
-
-        MockTokenCache() {
-            this("FakeToken", DEFAULT_TIMEOUT_MILLISECONDS);
-        }
-
-        public MockTokenCache(String token, long expires_in) {
-            this.token = token;
-            this.expires_in = expires_in;
-            this.saved = null;
-        }
-
-        public Bundle getSavedState() {
-            return saved;
-        }
-
-        @Override
-        public Bundle load() {
-            Bundle bundle = null;
-
-            if (token != null) {
-                bundle = new Bundle();
-
-                TokenCache.putToken(bundle, token);
-                TokenCache.putExpirationMilliseconds(bundle, System.currentTimeMillis() + expires_in);
-            }
-
-            return bundle;
-        }
-
-        @Override
-        public void save(Bundle bundle) {
-            this.saved = bundle;
-        }
-
-        @Override
-        public void clear() {
-            this.saved = null;
-        }
-    }
-
-    static class WaitForBroadcastReceiver extends BroadcastReceiver {
-        static int idGenerator = 0;
-        final int id = idGenerator++;
-
-        ConditionVariable condition = new ConditionVariable(true);
-        int expectCount;
-        int actualCount;
-
-        public void incrementExpectCount() {
-            incrementExpectCount(1);
-        }
-
-        public void incrementExpectCount(int n) {
-            expectCount += n;
-            if (actualCount < expectCount) {
-                condition.close();
-            }
-        }
-
-        public void waitForExpectedCalls() {
-            if (!condition.block(DEFAULT_TIMEOUT_MILLISECONDS)) {
-                assertTrue(false);
-            }
-        }
-
-        public static void incrementExpectCounts(WaitForBroadcastReceiver... receivers) {
-            for (WaitForBroadcastReceiver receiver : receivers) {
-                receiver.incrementExpectCount();
-            }
-        }
-
-        public static void waitForExpectedCalls(WaitForBroadcastReceiver... receivers) {
-            for (WaitForBroadcastReceiver receiver : receivers) {
-                receiver.waitForExpectedCalls();
-            }
-        }
-
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            if (++actualCount == expectCount) {
-                condition.open();
-            }
-            assertTrue(actualCount <= expectCount);
-            assertEquals("BroadcastReceiver should receive on main UI thread",
-                    Thread.currentThread(), Looper.getMainLooper().getThread());
-        }
-    }
-}
diff --git a/facebook/tests/src/com/facebook/SettingsTests.java b/facebook/tests/src/com/facebook/SettingsTests.java
deleted file mode 100644
index 554c5a047..000000000
--- a/facebook/tests/src/com/facebook/SettingsTests.java
+++ /dev/null
@@ -1,74 +0,0 @@
-/**
- * Copyright 2012 Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.os.ConditionVariable;
-import android.test.AndroidTestCase;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-
-import java.util.concurrent.Executor;
-
-public final class SettingsTests extends AndroidTestCase {
-
-    @SmallTest @MediumTest @LargeTest
-    public void testGetExecutor() {
-        final ConditionVariable condition = new ConditionVariable();
-
-        Settings.getExecutor().execute(new Runnable() {
-            @Override
-            public void run() {
-                condition.open();
-            }
-        });
-
-        boolean success = condition.block(5000);
-        assertTrue(success);
-    }
-
-    @SmallTest @MediumTest @LargeTest
-    public void testSetExecutor() {
-        final ConditionVariable condition = new ConditionVariable();
-
-        final Runnable runnable = new Runnable() {
-            @Override
-            public void run() { }
-        };
-
-        final Executor executor = new Executor() {
-            @Override
-            public void execute(Runnable command) {
-                assertEquals(runnable, command);
-                command.run();
-
-                condition.open();
-            }
-        };
-
-        Executor original = Settings.getExecutor();
-        try {
-            Settings.setExecutor(executor);
-            Settings.getExecutor().execute(runnable);
-
-            boolean success = condition.block(5000);
-            assertTrue(success);
-        } finally {
-            Settings.setExecutor(original);
-        }
-    }
-}
diff --git a/facebook/tests/src/com/facebook/SharedPreferencesTokenCacheTests.java b/facebook/tests/src/com/facebook/SharedPreferencesTokenCacheTests.java
deleted file mode 100644
index eea722393..000000000
--- a/facebook/tests/src/com/facebook/SharedPreferencesTokenCacheTests.java
+++ /dev/null
@@ -1,312 +0,0 @@
-/**
- * Copyright 2012 Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.os.Bundle;
-import android.test.AndroidTestCase;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import junit.framework.Assert;
-
-import java.lang.reflect.Array;
-import java.util.*;
-
-
-public final class SharedPreferencesTokenCacheTests extends AndroidTestCase {
-
-    private static final String BOOLEAN_KEY = "booleanKey";
-    private static final String BOOLEAN_ARRAY_KEY = "booleanArrayKey";
-    private static final String BYTE_KEY = "byteKey";
-    private static final String BYTE_ARRAY_KEY = "byteArrayKey";
-    private static final String SHORT_KEY = "shortKey";
-    private static final String SHORT_ARRAY_KEY = "shortArrayKey";
-    private static final String INT_KEY = "intKey";
-    private static final String INT_ARRAY_KEY = "intArrayKey";
-    private static final String LONG_KEY = "longKey";
-    private static final String LONG_ARRAY_KEY = "longArrayKey";
-    private static final String FLOAT_ARRAY_KEY = "floatKey";
-    private static final String FLOAT_KEY = "floatArrayKey";
-    private static final String DOUBLE_KEY = "doubleKey";
-    private static final String DOUBLE_ARRAY_KEY = "doubleArrayKey";
-    private static final String CHAR_KEY = "charKey";
-    private static final String CHAR_ARRAY_KEY = "charArrayKey";
-    private static final String STRING_KEY = "stringKey";
-    private static final String STRING_LIST_KEY = "stringListKey";
-
-    private static Random random = new Random((new Date()).getTime());
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testAllTypes() {
-        Bundle originalBundle = new Bundle();
-
-        putBoolean(BOOLEAN_KEY, originalBundle);
-        putBooleanArray(BOOLEAN_ARRAY_KEY, originalBundle);
-        putByte(BYTE_KEY, originalBundle);
-        putByteArray(BYTE_ARRAY_KEY, originalBundle);
-        putShort(SHORT_KEY, originalBundle);
-        putShortArray(SHORT_ARRAY_KEY, originalBundle);
-        putInt(INT_KEY, originalBundle);
-        putIntArray(INT_ARRAY_KEY, originalBundle);
-        putLong(LONG_KEY, originalBundle);
-        putLongArray(LONG_ARRAY_KEY, originalBundle);
-        putFloat(FLOAT_KEY, originalBundle);
-        putFloatArray(FLOAT_ARRAY_KEY, originalBundle);
-        putDouble(DOUBLE_KEY, originalBundle);
-        putDoubleArray(DOUBLE_ARRAY_KEY, originalBundle);
-        putChar(CHAR_KEY, originalBundle);
-        putCharArray(CHAR_ARRAY_KEY, originalBundle);
-        putString(STRING_KEY, originalBundle);
-        putStringList(STRING_LIST_KEY, originalBundle);
-
-        ensureApplicationContext();
-
-        SharedPreferencesTokenCache cache = new SharedPreferencesTokenCache(getContext());
-        cache.save(originalBundle);
-
-        SharedPreferencesTokenCache cache2 = new SharedPreferencesTokenCache(getContext());
-        Bundle cachedBundle = cache2.load();
-
-        Assert.assertEquals(originalBundle.getBoolean(BOOLEAN_KEY), cachedBundle.getBoolean(BOOLEAN_KEY));
-        assertArrayEquals(originalBundle.getBooleanArray(BOOLEAN_ARRAY_KEY), cachedBundle.getBooleanArray(BOOLEAN_ARRAY_KEY));
-        Assert.assertEquals(originalBundle.getByte(BYTE_KEY), cachedBundle.getByte(BYTE_KEY));
-        assertArrayEquals(originalBundle.getByteArray(BYTE_ARRAY_KEY), cachedBundle.getByteArray(BYTE_ARRAY_KEY));
-        Assert.assertEquals(originalBundle.getShort(SHORT_KEY), cachedBundle.getShort(SHORT_KEY));
-        assertArrayEquals(originalBundle.getShortArray(SHORT_ARRAY_KEY), cachedBundle.getShortArray(SHORT_ARRAY_KEY));
-        Assert.assertEquals(originalBundle.getInt(INT_KEY), cachedBundle.getInt(INT_KEY));
-        assertArrayEquals(originalBundle.getIntArray(INT_ARRAY_KEY), cachedBundle.getIntArray(INT_ARRAY_KEY));
-        Assert.assertEquals(originalBundle.getLong(LONG_KEY), cachedBundle.getLong(LONG_KEY));
-        assertArrayEquals(originalBundle.getLongArray(LONG_ARRAY_KEY), cachedBundle.getLongArray(LONG_ARRAY_KEY));
-        Assert.assertEquals(originalBundle.getFloat(FLOAT_KEY), cachedBundle.getFloat(FLOAT_KEY));
-        assertArrayEquals(originalBundle.getFloatArray(FLOAT_ARRAY_KEY), cachedBundle.getFloatArray(FLOAT_ARRAY_KEY));
-        Assert.assertEquals(originalBundle.getDouble(DOUBLE_KEY), cachedBundle.getDouble(DOUBLE_KEY));
-        assertArrayEquals(originalBundle.getDoubleArray(DOUBLE_ARRAY_KEY), cachedBundle.getDoubleArray(DOUBLE_ARRAY_KEY));
-        Assert.assertEquals(originalBundle.getChar(CHAR_KEY), cachedBundle.getChar(CHAR_KEY));
-        assertArrayEquals(originalBundle.getCharArray(CHAR_ARRAY_KEY), cachedBundle.getCharArray(CHAR_ARRAY_KEY));
-        Assert.assertEquals(originalBundle.getString(STRING_KEY), cachedBundle.getString(STRING_KEY));
-        assertListEquals(originalBundle.getStringArrayList(STRING_LIST_KEY), cachedBundle.getStringArrayList(
-                STRING_LIST_KEY));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMultipleCaches() {
-        Bundle bundle1 = new Bundle(), bundle2 = new Bundle();
-
-        bundle1.putInt(INT_KEY, 10);
-        bundle1.putString(STRING_KEY, "ABC");
-        bundle2.putInt(INT_KEY, 100);
-        bundle2.putString(STRING_KEY, "xyz");
-
-        ensureApplicationContext();
-
-        SharedPreferencesTokenCache cache1 = new SharedPreferencesTokenCache(getContext());
-        SharedPreferencesTokenCache cache2 = new SharedPreferencesTokenCache(getContext(), "CustomCache");
-
-        cache1.save(bundle1);
-        cache2.save(bundle2);
-
-        // Get new references to make sure we are getting persisted data.
-        // Reverse the cache references for fun.
-        cache1 = new SharedPreferencesTokenCache(getContext(), "CustomCache");
-        cache2 = new SharedPreferencesTokenCache(getContext());
-
-        Bundle newBundle1 = cache1.load(), newBundle2 = cache2.load();
-
-        Assert.assertEquals(bundle2.getInt(INT_KEY), newBundle1.getInt(INT_KEY));
-        Assert.assertEquals(bundle2.getString(STRING_KEY), newBundle1.getString(STRING_KEY));
-        Assert.assertEquals(bundle1.getInt(INT_KEY), newBundle2.getInt(INT_KEY));
-        Assert.assertEquals(bundle1.getString(STRING_KEY), newBundle2.getString(STRING_KEY));
-    }
-
-    private static void assertArrayEquals(Object a1, Object a2) {
-        Assert.assertNotNull(a1);
-        Assert.assertNotNull(a2);
-        Assert.assertEquals(a1.getClass(), a2.getClass());
-        Assert.assertTrue("Not an array", a1.getClass().isArray());
-
-        int length = Array.getLength(a1);
-        Assert.assertEquals(length, Array.getLength(a2));
-        for (int i = 0; i < length; i++) {
-            Object a1Value = Array.get(a1, i);
-            Object a2Value = Array.get(a2, i);
-
-            Assert.assertEquals(a1Value, a2Value);
-        }
-    }
-
-    private static void assertListEquals(List<?> l1, List<?> l2) {
-        Assert.assertNotNull(l1);
-        Assert.assertNotNull(l2);
-
-        Iterator<?> i1 = l1.iterator(), i2 = l2.iterator();
-        while (i1.hasNext() && i2.hasNext()) {
-            Assert.assertEquals(i1.next(), i2.next());
-        }
-
-        Assert.assertTrue("Lists not of the same length", !i1.hasNext());
-        Assert.assertTrue("Lists not of the same length", !i2.hasNext());
-    }
-
-    private static void putInt(String key, Bundle bundle) {
-        bundle.putInt(key, random.nextInt());
-    }
-
-    private static void putIntArray(String key, Bundle bundle) {
-        int length = random.nextInt(50);
-        int[] array = new int[length];
-        for (int i = 0; i < length; i++) {
-            array[i] = random.nextInt();
-        }
-        bundle.putIntArray(key, array);
-    }
-
-    private static void putShort(String key, Bundle bundle) {
-        bundle.putShort(key, (short)random.nextInt());
-    }
-
-    private static void putShortArray(String key, Bundle bundle) {
-        int length = random.nextInt(50);
-        short[] array = new short[length];
-        for (int i = 0; i < length; i++) {
-            array[i] = (short)random.nextInt();
-        }
-        bundle.putShortArray(key, array);
-    }
-
-    private static void putByte(String key, Bundle bundle) {
-        bundle.putByte(key, (byte)random.nextInt());
-    }
-
-    private static void putByteArray(String key, Bundle bundle) {
-        int length = random.nextInt(50);
-        byte[] array = new byte[length];
-        random.nextBytes(array);
-        bundle.putByteArray(key, array);
-    }
-
-    private static void putBoolean(String key, Bundle bundle) {
-        bundle.putBoolean(key, random.nextBoolean());
-    }
-
-    private static void putBooleanArray(String key, Bundle bundle) {
-        int length = random.nextInt(50);
-        boolean[] array = new boolean[length];
-        for (int i = 0; i < length; i++) {
-            array[i] = random.nextBoolean();
-        }
-        bundle.putBooleanArray(key, array);
-    }
-
-    private static void putLong(String key, Bundle bundle) {
-        bundle.putLong(key, random.nextLong());
-    }
-
-    private static void putLongArray(String key, Bundle bundle) {
-        int length = random.nextInt(50);
-        long[] array = new long[length];
-        for (int i = 0; i < length; i++) {
-            array[i] = random.nextLong();
-        }
-        bundle.putLongArray(key, array);
-    }
-
-    private static void putFloat(String key, Bundle bundle) {
-        bundle.putFloat(key, random.nextFloat());
-    }
-
-    private static void putFloatArray(String key, Bundle bundle) {
-        int length = random.nextInt(50);
-        float[] array = new float[length];
-        for (int i = 0; i < length; i++) {
-            array[i] = random.nextFloat();
-        }
-        bundle.putFloatArray(key, array);
-    }
-
-    private static void putDouble(String key, Bundle bundle) {
-        bundle.putDouble(key, random.nextDouble());
-    }
-
-    private static void putDoubleArray(String key, Bundle bundle) {
-        int length = random.nextInt(50);
-        double[] array = new double[length];
-        for (int i = 0; i < length; i++) {
-            array[i] = random.nextDouble();
-        }
-        bundle.putDoubleArray(key, array);
-    }
-
-    private static void putChar(String key, Bundle bundle) {
-        bundle.putChar(key, getChar());
-    }
-
-    private static void putCharArray(String key, Bundle bundle) {
-        bundle.putCharArray(key, getCharArray());
-    }
-
-    private static void putString(String key, Bundle bundle) {
-        bundle.putString(key, new String(getCharArray()));
-    }
-
-    private static void putStringList(String key, Bundle bundle) {
-        int length = random.nextInt(50);
-        ArrayList<String> stringList = new ArrayList<String>(length);
-        while (0 < length--) {
-            if (length == 0) {
-                stringList.add(null);
-            } else {
-                stringList.add(new String(getCharArray()));
-            }
-        }
-
-        bundle.putStringArrayList(key, stringList);
-    }
-
-    private static char[] getCharArray() {
-        int length = random.nextInt(50);
-        char[] array = new char[length];
-        for (int i = 0; i < length; i++) {
-            array[i] = getChar();
-        }
-
-        return array;
-    }
-
-    private static char getChar() {
-        return (char)random.nextInt(255);
-    }
-
-    private void ensureApplicationContext() {
-        // Since the test case is not running on the UI thread, the applicationContext might
-        // not be ready (i.e. it might be null). Wait for a bit to resolve this.
-        long waitedFor = 0;
-        try {
-            // Don't hold up execution for too long.
-            while (getContext().getApplicationContext() == null && waitedFor <= 2000) {
-                Thread.sleep(50);
-                waitedFor += 50;
-            }
-        }
-        catch (InterruptedException e) {
-        }
-    }
-
-}
diff --git a/facebook/tests/src/com/facebook/TestBlocker.java b/facebook/tests/src/com/facebook/TestBlocker.java
deleted file mode 100644
index cfeb5ac54..000000000
--- a/facebook/tests/src/com/facebook/TestBlocker.java
+++ /dev/null
@@ -1,115 +0,0 @@
-/**
- * Copyright 2012 Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.os.Handler;
-import android.os.HandlerThread;
-
-public class TestBlocker extends HandlerThread {
-    private Exception exception;
-    public int signals;
-    private volatile Handler handler;
-
-    private TestBlocker() {
-        super("TestBlocker");
-    }
-
-    public synchronized static TestBlocker createTestBlocker() {
-        TestBlocker blocker = new TestBlocker();
-        blocker.start();
-
-        // Wait until we have a Looper and Handler.
-        synchronized (blocker) {
-            while (blocker.handler == null) {
-                try {
-                    blocker.wait();
-                } catch (InterruptedException e) {
-                }
-            }
-        }
-
-        return blocker;
-    }
-
-    @Override
-    public void run() {
-        try {
-            super.run();
-        } catch (Exception e) {
-            setException(e);
-        }
-        synchronized (this) {
-            notifyAll();
-        }
-    }
-
-    public Handler getHandler() {
-        return handler;
-    }
-
-    public void assertSuccess() throws Exception {
-        Exception e = getException();
-        if (e != null) {
-            throw e;
-        }
-    }
-
-    public synchronized void signal() {
-        ++signals;
-        notifyAll();
-    }
-
-    public void waitForSignals(int numSignals) throws Exception {
-        // Make sure we aren't sitting on an unhandled exception before we even start, because that means our
-        // thread isn't around anymore.
-        assertSuccess();
-
-        setException(null);
-
-        synchronized (this) {
-            while (getException() == null && signals < numSignals) {
-                try {
-                    wait();
-                } catch (InterruptedException e) {
-                }
-            }
-            signals = 0;
-        }
-    }
-
-    public void waitForSignalsAndAssertSuccess(int numSignals) throws Exception {
-        waitForSignals(numSignals);
-        assertSuccess();
-    }
-
-    public synchronized Exception getException() {
-        return exception;
-    }
-
-    public synchronized void setException(Exception e) {
-        exception = e;
-        notifyAll();
-    }
-
-    @Override
-    protected void onLooperPrepared() {
-        synchronized (this) {
-            handler = new Handler(getLooper());
-            notifyAll();
-        }
-    }
-}
diff --git a/facebook/tests/src/com/facebook/TestSessionTests.java b/facebook/tests/src/com/facebook/TestSessionTests.java
deleted file mode 100644
index 34c74b9c0..000000000
--- a/facebook/tests/src/com/facebook/TestSessionTests.java
+++ /dev/null
@@ -1,151 +0,0 @@
-/**
- * Copyright 2012 Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.os.Bundle;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import org.json.JSONArray;
-
-// Because TestSession is the component under test here, be careful in calling methods on FacebookTestCase that
-// assume TestSession works correctly.
-public class TestSessionTests extends FacebookTestCase {
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanCreateWithPrivateUser() {
-        TestSession session = TestSession.createSessionWithPrivateUser(getActivity(), null);
-        assertTrue(session != null);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanCreateWithSharedUser() {
-        TestSession session = TestSession.createSessionWithSharedUser(getActivity(), null);
-        assertTrue(session != null);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testCanOpenWithSharedUser() throws Throwable {
-        final TestBlocker blocker = getTestBlocker();
-        TestSession session = getTestSessionWithSharedUser();
-
-        Session.OpenRequest openRequest = new Session.OpenRequest(getActivity()).
-                setCallback(
-                        new Session.StatusCallback() {
-                            @Override
-                            public void call(Session session, SessionState state, Exception exception) {
-                                assertTrue(exception == null);
-                                blocker.signal();
-                            }
-                        });
-        session.openForRead(openRequest);
-
-        waitAndAssertSuccess(blocker, 1);
-
-        assertTrue(session.getState().isOpened());
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testSharedUserDoesntCreateUnnecessaryUsers() throws Throwable {
-        TestSession session = getTestSessionWithSharedUser();
-        openSession(getActivity(), session);
-
-        // Note that this test is somewhat brittle in that the count of test users could change for
-        // external reasons while the test is running. For that reason it may not be appropriate for an
-        // automated test suite, and could be run only when testing changes to TestSession.
-        int startingUserCount = countTestUsers();
-
-        session = getTestSessionWithSharedUser();
-        openSession(getActivity(), session);
-
-        int endingUserCount = countTestUsers();
-
-        assertSame(startingUserCount, endingUserCount);
-    }
-
-    // This test is currently unreliable, I believe due to timing/replication issues that cause the
-    // counts to occasionally be off. Taking out of test runs for now until a more robust test can be added.
-    @LargeTest
-    public void failing_testPrivateUserIsDeletedOnSessionClose() throws Throwable {
-        final TestBlocker blocker = getTestBlocker();
-
-        // See comment above regarding test user count.
-        int startingUserCount = countTestUsers();
-
-        TestSession session = getTestSessionWithPrivateUser(blocker);
-        openSession(getActivity(), session);
-
-        int sessionOpenUserCount = countTestUsers();
-
-        assertSame(startingUserCount + 1, sessionOpenUserCount);
-
-        session.close();
-
-        int endingUserCount = countTestUsers();
-
-        assertSame(startingUserCount, endingUserCount);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCannotChangeTestApplicationIdOnceSet() {
-        try {
-            TestSession.setTestApplicationId("hello");
-            TestSession.setTestApplicationId("world");
-            fail("expected exception");
-        } catch (FacebookException e) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCannotChangeTestApplicationSecretOnceSet() {
-        try {
-            TestSession.setTestApplicationSecret("hello");
-            TestSession.setTestApplicationSecret("world");
-            fail("expected exception");
-        } catch (FacebookException e) {
-        }
-    }
-
-    private int countTestUsers() {
-        TestSession session = getTestSessionWithSharedUser(null);
-
-        String appAccessToken = TestSession.getAppAccessToken();
-        assertNotNull(appAccessToken);
-        String applicationId = session.getApplicationId();
-        assertNotNull(applicationId);
-
-        String fqlQuery = String.format("SELECT id FROM test_account WHERE app_id = %s", applicationId);
-        Bundle parameters = new Bundle();
-        parameters.putString("q", fqlQuery);
-        parameters.putString("access_token", appAccessToken);
-
-        Request request = new Request(null, "fql", parameters, null);
-        Response response = request.executeAndWait();
-
-        JSONArray data = (JSONArray) response.getGraphObject().getProperty("data");
-        return data.length();
-    }
-}
diff --git a/facebook/tests/src/com/facebook/TestUtils.java b/facebook/tests/src/com/facebook/TestUtils.java
deleted file mode 100644
index 49bd6fc8b..000000000
--- a/facebook/tests/src/com/facebook/TestUtils.java
+++ /dev/null
@@ -1,38 +0,0 @@
-/**
- * Copyright 2012 Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import java.io.*;
-
-public class TestUtils {
-    public static <T extends Serializable> T serializeAndUnserialize(T t) {
-        try {
-            ByteArrayOutputStream os = new ByteArrayOutputStream();
-            new ObjectOutputStream(os).writeObject(t);
-            ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray());
-
-            @SuppressWarnings("unchecked")
-            T ret = (T) (new ObjectInputStream(is)).readObject();
-
-            return ret;
-        } catch (IOException e) {
-            throw new RuntimeException(e);
-        } catch (ClassNotFoundException e) {
-            throw new RuntimeException(e);
-        }
-    }
-}
diff --git a/facebook/tests/src/com/facebook/internal/FileLruCacheTests.java b/facebook/tests/src/com/facebook/internal/FileLruCacheTests.java
deleted file mode 100644
index 52065e514..000000000
--- a/facebook/tests/src/com/facebook/internal/FileLruCacheTests.java
+++ /dev/null
@@ -1,359 +0,0 @@
-/**
- * Copyright 2012 Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.internal;
-
-import android.test.AndroidTestCase;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-
-import java.io.ByteArrayInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.util.Random;
-
-public final class FileLruCacheTests extends AndroidTestCase {
-    private static final Random random = new Random();
-
-    @SmallTest @MediumTest @LargeTest
-    public void testCacheOutputStream() throws IOException {
-        int dataSize = 1024;
-        byte[] data = generateBytes(dataSize);
-        String key = "a";
-
-        // Limit to 2x to allow for extra header data
-        FileLruCache cache = new FileLruCache(getContext(), "testCacheOutputStream", limitCacheSize(2*dataSize));
-
-        put(cache, key, data);
-        checkValue(cache, key, data);
-        cache.clearForTest();
-    }
-
-    @SmallTest @MediumTest @LargeTest
-    public void testCacheInputStream() throws IOException {
-        int dataSize = 1024;
-        byte[] data = generateBytes(dataSize);
-        String key = "a";
-        InputStream stream = new ByteArrayInputStream(data);
-
-        // Limit to 2x to allow for extra header data
-        FileLruCache cache = new FileLruCache(getContext(), "testCacheInputStream", limitCacheSize(2*dataSize));
-        cache.clearForTest();
-
-        InputStream wrapped = cache.interceptAndPut(key, stream);
-        consumeAndClose(wrapped);
-        checkValue(cache, key, data);
-    }
-
-    @SmallTest @MediumTest @LargeTest
-    public void testCacheClear() throws IOException {
-        int dataSize = 1024;
-        byte[] data = generateBytes(dataSize);
-        String key = "a";
-
-        // Limit to 2x to allow for extra header data
-        FileLruCache cache = new FileLruCache(getContext(), "testCacheClear", limitCacheSize(2*dataSize));
-        cache.clearForTest();
-
-        put(cache, key, data);
-        checkValue(cache, key, data);
-
-        cache.clearForTest();
-        assertEquals(false, hasValue(cache, key));
-        assertEquals(0, cache.sizeInBytesForTest());
-    }
-
-    @SmallTest @MediumTest @LargeTest
-    public void testSizeInBytes() throws IOException {
-        int count = 17;
-        int dataSize = 53;
-        int cacheSize = count * dataSize;
-        byte[] data = generateBytes(dataSize);
-
-        // Limit to 2x to allow for extra header data
-        FileLruCache cache = new FileLruCache(getContext(), "testSizeInBytes", limitCacheSize(2*cacheSize));
-        cache.clearForTest();
-
-        for (int i = 0; i < count; i++) {
-            put(cache, i, data);
-
-            // The size reported by sizeInBytes includes a version/size token as well
-            // as a JSON blob that records the name.  Verify that the cache size is larger
-            // than the data content but not more than twice as large.  This guarantees
-            // that sizeInBytes is doing at least approximately the right thing.
-            int totalDataSize = (i + 1) * dataSize;
-            assertTrue(cache.sizeInBytesForTest() > totalDataSize);
-            assertTrue(cache.sizeInBytesForTest() < 2 * totalDataSize);
-        }
-        for (int i = 0; i < count; i++) {
-            String key = Integer.valueOf(i).toString();
-            checkValue(cache, key, data);
-        }
-    }
-
-    @MediumTest @LargeTest
-    public void testCacheSizeLimit() throws IOException {
-        int count = 64;
-        int dataSize = 32;
-        int cacheSize = count * dataSize / 2;
-        byte[] data = generateBytes(dataSize);
-
-        // Here we do not set the limit to 2x to make sure we hit the limit well before we have
-        // added all the data.
-        FileLruCache cache = new FileLruCache(getContext(), "testCacheSizeLimit", limitCacheSize(cacheSize));
-        cache.clearForTest();
-
-        for (int i = 0; i < count; i++) {
-            put(cache, i, data);
-
-            // See comment in testSizeInBytes for why this is not an exact calculation.
-            //
-            // This changes verification such that the final cache size lands somewhere
-            // between half and full quota.
-            int totalDataSize = (i + 1) * dataSize;
-            assertTrue(cache.sizeInBytesForTest() > Math.min(totalDataSize, cacheSize/2));
-            assertTrue(cache.sizeInBytesForTest() < Math.min(2 * totalDataSize, cacheSize));
-        }
-
-        // Verify that some keys exist and others do not
-        boolean hasValueExists = false;
-        boolean hasNoValueExists = false;
-
-        for (int i = 0; i < count; i++) {
-            String key = Integer.valueOf(i).toString();
-            if (hasValue(cache, key)) {
-                hasValueExists = true;
-                checkValue(cache, key, data);
-            } else {
-                hasNoValueExists = true;
-            }
-        }
-
-        assertEquals(true, hasValueExists);
-        assertEquals(true, hasNoValueExists);
-    }
-
-    @MediumTest @LargeTest
-    public void testCacheCountLimit() throws IOException {
-        int count = 64;
-        int dataSize = 32;
-        int cacheCount = count / 2;
-        byte[] data = generateBytes(dataSize);
-
-        // Here we only limit by count, and we allow half of the entries.
-        FileLruCache cache = new FileLruCache(getContext(), "testCacheCountLimit", limitCacheCount(cacheCount));
-        cache.clearForTest();
-
-        for (int i = 0; i < count; i++) {
-            put(cache, i, data);
-        }
-
-        // Verify that some keys exist and others do not
-        boolean hasValueExists = false;
-        boolean hasNoValueExists = false;
-
-        for (int i = 0; i < count; i++) {
-            if (hasValue(cache, i)) {
-                hasValueExists = true;
-                checkValue(cache, i, data);
-            } else {
-                hasNoValueExists = true;
-            }
-        }
-
-        assertEquals(true, hasValueExists);
-        assertEquals(true, hasNoValueExists);
-    }
-
-    @LargeTest
-    public void testCacheLru() throws IOException, InterruptedException {
-        int keepCount = 10;
-        int otherCount = 5;
-        int dataSize = 64;
-        byte[] data = generateBytes(dataSize);
-
-        // Limit by count, and allow all the keep keys plus one other.
-        FileLruCache cache = new FileLruCache(getContext(), "testCacheLru", limitCacheCount(keepCount + 1));
-        cache.clearForTest();
-
-        for (int i = 0; i < keepCount; i++) {
-            put(cache, i, data);
-        }
-
-        // Make sure operations are separated by enough time that the file timestamps are all different.
-        // On the test device, it looks like lastModified has 1-second resolution, so we have to wait at
-        // least a second to guarantee that updated timestamps will come later.
-        Thread.sleep(1000);
-        for (int i = 0; i < otherCount; i++) {
-            put(cache, keepCount + i, data);
-            Thread.sleep(1000);
-
-            // By verifying all the keep keys, they should be LRU and survive while the others do not.
-            for (int keepIndex = 0; keepIndex < keepCount; keepIndex++) {
-                checkValue(cache, keepIndex, data);
-            }
-            Thread.sleep(1000);
-        }
-
-        // All but the last other key should have been pushed out
-        for (int i = 0; i < (otherCount - 1); i++) {
-            String key = Integer.valueOf(keepCount + i).toString();
-            assertEquals(false, hasValue(cache, key));
-        }
-    }
-
-    @LargeTest
-    public void testConcurrentWritesToSameKey() throws IOException, InterruptedException {
-        final int count = 5;
-        final int dataSize = 81;
-        final int threadCount = 31;
-        final int iterationCount = 10;
-        final byte[] data = generateBytes(dataSize);
-
-        final FileLruCache cache = new FileLruCache(
-                getContext(), "testConcurrentWritesToSameKey", limitCacheCount(count+1));
-        cache.clearForTest();
-
-        Runnable run = new Runnable() {
-            @Override
-            public void run() {
-                for (int iterations = 0; iterations < iterationCount; iterations++) {
-                    for (int i = 0; i < count; i++) {
-                        put(cache, i, data);
-                    }
-                }
-            }
-        };
-
-        // Create a bunch of threads to write a set of keys repeatedly
-        Thread[] threads = new Thread[threadCount];
-        for (int i = 0; i < threads.length; i++) {
-            threads[i] = new Thread(run);
-        }
-
-        for (Thread thread : threads) {
-            thread.start();
-        }
-
-        for (Thread thread : threads) {
-            thread.join(10 * 1000, 0);
-        }
-
-        // Verify that the file state ended up consistent in the end
-        for (int i = 0; i < count; i++) {
-            checkValue(cache, i, data);
-        }
-    }
-
-    byte[] generateBytes(int n) {
-        byte[] bytes = new byte[n];
-        random.nextBytes(bytes);
-        return bytes;
-    }
-
-    FileLruCache.Limits limitCacheSize(int n) {
-        FileLruCache.Limits limits = new FileLruCache.Limits();
-        limits.setByteCount(n);
-        return limits;
-    }
-
-    FileLruCache.Limits limitCacheCount(int n) {
-        FileLruCache.Limits limits = new FileLruCache.Limits();
-        limits.setFileCount(n);
-        return limits;
-    }
-
-    void put(FileLruCache cache, int i, byte[] data) {
-        put(cache, Integer.valueOf(i).toString(), data);
-    }
-
-    void put(FileLruCache cache, String key, byte[] data) {
-        try {
-            OutputStream stream = cache.openPutStream(key);
-            assertNotNull(stream);
-
-            stream.write(data);
-            stream.close();
-        } catch (IOException e) {
-            // Fail test and print Exception
-            assertNull(e);
-        }
-    }
-
-    void checkValue(FileLruCache cache, int i, byte[] expected) {
-        checkValue(cache, Integer.valueOf(i).toString(), expected);
-    }
-
-    void checkValue(FileLruCache cache, String key, byte[] expected) {
-        try {
-            InputStream stream = cache.get(key);
-            assertNotNull(stream);
-
-            checkInputStream(expected, stream);
-            stream.close();
-        } catch (IOException e) {
-            // Fail test and print Exception
-            assertNull(e);
-        }
-    }
-
-    boolean hasValue(FileLruCache cache, int i) {
-        return hasValue(cache, Integer.valueOf(i).toString());
-    }
-
-    boolean hasValue(FileLruCache cache, String key) {
-        InputStream stream = null;
-
-        try {
-            stream = cache.get(key);
-        } catch (IOException e) {
-            // Fail test and print Exception
-            assertNull(e);
-        }
-
-        return stream != null;
-    }
-
-    void checkInputStream(byte[] expected, InputStream actual) {
-        try {
-            for (int i = 0; i < expected.length; i++) {
-                int b = actual.read();
-                assertEquals(((int)expected[i]) & 0xff, b);
-            }
-
-            int eof = actual.read();
-            assertEquals(-1, eof);
-        } catch (IOException e) {
-            // Fail test and print Exception
-            assertNull(e);
-        }
-    }
-
-    void consumeAndClose(InputStream stream) {
-        try {
-            byte[] buffer = new byte[1024];
-            while (stream.read(buffer) > -1) {
-                // these bytes intentionally ignored
-            }
-            stream.close();
-        } catch (IOException e) {
-            // Fail test and print Exception
-            assertNull(e);
-        }
-    }
-}
diff --git a/facebook/tests/src/com/facebook/internal/SessionTrackerTests.java b/facebook/tests/src/com/facebook/internal/SessionTrackerTests.java
deleted file mode 100644
index 7be797b7f..000000000
--- a/facebook/tests/src/com/facebook/internal/SessionTrackerTests.java
+++ /dev/null
@@ -1,183 +0,0 @@
-/**
- * Copyright 2012 Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.internal;
-
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import com.facebook.*;
-import com.facebook.internal.SessionTracker;
-
-import java.util.Collections;
-
-public class SessionTrackerTests extends SessionTestsBase {
-
-    private static final String TOKEN_STR = "A token of thanks";
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    // Tests the SessionDelegate while tracking the active session
-    public void testDelegateWithActiveSession() throws Exception {
-        Session.setActiveSession(null);
-        final SessionStatusCallbackRecorder statusRecorder =
-                new SessionStatusCallbackRecorder();
-        final MockTokenCache cache = new MockTokenCache(null, 0);
-        final ScriptedSession session =
-                createScriptedSessionOnBlockerThread(cache);
-
-        session.addAuthorizeResult(TOKEN_STR, Collections.<String>emptyList(), AccessTokenSource.TEST_USER);
-
-        final SessionTracker tracker = new SessionTracker(getActivity(), statusRecorder);
-        Session.setActiveSession(session);
-
-        session.openForRead(getActivity());
-
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-        assertNotNull("Session should be open", tracker.getOpenSession());
-        assertEquals("Access Token check", TOKEN_STR, tracker.getOpenSession().getAccessToken());
-        tracker.getOpenSession().close();
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        tracker.stopTracking();
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    // Tests the SessionDelegate while tracking a passed in session from the constructor
-    public void testDelegateWithSessionInConstructor() throws Exception {
-        final SessionStatusCallbackRecorder statusRecorder =
-                new SessionStatusCallbackRecorder();
-        final MockTokenCache cache = new MockTokenCache(null, 0);
-        final ScriptedSession session =
-                createScriptedSessionOnBlockerThread(cache);
-
-        session.addAuthorizeResult(TOKEN_STR, Collections.<String>emptyList(), AccessTokenSource.TEST_USER);
-
-        SessionTracker tracker = new SessionTracker(getActivity(), statusRecorder, session);
-
-        session.openForRead(getActivity());
-
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-        assertNotNull("Session should be open", tracker.getOpenSession());
-        assertEquals("Access Token check", TOKEN_STR, tracker.getOpenSession().getAccessToken());
-        tracker.getOpenSession().close();
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        tracker.stopTracking();
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    // Tests the SessionDelegate while tracking the active session and then a new session
-    public void testDelegateWithActiveSessionThenNewSession() throws Exception {
-        Session.setActiveSession(null);
-        final SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder();
-        final MockTokenCache cache = new MockTokenCache(null, 0);
-        final ScriptedSession session = createScriptedSessionOnBlockerThread(cache);
-
-        session.addAuthorizeResult(TOKEN_STR, Collections.<String>emptyList(), AccessTokenSource.TEST_USER);
-
-        SessionTracker tracker = new SessionTracker(getActivity(), statusRecorder);
-        Session.setActiveSession(session);
-
-        session.openForRead(getActivity());
-
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-        assertNotNull("Session should be open", tracker.getOpenSession());
-        assertEquals("Access Token check", TOKEN_STR, tracker.getOpenSession().getAccessToken());
-        tracker.getOpenSession().close();
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        final ScriptedSession newSession = createScriptedSessionOnBlockerThread(cache);
-        newSession.addAuthorizeResult(TOKEN_STR, Collections.<String>emptyList(), AccessTokenSource.TEST_USER);
-
-        tracker.setSession(newSession);
-        assertNull("Session should not be open", tracker.getOpenSession());
-        newSession.openForRead(getActivity());
-
-        statusRecorder.waitForCall(newSession, SessionState.OPENING, null);
-        statusRecorder.waitForCall(newSession, SessionState.OPENED, null);
-        assertNotNull("Session should be open", tracker.getOpenSession());
-        assertEquals("Access Token check", TOKEN_STR, tracker.getOpenSession().getAccessToken());
-        tracker.getOpenSession().close();
-        statusRecorder.waitForCall(newSession, SessionState.CLOSED, null);
-
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        tracker.stopTracking();
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    // Tests the SessionDelegate while tracking a new session and then an active session
-    public void testDelegateWithSessionThenActiveSession() throws Exception {
-        Session.setActiveSession(null);
-        final SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder();
-        final MockTokenCache cache = new MockTokenCache(null, 0);
-        final ScriptedSession session = createScriptedSessionOnBlockerThread(cache);
-
-        session.addAuthorizeResult(TOKEN_STR, Collections.<String>emptyList(), AccessTokenSource.TEST_USER);
-
-        final SessionTracker tracker = new SessionTracker(getActivity(), statusRecorder, session);
-
-        session.openForRead(getActivity());
-
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-        assertNotNull("Session should be open", tracker.getOpenSession());
-        assertEquals("Access Token check", TOKEN_STR, tracker.getOpenSession().getAccessToken());
-        tracker.getOpenSession().close();
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        final ScriptedSession newSession = createScriptedSessionOnBlockerThread(cache);
-        newSession.addAuthorizeResult(TOKEN_STR, Collections.<String>emptyList(), AccessTokenSource.TEST_USER);
-
-        // need to run on the blocker thread so that when we register the 
-        // BroadcastReceivers, the handler gets run on the right thread
-        runOnBlockerThread(new Runnable() {
-            public void run() {
-                tracker.setSession(null);
-                Session.setActiveSession(newSession);
-            }
-        }, true);
-
-        assertNull("Session should not be open", tracker.getOpenSession());
-        newSession.openForRead(getActivity());
-
-        statusRecorder.waitForCall(newSession, SessionState.OPENING, null);
-        statusRecorder.waitForCall(newSession, SessionState.OPENED, null);
-        assertNotNull("Session should be open", tracker.getOpenSession());
-        assertEquals("Access Token check", TOKEN_STR, tracker.getOpenSession().getAccessToken());
-        tracker.getOpenSession().close();
-        statusRecorder.waitForCall(newSession, SessionState.CLOSED, null);
-
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        tracker.stopTracking();
-        statusRecorder.close();
-    }
-}
diff --git a/facebook/tests/src/com/facebook/internal/ValidateTests.java b/facebook/tests/src/com/facebook/internal/ValidateTests.java
deleted file mode 100644
index f04934ef3..000000000
--- a/facebook/tests/src/com/facebook/internal/ValidateTests.java
+++ /dev/null
@@ -1,105 +0,0 @@
-/**
- * Copyright 2012 Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.internal;
-
-import android.test.AndroidTestCase;
-import android.test.suitebuilder.annotation.SmallTest;
-import com.facebook.internal.Validate;
-
-import java.util.Arrays;
-
-public class ValidateTests extends AndroidTestCase {
-    
-    @SmallTest
-    public void testNotNullOnNonNull() {
-        Validate.notNull("A string", "name");
-    }
-
-    @SmallTest
-    public void testNotNullOnNull() {
-        try {
-            Validate.notNull(null, "name");
-            fail("expected exception");
-        } catch (Exception e) {
-        }
-    }
-
-    @SmallTest
-    public void testNotEmptyOnNonEmpty() {
-        Validate.notEmpty(Arrays.asList(new String[] { "hi" }), "name");
-    }
-
-    @SmallTest
-    public void testNotEmptylOnEmpty() {
-        try {
-            Validate.notEmpty(Arrays.asList(new String[] {}), "name");
-            fail("expected exception");
-        } catch (Exception e) {
-        }
-    }
-
-    @SmallTest
-    public void testNotNullOrEmptyOnNonEmpty() {
-        Validate.notNullOrEmpty("hi", "name");
-    }
-
-    @SmallTest
-    public void testNotNullOrEmptyOnEmpty() {
-        try {
-            Validate.notNullOrEmpty("", "name");
-            fail("expected exception");
-        } catch (Exception e) {
-        }
-    }
-
-    @SmallTest
-    public void testNotNullOrEmptyOnNull() {
-        try {
-            Validate.notNullOrEmpty(null, "name");
-            fail("expected exception");
-        } catch (Exception e) {
-        }
-    }
-
-    @SmallTest
-    public void testOneOfOnValid() {
-        Validate.oneOf("hi", "name", "hi", "there");
-    }
-
-    @SmallTest
-    public void testOneOfOnInvalid() {
-        try {
-            Validate.oneOf("hit", "name", "hi", "there");
-            fail("expected exception");
-        } catch (Exception e) {
-        }
-    }
-
-    @SmallTest
-    public void testOneOfOnValidNull() {
-        Validate.oneOf(null, "name", "hi", "there", null);
-    }
-
-    @SmallTest
-    public void testOneOfOnInvalidNull() {
-        try {
-            Validate.oneOf(null, "name", "hi", "there");
-            fail("expected exception");
-        } catch (Exception e) {
-        }
-    }
-}
diff --git a/facebook/tests/src/com/facebook/model/GraphObjectFactoryTests.java b/facebook/tests/src/com/facebook/model/GraphObjectFactoryTests.java
deleted file mode 100644
index 51b883229..000000000
--- a/facebook/tests/src/com/facebook/model/GraphObjectFactoryTests.java
+++ /dev/null
@@ -1,1126 +0,0 @@
-/**
- * Copyright 2010 Facebook, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.model;
-
-import android.test.AndroidTestCase;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import com.facebook.FacebookGraphObjectException;
-import junit.framework.Assert;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.*;
-import java.util.Map.Entry;
-
-public final class GraphObjectFactoryTests extends AndroidTestCase {
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCreateEmptyGraphObject() {
-        GraphObject graphObject = GraphObject.Factory.create();
-        assertTrue(graphObject != null);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanTreatAsMap() {
-        GraphObject graphObject = GraphObject.Factory.create();
-
-        graphObject.setProperty("hello", "world");
-        assertEquals("world", (String) graphObject.asMap().get("hello"));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanTreatAsGraphPlace() {
-        GraphPlace graphPlace = GraphObject.Factory.create(GraphPlace.class);
-
-        graphPlace.setName("hello");
-        assertEquals("hello", graphPlace.getName());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanTreatAsGraphUser() {
-        GraphUser graphUser = GraphObject.Factory.create(GraphUser.class);
-
-        graphUser.setFirstName("Michael");
-        assertEquals("Michael", graphUser.getFirstName());
-        assertEquals("Michael", graphUser.getProperty("first_name"));
-        assertEquals("Michael", graphUser.asMap().get("first_name"));
-
-        graphUser.setProperty("last_name", "Scott");
-        assertEquals("Scott", graphUser.getProperty("last_name"));
-        assertEquals("Scott", graphUser.getLastName());
-        assertEquals("Scott", graphUser.asMap().get("last_name"));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanCastBetweenGraphObjectTypes() {
-        GraphObject graphObject = GraphObject.Factory.create();
-
-        graphObject.setProperty("first_name", "Mickey");
-
-        GraphUser graphUser = graphObject.cast(GraphUser.class);
-        assertTrue(graphUser != null);
-        // Should see the name we set earlier as a GraphObject.
-        assertEquals("Mickey", graphUser.getFirstName());
-
-        // Changes to GraphUser should be reflected in GraphObject version.
-        graphUser.setLastName("Mouse");
-        assertEquals("Mouse", graphObject.getProperty("last_name"));
-    }
-
-    interface Base extends GraphObject {
-    }
-
-    interface Derived extends Base {
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCastingToSameTypeGivesSameObject() {
-        Base base = GraphObject.Factory.create(Base.class);
-
-        Base cast = base.cast(Base.class);
-
-        assertTrue(base == cast);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCastingToBaseTypeGivesSameObject() {
-        Derived derived = GraphObject.Factory.create(Derived.class);
-
-        Base cast = derived.cast(Base.class);
-        assertTrue(derived == cast);
-
-        cast = cast.cast(Derived.class);
-        assertTrue(derived == cast);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanSetComplexTypes() {
-        GraphLocation graphLocation = GraphObject.Factory.create(GraphLocation.class);
-        graphLocation.setCity("Seattle");
-
-        GraphPlace graphPlace = GraphObject.Factory.create(GraphPlace.class);
-        graphPlace.setLocation(graphLocation);
-
-        assertEquals(graphLocation, graphPlace.getLocation());
-        assertEquals("Seattle", graphPlace.getLocation().getCity());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanConvertFromJSON() throws JSONException {
-        JSONObject jsonLocation = new JSONObject();
-        jsonLocation.put("city", "Paris");
-        jsonLocation.put("country", "France");
-
-        JSONObject jsonPlace = new JSONObject();
-        jsonPlace.put("location", jsonLocation);
-        jsonPlace.put("name", "Eiffel Tower");
-
-        GraphPlace graphPlace = GraphObject.Factory.create(jsonPlace, GraphPlace.class);
-        GraphLocation graphLocation = graphPlace.getLocation();
-        assertEquals("Paris", graphLocation.getCity());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanConvertFromGraphObject() throws JSONException {
-        GraphObject graphObject = GraphObject.Factory.create();
-        graphObject.setProperty("city", "Paris");
-        graphObject.setProperty("country", "France");
-
-        JSONObject jsonPlace = new JSONObject();
-        jsonPlace.put("location", graphObject);
-        jsonPlace.put("name", "Eiffel Tower");
-
-        GraphPlace graphPlace = GraphObject.Factory.create(jsonPlace, GraphPlace.class);
-        GraphLocation graphLocation = graphPlace.getLocation();
-        assertEquals("Paris", graphLocation.getCity());
-    }
-
-    private abstract class GraphObjectClass implements GraphObject {
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantWrapNonInterface() {
-        try {
-            GraphObject.Factory.create(GraphObjectClass.class);
-            fail("Expected exception");
-        } catch (FacebookGraphObjectException exception) {
-        }
-    }
-
-    private interface BadNoParameterMethodNameGraphObject extends GraphObject {
-        Object floppityFlee();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantWrapBadZeroParameterMethodName() {
-        try {
-            GraphObject.Factory.create(BadNoParameterMethodNameGraphObject.class);
-            fail("Expected exception");
-        } catch (FacebookGraphObjectException exception) {
-        }
-    }
-
-    private interface BadSingleParameterMethodNameGraphObject extends GraphObject {
-        void floppityFlee(Object obj);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantWrapBadSingleParameterMethodName() {
-        try {
-            GraphObject.Factory.create(BadSingleParameterMethodNameGraphObject.class);
-            fail("Expected exception");
-        } catch (FacebookGraphObjectException exception) {
-        }
-    }
-
-    private interface BadGetterNameGraphObject extends GraphObject {
-        void get();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantWrapBadGetterName() {
-        try {
-            GraphObject.Factory.create(BadGetterNameGraphObject.class);
-            fail("Expected exception");
-        } catch (FacebookGraphObjectException exception) {
-        }
-    }
-
-    private interface BadGetterParamsGraphObject extends GraphObject {
-        Object getFoo(Object obj);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantWrapBadGetterParams() {
-        try {
-            GraphObject.Factory.create(BadGetterParamsGraphObject.class);
-            fail("Expected exception");
-        } catch (FacebookGraphObjectException exception) {
-        }
-    }
-
-    private interface BadGetterReturnTypeGraphObject extends GraphObject {
-        void getFoo();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantWrapBadGetterReturnType() {
-        try {
-            GraphObject.Factory.create(BadGetterReturnTypeGraphObject.class);
-            fail("Expected exception");
-        } catch (FacebookGraphObjectException exception) {
-        }
-    }
-
-    private interface BadSetterNameGraphObject extends GraphObject {
-        void set();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantWrapBadSetterName() {
-        try {
-            GraphObject.Factory.create(BadSetterNameGraphObject.class);
-            fail("Expected exception");
-        } catch (FacebookGraphObjectException exception) {
-        }
-    }
-
-    private interface BadSetterParamsGraphObject extends GraphObject {
-        void setFoo();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantWrapBadSetterParams() {
-        try {
-            GraphObject.Factory.create(BadSetterParamsGraphObject.class);
-            fail("Expected exception");
-        } catch (FacebookGraphObjectException exception) {
-        }
-    }
-
-    private interface BadSetterReturnTypeGraphObject extends GraphObject {
-        Object setFoo(Object obj);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantWrapBadSetterReturnType() {
-        try {
-            GraphObject.Factory.create(BadSetterReturnTypeGraphObject.class);
-            fail("Expected exception");
-        } catch (FacebookGraphObjectException exception) {
-        }
-    }
-
-    private interface BadBaseInterfaceGraphObject extends BadSetterReturnTypeGraphObject {
-        void setBar(Object obj);
-
-        Object getBar();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantWrapBadBaseInterface() {
-        try {
-            GraphObject.Factory.create(BadBaseInterfaceGraphObject.class);
-            fail("Expected exception");
-        } catch (FacebookGraphObjectException exception) {
-        }
-    }
-
-    private interface GoodPropertyOverrideInterfaceGraphObject extends GraphObject {
-        void setDefaultName(String s);
-
-        // No annotation to ensure that the right property is being set.
-        String getAnotherDefaultName();
-
-        @PropertyName("another_default_name")
-        void putSomething(String s);
-
-        @PropertyName("default_name")
-        String retrieveSomething();
-
-        @PropertyName("MixedCase")
-        void setMixedCase(String s);
-
-        @PropertyName("MixedCase")
-        String getMixedCase();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanOverrideGraphPropertyNames() {
-        GoodPropertyOverrideInterfaceGraphObject graphObject =
-                GraphObject.Factory.create(GoodPropertyOverrideInterfaceGraphObject.class);
-
-        String testValue = "flu-blah";
-        graphObject.setDefaultName(testValue);
-        Assert.assertEquals(testValue, graphObject.retrieveSomething());
-
-        testValue = testValue + "1";
-        graphObject.putSomething(testValue);
-        Assert.assertEquals(testValue, graphObject.getAnotherDefaultName());
-
-        testValue = testValue + "2";
-        graphObject.setMixedCase(testValue);
-        Assert.assertEquals(testValue, graphObject.getMixedCase());
-    }
-
-    private interface BadPropertyOverrideInterfaceGraphObject extends GraphObject {
-        @PropertyName("")
-        void setMissingProperty(Object value);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantWrapBadPropertyNameOverrides() {
-        try {
-            GraphObject.Factory.create(BadPropertyOverrideInterfaceGraphObject.class);
-            fail("Expected exception");
-        } catch (FacebookGraphObjectException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testObjectEquals() {
-        GraphObject graphObject = GraphObject.Factory.create();
-        graphObject.setProperty("aKey", "aValue");
-
-        assertTrue(graphObject.equals(graphObject));
-
-        GraphPlace graphPlace = graphObject.cast(GraphPlace.class);
-        assertTrue(graphObject.equals(graphPlace));
-        assertTrue(graphPlace.equals(graphObject));
-
-        GraphObject aDifferentGraphObject = GraphObject.Factory.create();
-        aDifferentGraphObject.setProperty("aKey", "aDifferentValue");
-        assertFalse(graphObject.equals(aDifferentGraphObject));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testGetProperty() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-        assertEquals("world", graphObject.getProperty("hello"));
-        assertTrue(graphObject.getProperty("fred") == null);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testSetProperty() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-
-        graphObject.setProperty("hello", "world");
-        graphObject.setProperty("don't imagine", "purple elephants");
-
-        assertEquals("world", jsonObject.getString("hello"));
-        assertEquals("purple elephants", jsonObject.getString("don't imagine"));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testRemoveProperty() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("whirled", "peas");
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-
-        graphObject.setProperty("hello", "world");
-        graphObject.setProperty("don't imagine", "purple elephants");
-
-        assertEquals("world", jsonObject.getString("hello"));
-        assertEquals("purple elephants", jsonObject.getString("don't imagine"));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapClear() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("hello", "world");
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-
-        assertEquals(1, jsonObject.length());
-
-        graphObject.asMap().clear();
-
-        assertEquals(0, jsonObject.length());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapContainsKey() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("hello", "world");
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-
-        assertTrue(graphObject.asMap().containsKey("hello"));
-        assertFalse(graphObject.asMap().containsKey("hocus"));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapContainsValue() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("hello", "world");
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-
-        assertTrue(graphObject.asMap().containsValue("world"));
-        assertFalse(graphObject.asMap().containsValue("pocus"));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapEntrySet() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-
-        Set<Entry<String, Object>> entrySet = graphObject.asMap().entrySet();
-        assertEquals(2, entrySet.size());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapGet() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-        assertEquals("world", graphObject.asMap().get("hello"));
-        assertTrue(graphObject.getProperty("fred") == null);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapGetReturnsNullForMissingProperty() throws JSONException {
-        GraphUser graphUser = GraphObject.Factory.create(GraphUser.class);
-        assertNull(graphUser.getBirthday());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapIsEmpty() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-        assertTrue(graphObject.asMap().isEmpty());
-
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-        assertFalse(graphObject.asMap().isEmpty());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapKeySet() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-
-        Set<String> keySet = graphObject.asMap().keySet();
-        assertEquals(2, keySet.size());
-        assertTrue(keySet.contains("hello"));
-        assertTrue(keySet.contains("hocus"));
-        assertFalse(keySet.contains("world"));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapPut() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-        graphObject.setProperty("hello", "world");
-        graphObject.setProperty("hocus", "pocus");
-
-        assertEquals("pocus", jsonObject.get("hocus"));
-        assertEquals(2, jsonObject.length());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapPutOfWrapperPutsJSONObject() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-        graphObject.setProperty("hello", "world");
-        graphObject.setProperty("hocus", "pocus");
-
-        GraphObject parentObject = GraphObject.Factory.create();
-        parentObject.setProperty("key", graphObject);
-
-        JSONObject jsonParent = parentObject.getInnerJSONObject();
-        Object obj = jsonParent.opt("key");
-
-        assertNotNull(obj);
-        assertEquals(jsonObject, obj);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapPutOfWrapperPutsJSONArray() throws JSONException {
-        JSONArray jsonArray = new JSONArray();
-
-        GraphObjectList<String> graphObjectList = GraphObject.Factory
-                .createList(jsonArray, String.class);
-        graphObjectList.add("hello");
-        graphObjectList.add("world");
-
-        GraphObject parentObject = GraphObject.Factory.create();
-        parentObject.setProperty("key", graphObjectList);
-
-        JSONObject jsonParent = parentObject.getInnerJSONObject();
-        Object obj = jsonParent.opt("key");
-
-        assertNotNull(obj);
-        assertEquals(jsonArray, obj);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapPutAll() throws JSONException {
-        HashMap<String, Object> map = new HashMap<String, Object>();
-        map.put("hello", "world");
-        map.put("hocus", "pocus");
-
-        JSONObject jsonObject = new JSONObject();
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-
-        graphObject.asMap().putAll(map);
-        assertEquals("pocus", jsonObject.get("hocus"));
-        assertEquals(2, jsonObject.length());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapRemove() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-        graphObject.removeProperty("hello");
-
-        assertEquals(1, jsonObject.length());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapSize() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-
-        assertEquals(2, graphObject.asMap().size());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMapValues() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-
-        Collection<Object> values = graphObject.asMap().values();
-
-        assertEquals(2, values.size());
-        assertTrue(values.contains("world"));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testGetInnerJSONObject() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-
-        assertEquals(jsonObject, graphObject.getInnerJSONObject());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testSettingGraphObjectProxyStoresJSONObject() throws JSONException {
-        GraphPlace graphPlace = GraphObject.Factory.create(GraphPlace.class);
-        GraphLocation graphLocation = GraphObject.Factory.create(GraphLocation.class);
-
-        graphPlace.setLocation(graphLocation);
-
-        assertEquals(graphLocation.getInnerJSONObject(), graphPlace.getInnerJSONObject().get("location"));
-
-    }
-
-    private interface DateGraphObject extends GraphObject {
-        Date getDate1();
-
-        Date getDate2();
-
-        Date getDate3();
-
-        Date getDate4();
-        void setDate4(Date date);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testGetStringsAsDates() {
-        DateGraphObject dates = GraphObject.Factory.create(DateGraphObject.class);
-        dates.setProperty("date1", "2012-07-04");
-        dates.setProperty("date2", "2012-07-04T19:30:50");
-        dates.setProperty("date3", "2012-07-04T19:20:40-0400");
-
-        // Dates without a time zone should be assumed to be in the current timezone.
-        Calendar cal = new GregorianCalendar();
-        cal.set(Calendar.MILLISECOND, 0);
-
-        cal.set(2012, 6, 4, 0, 0, 0);
-        Date expectedDate1 = cal.getTime();
-        Date date1 = dates.getDate1();
-        assertEquals(expectedDate1, date1);
-
-        cal.set(2012, 6, 4, 19, 30, 50);
-        Date expectedDate2 = cal.getTime();
-        Date date2 = dates.getDate2();
-        assertEquals(expectedDate2, date2);
-
-        // Dates with an explicit time zone should take that timezone into account.
-        cal = new GregorianCalendar(TimeZone.getTimeZone("GMT"));
-        cal.set(Calendar.MILLISECOND, 0);
-        cal.set(2012, 6, 4, 23, 20, 40);
-
-        Date expectedDate3 = cal.getTime();
-        Date date3 = dates.getDate3();
-        assertEquals(expectedDate3, date3);
-
-        cal.set(2012, 9, 28, 9, 53, 0);
-        Date expectedDate4 = cal.getTime();
-        dates.setDate4(expectedDate4);
-        Date date4 = dates.getDate4();
-        assertEquals(expectedDate4, date4);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionAdd() throws JSONException {
-        JSONArray array = new JSONArray();
-
-        Collection<Integer> collection = GraphObject.Factory.createList(array, Integer.class);
-        collection.add(5);
-
-        assertTrue(array.length() == 1);
-        assertTrue(array.optInt(0) == 5);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionAddAll() throws JSONException {
-        JSONArray array = new JSONArray();
-
-        Collection<Integer> collectionToAdd = Arrays.asList(5, -1);
-
-        Collection<Integer> collection = GraphObject.Factory.createList(array, Integer.class);
-        collection.addAll(collectionToAdd);
-
-        assertTrue(array.length() == 2);
-        assertTrue(array.optInt(0) == 5);
-        assertTrue(array.optInt(1) == -1);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionContains() throws JSONException {
-        JSONArray array = new JSONArray();
-        array.put(5);
-
-        Collection<Integer> collection = GraphObject.Factory.createList(array, Integer.class);
-        assertTrue(collection.contains(5));
-        assertFalse(collection.contains(6));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionContainsAll() throws JSONException {
-        JSONArray array = new JSONArray();
-        array.put(5);
-        array.put(-1);
-
-        Collection<Integer> collection = GraphObject.Factory.createList(array, Integer.class);
-        assertTrue(collection.containsAll(Arrays.asList(5)));
-        assertTrue(collection.containsAll(Arrays.asList(5, -1)));
-        assertFalse(collection.containsAll(Arrays.asList(5, -1, 2)));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionIsEmpty() throws JSONException {
-        JSONArray array = new JSONArray();
-
-        Collection<Integer> collection = GraphObject.Factory.createList(array, Integer.class);
-        assertTrue(collection.isEmpty());
-
-        array.put(5);
-        assertFalse(collection.isEmpty());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionIterator() throws JSONException {
-        JSONArray array = new JSONArray();
-        array.put(5);
-        array.put(-1);
-
-        Collection<Integer> collection = GraphObject.Factory.createList(array, Integer.class);
-        Iterator<Integer> iter = collection.iterator();
-        assertTrue(iter.hasNext());
-        assertTrue(iter.next() == 5);
-        assertTrue(iter.hasNext());
-        assertTrue(iter.next() == -1);
-        assertFalse(iter.hasNext());
-
-        for (Integer i : collection) {
-            assertNotSame(0, i);
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionIteratorOfGraphObject() throws JSONException {
-        Collection<GraphLocation> collection = GraphObject.Factory.createList(GraphLocation.class);
-
-        GraphLocation seattle = GraphObject.Factory.create(GraphLocation.class);
-        seattle.setCity("Seattle");
-        collection.add(seattle);
-        GraphLocation paris = GraphObject.Factory.create(GraphLocation.class);
-        paris.setCity("Paris");
-        collection.add(paris);
-
-        Iterator<GraphLocation> iter = collection.iterator();
-        assertTrue(iter.hasNext());
-        assertEquals(seattle, iter.next());
-        assertTrue(iter.hasNext());
-        assertEquals(paris, iter.next());
-        assertFalse(iter.hasNext());
-
-        for (GraphLocation location : collection) {
-            assertTrue(location != null);
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionSize() throws JSONException {
-        JSONArray array = new JSONArray();
-
-        Collection<Integer> collection = GraphObject.Factory.createList(array, Integer.class);
-        assertEquals(0, collection.size());
-
-        array.put(5);
-        assertEquals(1, collection.size());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionClearThrows() throws JSONException {
-        try {
-            Collection<Integer> collection = GraphObject.Factory.createList(Integer.class);
-            collection.clear();
-            fail("Expected exception");
-        } catch (UnsupportedOperationException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionRemoveThrows() throws JSONException {
-        try {
-            Collection<Integer> collection = GraphObject.Factory.createList(Integer.class);
-            collection.remove(5);
-            fail("Expected exception");
-        } catch (UnsupportedOperationException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionRemoveAllThrows() throws JSONException {
-        try {
-            Collection<Integer> collection = GraphObject.Factory.createList(Integer.class);
-            collection.removeAll(Arrays.asList());
-            fail("Expected exception");
-        } catch (UnsupportedOperationException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionRetainAllThrows() throws JSONException {
-        try {
-            Collection<Integer> collection = GraphObject.Factory.createList(Integer.class);
-            collection.retainAll(Arrays.asList());
-            fail("Expected exception");
-        } catch (UnsupportedOperationException exception) {
-        }
-    }
-
-    private interface Locations extends GraphObject {
-        Collection<GraphLocation> getLocations();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testObjectWrapsJSONCollection() throws JSONException {
-        JSONObject jsonLocation = new JSONObject();
-        jsonLocation.put("city", "Seattle");
-
-        JSONArray jsonArray = new JSONArray();
-        jsonArray.put(jsonLocation);
-
-        JSONObject jsonLocations = new JSONObject();
-        jsonLocations.put("locations", jsonArray);
-
-        Locations locations = GraphObject.Factory.create(jsonLocations, Locations.class);
-        Collection<GraphLocation> locationsGraphObjectCollection = locations.getLocations();
-        assertTrue(locationsGraphObjectCollection != null);
-
-        GraphLocation graphLocation = locationsGraphObjectCollection.iterator().next();
-        assertTrue(graphLocation != null);
-        assertEquals("Seattle", graphLocation.getCity());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testObjectWrapsIterable() throws JSONException {
-        GraphUser user = GraphObject.Factory.create(GraphUser.class);
-        user.setFirstName("Foo");
-        user.setLastName("Bar");
-
-        List<GraphUser> users = new ArrayList<GraphUser>();
-        users.add(user);
-
-        OpenGraphAction action = GraphObject.Factory.create(OpenGraphAction.class);
-        action.setTags(users);
-
-        String json = action.getInnerJSONObject().toString();
-
-        assertTrue("JSON string should contain last_name", json.contains("last_name"));
-
-        Object tags = action.getInnerJSONObject().get("tags");
-        assertNotNull("tags should not be null", tags);
-        assertTrue("tags should be JSONArray", tags instanceof JSONArray);
-
-        List<GraphObject> retrievedUsers = action.getTags();
-        assertEquals("Size should be 1", 1, retrievedUsers.size());
-        GraphUser retrievedUser = retrievedUsers.get(0).cast(GraphUser.class);
-        assertEquals("First name should be Foo", "Foo", retrievedUser.getFirstName());
-        assertEquals("Last name should be Bar", "Bar", retrievedUser.getLastName());
-
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionWrapsJSONObject() throws JSONException {
-        JSONObject jsonLocation = new JSONObject();
-        jsonLocation.put("city", "Seattle");
-
-        JSONArray jsonArray = new JSONArray();
-        jsonArray.put(jsonLocation);
-        Collection<GraphLocation> locationsGraphObjectCollection = GraphObject.Factory
-                .createList(jsonArray,
-                        GraphLocation.class);
-        assertTrue(locationsGraphObjectCollection != null);
-
-        GraphLocation graphLocation = locationsGraphObjectCollection.iterator().next();
-        assertTrue(graphLocation != null);
-        assertEquals("Seattle", graphLocation.getCity());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCannotCastCollectionOfNonGraphObjects() throws JSONException {
-        try {
-            GraphObjectList<Integer> collection = GraphObject.Factory.createList(Integer.class);
-            collection.castToListOf(GraphLocation.class);
-            fail("Expected exception");
-        } catch (FacebookGraphObjectException exception) {
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanCastCollectionOfGraphObjects() throws JSONException {
-        JSONObject jsonSeattle = new JSONObject();
-        jsonSeattle.put("city", "Seattle");
-
-        JSONArray jsonArray = new JSONArray();
-        jsonArray.put(jsonSeattle);
-
-        GraphObjectList<GraphObject> collection = GraphObject.Factory
-                .createList(jsonArray, GraphObject.class);
-
-        GraphObjectList<GraphLocation> locationCollection = collection.castToListOf(GraphLocation.class);
-        assertTrue(locationCollection != null);
-
-        GraphLocation seattle = locationCollection.iterator().next();
-        assertTrue(seattle != null);
-        assertEquals("Seattle", seattle.getCity());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCastingCollectionToSameTypeGivesSameObject() {
-        GraphObjectList<Base> base = GraphObject.Factory.createList(Base.class);
-
-        GraphObjectList<Base> cast = base.castToListOf(Base.class);
-
-        assertTrue(base == cast);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCastingCollectionToBaseTypeGivesSameObject() {
-        GraphObjectList<Derived> derived = GraphObject.Factory.createList(Derived.class);
-
-        GraphObjectList<Base> cast = derived.castToListOf(Base.class);
-
-        assertTrue((GraphObjectList<?>)derived == (GraphObjectList<?>)cast);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanGetInnerJSONArray() throws JSONException {
-        JSONArray jsonArray = new JSONArray();
-
-        GraphObjectList<GraphObject> collection = GraphObject.Factory
-                .createList(jsonArray, GraphObject.class);
-
-        assertEquals(jsonArray, collection.getInnerJSONArray());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanGetRandomAccess() throws JSONException {
-        JSONArray jsonArray = new JSONArray();
-        jsonArray.put("Seattle");
-        jsonArray.put("Menlo Park");
-
-        GraphObjectList<String> collection = GraphObject.Factory
-                .createList(jsonArray, String.class);
-
-        assertEquals("Menlo Park", collection.get(1));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanSetRandomAccess() throws JSONException {
-        JSONArray jsonArray = new JSONArray();
-
-        GraphObjectList<String> collection = GraphObject.Factory
-                .createList(jsonArray, String.class);
-
-        collection.add("Seattle");
-        collection.add("Menlo Park");
-
-        collection.set(1, "Ann Arbor");
-        assertEquals("Ann Arbor", collection.get(1));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCollectionPutOfWrapperPutsJSONObject() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-
-        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
-        graphObject.setProperty("hello", "world");
-        graphObject.setProperty("hocus", "pocus");
-
-        GraphObjectList<GraphObject> parentList = GraphObject.Factory
-                .createList(GraphObject.class);
-        parentList.add(graphObject);
-
-        JSONArray jsonArray = parentList.getInnerJSONArray();
-
-        Object obj = jsonArray.opt(0);
-
-        assertNotNull(obj);
-        assertEquals(jsonObject, obj);
-
-        parentList.set(0, graphObject);
-
-        obj = jsonArray.opt(0);
-
-        assertNotNull(obj);
-        assertEquals(jsonObject, obj);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCamelCaseToLowercase() {
-        assertEquals("hello_world", GraphObject.Factory
-                .convertCamelCaseToLowercaseWithUnderscores("HelloWorld"));
-        assertEquals("hello_world", GraphObject.Factory
-                .convertCamelCaseToLowercaseWithUnderscores("helloWorld"));
-    }
-
-
-}
diff --git a/facebook/tests/src/com/facebook/model/JsonUtilTests.java b/facebook/tests/src/com/facebook/model/JsonUtilTests.java
deleted file mode 100644
index c6bbb1242..000000000
--- a/facebook/tests/src/com/facebook/model/JsonUtilTests.java
+++ /dev/null
@@ -1,103 +0,0 @@
-/**
- * Copyright 2010 Facebook, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.model;
-
-import android.test.AndroidTestCase;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Map.Entry;
-import java.util.Set;
-
-public final class JsonUtilTests extends AndroidTestCase {
-
-    @SmallTest @MediumTest @LargeTest
-    public void testJsonObjectClear() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        JsonUtil.jsonObjectClear(jsonObject);
-        assertEquals(0, jsonObject.length());
-    }
-
-    @SmallTest @MediumTest @LargeTest
-    public void testJsonObjectContainsValue() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        assertTrue(JsonUtil.jsonObjectContainsValue(jsonObject, "pocus"));
-        assertFalse(JsonUtil.jsonObjectContainsValue(jsonObject, "Fred"));
-    }
-
-    @SmallTest @MediumTest @LargeTest
-    public void testJsonObjectEntrySet() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        Set<Entry<String, Object>> entrySet = JsonUtil.jsonObjectEntrySet(jsonObject);
-        assertEquals(2, entrySet.size());
-    }
-
-    @SmallTest @MediumTest @LargeTest
-    public void testJsonObjectKeySet() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        Set<String> keySet = JsonUtil.jsonObjectKeySet(jsonObject);
-        assertEquals(2, keySet.size());
-        assertTrue(keySet.contains("hello"));
-        assertFalse(keySet.contains("world"));
-    }
-
-    @SmallTest @MediumTest @LargeTest
-    public void testJsonObjectPutAll() throws JSONException {
-        HashMap<String, Object> map = new HashMap<String, Object>();
-        map.put("hello", "world");
-        map.put("hocus", "pocus");
-
-        JSONObject jsonObject = new JSONObject();
-        JsonUtil.jsonObjectPutAll(jsonObject, map);
-
-        assertEquals("pocus", jsonObject.get("hocus"));
-        assertEquals(2, jsonObject.length());
-    }
-
-    @SmallTest @MediumTest @LargeTest
-    public void testJsonObjectValues() throws JSONException {
-        JSONObject jsonObject = new JSONObject();
-        jsonObject.put("hello", "world");
-        jsonObject.put("hocus", "pocus");
-
-        Collection<Object> values = JsonUtil.jsonObjectValues(jsonObject);
-
-        assertEquals(2, values.size());
-        assertTrue(values.contains("world"));
-    }
-}
diff --git a/facebook/tests/src/com/facebook/widget/FragmentTestCase.java b/facebook/tests/src/com/facebook/widget/FragmentTestCase.java
deleted file mode 100644
index e948bc300..000000000
--- a/facebook/tests/src/com/facebook/widget/FragmentTestCase.java
+++ /dev/null
@@ -1,98 +0,0 @@
-/**
- * Copyright 2012 Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.widget;
-
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentActivity;
-import android.widget.LinearLayout;
-import com.facebook.FacebookActivityTestCase;
-
-public class FragmentTestCase<T extends FragmentTestCase.TestFragmentActivity<?>> extends FacebookActivityTestCase<T> {
-    public FragmentTestCase(Class<T> activityClass) {
-        super(activityClass);
-    }
-
-    protected T getTestActivity() {
-        return (T) getActivity();
-    }
-
-    public static class TestFragmentActivity<T extends Fragment> extends FragmentActivity {
-        public static final int FRAGMENT_ID = 0xFACE;
-
-        private Class<T> fragmentClass;
-        private int fragmentId;
-
-        protected TestFragmentActivity(Class<T> fragmentClass) {
-            this.fragmentClass = fragmentClass;
-        }
-
-        @Override
-        protected void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-            if (getAutoCreateUI()) {
-                setContentToFragment(null);
-            }
-        }
-
-        protected boolean getAutoCreateUI() {
-            return true;
-        }
-
-        void setContentToFragment(T fragment) {
-            if (fragment == null) {
-                fragment = createFragment();
-            }
-
-            LinearLayout layout = new LinearLayout(this);
-            layout.setOrientation(LinearLayout.VERTICAL);
-            layout.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,
-                    LinearLayout.LayoutParams.FILL_PARENT));
-            layout.setId(FRAGMENT_ID);
-
-            getSupportFragmentManager().beginTransaction()
-                    .add(FRAGMENT_ID, fragment)
-                    .commit();
-
-            fragmentId = FRAGMENT_ID;
-
-            setContentView(layout);
-        }
-
-        void setContentToLayout(int i, int fragmentId) {
-            this.fragmentId = fragmentId;
-            setContentView(i);
-        }
-
-        T createFragment() {
-            try {
-                return fragmentClass.newInstance();
-            } catch (IllegalAccessException e) {
-                fail("could not create fragment");
-            } catch (InstantiationException e) {
-                fail("could not create fragment");
-            }
-            return null;
-        }
-
-        T getFragment() {
-            @SuppressWarnings("unchecked")
-            T fragment = (T) getSupportFragmentManager().findFragmentById(fragmentId);
-            return fragment;
-        }
-    }
-}
diff --git a/facebook/tests/src/com/facebook/widget/FriendPickerFragmentTests.java b/facebook/tests/src/com/facebook/widget/FriendPickerFragmentTests.java
deleted file mode 100644
index b7a24cfba..000000000
--- a/facebook/tests/src/com/facebook/widget/FriendPickerFragmentTests.java
+++ /dev/null
@@ -1,175 +0,0 @@
-/**
- * Copyright 2012 Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.widget;
-
-import android.os.Bundle;
-import android.test.TouchUtils;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.view.View;
-import android.widget.CheckBox;
-import android.widget.ListView;
-import com.facebook.TestBlocker;
-import com.facebook.TestSession;
-import com.facebook.sdk.tests.R;
-
-import java.util.Arrays;
-import java.util.Collection;
-
-public class FriendPickerFragmentTests extends FragmentTestCase<FriendPickerFragmentTests.TestActivity> {
-    public FriendPickerFragmentTests() {
-        super(TestActivity.class);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testCanSetParametersProgrammatically() throws Throwable {
-        TestActivity activity = getActivity();
-        assertNotNull(activity);
-
-        runAndBlockOnUiThread(0, new Runnable() {
-            @Override
-            public void run() {
-                Bundle bundle = new Bundle();
-                // We deliberately set these to non-defaults to ensure they are set correctly.
-                bundle.putString(FriendPickerFragment.USER_ID_BUNDLE_KEY, "4");
-                bundle.putBoolean(FriendPickerFragment.MULTI_SELECT_BUNDLE_KEY, false);
-                bundle.putBoolean(FriendPickerFragment.SHOW_PICTURES_BUNDLE_KEY, false);
-                bundle.putString(FriendPickerFragment.EXTRA_FIELDS_BUNDLE_KEY, "middle_name,link");
-                FriendPickerFragment fragment = new FriendPickerFragment(bundle);
-                getActivity().setContentToFragment(fragment);
-            }
-        });
-
-        // We don't just test the fragment we created directly above, because we want it to go through the
-        // activity lifecycle and ensure the settings are still correct.
-        final FriendPickerFragment fragment = activity.getFragment();
-        assertNotNull(fragment);
-
-        assertEquals("4", fragment.getUserId());
-        assertEquals(false, fragment.getMultiSelect());
-        assertEquals(false, fragment.getShowPictures());
-        Collection<String> extraFields = fragment.getExtraFields();
-        assertTrue(extraFields.contains("middle_name"));
-        assertTrue(extraFields.contains("link"));
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testCanSetParametersViaLayout() throws Throwable {
-        TestActivity activity = getActivity();
-        assertNotNull(activity);
-
-        runAndBlockOnUiThread(0, new Runnable() {
-            @Override
-            public void run() {
-                getActivity().setContentToLayout(R.layout.friend_picker_test_layout_1, R.id.friend_picker_fragment);
-            }
-        });
-
-        final FriendPickerFragment fragment = activity.getFragment();
-        assertNotNull(fragment);
-
-        assertEquals(false, fragment.getShowPictures());
-        assertEquals(false, fragment.getMultiSelect());
-        Collection<String> extraFields = fragment.getExtraFields();
-        assertTrue(extraFields.contains("middle_name"));
-        assertTrue(extraFields.contains("link"));
-        // It doesn't make sense to specify user id via layout, so we don't support it.
-    }
-
-    @LargeTest
-    public void testFriendsLoad() throws Throwable {
-        TestActivity activity = getActivity();
-        assertNotNull(activity);
-
-        // We don't auto-create any UI, so do it now. Needs to run on the UI thread.
-        runAndBlockOnUiThread(0, new Runnable() {
-            @Override
-            public void run() {
-                getActivity().setContentToFragment(null);
-            }
-        });
-
-        final FriendPickerFragment fragment = activity.getFragment();
-        assertNotNull(fragment);
-
-        // Ensure our test user has at least one friend.
-        final TestSession session1 = openTestSessionWithSharedUser();
-        TestSession session2 = openTestSessionWithSharedUser(SECOND_TEST_USER_TAG);
-        makeTestUsersFriends(session1, session2);
-
-        // Trigger a data load (on the UI thread).
-        final TestBlocker blocker = getTestBlocker();
-        // We expect to get called twice -- once with results, once to indicate we are done paging.
-        runAndBlockOnUiThread(2, new Runnable() {
-            @Override
-            public void run() {
-                fragment.setSession(session1);
-                fragment.setOnDataChangedListener(new PickerFragment.OnDataChangedListener() {
-                    @Override
-                    public void onDataChanged(PickerFragment<?> fragment) {
-                        blocker.signal();
-                    }
-                });
-                fragment.setExtraFields(Arrays.asList("first_name"));
-                fragment.loadData(true);
-            }
-        });
-
-        // We should have at least one item in the list by now.
-        ListView listView = (ListView) fragment.getView().findViewById(R.id.com_facebook_picker_list_view);
-        assertNotNull(listView);
-        View firstChild = listView.getChildAt(0);
-        assertNotNull(firstChild);
-
-        // Assert our state before we touch anything.
-        CheckBox checkBox = (CheckBox)listView.findViewById(R.id.com_facebook_picker_checkbox);
-        assertNotNull(checkBox);
-        assertFalse(checkBox.isChecked());
-        assertEquals(0, fragment.getSelection().size());
-
-        // Click on the first item in the list view.
-        TouchUtils.clickView(this, firstChild);
-
-        // We should have a selection (it might not be the user we made a friend up above, if the
-        // test user has more than one friend).
-        assertEquals(1, fragment.getSelection().size());
-
-        // We should have gotten the extra field we wanted.
-        assertNotNull(fragment.getSelection().iterator().next().getFirstName());
-
-        // And the checkbox should be checked.
-        assertTrue(checkBox.isChecked());
-
-        // Touch the item again. We should go back to no selection.
-        TouchUtils.clickView(this, firstChild);
-        assertEquals(0, fragment.getSelection().size());
-        assertFalse(checkBox.isChecked());
-    }
-
-    public static class TestActivity extends FragmentTestCase.TestFragmentActivity<FriendPickerFragment> {
-        public TestActivity() {
-            super(FriendPickerFragment.class);
-        }
-
-        @Override
-        protected boolean getAutoCreateUI() {
-            return false;
-        }
-    }
-}
diff --git a/facebook/tests/src/com/facebook/widget/GraphObjectPagingLoaderTests.java b/facebook/tests/src/com/facebook/widget/GraphObjectPagingLoaderTests.java
deleted file mode 100644
index 104bd49f1..000000000
--- a/facebook/tests/src/com/facebook/widget/GraphObjectPagingLoaderTests.java
+++ /dev/null
@@ -1,162 +0,0 @@
-/**
- * Copyright 2012 Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.widget;
-
-import android.location.Location;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.LoaderManager;
-import android.support.v4.content.Loader;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import com.facebook.*;
-import com.facebook.model.GraphPlace;
-
-public class GraphObjectPagingLoaderTests extends FragmentTestCase<GraphObjectPagingLoaderTests.TestActivity> {
-    public GraphObjectPagingLoaderTests() {
-        super(TestActivity.class);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testLoaderLoadsAndFollowsNextLinks() throws Exception {
-        CountingCallback callback = new CountingCallback();
-        final GraphObjectPagingLoader<GraphPlace> loader = (GraphObjectPagingLoader<GraphPlace>)
-                getActivity().getSupportLoaderManager().initLoader(0, null, callback);
-
-        TestSession session = openTestSessionWithSharedUser();
-
-        Location location = new Location("");
-        location.setLatitude(47.6204);
-        location.setLongitude(-122.3491);
-
-        final Request request = Request.newPlacesSearchRequest(session, location, 1000, 5, null, null);
-
-        // Need to run this on blocker thread so callbacks are made there.
-        runOnBlockerThread(new Runnable() {
-            @Override
-            public void run() {
-                loader.startLoading(request, false);
-            }
-        }, false);
-
-        getTestBlocker().waitForSignals(1);
-        assertEquals(1, callback.onLoadFinishedCount);
-        assertEquals(0, callback.onErrorCount);
-        assertEquals(0, callback.onLoadResetCount);
-        // We might not get back the exact number we requested because of privacy or other rules on
-        // the service side.
-        assertNotNull(callback.results);
-        assertTrue(callback.results.getCount() > 0);
-
-        runOnBlockerThread(new Runnable() {
-            @Override
-            public void run() {
-                loader.followNextLink();
-            }
-        }, false);
-        getTestBlocker().waitForSignals(1);
-        assertEquals(2, callback.onLoadFinishedCount);
-        assertEquals(0, callback.onErrorCount);
-        assertEquals(0, callback.onLoadResetCount);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testLoaderFinishesImmediatelyOnNoResults() throws Exception {
-        CountingCallback callback = new CountingCallback();
-        final GraphObjectPagingLoader<GraphPlace> loader = (GraphObjectPagingLoader<GraphPlace>)
-                getActivity().getSupportLoaderManager().initLoader(0, null, callback);
-
-        TestSession session = openTestSessionWithSharedUser();
-
-        // Unlikely to ever be a Place here.
-        Location location = new Location("");
-        location.setLatitude(-1.0);
-        location.setLongitude(-1.0);
-
-        final Request request = Request.newPlacesSearchRequest(session, location, 10, 5, null, null);
-
-        // Need to run this on blocker thread so callbacks are made there.
-        runOnBlockerThread(new Runnable() {
-            @Override
-            public void run() {
-                loader.startLoading(request, false);
-            }
-        }, false);
-
-        getTestBlocker().waitForSignals(1);
-        assertEquals(1, callback.onLoadFinishedCount);
-        assertEquals(0, callback.onErrorCount);
-        assertEquals(0, callback.onLoadResetCount);
-        assertNotNull(callback.results);
-        assertEquals(0, callback.results.getCount());
-    }
-
-    private class CountingCallback implements
-            GraphObjectPagingLoader.OnErrorListener, LoaderManager.LoaderCallbacks<SimpleGraphObjectCursor<GraphPlace>> {
-        public int onLoadFinishedCount;
-        public int onLoadResetCount;
-        public int onErrorCount;
-        public SimpleGraphObjectCursor<GraphPlace> results;
-
-        private TestBlocker testBlocker = getTestBlocker();
-
-        @Override
-        public void onError(FacebookException error, GraphObjectPagingLoader<?> loader) {
-            ++onErrorCount;
-            testBlocker.signal();
-        }
-
-        @Override
-        public Loader<SimpleGraphObjectCursor<GraphPlace>> onCreateLoader(int id, Bundle args) {
-            GraphObjectPagingLoader<GraphPlace> loader = new GraphObjectPagingLoader<GraphPlace>(getActivity(),
-                    GraphPlace.class);
-            loader.setOnErrorListener(this);
-            return loader;
-        }
-
-        @Override
-        public void onLoadFinished(Loader<SimpleGraphObjectCursor<GraphPlace>> loader,
-                SimpleGraphObjectCursor<GraphPlace> data) {
-            results = data;
-            ++onLoadFinishedCount;
-            testBlocker.signal();
-        }
-
-        @Override
-        public void onLoaderReset(Loader<SimpleGraphObjectCursor<GraphPlace>> loader) {
-            ++onLoadResetCount;
-            testBlocker.signal();
-        }
-    }
-
-    public static class DummyFragment extends Fragment  {
-    }
-
-    public static class TestActivity extends FragmentTestCase.TestFragmentActivity<DummyFragment> {
-        public TestActivity() {
-            super(DummyFragment.class);
-        }
-
-        @Override
-        protected boolean getAutoCreateUI() {
-            return false;
-        }
-    }
-
-}
diff --git a/facebook/tests/src/com/facebook/widget/ImageResponseCacheTests.java b/facebook/tests/src/com/facebook/widget/ImageResponseCacheTests.java
deleted file mode 100644
index f1ca93ca8..000000000
--- a/facebook/tests/src/com/facebook/widget/ImageResponseCacheTests.java
+++ /dev/null
@@ -1,108 +0,0 @@
-/**
- * Copyright 2012 Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.widget;
-
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.test.AndroidTestCase;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import com.facebook.internal.Utility;
-import com.facebook.widget.ImageResponseCache;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.HttpURLConnection;
-import java.net.URL;
-import java.nio.ByteBuffer;
-import java.util.Arrays;
-
-public final class ImageResponseCacheTests extends AndroidTestCase {
-
-    @MediumTest @LargeTest
-    public void testImageCaching() throws IOException {
-        // In unit test, since we need verify first access the image is not in cache
-        // we need clear the cache first
-        ImageResponseCache.getCache(safeGetContext()).clearForTest();
-        String imgUrl = "http://sphotos-b.xx.fbcdn.net/hphotos-snc7/300716_163831917043403_1106723719_n.jpg";
-        
-        Bitmap bmp1 = readImage(imgUrl, false);
-        Bitmap bmp2 = readImage(imgUrl, true);
-        compareImages(bmp1, bmp2);
-    }
-    
-    @MediumTest @LargeTest
-    public void testImageNotCaching() throws IOException {
-        
-        String imgUrl = "http://graph.facebook.com/ryanseacrest/picture?type=large";
-        
-        Bitmap bmp1 = readImage(imgUrl, false);
-        Bitmap bmp2 = readImage(imgUrl, false);
-        compareImages(bmp1, bmp2);
-    }
-
-    private Bitmap readImage(String uri, boolean expectedFromCache) {
-        Bitmap bmp = null;
-        InputStream istream = null;
-        try
-        {
-            URL url = new URL(uri);
-            // Check if the cache contains value for this url
-            boolean isInCache = (ImageResponseCache.getCache(safeGetContext()).get(url.toString()) != null);
-            assertTrue(isInCache == expectedFromCache);
-            // Read the image
-            istream = ImageResponseCache.getCachedImageStream(url, safeGetContext());
-            if (istream == null) {
-                HttpURLConnection connection = (HttpURLConnection)url.openConnection();
-                istream = ImageResponseCache.interceptAndCacheImageStream(safeGetContext(), connection);
-            }
-            assertTrue(istream != null);
-            bmp = BitmapFactory.decodeStream(istream);
-            assertTrue(bmp != null);
-        } catch (Exception e) {
-             assertNull(e);
-        } finally {
-            Utility.closeQuietly(istream);
-        }
-        return bmp;
-    }
-    
-    private static void compareImages(Bitmap bmp1, Bitmap bmp2) {
-        assertTrue(bmp1.getHeight() == bmp2.getHeight());
-        assertTrue(bmp1.getWidth() == bmp1.getWidth());
-        ByteBuffer buffer1 = ByteBuffer.allocate(bmp1.getHeight() * bmp1.getRowBytes());
-        bmp1.copyPixelsToBuffer(buffer1);
-
-        ByteBuffer buffer2 = ByteBuffer.allocate(bmp2.getHeight() * bmp2.getRowBytes());
-        bmp2.copyPixelsToBuffer(buffer2);
-
-        assertTrue(Arrays.equals(buffer1.array(), buffer2.array()));
-    }
-
-    private Context safeGetContext() {
-        for (;;) {
-            if ((getContext() != null) && (getContext().getApplicationContext() != null)) {
-                return getContext();
-            }
-            try {
-                Thread.sleep(25);
-            } catch (InterruptedException e) {
-            }
-        }
-    }
-}
diff --git a/facebook/tests/src/com/facebook/widget/LoginButtonTest.java b/facebook/tests/src/com/facebook/widget/LoginButtonTest.java
deleted file mode 100644
index 74ad6672f..000000000
--- a/facebook/tests/src/com/facebook/widget/LoginButtonTest.java
+++ /dev/null
@@ -1,275 +0,0 @@
-/**
- * Copyright 2012 Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.widget;
-
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import com.facebook.*;
-import com.facebook.widget.LoginButton;
-import junit.framework.Assert;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import java.util.concurrent.atomic.AtomicBoolean;
-
-public class LoginButtonTest extends SessionTestsBase {
-
-    static final int STRAY_CALLBACK_WAIT_MILLISECONDS = 50;
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testLoginButton() throws Throwable {
-        SessionTestsBase.MockTokenCache cache = new SessionTestsBase.MockTokenCache(null, 0);
-        final ScriptedSession session = new ScriptedSession(getActivity(), "SomeId", cache);
-        SessionTestsBase.SessionStatusCallbackRecorder statusRecorder = new SessionTestsBase.SessionStatusCallbackRecorder();
-
-        session.addAuthorizeResult("A token of thanks", new ArrayList<String>(), AccessTokenSource.TEST_USER);
-        session.addCallback(statusRecorder);
-
-        // Verify state with no token in cache
-        Assert.assertEquals(SessionState.CREATED, session.getState());
-
-        // Add another status recorder to ensure that the callback we hand to LoginButton
-        // also gets called as expected. We expect to get the same order of calls as statusRecorder does.
-        final SessionStatusCallbackRecorder loginButtonStatusRecorder = new SessionStatusCallbackRecorder();
-
-        // Create the button. To get session status updates, we need to actually attach the
-        // button to a window, which must be done on the UI thread.
-        final LoginButton button = new LoginButton(getActivity());
-        runAndBlockOnUiThread(0, new Runnable() {
-            @Override
-            public void run() {
-                getActivity().setContentView(button);
-                button.setSession(session);
-                button.setSessionStatusCallback(loginButtonStatusRecorder);
-                button.performClick();
-            }
-        });
-
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        loginButtonStatusRecorder.waitForCall(session, SessionState.OPENING, null);
-
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-        loginButtonStatusRecorder.waitForCall(session, SessionState.OPENED, null);
-
-        // Verify token information is cleared.
-        session.closeAndClearTokenInformation();
-        assertTrue(cache.getSavedState() == null);
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-        loginButtonStatusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        // Wait a bit so we can fail if any unexpected calls arrive on the
-        // recorder.
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testLoginFail() {
-        SessionTestsBase.MockTokenCache cache = new SessionTestsBase.MockTokenCache(null, 0);
-        ScriptedSession session = new ScriptedSession(getActivity(), "SomeId", cache);
-        final Exception openException = new Exception("Open failed!");
-        final AtomicBoolean clicked = new AtomicBoolean(false);
-
-        // Verify state with no token in cache
-        assertEquals(SessionState.CREATED, session.getState());
-
-        final LoginButton button = new LoginButton(getActivity());
-        LoginButton.OnErrorListener listener = new LoginButton.OnErrorListener() {
-            @Override
-            public void onError(FacebookException exception) {
-                synchronized (this) {
-                    assertEquals(exception.getCause().getMessage(), openException.getMessage());
-                    clicked.set(true);
-                    this.notifyAll();
-                }
-            }
-        };
-        button.setOnErrorListener(listener);
-        button.setSession(session);
-        session.addAuthorizeResult(openException);
-
-        button.onAttachedToWindow();
-        button.performClick();
-
-        try {
-            synchronized (listener) {
-                listener.wait(DEFAULT_TIMEOUT_MILLISECONDS);
-            }
-        } catch (InterruptedException e) {
-            fail("Interrupted during open");
-        }
-
-        if (!clicked.get()) {
-            fail("Did not get exception");
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanAddReadPermissions() {
-        SessionTestsBase.MockTokenCache cache = new SessionTestsBase.MockTokenCache(null, 0);
-        ScriptedSession session = new ScriptedSession(getActivity(), "SomeId", cache);
-        SessionTestsBase.SessionStatusCallbackRecorder statusRecorder = new SessionTestsBase.SessionStatusCallbackRecorder();
-
-        // Verify state with no token in cache
-        assertEquals(SessionState.CREATED, session.getState());
-
-        final LoginButton button = new LoginButton(getActivity());
-        button.setSession(session);
-        button.setReadPermissions(Arrays.asList(new String[] {"read_permission", "read_another"}));
-        session.addAuthorizeResult("A token of thanks", new ArrayList<String>(), AccessTokenSource.TEST_USER);
-        session.addCallback(statusRecorder);
-
-        button.performClick();
-
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-
-        // Verify token information is cleared.
-        session.closeAndClearTokenInformation();
-        assertTrue(cache.getSavedState() == null);
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        // Wait a bit so we can fail if any unexpected calls arrive on the
-        // recorder.
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanAddPublishPermissions() {
-        SessionTestsBase.MockTokenCache cache = new SessionTestsBase.MockTokenCache(null, 0);
-        ScriptedSession session = new ScriptedSession(getActivity(), "SomeId", cache);
-        SessionTestsBase.SessionStatusCallbackRecorder statusRecorder =
-                new SessionTestsBase.SessionStatusCallbackRecorder();
-
-        // Verify state with no token in cache
-        assertEquals(SessionState.CREATED, session.getState());
-
-        final LoginButton button = new LoginButton(getActivity());
-        button.setSession(session);
-        button.setPublishPermissions(Arrays.asList(new String[] {"publish_permission", "publish_another"}));
-        session.addAuthorizeResult("A token of thanks", new ArrayList<String>(), AccessTokenSource.TEST_USER);
-        session.addCallback(statusRecorder);
-
-        button.performClick();
-
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-
-        // Verify token information is cleared.
-        session.closeAndClearTokenInformation();
-        assertTrue(cache.getSavedState() == null);
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        // Wait a bit so we can fail if any unexpected calls arrive on the
-        // recorder.
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        statusRecorder.close();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantAddReadThenPublishPermissions() {
-        final LoginButton button = new LoginButton(getActivity());
-        button.setReadPermissions(Arrays.asList(new String[] {"read_permission", "read_another"}));
-        try {
-            button.setPublishPermissions(Arrays.asList(new String[] {"read_permission", "read_a_third"}));
-            fail("Should not be able to reach here");
-        } catch (Exception e) {
-            assertTrue(e instanceof UnsupportedOperationException);
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantAddPublishThenReadPermissions() {
-        final LoginButton button = new LoginButton(getActivity());
-        button.setPublishPermissions(Arrays.asList(new String[] {"publish_permission", "publish_another"}));
-        try {
-            button.setReadPermissions(Arrays.asList(new String[] {"publish_permission", "publish_a_third"}));
-            fail("Should not be able to reach here");
-        } catch (Exception e) {
-            assertTrue(e instanceof UnsupportedOperationException);
-        }
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCanAddReadThenPublishPermissionsWithClear() {
-        final LoginButton button = new LoginButton(getActivity());
-        button.setReadPermissions(Arrays.asList(new String[] {"read_permission", "read_another"}));
-        button.clearPermissions();
-        button.setPublishPermissions(Arrays.asList(new String[] {"publish_permission", "publish_another"}));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testCantAddMorePermissionsToOpenSession() {
-        SessionTestsBase.MockTokenCache cache = new SessionTestsBase.MockTokenCache(null, 0);
-        ScriptedSession session = new ScriptedSession(getActivity(), "SomeId", cache);
-        SessionTestsBase.SessionStatusCallbackRecorder statusRecorder =
-                new SessionTestsBase.SessionStatusCallbackRecorder();
-
-        // Verify state with no token in cache
-        assertEquals(SessionState.CREATED, session.getState());
-
-        final LoginButton button = new LoginButton(getActivity());
-        button.setSession(session);
-        session.addAuthorizeResult("A token of thanks",
-                Arrays.asList(new String[] {"read_permission", "read_another"}), AccessTokenSource.TEST_USER);
-        session.addCallback(statusRecorder);
-
-        button.performClick();
-
-        statusRecorder.waitForCall(session, SessionState.OPENING, null);
-        statusRecorder.waitForCall(session, SessionState.OPENED, null);
-
-        // this should be fine
-        button.setReadPermissions(Arrays.asList(new String[] {"read_permission", "read_another"}));
-
-        button.setReadPermissions(Arrays.asList(new String[] {"read_permission", "read_a_third"}));
-        List<String> permissions = button.getPermissions();
-        assertTrue(permissions.contains("read_permission"));
-        assertTrue(permissions.contains("read_another"));
-        assertFalse(permissions.contains("read_a_third"));
-
-        // Verify token information is cleared.
-        session.closeAndClearTokenInformation();
-        assertTrue(cache.getSavedState() == null);
-        statusRecorder.waitForCall(session, SessionState.CLOSED, null);
-
-        // Wait a bit so we can fail if any unexpected calls arrive on the
-        // recorder.
-        stall(STRAY_CALLBACK_WAIT_MILLISECONDS);
-        statusRecorder.close();
-    }
-
-}
diff --git a/facebook/tests/src/com/facebook/widget/PlacePickerFragmentTests.java b/facebook/tests/src/com/facebook/widget/PlacePickerFragmentTests.java
deleted file mode 100644
index 50655185f..000000000
--- a/facebook/tests/src/com/facebook/widget/PlacePickerFragmentTests.java
+++ /dev/null
@@ -1,279 +0,0 @@
-/**
- * Copyright 2012 Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.widget;
-
-import android.location.Location;
-import android.os.Bundle;
-import android.test.TouchUtils;
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.view.View;
-import android.widget.ListView;
-import com.facebook.*;
-import com.facebook.sdk.tests.R;
-
-import java.util.Collection;
-
-public class PlacePickerFragmentTests extends FragmentTestCase<PlacePickerFragmentTests.TestActivity> {
-    public PlacePickerFragmentTests() {
-        super(TestActivity.class);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testCanSetParametersProgrammatically() throws Throwable {
-        TestActivity activity = getActivity();
-        assertNotNull(activity);
-
-        final Location location = new Location("");
-        location.setLatitude(47.6204);
-        location.setLongitude(-122.3491);
-
-        runAndBlockOnUiThread(0, new Runnable() {
-            @Override
-            public void run() {
-                Bundle bundle = new Bundle();
-                // We deliberately set these to non-defaults to ensure they are set correctly.
-                bundle.putBoolean(PlacePickerFragment.SHOW_PICTURES_BUNDLE_KEY, false);
-                bundle.putInt(PlacePickerFragment.RADIUS_IN_METERS_BUNDLE_KEY, 75);
-                bundle.putInt(PlacePickerFragment.RESULTS_LIMIT_BUNDLE_KEY, 5);
-                bundle.putString(PlacePickerFragment.SEARCH_TEXT_BUNDLE_KEY, "coffee");
-                bundle.putParcelable(PlacePickerFragment.LOCATION_BUNDLE_KEY, location);
-                bundle.putString(FriendPickerFragment.EXTRA_FIELDS_BUNDLE_KEY, "checkins,general_info");
-
-                PlacePickerFragment fragment = new PlacePickerFragment(bundle);
-                getActivity().setContentToFragment(fragment);
-            }
-        });
-
-        // We don't just test the fragment we created directly above, because we want it to go through the
-        // activity lifecycle and ensure the settings are still correct.
-        final PlacePickerFragment fragment = activity.getFragment();
-        assertNotNull(fragment);
-
-        assertEquals(false, fragment.getShowPictures());
-        assertEquals(75, fragment.getRadiusInMeters());
-        assertEquals(5, fragment.getResultsLimit());
-        assertEquals("coffee", fragment.getSearchText());
-        assertEquals(location, fragment.getLocation());
-        Collection<String> extraFields = fragment.getExtraFields();
-        assertTrue(extraFields.contains("checkins"));
-        assertTrue(extraFields.contains("general_info"));
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testCanSetParametersViaLayout() throws Throwable {
-        TestActivity activity = getActivity();
-        assertNotNull(activity);
-
-        runAndBlockOnUiThread(0, new Runnable() {
-            @Override
-            public void run() {
-                getActivity().setContentToLayout(R.layout.place_picker_test_layout_1, R.id.place_picker_fragment);
-            }
-        });
-
-        final PlacePickerFragment fragment = activity.getFragment();
-        assertNotNull(fragment);
-
-        assertEquals(false, fragment.getShowPictures());
-        assertEquals(75, fragment.getRadiusInMeters());
-        assertEquals(5, fragment.getResultsLimit());
-        assertEquals("coffee", fragment.getSearchText());
-        Collection<String> extraFields = fragment.getExtraFields();
-        assertTrue(extraFields.contains("checkins"));
-        assertTrue(extraFields.contains("general_info"));
-        // It doesn't make sense to specify location via layout, so we don't support it.
-    }
-
-    @LargeTest
-    public void testPlacesLoad() throws Throwable {
-        TestActivity activity = getActivity();
-        assertNotNull(activity);
-
-        // We don't auto-create any UI, so do it now. Needs to run on the UI thread.
-        runAndBlockOnUiThread(0, new Runnable() {
-            @Override
-            public void run() {
-                getActivity().setContentToFragment(null);
-            }
-        });
-        getInstrumentation().waitForIdleSync();
-
-        final PlacePickerFragment fragment = activity.getFragment();
-        assertNotNull(fragment);
-
-        final TestSession session = openTestSessionWithSharedUser();
-
-        // Trigger a data load (on the UI thread).
-        final TestBlocker blocker = getTestBlocker();
-        runAndBlockOnUiThread(1, new Runnable() {
-            @Override
-            public void run() {
-                fragment.setSession(session);
-
-                Location location = new Location("");
-                location.setLatitude(47.6204);
-                location.setLongitude(-122.3491);
-                fragment.setLocation(location);
-
-                fragment.setOnDataChangedListener(new PickerFragment.OnDataChangedListener() {
-                    @Override
-                    public void onDataChanged(PickerFragment<?> fragment) {
-                        blocker.signal();
-                    }
-                });
-                fragment.setOnErrorListener(new PickerFragment.OnErrorListener() {
-                    @Override
-                    public void onError(PickerFragment<?> fragment, FacebookException error) {
-                        fail("Got unexpected error: " + error.toString());
-                    }
-                });
-                fragment.loadData(true);
-            }
-        });
-
-        // We should have at least one item in the list by now.
-        ListView listView = (ListView) fragment.getView().findViewById(R.id.com_facebook_picker_list_view);
-        assertNotNull(listView);
-        View firstChild = listView.getChildAt(0);
-        assertNotNull(firstChild);
-
-        // Assert our state before we touch anything.
-        assertNull(fragment.getSelection());
-
-        // Click on the first item in the list view.
-        TouchUtils.clickView(this, firstChild);
-
-        // We should have a selection.
-        assertNotNull(fragment.getSelection());
-
-        // Touch the item again. We should go back to no selection.
-        TouchUtils.clickView(this, firstChild);
-        assertNull(fragment.getSelection());
-    }
-
-    @LargeTest
-    public void testClearsResultsWhenSessionClosed() throws Throwable {
-        TestActivity activity = getActivity();
-        assertNotNull(activity);
-
-        // We don't auto-create any UI, so do it now. Needs to run on the UI thread.
-        runAndBlockOnUiThread(0, new Runnable() {
-            @Override
-            public void run() {
-                getActivity().setContentToFragment(null);
-            }
-        });
-        getInstrumentation().waitForIdleSync();
-
-        final PlacePickerFragment fragment = activity.getFragment();
-        assertNotNull(fragment);
-
-        final TestSession session = openTestSessionWithSharedUser();
-
-        // Trigger a data load (on the UI thread).
-        // We use multiple test blockers to keep the counts from getting confused if other events
-        // cause our listeners to fire.
-        final TestBlocker blocker1 = TestBlocker.createTestBlocker();
-        runAndBlockOnUiThread(0, new Runnable() {
-            @Override
-            public void run() {
-                fragment.setSession(session);
-
-                Location location = new Location("");
-                location.setLatitude(47.6204);
-                location.setLongitude(-122.3491);
-                fragment.setLocation(location);
-
-                fragment.setOnDataChangedListener(new PickerFragment.OnDataChangedListener() {
-                    @Override
-                    public void onDataChanged(PickerFragment<?> fragment) {
-                        blocker1.signal();
-                    }
-                });
-                fragment.setOnErrorListener(new PickerFragment.OnErrorListener() {
-                    @Override
-                    public void onError(PickerFragment<?> fragment, FacebookException error) {
-                        fail("Got unexpected error: " + error.getMessage());
-                    }
-                });
-                fragment.loadData(true);
-            }
-        });
-        blocker1.waitForSignals(1);
-
-        // We should have at least one item in the list by now.
-        ListView listView = (ListView) fragment.getView().findViewById(R.id.com_facebook_picker_list_view);
-        assertNotNull(listView);
-
-        Thread.sleep(500);
-
-        int lastPosition = listView.getLastVisiblePosition();
-        assertTrue(lastPosition > -1);
-
-        View firstChild = listView.getChildAt(0);
-        assertNotNull(firstChild);
-
-        // Assert our state before we touch anything.
-        assertNull(fragment.getSelection());
-
-        // Click on the first item in the list view.
-        TouchUtils.clickView(this, firstChild);
-
-        // We should have a selection.
-        assertNotNull(fragment.getSelection());
-
-        // To validate the behavior, we need to wait until the session state notifications have been processed.
-        // We run this on the UI thread but don't wait on the blocker until we've closed the session.
-        final TestBlocker blocker2 = TestBlocker.createTestBlocker();
-        runAndBlockOnUiThread(0, new Runnable() {
-            @Override
-            public void run() {
-                session.addCallback(new Session.StatusCallback() {
-                    @Override
-                    public void call(Session session, SessionState state, Exception exception) {
-                        blocker2.signal();
-                    }
-                });
-            }
-        });
-        session.close();
-        // Wait for the notification and for any UI activity to stop.
-        blocker2.waitForSignals(1);
-        getInstrumentation().waitForIdleSync();
-
-        Thread.sleep(500);
-        // The list and the selection should have been cleared.
-        lastPosition = listView.getLastVisiblePosition();
-        assertTrue(lastPosition == -1);
-        assertNull(fragment.getSelection());
-    }
-
-    public static class TestActivity extends FragmentTestCase.TestFragmentActivity<PlacePickerFragment> {
-        public TestActivity() {
-            super(PlacePickerFragment.class);
-        }
-
-        @Override
-        protected boolean getAutoCreateUI() {
-            return false;
-        }
-    }
-
-}
diff --git a/facebook/tests/src/com/facebook/widget/WorkQueueTests.java b/facebook/tests/src/com/facebook/widget/WorkQueueTests.java
deleted file mode 100644
index 0b377d57c..000000000
--- a/facebook/tests/src/com/facebook/widget/WorkQueueTests.java
+++ /dev/null
@@ -1,345 +0,0 @@
-/**
- * Copyright 2012 Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.widget;
-
-import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
-import android.test.suitebuilder.annotation.SmallTest;
-import com.facebook.FacebookTestCase;
-import com.facebook.widget.WorkQueue;
-
-import java.util.ArrayList;
-import java.util.concurrent.Executor;
-import java.security.SecureRandom;
-
-public class WorkQueueTests extends FacebookTestCase {
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testEmptyValidate() {
-        WorkQueue manager = new WorkQueue();
-        manager.validate();
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testRunSomething() {
-        CountingRunnable run = new CountingRunnable();
-        assertEquals(0, run.getRunCount());
-
-        ScriptableExecutor executor = new ScriptableExecutor();
-        assertEquals(0, executor.getPendingCount());
-
-        WorkQueue manager = new WorkQueue(1, executor);
-
-        addActiveWorkItem(manager, run);
-        assertEquals(1, executor.getPendingCount());
-        assertEquals(0, run.getRunCount());
-
-        executeNext(manager, executor);
-        assertEquals(0, executor.getPendingCount());
-        assertEquals(1, run.getRunCount());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testRunSequence() {
-        final int workTotal = 100;
-
-        CountingRunnable run = new CountingRunnable();
-        ScriptableExecutor executor = new ScriptableExecutor();
-        WorkQueue manager = new WorkQueue(1, executor);
-
-        for (int i = 0; i < workTotal; i++) {
-            addActiveWorkItem(manager, run);
-            assertEquals(1, executor.getPendingCount());
-        }
-
-        for (int i = 0; i < workTotal; i++) {
-            assertEquals(1, executor.getPendingCount());
-            assertEquals(i, run.getRunCount());
-            executeNext(manager, executor);
-        }
-        assertEquals(0, executor.getPendingCount());
-        assertEquals(workTotal, run.getRunCount());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testRunParallel() {
-        final int workTotal = 100;
-
-        CountingRunnable run = new CountingRunnable();
-        ScriptableExecutor executor = new ScriptableExecutor();
-        WorkQueue manager = new WorkQueue(workTotal, executor);
-
-        for (int i = 0; i < workTotal; i++) {
-            assertEquals(i, executor.getPendingCount());
-            addActiveWorkItem(manager, run);
-        }
-
-        for (int i = 0; i < workTotal; i++) {
-            assertEquals(workTotal - i, executor.getPendingCount());
-            assertEquals(i, run.getRunCount());
-            executeNext(manager, executor);
-        }
-        assertEquals(0, executor.getPendingCount());
-        assertEquals(workTotal, run.getRunCount());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testSimpleCancel() {
-        CountingRunnable run = new CountingRunnable();
-        ScriptableExecutor executor = new ScriptableExecutor();
-        WorkQueue manager = new WorkQueue(1, executor);
-
-        addActiveWorkItem(manager, run);
-        WorkQueue.WorkItem work1 = addActiveWorkItem(manager, run);
-        cancelWork(manager, work1);
-
-        assertEquals(1, executor.getPendingCount());
-        executeNext(manager, executor);
-        assertEquals(0, executor.getPendingCount());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testMoveToFront() {
-        final int firstCount = 8;
-        final int highCount = 17;
-
-        ArrayList<WorkQueue.WorkItem> highWorkItems = new ArrayList<WorkQueue.WorkItem>();
-        CountingRunnable highRun = new CountingRunnable();
-        CountingRunnable firstRun = new CountingRunnable();
-        CountingRunnable lowRun = new CountingRunnable();
-        ScriptableExecutor executor = new ScriptableExecutor();
-        WorkQueue manager = new WorkQueue(firstCount, executor);
-
-        for (int i = 0; i < firstCount; i++) {
-            addActiveWorkItem(manager, firstRun);
-        }
-
-        int lowCount = 0;
-        for (int h = 0; h < highCount; h++) {
-            highWorkItems.add(addActiveWorkItem(manager, highRun));
-            for (int l = 0; l < h; l++) {
-                addActiveWorkItem(manager, lowRun);
-                lowCount++;
-            }
-        }
-
-        assertEquals(firstCount, executor.getPendingCount());
-        for (WorkQueue.WorkItem highItem : highWorkItems) {
-            prioritizeWork(manager, highItem);
-        }
-
-        for (int i = 0; i < firstCount; i++) {
-            assertEquals(i, firstRun.getRunCount());
-            executeNext(manager, executor);
-        }
-
-        for (int i = 0; i < highCount; i++) {
-            assertEquals(i, highRun.getRunCount());
-            executeNext(manager, executor);
-        }
-
-        for (int i = 0; i < lowCount; i++) {
-            assertEquals(i, lowRun.getRunCount());
-            executeNext(manager, executor);
-        }
-
-        assertEquals(firstCount, firstRun.getRunCount());
-        assertEquals(highCount, highRun.getRunCount());
-        assertEquals(lowCount, lowRun.getRunCount());
-    }
-
-    // Test cancelling running work item, completed work item
-
-    @LargeTest
-    public void testThreadStress() {
-        WorkQueue manager = new WorkQueue();
-        ArrayList<StressRunnable> runnables = new ArrayList<StressRunnable>();
-        final int threadCount = 20;
-
-        for (int i = 0; i < threadCount; i++) {
-            runnables.add(new StressRunnable(manager, 20));
-        }
-
-        for (int i = 0; i < threadCount; i++) {
-            manager.addActiveWorkItem(runnables.get(i));
-        }
-
-        for (int i = 0; i < threadCount; i++) {
-            runnables.get(i).waitForDone();
-        }
-    }
-
-    private WorkQueue.WorkItem addActiveWorkItem(WorkQueue manager, Runnable runnable) {
-        manager.validate();
-        WorkQueue.WorkItem workItem = manager.addActiveWorkItem(runnable);
-        manager.validate();
-        return workItem;
-    }
-
-    private void executeNext(WorkQueue manager, ScriptableExecutor executor) {
-        manager.validate();
-        executor.runNext();
-        manager.validate();
-    }
-
-    private void cancelWork(WorkQueue manager, WorkQueue.WorkItem workItem) {
-        manager.validate();
-        workItem.cancel();
-        manager.validate();
-    }
-
-    private void prioritizeWork(WorkQueue manager, WorkQueue.WorkItem workItem) {
-        manager.validate();
-        workItem.moveToFront();
-        manager.validate();
-    }
-
-    static class StressRunnable implements Runnable {
-        static ArrayList<WorkQueue.WorkItem> tracked = new ArrayList<WorkQueue.WorkItem>();
-
-        final WorkQueue manager;
-        final SecureRandom random = new SecureRandom();
-        final int iterationCount;
-        int iterationIndex = 0;
-        boolean isDone = false;
-
-        StressRunnable(WorkQueue manager, int iterationCount) {
-            this.manager = manager;
-            this.iterationCount = iterationCount;
-        }
-
-        @Override
-        public void run() {
-            // Each iteration runs a random action against the WorkQueue.
-            if (iterationIndex++ < iterationCount) {
-                final int sleepWeight = 80;
-                final int trackThisWeight = 10;
-                final int prioritizeTrackedWeight = 6;
-                final int validateWeight = 2;
-                int weight = 0;
-                final int n = random.nextInt(sleepWeight + trackThisWeight + prioritizeTrackedWeight + validateWeight);
-                WorkQueue.WorkItem workItem = manager.addActiveWorkItem(this);
-
-                if (n < (weight += sleepWeight)) {
-                    // Sleep
-                    try {
-                        Thread.sleep(n/4);
-                    } catch (InterruptedException e) {
-                    }
-                } else if (n < (weight += trackThisWeight)) {
-                    // Track this work item to activate later
-                    synchronized (tracked) {
-                        tracked.add(workItem);
-                    }
-                } else if (n < (weight += prioritizeTrackedWeight)) {
-                    // Background all pending items, prioritize tracked items, and clear tracked list
-                    ArrayList<WorkQueue.WorkItem> items = new ArrayList<WorkQueue.WorkItem>();
-
-                    synchronized (tracked) {
-                        items.addAll(tracked);
-                        tracked.clear();
-                    }
-
-                    for (WorkQueue.WorkItem item : items) {
-                        item.moveToFront();
-                    }
-                } else {
-                    // Validate
-                    manager.validate();
-                }
-            } else {
-                // Also have all threads validate once they are done.
-                manager.validate();
-                synchronized (this) {
-                    isDone = true;
-                    this.notifyAll();
-                }
-            }
-        }
-
-        void waitForDone() {
-            synchronized (this) {
-                while (!isDone) {
-                    try {
-                        this.wait();
-                    } catch (InterruptedException e) {
-                    }
-                }
-            }
-        }
-    }
-
-    class ScriptableExecutor implements Executor {
-        private final ArrayList<Runnable> runnables = new ArrayList<Runnable>();
-
-        int getPendingCount() {
-            return runnables.size();
-        }
-
-        void runNext() {
-            assertTrue(runnables.size() > 0);
-            runnables.get(0).run();
-            runnables.remove(0);
-        }
-
-        void runLast() {
-            assertTrue(runnables.size() > 0);
-            int index = runnables.size() - 1;
-            runnables.get(index).run();
-            runnables.remove(index);
-        }
-
-        @Override
-        public void execute(Runnable runnable) {
-            synchronized (this) {
-                runnables.add(runnable);
-            }
-        }
-    }
-
-    class CountingRunnable implements Runnable {
-        volatile int runCount = 0;
-
-        int getRunCount() {
-            return runCount;
-        }
-
-        @Override
-        public void run() {
-            synchronized (this) {
-                runCount++;
-            }
-
-            try {
-                Thread.sleep(1);
-            } catch (InterruptedException e) {
-            }
-        }
-    }
-}
