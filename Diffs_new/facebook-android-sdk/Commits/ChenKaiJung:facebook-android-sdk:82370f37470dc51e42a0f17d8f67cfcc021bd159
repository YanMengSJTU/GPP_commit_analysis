diff --git a/funtown/src/tw/com/funtown/AuthenticationBehavior.java b/funtown/src/tw/com/funtown/AuthenticationBehavior.java
new file mode 100644
index 000000000..eb023c6b2
--- /dev/null
+++ b/funtown/src/tw/com/funtown/AuthenticationBehavior.java
@@ -0,0 +1,6 @@
+package tw.com.funtown;
+
+public enum AuthenticationBehavior {
+	ID_PWD,
+	UUID,	
+}
diff --git a/funtown/src/tw/com/funtown/Session.java b/funtown/src/tw/com/funtown/Session.java
index eee171d90..dbbd10d35 100644
--- a/funtown/src/tw/com/funtown/Session.java
+++ b/funtown/src/tw/com/funtown/Session.java
@@ -1544,7 +1544,8 @@ protected void onPostExecute(Void result) {
     public static class AuthorizationRequest implements Serializable {
 
         private static final long serialVersionUID = 1L;
-
+        
+        private AuthenticationBehavior authenticationBehavior = AuthenticationBehavior.ID_PWD;
         private final StartActivityDelegate startActivityDelegate;
      //   private SessionLoginBehavior loginBehavior = SessionLoginBehavior.SSO_WITH_FALLBACK;
         private SessionLoginBehavior loginBehavior = SessionLoginBehavior.SUPPRESS_SSO;
@@ -1557,6 +1558,7 @@ protected void onPostExecute(Void result) {
         private String redirectUri;        
         private String validateSameFbidAsToken;
 
+        
         AuthorizationRequest(final Activity activity) {
             startActivityDelegate = new StartActivityDelegate() {
                 @Override
@@ -1641,7 +1643,14 @@ AuthorizationRequest setLoginBehavior(SessionLoginBehavior loginBehavior) {
             }
             return this;
         }
-
+        
+        AuthorizationRequest setAuthenticationBehavior(AuthenticationBehavior authenticationBehavior) {
+            if (authenticationBehavior != null) {
+                this.authenticationBehavior = authenticationBehavior;
+            }
+            return this;
+        }
+        
         SessionLoginBehavior getLoginBehavior() {
             return loginBehavior;
         }
@@ -1719,7 +1728,7 @@ public Activity getActivityContext() {
                     return startActivityDelegate.getActivityContext();
                 }
             };
-            return new AuthorizationClient.AuthorizationRequest(loginBehavior, requestCode, isLegacy,
+            return new AuthorizationClient.AuthorizationRequest(authenticationBehavior, loginBehavior, requestCode, isLegacy,
                     permissions, defaultAudience, applicationId, redirectUri, validateSameFbidAsToken, delegate);
         }
 
@@ -1813,6 +1822,11 @@ public final OpenRequest setLoginBehavior(SessionLoginBehavior loginBehavior) {
             return this;
         }
 
+        public final OpenRequest setAuthenticationBehavior(AuthenticationBehavior authenticationBehavior) {
+            super.setAuthenticationBehavior(authenticationBehavior);
+            return this;
+        }        
+        
         /**
          * Sets the request code for the OpenRequest.
          *
diff --git a/funtown/src/tw/com/funtown/internal/Utility.java b/funtown/src/tw/com/funtown/internal/Utility.java
index ea45170d2..20e0abf9c 100644
--- a/funtown/src/tw/com/funtown/internal/Utility.java
+++ b/funtown/src/tw/com/funtown/internal/Utility.java
@@ -42,6 +42,10 @@
 import java.security.NoSuchAlgorithmException;
 import java.util.*;
 
+import java.util.UUID;
+import android.provider.Settings.Secure;
+import android.telephony.TelephonyManager;
+
 /**
  * com.facebook.internal is solely for the use of other packages within the Facebook SDK for Android. Use of
  * any of the classes in this package is unsupported, and they may be modified or removed without warning at
@@ -359,5 +363,23 @@ public static boolean queryAppAttributionSupportAndWait(final String application
             return attributionAllowedForLastAppChecked;
         }
     }
+    public static String getCurDeviceUUID(Context context) {
+    	UUID uuid;      
+        final String androidId = Secure.getString(context.getContentResolver(), Secure.ANDROID_ID);
 
+        try {
+            if (!"9774d56d682e549c".equals(androidId) && androidId != null) {
+                uuid = UUID.nameUUIDFromBytes(androidId.getBytes("utf8"));
+            } else {
+                final String deviceId = 
+                        ((TelephonyManager) context.getSystemService( Context.TELEPHONY_SERVICE )).getDeviceId();
+                uuid = deviceId != null ? 
+                                UUID.nameUUIDFromBytes(deviceId.getBytes("utf8")) : UUID.randomUUID();
+            }
+        } catch (UnsupportedEncodingException e) {
+            throw new RuntimeException(e);
+        }
+        
+        return uuid.toString();
+    }
 }
diff --git a/funtown/src/tw/com/funtown/widget/WebDialog.java b/funtown/src/tw/com/funtown/widget/WebDialog.java
index 5a6c3972e..69f330504 100644
--- a/funtown/src/tw/com/funtown/widget/WebDialog.java
+++ b/funtown/src/tw/com/funtown/widget/WebDialog.java
@@ -136,6 +136,20 @@ public WebDialog(Context context, String action, Bundle parameters, int theme, O
         onCompleteListener = listener;
     }
 
+    public WebDialog(Context context, String authority, String path, String action, Bundle parameters, int theme, OnCompleteListener listener) {
+        super(context, theme);
+
+        if (parameters == null) {
+            parameters = new Bundle();
+        }
+        parameters.putString(ServerProtocol.DIALOG_PARAM_VIEW, VIEW_REG);
+        parameters.putString(ServerProtocol.DIALOG_PARAM_TYPE, USER_AGENT);
+
+        Uri uri = Utility.buildUri(authority, path + action, parameters);
+        this.url = uri.toString();
+        onCompleteListener = listener;
+    }    
+    
     /**
      * Sets the listener which will be notified when the dialog finishes.
      *
@@ -393,6 +407,8 @@ public void onPageFinished(WebView view, String url) {
         private Context context;
         private Session session;
         private String applicationId;
+        private String authroity;        
+        private String path;           
         private String action;
         private int theme = DEFAULT_THEME;
         private OnCompleteListener listener;
@@ -415,6 +431,16 @@ protected BuilderBase(Context context, String applicationId, String action, Bund
             finishInit(context, action, parameters);
         }
 
+        protected BuilderBase(Context context, String applicationId,  String authroity, String path, String action, Bundle parameters) {
+            Validate.notNullOrEmpty(applicationId, "applicationId");
+            Validate.notNullOrEmpty(authroity, "authroity");     
+            Validate.notNullOrEmpty(path, "path");  
+            
+            this.applicationId = applicationId;
+            this.authroity = authroity;
+            this.path = path;
+            finishInit(context, action, parameters);
+        }        
         /**
          * Sets a theme identifier which will be passed to the underlying Dialog.
          *
@@ -464,8 +490,8 @@ public WebDialog build() {
 
         protected String getApplicationId() {
             return applicationId;
-        }
-
+        }        
+        
         protected Context getContext() {
             return context;
         }
@@ -523,6 +549,19 @@ public Builder(Context context, Session session, String action, Bundle parameter
         public Builder(Context context, String applicationId, String action, Bundle parameters) {
             super(context, applicationId, action, parameters);
         }
+        /**
+         * Constructor that builds a dialog for an authenticated user.
+         *
+         * @param context the Context within which the dialog will be shown.
+         * @param applicationId the application ID to be included in the dialog URL.
+         * @param authroity the portion of the dialog URL 
+         * @param path the portion of the dialog URL           
+         * @param action the portion of the dialog URL 
+         * @param parameters a Bundle containing parameters to pass as part of the URL.
+         */       
+        public Builder(Context context, String applicationId,String authroity,String path, String action, Bundle parameters) {
+            super(context, applicationId, authroity, path, action, parameters);
+        }      
     }
 
     /**
diff --git a/samples/SessionLoginSample/res/layout/funtown_activity.xml b/samples/SessionLoginSample/res/layout/funtown_activity.xml
index 42de7e032..f4560bd12 100644
--- a/samples/SessionLoginSample/res/layout/funtown_activity.xml
+++ b/samples/SessionLoginSample/res/layout/funtown_activity.xml
@@ -34,5 +34,10 @@
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
         android:text="@string/funtownLogin" />
-
+    <Button
+        android:id="@+id/buttonFuntownUUIDLoginLogout"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:text="@string/funtownLogin" />
+    
 </LinearLayout>
diff --git a/samples/SessionLoginSample/res/values/strings.xml b/samples/SessionLoginSample/res/values/strings.xml
index 363f1520c..447c4c600 100644
--- a/samples/SessionLoginSample/res/values/strings.xml
+++ b/samples/SessionLoginSample/res/values/strings.xml
@@ -29,9 +29,10 @@
     <!-- <string name="applicationId">380615018626574</string>  -->     
     <string name="login_using_funtown_activity">Login using Funtown Activity</string>
     <string name="funtownLogin">Login Funtown</string>
+    <string name="funtownUUIDLogin">Login Funtown Using UUID</string>    
      <string name="funtownLogout">Log out Funtown</string>  
-    <string name="client_id">2</string>
-    <string name="funtown_redirect_uri">http://newpartner.funtown.com.tw/mappingpage/index.php%3Fprovider%3Dfuntown%26client_id%3D2%26game_uri%3D68747470733a2f2f7765626c6f67696e2e66756e746f776e2e636f6d2e74772f6f617574682f6c6f67696e5f737563636573732e68746d6c3f73657373696f6e5f6b65793d</string>           
+    <string name="client_id">105</string>
+    <string name="funtown_redirect_uri">https://weblogin.funtown.com.tw/login_success.html</string>           
     <string name="facebook_redirect_uri">http://newpartner.funtown.com.tw/mappingpage/index.php%3Fprovider%3Dfacebook%26client_id%3D1399675216916323%26game_uri%3D68747470733a2f2f7765626c6f67696e2e66756e746f776e2e636f6d2e74772f6f617574682f6c6f67696e5f737563636573732e68746d6c3f73657373696f6e5f6b65793d</string>           
     
 </resources>
diff --git a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingFuntownActivityActivity.java b/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingFuntownActivityActivity.java
index 616e59614..45c2d9994 100644
--- a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingFuntownActivityActivity.java
+++ b/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingFuntownActivityActivity.java
@@ -23,6 +23,7 @@
 import android.view.View.OnClickListener;
 import android.widget.Button;
 import android.widget.TextView;
+import tw.com.funtown.AuthenticationBehavior;
 import tw.com.funtown.LoggingBehavior;
 import tw.com.funtown.Session;
 import tw.com.funtown.SessionState;
@@ -33,6 +34,7 @@
 
     private TextView textInstructionsOrLink;
     private Button buttonLoginLogout;
+    private Button buttonUUIDLoginLogout;    
     private Session.StatusCallback statusCallback = new SessionStatusCallback();
 
     @Override
@@ -40,6 +42,7 @@ public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.funtown_activity);
         buttonLoginLogout = (Button)findViewById(R.id.buttonFuntownLoginLogout);
+        buttonUUIDLoginLogout  = (Button)findViewById(R.id.buttonFuntownUUIDLoginLogout);
         textInstructionsOrLink = (TextView)findViewById(R.id.instructionsOrLink);
 
         Settings.addLoggingBehavior(LoggingBehavior.INCLUDE_ACCESS_TOKENS);
@@ -94,12 +97,22 @@ private void updateView() {
             buttonLoginLogout.setOnClickListener(new OnClickListener() {
                 public void onClick(View view) { onClickLogout(); }
             });
+            buttonUUIDLoginLogout.setText(R.string.logout);
+            buttonUUIDLoginLogout.setOnClickListener(new OnClickListener() {
+                public void onClick(View view) { onClickLogout(); }
+            });            
+            
         } else {
             textInstructionsOrLink.setText(R.string.instructions);
             buttonLoginLogout.setText(R.string.funtownLogin);
             buttonLoginLogout.setOnClickListener(new OnClickListener() {
                 public void onClick(View view) { onClickLogin(); }
             });
+            buttonUUIDLoginLogout.setText(R.string.funtownUUIDLogin);
+            buttonUUIDLoginLogout.setOnClickListener(new OnClickListener() {
+                public void onClick(View view) { onClickUUIDLogin(); }
+            });                  
+            
         }
     }
 
@@ -111,7 +124,16 @@ private void onClickLogin() {
             Session.openActiveSession(this, true, statusCallback);
         }
     }
-
+    private void onClickUUIDLogin() {
+        Session session = Session.getActiveSession();
+        if (!session.isOpened() && !session.isClosed()) {
+        	Session.OpenRequest or= new Session.OpenRequest(this);
+        	or.setAuthenticationBehavior(AuthenticationBehavior.UUID);
+            session.openForRead(or.setCallback(statusCallback));
+        } else {
+            Session.openActiveSession(this, true, statusCallback);
+        }
+    }
     private void onClickLogout() {
         Session session = Session.getActiveSession();
         if (!session.isClosed()) {
