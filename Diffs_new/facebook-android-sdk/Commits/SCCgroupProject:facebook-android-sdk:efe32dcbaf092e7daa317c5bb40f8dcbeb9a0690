diff --git a/samples/HelloFacebookSample/AndroidManifest.xml b/samples/HelloFacebookSample/AndroidManifest.xml
new file mode 100644
index 000000000..c0fb8d48b
--- /dev/null
+++ b/samples/HelloFacebookSample/AndroidManifest.xml
@@ -0,0 +1,76 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.example.hellofacebook"
+    android:versionCode="1"
+    android:versionName="1.0">
+
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+
+    <application
+        android:name=".HelloFacebookSampleApplication"
+        android:icon="@drawable/icon"
+        android:label="@string/app_name"
+        android:theme="@android:style/Theme.NoTitleBar">
+        <activity
+            android:name=".HelloFacebookSampleActivity"
+            android:label="@string/app_name"
+            android:windowSoftInputMode="adjustResize">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+        <activity
+            android:name="com.facebook.FacebookActivity"
+            android:label="@string/app_name"/>
+        <activity
+            android:name="com.facebook.CustomTabActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+
+                <data android:scheme="@string/fb_login_protocol_scheme" />
+            </intent-filter>
+        </activity>
+
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationId"
+            android:value="@string/app_id" />
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationName"
+            android:value="@string/facebook_app_name" />
+
+        <provider
+            android:name="com.facebook.FacebookContentProvider"
+            android:authorities="com.facebook.app.FacebookContentProvider355198514515820"
+            android:exported="true" />
+        <receiver android:name="com.example.hellofacebook.HelloFacebookBroadcastReceiver">
+            <intent-filter>
+                <action android:name="com.facebook.platform.AppCallResultBroadcast" />
+            </intent-filter>
+        </receiver>
+    </application>
+</manifest>
diff --git a/samples/HelloFacebookSample/BUCK b/samples/HelloFacebookSample/BUCK
new file mode 100644
index 000000000..9796c61d9
--- /dev/null
+++ b/samples/HelloFacebookSample/BUCK
@@ -0,0 +1,35 @@
+android_resource(
+  name = 'res',
+  res = 'res',
+  package = 'com.example.hellofacebook',
+  deps = [
+    '//facebook:android-sdk',
+  ],
+)
+
+android_library(
+  name = 'lib',
+  srcs = glob(['src/**/*.java']),
+  deps = [
+    ':res',
+    '//facebook:android-sdk',
+    '//libs:android-support-v4',
+  ],
+)
+
+android_binary(
+  name = 'app',
+  manifest = 'AndroidManifest.xml',
+  keystore = '//keystores:debug',
+  package_type = 'debug',
+  deps = [
+    ':lib',
+    '//facebook:android-sdk',
+    '//libs:android-support-v4',
+  ],
+)
+
+project_config(
+  src_target = ':app',
+  src_roots = ['src'],
+)
diff --git a/samples/HelloFacebookSample/build.gradle b/samples/HelloFacebookSample/build.gradle
new file mode 100644
index 000000000..8ba946d53
--- /dev/null
+++ b/samples/HelloFacebookSample/build.gradle
@@ -0,0 +1,36 @@
+apply plugin: 'com.android.application'
+
+dependencies {
+    compile project(':facebook')
+}
+
+android {
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
+
+    defaultConfig {
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+    }
+
+    lintOptions {
+        abortOnError false
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+
+    splits {
+        abi {
+            enable true
+            reset()
+            include 'armeabi', 'armeabi-v7a', 'x86'
+            universalApk true
+        }
+    }
+}
diff --git a/samples/HelloFacebookSample/proguard-project.txt b/samples/HelloFacebookSample/proguard-project.txt
new file mode 100644
index 000000000..f2fe1559a
--- /dev/null
+++ b/samples/HelloFacebookSample/proguard-project.txt
@@ -0,0 +1,20 @@
+# To enable ProGuard in your project, edit project.properties
+# to define the proguard.config property as described in that file.
+#
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in ${sdk.dir}/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the ProGuard
+# include property in project.properties.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/samples/HelloFacebookSample/res/drawable-hdpi/icon.png b/samples/HelloFacebookSample/res/drawable-hdpi/icon.png
new file mode 100644
index 000000000..0a0d7cc73
Binary files /dev/null and b/samples/HelloFacebookSample/res/drawable-hdpi/icon.png differ
diff --git a/samples/HelloFacebookSample/res/drawable-mdpi/icon.png b/samples/HelloFacebookSample/res/drawable-mdpi/icon.png
new file mode 100644
index 000000000..b4507c0e7
Binary files /dev/null and b/samples/HelloFacebookSample/res/drawable-mdpi/icon.png differ
diff --git a/samples/HelloFacebookSample/res/drawable-xhdpi/icon.png b/samples/HelloFacebookSample/res/drawable-xhdpi/icon.png
new file mode 100644
index 000000000..6e8424602
Binary files /dev/null and b/samples/HelloFacebookSample/res/drawable-xhdpi/icon.png differ
diff --git a/samples/HelloFacebookSample/res/drawable/icon.png b/samples/HelloFacebookSample/res/drawable/icon.png
new file mode 100644
index 000000000..b4507c0e7
Binary files /dev/null and b/samples/HelloFacebookSample/res/drawable/icon.png differ
diff --git a/samples/HelloFacebookSample/res/layout/main.xml b/samples/HelloFacebookSample/res/layout/main.xml
new file mode 100644
index 000000000..eadcdc7f0
--- /dev/null
+++ b/samples/HelloFacebookSample/res/layout/main.xml
@@ -0,0 +1,81 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              xmlns:facebook="http://schemas.android.com/apk/res-auto"
+              android:orientation="vertical"
+              android:layout_width="fill_parent"
+              android:layout_height="fill_parent"
+              android:background="#FFF"
+        >
+    <LinearLayout android:orientation="vertical"
+                  android:layout_width="fill_parent"
+                  android:layout_height="fill_parent"
+                  android:background="#FFF"
+                  android:id="@+id/main_ui_container">
+        <com.facebook.login.widget.LoginButton
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="5dp"
+            android:layout_gravity="center_horizontal"
+            facebook:com_facebook_confirm_logout="false"
+            facebook:com_facebook_tooltip_mode="never_display"
+            />
+        <LinearLayout
+                android:layout_width="150dp"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center_horizontal"
+                android:gravity="center_horizontal"
+                android:orientation="vertical"
+            >
+            <TextView
+                    android:id="@+id/greeting"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_marginLeft="10dp"
+                    android:layout_gravity="center"
+                    android:textColor="#333"
+                    android:textSize="18sp"/>
+            <com.facebook.login.widget.ProfilePictureView
+                    android:id="@+id/profilePicture"
+                    android:layout_height="wrap_content"
+                    android:layout_width="wrap_content"
+                    android:gravity="center_horizontal"
+                    android:layout_marginBottom="10dp"
+                    facebook:com_facebook_preset_size="normal"/>
+            <Button
+                    android:id="@+id/postStatusUpdateButton"
+                    android:layout_width="fill_parent"
+                    android:layout_height="wrap_content"
+                    android:text="Post Status Update"
+                    />
+            <Button
+                    android:id="@+id/postPhotoButton"
+                    android:layout_width="fill_parent"
+                    android:layout_height="wrap_content"
+                    android:text="Post Photo"
+                    />
+
+        </LinearLayout>
+    </LinearLayout>
+
+</LinearLayout>
+
diff --git a/samples/HelloFacebookSample/res/values/strings.xml b/samples/HelloFacebookSample/res/values/strings.xml
new file mode 100644
index 000000000..78b945b31
--- /dev/null
+++ b/samples/HelloFacebookSample/res/values/strings.xml
@@ -0,0 +1,41 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <string name="app_name">HelloFacebookSample</string>
+    <string name="facebook_app_name">HelloFBSample</string>
+    <string name="cancelled">Cancelled</string>
+    <string name="permission_not_granted">Unable to perform selected action because permissions were not granted.</string>
+    <string name="ok">OK</string>
+    <string name="hello_user">Hello %1$s!</string>
+    <string name="success">Success</string>
+    <string name="successfully_posted_post">Post ID: %1$s</string>
+    <string name="error">Error</string>
+    <string name="status_update">Updating status for %1$s at %2$s</string>
+    <string name="photo_post">Photo Post</string>
+    <string name="you_picked">You picked:</string>
+    <string name="no_friends_selected">&lt;No friends selected&gt;</string>
+    <string name="no_place_selected">&lt;No place selected&gt;</string>
+    <string name="pick_seattle_place">Pick a Seattle Place</string>
+    <string name="app_id">355198514515820</string>
+    <string name="fb_login_protocol_scheme">fb355198514515820</string>
+    <string name="exception">Exception: %1$s</string>
+</resources>
diff --git a/samples/HelloFacebookSample/src/com/example/hellofacebook/HelloFacebookBroadcastReceiver.java b/samples/HelloFacebookSample/src/com/example/hellofacebook/HelloFacebookBroadcastReceiver.java
new file mode 100644
index 000000000..a8278bc92
--- /dev/null
+++ b/samples/HelloFacebookSample/src/com/example/hellofacebook/HelloFacebookBroadcastReceiver.java
@@ -0,0 +1,44 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.hellofacebook;
+
+import android.os.Bundle;
+import android.util.Log;
+import com.facebook.FacebookBroadcastReceiver;
+
+/**
+ * This is a simple example to demonstrate how an app could extend FacebookBroadcastReceiver to handle
+ * notifications that long-running operations such as photo uploads have finished.
+ */
+public class HelloFacebookBroadcastReceiver extends FacebookBroadcastReceiver {
+
+    @Override
+    protected void onSuccessfulAppCall(String appCallId, String action, Bundle extras) {
+        // A real app could update UI or notify the user that their photo was uploaded.
+        Log.d("HelloFacebook", String.format("Photo uploaded by call " + appCallId + " succeeded."));
+    }
+
+    @Override
+    protected void onFailedAppCall(String appCallId, String action, Bundle extras) {
+        // A real app could update UI or notify the user that their photo was not uploaded.
+        Log.d("HelloFacebook", String.format("Photo uploaded by call " + appCallId + " failed."));
+    }
+}
diff --git a/samples/HelloFacebookSample/src/com/example/hellofacebook/HelloFacebookSampleActivity.java b/samples/HelloFacebookSample/src/com/example/hellofacebook/HelloFacebookSampleActivity.java
new file mode 100644
index 000000000..328e6e9d1
--- /dev/null
+++ b/samples/HelloFacebookSample/src/com/example/hellofacebook/HelloFacebookSampleActivity.java
@@ -0,0 +1,322 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.hellofacebook;
+
+import android.app.AlertDialog;
+import android.content.Intent;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.location.Location;
+import android.net.Uri;
+import android.os.Bundle;
+import android.support.v4.app.FragmentActivity;
+import android.util.Log;
+import android.view.View;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.facebook.*;
+import com.facebook.appevents.AppEventsLogger;
+import com.facebook.login.LoginManager;
+import com.facebook.login.LoginResult;
+import com.facebook.login.widget.ProfilePictureView;
+import com.facebook.share.ShareApi;
+import com.facebook.share.Sharer;
+import com.facebook.share.model.SharePhoto;
+import com.facebook.share.model.SharePhotoContent;
+import com.facebook.share.model.ShareLinkContent;
+import com.facebook.share.widget.ShareDialog;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+
+public class HelloFacebookSampleActivity extends FragmentActivity {
+
+    private static final String PERMISSION = "publish_actions";
+    private static final Location SEATTLE_LOCATION = new Location("") {
+        {
+            setLatitude(47.6097);
+            setLongitude(-122.3331);
+        }
+    };
+
+    private final String PENDING_ACTION_BUNDLE_KEY =
+            "com.example.hellofacebook:PendingAction";
+
+    private Button postStatusUpdateButton;
+    private Button postPhotoButton;
+    private ProfilePictureView profilePictureView;
+    private TextView greeting;
+    private PendingAction pendingAction = PendingAction.NONE;
+    private boolean canPresentShareDialog;
+    private boolean canPresentShareDialogWithPhotos;
+    private CallbackManager callbackManager;
+    private ProfileTracker profileTracker;
+    private ShareDialog shareDialog;
+    private FacebookCallback<Sharer.Result> shareCallback = new FacebookCallback<Sharer.Result>() {
+        @Override
+        public void onCancel() {
+            Log.d("HelloFacebook", "Canceled");
+        }
+
+        @Override
+        public void onError(FacebookException error) {
+            Log.d("HelloFacebook", String.format("Error: %s", error.toString()));
+            String title = getString(R.string.error);
+            String alertMessage = error.getMessage();
+            showResult(title, alertMessage);
+        }
+
+        @Override
+        public void onSuccess(Sharer.Result result) {
+            Log.d("HelloFacebook", "Success!");
+            if (result.getPostId() != null) {
+                String title = getString(R.string.success);
+                String id = result.getPostId();
+                String alertMessage = getString(R.string.successfully_posted_post, id);
+                showResult(title, alertMessage);
+            }
+        }
+
+        private void showResult(String title, String alertMessage) {
+            new AlertDialog.Builder(HelloFacebookSampleActivity.this)
+                    .setTitle(title)
+                    .setMessage(alertMessage)
+                    .setPositiveButton(R.string.ok, null)
+                    .show();
+        }
+    };
+
+    private enum PendingAction {
+        NONE,
+        POST_PHOTO,
+        POST_STATUS_UPDATE
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        FacebookSdk.sdkInitialize(this.getApplicationContext());
+
+        callbackManager = CallbackManager.Factory.create();
+
+        LoginManager.getInstance().registerCallback(callbackManager,
+                new FacebookCallback<LoginResult>() {
+                    @Override
+                    public void onSuccess(LoginResult loginResult) {
+                        handlePendingAction();
+                        updateUI();
+                    }
+
+                    @Override
+                    public void onCancel() {
+                        if (pendingAction != PendingAction.NONE) {
+                            showAlert();
+                            pendingAction = PendingAction.NONE;
+                        }
+                        updateUI();
+                    }
+
+                    @Override
+                    public void onError(FacebookException exception) {
+                        if (pendingAction != PendingAction.NONE
+                                && exception instanceof FacebookAuthorizationException) {
+                            showAlert();
+                            pendingAction = PendingAction.NONE;
+                        }
+                        updateUI();
+                    }
+
+                    private void showAlert() {
+                        new AlertDialog.Builder(HelloFacebookSampleActivity.this)
+                                .setTitle(R.string.cancelled)
+                                .setMessage(R.string.permission_not_granted)
+                                .setPositiveButton(R.string.ok, null)
+                                .show();
+                    }
+                });
+
+        shareDialog = new ShareDialog(this);
+        shareDialog.registerCallback(
+                callbackManager,
+                shareCallback);
+
+        if (savedInstanceState != null) {
+            String name = savedInstanceState.getString(PENDING_ACTION_BUNDLE_KEY);
+            pendingAction = PendingAction.valueOf(name);
+        }
+
+        setContentView(R.layout.main);
+
+        profileTracker = new ProfileTracker() {
+            @Override
+            protected void onCurrentProfileChanged(Profile oldProfile, Profile currentProfile) {
+                updateUI();
+                // It's possible that we were waiting for Profile to be populated in order to
+                // post a status update.
+                handlePendingAction();
+            }
+        };
+
+        profilePictureView = (ProfilePictureView) findViewById(R.id.profilePicture);
+        greeting = (TextView) findViewById(R.id.greeting);
+
+        postStatusUpdateButton = (Button) findViewById(R.id.postStatusUpdateButton);
+        postStatusUpdateButton.setOnClickListener(new View.OnClickListener() {
+            public void onClick(View view) {
+                onClickPostStatusUpdate();
+            }
+        });
+
+        postPhotoButton = (Button) findViewById(R.id.postPhotoButton);
+        postPhotoButton.setOnClickListener(new View.OnClickListener() {
+            public void onClick(View view) {
+                onClickPostPhoto();
+            }
+        });
+
+        // Can we present the share dialog for regular links?
+        canPresentShareDialog = ShareDialog.canShow(
+                ShareLinkContent.class);
+
+        // Can we present the share dialog for photos?
+        canPresentShareDialogWithPhotos = ShareDialog.canShow(
+                SharePhotoContent.class);
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        updateUI();
+    }
+
+    @Override
+    protected void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+
+        outState.putString(PENDING_ACTION_BUNDLE_KEY, pendingAction.name());
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        callbackManager.onActivityResult(requestCode, resultCode, data);
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        profileTracker.stopTracking();
+    }
+
+    private void updateUI() {
+        boolean enableButtons = AccessToken.getCurrentAccessToken() != null;
+
+        postStatusUpdateButton.setEnabled(enableButtons || canPresentShareDialog);
+        postPhotoButton.setEnabled(enableButtons || canPresentShareDialogWithPhotos);
+
+        Profile profile = Profile.getCurrentProfile();
+        if (enableButtons && profile != null) {
+            profilePictureView.setProfileId(profile.getId());
+            greeting.setText(getString(R.string.hello_user, profile.getFirstName()));
+        } else {
+            profilePictureView.setProfileId(null);
+            greeting.setText(null);
+        }
+    }
+
+    private void handlePendingAction() {
+        PendingAction previouslyPendingAction = pendingAction;
+        // These actions may re-set pendingAction if they are still pending, but we assume they
+        // will succeed.
+        pendingAction = PendingAction.NONE;
+
+        switch (previouslyPendingAction) {
+            case NONE:
+                break;
+            case POST_PHOTO:
+                postPhoto();
+                break;
+            case POST_STATUS_UPDATE:
+                postStatusUpdate();
+                break;
+        }
+    }
+
+    private void onClickPostStatusUpdate() {
+        performPublish(PendingAction.POST_STATUS_UPDATE, canPresentShareDialog);
+    }
+
+    private void postStatusUpdate() {
+        Profile profile = Profile.getCurrentProfile();
+        ShareLinkContent linkContent = new ShareLinkContent.Builder()
+                .setContentTitle("Hello Facebook")
+                .setContentDescription(
+                        "The 'Hello Facebook' sample  showcases simple Facebook integration")
+                .setContentUrl(Uri.parse("http://developers.facebook.com/docs/android"))
+                .build();
+        if (canPresentShareDialog) {
+            shareDialog.show(linkContent);
+        } else if (profile != null && hasPublishPermission()) {
+            ShareApi.share(linkContent, shareCallback);
+        } else {
+            pendingAction = PendingAction.POST_STATUS_UPDATE;
+        }
+    }
+
+    private void onClickPostPhoto() {
+        performPublish(PendingAction.POST_PHOTO, canPresentShareDialogWithPhotos);
+    }
+
+    private void postPhoto() {
+        Bitmap image = BitmapFactory.decodeResource(this.getResources(), R.drawable.icon);
+        SharePhoto sharePhoto = new SharePhoto.Builder().setBitmap(image).build();
+        ArrayList<SharePhoto> photos = new ArrayList<>();
+        photos.add(sharePhoto);
+
+        SharePhotoContent sharePhotoContent =
+                new SharePhotoContent.Builder().setPhotos(photos).build();
+        if (canPresentShareDialogWithPhotos) {
+            shareDialog.show(sharePhotoContent);
+        } else if (hasPublishPermission()) {
+            ShareApi.share(sharePhotoContent, shareCallback);
+        } else {
+            pendingAction = PendingAction.POST_PHOTO;
+            // We need to get new permissions, then complete the action when we get called back.
+            LoginManager.getInstance().logInWithPublishPermissions(
+                    this,
+                    Arrays.asList(PERMISSION));
+        }
+    }
+
+    private boolean hasPublishPermission() {
+        AccessToken accessToken = AccessToken.getCurrentAccessToken();
+        return accessToken != null && accessToken.getPermissions().contains("publish_actions");
+    }
+
+    private void performPublish(PendingAction action, boolean allowNoToken) {
+        AccessToken accessToken = AccessToken.getCurrentAccessToken();
+        if (accessToken != null || allowNoToken) {
+            pendingAction = action;
+            handlePendingAction();
+        }
+    }
+}
diff --git a/samples/HelloFacebookSample/src/com/example/hellofacebook/HelloFacebookSampleApplication.java b/samples/HelloFacebookSample/src/com/example/hellofacebook/HelloFacebookSampleApplication.java
new file mode 100644
index 000000000..a3e2d1eb3
--- /dev/null
+++ b/samples/HelloFacebookSample/src/com/example/hellofacebook/HelloFacebookSampleApplication.java
@@ -0,0 +1,35 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.hellofacebook;
+
+import android.app.Application;
+
+import com.facebook.FacebookSdk;
+import com.facebook.appevents.AppEventsLogger;
+
+public class HelloFacebookSampleApplication extends Application {
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        FacebookSdk.sdkInitialize(getApplicationContext());
+        AppEventsLogger.activateApp(this);
+    }
+}
diff --git a/samples/Iconicus/AndroidManifest.xml b/samples/Iconicus/AndroidManifest.xml
new file mode 100644
index 000000000..4823cc0d7
--- /dev/null
+++ b/samples/Iconicus/AndroidManifest.xml
@@ -0,0 +1,78 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.example.iconicus">
+    <uses-permission android:name="android.permission.INTERNET" />
+    <application
+        android:name=".IconicusApplication"
+        android:allowBackup="true"
+        android:icon="@drawable/ic_launcher"
+        android:label="@string/app_name"
+        android:theme="@style/AppBaseTheme">
+        <activity
+            android:name=".MainActivity"
+            android:label="@string/app_name"
+            android:screenOrientation="portrait">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+            <intent-filter>
+                <data
+                    android:host="fb.me"
+                    android:path="/1570399853210604"
+                    android:scheme="https" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+                <action android:name="android.intent.action.VIEW" />
+            </intent-filter>
+            <intent-filter>
+                <data
+                    android:host="game"
+                    android:scheme="iconicus" />
+
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+
+                <action android:name="android.intent.action.VIEW" />
+            </intent-filter>
+        </activity>
+        <activity
+            android:name="com.facebook.FacebookActivity"
+            android:label="@string/app_name"/>
+        <activity
+            android:name="com.facebook.CustomTabActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+
+                <data android:scheme="@string/fb_login_protocol_scheme" />
+            </intent-filter>
+        </activity>
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationId"
+            android:value="@string/facebook_app_id" />
+    </application>
+</manifest>
diff --git a/samples/Iconicus/BUCK b/samples/Iconicus/BUCK
new file mode 100644
index 000000000..7d7dfd9fb
--- /dev/null
+++ b/samples/Iconicus/BUCK
@@ -0,0 +1,35 @@
+android_resource(
+  name = 'res',
+  res = 'res',
+  package = 'com.example.iconicus',
+  deps = [
+    '//facebook:android-sdk',
+  ],
+)
+
+android_library(
+  name = 'lib',
+  srcs = glob(['src/**/*.java']),
+  deps = [
+    ':res',
+    '//facebook:android-sdk',
+    '//libs:android-support-v4',
+  ],
+)
+
+android_binary(
+  name = 'app',
+  manifest = 'AndroidManifest.xml',
+  keystore = '//keystores:debug',
+  package_type = 'debug',
+  deps = [
+    ':lib',
+    '//facebook:android-sdk',
+    '//libs:android-support-v4',
+  ],
+)
+
+project_config(
+  src_target = ':app',
+  src_roots = ['src'],
+)
diff --git a/samples/Iconicus/build.gradle b/samples/Iconicus/build.gradle
new file mode 100644
index 000000000..2c95ebc24
--- /dev/null
+++ b/samples/Iconicus/build.gradle
@@ -0,0 +1,51 @@
+apply plugin: 'com.android.application'
+
+repositories {
+    mavenCentral()
+}
+
+dependencies {
+    compile project(':facebook')
+    // In order to test a specific version published on maven, comment out the project compile
+    // directive and and comment this line and update to the specific version.
+    // compile 'com.facebook.android:facebook-android-sdk:4.0.1'
+}
+
+android {
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
+
+    defaultConfig {
+        applicationId "com.example.iconicus"
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+    }
+
+    buildTypes {
+        debug {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
+        }
+        release {
+            minifyEnabled true
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
+        }
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+
+    splits {
+        abi {
+            enable true
+            reset()
+            include 'armeabi', 'armeabi-v7a', 'x86'
+            universalApk true
+        }
+    }
+}
diff --git a/samples/Iconicus/proguard-project.txt b/samples/Iconicus/proguard-project.txt
new file mode 100644
index 000000000..f2fe1559a
--- /dev/null
+++ b/samples/Iconicus/proguard-project.txt
@@ -0,0 +1,20 @@
+# To enable ProGuard in your project, edit project.properties
+# to define the proguard.config property as described in that file.
+#
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in ${sdk.dir}/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the ProGuard
+# include property in project.properties.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/samples/Iconicus/res/drawable-hdpi/ic_launcher.png b/samples/Iconicus/res/drawable-hdpi/ic_launcher.png
new file mode 100644
index 000000000..6cb2639fc
Binary files /dev/null and b/samples/Iconicus/res/drawable-hdpi/ic_launcher.png differ
diff --git a/samples/Iconicus/res/drawable-hdpi/tile1.png b/samples/Iconicus/res/drawable-hdpi/tile1.png
new file mode 100644
index 000000000..1cdf68bc1
Binary files /dev/null and b/samples/Iconicus/res/drawable-hdpi/tile1.png differ
diff --git a/samples/Iconicus/res/drawable-hdpi/tile2.png b/samples/Iconicus/res/drawable-hdpi/tile2.png
new file mode 100644
index 000000000..4c6c24e78
Binary files /dev/null and b/samples/Iconicus/res/drawable-hdpi/tile2.png differ
diff --git a/samples/Iconicus/res/drawable-hdpi/tile3.png b/samples/Iconicus/res/drawable-hdpi/tile3.png
new file mode 100644
index 000000000..883ea2883
Binary files /dev/null and b/samples/Iconicus/res/drawable-hdpi/tile3.png differ
diff --git a/samples/Iconicus/res/drawable-hdpi/tile4.png b/samples/Iconicus/res/drawable-hdpi/tile4.png
new file mode 100644
index 000000000..a94449150
Binary files /dev/null and b/samples/Iconicus/res/drawable-hdpi/tile4.png differ
diff --git a/samples/Iconicus/res/drawable-hdpi/tile5.png b/samples/Iconicus/res/drawable-hdpi/tile5.png
new file mode 100644
index 000000000..d3e742968
Binary files /dev/null and b/samples/Iconicus/res/drawable-hdpi/tile5.png differ
diff --git a/samples/Iconicus/res/drawable-hdpi/tile6.png b/samples/Iconicus/res/drawable-hdpi/tile6.png
new file mode 100644
index 000000000..972db9bb8
Binary files /dev/null and b/samples/Iconicus/res/drawable-hdpi/tile6.png differ
diff --git a/samples/Iconicus/res/drawable-hdpi/tile7.png b/samples/Iconicus/res/drawable-hdpi/tile7.png
new file mode 100644
index 000000000..d551400a9
Binary files /dev/null and b/samples/Iconicus/res/drawable-hdpi/tile7.png differ
diff --git a/samples/Iconicus/res/drawable-hdpi/tile8.png b/samples/Iconicus/res/drawable-hdpi/tile8.png
new file mode 100644
index 000000000..957e8d95e
Binary files /dev/null and b/samples/Iconicus/res/drawable-hdpi/tile8.png differ
diff --git a/samples/Iconicus/res/drawable-hdpi/tile9.png b/samples/Iconicus/res/drawable-hdpi/tile9.png
new file mode 100644
index 000000000..4e34adbc1
Binary files /dev/null and b/samples/Iconicus/res/drawable-hdpi/tile9.png differ
diff --git a/samples/Iconicus/res/drawable-mdpi/ic_launcher.png b/samples/Iconicus/res/drawable-mdpi/ic_launcher.png
new file mode 100644
index 000000000..c1b5f3679
Binary files /dev/null and b/samples/Iconicus/res/drawable-mdpi/ic_launcher.png differ
diff --git a/samples/Iconicus/res/drawable-mdpi/tile1.png b/samples/Iconicus/res/drawable-mdpi/tile1.png
new file mode 100644
index 000000000..80328c034
Binary files /dev/null and b/samples/Iconicus/res/drawable-mdpi/tile1.png differ
diff --git a/samples/Iconicus/res/drawable-mdpi/tile2.png b/samples/Iconicus/res/drawable-mdpi/tile2.png
new file mode 100644
index 000000000..23573f2ec
Binary files /dev/null and b/samples/Iconicus/res/drawable-mdpi/tile2.png differ
diff --git a/samples/Iconicus/res/drawable-mdpi/tile3.png b/samples/Iconicus/res/drawable-mdpi/tile3.png
new file mode 100644
index 000000000..5c5581c7b
Binary files /dev/null and b/samples/Iconicus/res/drawable-mdpi/tile3.png differ
diff --git a/samples/Iconicus/res/drawable-mdpi/tile4.png b/samples/Iconicus/res/drawable-mdpi/tile4.png
new file mode 100644
index 000000000..081d4b3f2
Binary files /dev/null and b/samples/Iconicus/res/drawable-mdpi/tile4.png differ
diff --git a/samples/Iconicus/res/drawable-mdpi/tile5.png b/samples/Iconicus/res/drawable-mdpi/tile5.png
new file mode 100644
index 000000000..c007b1a2b
Binary files /dev/null and b/samples/Iconicus/res/drawable-mdpi/tile5.png differ
diff --git a/samples/Iconicus/res/drawable-mdpi/tile6.png b/samples/Iconicus/res/drawable-mdpi/tile6.png
new file mode 100644
index 000000000..288703f75
Binary files /dev/null and b/samples/Iconicus/res/drawable-mdpi/tile6.png differ
diff --git a/samples/Iconicus/res/drawable-mdpi/tile7.png b/samples/Iconicus/res/drawable-mdpi/tile7.png
new file mode 100644
index 000000000..d54767ebf
Binary files /dev/null and b/samples/Iconicus/res/drawable-mdpi/tile7.png differ
diff --git a/samples/Iconicus/res/drawable-mdpi/tile8.png b/samples/Iconicus/res/drawable-mdpi/tile8.png
new file mode 100644
index 000000000..72186a8fb
Binary files /dev/null and b/samples/Iconicus/res/drawable-mdpi/tile8.png differ
diff --git a/samples/Iconicus/res/drawable-mdpi/tile9.png b/samples/Iconicus/res/drawable-mdpi/tile9.png
new file mode 100644
index 000000000..1adba18ee
Binary files /dev/null and b/samples/Iconicus/res/drawable-mdpi/tile9.png differ
diff --git a/samples/Iconicus/res/drawable-xhdpi/ic_launcher.png b/samples/Iconicus/res/drawable-xhdpi/ic_launcher.png
new file mode 100644
index 000000000..70919b956
Binary files /dev/null and b/samples/Iconicus/res/drawable-xhdpi/ic_launcher.png differ
diff --git a/samples/Iconicus/res/drawable-xhdpi/tile1.png b/samples/Iconicus/res/drawable-xhdpi/tile1.png
new file mode 100644
index 000000000..4cff27b08
Binary files /dev/null and b/samples/Iconicus/res/drawable-xhdpi/tile1.png differ
diff --git a/samples/Iconicus/res/drawable-xhdpi/tile2.png b/samples/Iconicus/res/drawable-xhdpi/tile2.png
new file mode 100644
index 000000000..67e490127
Binary files /dev/null and b/samples/Iconicus/res/drawable-xhdpi/tile2.png differ
diff --git a/samples/Iconicus/res/drawable-xhdpi/tile3.png b/samples/Iconicus/res/drawable-xhdpi/tile3.png
new file mode 100644
index 000000000..b152f59e6
Binary files /dev/null and b/samples/Iconicus/res/drawable-xhdpi/tile3.png differ
diff --git a/samples/Iconicus/res/drawable-xhdpi/tile4.png b/samples/Iconicus/res/drawable-xhdpi/tile4.png
new file mode 100644
index 000000000..c10dc0c93
Binary files /dev/null and b/samples/Iconicus/res/drawable-xhdpi/tile4.png differ
diff --git a/samples/Iconicus/res/drawable-xhdpi/tile5.png b/samples/Iconicus/res/drawable-xhdpi/tile5.png
new file mode 100644
index 000000000..65bf3751d
Binary files /dev/null and b/samples/Iconicus/res/drawable-xhdpi/tile5.png differ
diff --git a/samples/Iconicus/res/drawable-xhdpi/tile6.png b/samples/Iconicus/res/drawable-xhdpi/tile6.png
new file mode 100644
index 000000000..7fb246d3c
Binary files /dev/null and b/samples/Iconicus/res/drawable-xhdpi/tile6.png differ
diff --git a/samples/Iconicus/res/drawable-xhdpi/tile7.png b/samples/Iconicus/res/drawable-xhdpi/tile7.png
new file mode 100644
index 000000000..a09fdd566
Binary files /dev/null and b/samples/Iconicus/res/drawable-xhdpi/tile7.png differ
diff --git a/samples/Iconicus/res/drawable-xhdpi/tile8.png b/samples/Iconicus/res/drawable-xhdpi/tile8.png
new file mode 100644
index 000000000..59598f819
Binary files /dev/null and b/samples/Iconicus/res/drawable-xhdpi/tile8.png differ
diff --git a/samples/Iconicus/res/drawable-xhdpi/tile9.png b/samples/Iconicus/res/drawable-xhdpi/tile9.png
new file mode 100644
index 000000000..f8d6a8dc8
Binary files /dev/null and b/samples/Iconicus/res/drawable-xhdpi/tile9.png differ
diff --git a/samples/Iconicus/res/drawable/board_background.xml b/samples/Iconicus/res/drawable/board_background.xml
new file mode 100644
index 000000000..88f424608
--- /dev/null
+++ b/samples/Iconicus/res/drawable/board_background.xml
@@ -0,0 +1,102 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android" >
+    <item>
+        <shape>
+            <solid android:color="@color/iconicus_divider" />
+            <size
+                android:height="@dimen/board_size"
+                android:width="@dimen/board_size" />
+        </shape>
+    </item>
+    <item android:right="194dp" android:bottom="194dp">
+        <shape android:shape="rectangle">
+            <solid android:color="@color/iconicus_board_background" />
+        </shape>
+    </item>
+    <item android:right="98dp" android:left="98dp" android:bottom="194dp">
+        <shape android:shape="rectangle">
+            <solid android:color="@color/iconicus_board_background" />
+        </shape>
+    </item>
+    <item android:left="194dp" android:bottom="194dp">
+        <shape android:shape="rectangle">
+            <solid android:color="@color/iconicus_board_background" />
+        </shape>
+    </item>
+
+    <item android:right="194dp" android:top="98dp" android:bottom="98dp">
+        <shape android:shape="rectangle">
+            <solid android:color="@color/iconicus_board_background" />
+        </shape>
+    </item>
+    <item android:right="98dp" android:left="98dp" android:top="98dp" android:bottom="98dp">
+        <shape android:shape="rectangle">
+            <solid android:color="@color/iconicus_board_background" />
+        </shape>
+    </item>
+    <item android:left="194dp"  android:top="98dp" android:bottom="98dp">
+        <shape android:shape="rectangle">
+            <solid android:color="@color/iconicus_board_background" />
+        </shape>
+    </item>
+
+    <item android:right="194dp" android:top="194dp">
+        <shape android:shape="rectangle">
+            <solid android:color="@color/iconicus_board_background" />
+        </shape>
+    </item>
+    <item android:right="98dp" android:left="98dp" android:top="194dp">
+        <shape android:shape="rectangle">
+            <solid android:color="@color/iconicus_board_background" />
+        </shape>
+    </item>
+    <item android:left="194dp"  android:top="194dp">
+        <shape android:shape="rectangle">
+            <solid android:color="@color/iconicus_board_background" />
+        </shape>
+    </item>
+
+    <item android:bottom="280dp">
+        <shape android:shape="rectangle">
+            <solid android:color="@color/iconicus_board_background" />
+        </shape>
+    </item>
+    <item android:top="280dp">
+        <shape android:shape="rectangle">
+            <solid android:color="@color/iconicus_board_background" />
+        </shape>
+    </item>
+    <item android:left="280dp">
+        <shape android:shape="rectangle">
+            <solid android:color="@color/iconicus_board_background" />
+        </shape>
+    </item>
+    <item android:right="280dp">
+        <shape android:shape="rectangle">
+            <solid android:color="@color/iconicus_board_background" />
+        </shape>
+    </item>
+
+
+
+
+</layer-list>
diff --git a/samples/Iconicus/res/drawable/button_background.xml b/samples/Iconicus/res/drawable/button_background.xml
new file mode 100644
index 000000000..52c37c3e0
--- /dev/null
+++ b/samples/Iconicus/res/drawable/button_background.xml
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_enabled="false">
+        <shape android:shape="rectangle">
+            <corners android:radius="@dimen/button_radius" />
+            <solid android:color="@color/iconicus_button_background_disabled" />
+            <stroke android:color="@color/iconicus_button_border" android:width="1dp" />
+        </shape>
+    </item>
+    <item android:state_pressed="true">
+        <shape android:shape="rectangle">
+            <corners android:radius="@dimen/button_radius" />
+            <solid android:color="@color/iconicus_button_background_pressed" />
+            <stroke android:color="@color/iconicus_button_border" android:width="1dp" />
+        </shape>
+    </item>
+    <item>
+        <shape android:shape="rectangle">
+            <corners android:radius="@dimen/button_radius" />
+            <solid android:color="@color/iconicus_button_background" />
+            <stroke android:color="@color/iconicus_button_border" android:width="1dp" />
+        </shape>
+    </item>
+</selector>
diff --git a/samples/Iconicus/res/drawable/choice_icon_background.xml b/samples/Iconicus/res/drawable/choice_icon_background.xml
new file mode 100644
index 000000000..f0d2e4349
--- /dev/null
+++ b/samples/Iconicus/res/drawable/choice_icon_background.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<shape
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle">
+
+    <corners android:radius="@dimen/background_radius" />
+    <solid android:color="@color/iconicus_choice_icon_background" />
+    <stroke android:width="1dp" android:color="@color/iconicus_icon_default_border" />
+</shape>
diff --git a/samples/Iconicus/res/drawable/default_icon_background.xml b/samples/Iconicus/res/drawable/default_icon_background.xml
new file mode 100644
index 000000000..2c82fab54
--- /dev/null
+++ b/samples/Iconicus/res/drawable/default_icon_background.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <item>
+        <shape>
+            <gradient
+                android:type="linear"
+                android:angle="315"
+                android:endColor="@color/iconicus_icon_background"
+                android:startColor="@color/iconicus_icon_shadow" />
+            <size android:width="@dimen/grid_cell_width" android:height="@dimen/grid_cell_height"/>
+            <corners android:radius="@dimen/background_radius" />
+        </shape>
+    </item>
+    <item android:top="2dp" android:left="2dp">
+        <shape>
+            <corners android:radius="@dimen/background_radius" />
+            <solid android:color="@color/iconicus_icon_background" />
+        </shape>
+    </item>
+</layer-list>
+
diff --git a/samples/Iconicus/res/drawable/invalid_icon_background.xml b/samples/Iconicus/res/drawable/invalid_icon_background.xml
new file mode 100644
index 000000000..656ab8326
--- /dev/null
+++ b/samples/Iconicus/res/drawable/invalid_icon_background.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android" >
+    <item>
+        <shape>
+            <solid android:color="@color/iconicus_icon_outside" />
+            <corners android:radius="@dimen/icon_radius" />
+        </shape>
+    </item>
+    <item android:top="2dp" android:bottom="2dp" android:right="2dp" android:left="2dp">
+        <shape android:shape="rectangle">
+            <solid android:color="@color/iconicus_icon_invalid_border" />
+            <corners android:radius="@dimen/icon_radius" />
+        </shape>
+    </item>
+    <item android:top="4dp" android:bottom="4dp" android:right="4dp" android:left="4dp">
+        <shape>
+            <solid android:color="@color/iconicus_icon_inside" />
+            <corners android:radius="@dimen/icon_radius" />
+        </shape>
+    </item>
+</layer-list>
diff --git a/samples/Iconicus/res/drawable/locked_icon_background.xml b/samples/Iconicus/res/drawable/locked_icon_background.xml
new file mode 100644
index 000000000..601aa2c71
--- /dev/null
+++ b/samples/Iconicus/res/drawable/locked_icon_background.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android" >
+    <item>
+        <shape>
+            <solid android:color="@color/iconicus_icon_outside" />
+            <corners android:radius="@dimen/icon_radius" />
+        </shape>
+    </item>
+    <item android:top="2dp" android:bottom="2dp" android:right="2dp" android:left="2dp">
+        <shape android:shape="rectangle">
+            <solid android:color="@color/iconicus_icon_locked_border" />
+            <corners android:radius="@dimen/icon_radius" />
+        </shape>
+    </item>
+    <item android:top="4dp" android:bottom="4dp" android:right="4dp" android:left="4dp">
+        <shape>
+            <solid android:color="@color/iconicus_icon_inside" />
+            <corners android:radius="@dimen/icon_radius" />
+        </shape>
+    </item>
+</layer-list>
diff --git a/samples/Iconicus/res/drawable/selected_icon_background.xml b/samples/Iconicus/res/drawable/selected_icon_background.xml
new file mode 100644
index 000000000..08f985cf0
--- /dev/null
+++ b/samples/Iconicus/res/drawable/selected_icon_background.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<shape
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle">
+
+    <corners android:radius="@dimen/background_radius" />
+    <solid android:color="@color/iconicus_choice_icon_background" />
+    <stroke android:width="2dp" android:color="@color/iconicus_icon_selected_border" />
+</shape>
diff --git a/samples/Iconicus/res/drawable/valid_icon_background.xml b/samples/Iconicus/res/drawable/valid_icon_background.xml
new file mode 100644
index 000000000..a2fc0d85f
--- /dev/null
+++ b/samples/Iconicus/res/drawable/valid_icon_background.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android" >
+    <item>
+        <shape>
+            <solid android:color="@color/iconicus_icon_outside" />
+            <corners android:radius="@dimen/icon_radius" />
+        </shape>
+    </item>
+    <item android:top="2dp" android:bottom="2dp" android:right="2dp" android:left="2dp">
+        <shape android:shape="rectangle">
+            <solid android:color="@color/iconicus_icon_valid_border" />
+            <corners android:radius="@dimen/icon_radius" />
+        </shape>
+    </item>
+    <item android:top="4dp" android:bottom="4dp" android:right="4dp" android:left="4dp">
+        <shape>
+            <solid android:color="@color/iconicus_icon_inside" />
+            <corners android:radius="@dimen/icon_radius" />
+        </shape>
+    </item>
+</layer-list>
diff --git a/samples/Iconicus/res/layout/activity_main.xml b/samples/Iconicus/res/layout/activity_main.xml
new file mode 100644
index 000000000..04565eed2
--- /dev/null
+++ b/samples/Iconicus/res/layout/activity_main.xml
@@ -0,0 +1,134 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:orientation="vertical">
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:background="@color/iconicus_board_background"
+        android:padding="10dp">
+        <LinearLayout
+            android:layout_weight="1"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content">
+        </LinearLayout>
+        <GridView
+            android:id="@+id/board"
+            android:background="@drawable/board_background"
+            android:numColumns="9"
+            android:layout_gravity="center_horizontal"
+            android:columnWidth="@dimen/grid_cell_width"
+            android:stretchMode="none"
+            android:horizontalSpacing="2dp"
+            android:verticalSpacing="2dp"
+            android:padding="2dp"
+            android:listSelector="@null"
+            android:layout_width="@dimen/board_size"
+            android:layout_height="wrap_content" >
+        </GridView>
+        <LinearLayout
+            android:layout_weight="1"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content">
+        </LinearLayout>
+    </LinearLayout>
+
+    <TextView
+        android:layout_width="fill_parent"
+        android:text="@string/instructions"
+        android:layout_height="wrap_content"
+        android:layout_margin="5dp">
+    </TextView>
+
+    <GridView
+        android:id="@+id/valid_numbers"
+        android:numColumns="10"
+        android:layout_gravity="center_horizontal"
+        android:columnWidth="@dimen/grid_cell_width"
+        android:stretchMode="spacingWidthUniform"
+        android:padding="10dp"
+        android:background="#dddddd"
+        android:listSelector="@null"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content" >
+    </GridView>
+
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:layout_margin="5dp"
+        android:layout_gravity="center_horizontal">
+
+        <Button
+            android:id="@+id/new_board"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            style="@style/iconicus_button"
+            android:layout_marginRight="2dp"
+            android:text="@string/button_new_game"/>
+
+        <Button
+            android:id="@+id/clear_board"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            style="@style/iconicus_button"
+            android:layout_marginLeft="2dp"
+            android:text="@string/button_clear_board" />
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:layout_marginLeft="5dp"
+        android:layout_marginRight="5dp"
+        android:layout_gravity="center_horizontal">
+
+        <com.facebook.share.widget.ShareButton
+            android:id="@+id/share_button"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1" />
+
+        <com.facebook.share.widget.SendButton
+            android:id="@+id/send_button"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="4dp"
+            android:layout_marginRight="4dp"
+            android:layout_weight="1" />
+
+        <Button
+            android:id="@+id/copy_button"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            style="@style/iconicus_button"
+            android:text="@string/copy_url" />
+    </LinearLayout>
+</LinearLayout>
diff --git a/samples/Iconicus/res/layout/choice_cell.xml b/samples/Iconicus/res/layout/choice_cell.xml
new file mode 100644
index 000000000..67cf5a5e6
--- /dev/null
+++ b/samples/Iconicus/res/layout/choice_cell.xml
@@ -0,0 +1,30 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<ImageView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/selection_cell"
+    android:layout_width="@dimen/grid_cell_width"
+    android:layout_height="@dimen/grid_cell_height"
+    android:background="@drawable/choice_icon_background"
+    android:minHeight="@dimen/grid_cell_height"
+    android:maxHeight="@dimen/grid_cell_height"
+    android:padding="4dp"
+    android:scaleType="fitCenter"
+    android:adjustViewBounds="true"
+    android:gravity="center"/>
diff --git a/samples/Iconicus/res/layout/grid_cell.xml b/samples/Iconicus/res/layout/grid_cell.xml
new file mode 100644
index 000000000..88e57cf67
--- /dev/null
+++ b/samples/Iconicus/res/layout/grid_cell.xml
@@ -0,0 +1,30 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<ImageView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/selection_cell"
+    android:layout_width="@dimen/grid_cell_width"
+    android:layout_height="@dimen/grid_cell_height"
+    android:background="@drawable/default_icon_background"
+    android:minHeight="@dimen/grid_cell_height"
+    android:maxHeight="@dimen/grid_cell_height"
+    android:padding="4dp"
+    android:scaleType="fitCenter"
+    android:adjustViewBounds="true"
+    android:gravity="center"/>
diff --git a/samples/Iconicus/res/values-w820dp/dimens.xml b/samples/Iconicus/res/values-w820dp/dimens.xml
new file mode 100644
index 000000000..72bb51545
--- /dev/null
+++ b/samples/Iconicus/res/values-w820dp/dimens.xml
@@ -0,0 +1,26 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <!-- Example customization of dimensions originally defined in res/values/dimens.xml
+         (such as screen margins) for screens with more than 820dp of available width. This
+         would include 7" and 10" devices in landscape (~960dp and ~1280dp respectively). -->
+    <dimen name="activity_horizontal_margin">64dp</dimen>
+</resources>
diff --git a/samples/Iconicus/res/values/dimens.xml b/samples/Iconicus/res/values/dimens.xml
new file mode 100644
index 000000000..8ab017967
--- /dev/null
+++ b/samples/Iconicus/res/values/dimens.xml
@@ -0,0 +1,31 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <!-- Default screen margins, per the Android Design guidelines. -->
+    <dimen name="activity_horizontal_margin">16dp</dimen>
+    <dimen name="activity_vertical_margin">16dp</dimen>
+    <dimen name="grid_cell_width">30dp</dimen>
+    <dimen name="grid_cell_height">30dp</dimen>
+    <dimen name="background_radius">3dp</dimen>
+    <dimen name="icon_radius">3dp</dimen>
+    <dimen name="button_radius">2dp</dimen>
+    <dimen name="board_size">290dp</dimen>
+</resources>
diff --git a/samples/Iconicus/res/values/strings.xml b/samples/Iconicus/res/values/strings.xml
new file mode 100644
index 000000000..d61290e2c
--- /dev/null
+++ b/samples/Iconicus/res/values/strings.xml
@@ -0,0 +1,34 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <string name="app_name">Iconicus</string>
+    <string name="instructions">Select an icon from below and put it into the board above. Make sure that no two of the same icons occur in the same row, column, or 3x3 grid. Need help? Share with your friends and see if they can give you any hints.</string>
+    <string name="button_new_game">New Game</string>
+    <string name="button_clear_board">Clear Board</string>
+    <string name="copy_url">Copy URL</string>
+    <string name="facebook_app_id">1567030756880847</string>
+    <string name="fb_login_protocol_scheme">fb1567030756880847</string>
+    <string name="share_title">Play this game!</string>
+    <string name="share_description">Check out this game of Iconicus that I was playing. Can you finish it?</string>
+    <string name="link_copied">The link has been copied to the clipboard.</string>
+    <string name="position_locked">Current position is locked, please select a different location.</string>
+    <string name="nothing_selected">Nothing was selected, please select something first.</string>
+</resources>
diff --git a/samples/Iconicus/res/values/styles.xml b/samples/Iconicus/res/values/styles.xml
new file mode 100644
index 000000000..af918bb24
--- /dev/null
+++ b/samples/Iconicus/res/values/styles.xml
@@ -0,0 +1,55 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+
+    <style name="AppBaseTheme" parent="android:Theme.Light">
+    </style>
+
+    <color name="iconicus_button_background">#dddddd</color>
+    <color name="iconicus_button_background_disabled">#ffffff</color>
+    <color name="iconicus_button_background_pressed">#aaaaaa</color>
+    <color name="iconicus_button_border">#999999</color>
+    <color name="iconicus_icon_background">#c4b075</color>
+    <color name="iconicus_icon_shadow">#706644</color>
+    <color name="iconicus_icon_valid_border">#00ff00</color>
+    <color name="iconicus_icon_selected_border">#aa000000</color>
+    <color name="iconicus_icon_locked_border">#aaffffff</color>
+    <color name="iconicus_icon_invalid_border">#aaff0000</color>
+    <color name="iconicus_icon_default_border">#00bfff</color>
+    <color name="iconicus_choice_icon_background">#e4d08e</color>
+    <color name="iconicus_icon_outside">#c4b075</color>
+    <color name="iconicus_icon_inside">#e4d08e</color>
+    <color name="iconicus_board_background">#e5cf8e</color>
+    <color name="iconicus_divider">#a19056</color>
+
+    <style name="iconicus_button" parent="@android:style/Widget.Button">
+        <item name="android:background">@drawable/button_background</item>
+        <item name="android:drawablePadding">6dp</item>
+        <item name="android:gravity">center</item>
+        <item name="android:paddingBottom">5dp</item>
+        <item name="android:paddingLeft">8dp</item>
+        <item name="android:paddingRight">8dp</item>
+        <item name="android:paddingTop">5dp</item>
+        <item name="android:textColor">#000000</item>
+        <item name="android:textSize">14sp</item>
+    </style>
+
+</resources>
diff --git a/samples/Iconicus/src/com/example/iconicus/GameBoard.java b/samples/Iconicus/src/com/example/iconicus/GameBoard.java
new file mode 100644
index 000000000..6624bf4dd
--- /dev/null
+++ b/samples/Iconicus/src/com/example/iconicus/GameBoard.java
@@ -0,0 +1,446 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.iconicus;
+
+import android.net.Uri;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Random;
+
+/**
+ * Abstraction for a game board
+ */
+public class GameBoard {
+    public static final int BOARD_ROWS = 9; // 9x9 board
+    public static final int GROUP_ROWS = 3;
+    public static final int BOARD_SIZE = BOARD_ROWS * BOARD_ROWS; // 9x9 board
+    public static final int EMPTY_PIECE = 0;
+    public static final int MIN_VALUE = 1;
+    public static final int MAX_VALUE = 9;
+
+    private static final Uri SHARE_URI = Uri.parse("https://fb.me/1570399853210604");
+    private static final String DATA_KEY = "data";
+    private static final String LOCKED_KEY = "locked";
+
+    private static final int [] SEED_GRID = {
+            1,2,3,4,5,6,7,8,9,
+            4,5,6,7,8,9,1,2,3,
+            7,8,9,1,2,3,4,5,6,
+            2,3,4,5,6,7,8,9,1,
+            5,6,7,8,9,1,2,3,4,
+            8,9,1,2,3,4,5,6,7,
+            3,4,5,6,7,8,9,1,2,
+            6,7,8,9,1,2,3,4,5,
+            9,1,2,3,4,5,6,7,8
+    };
+
+    private int[] board = new int[BOARD_SIZE];
+    private boolean[] lockedPositions = new boolean[BOARD_SIZE];
+
+    private GameBoard(int[] board, boolean[] lockedPositions) {
+        if (board.length != this.board.length
+                || lockedPositions.length != this.lockedPositions.length) {
+            throw new IllegalArgumentException("boards are not the same size");
+        }
+        System.arraycopy(board, 0, this.board, 0, board.length);
+        System.arraycopy(lockedPositions, 0, this.lockedPositions, 0, lockedPositions.length);
+    }
+
+    private GameBoard(int[] board) {
+        if (board.length != this.board.length) {
+            throw new IllegalArgumentException("boards are not the same size");
+        }
+        for (int i = 0; i < BOARD_SIZE; i++) {
+            this.board[i] = board[i];
+            this.lockedPositions[i] = (this.board[i] != EMPTY_PIECE);
+        }
+    }
+
+    /**
+     * Generates a new valid board.
+     * @param openPositions the number of open positions to leave on the board.
+     * @return a new valid board.
+     */
+    public static GameBoard generateBoard(final int openPositions) {
+        Random random = new Random(System.currentTimeMillis());
+        int [] board = new int[BOARD_SIZE];
+        System.arraycopy(SEED_GRID, 0, board, 0, BOARD_SIZE);
+
+        for (int i = 0; i < 9; i++) {
+            shuffleGrid(random, board);
+        }
+
+        List<Integer> remainingPositions = new ArrayList<>(BOARD_SIZE);
+        for (int i = 0; i < BOARD_SIZE; i++) {
+            remainingPositions.add(i);
+        }
+
+        for (int i = 0; i < openPositions; i++) {
+            removeOpenPosition(random, board, remainingPositions);
+        }
+
+        return new GameBoard(board);
+    }
+
+    /**
+     * Returns a GameBoard from a Uri.
+     * @param uri the uri that was shared.
+     * @return a board from the Uri.
+     */
+    public static GameBoard fromUri(final Uri uri) {
+        String data = uri.getQueryParameter(DATA_KEY);
+        if (data != null) {
+            int [] newBoard = decodeBoard(data);
+            String locked = uri.getQueryParameter(LOCKED_KEY);
+            boolean [] lockedArr;
+
+            if (locked != null) {
+                lockedArr = decodeLockedPositions(locked);
+            } else {
+                // if there's no explicit locked param, then treat every position
+                // passed in as being locked.
+                lockedArr = new boolean[BOARD_SIZE];
+                for (int i = 0; i < lockedArr.length; i++) {
+                    if (newBoard[i] != EMPTY_PIECE) {
+                        lockedArr[i] = true;
+                    }
+                }
+            }
+            return new GameBoard(newBoard, lockedArr);
+        }
+        return null;
+    }
+
+    /**
+     * Clears the existing board of all pieces that weren't locked in place.
+     */
+    public void clearBoard() {
+        for (int i = 0; i < board.length; i++) {
+            if (!lockedPositions[i]) {
+                board[i] = EMPTY_PIECE;
+            }
+        }
+    }
+
+    /**
+     * Determines whether the current position is locked or not.
+     * @param position the position of the piece on the board.
+     * @return whether it's locked or not.
+     */
+    public boolean isLocked(final int position) {
+        return lockedPositions[position];
+    }
+
+    /**
+     * Sets the value for the position on the board. Returns true if the value is successfully set,
+     * false otherwise (e.g. the current position is locked and can't be modified).
+     * @param value the value to set.
+     * @param position the position of the piece on the board.
+     * @return true if value is successfully set.
+     */
+    public boolean setValue(final int value, final int position) {
+        if (!isLocked(position)
+                && ((value >= MIN_VALUE && value <= MAX_VALUE) || value == EMPTY_PIECE)) {
+            board[position] = value;
+            return true;
+        }
+        return false;
+    }
+
+    /**
+     * Gets the integer value of the piece on the board.
+     * @param position the position of the piece on the board.
+     * @return the integer value (0-9) or -1 if there's no current value.
+     */
+    public int getValue(final int position) {
+        if (position < 0 || position >= BOARD_SIZE) {
+            return EMPTY_PIECE;
+        }
+        return board[position];
+    }
+
+    /**
+     * Gets the string value of the piece on the board.
+     * @param position the position of the piece on the board.
+     * @return the String value ("0"-"9") or the empty string "" if there's no current value.
+     */
+    public String getValueAsString(final int position) {
+        int value = getValue(position);
+        if (value < MIN_VALUE || value > MAX_VALUE) {
+            return "";
+        }
+        return "" + value;
+    }
+
+    /**
+     * Determines whether the current position is empty or not.
+     * @param position the position of the piece.
+     * @return true if the current position is empty.
+     */
+    public boolean isEmpty(final int position) {
+        return board[position] == EMPTY_PIECE;
+    }
+
+    /**
+     * Determines whether the value in the current position is valid or not.
+     * @param position the position of the piece.
+     * @return true if the current position is valid (empty pieces are by default valid).
+     */
+    public boolean isValid(final int position) {
+        if (isEmpty(position)) {
+            return true;
+        }
+        return validateRow(position) && validateColumn(position) && validateGroup(position);
+    }
+
+    /**
+     * Converts the current board into a Uri.
+     * @return a Uri that represents the current board.
+     */
+    public Uri toUri() {
+        Uri.Builder shareUri = SHARE_URI.buildUpon();
+        shareUri.appendQueryParameter(DATA_KEY, encodeBoard());
+        shareUri.appendQueryParameter(LOCKED_KEY, encodeLockedPositions());
+        return shareUri.build();
+    }
+
+    private String encodeBoard() {
+        StringBuilder builder = new StringBuilder();
+        for (int i = 0; i < board.length; i++) {
+            builder.append(board[i]);
+        }
+        return builder.toString();
+    }
+
+    private static int[] decodeBoard(String input) {
+        int [] newBoard = new int[BOARD_SIZE];
+        Arrays.fill(newBoard, EMPTY_PIECE);
+        if (input.length() == BOARD_SIZE) {
+            for (int i = 0; i < input.length(); i++) {
+                newBoard[i] = Integer.parseInt(input.substring(i, i + 1));
+            }
+        }
+        return newBoard;
+    }
+
+    private String encodeLockedPositions() {
+        StringBuilder builder = new StringBuilder();
+        for (int i = 0; i < lockedPositions.length; i++) {
+            builder.append(lockedPositions[i] ? 1 : 0);;;
+        }
+        return builder.toString();
+    }
+
+    private static boolean[] decodeLockedPositions(String input) {
+        boolean [] locked = new boolean[BOARD_SIZE];
+        Arrays.fill(locked, false);
+        if (input.length() == BOARD_SIZE) {
+            for (int i = 0; i < input.length(); i++) {
+                locked[i] = (input.charAt(i) == '1');
+            }
+        }
+        return locked;
+    }
+
+    private boolean validateRow(final int position) {
+        int startPos = (position / BOARD_ROWS) * BOARD_ROWS;
+        for (int i = 0; i < BOARD_ROWS; i++) {
+            if (!checkIsValid(position, startPos + i)) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    private boolean validateColumn(final int position) {
+        int startPos = position % BOARD_ROWS;
+        for (int i = 0; i < BOARD_ROWS; i++) {
+            if (!checkIsValid(position, startPos + (i * BOARD_ROWS))) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    private boolean validateGroup(final int position) {
+        int row = position / BOARD_ROWS;
+        int column = position % BOARD_ROWS;
+
+        int group = (row / GROUP_ROWS) * GROUP_ROWS + (column / GROUP_ROWS);
+        int startRow = (group / GROUP_ROWS) * GROUP_ROWS;
+        int startColumn = (group % GROUP_ROWS) * GROUP_ROWS;
+
+        for (int i = 0; i < GROUP_ROWS; i++) {
+            for (int j = 0; j < GROUP_ROWS; j++) {
+                if (!checkIsValid(position, (startRow + i) * 9 + startColumn + j)) {
+                    return false;
+                }
+            }
+        }
+        return true;
+    }
+
+    private boolean checkIsValid(final int position1, final int position2) {
+        return (position1 == position2) || (board[position1] != board[position2]);
+    }
+
+    private static void shuffleGrid(final Random random, final int[] board) {
+        switch (random.nextInt(5)) {
+            case 0:
+                shuffleRow(random, board);
+                break;
+            case 1:
+                shuffleRowGroup(random, board);
+                break;
+            case 2:
+                shuffleColumn(random, board);
+                break;
+            case 3:
+                shuffleColumnGroup(random, board);
+                break;
+            case 4:
+                transpose(board);
+                break;
+            default:
+                break;
+        }
+    }
+
+    private static void shuffleRow(final Random random, final int[] board) {
+        // Swap two random rows. Note that it's only safe to shuffle rows within each group of 3
+        // i.e. row 1 can only be shuffled with either row 2 or 3.
+        int group = random.nextInt(GROUP_ROWS);
+        int row1 = random.nextInt(GROUP_ROWS);
+        int row2 = randomOther(random, row1, GROUP_ROWS);
+
+        int realRow1 = group * GROUP_ROWS + row1;
+        int realRow2 = group * GROUP_ROWS + row2;
+
+        Range range1 = new Range(realRow1 * BOARD_ROWS, BOARD_ROWS);
+        Range range2 = new Range(realRow2 * BOARD_ROWS, BOARD_ROWS);
+        swap(board, range1, range2);
+    }
+
+    private static void shuffleRowGroup(final Random random, final int[] board) {
+        // Swap two groups of rows. i.e. swap rows 123 with rows 789
+        int group1 = random.nextInt(GROUP_ROWS);
+        int group2 = randomOther(random, group1, GROUP_ROWS);
+
+        Range range1 = new Range(group1 * GROUP_ROWS * BOARD_ROWS, GROUP_ROWS * BOARD_ROWS);
+        Range range2 = new Range(group2 * GROUP_ROWS * BOARD_ROWS, GROUP_ROWS * BOARD_ROWS);
+        swap(board, range1, range2);
+    }
+
+    private static void shuffleColumn(final Random random, final int[] board) {
+        // Swap two random columns. Note that just like with rows, it's only safe to shuffle columns
+        // within each group of 3
+        int group = random.nextInt(GROUP_ROWS);
+        int col1 = random.nextInt(GROUP_ROWS);
+        int col2 = randomOther(random, col1, GROUP_ROWS);
+
+        int realCol1 = group * GROUP_ROWS + col1;
+        int realCol2 = group * GROUP_ROWS + col2;
+
+        swapColumn(board, realCol1, realCol2);
+    }
+
+    private static void shuffleColumnGroup(final Random random, final int[] board) {
+        // Swap two groups of columns. i.e. swap columns 123 with columns 789
+        int group1 = random.nextInt(GROUP_ROWS);
+        int group2 = randomOther(random, group1, GROUP_ROWS);
+
+        for (int i = 0; i < GROUP_ROWS; i++) {
+            int realCol1 = group1 * GROUP_ROWS + i;
+            int realCol2 = group2 * GROUP_ROWS + i;
+            swapColumn(board, realCol1, realCol2);
+        }
+    }
+
+    private static void transpose(final int[] board) {
+        for (int row = 0; row < BOARD_ROWS; ++row) {
+            for (int col = row + 1; col < BOARD_ROWS; ++col) {
+                int index1 = (row * BOARD_ROWS) + col;
+                int index2 = (col * BOARD_ROWS) + row;
+                swapPosition(board, index1, index2);
+            }
+        }
+    }
+
+    private static int randomOther(final Random random, final int currentValue, final int space) {
+        return ((currentValue % space) + (random.nextInt(space - 1) + 1)) % space;
+    }
+
+    private static void swap(final int[] board, final Range range1, final Range range2) {
+        if (range1.getSize() != range2.getSize()) {
+            return;
+        }
+        int[] range2Copy = Arrays.copyOfRange(board, range2.getStart(), range2.getEnd());
+        System.arraycopy(board, range1.getStart(), board, range2.getStart(), range1.getSize());
+        System.arraycopy(range2Copy, 0, board, range1.getStart(), range1.getSize());
+    }
+
+    private static void swapColumn(final int[] board, final int col1, final int col2) {
+        for (int i = 0; i < BOARD_ROWS; i++) {
+            swapPosition(board, (i * BOARD_ROWS) + col1, (i * BOARD_ROWS) + col2);
+        }
+    }
+
+    private static void swapPosition(final int[] board, final int pos1, final int pos2) {
+        int val2 = board[pos2];
+        board[pos2] = board[pos1];
+        board[pos1] = val2;
+    }
+
+    private static void removeOpenPosition(
+            final Random random,
+            final int[] board,
+            final List<Integer> remainingPositions) {
+        int index = random.nextInt(remainingPositions.size());
+        int position = remainingPositions.remove(index);
+        board[position] = EMPTY_PIECE;
+    }
+
+    private static class Range {
+        private int start;
+        private int size;
+        private int end;
+
+        public Range(final int start, final int size) {
+            this.start = start;
+            this.size = size;
+            this.end = start + size;
+        }
+
+        public int getStart() {
+            return start;
+        }
+
+        public int getSize() {
+            return size;
+        }
+
+        public int getEnd() {
+            return end;
+        }
+    }
+}
diff --git a/samples/Iconicus/src/com/example/iconicus/GameController.java b/samples/Iconicus/src/com/example/iconicus/GameController.java
new file mode 100644
index 000000000..033d9ad26
--- /dev/null
+++ b/samples/Iconicus/src/com/example/iconicus/GameController.java
@@ -0,0 +1,241 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.iconicus;
+
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.BaseAdapter;
+import android.widget.GridView;
+import android.widget.ImageView;
+import android.widget.Toast;
+
+import bolts.AppLinks;
+
+public class GameController {
+
+    private static final int NUM_OPEN_POSITIONS = 50;
+
+    private static boolean iconsInitialized = false;
+    private static Drawable[] validIcons = new Drawable[GameBoard.BOARD_ROWS + 1];
+
+    private Context context;
+    private GameBoard board;
+    private GridView boardView;
+    private GridView selectionView;
+    private BoardAdapter boardAdapter;
+    private SelectionAdapter selectionAdapter;
+    private int selectedNum;
+    private View selectedView;
+
+
+    public GameController(final Context context, final Intent intent) {
+        this.context = context;
+        initializeIcons();
+        board = handleDeepLink(context, intent);
+        if (board == null) {
+            board = GameBoard.generateBoard(NUM_OPEN_POSITIONS);
+        }
+        resetSelection();
+    }
+
+    public void setBoardView(final GridView boardView) {
+        this.boardView = boardView;
+        boardAdapter = new BoardAdapter();
+        this.boardView.setAdapter(boardAdapter);
+        this.boardView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            public void onItemClick(AdapterView<?> parent, View v,
+                                    int position, long id) {
+                if (selectedNum >= 0) {
+                    if (board.isLocked(position)) {
+                        Toast.makeText(context.getApplicationContext(),
+                                R.string.position_locked,
+                                Toast.LENGTH_SHORT).show();
+                    } else {
+                        board.setValue(selectedNum, position);
+                        dataSetChanged();
+                    }
+                } else {
+                    Toast.makeText(context.getApplicationContext(),
+                            R.string.nothing_selected,
+                            Toast.LENGTH_SHORT).show();
+                }
+            }
+        });
+
+    }
+
+    public void setSelectionView(final GridView selectionView) {
+        this.selectionView = selectionView;
+        selectionAdapter = new SelectionAdapter();
+        this.selectionView.setAdapter(selectionAdapter);
+        this.selectionView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            public void onItemClick(AdapterView<?> parent, View v,
+                                    int position, long id) {
+                if (selectedNum != position) {
+                    resetSelection();
+                    selectedNum = position;
+                    v.setBackgroundResource(R.drawable.selected_icon_background);
+                    selectedView = v;
+                } else {
+                    resetSelection();
+                }
+            }
+        });
+    }
+
+    public void newGame() {
+        board = GameBoard.generateBoard(NUM_OPEN_POSITIONS);
+        dataSetChanged();
+    }
+
+    public void clearBoard() {
+        board.clearBoard();
+        dataSetChanged();
+    }
+
+    public Uri getShareUri() {
+        return board.toUri();
+    }
+
+    private synchronized void initializeIcons() {
+        if (iconsInitialized) {
+            return;
+        }
+        validIcons[0] = null;
+        validIcons[1] = context.getResources().getDrawable(R.drawable.tile1);
+        validIcons[2] = context.getResources().getDrawable(R.drawable.tile2);
+        validIcons[3] = context.getResources().getDrawable(R.drawable.tile3);
+        validIcons[4] = context.getResources().getDrawable(R.drawable.tile4);
+        validIcons[5] = context.getResources().getDrawable(R.drawable.tile5);
+        validIcons[6] = context.getResources().getDrawable(R.drawable.tile6);
+        validIcons[7] = context.getResources().getDrawable(R.drawable.tile7);
+        validIcons[8] = context.getResources().getDrawable(R.drawable.tile8);
+        validIcons[9] = context.getResources().getDrawable(R.drawable.tile9);
+        iconsInitialized = true;
+    }
+
+    private GameBoard handleDeepLink(final Context context, final Intent intent) {
+        Uri targetUri = AppLinks.getTargetUrlFromInboundIntent(context, intent);
+        if (targetUri == null) {
+            targetUri = intent.getData();
+        }
+
+        if (targetUri == null) {
+            return null;
+        }
+
+        return GameBoard.fromUri(targetUri);
+    }
+
+    private void dataSetChanged() {
+        if (boardAdapter != null) {
+            boardAdapter.notifyDataSetChanged();
+        }
+    }
+
+    private void resetSelection() {
+        if (selectedView != null) {
+            selectedView.setBackgroundResource(R.drawable.choice_icon_background);
+        }
+        selectedNum = GameBoard.EMPTY_PIECE;
+        selectedView = null;
+    }
+
+    private void updateCell(final ImageView imageView, final int position) {
+        imageView.setImageDrawable(validIcons[board.getValue(position)]);
+
+        if (board.isLocked(position)) {
+            imageView.setBackgroundResource(R.drawable.locked_icon_background);
+        } else if (board.isEmpty(position)) {
+            imageView.setBackgroundResource(R.drawable.default_icon_background);
+        } else if (board.isValid(position)) {
+            imageView.setBackgroundResource(R.drawable.valid_icon_background);
+        } else {
+            imageView.setBackgroundResource(R.drawable.invalid_icon_background);
+        }
+    }
+
+    private class SelectionAdapter extends BaseAdapter {
+
+        @Override
+        public int getCount() {
+            return GameBoard.BOARD_ROWS + 1;
+        }
+
+        @Override
+        public Object getItem(int position) {
+            return validIcons[position];
+        }
+
+        @Override
+        public long getItemId(int position) {
+            return position;
+        }
+
+        @Override
+        public View getView(int position, View convertView, ViewGroup parent) {
+            if (convertView != null) {
+                return convertView;
+            }
+
+            ImageView view = (ImageView) View.inflate(context, R.layout.choice_cell, null);
+            view.setImageDrawable(validIcons[position]);
+            return view;
+        }
+    }
+
+    private class BoardAdapter extends BaseAdapter {
+
+        @Override
+        public int getCount() {
+            return GameBoard.BOARD_SIZE;
+        }
+
+        @Override
+        public Object getItem(final int position) {
+            return board.getValue(position);
+        }
+
+        @Override
+        public long getItemId(final int position) {
+            return position;
+        }
+
+        @Override
+        public View getView(final int position, final View convertView, final ViewGroup parent) {
+            if (convertView != null) {
+                updateCell((ImageView) convertView, position);
+                return convertView;
+            }
+
+            ImageView view = (ImageView) View.inflate(context, R.layout.grid_cell, null);
+
+            updateCell(view, position);
+
+            return view;
+        }
+    }
+}
diff --git a/samples/Iconicus/src/com/example/iconicus/IconicusApplication.java b/samples/Iconicus/src/com/example/iconicus/IconicusApplication.java
new file mode 100644
index 000000000..3b21b9f4e
--- /dev/null
+++ b/samples/Iconicus/src/com/example/iconicus/IconicusApplication.java
@@ -0,0 +1,35 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.iconicus;
+
+import android.app.Application;
+
+import com.facebook.FacebookSdk;
+import com.facebook.appevents.AppEventsLogger;
+
+public class IconicusApplication extends Application {
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        FacebookSdk.sdkInitialize(getApplicationContext());
+        AppEventsLogger.activateApp(this);
+    }
+}
diff --git a/samples/Iconicus/src/com/example/iconicus/MainActivity.java b/samples/Iconicus/src/com/example/iconicus/MainActivity.java
new file mode 100644
index 000000000..b071453c9
--- /dev/null
+++ b/samples/Iconicus/src/com/example/iconicus/MainActivity.java
@@ -0,0 +1,111 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.iconicus;
+
+import android.app.Activity;
+import android.content.ClipData;
+import android.content.ClipboardManager;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.GridView;
+import android.widget.Toast;
+
+import com.facebook.FacebookSdk;
+import com.facebook.share.model.ShareLinkContent;
+import com.facebook.share.widget.SendButton;
+import com.facebook.share.widget.ShareButton;
+
+public class MainActivity extends Activity {
+
+    private GridView board;
+    private GridView validNumbers;
+
+    private GameController gameController;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+
+        gameController = new GameController(this, getIntent());
+
+        board = (GridView) findViewById(R.id.board);
+
+        validNumbers = (GridView) findViewById(R.id.valid_numbers);
+
+        gameController.setBoardView(board);
+        gameController.setSelectionView(validNumbers);
+
+        Button newGame = (Button) findViewById(R.id.new_board);
+        newGame.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                gameController.newGame();
+            }
+        });
+
+        Button clearBoard = (Button) findViewById(R.id.clear_board);
+        clearBoard.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                gameController.clearBoard();
+            }
+        });
+
+        final ShareButton share = (ShareButton) findViewById(R.id.share_button);
+        share.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                share.setShareContent(getLinkContent());
+            }
+        });
+
+        final SendButton send = (SendButton) findViewById(R.id.send_button);
+        send.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                send.setShareContent(getLinkContent());
+            }
+        });
+
+        Button copy = (Button) findViewById(R.id.copy_button);
+        copy.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                ClipboardManager clipboard = (ClipboardManager) getSystemService(CLIPBOARD_SERVICE);
+                ClipData clip = ClipData.newUri(
+                        getContentResolver(), "Iconicus", gameController.getShareUri());
+                clipboard.setPrimaryClip(clip);
+                Toast.makeText(MainActivity.this, R.string.link_copied, Toast.LENGTH_SHORT).show();
+            }
+        });
+    }
+
+    private ShareLinkContent getLinkContent() {
+        return new ShareLinkContent.Builder()
+                .setContentUrl(gameController.getShareUri())
+                .setContentTitle(getString(R.string.share_title))
+                .setContentDescription(getString(R.string.share_description))
+                .build();
+    }
+
+}
diff --git a/samples/MessengerSendSample/build.gradle b/samples/MessengerSendSample/build.gradle
new file mode 100644
index 000000000..b1a0545e9
--- /dev/null
+++ b/samples/MessengerSendSample/build.gradle
@@ -0,0 +1,53 @@
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
+
+    defaultConfig {
+        applicationId "com.facebook.samples.messenger.send"
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+        versionCode 1
+        versionName "0.1"
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'src/main/AndroidManifest.xml'
+            java.srcDirs = ['src/main/java']
+        }
+    }
+
+    packagingOptions {
+        exclude 'LICENSE'
+        exclude 'LICENSE.txt'
+        exclude 'META-INF/LICENSE'
+        exclude 'META-INF/LICENSE.txt'
+        exclude 'META-INF/NOTICE'
+        exclude 'META-INF/NOTICE.txt'    
+    }
+
+    signingConfigs {
+        debug {
+            storeFile file("../../keystores/debug.keystore")
+            storePassword "android"
+            keyAlias "androiddebugkey"
+            keyPassword "android"
+        }
+    }
+
+    splits {
+        abi {
+            enable true
+            reset()
+            include 'armeabi', 'armeabi-v7a', 'x86'
+            universalApk true
+        }
+    }
+}
+
+dependencies {
+    compile project(':facebook')
+    compile('com.android.support:appcompat-v7:21.0.3')
+}
diff --git a/samples/MessengerSendSample/src/main/AndroidManifest.xml b/samples/MessengerSendSample/src/main/AndroidManifest.xml
new file mode 100644
index 000000000..e7dd459ff
--- /dev/null
+++ b/samples/MessengerSendSample/src/main/AndroidManifest.xml
@@ -0,0 +1,63 @@
+<?xml version='1.0' encoding='utf-8'?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<manifest xmlns:android='http://schemas.android.com/apk/res/android'
+    package='com.facebook.samples.messenger.send'>
+
+    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
+    <uses-permission android:name="android.permission.INTERNET" />
+
+    <application
+        android:name='MessengerSendSampleApplication'
+        android:icon='@null'
+        android:label='@string/app_name'
+        android:theme='@style/Theme.AppCompat.NoActionBar'>
+
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationId"
+            android:value="@string/facebook_app_id" />
+
+        <activity android:name='.MainActivity'>
+            <intent-filter>
+                <action android:name='android.intent.action.MAIN' />
+                <category android:name='android.intent.category.LAUNCHER' />
+            </intent-filter>
+
+            <!-- Intent filter used for Messenger protocol version 20150311 -->
+            <intent-filter>
+                <action android:name="android.intent.action.PICK" />
+
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="com.facebook.orca.category.PLATFORM_THREAD_20150311" />
+            </intent-filter>
+
+            <!-- Intent filter used for Messenger protocol version 20150314 -->
+            <intent-filter>
+                <action android:name="android.intent.action.PICK" />
+
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="com.facebook.orca.category.PLATFORM_THREAD_20150314" />
+            </intent-filter>
+
+        </activity>
+
+    </application>
+</manifest>
diff --git a/samples/MessengerSendSample/src/main/java/com/facebook/samples/messenger/send/MainActivity.java b/samples/MessengerSendSample/src/main/java/com/facebook/samples/messenger/send/MainActivity.java
new file mode 100644
index 000000000..40192b5e5
--- /dev/null
+++ b/samples/MessengerSendSample/src/main/java/com/facebook/samples/messenger/send/MainActivity.java
@@ -0,0 +1,104 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.messenger.send;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.support.v7.widget.Toolbar;
+import android.view.View;
+
+import com.facebook.messenger.MessengerThreadParams;
+import com.facebook.messenger.MessengerUtils;
+import com.facebook.messenger.ShareToMessengerParams;
+
+/**
+ * Main Activity for sample.
+ */
+public class MainActivity extends Activity {
+
+  // This is the request code that the SDK uses for startActivityForResult. See the code below
+  // that references it. Messenger currently doesn't return any data back to the calling
+  // application.
+  private static final int REQUEST_CODE_SHARE_TO_MESSENGER = 1;
+
+  private Toolbar mToolbar;
+  private View mMessengerButton;
+  private MessengerThreadParams mThreadParams;
+  private boolean mPicking;
+
+  @Override
+  protected void onCreate(Bundle savedInstanceState) {
+    super.onCreate(savedInstanceState);
+
+    setContentView(R.layout.main_activity);
+    mToolbar = (Toolbar) findViewById(R.id.toolbar);
+    mMessengerButton = findViewById(R.id.messenger_send_button);
+
+    mToolbar.setTitle(R.string.app_name);
+
+    // If we received Intent.ACTION_PICK from Messenger, we were launched from a composer shortcut
+    // or the reply flow.
+    Intent intent = getIntent();
+    if (Intent.ACTION_PICK.equals(intent.getAction())) {
+      mThreadParams = MessengerUtils.getMessengerThreadParamsForIntent(intent);
+      mPicking = true;
+
+      // Note, if mThreadParams is non-null, it means the activity was launched from Messenger.
+      // It will contain the metadata associated with the original content, if there was content.
+    }
+
+    mMessengerButton.setOnClickListener(new View.OnClickListener() {
+      @Override
+      public void onClick(View v) {
+        onMessengerButtonClicked();
+      }
+    });
+  }
+
+  private void onMessengerButtonClicked() {
+    // The URI can reference a file://, content://, or android.resource. Here we use
+    // android.resource for sample purposes.
+    Uri uri =
+        Uri.parse("android.resource://com.facebook.samples.messenger.send/" + R.drawable.tree);
+
+    // Create the parameters for what we want to send to Messenger.
+    ShareToMessengerParams shareToMessengerParams =
+        ShareToMessengerParams.newBuilder(uri, "image/jpeg")
+            .setMetaData("{ \"image\" : \"tree\" }")
+            .build();
+
+    if (mPicking) {
+      // If we were launched from Messenger, we call MessengerUtils.finishShareToMessenger to return
+      // the content to Messenger.
+      MessengerUtils.finishShareToMessenger(this, shareToMessengerParams);
+    } else {
+      // Otherwise, we were launched directly (for example, user clicked the launcher icon). We
+      // initiate the broadcast flow in Messenger. If Messenger is not installed or Messenger needs
+      // to be upgraded, this will direct the user to the play store.
+      MessengerUtils.shareToMessenger(
+          this,
+          REQUEST_CODE_SHARE_TO_MESSENGER,
+          shareToMessengerParams);
+    }
+  }
+}
diff --git a/samples/MessengerSendSample/src/main/java/com/facebook/samples/messenger/send/MessengerSendSampleApplication.java b/samples/MessengerSendSample/src/main/java/com/facebook/samples/messenger/send/MessengerSendSampleApplication.java
new file mode 100644
index 000000000..00cd030f1
--- /dev/null
+++ b/samples/MessengerSendSample/src/main/java/com/facebook/samples/messenger/send/MessengerSendSampleApplication.java
@@ -0,0 +1,39 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.messenger.send;
+
+import android.app.Application;
+
+import com.facebook.FacebookSdk;
+import com.facebook.appevents.AppEventsLogger;
+
+/**
+ * Application object for sample app.
+ */
+public class MessengerSendSampleApplication extends Application {
+
+  @Override
+  public void onCreate() {
+    super.onCreate();
+    FacebookSdk.sdkInitialize(this);
+    AppEventsLogger.activateApp(this);
+  }
+}
diff --git a/samples/MessengerSendSample/src/main/res/drawable-xhdpi/tree.jpg b/samples/MessengerSendSample/src/main/res/drawable-xhdpi/tree.jpg
new file mode 100644
index 000000000..a02aec467
Binary files /dev/null and b/samples/MessengerSendSample/src/main/res/drawable-xhdpi/tree.jpg differ
diff --git a/samples/MessengerSendSample/src/main/res/layout/main_activity.xml b/samples/MessengerSendSample/src/main/res/layout/main_activity.xml
new file mode 100644
index 000000000..6ce6ea440
--- /dev/null
+++ b/samples/MessengerSendSample/src/main/res/layout/main_activity.xml
@@ -0,0 +1,54 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/container"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    android:background="#fff"
+    >
+
+  <android.support.v7.widget.Toolbar
+      android:id="@+id/toolbar"
+      android:layout_width="match_parent"
+      android:layout_height="wrap_content"
+      android:minHeight="?attr/actionBarSize"
+      android:background="?attr/colorPrimary"
+      />
+
+
+  <ImageView
+      android:layout_width="match_parent"
+      android:layout_height="0dp"
+      android:layout_weight="1"
+      android:src="@drawable/tree"
+      android:scaleType="fitCenter"
+      />
+
+  <include
+      layout="@layout/messenger_button_send_blue_large"
+      android:layout_width="match_parent"
+      android:layout_height="40dp"
+      android:layout_margin="10dp"
+      />
+
+</LinearLayout>
diff --git a/samples/MessengerSendSample/src/main/res/values/strings.xml b/samples/MessengerSendSample/src/main/res/values/strings.xml
new file mode 100644
index 000000000..8fef5a16f
--- /dev/null
+++ b/samples/MessengerSendSample/src/main/res/values/strings.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+  <string name='app_name'>Messenger SDK Sample</string>
+  <string name="facebook_app_id">434629220047124</string>
+</resources>
diff --git a/samples/RPSSample/AndroidManifest.xml b/samples/RPSSample/AndroidManifest.xml
new file mode 100644
index 000000000..68d3b58fa
--- /dev/null
+++ b/samples/RPSSample/AndroidManifest.xml
@@ -0,0 +1,82 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.example.rps"
+    android:versionCode="1"
+    android:versionName="1.0">
+
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+
+    <application
+        android:name=".RpsApplication"
+        android:icon="@drawable/icon"
+        android:label="@string/app_name"
+        android:theme="@android:style/Theme.NoTitleBar">
+        <activity
+            android:name="com.example.rps.MainActivity"
+            android:label="@string/app_name"
+            android:screenOrientation="portrait"
+            android:windowSoftInputMode="adjustResize">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+
+                <data
+                    android:host="fb.me"
+                    android:scheme="https" />
+            </intent-filter>
+        </activity>
+        <activity
+            android:name="com.facebook.FacebookActivity"
+            android:label="@string/app_name"/>
+        <activity
+            android:name="com.facebook.CustomTabActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+
+                <data android:scheme="@string/fb_login_protocol_scheme" />
+            </intent-filter>
+        </activity>
+
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationId"
+            android:value="@string/app_id" />
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationName"
+            android:value="@string/facebook_app_name" />
+
+        <provider
+            android:name="com.facebook.FacebookContentProvider"
+            android:authorities="com.facebook.app.FacebookContentProvider157578437735213"
+            android:exported="true" />
+    </application>
+</manifest>
diff --git a/samples/RPSSample/BUCK b/samples/RPSSample/BUCK
new file mode 100644
index 000000000..f2e6f55ec
--- /dev/null
+++ b/samples/RPSSample/BUCK
@@ -0,0 +1,35 @@
+android_resource(
+  name = 'res',
+  res = 'res',
+  package = 'com.example.rps',
+  deps = [
+    '//facebook:android-sdk',
+  ],
+)
+
+android_library(
+  name = 'lib',
+  srcs = glob(['src/**/*.java']),
+  deps = [
+    ':res',
+    '//facebook:android-sdk',
+    '//libs:android-support-v4',
+  ],
+)
+
+android_binary(
+  name = 'app',
+  manifest = 'AndroidManifest.xml',
+  keystore = '//keystores:debug',
+  package_type = 'debug',
+  deps = [
+    ':lib',
+    '//facebook:android-sdk',
+    '//libs:android-support-v4',
+  ],
+)
+
+project_config(
+  src_target = ':app',
+  src_roots = ['src'],
+)
diff --git a/samples/RPSSample/build.gradle b/samples/RPSSample/build.gradle
new file mode 100644
index 000000000..8ba946d53
--- /dev/null
+++ b/samples/RPSSample/build.gradle
@@ -0,0 +1,36 @@
+apply plugin: 'com.android.application'
+
+dependencies {
+    compile project(':facebook')
+}
+
+android {
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
+
+    defaultConfig {
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+    }
+
+    lintOptions {
+        abortOnError false
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+
+    splits {
+        abi {
+            enable true
+            reset()
+            include 'armeabi', 'armeabi-v7a', 'x86'
+            universalApk true
+        }
+    }
+}
diff --git a/samples/RPSSample/post_app_objects.sh b/samples/RPSSample/post_app_objects.sh
new file mode 100644
index 000000000..37b56b9ea
--- /dev/null
+++ b/samples/RPSSample/post_app_objects.sh
@@ -0,0 +1,155 @@
+#!/bin/sh
+#
+# Copyright 2010-present Facebook.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+# 
+#    http://www.apache.org/licenses/LICENSE-2.0
+# 
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+# Note: Use of this script requires Perl
+
+#
+# step 1 - confirm we have an app id and app secret to work with
+#
+
+if [ -z "$APPID" ]
+then
+  echo '$APPID must be exported and set to the application id for the sample before running this script'
+  exit 1
+fi
+
+if [ -z "$APPSECRET" ]
+then
+  echo '$APPSECRET must be exported set to the app secret for the sample before running this script'
+  exit 1
+fi
+
+#
+# step 2 - stage images and capture their URIs in variables
+#
+
+echo curling...
+
+ROCK_IMAGE_URI=` \
+  curl -s -k -X POST https://graph.facebook.com/$APPID/staging_resources -F access_token="$APPID|$APPSECRET" -F 'file=@res/drawable/left_rock.png;type=image/png' \
+  | perl -ne '/"uri":"(.*)"}/ && print $1' `
+
+PAPER_IMAGE_URI=` \
+  curl -s -k -X POST https://graph.facebook.com/$APPID/staging_resources -F access_token="$APPID|$APPSECRET" -F 'file=@res/drawable/left_paper.png;type=image/png' \
+  | perl -ne '/"uri":"(.*)"}/ && print $1' `
+
+SCISSORS_IMAGE_URI=` \
+  curl -s -k -X POST https://graph.facebook.com/$APPID/staging_resources -F access_token="$APPID|$APPSECRET" -F 'file=@res/drawable/left_scissors.png;type=image/png' \
+  | perl -ne '/"uri":"(.*)"}/ && print $1' `
+
+echo "created staged resources..."
+echo "  rock=$ROCK_IMAGE_URI"
+echo "  paper=$PAPER_IMAGE_URI"
+echo "  scissors=$SCISSORS_IMAGE_URI"
+
+# step 3 - create facebook hosted applink page for the app:
+# For mobile only app, facebook provide applink host service to generate a page: https://developers.facebook.com/docs/graph-api/reference/v2.0/app/app_link_hosts
+
+echo "creating facebook host applink page for mobile-only app:"
+
+FB_APPLINK_HOST_ID=` \
+curl https://graph.facebook.com/app/app_link_hosts -F access_token="$APPID|$APPSECRET" -F pretty=true -F name="RPSSample" \
+-F ios='[
+    {
+      "url" : "rps-sample-applink-example://",
+      "app_store_id" : 794163692,
+      "app_name" : "RPS Sample",
+    },
+  ]' \
+-F android=' [
+    {
+      "package" : "com.example.rps",
+      "app_name" : "RPS Sample",
+    },
+  ]' \
+-F web=' {
+    "should_fallback" : false,
+  }' \
+| perl -ne '/"id":\s*"(.*)"/ && print $1'`
+
+FB_APPLINK_HOST_URL=` \
+curl -X GET https://graph.facebook.com/v2.0/$FB_APPLINK_HOST_ID?access_token="$APPID|$APPSECRET" \
+| perl -ne '/"canonical_url":\s*"(.*)"/ && print $1' `
+
+echo "  applink host url id: $FB_APPLINK_HOST_ID"
+echo "  applink host url: $FB_APPLINK_HOST_URL"
+
+#
+# step 4 - create objects and capture their IDs in variables
+#
+
+# rock
+ROCK_OBJID=` \
+  curl -s -X POST -F "object={\"title\":\"Rock\",\"description\":\"Breaks scissors, alas is covered by paper.\",\"image\":\"$ROCK_IMAGE_URI\",\"url\":\"$FB_APPLINK_HOST_URL?gesture=rock\"}" "https://graph.facebook.com/$APPID/objects/fb_sample_rps:gesture?access_token=$APPID|$APPSECRET" \
+  | perl -ne '/"id":"(.*)"}/ && print $1' `
+
+# paper
+PAPER_OBJID=` \
+  curl -s -X POST -F "object={\"title\":\"Paper\",\"description\":\"Covers rock, sadly scissors cut it.\",\"image\":\"$PAPER_IMAGE_URI\",\"url\":\"$FB_APPLINK_HOST_URL?gesture=paper\"}" "https://graph.facebook.com/$APPID/objects/fb_sample_rps:gesture?access_token=$APPID|$APPSECRET" \
+  | perl -ne '/"id":"(.*)"}/ && print $1' `
+
+# scissors
+SCISSORS_OBJID=` \
+  curl -s -X POST -F "object={\"title\":\"Scissors\",\"description\":\"Cuts paper, broken by rock -- bother.\",\"image\":\"$SCISSORS_IMAGE_URI\",\"url\":\"$FB_APPLINK_HOST_URL?gesture=scissors\"}" "https://graph.facebook.com/$APPID/objects/fb_sample_rps:gesture?access_token=$APPID|$APPSECRET" \
+  | perl -ne '/"id":"(.*)"}/ && print $1' `
+
+#
+# step 5 - echo progress
+#
+
+echo "created application objects..."
+echo "  rock=$ROCK_OBJID"
+echo "  paper=$PAPER_OBJID"
+echo "  scissors=$SCISSORS_OBJID"
+
+#
+# step 6 - write .java file for common objects
+#
+
+MFILE=src/com/example/rps/CommonObjects.java
+
+cat > $MFILE << EOF
+/*
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.example.rps;
+
+public class CommonObjects {
+    public static final String BUILT_IN_OPEN_GRAPH_OBJECTS[] = {
+            "$ROCK_OBJID", // rock
+            "$PAPER_OBJID", // paper
+            "$SCISSORS_OBJID"  // scissors
+    };
+}
+
+EOF
+
+echo "created $MFILE ..."
+echo done.
diff --git a/samples/RPSSample/proguard-project.txt b/samples/RPSSample/proguard-project.txt
new file mode 100644
index 000000000..f2fe1559a
--- /dev/null
+++ b/samples/RPSSample/proguard-project.txt
@@ -0,0 +1,20 @@
+# To enable ProGuard in your project, edit project.properties
+# to define the proguard.config property as described in that file.
+#
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in ${sdk.dir}/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the ProGuard
+# include property in project.properties.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/samples/RPSSample/res/drawable-hdpi/icon.png b/samples/RPSSample/res/drawable-hdpi/icon.png
new file mode 100644
index 000000000..9e70a87f3
Binary files /dev/null and b/samples/RPSSample/res/drawable-hdpi/icon.png differ
diff --git a/samples/RPSSample/res/drawable-mdpi/icon.png b/samples/RPSSample/res/drawable-mdpi/icon.png
new file mode 100644
index 000000000..f8ac7a2db
Binary files /dev/null and b/samples/RPSSample/res/drawable-mdpi/icon.png differ
diff --git a/samples/RPSSample/res/drawable-xhdpi/icon.png b/samples/RPSSample/res/drawable-xhdpi/icon.png
new file mode 100644
index 000000000..ea8da121a
Binary files /dev/null and b/samples/RPSSample/res/drawable-xhdpi/icon.png differ
diff --git a/samples/RPSSample/res/drawable/app_background.xml b/samples/RPSSample/res/drawable/app_background.xml
new file mode 100644
index 000000000..cb65d561d
--- /dev/null
+++ b/samples/RPSSample/res/drawable/app_background.xml
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <item>
+        <shape xmlns:android="http://schemas.android.com/apk/res/android"
+                android:shape="rectangle">
+            <solid android:color="#ccc" />
+        </shape>
+    </item>
+    <item android:top="390dp">
+        <shape android:shape="rectangle">
+            <solid android:color="#999" />
+        </shape>
+    </item>
+</layer-list>
diff --git a/samples/RPSSample/res/drawable/fb_logo.png b/samples/RPSSample/res/drawable/fb_logo.png
new file mode 100644
index 000000000..42c619123
Binary files /dev/null and b/samples/RPSSample/res/drawable/fb_logo.png differ
diff --git a/samples/RPSSample/res/drawable/icon.png b/samples/RPSSample/res/drawable/icon.png
new file mode 100644
index 000000000..f8ac7a2db
Binary files /dev/null and b/samples/RPSSample/res/drawable/icon.png differ
diff --git a/samples/RPSSample/res/drawable/icon_border.xml b/samples/RPSSample/res/drawable/icon_border.xml
new file mode 100644
index 000000000..07c7ac547
--- /dev/null
+++ b/samples/RPSSample/res/drawable/icon_border.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<shape xmlns:android="http://schemas.android.com/apk/res/android" android:shape="rectangle">
+    <solid android:color="#FFF" />
+    <corners android:radius="10dp" />
+    <padding android:bottom="2dp" android:left="2dp" android:right="2dp" android:top="2dp" />
+    <stroke android:width="2px" android:color="@color/text_color" />
+</shape>
diff --git a/samples/RPSSample/res/drawable/left_paper.png b/samples/RPSSample/res/drawable/left_paper.png
new file mode 100644
index 000000000..813e925da
Binary files /dev/null and b/samples/RPSSample/res/drawable/left_paper.png differ
diff --git a/samples/RPSSample/res/drawable/left_rock.png b/samples/RPSSample/res/drawable/left_rock.png
new file mode 100644
index 000000000..4226ab074
Binary files /dev/null and b/samples/RPSSample/res/drawable/left_rock.png differ
diff --git a/samples/RPSSample/res/drawable/left_scissors.png b/samples/RPSSample/res/drawable/left_scissors.png
new file mode 100644
index 000000000..0ed1b1c16
Binary files /dev/null and b/samples/RPSSample/res/drawable/left_scissors.png differ
diff --git a/samples/RPSSample/res/drawable/profile_default_icon.png b/samples/RPSSample/res/drawable/profile_default_icon.png
new file mode 100644
index 000000000..15864ccdb
Binary files /dev/null and b/samples/RPSSample/res/drawable/profile_default_icon.png differ
diff --git a/samples/RPSSample/res/drawable/right_paper.png b/samples/RPSSample/res/drawable/right_paper.png
new file mode 100644
index 000000000..54431fe6a
Binary files /dev/null and b/samples/RPSSample/res/drawable/right_paper.png differ
diff --git a/samples/RPSSample/res/drawable/right_rock.png b/samples/RPSSample/res/drawable/right_rock.png
new file mode 100644
index 000000000..51203c4bc
Binary files /dev/null and b/samples/RPSSample/res/drawable/right_rock.png differ
diff --git a/samples/RPSSample/res/drawable/right_scissors.png b/samples/RPSSample/res/drawable/right_scissors.png
new file mode 100644
index 000000000..7c55471e6
Binary files /dev/null and b/samples/RPSSample/res/drawable/right_scissors.png differ
diff --git a/samples/RPSSample/res/drawable/usersettings_facebook_logo.png b/samples/RPSSample/res/drawable/usersettings_facebook_logo.png
new file mode 100644
index 000000000..161bef08b
Binary files /dev/null and b/samples/RPSSample/res/drawable/usersettings_facebook_logo.png differ
diff --git a/samples/RPSSample/res/drawable/usersettings_fragment_background_gradient.xml b/samples/RPSSample/res/drawable/usersettings_fragment_background_gradient.xml
new file mode 100644
index 000000000..0a504ea55
--- /dev/null
+++ b/samples/RPSSample/res/drawable/usersettings_fragment_background_gradient.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<shape xmlns:android="http://schemas.android.com/apk/res/android" android:shape="rectangle">
+    <gradient
+      android:startColor="#5774B5"
+      android:endColor="#2C4988"
+      android:gradientRadius="495"
+      android:type="radial"/>
+</shape>    
diff --git a/samples/RPSSample/res/layout/content_fragment.xml b/samples/RPSSample/res/layout/content_fragment.xml
new file mode 100644
index 000000000..b613cc47f
--- /dev/null
+++ b/samples/RPSSample/res/layout/content_fragment.xml
@@ -0,0 +1,51 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:id="@+id/content_group"
+              android:layout_height="match_parent"
+              android:layout_width="match_parent"
+              android:background="#FFF"
+              android:orientation="vertical">
+
+    <TextView android:id="@+id/content_title"
+              android:layout_height="wrap_content"
+              android:layout_width="wrap_content"
+              android:layout_gravity="center_horizontal"
+              android:paddingTop="20dp"
+              android:textColor="@color/text_color"
+              android:textSize="@dimen/text_size"/>
+
+    <ImageView android:id="@+id/content_image"
+               android:layout_height="wrap_content"
+               android:layout_width="wrap_content"
+               android:layout_gravity="center_horizontal"
+               android:padding="20dp" />
+
+
+    <Button android:id="@+id/content_play_button"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:text="@string/play"
+            android:background="@drawable/icon_border"
+            style="@style/again_button_style" />
+</LinearLayout>
diff --git a/samples/RPSSample/res/layout/main.xml b/samples/RPSSample/res/layout/main.xml
new file mode 100644
index 000000000..f982323d4
--- /dev/null
+++ b/samples/RPSSample/res/layout/main.xml
@@ -0,0 +1,42 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        android:orientation="vertical"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+    <fragment android:name="com.example.rps.RpsFragment"
+              android:id="@+id/rps_fragment"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent" />
+    <fragment android:name="com.example.rps.usersettings.UserSettingsFragment"
+              android:id="@+id/settings_fragment"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent" />
+    <fragment android:name="com.example.rps.ContentFragment"
+              android:id="@+id/content_fragment"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent" />
+
+</LinearLayout>
+
diff --git a/samples/RPSSample/res/layout/rps_fragment.xml b/samples/RPSSample/res/layout/rps_fragment.xml
new file mode 100644
index 000000000..42bde19b6
--- /dev/null
+++ b/samples/RPSSample/res/layout/rps_fragment.xml
@@ -0,0 +1,216 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:id="@+id/game_group"
+              android:orientation="vertical"
+              android:layout_height="match_parent"
+              android:layout_width="match_parent"
+              android:background="@drawable/app_background">
+
+    <LinearLayout android:layout_height="wrap_content"
+                  android:layout_width="wrap_content"
+                  android:layout_gravity="center"
+                  android:orientation="vertical">
+        <TextView android:layout_height="wrap_content"
+                  android:layout_width="wrap_content"
+                  android:id="@+id/text_rock"
+                  android:textColor="@color/text_color"
+                  android:textSize="@dimen/text_size"
+                  android:layout_gravity="left"
+                  android:layout_marginTop="20dp"
+                  android:text="@string/rock" />
+
+        <TextView android:layout_height="wrap_content"
+                  android:layout_width="wrap_content"
+                  android:id="@+id/text_paper"
+                  android:textColor="@color/text_color"
+                  android:textSize="@dimen/text_size"
+                  android:layout_gravity="left"
+                  android:layout_marginLeft="30dp"
+                  android:text="@string/paper"/>
+
+        <TextView android:layout_height="wrap_content"
+                  android:layout_width="wrap_content"
+                  android:id="@+id/text_scissors"
+                  android:textColor="@color/text_color"
+                  android:textSize="@dimen/text_size"
+                  android:layout_gravity="left"
+                  android:layout_marginLeft="60dp"
+                  android:layout_marginBottom="20dp"
+                  android:text="@string/scissors"/>
+    </LinearLayout>
+    <FrameLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="@dimen/margin_left"
+            android:layout_marginRight="@dimen/margin_right"
+            android:layout_marginTop="10dp"
+            android:layout_marginBottom="10dp"
+            android:layout_gravity="center_horizontal|center_vertical">
+        <RelativeLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:id="@+id/shoot_display_group">
+            <TextView android:id="@+id/shoot"
+                      android:layout_height="wrap_content"
+                      android:layout_width="wrap_content"
+                      android:layout_gravity="left"
+                      android:textColor="@color/text_color"
+                      android:textSize="@dimen/text_size"
+                      android:text="@string/shoot"
+                      android:layout_alignParentLeft="true"
+                      android:layout_centerVertical="true" />
+            <ViewFlipper
+                    android:layout_width="@dimen/image_width"
+                    android:layout_height="@dimen/image_height"
+                    android:id="@+id/rps_flipper"
+                    android:layout_alignParentLeft="false"
+                    android:layout_alignParentRight="true"
+                    android:layout_centerVertical="true"
+                    android:layout_alignParentBottom="false"
+                    android:flipInterval="150"
+                    android:autoStart="true">
+                <ImageView
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:id="@+id/flipper_view1"
+                        android:scaleType="fitCenter"
+                        android:src="@drawable/right_rock"/>
+                <ImageView
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:id="@+id/flipper_view2"
+                        android:scaleType="fitCenter"
+                        android:src="@drawable/right_paper"/>
+                <ImageView
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:id="@+id/flipper_view3"
+                        android:scaleType="fitCenter"
+                        android:src="@drawable/right_scissors"/>
+            </ViewFlipper>
+        </RelativeLayout>
+        <RelativeLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:id="@+id/result_display_group">
+            <ImageView
+                    android:layout_width="@dimen/image_width"
+                    android:layout_height="@dimen/image_height"
+                    android:id="@+id/player_choice"
+                    android:scaleType="fitCenter"
+                    android:layout_alignParentLeft="true"
+                    android:layout_centerVertical="true"
+                    android:src="@drawable/right_paper"/>
+            <TextView android:id="@+id/who_won"
+                      android:layout_height="wrap_content"
+                      android:layout_width="wrap_content"
+                      android:layout_gravity="left"
+                      android:textColor="@color/text_color"
+                      android:textSize="@dimen/text_size_small"
+                      android:text=""
+                      android:layout_centerHorizontal="true"
+                      android:layout_centerVertical="true" />
+            <ImageView
+                    android:layout_width="@dimen/image_width"
+                    android:layout_height="@dimen/image_height"
+                    android:id="@+id/computer_choice"
+                    android:scaleType="fitCenter"
+                    android:layout_alignParentRight="true"
+                    android:layout_centerVertical="true"
+                    android:src="@drawable/right_rock"/>
+        </RelativeLayout>
+    </FrameLayout>
+
+    <FrameLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="@dimen/margin_left"
+            android:layout_marginRight="@dimen/margin_right"
+            android:layout_marginTop="10dp"
+            android:layout_marginBottom="10dp"
+            android:layout_gravity="center_horizontal|center_vertical">
+        <RelativeLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:id="@+id/player_choice_display_group">
+            <ImageButton
+                    android:layout_width="@dimen/image_width"
+                    android:layout_height="@dimen/image_height"
+                    android:id="@+id/player_rock"
+                    android:scaleType="fitCenter"
+                    android:layout_alignParentLeft="true"
+                    android:layout_centerVertical="true"
+                    android:background="@drawable/left_rock" />
+            <ImageButton
+                    android:layout_width="@dimen/image_width"
+                    android:layout_height="@dimen/image_height"
+                    android:id="@+id/player_paper"
+                    android:scaleType="fitCenter"
+                    android:layout_centerHorizontal="true"
+                    android:layout_centerVertical="true"
+                    android:background="@drawable/left_paper" />
+            <ImageButton
+                    android:layout_width="@dimen/image_width"
+                    android:layout_height="@dimen/image_height"
+                    android:id="@+id/player_scissors"
+                    android:layout_alignParentRight="true"
+                    android:layout_centerVertical="true"
+                    android:background="@drawable/left_scissors" />
+        </RelativeLayout>
+        <Button android:id="@+id/again_button"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center"
+                android:text="@string/again"
+                android:background="@drawable/icon_border"
+                style="@style/again_button_style" />
+    </FrameLayout>
+
+    <RelativeLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="@dimen/margin_left"
+            android:layout_marginRight="@dimen/margin_right"
+            android:layout_marginTop="10dp"
+            android:layout_marginBottom="10dp">
+        <TextView android:id="@+id/stats"
+                  android:layout_height="wrap_content"
+                  android:layout_width="wrap_content"
+                  android:layout_gravity="left"
+                  android:textColor="#000"
+                  android:textSize="20sp"
+                  android:layout_alignParentLeft="true"
+                  android:layout_centerVertical="true" />
+
+        <ImageButton
+                android:layout_gravity="right"
+                android:gravity="right"
+                android:layout_width="50dp"
+                android:layout_height="50dp"
+                android:layout_alignParentRight="true"
+                android:layout_centerVertical="true"
+                android:id="@+id/facebook_button"
+                android:background="@drawable/fb_logo" />
+    </RelativeLayout>
+
+</LinearLayout>
diff --git a/samples/RPSSample/res/layout/usersettings_fragment.xml b/samples/RPSSample/res/layout/usersettings_fragment.xml
new file mode 100644
index 000000000..3e9bd7cd4
--- /dev/null
+++ b/samples/RPSSample/res/layout/usersettings_fragment.xml
@@ -0,0 +1,63 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<ScrollView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:loginView="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@drawable/usersettings_fragment_background_gradient" >
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical">
+
+        <ImageView
+            android:id="@+id/usersettings_fragment_logo_image"
+            android:layout_width="193dp"
+            android:layout_height="44dp"
+            android:layout_gravity="center_horizontal"
+            android:src="@drawable/usersettings_facebook_logo"
+            android:layout_marginTop="35dp"
+            android:contentDescription="@string/usersettings_fragment_logo_content_description"/>
+
+        <TextView
+            android:id="@+id/usersettings_fragment_profile_name"
+            android:layout_width="match_parent"
+            android:layout_height="100dp"
+            android:lines="1"
+            android:textSize="16sp"
+            android:textStyle="bold"
+            android:layout_marginTop="35dp"
+            android:gravity="center"/>
+    
+        <com.facebook.login.widget.LoginButton
+            android:id="@+id/usersettings_fragment_login_button"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:layout_marginTop="35dp"
+            android:layout_marginBottom="35dp"
+            loginView:com_facebook_login_text="@string/usersettings_fragment_log_in_button"
+            style="@style/com_facebook_loginview_silver_style" />
+    
+    </LinearLayout>
+</ScrollView>
diff --git a/samples/RPSSample/res/values/strings.xml b/samples/RPSSample/res/values/strings.xml
new file mode 100644
index 000000000..51acce981
--- /dev/null
+++ b/samples/RPSSample/res/values/strings.xml
@@ -0,0 +1,69 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <string name="app_name">RPSSample</string>
+    <string name="facebook_app_name">Rock Paper Scissors SDK Sample</string>
+    <string name="app_id">157578437735213</string>
+    <string name="fb_login_protocol_scheme">fb157578437735213</string>
+    <string name="rock">Rock</string>
+    <string name="paper">Paper</string>
+    <string name="scissors">Scissors</string>
+    <string name="shoot">Shoot!</string>
+    <string name="win">Win!</string>
+    <string name="loss">Loss</string>
+    <string name="tie">Tie</string>
+    <string name="again">Again!</string>
+    <string name="play">Play!</string>
+    <string name="result_won">won</string>
+    <string name="result_lost">lost</string>
+    <string name="result_tied">tied</string>
+    <string name="share_on_facebook">Share on Facebook</string>
+    <string name="send_with_messenger">Send with Messenger</string>
+    <string name="check_settings">Check Facebook Settings</string>
+    <string name="friends_using_rps">Friends Rockin\' RPS</string>
+    <string name="friend_activity">Friend\'s Activity</string>
+    <string name="invite_friends">Invite Friends</string>
+    <string name="challenge_friends">Challenge Friends</string>
+    <string name="challenge_dialog_title">Challenge a Friend</string>
+    <string name="challenge_dialog_message">Please come play RPS with me!</string>
+    <string name="stats_format">W = %1$d  L = %2$d  T = %3$d</string>
+    <string name="action_display_format">%1$s vs %2$s</string>
+    <string name="feature_requires_login_title">Social Features Disabled</string>
+    <string name="feature_requires_login_message">
+        You have not logged in with Facebook.
+        Please use the menu and check your Facebook settings.
+    </string>
+    <string name="share_with_friends_title">Share on Facebook</string>
+    <string name="share_with_friends_message">Share game activity with friends?</string>
+    <string name="share_with_friends_yes">Yes</string>
+    <string name="share_with_friends_no">Maybe Later</string>
+    <string name="error_ok_button">OK</string>
+    <string name="native_share_error">Native sharing requires the Facebook for Android
+        application.</string>
+    <string name="appinvite_error">Cannot present App Invite Dialog.</string>
+    <string name="error_dialog_title">Error!</string>
+    <string name="login_error">An error occurred during login. Please try again.</string>
+    <string name="usersettings_fragment_log_in_button">Log in&#8230;</string>
+    <string name="usersettings_fragment_logged_in">Logged in</string>
+    <string name="usersettings_fragment_not_logged_in">Not logged in</string>
+    <string name="usersettings_fragment_logo_content_description">Facebook Logo</string>
+</resources>
diff --git a/samples/RPSSample/res/values/styles.xml b/samples/RPSSample/res/values/styles.xml
new file mode 100644
index 000000000..278bc4ae6
--- /dev/null
+++ b/samples/RPSSample/res/values/styles.xml
@@ -0,0 +1,48 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources xmlns:android="http://schemas.android.com/apk/res/android">
+    <color name="facebook_blue">#3B5998</color>
+    
+    <color name="text_color">#303040</color>
+    <dimen name="text_size">50sp</dimen>
+    <dimen name="text_size_small">40sp</dimen>
+    <dimen name="margin_left">20dp</dimen>
+    <dimen name="margin_right">20dp</dimen>
+    
+    <dimen name="image_height">80dp</dimen>
+    <dimen name="image_width">80dp</dimen>
+
+    <style name="again_button_style" parent="@android:style/Widget.Button">
+        <item name="android:width">200dp</item>
+        <item name="android:height">75dp</item>
+        <item name="android:textSize">@dimen/text_size</item>
+        <item name="android:textColor">@color/text_color</item>
+        <item name="android:gravity">center</item>
+    </style>
+
+    <color name="usersettings_fragment_connected_text_color">#FFFFFF</color>
+    <color name="usersettings_fragment_connected_shadow_color">#000000</color>
+    <color name="usersettings_fragment_not_connected_text_color">#A6AED7</color>
+    <dimen name="usersettings_fragment_profile_picture_width">64dp</dimen>
+    <dimen name="usersettings_fragment_profile_picture_height">64dp</dimen>
+
+</resources>
diff --git a/samples/RPSSample/src/com/example/rps/CommonObjects.java b/samples/RPSSample/src/com/example/rps/CommonObjects.java
new file mode 100644
index 000000000..d78770cd8
--- /dev/null
+++ b/samples/RPSSample/src/com/example/rps/CommonObjects.java
@@ -0,0 +1,31 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+
+package com.example.rps;
+
+public class CommonObjects {
+    public static final String BUILT_IN_OPEN_GRAPH_OBJECTS[] = {
+            "672839339475385", // rock
+            "296430467206197", // paper
+            "524651207660361"  // scissors
+    };
+}
+
diff --git a/samples/RPSSample/src/com/example/rps/ContentFragment.java b/samples/RPSSample/src/com/example/rps/ContentFragment.java
new file mode 100644
index 000000000..9dac9d898
--- /dev/null
+++ b/samples/RPSSample/src/com/example/rps/ContentFragment.java
@@ -0,0 +1,60 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.rps;
+
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+public class ContentFragment extends Fragment {
+    public static final String CONTENT_INDEX_KEY = "content";
+
+    private TextView title;
+    private ImageView image;
+    private Button playButton;
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        View view = inflater.inflate(R.layout.content_fragment, container, false);
+        title = (TextView) view.findViewById(R.id.content_title);
+        image = (ImageView) view.findViewById(R.id.content_image);
+        playButton = (Button) view.findViewById(R.id.content_play_button);
+
+        playButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                MainActivity activity = (MainActivity) getActivity();
+                activity.showFragment(MainActivity.RPS, false);
+            }
+        });
+        return view;
+    }
+
+    public void setContentIndex(int index) {
+        title.setText(RpsGameUtils.STRINGS_TITLES[index]);
+        image.setImageResource(RpsGameUtils.DRAWABLES_HUMAN[index]);
+    }
+}
diff --git a/samples/RPSSample/src/com/example/rps/MainActivity.java b/samples/RPSSample/src/com/example/rps/MainActivity.java
new file mode 100644
index 000000000..d87c786e5
--- /dev/null
+++ b/samples/RPSSample/src/com/example/rps/MainActivity.java
@@ -0,0 +1,269 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.rps;
+
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentActivity;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.app.FragmentTransaction;
+import android.util.Log;
+import android.view.Menu;
+import android.view.MenuItem;
+
+import bolts.AppLinks;
+import com.facebook.*;
+import com.facebook.appevents.AppEventsLogger;
+import com.facebook.share.model.GameRequestContent;
+import com.facebook.share.widget.GameRequestDialog;
+
+import static com.example.rps.RpsGameUtils.INVALID_CHOICE;
+
+public class MainActivity extends FragmentActivity {
+    private static final String TAG = "MainActivity";
+
+    static final int RPS = 0;
+    static final int SETTINGS = 1;
+    static final int CONTENT = 2;
+    static final int FRAGMENT_COUNT = CONTENT +1;
+
+    private Fragment[] fragments = new Fragment[FRAGMENT_COUNT];
+    private MenuItem settings;
+    private MenuItem challenge;
+    private MenuItem share;
+    private MenuItem message;
+    private MenuItem invite;
+    private boolean isResumed = false;
+    private boolean hasNativeLink = false;
+    private CallbackManager callbackManager;
+    private GameRequestDialog gameRequestDialog;
+
+    private AccessTokenTracker accessTokenTracker;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        accessTokenTracker = new AccessTokenTracker() {
+            @Override
+            protected void onCurrentAccessTokenChanged(AccessToken oldAccessToken,
+                                                       AccessToken currentAccessToken) {
+                if (isResumed) {
+                    if (currentAccessToken == null) {
+                        showFragment(RPS, false);
+                    }
+                }
+            }
+        };
+
+        setContentView(R.layout.main);
+
+        FragmentManager fm = getSupportFragmentManager();
+        fragments[RPS] = fm.findFragmentById(R.id.rps_fragment);
+        fragments[SETTINGS] = fm.findFragmentById(R.id.settings_fragment);
+        fragments[CONTENT] = fm.findFragmentById(R.id.content_fragment);
+
+        FragmentTransaction transaction = fm.beginTransaction();
+        for(int i = 0; i < fragments.length; i++) {
+            transaction.hide(fragments[i]);
+        }
+        transaction.commit();
+
+        hasNativeLink = handleNativeLink();
+
+        gameRequestDialog = new GameRequestDialog(this);
+        callbackManager = CallbackManager.Factory.create();
+        gameRequestDialog.registerCallback(
+                callbackManager,
+                new FacebookCallback<GameRequestDialog.Result>() {
+                    @Override
+                    public void onCancel() {
+                        Log.d(TAG, "Canceled");
+                    }
+
+                    @Override
+                    public void onError(FacebookException error) {
+                        Log.d(TAG, String.format("Error: %s", error.toString()));
+                    }
+
+                    @Override
+                    public void onSuccess(GameRequestDialog.Result result) {
+                        Log.d(TAG, "Success!");
+                        Log.d(TAG, "Request id: " + result.getRequestId());
+                        Log.d(TAG, "Recipients:");
+                        for (String recipient : result.getRequestRecipients()) {
+                            Log.d(TAG, recipient);
+                        }
+                    }
+                });
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        isResumed = true;
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        isResumed = false;
+    }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        callbackManager.onActivityResult(requestCode, resultCode, data);
+        super.onActivityResult(requestCode, resultCode, data);
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        accessTokenTracker.stopTracking();
+    }
+
+    @Override
+    protected void onResumeFragments() {
+        super.onResumeFragments();
+
+        if (hasNativeLink) {
+            showFragment(CONTENT, false);
+            hasNativeLink = false;
+        } else {
+            showFragment(RPS, false);
+        }
+    }
+
+    @Override
+    public boolean onPrepareOptionsMenu(Menu menu) {
+        // only add the menu when the selection fragment is showing
+        if (fragments[RPS].isVisible()) {
+            if (menu.size() == 0) {
+                share = menu.add(R.string.share_on_facebook);
+                message = menu.add(R.string.send_with_messenger);
+                challenge = menu.add(R.string.challenge_friends);
+                settings = menu.add(R.string.check_settings);
+                invite = menu.add(R.string.invite_friends);
+            }
+            return true;
+        } else {
+            menu.clear();
+            settings = null;
+        }
+        return false;
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        if (item.equals(settings)) {
+            showFragment(SETTINGS, true);
+            return true;
+        } else if (item.equals(challenge)) {
+            GameRequestContent newGameRequestContent = new GameRequestContent.Builder()
+                    .setTitle(getString(R.string.challenge_dialog_title))
+                    .setMessage(getString(R.string.challenge_dialog_message))
+                    .build();
+
+            gameRequestDialog.show(this, newGameRequestContent);
+
+            return true;
+        } else if (item.equals(share)) {
+            RpsFragment fragment = (RpsFragment) fragments[RPS];
+            fragment.shareUsingNativeDialog();
+            return true;
+        } else if (item.equals(message)) {
+            RpsFragment fragment = (RpsFragment) fragments[RPS];
+            fragment.shareUsingMessengerDialog();
+            return true;
+        } else if (item.equals(invite)) {
+            RpsFragment fragment = (RpsFragment) fragments[RPS];
+            fragment.presentAppInviteDialog();
+        }
+        return false;
+    }
+
+    private boolean handleNativeLink() {
+        AccessToken accessToken = AccessToken.getCurrentAccessToken();
+        if (accessToken == null) {
+            AccessToken.createFromNativeLinkingIntent(getIntent(),
+                    FacebookSdk.getApplicationId(), new AccessToken.AccessTokenCreationCallback(){
+
+                        @Override
+                        public void onSuccess(AccessToken token) {
+                            AccessToken.setCurrentAccessToken(token);
+                        }
+
+                        @Override
+                        public void onError(FacebookException error) {
+
+                        }
+                    });
+        }
+        // See if we have a deep link in addition.
+        int appLinkGesture = getAppLinkGesture(getIntent());
+        if (appLinkGesture != INVALID_CHOICE) {
+            ContentFragment fragment = (ContentFragment) fragments[CONTENT];
+            fragment.setContentIndex(appLinkGesture);
+            return true;
+        }
+        return false;
+    }
+
+    private int getAppLinkGesture(Intent intent) {
+      Uri targetURI = AppLinks.getTargetUrlFromInboundIntent(this, intent);
+      if (targetURI == null) {
+        return INVALID_CHOICE;
+      }
+      String gesture = targetURI.getQueryParameter("gesture");
+      if (gesture != null) {
+          if (gesture.equalsIgnoreCase(getString(R.string.rock))) {
+              return RpsGameUtils.ROCK;
+          } else if (gesture.equalsIgnoreCase(getString(R.string.paper))) {
+              return RpsGameUtils.PAPER;
+          } else if (gesture.equalsIgnoreCase(getString(R.string.scissors))) {
+              return RpsGameUtils.SCISSORS;
+          }
+      }
+      return INVALID_CHOICE;
+    }
+
+    void showFragment(int fragmentIndex, boolean addToBackStack) {
+        FragmentManager fm = getSupportFragmentManager();
+        FragmentTransaction transaction = fm.beginTransaction();
+        if (addToBackStack) {
+            transaction.addToBackStack(null);
+        } else {
+            int backStackSize = fm.getBackStackEntryCount();
+            for (int i = 0; i < backStackSize; i++) {
+                fm.popBackStack();
+            }
+        }
+        for (int i = 0; i < fragments.length; i++) {
+            if (i == fragmentIndex) {
+                transaction.show(fragments[i]);
+            } else {
+                transaction.hide(fragments[i]);
+            }
+        }
+        transaction.commit();
+    }
+}
diff --git a/samples/RPSSample/src/com/example/rps/OpenGraphConsts.java b/samples/RPSSample/src/com/example/rps/OpenGraphConsts.java
new file mode 100644
index 000000000..ba30e5ce3
--- /dev/null
+++ b/samples/RPSSample/src/com/example/rps/OpenGraphConsts.java
@@ -0,0 +1,30 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.rps;
+
+public class OpenGraphConsts {
+    public static final String THROW_ACTION_TYPE = "fb_sample_rps:throw";
+    public static final String THROW_ACTION_PREVIEW_PROPERTY_NAME = "fb_sample_rps:gesture";
+
+    public static final String GAME_OBJECT_TYPE = "fb_sample_rps:game";
+
+    public static final String PLAY_ACTION_TYPE = "fb_sample_rps:play";
+}
diff --git a/samples/RPSSample/src/com/example/rps/RpsApplication.java b/samples/RPSSample/src/com/example/rps/RpsApplication.java
new file mode 100644
index 000000000..f6443f830
--- /dev/null
+++ b/samples/RPSSample/src/com/example/rps/RpsApplication.java
@@ -0,0 +1,35 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.rps;
+
+import android.app.Application;
+
+import com.facebook.FacebookSdk;
+import com.facebook.appevents.AppEventsLogger;
+
+public class RpsApplication extends Application {
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        FacebookSdk.sdkInitialize(getApplicationContext());
+        AppEventsLogger.activateApp(this);
+    }
+}
diff --git a/samples/RPSSample/src/com/example/rps/RpsFragment.java b/samples/RPSSample/src/com/example/rps/RpsFragment.java
new file mode 100644
index 000000000..7fe141832
--- /dev/null
+++ b/samples/RPSSample/src/com/example/rps/RpsFragment.java
@@ -0,0 +1,629 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.rps;
+
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.drawable.BitmapDrawable;
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.support.v4.app.Fragment;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.*;
+
+import com.facebook.*;
+import com.facebook.login.DefaultAudience;
+import com.facebook.login.LoginManager;
+import com.facebook.login.LoginResult;
+import com.facebook.share.ShareApi;
+import com.facebook.share.Sharer;
+import com.facebook.share.model.ShareContent;
+import com.facebook.share.model.ShareLinkContent;
+import com.facebook.share.model.ShareOpenGraphAction;
+import com.facebook.share.model.ShareOpenGraphContent;
+import com.facebook.share.model.ShareOpenGraphObject;
+import com.facebook.share.model.SharePhoto;
+import com.facebook.share.model.AppInviteContent;
+import com.facebook.share.widget.AppInviteDialog;
+import com.facebook.share.widget.MessageDialog;
+import com.facebook.share.widget.ShareDialog;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Random;
+
+import static com.example.rps.RpsGameUtils.*;
+
+public class RpsFragment extends Fragment {
+
+    private static final String SHARE_GAME_LINK = "https://developers.facebook.com/docs/android";
+    private static final String SHARE_GAME_NAME = "Rock, Papers, Scissors Sample Application";
+    private static final String DEFAULT_GAME_OBJECT_TITLE =
+            "an awesome game of Rock, Paper, Scissors";
+    private static final String WIN_KEY = "wins";
+    private static final String LOSS_KEY = "losses";
+    private static final String TIE_KEY = "ties";
+    private static final String PLAYER_CHOICE_KEY = "player_choice";
+    private static final String COMPUTER_CHOICE_KEY = "computer_choice";
+    private static final String STATE_KEY = "state";
+    private static final String RESULT_KEY = "result";
+    private static final String PENDING_PUBLISH_KEY = "pending_publish";
+    private static final String IMPLICIT_PUBLISH_KEY = "implicitly_publish";
+    private static final String ADDITIONAL_PERMISSIONS = "publish_actions";
+    private static final int INITIAL_DELAY_MILLIS = 500;
+    private static final int DEFAULT_DELAY_MILLIS = 1000;
+    private static final String TAG = RpsFragment.class.getName();
+
+    private static String[] PHOTO_URIS = {null, null, null};
+
+    private TextView[] gestureTextViews = new TextView[3];
+    private TextView shootTextView;
+    private ImageView playerChoiceView;
+    private ImageView computerChoiceView;
+    private TextView resultTextView;
+    private ViewGroup shootGroup;
+    private ViewGroup resultGroup;
+    private ViewGroup playerChoiceGroup;
+    private Button againButton;
+    private ImageButton[] gestureImages = new ImageButton[3];
+    private ImageButton fbButton;
+    private TextView statsTextView;
+    private ViewFlipper rpsFlipper;
+
+    private int wins = 0;
+    private int losses = 0;
+    private int ties = 0;
+    private int playerChoice = INVALID_CHOICE;
+    private int computerChoice = INVALID_CHOICE;
+    private RpsState currentState = RpsState.INIT;
+    private RpsResult result = RpsResult.INVALID;
+    private InitHandler handler = new InitHandler();
+    private Random random = new Random(System.currentTimeMillis());
+    private boolean pendingPublish;
+    private boolean shouldImplicitlyPublish = true;
+    private CallbackManager callbackManager;
+    private ShareDialog shareDialog;
+    private MessageDialog messageDialog;
+    private AppInviteDialog appInviteDialog;
+
+    private DialogInterface.OnClickListener canPublishClickListener = new DialogInterface.OnClickListener() {
+        @Override
+        public void onClick(DialogInterface dialogInterface, int i) {
+            if (AccessToken.getCurrentAccessToken() != null) {
+                // if they choose to publish, then we request for publish permissions
+                shouldImplicitlyPublish = true;
+                pendingPublish = true;
+
+                LoginManager.getInstance()
+                        .setDefaultAudience(DefaultAudience.FRIENDS)
+                        .logInWithPublishPermissions(
+                                RpsFragment.this,
+                                Arrays.asList(ADDITIONAL_PERMISSIONS));
+            }
+        }
+    };
+
+    private DialogInterface.OnClickListener dontPublishClickListener = new DialogInterface.OnClickListener() {
+        @Override
+        public void onClick(DialogInterface dialogInterface, int i) {
+            // if they choose not to publish, then we save that choice, and don't prompt them
+            // until they restart the app
+            pendingPublish = false;
+            shouldImplicitlyPublish = false;
+        }
+    };
+
+    private class InitHandler extends Handler {
+        @Override
+        public void handleMessage(Message msg) {
+            if (!isResumed()) {
+                // if we're not in between onResume and onPause, don't do animation transitions
+                return;
+            }
+            switch (msg.what) {
+                case ROCK:
+                    showViews(gestureTextViews[ROCK], gestureImages[ROCK]);
+                    sendNextMessage(PAPER);
+                    break;
+                case PAPER:
+                    showViews(gestureTextViews[PAPER], gestureImages[PAPER]);
+                    sendNextMessage(SCISSORS);
+                    break;
+                case SCISSORS:
+                    showViews(gestureTextViews[SCISSORS], gestureImages[SCISSORS]);
+                    sendNextMessage(SHOOT);
+                    break;
+                case SHOOT:
+                    showViews(shootTextView);
+                    switchState(RpsState.PLAYING, false);
+                    break;
+                default:
+                    Log.e(TAG, "Unexpected message received: " + msg.toString());
+                    break;
+            }
+        }
+
+        private void sendNextMessage(int what) {
+            Message newMsg = new Message();
+            newMsg.what = what;
+            sendMessageDelayed(newMsg, DEFAULT_DELAY_MILLIS);
+        }
+    }
+
+    private void switchState(RpsState newState, boolean isOnResume) {
+        if (!isResumed()) {
+            // if we're not in between onResume and onPause, don't transition states
+            return;
+        }
+        switch (newState) {
+            case INIT:
+                playerChoice = INVALID_CHOICE;
+                computerChoice = INVALID_CHOICE;
+                result = RpsResult.INVALID;
+                showViews(shootGroup, playerChoiceGroup, rpsFlipper);
+                rpsFlipper.startFlipping();
+                hideViews(gestureImages);
+                hideViews(gestureTextViews);
+                hideViews(resultGroup, shootTextView, againButton);
+                enableViews(false, gestureImages);
+                enableViews(false, againButton);
+                Message initMessage = new Message();
+                initMessage.what = ROCK;
+                handler.sendMessageDelayed(initMessage, INITIAL_DELAY_MILLIS);
+                break;
+            case PLAYING:
+                enableViews(true, gestureImages);
+                showViews(rpsFlipper);
+                rpsFlipper.startFlipping();
+                break;
+            case RESULT:
+                hideViews(shootGroup, playerChoiceGroup);
+                playerChoiceView.setImageResource(DRAWABLES_HUMAN[playerChoice]);
+                computerChoiceView.setImageResource(DRAWABLES_COMPUTER[computerChoice]);
+                resultTextView.setText(result.getStringId());
+                showViews(resultGroup, againButton);
+                enableViews(true, againButton);
+                if (!isOnResume) {
+                    // don't publish if we're switching states because onResumed is being called
+                    publishResult();
+                }
+                break;
+            default:
+                Log.e(TAG, "Unexpected state reached: " + newState.toString());
+                break;
+        }
+
+        String statsFormat = getResources().getString(R.string.stats_format);
+        statsTextView.setText(String.format(statsFormat, wins, losses, ties));
+
+        currentState = newState;
+    }
+
+    private void hideViews(View... views) {
+        for (View view : views) {
+            view.setVisibility(View.INVISIBLE);
+        }
+    }
+
+    private void showViews(View... views) {
+        for (View view : views) {
+            view.setVisibility(View.VISIBLE);
+        }
+    }
+
+    private void enableViews(boolean enabled, View... views) {
+        for (View view : views) {
+            view.setEnabled(enabled);
+        }
+    }
+
+    private void playerPlayed(int choice) {
+        playerChoice = choice;
+        computerChoice = getComputerChoice();
+        result = RESULTS[playerChoice][computerChoice];
+        switch (result) {
+            case WIN:
+                wins++;
+                break;
+            case LOSS:
+                losses++;
+                break;
+            case TIE:
+                ties++;
+                break;
+            default:
+                Log.e(TAG, "Unexpected result: " + result.toString());
+                break;
+        }
+        switchState(RpsState.RESULT, false);
+    }
+
+    private int getComputerChoice() {
+        return random.nextInt(3);
+    }
+
+    private boolean canPublish() {
+        final AccessToken accessToken = AccessToken.getCurrentAccessToken();
+        if (accessToken != null) {
+            if (accessToken.getPermissions().contains(ADDITIONAL_PERMISSIONS)) {
+                // if we already have publish permissions, then go ahead and publish
+                return true;
+            } else {
+                // otherwise we ask the user if they'd like to publish to facebook
+                new AlertDialog.Builder(getActivity())
+                        .setTitle(R.string.share_with_friends_title)
+                        .setMessage(R.string.share_with_friends_message)
+                        .setPositiveButton(R.string.share_with_friends_yes, canPublishClickListener)
+                        .setNegativeButton(R.string.share_with_friends_no, dontPublishClickListener)
+                        .show();
+                return false;
+            }
+        }
+        return false;
+    }
+
+    private void showError(int messageId) {
+        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
+        builder.setTitle(R.string.error_dialog_title).
+                setMessage(messageId).
+                setPositiveButton(R.string.error_ok_button, null);
+        builder.show();
+    }
+
+    private void publishResult() {
+        if (shouldImplicitlyPublish && canPublish()) {
+            String photoUri = PHOTO_URIS[playerChoice];
+            SharePhoto.Builder sharePhotoBuilder = new SharePhoto.Builder();
+            if (photoUri == null) {
+                Bitmap bitmap = BitmapFactory.decodeResource(
+                        getResources(),
+                        DRAWABLES_HUMAN[playerChoice]);
+                sharePhotoBuilder.setBitmap(bitmap);
+            } else {
+                sharePhotoBuilder.setImageUrl(Uri.parse(photoUri));
+            }
+            sharePhotoBuilder.setUserGenerated(false);
+            final SharePhoto gesturePhoto = sharePhotoBuilder.build();
+
+            ShareOpenGraphObject gameObject = createGameObject(gesturePhoto);
+            ShareOpenGraphAction playAction = createPlayActionWithGame(gameObject);
+            ShareOpenGraphContent content = new ShareOpenGraphContent.Builder()
+                    .setAction(playAction)
+                    .setPreviewPropertyName("game")
+                    .build();
+
+            ShareApi.share(content, new FacebookCallback<Sharer.Result>() {
+                @Override
+                public void onSuccess(Sharer.Result result) {
+                    Log.i(TAG, "Posted OG Action with id: " +
+                            result.getPostId());
+                }
+
+                @Override
+                public void onCancel() {
+                    // This should not happen
+                }
+
+                @Override
+                public void onError(FacebookException error) {
+                    Log.e(TAG, "Play action creation failed: " + error.getMessage());
+                }
+            });
+        }
+    }
+
+    private ShareOpenGraphObject createGameObject(final SharePhoto gesturePhoto) {
+        return new ShareOpenGraphObject.Builder()
+                .putString("og:title", DEFAULT_GAME_OBJECT_TITLE)
+                .putString("og:type", "fb_sample_rps:game")
+                .putString("fb_sample_rps:player_gesture",
+                        CommonObjects.BUILT_IN_OPEN_GRAPH_OBJECTS[playerChoice])
+                .putString("fb_sample_rps:opponent_gesture",
+                        CommonObjects.BUILT_IN_OPEN_GRAPH_OBJECTS[computerChoice])
+                .putString("fb_sample_rps:result", getString(result.getResultStringId()))
+                .putPhotoArrayList("og:image", new ArrayList<SharePhoto>() {{
+                    add(gesturePhoto);
+                }})
+                .build();
+    }
+
+    private ShareOpenGraphAction createPlayActionWithGame(ShareOpenGraphObject game) {
+        return new ShareOpenGraphAction.Builder()
+                .setActionType(OpenGraphConsts.PLAY_ACTION_TYPE)
+                .putObject("game", game).build();
+    }
+
+    private String getBuiltInGesture(int choice) {
+        if (choice < 0 || choice >= CommonObjects.BUILT_IN_OPEN_GRAPH_OBJECTS.length) {
+            throw new IllegalArgumentException("Invalid choice");
+        }
+
+        return CommonObjects.BUILT_IN_OPEN_GRAPH_OBJECTS[choice];
+    }
+
+    private ShareOpenGraphAction getThrowAction() {
+        // The OG objects have their own bitmaps we could rely on, but in order to demonstrate
+        // attaching an in-memory bitmap (e.g., a game screencap) we'll send the bitmap explicitly
+        // ourselves.
+        ImageButton view = gestureImages[playerChoice];
+        BitmapDrawable drawable = (BitmapDrawable) view.getBackground();
+        final Bitmap bitmap = drawable.getBitmap();
+
+        return new ShareOpenGraphAction.Builder()
+                .setActionType(OpenGraphConsts.THROW_ACTION_TYPE)
+                .putString("fb_sample_rps:gesture", getBuiltInGesture(playerChoice))
+                .putString("fb_sample_rps:opposing_gesture", getBuiltInGesture(computerChoice))
+                .putPhotoArrayList("og:image", new ArrayList<SharePhoto>() {{
+                    add(new SharePhoto.Builder().setBitmap(bitmap).build());
+                }})
+                .build();
+    }
+
+    private ShareOpenGraphContent getThrowActionContent() {
+        return new ShareOpenGraphContent.Builder()
+                .setAction(getThrowAction())
+                .setPreviewPropertyName(OpenGraphConsts.THROW_ACTION_PREVIEW_PROPERTY_NAME)
+                .build();
+    }
+
+    private ShareLinkContent getLinkContent() {
+        return new ShareLinkContent.Builder()
+                .setContentTitle(SHARE_GAME_NAME)
+                .setContentUrl(Uri.parse(SHARE_GAME_LINK))
+                .build();
+    }
+
+    public void shareUsingNativeDialog() {
+        if (playerChoice == INVALID_CHOICE || computerChoice == INVALID_CHOICE) {
+            ShareContent content = getLinkContent();
+
+            // share the app
+            if (shareDialog.canShow(content, ShareDialog.Mode.NATIVE)) {
+                shareDialog.show(content, ShareDialog.Mode.NATIVE);
+            } else {
+                showError(R.string.native_share_error);
+            }
+        } else {
+            ShareContent content = getThrowActionContent();
+
+            if (shareDialog.canShow(content, ShareDialog.Mode.NATIVE)) {
+                shareDialog.show(content, ShareDialog.Mode.NATIVE);
+            } else {
+                showError(R.string.native_share_error);
+            }
+        }
+    }
+
+    public void shareUsingMessengerDialog() {
+        if (playerChoice == INVALID_CHOICE || computerChoice == INVALID_CHOICE) {
+            ShareContent content = getLinkContent();
+
+            // share the app
+            if (messageDialog.canShow(content)) {
+                messageDialog.show(content);
+            }
+        } else {
+            ShareContent content = getThrowActionContent();
+
+            if (messageDialog.canShow(content)) {
+                messageDialog.show(content);
+            }
+        }
+    }
+
+    public void presentAppInviteDialog() {
+        AppInviteContent content = new AppInviteContent.Builder()
+                .setApplinkUrl("http://hosting-rps.parseapp.com/applink.html")
+                .setPreviewImageUrl("http://hosting-rps.parseapp.com/rps-preview-image.png")
+                .build();
+        if (AppInviteDialog.canShow()) {
+            appInviteDialog.show(this, content);
+        } else {
+            showError(R.string.appinvite_error);
+        }
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater,
+                             ViewGroup container,
+                             Bundle savedInstanceState) {
+        super.onCreateView(inflater, container, savedInstanceState);
+        View view = inflater.inflate(R.layout.rps_fragment, container, false);
+
+        gestureTextViews[ROCK] = (TextView) view.findViewById(R.id.text_rock);
+        gestureTextViews[PAPER] = (TextView) view.findViewById(R.id.text_paper);
+        gestureTextViews[SCISSORS] = (TextView) view.findViewById(R.id.text_scissors);
+        shootTextView = (TextView) view.findViewById(R.id.shoot);
+        playerChoiceView = (ImageView) view.findViewById(R.id.player_choice);
+        computerChoiceView = (ImageView) view.findViewById(R.id.computer_choice);
+        resultTextView = (TextView) view.findViewById(R.id.who_won);
+        shootGroup = (ViewGroup) view.findViewById(R.id.shoot_display_group);
+        resultGroup = (ViewGroup) view.findViewById(R.id.result_display_group);
+        playerChoiceGroup = (ViewGroup) view.findViewById(R.id.player_choice_display_group);
+        againButton = (Button) view.findViewById(R.id.again_button);
+        gestureImages[ROCK] = (ImageButton) view.findViewById(R.id.player_rock);
+        gestureImages[PAPER] = (ImageButton) view.findViewById(R.id.player_paper);
+        gestureImages[SCISSORS] = (ImageButton) view.findViewById(R.id.player_scissors);
+        fbButton = (ImageButton) view.findViewById(R.id.facebook_button);
+        statsTextView = (TextView) view.findViewById(R.id.stats);
+        rpsFlipper = (ViewFlipper) view.findViewById(R.id.rps_flipper);
+
+        gestureImages[ROCK].setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                playerPlayed(ROCK);
+            }
+        });
+
+        gestureImages[PAPER].setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                playerPlayed(PAPER);
+            }
+        });
+
+        gestureImages[SCISSORS].setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                playerPlayed(SCISSORS);
+            }
+        });
+
+        againButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                switchState(RpsState.INIT, false);
+            }
+        });
+
+        fbButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                getActivity().openOptionsMenu();
+            }
+        });
+
+        return view;
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        if (savedInstanceState != null) {
+            wins = savedInstanceState.getInt(WIN_KEY);
+            losses = savedInstanceState.getInt(LOSS_KEY);
+            ties = savedInstanceState.getInt(TIE_KEY);
+            computerChoice = savedInstanceState.getInt(COMPUTER_CHOICE_KEY);
+            playerChoice = savedInstanceState.getInt(PLAYER_CHOICE_KEY);
+            currentState = (RpsState) savedInstanceState.getSerializable(STATE_KEY);
+            result = (RpsResult) savedInstanceState.getSerializable(RESULT_KEY);
+            pendingPublish = savedInstanceState.getBoolean(PENDING_PUBLISH_KEY);
+            shouldImplicitlyPublish = savedInstanceState.getBoolean(IMPLICIT_PUBLISH_KEY);
+        }
+        callbackManager = CallbackManager.Factory.create();
+        LoginManager.getInstance().registerCallback(
+                callbackManager,
+                new FacebookCallback<LoginResult>() {
+                    @Override
+                    public void onSuccess(LoginResult loginResult) {
+                        AccessToken accessToken = AccessToken.getCurrentAccessToken();
+                        if (accessToken.getPermissions().contains(ADDITIONAL_PERMISSIONS)) {
+                            publishResult();
+                        } else {
+                            handleError();
+                        }
+                    }
+
+                    @Override
+                    public void onCancel() {
+                        handleError();
+                    }
+
+                    @Override
+                    public void onError(FacebookException exception) {
+                        handleError();
+                    }
+
+                    private void handleError() {
+                        // this means the user did not grant us write permissions, so
+                        // we don't do implicit publishes
+                        shouldImplicitlyPublish = false;
+                        pendingPublish = false;
+                    }
+                }
+        );
+
+        FacebookCallback<Sharer.Result> callback =
+                new FacebookCallback<Sharer.Result>() {
+                    @Override
+                    public void onCancel() {
+                        Log.d(TAG, "Canceled");
+                    }
+
+                    @Override
+                    public void onError(FacebookException error) {
+                        Log.d(TAG, String.format("Error: %s", error.toString()));
+                    }
+
+                    @Override
+                    public void onSuccess(Sharer.Result result) {
+                        Log.d(TAG, "Success!");
+                    }
+                };
+        shareDialog = new ShareDialog(this);
+        shareDialog.registerCallback(callbackManager, callback);
+        messageDialog = new MessageDialog(this);
+        messageDialog.registerCallback(callbackManager, callback);
+
+        FacebookCallback<AppInviteDialog.Result> appInviteCallback =
+                new FacebookCallback<AppInviteDialog.Result>() {
+                    @Override
+                    public void onSuccess(AppInviteDialog.Result result) {
+                        Log.d(TAG, "Success!");
+                    }
+
+                    @Override
+                    public void onCancel() {
+                        Log.d(TAG, "Canceled");
+                    }
+
+                    @Override
+                    public void onError(FacebookException error) {
+                        Log.d(TAG, String.format("Error: %s", error.toString()));
+                    }
+                };
+        appInviteDialog = new AppInviteDialog(this);
+        appInviteDialog.registerCallback(callbackManager, appInviteCallback);
+    }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        callbackManager.onActivityResult(requestCode, resultCode, data);
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        switchState(currentState, true);
+    }
+
+    @Override
+    public void onSaveInstanceState(Bundle bundle) {
+        super.onSaveInstanceState(bundle);
+        bundle.putInt(WIN_KEY, wins);
+        bundle.putInt(LOSS_KEY, losses);
+        bundle.putInt(TIE_KEY, ties);
+        bundle.putInt(COMPUTER_CHOICE_KEY, computerChoice);
+        bundle.putInt(PLAYER_CHOICE_KEY, playerChoice);
+        bundle.putSerializable(STATE_KEY, currentState);
+        bundle.putSerializable(RESULT_KEY, result);
+        bundle.putBoolean(PENDING_PUBLISH_KEY, pendingPublish);
+        bundle.putBoolean(IMPLICIT_PUBLISH_KEY, shouldImplicitlyPublish);
+    }
+}
diff --git a/samples/RPSSample/src/com/example/rps/RpsGameUtils.java b/samples/RPSSample/src/com/example/rps/RpsGameUtils.java
new file mode 100644
index 000000000..db87462a1
--- /dev/null
+++ b/samples/RPSSample/src/com/example/rps/RpsGameUtils.java
@@ -0,0 +1,70 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.rps;
+
+public class RpsGameUtils {
+    public enum RpsState {
+        INIT,
+        PLAYING,
+        RESULT
+    };
+
+    public enum RpsResult {
+        WIN(R.string.win, R.string.result_won),
+        LOSS(R.string.loss, R.string.result_lost),
+        TIE(R.string.tie, R.string.result_tied),
+        INVALID(0, 0);
+
+        private int id;
+        private int resultId;
+
+        private RpsResult(int stringId, int resultStringId) {
+            id = stringId;
+            resultId = resultStringId;
+        }
+
+        public int getStringId() {
+            return id;
+        }
+
+        public int getResultStringId() {
+            return resultId;
+        }
+    };
+
+    public static final int ROCK = 0;
+    public static final int PAPER = 1;
+    public static final int SCISSORS = 2;
+    public static final int INVALID_CHOICE = -1;
+    public static final int SHOOT = 100;
+    public static final int[] DRAWABLES_HUMAN =
+            { R.drawable.left_rock, R.drawable.left_paper, R.drawable.left_scissors };
+    public static final int[] DRAWABLES_COMPUTER =
+            { R.drawable.right_rock, R.drawable.right_paper, R.drawable.right_scissors };
+    public static final int[] STRINGS_TITLES =
+            { R.string.rock, R.string.paper, R.string.scissors };
+    public static final RpsResult[][] RESULTS =
+            {
+                    {RpsResult.TIE, RpsResult.LOSS, RpsResult.WIN},
+                    {RpsResult.WIN, RpsResult.TIE, RpsResult.LOSS},
+                    {RpsResult.LOSS, RpsResult.WIN, RpsResult.TIE}
+            };
+}
diff --git a/samples/RPSSample/src/com/example/rps/usersettings/UserSettingsFragment.java b/samples/RPSSample/src/com/example/rps/usersettings/UserSettingsFragment.java
new file mode 100644
index 000000000..4b1bab031
--- /dev/null
+++ b/samples/RPSSample/src/com/example/rps/usersettings/UserSettingsFragment.java
@@ -0,0 +1,245 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.rps.usersettings;
+
+import android.content.Intent;
+import android.graphics.Bitmap;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.text.TextUtils;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import com.facebook.AccessToken;
+import com.facebook.AccessTokenTracker;
+import com.facebook.CallbackManager;
+import com.facebook.GraphRequest;
+import com.facebook.GraphResponse;
+import com.facebook.internal.ImageDownloader;
+import com.facebook.internal.ImageRequest;
+import com.facebook.internal.ImageResponse;
+import com.example.rps.R;
+import com.facebook.login.widget.LoginButton;
+
+import org.json.JSONObject;
+
+/**
+ * A Fragment that displays a Login/Logout button as well as the user's
+ * profile picture and name when logged in.
+ */
+public final class UserSettingsFragment extends Fragment {
+
+    private static final String NAME = "name";
+    private static final String ID = "id";
+    private static final String PICTURE = "picture";
+    private static final String FIELDS = "fields";
+
+    private static final String REQUEST_FIELDS =
+            TextUtils.join(",", new String[] {ID, NAME, PICTURE});
+
+    private AccessTokenTracker accessTokenTracker;
+    private CallbackManager callbackManager;
+
+    private LoginButton loginButton;
+    private TextView connectedStateLabel;
+    private JSONObject user;
+    private Drawable userProfilePic;
+    private String userProfilePicID;
+
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+        accessTokenTracker = new AccessTokenTracker() {
+            @Override
+            protected void onCurrentAccessTokenChanged(AccessToken oldAccessToken,
+                                                       AccessToken currentAccessToken) {
+                fetchUserInfo();
+                updateUI();
+
+            }
+        };
+        callbackManager = CallbackManager.Factory.create();
+    }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        callbackManager.onActivityResult(requestCode, resultCode, data);
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        accessTokenTracker.stopTracking();
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        View view = inflater.inflate(R.layout.usersettings_fragment, container, false);
+        loginButton = (LoginButton) view.findViewById(R.id.usersettings_fragment_login_button);
+        loginButton.setFragment(this);
+
+        connectedStateLabel = (TextView) view.findViewById(R.id.usersettings_fragment_profile_name);
+
+        // if no background is set for some reason, then default to Facebook blue
+        if (view.getBackground() == null) {
+            view.setBackgroundColor(getResources().getColor(R.color.com_facebook_blue));
+        } else {
+            view.getBackground().setDither(true);
+        }
+        return view;
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setRetainInstance(true);
+    }
+
+    /**
+     * @throws com.facebook.FacebookException if errors occur during the loading of user information
+     */
+    @Override
+    public void onResume() {
+        super.onResume();
+        fetchUserInfo();
+        updateUI();
+    }
+
+    private void fetchUserInfo() {
+        final AccessToken accessToken = AccessToken.getCurrentAccessToken();
+        if (accessToken != null) {
+            GraphRequest request = GraphRequest.newMeRequest(
+                    accessToken, new GraphRequest.GraphJSONObjectCallback() {
+                        @Override
+                        public void onCompleted(JSONObject me, GraphResponse response) {
+                            user = me;
+                            updateUI();
+                        }
+                    });
+            Bundle parameters = new Bundle();
+            parameters.putString(FIELDS, REQUEST_FIELDS);
+            request.setParameters(parameters);
+            GraphRequest.executeBatchAsync(request);
+        } else {
+            user = null;
+        }
+    }
+
+    private void updateUI() {
+        if (!isAdded()) {
+            return;
+        }
+        if (AccessToken.getCurrentAccessToken() != null) {
+            connectedStateLabel.setTextColor(getResources().getColor(
+                    R.color.usersettings_fragment_connected_text_color));
+            connectedStateLabel.setShadowLayer(1f, 0f, -1f,
+                    getResources().getColor(
+                            R.color.usersettings_fragment_connected_shadow_color));
+
+            if (user != null) {
+                ImageRequest request = getImageRequest();
+                if (request != null) {
+                    Uri requestUri = request.getImageUri();
+                    // Do we already have the right picture? If so, leave it alone.
+                    if (!requestUri.equals(connectedStateLabel.getTag())) {
+                        if (user.optString("id").equals(userProfilePicID)) {
+                            connectedStateLabel.setCompoundDrawables(
+                                    null, userProfilePic, null, null);
+                            connectedStateLabel.setTag(requestUri);
+                        } else {
+                            ImageDownloader.downloadAsync(request);
+                        }
+                    }
+                }
+                connectedStateLabel.setText(user.optString("name"));
+            } else {
+                connectedStateLabel.setText(getResources().getString(
+                        R.string.usersettings_fragment_logged_in));
+                Drawable noProfilePic = getResources().getDrawable(
+                        R.drawable.profile_default_icon);
+                noProfilePic.setBounds(0, 0,
+                        getResources().getDimensionPixelSize(
+                                R.dimen.usersettings_fragment_profile_picture_width),
+                        getResources().getDimensionPixelSize(
+                                R.dimen.usersettings_fragment_profile_picture_height));
+                connectedStateLabel.setCompoundDrawables(null, noProfilePic, null, null);
+            }
+        } else {
+            int textColor = getResources().getColor(
+                    R.color.usersettings_fragment_not_connected_text_color);
+            connectedStateLabel.setTextColor(textColor);
+            connectedStateLabel.setShadowLayer(0f, 0f, 0f, textColor);
+            connectedStateLabel.setText(getResources().getString(
+                    R.string.usersettings_fragment_not_logged_in));
+            connectedStateLabel.setCompoundDrawables(null, null, null, null);
+            connectedStateLabel.setTag(null);
+        }
+    }
+
+    private ImageRequest getImageRequest() {
+        ImageRequest request = null;
+        ImageRequest.Builder requestBuilder = new ImageRequest.Builder(
+                getActivity(),
+                ImageRequest.getProfilePictureUri(
+                        user.optString("id"),
+                        getResources().getDimensionPixelSize(
+                                R.dimen.usersettings_fragment_profile_picture_width),
+                        getResources().getDimensionPixelSize(
+                                R.dimen.usersettings_fragment_profile_picture_height)));
+
+        request = requestBuilder.setCallerTag(this)
+                .setCallback(
+                        new ImageRequest.Callback() {
+                            @Override
+                            public void onCompleted(ImageResponse response) {
+                                processImageResponse(user.optString("id"), response);
+                            }
+                        })
+                .build();
+        return request;
+    }
+
+    private void processImageResponse(String id, ImageResponse response) {
+        if (response != null) {
+            Bitmap bitmap = response.getBitmap();
+            if (bitmap != null) {
+                BitmapDrawable drawable = new BitmapDrawable(
+                        UserSettingsFragment.this.getResources(), bitmap);
+                drawable.setBounds(0, 0,
+                        getResources().getDimensionPixelSize(
+                                R.dimen.usersettings_fragment_profile_picture_width),
+                        getResources().getDimensionPixelSize(
+                                R.dimen.usersettings_fragment_profile_picture_height));
+                userProfilePic = drawable;
+                userProfilePicID = id;
+                connectedStateLabel.setCompoundDrawables(null, drawable, null, null);
+                connectedStateLabel.setTag(response.getRequest().getImageUri());
+            }
+        }
+    }
+}
diff --git a/samples/Scrumptious/AndroidManifest.xml b/samples/Scrumptious/AndroidManifest.xml
new file mode 100644
index 000000000..a06051789
--- /dev/null
+++ b/samples/Scrumptious/AndroidManifest.xml
@@ -0,0 +1,80 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.example.scrumptious"
+    android:versionCode="1"
+    android:versionName="1.0">
+
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
+    <uses-permission android:name="android.permission.CAMERA" />
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+
+    <uses-feature android:name="android.hardware.camera" />
+    <uses-feature android:name="android.hardware.camera.autofocus" />
+
+    <application
+        android:name="com.example.scrumptious.ScrumptiousApplication"
+        android:icon="@drawable/add_food"
+        android:label="@string/app_name">
+        <activity
+            android:name="com.example.scrumptious.MainActivity"
+            android:label="@string/app_name"
+            android:theme="@style/Theme.Scrumptious"
+            android:windowSoftInputMode="adjustResize">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+        <activity
+            android:name="com.example.scrumptious.PickerActivity"
+            android:label="@string/app_name" />
+        <activity
+            android:name="com.facebook.FacebookActivity"
+            android:label="@string/app_name"/>
+        <activity
+            android:name="com.facebook.CustomTabActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+                <data android:scheme="@string/fb_login_protocol_scheme" />
+            </intent-filter>
+        </activity>
+
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationId"
+            android:value="@string/app_id" />
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationName"
+            android:value="@string/app_name" />
+        <meta-data
+            android:name="com.facebook.sdk.WebDialogTheme"
+            android:resource="@android:style/Theme.Translucent.NoTitleBar" />
+
+        <provider
+            android:name="com.facebook.FacebookContentProvider"
+            android:authorities="com.facebook.app.FacebookContentProvider233936543368280"
+            android:exported="true" />
+    </application>
+</manifest> 
diff --git a/samples/Scrumptious/BUCK b/samples/Scrumptious/BUCK
new file mode 100644
index 000000000..61f0ab4c0
--- /dev/null
+++ b/samples/Scrumptious/BUCK
@@ -0,0 +1,35 @@
+android_resource(
+  name = 'res',
+  res = 'res',
+  package = 'com.example.scrumptious',
+  deps = [
+    '//facebook:android-sdk',
+  ],
+)
+
+android_library(
+  name = 'lib',
+  srcs = glob(['src/**/*.java']),
+  deps = [
+    ':res',
+    '//facebook:android-sdk',
+    '//libs:android-support-v4',
+  ],
+)
+
+android_binary(
+  name = 'app',
+  manifest = 'AndroidManifest.xml',
+  keystore = '//keystores:debug',
+  package_type = 'debug',
+  deps = [
+    ':lib',
+    '//facebook:android-sdk',
+    '//libs:android-support-v4',
+  ],
+)
+
+project_config(
+  src_target = ':app',
+  src_roots = ['src'],
+)
diff --git a/samples/Scrumptious/build.gradle b/samples/Scrumptious/build.gradle
new file mode 100644
index 000000000..8ba946d53
--- /dev/null
+++ b/samples/Scrumptious/build.gradle
@@ -0,0 +1,36 @@
+apply plugin: 'com.android.application'
+
+dependencies {
+    compile project(':facebook')
+}
+
+android {
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
+
+    defaultConfig {
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+    }
+
+    lintOptions {
+        abortOnError false
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+
+    splits {
+        abi {
+            enable true
+            reset()
+            include 'armeabi', 'armeabi-v7a', 'x86'
+            universalApk true
+        }
+    }
+}
diff --git a/samples/Scrumptious/proguard-project.txt b/samples/Scrumptious/proguard-project.txt
new file mode 100644
index 000000000..f2fe1559a
--- /dev/null
+++ b/samples/Scrumptious/proguard-project.txt
@@ -0,0 +1,20 @@
+# To enable ProGuard in your project, edit project.properties
+# to define the proguard.config property as described in that file.
+#
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in ${sdk.dir}/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the ProGuard
+# include property in project.properties.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/samples/Scrumptious/res/drawable-hdpi/icon.png b/samples/Scrumptious/res/drawable-hdpi/icon.png
new file mode 100644
index 000000000..383503ce9
Binary files /dev/null and b/samples/Scrumptious/res/drawable-hdpi/icon.png differ
diff --git a/samples/Scrumptious/res/drawable-hdpi/picker_magnifier.png b/samples/Scrumptious/res/drawable-hdpi/picker_magnifier.png
new file mode 100644
index 000000000..0dcd013d6
Binary files /dev/null and b/samples/Scrumptious/res/drawable-hdpi/picker_magnifier.png differ
diff --git a/samples/Scrumptious/res/drawable-hdpi/placeholder_image.png b/samples/Scrumptious/res/drawable-hdpi/placeholder_image.png
new file mode 100644
index 000000000..7dec9eaf1
Binary files /dev/null and b/samples/Scrumptious/res/drawable-hdpi/placeholder_image.png differ
diff --git a/samples/Scrumptious/res/drawable-mdpi/icon.png b/samples/Scrumptious/res/drawable-mdpi/icon.png
new file mode 100644
index 000000000..b14f00b4d
Binary files /dev/null and b/samples/Scrumptious/res/drawable-mdpi/icon.png differ
diff --git a/samples/Scrumptious/res/drawable-mdpi/logo.png b/samples/Scrumptious/res/drawable-mdpi/logo.png
new file mode 100644
index 000000000..a6f07865e
Binary files /dev/null and b/samples/Scrumptious/res/drawable-mdpi/logo.png differ
diff --git a/samples/Scrumptious/res/drawable-mdpi/picker_magnifier.png b/samples/Scrumptious/res/drawable-mdpi/picker_magnifier.png
new file mode 100644
index 000000000..3013a5519
Binary files /dev/null and b/samples/Scrumptious/res/drawable-mdpi/picker_magnifier.png differ
diff --git a/samples/Scrumptious/res/drawable-mdpi/placeholder_image.png b/samples/Scrumptious/res/drawable-mdpi/placeholder_image.png
new file mode 100644
index 000000000..79f4cb430
Binary files /dev/null and b/samples/Scrumptious/res/drawable-mdpi/placeholder_image.png differ
diff --git a/samples/Scrumptious/res/drawable-xhdpi/icon.png b/samples/Scrumptious/res/drawable-xhdpi/icon.png
new file mode 100644
index 000000000..c86c5f0f3
Binary files /dev/null and b/samples/Scrumptious/res/drawable-xhdpi/icon.png differ
diff --git a/samples/Scrumptious/res/drawable-xhdpi/logo.png b/samples/Scrumptious/res/drawable-xhdpi/logo.png
new file mode 100644
index 000000000..aea4d819e
Binary files /dev/null and b/samples/Scrumptious/res/drawable-xhdpi/logo.png differ
diff --git a/samples/Scrumptious/res/drawable-xhdpi/picker_magnifier.png b/samples/Scrumptious/res/drawable-xhdpi/picker_magnifier.png
new file mode 100644
index 000000000..a5eb056a1
Binary files /dev/null and b/samples/Scrumptious/res/drawable-xhdpi/picker_magnifier.png differ
diff --git a/samples/Scrumptious/res/drawable-xhdpi/placeholder_image.png b/samples/Scrumptious/res/drawable-xhdpi/placeholder_image.png
new file mode 100644
index 000000000..b3ce31c10
Binary files /dev/null and b/samples/Scrumptious/res/drawable-xhdpi/placeholder_image.png differ
diff --git a/samples/Scrumptious/res/drawable/add_food.png b/samples/Scrumptious/res/drawable/add_food.png
new file mode 100644
index 000000000..aeb1ae315
Binary files /dev/null and b/samples/Scrumptious/res/drawable/add_food.png differ
diff --git a/samples/Scrumptious/res/drawable/add_friends.png b/samples/Scrumptious/res/drawable/add_friends.png
new file mode 100644
index 000000000..b728ebfd9
Binary files /dev/null and b/samples/Scrumptious/res/drawable/add_friends.png differ
diff --git a/samples/Scrumptious/res/drawable/add_location.png b/samples/Scrumptious/res/drawable/add_location.png
new file mode 100644
index 000000000..45a30b3e5
Binary files /dev/null and b/samples/Scrumptious/res/drawable/add_location.png differ
diff --git a/samples/Scrumptious/res/drawable/add_photo.png b/samples/Scrumptious/res/drawable/add_photo.png
new file mode 100644
index 000000000..f48ea0680
Binary files /dev/null and b/samples/Scrumptious/res/drawable/add_photo.png differ
diff --git a/samples/Scrumptious/res/drawable/button_border.xml b/samples/Scrumptious/res/drawable/button_border.xml
new file mode 100644
index 000000000..64ea0ceb3
--- /dev/null
+++ b/samples/Scrumptious/res/drawable/button_border.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+       android:shape="rectangle">
+    <solid android:color="#FFF" />
+    <corners android:radius="10dp" />
+    <padding android:bottom="10dp" android:left="10dp" android:right="10dp" android:top="10dp" />
+    <stroke android:width="1px" android:color="#222" />
+</shape>
diff --git a/samples/Scrumptious/res/drawable/button_text_color.xml b/samples/Scrumptious/res/drawable/button_text_color.xml
new file mode 100644
index 000000000..84751a1ba
--- /dev/null
+++ b/samples/Scrumptious/res/drawable/button_text_color.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<selector xmlns:android="http://schemas.android.com/apk/res/android" >
+	<item 
+		android:state_enabled="false"
+		android:color="@color/disabled_button_color"/>
+    <item
+    	android:color="@color/scrumptious_main_orange"/>
+</selector>
diff --git a/samples/Scrumptious/res/drawable/facebook.png b/samples/Scrumptious/res/drawable/facebook.png
new file mode 100644
index 000000000..88c2ed6a8
Binary files /dev/null and b/samples/Scrumptious/res/drawable/facebook.png differ
diff --git a/samples/Scrumptious/res/drawable/icon.png b/samples/Scrumptious/res/drawable/icon.png
new file mode 100644
index 000000000..739392fc0
Binary files /dev/null and b/samples/Scrumptious/res/drawable/icon.png differ
diff --git a/samples/Scrumptious/res/drawable/picker_button_check.xml b/samples/Scrumptious/res/drawable/picker_button_check.xml
new file mode 100644
index 000000000..6f3d22950
--- /dev/null
+++ b/samples/Scrumptious/res/drawable/picker_button_check.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+  <item android:state_checked="true" android:drawable="@drawable/picker_button_check_on" />
+  <item android:drawable="@drawable/picker_button_check_off" />
+</selector>
diff --git a/samples/Scrumptious/res/drawable/picker_button_check_off.png b/samples/Scrumptious/res/drawable/picker_button_check_off.png
new file mode 100644
index 000000000..c25695d53
Binary files /dev/null and b/samples/Scrumptious/res/drawable/picker_button_check_off.png differ
diff --git a/samples/Scrumptious/res/drawable/picker_button_check_on.png b/samples/Scrumptious/res/drawable/picker_button_check_on.png
new file mode 100644
index 000000000..d793151e6
Binary files /dev/null and b/samples/Scrumptious/res/drawable/picker_button_check_on.png differ
diff --git a/samples/Scrumptious/res/drawable/picker_item_background.xml b/samples/Scrumptious/res/drawable/picker_item_background.xml
new file mode 100644
index 000000000..e52cd305d
--- /dev/null
+++ b/samples/Scrumptious/res/drawable/picker_item_background.xml
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <!-- Even though these two point to the same resource, have two states so the drawable will invalidate itself when coming out of pressed state. -->
+    <item android:state_focused="true"  android:state_enabled="false" android:state_pressed="true" android:drawable="@drawable/picker_list_selector_disabled" />
+    <item android:state_focused="true"  android:state_enabled="false"                              android:drawable="@drawable/picker_list_selector_disabled" />
+    <item android:state_focused="true"                                android:state_pressed="true" android:drawable="@drawable/picker_list_selector_background_transition" />
+    <item android:state_focused="false"                               android:state_pressed="true" android:drawable="@drawable/picker_list_selector_background_transition" />
+    <item android:state_focused="true"                                                             android:drawable="@drawable/picker_list_focused" />
+    <item                                                                                          android:drawable="@android:color/transparent" />
+</selector>
diff --git a/samples/Scrumptious/res/drawable/picker_list_divider.9.png b/samples/Scrumptious/res/drawable/picker_list_divider.9.png
new file mode 100644
index 000000000..4c0df0768
Binary files /dev/null and b/samples/Scrumptious/res/drawable/picker_list_divider.9.png differ
diff --git a/samples/Scrumptious/res/drawable/picker_list_focused.9.png b/samples/Scrumptious/res/drawable/picker_list_focused.9.png
new file mode 100644
index 000000000..3efadc352
Binary files /dev/null and b/samples/Scrumptious/res/drawable/picker_list_focused.9.png differ
diff --git a/samples/Scrumptious/res/drawable/picker_list_longpressed.9.png b/samples/Scrumptious/res/drawable/picker_list_longpressed.9.png
new file mode 100644
index 000000000..5fcd5b207
Binary files /dev/null and b/samples/Scrumptious/res/drawable/picker_list_longpressed.9.png differ
diff --git a/samples/Scrumptious/res/drawable/picker_list_pressed.9.png b/samples/Scrumptious/res/drawable/picker_list_pressed.9.png
new file mode 100644
index 000000000..0e557469e
Binary files /dev/null and b/samples/Scrumptious/res/drawable/picker_list_pressed.9.png differ
diff --git a/samples/Scrumptious/res/drawable/picker_list_section_header_background.9.png b/samples/Scrumptious/res/drawable/picker_list_section_header_background.9.png
new file mode 100644
index 000000000..0ee16ffb6
Binary files /dev/null and b/samples/Scrumptious/res/drawable/picker_list_section_header_background.9.png differ
diff --git a/samples/Scrumptious/res/drawable/picker_list_selector.xml b/samples/Scrumptious/res/drawable/picker_list_selector.xml
new file mode 100644
index 000000000..ceb4f87de
--- /dev/null
+++ b/samples/Scrumptious/res/drawable/picker_list_selector.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item android:state_window_focused="false" android:drawable="@android:color/transparent" />
+
+    <item android:state_focused="true"  android:state_enabled="false" android:state_pressed="true" android:drawable="@drawable/picker_list_selector_disabled" />
+    <item android:state_focused="true"  android:state_enabled="false"                              android:drawable="@drawable/picker_list_selector_disabled" />
+    <item android:state_focused="true"                                android:state_pressed="true" android:drawable="@drawable/picker_list_selector_background_transition" />
+    <item android:state_focused="false"                               android:state_pressed="true" android:drawable="@drawable/picker_list_selector_background_transition" />
+    <item android:state_focused="true"                                                             android:drawable="@drawable/picker_list_focused" />
+
+</selector>
diff --git a/samples/Scrumptious/res/drawable/picker_list_selector_background_transition.xml b/samples/Scrumptious/res/drawable/picker_list_selector_background_transition.xml
new file mode 100644
index 000000000..935189b31
--- /dev/null
+++ b/samples/Scrumptious/res/drawable/picker_list_selector_background_transition.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<transition xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@drawable/picker_list_pressed"  />
+    <item android:drawable="@drawable/picker_list_longpressed"  />
+</transition>
diff --git a/samples/Scrumptious/res/drawable/picker_list_selector_disabled.9.png b/samples/Scrumptious/res/drawable/picker_list_selector_disabled.9.png
new file mode 100644
index 000000000..10851f6c8
Binary files /dev/null and b/samples/Scrumptious/res/drawable/picker_list_selector_disabled.9.png differ
diff --git a/samples/Scrumptious/res/drawable/picker_place_default_icon.png b/samples/Scrumptious/res/drawable/picker_place_default_icon.png
new file mode 100644
index 000000000..97ec3e608
Binary files /dev/null and b/samples/Scrumptious/res/drawable/picker_place_default_icon.png differ
diff --git a/samples/Scrumptious/res/drawable/picker_selector_top_button.xml b/samples/Scrumptious/res/drawable/picker_selector_top_button.xml
new file mode 100644
index 000000000..6aed2827c
--- /dev/null
+++ b/samples/Scrumptious/res/drawable/picker_selector_top_button.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_pressed="true"
+          android:drawable="@drawable/picker_top_button" />
+    <item android:state_focused="true"
+          android:drawable="@drawable/picker_top_button" />
+    <item android:state_selected="true"
+          android:drawable="@drawable/picker_top_button" />
+    <item
+            android:drawable="@drawable/picker_top_background" />
+</selector>
diff --git a/samples/Scrumptious/res/drawable/picker_top_background.xml b/samples/Scrumptious/res/drawable/picker_top_background.xml
new file mode 100644
index 000000000..49649c05b
--- /dev/null
+++ b/samples/Scrumptious/res/drawable/picker_top_background.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+  <gradient
+      android:startColor="#FF5975b0"
+      android:endColor="#FF47639e"
+      android:angle="270"/>
+</shape>
diff --git a/samples/Scrumptious/res/drawable/picker_top_button.xml b/samples/Scrumptious/res/drawable/picker_top_button.xml
new file mode 100644
index 000000000..098883e70
--- /dev/null
+++ b/samples/Scrumptious/res/drawable/picker_top_button.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+    <gradient
+            android:startColor="#3f5b96"
+            android:endColor="#2d4984"
+            android:angle="270"/>
+</shape>
diff --git a/samples/Scrumptious/res/drawable/placeholder_image.png b/samples/Scrumptious/res/drawable/placeholder_image.png
new file mode 100644
index 000000000..c8948a1ce
Binary files /dev/null and b/samples/Scrumptious/res/drawable/placeholder_image.png differ
diff --git a/samples/Scrumptious/res/drawable/profile_default_icon.png b/samples/Scrumptious/res/drawable/profile_default_icon.png
new file mode 100644
index 000000000..15864ccdb
Binary files /dev/null and b/samples/Scrumptious/res/drawable/profile_default_icon.png differ
diff --git a/samples/Scrumptious/res/drawable/title_bar_logo.png b/samples/Scrumptious/res/drawable/title_bar_logo.png
new file mode 100644
index 000000000..3fe6e8b97
Binary files /dev/null and b/samples/Scrumptious/res/drawable/title_bar_logo.png differ
diff --git a/samples/Scrumptious/res/drawable/usersettings_facebook_logo.png b/samples/Scrumptious/res/drawable/usersettings_facebook_logo.png
new file mode 100644
index 000000000..161bef08b
Binary files /dev/null and b/samples/Scrumptious/res/drawable/usersettings_facebook_logo.png differ
diff --git a/samples/Scrumptious/res/drawable/usersettings_fragment_background_gradient.xml b/samples/Scrumptious/res/drawable/usersettings_fragment_background_gradient.xml
new file mode 100644
index 000000000..0a504ea55
--- /dev/null
+++ b/samples/Scrumptious/res/drawable/usersettings_fragment_background_gradient.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<shape xmlns:android="http://schemas.android.com/apk/res/android" android:shape="rectangle">
+    <gradient
+      android:startColor="#5774B5"
+      android:endColor="#2C4988"
+      android:gradientRadius="495"
+      android:type="radial"/>
+</shape>    
diff --git a/samples/Scrumptious/res/layout-land/selection.xml b/samples/Scrumptious/res/layout-land/selection.xml
new file mode 100644
index 000000000..7309b4130
--- /dev/null
+++ b/samples/Scrumptious/res/layout-land/selection.xml
@@ -0,0 +1,98 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical">
+
+    <include layout="@layout/title_bar" />
+
+    <ScrollView
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:background="#FFF"
+        android:fillViewport="true">
+
+        <LinearLayout
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal">
+
+            <com.example.scrumptious.FullListView
+                android:id="@+id/selection_list"
+                android:layout_width="fill_parent"
+                android:layout_height="wrap_content"
+                android:layout_margin="20dp"
+                android:layout_weight="2"
+                android:divider="#00000000"
+                android:dividerHeight="@dimen/item_list_padding" />
+
+            <LinearLayout
+                android:layout_width="fill_parent"
+                android:layout_height="wrap_content"
+                android:layout_margin="20dp"
+                android:layout_weight="1"
+                android:orientation="vertical">
+
+                <ImageView
+                    android:id="@+id/selected_image"
+                    android:layout_width="175dp"
+                    android:layout_height="175dp"
+                    android:layout_gravity="center_horizontal"
+                    android:layout_margin="5dp"
+                    android:contentDescription="@string/food_image_content_description"
+                    android:scaleType="fitCenter"
+                    android:src="@drawable/placeholder_image" />
+
+
+                <LinearLayout
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="center_horizontal"
+                    android:layout_margin="5dp"
+                    android:orientation="horizontal">
+
+                    <Button
+                        android:id="@+id/announce_text"
+                        style="@style/com_facebook_button"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_margin="5dp"
+                        android:text="@string/announce" />
+
+
+                    <com.facebook.share.widget.ShareButton
+                        android:id="@+id/share_button"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_margin="5dp" />
+
+
+                    <com.facebook.share.widget.SendButton
+                        android:id="@+id/message_button"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_margin="5dp" />
+                </LinearLayout>
+            </LinearLayout>
+        </LinearLayout>
+    </ScrollView>
+</LinearLayout>
diff --git a/samples/Scrumptious/res/layout/listitem.xml b/samples/Scrumptious/res/layout/listitem.xml
new file mode 100644
index 000000000..9f12d7154
--- /dev/null
+++ b/samples/Scrumptious/res/layout/listitem.xml
@@ -0,0 +1,53 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:layout_width="fill_parent"
+              android:layout_height="wrap_content"
+              android:layout_gravity="center_horizontal"
+              android:orientation="horizontal">
+
+    <ImageView
+            android:id="@+id/icon"
+            android:layout_width="50dp"
+            android:layout_height="50dp" />
+    <LinearLayout
+            android:orientation="vertical"
+            android:layout_gravity="center_vertical"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="15dp" >
+        <TextView
+                android:id="@+id/text1"
+                android:text="test"
+                android:textColor="#FB5820"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:textSize="16sp" />
+        <TextView
+                android:id="@+id/text2"
+                android:text="test2"
+                android:textColor="#E4C897"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:textSize="12sp" />
+    </LinearLayout>
+</LinearLayout>
diff --git a/samples/Scrumptious/res/layout/main.xml b/samples/Scrumptious/res/layout/main.xml
new file mode 100644
index 000000000..61fbe89dd
--- /dev/null
+++ b/samples/Scrumptious/res/layout/main.xml
@@ -0,0 +1,41 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        android:orientation="vertical"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent">
+
+    <fragment android:name="com.example.scrumptious.SelectionFragment"
+              android:id="@+id/selectionFragment"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent" />
+    <fragment android:name="com.example.scrumptious.SplashFragment"
+              android:id="@+id/splashFragment"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent" />
+    <fragment android:name="com.example.scrumptious.usersettings.UserSettingsFragment"
+              android:id="@+id/userSettingsFragment"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent" />
+</LinearLayout>
+
diff --git a/samples/Scrumptious/res/layout/picker_activity_circle_row.xml b/samples/Scrumptious/res/layout/picker_activity_circle_row.xml
new file mode 100644
index 000000000..ceb3d92e2
--- /dev/null
+++ b/samples/Scrumptious/res/layout/picker_activity_circle_row.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<RelativeLayout
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_height="50dip"
+        android:layout_width="match_parent"
+        >
+    <ProgressBar android:indeterminate="true"
+                 android:layout_width="wrap_content"
+                 android:layout_height="50dip"
+                 android:id="@+id/com_facebook_picker_row_activity_circle"
+                 style="@android:style/Widget.ProgressBar.Small"
+                 android:layout_centerInParent="true"
+                 android:visibility="visible"
+                 android:indeterminateOnly="true"
+            />
+</RelativeLayout>
diff --git a/samples/Scrumptious/res/layout/picker_checkbox.xml b/samples/Scrumptious/res/layout/picker_checkbox.xml
new file mode 100644
index 000000000..c2b2a6e5f
--- /dev/null
+++ b/samples/Scrumptious/res/layout/picker_checkbox.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<CheckBox
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/com_facebook_picker_checkbox"
+    android:layout_width="23dip"
+    android:layout_height="23dip"
+    android:focusable="false"
+    android:clickable="false"
+    android:button="@drawable/picker_button_check" />
diff --git a/samples/Scrumptious/res/layout/picker_friendpickerfragment.xml b/samples/Scrumptious/res/layout/picker_friendpickerfragment.xml
new file mode 100644
index 000000000..abdd3941c
--- /dev/null
+++ b/samples/Scrumptious/res/layout/picker_friendpickerfragment.xml
@@ -0,0 +1,48 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+              android:background="#FFFFFF">
+
+    <include layout="@layout/picker_title_bar_stub"/>
+
+    <ListView
+            android:id="@+id/com_facebook_picker_list_view"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:divider="@drawable/picker_list_divider"
+            android:fastScrollEnabled="true"
+            android:scrollbars="vertical"
+            android:listSelector="@drawable/picker_list_selector"
+            android:cacheColorHint="#FFFFFF"
+            />
+
+    <ProgressBar android:indeterminate="true"
+                 android:layout_width="wrap_content"
+                 android:layout_height="wrap_content"
+                 android:id="@+id/com_facebook_picker_activity_circle"
+                 style="@android:style/Widget.ProgressBar"
+                 android:layout_centerInParent="true"
+                 android:visibility="invisible"
+            />
+</RelativeLayout>
diff --git a/samples/Scrumptious/res/layout/picker_image.xml b/samples/Scrumptious/res/layout/picker_image.xml
new file mode 100644
index 000000000..9cbb41bbb
--- /dev/null
+++ b/samples/Scrumptious/res/layout/picker_image.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<ImageView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/com_facebook_picker_image"
+    android:layout_width="50dip"
+    android:layout_height="50dip"
+    android:layout_gravity="center_vertical"
+    android:src="@drawable/profile_default_icon" />
diff --git a/samples/Scrumptious/res/layout/picker_list_row.xml b/samples/Scrumptious/res/layout/picker_list_row.xml
new file mode 100644
index 000000000..4e87484b0
--- /dev/null
+++ b/samples/Scrumptious/res/layout/picker_list_row.xml
@@ -0,0 +1,52 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_height="wrap_content"
+        android:layout_width="match_parent"
+        >
+    <ViewStub
+            android:id="@+id/com_facebook_picker_profile_pic_stub"
+            android:inflatedId="@+id/com_facebook_picker_image"
+            android:layout="@layout/picker_image"
+            android:layout_width="50dip"
+            android:layout_height="50dip" />
+    <TextView
+            android:id="@+id/com_facebook_picker_title"
+            android:layout_width="100dip"
+            android:layout_height="50dip"
+            android:layout_weight="1.0"
+            android:paddingLeft="5dip"
+            android:textStyle="bold"
+            android:textColor="#000000"
+            android:singleLine="true"
+            android:ellipsize="end"
+            android:textSize="18sp"
+            android:gravity="left|center_vertical"/>
+    <ViewStub
+            android:id="@+id/com_facebook_picker_checkbox_stub"
+            android:inflatedId="@+id/com_facebook_picker_checkbox"
+            android:layout="@layout/picker_checkbox"
+            android:layout_width="23dip"
+            android:layout_height="23dip"
+            android:layout_marginRight="10dip"/>
+</LinearLayout>
diff --git a/samples/Scrumptious/res/layout/picker_list_section_header.xml b/samples/Scrumptious/res/layout/picker_list_section_header.xml
new file mode 100644
index 000000000..ea3a4bba0
--- /dev/null
+++ b/samples/Scrumptious/res/layout/picker_list_section_header.xml
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<TextView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/com_facebook_picker_list_section_header"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:textStyle="bold"
+    android:background="@drawable/picker_list_section_header_background"
+    android:orientation="horizontal"
+    android:gravity="left|center_vertical"
+    android:textColor="#68768a"
+    android:textSize="17sp"
+    android:paddingLeft="8dip"
+    android:paddingBottom="0px"
+    android:shadowDx="1"
+    android:shadowDy="1"
+    android:shadowRadius="1"
+    android:shadowColor="#BFFFFFFF" />
diff --git a/samples/Scrumptious/res/layout/picker_placepickerfragment.xml b/samples/Scrumptious/res/layout/picker_placepickerfragment.xml
new file mode 100644
index 000000000..12a069d6d
--- /dev/null
+++ b/samples/Scrumptious/res/layout/picker_placepickerfragment.xml
@@ -0,0 +1,51 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+              android:background="#FFFFFF"
+              android:descendantFocusability="beforeDescendants"
+              android:focusableInTouchMode="true">
+
+    <include layout="@layout/picker_title_bar_stub"/>
+
+    <ListView
+            android:id="@+id/com_facebook_picker_list_view"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:layout_alignParentTop="true"
+            android:divider="@null"
+            android:fastScrollEnabled="true"
+            android:scrollbars="vertical"
+            android:listSelector="@drawable/picker_list_selector"
+            android:cacheColorHint="#FFFFFF"
+            />
+
+    <ProgressBar android:indeterminate="true"
+                 android:layout_width="wrap_content"
+                 android:layout_height="wrap_content"
+                 android:id="@+id/com_facebook_picker_activity_circle"
+                 style="@android:style/Widget.ProgressBar"
+                 android:layout_centerInParent="true"
+                 android:visibility="invisible"
+            />
+</RelativeLayout>
diff --git a/samples/Scrumptious/res/layout/picker_placepickerfragment_list_row.xml b/samples/Scrumptious/res/layout/picker_placepickerfragment_list_row.xml
new file mode 100644
index 000000000..d20989c37
--- /dev/null
+++ b/samples/Scrumptious/res/layout/picker_placepickerfragment_list_row.xml
@@ -0,0 +1,94 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<RelativeLayout
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_height="wrap_content"
+        android:layout_width="match_parent"
+        android:focusable="false">
+    <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal"
+            android:focusable="false"
+            >
+        <FrameLayout
+                android:layout_width="80dp"
+                android:layout_height="wrap_content"
+                >
+            <ViewStub
+                    android:id="@+id/com_facebook_picker_profile_pic_stub"
+                    android:inflatedId="@+id/com_facebook_picker_image"
+                    android:layout="@layout/picker_image"
+                    android:layout_gravity="left|center_vertical"
+                    android:layout_width="@dimen/picker_place_image_size"
+                    android:layout_height="@dimen/picker_place_image_size" />
+        </FrameLayout>
+        <LinearLayout
+                android:orientation="vertical"
+                android:focusable="false"
+                android:layout_width="0dip"
+                android:layout_height="wrap_content"
+                android:layout_marginRight="16dp"
+                android:layout_gravity="center_vertical"
+                android:layout_weight="1">
+            <TextView
+                    android:id="@+id/com_facebook_picker_title"
+                    android:layout_width="fill_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="1.0"
+                    android:ellipsize="end"
+                    android:singleLine="true"
+                    android:typeface="sans"
+                    android:textColor="#000000"
+                    android:lines="1"
+                    android:textSize="16sp"
+                    android:gravity="left|center_vertical"/>
+            <TextView
+                    android:id="@+id/picker_subtitle"
+                    android:layout_width="fill_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="1.0"
+                    android:ellipsize="end"
+                    android:singleLine="true"
+                    android:textColor="#666666"
+                    android:lines="1"
+                    android:typeface="sans"
+                    android:textSize="12sp"
+                    android:gravity="left|center_vertical"/>
+        </LinearLayout>
+        <!--ViewStub
+                android:id="@+id/checkbox_stub"
+                android:inflatedId="@+id/picker_checkbox"
+                android:layout="@layout/checkbox_layout"
+                android:layout_width="23dip"
+                android:layout_height="23dip"
+                android:layout_marginRight="10dip"/-->
+    </LinearLayout>
+    <View
+            android:layout_width="0dp"
+            android:layout_height="@dimen/picker_divider_width"
+            android:layout_alignParentLeft="true"
+            android:layout_alignParentRight="true"
+            android:layout_alignParentBottom="true"
+            android:background="@drawable/picker_default_separator_color"
+            />
+</RelativeLayout>
diff --git a/samples/Scrumptious/res/layout/picker_search_bar_layout.xml b/samples/Scrumptious/res/layout/picker_search_bar_layout.xml
new file mode 100644
index 000000000..9846507de
--- /dev/null
+++ b/samples/Scrumptious/res/layout/picker_search_bar_layout.xml
@@ -0,0 +1,51 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+
+<LinearLayout
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        android:id="@+id/com_facebook_search_bar_view"
+        android:orientation="horizontal"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:paddingTop="0dp"
+        android:paddingBottom="0dp"
+        android:paddingLeft="5dp"
+        android:paddingRight="5dp"
+        android:background="@color/picker_search_bar_background"
+        >
+    <EditText
+            android:id="@+id/com_facebook_picker_search_text"
+            android:layout_width="match_parent"
+            android:layout_height="48dp"
+            android:layout_marginLeft="5dp"
+            android:singleLine="true"
+            android:layout_gravity="center"
+            android:gravity="center_vertical"
+            android:textSize="16sp"
+            android:textColor="@android:color/black"
+            android:textColorHint="@color/picker_search_bar_text"
+            android:background="@color/picker_search_bar_background"
+            android:drawableLeft="@drawable/picker_magnifier"
+            android:drawablePadding="5dp"
+            android:imeOptions="actionDone"
+            />
+</LinearLayout>
diff --git a/samples/Scrumptious/res/layout/picker_search_box.xml b/samples/Scrumptious/res/layout/picker_search_box.xml
new file mode 100644
index 000000000..8f21217f4
--- /dev/null
+++ b/samples/Scrumptious/res/layout/picker_search_box.xml
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:layout_width="match_parent"
+              android:layout_height="wrap_content"
+              android:orientation="vertical"
+        >
+    <include layout="@layout/picker_search_bar_layout" />
+    <View
+            android:layout_width="match_parent"
+            android:layout_height="@dimen/picker_divider_width"
+            android:background="@drawable/picker_default_separator_color"
+            />
+</LinearLayout>
diff --git a/samples/Scrumptious/res/layout/picker_title_bar.xml b/samples/Scrumptious/res/layout/picker_title_bar.xml
new file mode 100644
index 000000000..fe6b9e533
--- /dev/null
+++ b/samples/Scrumptious/res/layout/picker_title_bar.xml
@@ -0,0 +1,69 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                android:id="@+id/com_facebook_picker_top_bar"
+                android:layout_width="match_parent"
+                android:layout_height="48dp"
+                android:background="@drawable/picker_top_background"
+                android:gravity="right">
+    <Button
+            android:id="@+id/com_facebook_picker_done_button"
+            android:layout_width="wrap_content"
+            android:minWidth="55dp"
+            android:layout_height="48dp"
+            android:background="@drawable/picker_selector_top_button"
+            android:paddingLeft="5dip"
+            android:paddingRight="5dip"
+            android:textColor="#ffffff"
+            android:textSize="14sp"
+            android:shadowColor="#66000000"
+            android:shadowDx="1"
+            android:shadowDy="1"
+            android:shadowRadius="1"
+            android:layout_alignParentRight="true"
+            />
+    <LinearLayout
+            android:id="@+id/com_facebook_picker_divider"
+            android:layout_width="1dp"
+            android:layout_height="match_parent"
+            android:background="#40000000"
+            android:layout_alignLeft="@id/com_facebook_picker_done_button"
+            android:layout_alignStart="@id/com_facebook_picker_done_button"
+            android:orientation="horizontal"/>
+    <TextView
+            android:id="@+id/com_facebook_picker_title"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:textSize="22sp"
+            android:textColor="#FFFFFF"
+            android:gravity="left|center_vertical"
+            android:ellipsize="end"
+            android:singleLine="true"
+            android:scaleType="center"
+            android:shadowColor="#66000000"
+            android:shadowDx="1"
+            android:shadowDy="1"
+            android:shadowRadius="1"
+            android:layout_marginLeft="10dip"
+            android:layout_marginRight="10dip"
+            android:layout_toLeftOf="@id/com_facebook_picker_divider"/>
+</RelativeLayout>
diff --git a/samples/Scrumptious/res/layout/picker_title_bar_stub.xml b/samples/Scrumptious/res/layout/picker_title_bar_stub.xml
new file mode 100644
index 000000000..76fbf9b41
--- /dev/null
+++ b/samples/Scrumptious/res/layout/picker_title_bar_stub.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<merge xmlns:android="http://schemas.android.com/apk/res/android">
+    <ViewStub android:id="@+id/com_facebook_picker_title_bar_stub"
+              android:inflatedId="@+id/com_facebook_picker_title_bar"
+              android:layout="@layout/picker_title_bar"
+              android:layout_height="48dip"
+              android:layout_width="match_parent"/>
+
+</merge>
diff --git a/samples/Scrumptious/res/layout/pickers.xml b/samples/Scrumptious/res/layout/pickers.xml
new file mode 100644
index 000000000..fc6f506b2
--- /dev/null
+++ b/samples/Scrumptious/res/layout/pickers.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:orientation="vertical"
+              android:layout_width="fill_parent"
+              android:layout_height="fill_parent"
+        >
+    <FrameLayout
+            android:id="@+id/picker_fragment"
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            />
+</LinearLayout>
diff --git a/samples/Scrumptious/res/layout/selection.xml b/samples/Scrumptious/res/layout/selection.xml
new file mode 100644
index 000000000..ed5b2606b
--- /dev/null
+++ b/samples/Scrumptious/res/layout/selection.xml
@@ -0,0 +1,93 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical">
+
+    <include layout="@layout/title_bar"/>
+
+    <ScrollView
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:background="#FFF"
+        android:fillViewport="true">
+
+        <LinearLayout
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:orientation="vertical">
+
+            <com.example.scrumptious.FullListView
+                android:id="@+id/selection_list"
+                android:layout_width="fill_parent"
+                android:layout_height="wrap_content"
+                android:layout_margin="20dp"
+                android:divider="#00000000"
+                android:dividerHeight="@dimen/item_list_padding" />
+
+        <LinearLayout
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal">
+            <ImageView
+                android:id="@+id/selected_image"
+                android:src="@drawable/placeholder_image"
+                android:layout_width="fill_parent"
+                android:layout_height="200dp"
+                android:layout_marginLeft="10dp"
+                android:layout_marginRight="10dp"
+                android:layout_weight="1"
+                android:scaleType="fitCenter"
+                android:contentDescription="@string/food_image_content_description"/>
+            <LinearLayout
+                android:layout_width="fill_parent"
+                android:layout_height="wrap_content"
+                android:orientation="vertical"
+                android:gravity="end"
+                android:layout_weight="2">
+                <Button
+                    android:id="@+id/announce_text"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="center"
+                    android:layout_margin="5dp"
+                    android:text="@string/announce"
+                    style="@style/com_facebook_button"/>
+                <com.facebook.share.widget.ShareButton
+                    android:id="@+id/share_button"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_margin="5dp"
+                    android:layout_gravity="center"/>
+                <com.facebook.share.widget.SendButton
+                    android:id="@+id/message_button"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="center"
+                    android:layout_margin="5dp"/>
+                </LinearLayout>
+        </LinearLayout>
+        </LinearLayout>
+    </ScrollView>
+</LinearLayout>
+
+
diff --git a/samples/Scrumptious/res/layout/splash.xml b/samples/Scrumptious/res/layout/splash.xml
new file mode 100644
index 000000000..058c7a97e
--- /dev/null
+++ b/samples/Scrumptious/res/layout/splash.xml
@@ -0,0 +1,63 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<ScrollView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:fillViewport="true"
+    android:background="#FB5820" >
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="vertical">
+
+    	<ImageView 
+    		android:layout_width="match_parent"
+    		android:layout_height="0dp"
+    		android:layout_weight="1"
+    		android:layout_gravity="center"
+    		android:padding="50dp"
+    		android:src="@drawable/logo"/>
+
+        <com.facebook.login.widget.LoginButton
+            android:id="@+id/login_button"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:layout_marginTop="30dp"
+            android:layout_marginBottom="30dp" />
+
+        <TextView
+            android:id="@+id/skip_login_button"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:text="@string/skip_login"
+            android:textSize="12sp"
+            android:textColor="#EAFEA7"
+            android:paddingLeft="20dp"
+            android:paddingRight="20dp"
+            android:layout_marginBottom="30dp" />
+
+    </LinearLayout>
+</ScrollView>
diff --git a/samples/Scrumptious/res/layout/title_bar.xml b/samples/Scrumptious/res/layout/title_bar.xml
new file mode 100644
index 000000000..e7ef3699d
--- /dev/null
+++ b/samples/Scrumptious/res/layout/title_bar.xml
@@ -0,0 +1,48 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:facebook="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="60dp"
+    android:background="@color/scrumptious_main_orange">
+
+    <ImageView
+        android:id="@+id/image_title"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_centerInParent="true"
+        android:layout_margin="16dp"
+        android:scaleType="fitCenter"
+        android:src="@drawable/title_bar_logo"
+        android:contentDescription="@string/logo_content_description"/>
+
+    <com.facebook.login.widget.ProfilePictureView
+        android:id="@+id/selection_profile_pic"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentEnd="true"
+        android:layout_centerVertical="true"
+        android:layout_margin="10dp"
+        android:gravity="end|center_vertical"
+        facebook:com_facebook_preset_size="small" />
+
+</RelativeLayout>
diff --git a/samples/Scrumptious/res/layout/usersettings_fragment.xml b/samples/Scrumptious/res/layout/usersettings_fragment.xml
new file mode 100644
index 000000000..3e9bd7cd4
--- /dev/null
+++ b/samples/Scrumptious/res/layout/usersettings_fragment.xml
@@ -0,0 +1,63 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<ScrollView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:loginView="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@drawable/usersettings_fragment_background_gradient" >
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical">
+
+        <ImageView
+            android:id="@+id/usersettings_fragment_logo_image"
+            android:layout_width="193dp"
+            android:layout_height="44dp"
+            android:layout_gravity="center_horizontal"
+            android:src="@drawable/usersettings_facebook_logo"
+            android:layout_marginTop="35dp"
+            android:contentDescription="@string/usersettings_fragment_logo_content_description"/>
+
+        <TextView
+            android:id="@+id/usersettings_fragment_profile_name"
+            android:layout_width="match_parent"
+            android:layout_height="100dp"
+            android:lines="1"
+            android:textSize="16sp"
+            android:textStyle="bold"
+            android:layout_marginTop="35dp"
+            android:gravity="center"/>
+    
+        <com.facebook.login.widget.LoginButton
+            android:id="@+id/usersettings_fragment_login_button"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:layout_marginTop="35dp"
+            android:layout_marginBottom="35dp"
+            loginView:com_facebook_login_text="@string/usersettings_fragment_log_in_button"
+            style="@style/com_facebook_loginview_silver_style" />
+    
+    </LinearLayout>
+</ScrollView>
diff --git a/samples/Scrumptious/res/values-hdpi/dimens.xml b/samples/Scrumptious/res/values-hdpi/dimens.xml
new file mode 100644
index 000000000..2cbb2f58d
--- /dev/null
+++ b/samples/Scrumptious/res/values-hdpi/dimens.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <dimen name="picker_divider_width">1px</dimen>
+</resources>
diff --git a/samples/Scrumptious/res/values-ldpi/dimens.xml b/samples/Scrumptious/res/values-ldpi/dimens.xml
new file mode 100644
index 000000000..2cbb2f58d
--- /dev/null
+++ b/samples/Scrumptious/res/values-ldpi/dimens.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <dimen name="picker_divider_width">1px</dimen>
+</resources>
diff --git a/samples/Scrumptious/res/values-mdpi/dimens.xml b/samples/Scrumptious/res/values-mdpi/dimens.xml
new file mode 100644
index 000000000..2cbb2f58d
--- /dev/null
+++ b/samples/Scrumptious/res/values-mdpi/dimens.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <dimen name="picker_divider_width">1px</dimen>
+</resources>
diff --git a/samples/Scrumptious/res/values-xhdpi/dimens.xml b/samples/Scrumptious/res/values-xhdpi/dimens.xml
new file mode 100644
index 000000000..9d344308d
--- /dev/null
+++ b/samples/Scrumptious/res/values-xhdpi/dimens.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <dimen name="picker_divider_width">2px</dimen>
+</resources>
diff --git a/samples/Scrumptious/res/values/attrs.xml b/samples/Scrumptious/res/values/attrs.xml
new file mode 100644
index 000000000..0ab60ae6f
--- /dev/null
+++ b/samples/Scrumptious/res/values/attrs.xml
@@ -0,0 +1,41 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <declare-styleable name="picker_fragment">
+        <attr name="show_pictures" format="boolean"/>
+        <attr name="extra_fields" format="string"/>
+        <attr name="show_title_bar" format="boolean" />
+        <attr name="title_text" format="string" />
+        <attr name="done_button_text" format="string" />
+        <attr name="title_bar_background" format="reference" />
+        <attr name="done_button_background" format="reference" />
+    </declare-styleable>
+    <declare-styleable name="picker_friend_picker_fragment">
+        <attr name="multi_select" format="boolean"/>
+    </declare-styleable>
+    <declare-styleable name="picker_place_picker_fragment">
+        <attr name="radius_in_meters" format="integer"/>
+        <attr name="results_limit" format="integer"/>
+        <attr name="search_text" format="string"/>
+        <attr name="show_search_box" format="boolean" />
+    </declare-styleable>
+</resources>
diff --git a/samples/Scrumptious/res/values/colors.xml b/samples/Scrumptious/res/values/colors.xml
new file mode 100644
index 000000000..1ce7251ba
--- /dev/null
+++ b/samples/Scrumptious/res/values/colors.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <dimen name="picker_place_image_size">64dp</dimen>
+    <color name="picker_search_bar_background">#f5f5f7</color>
+    <color name="picker_search_bar_text">#bcbdc2</color>
+	<color name="scrumptious_main_orange">#FFFD5720</color>
+    <color name="disabled_button_color">#FFB7B7B7</color>
+</resources>
diff --git a/samples/Scrumptious/res/values/dimens.xml b/samples/Scrumptious/res/values/dimens.xml
new file mode 100644
index 000000000..c6db724a3
--- /dev/null
+++ b/samples/Scrumptious/res/values/dimens.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+	<dimen name="item_list_padding">14dp</dimen>
+</resources>
diff --git a/samples/Scrumptious/res/values/drawables.xml b/samples/Scrumptious/res/values/drawables.xml
new file mode 100644
index 000000000..cdb56f864
--- /dev/null
+++ b/samples/Scrumptious/res/values/drawables.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <drawable name="picker_default_separator_color">#33464c59</drawable>
+</resources>
diff --git a/samples/Scrumptious/res/values/strings.xml b/samples/Scrumptious/res/values/strings.xml
new file mode 100644
index 000000000..25580b998
--- /dev/null
+++ b/samples/Scrumptious/res/values/strings.xml
@@ -0,0 +1,100 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <string name="app_name">Scrumptious</string>
+    <string name="app_id">233936543368280</string>
+    <string name="fb_login_protocol_scheme">fb233936543368280</string>
+    <string name="get_started">To get started, login using Facebook</string>
+    <string name="skip_login">continue as a guest</string>
+    <string name="action_eating">Pick Meal</string>
+    <string name="action_location">Pick Location</string>
+    <string name="action_people">Pick Friends</string>
+    <string name="action_photo">Pick Photo</string>
+    <string name="action_eating_default">Select a meal</string>
+    <string name="action_location_default">Select a place</string>
+    <string name="action_people_default">Select friends</string>
+    <string name="action_photo_default">Take one</string>
+    <string name="action_photo_ready">Ready</string>
+    <string name="action_photo_camera">Take Photo</string>
+    <string name="action_photo_gallery">Choose Existing</string>
+    <string name="announce">Announce</string>
+    <string name="picker_placepicker_subtitle_format">%1$s • %2$,d were here</string>
+    <string name="picker_placepicker_subtitle_catetory_only_format">%1$s</string>
+    <string name="picker_placepicker_subtitle_were_here_only_format">%1$,d were here</string>
+    <string name="picker_picker_done_button_text">Done</string>
+    <string name="message">Send with Messenger</string>
+    <string name="login">Login</string>
+    <string name="settings">Settings</string>
+    <string name="select_meal">Select a meal</string>
+    <string name="enter_meal">Enter meal</string>
+    <string name="result_dialog_title">Result</string>
+    <string name="result_dialog_button_text">Thanks!</string>
+    <string name="result_dialog_text_with_id">Posted Open Graph action, id: %1$s</string>
+    <string name="result_dialog_text_default">Post action complete.</string>
+    <string name="result_dialog_text_canceled">Post canceled.</string>
+    <string name="progress_dialog_text">Announcing, please wait...</string>
+    <string name="single_user_selected">%1$s</string>
+    <string name="two_users_selected">%1$s and %2$s</string>
+    <string name="multiple_users_selected">%1$s and %2$s others</string>
+    <string name="error_dialog_title">Something Went Wrong</string>
+    <string name="error_dialog_button_text">OK</string>
+    <string name="error_dialog_default_text">No response from server.</string>
+    <string name="select_picture">Select Picture</string>
+    <string name="rejected_publish_permission">Publish permission rejected, canceling.</string>
+    <string name="error_transient">A temporary error occurred, please try again later.</string>
+    <string name="error_unknown">An unknown error occurred, please contact the developer with the following message: %1$s</string>
+    <string name="exception">Exception: %1$s</string>
+    <string name="ok">OK</string>
+    <string name="cancel">Cancel</string>
+    <string name="usersettings_fragment_log_in_button">Log in&#8230;</string>
+    <string name="usersettings_fragment_logged_in">Logged in</string>
+    <string name="usersettings_fragment_not_logged_in">Not logged in</string>
+    <string name="usersettings_fragment_logo_content_description">Facebook Logo</string>
+    <string name="logo_content_description">logo</string>
+    <string name="food_image_content_description">Food image</string>
+    <string name="choose_friends">Choose Friends</string>
+    <string name="nearby">Nearby</string>
+
+    <string-array name="food_types">
+        <item>Cheeseburger</item>
+        <item>Pizza</item>
+        <item>Hotdog</item>
+        <item>Italian</item>
+        <item>French</item>
+        <item>Chinese</item>
+        <item>Thai</item>
+        <item>Indian</item>
+        <item>&lt;Other&gt;</item>
+    </string-array>
+
+    <string-array name="food_og_urls">
+        <item>https://scrumptious-facebook.parseapp.com/meals/cheeseburger/</item> <!-- Cheeseburger -->
+        <item>https://scrumptious-facebook.parseapp.com/meals/pizza/</item> <!-- Pizza -->
+        <item>https://scrumptious-facebook.parseapp.com/meals/hotdog/</item> <!-- Hotdog -->
+        <item>https://scrumptious-facebook.parseapp.com/meals/italian/</item> <!-- Italian -->
+        <item>https://scrumptious-facebook.parseapp.com/meals/french/</item> <!-- French -->
+        <item>https://scrumptious-facebook.parseapp.com/meals/chinese/</item> <!-- Chinese -->
+        <item>https://scrumptious-facebook.parseapp.com/meals/thai/</item> <!-- Thai -->
+        <item>https://scrumptious-facebook.parseapp.com/meals/indian/</item> <!-- Indian -->
+        <item></item>
+    </string-array>
+</resources>
diff --git a/samples/Scrumptious/res/values/styles.xml b/samples/Scrumptious/res/values/styles.xml
new file mode 100644
index 000000000..2f4dfe586
--- /dev/null
+++ b/samples/Scrumptious/res/values/styles.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+	<style name="Theme.Scrumptious" parent="android:Theme">
+        <item name="android:windowNoTitle">true</item>
+    </style>
+    <color name="usersettings_fragment_connected_text_color">#FFFFFF</color>
+    <color name="usersettings_fragment_connected_shadow_color">#000000</color>
+    <color name="usersettings_fragment_not_connected_text_color">#A6AED7</color>
+    <dimen name="usersettings_fragment_profile_picture_width">64dp</dimen>
+    <dimen name="usersettings_fragment_profile_picture_height">64dp</dimen>
+</resources>
diff --git a/samples/Scrumptious/src/com/example/scrumptious/BaseListElement.java b/samples/Scrumptious/src/com/example/scrumptious/BaseListElement.java
new file mode 100644
index 000000000..5cd8cff35
--- /dev/null
+++ b/samples/Scrumptious/src/com/example/scrumptious/BaseListElement.java
@@ -0,0 +1,175 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.scrumptious;
+
+import android.content.Intent;
+import android.graphics.drawable.Drawable;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.BaseAdapter;
+
+import com.facebook.share.model.ShareOpenGraphAction;
+
+/**
+ * Base class for a list element in the Scrumptious main display, consisting of an
+ * icon to the left, and a two line display to the right.
+ */
+public abstract class BaseListElement {
+
+    private Drawable icon;
+    private String text1;
+    private String text2;
+    private BaseAdapter adapter;
+    private int requestCode;
+
+    /**
+     * Constructs a new list element.
+     *
+     * @param icon the drawable for the icon
+     * @param text1 the first row of text
+     * @param text2 the second row of text
+     * @param requestCode the requestCode to start new Activities with
+     */
+    public BaseListElement(Drawable icon, String text1, String text2, int requestCode) {
+        this.icon = icon;
+        this.text1 = text1;
+        this.text2 = text2;
+        this.requestCode = requestCode;
+    }
+
+    /**
+     * The Adapter associated with this list element (used for notifying that the
+     * underlying dataset has changed).
+     * @param adapter the adapter associated with this element
+     */
+    public void setAdapter(BaseAdapter adapter) {
+        this.adapter = adapter;
+    }
+
+    /**
+     * Returns the icon.
+     *
+     * @return the icon
+     */
+    public Drawable getIcon() {
+        return icon;
+    }
+
+    /**
+     * Returns the first row of text.
+     *
+     * @return the first row of text
+     */
+    public String getText1() {
+        return text1;
+    }
+
+    /**
+     * Returns the second row of text.
+     *
+     * @return the second row of text
+     */
+    public String getText2() {
+        return text2;
+    }
+
+    /**
+     * Returns the requestCode for starting new Activities.
+     *
+     * @return the requestCode
+     */
+    public int getRequestCode() {
+        return requestCode;
+    }
+
+    /**
+     * Sets the first row of text.
+     *
+     * @param text1 text to set on the first row
+     */
+    public void setText1(String text1) {
+        this.text1 = text1;
+        if (adapter != null) {
+            adapter.notifyDataSetChanged();
+        }
+    }
+
+    /**
+     * Sets the second row of text.
+     *
+     * @param text2 text to set on the second row
+     */
+    public void setText2(String text2) {
+        this.text2 = text2;
+        if (adapter != null) {
+            adapter.notifyDataSetChanged();
+        }
+    }
+
+    /**
+     * Returns the OnClickListener associated with this list element. To be
+     * overridden by the subclasses.
+     *
+     * @return the OnClickListener associated with this list element
+     */
+    protected abstract View.OnClickListener getOnClickListener();
+
+    /**
+     * Populate an OpenGraphAction with the results of this list element.
+     *
+     * @param actionBuilder the builder to populate with data
+     */
+    protected abstract void populateOpenGraphAction(ShareOpenGraphAction.Builder actionBuilder);
+
+    /**
+     * Callback if the OnClickListener happens to launch a new Activity.
+     *
+     * @param data the data associated with the result
+     */
+    protected void onActivityResult(Intent data) {}
+
+    /**
+     * Save the state of the current element.
+     *
+     * @param bundle the bundle to save to
+     */
+    protected void onSaveInstanceState(Bundle bundle) {}
+
+    /**
+     * Restore the state from the saved bundle. Returns true if the
+     * state was restored.
+     *
+     * @param savedState the bundle to restore from
+     * @return true if state was restored
+     */
+    protected boolean restoreState(Bundle savedState) {
+        return false;
+    }
+
+    /**
+     * Notifies the associated Adapter that the underlying data has changed,
+     * and to re-layout the view.
+     */
+    protected void notifyDataChanged() {
+        adapter.notifyDataSetChanged();
+    }
+
+}
diff --git a/samples/Scrumptious/src/com/example/scrumptious/FullListView.java b/samples/Scrumptious/src/com/example/scrumptious/FullListView.java
new file mode 100644
index 000000000..0d6f84c80
--- /dev/null
+++ b/samples/Scrumptious/src/com/example/scrumptious/FullListView.java
@@ -0,0 +1,63 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.scrumptious;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.view.View;
+import android.widget.ListAdapter;
+import android.widget.ListView;
+
+/**
+ * A subclass of ListView that will always show the full list of elements.
+ * This allows a ListView to be embedded inside a ScrollView.
+ */
+public class FullListView extends ListView {
+
+    public FullListView(Context context) {
+        super(context);
+    }
+
+    public FullListView(Context context, AttributeSet attributeSet) {
+        super(context, attributeSet);
+    }
+
+    public FullListView(Context context, AttributeSet attributeSet, int defStyle) {
+        super(context, attributeSet, defStyle);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+        int width = getMeasuredWidth();
+        int height = 0;
+        ListAdapter adapter = getAdapter();
+        int count = adapter != null ? adapter.getCount() : 0;
+        for (int i = 0; i < count; i++) {
+            View childView = adapter.getView(i, null, this);
+            childView.measure(MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED),
+                    MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED));
+            height += childView.getMeasuredHeight();
+        }
+        height += getDividerHeight() * (count-1);
+        setMeasuredDimension(width, height);
+    }
+}
diff --git a/samples/Scrumptious/src/com/example/scrumptious/MainActivity.java b/samples/Scrumptious/src/com/example/scrumptious/MainActivity.java
new file mode 100644
index 000000000..92e833d22
--- /dev/null
+++ b/samples/Scrumptious/src/com/example/scrumptious/MainActivity.java
@@ -0,0 +1,168 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.scrumptious;
+
+import android.app.Activity;
+import android.app.Fragment;
+import android.app.FragmentManager;
+import android.app.FragmentTransaction;
+import android.content.Intent;
+import android.os.Bundle;
+
+import com.facebook.AccessToken;
+import com.facebook.AccessTokenTracker;
+import com.facebook.appevents.AppEventsLogger;
+import com.facebook.CallbackManager;
+
+public class MainActivity extends Activity {
+
+    private static final String USER_SKIPPED_LOGIN_KEY = "user_skipped_login";
+
+    private static final int SPLASH = 0;
+    private static final int SELECTION = 1;
+    private static final int SETTINGS = 2;
+    private static final int FRAGMENT_COUNT = SETTINGS +1;
+
+    private Fragment[] fragments = new Fragment[FRAGMENT_COUNT];
+    private boolean isResumed = false;
+    private boolean userSkippedLogin = false;
+    private AccessTokenTracker accessTokenTracker;
+    private CallbackManager callbackManager;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        if (savedInstanceState != null) {
+            userSkippedLogin = savedInstanceState.getBoolean(USER_SKIPPED_LOGIN_KEY);
+        }
+        callbackManager = CallbackManager.Factory.create();
+
+        accessTokenTracker = new AccessTokenTracker() {
+            @Override
+            protected void onCurrentAccessTokenChanged(AccessToken oldAccessToken,
+                                                       AccessToken currentAccessToken) {
+                if (isResumed) {
+                    FragmentManager manager = getFragmentManager();
+                    int backStackSize = manager.getBackStackEntryCount();
+                    for (int i = 0; i < backStackSize; i++) {
+                        manager.popBackStack();
+                    }
+                    if (currentAccessToken != null) {
+                        showFragment(SELECTION, false);
+                    } else {
+                        showFragment(SPLASH, false);
+                    }
+                }
+            }
+        };
+
+        setContentView(R.layout.main);
+
+        FragmentManager fm = getFragmentManager();
+        SplashFragment splashFragment = (SplashFragment) fm.findFragmentById(R.id.splashFragment);
+        fragments[SPLASH] = splashFragment;
+        fragments[SELECTION] = fm.findFragmentById(R.id.selectionFragment);
+        fragments[SETTINGS] = fm.findFragmentById(R.id.userSettingsFragment);
+
+        FragmentTransaction transaction = fm.beginTransaction();
+        for(int i = 0; i < fragments.length; i++) {
+            transaction.hide(fragments[i]);
+        }
+        transaction.commit();
+
+        splashFragment.setSkipLoginCallback(new SplashFragment.SkipLoginCallback() {
+            @Override
+            public void onSkipLoginPressed() {
+                userSkippedLogin = true;
+                showFragment(SELECTION, false);
+            }
+        });
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        isResumed = true;
+
+        if (AccessToken.getCurrentAccessToken() != null) {
+            // if the user already logged in, try to show the selection fragment
+            showFragment(SELECTION, false);
+            userSkippedLogin = false;
+        } else if (userSkippedLogin) {
+            showFragment(SELECTION, false);
+        } else {
+            // otherwise present the splash screen and ask the user to login,
+            // unless the user explicitly skipped.
+            showFragment(SPLASH, false);
+        }
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        isResumed = false;
+    }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        callbackManager.onActivityResult(requestCode, resultCode, data);
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        accessTokenTracker.stopTracking();
+    }
+
+    @Override
+    protected void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+
+        outState.putBoolean(USER_SKIPPED_LOGIN_KEY, userSkippedLogin);
+    }
+
+    public void showSettingsFragment() {
+        showFragment(SETTINGS, true);
+    }
+
+    public void showSplashFragment() {
+        showFragment(SPLASH, true);
+    }
+
+
+    private void showFragment(int fragmentIndex, boolean addToBackStack) {
+        FragmentManager fm = getFragmentManager();
+        FragmentTransaction transaction = fm.beginTransaction();
+        for (int i = 0; i < fragments.length; i++) {
+            if (i == fragmentIndex) {
+                transaction.show(fragments[i]);
+            } else {
+                transaction.hide(fragments[i]);
+            }
+        }
+        if (addToBackStack) {
+            transaction.addToBackStack(null);
+        }
+        transaction.commit();
+    }
+}
diff --git a/samples/Scrumptious/src/com/example/scrumptious/PickerActivity.java b/samples/Scrumptious/src/com/example/scrumptious/PickerActivity.java
new file mode 100644
index 000000000..1d8a57bc6
--- /dev/null
+++ b/samples/Scrumptious/src/com/example/scrumptious/PickerActivity.java
@@ -0,0 +1,273 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.scrumptious;
+
+import android.Manifest;
+import android.annotation.SuppressLint;
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.app.Fragment;
+import android.app.FragmentManager;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.pm.PackageManager;
+import android.location.Criteria;
+import android.location.Location;
+import android.location.LocationListener;
+import android.location.LocationManager;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Bundle;
+import android.os.Looper;
+import android.widget.Toast;
+import com.facebook.FacebookException;
+import com.example.scrumptious.picker.FriendPickerFragment;
+import com.example.scrumptious.picker.PickerFragment;
+import com.example.scrumptious.picker.PlacePickerFragment;
+
+/**
+ * The PickerActivity enhances the Friend or Place Picker by adding a title
+ * and a Done button. The selection results are saved in the ScrumptiousApplication
+ * instance.
+ */
+public class PickerActivity extends Activity {
+    public static final Uri FRIEND_PICKER = Uri.parse("picker://friend");
+    public static final Uri PLACE_PICKER = Uri.parse("picker://place");
+
+    private static final int SEARCH_RADIUS_METERS = 1000;
+    private static final int SEARCH_RESULT_LIMIT = 50;
+    private static final String SEARCH_TEXT = "Restaurant";
+    private static final int LOCATION_CHANGE_THRESHOLD = 50; // meters
+
+    private FriendPickerFragment friendPickerFragment;
+    private PlacePickerFragment placePickerFragment;
+    private LocationListener locationListener;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.pickers);
+
+        Bundle args = getIntent().getExtras();
+        FragmentManager manager = getFragmentManager();
+        Fragment fragmentToShow = null;
+        Uri intentUri = getIntent().getData();
+
+        if (FRIEND_PICKER.equals(intentUri)) {
+            if (savedInstanceState == null) {
+                friendPickerFragment = new FriendPickerFragment();
+                friendPickerFragment.setSettingsFromBundle(args);
+                friendPickerFragment.setFriendPickerType(FriendPickerFragment.FriendPickerType.TAGGABLE_FRIENDS);
+            } else {
+                friendPickerFragment = (FriendPickerFragment) manager.findFragmentById(R.id.picker_fragment);;
+            }
+
+            friendPickerFragment.setOnErrorListener(new PickerFragment.OnErrorListener() {
+                @Override
+                public void onError(PickerFragment fragment, FacebookException error) {
+                    PickerActivity.this.onError(error);
+                }
+            });
+            friendPickerFragment.setOnDoneButtonClickedListener(new PickerFragment.OnDoneButtonClickedListener() {
+                @Override
+                public void onDoneButtonClicked(PickerFragment fragment) {
+                    finishActivity();
+                }
+            });
+            fragmentToShow = friendPickerFragment;
+
+        } else if (PLACE_PICKER.equals(intentUri)) {
+            if (savedInstanceState == null) {
+                placePickerFragment = new PlacePickerFragment();
+                placePickerFragment.setSettingsFromBundle(args);
+            } else {
+                placePickerFragment = (PlacePickerFragment) manager.findFragmentById(R.id.picker_fragment);
+            }
+            placePickerFragment.setOnSelectionChangedListener(new PickerFragment.OnSelectionChangedListener() {
+                @Override
+                public void onSelectionChanged(PickerFragment fragment) {
+                    finishActivity(); // call finish since you can only pick one place
+                }
+            });
+            placePickerFragment.setOnErrorListener(new PickerFragment.OnErrorListener() {
+                @Override
+                public void onError(PickerFragment fragment, FacebookException error) {
+                    PickerActivity.this.onError(error);
+                }
+            });
+            placePickerFragment.setOnDoneButtonClickedListener(new PickerFragment.OnDoneButtonClickedListener() {
+                @Override
+                public void onDoneButtonClicked(PickerFragment fragment) {
+                    finishActivity();
+                }
+            });
+            fragmentToShow = placePickerFragment;
+        } else {
+            // Nothing to do, finish
+            setResult(RESULT_CANCELED);
+            finish();
+            return;
+        }
+
+        manager.beginTransaction().replace(R.id.picker_fragment, fragmentToShow).commit();
+    }
+
+    @Override
+    @SuppressLint("MissingPermission")
+    protected void onStart() {
+        super.onStart();
+        if (FRIEND_PICKER.equals(getIntent().getData())) {
+            try {
+                friendPickerFragment.loadData(false);
+            } catch (Exception ex) {
+                onError(ex);
+            }
+        } else if (PLACE_PICKER.equals(getIntent().getData())) {
+            try {
+                Location location = null;
+                Criteria criteria = new Criteria();
+                LocationManager locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
+                String bestProvider = locationManager.getBestProvider(criteria, false);
+                if (bestProvider != null && checkForLocationPermissionsAndRequest()) {
+                    location = locationManager.getLastKnownLocation(bestProvider);
+                    if (locationManager.isProviderEnabled(bestProvider) && locationListener == null) {
+                        locationListener = new LocationListener() {
+                            @Override
+                            public void onLocationChanged(Location location) {
+                                boolean updateLocation = true;
+                                Location prevLocation = placePickerFragment.getLocation();
+                                if (prevLocation != null) {
+                                    updateLocation = location.distanceTo(prevLocation) >= LOCATION_CHANGE_THRESHOLD;
+                                }
+                                if (updateLocation) {
+                                    placePickerFragment.setLocation(location);
+                                    placePickerFragment.loadData(true);
+                                }
+                            }
+                            @Override
+                            public void onStatusChanged(String s, int i, Bundle bundle) {
+                            }
+                            @Override
+                            public void onProviderEnabled(String s) {
+                            }
+                            @Override
+                            public void onProviderDisabled(String s) {
+                            }
+                        };
+                        locationManager.requestLocationUpdates(bestProvider, 1, LOCATION_CHANGE_THRESHOLD,
+                                locationListener, Looper.getMainLooper());
+                    }
+                }
+                if (location != null) {
+                    placePickerFragment.setLocation(location);
+                    placePickerFragment.setRadiusInMeters(SEARCH_RADIUS_METERS);
+                    placePickerFragment.setSearchText(SEARCH_TEXT);
+                    placePickerFragment.setResultsLimit(SEARCH_RESULT_LIMIT);
+                    placePickerFragment.loadData(false);
+                }
+            } catch (Exception ex) {
+                onError(ex);
+            }
+        }
+    }
+
+    @Override
+    @SuppressLint("MissingPermission")
+    protected void onStop() {
+        super.onStop();
+        if (locationListener != null) {
+            if (hasLocationPermissions()) {
+                LocationManager locationManager =
+                        (LocationManager)getSystemService(Context.LOCATION_SERVICE);
+                locationManager.removeUpdates(locationListener);
+            }
+            locationListener = null;
+        }
+    }
+
+    private void onError(Exception error) {
+        String text = getString(R.string.exception, error.getMessage());
+        Toast toast = Toast.makeText(this, text, Toast.LENGTH_SHORT);
+        toast.show();
+    }
+
+    private void onError(String error, final boolean finishActivity) {
+        AlertDialog.Builder builder = new AlertDialog.Builder(this);
+        builder.setTitle(R.string.error_dialog_title).
+                setMessage(error).
+                setPositiveButton(R.string.error_dialog_button_text, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialogInterface, int i) {
+                        if (finishActivity) {
+                            finishActivity();
+                        }
+                    }
+                });
+        builder.show();
+    }
+
+    private void finishActivity() {
+        ScrumptiousApplication app = (ScrumptiousApplication) getApplication();
+        if (FRIEND_PICKER.equals(getIntent().getData())) {
+            if (friendPickerFragment != null) {
+                app.setSelectedUsers(friendPickerFragment.getSelection());
+            }
+        } else if (PLACE_PICKER.equals(getIntent().getData())) {
+            if (placePickerFragment != null) {
+                app.setSelectedPlace(placePickerFragment.getSelection());
+            }
+        }
+        setResult(RESULT_OK, null);
+        finish();
+    }
+
+    private boolean checkForLocationPermissionsAndRequest() {
+        if (!hasLocationPermissions()) {
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+                requestPermissions(
+                        new String[]{
+                                Manifest.permission.ACCESS_FINE_LOCATION,
+                                Manifest.permission.ACCESS_COARSE_LOCATION
+                        },
+                        0);
+            }
+
+            return false;
+        } else {
+            return true;
+        }
+    }
+
+    private boolean hasLocationPermissions() {
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
+            return true;
+        }
+
+        if (checkSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION)
+                != PackageManager.PERMISSION_GRANTED
+                && checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION)
+                != PackageManager.PERMISSION_GRANTED) {
+            return false;
+        }
+
+        return true;
+    }
+}
diff --git a/samples/Scrumptious/src/com/example/scrumptious/ScrumptiousApplication.java b/samples/Scrumptious/src/com/example/scrumptious/ScrumptiousApplication.java
new file mode 100644
index 000000000..ddae0a182
--- /dev/null
+++ b/samples/Scrumptious/src/com/example/scrumptious/ScrumptiousApplication.java
@@ -0,0 +1,62 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.scrumptious;
+
+import android.app.Application;
+
+import com.facebook.FacebookSdk;
+import com.facebook.appevents.AppEventsLogger;
+
+import org.json.JSONObject;
+
+import java.util.List;
+
+/**
+ * Use a custom Application class to pass state data between Activities.
+ */
+public class ScrumptiousApplication extends Application {
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        FacebookSdk.sdkInitialize(getApplicationContext());
+        AppEventsLogger.activateApp(this);
+    }
+
+    private List<JSONObject> selectedUsers;
+    private JSONObject selectedPlace;
+
+    public List<JSONObject> getSelectedUsers() {
+        return selectedUsers;
+    }
+
+    public void setSelectedUsers(List<JSONObject> users) {
+        selectedUsers = users;
+    }
+
+    public JSONObject getSelectedPlace() {
+        return selectedPlace;
+    }
+
+    public void setSelectedPlace(JSONObject place) {
+        this.selectedPlace = place;
+    }
+}
diff --git a/samples/Scrumptious/src/com/example/scrumptious/SelectionFragment.java b/samples/Scrumptious/src/com/example/scrumptious/SelectionFragment.java
new file mode 100644
index 000000000..bc3f54f0a
--- /dev/null
+++ b/samples/Scrumptious/src/com/example/scrumptious/SelectionFragment.java
@@ -0,0 +1,1104 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.scrumptious;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.app.Fragment;
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.database.DataSetObserver;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.Matrix;
+import android.net.Uri;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.os.Environment;
+import android.provider.MediaStore;
+import android.util.Log;
+import android.util.Pair;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.WindowManager;
+import android.widget.*;
+
+import com.facebook.*;
+import com.facebook.internal.Utility;
+import com.facebook.login.DefaultAudience;
+import com.facebook.login.LoginManager;
+import com.facebook.share.ShareApi;
+import com.facebook.share.Sharer;
+import com.facebook.share.model.ShareContent;
+import com.facebook.share.model.ShareOpenGraphContent;
+import com.facebook.share.model.ShareOpenGraphObject;
+import com.facebook.share.model.SharePhoto;
+import com.facebook.share.model.ShareOpenGraphAction;
+import com.facebook.share.widget.MessageDialog;
+import com.facebook.share.widget.SendButton;
+import com.facebook.share.widget.ShareButton;
+import com.facebook.login.widget.ProfilePictureView;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.*;
+import java.net.URLEncoder;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Set;
+import java.util.UUID;
+
+/**
+ * Fragment that represents the main selection screen for Scrumptious.
+ */
+public class SelectionFragment extends Fragment {
+
+    private static final String TAG = "SelectionFragment";
+    private static final String MEAL_OBJECT_TYPE = "fb_sample_scrumps:meal";
+    private static final String EAT_ACTION_TYPE = "fb_sample_scrumps:eat";
+
+    private static final String PENDING_ANNOUNCE_KEY = "pendingAnnounce";
+    private static final int USER_GENERATED_MIN_SIZE = 480;
+    private static final float MAX_TEXTURE_SIZE = 1024f;
+
+    private static final String PERMISSION = "publish_actions";
+
+    private TextView announceButton;
+    private ShareButton shareButton;
+    private SendButton messageButton;
+    private ListView listView;
+    private List<BaseListElement> listElements;
+    private ProfilePictureView profilePictureView;
+    private boolean pendingAnnounce;
+    private MainActivity activity;
+    private ProgressDialog announceProgressDialog;
+
+    private Uri photoUri;
+    private ImageView photoThumbnail;
+    private ScaleAndSetImageTask runningImageTask;
+
+    private CallbackManager callbackManager;
+    private AccessTokenTracker accessTokenTracker;
+    private FacebookCallback<Sharer.Result> shareCallback =
+            new FacebookCallback<Sharer.Result>() {
+                @Override
+                public void onCancel() {
+                    processDialogResults(null, true);
+                }
+
+                @Override
+                public void onError(FacebookException error) {
+                    if (error instanceof FacebookGraphResponseException) {
+                        FacebookGraphResponseException graphError =
+                                (FacebookGraphResponseException) error;
+                        if (graphError.getGraphResponse() != null) {
+                            handleError(graphError.getGraphResponse());
+                            return;
+                        }
+                    }
+                    processDialogError(error);
+                }
+
+                @Override
+                public void onSuccess(Sharer.Result result) {
+                    processDialogResults(result.getPostId(), false);
+                }
+            };
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        activity = (MainActivity) getActivity();
+        callbackManager = CallbackManager.Factory.create();
+
+        accessTokenTracker = new AccessTokenTracker() {
+            @Override
+            protected void onCurrentAccessTokenChanged(AccessToken oldAccessToken,
+                                                       AccessToken currentAccessToken) {
+                updateWithToken(currentAccessToken);
+            }
+        };
+    }
+
+    private void updateWithToken(AccessToken currentAccessToken) {
+        if (currentAccessToken != null) {
+            tokenUpdated(currentAccessToken);
+            profilePictureView.setProfileId(currentAccessToken.getUserId());
+            announceButton.setVisibility(View.VISIBLE);
+        } else {
+            profilePictureView.setProfileId(null);
+            announceButton.setVisibility(View.GONE);
+        }
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        super.onCreateView(inflater, container, savedInstanceState);
+        View view = inflater.inflate(R.layout.selection, container, false);
+
+        profilePictureView = (ProfilePictureView) view.findViewById(R.id.selection_profile_pic);
+        profilePictureView.setCropped(true);
+        announceButton = (TextView) view.findViewById(R.id.announce_text);
+        shareButton = (ShareButton) view.findViewById(R.id.share_button);
+        messageButton = (SendButton) view.findViewById(R.id.message_button);
+        listView = (ListView) view.findViewById(R.id.selection_list);
+        photoThumbnail = (ImageView) view.findViewById(R.id.selected_image);
+
+        announceProgressDialog = new ProgressDialog(getActivity());
+        announceProgressDialog.setMessage(getString(R.string.progress_dialog_text));
+
+        if (MessageDialog.canShow(ShareOpenGraphContent.class)) {
+            messageButton.setVisibility(View.VISIBLE);
+        }
+
+        announceButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                handleAnnounce();
+            }
+        });
+
+        messageButton.registerCallback(callbackManager, shareCallback);
+        messageButton.setFragment(this);
+        shareButton.registerCallback(callbackManager, shareCallback);
+        shareButton.setFragment(this);
+
+        profilePictureView.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                if (AccessToken.getCurrentAccessToken() != null) {
+                    activity.showSettingsFragment();
+                } else {
+                    activity.showSplashFragment();
+                }
+            }
+        });
+
+        init(savedInstanceState);
+        updateWithToken(AccessToken.getCurrentAccessToken());
+
+        return view;
+    }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        if (resultCode == Activity.RESULT_OK && requestCode >= 0 && requestCode < listElements.size()) {
+            listElements.get(requestCode).onActivityResult(data);
+        } else {
+            callbackManager.onActivityResult(requestCode, resultCode, data);
+        }
+    }
+
+    @Override
+    public void onSaveInstanceState(Bundle bundle) {
+        super.onSaveInstanceState(bundle);
+        for (BaseListElement listElement : listElements) {
+            listElement.onSaveInstanceState(bundle);
+        }
+        bundle.putBoolean(PENDING_ANNOUNCE_KEY, pendingAnnounce);
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        accessTokenTracker.stopTracking();
+        activity = null;
+    }
+
+    private void processDialogError(FacebookException error) {
+        enableButtons();
+        announceProgressDialog.dismiss();
+
+        if (error != null) {
+            new AlertDialog.Builder(getActivity())
+                    .setPositiveButton(R.string.error_dialog_button_text, null)
+                    .setTitle(R.string.error_dialog_title)
+                    .setMessage(error.getLocalizedMessage())
+                    .show();
+        }
+    }
+
+    private void processDialogResults(String postId, boolean isCanceled) {
+        enableButtons();
+        announceProgressDialog.dismiss();
+
+        boolean resetSelections = true;
+        if (isCanceled) {
+            // Leave selections alone if user canceled.
+            resetSelections = false;
+            showCancelResponse();
+        } else {
+            showSuccessResponse(postId);
+        }
+
+        if (resetSelections) {
+            init(null);
+        }
+    }
+
+    private void showRejectedPermissionError() {
+        new AlertDialog.Builder(getActivity())
+                .setPositiveButton(R.string.error_dialog_button_text, null)
+                .setTitle(R.string.error_dialog_title)
+                .setMessage(R.string.rejected_publish_permission)
+                .show();
+    }
+
+    /**
+     * Notifies that the token has been updated.
+     */
+    private void tokenUpdated(AccessToken currentAccessToken) {
+        if (pendingAnnounce) {
+            Set<String> permissions = AccessToken.getCurrentAccessToken().getPermissions();
+            if (currentAccessToken == null
+                    || !currentAccessToken.getPermissions().contains(PERMISSION)) {
+                pendingAnnounce = false;
+                showRejectedPermissionError();
+                return;
+            }
+            handleAnnounce();
+        }
+    }
+
+    private void updateShareContent() {
+        ShareContent content = createOpenGraphContent();
+        if (content != null) {
+            enableButtons();
+        } else {
+            disableButtons();
+        }
+
+        shareButton.setShareContent(content);
+        messageButton.setShareContent(content);
+    }
+
+    private void disableButtons() {
+        announceButton.setEnabled(false);
+        shareButton.setEnabled(false);
+        messageButton.setEnabled(false);
+    }
+
+    private void enableButtons() {
+        announceButton.setEnabled(true);
+        shareButton.setEnabled(true);
+        messageButton.setEnabled(true);
+    }
+
+    /**
+     * Resets the view to the initial defaults.
+     */
+    private void init(Bundle savedInstanceState) {
+        disableButtons();
+
+        listElements = new ArrayList<BaseListElement>();
+
+        listElements.add(new EatListElement(0));
+        listElements.add(new LocationListElement(1));
+        listElements.add(new PeopleListElement(2));
+        listElements.add(new PhotoListElement(3));
+
+        if (savedInstanceState != null) {
+            for (BaseListElement listElement : listElements) {
+                listElement.restoreState(savedInstanceState);
+            }
+            pendingAnnounce = savedInstanceState.getBoolean(PENDING_ANNOUNCE_KEY, false);
+        }
+        ActionListAdapter listAdapter = new ActionListAdapter(
+                getActivity(),
+                R.id.selection_list,
+                listElements);
+        listAdapter.registerDataSetObserver(new DataSetObserver() {
+            @Override
+            public void onChanged() {
+                updateShareContent();
+            }
+        });
+        listView.setAdapter(listAdapter);
+
+        AccessToken accessToken = AccessToken.getCurrentAccessToken();
+        if (accessToken != null) {
+            profilePictureView.setProfileId(accessToken.getUserId());
+        }
+
+        updateShareContent();
+    }
+
+    private void handleAnnounce() {
+        Set<String> permissions = AccessToken.getCurrentAccessToken().getPermissions();
+        if (!permissions.contains(PERMISSION)) {
+            pendingAnnounce = true;
+            requestPublishPermissions();
+            return;
+        } else {
+            pendingAnnounce = false;
+        }
+
+        disableButtons();
+        announceProgressDialog.show();
+        ShareApi.share(createOpenGraphContent(), shareCallback);
+    }
+
+    private ShareOpenGraphContent createOpenGraphContent() {
+        ShareOpenGraphAction.Builder actionBuilder = createEatActionBuilder();
+
+        boolean userGenerated = false;
+        if (photoUri != null) {
+            String photoUriString = photoUri.toString();
+            Pair<File, Integer> fileAndMinDimension = getImageFileAndMinDimension();
+            userGenerated = fileAndMinDimension.second >= USER_GENERATED_MIN_SIZE;
+
+            if (fileAndMinDimension != null) {
+                final SharePhoto actionPhoto = new SharePhoto.Builder()
+                        .setImageUrl(Uri.parse(photoUriString))
+                        .setUserGenerated(userGenerated)
+                        .build();
+                actionBuilder.putPhotoArrayList("image", new ArrayList<SharePhoto>() {{
+                    add(actionPhoto);
+                }});
+            }
+        }
+
+        return new ShareOpenGraphContent.Builder()
+                .setAction(actionBuilder.build())
+                .setPreviewPropertyName("meal")
+                .build();
+    }
+
+    private File getTempPhotoStagingDirectory() {
+        File photoDir = new File(getActivity().getCacheDir(), "photoFiles");
+        photoDir.mkdirs();
+
+        return photoDir;
+    }
+
+    private Pair<File, Integer> getImageFileAndMinDimension() {
+        File photoFile = null;
+        String photoUriString = photoUri.toString();
+        if (photoUriString.startsWith("file://")) {
+            photoFile = new File(photoUri.getPath());
+        } else if (photoUriString.startsWith("content://")) {
+            FileOutputStream photoOutputStream = null;
+            InputStream contentInputStream = null;
+            try {
+                Uri photoUri = Uri.parse(photoUriString);
+                photoFile = new File(
+                        getTempPhotoStagingDirectory(),
+                        URLEncoder.encode(UUID.randomUUID().toString(), "UTF-8"));
+
+                photoOutputStream = new FileOutputStream(photoFile);
+                contentInputStream = getActivity()
+                        .getContentResolver().openInputStream(photoUri);
+
+                byte[] buffer = new byte[1024];
+                int len;
+                while ((len = contentInputStream.read(buffer)) > 0) {
+                    photoOutputStream.write(buffer, 0, len);
+                }
+            } catch (FileNotFoundException fnfe) {
+                Log.e(TAG, "photo not found", fnfe);
+            } catch (UnsupportedEncodingException uee) {
+                Log.e(TAG, "bad photo name", uee);
+            } catch (IOException ioe) {
+                Log.e(TAG, "can't copy photo", ioe);
+            } finally {
+                try {
+                    if (photoOutputStream != null) {
+                        photoOutputStream.close();
+                    }
+                    if (contentInputStream != null) {
+                        contentInputStream.close();
+                    }
+                } catch (IOException ioe) {
+                    Log.e(TAG, "can't close streams");
+                }
+            }
+        }
+
+        if (photoFile != null) {
+            InputStream is = null;
+            try {
+                is = new FileInputStream(photoFile);
+
+                // We only want to get the bounds of the image, rather than load the whole thing.
+                BitmapFactory.Options options = new BitmapFactory.Options();
+                options.inJustDecodeBounds = true;
+                BitmapFactory.decodeStream(is, null, options);
+
+                return new Pair<>(
+                        photoFile, Math.min(options.outWidth, options.outHeight));
+            } catch (Exception e) {
+                return null;
+            } finally {
+                Utility.closeQuietly(is);
+            }
+        }
+        return null;
+    }
+
+    private ShareOpenGraphAction.Builder createEatActionBuilder() {
+        ShareOpenGraphAction.Builder builder = new ShareOpenGraphAction.Builder()
+                .setActionType(EAT_ACTION_TYPE);
+        for (BaseListElement element : listElements) {
+            element.populateOpenGraphAction(builder);
+        }
+
+        return builder;
+    }
+
+    private void requestPublishPermissions() {
+        LoginManager.getInstance()
+                .setDefaultAudience(DefaultAudience.FRIENDS)
+                .logInWithPublishPermissions(this, Arrays.asList(PERMISSION));
+    }
+
+    private void showSuccessResponse(String postId) {
+        String dialogBody;
+        if (postId != null) {
+            dialogBody = String.format(getString(R.string.result_dialog_text_with_id), postId);
+        } else {
+            dialogBody = getString(R.string.result_dialog_text_default);
+        }
+        showResultDialog(dialogBody);
+    }
+
+    private void showCancelResponse() {
+        showResultDialog(getString(R.string.result_dialog_text_canceled));
+    }
+
+    private void showResultDialog(String dialogBody) {
+        new AlertDialog.Builder(getActivity())
+                .setPositiveButton(R.string.result_dialog_button_text, null)
+                .setTitle(R.string.result_dialog_title)
+                .setMessage(dialogBody)
+                .show();
+    }
+
+    private void handleError(GraphResponse response) {
+        FacebookRequestError error = response.getError();
+        DialogInterface.OnClickListener listener = null;
+        String dialogBody = null;
+
+        if (error == null) {
+            dialogBody = getString(R.string.error_dialog_default_text);
+        } else {
+            switch (error.getCategory()) {
+                case LOGIN_RECOVERABLE:
+                    // There is a login issue that can be resolved by the LoginManager.
+                    LoginManager.getInstance().resolveError(this, response);
+                    return;
+
+                case TRANSIENT:
+                    dialogBody = getString(R.string.error_transient);
+                    break;
+
+                case OTHER:
+                default:
+                    // an unknown issue occurred, this could be a code error, or
+                    // a server side issue, log the issue, and either ask the
+                    // user to retry, or file a bug
+                    dialogBody = getString(R.string.error_unknown, error.getErrorMessage());
+                    break;
+            }
+        }
+
+        String title = error.getErrorUserTitle();
+        String message = error.getErrorUserMessage();
+        if (message == null) {
+            message = dialogBody;
+        }
+        if (title == null) {
+            title = getResources().getString(R.string.error_dialog_title);
+        }
+
+        new AlertDialog.Builder(getActivity())
+                .setPositiveButton(R.string.error_dialog_button_text, listener)
+                .setTitle(title)
+                .setMessage(message)
+                .show();
+    }
+
+    private void startPickerActivity(Uri data, int requestCode) {
+        Intent intent = new Intent();
+        intent.setData(data);
+        intent.setClass(getActivity(), PickerActivity.class);
+        startActivityForResult(intent, requestCode);
+    }
+
+    private class EatListElement extends BaseListElement {
+
+        private static final String FOOD_KEY = "food";
+        private static final String FOOD_URL_KEY = "food_url";
+
+        private final String[] foodChoices;
+        private final String[] foodUrls;
+        private String foodChoiceUrl = null;
+        private String foodChoice = null;
+
+        public EatListElement(int requestCode) {
+            super(getActivity().getResources().getDrawable(R.drawable.add_food),
+                    getActivity().getResources().getString(R.string.action_eating),
+                    null,
+                    requestCode);
+            foodChoices = getActivity().getResources().getStringArray(R.array.food_types);
+            foodUrls = getActivity().getResources().getStringArray(R.array.food_og_urls);
+        }
+
+        @Override
+        protected View.OnClickListener getOnClickListener() {
+            return new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    showMealOptions();
+                }
+            };
+        }
+
+        @Override
+        protected void populateOpenGraphAction(ShareOpenGraphAction.Builder actionBuilder) {
+            if (foodChoice != null && foodChoice.length() > 0) {
+                if (foodChoiceUrl != null && foodChoiceUrl.length() > 0) {
+                    actionBuilder.putString("meal", foodChoiceUrl);
+                } else {
+                    ShareOpenGraphObject mealObject = new ShareOpenGraphObject.Builder()
+                            .putString("og:type", MEAL_OBJECT_TYPE)
+                            .putString("og:title", foodChoice)
+                            .build();
+                    actionBuilder.putObject("meal", mealObject);
+                }
+            }
+        }
+
+        @Override
+        protected void onSaveInstanceState(Bundle bundle) {
+            if (foodChoice != null && foodChoiceUrl != null) {
+                bundle.putString(FOOD_KEY, foodChoice);
+                bundle.putString(FOOD_URL_KEY, foodChoiceUrl);
+            }
+        }
+
+        @Override
+        protected boolean restoreState(Bundle savedState) {
+            String food = savedState.getString(FOOD_KEY);
+            String foodUrl = savedState.getString(FOOD_URL_KEY);
+            if (food != null && foodUrl != null) {
+                foodChoice = food;
+                foodChoiceUrl = foodUrl;
+                setFoodText();
+                return true;
+            }
+            return false;
+        }
+
+        private void showMealOptions() {
+            String title = getActivity().getResources().getString(R.string.select_meal);
+            AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
+            builder.setTitle(title).
+                    setCancelable(true).
+                    setItems(foodChoices, new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialogInterface, int i) {
+                            foodChoiceUrl = foodUrls[i];
+                            if (foodChoiceUrl.length() == 0) {
+                                getCustomFood();
+                            } else {
+                                foodChoice = foodChoices[i];
+                                setFoodText();
+                                notifyDataChanged();
+                            }
+                        }
+                    });
+            builder.show();
+        }
+
+        private void getCustomFood() {
+            String title = getActivity().getResources().getString(R.string.enter_meal);
+            final EditText input = new EditText(getActivity());
+
+            AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
+            builder.setTitle(title)
+                    .setCancelable(true)
+                    .setView(input)
+                    .setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialogInterface, int i) {
+                            foodChoice = input.getText().toString();
+                            setFoodText();
+                            notifyDataChanged();
+                        }
+                    })
+                    .setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialogInterface, int i) {
+                        }
+                    });
+            AlertDialog dialog = builder.create();
+            // always popup the keyboard when the alert dialog shows
+            dialog.getWindow().setSoftInputMode(
+                    WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);
+            dialog.show();
+        }
+
+        private void setFoodText() {
+            if (foodChoice != null && foodChoice.length() > 0) {
+                setText2(foodChoice);
+                enableButtons();
+            } else {
+                setText2(getActivity().getResources().getString(R.string.action_eating_default));
+                disableButtons();
+            }
+        }
+    }
+
+    private class PeopleListElement extends BaseListElement {
+
+        private static final String FRIENDS_KEY = "friends";
+
+        private List<JSONObject> selectedUsers;
+
+        public PeopleListElement(int requestCode) {
+            super(getActivity().getResources().getDrawable(R.drawable.add_friends),
+                    getActivity().getResources().getString(R.string.action_people),
+                    null,
+                    requestCode);
+        }
+
+        @Override
+        protected View.OnClickListener getOnClickListener() {
+            return new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    if (AccessToken.getCurrentAccessToken() != null) {
+                        startPickerActivity(PickerActivity.FRIEND_PICKER, getRequestCode());
+                    } else {
+                        activity.showSplashFragment();
+                    }
+                }
+            };
+        }
+
+        @Override
+        protected void onActivityResult(Intent data) {
+            selectedUsers = ((ScrumptiousApplication) getActivity().getApplication())
+                    .getSelectedUsers();
+            setUsersText();
+            notifyDataChanged();
+        }
+
+        @Override
+        protected void populateOpenGraphAction(ShareOpenGraphAction.Builder actionBuilder) {
+            if (selectedUsers != null && !selectedUsers.isEmpty()) {
+                ArrayList<String> tags = new ArrayList<>();
+                for (JSONObject user : selectedUsers) {
+                    tags.add(user.optString("id"));
+                }
+                actionBuilder.putStringArrayList("tags", tags);
+            }
+        }
+
+        @Override
+        protected void onSaveInstanceState(Bundle bundle) {
+            if (selectedUsers != null) {
+                bundle.putByteArray(FRIENDS_KEY, getByteArray(selectedUsers));
+            }
+        }
+
+        @Override
+        protected boolean restoreState(Bundle savedState) {
+            byte[] bytes = savedState.getByteArray(FRIENDS_KEY);
+            if (bytes != null) {
+                selectedUsers = restoreByteArray(bytes);
+                setUsersText();
+                return true;
+            }
+            return false;
+        }
+
+        private void setUsersText() {
+            String text = null;
+            if (selectedUsers != null) {
+                if (selectedUsers.size() == 1) {
+                    text = String.format(getResources().getString(R.string.single_user_selected),
+                            selectedUsers.get(0).optString("name"));
+                } else if (selectedUsers.size() == 2) {
+                    text = String.format(getResources().getString(R.string.two_users_selected),
+                            selectedUsers.get(0).optString("name"),
+                            selectedUsers.get(1).optString("name"));
+                } else if (selectedUsers.size() > 2) {
+                    text = String.format(getResources().getString(R.string.multiple_users_selected),
+                            selectedUsers.get(0).optString("name"), (selectedUsers.size() - 1));
+                }
+            }
+            if (text == null) {
+                text = getResources().getString(R.string.action_people_default);
+            }
+            setText2(text);
+        }
+
+        private byte[] getByteArray(List<JSONObject> users) {
+            // convert the list of GraphUsers to a list of String where each element is
+            // the JSON representation of the GraphUser so it can be stored in a Bundle
+            List<String> usersAsString = new ArrayList<String>(users.size());
+
+            for (JSONObject user : users) {
+                usersAsString.add(user.toString());
+            }
+            try {
+                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
+                new ObjectOutputStream(outputStream).writeObject(usersAsString);
+                return outputStream.toByteArray();
+            } catch (IOException e) {
+                Log.e(TAG, "Unable to serialize users.", e);
+            }
+            return null;
+        }
+
+        private List<JSONObject> restoreByteArray(byte[] bytes) {
+            try {
+                @SuppressWarnings("unchecked")
+                List<String> usersAsString =
+                        (List<String>) (new ObjectInputStream(
+                                new ByteArrayInputStream(bytes))).readObject();
+                if (usersAsString != null) {
+                    List<JSONObject> users = new ArrayList<JSONObject>(usersAsString.size());
+                    for (String user : usersAsString) {
+                        users.add(new JSONObject(user));
+                    }
+                    return users;
+                }
+            } catch (ClassNotFoundException e) {
+                Log.e(TAG, "Unable to deserialize users.", e);
+            } catch (IOException e) {
+                Log.e(TAG, "Unable to deserialize users.", e);
+            } catch (JSONException e) {
+                Log.e(TAG, "Unable to deserialize users.", e);
+            }
+            return null;
+        }
+    }
+
+    private class LocationListElement extends BaseListElement {
+        private static final String PLACE_KEY = "place";
+
+        private JSONObject selectedPlace = null;
+
+        public LocationListElement(int requestCode) {
+            super(getActivity().getResources().getDrawable(R.drawable.add_location),
+                    getActivity().getResources().getString(R.string.action_location),
+                    null,
+                    requestCode);
+        }
+
+        @Override
+        protected View.OnClickListener getOnClickListener() {
+            return new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    if (AccessToken.getCurrentAccessToken() != null) {
+                        startPickerActivity(PickerActivity.PLACE_PICKER, getRequestCode());
+                    } else {
+                        activity.showSplashFragment();
+                    }
+                }
+            };
+        }
+
+        @Override
+        protected void onActivityResult(Intent data) {
+            selectedPlace = ((ScrumptiousApplication) getActivity().getApplication())
+                    .getSelectedPlace();
+            setPlaceText();
+            notifyDataChanged();
+        }
+
+        @Override
+        protected void populateOpenGraphAction(ShareOpenGraphAction.Builder actionBuilder) {
+            if (selectedPlace != null) {
+                actionBuilder.putString("place", selectedPlace.optString("id"));
+            }
+        }
+
+        @Override
+        protected void onSaveInstanceState(Bundle bundle) {
+            if (selectedPlace != null) {
+                bundle.putString(PLACE_KEY, selectedPlace.toString());
+            }
+        }
+
+        @Override
+        protected boolean restoreState(Bundle savedState) {
+            String place = savedState.getString(PLACE_KEY);
+            if (place != null) {
+                try {
+                    selectedPlace = new JSONObject(place);
+                    setPlaceText();
+                    return true;
+                } catch (JSONException e) {
+                    Log.e(TAG, "Unable to deserialize place.", e);
+                }
+            }
+            return false;
+        }
+
+        private void setPlaceText() {
+            String text = selectedPlace != null ? selectedPlace.optString("name") : null;
+            if (text == null) {
+                text = getResources().getString(R.string.action_location_default);
+            }
+            setText2(text);
+        }
+
+    }
+
+    private class PhotoListElement extends BaseListElement {
+        private static final int CAMERA = 0;
+        private static final int GALLERY = 1;
+        private static final String PHOTO_URI_KEY = "photo_uri";
+        private static final String TEMP_URI_KEY = "temp_uri";
+        private static final String FILE_PREFIX = "scrumptious_img_";
+        private static final String FILE_SUFFIX = ".jpg";
+
+        private Uri tempUri = null;
+
+        public PhotoListElement(int requestCode) {
+            super(getActivity().getResources().getDrawable(R.drawable.add_photo),
+                    getActivity().getResources().getString(R.string.action_photo),
+                    null,
+                    requestCode);
+            photoUri = null;
+            photoThumbnail.setImageDrawable(
+                    getActivity().getResources().getDrawable(R.drawable.placeholder_image));
+            photoThumbnail.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    showPhotoChoice();
+                }
+            });
+        }
+
+        @Override
+        protected View.OnClickListener getOnClickListener() {
+            return new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    showPhotoChoice();
+                }
+            };
+        }
+
+        @Override
+        protected void onActivityResult(Intent data) {
+            if (tempUri != null) {
+                photoUri = tempUri;
+            } else if (data != null) {
+                photoUri = data.getData();
+            }
+            setPhotoThumbnail();
+            setPhotoText();
+        }
+
+        @Override
+        protected void populateOpenGraphAction(ShareOpenGraphAction.Builder actionBuilder) {
+        }
+
+        @Override
+        protected void onSaveInstanceState(Bundle bundle) {
+            if (photoUri != null) {
+                bundle.putParcelable(PHOTO_URI_KEY, photoUri);
+            }
+            if (tempUri != null) {
+                bundle.putParcelable(TEMP_URI_KEY, tempUri);
+            }
+        }
+
+        @Override
+        protected boolean restoreState(Bundle savedState) {
+            photoUri = savedState.getParcelable(PHOTO_URI_KEY);
+            tempUri = savedState.getParcelable(TEMP_URI_KEY);
+            setPhotoText();
+            return true;
+        }
+
+        private void showPhotoChoice() {
+            AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
+            CharSequence camera = getResources().getString(R.string.action_photo_camera);
+            CharSequence gallery = getResources().getString(R.string.action_photo_gallery);
+            builder.setCancelable(true).
+                    setItems(new CharSequence[]{camera, gallery},
+                            new DialogInterface.OnClickListener() {
+                                @Override
+                                public void onClick(DialogInterface dialogInterface, int i) {
+                                    if (i == CAMERA) {
+                                        startCameraActivity();
+                                    } else if (i == GALLERY) {
+                                        startGalleryActivity();
+                                    }
+                                }
+                            });
+            builder.show();
+        }
+
+        private void setPhotoText() {
+            if (photoUri == null) {
+                setText2(getResources().getString(R.string.action_photo_default));
+            } else {
+                setText2(getResources().getString(R.string.action_photo_ready));
+            }
+        }
+
+        private void setPhotoThumbnail() {
+            // The selected image may be too big so scale here
+            if (runningImageTask != null &&
+                    runningImageTask.getStatus() != AsyncTask.Status.FINISHED) {
+                runningImageTask.cancel(true);
+            }
+
+            runningImageTask = new ScaleAndSetImageTask(photoUri);
+            runningImageTask.execute();
+        }
+
+        private void startCameraActivity() {
+            Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
+            tempUri = getTempUri();
+            if (tempUri != null) {
+                intent.putExtra(MediaStore.EXTRA_OUTPUT, tempUri);
+            }
+            startActivityForResult(intent, getRequestCode());
+        }
+
+        private void startGalleryActivity() {
+            tempUri = null;
+            Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
+            intent.setType("image/*");
+            String selectPicture = getResources().getString(R.string.select_picture);
+            startActivityForResult(Intent.createChooser(intent, selectPicture), getRequestCode());
+        }
+
+        private Uri getTempUri() {
+            String imgFileName = FILE_PREFIX + System.currentTimeMillis() + FILE_SUFFIX;
+
+            // Note: on an emulator, you might need to create the "Pictures" directory in
+            //         /mnt/sdcard first
+            //       % adb shell
+            //       % mkdir /mnt/sdcard/Pictures
+            File image = new File(
+                    Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES),
+                    imgFileName);
+            return Uri.fromFile(image);
+        }
+    }
+
+    private class ActionListAdapter extends ArrayAdapter<BaseListElement> {
+        private List<BaseListElement> listElements;
+
+        public ActionListAdapter(
+                Context context, int resourceId, List<BaseListElement> listElements) {
+            super(context, resourceId, listElements);
+            this.listElements = listElements;
+            for (int i = 0; i < listElements.size(); i++) {
+                listElements.get(i).setAdapter(this);
+            }
+        }
+
+        @Override
+        public View getView(int position, View convertView, ViewGroup parent) {
+            View view = convertView;
+            if (view == null) {
+                LayoutInflater inflater =
+                        (LayoutInflater) getActivity().getSystemService(
+                                Context.LAYOUT_INFLATER_SERVICE);
+                view = inflater.inflate(R.layout.listitem, null);
+            }
+
+            BaseListElement listElement = listElements.get(position);
+            if (listElement != null) {
+                view.setOnClickListener(listElement.getOnClickListener());
+                ImageView icon = (ImageView) view.findViewById(R.id.icon);
+                TextView text1 = (TextView) view.findViewById(R.id.text1);
+                TextView text2 = (TextView) view.findViewById(R.id.text2);
+                if (icon != null) {
+                    icon.setImageDrawable(listElement.getIcon());
+                }
+                if (text1 != null) {
+                    text1.setText(listElement.getText1());
+                }
+                if (text2 != null) {
+                    if (listElement.getText2() != null) {
+                        text2.setVisibility(View.VISIBLE);
+                        text2.setText(listElement.getText2());
+                    } else {
+                        text2.setVisibility(View.GONE);
+                    }
+                }
+            }
+            return view;
+        }
+    }
+
+    private class ScaleAndSetImageTask extends AsyncTask<Void, Void, Bitmap> {
+        private final Uri uri;
+
+        public ScaleAndSetImageTask(Uri uri) {
+            this.uri = uri;
+        }
+
+        @Override
+        protected Bitmap doInBackground(Void... params) {
+            try {
+                Bitmap bitmap = MediaStore.Images.Media.getBitmap(
+                        FacebookSdk.getApplicationContext().getContentResolver(), uri);
+                if (bitmap.getHeight() > MAX_TEXTURE_SIZE || bitmap.getWidth() > MAX_TEXTURE_SIZE) {
+                    // We need to scale the image
+                    float scale = Math.min(
+                            MAX_TEXTURE_SIZE / bitmap.getHeight(),
+                            MAX_TEXTURE_SIZE / bitmap.getWidth());
+                    Matrix matrix = new Matrix();
+                    matrix.postScale(scale, scale);
+                    bitmap = Bitmap.createBitmap(
+                            bitmap,
+                            0,
+                            0,
+                            bitmap.getWidth(),
+                            bitmap.getHeight(),
+                            matrix,
+                            false);
+                }
+                return bitmap;
+            } catch (Exception ex) {
+                return null;
+            }
+        }
+
+        protected void onPostExecute(Bitmap result) {
+            if (result != null) {
+                photoThumbnail.setImageBitmap(result);
+            } else {
+                // If we fail just try to set the image from the uri
+                photoThumbnail.setImageURI(photoUri);
+            }
+        }
+    }
+}
diff --git a/samples/Scrumptious/src/com/example/scrumptious/SplashFragment.java b/samples/Scrumptious/src/com/example/scrumptious/SplashFragment.java
new file mode 100644
index 000000000..ca271c2aa
--- /dev/null
+++ b/samples/Scrumptious/src/com/example/scrumptious/SplashFragment.java
@@ -0,0 +1,98 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.scrumptious;
+
+import android.app.Fragment;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.facebook.CallbackManager;
+import com.facebook.FacebookCallback;
+import com.facebook.FacebookException;
+import com.facebook.login.LoginResult;
+import com.facebook.login.widget.LoginButton;
+
+public class SplashFragment extends Fragment {
+
+    private LoginButton loginButton;
+    private TextView skipLoginButton;
+    private SkipLoginCallback skipLoginCallback;
+    private CallbackManager callbackManager;
+
+    public interface SkipLoginCallback {
+        void onSkipLoginPressed();
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        View view = inflater.inflate(R.layout.splash, container, false);
+
+        callbackManager = CallbackManager.Factory.create();
+        loginButton = (LoginButton) view.findViewById(R.id.login_button);
+        loginButton.setReadPermissions("user_friends");
+        loginButton.setFragment(this);
+        loginButton.registerCallback(callbackManager, new FacebookCallback<LoginResult>() {
+            @Override
+            public void onSuccess(LoginResult loginResult) {
+                Toast.makeText(getActivity(), "Login successful", Toast.LENGTH_SHORT).show();
+            }
+
+            @Override
+            public void onCancel() {
+                Toast.makeText(getActivity(), "Login canceled", Toast.LENGTH_SHORT).show();
+            }
+
+            @Override
+            public void onError(FacebookException exception) {
+                Toast.makeText(getActivity(), "Login error", Toast.LENGTH_SHORT).show();
+            }
+        });
+
+        skipLoginButton = (TextView) view.findViewById(R.id.skip_login_button);
+        skipLoginButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                if (skipLoginCallback != null) {
+                    skipLoginCallback.onSkipLoginPressed();
+                }
+            }
+        });
+
+        return view;
+    }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        callbackManager.onActivityResult(requestCode, resultCode, data);
+    }
+
+    public void setSkipLoginCallback(SkipLoginCallback callback) {
+        skipLoginCallback = callback;
+    }
+
+}
+
diff --git a/samples/Scrumptious/src/com/example/scrumptious/picker/FriendPickerFragment.java b/samples/Scrumptious/src/com/example/scrumptious/picker/FriendPickerFragment.java
new file mode 100644
index 000000000..bc47b6e3a
--- /dev/null
+++ b/samples/Scrumptious/src/com/example/scrumptious/picker/FriendPickerFragment.java
@@ -0,0 +1,344 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.scrumptious.picker;
+
+import android.app.Activity;
+import android.content.res.TypedArray;
+import android.os.Bundle;
+import android.text.TextUtils;
+import android.util.AttributeSet;
+
+import com.facebook.AccessToken;
+import com.facebook.GraphRequest;
+import com.facebook.appevents.AppEventsLogger;
+import com.facebook.FacebookException;
+import com.example.scrumptious.R;
+import com.facebook.internal.AnalyticsEvents;
+import com.facebook.internal.Validate;
+
+import org.json.JSONObject;
+
+import java.util.*;
+
+/**
+ * Provides a Fragment that displays a list of a user's friends and allows one or more of the
+ * friends to be selected.
+ */
+public class FriendPickerFragment extends PickerFragment {
+    /**
+     * The key for a String parameter in the fragment's Intent bundle to indicate what user's
+     * friends should be shown. The default is to display the currently authenticated user's friends.
+     */
+    public static final String USER_ID_BUNDLE_KEY = "com.example.scrumptious.widget.FriendPickerFragment.UserId";
+    /**
+     * The key for a boolean parameter in the fragment's Intent bundle to indicate whether the
+     * picker should allow more than one friend to be selected or not.
+     */
+    public static final String MULTI_SELECT_BUNDLE_KEY = "com.example.scrumptious.widget.FriendPickerFragment.MultiSelect";
+    /**
+     * The key for a String parameter in the fragment's Intent bundle to indicate the type of friend picker to use.
+     * This value is case sensitive, and must match the enum @{link FriendPickerType}
+     */
+    public static final String FRIEND_PICKER_TYPE_KEY = "com.example.scrumptious.widget.FriendPickerFragment.FriendPickerType";
+
+    public enum FriendPickerType {
+        FRIENDS("/friends"),
+        TAGGABLE_FRIENDS("/taggable_friends"),
+        INVITABLE_FRIENDS("/invitable_friends");
+
+        private final String requestPath;
+
+        FriendPickerType(String path) {
+            this.requestPath = path;
+        }
+
+        String getRequestPath() {
+            return requestPath;
+        }
+    }
+
+    private static final String ID = "id";
+    private static final String NAME = "name";
+
+    private String userId;
+
+    private boolean multiSelect = true;
+
+    // default to Friends for backwards compatibility
+    private FriendPickerType friendPickerType = FriendPickerType.FRIENDS;
+
+    private List<String> preSelectedFriendIds = new ArrayList<String>();
+
+    /**
+     * Default constructor. Creates a Fragment with all default properties.
+     */
+    public FriendPickerFragment() {
+        super(R.layout.picker_friendpickerfragment);
+    }
+
+    /**
+     * Gets the ID of the user whose friends should be displayed. If null, the default is to
+     * show the currently authenticated user's friends.
+     * @return the user ID, or null
+     */
+    public String getUserId() {
+        return userId;
+    }
+
+    /**
+     * Sets the ID of the user whose friends should be displayed. If null, the default is to
+     * show the currently authenticated user's friends.
+     * @param userId     the user ID, or null
+     */
+    public void setUserId(String userId) {
+        this.userId = userId;
+    }
+
+    /**
+     * Gets whether the user can select multiple friends, or only one friend.
+     * @return true if the user can select multiple friends, false if only one friend
+     */
+    public boolean getMultiSelect() {
+        return multiSelect;
+    }
+
+    /**
+     * Sets whether the user can select multiple friends, or only one friend.
+     * @param multiSelect    true if the user can select multiple friends, false if only one friend
+     */
+    public void setMultiSelect(boolean multiSelect) {
+        if (this.multiSelect != multiSelect) {
+            this.multiSelect = multiSelect;
+            setSelectionStrategy(createSelectionStrategy());
+        }
+    }
+
+    /**
+     * Sets the friend picker type for this fragment.
+     * @param type the type of friend picker to use.
+     */
+    public void setFriendPickerType(FriendPickerType type) {
+        this.friendPickerType = type;
+    }
+
+    /**
+     * Sets the list of friends for pre selection. These friends will be selected by default.
+     * @param userIds list of friends as ids
+     */
+    public void setSelectionByIds(List<String> userIds) {
+        preSelectedFriendIds.addAll(userIds);
+    }
+
+    /**
+     * Sets the list of friends for pre selection. These friends will be selected by default.
+     * @param userIds list of friends as ids
+     */
+    public void setSelectionByIds(String... userIds) {
+        setSelectionByIds(Arrays.asList(userIds));
+    }
+
+    /**
+     * Sets the list of friends for pre selection. These friends will be selected by default.
+     * @param graphUsers list of friends as GraphUsers
+     */
+    public void setSelection(JSONObject... graphUsers) {
+        setSelection(Arrays.asList(graphUsers));
+    }
+
+    /**
+     * Sets the list of friends for pre selection. These friends will be selected by default.
+     * @param graphUsers list of friends as GraphUsers
+     */
+    public void setSelection(List<JSONObject> graphUsers) {
+        List<String> userIds = new ArrayList<String>();
+        for(JSONObject graphUser: graphUsers) {
+            String id = graphUser.optString("id");
+            Validate.notNullOrEmpty(id, "id");
+            userIds.add(id);
+        }
+        setSelectionByIds(userIds);
+    }
+
+    /**
+     * Gets the currently-selected list of users.
+     * @return the currently-selected list of users
+     */
+    public List<JSONObject> getSelection() {
+        return getSelectedGraphObjects();
+    }
+
+    @Override
+    public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {
+        super.onInflate(activity, attrs, savedInstanceState);
+        TypedArray a = activity.obtainStyledAttributes(attrs, R.styleable.picker_friend_picker_fragment);
+
+        setMultiSelect(a.getBoolean(R.styleable.picker_friend_picker_fragment_multi_select, multiSelect));
+
+        a.recycle();
+    }
+
+    @Override
+    public void setSettingsFromBundle(Bundle inState) {
+        super.setSettingsFromBundle(inState);
+        if (inState != null) {
+            if (inState.containsKey(USER_ID_BUNDLE_KEY)) {
+                setUserId(inState.getString(USER_ID_BUNDLE_KEY));
+            }
+            setMultiSelect(inState.getBoolean(MULTI_SELECT_BUNDLE_KEY, multiSelect));
+            if (inState.containsKey(FRIEND_PICKER_TYPE_KEY)) {
+                try {
+                    friendPickerType = FriendPickerType.valueOf(inState.getString(FRIEND_PICKER_TYPE_KEY));
+                } catch (Exception e) {
+                    // NOOP
+                }
+            }
+        }
+    }
+
+    void saveSettingsToBundle(Bundle outState) {
+        super.saveSettingsToBundle(outState);
+
+        outState.putString(USER_ID_BUNDLE_KEY, userId);
+        outState.putBoolean(MULTI_SELECT_BUNDLE_KEY, multiSelect);
+    }
+
+    @Override
+    PickerFragmentAdapter createAdapter() {
+        PickerFragmentAdapter adapter = new PickerFragmentAdapter(this.getActivity()) {
+            @Override
+            protected int getGraphObjectRowLayoutId(JSONObject graphObject) {
+                return R.layout.picker_list_row;
+            }
+
+            @Override
+            protected int getDefaultPicture() {
+                return R.drawable.profile_default_icon;
+            }
+
+        };
+        adapter.setShowCheckbox(true);
+        adapter.setShowPicture(getShowPictures());
+        adapter.setSortFields(Arrays.asList(new String[]{NAME}));
+        adapter.setGroupByField(NAME);
+
+        return adapter;
+    }
+
+    @Override
+    LoadingStrategy createLoadingStrategy() {
+        return new ImmediateLoadingStrategy();
+    }
+
+    @Override
+    SelectionStrategy createSelectionStrategy() {
+        return multiSelect ? new MultiSelectionStrategy() : new SingleSelectionStrategy();
+    }
+
+    @Override
+    GraphRequest getRequestForLoadData() {
+        if (adapter == null) {
+            throw new FacebookException("Can't issue requests until Fragment has been created.");
+        }
+
+        String userToFetch = (userId != null) ? userId : "me";
+        return createRequest(userToFetch, extraFields);
+    }
+
+    @Override
+    String getDefaultTitleText() {
+        return getResources().getString(R.string.choose_friends);
+    }
+
+    @Override
+    void logAppEvents(boolean doneButtonClicked) {
+        AppEventsLogger logger = AppEventsLogger.newLogger(this.getActivity(),
+                AccessToken.getCurrentAccessToken().getToken());
+        Bundle parameters = new Bundle();
+
+        // If Done was clicked, we know this completed successfully. If not, we don't know (caller might have
+        // dismissed us in response to selection changing, or user might have hit back button). Either way
+        // we'll log the number of selections.
+        String outcome = doneButtonClicked ? AnalyticsEvents.PARAMETER_DIALOG_OUTCOME_VALUE_COMPLETED :
+                AnalyticsEvents.PARAMETER_DIALOG_OUTCOME_VALUE_UNKNOWN;
+        parameters.putString(AnalyticsEvents.PARAMETER_DIALOG_OUTCOME, outcome);
+        parameters.putInt("num_friends_picked", getSelection().size());
+
+        logger.logSdkEvent(AnalyticsEvents.EVENT_FRIEND_PICKER_USAGE, null, parameters);
+    }
+
+    @Override
+    public void loadData(boolean forceReload) {
+        super.loadData(forceReload);
+        setSelectedGraphObjects(preSelectedFriendIds);
+    }
+
+    private GraphRequest createRequest(String userID, Set<String> extraFields) {
+        AccessToken accessToken = AccessToken.getCurrentAccessToken();
+        GraphRequest request = GraphRequest.newGraphPathRequest(
+                accessToken, userID + friendPickerType.getRequestPath(), null);
+
+        Set<String> fields = new HashSet<String>(extraFields);
+        String[] requiredFields = new String[]{
+                ID,
+                NAME
+        };
+        fields.addAll(Arrays.asList(requiredFields));
+
+        String pictureField = adapter.getPictureFieldSpecifier();
+        if (pictureField != null) {
+            fields.add(pictureField);
+        }
+
+        Bundle parameters = request.getParameters();
+        parameters.putString("fields", TextUtils.join(",", fields));
+        request.setParameters(parameters);
+
+        return request;
+    }
+
+    private class ImmediateLoadingStrategy extends LoadingStrategy {
+        @Override
+        protected void onLoadFinished(GraphObjectPagingLoader loader, GraphObjectCursor data) {
+            super.onLoadFinished(loader, data);
+
+            // We could be called in this state if we are clearing data or if we are being re-attached
+            // in the middle of a query.
+            if (data == null || loader.isLoading()) {
+                return;
+            }
+
+            if (data.areMoreObjectsAvailable()) {
+                // We got results, but more are available.
+                followNextLink();
+            } else {
+                // We finished loading results.
+                hideActivityCircle();
+            }
+        }
+
+        private void followNextLink() {
+            // This may look redundant, but this causes the circle to be alpha-dimmed if we have results.
+            displayActivityCircle();
+
+            loader.followNextLink();
+        }
+    }
+}
diff --git a/samples/Scrumptious/src/com/example/scrumptious/picker/GraphObjectAdapter.java b/samples/Scrumptious/src/com/example/scrumptious/picker/GraphObjectAdapter.java
new file mode 100644
index 000000000..235b4b6b6
--- /dev/null
+++ b/samples/Scrumptious/src/com/example/scrumptious/picker/GraphObjectAdapter.java
@@ -0,0 +1,821 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.scrumptious.picker;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.net.Uri;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewStub;
+import android.widget.*;
+import com.facebook.FacebookException;
+import com.example.scrumptious.R;
+import com.facebook.internal.ImageDownloader;
+import com.facebook.internal.ImageRequest;
+import com.facebook.internal.ImageResponse;
+import com.facebook.internal.Utility;
+
+import org.json.JSONObject;
+
+import java.text.Collator;
+import java.util.*;
+
+class GraphObjectAdapter extends BaseAdapter implements SectionIndexer {
+    private static final int DISPLAY_SECTIONS_THRESHOLD = 1;
+    private static final int HEADER_VIEW_TYPE = 0;
+    private static final int GRAPH_OBJECT_VIEW_TYPE = 1;
+    private static final int ACTIVITY_CIRCLE_VIEW_TYPE = 2;
+    private static final int MAX_PREFETCHED_PICTURES = 20;
+
+    private static final String ID = "id";
+    private static final String NAME = "name";
+    private static final String PICTURE = "picture";
+
+    private final Map<String, ImageRequest> pendingRequests = new HashMap<String, ImageRequest>();
+    private final LayoutInflater inflater;
+    private List<String> sectionKeys = new ArrayList<String>();
+    private Map<String, ArrayList<JSONObject>> graphObjectsBySection = new HashMap<String, ArrayList<JSONObject>>();
+    private Map<String, JSONObject> graphObjectsById = new HashMap<String, JSONObject>();
+    private boolean displaySections;
+    private List<String> sortFields;
+    private String groupByField;
+    private boolean showPicture;
+    private boolean showCheckbox;
+    private Filter filter;
+    private DataNeededListener dataNeededListener;
+    private GraphObjectCursor cursor;
+    private Context context;
+    private Map<String, ImageResponse> prefetchedPictureCache = new HashMap<String, ImageResponse>();
+    private ArrayList<String> prefetchedProfilePictureIds = new ArrayList<String>();
+    private OnErrorListener onErrorListener;
+
+    public interface DataNeededListener {
+        public void onDataNeeded();
+    }
+
+    public interface OnErrorListener {
+        void onError(GraphObjectAdapter adapter, FacebookException error);
+    }
+
+    public static class SectionAndItem {
+        public String sectionKey;
+        public JSONObject graphObject;
+
+        public enum Type {
+            GRAPH_OBJECT,
+            SECTION_HEADER,
+            ACTIVITY_CIRCLE
+        }
+
+        public SectionAndItem(String sectionKey, JSONObject graphObject) {
+            this.sectionKey = sectionKey;
+            this.graphObject = graphObject;
+        }
+
+        public Type getType() {
+            if (sectionKey == null) {
+                return Type.ACTIVITY_CIRCLE;
+            } else if (graphObject == null) {
+                return Type.SECTION_HEADER;
+            } else {
+                return Type.GRAPH_OBJECT;
+            }
+        }
+    }
+
+    interface Filter {
+        boolean includeItem(JSONObject graphObject);
+    }
+
+    public GraphObjectAdapter(Context context) {
+        this.context = context;
+        this.inflater = LayoutInflater.from(context);
+    }
+
+    public List<String> getSortFields() {
+        return sortFields;
+    }
+
+    public void setSortFields(List<String> sortFields) {
+        this.sortFields = sortFields;
+    }
+
+    public String getGroupByField() {
+        return groupByField;
+    }
+
+    public void setGroupByField(String groupByField) {
+        this.groupByField = groupByField;
+    }
+
+    public boolean getShowPicture() {
+        return showPicture;
+    }
+
+    public void setShowPicture(boolean showPicture) {
+        this.showPicture = showPicture;
+    }
+
+    public boolean getShowCheckbox() {
+        return showCheckbox;
+    }
+
+    public void setShowCheckbox(boolean showCheckbox) {
+        this.showCheckbox = showCheckbox;
+    }
+
+    public DataNeededListener getDataNeededListener() {
+        return dataNeededListener;
+    }
+
+    public void setDataNeededListener(DataNeededListener dataNeededListener) {
+        this.dataNeededListener = dataNeededListener;
+    }
+
+    public OnErrorListener getOnErrorListener() {
+        return onErrorListener;
+    }
+
+    public void setOnErrorListener(OnErrorListener onErrorListener) {
+        this.onErrorListener = onErrorListener;
+    }
+
+    public GraphObjectCursor getCursor() {
+        return cursor;
+    }
+
+    public boolean changeCursor(GraphObjectCursor cursor) {
+        if (this.cursor == cursor) {
+            return false;
+        }
+        if (this.cursor != null) {
+            this.cursor.close();
+        }
+        this.cursor = cursor;
+
+        rebuildAndNotify();
+        return true;
+    }
+
+    public void rebuildAndNotify() {
+        rebuildSections();
+        notifyDataSetChanged();
+    }
+
+    public void prioritizeViewRange(int firstVisibleItem, int lastVisibleItem, int prefetchBuffer) {
+        if ((lastVisibleItem < firstVisibleItem) || (sectionKeys.size() == 0)) {
+            return;
+        }
+
+        // We want to prioritize requests for items which are visible but do not have pictures
+        // loaded yet. We also want to pre-fetch pictures for items which are not yet visible
+        // but are within a buffer on either side of the visible items, on the assumption that
+        // they will be visible soon. For these latter items, we'll store the images in memory
+        // in the hopes we can immediately populate their image view when needed.
+
+        // Prioritize the requests in reverse order since each call to prioritizeRequest will just
+        // move it to the front of the queue. And we want the earliest ones in the range to be at
+        // the front of the queue, so all else being equal, the list will appear to populate from
+        // the top down.
+        for (int i = lastVisibleItem; i >= 0; i--) {
+            SectionAndItem sectionAndItem = getSectionAndItem(i);
+            if (sectionAndItem.graphObject != null) {
+                String id = getIdOfGraphObject(sectionAndItem.graphObject);
+                ImageRequest request = pendingRequests.get(id);
+                if (request != null) {
+                    ImageDownloader.prioritizeRequest(request);
+                }
+            }
+        }
+
+        // For items which are not visible, but within the buffer on either side, we want to
+        // fetch those items and store them in a small in-memory cache of bitmaps.
+        int start = Math.max(0, firstVisibleItem - prefetchBuffer);
+        int end = Math.min(lastVisibleItem + prefetchBuffer, getCount() - 1);
+        ArrayList<JSONObject> graphObjectsToPrefetchPicturesFor = new ArrayList<JSONObject>();
+        // Add the IDs before and after the visible range.
+        for (int i = start; i < firstVisibleItem; ++i) {
+            SectionAndItem sectionAndItem = getSectionAndItem(i);
+            if (sectionAndItem.graphObject != null) {
+                graphObjectsToPrefetchPicturesFor.add(sectionAndItem.graphObject);
+            }
+        }
+        for (int i = lastVisibleItem + 1; i <= end; ++i) {
+            SectionAndItem sectionAndItem = getSectionAndItem(i);
+            if (sectionAndItem.graphObject != null) {
+                graphObjectsToPrefetchPicturesFor.add(sectionAndItem.graphObject);
+            }
+        }
+        for (JSONObject graphObject : graphObjectsToPrefetchPicturesFor) {
+            Uri uri = getPictureUriOfGraphObject(graphObject);
+            final String id = getIdOfGraphObject(graphObject);
+
+            // This URL already have been requested for pre-fetching, but we want to act in an LRU manner, so move
+            // it to the end of the list regardless.
+            boolean alreadyPrefetching = prefetchedProfilePictureIds.remove(id);
+            prefetchedProfilePictureIds.add(id);
+
+            // If we've already requested it for pre-fetching, no need to do so again.
+            if (!alreadyPrefetching) {
+                downloadProfilePicture(id, uri, null);
+            }
+        }
+    }
+
+    protected String getSectionKeyOfGraphObject(JSONObject graphObject) {
+        String result = null;
+
+        if (groupByField != null) {
+            result = graphObject.optString(groupByField);
+            if (result != null && result.length() > 0) {
+                result = result.substring(0, 1).toUpperCase();
+            }
+        }
+
+        return (result != null) ? result : "";
+    }
+
+    protected CharSequence getTitleOfGraphObject(JSONObject graphObject) {
+        return graphObject.optString(NAME);
+    }
+
+    protected CharSequence getSubTitleOfGraphObject(JSONObject graphObject) {
+        return null;
+    }
+
+    protected Uri getPictureUriOfGraphObject(JSONObject graphObject) {
+        String uri = null;
+        Object o = graphObject.opt(PICTURE);
+        if (o instanceof String) {
+            uri = (String) o;
+        } else if (o instanceof JSONObject) {
+            JSONObject data = ((JSONObject) o).optJSONObject("data");
+            uri = data != null ? data.optString("url") : null;
+        }
+
+        if (uri != null) {
+            return Uri.parse(uri);
+        }
+        return null;
+    }
+
+    protected View getSectionHeaderView(String sectionHeader, View convertView, ViewGroup parent) {
+        TextView result = (TextView) convertView;
+
+        if (result == null) {
+            result = (TextView) inflater.inflate(R.layout.picker_list_section_header, null);
+        }
+
+        result.setText(sectionHeader);
+
+        return result;
+    }
+
+    protected View getGraphObjectView(JSONObject graphObject, View convertView, ViewGroup parent) {
+        View result = convertView;
+
+        if (result == null) {
+            result = createGraphObjectView(graphObject);
+        }
+
+        populateGraphObjectView(result, graphObject);
+        return result;
+    }
+
+    private View getActivityCircleView(View convertView, ViewGroup parent) {
+        View result = convertView;
+
+        if (result == null) {
+            result = inflater.inflate(R.layout.picker_activity_circle_row, null);
+        }
+        ProgressBar activityCircle = (ProgressBar) result.findViewById(R.id.com_facebook_picker_row_activity_circle);
+        activityCircle.setVisibility(View.VISIBLE);
+
+        return result;
+    }
+
+    protected int getGraphObjectRowLayoutId(JSONObject graphObject) {
+        return R.layout.picker_list_row;
+    }
+
+    protected int getDefaultPicture() {
+        return R.drawable.profile_default_icon;
+    }
+
+    protected View createGraphObjectView(JSONObject graphObject) {
+        View result = inflater.inflate(getGraphObjectRowLayoutId(graphObject), null);
+
+        ViewStub checkboxStub = (ViewStub) result.findViewById(R.id.com_facebook_picker_checkbox_stub);
+        if (checkboxStub != null) {
+            if (!getShowCheckbox()) {
+                checkboxStub.setVisibility(View.GONE);
+            } else {
+                CheckBox checkBox = (CheckBox) checkboxStub.inflate();
+                updateCheckboxState(checkBox, false);
+            }
+        }
+
+        ViewStub profilePicStub = (ViewStub) result.findViewById(R.id.com_facebook_picker_profile_pic_stub);
+        if (!getShowPicture()) {
+            profilePicStub.setVisibility(View.GONE);
+        } else {
+            ImageView imageView = (ImageView) profilePicStub.inflate();
+            imageView.setVisibility(View.VISIBLE);
+        }
+
+        return result;
+    }
+
+    protected void populateGraphObjectView(View view, JSONObject graphObject) {
+        String id = getIdOfGraphObject(graphObject);
+        view.setTag(id);
+
+        CharSequence title = getTitleOfGraphObject(graphObject);
+        TextView titleView = (TextView) view.findViewById(R.id.com_facebook_picker_title);
+        if (titleView != null) {
+            titleView.setText(title, TextView.BufferType.SPANNABLE);
+        }
+
+        CharSequence subtitle = getSubTitleOfGraphObject(graphObject);
+        TextView subtitleView = (TextView) view.findViewById(R.id.picker_subtitle);
+        if (subtitleView != null) {
+            if (subtitle != null) {
+                subtitleView.setText(subtitle, TextView.BufferType.SPANNABLE);
+                subtitleView.setVisibility(View.VISIBLE);
+            } else {
+                subtitleView.setVisibility(View.GONE);
+            }
+        }
+
+        if (getShowCheckbox()) {
+            CheckBox checkBox = (CheckBox) view.findViewById(R.id.com_facebook_picker_checkbox);
+            updateCheckboxState(checkBox, isGraphObjectSelected(id));
+        }
+
+        if (getShowPicture()) {
+            Uri pictureURI = getPictureUriOfGraphObject(graphObject);
+
+            if (pictureURI != null) {
+                ImageView profilePic = (ImageView) view.findViewById(R.id.com_facebook_picker_image);
+
+                // See if we have already pre-fetched this; if not, download it.
+                if (prefetchedPictureCache.containsKey(id)) {
+                    ImageResponse response = prefetchedPictureCache.get(id);
+                    profilePic.setImageBitmap(response.getBitmap());
+                    profilePic.setTag(response.getRequest().getImageUri());
+                } else {
+                    downloadProfilePicture(id, pictureURI, profilePic);
+                }
+            }
+        }
+    }
+
+    /**
+     * @throws FacebookException if the GraphObject doesn't have an ID.
+     */
+    String getIdOfGraphObject(JSONObject graphObject) {
+        String id = graphObject.optString(ID);
+        if (id != null) {
+            return id;
+        }
+        throw new FacebookException("Received an object without an ID.");
+    }
+
+    boolean filterIncludesItem(JSONObject graphObject) {
+        return filter == null || filter.includeItem(graphObject);
+    }
+
+    Filter getFilter() {
+        return filter;
+    }
+
+    void setFilter(Filter filter) {
+        this.filter = filter;
+    }
+
+    boolean isGraphObjectSelected(String graphObjectId) {
+        return false;
+    }
+
+    void updateCheckboxState(CheckBox checkBox, boolean graphObjectSelected) {
+        // Default is no-op
+    }
+
+    String getPictureFieldSpecifier() {
+        // How big is our image?
+        View view = createGraphObjectView(null);
+        ImageView picture = (ImageView) view.findViewById(R.id.com_facebook_picker_image);
+        if (picture == null) {
+            return null;
+        }
+
+        // Note: these dimensions are in pixels, not dips
+        ViewGroup.LayoutParams layoutParams = picture.getLayoutParams();
+        return String.format(Locale.US, "picture.height(%d).width(%d)", layoutParams.height, layoutParams.width);
+    }
+
+
+    private boolean shouldShowActivityCircleCell() {
+        // We show the "more data" activity circle cell if we have a listener to request more data,
+        // we are expecting more data, and we have some data already (i.e., not on a fresh query).
+        return (cursor != null) && cursor.areMoreObjectsAvailable() && (dataNeededListener != null) && !isEmpty();
+    }
+
+    private void rebuildSections() {
+        sectionKeys = new ArrayList<String>();
+        graphObjectsBySection = new HashMap<String, ArrayList<JSONObject>>();
+        graphObjectsById = new HashMap<String, JSONObject>();
+        displaySections = false;
+
+        if (cursor == null || cursor.getCount() == 0) {
+            return;
+        }
+
+        int objectsAdded = 0;
+        cursor.moveToFirst();
+        do {
+            JSONObject graphObject = cursor.getGraphObject();
+
+            if (!filterIncludesItem(graphObject)) {
+                continue;
+            }
+
+            objectsAdded++;
+
+            String sectionKeyOfItem = getSectionKeyOfGraphObject(graphObject);
+            if (!graphObjectsBySection.containsKey(sectionKeyOfItem)) {
+                sectionKeys.add(sectionKeyOfItem);
+                graphObjectsBySection.put(sectionKeyOfItem, new ArrayList<JSONObject>());
+            }
+            List<JSONObject> section = graphObjectsBySection.get(sectionKeyOfItem);
+            section.add(graphObject);
+
+            graphObjectsById.put(getIdOfGraphObject(graphObject), graphObject);
+        } while (cursor.moveToNext());
+
+        if (sortFields != null) {
+            final Collator collator = Collator.getInstance();
+            for (List<JSONObject> section : graphObjectsBySection.values()) {
+                Collections.sort(section, new Comparator<JSONObject>() {
+                    @Override
+                    public int compare(JSONObject a, JSONObject b) {
+                        return compareGraphObjects(a, b, sortFields, collator);
+                    }
+                });
+            }
+        }
+
+        Collections.sort(sectionKeys, Collator.getInstance());
+
+        displaySections = sectionKeys.size() > 1 && objectsAdded > DISPLAY_SECTIONS_THRESHOLD;
+    }
+
+    SectionAndItem getSectionAndItem(int position) {
+        if (sectionKeys.size() == 0) {
+            return null;
+        }
+        String sectionKey = null;
+        JSONObject graphObject = null;
+
+        if (!displaySections) {
+            sectionKey = sectionKeys.get(0);
+            List<JSONObject> section = graphObjectsBySection.get(sectionKey);
+            if (position >= 0 && position < section.size()) {
+                graphObject = graphObjectsBySection.get(sectionKey).get(position);
+            } else {
+                // We are off the end; we must be adding an activity circle to indicate more data is coming.
+                assert dataNeededListener != null && cursor.areMoreObjectsAvailable();
+                // We return null for both to indicate this.
+                return new SectionAndItem(null, null);
+            }
+        } else {
+            // Count through the sections; the "0" position in each section is the header. We decrement
+            // position each time we skip forward a certain number of elements, including the header.
+            for (String key : sectionKeys) {
+                // Decrement if we skip over the header
+                if (position-- == 0) {
+                    sectionKey = key;
+                    break;
+                }
+
+                List<JSONObject> section = graphObjectsBySection.get(key);
+                if (position < section.size()) {
+                    // The position is somewhere in this section. Get the corresponding graph object.
+                    sectionKey = key;
+                    graphObject = section.get(position);
+                    break;
+                }
+                // Decrement by as many items as we skipped over
+                position -= section.size();
+            }
+        }
+        if (sectionKey != null) {
+            // Note: graphObject will be null if this represents a section header.
+            return new SectionAndItem(sectionKey, graphObject);
+        } else {
+            throw new IndexOutOfBoundsException("position");
+        }
+    }
+
+    int getPosition(String sectionKey, JSONObject graphObject) {
+        int position = 0;
+        boolean found = false;
+
+        // First find the section key and increment position one for each header we will render;
+        // increment by the size of each section prior to the one we want.
+        for (String key : sectionKeys) {
+            if (displaySections) {
+                position++;
+            }
+            if (key.equals(sectionKey)) {
+                found = true;
+                break;
+            } else {
+                position += graphObjectsBySection.get(key).size();
+            }
+        }
+
+        if (!found) {
+            return -1;
+        } else if (graphObject == null) {
+            // null represents the header for a section; we counted this header in position earlier,
+            // so subtract it back out.
+            return position - (displaySections ? 1 : 0);
+        }
+
+        // Now find index of this item within that section.
+        for (JSONObject t : graphObjectsBySection.get(sectionKey)) {
+            if (Utility.hasSameId(t, graphObject)) {
+                return position;
+            }
+            position++;
+        }
+        return -1;
+    }
+
+    @Override
+    public boolean isEmpty() {
+        // We'll never populate sectionKeys unless we have at least one object.
+        return sectionKeys.size() == 0;
+    }
+
+    @Override
+    public int getCount() {
+        if (sectionKeys.size() == 0) {
+            return 0;
+        }
+
+        // If we are not displaying sections, we don't display a header; otherwise, we have one header per item in
+        // addition to the actual items.
+        int count = (displaySections) ? sectionKeys.size() : 0;
+        for (List<JSONObject> section : graphObjectsBySection.values()) {
+            count += section.size();
+        }
+
+        // If we should show a cell with an activity circle indicating more data is coming, add it to the count.
+        if (shouldShowActivityCircleCell()) {
+            ++count;
+        }
+
+        return count;
+    }
+
+    @Override
+    public boolean areAllItemsEnabled() {
+        return displaySections;
+    }
+
+    @Override
+    public boolean hasStableIds() {
+        return true;
+    }
+
+    @Override
+    public boolean isEnabled(int position) {
+        SectionAndItem sectionAndItem = getSectionAndItem(position);
+        return sectionAndItem.getType() == SectionAndItem.Type.GRAPH_OBJECT;
+    }
+
+    @Override
+    public Object getItem(int position) {
+        SectionAndItem sectionAndItem = getSectionAndItem(position);
+        return (sectionAndItem.getType() == SectionAndItem.Type.GRAPH_OBJECT) ? sectionAndItem.graphObject : null;
+    }
+
+    @Override
+    public long getItemId(int position) {
+        // We assume IDs that can be converted to longs. If this is not the case for certain types of
+        // GraphObjects, subclasses should override this to return, e.g., position, and override hasStableIds
+        // to return false.
+        SectionAndItem sectionAndItem = getSectionAndItem(position);
+        if (sectionAndItem != null && sectionAndItem.graphObject != null) {
+            String id = getIdOfGraphObject(sectionAndItem.graphObject);
+            if (id != null) {
+                try {
+                    return Long.parseLong(id);
+                } catch (NumberFormatException e) {
+                    // NOOP
+                }
+            }
+        }
+        return 0;
+    }
+
+    @Override
+    public int getViewTypeCount() {
+        return 3;
+    }
+
+    @Override
+    public int getItemViewType(int position) {
+        SectionAndItem sectionAndItem = getSectionAndItem(position);
+        switch (sectionAndItem.getType()) {
+            case SECTION_HEADER:
+                return HEADER_VIEW_TYPE;
+            case GRAPH_OBJECT:
+                return GRAPH_OBJECT_VIEW_TYPE;
+            case ACTIVITY_CIRCLE:
+                return ACTIVITY_CIRCLE_VIEW_TYPE;
+            default:
+                throw new FacebookException("Unexpected type of section and item.");
+        }
+    }
+
+    @Override
+    public View getView(int position, View convertView, ViewGroup parent) {
+        SectionAndItem sectionAndItem = getSectionAndItem(position);
+
+        switch (sectionAndItem.getType()) {
+            case SECTION_HEADER:
+                return getSectionHeaderView(sectionAndItem.sectionKey, convertView, parent);
+            case GRAPH_OBJECT:
+                return getGraphObjectView(sectionAndItem.graphObject, convertView, parent);
+            case ACTIVITY_CIRCLE:
+                // If we get a request for this view, it means we need more data.
+                assert cursor.areMoreObjectsAvailable() && (dataNeededListener != null);
+                dataNeededListener.onDataNeeded();
+                return getActivityCircleView(convertView, parent);
+            default:
+                throw new FacebookException("Unexpected type of section and item.");
+        }
+    }
+
+    @Override
+    public Object[] getSections() {
+        if (displaySections) {
+            return sectionKeys.toArray();
+        } else {
+            return new Object[0];
+        }
+    }
+
+    @Override
+    public int getPositionForSection(int section) {
+        if (displaySections) {
+            section = Math.max(0, Math.min(section, sectionKeys.size() - 1));
+            if (section < sectionKeys.size()) {
+                return getPosition(sectionKeys.get(section), null);
+            }
+        }
+        return 0;
+    }
+
+    @Override
+    public int getSectionForPosition(int position) {
+        SectionAndItem sectionAndItem = getSectionAndItem(position);
+        if (sectionAndItem != null &&
+                sectionAndItem.getType() != SectionAndItem.Type.ACTIVITY_CIRCLE) {
+            return Math.max(0, Math.min(sectionKeys.indexOf(sectionAndItem.sectionKey), sectionKeys.size() - 1));
+        }
+        return 0;
+    }
+
+    public List<JSONObject> getGraphObjectsById(Collection<String> ids) {
+        Set<String> idSet = new HashSet<String>();
+        idSet.addAll(ids);
+
+        ArrayList<JSONObject> result = new ArrayList<JSONObject>(idSet.size());
+        for (String id : idSet) {
+            JSONObject graphObject = graphObjectsById.get(id);
+            if (graphObject != null) {
+                result.add(graphObject);
+            }
+        }
+
+        return result;
+    }
+
+    private void downloadProfilePicture(
+            final String profileId,
+            Uri pictureUri,
+            final ImageView imageView) {
+        if (pictureUri == null) {
+            return;
+        }
+
+        // If we don't have an imageView, we are pre-fetching this image to store in-memory because we
+        // think the user might scroll to its corresponding list row. If we do have an imageView, we
+        // only want to queue a download if the view's tag isn't already set to the URL (which would mean
+        // it's already got the correct picture).
+        boolean prefetching = imageView == null;
+        if (prefetching || !pictureUri.equals(imageView.getTag())) {
+            if (!prefetching) {
+                // Setting the tag to the profile ID indicates that we're currently downloading the
+                // picture for this profile; we'll set it to the actual picture URL when complete.
+                imageView.setTag(profileId);
+                imageView.setImageResource(getDefaultPicture());
+            }
+
+            ImageRequest.Builder builder = new ImageRequest.Builder(
+                    context.getApplicationContext(),
+                    pictureUri)
+                    .setCallerTag(this)
+                    .setCallback(
+                            new ImageRequest.Callback() {
+                                @Override
+                                public void onCompleted(ImageResponse response) {
+                                    processImageResponse(response, profileId, imageView);
+                                }
+                            });
+
+            ImageRequest newRequest = builder.build();
+            pendingRequests.put(profileId, newRequest);
+
+            ImageDownloader.downloadAsync(newRequest);
+        }
+    }
+
+    private void callOnErrorListener(Exception exception) {
+        if (onErrorListener != null) {
+            if (!(exception instanceof FacebookException)) {
+                exception = new FacebookException(exception);
+            }
+            onErrorListener.onError(this, (FacebookException) exception);
+        }
+    }
+
+    private void processImageResponse(ImageResponse response, String graphObjectId, ImageView imageView) {
+        pendingRequests.remove(graphObjectId);
+        if (response.getError() != null) {
+            callOnErrorListener(response.getError());
+        }
+
+        if (imageView == null) {
+            // This was a pre-fetch request.
+            if (response.getBitmap() != null) {
+                // Is the cache too big?
+                if (prefetchedPictureCache.size() >= MAX_PREFETCHED_PICTURES) {
+                    // Find the oldest one and remove it.
+                    String oldestId = prefetchedProfilePictureIds.remove(0);
+                    prefetchedPictureCache.remove(oldestId);
+                }
+                prefetchedPictureCache.put(graphObjectId, response);
+            }
+        } else if (graphObjectId.equals(imageView.getTag())) {
+            Exception error = response.getError();
+            Bitmap bitmap = response.getBitmap();
+            if (error == null && bitmap != null) {
+                imageView.setImageBitmap(bitmap);
+                imageView.setTag(response.getRequest().getImageUri());
+            }
+        }
+    }
+
+    private static int compareGraphObjects(JSONObject a, JSONObject b, Collection<String> sortFields,
+            Collator collator) {
+        for (String sortField : sortFields) {
+            String sa = a.optString(sortField);
+            String sb = b.optString(sortField);
+
+            if (sa != null && sb != null) {
+                int result = collator.compare(sa, sb);
+                if (result != 0) {
+                    return result;
+                }
+            } else if (!(sa == null && sb == null)) {
+                return (sa == null) ? -1 : 1;
+            }
+        }
+        return 0;
+    }
+}
diff --git a/samples/Scrumptious/src/com/example/scrumptious/picker/GraphObjectCursor.java b/samples/Scrumptious/src/com/example/scrumptious/picker/GraphObjectCursor.java
new file mode 100644
index 000000000..4a8ee404d
--- /dev/null
+++ b/samples/Scrumptious/src/com/example/scrumptious/picker/GraphObjectCursor.java
@@ -0,0 +1,142 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.scrumptious.picker;
+
+import android.database.CursorIndexOutOfBoundsException;
+import org.json.JSONArray;
+import org.json.JSONObject;
+
+import java.util.ArrayList;
+import java.util.List;
+
+class GraphObjectCursor {
+    private int pos = -1;
+    private boolean closed = false;
+    private List<JSONObject> graphObjects = new ArrayList<JSONObject>();
+    private boolean moreObjectsAvailable = false;
+
+    GraphObjectCursor() {
+    }
+
+    GraphObjectCursor(GraphObjectCursor other) {
+        pos = other.pos;
+        closed = other.closed;
+        graphObjects = new ArrayList<JSONObject>();
+        graphObjects.addAll(other.graphObjects);
+
+        // We do not copy observers.
+    }
+
+    public void addGraphObjects(JSONArray graphObjects) {
+        for (int i = 0; i < graphObjects.length(); ++i) {
+            this.graphObjects.add(graphObjects.optJSONObject(i));
+        }
+    }
+
+    public boolean areMoreObjectsAvailable() {
+        return moreObjectsAvailable;
+    }
+
+    public void setMoreObjectsAvailable(boolean moreObjectsAvailable) {
+        this.moreObjectsAvailable = moreObjectsAvailable;
+    }
+
+    public int getCount() {
+        return graphObjects.size();
+    }
+
+    public int getPosition() {
+        return pos;
+    }
+
+    public boolean move(int offset) {
+        return moveToPosition(pos + offset);
+    }
+
+    public boolean moveToPosition(int position) {
+        final int count = getCount();
+        if (position >= count) {
+            pos = count;
+            return false;
+        }
+
+        if (position < 0) {
+            pos = -1;
+            return false;
+        }
+
+        pos = position;
+        return true;
+    }
+
+    public boolean moveToFirst() {
+        return moveToPosition(0);
+    }
+
+    public boolean moveToLast() {
+        return moveToPosition(getCount() - 1);
+    }
+
+    public boolean moveToNext() {
+        return moveToPosition(pos + 1);
+    }
+
+    public boolean moveToPrevious() {
+        return moveToPosition(pos - 1);
+    }
+
+    public boolean isFirst() {
+        return (pos == 0) && (getCount() != 0);
+    }
+
+    public boolean isLast() {
+        final int count = getCount();
+        return (pos == (count - 1)) && (count != 0);
+    }
+
+    public boolean isBeforeFirst() {
+        return (getCount() == 0) || (pos == -1);
+    }
+
+    public boolean isAfterLast() {
+        final int count = getCount();
+        return (count == 0) || (pos == count);
+    }
+
+    public JSONObject getGraphObject() {
+        if (pos < 0) {
+            throw new CursorIndexOutOfBoundsException("Before first object.");
+        }
+        if (pos >= graphObjects.size()) {
+            throw new CursorIndexOutOfBoundsException("After last object.");
+        }
+        return graphObjects.get(pos);
+    }
+
+    public void close() {
+        closed = true;
+    }
+
+    public boolean isClosed() {
+        return closed;
+    }
+
+}
diff --git a/samples/Scrumptious/src/com/example/scrumptious/picker/GraphObjectPagingLoader.java b/samples/Scrumptious/src/com/example/scrumptious/picker/GraphObjectPagingLoader.java
new file mode 100644
index 000000000..01aa6304a
--- /dev/null
+++ b/samples/Scrumptious/src/com/example/scrumptious/picker/GraphObjectPagingLoader.java
@@ -0,0 +1,170 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.scrumptious.picker;
+
+import android.content.Context;
+import android.content.Loader;
+
+import com.facebook.*;
+import org.json.JSONArray;
+
+class GraphObjectPagingLoader extends Loader<GraphObjectCursor> {
+    private GraphRequest originalRequest;
+    private GraphRequest currentRequest;
+    private GraphRequest nextRequest;
+    private OnErrorListener onErrorListener;
+    private GraphObjectCursor cursor;
+    private boolean appendResults = false;
+    private boolean loading = false;
+
+    public interface OnErrorListener {
+        public void onError(FacebookException error, GraphObjectPagingLoader loader);
+    }
+
+    public GraphObjectPagingLoader(Context context) {
+        super(context);
+    }
+
+    public OnErrorListener getOnErrorListener() {
+        return onErrorListener;
+    }
+
+    public void setOnErrorListener(OnErrorListener listener) {
+        this.onErrorListener = listener;
+    }
+
+    public GraphObjectCursor getCursor() {
+        return cursor;
+    }
+
+    public void clearResults() {
+        nextRequest = null;
+        originalRequest = null;
+        currentRequest = null;
+
+        deliverResult(null);
+    }
+
+    public boolean isLoading() {
+        return loading;
+    }
+
+    public void startLoading(GraphRequest request) {
+        appendResults = false;
+        nextRequest = null;
+        currentRequest = request;
+        currentRequest.setCallback(new GraphRequest.Callback() {
+            @Override
+            public void onCompleted(GraphResponse response) {
+                requestCompleted(response);
+            }
+        });
+
+        loading = true;
+        final GraphRequestBatch batch = new GraphRequestBatch(request);
+        GraphRequest.executeBatchAsync(batch);
+    }
+
+    public void followNextLink() {
+        if (nextRequest != null) {
+            appendResults = true;
+            currentRequest = nextRequest;
+
+            currentRequest.setCallback(new GraphRequest.Callback() {
+                @Override
+                public void onCompleted(GraphResponse response) {
+                    requestCompleted(response);
+                }
+            });
+
+            loading = true;
+            GraphRequest.executeBatchAsync(new GraphRequestBatch(currentRequest));
+        }
+    }
+
+    @Override
+    public void deliverResult(GraphObjectCursor cursor) {
+        GraphObjectCursor oldCursor = this.cursor;
+        this.cursor = cursor;
+
+        if (isStarted()) {
+            super.deliverResult(cursor);
+
+            if (oldCursor != null && oldCursor != cursor && !oldCursor.isClosed()) {
+                oldCursor.close();
+            }
+        }
+    }
+
+    @Override
+    protected void onStartLoading() {
+        super.onStartLoading();
+
+        if (cursor != null) {
+            deliverResult(cursor);
+        }
+    }
+
+    private void requestCompleted(GraphResponse response) {
+        GraphRequest request = response.getRequest();
+        if (request != currentRequest) {
+            return;
+        }
+
+        loading = false;
+        currentRequest = null;
+
+        FacebookRequestError requestError = response.getError();
+        FacebookException exception = (requestError == null) ? null : requestError.getException();
+        if (response.getJSONObject() == null && exception == null) {
+            exception = new FacebookException("GraphObjectPagingLoader received neither a result nor an error.");
+        }
+
+        if (exception != null) {
+            nextRequest = null;
+
+            if (onErrorListener != null) {
+                onErrorListener.onError(exception, this);
+            }
+        } else {
+            addResults(response);
+        }
+    }
+
+    private void addResults(GraphResponse response) {
+        GraphObjectCursor cursorToModify = (cursor == null || !appendResults) ? new GraphObjectCursor() :
+                new GraphObjectCursor(cursor);
+
+        JSONArray data = response.getJSONObject().optJSONArray("data");
+
+        boolean haveData = data.length() > 0;
+
+        if (haveData) {
+            nextRequest = response.getRequestForPagedResults(GraphResponse.PagingDirection.NEXT);
+            cursorToModify.addGraphObjects(data);
+        } else {
+            nextRequest = null;
+        }
+        cursorToModify.setMoreObjectsAvailable(nextRequest != null);
+
+        deliverResult(cursorToModify);
+    }
+}
diff --git a/samples/Scrumptious/src/com/example/scrumptious/picker/PickerFragment.java b/samples/Scrumptious/src/com/example/scrumptious/picker/PickerFragment.java
new file mode 100644
index 000000000..f2353a0d5
--- /dev/null
+++ b/samples/Scrumptious/src/com/example/scrumptious/picker/PickerFragment.java
@@ -0,0 +1,1085 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.scrumptious.picker;
+
+import android.app.Activity;
+import android.app.Fragment;
+import android.app.LoaderManager;
+import android.content.Context;
+import android.content.Loader;
+import android.content.res.TypedArray;
+import android.graphics.drawable.Drawable;
+import android.os.Bundle;
+import android.text.TextUtils;
+import android.util.AttributeSet;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewStub;
+import android.view.animation.AlphaAnimation;
+import android.widget.*;
+
+import com.facebook.AccessToken;
+import com.facebook.AccessTokenTracker;
+import com.facebook.FacebookException;
+import com.facebook.GraphRequest;
+import com.example.scrumptious.R;
+
+import org.json.JSONObject;
+
+import java.util.*;
+
+/**
+ * Provides functionality common to SDK UI elements that allow the user to pick one or more
+ * graph objects (e.g., places, friends) from a list of possibilities. The UI is exposed as a
+ * Fragment to allow to it to be included in an Activity along with other Fragments. The Fragments
+ * can be configured by passing parameters as part of their Intent bundle, or (for certain
+ * properties) by specifying attributes in their XML layout files.
+ * <br/>
+ * PickerFragments support callbacks that will be called in the event of an error, when the
+ * underlying data has been changed, or when the set of selected graph objects changes.
+ */
+public abstract class PickerFragment extends Fragment {
+    /**
+     * The key for a boolean parameter in the fragment's Intent bundle to indicate whether the
+     * picker should show pictures (if available) for the graph objects.
+     */
+    public static final String SHOW_PICTURES_BUNDLE_KEY = "com.example.scrumptious.widget.PickerFragment.ShowPictures";
+    /**
+     * The key for a String parameter in the fragment's Intent bundle to indicate which extra fields
+     * beyond the default fields should be retrieved for any graph objects in the results.
+     */
+    public static final String EXTRA_FIELDS_BUNDLE_KEY = "com.example.scrumptious.widget.PickerFragment.ExtraFields";
+    /**
+     * The key for a boolean parameter in the fragment's Intent bundle to indicate whether the
+     * picker should display a title bar with a Done button.
+     */
+    public static final String SHOW_TITLE_BAR_BUNDLE_KEY = "com.example.scrumptious.widget.PickerFragment.ShowTitleBar";
+    /**
+     * The key for a String parameter in the fragment's Intent bundle to indicate the text to
+     * display in the title bar.
+     */
+    public static final String TITLE_TEXT_BUNDLE_KEY = "com.example.scrumptious.widget.PickerFragment.TitleText";
+    /**
+     * The key for a String parameter in the fragment's Intent bundle to indicate the text to
+     * display in the Done button.
+     */
+    public static final String DONE_BUTTON_TEXT_BUNDLE_KEY = "com.example.scrumptious.widget.PickerFragment.DoneButtonText";
+
+    private static final String SELECTION_BUNDLE_KEY = "com.facebook.android.PickerFragment.Selection";
+    private static final String ACTIVITY_CIRCLE_SHOW_KEY = "com.facebook.android.PickerFragment.ActivityCircleShown";
+    private static final int PROFILE_PICTURE_PREFETCH_BUFFER = 5;
+
+    private final int layout;
+    private OnErrorListener onErrorListener;
+    private OnDataChangedListener onDataChangedListener;
+    private OnSelectionChangedListener onSelectionChangedListener;
+    private OnDoneButtonClickedListener onDoneButtonClickedListener;
+    private GraphObjectFilter filter;
+    private boolean showPictures = true;
+    private boolean showTitleBar = true;
+    private ListView listView;
+    HashSet<String> extraFields = new HashSet<String>();
+    GraphObjectAdapter adapter;
+    private LoadingStrategy loadingStrategy;
+    private SelectionStrategy selectionStrategy;
+    private Set<String> selectionHint;
+    private ProgressBar activityCircle;
+    private AccessTokenTracker accessTokenTracker;
+    private String titleText;
+    private String doneButtonText;
+    private TextView titleTextView;
+    private Button doneButton;
+    private Drawable titleBarBackground;
+    private Drawable doneButtonBackground;
+    private boolean appEventsLogged;
+
+    protected PickerFragment(int layout) {
+        this.layout = layout;
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        adapter = createAdapter();
+        adapter.setFilter(new GraphObjectAdapter.Filter() {
+            @Override
+            public boolean includeItem(JSONObject graphObject) {
+                return filterIncludesItem(graphObject);
+            }
+        });
+    }
+
+    @Override
+    public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {
+        super.onInflate(activity, attrs, savedInstanceState);
+        TypedArray a = activity.obtainStyledAttributes(attrs, R.styleable.picker_fragment);
+
+        setShowPictures(a.getBoolean(R.styleable.picker_fragment_show_pictures, showPictures));
+        String extraFieldsString = a.getString(R.styleable.picker_fragment_extra_fields);
+        if (extraFieldsString != null) {
+            String[] strings = extraFieldsString.split(",");
+            setExtraFields(Arrays.asList(strings));
+        }
+
+        showTitleBar = a.getBoolean(R.styleable.picker_fragment_show_title_bar, showTitleBar);
+        titleText = a.getString(R.styleable.picker_fragment_title_text);
+        doneButtonText = a.getString(R.styleable.picker_fragment_done_button_text);
+        titleBarBackground = a.getDrawable(R.styleable.picker_fragment_title_bar_background);
+        doneButtonBackground = a.getDrawable(R.styleable.picker_fragment_done_button_background);
+
+        a.recycle();
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        ViewGroup view = (ViewGroup) inflater.inflate(layout, container, false);
+
+        listView = (ListView) view.findViewById(R.id.com_facebook_picker_list_view);
+        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> parent, View v, int position, long id) {
+                onListItemClick((ListView) parent, v, position);
+            }
+        });
+        listView.setOnLongClickListener(new View.OnLongClickListener() {
+            @Override
+            public boolean onLongClick(View v) {
+                // We don't actually do anything differently on long-clicks, but setting the listener
+                // enables the selector transition that we have for visual consistency with the
+                // Facebook app's pickers.
+                return false;
+            }
+        });
+        listView.setOnScrollListener(onScrollListener);
+
+        activityCircle = (ProgressBar) view.findViewById(R.id.com_facebook_picker_activity_circle);
+
+        setupViews(view);
+
+        listView.setAdapter(adapter);
+
+        return view;
+    }
+
+    @Override
+    public void onActivityCreated(final Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+
+        accessTokenTracker = new AccessTokenTracker() {
+            @Override
+            protected void onCurrentAccessTokenChanged(AccessToken oldAccessToken,
+                                                       AccessToken currentAccessToken) {
+                clearResults();
+            }
+        };
+
+        setSettingsFromBundle(savedInstanceState);
+
+        loadingStrategy = createLoadingStrategy();
+        loadingStrategy.attach(adapter);
+
+        selectionStrategy = createSelectionStrategy();
+        selectionStrategy.readSelectionFromBundle(savedInstanceState, SELECTION_BUNDLE_KEY);
+
+        // Should we display a title bar? (We need to do this after we've retrieved our bundle settings.)
+        if (showTitleBar) {
+            inflateTitleBar((ViewGroup) getView());
+        }
+
+        if (activityCircle != null && savedInstanceState != null) {
+            boolean shown = savedInstanceState.getBoolean(ACTIVITY_CIRCLE_SHOW_KEY, false);
+            if (shown) {
+                displayActivityCircle();
+            } else {
+                // Should be hidden already, but just to be sure.
+                hideActivityCircle();
+            }
+        }
+    }
+
+    @Override
+    public void onDetach() {
+        super.onDetach();
+
+        listView.setOnScrollListener(null);
+        listView.setAdapter(null);
+
+        loadingStrategy.detach();
+        accessTokenTracker.stopTracking();
+    }
+
+    @Override
+    public void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+
+        saveSettingsToBundle(outState);
+        selectionStrategy.saveSelectionToBundle(outState, SELECTION_BUNDLE_KEY);
+        if (activityCircle != null) {
+            outState.putBoolean(ACTIVITY_CIRCLE_SHOW_KEY, activityCircle.getVisibility() == View.VISIBLE);
+        }
+    }
+
+    @Override
+    public void onStop() {
+        if (!appEventsLogged) {
+            logAppEvents(false);
+        }
+        super.onStop();
+    }
+
+    @Override
+    public void setArguments(Bundle args) {
+        super.setArguments(args);
+        setSettingsFromBundle(args);
+    }
+
+    /**
+     * Gets the current OnDataChangedListener for this fragment, which will be called whenever
+     * the underlying data being displaying in the picker has changed.
+     *
+     * @return the OnDataChangedListener, or null if there is none
+     */
+    public OnDataChangedListener getOnDataChangedListener() {
+        return onDataChangedListener;
+    }
+
+    /**
+     * Sets the current OnDataChangedListener for this fragment, which will be called whenever
+     * the underlying data being displaying in the picker has changed.
+     *
+     * @param onDataChangedListener the OnDataChangedListener, or null if there is none
+     */
+    public void setOnDataChangedListener(OnDataChangedListener onDataChangedListener) {
+        this.onDataChangedListener = onDataChangedListener;
+    }
+
+    /**
+     * Gets the current OnSelectionChangedListener for this fragment, which will be called
+     * whenever the user selects or unselects a graph object in the list.
+     *
+     * @return the OnSelectionChangedListener, or null if there is none
+     */
+    public OnSelectionChangedListener getOnSelectionChangedListener() {
+        return onSelectionChangedListener;
+    }
+
+    /**
+     * Sets the current OnSelectionChangedListener for this fragment, which will be called
+     * whenever the user selects or unselects a graph object in the list.
+     *
+     * @param onSelectionChangedListener the OnSelectionChangedListener, or null if there is none
+     */
+    public void setOnSelectionChangedListener(
+            OnSelectionChangedListener onSelectionChangedListener) {
+        this.onSelectionChangedListener = onSelectionChangedListener;
+    }
+
+    /**
+     * Gets the current OnDoneButtonClickedListener for this fragment, which will be called
+     * when the user clicks the Done button.
+     *
+     * @return the OnDoneButtonClickedListener, or null if there is none
+     */
+    public OnDoneButtonClickedListener getOnDoneButtonClickedListener() {
+        return onDoneButtonClickedListener;
+    }
+
+    /**
+     * Sets the current OnDoneButtonClickedListener for this fragment, which will be called
+     * when the user clicks the Done button. This will only be possible if the title bar is
+     * being shown in this fragment.
+     *
+     * @param onDoneButtonClickedListener the OnDoneButtonClickedListener, or null if there is none
+     */
+    public void setOnDoneButtonClickedListener(OnDoneButtonClickedListener onDoneButtonClickedListener) {
+        this.onDoneButtonClickedListener = onDoneButtonClickedListener;
+    }
+
+    /**
+     * Gets the current OnErrorListener for this fragment, which will be called in the event
+     * of network or other errors encountered while populating the graph objects in the list.
+     *
+     * @return the OnErrorListener, or null if there is none
+     */
+    public OnErrorListener getOnErrorListener() {
+        return onErrorListener;
+    }
+
+    /**
+     * Sets the current OnErrorListener for this fragment, which will be called in the event
+     * of network or other errors encountered while populating the graph objects in the list.
+     *
+     * @param onErrorListener the OnErrorListener, or null if there is none
+     */
+    public void setOnErrorListener(OnErrorListener onErrorListener) {
+        this.onErrorListener = onErrorListener;
+    }
+
+    /**
+     * Gets the current filter for this fragment, which will be called for each graph object
+     * returned from the service to determine if it should be displayed in the list.
+     * If no filter is specified, all retrieved graph objects will be displayed.
+     *
+     * @return the GraphObjectFilter, or null if there is none
+     */
+    public GraphObjectFilter getFilter() {
+        return filter;
+    }
+
+    /**
+     * Sets the current filter for this fragment, which will be called for each graph object
+     * returned from the service to determine if it should be displayed in the list.
+     * If no filter is specified, all retrieved graph objects will be displayed.
+     *
+     * @param filter the GraphObjectFilter, or null if there is none
+     */
+    public void setFilter(GraphObjectFilter filter) {
+        this.filter = filter;
+    }
+
+    /**
+     * Gets whether to display pictures, if available, for displayed graph objects.
+     *
+     * @return true if pictures should be displayed, false if not
+     */
+    public boolean getShowPictures() {
+        return showPictures;
+    }
+
+    /**
+     * Sets whether to display pictures, if available, for displayed graph objects.
+     *
+     * @param showPictures true if pictures should be displayed, false if not
+     */
+    public void setShowPictures(boolean showPictures) {
+        this.showPictures = showPictures;
+    }
+
+    /**
+     * Gets the extra fields to request for the retrieved graph objects.
+     *
+     * @return the extra fields to request
+     */
+    public Set<String> getExtraFields() {
+        return new HashSet<String>(extraFields);
+    }
+
+    /**
+     * Sets the extra fields to request for the retrieved graph objects.
+     *
+     * @param fields the extra fields to request
+     */
+    public void setExtraFields(Collection<String> fields) {
+        extraFields = new HashSet<String>();
+        if (fields != null) {
+            extraFields.addAll(fields);
+        }
+    }
+
+    /**
+     * Sets whether to show a title bar with a Done button. This must be
+     * called prior to the Fragment going through its creation lifecycle to have an effect.
+     *
+     * @param showTitleBar true if a title bar should be displayed, false if not
+     */
+    public void setShowTitleBar(boolean showTitleBar) {
+        this.showTitleBar = showTitleBar;
+    }
+
+    /**
+     * Gets whether to show a title bar with a Done button. The default is true.
+     *
+     * @return true if a title bar will be shown, false if not.
+     */
+    public boolean getShowTitleBar() {
+        return showTitleBar;
+    }
+
+    /**
+     * Sets the text to show in the title bar, if a title bar is to be shown. This must be
+     * called prior to the Fragment going through its creation lifecycle to have an effect, or
+     * the default will be used.
+     *
+     * @param titleText the text to show in the title bar
+     */
+    public void setTitleText(String titleText) {
+        this.titleText = titleText;
+    }
+
+    /**
+     * Gets the text to show in the title bar, if a title bar is to be shown.
+     *
+     * @return the text to show in the title bar
+     */
+    public String getTitleText() {
+        if (titleText == null) {
+            titleText = getDefaultTitleText();
+        }
+        return titleText;
+    }
+
+    /**
+     * Sets the text to show in the Done button, if a title bar is to be shown. This must be
+     * called prior to the Fragment going through its creation lifecycle to have an effect, or
+     * the default will be used.
+     *
+     * @param doneButtonText the text to show in the Done button
+     */
+    public void setDoneButtonText(String doneButtonText) {
+        this.doneButtonText = doneButtonText;
+    }
+
+    /**
+     * Gets the text to show in the Done button, if a title bar is to be shown.
+     *
+     * @return the text to show in the Done button
+     */
+    public String getDoneButtonText() {
+        if (doneButtonText == null) {
+            doneButtonText = getDefaultDoneButtonText();
+        }
+        return doneButtonText;
+    }
+
+    /**
+     * Causes the picker to load data from the service and display it to the user.
+     *
+     * @param forceReload if true, data will be loaded even if there is already data being displayed (or loading);
+     *                    if false, data will not be re-loaded if it is already displayed (or loading)
+     */
+    public void loadData(boolean forceReload) {
+        loadData(forceReload, null);
+    }
+
+    /**
+     * Causes the picker to load data from the service and display it to the user.
+     *
+     * @param forceReload if true, data will be loaded even if there is already data being displayed (or loading);
+     *                    if false, data will not be re-loaded if it is already displayed (or loading)
+     * @param selectIds ids to select, if they are present in the loaded data
+     */
+    public void loadData(boolean forceReload, Set<String> selectIds) {
+        if (!forceReload && loadingStrategy.isDataPresentOrLoading()) {
+            return;
+        }
+        selectionHint = selectIds;
+        clearResults();
+
+        GraphRequest request = getRequestForLoadData();
+        if (request != null) {
+            onLoadingData();
+            loadingStrategy.startLoading(request);
+        }
+    }
+
+    /**
+     * Updates the properties of the PickerFragment based on the contents of the supplied Bundle;
+     * calling Activities may use this to pass additional configuration information to the
+     * PickerFragment beyond what is specified in its XML layout.
+     *
+     * @param inState a Bundle containing keys corresponding to properties of the PickerFragment
+     */
+    public void setSettingsFromBundle(Bundle inState) {
+        if (inState != null) {
+            showPictures = inState.getBoolean(SHOW_PICTURES_BUNDLE_KEY, showPictures);
+            String extraFieldsString = inState.getString(EXTRA_FIELDS_BUNDLE_KEY);
+            if (extraFieldsString != null) {
+                String[] strings = extraFieldsString.split(",");
+                setExtraFields(Arrays.asList(strings));
+            }
+            showTitleBar = inState.getBoolean(SHOW_TITLE_BAR_BUNDLE_KEY, showTitleBar);
+            String titleTextString = inState.getString(TITLE_TEXT_BUNDLE_KEY);
+            if (titleTextString != null) {
+                titleText = titleTextString;
+                if (titleTextView != null) {
+                    titleTextView.setText(titleText);
+                }
+            }
+            String doneButtonTextString = inState.getString(DONE_BUTTON_TEXT_BUNDLE_KEY);
+            if (doneButtonTextString != null) {
+                doneButtonText = doneButtonTextString;
+                if (doneButton != null) {
+                    doneButton.setText(doneButtonText);
+                }
+            }
+        }
+
+    }
+
+    void setupViews(ViewGroup view) {
+    }
+
+    boolean filterIncludesItem(JSONObject graphObject) {
+        if (filter != null) {
+            return filter.includeItem(graphObject);
+        }
+        return true;
+    }
+
+    List<JSONObject> getSelectedGraphObjects() {
+        return adapter.getGraphObjectsById(selectionStrategy.getSelectedIds());
+    }
+
+    void setSelectedGraphObjects(List<String> objectIds) {
+        for(String objectId : objectIds) {
+            if(!this.selectionStrategy.isSelected(objectId)) {
+                this.selectionStrategy.toggleSelection(objectId);
+            }
+        }
+    }
+
+    void saveSettingsToBundle(Bundle outState) {
+        outState.putBoolean(SHOW_PICTURES_BUNDLE_KEY, showPictures);
+        if (!extraFields.isEmpty()) {
+            outState.putString(EXTRA_FIELDS_BUNDLE_KEY, TextUtils.join(",", extraFields));
+        }
+        outState.putBoolean(SHOW_TITLE_BAR_BUNDLE_KEY, showTitleBar);
+        outState.putString(TITLE_TEXT_BUNDLE_KEY, titleText);
+        outState.putString(DONE_BUTTON_TEXT_BUNDLE_KEY, doneButtonText);
+    }
+
+    abstract GraphRequest getRequestForLoadData();
+
+    abstract PickerFragmentAdapter createAdapter();
+
+    abstract LoadingStrategy createLoadingStrategy();
+
+    abstract SelectionStrategy createSelectionStrategy();
+
+    void onLoadingData() {
+    }
+
+    String getDefaultTitleText() {
+        return null;
+    }
+
+    String getDefaultDoneButtonText() {
+        return getString(R.string.picker_picker_done_button_text);
+    }
+
+    void displayActivityCircle() {
+        if (activityCircle != null) {
+            layoutActivityCircle();
+            activityCircle.setVisibility(View.VISIBLE);
+        }
+    }
+
+    void layoutActivityCircle() {
+        // If we've got no data, make the activity circle full-opacity. Otherwise we'll dim it to avoid
+        //  cluttering the UI.
+        float alpha = (!adapter.isEmpty()) ? .25f : 1.0f;
+        setAlpha(activityCircle, alpha);
+    }
+
+    void hideActivityCircle() {
+        if (activityCircle != null) {
+            // We use an animation to dim the activity circle; need to clear this or it will remain visible.
+            activityCircle.clearAnimation();
+            activityCircle.setVisibility(View.INVISIBLE);
+        }
+    }
+
+    void setSelectionStrategy(SelectionStrategy selectionStrategy) {
+        if (selectionStrategy != this.selectionStrategy) {
+            this.selectionStrategy = selectionStrategy;
+            if (adapter != null) {
+                // Adapter should cause a re-render.
+                adapter.notifyDataSetChanged();
+            }
+        }
+    }
+
+    void logAppEvents(boolean doneButtonClicked) {
+    }
+
+    private static void setAlpha(View view, float alpha) {
+        // Set the alpha appropriately (setAlpha is API >= 11, this technique works on all API levels).
+        AlphaAnimation alphaAnimation = new AlphaAnimation(alpha, alpha);
+        alphaAnimation.setDuration(0);
+        alphaAnimation.setFillAfter(true);
+        view.startAnimation(alphaAnimation);
+    }
+
+    private void inflateTitleBar(ViewGroup view) {
+        ViewStub stub = (ViewStub) view.findViewById(R.id.com_facebook_picker_title_bar_stub);
+        if (stub != null) {
+            View titleBar = stub.inflate();
+
+            final RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(
+                    RelativeLayout.LayoutParams.MATCH_PARENT,
+                    RelativeLayout.LayoutParams.MATCH_PARENT);
+            layoutParams.addRule(RelativeLayout.BELOW, R.id.com_facebook_picker_title_bar);
+            listView.setLayoutParams(layoutParams);
+
+            if (titleBarBackground != null) {
+                titleBar.setBackgroundDrawable(titleBarBackground);
+            }
+
+            doneButton = (Button) view.findViewById(R.id.com_facebook_picker_done_button);
+            if (doneButton != null) {
+                doneButton.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        logAppEvents(true);
+                        appEventsLogged = true;
+
+                        if (onDoneButtonClickedListener != null) {
+                            onDoneButtonClickedListener.onDoneButtonClicked(PickerFragment.this);
+                        }
+                    }
+                });
+
+                if (getDoneButtonText() != null) {
+                    doneButton.setText(getDoneButtonText());
+                }
+
+                if (doneButtonBackground != null) {
+                    doneButton.setBackgroundDrawable(doneButtonBackground);
+                }
+            }
+
+            titleTextView = (TextView) view.findViewById(R.id.com_facebook_picker_title);
+            if (titleTextView != null) {
+                if (getTitleText() != null) {
+                    titleTextView.setText(getTitleText());
+                }
+            }
+        }
+    }
+
+    private void onListItemClick(ListView listView, View v, int position) {
+        @SuppressWarnings("unchecked")
+        JSONObject graphObject = (JSONObject) listView.getItemAtPosition(position);
+        String id = adapter.getIdOfGraphObject(graphObject);
+        selectionStrategy.toggleSelection(id);
+        adapter.notifyDataSetChanged();
+
+        if (onSelectionChangedListener != null) {
+            onSelectionChangedListener.onSelectionChanged(PickerFragment.this);
+        }
+    }
+
+    private void clearResults() {
+        if (adapter != null) {
+            boolean wasSelection = !selectionStrategy.isEmpty();
+            boolean wasData = !adapter.isEmpty();
+
+            loadingStrategy.clearResults();
+            selectionStrategy.clear();
+            adapter.notifyDataSetChanged();
+
+            // Tell anyone who cares the data and selection has changed, if they have.
+            if (wasData && onDataChangedListener != null) {
+                onDataChangedListener.onDataChanged(PickerFragment.this);
+            }
+            if (wasSelection && onSelectionChangedListener != null) {
+                onSelectionChangedListener.onSelectionChanged(PickerFragment.this);
+            }
+        }
+    }
+
+    void updateAdapter(GraphObjectCursor data) {
+        if (adapter != null) {
+            // As we fetch additional results and add them to the table, we do not
+            // want the items displayed jumping around seemingly at random, frustrating the user's
+            // attempts at scrolling, etc. Since results may be added anywhere in
+            // the table, we choose to try to keep the first visible row in a fixed
+            // position (from the user's perspective). We try to keep it positioned at
+            // the same offset from the top of the screen so adding new items seems
+            // smoother, as opposed to having it "snap" to a multiple of row height
+
+            // We use the second row, to give context above and below it and avoid
+            // cases where the first row is only barely visible, thus providing little context.
+            // The exception is where the very first row is visible, in which case we use that.
+            View view = listView.getChildAt(1);
+            int anchorPosition = listView.getFirstVisiblePosition();
+            if (anchorPosition > 0) {
+                anchorPosition++;
+            }
+            GraphObjectAdapter.SectionAndItem anchorItem = adapter.getSectionAndItem(anchorPosition);
+            final int top = (view != null &&
+                    anchorItem.getType() != GraphObjectAdapter.SectionAndItem.Type.ACTIVITY_CIRCLE) ?
+                    view.getTop() : 0;
+
+            // Now actually add the results.
+            boolean dataChanged = adapter.changeCursor(data);
+
+            if (view != null && anchorItem != null) {
+                // Put the item back in the same spot it was.
+                final int newPositionOfItem = adapter.getPosition(anchorItem.sectionKey, anchorItem.graphObject);
+                if (newPositionOfItem != -1) {
+                    listView.setSelectionFromTop(newPositionOfItem, top);
+                }
+            }
+
+            if (dataChanged && onDataChangedListener != null) {
+                onDataChangedListener.onDataChanged(PickerFragment.this);
+            }
+            if (selectionHint != null && !selectionHint.isEmpty() && data != null) {
+                data.moveToFirst();
+                boolean changed = false;
+                for (int i = 0; i < data.getCount(); i++) {
+                    data.moveToPosition(i);
+                    String id = data.getGraphObject().optString("id");
+                    if (id == null) {
+                        continue;
+                    }
+                    if (selectionHint.contains(id)) {
+                        selectionStrategy.toggleSelection(id);
+                        selectionHint.remove(id);
+                        changed = true;
+                    }
+                    if (selectionHint.isEmpty()) {
+                        break;
+                    }
+                }
+                if (onSelectionChangedListener != null && changed) {
+                    onSelectionChangedListener.onSelectionChanged(PickerFragment.this);
+                }
+            }
+        }
+    }
+
+    private void reprioritizeDownloads() {
+        int lastVisibleItem = listView.getLastVisiblePosition();
+        if (lastVisibleItem >= 0) {
+            int firstVisibleItem = listView.getFirstVisiblePosition();
+            adapter.prioritizeViewRange(firstVisibleItem, lastVisibleItem, PROFILE_PICTURE_PREFETCH_BUFFER);
+        }
+    }
+
+    private ListView.OnScrollListener onScrollListener = new ListView.OnScrollListener() {
+        @Override
+        public void onScrollStateChanged(AbsListView view, int scrollState) {
+        }
+
+        @Override
+        public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+            reprioritizeDownloads();
+        }
+    };
+
+    /**
+     * Callback interface that will be called when a network or other error is encountered
+     * while retrieving graph objects.
+     */
+    public interface OnErrorListener {
+        /**
+         * Called when a network or other error is encountered.
+         *
+         * @param error a FacebookException representing the error that was encountered.
+         */
+        void onError(PickerFragment fragment, FacebookException error);
+    }
+
+    /**
+     * Callback interface that will be called when the underlying data being displayed in the
+     * picker has been updated.
+     */
+    public interface OnDataChangedListener {
+        /**
+         * Called when the set of data being displayed in the picker has changed.
+         */
+        void onDataChanged(PickerFragment fragment);
+    }
+
+    /**
+     * Callback interface that will be called when the user selects or unselects graph objects
+     * in the picker.
+     */
+    public interface OnSelectionChangedListener {
+        /**
+         * Called when the user selects or unselects graph objects in the picker.
+         */
+        void onSelectionChanged(PickerFragment fragment);
+    }
+
+    /**
+     * Callback interface that will be called when the user clicks the Done button on the
+     * title bar.
+     */
+    public interface OnDoneButtonClickedListener {
+        /**
+         * Called when the user clicks the Done button.
+         */
+        void onDoneButtonClicked(PickerFragment fragment);
+    }
+
+    /**
+     * Callback interface that will be called to determine if a graph object should be displayed.
+     */
+    public interface GraphObjectFilter {
+        /**
+         * Called to determine if a graph object should be displayed.
+         *
+         * @param graphObject the graph object
+         * @return true to display the graph object, false to hide it
+         */
+        boolean includeItem(JSONObject graphObject);
+    }
+
+    abstract class LoadingStrategy {
+        protected final static int CACHED_RESULT_REFRESH_DELAY = 2 * 1000;
+
+        protected GraphObjectPagingLoader loader;
+        protected GraphObjectAdapter adapter;
+
+        public void attach(GraphObjectAdapter adapter) {
+            loader = (GraphObjectPagingLoader) getLoaderManager().initLoader(0, null,
+                    new LoaderManager.LoaderCallbacks<GraphObjectCursor>() {
+                        @Override
+                        public Loader<GraphObjectCursor> onCreateLoader(int id, Bundle args) {
+                            return LoadingStrategy.this.onCreateLoader();
+                        }
+
+                        @Override
+                        public void onLoadFinished(Loader<GraphObjectCursor> loader,
+                                GraphObjectCursor data) {
+                            if (loader != LoadingStrategy.this.loader) {
+                                throw new FacebookException("Received callback for unknown loader.");
+                            }
+                            LoadingStrategy.this.onLoadFinished((GraphObjectPagingLoader) loader, data);
+                        }
+
+                        @Override
+                        public void onLoaderReset(Loader<GraphObjectCursor> loader) {
+                            if (loader != LoadingStrategy.this.loader) {
+                                throw new FacebookException("Received callback for unknown loader.");
+                            }
+                            LoadingStrategy.this.onLoadReset((GraphObjectPagingLoader) loader);
+                        }
+                    });
+
+            loader.setOnErrorListener(new GraphObjectPagingLoader.OnErrorListener() {
+                @Override
+                public void onError(FacebookException error, GraphObjectPagingLoader loader) {
+                    hideActivityCircle();
+                    if (onErrorListener != null) {
+                        onErrorListener.onError(PickerFragment.this, error);
+                    }
+                }
+            });
+
+            this.adapter = adapter;
+            // Tell the adapter about any data we might already have.
+            this.adapter.changeCursor(loader.getCursor());
+            this.adapter.setOnErrorListener(new GraphObjectAdapter.OnErrorListener() {
+                @Override
+                public void onError(GraphObjectAdapter adapter, FacebookException error) {
+                    if (onErrorListener != null) {
+                        onErrorListener.onError(PickerFragment.this, error);
+                    }
+                }
+            });
+        }
+
+        public void detach() {
+            adapter.setDataNeededListener(null);
+            adapter.setOnErrorListener(null);
+            loader.setOnErrorListener(null);
+
+            loader = null;
+            adapter = null;
+        }
+
+        public void clearResults() {
+            if (loader != null) {
+                loader.clearResults();
+            }
+        }
+
+        public void startLoading(GraphRequest request) {
+            if (loader != null) {
+                loader.startLoading(request);
+                onStartLoading(loader, request);
+            }
+        }
+
+        public boolean isDataPresentOrLoading() {
+            return !adapter.isEmpty() || loader.isLoading();
+        }
+
+        protected GraphObjectPagingLoader onCreateLoader() {
+            return new GraphObjectPagingLoader(getActivity());
+        }
+
+        protected void onStartLoading(GraphObjectPagingLoader loader, GraphRequest request) {
+            displayActivityCircle();
+        }
+
+        protected void onLoadReset(GraphObjectPagingLoader loader) {
+            adapter.changeCursor(null);
+        }
+
+        protected void onLoadFinished(GraphObjectPagingLoader loader, GraphObjectCursor data) {
+            updateAdapter(data);
+        }
+    }
+
+    abstract class SelectionStrategy {
+        abstract boolean isSelected(String id);
+
+        abstract void toggleSelection(String id);
+
+        abstract Collection<String> getSelectedIds();
+
+        abstract void clear();
+
+        abstract boolean isEmpty();
+
+        abstract boolean shouldShowCheckBoxIfUnselected();
+
+        abstract void saveSelectionToBundle(Bundle outBundle, String key);
+
+        abstract void readSelectionFromBundle(Bundle inBundle, String key);
+    }
+
+    class SingleSelectionStrategy extends SelectionStrategy {
+        private String selectedId;
+
+        public Collection<String> getSelectedIds() {
+            return Arrays.asList(new String[]{selectedId});
+        }
+
+        @Override
+        boolean isSelected(String id) {
+            return selectedId != null && id != null && selectedId.equals(id);
+        }
+
+        @Override
+        void toggleSelection(String id) {
+            if (selectedId != null && selectedId.equals(id)) {
+                selectedId = null;
+            } else {
+                selectedId = id;
+            }
+        }
+
+        @Override
+        void saveSelectionToBundle(Bundle outBundle, String key) {
+            if (!TextUtils.isEmpty(selectedId)) {
+                outBundle.putString(key, selectedId);
+            }
+        }
+
+        @Override
+        void readSelectionFromBundle(Bundle inBundle, String key) {
+            if (inBundle != null) {
+                selectedId = inBundle.getString(key);
+            }
+        }
+
+        @Override
+        public void clear() {
+            selectedId = null;
+        }
+
+        @Override
+        boolean isEmpty() {
+            return selectedId == null;
+        }
+
+        @Override
+        boolean shouldShowCheckBoxIfUnselected() {
+            return false;
+        }
+    }
+
+    class MultiSelectionStrategy extends SelectionStrategy {
+        private Set<String> selectedIds = new HashSet<String>();
+
+        public Collection<String> getSelectedIds() {
+            return selectedIds;
+        }
+
+        @Override
+        boolean isSelected(String id) {
+            return id != null && selectedIds.contains(id);
+        }
+
+        @Override
+        void toggleSelection(String id) {
+            if (id != null) {
+                if (selectedIds.contains(id)) {
+                    selectedIds.remove(id);
+                } else {
+                    selectedIds.add(id);
+                }
+            }
+        }
+
+        @Override
+        void saveSelectionToBundle(Bundle outBundle, String key) {
+            if (!selectedIds.isEmpty()) {
+                String ids = TextUtils.join(",", selectedIds);
+                outBundle.putString(key, ids);
+            }
+        }
+
+        @Override
+        void readSelectionFromBundle(Bundle inBundle, String key) {
+            if (inBundle != null) {
+                String ids = inBundle.getString(key);
+                if (ids != null) {
+                    String[] splitIds = TextUtils.split(ids, ",");
+                    selectedIds.clear();
+                    Collections.addAll(selectedIds, splitIds);
+                }
+            }
+        }
+
+        @Override
+        public void clear() {
+            selectedIds.clear();
+        }
+
+        @Override
+        boolean isEmpty() {
+            return selectedIds.isEmpty();
+        }
+
+        @Override
+        boolean shouldShowCheckBoxIfUnselected() {
+            return true;
+        }
+    }
+
+    abstract class PickerFragmentAdapter extends GraphObjectAdapter {
+        public PickerFragmentAdapter(Context context) {
+            super(context);
+        }
+
+        @Override
+        boolean isGraphObjectSelected(String graphObjectId) {
+            return selectionStrategy.isSelected(graphObjectId);
+        }
+
+        @Override
+        void updateCheckboxState(CheckBox checkBox, boolean graphObjectSelected) {
+            checkBox.setChecked(graphObjectSelected);
+            int visible = (graphObjectSelected || selectionStrategy.shouldShowCheckBoxIfUnselected())
+                    ? View.VISIBLE : View.GONE;
+            checkBox.setVisibility(visible);
+        }
+    }
+}
diff --git a/samples/Scrumptious/src/com/example/scrumptious/picker/PlacePickerFragment.java b/samples/Scrumptious/src/com/example/scrumptious/picker/PlacePickerFragment.java
new file mode 100644
index 000000000..ce9188d49
--- /dev/null
+++ b/samples/Scrumptious/src/com/example/scrumptious/picker/PlacePickerFragment.java
@@ -0,0 +1,512 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.scrumptious.picker;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.res.TypedArray;
+import android.location.Location;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Looper;
+import android.text.Editable;
+import android.text.TextUtils;
+import android.text.TextWatcher;
+import android.util.AttributeSet;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.inputmethod.InputMethodManager;
+import android.widget.EditText;
+import android.widget.ListView;
+import com.facebook.*;
+import com.facebook.appevents.AppEventsLogger;
+import com.example.scrumptious.R;
+import com.facebook.internal.AnalyticsEvents;
+import com.facebook.internal.Logger;
+import com.facebook.internal.Utility;
+
+import org.json.JSONObject;
+
+import java.util.*;
+
+public class PlacePickerFragment extends PickerFragment {
+    /**
+     * The key for an int parameter in the fragment's Intent bundle to indicate the radius in meters around
+     * the center point to search. The default is 1000 meters.
+     */
+    public static final String RADIUS_IN_METERS_BUNDLE_KEY = "com.example.scrumptious.widget.PlacePickerFragment.RadiusInMeters";
+    /**
+     * The key for an int parameter in the fragment's Intent bundle to indicate what how many results to
+     * return at a time. The default is 100 results.
+     */
+    public static final String RESULTS_LIMIT_BUNDLE_KEY = "com.example.scrumptious.widget.PlacePickerFragment.ResultsLimit";
+    /**
+     * The key for a String parameter in the fragment's Intent bundle to indicate what search text should
+     * be sent to the service. The default is to have no search text.
+     */
+    public static final String SEARCH_TEXT_BUNDLE_KEY = "com.example.scrumptious.widget.PlacePickerFragment.SearchText";
+    /**
+     * The key for a Location parameter in the fragment's Intent bundle to indicate what geographical
+     * location should be the center of the search.
+     */
+    public static final String LOCATION_BUNDLE_KEY = "com.example.scrumptious.widget.PlacePickerFragment.Location";
+    /**
+     * The key for a boolean parameter in the fragment's Intent bundle to indicate that the fragment
+     * should display a search box and automatically update the search text as it changes.
+     */
+    public static final String SHOW_SEARCH_BOX_BUNDLE_KEY = "com.example.scrumptious.widget.PlacePickerFragment.ShowSearchBox";
+
+    /**
+     * The default radius around the center point to search.
+     */
+    public static final int DEFAULT_RADIUS_IN_METERS = 1000;
+    /**
+     * The default number of results to retrieve.
+     */
+    public static final int DEFAULT_RESULTS_LIMIT = 100;
+
+    private static final int searchTextTimerDelayInMilliseconds = 2 * 1000;
+
+    private static final String ID = "id";
+    private static final String NAME = "name";
+    private static final String LOCATION = "location";
+    private static final String CATEGORY = "category";
+    private static final String WERE_HERE_COUNT = "were_here_count";
+    private static final String TAG = "PlacePickerFragment";
+
+    private Location location;
+    private int radiusInMeters = DEFAULT_RADIUS_IN_METERS;
+    private int resultsLimit = DEFAULT_RESULTS_LIMIT;
+    private String searchText;
+    private Timer searchTextTimer;
+    private boolean hasSearchTextChangedSinceLastQuery;
+    private boolean showSearchBox = true;
+    private EditText searchBox;
+
+    /**
+     * Default constructor. Creates a Fragment with all default properties.
+     */
+    public PlacePickerFragment() {
+        super(R.layout.picker_placepickerfragment);
+    }
+
+    /**
+     * Gets the location to search around. Either the location or the search text (or both) must be specified.
+     *
+     * @return the Location to search around
+     */
+    public Location getLocation() {
+        return location;
+    }
+
+    /**
+     * Sets the location to search around. Either the location or the search text (or both) must be specified.
+     *
+     * @param location the Location to search around
+     */
+    public void setLocation(Location location) {
+        this.location = location;
+    }
+
+    /**
+     * Gets the radius in meters around the location to search.
+     *
+     * @return the radius in meters
+     */
+    public int getRadiusInMeters() {
+        return radiusInMeters;
+    }
+
+    /**
+     * Sets the radius in meters around the location to search.
+     *
+     * @param radiusInMeters the radius in meters
+     */
+    public void setRadiusInMeters(int radiusInMeters) {
+        this.radiusInMeters = radiusInMeters;
+    }
+
+    /**
+     * Gets the number of results to retrieve.
+     *
+     * @return the number of results to retrieve
+     */
+    public int getResultsLimit() {
+        return resultsLimit;
+    }
+
+    /**
+     * Sets the number of results to retrieve.
+     *
+     * @param resultsLimit the number of results to retrieve
+     */
+    public void setResultsLimit(int resultsLimit) {
+        this.resultsLimit = resultsLimit;
+    }
+
+    /**
+     * Gets the search text (e.g., category, name) to search for. Either the location or the search
+     * text (or both) must be specified.
+     *
+     * @return the search text
+     */
+    public String getSearchText() {
+        return searchText;
+    }
+
+    /**
+     * Sets the search text (e.g., category, name) to search for. Either the location or the search
+     * text (or both) must be specified. If a search box is displayed, this will update its contents
+     * to the specified text.
+     *
+     * @param searchText the search text
+     */
+    public void setSearchText(String searchText) {
+        if (TextUtils.isEmpty(searchText)) {
+            searchText = null;
+        }
+        this.searchText = searchText;
+        if (this.searchBox != null) {
+            this.searchBox.setText(searchText);
+        }
+    }
+
+    /**
+     * Sets the search text and reloads the data in the control. This is used to provide search-box
+     * functionality where the user may be typing or editing text rapidly. It uses a timer to avoid repeated
+     * requerying, preferring to wait until the user pauses typing to refresh the data. Note that this
+     * method will NOT update the text in the search box, if any, as it is intended to be called as a result
+     * of changes to the search box (and is public to enable applications to provide their own search box
+     * UI instead of the default one).
+     *
+     * @param searchText                 the search text
+     * @param forceReloadEventIfSameText if true, will reload even if the search text has not changed; if false,
+     *                                   identical search text will not force a reload
+     */
+    public void onSearchBoxTextChanged(String searchText, boolean forceReloadEventIfSameText) {
+        if (!forceReloadEventIfSameText && Utility.stringsEqualOrEmpty(this.searchText, searchText)) {
+            return;
+        }
+
+        if (TextUtils.isEmpty(searchText)) {
+            searchText = null;
+        }
+        this.searchText = searchText;
+
+        // If search text is being set in response to user input, it is wasteful to send a new request
+        // with every keystroke. Send a request the first time the search text is set, then set up a 2-second timer
+        // and send whatever changes the user has made since then. (If nothing has changed
+        // in 2 seconds, we reset so the next change will cause an immediate re-query.)
+        hasSearchTextChangedSinceLastQuery = true;
+        if (searchTextTimer == null) {
+            searchTextTimer = createSearchTextTimer();
+        }
+    }
+
+    /**
+     * Gets the currently-selected place.
+     *
+     * @return the currently-selected place, or null if there is none
+     */
+    public JSONObject getSelection() {
+        Collection<JSONObject> selection = getSelectedGraphObjects();
+        return (selection != null && !selection.isEmpty()) ? selection.iterator().next() : null;
+    }
+
+    @Override
+    public void setSettingsFromBundle(Bundle inState) {
+        super.setSettingsFromBundle(inState);
+        if (inState != null) {
+            setRadiusInMeters(inState.getInt(RADIUS_IN_METERS_BUNDLE_KEY, radiusInMeters));
+            setResultsLimit(inState.getInt(RESULTS_LIMIT_BUNDLE_KEY, resultsLimit));
+            if (inState.containsKey(SEARCH_TEXT_BUNDLE_KEY)) {
+                setSearchText(inState.getString(SEARCH_TEXT_BUNDLE_KEY));
+            }
+            if (inState.containsKey(LOCATION_BUNDLE_KEY)) {
+                Location location = inState.getParcelable(LOCATION_BUNDLE_KEY);
+                setLocation(location);
+            }
+            showSearchBox = inState.getBoolean(SHOW_SEARCH_BOX_BUNDLE_KEY, showSearchBox);
+        }
+    }
+
+    @Override
+    public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanceState) {
+        super.onInflate(activity, attrs, savedInstanceState);
+        TypedArray a = activity.obtainStyledAttributes(attrs, R.styleable.picker_place_picker_fragment);
+
+        setRadiusInMeters(a.getInt(R.styleable.picker_place_picker_fragment_radius_in_meters, radiusInMeters));
+        setResultsLimit(a.getInt(R.styleable.picker_place_picker_fragment_results_limit, resultsLimit));
+        if (a.hasValue(R.styleable.picker_place_picker_fragment_results_limit)) {
+            setSearchText(a.getString(R.styleable.picker_place_picker_fragment_search_text));
+        }
+        showSearchBox = a.getBoolean(R.styleable.picker_place_picker_fragment_show_search_box, showSearchBox);
+
+        a.recycle();
+    }
+
+    @Override
+    void setupViews(ViewGroup view) {
+        if (showSearchBox) {
+            ListView listView = (ListView) view.findViewById(R.id.com_facebook_picker_list_view);
+
+            View searchHeaderView = getActivity().getLayoutInflater().inflate(
+                    R.layout.picker_search_box, listView, false);
+
+            listView.addHeaderView(searchHeaderView, null, false);
+
+            searchBox = (EditText) view.findViewById(R.id.com_facebook_picker_search_text);
+
+            searchBox.addTextChangedListener(new SearchTextWatcher());
+            if (!TextUtils.isEmpty(searchText)) {
+                searchBox.setText(searchText);
+            }
+        }
+    }
+
+    @Override
+    public void onAttach(Activity activity) {
+        super.onAttach(activity);
+
+        if (searchBox != null) {
+            InputMethodManager imm = (InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
+            imm.showSoftInput(searchBox, InputMethodManager.SHOW_IMPLICIT);
+        }
+    }
+
+    @Override
+    public void onDetach() {
+        super.onDetach();
+
+        if (searchBox != null) {
+            InputMethodManager imm = (InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
+            imm.hideSoftInputFromWindow(searchBox.getWindowToken(), 0);
+        }
+    }
+
+    void saveSettingsToBundle(Bundle outState) {
+        super.saveSettingsToBundle(outState);
+
+        outState.putInt(RADIUS_IN_METERS_BUNDLE_KEY, radiusInMeters);
+        outState.putInt(RESULTS_LIMIT_BUNDLE_KEY, resultsLimit);
+        outState.putString(SEARCH_TEXT_BUNDLE_KEY, searchText);
+        outState.putParcelable(LOCATION_BUNDLE_KEY, location);
+        outState.putBoolean(SHOW_SEARCH_BOX_BUNDLE_KEY, showSearchBox);
+    }
+
+    @Override
+    void onLoadingData() {
+        hasSearchTextChangedSinceLastQuery = false;
+    }
+
+    @Override
+    GraphRequest getRequestForLoadData() {
+        return createRequest(location, radiusInMeters, resultsLimit, searchText, extraFields);
+    }
+
+    @Override
+    String getDefaultTitleText() {
+        return getResources().getString(R.string.nearby);
+    }
+
+    @Override
+    void logAppEvents(boolean doneButtonClicked) {
+        AppEventsLogger logger = AppEventsLogger.newLogger(this.getActivity(),
+                AccessToken.getCurrentAccessToken().getToken());
+        Bundle parameters = new Bundle();
+
+        // If Done was clicked, we know this completed successfully. If not, we don't know (caller might have
+        // dismissed us in response to selection changing, or user might have hit back button). Either way
+        // we'll log the number of selections.
+        String outcome = doneButtonClicked ? AnalyticsEvents.PARAMETER_DIALOG_OUTCOME_VALUE_COMPLETED :
+                AnalyticsEvents.PARAMETER_DIALOG_OUTCOME_VALUE_UNKNOWN;
+        parameters.putString(AnalyticsEvents.PARAMETER_DIALOG_OUTCOME, outcome);
+        parameters.putInt("num_places_picked", (getSelection() != null) ? 1 : 0);
+
+        logger.logSdkEvent(AnalyticsEvents.EVENT_PLACE_PICKER_USAGE, null, parameters);
+    }
+
+    @Override
+    PickerFragmentAdapter createAdapter() {
+        PickerFragmentAdapter adapter = new PickerFragmentAdapter(
+                this.getActivity()) {
+            @Override
+            protected CharSequence getSubTitleOfGraphObject(JSONObject graphObject) {
+                String category = graphObject.optString(CATEGORY);
+                int wereHereCount = graphObject.optInt(WERE_HERE_COUNT);
+
+                String result = null;
+                if (category != null && wereHereCount != 0) {
+                    result = getString(R.string.picker_placepicker_subtitle_format, category, wereHereCount);
+                } else if (category == null && wereHereCount != 0) {
+                    result = getString(R.string.picker_placepicker_subtitle_were_here_only_format, wereHereCount);
+                } else if (category != null && wereHereCount == 0) {
+                    result = getString(R.string.picker_placepicker_subtitle_catetory_only_format, category);
+                }
+                return result;
+            }
+
+            @Override
+            protected int getGraphObjectRowLayoutId(JSONObject graphObject) {
+                return R.layout.picker_placepickerfragment_list_row;
+            }
+
+            @Override
+            protected int getDefaultPicture() {
+                return R.drawable.picker_place_default_icon;
+            }
+
+        };
+        adapter.setShowCheckbox(false);
+        adapter.setShowPicture(getShowPictures());
+        return adapter;
+    }
+
+    @Override
+    LoadingStrategy createLoadingStrategy() {
+        return new AsNeededLoadingStrategy();
+    }
+
+    @Override
+    SelectionStrategy createSelectionStrategy() {
+        return new SingleSelectionStrategy();
+    }
+
+    private GraphRequest createRequest(Location location, int radiusInMeters, int resultsLimit,
+                                  String searchText, Set<String> extraFields) {
+        AccessToken accessToken = AccessToken.getCurrentAccessToken();
+        GraphRequest request = GraphRequest.newPlacesSearchRequest(accessToken, location, radiusInMeters,
+                resultsLimit, searchText, null);
+
+        Set<String> fields = new HashSet<String>(extraFields);
+        String[] requiredFields = new String[]{
+                ID,
+                NAME,
+                LOCATION,
+                CATEGORY,
+                WERE_HERE_COUNT
+        };
+        fields.addAll(Arrays.asList(requiredFields));
+
+        String pictureField = adapter.getPictureFieldSpecifier();
+        if (pictureField != null) {
+            fields.add(pictureField);
+        }
+
+        Bundle parameters = request.getParameters();
+        parameters.putString("fields", TextUtils.join(",", fields));
+        request.setParameters(parameters);
+
+        return request;
+    }
+
+    private Timer createSearchTextTimer() {
+        Timer timer = new Timer();
+        timer.schedule(new TimerTask() {
+            @Override
+            public void run() {
+                onSearchTextTimerTriggered();
+            }
+        }, 0, searchTextTimerDelayInMilliseconds);
+
+        return timer;
+    }
+
+    private void onSearchTextTimerTriggered() {
+        if (hasSearchTextChangedSinceLastQuery) {
+            Handler handler = new Handler(Looper.getMainLooper());
+            handler.post(new Runnable() {
+                @Override
+                public void run() {
+                    FacebookException error = null;
+                    try {
+                        loadData(true);
+                    } catch (FacebookException fe) {
+                        error = fe;
+                    } catch (Exception e) {
+                        error = new FacebookException(e);
+                    } finally {
+                        if (error != null) {
+                            OnErrorListener onErrorListener = getOnErrorListener();
+                            if (onErrorListener != null) {
+                                onErrorListener.onError(PlacePickerFragment.this, error);
+                            } else {
+                                Logger.log(LoggingBehavior.REQUESTS, TAG, "Error loading data : %s", error);
+                            }
+                        }
+                    }
+                }
+            });
+        } else {
+            // Nothing has changed in 2 seconds. Invalidate and forget about this timer.
+            // Next time the user types, we will fire a query immediately again.
+            searchTextTimer.cancel();
+            searchTextTimer = null;
+        }
+    }
+
+    private class AsNeededLoadingStrategy extends LoadingStrategy {
+        @Override
+        public void attach(GraphObjectAdapter adapter) {
+            super.attach(adapter);
+
+            this.adapter.setDataNeededListener(new GraphObjectAdapter.DataNeededListener() {
+                @Override
+                public void onDataNeeded() {
+                    // Do nothing if we are currently loading data . We will get notified again when that load finishes
+                    // if the adapter still needs more data. Otherwise, follow the next link.
+                    if (!loader.isLoading()) {
+                        loader.followNextLink();
+                    }
+                }
+            });
+        }
+
+        @Override
+        protected void onLoadFinished(GraphObjectPagingLoader loader, GraphObjectCursor data) {
+            super.onLoadFinished(loader, data);
+
+            // We could be called in this state if we are clearing data or if we are being re-attached
+            // in the middle of a query.
+            if (data == null || loader.isLoading()) {
+                return;
+            }
+
+            hideActivityCircle();
+        }
+    }
+
+    private class SearchTextWatcher implements TextWatcher {
+
+        @Override
+        public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+        }
+
+        @Override
+        public void onTextChanged(CharSequence s, int start, int before, int count) {
+            onSearchBoxTextChanged(s.toString(), false);
+        }
+
+        @Override
+        public void afterTextChanged(Editable s) {
+        }
+    }
+}
diff --git a/samples/Scrumptious/src/com/example/scrumptious/usersettings/UserSettingsFragment.java b/samples/Scrumptious/src/com/example/scrumptious/usersettings/UserSettingsFragment.java
new file mode 100644
index 000000000..ce1db0857
--- /dev/null
+++ b/samples/Scrumptious/src/com/example/scrumptious/usersettings/UserSettingsFragment.java
@@ -0,0 +1,245 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.scrumptious.usersettings;
+
+import android.app.Fragment;
+import android.content.Intent;
+import android.graphics.Bitmap;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.os.Bundle;
+import android.text.TextUtils;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import com.facebook.AccessToken;
+import com.facebook.AccessTokenTracker;
+import com.facebook.CallbackManager;
+import com.facebook.GraphRequest;
+import com.facebook.GraphResponse;
+import com.facebook.internal.ImageDownloader;
+import com.facebook.internal.ImageRequest;
+import com.facebook.internal.ImageResponse;
+import com.example.scrumptious.R;
+import com.facebook.login.widget.LoginButton;
+
+import org.json.JSONObject;
+
+/**
+ * A Fragment that displays a Login/Logout button as well as the user's
+ * profile picture and name when logged in.
+ */
+public final class UserSettingsFragment extends Fragment {
+
+    private static final String NAME = "name";
+    private static final String ID = "id";
+    private static final String PICTURE = "picture";
+    private static final String FIELDS = "fields";
+    
+    private static final String REQUEST_FIELDS =
+            TextUtils.join(",", new String[] {ID, NAME, PICTURE});
+
+    private AccessTokenTracker accessTokenTracker;
+    private CallbackManager callbackManager;
+
+    private LoginButton loginButton;
+    private TextView connectedStateLabel;
+    private JSONObject user;
+    private Drawable userProfilePic;
+    private String userProfilePicID;
+
+    @Override
+    public void onActivityCreated(Bundle savedInstanceState) {
+        super.onActivityCreated(savedInstanceState);
+        accessTokenTracker = new AccessTokenTracker() {
+            @Override
+            protected void onCurrentAccessTokenChanged(AccessToken oldAccessToken,
+                                                       AccessToken currentAccessToken) {
+                fetchUserInfo();
+                updateUI();
+
+            }
+        };
+        callbackManager = CallbackManager.Factory.create();
+    }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        callbackManager.onActivityResult(requestCode, resultCode, data);
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        accessTokenTracker.stopTracking();
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        View view = inflater.inflate(R.layout.usersettings_fragment, container, false);
+        loginButton = (LoginButton) view.findViewById(R.id.usersettings_fragment_login_button);
+        loginButton.setFragment(this);
+
+        connectedStateLabel = (TextView) view.findViewById(R.id.usersettings_fragment_profile_name);
+        
+        // if no background is set for some reason, then default to Facebook blue
+        if (view.getBackground() == null) {
+            view.setBackgroundColor(getResources().getColor(R.color.com_facebook_blue));
+        } else {
+            view.getBackground().setDither(true);
+        }
+        return view;
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setRetainInstance(true);
+    }
+
+    /**
+     * @throws com.facebook.FacebookException if errors occur during the loading of user information
+     */
+    @Override
+    public void onResume() {
+        super.onResume();
+        fetchUserInfo();
+        updateUI();
+    }
+
+    private void fetchUserInfo() {
+        final AccessToken accessToken = AccessToken.getCurrentAccessToken();
+        if (accessToken != null) {
+            GraphRequest request = GraphRequest.newMeRequest(
+                    accessToken, new GraphRequest.GraphJSONObjectCallback() {
+                        @Override
+                        public void onCompleted(JSONObject me, GraphResponse response) {
+                            user = me;
+                            updateUI();
+                        }
+                    });
+            Bundle parameters = new Bundle();
+            parameters.putString(FIELDS, REQUEST_FIELDS);
+            request.setParameters(parameters);
+            GraphRequest.executeBatchAsync(request);
+        } else {
+            user = null;
+        }
+    }
+    
+    private void updateUI() {
+        if (!isAdded()) {
+            return;
+        }
+        if (AccessToken.getCurrentAccessToken() != null) {
+            connectedStateLabel.setTextColor(getResources().getColor(
+                    R.color.usersettings_fragment_connected_text_color));
+            connectedStateLabel.setShadowLayer(1f, 0f, -1f,
+                    getResources().getColor(
+                            R.color.usersettings_fragment_connected_shadow_color));
+            
+            if (user != null) {
+                ImageRequest request = getImageRequest();
+                if (request != null) {
+                    Uri requestUri = request.getImageUri();
+                    // Do we already have the right picture? If so, leave it alone.
+                    if (!requestUri.equals(connectedStateLabel.getTag())) {
+                        if (user.optString("id").equals(userProfilePicID)) {
+                            connectedStateLabel.setCompoundDrawables(
+                                    null, userProfilePic, null, null);
+                            connectedStateLabel.setTag(requestUri);
+                        } else {
+                            ImageDownloader.downloadAsync(request);
+                        }
+                    }
+                }
+                connectedStateLabel.setText(user.optString("name"));
+            } else {
+                connectedStateLabel.setText(getResources().getString(
+                        R.string.usersettings_fragment_logged_in));
+                Drawable noProfilePic = getResources().getDrawable(
+                        R.drawable.profile_default_icon);
+                noProfilePic.setBounds(0, 0,
+                        getResources().getDimensionPixelSize(
+                                R.dimen.usersettings_fragment_profile_picture_width),
+                        getResources().getDimensionPixelSize(
+                                R.dimen.usersettings_fragment_profile_picture_height));
+                connectedStateLabel.setCompoundDrawables(null, noProfilePic, null, null);
+            }
+        } else {
+            int textColor = getResources().getColor(
+                    R.color.usersettings_fragment_not_connected_text_color);
+            connectedStateLabel.setTextColor(textColor);
+            connectedStateLabel.setShadowLayer(0f, 0f, 0f, textColor);
+            connectedStateLabel.setText(getResources().getString(
+                    R.string.usersettings_fragment_not_logged_in));
+            connectedStateLabel.setCompoundDrawables(null, null, null, null);
+            connectedStateLabel.setTag(null);
+        }
+    }
+
+    private ImageRequest getImageRequest() {
+        ImageRequest request = null;
+        ImageRequest.Builder requestBuilder = new ImageRequest.Builder(
+                getActivity(),
+                ImageRequest.getProfilePictureUri(
+                        user.optString("id"),
+                        getResources().getDimensionPixelSize(
+                                R.dimen.usersettings_fragment_profile_picture_width),
+                        getResources().getDimensionPixelSize(
+                                R.dimen.usersettings_fragment_profile_picture_height)));
+
+        request = requestBuilder.setCallerTag(this)
+                .setCallback(
+                        new ImageRequest.Callback() {
+                            @Override
+                            public void onCompleted(ImageResponse response) {
+                                processImageResponse(user.optString("id"), response);
+                            }
+                        })
+                .build();
+        return request;
+    }
+
+    private void processImageResponse(String id, ImageResponse response) {
+        if (response != null) {
+            Bitmap bitmap = response.getBitmap();
+            if (bitmap != null) {
+                BitmapDrawable drawable = new BitmapDrawable(
+                        UserSettingsFragment.this.getResources(), bitmap);
+                drawable.setBounds(0, 0,
+                        getResources().getDimensionPixelSize(
+                                R.dimen.usersettings_fragment_profile_picture_width),
+                        getResources().getDimensionPixelSize(
+                                R.dimen.usersettings_fragment_profile_picture_height));
+                userProfilePic = drawable;
+                userProfilePicID = id;
+                connectedStateLabel.setCompoundDrawables(null, drawable, null, null);
+                connectedStateLabel.setTag(response.getRequest().getImageUri());
+            }
+        }
+    }
+}
diff --git a/samples/ShareIt/AndroidManifest.xml b/samples/ShareIt/AndroidManifest.xml
new file mode 100644
index 000000000..697a3eaae
--- /dev/null
+++ b/samples/ShareIt/AndroidManifest.xml
@@ -0,0 +1,63 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.example.shareit">
+
+    <uses-permission android:name="android.permission.INTERNET" />
+
+    <application
+        android:name="com.example.shareit.ShareItApplication"
+        android:allowBackup="true"
+        android:icon="@drawable/icon"
+        android:label="@string/app_name"
+        android:theme="@style/AppTheme">
+        <activity
+            android:name=".MainActivity"
+            android:label="@string/app_name"
+            android:theme="@style/Theme.AppCompat">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+        <activity
+            android:name="com.facebook.FacebookActivity"
+            android:label="@string/app_name"/>
+        <activity
+            android:name="com.facebook.CustomTabActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+                <data android:scheme="@string/fb_login_protocol_scheme" />
+            </intent-filter>
+        </activity>
+
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationId"
+            android:value="fb620223481391648" />
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationName"
+            android:value="@string/app_name" />
+    </application>
+
+</manifest>
diff --git a/samples/ShareIt/build.gradle b/samples/ShareIt/build.gradle
new file mode 100644
index 000000000..3288f92db
--- /dev/null
+++ b/samples/ShareIt/build.gradle
@@ -0,0 +1,52 @@
+apply plugin: 'com.android.application'
+
+repositories {
+    mavenCentral()
+}
+
+dependencies {
+    compile project(':facebook')
+    // In order to test a specific version published on maven, comment out the project compile
+    // directive and and comment this line and update to the specific version.
+    // compile 'com.facebook.android:facebook-android-sdk:4.0.1'
+    compile 'com.android.support:appcompat-v7:23+'
+}
+
+android {
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
+
+    defaultConfig {
+        applicationId "com.example.shareit"
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+    }
+
+    buildTypes {
+        debug {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
+        }
+        release {
+            minifyEnabled true
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
+        }
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+
+    splits {
+        abi {
+            enable true
+            reset()
+            include 'armeabi', 'armeabi-v7a', 'x86'
+            universalApk true
+        }
+    }
+}
diff --git a/samples/ShareIt/proguard-project.txt b/samples/ShareIt/proguard-project.txt
new file mode 100644
index 000000000..f2fe1559a
--- /dev/null
+++ b/samples/ShareIt/proguard-project.txt
@@ -0,0 +1,20 @@
+# To enable ProGuard in your project, edit project.properties
+# to define the proguard.config property as described in that file.
+#
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in ${sdk.dir}/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the ProGuard
+# include property in project.properties.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/samples/ShareIt/res/drawable-hdpi/goofy.png b/samples/ShareIt/res/drawable-hdpi/goofy.png
new file mode 100644
index 000000000..b91571ce0
Binary files /dev/null and b/samples/ShareIt/res/drawable-hdpi/goofy.png differ
diff --git a/samples/ShareIt/res/drawable-hdpi/icon.png b/samples/ShareIt/res/drawable-hdpi/icon.png
new file mode 100644
index 000000000..66186b7d9
Binary files /dev/null and b/samples/ShareIt/res/drawable-hdpi/icon.png differ
diff --git a/samples/ShareIt/res/drawable-hdpi/liking.png b/samples/ShareIt/res/drawable-hdpi/liking.png
new file mode 100644
index 000000000..cc54856a5
Binary files /dev/null and b/samples/ShareIt/res/drawable-hdpi/liking.png differ
diff --git a/samples/ShareIt/res/drawable-hdpi/viking.png b/samples/ShareIt/res/drawable-hdpi/viking.png
new file mode 100644
index 000000000..c26a9e3c0
Binary files /dev/null and b/samples/ShareIt/res/drawable-hdpi/viking.png differ
diff --git a/samples/ShareIt/res/drawable-mdpi/goofy.png b/samples/ShareIt/res/drawable-mdpi/goofy.png
new file mode 100644
index 000000000..421f35a9b
Binary files /dev/null and b/samples/ShareIt/res/drawable-mdpi/goofy.png differ
diff --git a/samples/ShareIt/res/drawable-mdpi/icon.png b/samples/ShareIt/res/drawable-mdpi/icon.png
new file mode 100644
index 000000000..85917270a
Binary files /dev/null and b/samples/ShareIt/res/drawable-mdpi/icon.png differ
diff --git a/samples/ShareIt/res/drawable-mdpi/liking.png b/samples/ShareIt/res/drawable-mdpi/liking.png
new file mode 100644
index 000000000..17899bf04
Binary files /dev/null and b/samples/ShareIt/res/drawable-mdpi/liking.png differ
diff --git a/samples/ShareIt/res/drawable-mdpi/viking.png b/samples/ShareIt/res/drawable-mdpi/viking.png
new file mode 100644
index 000000000..e9bb7492b
Binary files /dev/null and b/samples/ShareIt/res/drawable-mdpi/viking.png differ
diff --git a/samples/ShareIt/res/drawable-xhdpi/goofy.png b/samples/ShareIt/res/drawable-xhdpi/goofy.png
new file mode 100644
index 000000000..92f774b90
Binary files /dev/null and b/samples/ShareIt/res/drawable-xhdpi/goofy.png differ
diff --git a/samples/ShareIt/res/drawable-xhdpi/icon.png b/samples/ShareIt/res/drawable-xhdpi/icon.png
new file mode 100644
index 000000000..73d2a23ed
Binary files /dev/null and b/samples/ShareIt/res/drawable-xhdpi/icon.png differ
diff --git a/samples/ShareIt/res/drawable-xhdpi/liking.png b/samples/ShareIt/res/drawable-xhdpi/liking.png
new file mode 100644
index 000000000..584654e82
Binary files /dev/null and b/samples/ShareIt/res/drawable-xhdpi/liking.png differ
diff --git a/samples/ShareIt/res/drawable-xhdpi/viking.png b/samples/ShareIt/res/drawable-xhdpi/viking.png
new file mode 100644
index 000000000..ce21faecf
Binary files /dev/null and b/samples/ShareIt/res/drawable-xhdpi/viking.png differ
diff --git a/samples/ShareIt/res/layout/image_slide_view.xml b/samples/ShareIt/res/layout/image_slide_view.xml
new file mode 100644
index 000000000..fcec40690
--- /dev/null
+++ b/samples/ShareIt/res/layout/image_slide_view.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/content"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content" >
+
+    <ImageView
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:id="@+id/share_image"
+        android:contentDescription="@string/likeable_image"/>
+</ScrollView>
diff --git a/samples/ShareIt/res/layout/main.xml b/samples/ShareIt/res/layout/main.xml
new file mode 100644
index 000000000..f8102d7a3
--- /dev/null
+++ b/samples/ShareIt/res/layout/main.xml
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <fragment android:name="com.example.shareit.ShareFragment"
+        android:id="@+id/sharefragment"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" />
+</LinearLayout>
diff --git a/samples/ShareIt/res/layout/share_it_view.xml b/samples/ShareIt/res/layout/share_it_view.xml
new file mode 100644
index 000000000..b4fe0c07e
--- /dev/null
+++ b/samples/ShareIt/res/layout/share_it_view.xml
@@ -0,0 +1,75 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:fb="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:fillViewport="true">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical">
+
+        <com.example.shareit.ImageViewPager
+            android:id="@+id/pager"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_margin="5dp" />
+
+        <com.facebook.share.widget.LikeView
+            android:id="@+id/like_photo"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_gravity="start"
+            android:layout_margin="5dp"
+            fb:com_facebook_style="button" />
+
+        <com.example.shareit.PageSelector
+            android:id="@+id/page_selector"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal" />
+
+        <com.facebook.login.widget.LoginButton
+            android:id="@+id/login_button"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:layout_margin="5dp" />
+
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:layout_margin="5dp"
+            android:text="@string/main_page_text" />
+
+        <com.facebook.share.widget.LikeView
+            android:id="@+id/like_page"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:layout_margin="5dp"
+            fb:com_facebook_object_id="shareitexampleapp"
+            fb:com_facebook_object_type="page" />
+    </LinearLayout>
+</ScrollView>
diff --git a/samples/ShareIt/res/menu/share_menu.xml b/samples/ShareIt/res/menu/share_menu.xml
new file mode 100644
index 000000000..3870ddb94
--- /dev/null
+++ b/samples/ShareIt/res/menu/share_menu.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:shareit="http://schemas.android.com/apk/res-auto" android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <item
+        android:id="@+id/menu_item_share"
+        shareit:showAsAction="ifRoom"
+        android:title="@string/share_menu_title"
+        shareit:actionProviderClass="android.support.v7.widget.ShareActionProvider" />
+
+</menu>
diff --git a/samples/ShareIt/res/values/strings.xml b/samples/ShareIt/res/values/strings.xml
new file mode 100644
index 000000000..9efc84df2
--- /dev/null
+++ b/samples/ShareIt/res/values/strings.xml
@@ -0,0 +1,27 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <string name="app_name">ShareIt</string>
+    <string name="main_page_text">Share It! App</string>
+    <string name="likeable_image">Likeable image</string>
+    <string name="share_menu_title">Share</string>
+    <string name="fb_login_protocol_scheme">fb620223481391648</string>
+</resources>
diff --git a/samples/ShareIt/res/values/styles.xml b/samples/ShareIt/res/values/styles.xml
new file mode 100644
index 000000000..1a1e4e0b2
--- /dev/null
+++ b/samples/ShareIt/res/values/styles.xml
@@ -0,0 +1,40 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+
+    <!--
+        Base application theme, dependent on API level. This theme is replaced
+        by AppBaseTheme from res/values-vXX/styles.xml on newer devices.
+    -->
+    <style name="AppBaseTheme" parent="android:Theme.Light">
+        <!--
+            Theme customizations available in newer API levels can go in
+            res/values-vXX/styles.xml, while customizations related to
+            backward-compatibility can go here.
+        -->
+    </style>
+
+    <!-- Application theme. -->
+    <style name="AppTheme" parent="AppBaseTheme">
+        <!-- All customizations that are NOT specific to a particular API-level can go here. -->
+    </style>
+
+</resources>
diff --git a/samples/ShareIt/src/com/example/shareit/ImageViewPager.java b/samples/ShareIt/src/com/example/shareit/ImageViewPager.java
new file mode 100644
index 000000000..80488e2ff
--- /dev/null
+++ b/samples/ShareIt/src/com/example/shareit/ImageViewPager.java
@@ -0,0 +1,47 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.shareit;
+
+import android.content.Context;
+import android.support.v4.view.ViewPager;
+import android.util.AttributeSet;
+import android.view.View;
+
+public class ImageViewPager extends ViewPager {
+    public ImageViewPager(Context context) {
+        super(context);
+    }
+
+    public ImageViewPager(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+
+        View view = getChildAt(0);
+        if (view != null) {
+            view.measure(widthMeasureSpec, heightMeasureSpec);
+            setMeasuredDimension(getMeasuredWidth(), view.getMeasuredHeight());
+        }
+    }
+}
diff --git a/samples/ShareIt/src/com/example/shareit/MainActivity.java b/samples/ShareIt/src/com/example/shareit/MainActivity.java
new file mode 100644
index 000000000..00aa6ef7a
--- /dev/null
+++ b/samples/ShareIt/src/com/example/shareit/MainActivity.java
@@ -0,0 +1,83 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.shareit;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.view.MenuItemCompat;
+import android.support.v7.app.ActionBarActivity;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.support.v7.widget.ShareActionProvider;
+
+public class MainActivity extends ActionBarActivity {
+    private ShareActionProvider mShareActionProvider;
+    private ShareFragment mShareFragment;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        setContentView(R.layout.main);
+        FragmentManager fm = getSupportFragmentManager();
+        mShareFragment = (ShareFragment) fm.findFragmentById(R.id.sharefragment);
+        mShareFragment.setOnShareContentChangeListener(
+                new ShareFragment.OnShareContentChangedListener() {
+            @Override
+            public void onShareContentChanged(String content) {
+                setShareUrl(content);
+            }
+        });
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        // Inflate menu resource file.
+        getMenuInflater().inflate(R.menu.share_menu, menu);
+
+        // Locate MenuItem with ShareActionProvider
+        MenuItem item = menu.findItem(R.id.menu_item_share);
+
+        // Fetch and store ShareActionProvider
+        mShareActionProvider = (ShareActionProvider) MenuItemCompat.getActionProvider(item);
+        setShareUrl(mShareFragment.getCurrentShareContent());
+
+        // Return true to display menu
+        return true;
+    }
+
+    private void setShareUrl(String shareUrl) {
+        // When using androids share built into the ActionBar app attribution will not be
+        // present when sharing to facebook and app events will not be logged.
+        if (mShareActionProvider != null) {
+            Intent shareIntent = new Intent(Intent.ACTION_SEND);
+            shareIntent.setType("text/plain");
+            shareIntent.putExtra(Intent.EXTRA_TEXT, shareUrl);
+            mShareActionProvider.setShareIntent(shareIntent);
+        }
+    }
+
+    @Override
+    protected void onSaveInstanceState(final Bundle outState) {
+        // Don't save any state
+    }
+}
diff --git a/samples/ShareIt/src/com/example/shareit/PageSelector.java b/samples/ShareIt/src/com/example/shareit/PageSelector.java
new file mode 100644
index 000000000..ecc44fd12
--- /dev/null
+++ b/samples/ShareIt/src/com/example/shareit/PageSelector.java
@@ -0,0 +1,92 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.shareit;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.util.AttributeSet;
+import android.view.View;
+
+public class PageSelector extends View {
+    private static final int CIRCLE_RADIUS = 20;
+    private static final int CIRCLE_MARGIN = 20;
+    private static final int CIRCLE_SPACING = CIRCLE_RADIUS * 2 + CIRCLE_MARGIN;
+    private Paint paintGray;
+    private Paint paintWhite;
+
+    private int mPosition;
+    private int mImageCount;
+
+    public PageSelector(Context context) {
+        super(context);
+        init();
+    }
+
+    public PageSelector(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init();
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+        int start_x = canvas.getWidth() / 2 - (CIRCLE_SPACING) * (mImageCount / 2);
+        if (mImageCount % 2 == 0) {
+            start_x += CIRCLE_SPACING / 2;
+        }
+
+        for (int i = 0; i < mImageCount; ++i) {
+            Paint paint = (i == mPosition) ? paintWhite : paintGray;
+            float x = start_x + i * CIRCLE_SPACING;
+            float y = canvas.getHeight() / 2;
+            canvas.drawCircle(x, y, CIRCLE_RADIUS, paint);
+        }
+    }
+
+    public void setPosition(int position) {
+        this.mPosition = position;
+        invalidate();
+    }
+
+    public void setImageCount(int imageCount) {
+        this.mImageCount = imageCount;
+        invalidate();
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+        setMeasuredDimension(CIRCLE_SPACING * mImageCount, CIRCLE_SPACING);
+    }
+
+    private void init() {
+        paintGray = new Paint();
+        paintGray.setStyle(Paint.Style.FILL);
+        paintGray.setColor(Color.GRAY);
+
+        paintWhite = new Paint();
+        paintWhite.setStyle(Paint.Style.FILL);
+        paintWhite.setColor(Color.WHITE);
+    }
+
+}
diff --git a/samples/ShareIt/src/com/example/shareit/ShareFragment.java b/samples/ShareIt/src/com/example/shareit/ShareFragment.java
new file mode 100644
index 000000000..c8be2417d
--- /dev/null
+++ b/samples/ShareIt/src/com/example/shareit/ShareFragment.java
@@ -0,0 +1,146 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.shareit;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.app.FragmentStatePagerAdapter;
+import android.support.v4.view.PagerAdapter;
+import android.support.v4.view.ViewPager;
+import android.util.Pair;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.facebook.CallbackManager;
+import com.facebook.login.widget.LoginButton;
+import com.facebook.share.widget.LikeView;
+
+import java.util.ArrayList;
+
+public class ShareFragment extends Fragment {
+    private CallbackManager mCallbackManager;
+    private OnShareContentChangedListener mShareContentChangedListener;
+    private ViewPager mViewPage;
+
+    // The resource to url mapping
+    private static final ArrayList<Pair<Integer, String>> IMAGE_IDS =
+            new ArrayList<Pair<Integer, String>>() {{
+                add(new Pair<>(R.drawable.goofy, "http://shareitexampleapp.parseapp.com/goofy/"));
+                add(new Pair<>(R.drawable.liking, "http://shareitexampleapp.parseapp.com/liking/"));
+                add(new Pair<>(R.drawable.viking, "http://shareitexampleapp.parseapp.com/viking/"));
+            }};
+
+    @Override
+    public View onCreateView(
+            LayoutInflater inflater,
+            ViewGroup container,
+            Bundle savedInstanceState) {
+        super.onCreateView(inflater, container, savedInstanceState);
+        mCallbackManager = CallbackManager.Factory.create();
+
+        View view = inflater.inflate(R.layout.share_it_view, container, false);
+
+        LoginButton loginButton = (LoginButton) view.findViewById(R.id.login_button);
+        loginButton.setFragment(this);
+        loginButton.setReadPermissions("public_profile");
+
+        setupViewPage(view);
+        LikeView pageLike = (LikeView) view.findViewById(R.id.like_page);
+        pageLike.setFragment(this);
+        return view;
+    }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        mCallbackManager.onActivityResult(requestCode, resultCode, data);
+    }
+
+    public void setOnShareContentChangeListener(OnShareContentChangedListener listener) {
+        mShareContentChangedListener = listener;
+    }
+
+    public String getCurrentShareContent() {
+        return IMAGE_IDS.get(mViewPage.getCurrentItem()).second;
+    }
+
+    private class ScreenSlidePagerAdapter extends FragmentStatePagerAdapter {
+        public ScreenSlidePagerAdapter(FragmentManager fm) {
+            super(fm);
+        }
+
+        @Override
+        public Fragment getItem(int position) {
+            ShareImageFragment imageFragment = new ShareImageFragment();
+            imageFragment.setImage(IMAGE_IDS.get(position).first);
+            return imageFragment;
+        }
+
+        @Override
+        public int getCount() {
+            return IMAGE_IDS.size();
+        }
+    }
+
+    private void setupViewPage(View view) {
+        mViewPage = (ViewPager) view.findViewById(R.id.pager);
+        PagerAdapter adapter = new ScreenSlidePagerAdapter(getFragmentManager());
+        mViewPage.setAdapter(adapter);
+
+        final PageSelector pageSelector = (PageSelector) view.findViewById(R.id.page_selector);
+        pageSelector.setImageCount(IMAGE_IDS.size());
+
+        final LikeView photoLike = (LikeView) view.findViewById(R.id.like_photo);
+        photoLike.setFragment(this);
+
+        mViewPage.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {
+            @Override
+            public void onPageScrolled(
+                    int position,
+                    float positionOffset,
+                    int positionOffsetPixels) {
+                pageSelector.setPosition(position);
+                String shareContent = IMAGE_IDS.get(position).second;
+                photoLike.setObjectIdAndType(
+                        shareContent,
+                        LikeView.ObjectType.OPEN_GRAPH);
+                mShareContentChangedListener.onShareContentChanged(shareContent);
+            }
+
+            @Override
+            public void onPageSelected(int position) {
+            }
+
+            @Override
+            public void onPageScrollStateChanged(int state) {
+
+            }
+        });
+    }
+
+    public interface OnShareContentChangedListener {
+        void onShareContentChanged(String content);
+    }
+}
diff --git a/samples/ShareIt/src/com/example/shareit/ShareImageFragment.java b/samples/ShareIt/src/com/example/shareit/ShareImageFragment.java
new file mode 100644
index 000000000..f7bddff09
--- /dev/null
+++ b/samples/ShareIt/src/com/example/shareit/ShareImageFragment.java
@@ -0,0 +1,49 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.shareit;
+
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+
+public class ShareImageFragment extends Fragment {
+    private int mImageId;
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container,
+                             Bundle savedInstanceState) {
+        ViewGroup rootView = (ViewGroup) inflater.inflate(
+                R.layout.image_slide_view, container, false);
+        if (mImageId != 0) {
+            ImageView image = (ImageView) rootView.findViewById(R.id.share_image);
+            image.setImageDrawable(getResources().getDrawable(mImageId));
+        }
+
+        return rootView;
+    }
+
+    public void setImage(int imageId) {
+        mImageId = imageId;
+    }
+}
diff --git a/samples/ShareIt/src/com/example/shareit/ShareItApplication.java b/samples/ShareIt/src/com/example/shareit/ShareItApplication.java
new file mode 100644
index 000000000..ce2d494f1
--- /dev/null
+++ b/samples/ShareIt/src/com/example/shareit/ShareItApplication.java
@@ -0,0 +1,35 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.shareit;
+
+import android.app.Application;
+
+import com.facebook.FacebookSdk;
+import com.facebook.appevents.AppEventsLogger;
+
+public class ShareItApplication extends Application {
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        FacebookSdk.sdkInitialize(getApplicationContext());
+        AppEventsLogger.activateApp(this);
+    }
+}
diff --git a/samples/SwitchUserSample/AndroidManifest.xml b/samples/SwitchUserSample/AndroidManifest.xml
new file mode 100644
index 000000000..a4a75cc57
--- /dev/null
+++ b/samples/SwitchUserSample/AndroidManifest.xml
@@ -0,0 +1,64 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.example.switchuser"
+    android:versionCode="1"
+    android:versionName="1.0">
+
+    <uses-permission android:name="android.permission.INTERNET" />
+    <application
+        android:name=".SwitchUserApplication"
+        android:allowBackup="false"
+        android:icon="@drawable/icon"
+        android:label="@string/app_name">
+        <activity
+            android:name="com.example.switchuser.MainActivity"
+            android:label="@string/app_name"
+            android:theme="@style/Theme.AppCompat"
+            android:windowSoftInputMode="adjustResize">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+        <activity
+            android:name="com.facebook.FacebookActivity"
+            android:label="@string/app_name"/>
+        <activity
+            android:name="com.facebook.CustomTabActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+
+                <data android:scheme="@string/fb_login_protocol_scheme" />
+            </intent-filter>
+        </activity>
+
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationId"
+            android:value="@string/app_id" />
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationName"
+            android:value="@string/app_name" />
+    </application>
+</manifest> 
diff --git a/samples/SwitchUserSample/build.gradle b/samples/SwitchUserSample/build.gradle
new file mode 100644
index 000000000..a34022f03
--- /dev/null
+++ b/samples/SwitchUserSample/build.gradle
@@ -0,0 +1,37 @@
+apply plugin: 'com.android.application'
+
+dependencies {
+    compile project(':facebook')
+    compile 'com.android.support:appcompat-v7:21.0.3'
+}
+
+android {
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
+
+    defaultConfig {
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+    }
+
+    lintOptions {
+        abortOnError false
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+
+    splits {
+        abi {
+            enable true
+            reset()
+            include 'armeabi', 'armeabi-v7a', 'x86'
+            universalApk true
+        }
+    }
+}
diff --git a/samples/SwitchUserSample/proguard-project.txt b/samples/SwitchUserSample/proguard-project.txt
new file mode 100644
index 000000000..f2fe1559a
--- /dev/null
+++ b/samples/SwitchUserSample/proguard-project.txt
@@ -0,0 +1,20 @@
+# To enable ProGuard in your project, edit project.properties
+# to define the proguard.config property as described in that file.
+#
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in ${sdk.dir}/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the ProGuard
+# include property in project.properties.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/samples/SwitchUserSample/res/drawable-hdpi/ic_action_discard.png b/samples/SwitchUserSample/res/drawable-hdpi/ic_action_discard.png
new file mode 100644
index 000000000..703b31f80
Binary files /dev/null and b/samples/SwitchUserSample/res/drawable-hdpi/ic_action_discard.png differ
diff --git a/samples/SwitchUserSample/res/drawable-hdpi/ic_action_settings.png b/samples/SwitchUserSample/res/drawable-hdpi/ic_action_settings.png
new file mode 100644
index 000000000..54eecded3
Binary files /dev/null and b/samples/SwitchUserSample/res/drawable-hdpi/ic_action_settings.png differ
diff --git a/samples/SwitchUserSample/res/drawable-hdpi/icon.png b/samples/SwitchUserSample/res/drawable-hdpi/icon.png
new file mode 100644
index 000000000..8e4f7040c
Binary files /dev/null and b/samples/SwitchUserSample/res/drawable-hdpi/icon.png differ
diff --git a/samples/SwitchUserSample/res/drawable-mdpi/ic_action_discard.png b/samples/SwitchUserSample/res/drawable-mdpi/ic_action_discard.png
new file mode 100644
index 000000000..248fb09cd
Binary files /dev/null and b/samples/SwitchUserSample/res/drawable-mdpi/ic_action_discard.png differ
diff --git a/samples/SwitchUserSample/res/drawable-mdpi/ic_action_settings.png b/samples/SwitchUserSample/res/drawable-mdpi/ic_action_settings.png
new file mode 100644
index 000000000..25c36db42
Binary files /dev/null and b/samples/SwitchUserSample/res/drawable-mdpi/ic_action_settings.png differ
diff --git a/samples/SwitchUserSample/res/drawable-mdpi/icon.png b/samples/SwitchUserSample/res/drawable-mdpi/icon.png
new file mode 100644
index 000000000..e193802b2
Binary files /dev/null and b/samples/SwitchUserSample/res/drawable-mdpi/icon.png differ
diff --git a/samples/SwitchUserSample/res/drawable-xhdpi/ic_action_discard.png b/samples/SwitchUserSample/res/drawable-xhdpi/ic_action_discard.png
new file mode 100644
index 000000000..9eeeed124
Binary files /dev/null and b/samples/SwitchUserSample/res/drawable-xhdpi/ic_action_discard.png differ
diff --git a/samples/SwitchUserSample/res/drawable-xhdpi/ic_action_settings.png b/samples/SwitchUserSample/res/drawable-xhdpi/ic_action_settings.png
new file mode 100644
index 000000000..425a8bc8d
Binary files /dev/null and b/samples/SwitchUserSample/res/drawable-xhdpi/ic_action_settings.png differ
diff --git a/samples/SwitchUserSample/res/drawable-xhdpi/icon.png b/samples/SwitchUserSample/res/drawable-xhdpi/icon.png
new file mode 100644
index 000000000..e49838d03
Binary files /dev/null and b/samples/SwitchUserSample/res/drawable-xhdpi/icon.png differ
diff --git a/samples/SwitchUserSample/res/drawable/icon.png b/samples/SwitchUserSample/res/drawable/icon.png
new file mode 100644
index 000000000..e193802b2
Binary files /dev/null and b/samples/SwitchUserSample/res/drawable/icon.png differ
diff --git a/samples/SwitchUserSample/res/layout/fragment_profile.xml b/samples/SwitchUserSample/res/layout/fragment_profile.xml
new file mode 100644
index 000000000..2f7359311
--- /dev/null
+++ b/samples/SwitchUserSample/res/layout/fragment_profile.xml
@@ -0,0 +1,43 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              xmlns:app="http://schemas.android.com/apk/res-auto"
+              android:orientation="vertical"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+        >
+    <TextView
+            android:id="@+id/profileUserName"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginBottom="20dp"
+            android:text="@string/greeting_no_user"
+            android:freezesText="true"
+            />
+    <com.facebook.login.widget.ProfilePictureView
+            android:id="@+id/profilePic"
+            android:layout_height="wrap_content"
+            android:layout_width="wrap_content"
+            app:com_facebook_preset_size="large"
+            />
+</LinearLayout>
+
diff --git a/samples/SwitchUserSample/res/layout/list_item_user.xml b/samples/SwitchUserSample/res/layout/list_item_user.xml
new file mode 100644
index 000000000..1c7bb99a3
--- /dev/null
+++ b/samples/SwitchUserSample/res/layout/list_item_user.xml
@@ -0,0 +1,58 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:app="http://schemas.android.com/apk/res-auto"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:id="@+id/slot"
+        >
+
+    <com.facebook.login.widget.ProfilePictureView
+            android:id="@+id/slotPic"
+            android:layout_height="wrap_content"
+            android:layout_width="wrap_content"
+            android:layout_weight="0"
+            android:layout_margin="10dp"
+            app:com_facebook_preset_size="small"
+            />
+
+    <TextView
+            android:id="@+id/slotUserName"
+            android:layout_height="wrap_content"
+            android:layout_width="0dp"
+            android:layout_weight="1"
+            android:layout_gravity="center_vertical"
+            />
+
+    <CheckBox
+            android:id="@+id/currentUserIndicator"
+            android:layout_height="wrap_content"
+            android:layout_width="wrap_content"
+            android:layout_weight="0"
+            android:layout_gravity="center_vertical"
+            android:focusable="false"
+            android:enabled="false"
+            />
+
+</LinearLayout>
diff --git a/samples/SwitchUserSample/res/layout/main.xml b/samples/SwitchUserSample/res/layout/main.xml
new file mode 100644
index 000000000..88e3eea2b
--- /dev/null
+++ b/samples/SwitchUserSample/res/layout/main.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+             android:id="@+id/fragmentContainer"
+             android:layout_width="match_parent"
+             android:layout_height="match_parent"
+        />
diff --git a/samples/SwitchUserSample/res/menu/context_settings.xml b/samples/SwitchUserSample/res/menu/context_settings.xml
new file mode 100644
index 000000000..6ceb4bdf9
--- /dev/null
+++ b/samples/SwitchUserSample/res/menu/context_settings.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<menu
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+    <item android:id="@+id/menu_item_clear_slot"
+          android:icon="@drawable/ic_action_discard"
+          android:title="@string/menu_item_clear_slot"
+          app:showAsAction="always" />
+</menu>
diff --git a/samples/SwitchUserSample/res/menu/options_profile.xml b/samples/SwitchUserSample/res/menu/options_profile.xml
new file mode 100644
index 000000000..04d4bca7a
--- /dev/null
+++ b/samples/SwitchUserSample/res/menu/options_profile.xml
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<menu
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+    <item
+            android:icon="@drawable/ic_action_settings"
+            android:id="@+id/menu_item_switch"
+            android:title="@string/menu_item_switch_user"
+            app:showAsAction="always"/>
+</menu>
diff --git a/samples/SwitchUserSample/res/values/strings.xml b/samples/SwitchUserSample/res/values/strings.xml
new file mode 100644
index 000000000..def6eb3ac
--- /dev/null
+++ b/samples/SwitchUserSample/res/values/strings.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <string name="app_name">SwitchUserSample</string>
+    <string name="empty_slot">Empty Slot</string>
+    <string name="greeting_format">Hello, %s!</string>
+    <string name="greeting_no_user">Please select a user via the options menu</string>
+    <string name="menu_item_switch_user">Select User</string>
+    <string name="menu_item_clear_slot">Clear this slot</string>
+    <string name="app_id">327842977278179</string>
+    <string name="fb_login_protocol_scheme">fb327842977278179</string>
+</resources>
diff --git a/samples/SwitchUserSample/src/com/example/switchuser/MainActivity.java b/samples/SwitchUserSample/src/com/example/switchuser/MainActivity.java
new file mode 100644
index 000000000..2a83f33d6
--- /dev/null
+++ b/samples/SwitchUserSample/src/com/example/switchuser/MainActivity.java
@@ -0,0 +1,154 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.switchuser;
+
+import android.os.Bundle;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.app.FragmentTransaction;
+import android.support.v7.app.ActionBarActivity;
+import android.view.MenuItem;
+
+import com.facebook.*;
+import com.facebook.appevents.AppEventsLogger;
+
+public class MainActivity extends ActionBarActivity {
+
+    private static final String SHOWING_SETTINGS_KEY = "Showing settings";
+
+    private ProfileFragment profileFragment;
+    private SettingsFragment settingsFragment;
+    private boolean isShowingSettings;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        setContentView(R.layout.main);
+
+        restoreFragments(savedInstanceState);
+
+        if (savedInstanceState != null) {
+            if (savedInstanceState.getBoolean(SHOWING_SETTINGS_KEY)) {
+                showSettings();
+            } else {
+                showProfile();
+            }
+        } else {
+            showProfile();
+        }
+    }
+
+    @Override
+    public void onBackPressed() {
+        if (isShowingSettings()) {
+            // This back is from the settings fragment
+            showProfile();
+        } else {
+            // Allow the user to back out of the app as well.
+            super.onBackPressed();
+        }
+    }
+
+
+    @Override
+    protected void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+        outState.putBoolean(SHOWING_SETTINGS_KEY, isShowingSettings());
+
+        FragmentManager manager = getSupportFragmentManager();
+        manager.putFragment(outState, SettingsFragment.TAG, settingsFragment);
+        manager.putFragment(outState, ProfileFragment.TAG, profileFragment);
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+
+        profileFragment.setOnOptionsItemSelectedListener(new ProfileFragment.OnOptionsItemSelectedListener() {
+            @Override
+            public boolean onOptionsItemSelected(MenuItem item) {
+                return handleOptionsItemSelected(item);
+            }
+        });
+    }
+
+    @Override
+    protected void onPause() {
+        super.onPause();
+
+        profileFragment.setOnOptionsItemSelectedListener(null);
+    }
+
+    private void restoreFragments(Bundle savedInstanceState) {
+        FragmentManager manager = getSupportFragmentManager();
+        FragmentTransaction transaction = manager.beginTransaction();
+
+        if (savedInstanceState != null) {
+            profileFragment = (ProfileFragment) manager.getFragment(savedInstanceState,
+                    ProfileFragment.TAG);
+            settingsFragment = (SettingsFragment) manager.getFragment(savedInstanceState,
+                    SettingsFragment.TAG);
+        }
+
+        if (profileFragment == null) {
+            profileFragment = new ProfileFragment();
+            transaction.add(R.id.fragmentContainer, profileFragment, ProfileFragment.TAG);
+        }
+
+        if (settingsFragment == null) {
+            settingsFragment = new SettingsFragment();
+            transaction.add(R.id.fragmentContainer, settingsFragment, SettingsFragment.TAG);
+        }
+
+        transaction.commit();
+    }
+
+    private void showSettings() {
+        isShowingSettings = true;
+
+        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
+        transaction.hide(profileFragment)
+                .show(settingsFragment)
+                .commit();
+    }
+
+    private boolean isShowingSettings() {
+        return isShowingSettings;
+    }
+
+    private void showProfile() {
+        isShowingSettings = false;
+
+        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
+        transaction.hide(settingsFragment)
+                .show(profileFragment)
+                .commit();
+    }
+
+    private boolean handleOptionsItemSelected(MenuItem item) {
+        if (item.getItemId() == R.id.menu_item_switch) {
+            showSettings();
+            return true;
+        } else {
+            return false;
+        }
+    }
+}
diff --git a/samples/SwitchUserSample/src/com/example/switchuser/ProfileFragment.java b/samples/SwitchUserSample/src/com/example/switchuser/ProfileFragment.java
new file mode 100644
index 000000000..310e9ebe9
--- /dev/null
+++ b/samples/SwitchUserSample/src/com/example/switchuser/ProfileFragment.java
@@ -0,0 +1,151 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.switchuser;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.view.*;
+import android.widget.TextView;
+
+import com.facebook.AccessToken;
+import com.facebook.AccessTokenTracker;
+import com.facebook.CallbackManager;
+import com.facebook.Profile;
+import com.facebook.ProfileTracker;
+import com.facebook.login.widget.ProfilePictureView;
+
+public class ProfileFragment extends Fragment {
+
+    public static final String TAG = "ProfileFragment";
+
+    private TextView userNameView;
+    private ProfilePictureView profilePictureView;
+    private OnOptionsItemSelectedListener onOptionsItemSelectedListener;
+
+    private Profile pendingUpdateForUser;
+    private CallbackManager callbackManager;
+    private ProfileTracker profileTracker;
+    private AccessTokenTracker accessTokenTracker;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setHasOptionsMenu(true);
+        callbackManager = CallbackManager.Factory.create();
+        profileTracker = new ProfileTracker() {
+            @Override
+            protected void onCurrentProfileChanged(Profile oldProfile, Profile currentProfile) {
+                setProfile(currentProfile);
+            }
+        };
+
+        accessTokenTracker = new AccessTokenTracker() {
+            @Override
+            protected void onCurrentAccessTokenChanged(
+                    AccessToken oldAccessToken,
+                    AccessToken currentAccessToken) {
+                // On AccessToken changes fetch the new profile which fires the event on
+                // the ProfileTracker if the profile is different
+                Profile.fetchProfileForCurrentAccessToken();
+            }
+        };
+
+        // Ensure that our profile is up to date
+        Profile.fetchProfileForCurrentAccessToken();
+        setProfile(Profile.getCurrentProfile());
+    }
+
+    @Override
+    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+        super.onCreateOptionsMenu(menu, inflater);
+        inflater.inflate(R.menu.options_profile, menu);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        boolean handled = false;
+        OnOptionsItemSelectedListener listener = onOptionsItemSelectedListener;
+        if (listener != null) {
+            handled = listener.onOptionsItemSelected(item);
+        }
+
+        if (!handled) {
+            handled = super.onOptionsItemSelected(item);
+        }
+
+        return handled;
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup parent, Bundle savedInstanceState) {
+        View v = inflater.inflate(R.layout.fragment_profile, parent, false);
+
+        userNameView = (TextView) v.findViewById(R.id.profileUserName);
+        profilePictureView = (ProfilePictureView) v.findViewById(R.id.profilePic);
+
+        if (pendingUpdateForUser != null) {
+            setProfile(pendingUpdateForUser);
+            pendingUpdateForUser = null;
+        }
+
+        return v;
+    }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        callbackManager.onActivityResult(requestCode, resultCode, data);
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        profileTracker.stopTracking();
+        accessTokenTracker.stopTracking();
+    }
+
+    public void setOnOptionsItemSelectedListener(OnOptionsItemSelectedListener listener) {
+        this.onOptionsItemSelectedListener = listener;
+    }
+
+    private void setProfile(Profile profile) {
+        if (userNameView == null || profilePictureView == null || !isAdded()) {
+            // Fragment not yet added to the view. So let's store which user was intended
+            // for display.
+            pendingUpdateForUser = profile;
+            return;
+        }
+
+        if (profile == null) {
+            profilePictureView.setProfileId(null);
+            userNameView.setText(R.string.greeting_no_user);
+        } else {
+            profilePictureView.setProfileId(profile.getId());
+            userNameView.setText(String.format(getString(R.string.greeting_format),
+                    profile.getName()));
+        }
+    }
+
+    public interface OnOptionsItemSelectedListener {
+        boolean onOptionsItemSelected(MenuItem item);
+    }
+}
diff --git a/samples/SwitchUserSample/src/com/example/switchuser/SettingsFragment.java b/samples/SwitchUserSample/src/com/example/switchuser/SettingsFragment.java
new file mode 100644
index 000000000..84ebb9292
--- /dev/null
+++ b/samples/SwitchUserSample/src/com/example/switchuser/SettingsFragment.java
@@ -0,0 +1,348 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.switchuser;
+
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.graphics.Color;
+import android.os.Bundle;
+import android.support.v4.app.ListFragment;
+import android.view.*;
+import android.widget.*;
+
+import com.facebook.AccessToken;
+import com.facebook.CallbackManager;
+import com.facebook.FacebookCallback;
+import com.facebook.FacebookException;
+import com.facebook.FacebookSdk;
+import com.facebook.Profile;
+import com.facebook.ProfileTracker;
+import com.facebook.login.LoginBehavior;
+import com.facebook.login.LoginManager;
+import com.facebook.login.LoginResult;
+import com.facebook.login.widget.ProfilePictureView;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+
+public class SettingsFragment extends ListFragment {
+
+    public static final String TAG = "SettingsFragment";
+    private static final String CURRENT_SLOT_KEY = "CurrentSlot";
+
+    private SlotManager slotManager;
+    private Menu optionsMenu;
+    private CallbackManager callbackManager;
+    private ProfileTracker profileTracker;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        slotManager = new SlotManager();
+        slotManager.restore(
+                getActivity(),
+                savedInstanceState != null ?
+                        savedInstanceState.getInt(CURRENT_SLOT_KEY, SlotManager.NO_SLOT) :
+                        SlotManager.NO_SLOT);
+        ArrayList<Slot> slotList = new ArrayList<Slot>(
+                Arrays.asList(slotManager.getAllSlots()));
+
+        Slot currentSlot = slotManager.getSelectedSlot();
+        if (currentSlot != null && currentSlot.getAccessToken() != null) {
+            AccessToken.setCurrentAccessToken(currentSlot.getAccessToken());
+        }
+
+        setListAdapter(new SlotAdapter(slotList));
+        setHasOptionsMenu(true);
+        setUpCallbacks();
+        currentUserChanged();
+    }
+
+    @Override
+    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+        super.onCreateOptionsMenu(menu, inflater);
+        inflater.inflate(R.menu.context_settings, menu);
+        optionsMenu = menu;
+        updateMenuVisibility();
+    }
+
+    private void setUpCallbacks() {
+        callbackManager = CallbackManager.Factory.create();
+        LoginManager manager = LoginManager.getInstance();
+        manager.registerCallback(callbackManager, new FacebookCallback<LoginResult>() {
+            @Override
+            public void onSuccess(LoginResult loginResult) {
+                Profile.fetchProfileForCurrentAccessToken();
+            }
+
+            @Override
+            public void onError(FacebookException exception) {
+                AccessToken.setCurrentAccessToken(null);
+                currentUserChanged();
+            }
+
+            @Override
+            public void onCancel() {
+                AccessToken.setCurrentAccessToken(null);
+                currentUserChanged();
+            }
+        });
+
+        profileTracker = new ProfileTracker() {
+            @Override
+            protected void onCurrentProfileChanged(Profile oldProfile, Profile currentProfile) {
+                Slot currentSlot = slotManager.getSelectedSlot();
+                AccessToken currentAccessToken = AccessToken.getCurrentAccessToken();
+                if(currentSlot != null && currentAccessToken != null && currentProfile != null) {
+                    currentSlot.setUserInfo(
+                            new UserInfo(currentProfile.getName(), currentAccessToken));
+                    currentUserChanged();
+                }
+            }
+        };
+    }
+
+    @Override
+    public void onListItemClick(ListView l, View view, int position, long id) {
+        slotManager.setCurrentUserSlot(position);
+        Slot newSlot = slotManager.getSelectedSlot();
+        if (newSlot.getAccessToken() == null) {
+            final LoginManager manager = LoginManager.getInstance();
+            manager.setLoginBehavior(newSlot.getLoginBehavior());
+            manager.logInWithReadPermissions(this, null);
+        } else {
+            AccessToken.setCurrentAccessToken(newSlot.getAccessToken());
+        }
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        Slot slot = slotManager.getSelectedSlot();
+
+        if (item.getItemId() == R.id.menu_item_clear_slot) {
+            if (slot.getUserId() != null) {
+                // Clear out data that this app stored in the cache
+                // Not calling Session.closeAndClearTokenInformation() because we have
+                // additional data stored in the cache.
+                slot.clear();
+                if (slot == slotManager.getSelectedSlot()) {
+                    slotManager.setCurrentUserSlot(SlotManager.NO_SLOT);
+                }
+
+                currentUserChanged();
+            }
+            return true;
+        }
+
+        return super.onContextItemSelected(item);
+    }
+
+    @Override
+    public void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+        outState.putInt(CURRENT_SLOT_KEY, slotManager.getSelectedSlotNumber());
+    }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        callbackManager.onActivityResult(requestCode, resultCode, data);
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        profileTracker.stopTracking();
+    }
+
+    private void updateMenuVisibility() {
+        if (optionsMenu != null) {
+            if (slotManager.getSelectedSlot() == null) {
+                optionsMenu.setGroupVisible(0, false);
+            } else if (optionsMenu != null) {
+                optionsMenu.setGroupVisible(0, true);
+            }
+        }
+    }
+
+    private void currentUserChanged() {
+        if (slotManager == null) {
+            // Fragment has not had onCreate called yet.
+            return;
+        }
+
+        updateMenuVisibility();
+        updateListView();
+        Slot currentSlot = slotManager.getSelectedSlot();
+        AccessToken currentToken = (currentSlot != null) ? currentSlot.getAccessToken() : null;
+        AccessToken.setCurrentAccessToken(currentToken);
+    }
+
+    private void updateListView() {
+        SlotAdapter adapter = (SlotAdapter) getListAdapter();
+
+        // Adapter will be null if the list is not shown
+        if (adapter != null) {
+            adapter.notifyDataSetChanged();
+        }
+    }
+
+    private class SlotManager {
+        static final int NO_SLOT = -1;
+
+        private final static int MAX_SLOTS = 4;
+
+        private static final String SETTINGS_CURRENT_SLOT_KEY = "CurrentSlot";
+        private static final String SETTINGS_NAME = "UserManagerSettings";
+
+        private SharedPreferences settings;
+        private int selectedSlotNumber = NO_SLOT;
+
+        private Slot[] slots;
+
+        public void restore(Context context, int oldSelectedSlot) {
+            if (context == null) {
+                throw new IllegalArgumentException("context cannot be null");
+            }
+
+            slots = new Slot[MAX_SLOTS];
+            for (int i = 0; i < MAX_SLOTS; i++) {
+                LoginBehavior loginBehavior = (i == 0) ?
+                        LoginBehavior.NATIVE_WITH_FALLBACK :
+                        LoginBehavior.WEB_ONLY;
+                slots[i] = new Slot(i, loginBehavior);
+            }
+
+            // Restore the last known state from when the app ran last.
+            settings = FacebookSdk.getApplicationContext().getSharedPreferences(
+                    SETTINGS_NAME, Context.MODE_PRIVATE);
+            int savedSlotNumber = settings.getInt(SETTINGS_CURRENT_SLOT_KEY, NO_SLOT);
+            if (savedSlotNumber != NO_SLOT && savedSlotNumber != oldSelectedSlot) {
+                // This will trigger the full flow of login
+                setCurrentUserSlot(savedSlotNumber);
+            } else {
+                // We already knew which slot was selected. So don't notify that a new slot was
+                // selected since that will log out and start login process. And
+                // doing so will have the effect of clearing out state like the profile pic.
+                setCurrentUserSlot(savedSlotNumber);
+            }
+        }
+
+        public Slot getSelectedSlot() {
+            if (selectedSlotNumber == NO_SLOT) {
+                return null;
+            } else {
+                return getSlot(selectedSlotNumber);
+            }
+        }
+
+        public int getSelectedSlotNumber() {
+            return selectedSlotNumber;
+        }
+
+        public void setCurrentUserSlot(int slot) {
+            if (slot != selectedSlotNumber) {
+                // Store the selected slot number for when the app is closed and restarted
+                settings.edit().putInt(SETTINGS_CURRENT_SLOT_KEY, slot).apply();
+                selectedSlotNumber = slot;
+                currentUserChanged();
+            }
+        }
+
+        private Slot[] getAllSlots() {
+            return slots;
+        }
+
+        private Slot getSlot(int slot) {
+            validateSlot(slot);
+            return slots[slot];
+        }
+
+        private void validateSlot(int slot) {
+            if (slot <= NO_SLOT || slot >= MAX_SLOTS) {
+                throw new IllegalArgumentException(
+                        String.format("Choose a slot between 0 and %d inclusively", MAX_SLOTS - 1));
+            }
+        }
+    }
+
+    private class SlotAdapter extends ArrayAdapter<Slot> {
+
+        public SlotAdapter(ArrayList<Slot> slots) {
+            super(getActivity(), android.R.layout.simple_list_item_1, slots);
+        }
+
+        @Override
+        public View getView(final int position, View convertView, ViewGroup parent) {
+            if (null == convertView) {
+                convertView = getActivity().getLayoutInflater()
+                        .inflate(R.layout.list_item_user, parent, false);
+            }
+
+            Slot slot = getItem(position);
+            if (slot.getLoginBehavior() != LoginBehavior.WEB_ONLY) {
+                convertView.setBackgroundColor(Color.argb(50, 255, 255, 255));
+            }
+
+            String userName = slot.getUserName();
+            if (userName == null) {
+                userName = getString(R.string.empty_slot);
+            }
+
+            String userId = slot.getUserId();
+            ProfilePictureView profilePic = (ProfilePictureView) convertView.findViewById(
+                    R.id.slotPic);
+            if (userId != null) {
+                profilePic.setProfileId(userId);
+            } else {
+                profilePic.setProfileId(null);
+            }
+
+            TextView userNameTextView = (TextView) convertView.findViewById(
+                    R.id.slotUserName);
+            userNameTextView.setText(userName);
+
+            final CheckBox currentUserCheckBox = (CheckBox) convertView.findViewById(
+                    R.id.currentUserIndicator);
+            currentUserCheckBox.setChecked(
+                    slotManager.getSelectedSlot() == slot
+                            && slot.getUserInfo() != null);
+            currentUserCheckBox.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    if (currentUserCheckBox.isChecked()) {
+                        slotManager.setCurrentUserSlot(position);
+                    } else {
+                        slotManager.setCurrentUserSlot(SlotManager.NO_SLOT);
+                    }
+                    SlotAdapter adapter = (SlotAdapter) getListAdapter();
+                    adapter.notifyDataSetChanged();
+                }
+            });
+
+            currentUserCheckBox.setEnabled(slot.getAccessToken() != null);
+
+            return convertView;
+        }
+
+    }
+}
diff --git a/samples/SwitchUserSample/src/com/example/switchuser/Slot.java b/samples/SwitchUserSample/src/com/example/switchuser/Slot.java
new file mode 100644
index 000000000..2b1d549db
--- /dev/null
+++ b/samples/SwitchUserSample/src/com/example/switchuser/Slot.java
@@ -0,0 +1,70 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.switchuser;
+
+import com.facebook.AccessToken;
+import com.facebook.login.LoginBehavior;
+
+public class Slot {
+    private UserInfo userInfo;
+    private final UserInfoCache userInfoCache;
+    private LoginBehavior loginBehavior;
+
+    public Slot(int slotNumber, LoginBehavior loginBehavior) {
+        this.loginBehavior = loginBehavior;
+        this.userInfoCache = new UserInfoCache(slotNumber);
+        this.userInfo = userInfoCache.get();
+    }
+
+    public LoginBehavior getLoginBehavior() {
+        return loginBehavior;
+    }
+
+    public String getUserName() {
+        return (userInfo != null) ? userInfo.getUserName() : null;
+    }
+
+    public AccessToken getAccessToken() {
+        return (userInfo != null) ? userInfo.getAccessToken() : null;
+    }
+
+    public String getUserId() {
+        return (userInfo != null) ? userInfo.getAccessToken().getUserId() : null;
+    }
+
+    public UserInfo getUserInfo() {
+        return userInfo;
+    }
+
+    public void setUserInfo(UserInfo user) {
+        userInfo = user;
+        if (user == null) {
+            return;
+        }
+
+        userInfoCache.put(user);
+    }
+
+    public void clear() {
+        userInfo = null;
+        userInfoCache.clear();
+    }
+}
diff --git a/samples/SwitchUserSample/src/com/example/switchuser/SwitchUserApplication.java b/samples/SwitchUserSample/src/com/example/switchuser/SwitchUserApplication.java
new file mode 100644
index 000000000..a53cecc5b
--- /dev/null
+++ b/samples/SwitchUserSample/src/com/example/switchuser/SwitchUserApplication.java
@@ -0,0 +1,35 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.switchuser;
+
+import android.app.Application;
+
+import com.facebook.FacebookSdk;
+import com.facebook.appevents.AppEventsLogger;
+
+public class SwitchUserApplication extends Application {
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        FacebookSdk.sdkInitialize(getApplicationContext());
+        AppEventsLogger.activateApp(this);
+    }
+}
diff --git a/samples/SwitchUserSample/src/com/example/switchuser/UserInfo.java b/samples/SwitchUserSample/src/com/example/switchuser/UserInfo.java
new file mode 100644
index 000000000..f81aa9949
--- /dev/null
+++ b/samples/SwitchUserSample/src/com/example/switchuser/UserInfo.java
@@ -0,0 +1,73 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.switchuser;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+
+import com.facebook.AccessToken;
+
+class UserInfo implements Parcelable {
+    private String userName;
+    private AccessToken accessToken;
+
+    public UserInfo(String userName, AccessToken accessToken) {
+        this.userName = userName;
+        this.accessToken = accessToken;
+    }
+
+    public String getUserName() {
+        return userName;
+    }
+
+    public AccessToken getAccessToken() {
+        return accessToken;
+    }
+
+    UserInfo(Parcel parcel) {
+        this.userName = parcel.readString();
+        this.accessToken = parcel.readParcelable(UserInfo.class.getClassLoader());
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeString(userName);
+        dest.writeParcelable(accessToken, 0);
+    }
+
+    public static final Parcelable.Creator<UserInfo> CREATOR = new Parcelable.Creator() {
+
+        @Override
+        public UserInfo createFromParcel(Parcel source) {
+            return new UserInfo(source);
+        }
+
+        @Override
+        public UserInfo[] newArray(int size) {
+            return new UserInfo[size];
+        }
+    };
+}
diff --git a/samples/SwitchUserSample/src/com/example/switchuser/UserInfoCache.java b/samples/SwitchUserSample/src/com/example/switchuser/UserInfoCache.java
new file mode 100644
index 000000000..2ac7fdb9a
--- /dev/null
+++ b/samples/SwitchUserSample/src/com/example/switchuser/UserInfoCache.java
@@ -0,0 +1,89 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.switchuser;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.os.Parcel;
+import android.util.Base64;
+
+import com.facebook.FacebookSdk;
+
+class UserInfoCache {
+    private static final String USER_INFO_CACHE_FORMAT = "userInfo%d";
+    private final String userInfoCacheKey;
+    private final int slot;
+
+    public UserInfoCache(int slotNumber) {
+        userInfoCacheKey = String.format(USER_INFO_CACHE_FORMAT, slotNumber);
+        slot = slotNumber;
+    }
+    public UserInfo get() {
+        SharedPreferences prefs = getSharedPrefs();
+        String encodedToken = prefs.getString(userInfoCacheKey, null);
+        if(encodedToken == null) {
+            return null;
+        }
+        UserInfo info = decodeUserInfo(encodedToken);
+        if (info.getAccessToken().isExpired()) {
+            clear();
+            return null;
+        }
+        return info;
+    }
+
+    public void put(UserInfo userInfo) {
+        SharedPreferences.Editor editor = getSharedPrefs().edit();
+        String encodedToken = encodeUserInfo(userInfo);
+        editor.putString(userInfoCacheKey, encodedToken);
+        editor.apply();
+    }
+
+    public void clear() {
+        SharedPreferences.Editor editor = getSharedPrefs().edit();
+        editor.remove(userInfoCacheKey);
+        editor.apply();
+    }
+
+    private static SharedPreferences getSharedPrefs() {
+        return FacebookSdk.getApplicationContext().getSharedPreferences(
+                "accessTokens",
+                Context.MODE_PRIVATE);
+    }
+
+    private static UserInfo decodeUserInfo(String base64EncodedToken) {
+        byte[] data = Base64.decode(base64EncodedToken, Base64.DEFAULT);
+        Parcel parcel = Parcel.obtain();
+        parcel.unmarshall(data, 0, data.length);
+        parcel.setDataPosition(0);
+        UserInfo userInfo = (UserInfo) parcel.readValue(UserInfo.class.getClassLoader());
+        parcel.recycle();
+        return userInfo;
+    }
+
+    private static String encodeUserInfo(UserInfo userInfo) {
+        Parcel parcel = Parcel.obtain();
+        parcel.writeValue(userInfo);
+        byte[] data = parcel.marshall();
+        parcel.recycle();
+        return Base64.encodeToString(data, Base64.DEFAULT);
+    }
+}
