diff --git a/facebook/src/com/facebook/internal/ServerProtocol.java b/facebook/src/com/facebook/internal/ServerProtocol.java
index b8fa2622a..e99c4b4dd 100644
--- a/facebook/src/com/facebook/internal/ServerProtocol.java
+++ b/facebook/src/com/facebook/internal/ServerProtocol.java
@@ -57,6 +57,7 @@
     public static final String DIALOG_PARAM_DEFAULT_AUDIENCE = "default_audience";
     public static final String DIALOG_PARAM_SDK_VERSION = "sdk";
     public static final String DIALOG_REREQUEST_AUTH_TYPE = "rerequest";
+    public static final String DIALOG_REAUTHENTICATE_AUTH_TYPE = "reauthenticate";
     public static final String DIALOG_RESPONSE_TYPE_TOKEN_AND_SIGNED_REQUEST
             = "token,signed_request";
     public static final String DIALOG_RETURN_SCOPES_TRUE = "true";
diff --git a/facebook/src/com/facebook/login/LoginClient.java b/facebook/src/com/facebook/login/LoginClient.java
index a4ced69f6..365f14575 100644
--- a/facebook/src/com/facebook/login/LoginClient.java
+++ b/facebook/src/com/facebook/login/LoginClient.java
@@ -431,7 +431,7 @@ static String getE2E() {
         private final String applicationId;
         private final String authId;
         private boolean isRerequest = false;
-
+        private boolean reauthenticate = false;
         Request(
                 LoginBehavior loginBehavior,
                 Set<String> permissions,
@@ -498,6 +498,7 @@ private Request(Parcel parcel) {
             this.applicationId = parcel.readString();
             this.authId = parcel.readString();
             this.isRerequest = parcel.readByte() != 0 ? true : false;
+            this.reauthenticate = parcel.readByte() != 0 ? true : false;
         }
 
         @Override
@@ -513,6 +514,7 @@ public void writeToParcel(Parcel dest, int flags) {
             dest.writeString(applicationId);
             dest.writeString(authId);
             dest.writeByte((byte)(isRerequest ? 1 : 0));
+            dest.writeByte((byte)(reauthenticate ? 1 : 0));
         }
 
         public static final Parcelable.Creator<Request> CREATOR = new Parcelable.Creator() {
@@ -526,6 +528,14 @@ public Request createFromParcel(Parcel source) {
                 return new Request[size];
             }
         };
+
+        public boolean isReauthenticate() {
+            return reauthenticate;
+        }
+
+        public void setReauthenticate(boolean reauthenticate) {
+            this.reauthenticate = reauthenticate;
+        }
     }
 
     public static class Result implements Parcelable {
diff --git a/facebook/src/com/facebook/login/LoginManager.java b/facebook/src/com/facebook/login/LoginManager.java
index e45dd2cc2..7f33efa3f 100644
--- a/facebook/src/com/facebook/login/LoginManager.java
+++ b/facebook/src/com/facebook/login/LoginManager.java
@@ -62,6 +62,8 @@
     private LoginBehavior loginBehavior = LoginBehavior.NATIVE_WITH_FALLBACK;
     private DefaultAudience defaultAudience = DefaultAudience.FRIENDS;
 
+    private boolean reauthenticate = false;
+
     LoginManager() {
         Validate.sdkInitialized();
     }
@@ -341,6 +343,7 @@ static boolean isPublishPermission(String permission) {
                 FacebookSdk.getApplicationId(),
                 UUID.randomUUID().toString()
         );
+        request.setReauthenticate(reauthenticate);
         request.setRerequest(AccessToken.getCurrentAccessToken() != null);
         return request;
     }
@@ -512,6 +515,17 @@ private void finishLogin(
         }
     }
 
+    public boolean isReauthenticate() {
+        return reauthenticate;
+    }
+
+    public void setReauthenticate(boolean reauthenticate) {
+        this.reauthenticate = reauthenticate;
+        if (reauthenticate) {//Re-authenticate only work
+            this.setLoginBehavior(LoginBehavior.WEB_ONLY);
+        }
+    }
+
     private static class ActivityStartActivityDelegate implements StartActivityDelegate {
         private final Activity activity;
 
diff --git a/facebook/src/com/facebook/login/WebViewLoginMethodHandler.java b/facebook/src/com/facebook/login/WebViewLoginMethodHandler.java
index 4c13570ef..5f7646978 100644
--- a/facebook/src/com/facebook/login/WebViewLoginMethodHandler.java
+++ b/facebook/src/com/facebook/login/WebViewLoginMethodHandler.java
@@ -124,6 +124,7 @@ public void onComplete(Bundle values, FacebookException error) {
                 parameters)
                 .setE2E(e2e)
                 .setIsRerequest(request.isRerequest())
+                .setReauthenticate(request.isReauthenticate())
                 .setOnCompleteListener(listener)
                 .setTheme(FacebookSdk.getWebDialogTheme());
         loginDialog = builder.build();
@@ -221,6 +222,7 @@ private String loadCookieToken() {
         static final String REDIRECT_URI = "fbconnect://success";
         private String e2e;
         private boolean isRerequest;
+        private boolean reauthenticate;
 
         public AuthDialogBuilder(Context context, String applicationId, Bundle parameters) {
             super(context, applicationId, OAUTH_DIALOG, parameters);
@@ -250,14 +252,27 @@ public WebDialog build() {
                     ServerProtocol.DIALOG_RETURN_SCOPES_TRUE);
 
             // Set the re-request auth type for requests
-            if (isRerequest) {
+            if (isRerequest && !reauthenticate) {
                 parameters.putString(
                         ServerProtocol.DIALOG_PARAM_AUTH_TYPE,
                         ServerProtocol.DIALOG_REREQUEST_AUTH_TYPE);
             }
-
+            if (reauthenticate) {
+                parameters.putString(
+                        ServerProtocol.DIALOG_PARAM_AUTH_TYPE,
+                        ServerProtocol.DIALOG_REAUTHENTICATE_AUTH_TYPE);
+            }
             return new WebDialog(getContext(), OAUTH_DIALOG, parameters, getTheme(), getListener());
         }
+
+        public boolean isReauthenticate() {
+            return reauthenticate;
+        }
+
+        public AuthDialogBuilder setReauthenticate(boolean reauthenticate) {
+            this.reauthenticate = reauthenticate;
+            return this;
+        }
     }
 
     WebViewLoginMethodHandler(Parcel source) {
