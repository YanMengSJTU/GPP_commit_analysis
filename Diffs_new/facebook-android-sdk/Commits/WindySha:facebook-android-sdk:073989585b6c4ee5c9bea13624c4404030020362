diff --git a/facebook-core/src/main/java/com/facebook/appevents/RestrictiveParameterManager.java b/facebook-core/src/main/java/com/facebook/appevents/RestrictiveParameterManager.java
new file mode 100644
index 000000000..811e3f7a5
--- /dev/null
+++ b/facebook-core/src/main/java/com/facebook/appevents/RestrictiveParameterManager.java
@@ -0,0 +1,56 @@
+package com.facebook.appevents;
+
+import com.facebook.internal.Utility;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.ArrayList;
+import java.util.List;
+
+
+public final class RestrictiveParameterManager {
+
+    private static final String TAG = RestrictiveParameterManager.class.getCanonicalName();
+    private static List<RestrictiveRule> restrictiveRules = new ArrayList<>();
+
+    public static void updateRulesFromSetting(String response) {
+        try {
+            restrictiveRules.clear();
+            JSONObject jsonObject = new JSONObject(response);
+            String rawStr = jsonObject.optString("restrictive_data_filter_rules");
+            JSONArray jsonArray = new JSONArray(rawStr);
+            for (int i = 0; i < jsonArray.length(); i++) {
+                JSONObject object = jsonArray.getJSONObject(i);
+                String keyRegex = object.optString("key_regex");
+                String valRagex = object.optString("value_regex");
+                String valNegRagex = object.optString("value_negative_regex");
+                String type = object.optString("type");
+
+                if (Utility.isNullOrEmpty(keyRegex)
+                        && Utility.isNullOrEmpty(valRagex)
+                        && Utility.isNullOrEmpty(valNegRagex)) {
+                    continue;
+                }
+
+                restrictiveRules.add(new RestrictiveRule(
+                        keyRegex, valRagex, valNegRagex, type));
+            }
+        } catch (JSONException _je) {/*no op*/}
+    }
+
+    static class RestrictiveRule {
+        String keyRegex;
+        String valRegex;
+        String valNegRegex;
+        String type;
+
+        RestrictiveRule(String keyRegex, String valRegex, String valNegRegex, String type) {
+            this.keyRegex = keyRegex;
+            this.valRegex = valRegex;
+            this.valNegRegex = valNegRegex;
+            this.type = type;
+        }
+    }
+}
diff --git a/facebook-core/src/main/java/com/facebook/internal/FetchedAppSettingsManager.java b/facebook-core/src/main/java/com/facebook/internal/FetchedAppSettingsManager.java
index 2d88fa113..0e5445b09 100644
--- a/facebook-core/src/main/java/com/facebook/internal/FetchedAppSettingsManager.java
+++ b/facebook-core/src/main/java/com/facebook/internal/FetchedAppSettingsManager.java
@@ -36,6 +36,7 @@
 
 import com.facebook.FacebookSdk;
 import com.facebook.GraphRequest;
+import com.facebook.appevents.RestrictiveParameterManager;
 import com.facebook.appevents.codeless.internal.UnityReflection;
 import com.facebook.appevents.internal.AutomaticAnalyticsLogger;
 import com.facebook.appevents.internal.Constants;
@@ -85,6 +86,8 @@
             "app_events_feature_bitmask";
     private static final String APP_SETTING_APP_EVENTS_EVENT_BINDINGS =
             "auto_event_mapping_android";
+    private static final String APP_SETTING_RESTRICTIVE_RULE_FIELD =
+            "restrictive_data_filter_rules";
     private static final int AUTOMATIC_LOGGING_ENABLED_BITMASK_FIELD = 1 << 3;
     // The second bit of app_events_feature_bitmask is used for iOS in-app purchase automatic
     // logging, while the fourth bit is used for Android in-app purchase automatic logging.
@@ -108,7 +111,8 @@
             APP_SETTING_APP_EVENTS_EVENT_BINDINGS,
             APP_SETTING_SMART_LOGIN_OPTIONS,
             SMART_LOGIN_BOOKMARK_ICON_URL,
-            SMART_LOGIN_MENU_ICON_URL
+            SMART_LOGIN_MENU_ICON_URL,
+            APP_SETTING_RESTRICTIVE_RULE_FIELD
     };
     private static final String APPLICATION_FIELDS = "fields";
 
@@ -313,6 +317,8 @@ private static FetchedAppSettings parseAppSettingsFromJSON(
             UnityReflection.sendEventMapping(eventBindings.toString());
         }
 
+        RestrictiveParameterManager.updateRulesFromSetting(
+                settingsJSON.optString(APP_SETTING_RESTRICTIVE_RULE_FIELD));
         FetchedAppSettings result = new FetchedAppSettings(
                 settingsJSON.optBoolean(APP_SETTING_SUPPORTS_IMPLICIT_SDK_LOGGING, false),
                 settingsJSON.optString(APP_SETTING_NUX_CONTENT, ""),
