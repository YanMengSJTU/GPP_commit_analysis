diff --git a/.gitignore b/.gitignore
index e73e92be9..ffc1f13be 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,6 +3,7 @@
 build
 
 *~
+*.iml
 *.DS_Store
 *.class
 *java#
diff --git a/facebook/AndroidManifest.xml b/facebook/AndroidManifest.xml
index 2f9284fb0..f1838f2c2 100644
--- a/facebook/AndroidManifest.xml
+++ b/facebook/AndroidManifest.xml
@@ -16,7 +16,8 @@
 -->
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-      package="com.facebook.android">
+          package="com.facebook.android">
+
     <application/>
-    <uses-sdk android:minSdkVersion="8" />
+    <uses-sdk android:minSdkVersion="14"/>
 </manifest>
diff --git a/facebook/build.gradle b/facebook/build.gradle
index ea2914c49..90b8f0d2a 100644
--- a/facebook/build.gradle
+++ b/facebook/build.gradle
@@ -1,7 +1,8 @@
 apply plugin: 'android-library'
 
 dependencies {
-    compile 'com.android.support:support-v4:13.0.+'
+    compile 'com.google.android.annotations:annotations:21.1'
+    compile 'android.support:compatibility-v13:18'
 }
 
 android {
@@ -9,7 +10,7 @@ android {
     buildToolsVersion "19"
 
     defaultConfig {
-        minSdkVersion 8
+        minSdkVersion 14
         targetSdkVersion 19
     }
 
@@ -20,4 +21,4 @@ android {
             res.srcDirs = ['res']
         }
     }
-}
+}
\ No newline at end of file
diff --git a/facebook/src/com/facebook/Session.java b/facebook/src/com/facebook/Session.java
index 16efff2e0..f056c68b3 100644
--- a/facebook/src/com/facebook/Session.java
+++ b/facebook/src/com/facebook/Session.java
@@ -17,20 +17,49 @@
 package com.facebook;
 
 import android.app.Activity;
-import android.content.*;
+import android.app.Fragment;
+import android.content.ActivityNotFoundException;
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.content.ServiceConnection;
 import android.content.pm.ResolveInfo;
-import android.os.*;
-import android.support.v4.app.Fragment;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.IBinder;
+import android.os.Looper;
+import android.os.Message;
+import android.os.Messenger;
+import android.os.RemoteException;
 import android.support.v4.content.LocalBroadcastManager;
 import android.text.TextUtils;
 import android.util.Log;
-import com.facebook.internal.*;
+import com.facebook.internal.NativeProtocol;
+import com.facebook.internal.SessionAuthorizationType;
+import com.facebook.internal.Utility;
+import com.facebook.internal.Validate;
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.io.*;
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.InvalidObjectException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.io.Serializable;
 import java.lang.ref.WeakReference;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.UUID;
 
 /**
  * <p>
@@ -61,7 +90,7 @@
      * The default activity code used for authorization.
      *
      * @see #openForRead(OpenRequest)
-     *      open
+     * open
      */
     public static final int DEFAULT_AUTHORIZE_ACTIVITY_CODE = 0xface;
 
@@ -170,8 +199,8 @@
         private final AuthorizationRequest pendingAuthorizationRequest;
 
         SerializationProxyV1(String applicationId, SessionState state,
-                AccessToken tokenInfo, Date lastAttemptedTokenExtendDate,
-                boolean shouldAutoPublish, AuthorizationRequest pendingAuthorizationRequest) {
+                             AccessToken tokenInfo, Date lastAttemptedTokenExtendDate,
+                             boolean shouldAutoPublish, AuthorizationRequest pendingAuthorizationRequest) {
             this.applicationId = applicationId;
             this.state = state;
             this.tokenInfo = tokenInfo;
@@ -182,7 +211,7 @@
 
         private Object readResolve() {
             return new Session(applicationId, state, tokenInfo,
-                    lastAttemptedTokenExtendDate, shouldAutoPublish, pendingAuthorizationRequest);
+                lastAttemptedTokenExtendDate, shouldAutoPublish, pendingAuthorizationRequest);
         }
     }
 
@@ -190,8 +219,8 @@ private Object readResolve() {
      * Used by version 1 of the serialization proxy, do not modify.
      */
     private Session(String applicationId, SessionState state,
-            AccessToken tokenInfo, Date lastAttemptedTokenExtendDate,
-            boolean shouldAutoPublish, AuthorizationRequest pendingAuthorizationRequest) {
+                    AccessToken tokenInfo, Date lastAttemptedTokenExtendDate,
+                    boolean shouldAutoPublish, AuthorizationRequest pendingAuthorizationRequest) {
         this.applicationId = applicationId;
         this.state = state;
         this.tokenInfo = tokenInfo;
@@ -242,7 +271,7 @@ public Session(Context currentContext) {
         Bundle tokenState = loadTokenFromCache ? tokenCachingStrategy.load() : null;
         if (TokenCachingStrategy.hasTokenInformation(tokenState)) {
             Date cachedExpirationDate = TokenCachingStrategy
-                    .getDate(tokenState, TokenCachingStrategy.EXPIRATION_DATE_KEY);
+                .getDate(tokenState, TokenCachingStrategy.EXPIRATION_DATE_KEY);
             Date now = new Date();
 
             if ((cachedExpirationDate == null) || cachedExpirationDate.before(now)) {
@@ -265,7 +294,7 @@ public Session(Context currentContext) {
      * authorization.
      *
      * @return a Bundle containing data that was returned from Facebook during
-     *         authorization.
+     * authorization.
      */
     public final Bundle getAuthorizationBundle() {
         synchronized (this.lock) {
@@ -443,15 +472,15 @@ public final void open(AccessToken accessToken, StatusCallback callback) {
         synchronized (this.lock) {
             if (pendingAuthorizationRequest != null) {
                 throw new UnsupportedOperationException(
-                        "Session: an attempt was made to open a session that has a pending request.");
+                    "Session: an attempt was made to open a session that has a pending request.");
             }
 
             if (state.isClosed()) {
                 throw new UnsupportedOperationException(
-                        "Session: an attempt was made to open a previously-closed session.");
+                    "Session: an attempt was made to open a previously-closed session.");
             } else if (state != SessionState.CREATED && state != SessionState.CREATED_TOKEN_LOADED) {
                 throw new UnsupportedOperationException(
-                        "Session: an attempt was made to open an already opened session.");
+                    "Session: an attempt was made to open an already opened session.");
             }
 
             if (callback != null) {
@@ -530,7 +559,7 @@ public final void requestNewPublishPermissions(NewPermissionsRequest newPermissi
      * @param data            The Intent passed as the data parameter from the forwarded
      *                        call.
      * @return A boolean indicating whether the requestCode matched a pending
-     *         authorization request for this Session.
+     * authorization request for this Session.
      */
     public final boolean onActivityResult(Activity currentActivity, int requestCode, int resultCode, Intent data) {
         Validate.notNull(currentActivity, "currentActivity");
@@ -548,7 +577,7 @@ public final boolean onActivityResult(Activity currentActivity, int requestCode,
 
         if (data != null) {
             AuthorizationClient.Result result = (AuthorizationClient.Result) data.getSerializableExtra(
-                    LoginActivity.RESULT_KEY);
+                LoginActivity.RESULT_KEY);
             if (result != null) {
                 // This came from LoginActivity.
                 handleAuthorizationResult(resultCode, result);
@@ -586,7 +615,7 @@ public final void close() {
                 case OPENING:
                     this.state = SessionState.CLOSED_LOGIN_FAILED;
                     postStateChange(oldState, this.state, new FacebookException(
-                            "Log in attempt aborted."));
+                        "Log in attempt aborted."));
                     break;
 
                 case CREATED_TOKEN_LOADED:
@@ -643,8 +672,8 @@ public final void removeCallback(StatusCallback callback) {
     @Override
     public String toString() {
         return new StringBuilder().append("{Session").append(" state:").append(this.state).append(", token:")
-                .append((this.tokenInfo == null) ? "null" : this.tokenInfo).append(", appId:")
-                .append((this.applicationId == null) ? "null" : this.applicationId).append("}").toString();
+            .append((this.tokenInfo == null) ? "null" : this.tokenInfo).append(", appId:")
+            .append((this.applicationId == null) ? "null" : this.applicationId).append("}").toString();
     }
 
     void extendTokenCompleted(Bundle bundle) {
@@ -672,7 +701,7 @@ void extendTokenCompleted(Bundle bundle) {
 
     private Object writeReplace() {
         return new SerializationProxyV1(applicationId, state, tokenInfo,
-                lastAttemptedTokenExtendDate, false, pendingAuthorizationRequest);
+            lastAttemptedTokenExtendDate, false, pendingAuthorizationRequest);
     }
 
     // have a readObject that throws to prevent spoofing
@@ -715,7 +744,7 @@ public static final void saveSession(Session session, Bundle bundle) {
      * @return the restored Session, or null
      */
     public static final Session restoreSession(
-            Context context, TokenCachingStrategy cachingStrategy, StatusCallback callback, Bundle bundle) {
+        Context context, TokenCachingStrategy cachingStrategy, StatusCallback callback, Bundle bundle) {
         if (bundle == null) {
             return null;
         }
@@ -826,7 +855,7 @@ public static Session openActiveSessionFromCache(Context context) {
      * @return The new Session or null if one could not be created
      */
     public static Session openActiveSession(Activity activity, boolean allowLoginUI,
-            StatusCallback callback) {
+                                            StatusCallback callback) {
         return openActiveSession(activity, allowLoginUI, new OpenRequest(activity).setCallback(callback));
     }
 
@@ -849,7 +878,7 @@ public static Session openActiveSession(Activity activity, boolean allowLoginUI,
      * @return The new Session or null if one could not be created
      */
     public static Session openActiveSession(Context context, Fragment fragment,
-            boolean allowLoginUI, StatusCallback callback) {
+                                            boolean allowLoginUI, StatusCallback callback) {
         return openActiveSession(context, allowLoginUI, new OpenRequest(fragment).setCallback(callback));
     }
 
@@ -875,7 +904,7 @@ public static Session openActiveSession(Context context, Fragment fragment,
      * @return The new Session or null if one could not be created
      */
     public static Session openActiveSessionWithAccessToken(Context context, AccessToken accessToken,
-            StatusCallback callback) {
+                                                           StatusCallback callback) {
         Session session = new Session(context, null, null, false);
 
         setActiveSession(session);
@@ -917,11 +946,11 @@ void authorize(AuthorizationRequest request) {
         started = tryLoginActivity(request);
 
         pendingAuthorizationRequest.loggingExtras.put(AuthorizationClient.EVENT_EXTRAS_TRY_LOGIN_ACTIVITY,
-                started ? AppEventsConstants.EVENT_PARAM_VALUE_YES : AppEventsConstants.EVENT_PARAM_VALUE_NO);
+            started ? AppEventsConstants.EVENT_PARAM_VALUE_YES : AppEventsConstants.EVENT_PARAM_VALUE_NO);
 
         if (!started && request.isLegacy) {
             pendingAuthorizationRequest.loggingExtras.put(AuthorizationClient.EVENT_EXTRAS_TRY_LEGACY,
-                    AppEventsConstants.EVENT_PARAM_VALUE_YES);
+                AppEventsConstants.EVENT_PARAM_VALUE_YES);
 
             tryLegacyAuth(request);
             started = true;
@@ -940,7 +969,7 @@ void authorize(AuthorizationRequest request) {
                         this.state = SessionState.CLOSED_LOGIN_FAILED;
 
                         Exception exception = new FacebookException(
-                                "Log in attempt failed: LoginActivity could not be started, and not legacy request");
+                            "Log in attempt failed: LoginActivity could not be started, and not legacy request");
                         logAuthorizationComplete(AuthorizationClient.Result.Code.ERROR, null, exception);
                         postStateChange(oldState, this.state, exception);
                 }
@@ -956,7 +985,7 @@ private void open(OpenRequest openRequest, SessionAuthorizationType authType) {
         synchronized (this.lock) {
             if (pendingAuthorizationRequest != null) {
                 postStateChange(state, state, new UnsupportedOperationException(
-                        "Session: an attempt was made to open a session that has a pending request."));
+                    "Session: an attempt was made to open a session that has a pending request."));
                 return;
             }
             final SessionState oldState = this.state;
@@ -983,7 +1012,7 @@ private void open(OpenRequest openRequest, SessionAuthorizationType authType) {
                     break;
                 default:
                     throw new UnsupportedOperationException(
-                            "Session: an attempt was made to open an already opened session.");
+                        "Session: an attempt was made to open an already opened session.");
             }
             if (openRequest != null) {
                 addCallback(openRequest.getCallback());
@@ -1004,16 +1033,16 @@ private void requestNewPermissions(NewPermissionsRequest newPermissionsRequest,
             synchronized (this.lock) {
                 if (pendingAuthorizationRequest != null) {
                     throw new UnsupportedOperationException(
-                            "Session: an attempt was made to request new permissions for a session that has a pending request.");
+                        "Session: an attempt was made to request new permissions for a session that has a pending request.");
                 }
                 if (state.isOpened()) {
                     pendingAuthorizationRequest = newPermissionsRequest;
                 } else if (state.isClosed()) {
                     throw new UnsupportedOperationException(
-                            "Session: an attempt was made to request new permissions for a session that has been closed.");
+                        "Session: an attempt was made to request new permissions for a session that has been closed.");
                 } else {
                     throw new UnsupportedOperationException(
-                            "Session: an attempt was made to request new permissions for a session that is not currently open.");
+                        "Session: an attempt was made to request new permissions for a session that is not currently open.");
                 }
             }
 
@@ -1029,8 +1058,8 @@ private void validateLoginBehavior(AuthorizationRequest request) {
             intent.setClass(getStaticContext(), LoginActivity.class);
             if (!resolveIntent(intent)) {
                 throw new FacebookException(String.format(
-                        "Cannot use SessionLoginBehavior %s when %s is not declared as an activity in AndroidManifest.xml",
-                        request.getLoginBehavior(), LoginActivity.class.getName()));
+                    "Cannot use SessionLoginBehavior %s when %s is not declared as an activity in AndroidManifest.xml",
+                    request.getLoginBehavior(), LoginActivity.class.getName()));
             }
         }
     }
@@ -1046,16 +1075,16 @@ private void validatePermissions(AuthorizationRequest request, SessionAuthorizat
             if (isPublishPermission(permission)) {
                 if (SessionAuthorizationType.READ.equals(authType)) {
                     throw new FacebookException(
-                            String.format(
-                                    "Cannot pass a publish or manage permission (%s) to a request for read authorization",
-                                    permission));
+                        String.format(
+                            "Cannot pass a publish or manage permission (%s) to a request for read authorization",
+                            permission));
                 }
             } else {
                 if (SessionAuthorizationType.PUBLISH.equals(authType)) {
                     Log.w(TAG,
-                            String.format(
-                                    "Should not pass a read permission (%s) to a request for publish or manage authorization",
-                                    permission));
+                        String.format(
+                            "Should not pass a read permission (%s) to a request for publish or manage authorization",
+                            permission));
                 }
             }
         }
@@ -1063,9 +1092,9 @@ private void validatePermissions(AuthorizationRequest request, SessionAuthorizat
 
     public static boolean isPublishPermission(String permission) {
         return permission != null &&
-                (permission.startsWith(PUBLISH_PERMISSION_PREFIX) ||
-                        permission.startsWith(MANAGE_PERMISSION_PREFIX) ||
-                        OTHER_PUBLISH_PERMISSIONS.contains(permission));
+            (permission.startsWith(PUBLISH_PERMISSION_PREFIX) ||
+                permission.startsWith(MANAGE_PERMISSION_PREFIX) ||
+                OTHER_PUBLISH_PERMISSIONS.contains(permission));
 
     }
 
@@ -1096,13 +1125,13 @@ private void logAuthorizationStart() {
         try {
             JSONObject extras = new JSONObject();
             extras.put(AuthorizationClient.EVENT_EXTRAS_LOGIN_BEHAVIOR,
-                    pendingAuthorizationRequest.loginBehavior.toString());
+                pendingAuthorizationRequest.loginBehavior.toString());
             extras.put(AuthorizationClient.EVENT_EXTRAS_REQUEST_CODE, pendingAuthorizationRequest.requestCode);
             extras.put(AuthorizationClient.EVENT_EXTRAS_IS_LEGACY, pendingAuthorizationRequest.isLegacy);
             extras.put(AuthorizationClient.EVENT_EXTRAS_PERMISSIONS,
-                    TextUtils.join(",", pendingAuthorizationRequest.permissions));
+                TextUtils.join(",", pendingAuthorizationRequest.permissions));
             extras.put(AuthorizationClient.EVENT_EXTRAS_DEFAULT_AUDIENCE,
-                    pendingAuthorizationRequest.defaultAudience.toString());
+                pendingAuthorizationRequest.defaultAudience.toString());
             bundle.putString(AuthorizationClient.EVENT_PARAM_EXTRAS, extras.toString());
         } catch (JSONException e) {
         }
@@ -1112,15 +1141,15 @@ private void logAuthorizationStart() {
     }
 
     private void logAuthorizationComplete(AuthorizationClient.Result.Code result, Map<String, String> resultExtras,
-            Exception exception) {
+                                          Exception exception) {
         Bundle bundle = null;
         if (pendingAuthorizationRequest == null) {
             // We don't expect this to happen, but if it does, log an event for diagnostic purposes.
             bundle = AuthorizationClient.newAuthorizationLoggingBundle("");
             bundle.putString(AuthorizationClient.EVENT_PARAM_LOGIN_RESULT,
-                    AuthorizationClient.Result.Code.ERROR.getLoggingValue());
+                AuthorizationClient.Result.Code.ERROR.getLoggingValue());
             bundle.putString(AuthorizationClient.EVENT_PARAM_ERROR_MESSAGE,
-                    "Unexpected call to logAuthorizationComplete with null pendingAuthorizationRequest.");
+                "Unexpected call to logAuthorizationComplete with null pendingAuthorizationRequest.");
         } else {
             bundle = AuthorizationClient.newAuthorizationLoggingBundle(pendingAuthorizationRequest.getAuthId());
             if (result != null) {
@@ -1281,8 +1310,8 @@ void postStateChange(final SessionState oldState, final SessionState newState, f
         // but we still want notifications of the state change since permissions are
         // different now.
         if ((oldState == newState) &&
-                (oldState != SessionState.OPENED_TOKEN_UPDATED) &&
-                (exception == null)) {
+            (oldState != SessionState.OPENED_TOKEN_UPDATED) &&
+            (exception == null)) {
             return;
         }
 
@@ -1366,8 +1395,8 @@ boolean shouldExtendAccessToken() {
         Date now = new Date();
 
         if (state.isOpened() && tokenInfo.getSource().canExtendToken()
-                && now.getTime() - lastAttemptedTokenExtendDate.getTime() > TOKEN_EXTEND_RETRY_SECONDS * 1000
-                && now.getTime() - tokenInfo.getLastRefresh().getTime() > TOKEN_EXTEND_THRESHOLD_SECONDS * 1000) {
+            && now.getTime() - lastAttemptedTokenExtendDate.getTime() > TOKEN_EXTEND_RETRY_SECONDS * 1000
+            && now.getTime() - tokenInfo.getLastRefresh().getTime() > TOKEN_EXTEND_THRESHOLD_SECONDS * 1000) {
             result = true;
         }
 
@@ -1406,14 +1435,14 @@ void setCurrentTokenRefreshRequest(TokenRefreshRequest request) {
     class TokenRefreshRequest implements ServiceConnection {
 
         final Messenger messageReceiver = new Messenger(
-                new TokenRefreshRequestHandler(Session.this, this));
+            new TokenRefreshRequestHandler(Session.this, this));
 
         Messenger messageSender = null;
 
         public void bind() {
             Intent intent = NativeProtocol.createTokenRefreshIntent(getStaticContext());
             if (intent != null
-                    && staticContext.bindService(intent, this, Context.BIND_AUTO_CREATE)) {
+                && staticContext.bindService(intent, this, Context.BIND_AUTO_CREATE)) {
                 setLastAttemptedTokenExtendDate(new Date());
             } else {
                 cleanup();
@@ -1515,9 +1544,9 @@ public boolean equals(Object otherObj) {
         Session other = (Session) otherObj;
 
         return areEqual(other.applicationId, applicationId) &&
-                areEqual(other.authorizationBundle, authorizationBundle) &&
-                areEqual(other.state, state) &&
-                areEqual(other.getExpirationDate(), getExpirationDate());
+            areEqual(other.authorizationBundle, authorizationBundle) &&
+            areEqual(other.state, state) &&
+            areEqual(other.getExpirationDate(), getExpirationDate());
     }
 
     private static boolean areEqual(Object a, Object b) {
@@ -1685,19 +1714,19 @@ public Activity getActivityContext() {
          * Constructor to be used for V1 serialization only, DO NOT CHANGE.
          */
         private AuthorizationRequest(SessionLoginBehavior loginBehavior, int requestCode,
-                List<String> permissions, String defaultAudience, boolean isLegacy, String applicationId,
-                String validateSameFbidAsToken) {
+                                     List<String> permissions, String defaultAudience, boolean isLegacy, String applicationId,
+                                     String validateSameFbidAsToken) {
             startActivityDelegate = new StartActivityDelegate() {
                 @Override
                 public void startActivityForResult(Intent intent, int requestCode) {
                     throw new UnsupportedOperationException(
-                            "Cannot create an AuthorizationRequest without a valid Activity or Fragment");
+                        "Cannot create an AuthorizationRequest without a valid Activity or Fragment");
                 }
 
                 @Override
                 public Activity getActivityContext() {
                     throw new UnsupportedOperationException(
-                            "Cannot create an AuthorizationRequest without a valid Activity or Fragment");
+                        "Cannot create an AuthorizationRequest without a valid Activity or Fragment");
                 }
             };
             this.loginBehavior = loginBehavior;
@@ -1816,13 +1845,13 @@ public Activity getActivityContext() {
                 }
             };
             return new AuthorizationClient.AuthorizationRequest(loginBehavior, requestCode, isLegacy,
-                    permissions, defaultAudience, applicationId, validateSameFbidAsToken, delegate, authId);
+                permissions, defaultAudience, applicationId, validateSameFbidAsToken, delegate, authId);
         }
 
         // package private so subclasses can use it
         Object writeReplace() {
             return new AuthRequestSerializationProxyV1(
-                    loginBehavior, requestCode, permissions, defaultAudience.name(), isLegacy, applicationId, validateSameFbidAsToken);
+                loginBehavior, requestCode, permissions, defaultAudience.name(), isLegacy, applicationId, validateSameFbidAsToken);
         }
 
         // have a readObject that throws to prevent spoofing; must be private so serializer will call it (will be
@@ -1842,8 +1871,8 @@ private void readObject(ObjectInputStream stream) throws InvalidObjectException
             private final String validateSameFbidAsToken;
 
             private AuthRequestSerializationProxyV1(SessionLoginBehavior loginBehavior,
-                    int requestCode, List<String> permissions, String defaultAudience, boolean isLegacy,
-                    String applicationId, String validateSameFbidAsToken) {
+                                                    int requestCode, List<String> permissions, String defaultAudience, boolean isLegacy,
+                                                    String applicationId, String validateSameFbidAsToken) {
                 this.loginBehavior = loginBehavior;
                 this.requestCode = requestCode;
                 this.permissions = permissions;
@@ -1855,7 +1884,7 @@ private AuthRequestSerializationProxyV1(SessionLoginBehavior loginBehavior,
 
             private Object readResolve() {
                 return new AuthorizationRequest(loginBehavior, requestCode, permissions, defaultAudience, isLegacy,
-                        applicationId, validateSameFbidAsToken);
+                    applicationId, validateSameFbidAsToken);
             }
         }
     }
diff --git a/facebook/src/com/facebook/widget/FacebookFragment.java b/facebook/src/com/facebook/widget/FacebookFragment.java
index e9849a8ab..97c29cd72 100644
--- a/facebook/src/com/facebook/widget/FacebookFragment.java
+++ b/facebook/src/com/facebook/widget/FacebookFragment.java
@@ -16,9 +16,9 @@
 
 package com.facebook.widget;
 
+import android.app.Fragment;
 import android.content.Intent;
 import android.os.Bundle;
-import android.support.v4.app.Fragment;
 import com.facebook.Session;
 import com.facebook.SessionLoginBehavior;
 import com.facebook.SessionState;
diff --git a/facebook/src/com/facebook/widget/LoginButton.java b/facebook/src/com/facebook/widget/LoginButton.java
index ce67f6955..85a9391df 100644
--- a/facebook/src/com/facebook/widget/LoginButton.java
+++ b/facebook/src/com/facebook/widget/LoginButton.java
@@ -18,26 +18,33 @@
 
 import android.app.Activity;
 import android.app.AlertDialog;
+import android.app.Fragment;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.res.TypedArray;
 import android.graphics.Typeface;
 import android.os.Bundle;
-import android.support.v4.app.Fragment;
 import android.util.AttributeSet;
 import android.util.Log;
 import android.util.TypedValue;
 import android.view.Gravity;
 import android.view.View;
 import android.widget.Button;
-import com.facebook.*;
+import com.facebook.AppEventsLogger;
+import com.facebook.FacebookException;
+import com.facebook.Request;
+import com.facebook.Response;
+import com.facebook.Session;
+import com.facebook.SessionDefaultAudience;
+import com.facebook.SessionLoginBehavior;
+import com.facebook.SessionState;
 import com.facebook.android.R;
 import com.facebook.internal.AnalyticsEvents;
-import com.facebook.model.GraphUser;
 import com.facebook.internal.SessionAuthorizationType;
 import com.facebook.internal.SessionTracker;
 import com.facebook.internal.Utility;
+import com.facebook.model.GraphUser;
 
 import java.util.Arrays;
 import java.util.Collections;
@@ -97,7 +104,7 @@ public SessionDefaultAudience getDefaultAudience() {
         public void setReadPermissions(List<String> permissions, Session session) {
             if (SessionAuthorizationType.PUBLISH.equals(authorizationType)) {
                 throw new UnsupportedOperationException(
-                        "Cannot call setReadPermissions after setPublishPermissions has been called.");
+                    "Cannot call setReadPermissions after setPublishPermissions has been called.");
             }
             if (validatePermissions(permissions, SessionAuthorizationType.READ, session)) {
                 this.permissions = permissions;
@@ -108,7 +115,7 @@ public void setReadPermissions(List<String> permissions, Session session) {
         public void setPublishPermissions(List<String> permissions, Session session) {
             if (SessionAuthorizationType.READ.equals(authorizationType)) {
                 throw new UnsupportedOperationException(
-                        "Cannot call setPublishPermissions after setReadPermissions has been called.");
+                    "Cannot call setPublishPermissions after setReadPermissions has been called.");
             }
             if (validatePermissions(permissions, SessionAuthorizationType.PUBLISH, session)) {
                 this.permissions = permissions;
@@ -117,7 +124,7 @@ public void setPublishPermissions(List<String> permissions, Session session) {
         }
 
         private boolean validatePermissions(List<String> permissions,
-                SessionAuthorizationType authType, Session currentSession) {
+                                            SessionAuthorizationType authType, Session currentSession) {
             if (SessionAuthorizationType.PUBLISH.equals(authType)) {
                 if (Utility.isNullOrEmpty(permissions)) {
                     throw new IllegalArgumentException("Permissions for publish actions cannot be null or empty.");
@@ -165,7 +172,8 @@ public void setSessionStatusCallback(Session.StatusCallback callback) {
     public interface UserInfoChangedCallback {
         /**
          * Called when the current user changes.
-         * @param user  the current user, or null if there is no user
+         *
+         * @param user the current user, or null if there is no user
          */
         void onUserInfoFetched(GraphUser user);
     }
@@ -177,7 +185,8 @@ public void setSessionStatusCallback(Session.StatusCallback callback) {
     public interface OnErrorListener {
         /**
          * Called when a network or other error is encountered.
-         * @param error     a FacebookException representing the error that was encountered.
+         *
+         * @param error a FacebookException representing the error that was encountered.
          */
         void onError(FacebookException error);
     }
@@ -209,7 +218,7 @@ public LoginButton(Context context, AttributeSet attrs) {
             this.setGravity(Gravity.CENTER);
             this.setTextColor(getResources().getColor(R.color.com_facebook_loginview_text_color));
             this.setTextSize(TypedValue.COMPLEX_UNIT_PX,
-                    getResources().getDimension(R.dimen.com_facebook_loginview_text_size));
+                getResources().getDimension(R.dimen.com_facebook_loginview_text_size));
             this.setTypeface(Typeface.DEFAULT_BOLD);
             if (isInEditMode()) {
                 // cannot use a drawable in edit mode, so setting the background color instead
@@ -221,17 +230,17 @@ public LoginButton(Context context, AttributeSet attrs) {
                 this.setBackgroundResource(R.drawable.com_facebook_button_blue);
                 this.setCompoundDrawablesWithIntrinsicBounds(R.drawable.com_facebook_inverse_icon, 0, 0, 0);
                 this.setCompoundDrawablePadding(
-                        getResources().getDimensionPixelSize(R.dimen.com_facebook_loginview_compound_drawable_padding));
+                    getResources().getDimensionPixelSize(R.dimen.com_facebook_loginview_compound_drawable_padding));
                 this.setPadding(getResources().getDimensionPixelSize(R.dimen.com_facebook_loginview_padding_left),
-                        getResources().getDimensionPixelSize(R.dimen.com_facebook_loginview_padding_top),
-                        getResources().getDimensionPixelSize(R.dimen.com_facebook_loginview_padding_right),
-                        getResources().getDimensionPixelSize(R.dimen.com_facebook_loginview_padding_bottom));
+                    getResources().getDimensionPixelSize(R.dimen.com_facebook_loginview_padding_top),
+                    getResources().getDimensionPixelSize(R.dimen.com_facebook_loginview_padding_right),
+                    getResources().getDimensionPixelSize(R.dimen.com_facebook_loginview_padding_bottom));
             }
         }
         parseAttributes(attrs);
         if (!isInEditMode()) {
             initializeActiveSessionWithCachedToken(context);
-        }        
+        }
     }
 
     /**
@@ -304,7 +313,6 @@ public SessionDefaultAudience getDefaultAudience() {
      * (by managing the session explicitly).
      *
      * @param permissions the read permissions to use
-     *
      * @throws UnsupportedOperationException if setPublishPermissions has been called
      */
     public void setReadPermissions(List<String> permissions) {
@@ -329,7 +337,6 @@ public void setReadPermissions(List<String> permissions) {
      * (by managing the session explicitly).
      *
      * @param permissions the read permissions to use
-     *
      * @throws UnsupportedOperationException if setPublishPermissions has been called
      */
     public void setReadPermissions(String... permissions) {
@@ -355,9 +362,8 @@ public void setReadPermissions(String... permissions) {
      * (by managing the session explicitly).
      *
      * @param permissions the read permissions to use
-     *
      * @throws UnsupportedOperationException if setReadPermissions has been called
-     * @throws IllegalArgumentException if permissions is null or empty
+     * @throws IllegalArgumentException      if permissions is null or empty
      */
     public void setPublishPermissions(List<String> permissions) {
         properties.setPublishPermissions(permissions, sessionTracker.getSession());
@@ -381,9 +387,8 @@ public void setPublishPermissions(List<String> permissions) {
      * (by managing the session explicitly).
      *
      * @param permissions the read permissions to use
-     *
      * @throws UnsupportedOperationException if setReadPermissions has been called
-     * @throws IllegalArgumentException if permissions is null or empty
+     * @throws IllegalArgumentException      if permissions is null or empty
      */
     public void setPublishPermissions(String... permissions) {
         properties.setPublishPermissions(Arrays.asList(permissions), sessionTracker.getSession());
@@ -416,8 +421,8 @@ public void setLoginBehavior(SessionLoginBehavior loginBehavior) {
      * will be used.
      *
      * @return loginBehavior The {@link SessionLoginBehavior SessionLoginBehavior} that
-     *                      specifies what behaviors should be attempted during
-     *                      authorization.
+     * specifies what behaviors should be attempted during
+     * authorization.
      */
     public SessionLoginBehavior getLoginBehavior() {
         return properties.getLoginBehavior();
@@ -434,6 +439,7 @@ public void setApplicationId(String applicationId) {
 
     /**
      * Gets the callback interface that will be called when the current user changes.
+     *
      * @return the callback interface
      */
     public UserInfoChangedCallback getUserInfoChangedCallback() {
@@ -443,7 +449,7 @@ public UserInfoChangedCallback getUserInfoChangedCallback() {
     /**
      * Sets the callback interface that will be called when the current user changes.
      *
-     * @param userInfoChangedCallback   the callback interface
+     * @param userInfoChangedCallback the callback interface
      */
     public void setUserInfoChangedCallback(UserInfoChangedCallback userInfoChangedCallback) {
         this.userInfoChangedCallback = userInfoChangedCallback;
@@ -463,7 +469,7 @@ public void setSessionStatusCallback(Session.StatusCallback callback) {
     /**
      * Sets the callback interface that will be called whenever the status of the Session
      * associated with this LoginButton changes.
-
+     *
      * @return the callback interface
      */
     public Session.StatusCallback getSessionStatusCallback() {
@@ -478,26 +484,23 @@ public void setSessionStatusCallback(Session.StatusCallback callback) {
      * update the Session state based on the contents of the resultCode and
      * data.
      *
-     * @param requestCode
-     *            The requestCode parameter from the forwarded call. When this
-     *            onActivityResult occurs as part of Facebook authorization
-     *            flow, this value is the activityCode passed to open or
-     *            authorize.
-     * @param resultCode
-     *            An int containing the resultCode parameter from the forwarded
-     *            call.
-     * @param data
-     *            The Intent passed as the data parameter from the forwarded
-     *            call.
+     * @param requestCode The requestCode parameter from the forwarded call. When this
+     *                    onActivityResult occurs as part of Facebook authorization
+     *                    flow, this value is the activityCode passed to open or
+     *                    authorize.
+     * @param resultCode  An int containing the resultCode parameter from the forwarded
+     *                    call.
+     * @param data        The Intent passed as the data parameter from the forwarded
+     *                    call.
      * @return A boolean indicating whether the requestCode matched a pending
-     *         authorization request for this Session.
+     * authorization request for this Session.
      * @see Session#onActivityResult(Activity, int, int, Intent)
      */
     public boolean onActivityResult(int requestCode, int resultCode, Intent data) {
         Session session = sessionTracker.getSession();
         if (session != null) {
-            return session.onActivityResult((Activity)getContext(), requestCode,
-                    resultCode, data);
+            return session.onActivityResult((Activity) getContext(), requestCode,
+                resultCode, data);
         } else {
             return false;
         }
@@ -590,10 +593,10 @@ private void parseAttributes(AttributeSet attrs) {
     private void setButtonText() {
         if (sessionTracker != null && sessionTracker.getOpenSession() != null) {
             setText((logoutText != null) ? logoutText :
-                    getResources().getString(R.string.com_facebook_loginview_log_out_button));
+                getResources().getString(R.string.com_facebook_loginview_log_out_button));
         } else {
             setText((loginText != null) ? loginText :
-                    getResources().getString(R.string.com_facebook_loginview_log_in_button));
+                getResources().getString(R.string.com_facebook_loginview_log_in_button));
         }
     }
 
@@ -622,7 +625,7 @@ private void fetchUserInfo() {
                 if (currentSession != userInfoSession) {
                     Request request = Request.newMeRequest(currentSession, new Request.GraphUserCallback() {
                         @Override
-                        public void onCompleted(GraphUser me,  Response response) {
+                        public void onCompleted(GraphUser me, Response response) {
                             if (currentSession == sessionTracker.getOpenSession()) {
                                 user = me;
                                 if (userInfoChangedCallback != null) {
@@ -667,13 +670,13 @@ public void onClick(View v) {
                     }
                     AlertDialog.Builder builder = new AlertDialog.Builder(context);
                     builder.setMessage(message)
-                           .setCancelable(true)
-                           .setPositiveButton(logout, new DialogInterface.OnClickListener() {
-                               public void onClick(DialogInterface dialog, int which) {
-                                   openSession.closeAndClearTokenInformation();
-                               }
-                           })
-                           .setNegativeButton(cancel, null);
+                        .setCancelable(true)
+                        .setPositiveButton(logout, new DialogInterface.OnClickListener() {
+                            public void onClick(DialogInterface dialog, int which) {
+                                openSession.closeAndClearTokenInformation();
+                            }
+                        })
+                        .setNegativeButton(cancel, null);
                     builder.create().show();
                 } else {
                     openSession.closeAndClearTokenInformation();
@@ -691,7 +694,7 @@ public void onClick(DialogInterface dialog, int which) {
                     if (parentFragment != null) {
                         openRequest = new Session.OpenRequest(parentFragment);
                     } else if (context instanceof Activity) {
-                        openRequest = new Session.OpenRequest((Activity)context);
+                        openRequest = new Session.OpenRequest((Activity) context);
                     }
 
                     if (openRequest != null) {
@@ -732,12 +735,14 @@ public void call(Session session, SessionState state,
                 handleError(exception);
             }
         }
-    };
+    }
+
+    ;
 
     void handleError(Exception exception) {
         if (properties.onErrorListener != null) {
             if (exception instanceof FacebookException) {
-                properties.onErrorListener.onError((FacebookException)exception);
+                properties.onErrorListener.onError((FacebookException) exception);
             } else {
                 properties.onErrorListener.onError(new FacebookException(exception));
             }
