diff --git a/facebook/src/test/java/com/facebook/FacebookPowerMockTestCase.java b/facebook/src/test/java/com/facebook/FacebookPowerMockTestCase.java
index e45f4c707..c3878e3ea 100644
--- a/facebook/src/test/java/com/facebook/FacebookPowerMockTestCase.java
+++ b/facebook/src/test/java/com/facebook/FacebookPowerMockTestCase.java
@@ -21,6 +21,7 @@
 package com.facebook;
 
 import android.annotation.SuppressLint;
+import android.support.annotation.NonNull;
 
 import org.junit.Before;
 import org.junit.Rule;
@@ -33,6 +34,7 @@
 import org.robolectric.shadows.ShadowLog;
 
 import java.util.concurrent.Executor;
+import java.util.concurrent.ScheduledThreadPoolExecutor;
 
 // ShadowLog is used to redirect the android.util.Log calls to System.out
 @SuppressLint("RunWithRobolectricTestRunner")
@@ -50,7 +52,7 @@
     public PowerMockRule rule = new PowerMockRule();
 
     @Before
-    public void setUp() {
+    public void setup() {
         ShadowLog.stream = System.out;
         MockitoAnnotations.initMocks(this);
     }
@@ -62,4 +64,16 @@ public void execute(Runnable command) {
             command.run();
         }
     }
+
+    public static final class FacebookSerialThreadPoolExecutor extends ScheduledThreadPoolExecutor {
+
+        public FacebookSerialThreadPoolExecutor(int corePoolSize) {
+            super(corePoolSize);
+        }
+
+        @Override
+        public void execute(@NonNull Runnable command) {
+            command.run();
+        }
+    }
 }
diff --git a/facebook/src/test/java/com/facebook/GraphRequestTest.java b/facebook/src/test/java/com/facebook/GraphRequestTest.java
index fab90d515..30643c089 100644
--- a/facebook/src/test/java/com/facebook/GraphRequestTest.java
+++ b/facebook/src/test/java/com/facebook/GraphRequestTest.java
@@ -33,7 +33,9 @@
 import org.json.JSONObject;
 import org.junit.Before;
 import org.junit.Test;
+import org.powermock.api.mockito.PowerMockito;
 import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.reflect.Whitebox;
 import org.robolectric.RuntimeEnvironment;
 
 import java.net.HttpURLConnection;
@@ -62,12 +64,17 @@
 })
 public class GraphRequestTest extends FacebookPowerMockTestCase {
 
+    private final String mockAppID = "1234";
+    private final String mockClientToken = "5678";
+
     @Before
-    public void before() {
-        spy(FacebookSdk.class);
-        when(FacebookSdk.isInitialized()).thenReturn(true);
-        when(FacebookSdk.getApplicationId()).thenReturn("1234");
-        when(FacebookSdk.getClientToken()).thenReturn("5678");
+    @Override
+    public void setup() {
+        super.setup();
+        PowerMockito.spy(FacebookSdk.class);
+        Whitebox.setInternalState(FacebookSdk.class, "sdkInitialized", true);
+        Whitebox.setInternalState(FacebookSdk.class, "applicationId", mockAppID);
+        Whitebox.setInternalState(FacebookSdk.class, "appClientToken", mockClientToken);
     }
 
     @Test
@@ -205,16 +212,19 @@ public void testSetHttpMethodToNilGivesDefault() {
     }
 
     @Test
-    public void testExecuteBatchWithNullRequestsThrows() {
+    public void testExecuteBatchWithInvalidRequestsThrows() {
         try {
             GraphRequest.executeBatchAndWait((GraphRequest[]) null);
             fail("expected NullPointerException");
         } catch (NullPointerException exception) {
         }
-    }
 
-    @Test
-    public void testExecuteBatchWithZeroRequestsThrows() {
+        try {
+            GraphRequest.executeBatchAndWait(new GraphRequest[]{null});
+            fail("expected NullPointerException");
+        } catch (NullPointerException exception) {
+        }
+
         try {
             GraphRequest.executeBatchAndWait(new GraphRequest[]{});
             fail("expected IllegalArgumentException");
@@ -223,43 +233,25 @@ public void testExecuteBatchWithZeroRequestsThrows() {
     }
 
     @Test
-    public void testExecuteBatchWithNullRequestThrows() {
+    public void testToHttpConnectionWithInvalidRequestsThrows() {
         try {
-            GraphRequest.executeBatchAndWait(new GraphRequest[]{null});
+            GraphRequest.toHttpConnection((GraphRequest[]) null);
             fail("expected NullPointerException");
-        } catch (NullPointerException exception) {
-        }
-    }
+        } catch (NullPointerException exception) { }
 
-    @Test
-    public void testToHttpConnectionWithNullRequestsThrows() {
         try {
-            GraphRequest.toHttpConnection((GraphRequest[]) null);
+            GraphRequest.toHttpConnection(new GraphRequest[]{null});
             fail("expected NullPointerException");
-        } catch (NullPointerException exception) {
-        }
-    }
+        } catch (NullPointerException exception) { }
 
-    @Test
-    public void testToHttpConnectionWithZeroRequestsThrows() {
         try {
             GraphRequest.toHttpConnection(new GraphRequest[]{});
             fail("expected IllegalArgumentException");
-        } catch (IllegalArgumentException exception) {
-        }
-    }
-
-    @Test
-    public void testToHttpConnectionWithNullRequestThrows() {
-        try {
-            GraphRequest.toHttpConnection(new GraphRequest[]{null});
-            fail("expected NullPointerException");
-        } catch (NullPointerException exception) {
-        }
+        } catch (IllegalArgumentException exception) { }
     }
 
     @Test
-    public void testSingleGetToHttpRequest() throws Exception {
+    public void testSingleGetToHttpRequest() {
         GraphRequest requestMe = new GraphRequest(null, "TourEiffel");
         HttpURLConnection connection = GraphRequest.toHttpConnection(requestMe);
         assertNotNull(connection);
@@ -275,7 +267,7 @@ public void testSingleGetToHttpRequest() throws Exception {
     }
 
     @Test
-    public void testBuildsClientTokenIfNeeded() throws Exception {
+    public void testBuildsClientTokenIfNeeded() {
         GraphRequest requestMe = new GraphRequest(null, "TourEiffel");
         HttpURLConnection connection = GraphRequest.toHttpConnection(requestMe);
         assertNotNull(connection);
@@ -283,8 +275,8 @@ public void testBuildsClientTokenIfNeeded() throws Exception {
         Uri uri = Uri.parse(connection.getURL().toString());
         String accessToken = uri.getQueryParameter("access_token");
         assertNotNull(accessToken);
-        assertTrue(accessToken.contains(FacebookSdk.getApplicationId()));
-        assertTrue(accessToken.contains(FacebookSdk.getClientToken()));
+        assertTrue(accessToken.contains(mockAppID));
+        assertTrue(accessToken.contains(mockClientToken));
     }
 
     @Test
diff --git a/facebook/src/test/java/com/facebook/LegacyTokenCacheTest.java b/facebook/src/test/java/com/facebook/LegacyTokenCacheTest.java
index 5cf522e32..408f78a75 100644
--- a/facebook/src/test/java/com/facebook/LegacyTokenCacheTest.java
+++ b/facebook/src/test/java/com/facebook/LegacyTokenCacheTest.java
@@ -67,9 +67,10 @@
 
     private static Random random = new Random((new Date()).getTime());
 
+    @Before
     @Override
-    public void setUp() {
-        super.setUp();
+    public void setup() {
+        super.setup();
         FacebookSdk.setApplicationId("123456789");
         FacebookSdk.setAutoLogAppEventsEnabled(false);
         FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
diff --git a/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerImplTest.java b/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerImplTest.java
index a3ec9ed8d..78721d761 100644
--- a/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerImplTest.java
+++ b/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerImplTest.java
@@ -80,8 +80,8 @@
 
     @Before
     @Override
-    public void setUp() {
-        super.setUp();
+    public void setup() {
+        super.setup();
         PowerMockito.spy(FacebookSdk.class);
         Whitebox.setInternalState(FacebookSdk.class, "sdkInitialized", true);
         Whitebox.setInternalState(FacebookSdk.class, "applicationId", mockAppID);
diff --git a/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerTest.java b/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerTest.java
index 0a8069822..04d14f8f4 100644
--- a/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerTest.java
+++ b/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerTest.java
@@ -67,8 +67,8 @@
 
     @Before
     @Override
-    public void setUp() {
-        super.setUp();
+    public void setup() {
+        super.setup();
         PowerMockito.spy(FacebookSdk.class);
         Whitebox.setInternalState(FacebookSdk.class, "sdkInitialized", true);
         Whitebox.setInternalState(FacebookSdk.class, "applicationId", mockAppID);
diff --git a/facebook/src/test/java/com/facebook/appevents/AutomaticAnalyticsTest.java b/facebook/src/test/java/com/facebook/appevents/AutomaticAnalyticsTest.java
index addc86951..d324418d8 100644
--- a/facebook/src/test/java/com/facebook/appevents/AutomaticAnalyticsTest.java
+++ b/facebook/src/test/java/com/facebook/appevents/AutomaticAnalyticsTest.java
@@ -20,16 +20,33 @@
 
 package com.facebook.appevents;
 
+import android.app.Activity;
+
+import com.facebook.FacebookPowerMockTestCase;
+import com.facebook.FacebookSdk;
+import com.facebook.appevents.internal.ActivityLifecycleTracker;
 import com.facebook.internal.FetchedAppSettingsManager;
 import com.facebook.internal.FetchedAppSettings;
-import com.facebook.FacebookTestCase;
 
 import org.json.JSONObject;
 import static org.junit.Assert.assertEquals;
+import static org.powermock.api.support.membermodification.MemberMatcher.method;
+import static org.powermock.api.support.membermodification.MemberModifier.stub;
+
 import org.junit.Test;
+import org.mockito.Matchers;
+import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.reflect.Whitebox;
+import org.robolectric.Robolectric;
+import org.robolectric.RuntimeEnvironment;
+
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
 
-public class AutomaticAnalyticsTest extends FacebookTestCase {
+@PrepareForTest({ ActivityLifecycleTracker.class, FacebookSdk.class, FetchedAppSettingsManager.class,
+        Executors.class})
+public class AutomaticAnalyticsTest extends FacebookPowerMockTestCase {
 
     @Test
     public void testAutomaticLoggingEnabledServerConfiguration() throws Exception {
@@ -65,4 +82,25 @@ public void testAutomaticLoggingEnabledServerConfiguration() throws Exception {
         assertEquals(settings.getAutomaticLoggingEnabled(),false);
     }
 
+    @Test
+    public void testAutoTrackingWhenInitialized() throws Exception {
+        stub(method(FetchedAppSettingsManager.class, "loadAppSettingsAsync")).toReturn(null);
+
+        ScheduledExecutorService mockExecutor = new FacebookPowerMockTestCase.FacebookSerialThreadPoolExecutor(1);
+        PowerMockito.spy(Executors.class);
+        PowerMockito.when(Executors.newSingleThreadExecutor()).thenReturn(mockExecutor);
+        PowerMockito.mockStatic(ActivityLifecycleTracker.class);
+
+        FacebookSdk.setApplicationId("1234");
+        FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
+
+        Activity activity =
+                Robolectric.buildActivity(Activity.class).create().start().resume().visible().get();
+
+        PowerMockito.doCallRealMethod().when(ActivityLifecycleTracker.class, "onActivityCreated",
+                Matchers.any(Activity.class));
+        PowerMockito.doCallRealMethod().when(ActivityLifecycleTracker.class, "onActivityResumed",
+                Matchers.any(Activity.class));
+    }
+
 }
diff --git a/facebook/src/test/java/com/facebook/appevents/InternalAppEventsLoggerTest.java b/facebook/src/test/java/com/facebook/appevents/InternalAppEventsLoggerTest.java
index 0e63d70f4..5b3e8c476 100644
--- a/facebook/src/test/java/com/facebook/appevents/InternalAppEventsLoggerTest.java
+++ b/facebook/src/test/java/com/facebook/appevents/InternalAppEventsLoggerTest.java
@@ -53,8 +53,8 @@
 
     @Before
     @Override
-    public void setUp() {
-        super.setUp();
+    public void setup() {
+        super.setup();
 
         try {
             PowerMockito.mockStatic(FacebookSdk.class);
diff --git a/facebook/src/test/java/com/facebook/appevents/UserDataStoreTest.java b/facebook/src/test/java/com/facebook/appevents/UserDataStoreTest.java
index 71f40240a..2f0920100 100644
--- a/facebook/src/test/java/com/facebook/appevents/UserDataStoreTest.java
+++ b/facebook/src/test/java/com/facebook/appevents/UserDataStoreTest.java
@@ -61,8 +61,8 @@
 
     @Before
     @Override
-    public void setUp() {
-        super.setUp();
+    public void setup() {
+        super.setup();
         PowerMockito.spy(FacebookSdk.class);
         Whitebox.setInternalState(FacebookSdk.class, "sdkInitialized", true);
 
diff --git a/facebook/src/test/java/com/facebook/appevents/codeless/CodelessTestBase.java b/facebook/src/test/java/com/facebook/appevents/codeless/CodelessTestBase.java
index ee78caf83..a5fcaffd3 100644
--- a/facebook/src/test/java/com/facebook/appevents/codeless/CodelessTestBase.java
+++ b/facebook/src/test/java/com/facebook/appevents/codeless/CodelessTestBase.java
@@ -37,8 +37,8 @@
 
     @Before
     @Override
-    public void setUp() {
-        super.setUp();
+    public void setup() {
+        super.setup();
         activity = Robolectric.buildActivity(Activity.class).create().get();
         root = new LinearLayout(activity);
 
diff --git a/facebook/src/test/java/com/facebook/internal/FileLruCacheTest.java b/facebook/src/test/java/com/facebook/internal/FileLruCacheTest.java
index 7c32ce5cc..45f662dd0 100644
--- a/facebook/src/test/java/com/facebook/internal/FileLruCacheTest.java
+++ b/facebook/src/test/java/com/facebook/internal/FileLruCacheTest.java
@@ -275,10 +275,6 @@ public void testCacheLru() throws IOException, InterruptedException {
                 put(cache, i, data);
             }
 
-            // Make sure operations are separated by enough time that the file timestamps are all different.
-            // On the test device, it looks like lastModified has 1-second resolution, so we have to wait at
-            // least a second to guarantee that updated timestamps will come later.
-            Thread.sleep(1000);
             for (int i = 0; i < otherCount; i++) {
                 put(cache, keepCount + i, data);
                 Thread.sleep(1000);
@@ -287,7 +283,6 @@ public void testCacheLru() throws IOException, InterruptedException {
                 for (int keepIndex = 0; keepIndex < keepCount; keepIndex++) {
                     checkValue(cache, keepIndex, data);
                 }
-                Thread.sleep(200);
             }
 
             // All but the last other key should have been pushed out
