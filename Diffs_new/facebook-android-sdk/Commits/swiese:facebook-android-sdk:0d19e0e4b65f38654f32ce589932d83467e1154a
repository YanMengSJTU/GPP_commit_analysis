diff --git a/.arcconfig b/.arcconfig
deleted file mode 100644
index e5b788da0..000000000
--- a/.arcconfig
+++ /dev/null
@@ -1,11 +0,0 @@
-{
-  "project_id" : "facebook-android-sdk",
-  "conduit_uri" : "https://phabricator.fb.com/api/",
-  "copyright_holder" : "Facebook",
-  "phutil_libraries" : {
-    "android-sdk-arcanist" : "internal/arcanist"
-  },
-  "arcanist_configuration" : "FacebookAndroidSDKArcanistConfiguration",
-  "unit_engine" : "AndroidSdkUnitTestEngine",
-  "lint_engine" : "AndroidSdkLintEngine"
-}
diff --git a/.buckconfig b/.buckconfig
deleted file mode 100644
index ed8b51685..000000000
--- a/.buckconfig
+++ /dev/null
@@ -1,22 +0,0 @@
-# .buckconfig.local is in .gitignore, so you do not have to worry about checking your
-# personal customizations to Buck into the repo.
-
-[java]
-    # This makes it possible to determine the package of a
-    # Java file from the path alone.
-    src_roots = /facebook/src/, /samples/HelloFacebookSample/src/
-
-    # We target gingerbread. Ensure that libraries target that.
-    source_level = 7
-    target_level = 7
-
-[build]
-    build_dependencies = FIRST_ORDER_ONLY
-
-[alias]
-    sdk = //facebook:android-sdk
-    hello-facebook = //samples/HelloFacebookSample:app
-    iconicus = //samples/Iconicus:app
-    rps = //samples/RPSSample:app
-    scrumptious = //samples/Scrumptious:app
-    switch-user = //samples/SwitchUserSample:app
diff --git a/.buckversion b/.buckversion
deleted file mode 100644
index 33b8b7e09..000000000
--- a/.buckversion
+++ /dev/null
@@ -1 +0,0 @@
-edff8b2b8818bb64982837158dd546a66b6ef6c2
diff --git a/.gitignore b/.gitignore
index 1d6218e3e..b8848d160 100644
--- a/.gitignore
+++ b/.gitignore
@@ -11,6 +11,7 @@
 # generated files
 bin/
 gen/
+libs/
 
 # Local configuration file (sdk path, etc)
 local.properties
@@ -33,6 +34,10 @@ proguard/
 build
 
 # Buck
+BUCK*
+.buckconfig
+.buckversion
+keystores/
 /buck-cache/
 /buck-out/
 /.buckconfig.local
@@ -45,6 +50,7 @@ build
 
 # Arc generated
 .phutil_module_cache
+.arcconfig
 
 *~
 *.DS_Store
diff --git a/PULL_REQUEST_TEMPLATE b/PULL_REQUEST_TEMPLATE
new file mode 100644
index 000000000..21bd8ebe9
--- /dev/null
+++ b/PULL_REQUEST_TEMPLATE
@@ -0,0 +1,6 @@
+Thanks for proposing a pull request.
+
+To help us review the request, please complete the following:
+- [ ] sign contributor license agreement: https://developers.facebook.com/opensource/cla
+- [ ] submit against our `:dev` branch, not `master`.
+- [ ] describe the change (for example, what happens before the change, and after the change)
diff --git a/build.gradle b/build.gradle
index 7769d34dd..4ea313abc 100644
--- a/build.gradle
+++ b/build.gradle
@@ -4,7 +4,7 @@ buildscript {
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.3.0'
+        classpath 'com.android.tools.build:gradle:2.1.3'
     }
 }
 
diff --git a/facebook/BUCK b/facebook/BUCK
deleted file mode 100644
index b7d6df31e..000000000
--- a/facebook/BUCK
+++ /dev/null
@@ -1,31 +0,0 @@
-android_build_config(
-  name = 'build_config',
-  package = 'com.facebook',
-)
-
-android_resource(
-  name = 'res',
-  res = 'res',
-  package = 'com.facebook',
-  deps = [
-  ],
-)
-
-android_library(
-  name = 'android-sdk',
-  srcs = glob(['src/**/*.java']),
-  deps = [
-    ':build_config',
-    ':res',
-    '//libs:android-support-v4',
-    '//libs:bolts',
-  ],
-  visibility = [
-    'PUBLIC',
-  ],
-)
-
-project_config(
-  src_target = ':android-sdk',
-  src_roots = ['src'],
-)
diff --git a/facebook/build.gradle b/facebook/build.gradle
index ceeeea06b..5c9de2f29 100644
--- a/facebook/build.gradle
+++ b/facebook/build.gradle
@@ -7,15 +7,14 @@ repositories {
 project.group = 'com.facebook.android'
 
 dependencies {
-    // Facbook Dependencies
-    compile 'com.android.support:support-v4:23.2.1'
-    compile 'com.android.support:cardview-v7:23.2.1'
-    compile 'com.android.support:customtabs:23.2.1'
+    // Facebook Dependencies
+    compile 'com.android.support:support-v4:25.0.0'
+    compile 'com.android.support:appcompat-v7:25.0.0'
+    compile 'com.android.support:cardview-v7:25.0.0'
+    compile 'com.android.support:customtabs:25.0.0'
     compile 'com.parse.bolts:bolts-android:1.4.0'
 
     // Unit Tests
-    testCompile 'com.android.support:appcompat-v7:23.2.1'
-
     testCompile 'junit:junit:4.12'
     testCompile 'org.robolectric:robolectric:3.0'
     testCompile 'org.robolectric:shadows-support-v4:3.0'
@@ -39,6 +38,13 @@ android {
     defaultConfig {
         minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
         targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+        consumerProguardFiles 'proguard-project.txt'
+
+        vectorDrawables.useSupportLibrary = true
+    }
+
+    aaptOptions {
+        additionalParameters "--no-version-vectors"
     }
 
     lintOptions {
diff --git a/facebook/proguard-project.txt b/facebook/proguard-project.txt
index f2fe1559a..1eca961d7 100644
--- a/facebook/proguard-project.txt
+++ b/facebook/proguard-project.txt
@@ -18,3 +18,11 @@
 #-keepclassmembers class fqcn.of.javascript.interface.for.webview {
 #   public *;
 #}
+
+-keepclassmembers class * implements java.io.Serializable {
+    private static final java.io.ObjectStreamField[] serialPersistentFields;
+    private void writeObject(java.io.ObjectOutputStream);
+    private void readObject(java.io.ObjectInputStream);
+    java.lang.Object writeReplace();
+    java.lang.Object readResolve();
+}
\ No newline at end of file
diff --git a/facebook/src/androidTest/java/com/facebook/AsyncRequestTests.java b/facebook/src/androidTest/java/com/facebook/AsyncRequestTests.java
index da6bc7eaa..27fbc6012 100644
--- a/facebook/src/androidTest/java/com/facebook/AsyncRequestTests.java
+++ b/facebook/src/androidTest/java/com/facebook/AsyncRequestTests.java
@@ -25,6 +25,7 @@
 import android.test.suitebuilder.annotation.LargeTest;
 import android.test.suitebuilder.annotation.MediumTest;
 import android.test.suitebuilder.annotation.SmallTest;
+import android.test.suitebuilder.annotation.Suppress;
 
 import com.facebook.internal.BundleJSONConverter;
 import com.facebook.share.internal.ShareInternalUtility;
@@ -108,7 +109,7 @@ public void testExecuteSingleGet() {
         parameters.putString("fields", "location");
         GraphRequest request = new GraphRequest(
                 accessToken,
-                "TourEiffel",
+                RequestTests.TEST_PAGE_ID,
                 parameters,
                 null,
                 new ExpectSuccessCallback() {
@@ -117,7 +118,7 @@ protected void performAsserts(GraphResponse response) {
                         assertNotNull(response);
                         JSONObject graphPlace = response.getJSONObject();
                         assertEquals(
-                                "Paris",
+                                "Seattle",
                                 graphPlace.optJSONObject("location").optString("city"));
                     }
                 });
@@ -138,7 +139,7 @@ public void testExecuteSingleGetUsingHttpURLConnection() {
         parameters.putString("fields", "location");
         GraphRequest request = new GraphRequest(
                 accessToken,
-                "TourEiffel",
+                RequestTests.TEST_PAGE_ID,
                 parameters,
                 null,
                 new ExpectSuccessCallback() {
@@ -147,7 +148,7 @@ protected void performAsserts(GraphResponse response) {
                         assertNotNull(response);
                         JSONObject graphPlace = response.getJSONObject();
                         assertEquals(
-                                "Paris",
+                                "Seattle",
                                 graphPlace.optJSONObject("location").optString("city"));
                     }
                 });
diff --git a/facebook/src/androidTest/java/com/facebook/BatchRequestTests.java b/facebook/src/androidTest/java/com/facebook/BatchRequestTests.java
index 135225b40..9e0347775 100644
--- a/facebook/src/androidTest/java/com/facebook/BatchRequestTests.java
+++ b/facebook/src/androidTest/java/com/facebook/BatchRequestTests.java
@@ -23,6 +23,7 @@
 import android.graphics.Bitmap;
 import android.os.Bundle;
 import android.test.suitebuilder.annotation.LargeTest;
+import android.test.suitebuilder.annotation.Suppress;
 
 import com.facebook.share.internal.ShareInternalUtility;
 
@@ -76,14 +77,14 @@ public void testExecuteBatchRequestsPathEncoding() throws IOException {
 
         GraphRequest request1 = new GraphRequest(
                 accessToken,
-                "TourEiffel",
+                RequestTests.TEST_PAGE_ID,
                 parameters,
                 null);
-        request1.setBatchEntryName("eiffel");
+        request1.setBatchEntryName("seattle");
         request1.setBatchEntryOmitResultOnSuccess(false);
         GraphRequest request2 = new GraphRequest(
                 accessToken,
-                "{result=eiffel:$.id}",
+                "{result=seattle:$.id}",
                 parameters,
                 null);
 
@@ -92,13 +93,13 @@ public void testExecuteBatchRequestsPathEncoding() throws IOException {
         assertTrue(responses.get(0).getError() == null);
         assertTrue(responses.get(1).getError() == null);
 
-        JSONObject eiffelTower1 = responses.get(0).getJSONObject();
-        JSONObject eiffelTower2 = responses.get(1).getJSONObject();
-        assertTrue(eiffelTower1 != null);
-        assertTrue(eiffelTower2 != null);
+        JSONObject seattle1 = responses.get(0).getJSONObject();
+        JSONObject seattle2 = responses.get(1).getJSONObject();
+        assertTrue(seattle1 != null);
+        assertTrue(seattle2 != null);
 
-        assertEquals("Paris", eiffelTower1.optJSONObject("location").optString("city"));
-        assertEquals("Paris", eiffelTower2.optJSONObject("location").optString("city"));
+        assertEquals("Seattle", seattle1.optJSONObject("location").optString("city"));
+        assertEquals("Seattle", seattle2.optJSONObject("location").optString("city"));
     }
 
     @LargeTest
@@ -110,12 +111,12 @@ public void testExecuteBatchedGets() throws IOException {
 
         GraphRequest request1 = new GraphRequest(
                 accessToken,
-                "TourEiffel",
+                RequestTests.TEST_PAGE_ID,
                 parameters,
                 null);
         GraphRequest request2 = new GraphRequest(
                 accessToken,
-                "SpaceNeedle",
+                RequestTests.TEST_PAGE_ID_2,
                 parameters,
                 null);
 
@@ -124,13 +125,13 @@ public void testExecuteBatchedGets() throws IOException {
         assertTrue(responses.get(0).getError() == null);
         assertTrue(responses.get(1).getError() == null);
 
-        JSONObject eiffelTower = responses.get(0).getJSONObject();
-        JSONObject spaceNeedle = responses.get(1).getJSONObject();
-        assertTrue(eiffelTower != null);
-        assertTrue(spaceNeedle != null);
+        JSONObject seattle = responses.get(0).getJSONObject();
+        JSONObject paris = responses.get(1).getJSONObject();
+        assertTrue(seattle != null);
+        assertTrue(paris != null);
 
-        assertEquals("Paris", eiffelTower.optJSONObject("location").optString("city"));
-        assertEquals("Seattle", spaceNeedle.optJSONObject("location").optString("city"));
+        assertEquals("Seattle", seattle.optJSONObject("location").optString("city"));
+        assertEquals("Paris", paris.optJSONObject("location").optString("city"));
     }
 
     @LargeTest
diff --git a/facebook/src/androidTest/java/com/facebook/FacebookAppLinkResolverTests.java b/facebook/src/androidTest/java/com/facebook/FacebookAppLinkResolverTests.java
index 3042f889d..06a01f5ad 100644
--- a/facebook/src/androidTest/java/com/facebook/FacebookAppLinkResolverTests.java
+++ b/facebook/src/androidTest/java/com/facebook/FacebookAppLinkResolverTests.java
@@ -22,6 +22,7 @@
 
 import android.net.Uri;
 import android.os.Handler;
+import android.test.FlakyTest;
 
 import com.facebook.applinks.FacebookAppLinkResolver;
 
@@ -98,6 +99,7 @@ public void testUrlWithNoAppLinkData() {
         }
     }
 
+    @FlakyTest
     public void testCachedAppLinkData() {
         String testUrlString = "https://fb.me/732873156764191";
         Uri testUrl = Uri.parse(testUrlString);
diff --git a/facebook/src/androidTest/java/com/facebook/GraphRequestTests.java b/facebook/src/androidTest/java/com/facebook/GraphRequestTests.java
index 6745a0fab..5556e8991 100644
--- a/facebook/src/androidTest/java/com/facebook/GraphRequestTests.java
+++ b/facebook/src/androidTest/java/com/facebook/GraphRequestTests.java
@@ -20,11 +20,14 @@
 
 package com.facebook;
 
+import android.net.Uri;
 import android.test.suitebuilder.annotation.LargeTest;
+import android.test.suitebuilder.annotation.SmallTest;
+
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.util.Date;
+import java.net.HttpURLConnection;
 
 // These tests relate to serialization/de-serialization of graph objects in a variety of scenarios, rather than
 // to the underlying request/batch plumbing.
@@ -68,4 +71,25 @@ public void testCommentRoundTrip() throws JSONException {
         assertNotNull(comment2Message);
         assertEquals(commentMessage, comment2Message);
     }
+
+    @SmallTest
+    public void testSetVersion() throws Exception {
+        String currentVersion = FacebookSdk.getGraphApiVersion();
+        FacebookSdk.setGraphApiVersion("v4.5");
+        GraphRequest requestMe = new GraphRequest(null, "TourEiffel");
+        HttpURLConnection connection = GraphRequest.toHttpConnection(requestMe);
+
+        assertTrue(connection != null);
+
+        assertEquals("GET", connection.getRequestMethod());
+        assertEquals("v4.5", FacebookSdk.getGraphApiVersion());
+        assertEquals("/v4.5" + "/TourEiffel", connection.getURL().getPath());
+
+        assertTrue(connection.getRequestProperty("User-Agent").startsWith("FBAndroidSDK"));
+
+        Uri uri = Uri.parse(connection.getURL().toString());
+        assertEquals("android", uri.getQueryParameter("sdk"));
+        assertEquals("json", uri.getQueryParameter("format"));
+        FacebookSdk.setGraphApiVersion(currentVersion);
+    }
 }
diff --git a/facebook/src/androidTest/java/com/facebook/RequestTests.java b/facebook/src/androidTest/java/com/facebook/RequestTests.java
index 61f0c5547..f69ec3d10 100644
--- a/facebook/src/androidTest/java/com/facebook/RequestTests.java
+++ b/facebook/src/androidTest/java/com/facebook/RequestTests.java
@@ -25,6 +25,7 @@
 import android.net.Uri;
 import android.os.Bundle;
 import android.test.suitebuilder.annotation.LargeTest;
+import android.test.suitebuilder.annotation.Suppress;
 
 import com.facebook.internal.GraphUtil;
 import com.facebook.share.ShareApi;
@@ -58,6 +59,9 @@
     private static final String TEST_OG_ACTION_TYPE = "facebooksdktests:run";
     private static final long REQUEST_TIMEOUT_MILLIS = 10000;
 
+    public static final String TEST_PAGE_ID = "1163806960341831";
+    public static final String TEST_PAGE_ID_2 = "110774245616525";
+
     protected String[] getDefaultPermissions()
     {
         return new String[] {
@@ -87,7 +91,7 @@ public void testExecuteSingleGet() {
 
         GraphRequest request = new GraphRequest(
                 AccessToken.getCurrentAccessToken(),
-                "TourEiffel",
+                TEST_PAGE_ID,
                 parameters,
                 null);
         GraphResponse response = request.executeAndWait();
@@ -98,7 +102,7 @@ public void testExecuteSingleGet() {
         assertNotNull(response.getRawResponse());
 
         JSONObject graphPlace = response.getJSONObject();
-        assertEquals("Paris", graphPlace.optJSONObject("location").optString("city"));
+        assertEquals("Seattle", graphPlace.optJSONObject("location").optString("city"));
     }
 
     @LargeTest
@@ -126,7 +130,7 @@ public void testExecuteSingleGetUsingHttpURLConnection() throws IOException {
 
         GraphRequest request = new GraphRequest(
                 AccessToken.getCurrentAccessToken(),
-                "TourEiffel",
+                TEST_PAGE_ID,
                 parameters,
                 null);
         HttpURLConnection connection = GraphRequest.toHttpConnection(request);
@@ -150,7 +154,7 @@ public void testExecuteSingleGetUsingHttpURLConnection() throws IOException {
         assertNotNull(response.getRawResponse());
 
         JSONObject graphPlace = response.getJSONObject();
-        assertEquals("Paris", graphPlace.optJSONObject("location").optString("city"));
+        assertEquals("Seattle", graphPlace.optJSONObject("location").optString("city"));
 
         // Make sure calling code can still access HTTP headers and call disconnect themselves.
         int code = connection.getResponseCode();
@@ -988,7 +992,7 @@ public void testPaging() {
                 .newPlacesSearchRequest(
                         AccessToken.getCurrentAccessToken(),
                         SEATTLE_LOCATION,
-                        1000,
+                        100000,
                         3,
                         null,
                         new GraphRequest.GraphJSONArrayCallback() {
@@ -1018,7 +1022,6 @@ public void onCompleted(JSONArray places, GraphResponse response) {
 
         assertNull(response.getError());
         assertNotNull(response.getJSONObject());
-        assertNotSame(0, returnedPlaces.size());
 
         returnedPlaces.clear();
 
diff --git a/facebook/src/androidTest/java/com/facebook/appevents/AppEventsLoggerTests.java b/facebook/src/androidTest/java/com/facebook/appevents/AppEventsLoggerTests.java
index e3bf4d6c7..22fb6f6f0 100644
--- a/facebook/src/androidTest/java/com/facebook/appevents/AppEventsLoggerTests.java
+++ b/facebook/src/androidTest/java/com/facebook/appevents/AppEventsLoggerTests.java
@@ -26,9 +26,12 @@
 import android.support.v4.content.LocalBroadcastManager;
 
 import com.facebook.AccessToken;
+import com.facebook.AccessTokenSource;
+import com.facebook.FacebookSdk;
 import com.facebook.FacebookTestCase;
 import com.facebook.WaitForBroadcastReceiver;
 import com.facebook.appevents.AppEventsLogger;
+import com.facebook.internal.FetchedAppSettingsManager;
 
 import java.io.FileInputStream;
 import java.io.IOException;
@@ -49,7 +52,8 @@ public void testSimpleCall() throws InterruptedException {
         final WaitForBroadcastReceiver waitForBroadcastReceiver = new WaitForBroadcastReceiver();
         waitForBroadcastReceiver.incrementExpectCount();
 
-        final LocalBroadcastManager broadcastManager = LocalBroadcastManager.getInstance(getActivity());
+        final LocalBroadcastManager broadcastManager =
+                LocalBroadcastManager.getInstance(getActivity());
 
         try {
             // Need to get notifications on another thread so we can wait for them.
@@ -82,4 +86,52 @@ public void run() {
             broadcastManager.unregisterReceiver(waitForBroadcastReceiver);
         }
     }
+
+    public void testExplicitCallWithNoAppSettings() throws InterruptedException {
+        AppEventsLogger.setFlushBehavior(AppEventsLogger.FlushBehavior.EXPLICIT_ONLY);
+
+        AccessToken accessToken1 = getFakeAccessToken();
+        FacebookSdk.setApplicationId("234");
+
+        AppEventsLogger logger1 = AppEventsLogger.newLogger(getActivity(), accessToken1);
+
+        final WaitForBroadcastReceiver waitForBroadcastReceiver = new WaitForBroadcastReceiver();
+        waitForBroadcastReceiver.incrementExpectCount();
+
+        final LocalBroadcastManager broadcastManager =
+                LocalBroadcastManager.getInstance(getActivity());
+
+        try {
+            // Need to get notifications on another thread so we can wait for them.
+            runOnBlockerThread(new Runnable() {
+                @Override
+                public void run() {
+                    broadcastManager.registerReceiver(waitForBroadcastReceiver,
+                            new IntentFilter(AppEventsLogger.ACTION_APP_EVENTS_FLUSHED));
+                }
+            }, true);
+
+            logger1.logEvent("an_event");
+
+            logger1.flush();
+
+            waitForBroadcastReceiver.waitForExpectedCalls();
+
+            closeBlockerAndAssertSuccess();
+        } finally {
+            broadcastManager.unregisterReceiver(waitForBroadcastReceiver);
+        }
+    }
+
+    private AccessToken getFakeAccessToken() {
+        return new AccessToken(
+                "foobar",
+                "234",
+                "567",
+                null,
+                null,
+                AccessTokenSource.TEST_USER,
+                null,
+                null);
+    }
 }
diff --git a/facebook/src/androidTest/java/com/facebook/appevents/UpdateUserPropertiesTests.java b/facebook/src/androidTest/java/com/facebook/appevents/UpdateUserPropertiesTests.java
new file mode 100644
index 000000000..ebc23cd87
--- /dev/null
+++ b/facebook/src/androidTest/java/com/facebook/appevents/UpdateUserPropertiesTests.java
@@ -0,0 +1,55 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import android.os.Bundle;
+
+import com.facebook.FacebookTestCase;
+import com.facebook.GraphRequest;
+import com.facebook.GraphResponse;
+import com.facebook.TestBlocker;
+
+public class UpdateUserPropertiesTests extends FacebookTestCase {
+    public void testUserUpdateProperties() throws Exception {
+        final TestBlocker blocker = getTestBlocker();
+        Bundle parameters = new Bundle();
+        parameters.putString("custom_value", "1");
+        AppEventsLogger.setUserID("1");
+        AppEventsLogger.updateUserProperties(
+                parameters,
+                getApplicationId(),
+                new GraphRequest.Callback() {
+            @Override
+            public void onCompleted(GraphResponse response) {
+                if (response.getError() != null) {
+                    blocker.setException(response.getError().getException());
+                }
+
+                blocker.signal();
+            }
+        });
+
+        blocker.waitForSignals(1);
+        if (blocker.getException() != null) {
+            throw blocker.getException();
+        }
+    }
+}
diff --git a/facebook/src/androidTest/java/com/facebook/internal/ImageResponseCacheTest.java b/facebook/src/androidTest/java/com/facebook/internal/ImageResponseCacheTest.java
index ae67aead5..f90fcb1d6 100644
--- a/facebook/src/androidTest/java/com/facebook/internal/ImageResponseCacheTest.java
+++ b/facebook/src/androidTest/java/com/facebook/internal/ImageResponseCacheTest.java
@@ -26,6 +26,8 @@
 import android.net.Uri;
 import android.test.AndroidTestCase;
 import android.test.suitebuilder.annotation.LargeTest;
+
+import com.facebook.FacebookSdk;
 import com.facebook.TestUtils;
 
 import java.io.IOException;
@@ -40,10 +42,11 @@
 
     @LargeTest
     public void testImageCaching() throws Exception {
+        FacebookSdk.sdkInitialize(safeGetContext());
         // In unit test, since we need verify first access the image is not in cache
         // we need clear the cache first
         TestUtils.clearFileLruCache(ImageResponseCache.getCache(safeGetContext()));
-        String imgUrl = "http://profile.ak.fbcdn.net/hprofile-ak-frc1/369438_100003049100322_615834658_n.jpg";
+        String imgUrl = "https://scontent-sea1-1.xx.fbcdn.net/t31.0-8/13217422_1162740970424304_7489168346277340037_o.jpg";
 
         Bitmap bmp1 = readImage(imgUrl, false);
         Bitmap bmp2 = readImage(imgUrl, true);
diff --git a/facebook/src/androidTest/java/com/facebook/internal/UtilityTest.java b/facebook/src/androidTest/java/com/facebook/internal/UtilityTest.java
index 464531a21..3480a0f27 100644
--- a/facebook/src/androidTest/java/com/facebook/internal/UtilityTest.java
+++ b/facebook/src/androidTest/java/com/facebook/internal/UtilityTest.java
@@ -29,8 +29,8 @@
 
     @LargeTest
     public void testFetchedAppSettingsErrorClassification() throws Exception {
-        Utility.FetchedAppSettings fetchedAppSettings =
-                Utility.queryAppSettings(getApplicationId(), false);
+        FetchedAppSettings fetchedAppSettings =
+                FetchedAppSettingsManager.queryAppSettings(getApplicationId(), false);
         FacebookRequestErrorClassification errorClassification = fetchedAppSettings
                 .getErrorClassification();
         assertNotNull(errorClassification);
diff --git a/facebook/src/androidTest/java/com/facebook/login/LoginClientTests.java b/facebook/src/androidTest/java/com/facebook/login/LoginClientTests.java
index 2dba1ba93..e780e860c 100644
--- a/facebook/src/androidTest/java/com/facebook/login/LoginClientTests.java
+++ b/facebook/src/androidTest/java/com/facebook/login/LoginClientTests.java
@@ -20,6 +20,7 @@
 
 package com.facebook.login;
 
+import android.annotation.SuppressLint;
 import android.support.v4.app.Fragment;
 import android.test.suitebuilder.annotation.LargeTest;
 
@@ -33,6 +34,7 @@
     private static final Set<String> PERMISSIONS = new HashSet<String>(
             Arrays.asList("go outside", "come back in"));
 
+    @SuppressLint("ParcelCreator")
     class MockLoginClient extends LoginClient {
         Result result;
         boolean triedNextHandler = false;
@@ -70,6 +72,7 @@ void tryNextHandler() {
         );
     }
 
+    @SuppressLint("ParcelCreator")
     class MockValidatingLoginClient extends MockLoginClient {
         private final HashMap<String, String> mapAccessTokenToFbid = new HashMap<String, String>();
         private Set<String> permissionsToReport = new HashSet<String>();
diff --git a/facebook/src/main/AndroidManifest.xml b/facebook/src/main/AndroidManifest.xml
index 587ea1763..ee6a2a828 100644
--- a/facebook/src/main/AndroidManifest.xml
+++ b/facebook/src/main/AndroidManifest.xml
@@ -21,5 +21,24 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.facebook">
-    <application/>
+    <application>
+        <activity
+            android:name="com.facebook.FacebookActivity"
+            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
+            android:theme="@style/com_facebook_activity_theme" />
+        <activity android:name="com.facebook.CustomTabMainActivity" />
+
+        <!-- The initialization ContentProvider will call FacebookSdk.sdkInitialize automatically
+         with the application context. This config is merged in with the host app's manifest,
+         but there can only be one provider with the same authority activated at any given
+         point; so if the end user has two or more different apps that use Facebook SDK, only the
+         first one will be able to use the provider. To work around this problem, we use the
+         following placeholder in the authority to identify each host application as if it was
+         a completely different provider.
+        -->
+        <provider
+            android:authorities="${applicationId}.FacebookInitProvider"
+            android:name=".internal.FacebookInitProvider"
+            android:exported="false" />
+    </application>
 </manifest>
diff --git a/facebook/src/main/java/com/facebook/AccessToken.java b/facebook/src/main/java/com/facebook/AccessToken.java
index 523b34c6f..289e99e7c 100644
--- a/facebook/src/main/java/com/facebook/AccessToken.java
+++ b/facebook/src/main/java/com/facebook/AccessToken.java
@@ -23,8 +23,6 @@
 import android.annotation.SuppressLint;
 import android.content.Intent;
 import android.os.Bundle;
-import android.os.Handler;
-import android.os.Looper;
 import android.os.Parcel;
 import android.os.Parcelable;
 import android.support.annotation.Nullable;
@@ -37,7 +35,13 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Date;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
 
 /**
  * This class represents an immutable access token for using Facebook APIs. It also includes
diff --git a/facebook/src/main/java/com/facebook/AccessTokenSource.java b/facebook/src/main/java/com/facebook/AccessTokenSource.java
index 64f077004..547627a3b 100644
--- a/facebook/src/main/java/com/facebook/AccessTokenSource.java
+++ b/facebook/src/main/java/com/facebook/AccessTokenSource.java
@@ -53,7 +53,7 @@
      * Indicates an access token was obtained by the user logging in through the
      * Web-based dialog on a Chrome Custom Tab.
      */
-    CUSTOM_TAB(true),
+    CHROME_CUSTOM_TAB(true),
     /**
      * Indicates an access token is for a test user rather than an actual
      * Facebook user.
diff --git a/facebook/src/main/java/com/facebook/CustomTabActivity.java b/facebook/src/main/java/com/facebook/CustomTabActivity.java
index 8cd217204..bd4769cbf 100644
--- a/facebook/src/main/java/com/facebook/CustomTabActivity.java
+++ b/facebook/src/main/java/com/facebook/CustomTabActivity.java
@@ -21,24 +21,68 @@
 package com.facebook;
 
 import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
 import android.content.Intent;
+import android.content.IntentFilter;
 import android.os.Bundle;
+import android.support.v4.content.LocalBroadcastManager;
 
 /*
- * Login from a custom tab redirects here. Pass the url on to FacebookActivity so it can return the
- * result.
+ * Login from a custom tab redirects here. Pass the url on to CustomTabMainActivity so it can return
+ * the result.
  */
 public class CustomTabActivity extends Activity {
+    private static final int CUSTOM_TAB_REDIRECT_REQUEST_CODE = 2;
+    public static final String CUSTOM_TAB_REDIRECT_ACTION =
+            CustomTabActivity.class.getSimpleName() + ".action_customTabRedirect";
+    public static final String DESTROY_ACTION =
+            CustomTabActivity.class.getSimpleName() + ".action_destroy";
+
+    private BroadcastReceiver closeReceiver;
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        Intent intent = new Intent(this, FacebookActivity.class);
-        intent.putExtra("url", getIntent().getDataString());
+        Intent intent = new Intent(this, CustomTabMainActivity.class);
+        intent.setAction(CUSTOM_TAB_REDIRECT_ACTION);
+        intent.putExtra(CustomTabMainActivity.EXTRA_URL, getIntent().getDataString());
 
-        // these flags will open FacebookActivity from the back stack as well as closing this
-        // activity and the custom tab opened by FacebookActivity
+        // these flags will open CustomTabMainActivity from the back stack as well as closing this
+        // activity and the custom tab opened by CustomTabMainActivity.
         intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
 
-        startActivity(intent);
+        startActivityForResult(intent, CUSTOM_TAB_REDIRECT_REQUEST_CODE);
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+
+        if (resultCode == RESULT_CANCELED) {
+            // We weren't able to open CustomTabMainActivity from the back stack. Send a broadcast
+            // instead.
+            Intent broadcast = new Intent(CUSTOM_TAB_REDIRECT_ACTION);
+            broadcast.putExtra(CustomTabMainActivity.EXTRA_URL, getIntent().getDataString());
+            LocalBroadcastManager.getInstance(this).sendBroadcast(broadcast);
+
+            // Wait for the custom tab to be removed from the back stack before finishing.
+            closeReceiver = new BroadcastReceiver() {
+                @Override
+                public void onReceive(Context context, Intent intent) {
+                    CustomTabActivity.this.finish();
+                }
+            };
+            LocalBroadcastManager.getInstance(this).registerReceiver(
+                    closeReceiver,
+                    new IntentFilter(CustomTabActivity.DESTROY_ACTION)
+            );
+        }
+    }
+
+    @Override
+    protected void onDestroy() {
+        LocalBroadcastManager.getInstance(this).unregisterReceiver(closeReceiver);
+        super.onDestroy();
     }
 }
diff --git a/facebook/src/main/java/com/facebook/CustomTabMainActivity.java b/facebook/src/main/java/com/facebook/CustomTabMainActivity.java
new file mode 100644
index 000000000..f29c027fb
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/CustomTabMainActivity.java
@@ -0,0 +1,126 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook;
+
+
+import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.os.Bundle;
+import android.support.v4.content.LocalBroadcastManager;
+
+import com.facebook.internal.CustomTab;
+
+public class CustomTabMainActivity extends Activity {
+    public static final String EXTRA_PARAMS =
+            CustomTabMainActivity.class.getSimpleName() + ".extra_params";
+    public static final String EXTRA_CHROME_PACKAGE =
+            CustomTabMainActivity.class.getSimpleName() + ".extra_chromePackage";
+    public static final String EXTRA_URL =
+            CustomTabMainActivity.class.getSimpleName() + ".extra_url";
+    public static final String REFRESH_ACTION =
+            CustomTabMainActivity.class.getSimpleName() + ".action_refresh";
+    public static final String getRedirectUrl() {
+        return "fb" + FacebookSdk.getApplicationId() + "://authorize";
+    }
+    private static final String OAUTH_DIALOG = "oauth";
+
+    private boolean shouldCloseCustomTab = true;
+    private BroadcastReceiver redirectReceiver;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        // Custom Tab Redirects should not be creating a new instance of this activity
+        if (CustomTabActivity.CUSTOM_TAB_REDIRECT_ACTION.equals(getIntent().getAction())) {
+            setResult(RESULT_CANCELED);
+            finish();
+            return;
+        }
+
+        if (savedInstanceState == null) {
+            Bundle parameters = getIntent().getBundleExtra(EXTRA_PARAMS);
+            String chromePackage = getIntent().getStringExtra(EXTRA_CHROME_PACKAGE);
+
+            CustomTab customTab = new CustomTab(OAUTH_DIALOG, parameters);
+            customTab.openCustomTab(this, chromePackage);
+
+            shouldCloseCustomTab = false;
+
+            // This activity will receive a broadcast if it can't be opened from the back stack
+            redirectReceiver = new BroadcastReceiver() {
+                @Override
+                public void onReceive(Context context, Intent intent) {
+                    // Remove the custom tab on top of this activity.
+                    Intent newIntent =
+                            new Intent(CustomTabMainActivity.this, CustomTabMainActivity.class);
+                    newIntent.setAction(REFRESH_ACTION);
+                    newIntent.putExtra(EXTRA_URL, intent.getStringExtra(EXTRA_URL));
+                    newIntent.addFlags(
+                            Intent.FLAG_ACTIVITY_CLEAR_TOP |
+                            Intent.FLAG_ACTIVITY_SINGLE_TOP);
+                    startActivity(newIntent);
+                }
+            };
+            LocalBroadcastManager.getInstance(this).registerReceiver(
+                    redirectReceiver,
+                    new IntentFilter(CustomTabActivity.CUSTOM_TAB_REDIRECT_ACTION)
+            );
+        }
+    }
+
+    @Override
+    protected void onNewIntent(Intent intent) {
+        super.onNewIntent(intent);
+        if (REFRESH_ACTION.equals(intent.getAction())) {
+            // The custom tab is now destroyed so we can finish the redirect activity
+            Intent broadcast = new Intent(CustomTabActivity.DESTROY_ACTION);
+            LocalBroadcastManager.getInstance(this).sendBroadcast(broadcast);
+            sendResult(RESULT_OK, intent);
+        } else if (CustomTabActivity.CUSTOM_TAB_REDIRECT_ACTION.equals(intent.getAction())) {
+            // We have successfully redirected back to this activity. Return the result and close.
+            sendResult(RESULT_OK, intent);
+        }
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        if (shouldCloseCustomTab) {
+            // The custom tab was closed without getting a result.
+            sendResult(RESULT_CANCELED, null);
+        }
+        shouldCloseCustomTab = true;
+    }
+
+    private void sendResult(int resultCode, Intent resultIntent) {
+        LocalBroadcastManager.getInstance(this).unregisterReceiver(redirectReceiver);
+        if (resultIntent != null) {
+            setResult(resultCode, resultIntent);
+        } else {
+            setResult(resultCode);
+        }
+        finish();
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/FacebookActivity.java b/facebook/src/main/java/com/facebook/FacebookActivity.java
index 4527ee0bd..ded4c9660 100644
--- a/facebook/src/main/java/com/facebook/FacebookActivity.java
+++ b/facebook/src/main/java/com/facebook/FacebookActivity.java
@@ -22,18 +22,15 @@
 
 import android.content.Intent;
 import android.content.res.Configuration;
-import android.net.Uri;
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentActivity;
 import android.support.v4.app.FragmentManager;
+import android.util.Log;
 
 import com.facebook.internal.FacebookDialogFragment;
 import com.facebook.internal.NativeProtocol;
-import com.facebook.internal.Utility;
 import com.facebook.login.LoginFragment;
-import com.facebook.login.LoginManager;
-import com.facebook.share.DeviceShareDialog;
 import com.facebook.share.internal.DeviceShareDialogFragment;
 import com.facebook.share.model.ShareContent;
 
@@ -55,25 +52,39 @@
 
     public static String PASS_THROUGH_CANCEL_ACTION = "PassThrough";
     private static String FRAGMENT_TAG = "SingleFragment";
-    private static final int API_EC_DIALOG_CANCEL = 4201;
+    private static final String TAG = FacebookActivity.class.getName();
 
     private Fragment singleFragment;
 
-    private static final String getRedirectUrl() {
-        return "fb" + FacebookSdk.getApplicationId() + "://authorize";
-    }
-
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
+        Intent intent = getIntent();
+
+        // Some apps using this sdk don't put the sdk initialize code in the application
+        // on create method. This can cause issues when opening this activity after an application
+        // has been killed since the sdk won't be initialized. Attempt to initialize the sdk
+        // here if it hasn't already been initialized.
+        if (!FacebookSdk.isInitialized()) {
+            Log.d(
+                TAG,
+                "Facebook SDK not initialized. Make sure you call sdkInitialize inside " +
+                        "your Application's onCreate method.");
+            FacebookSdk.sdkInitialize(getApplicationContext());
+        }
+
         setContentView(R.layout.com_facebook_activity_layout);
 
-        Intent intent = getIntent();
         if (PASS_THROUGH_CANCEL_ACTION.equals(intent.getAction())) {
             handlePassThroughError();
             return;
         }
 
+        singleFragment = getFragment();
+    }
+
+    protected Fragment getFragment() {
+        Intent intent = getIntent();
         FragmentManager manager = getSupportFragmentManager();
         Fragment fragment = manager.findFragmentByTag(FRAGMENT_TAG);
 
@@ -98,8 +109,7 @@ public void onCreate(Bundle savedInstanceState) {
                         .commit();
             }
         }
-
-        singleFragment = fragment;
+        return fragment;
     }
 
     @Override
@@ -111,13 +121,6 @@ public void onConfigurationChanged(Configuration newConfig) {
         }
     }
 
-    @Override
-    protected void onNewIntent(Intent intent) {
-        super.onNewIntent(intent);
-        String url = intent.getStringExtra("url");
-        handlePassThroughUrl(url);
-    }
-
     public Fragment getCurrentFragment() {
         return singleFragment;
     }
@@ -129,72 +132,11 @@ private void handlePassThroughError() {
         Bundle errorResults = NativeProtocol.getMethodArgumentsFromIntent(requestIntent);
         FacebookException exception = NativeProtocol.getExceptionFromErrorData(errorResults);
 
-        sendResult(null, exception);
-    }
-
-    private void handlePassThroughUrl(String url) {
-        if (url != null && url.startsWith(getRedirectUrl())) {
-            Uri uri = Uri.parse(url);
-            Bundle values = Utility.parseUrlQueryString(uri.getQuery());
-            values.putAll(Utility.parseUrlQueryString(uri.getFragment()));
-
-            if (!(singleFragment instanceof LoginFragment)
-                    || !((LoginFragment) singleFragment).validateChallengeParam(values)) {
-                sendResult(null, new FacebookException("Invalid state parameter"));
-            }
-
-            String error = values.getString("error");
-            if (error == null) {
-                error = values.getString("error_type");
-            }
-
-            String errorMessage = values.getString("error_msg");
-            if (errorMessage == null) {
-                errorMessage = values.getString("error_message");
-            }
-            if (errorMessage == null) {
-                errorMessage = values.getString("error_description");
-            }
-            String errorCodeString = values.getString("error_code");
-            int errorCode = FacebookRequestError.INVALID_ERROR_CODE;
-            if (!Utility.isNullOrEmpty(errorCodeString)) {
-                try {
-                    errorCode = Integer.parseInt(errorCodeString);
-                } catch (NumberFormatException ex) {
-                    errorCode = FacebookRequestError.INVALID_ERROR_CODE;
-                }
-            }
-
-            if (Utility.isNullOrEmpty(error) && Utility.isNullOrEmpty(errorMessage)
-                    && errorCode == FacebookRequestError.INVALID_ERROR_CODE) {
-                sendResult(values, null);
-            } else if (error != null && (error.equals("access_denied") ||
-                    error.equals("OAuthAccessDeniedException"))) {
-                sendResult(null, new FacebookOperationCanceledException());
-            } else if (errorCode == API_EC_DIALOG_CANCEL) {
-                sendResult(null, new FacebookOperationCanceledException());
-            } else {
-                FacebookRequestError requestError =
-                        new FacebookRequestError(errorCode, error, errorMessage);
-                sendResult(null, new FacebookServiceException(requestError, errorMessage));
-            }
-        }
-    }
-
-    public void sendResult(Bundle results, FacebookException error) {
-        int resultCode;
-        Intent resultIntent = getIntent();
-        if (error == null) {
-            resultCode = RESULT_OK;
-            LoginManager.setSuccessResult(resultIntent, results);
-        } else {
-            resultCode = RESULT_CANCELED;
-            resultIntent = NativeProtocol.createProtocolResultIntent(
-                    resultIntent,
-                    results,
-                    error);
-        }
-        setResult(resultCode, resultIntent);
+        Intent resultIntent = NativeProtocol.createProtocolResultIntent(
+                getIntent(),
+                null,
+                exception);
+        setResult(RESULT_CANCELED, resultIntent);
         finish();
     }
 }
diff --git a/facebook/src/main/java/com/facebook/FacebookButtonBase.java b/facebook/src/main/java/com/facebook/FacebookButtonBase.java
index fedb3a94f..0192206cd 100644
--- a/facebook/src/main/java/com/facebook/FacebookButtonBase.java
+++ b/facebook/src/main/java/com/facebook/FacebookButtonBase.java
@@ -26,8 +26,6 @@
 import android.content.ContextWrapper;
 import android.content.res.TypedArray;
 import android.graphics.Canvas;
-import android.graphics.Color;
-import android.graphics.Paint;
 import android.graphics.Typeface;
 import android.support.v4.app.Fragment;
 import android.support.v4.content.ContextCompat;
@@ -36,10 +34,7 @@
 import android.view.Gravity;
 import android.view.View;
 import android.widget.Button;
-import android.util.Log;
-import com.facebook.FacebookException;
-import com.facebook.FacebookSdk;
-import com.facebook.R;
+
 import com.facebook.appevents.AppEventsLogger;
 import com.facebook.internal.FragmentWrapper;
 
@@ -297,6 +292,7 @@ private void parseCompoundDrawableAttributes(
         }
     }
 
+    @SuppressWarnings("ResourceType")
     private void parseContentAttributes(
             final Context context,
             final AttributeSet attrs,
@@ -324,6 +320,7 @@ private void parseContentAttributes(
         }
     }
 
+    @SuppressWarnings("ResourceType")
     private void parseTextAttributes(
             final Context context,
             final AttributeSet attrs,
diff --git a/facebook/src/main/java/com/facebook/FacebookRequestError.java b/facebook/src/main/java/com/facebook/FacebookRequestError.java
index 562ac169b..c71508501 100644
--- a/facebook/src/main/java/com/facebook/FacebookRequestError.java
+++ b/facebook/src/main/java/com/facebook/FacebookRequestError.java
@@ -24,6 +24,8 @@
 import android.os.Parcelable;
 
 import com.facebook.internal.FacebookRequestErrorClassification;
+import com.facebook.internal.FetchedAppSettings;
+import com.facebook.internal.FetchedAppSettingsManager;
 import com.facebook.internal.Utility;
 
 import org.json.JSONException;
@@ -426,8 +428,8 @@ static FacebookRequestError checkResponseAndCreateError(
 
     static synchronized FacebookRequestErrorClassification getErrorClassification() {
         FacebookRequestErrorClassification errorClassification;
-        Utility.FetchedAppSettings appSettings =
-                Utility.getAppSettingsWithoutQuery(FacebookSdk.getApplicationId());
+        FetchedAppSettings appSettings =
+                FetchedAppSettingsManager.getAppSettingsWithoutQuery(FacebookSdk.getApplicationId());
         if (appSettings == null) {
             return FacebookRequestErrorClassification.getDefaultErrorClassification();
         }
diff --git a/facebook/src/main/java/com/facebook/FacebookSdk.java b/facebook/src/main/java/com/facebook/FacebookSdk.java
index 8aa67263f..d443635fb 100644
--- a/facebook/src/main/java/com/facebook/FacebookSdk.java
+++ b/facebook/src/main/java/com/facebook/FacebookSdk.java
@@ -20,6 +20,7 @@
 
 package com.facebook;
 
+import android.app.Application;
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.content.pm.ApplicationInfo;
@@ -32,13 +33,14 @@
 
 import com.facebook.appevents.AppEventsLogger;
 import com.facebook.internal.AppEventsLoggerUtility;
+import com.facebook.internal.FetchedAppSettingsManager;
 import com.facebook.internal.LockOnGetVariable;
 import com.facebook.internal.BoltsMeasurementEventListener;
 import com.facebook.internal.AttributionIdentifiers;
 import com.facebook.internal.NativeProtocol;
+import com.facebook.internal.ServerProtocol;
 import com.facebook.internal.Utility;
 import com.facebook.internal.Validate;
-import com.facebook.internal.WebDialog;
 
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -62,12 +64,14 @@
     private static final String TAG = FacebookSdk.class.getCanonicalName();
     private static final HashSet<LoggingBehavior> loggingBehaviors =
             new HashSet<LoggingBehavior>(Arrays.asList(LoggingBehavior.DEVELOPER_ERRORS));
+    private static final int DEFAULT_CALLBACK_REQUEST_CODE_OFFSET = 0xface;
+
     private static volatile Executor executor;
     private static volatile String applicationId;
     private static volatile String applicationName;
     private static volatile String appClientToken;
     private static volatile int webDialogTheme;
-    //TODO 10636734: revert intern
+    private static volatile Boolean autoLogAppEventsEnabled;
     private static final String FACEBOOK_COM = "facebook.com";
     private static volatile String facebookDomain = FACEBOOK_COM;
     private static AtomicLong onProgressThreshold = new AtomicLong(65536);
@@ -78,8 +82,10 @@
     private static final int DEFAULT_CORE_POOL_SIZE = 5;
     private static final int DEFAULT_MAXIMUM_POOL_SIZE = 128;
     private static final int DEFAULT_KEEP_ALIVE = 1;
-    private static int callbackRequestCodeOffset = 0xface;
+    private static int callbackRequestCodeOffset = DEFAULT_CALLBACK_REQUEST_CODE_OFFSET;
     private static final Object LOCK = new Object();
+    private static final int DEFAULT_THEME = R.style.com_facebook_activity_theme;
+    private static String graphApiVersion = ServerProtocol.getDefaultAPIVersion();
 
     private static final int MAX_REQUEST_CODE_RANGE = 100;
 
@@ -98,7 +104,8 @@ public Thread newThread(Runnable runnable) {
     };
 
     static final String CALLBACK_OFFSET_CHANGED_AFTER_INIT =
-            "The callback request code offset can't be updated once the SDK is initialized.";
+            "The callback request code offset can't be updated once the SDK is initialized. " +
+            "Call FacebookSdk.setCallbackRequestCodeOffset inside your Application.onCreate method";
 
     static final String CALLBACK_OFFSET_NEGATIVE =
             "The callback request code offset can't be negative.";
@@ -124,17 +131,41 @@ public Thread newThread(Runnable runnable) {
      */
     public static final String WEB_DIALOG_THEME = "com.facebook.sdk.WebDialogTheme";
 
+    /**
+     * The key for the auto logging app events in the Android manifest.
+     */
+    public static final String AUTO_LOG_APP_EVENTS_ENABLED_PROPERTY =
+            "com.facebook.sdk.AutoLogAppEventsEnabled";
+
+    /**
+     * The key for the callback off set in the Android manifest.
+     */
+    public static final String CALLBACK_OFFSET_PROPERTY = "com.facebook.sdk.CallbackOffset";
+
     private static Boolean sdkInitialized = false;
 
     /**
-     * This function initializes the Facebook SDK, the behavior of Facebook SDK functions are
-     * undetermined if this function is not called. It should be called as early as possible.
+     * This function initializes the Facebook SDK. This function is called automatically on app
+     * start up if the proper entries are listed in the AndroidManifest, such as the facebook
+     * app id. This method can bee called manually if needed.
+     * The behavior of Facebook SDK functions are undetermined if this function is not called.
+     * It should be called as early as possible.
+     * As part of SDK initialization basic auto logging of app events will occur, this can be
+     * controlled via 'com.facebook.sdk.AutoLogAppEventsEnabled' manifest setting
      * @param applicationContext The application context
      * @param callbackRequestCodeOffset The request code offset that Facebook activities will be
      *                                  called with. Please do not use the range between the
      *                                  value you set and another 100 entries after it in your
      *                                  other requests.
-     */
+     * @Deprecated {@link #sdkInitialize(Context)} and
+     * {@link AppEventsLogger#activateApp(Application)} are called automatically on application
+     * start. Automatic event logging from 'activateApp' can be controlled via the
+     * 'com.facebook.sdk.AutoLogAppEventsEnabled' manifest setting. The callbackRequestCodeOffset
+     * can be set in the AndroidManifest as a meta data entry with the name
+     * {@link #CALLBACK_OFFSET_PROPERTY}.
+     */
+    @Deprecated
+    @SuppressWarnings("deprecation")
     public static synchronized void sdkInitialize(
             Context applicationContext,
             int callbackRequestCodeOffset) {
@@ -142,8 +173,13 @@ public static synchronized void sdkInitialize(
     }
 
     /**
-     * This function initializes the Facebook SDK, the behavior of Facebook SDK functions are
-     * undetermined if this function is not called. It should be called as early as possible.
+     * This function initializes the Facebook SDK. This function is called automatically on app
+     * start up if the proper entries are listed in the AndroidManifest, such as the facebook
+     * app id. This method can bee called manually if needed.
+     * The behavior of Facebook SDK functions are undetermined if this function is not called.
+     * It should be called as early as possible.
+     * As part of SDK initialization basic auto logging of app events will occur, this can be
+     * controlled via 'com.facebook.sdk.AutoLogAppEventsEnabled' manifest setting
      * @param applicationContext The application context
      * @param callbackRequestCodeOffset The request code offset that Facebook activities will be
      *                                  called with. Please do not use the range between the
@@ -151,7 +187,15 @@ public static synchronized void sdkInitialize(
      *                                  other requests.
      * @param callback A callback called when initialize finishes. This will be called even if the
      *                 sdk is already initialized.
-     */
+     * @Deprecated {@link #sdkInitialize(Context)} and
+     * {@link AppEventsLogger#activateApp(Application)} are called automatically on application
+     * start. Automatic event logging from 'activateApp' can be controlled via the
+     * 'com.facebook.sdk.AutoLogAppEventsEnabled' manifest setting. The callbackRequestCodeOffset
+     * can be set in the AndroidManifest as a meta data entry with the name
+     * {@link #CALLBACK_OFFSET_PROPERTY}.
+     */
+    @Deprecated
+    @SuppressWarnings("deprecation")
     public static synchronized void sdkInitialize(
             Context applicationContext,
             int callbackRequestCodeOffset,
@@ -162,28 +206,50 @@ public static synchronized void sdkInitialize(
         if (callbackRequestCodeOffset < 0) {
             throw new FacebookException(CALLBACK_OFFSET_NEGATIVE);
         }
+
         FacebookSdk.callbackRequestCodeOffset = callbackRequestCodeOffset;
         sdkInitialize(applicationContext, callback);
     }
 
     /**
-     * This function initializes the Facebook SDK, the behavior of Facebook SDK functions are
-     * undetermined if this function is not called. It should be called as early as possible.
+     * This function initializes the Facebook SDK. This function is called automatically on app
+     * start up if the proper entries are listed in the AndroidManifest, such as the facebook
+     * app id. This method can bee called manually if needed.
+     * The behavior of Facebook SDK functions are undetermined if this function is not called.
+     * It should be called as early as possible.
+     * As part of SDK initialization basic auto logging of app events will occur, this can be
+     * controlled via 'com.facebook.sdk.AutoLogAppEventsEnabled' manifest setting
      * @param applicationContext The application context
+     * @Deprecated {@link #sdkInitialize(Context)} and
+     * {@link AppEventsLogger#activateApp(Application)} are called automatically on application
+     * start. Automatic event logging from 'activateApp' can be controlled via the
+     * 'com.facebook.sdk.AutoLogAppEventsEnabled' manifest setting.
      */
+    @Deprecated
+    @SuppressWarnings("deprecation")
     public static synchronized void sdkInitialize(Context applicationContext) {
         FacebookSdk.sdkInitialize(applicationContext, null);
     }
 
     /**
-     * This function initializes the Facebook SDK, the behavior of Facebook SDK functions are
-     * undetermined if this function is not called. It should be called as early as possible.
+     * This function initializes the Facebook SDK. This function is called automatically on app
+     * start up if the proper entries are listed in the AndroidManifest, such as the facebook
+     * app id. This method can bee called manually if needed.
+     * The behavior of Facebook SDK functions are undetermined if this function is not called.
+     * It should be called as early as possible.
+     * As part of SDK initialization basic auto logging of app events will occur, this can be
+     * controlled via 'com.facebook.sdk.AutoLogAppEventsEnabled' manifest setting
      * @param applicationContext The application context
      * @param callback A callback called when initialize finishes. This will be called even if the
      *                 sdk is already initialized.
+     * @Deprecated {@link #sdkInitialize(Context)} and
+     * {@link AppEventsLogger#activateApp(Application)} are called automatically on application
+     * start. Automatic event logging from 'activateApp' can be controlled via the
+     * 'com.facebook.sdk.AutoLogAppEventsEnabled' manifest setting.
      */
+    @Deprecated
     public static synchronized void sdkInitialize(
-            Context applicationContext,
+            final Context applicationContext,
             final InitializeCallback callback) {
         if (sdkInitialized) {
             if (callback != null) {
@@ -204,12 +270,19 @@ public static synchronized void sdkInitialize(
         // Make sure we've loaded default settings if we haven't already.
         FacebookSdk.loadDefaultsFromMetadata(FacebookSdk.applicationContext);
 
+        // We should have an application id by now if not throw
+        if (Utility.isNullOrEmpty(applicationId)) {
+            throw new FacebookException("A valid Facebook app id must be set in the " +
+                    "AndroidManifest.xml or set by calling FacebookSdk.setApplicationId " +
+                    "before initializing the sdk.");
+        }
+
         // Set sdkInitialized to true now so the bellow async tasks don't throw not initialized
         // exceptions.
         sdkInitialized = true;
 
         // Load app settings from network so that dialog configs are available
-        Utility.loadAppSettingsAsync(FacebookSdk.applicationContext, applicationId);
+        FetchedAppSettingsManager.loadAppSettingsAsync();
         // Fetch available protocol versions from the apps on the device
         NativeProtocol.updateAllAvailableProtocolVersionsAsync();
 
@@ -223,8 +296,8 @@ public File call() throws Exception {
                     }
                 });
 
-        FutureTask<Void> accessTokenLoadFutureTask =
-                new FutureTask<Void>(new Callable<Void>() {
+        FutureTask<Void> futureTask =
+                new FutureTask<>(new Callable<Void>() {
                     @Override
                     public Void call() throws Exception {
                         AccessTokenManager.getInstance().loadCurrentAccessToken();
@@ -239,10 +312,15 @@ public Void call() throws Exception {
                         if (callback != null) {
                             callback.onInitialized();
                         }
+
+                        // Flush any app events that might have been persisted during last run.
+                        AppEventsLogger.newLogger(
+                                applicationContext.getApplicationContext()).flush();
+
                         return null;
                     }
                 });
-        getExecutor().execute(accessTokenLoadFutureTask);
+        getExecutor().execute(futureTask);
     }
 
     /**
@@ -429,6 +507,29 @@ public static Context getApplicationContext() {
         return applicationContext;
     }
 
+    /**
+     * Sets the Graph API version to use when making Graph requests. This defaults to the latest
+     * Graph API version at the time when the Facebook SDK is shipped.
+     *
+     * @param graphApiVersion the Graph API version, it should be of the form "v2.7"
+     */
+    public static void setGraphApiVersion(String graphApiVersion) {
+        if (!Utility.isNullOrEmpty(graphApiVersion) &&
+                !FacebookSdk.graphApiVersion.equals(graphApiVersion)) {
+            FacebookSdk.graphApiVersion = graphApiVersion;
+        }
+    }
+
+    /**
+     * Returns the Graph API version to use when making Graph requests. This defaults to the latest
+     * Graph API version at the time when the Facebook SDK is shipped.
+     *
+     * @return the Graph API version to use.
+     */
+    public static String getGraphApiVersion() {
+        return graphApiVersion;
+    }
+
     /**
      * This method is public in order to be used by app events, please don't use directly.
      * @param context       The application context.
@@ -622,6 +723,18 @@ static void loadDefaultsFromMetadata(Context context) {
         if (webDialogTheme == 0) {
             setWebDialogTheme(ai.metaData.getInt(WEB_DIALOG_THEME));
         }
+
+        if (callbackRequestCodeOffset == DEFAULT_CALLBACK_REQUEST_CODE_OFFSET) {
+            callbackRequestCodeOffset = ai.metaData.getInt(
+                    CALLBACK_OFFSET_PROPERTY,
+                    DEFAULT_CALLBACK_REQUEST_CODE_OFFSET);
+        }
+
+        if (autoLogAppEventsEnabled == null) {
+            autoLogAppEventsEnabled = ai.metaData.getBoolean(
+                AUTO_LOG_APP_EVENTS_ENABLED_PROPERTY,
+                true);
+        }
     }
 
     /**
@@ -733,7 +846,25 @@ public static int getWebDialogTheme() {
      * @param theme A theme to use
      */
     public static void setWebDialogTheme(int theme) {
-        webDialogTheme = (theme != 0) ? theme : WebDialog.DEFAULT_THEME;
+        webDialogTheme = (theme != 0) ? theme : DEFAULT_THEME;
+    }
+
+    /**
+     * Gets the flag used by {@link com.facebook.appevents.AppEventsLogger}
+     * @return the auto logging events flag for the application
+     */
+    public static boolean getAutoLogAppEventsEnabled() {
+        Validate.sdkInitialized();
+        return autoLogAppEventsEnabled;
+    }
+
+    /**
+     * Sets the auto logging events flag for the application
+     * {@link com.facebook.appevents.AppEventsLogger}
+     * @param flag true or false
+     */
+    public static void setAutoLogAppEventsEnabled(boolean flag) {
+        autoLogAppEventsEnabled = flag;
     }
 
     /**
diff --git a/facebook/src/main/java/com/facebook/FacebookSdkVersion.java b/facebook/src/main/java/com/facebook/FacebookSdkVersion.java
index 855771232..d93f3d98b 100644
--- a/facebook/src/main/java/com/facebook/FacebookSdkVersion.java
+++ b/facebook/src/main/java/com/facebook/FacebookSdkVersion.java
@@ -21,5 +21,5 @@
 package com.facebook;
 
 final class FacebookSdkVersion {
-    public static final String BUILD = "4.11.0";
+    public static final String BUILD = "4.19.0";
 }
diff --git a/facebook/src/main/java/com/facebook/GraphRequest.java b/facebook/src/main/java/com/facebook/GraphRequest.java
index d0f0e64e1..5368774e7 100644
--- a/facebook/src/main/java/com/facebook/GraphRequest.java
+++ b/facebook/src/main/java/com/facebook/GraphRequest.java
@@ -257,7 +257,7 @@ public GraphRequest(
         }
 
         if (this.version == null) {
-            this.version = ServerProtocol.getAPIVersion();
+            this.version = FacebookSdk.getGraphApiVersion();
         }
     }
 
@@ -542,6 +542,10 @@ public static GraphRequest newUploadPhotoRequest(
         }
         parameters.putParcelable(PICTURE_PARAM, photoUri);
 
+        if (caption != null && !caption.isEmpty()) {
+            parameters.putString(CAPTION_PARAM, caption);
+        }
+
         return new GraphRequest(accessToken, graphPath, parameters, HttpMethod.POST, callback);
     }
 
@@ -1442,7 +1446,7 @@ private void addCommonParameters() {
     }
 
     private String appendParametersToBaseUrl(String baseUrl) {
-        Uri.Builder uriBuilder = new Uri.Builder().encodedPath(baseUrl);
+        Uri.Builder uriBuilder = Uri.parse(baseUrl).buildUpon();
 
         Set<String> keys = this.parameters.keySet();
         for (String key : keys) {
@@ -1471,14 +1475,18 @@ private String appendParametersToBaseUrl(String baseUrl) {
         return uriBuilder.toString();
     }
 
-    final String getUrlForBatchedRequest() {
+    final String getRelativeUrlForBatchedRequest() {
         if (overriddenURL != null) {
             throw new FacebookException("Can't override URL for a batch request");
         }
 
-        String baseUrl = getGraphPathWithVersion();
+        String baseUrl =
+                String.format("%s/%s", ServerProtocol.getGraphUrlBase(), getGraphPathWithVersion());
         addCommonParameters();
-        return appendParametersToBaseUrl(baseUrl);
+        String fullUrl = appendParametersToBaseUrl(baseUrl);
+        Uri uri = Uri.parse(fullUrl);
+        String relativeUrl = String.format("%s?%s", uri.getPath(), uri.getQuery());
+        return relativeUrl;
     }
 
     final String getUrlForSingleRequest() {
@@ -1542,7 +1550,7 @@ private void serializeToBatch(
             batchEntry.put(BATCH_ENTRY_DEPENDS_ON_PARAM, this.batchEntryDependsOn);
         }
 
-        String relativeURL = getUrlForBatchedRequest();
+        String relativeURL = getRelativeUrlForBatchedRequest();
         batchEntry.put(BATCH_RELATIVE_URL_PARAM, relativeURL);
         batchEntry.put(BATCH_METHOD_PARAM, httpMethod);
         if (this.accessToken != null) {
diff --git a/facebook/src/main/java/com/facebook/GraphResponse.java b/facebook/src/main/java/com/facebook/GraphResponse.java
index 9793e03b5..f7de20e11 100644
--- a/facebook/src/main/java/com/facebook/GraphResponse.java
+++ b/facebook/src/main/java/com/facebook/GraphResponse.java
@@ -264,21 +264,11 @@ public String toString() {
                     "Response <Error>: %s",
                     facebookException);
             return constructErrorResponses(requests, connection, facebookException);
-        } catch (JSONException exception) {
-            Logger.log(
-                    LoggingBehavior.REQUESTS,
-                    RESPONSE_LOG_TAG,
-                    "Response <Error>: %s",
-                    exception);
-            return constructErrorResponses(requests, connection, new FacebookException(exception));
-        } catch (IOException exception) {
-            Logger.log(
-                    LoggingBehavior.REQUESTS,
-                    RESPONSE_LOG_TAG,
-                    "Response <Error>: %s",
-                    exception);
-            return constructErrorResponses(requests, connection, new FacebookException(exception));
-        } catch (SecurityException exception) {
+        } catch (Exception exception) {
+            // Note due to bugs various android devices some devices can throw a
+            // SecurityException or NoSuchAlgorithmException. Make sure to handle these
+            // exceptions here.
+
             Logger.log(
                     LoggingBehavior.REQUESTS,
                     RESPONSE_LOG_TAG,
@@ -369,8 +359,7 @@ public String toString() {
         }
 
         if (!(object instanceof JSONArray) || ((JSONArray) object).length() != numRequests) {
-            FacebookException exception = new FacebookException("Unexpected number of results");
-            throw exception;
+            throw new FacebookException("Unexpected number of results");
         }
 
         JSONArray jsonArray = (JSONArray) object;
diff --git a/facebook/src/main/java/com/facebook/Profile.java b/facebook/src/main/java/com/facebook/Profile.java
index 919ba1686..22488c669 100644
--- a/facebook/src/main/java/com/facebook/Profile.java
+++ b/facebook/src/main/java/com/facebook/Profile.java
@@ -21,7 +21,6 @@
 package com.facebook;
 
 import android.net.Uri;
-import android.os.Bundle;
 import android.os.Parcel;
 import android.os.Parcelable;
 import android.support.annotation.Nullable;
diff --git a/facebook/src/main/java/com/facebook/appevents/AccessTokenAppIdPair.java b/facebook/src/main/java/com/facebook/appevents/AccessTokenAppIdPair.java
new file mode 100644
index 000000000..5888b96ed
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/AccessTokenAppIdPair.java
@@ -0,0 +1,87 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import com.facebook.AccessToken;
+import com.facebook.FacebookSdk;
+import com.facebook.internal.Utility;
+
+import java.io.Serializable;
+
+class AccessTokenAppIdPair implements Serializable {
+    private static final long serialVersionUID = 1L;
+    private final String accessTokenString;
+    private final String applicationId;
+
+    public AccessTokenAppIdPair(AccessToken accessToken) {
+        this(accessToken.getToken(), FacebookSdk.getApplicationId());
+    }
+
+    public AccessTokenAppIdPair(String accessTokenString, String applicationId) {
+        this.accessTokenString = Utility.isNullOrEmpty(accessTokenString)
+                ? null
+                : accessTokenString;
+        this.applicationId = applicationId;
+    }
+
+    public String getAccessTokenString() {
+        return accessTokenString;
+    }
+
+    public String getApplicationId() {
+        return applicationId;
+    }
+
+    @Override
+    public int hashCode() {
+        return (accessTokenString == null ? 0 : accessTokenString.hashCode()) ^
+                (applicationId == null ? 0 : applicationId.hashCode());
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (!(o instanceof AccessTokenAppIdPair)) {
+            return false;
+        }
+        AccessTokenAppIdPair p = (AccessTokenAppIdPair) o;
+        return Utility.areObjectsEqual(p.accessTokenString, accessTokenString) &&
+                Utility.areObjectsEqual(p.applicationId, applicationId);
+    }
+
+    static class SerializationProxyV1 implements Serializable {
+        private static final long serialVersionUID = -2488473066578201069L;
+        private final String accessTokenString;
+        private final String appId;
+
+        private SerializationProxyV1(String accessTokenString, String appId) {
+            this.accessTokenString = accessTokenString;
+            this.appId = appId;
+        }
+
+        private Object readResolve() {
+            return new AccessTokenAppIdPair(accessTokenString, appId);
+        }
+    }
+
+    private Object writeReplace() {
+        return new SerializationProxyV1(accessTokenString, applicationId);
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/AnalyticsUserIDStore.java b/facebook/src/main/java/com/facebook/appevents/AnalyticsUserIDStore.java
new file mode 100644
index 000000000..960ab1c76
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/AnalyticsUserIDStore.java
@@ -0,0 +1,113 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import android.content.SharedPreferences;
+import android.preference.PreferenceManager;
+import android.util.Log;
+
+import com.facebook.FacebookSdk;
+import com.facebook.appevents.internal.AppEventUtility;
+
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+
+class AnalyticsUserIDStore {
+    private static final String TAG = AnalyticsUserIDStore.class.getSimpleName();
+    private static final String ANALYTICS_USER_ID_KEY =
+            "com.facebook.appevents.AnalyticsUserIDStore.userID";
+
+    private static ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
+    private static String userID;
+    private static volatile boolean initialized = false;
+
+    public static void initStore() {
+        if (initialized) {
+            return;
+        }
+
+        AppEventsLogger.getAnalyticsExecutor().execute(new Runnable() {
+            @Override
+            public void run() {
+                initAndWait();
+            }
+        });
+    }
+
+    public static void setUserID(final String id) {
+        AppEventUtility.assertIsNotMainThread();
+        if (!initialized) {
+            Log.w(TAG, "initStore should have been called before calling setUserID");
+            initAndWait();
+        }
+
+        AppEventsLogger.getAnalyticsExecutor().execute(new Runnable() {
+            @Override
+            public void run() {
+                lock.writeLock().lock();
+                try {
+                    userID = id;
+                    SharedPreferences sharedPreferences = PreferenceManager
+                            .getDefaultSharedPreferences(
+                                    FacebookSdk.getApplicationContext());
+                    SharedPreferences.Editor editor = sharedPreferences.edit();
+                    editor.putString(ANALYTICS_USER_ID_KEY, userID);
+                    editor.apply();
+                } finally {
+                    lock.writeLock().unlock();
+                }
+            }
+        });
+    }
+
+    public static String getUserID() {
+        if (!initialized) {
+            Log.w(TAG, "initStore should have been called before calling setUserID");
+            initAndWait();
+        }
+
+        lock.readLock().lock();
+        try {
+            return userID;
+        } finally {
+            lock.readLock().unlock();
+        }
+    }
+
+    private static void initAndWait() {
+        if (initialized) {
+            return;
+        }
+
+        lock.writeLock().lock();
+        try {
+            if (initialized) {
+                return;
+            }
+
+            SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(
+                    FacebookSdk.getApplicationContext());
+            userID = sharedPreferences.getString(ANALYTICS_USER_ID_KEY, null);
+            initialized = true;
+        } finally {
+            lock.writeLock().unlock();
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEvent.java b/facebook/src/main/java/com/facebook/appevents/AppEvent.java
new file mode 100644
index 000000000..af8ffd51b
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/AppEvent.java
@@ -0,0 +1,291 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+
+import com.facebook.FacebookException;
+import com.facebook.LoggingBehavior;
+import com.facebook.appevents.internal.Constants;
+import com.facebook.internal.Logger;
+import com.facebook.internal.Utility;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.Serializable;
+import java.io.UnsupportedEncodingException;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.util.HashSet;
+import java.util.Locale;
+import java.util.UUID;
+
+class AppEvent implements Serializable {
+    private static final long serialVersionUID = 1L;
+
+    private static final HashSet<String> validatedIdentifiers = new HashSet<String>();
+
+    private final JSONObject jsonObject;
+    private final boolean isImplicit;
+    private final String name;
+    private final String checksum;
+
+    public AppEvent(
+            String contextName,
+            String eventName,
+            Double valueToSum,
+            Bundle parameters,
+            boolean isImplicitlyLogged,
+            @Nullable final UUID currentSessionId
+    ) throws JSONException, FacebookException {
+        jsonObject = getJSONObjectForAppEvent(
+                contextName,
+                eventName,
+                valueToSum,
+                parameters,
+                isImplicitlyLogged,
+                currentSessionId);
+        isImplicit = isImplicitlyLogged;
+        name = eventName;
+        checksum = calculateChecksum();
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    private AppEvent(
+            String jsonString,
+            boolean isImplicit,
+            String checksum) throws JSONException {
+        jsonObject = new JSONObject(jsonString);
+        this.isImplicit = isImplicit;
+        this.name = jsonObject.optString(Constants.EVENT_NAME_EVENT_KEY);
+        this.checksum = checksum;
+    }
+
+    public boolean getIsImplicit() {
+        return isImplicit;
+    }
+
+    public JSONObject getJSONObject() {
+        return jsonObject;
+    }
+
+    public boolean isChecksumValid() {
+        if (this.checksum == null) {
+            // for old events we don't have a checksum
+            return true;
+        }
+
+        return calculateChecksum().equals(checksum);
+    }
+
+    // throw exception if not valid.
+    private static void validateIdentifier(String identifier) throws FacebookException {
+
+        // Identifier should be 40 chars or less, and only have 0-9A-Za-z, underscore, hyphen,
+        // and space (but no hyphen or space in the first position).
+        final String regex = "^[0-9a-zA-Z_]+[0-9a-zA-Z _-]*$";
+
+        final int MAX_IDENTIFIER_LENGTH = 40;
+        if (identifier == null
+                || identifier.length() == 0
+                || identifier.length() > MAX_IDENTIFIER_LENGTH) {
+            if (identifier == null) {
+                identifier = "<None Provided>";
+            }
+            throw new FacebookException(
+                    String.format(
+                            Locale.ROOT,
+                            "Identifier '%s' must be less than %d characters",
+                            identifier,
+                            MAX_IDENTIFIER_LENGTH)
+            );
+        }
+
+        boolean alreadyValidated;
+        synchronized (validatedIdentifiers) {
+            alreadyValidated = validatedIdentifiers.contains(identifier);
+        }
+
+        if (!alreadyValidated) {
+            if (identifier.matches(regex)) {
+                synchronized (validatedIdentifiers) {
+                    validatedIdentifiers.add(identifier);
+                }
+            } else {
+                throw new FacebookException(
+                        String.format(
+                                "Skipping event named '%s' due to illegal name - must be " +
+                                        "under 40 chars and alphanumeric, _, - or space, and " +
+                                        "not start with a space or hyphen.",
+                                identifier
+                        )
+                );
+            }
+        }
+    }
+
+    private static JSONObject getJSONObjectForAppEvent(
+            String contextName,
+            String eventName,
+            Double valueToSum,
+            Bundle parameters,
+            boolean isImplicitlyLogged,
+            @Nullable final UUID currentSessionId
+    ) throws FacebookException, JSONException{
+        validateIdentifier(eventName);
+
+        JSONObject eventObject = new JSONObject();
+
+        eventObject.put(Constants.EVENT_NAME_EVENT_KEY, eventName);
+        eventObject.put(Constants.LOG_TIME_APP_EVENT_KEY, System.currentTimeMillis() / 1000);
+        eventObject.put("_ui", contextName);
+        if (currentSessionId != null) {
+            eventObject.put("_session_id", currentSessionId);
+        }
+
+        if (valueToSum != null) {
+            eventObject.put("_valueToSum", valueToSum.doubleValue());
+        }
+
+        if (isImplicitlyLogged) {
+            eventObject.put("_implicitlyLogged", "1");
+        }
+
+        String externalAnalyticsUserId = AppEventsLogger.getUserID();
+        if (externalAnalyticsUserId != null) {
+            eventObject.put("_app_user_id", externalAnalyticsUserId);
+        }
+
+        if (parameters != null) {
+            for (String key : parameters.keySet()) {
+
+                validateIdentifier(key);
+
+                Object value = parameters.get(key);
+                if (!(value instanceof String) && !(value instanceof Number)) {
+                    throw new FacebookException(
+                            String.format(
+                                    "Parameter value '%s' for key '%s' should be a string" +
+                                            " or a numeric type.",
+                                    value,
+                                    key)
+                    );
+                }
+
+                eventObject.put(key, value.toString());
+            }
+        }
+
+        if (!isImplicitlyLogged) {
+            Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
+                    "Created app event '%s'", eventObject.toString());
+        }
+
+        return eventObject;
+    }
+
+    // OLD VERSION DO NOT USE
+    static class SerializationProxyV1 implements Serializable {
+        private static final long serialVersionUID = -2488473066578201069L;
+        private final String jsonString;
+        private final boolean isImplicit;
+
+        private SerializationProxyV1(String jsonString, boolean isImplicit) {
+            this.jsonString = jsonString;
+            this.isImplicit = isImplicit;
+        }
+
+        private Object readResolve() throws JSONException {
+            return new AppEvent(jsonString, isImplicit, null);
+        }
+    }
+
+    static class SerializationProxyV2 implements Serializable {
+        private static final long serialVersionUID = 2016_08_03_001L;
+        private final String jsonString;
+        private final boolean isImplicit;
+        private final String checksum;
+
+        private SerializationProxyV2(String jsonString, boolean isImplicit, String checksum) {
+            this.jsonString = jsonString;
+            this.isImplicit = isImplicit;
+            this.checksum = checksum;
+        }
+
+        private Object readResolve() throws JSONException {
+            return new AppEvent(jsonString, isImplicit, checksum);
+        }
+    }
+
+    private Object writeReplace() {
+        return new SerializationProxyV2(jsonObject.toString(), isImplicit, checksum);
+    }
+
+    @Override
+    public String toString() {
+        return String.format(
+                "\"%s\", implicit: %b, json: %s",
+                jsonObject.optString("_eventName"),
+                isImplicit,
+                jsonObject.toString());
+    }
+
+    private String calculateChecksum() {
+        return md5Checksum(jsonObject.toString());
+    }
+
+    private static String md5Checksum(String toHash )
+    {
+        String hash;
+        try
+        {
+            MessageDigest digest = MessageDigest.getInstance("MD5");
+            byte[] bytes = toHash.getBytes("UTF-8");
+            digest.update(bytes, 0, bytes.length);
+            bytes = digest.digest();
+            hash = bytesToHex( bytes );
+        }
+        catch(NoSuchAlgorithmException e )
+        {
+            Utility.logd("Failed to generate checksum: ", e);
+            return "0";
+        }
+        catch(UnsupportedEncodingException e )
+        {
+            Utility.logd("Failed to generate checksum: ", e);
+            return "1";
+        }
+        return hash;
+    }
+
+    private static String bytesToHex(byte[] bytes) {
+        StringBuffer sb = new StringBuffer();
+        for (byte b : bytes) {
+            sb.append(String.format("%02x", b));
+        }
+        return sb.toString();
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventCollection.java b/facebook/src/main/java/com/facebook/appevents/AppEventCollection.java
new file mode 100644
index 000000000..8e7aa5b46
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/AppEventCollection.java
@@ -0,0 +1,93 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import android.content.Context;
+
+import com.facebook.FacebookSdk;
+import com.facebook.internal.AttributionIdentifiers;
+
+import java.util.HashMap;
+import java.util.Set;
+
+class AppEventCollection {
+    private final HashMap<AccessTokenAppIdPair, SessionEventsState> stateMap;
+
+    public AppEventCollection() {
+        stateMap = new HashMap<>();
+    }
+
+    public synchronized void addPersistedEvents(PersistedEvents persistedEvents) {
+        if (persistedEvents == null) {
+            return;
+        }
+
+        for (AccessTokenAppIdPair accessTokenAppIdPair : persistedEvents.keySet()) {
+            SessionEventsState sessionEventsState = getSessionEventsState(accessTokenAppIdPair);
+
+            for (AppEvent appEvent : persistedEvents.get(accessTokenAppIdPair)) {
+                sessionEventsState.addEvent(appEvent);
+            }
+        }
+    }
+
+    public synchronized void addEvent(
+            AccessTokenAppIdPair accessTokenAppIdPair,
+            AppEvent appEvent) {
+        SessionEventsState eventsState = getSessionEventsState(accessTokenAppIdPair);
+        eventsState.addEvent(appEvent);
+    }
+
+    public synchronized Set<AccessTokenAppIdPair> keySet() {
+        return stateMap.keySet();
+    }
+
+    public synchronized SessionEventsState get(AccessTokenAppIdPair accessTokenAppIdPair) {
+        return stateMap.get(accessTokenAppIdPair);
+    }
+
+    public synchronized int getEventCount() {
+        int count = 0;
+        for (SessionEventsState sessionEventsState : stateMap.values()) {
+            count += sessionEventsState.getAccumulatedEventCount();
+        }
+
+        return count;
+    }
+
+    private synchronized SessionEventsState getSessionEventsState(
+            AccessTokenAppIdPair accessTokenAppId) {
+        SessionEventsState eventsState = stateMap.get(accessTokenAppId);
+        if (eventsState == null) {
+            Context context = FacebookSdk.getApplicationContext();
+
+            // Retrieve attributionId, but we will only send it if attribution is supported for the
+            // app.
+            eventsState = new SessionEventsState(
+                    AttributionIdentifiers.getAttributionIdentifiers(context),
+                    AppEventsLogger.getAnonymousAppDeviceGUID(context));
+        }
+
+        stateMap.put(accessTokenAppId, eventsState);
+
+        return eventsState;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventQueue.java b/facebook/src/main/java/com/facebook/appevents/AppEventQueue.java
new file mode 100644
index 000000000..616270d99
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/AppEventQueue.java
@@ -0,0 +1,318 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v4.content.LocalBroadcastManager;
+import android.util.Log;
+
+import com.facebook.FacebookRequestError;
+import com.facebook.FacebookSdk;
+import com.facebook.GraphRequest;
+import com.facebook.GraphResponse;
+import com.facebook.LoggingBehavior;
+import com.facebook.internal.FetchedAppSettings;
+import com.facebook.internal.FetchedAppSettingsManager;
+import com.facebook.internal.Logger;
+import com.facebook.internal.Utility;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.ScheduledFuture;
+import java.util.concurrent.TimeUnit;
+
+class AppEventQueue {
+    private static final String TAG = AppEventQueue.class.getName();
+
+    private static final int NUM_LOG_EVENTS_TO_TRY_TO_FLUSH_AFTER = 100;
+    private static final int FLUSH_PERIOD_IN_SECONDS = 15;
+
+    private static volatile AppEventCollection appEventCollection = new AppEventCollection();
+    private static final ScheduledExecutorService singleThreadExecutor =
+            Executors.newSingleThreadScheduledExecutor();
+    private static ScheduledFuture scheduledFuture;
+
+    // Only call for the singleThreadExecutor
+    private static final Runnable flushRunnable = new Runnable() {
+        @Override
+        public void run() {
+            scheduledFuture = null;
+
+            if (AppEventsLogger.getFlushBehavior() !=
+                    AppEventsLogger.FlushBehavior.EXPLICIT_ONLY) {
+                flushAndWait(FlushReason.TIMER);
+            }
+        }
+    };
+
+    public static void persistToDisk() {
+        singleThreadExecutor.execute(new Runnable() {
+            @Override
+            public void run() {
+                AppEventStore.persistEvents(appEventCollection);
+                appEventCollection = new AppEventCollection();
+            }
+        });
+    }
+
+    public static void flush(
+            final FlushReason reason) {
+        singleThreadExecutor.execute(new Runnable() {
+            @Override
+            public void run() {
+                flushAndWait(reason);
+            }
+        });
+    }
+
+    public static void add(
+            final AccessTokenAppIdPair accessTokenAppId,
+            final AppEvent appEvent) {
+        singleThreadExecutor.execute(new Runnable() {
+            @Override
+            public void run() {
+                appEventCollection.addEvent(accessTokenAppId, appEvent);
+
+                if (AppEventsLogger.getFlushBehavior() !=
+                        AppEventsLogger.FlushBehavior.EXPLICIT_ONLY
+                        && appEventCollection.getEventCount() >
+                        NUM_LOG_EVENTS_TO_TRY_TO_FLUSH_AFTER) {
+                    flushAndWait(FlushReason.EVENT_THRESHOLD);
+                } else if (scheduledFuture == null) {
+                    scheduledFuture = singleThreadExecutor.schedule(
+                            flushRunnable,
+                            FLUSH_PERIOD_IN_SECONDS,
+                            TimeUnit.SECONDS
+                    );
+                }
+            }
+        });
+    }
+
+    public static Set<AccessTokenAppIdPair> getKeySet() {
+        // This is safe to call outside of the singleThreadExecutor since
+        // the appEventCollection is volatile and the modifying methods within the
+        // class are synchronized.
+        return appEventCollection.keySet();
+    }
+
+    static void flushAndWait(FlushReason reason) {
+        // Read and send any persisted events
+        PersistedEvents result = AppEventStore.readAndClearStore();
+        // Add any of the persisted app events to our list of events to send
+        appEventCollection.addPersistedEvents(result);
+
+        FlushStatistics flushResults;
+
+        try {
+            flushResults = sendEventsToServer(
+                    reason,
+                    appEventCollection);
+        } catch (Exception e) {
+            Log.w(TAG, "Caught unexpected exception while flushing app events: ", e);
+            return;
+        }
+
+        if (flushResults != null) {
+            final Intent intent = new Intent(AppEventsLogger.ACTION_APP_EVENTS_FLUSHED);
+            intent.putExtra(
+                    AppEventsLogger.APP_EVENTS_EXTRA_NUM_EVENTS_FLUSHED,
+                    flushResults.numEvents);
+            intent.putExtra(
+                    AppEventsLogger.APP_EVENTS_EXTRA_FLUSH_RESULT,
+                    flushResults.result);
+            Context context = FacebookSdk.getApplicationContext();
+            LocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+        }
+    }
+
+    private static FlushStatistics sendEventsToServer(
+            FlushReason reason,
+            AppEventCollection appEventCollection) {
+        FlushStatistics flushResults = new FlushStatistics();
+
+        Context context = FacebookSdk.getApplicationContext();
+        boolean limitEventUsage = FacebookSdk.getLimitEventAndDataUsage(context);
+
+        List<GraphRequest> requestsToExecute = new ArrayList<>();
+        for (AccessTokenAppIdPair accessTokenAppId : appEventCollection.keySet()) {
+            GraphRequest request = buildRequestForSession(
+                    accessTokenAppId,
+                    appEventCollection.get(accessTokenAppId),
+                    limitEventUsage,
+                    flushResults);
+            if (request != null) {
+                requestsToExecute.add(request);
+            }
+        }
+
+        if (requestsToExecute.size() > 0) {
+            Logger.log(LoggingBehavior.APP_EVENTS, TAG, "Flushing %d events due to %s.",
+                    flushResults.numEvents,
+                    reason.toString());
+
+            for (GraphRequest request : requestsToExecute) {
+                // Execute the request synchronously. Callbacks will take care of handling errors
+                // and updating our final overall result.
+                request.executeAndWait();
+            }
+            return flushResults;
+        }
+
+        return null;
+    }
+
+    private static GraphRequest buildRequestForSession(
+            final AccessTokenAppIdPair accessTokenAppId,
+            final SessionEventsState appEvents,
+            final boolean limitEventUsage,
+            final FlushStatistics flushState) {
+        String applicationId = accessTokenAppId.getApplicationId();
+
+        FetchedAppSettings fetchedAppSettings =
+                FetchedAppSettingsManager.queryAppSettings(applicationId, false);
+
+        final GraphRequest postRequest = GraphRequest.newPostRequest(
+                null,
+                String.format("%s/activities", applicationId),
+                null,
+                null);
+
+        Bundle requestParameters = postRequest.getParameters();
+        if (requestParameters == null) {
+            requestParameters = new Bundle();
+        }
+        requestParameters.putString("access_token", accessTokenAppId.getAccessTokenString());
+        String pushNotificationsRegistrationId =
+                AppEventsLogger.getPushNotificationsRegistrationId();
+        if (pushNotificationsRegistrationId != null) {
+            requestParameters.putString("device_token", pushNotificationsRegistrationId);
+        }
+
+        postRequest.setParameters(requestParameters);
+
+        boolean supportsImplicitLogging = false;
+
+        if (fetchedAppSettings != null) {
+            supportsImplicitLogging = fetchedAppSettings.supportsImplicitLogging();
+        }
+
+        int numEvents = appEvents.populateRequest(
+                postRequest,
+                FacebookSdk.getApplicationContext(),
+                supportsImplicitLogging,
+                limitEventUsage);
+
+        if (numEvents == 0) {
+            return null;
+        }
+
+        flushState.numEvents += numEvents;
+
+        postRequest.setCallback(new GraphRequest.Callback() {
+            @Override
+            public void onCompleted(GraphResponse response) {
+                handleResponse(
+                        accessTokenAppId,
+                        postRequest,
+                        response,
+                        appEvents,
+                        flushState);
+            }
+        });
+
+        return postRequest;
+    }
+
+    private static void handleResponse(
+            final AccessTokenAppIdPair accessTokenAppId,
+            GraphRequest request,
+            GraphResponse response,
+            final SessionEventsState appEvents,
+            FlushStatistics flushState) {
+        FacebookRequestError error = response.getError();
+        String resultDescription = "Success";
+
+        FlushResult flushResult = FlushResult.SUCCESS;
+
+        if (error != null) {
+            final int NO_CONNECTIVITY_ERROR_CODE = -1;
+            if (error.getErrorCode() == NO_CONNECTIVITY_ERROR_CODE) {
+                resultDescription = "Failed: No Connectivity";
+                flushResult = FlushResult.NO_CONNECTIVITY;
+            } else {
+                resultDescription = String.format("Failed:\n  Response: %s\n  Error %s",
+                        response.toString(),
+                        error.toString());
+                flushResult = FlushResult.SERVER_ERROR;
+            }
+        }
+
+        if (FacebookSdk.isLoggingBehaviorEnabled(LoggingBehavior.APP_EVENTS)) {
+            String eventsJsonString = (String) request.getTag();
+            String prettyPrintedEvents;
+
+            try {
+                JSONArray jsonArray = new JSONArray(eventsJsonString);
+                prettyPrintedEvents = jsonArray.toString(2);
+            } catch (JSONException exc) {
+                prettyPrintedEvents = "<Can't encode events for debug logging>";
+            }
+
+            Logger.log(LoggingBehavior.APP_EVENTS, TAG,
+                    "Flush completed\nParams: %s\n  Result: %s\n  Events JSON: %s",
+                    request.getGraphObject().toString(),
+                    resultDescription,
+                    prettyPrintedEvents);
+        }
+
+        appEvents.clearInFlightAndStats(error != null);
+
+        if (flushResult == FlushResult.NO_CONNECTIVITY) {
+            // We may call this for multiple requests in a batch, which is slightly inefficient
+            // since in principle we could call it once for all failed requests, but the impact is
+            // likely to be minimal. We don't call this for other server errors, because if an event
+            // failed because it was malformed, etc., continually retrying it will cause subsequent
+            // events to not be logged either.
+            FacebookSdk.getExecutor().execute(new Runnable() {
+                @Override
+                public void run() {
+                    AppEventStore.persistEvents(accessTokenAppId, appEvents);
+                }
+            });
+        }
+
+        if (flushResult != FlushResult.SUCCESS) {
+            // We assume that connectivity issues are more significant to report than server issues.
+            if (flushState.result != FlushResult.NO_CONNECTIVITY) {
+                flushState.result = flushResult;
+            }
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventStore.java b/facebook/src/main/java/com/facebook/appevents/AppEventStore.java
new file mode 100644
index 000000000..fb5f45ffe
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/AppEventStore.java
@@ -0,0 +1,164 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import android.content.Context;
+import android.util.Log;
+
+import com.facebook.FacebookSdk;
+import com.facebook.appevents.internal.AppEventUtility;
+import com.facebook.internal.Utility;
+
+import java.io.BufferedInputStream;
+import java.io.BufferedOutputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.io.ObjectStreamClass;
+
+class AppEventStore {
+    private static final String TAG = AppEventStore.class.getName();
+    private static final String PERSISTED_EVENTS_FILENAME = "AppEventsLogger.persistedevents";
+
+    public static synchronized void persistEvents(
+            final AccessTokenAppIdPair accessTokenAppIdPair,
+            final SessionEventsState appEvents) {
+        AppEventUtility.assertIsNotMainThread();
+        PersistedEvents persistedEvents = readAndClearStore();
+
+        if (persistedEvents.containsKey(accessTokenAppIdPair)) {
+            persistedEvents
+                    .get(accessTokenAppIdPair)
+                    .addAll(appEvents.getEventsToPersist());
+        } else {
+            persistedEvents.addEvents(accessTokenAppIdPair, appEvents.getEventsToPersist());
+        }
+
+        saveEventsToDisk(persistedEvents);
+    }
+
+    public static synchronized void persistEvents(
+            final AppEventCollection eventsToPersist) {
+        AppEventUtility.assertIsNotMainThread();
+        PersistedEvents persistedEvents = readAndClearStore();
+        for (AccessTokenAppIdPair accessTokenAppIdPair : eventsToPersist.keySet()) {
+            SessionEventsState sessionEventsState = eventsToPersist.get(
+                    accessTokenAppIdPair);
+            persistedEvents.addEvents(
+                    accessTokenAppIdPair,
+                    sessionEventsState.getEventsToPersist());
+        }
+
+        saveEventsToDisk(persistedEvents);
+    }
+
+    // Only call from singleThreadExecutor
+    public static synchronized PersistedEvents readAndClearStore() {
+        AppEventUtility.assertIsNotMainThread();
+
+        MovedClassObjectInputStream ois = null;
+        PersistedEvents persistedEvents = null;
+        Context context = FacebookSdk.getApplicationContext();
+        try {
+            InputStream is = context.openFileInput(PERSISTED_EVENTS_FILENAME);
+            ois = new MovedClassObjectInputStream(new BufferedInputStream(is));
+
+            persistedEvents = (PersistedEvents) ois.readObject();
+        } catch (FileNotFoundException e) {
+            // Expected if we never persisted any events.
+        } catch (Exception e) {
+            Log.w(TAG, "Got unexpected exception while reading events: ", e);
+        } finally {
+            Utility.closeQuietly(ois);
+
+
+            try {
+                // Note: We delete the store before we store the events; this means we'd
+                // prefer to lose some events in the case of exception rather than
+                // potentially log them twice.
+                // Always delete this file after the above try catch to recover from read
+                // errors.
+                context.getFileStreamPath(PERSISTED_EVENTS_FILENAME).delete();
+            } catch (Exception ex) {
+                Log.w(TAG, "Got unexpected exception when removing events file: ", ex);
+            }
+        }
+
+        if (persistedEvents == null) {
+            persistedEvents = new PersistedEvents();
+        }
+
+        return persistedEvents;
+    }
+
+    // Only call from singleThreadExecutor
+    private static void saveEventsToDisk(
+            PersistedEvents eventsToPersist) {
+        ObjectOutputStream oos = null;
+        Context context = FacebookSdk.getApplicationContext();
+        try {
+            oos = new ObjectOutputStream(
+                    new BufferedOutputStream(
+                            context.openFileOutput(PERSISTED_EVENTS_FILENAME, 0)));
+            oos.writeObject(eventsToPersist);
+        } catch (Exception e) {
+            Log.w(TAG, "Got unexpected exception while persisting events: ", e);
+            try {
+                context.getFileStreamPath(PERSISTED_EVENTS_FILENAME).delete();
+            } catch (Exception innerException) {
+                // ignore
+            }
+        } finally {
+            Utility.closeQuietly(oos);
+        }
+    }
+
+    private static class MovedClassObjectInputStream extends ObjectInputStream {
+        private static final String ACCESS_TOKEN_APP_ID_PAIR_SERIALIZATION_PROXY_V1_CLASS_NAME =
+                "com.facebook.appevents.AppEventsLogger$AccessTokenAppIdPair$SerializationProxyV1";
+        private static final String APP_EVENT_SERIALIZATION_PROXY_V1_CLASS_NAME =
+                "com.facebook.appevents.AppEventsLogger$AppEvent$SerializationProxyV1";
+
+        public MovedClassObjectInputStream(InputStream in) throws IOException {
+            super(in);
+        }
+
+        @Override
+        protected ObjectStreamClass readClassDescriptor()
+                throws IOException, ClassNotFoundException {
+            ObjectStreamClass resultClassDescriptor = super.readClassDescriptor();
+
+            if (resultClassDescriptor.getName().equals(
+                    ACCESS_TOKEN_APP_ID_PAIR_SERIALIZATION_PROXY_V1_CLASS_NAME)) {
+                resultClassDescriptor = ObjectStreamClass.lookup(
+                        com.facebook.appevents.AccessTokenAppIdPair.SerializationProxyV1.class);
+            } else if (resultClassDescriptor.getName().equals(
+                    APP_EVENT_SERIALIZATION_PROXY_V1_CLASS_NAME)) {
+                resultClassDescriptor = ObjectStreamClass.lookup(
+                        com.facebook.appevents.AppEvent.SerializationProxyV1.class);
+            }
+
+            return resultClassDescriptor;
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java b/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java
index ce6beeaab..de388fb03 100644
--- a/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java
+++ b/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java
@@ -28,7 +28,7 @@
 import android.content.SharedPreferences;
 import android.os.Bundle;
 import android.support.annotation.Nullable;
-import android.support.v4.content.LocalBroadcastManager;
+import android.telecom.Call;
 import android.util.Log;
 import bolts.AppLinks;
 
@@ -38,12 +38,12 @@
 import com.facebook.FacebookSdk;
 import com.facebook.GraphRequest;
 import com.facebook.GraphResponse;
+import com.facebook.HttpMethod;
 import com.facebook.LoggingBehavior;
 import com.facebook.appevents.internal.ActivityLifecycleTracker;
-import com.facebook.appevents.AppEventsConstants;
-import com.facebook.appevents.internal.Constants;
-import com.facebook.internal.AppEventsLoggerUtility;
 import com.facebook.internal.AttributionIdentifiers;
+import com.facebook.internal.BundleJSONConverter;
+import com.facebook.internal.FetchedAppSettingsManager;
 import com.facebook.internal.Logger;
 import com.facebook.internal.Utility;
 import com.facebook.internal.Validate;
@@ -52,24 +52,19 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.io.BufferedInputStream;
 import java.io.BufferedOutputStream;
 import java.io.FileNotFoundException;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
-import java.io.Serializable;
-import java.io.UnsupportedEncodingException;
 import java.math.BigDecimal;
-import java.util.ArrayList;
 import java.util.Currency;
 import java.util.HashMap;
 import java.util.HashSet;
-import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import java.util.UUID;
-import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.Executor;
 import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 
@@ -171,8 +166,6 @@
     // Constants
     private static final String TAG = AppEventsLogger.class.getCanonicalName();
 
-    private static final int NUM_LOG_EVENTS_TO_TRY_TO_FLUSH_AFTER = 100;
-    private static final int FLUSH_PERIOD_IN_SECONDS = 15;
     private static final int APP_SUPPORTS_ATTRIBUTION_ID_RECHECK_PERIOD_IN_SECONDS = 60 * 60 * 24;
     private static final int FLUSH_APP_SESSION_INFO_IN_SECONDS = 30;
 
@@ -192,82 +185,21 @@
     private final String contextName;
     private final AccessTokenAppIdPair accessTokenAppId;
 
-    private static Map<AccessTokenAppIdPair, SessionEventsState> stateMap =
-            new ConcurrentHashMap<AccessTokenAppIdPair, SessionEventsState>();
     private static ScheduledThreadPoolExecutor backgroundExecutor;
     private static FlushBehavior flushBehavior = FlushBehavior.AUTO;
-    private static boolean requestInFlight;
-    private static Context applicationContext;
     private static Object staticLock = new Object();
     private static String anonymousAppDeviceGUID;
     private static String sourceApplication;
     private static boolean isOpenedByApplink;
     private static boolean isActivateAppEventRequested;
     private static String pushNotificationsRegistrationId;
-
-    private static class AccessTokenAppIdPair implements Serializable {
-        private static final long serialVersionUID = 1L;
-        private final String accessTokenString;
-        private final String applicationId;
-
-        AccessTokenAppIdPair(AccessToken accessToken) {
-            this(accessToken.getToken(), FacebookSdk.getApplicationId());
-        }
-
-        AccessTokenAppIdPair(String accessTokenString, String applicationId) {
-            this.accessTokenString = Utility.isNullOrEmpty(accessTokenString)
-                    ? null
-                    : accessTokenString;
-            this.applicationId = applicationId;
-        }
-
-        String getAccessTokenString() {
-            return accessTokenString;
-        }
-
-        String getApplicationId() {
-            return applicationId;
-        }
-
-        @Override
-        public int hashCode() {
-            return (accessTokenString == null ? 0 : accessTokenString.hashCode()) ^
-                    (applicationId == null ? 0 : applicationId.hashCode());
-        }
-
-        @Override
-        public boolean equals(Object o) {
-            if (!(o instanceof AccessTokenAppIdPair)) {
-                return false;
-            }
-            AccessTokenAppIdPair p = (AccessTokenAppIdPair) o;
-            return Utility.areObjectsEqual(p.accessTokenString, accessTokenString) &&
-                    Utility.areObjectsEqual(p.applicationId, applicationId);
-        }
-
-        private static class SerializationProxyV1 implements Serializable {
-            private static final long serialVersionUID = -2488473066578201069L;
-            private final String accessTokenString;
-            private final String appId;
-
-            private SerializationProxyV1(String accessTokenString, String appId) {
-                this.accessTokenString = accessTokenString;
-                this.appId = appId;
-            }
-
-            private Object readResolve() {
-                return new AccessTokenAppIdPair(accessTokenString, appId);
-            }
-        }
-
-        private Object writeReplace() {
-            return new SerializationProxyV1(accessTokenString, applicationId);
-        }
-    }
+    private static String externalAnalyticsUserID;
 
     /**
      * Notifies the events system that the app has launched and activate and deactivate events
-     * should start being logged automatically. This should be called from the OnCreate method
+     * should start being logged automatically. By default this function is called automatically
+     * from sdkInitialize() flow. In case 'com.facebook.sdk.AutoLogAppEventsEnabled' manifest
+     * setting is set to false, it should typically be called from the OnCreate method
      * of you application.
      *
      * @param application The running application
@@ -278,7 +210,9 @@ public static void activateApp(Application application) {
 
     /**
      * Notifies the events system that the app has launched and activate and deactivate events
-     * should start being logged automatically. This should be called from the OnCreate method
+     * should start being logged automatically. By default this function is called automatically
+     * from sdkInitialize() flow. In case 'com.facebook.sdk.AutoLogAppEventsEnabled' manifest
+     * setting is set to false, it should typically be called from the OnCreate method
      * of you application.
      *
      * Call this if you wish to use a different Application ID then the one specified in the
@@ -293,10 +227,17 @@ public static void activateApp(Application application, String applicationId) {
                     "activateApp");
         }
 
+        AnalyticsUserIDStore.initStore();
+
         if (applicationId == null) {
             applicationId = FacebookSdk.getApplicationId();
         }
 
+        // activateApp supersedes publishInstall in the public API, so we need to explicitly invoke
+        // it, since the server can't reliably infer install state for all conditions of an app
+        // activate.
+        FacebookSdk.publishInstallAsync(application, applicationId);
+
         ActivityLifecycleTracker.startTracking(application, applicationId);
     }
 
@@ -346,6 +287,8 @@ public static void activateApp(Context context, String applicationId) {
             throw new IllegalArgumentException("Both context and applicationId must be non-null");
         }
 
+        AnalyticsUserIDStore.initStore();
+
         if ((context instanceof Activity)) {
             setSourceApplication((Activity) context);
         } else {
@@ -433,7 +376,7 @@ public void run() {
 
     private void logAppSessionResumeEvent(long eventTime, String sourceApplicationInfo) {
         PersistedAppSessionInfo.onResume(
-                applicationContext,
+                FacebookSdk.getApplicationContext(),
                 accessTokenAppId,
                 this,
                 eventTime,
@@ -441,7 +384,11 @@ private void logAppSessionResumeEvent(long eventTime, String sourceApplicationIn
     }
 
     private void logAppSessionSuspendEvent(long eventTime) {
-        PersistedAppSessionInfo.onSuspend(applicationContext, accessTokenAppId, this, eventTime);
+        PersistedAppSessionInfo.onSuspend(
+                FacebookSdk.getApplicationContext(),
+                accessTokenAppId,
+                this,
+                eventTime);
     }
 
     /**
@@ -716,7 +663,7 @@ public void logPushNotificationOpen(Bundle payload, String action) {
      * the value of getFlushBehavior.  This method allows for explicit, app invoked flushing.
      */
     public void flush() {
-        flush(FlushReason.EXPLICIT);
+        AppEventQueue.flush(FlushReason.EXPLICIT);
     }
 
     /**
@@ -728,7 +675,7 @@ public void flush() {
      */
     public static void onContextStop() {
         // TODO: (v4) add onContextStop() to samples that use the logger.
-        PersistedEvents.persistEvents(applicationContext, stateMap);
+        AppEventQueue.persistToDisk();
     }
 
     /**
@@ -751,6 +698,100 @@ public static void setPushNotificationsRegistrationId(String registrationId) {
         }
     }
 
+    static String getPushNotificationsRegistrationId() {
+        synchronized (staticLock) {
+            return pushNotificationsRegistrationId;
+        }
+    }
+
+    /**
+     * Sets a user id to associate with all app events. This can be used to associate your own
+     * user id with the app events logged from this instance of an application.
+     *
+     * The user ID will be persisted between application instantces.
+     *
+     * @param userID A User ID
+     */
+    public static void setUserID(final String userID) {
+        AnalyticsUserIDStore.setUserID(userID);
+    }
+
+    /**
+     * Returns the set user id else null.
+     */
+    public static String getUserID() {
+       return AnalyticsUserIDStore.getUserID();
+    }
+
+    /**
+     * Clears the currently set user id.
+     */
+    public static void clearUserID() {
+        AnalyticsUserIDStore.setUserID(null);
+    }
+
+    public static void updateUserProperties(
+            Bundle parameters,
+            GraphRequest.Callback callback) {
+        updateUserProperties(
+                parameters,
+                FacebookSdk.getApplicationId(),
+                callback);
+    }
+
+    public static void updateUserProperties(
+            final Bundle parameters,
+            final String applicationID,
+            final GraphRequest.Callback callback) {
+        final String userID = getUserID();
+        if (userID == null || userID.isEmpty()) {
+            Logger.log(
+                    LoggingBehavior.APP_EVENTS,
+                    TAG,
+                    "AppEventsLogger userID cannot be null or empty");
+            return;
+        }
+
+        getAnalyticsExecutor().execute(new Runnable() {
+            @Override
+            public void run() {
+                Bundle userPropertiesParams = new Bundle();
+                userPropertiesParams.putString("user_unique_id", userID);
+                userPropertiesParams.putBundle("custom_data", parameters);
+                // This call must be run on the background thread
+                AttributionIdentifiers identifiers =
+                        AttributionIdentifiers.getAttributionIdentifiers(
+                            FacebookSdk.getApplicationContext());
+                if (identifiers != null && identifiers.getAndroidAdvertiserId() != null) {
+                    userPropertiesParams.putString(
+                            "advertiser_id",
+                            identifiers.getAndroidAdvertiserId());
+                }
+
+                Bundle data = new Bundle();
+                try {
+                    JSONObject userData = BundleJSONConverter.convertToJSON(userPropertiesParams);
+                    JSONArray dataArray = new JSONArray();
+                    dataArray.put(userData);
+
+                    data.putString(
+                            "data", dataArray.toString());
+                } catch (JSONException ex) {
+                    throw new FacebookException("Failed to construct request", ex);
+                }
+
+                GraphRequest request = new GraphRequest(
+                        AccessToken.getCurrentAccessToken(),
+                        String.format(Locale.US, "%s/user_properties", applicationID),
+                        data,
+                        HttpMethod.POST,
+                        callback);
+                request.setSkipClientToken(true);
+                request.executeAsync();
+            }
+        });
+    }
+
     /**
      * This method is intended only for internal use by the Facebook SDK and other use is
      * unsupported.
@@ -777,30 +818,22 @@ public String getApplicationId() {
     // Private implementation
     //
 
-    @SuppressWarnings("UnusedDeclaration")
-    private enum FlushReason {
-        EXPLICIT,
-        TIMER,
-        SESSION_CHANGE,
-        PERSISTED_EVENTS,
-        EVENT_THRESHOLD,
-        EAGER_FLUSHING_EVENT,
-    }
-
-    @SuppressWarnings("UnusedDeclaration")
-    private enum FlushResult {
-        SUCCESS,
-        SERVER_ERROR,
-        NO_CONNECTIVITY,
-        UNKNOWN_ERROR
-    }
-
     /**
      * Constructor is private, newLogger() methods should be used to build an instance.
      */
     private AppEventsLogger(Context context, String applicationId, AccessToken accessToken) {
-        Validate.notNull(context, "context");
-        this.contextName = Utility.getActivityName(context);
+        this(
+                Utility.getActivityName(context),
+                applicationId,
+                accessToken);
+    }
+
+    protected AppEventsLogger(
+            String activityName,
+            String applicationId,
+            AccessToken accessToken) {
+        Validate.sdkInitialized();
+        this.contextName = activityName;
 
         if (accessToken == null) {
             accessToken = AccessToken.getCurrentAccessToken();
@@ -814,18 +847,12 @@ private AppEventsLogger(Context context, String applicationId, AccessToken acces
         } else {
             // If no app ID passed, get it from the manifest:
             if (applicationId == null) {
-                applicationId = Utility.getMetadataApplicationId(context);
+                applicationId = Utility.getMetadataApplicationId(
+                        FacebookSdk.getApplicationContext());
             }
             accessTokenAppId = new AccessTokenAppIdPair(null, applicationId);
         }
 
-        synchronized (staticLock) {
-
-            if (applicationContext == null) {
-                applicationContext = context.getApplicationContext();
-            }
-        }
-
         initializeTimersIfNeeded();
     }
 
@@ -837,33 +864,16 @@ private static void initializeTimersIfNeeded() {
             backgroundExecutor = new ScheduledThreadPoolExecutor(1);
         }
 
-        final Runnable flushRunnable = new Runnable() {
-            @Override
-            public void run() {
-                if (getFlushBehavior() != FlushBehavior.EXPLICIT_ONLY) {
-                    flushAndWait(FlushReason.TIMER);
-                }
-            }
-        };
-
-        backgroundExecutor.scheduleAtFixedRate(
-                flushRunnable,
-                0,
-                FLUSH_PERIOD_IN_SECONDS,
-                TimeUnit.SECONDS
-        );
-
         final Runnable attributionRecheckRunnable = new Runnable() {
             @Override
             public void run() {
-                Set<String> applicationIds = new HashSet<String>();
-                synchronized (staticLock) {
-                    for (AccessTokenAppIdPair accessTokenAppId : stateMap.keySet()) {
-                        applicationIds.add(accessTokenAppId.getApplicationId());
-                    }
+                Set<String> applicationIds = new HashSet<>();
+                for (AccessTokenAppIdPair accessTokenAppId : AppEventQueue.getKeySet()) {
+                    applicationIds.add(accessTokenAppId.getApplicationId());
                 }
+
                 for (String applicationId : applicationIds) {
-                    Utility.queryAppSettings(applicationId, true);
+                    FetchedAppSettingsManager.queryAppSettings(applicationId, true);
                 }
             }
         };
@@ -882,30 +892,35 @@ private void logEvent(
             Bundle parameters,
             boolean isImplicitlyLogged,
             @Nullable final UUID currentSessionId) {
-        AppEvent event = new AppEvent(
-                this.contextName,
-                eventName,
-                valueToSum,
-                parameters,
-                isImplicitlyLogged,
-                currentSessionId);
-        logEvent(applicationContext, event, accessTokenAppId);
+        try {
+            AppEvent event = new AppEvent(
+                    this.contextName,
+                    eventName,
+                    valueToSum,
+                    parameters,
+                    isImplicitlyLogged,
+                    currentSessionId);
+            logEvent(FacebookSdk.getApplicationContext(), event, accessTokenAppId);
+        } catch (JSONException jsonException) {
+            // If any of the above failed, just consider this an illegal event.
+            Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
+                    "JSON encoding for app event failed: '%s'", jsonException.toString());
+
+        } catch (FacebookException e) {
+            // If any of the above failed, just consider this an illegal event.
+            Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
+                    "Invalid app event: %s", e.toString());
+        }
+
     }
 
     private static void logEvent(final Context context,
                                  final AppEvent event,
                                  final AccessTokenAppIdPair accessTokenAppId) {
-        FacebookSdk.getExecutor().execute(new Runnable() {
-            @Override
-            public void run() {
-                SessionEventsState state = getSessionEventsState(context, accessTokenAppId);
-                state.addEvent(event);
-                flushIfNecessary();
-            }
-        });
+        AppEventQueue.add(accessTokenAppId, event);
 
         // Make sure Activated_App is always before other app events
-        if (!event.isImplicit && !isActivateAppEventRequested) {
+        if (!event.getIsImplicit() && !isActivateAppEventRequested) {
             if (event.getName() == AppEventsConstants.EVENT_NAME_ACTIVATED_APP) {
                 isActivateAppEventRequested = true;
             } else {
@@ -920,282 +935,10 @@ public void run() {
 
     static void eagerFlush() {
         if (getFlushBehavior() != FlushBehavior.EXPLICIT_ONLY) {
-            flush(FlushReason.EAGER_FLUSHING_EVENT);
-        }
-    }
-
-    private static void flushIfNecessary() {
-        synchronized (staticLock) {
-            if (getFlushBehavior() != FlushBehavior.EXPLICIT_ONLY) {
-                if (getAccumulatedEventCount() > NUM_LOG_EVENTS_TO_TRY_TO_FLUSH_AFTER) {
-                    flush(FlushReason.EVENT_THRESHOLD);
-                }
-            }
+            AppEventQueue.flush(FlushReason.EAGER_FLUSHING_EVENT);
         }
     }
 
-    private static int getAccumulatedEventCount() {
-        synchronized (staticLock) {
-
-            int result = 0;
-            for (SessionEventsState state : stateMap.values()) {
-                result += state.getAccumulatedEventCount();
-            }
-            return result;
-        }
-    }
-
-    // Creates a new SessionEventsState if not already in the map.
-    private static SessionEventsState getSessionEventsState(
-            Context context,
-            AccessTokenAppIdPair accessTokenAppId) {
-        // Do this work outside of the lock to prevent deadlocks in implementation of
-        // AdvertisingIdClient.getAdvertisingIdInfo, because that implementation blocks waiting on
-        // the main thread, which may also grab this staticLock.
-        SessionEventsState state = stateMap.get(accessTokenAppId);
-        AttributionIdentifiers attributionIdentifiers = null;
-        if (state == null) {
-            // Retrieve attributionId, but we will only send it if attribution is supported for the
-            // app.
-            attributionIdentifiers = AttributionIdentifiers.getAttributionIdentifiers(context);
-        }
-
-        synchronized (staticLock) {
-            // Check state again while we're locked.
-            state = stateMap.get(accessTokenAppId);
-            if (state == null) {
-                state = new SessionEventsState(
-                        attributionIdentifiers,
-                        context.getPackageName(),
-                        getAnonymousAppDeviceGUID(context));
-                stateMap.put(accessTokenAppId, state);
-            }
-            return state;
-        }
-    }
-
-    private static SessionEventsState getSessionEventsState(AccessTokenAppIdPair accessTokenAppId) {
-        synchronized (staticLock) {
-            return stateMap.get(accessTokenAppId);
-        }
-    }
-
-    private static void flush(final FlushReason reason) {
-
-        FacebookSdk.getExecutor().execute(new Runnable() {
-            @Override
-            public void run() {
-                flushAndWait(reason);
-            }
-        });
-    }
-
-    private static void flushAndWait(final FlushReason reason) {
-
-        Set<AccessTokenAppIdPair> keysToFlush;
-        synchronized (staticLock) {
-            if (requestInFlight) {
-                return;
-            }
-            requestInFlight = true;
-            keysToFlush = new HashSet<AccessTokenAppIdPair>(stateMap.keySet());
-        }
-
-        accumulatePersistedEvents();
-
-        FlushStatistics flushResults = null;
-        try {
-            flushResults = buildAndExecuteRequests(reason, keysToFlush);
-        } catch (Exception e) {
-            Utility.logd(TAG, "Caught unexpected exception while flushing: ", e);
-        }
-
-        synchronized (staticLock) {
-            requestInFlight = false;
-        }
-
-        if (flushResults != null) {
-            final Intent intent = new Intent(ACTION_APP_EVENTS_FLUSHED);
-            intent.putExtra(APP_EVENTS_EXTRA_NUM_EVENTS_FLUSHED, flushResults.numEvents);
-            intent.putExtra(APP_EVENTS_EXTRA_FLUSH_RESULT, flushResults.result);
-            LocalBroadcastManager.getInstance(applicationContext).sendBroadcast(intent);
-        }
-    }
-
-    private static FlushStatistics buildAndExecuteRequests(
-            FlushReason reason,
-            Set<AccessTokenAppIdPair> keysToFlush) {
-        FlushStatistics flushResults = new FlushStatistics();
-
-        boolean limitEventUsage = FacebookSdk.getLimitEventAndDataUsage(applicationContext);
-
-        List<GraphRequest> requestsToExecute = new ArrayList<GraphRequest>();
-        for (AccessTokenAppIdPair accessTokenAppId : keysToFlush) {
-            SessionEventsState sessionEventsState = getSessionEventsState(accessTokenAppId);
-            if (sessionEventsState == null) {
-                continue;
-            }
-
-            GraphRequest request = buildRequestForSession(
-                    accessTokenAppId,
-                    sessionEventsState,
-                    limitEventUsage,
-                    flushResults);
-            if (request != null) {
-                requestsToExecute.add(request);
-            }
-        }
-
-        if (requestsToExecute.size() > 0) {
-            Logger.log(LoggingBehavior.APP_EVENTS, TAG, "Flushing %d events due to %s.",
-                    flushResults.numEvents,
-                    reason.toString());
-
-            for (GraphRequest request : requestsToExecute) {
-                // Execute the request synchronously. Callbacks will take care of handling errors
-                // and updating our final overall result.
-                request.executeAndWait();
-            }
-            return flushResults;
-        }
-
-        return null;
-    }
-
-    private static class FlushStatistics {
-        public int numEvents = 0;
-        public FlushResult result = FlushResult.SUCCESS;
-    }
-
-    private static GraphRequest buildRequestForSession(
-            final AccessTokenAppIdPair accessTokenAppId,
-            final SessionEventsState sessionEventsState,
-            final boolean limitEventUsage,
-            final FlushStatistics flushState) {
-        String applicationId = accessTokenAppId.getApplicationId();
-
-        Utility.FetchedAppSettings fetchedAppSettings =
-                Utility.queryAppSettings(applicationId, false);
-
-        final GraphRequest postRequest = GraphRequest.newPostRequest(
-                null,
-                String.format("%s/activities", applicationId),
-                null,
-                null);
-
-        Bundle requestParameters = postRequest.getParameters();
-        if (requestParameters == null) {
-            requestParameters = new Bundle();
-        }
-        requestParameters.putString("access_token", accessTokenAppId.getAccessTokenString());
-        if (pushNotificationsRegistrationId != null) {
-            requestParameters.putString("device_token", pushNotificationsRegistrationId);
-        }
-
-        postRequest.setParameters(requestParameters);
-
-        if (fetchedAppSettings == null) {
-            return null;
-        }
-
-        int numEvents = sessionEventsState.populateRequest(
-                postRequest,
-                fetchedAppSettings.supportsImplicitLogging(),
-                limitEventUsage);
-
-        if (numEvents == 0) {
-            return null;
-        }
-
-        flushState.numEvents += numEvents;
-
-        postRequest.setCallback(new GraphRequest.Callback() {
-            @Override
-            public void onCompleted(GraphResponse response) {
-                handleResponse(accessTokenAppId, postRequest, response, sessionEventsState, flushState);
-            }
-        });
-
-        return postRequest;
-    }
-
-    private static void handleResponse(
-            AccessTokenAppIdPair accessTokenAppId,
-            GraphRequest request,
-            GraphResponse response,
-            SessionEventsState sessionEventsState,
-            FlushStatistics flushState) {
-        FacebookRequestError error = response.getError();
-        String resultDescription = "Success";
-
-        FlushResult flushResult = FlushResult.SUCCESS;
-
-        if (error != null) {
-            final int NO_CONNECTIVITY_ERROR_CODE = -1;
-            if (error.getErrorCode() == NO_CONNECTIVITY_ERROR_CODE) {
-                resultDescription = "Failed: No Connectivity";
-                flushResult = FlushResult.NO_CONNECTIVITY;
-            } else {
-                resultDescription = String.format("Failed:\n  Response: %s\n  Error %s",
-                        response.toString(),
-                        error.toString());
-                flushResult = FlushResult.SERVER_ERROR;
-            }
-        }
-
-        if (FacebookSdk.isLoggingBehaviorEnabled(LoggingBehavior.APP_EVENTS)) {
-            String eventsJsonString = (String) request.getTag();
-            String prettyPrintedEvents;
-
-            try {
-                JSONArray jsonArray = new JSONArray(eventsJsonString);
-                prettyPrintedEvents = jsonArray.toString(2);
-            } catch (JSONException exc) {
-                prettyPrintedEvents = "<Can't encode events for debug logging>";
-            }
-
-            Logger.log(LoggingBehavior.APP_EVENTS, TAG,
-                    "Flush completed\nParams: %s\n  Result: %s\n  Events JSON: %s",
-                    request.getGraphObject().toString(),
-                    resultDescription,
-                    prettyPrintedEvents);
-        }
-
-        sessionEventsState.clearInFlightAndStats(error != null);
-
-        if (flushResult == FlushResult.NO_CONNECTIVITY) {
-            // We may call this for multiple requests in a batch, which is slightly inefficient
-            // since in principle we could call it once for all failed requests, but the impact is
-            // likely to be minimal. We don't call this for other server errors, because if an event
-            // failed because it was malformed, etc., continually retrying it will cause subsequent
-            // events to not be logged either.
-            PersistedEvents.persistEvents(applicationContext, accessTokenAppId, sessionEventsState);
-        }
-
-        if (flushResult != FlushResult.SUCCESS) {
-            // We assume that connectivity issues are more significant to report than server issues.
-            if (flushState.result != FlushResult.NO_CONNECTIVITY) {
-                flushState.result = flushResult;
-            }
-        }
-    }
-
-    private static int accumulatePersistedEvents() {
-        PersistedEvents persistedEvents = PersistedEvents.readAndClearStore(applicationContext);
-
-        int result = 0;
-        for (AccessTokenAppIdPair accessTokenAppId : persistedEvents.keySet()) {
-            SessionEventsState sessionEventsState =
-                    getSessionEventsState(applicationContext, accessTokenAppId);
-
-            List<AppEvent> events = persistedEvents.getEvents(accessTokenAppId);
-            sessionEventsState.accumulatePersistedEvents(events);
-            result += events.size();
-        }
-
-        return result;
-    }
-
     /**
      * Invoke this method, rather than throwing an Exception, for situations where user/server input
      * might reasonably cause this to occur, and thus don't want an exception thrown at production
@@ -1277,6 +1020,14 @@ static void resetSourceApplication() {
         isOpenedByApplink = false;
     }
 
+    static Executor getAnalyticsExecutor() {
+        if (backgroundExecutor == null) {
+            initializeTimersIfNeeded();
+        }
+
+        return backgroundExecutor;
+    }
+
     /**
      * Each app/device pair gets an GUID that is sent back with App Events and persisted with this
      * app/device pair.
@@ -1313,311 +1064,10 @@ public static String getAnonymousAppDeviceGUID(Context context) {
     // Deprecated Stuff
     //
 
+    // Since we moved some private classes to internal classes outside the AppEventsLogger class
+    // for backwards compatibility we can override the classDescriptor to resolve to the correct
+    // class
 
-    private static class SessionEventsState {
-        private List<AppEvent> accumulatedEvents = new ArrayList<AppEvent>();
-        private List<AppEvent> inFlightEvents = new ArrayList<AppEvent>();
-        private int numSkippedEventsDueToFullBuffer;
-        private AttributionIdentifiers attributionIdentifiers;
-        private String packageName;
-        private String anonymousAppDeviceGUID;
-
-        public static final String EVENT_COUNT_KEY = "event_count";
-        public static final String ENCODED_EVENTS_KEY = "encoded_events";
-        public static final String NUM_SKIPPED_KEY = "num_skipped";
-
-        private final int MAX_ACCUMULATED_LOG_EVENTS = 1000;
-
-        public SessionEventsState(
-                AttributionIdentifiers identifiers,
-                String packageName,
-                String anonymousGUID) {
-            this.attributionIdentifiers = identifiers;
-            this.packageName = packageName;
-            this.anonymousAppDeviceGUID = anonymousGUID;
-        }
-
-        // Synchronize here and in other methods on this class, because could be coming in from
-        // different AppEventsLoggers on different threads pointing at the same session.
-        public synchronized void addEvent(AppEvent event) {
-            if (accumulatedEvents.size() + inFlightEvents.size() >= MAX_ACCUMULATED_LOG_EVENTS) {
-                numSkippedEventsDueToFullBuffer++;
-            } else {
-                accumulatedEvents.add(event);
-            }
-        }
-
-        public synchronized int getAccumulatedEventCount() {
-            return accumulatedEvents.size();
-        }
-
-        public synchronized void clearInFlightAndStats(boolean moveToAccumulated) {
-            if (moveToAccumulated) {
-                accumulatedEvents.addAll(inFlightEvents);
-            }
-            inFlightEvents.clear();
-            numSkippedEventsDueToFullBuffer = 0;
-        }
-
-        public int populateRequest(GraphRequest request, boolean includeImplicitEvents,
-                                   boolean limitEventUsage) {
-
-            int numSkipped;
-            JSONArray jsonArray;
-            synchronized (this) {
-                numSkipped = numSkippedEventsDueToFullBuffer;
-
-                // move all accumulated events to inFlight.
-                inFlightEvents.addAll(accumulatedEvents);
-                accumulatedEvents.clear();
-
-                jsonArray = new JSONArray();
-                for (AppEvent event : inFlightEvents) {
-                    if (includeImplicitEvents || !event.getIsImplicit()) {
-                        jsonArray.put(event.getJSONObject());
-                    }
-                }
-
-                if (jsonArray.length() == 0) {
-                    return 0;
-                }
-            }
-
-            populateRequest(request, numSkipped, jsonArray, limitEventUsage);
-            return jsonArray.length();
-        }
-
-        public synchronized List<AppEvent> getEventsToPersist() {
-            // We will only persist accumulated events, not ones currently in-flight. This means if
-            // an in-flight request fails, those requests will not be persisted and thus might be
-            // lost if the process terminates while the flush is in progress.
-            List<AppEvent> result = accumulatedEvents;
-            accumulatedEvents = new ArrayList<AppEvent>();
-            return result;
-        }
-
-        public synchronized void accumulatePersistedEvents(List<AppEvent> events) {
-            // We won't skip events due to a full buffer, since we already accumulated them once and
-            // persisted them. But they will count against the buffer size when further events are
-            // accumulated.
-            accumulatedEvents.addAll(events);
-        }
-
-        private void populateRequest(GraphRequest request, int numSkipped, JSONArray events,
-                                     boolean limitEventUsage) {
-            JSONObject publishParams = null;
-            try {
-                publishParams = AppEventsLoggerUtility.getJSONObjectForGraphAPICall(
-                        AppEventsLoggerUtility.GraphAPIActivityType.CUSTOM_APP_EVENTS,
-                        attributionIdentifiers,
-                        anonymousAppDeviceGUID,
-                        limitEventUsage,
-                        applicationContext);
-
-                if (numSkippedEventsDueToFullBuffer > 0) {
-                    publishParams.put("num_skipped_events", numSkipped);
-                }
-            } catch (JSONException e) {
-                // Swallow
-                publishParams = new JSONObject();
-            }
-            request.setGraphObject(publishParams);
-
-            Bundle requestParameters = request.getParameters();
-            if (requestParameters == null) {
-                requestParameters = new Bundle();
-            }
-
-            String jsonString = events.toString();
-            if (jsonString != null) {
-                requestParameters.putByteArray(
-                        "custom_events_file",
-                        getStringAsByteArray(jsonString));
-                request.setTag(jsonString);
-            }
-            request.setParameters(requestParameters);
-        }
-
-        private byte[] getStringAsByteArray(String jsonString) {
-            byte[] jsonUtf8 = null;
-            try {
-                jsonUtf8 = jsonString.getBytes("UTF-8");
-            } catch (UnsupportedEncodingException e) {
-                // shouldn't happen, but just in case:
-                Utility.logd("Encoding exception: ", e);
-            }
-            return jsonUtf8;
-        }
-    }
-
-    static class AppEvent implements Serializable {
-        private static final long serialVersionUID = 1L;
-
-        private JSONObject jsonObject;
-        private boolean isImplicit;
-        private static final HashSet<String> validatedIdentifiers = new HashSet<String>();
-        private String name;
-
-        public AppEvent(
-                String contextName,
-                String eventName,
-                Double valueToSum,
-                Bundle parameters,
-                boolean isImplicitlyLogged,
-                @Nullable final UUID currentSessionId
-        ) {
-            try {
-                validateIdentifier(eventName);
-
-                this.name = eventName;
-                isImplicit = isImplicitlyLogged;
-                jsonObject = new JSONObject();
-
-                jsonObject.put("_eventName", eventName);
-                jsonObject.put(Constants.LOG_TIME_APP_EVENT_KEY, System.currentTimeMillis() / 1000);
-                jsonObject.put("_ui", contextName);
-                if (currentSessionId != null) {
-                    jsonObject.put("_session_id", currentSessionId);
-                }
-
-                if (valueToSum != null) {
-                    jsonObject.put("_valueToSum", valueToSum.doubleValue());
-                }
-
-                if (isImplicit) {
-                    jsonObject.put("_implicitlyLogged", "1");
-                }
-
-                if (parameters != null) {
-                    for (String key : parameters.keySet()) {
-
-                        validateIdentifier(key);
-
-                        Object value = parameters.get(key);
-                        if (!(value instanceof String) && !(value instanceof Number)) {
-                            throw new FacebookException(
-                                    String.format(
-                                            "Parameter value '%s' for key '%s' should be a string" +
-                                                    " or a numeric type.",
-                                            value,
-                                            key)
-                            );
-                        }
-
-                        jsonObject.put(key, value.toString());
-                    }
-                }
-
-                if (!isImplicit) {
-                    Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
-                            "Created app event '%s'", jsonObject.toString());
-                }
-            } catch (JSONException jsonException) {
-
-                // If any of the above failed, just consider this an illegal event.
-                Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
-                        "JSON encoding for app event failed: '%s'", jsonException.toString());
-                jsonObject = null;
-
-            } catch (FacebookException e) {
-                // If any of the above failed, just consider this an illegal event.
-                Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
-                        "Invalid app event name or parameter:", e.toString());
-                jsonObject = null;
-            }
-        }
-
-        public String getName() {
-            return name;
-        }
-
-        private AppEvent(String jsonString, boolean isImplicit) throws JSONException {
-            jsonObject = new JSONObject(jsonString);
-            this.isImplicit = isImplicit;
-        }
-
-        public boolean getIsImplicit() {
-            return isImplicit;
-        }
-
-        public JSONObject getJSONObject() {
-            return jsonObject;
-        }
-
-        // throw exception if not valid.
-        private void validateIdentifier(String identifier) throws FacebookException {
-
-            // Identifier should be 40 chars or less, and only have 0-9A-Za-z, underscore, hyphen,
-            // and space (but no hyphen or space in the first position).
-            final String regex = "^[0-9a-zA-Z_]+[0-9a-zA-Z _-]*$";
-
-            final int MAX_IDENTIFIER_LENGTH = 40;
-            if (identifier == null
-                    || identifier.length() == 0
-                    || identifier.length() > MAX_IDENTIFIER_LENGTH) {
-                if (identifier == null) {
-                    identifier = "<None Provided>";
-                }
-                throw new FacebookException(
-                    String.format(
-                            Locale.ROOT,
-                            "Identifier '%s' must be less than %d characters",
-                            identifier,
-                            MAX_IDENTIFIER_LENGTH)
-                );
-            }
-
-            boolean alreadyValidated = false;
-            synchronized (validatedIdentifiers) {
-                alreadyValidated = validatedIdentifiers.contains(identifier);
-            }
-
-            if (!alreadyValidated) {
-                if (identifier.matches(regex)) {
-                    synchronized (validatedIdentifiers) {
-                        validatedIdentifiers.add(identifier);
-                    }
-                } else {
-                    throw new FacebookException(
-                            String.format(
-                                    "Skipping event named '%s' due to illegal name - must be " +
-                                            "under 40 chars and alphanumeric, _, - or space, and " +
-                                            "not start with a space or hyphen.",
-                                    identifier
-                            )
-                    );
-                }
-            }
-        }
-
-        private static class SerializationProxyV1 implements Serializable {
-            private static final long serialVersionUID = -2488473066578201069L;
-            private final String jsonString;
-            private final boolean isImplicit;
-
-            private SerializationProxyV1(String jsonString, boolean isImplicit) {
-                this.jsonString = jsonString;
-                this.isImplicit = isImplicit;
-            }
-
-            private Object readResolve() throws JSONException {
-                return new AppEvent(jsonString, isImplicit);
-            }
-        }
-
-        private Object writeReplace() {
-            return new SerializationProxyV1(jsonObject.toString(), isImplicit);
-        }
-
-        @Override
-        public String toString() {
-            return String.format(
-                    "\"%s\", implicit: %b, json: %s",
-                    jsonObject.optString("_eventName"),
-                    isImplicit,
-                    jsonObject.toString());
-        }
-    }
 
     static class PersistedAppSessionInfo {
         private static final String PERSISTED_SESSION_INFO_FILENAME =
@@ -1631,7 +1081,8 @@ public String toString() {
         private static final Runnable appSessionInfoFlushRunnable = new Runnable() {
             @Override
             public void run() {
-                PersistedAppSessionInfo.saveAppSessionInformation(applicationContext);
+                PersistedAppSessionInfo.saveAppSessionInformation(
+                        FacebookSdk.getApplicationContext());
             }
         };
 
@@ -1642,9 +1093,8 @@ private static void restoreAppSessionInformation(Context context) {
             synchronized (staticLock) {
                 if (!isLoaded) {
                     try {
-                        ois =
-                                new ObjectInputStream(
-                                        context.openFileInput(PERSISTED_SESSION_INFO_FILENAME));
+                        ois = new ObjectInputStream(
+                            context.openFileInput(PERSISTED_SESSION_INFO_FILENAME));
                         appSessionInfoMap = (HashMap<AccessTokenAppIdPair, FacebookTimeSpentData>)
                                 ois.readObject();
                         Logger.log(
@@ -1653,7 +1103,10 @@ private static void restoreAppSessionInformation(Context context) {
                                 "App session info loaded");
                     } catch (FileNotFoundException fex) {
                     } catch (Exception e) {
-                        Log.d(TAG, "Got unexpected exception: " + e.toString());
+                        Log.w(
+                                TAG,
+                                "Got unexpected exception restoring app session info: "
+                                        + e.toString());
                     } finally {
                         Utility.closeQuietly(ois);
                         context.deleteFile(PERSISTED_SESSION_INFO_FILENAME);
@@ -1691,7 +1144,10 @@ static void saveAppSessionInformation(Context context) {
                                 "AppEvents",
                                 "App session info saved");
                     } catch (Exception e) {
-                        Log.d(TAG, "Got unexpected exception: " + e.toString());
+                        Log.w(
+                                TAG,
+                                "Got unexpected exception while writing app session info: "
+                                        + e.toString());
                     } finally {
                         Utility.closeQuietly(oos);
                     }
@@ -1752,115 +1208,4 @@ private static void onTimeSpentDataUpdate() {
             }
         }
     }
-
-    // Read/write operations are thread-safe/atomic across all instances of PersistedEvents, but
-    // modifications to any individual instance are not thread-safe.
-    static class PersistedEvents {
-        static final String PERSISTED_EVENTS_FILENAME = "AppEventsLogger.persistedevents";
-
-        private Context context;
-        private HashMap<AccessTokenAppIdPair, List<AppEvent>> persistedEvents =
-                new HashMap<AccessTokenAppIdPair, List<AppEvent>>();
-
-        private PersistedEvents(Context context) {
-            this.context = context;
-        }
-
-        public static PersistedEvents readAndClearStore(Context context) {
-            synchronized (staticLock) {
-                PersistedEvents persistedEvents = new PersistedEvents(context);
-
-                persistedEvents.readAndClearStore();
-
-                return persistedEvents;
-            }
-        }
-
-        public static void persistEvents(Context context, AccessTokenAppIdPair accessTokenAppId,
-                                         SessionEventsState eventsToPersist) {
-            Map<AccessTokenAppIdPair, SessionEventsState> map = new HashMap<AccessTokenAppIdPair, SessionEventsState>();
-            map.put(accessTokenAppId, eventsToPersist);
-            persistEvents(context, map);
-        }
-
-        public static void persistEvents(
-                Context context,
-                Map<AccessTokenAppIdPair,
-                        SessionEventsState> eventsToPersist) {
-            synchronized (staticLock) {
-                // Note that we don't track which instance of AppEventsLogger added a particular
-                // event to SessionEventsState; when a particular Context is being destroyed, we'll
-                // persist all accumulated events. More sophisticated tracking could be done to try
-                // to reduce unnecessary persisting of events, but the overall number of events is
-                // not expected to be large.
-                PersistedEvents persistedEvents = readAndClearStore(context);
-
-                for (Map.Entry<AccessTokenAppIdPair, SessionEventsState> entry
-                        : eventsToPersist.entrySet()) {
-                    List<AppEvent> events = entry.getValue().getEventsToPersist();
-                    if (events.size() == 0) {
-                        continue;
-                    }
-
-                    persistedEvents.addEvents(entry.getKey(), events);
-                }
-
-                persistedEvents.write();
-            }
-        }
-
-        public Set<AccessTokenAppIdPair> keySet() {
-            return persistedEvents.keySet();
-        }
-
-        public List<AppEvent> getEvents(AccessTokenAppIdPair accessTokenAppId) {
-            return persistedEvents.get(accessTokenAppId);
-        }
-
-        private void write() {
-            ObjectOutputStream oos = null;
-            try {
-                oos = new ObjectOutputStream(
-                        new BufferedOutputStream(
-                                context.openFileOutput(PERSISTED_EVENTS_FILENAME, 0)));
-                oos.writeObject(persistedEvents);
-            } catch (Exception e) {
-                Log.d(TAG, "Got unexpected exception: " + e.toString());
-            } finally {
-                Utility.closeQuietly(oos);
-            }
-        }
-
-        private void readAndClearStore() {
-            ObjectInputStream ois = null;
-            try {
-                ois = new ObjectInputStream(
-                        new BufferedInputStream(context.openFileInput(PERSISTED_EVENTS_FILENAME)));
-
-                @SuppressWarnings("unchecked")
-                HashMap<AccessTokenAppIdPair, List<AppEvent>> obj =
-                        (HashMap<AccessTokenAppIdPair, List<AppEvent>>) ois.readObject();
-
-                // Note: We delete the store before we store the events; this means we'd prefer to
-                // lose some events in the case of exception rather than potentially log them twice.
-                context.getFileStreamPath(PERSISTED_EVENTS_FILENAME).delete();
-                persistedEvents = obj;
-            } catch (FileNotFoundException e) {
-                // Expected if we never persisted any events.
-            } catch (Exception e) {
-                Log.d(TAG, "Got unexpected exception: " + e.toString());
-            } finally {
-                Utility.closeQuietly(ois);
-            }
-        }
-
-        public void addEvents(
-                AccessTokenAppIdPair accessTokenAppId,
-                List<AppEvent> eventsToPersist) {
-            if (!persistedEvents.containsKey(accessTokenAppId)) {
-                persistedEvents.put(accessTokenAppId, new ArrayList<AppEvent>());
-            }
-            persistedEvents.get(accessTokenAppId).addAll(eventsToPersist);
-        }
-    }
 }
diff --git a/facebook/src/main/java/com/facebook/appevents/FacebookTimeSpentData.java b/facebook/src/main/java/com/facebook/appevents/FacebookTimeSpentData.java
index 4dd7cc254..1d703b632 100644
--- a/facebook/src/main/java/com/facebook/appevents/FacebookTimeSpentData.java
+++ b/facebook/src/main/java/com/facebook/appevents/FacebookTimeSpentData.java
@@ -233,6 +233,9 @@ void onResume(AppEventsLogger logger, long eventTime, String sourceApplicationIn
                     sourceApplicationInfo);
             logger.logEvent(AppEventsConstants.EVENT_NAME_ACTIVATED_APP, eventParams);
             lastActivateEventLoggedTime = now;
+            if (logger.getFlushBehavior() != AppEventsLogger.FlushBehavior.EXPLICIT_ONLY) {
+              logger.flush();
+            }
         }
 
         // If this is an application that's not calling onSuspend yet, log and return. We can't
diff --git a/samples/Iconicus/src/com/example/iconicus/IconicusApplication.java b/facebook/src/main/java/com/facebook/appevents/FlushReason.java
similarity index 74%
rename from samples/Iconicus/src/com/example/iconicus/IconicusApplication.java
rename to facebook/src/main/java/com/facebook/appevents/FlushReason.java
index 3b21b9f4e..48e4ed827 100644
--- a/samples/Iconicus/src/com/example/iconicus/IconicusApplication.java
+++ b/facebook/src/main/java/com/facebook/appevents/FlushReason.java
@@ -18,18 +18,13 @@
  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  */
 
-package com.example.iconicus;
+package com.facebook.appevents;
 
-import android.app.Application;
-
-import com.facebook.FacebookSdk;
-import com.facebook.appevents.AppEventsLogger;
-
-public class IconicusApplication extends Application {
-    @Override
-    public void onCreate() {
-        super.onCreate();
-        FacebookSdk.sdkInitialize(getApplicationContext());
-        AppEventsLogger.activateApp(this);
-    }
+enum FlushReason {
+    EXPLICIT,
+    TIMER,
+    SESSION_CHANGE,
+    PERSISTED_EVENTS,
+    EVENT_THRESHOLD,
+    EAGER_FLUSHING_EVENT,
 }
diff --git a/samples/SwitchUserSample/src/com/example/switchuser/SwitchUserApplication.java b/facebook/src/main/java/com/facebook/appevents/FlushResult.java
similarity index 74%
rename from samples/SwitchUserSample/src/com/example/switchuser/SwitchUserApplication.java
rename to facebook/src/main/java/com/facebook/appevents/FlushResult.java
index a53cecc5b..064dc3190 100644
--- a/samples/SwitchUserSample/src/com/example/switchuser/SwitchUserApplication.java
+++ b/facebook/src/main/java/com/facebook/appevents/FlushResult.java
@@ -18,18 +18,11 @@
  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  */
 
-package com.example.switchuser;
+package com.facebook.appevents;
 
-import android.app.Application;
-
-import com.facebook.FacebookSdk;
-import com.facebook.appevents.AppEventsLogger;
-
-public class SwitchUserApplication extends Application {
-    @Override
-    public void onCreate() {
-        super.onCreate();
-        FacebookSdk.sdkInitialize(getApplicationContext());
-        AppEventsLogger.activateApp(this);
-    }
+public enum FlushResult {
+    SUCCESS,
+    SERVER_ERROR,
+    NO_CONNECTIVITY,
+    UNKNOWN_ERROR
 }
diff --git a/facebook/src/main/java/com/facebook/appevents/FlushStatistics.java b/facebook/src/main/java/com/facebook/appevents/FlushStatistics.java
new file mode 100644
index 000000000..5e8e6efe0
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/FlushStatistics.java
@@ -0,0 +1,26 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+class FlushStatistics {
+    public int numEvents = 0;
+    public FlushResult result = FlushResult.SUCCESS;
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/PersistedEvents.java b/facebook/src/main/java/com/facebook/appevents/PersistedEvents.java
new file mode 100644
index 000000000..df47a7ac8
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/PersistedEvents.java
@@ -0,0 +1,77 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import java.io.Serializable;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Set;
+
+class PersistedEvents implements Serializable {
+    private static final long serialVersionUID = 2016_06_29_001L;
+
+    private HashMap<AccessTokenAppIdPair, List<AppEvent>> events = new HashMap<>();
+
+    public PersistedEvents() {
+    }
+
+    public PersistedEvents(HashMap<AccessTokenAppIdPair, List<AppEvent>> appEventMap) {
+        events.putAll(appEventMap);
+    }
+
+    public Set<AccessTokenAppIdPair> keySet() {
+        return events.keySet();
+    }
+
+    public List<AppEvent> get(AccessTokenAppIdPair accessTokenAppIdPair) {
+        return events.get(accessTokenAppIdPair);
+    }
+
+    public boolean containsKey(AccessTokenAppIdPair accessTokenAppIdPair) {
+        return events.containsKey(accessTokenAppIdPair);
+    }
+
+    public void addEvents(AccessTokenAppIdPair accessTokenAppIdPair, List<AppEvent> appEvents) {
+        if (!events.containsKey(accessTokenAppIdPair)) {
+            events.put(accessTokenAppIdPair, appEvents);
+            return;
+        }
+
+        events.get(accessTokenAppIdPair).addAll(appEvents);
+    }
+
+    static class SerializationProxyV1 implements Serializable {
+        private static final long serialVersionUID = 2016_06_29_001L;;
+        private final HashMap<AccessTokenAppIdPair, List<AppEvent>> proxyEvents;
+
+        private SerializationProxyV1(HashMap<AccessTokenAppIdPair, List<AppEvent>> events) {
+            this.proxyEvents = events;
+        }
+
+        private Object readResolve() {
+            return new PersistedEvents(proxyEvents);
+        }
+    }
+
+    private Object writeReplace() {
+        return new SerializationProxyV1(events);
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/SessionEventsState.java b/facebook/src/main/java/com/facebook/appevents/SessionEventsState.java
new file mode 100644
index 000000000..665ed4306
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/SessionEventsState.java
@@ -0,0 +1,182 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import android.content.Context;
+import android.os.Bundle;
+
+import com.facebook.GraphRequest;
+import com.facebook.internal.AppEventsLoggerUtility;
+import com.facebook.internal.AttributionIdentifiers;
+import com.facebook.internal.Utility;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.UnsupportedEncodingException;
+import java.util.ArrayList;
+import java.util.List;
+
+class SessionEventsState {
+    private List<AppEvent> accumulatedEvents = new ArrayList<AppEvent>();
+    private List<AppEvent> inFlightEvents = new ArrayList<AppEvent>();
+    private int numSkippedEventsDueToFullBuffer;
+    private AttributionIdentifiers attributionIdentifiers;
+    private String anonymousAppDeviceGUID;
+
+    private final int MAX_ACCUMULATED_LOG_EVENTS = 1000;
+
+    public SessionEventsState(
+            AttributionIdentifiers identifiers,
+            String anonymousGUID) {
+        this.attributionIdentifiers = identifiers;
+        this.anonymousAppDeviceGUID = anonymousGUID;
+    }
+
+    // Synchronize here and in other methods on this class, because could be coming in from
+    // different AppEventsLoggers on different threads pointing at the same session.
+    public synchronized void addEvent(AppEvent event) {
+        if (accumulatedEvents.size() + inFlightEvents.size() >= MAX_ACCUMULATED_LOG_EVENTS) {
+            numSkippedEventsDueToFullBuffer++;
+        } else {
+            accumulatedEvents.add(event);
+        }
+    }
+
+    public synchronized int getAccumulatedEventCount() {
+        return accumulatedEvents.size();
+    }
+
+    public synchronized void clearInFlightAndStats(boolean moveToAccumulated) {
+        if (moveToAccumulated) {
+            accumulatedEvents.addAll(inFlightEvents);
+        }
+        inFlightEvents.clear();
+        numSkippedEventsDueToFullBuffer = 0;
+    }
+
+    public int populateRequest(
+            GraphRequest request,
+            Context applicationContext,
+            boolean includeImplicitEvents,
+            boolean limitEventUsage) {
+
+        int numSkipped;
+        JSONArray jsonArray;
+        synchronized (this) {
+            numSkipped = numSkippedEventsDueToFullBuffer;
+
+            // move all accumulated events to inFlight.
+            inFlightEvents.addAll(accumulatedEvents);
+            accumulatedEvents.clear();
+
+            jsonArray = new JSONArray();
+            for (AppEvent event : inFlightEvents) {
+                if (event.isChecksumValid()) {
+                    if (includeImplicitEvents || !event.getIsImplicit()) {
+                        jsonArray.put(event.getJSONObject());
+                    }
+                } else {
+                    Utility.logd("Event with invalid checksum: %s", event.toString());
+                }
+            }
+
+            if (jsonArray.length() == 0) {
+                return 0;
+            }
+        }
+
+        populateRequest(
+                request,
+                applicationContext,
+                numSkipped,
+                jsonArray,
+                limitEventUsage);
+        return jsonArray.length();
+    }
+
+    public synchronized List<AppEvent> getEventsToPersist() {
+        // We will only persist accumulated events, not ones currently in-flight. This means if
+        // an in-flight request fails, those requests will not be persisted and thus might be
+        // lost if the process terminates while the flush is in progress.
+        List<AppEvent> result = accumulatedEvents;
+        accumulatedEvents = new ArrayList<AppEvent>();
+        return result;
+    }
+
+    public synchronized void accumulatePersistedEvents(List<AppEvent> events) {
+        // We won't skip events due to a full buffer, since we already accumulated them once and
+        // persisted them. But they will count against the buffer size when further events are
+        // accumulated.
+        accumulatedEvents.addAll(events);
+    }
+
+    private void populateRequest(
+            GraphRequest request,
+            Context applicationContext,
+            int numSkipped,
+            JSONArray events,
+            boolean limitEventUsage) {
+        JSONObject publishParams = null;
+        try {
+            publishParams = AppEventsLoggerUtility.getJSONObjectForGraphAPICall(
+                    AppEventsLoggerUtility.GraphAPIActivityType.CUSTOM_APP_EVENTS,
+                    attributionIdentifiers,
+                    anonymousAppDeviceGUID,
+                    limitEventUsage,
+                    applicationContext);
+
+            if (numSkippedEventsDueToFullBuffer > 0) {
+                publishParams.put("num_skipped_events", numSkipped);
+            }
+        } catch (JSONException e) {
+            // Swallow
+            publishParams = new JSONObject();
+        }
+        request.setGraphObject(publishParams);
+
+        Bundle requestParameters = request.getParameters();
+        if (requestParameters == null) {
+            requestParameters = new Bundle();
+        }
+
+        String jsonString = events.toString();
+        if (jsonString != null) {
+            requestParameters.putByteArray(
+                    "custom_events_file",
+                    getStringAsByteArray(jsonString));
+            request.setTag(jsonString);
+        }
+        request.setParameters(requestParameters);
+    }
+
+    private byte[] getStringAsByteArray(String jsonString) {
+        byte[] jsonUtf8 = null;
+        try {
+            jsonUtf8 = jsonString.getBytes("UTF-8");
+        } catch (UnsupportedEncodingException e) {
+            // shouldn't happen, but just in case:
+            Utility.logd("Encoding exception: ", e);
+        }
+        return jsonUtf8;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java b/facebook/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java
index bc1a1db10..79346538b 100644
--- a/facebook/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java
+++ b/facebook/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java
@@ -22,17 +22,16 @@
 
 import android.app.Activity;
 import android.app.Application;
+import android.content.Context;
 import android.os.Bundle;
-import android.os.Looper;
 import android.util.Log;
 
-import com.facebook.BuildConfig;
 import com.facebook.FacebookSdk;
 import com.facebook.appevents.AppEventsLogger;
+import com.facebook.internal.FetchedAppSettings;
+import com.facebook.internal.FetchedAppSettingsManager;
 import com.facebook.internal.Utility;
 
-import junit.framework.Assert;
-
 import java.util.UUID;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
@@ -55,6 +54,7 @@
     private static volatile SessionInfo currentSession;
     private static AtomicBoolean tracking = new AtomicBoolean(false);
     private static String appId;
+    private static long currentActivityAppearTime;
 
     public static void startTracking(Application application, final String appId) {
         if (!tracking.compareAndSet(false, true)) {
@@ -69,7 +69,7 @@ public static void startTracking(Application application, final String appId) {
                     public void onActivityCreated(
                             final Activity activity,
                             Bundle savedInstanceState) {
-                        assertIsMainThread();
+                        AppEventUtility.assertIsMainThread();
                         ActivityLifecycleTracker.onActivityCreated(activity);
                     }
 
@@ -78,13 +78,13 @@ public void onActivityStarted(Activity activity) {}
 
                     @Override
                     public void onActivityResumed(final Activity activity) {
-                        assertIsMainThread();
+                        AppEventUtility.assertIsMainThread();
                         ActivityLifecycleTracker.onActivityResumed(activity);
                     }
 
                     @Override
                     public void onActivityPaused(final Activity activity) {
-                        assertIsMainThread();
+                        AppEventUtility.assertIsMainThread();
                         ActivityLifecycleTracker.onActivityPaused(activity);
                     }
 
@@ -112,8 +112,12 @@ public static UUID getCurrentSessionGuid() {
     }
 
     // Public in order to allow unity sdk to correctly log app events
-    public static void onActivityCreated(final Activity activity) {
+    public static void onActivityCreated(Activity activity) {
         final long currentTime = System.currentTimeMillis();
+        final Context applicationContext = activity.getApplicationContext();
+        final String activityName = Utility.getActivityName(activity);
+        final SourceApplicationInfo sourceApplicationInfo =
+                SourceApplicationInfo.Factory.create(activity);
         Runnable handleActivityCreate = new Runnable() {
             @Override
             public void run() {
@@ -122,17 +126,18 @@ public void run() {
                             SessionInfo.getStoredSessionInfo();
                     if (lastSession != null) {
                         SessionLogger.logDeactivateApp(
-                                activity,
+                                applicationContext,
+                                activityName,
                                 lastSession,
                                 appId);
                     }
 
                     currentSession = new SessionInfo(currentTime, null);
-                    SourceApplicationInfo sourceApplicationInfo =
-                            SourceApplicationInfo.Factory.create(activity);
+
                     currentSession.setSourceApplicationInfo(sourceApplicationInfo);
                     SessionLogger.logActivateApp(
-                            activity,
+                            applicationContext,
+                            activityName,
                             sourceApplicationInfo,
                             appId);
                 }
@@ -141,18 +146,22 @@ public void run() {
         singleThreadExecutor.execute(handleActivityCreate);
     }
 
-    private static void onActivityResumed(final Activity activity) {
+    // Public in order to allow unity sdk to correctly log app events
+    public static void onActivityResumed(Activity activity) {
         foregroundActivityCount.incrementAndGet();
         cancelCurrentTask();
         final long currentTime = System.currentTimeMillis();
+        ActivityLifecycleTracker.currentActivityAppearTime = currentTime;
+        final Context applicationContext = activity.getApplicationContext();
+        final String activityName = Utility.getActivityName(activity);
         Runnable handleActivityResume = new Runnable() {
             @Override
             public void run() {
-                activity.getCallingActivity();
                 if (currentSession == null) {
                     currentSession = new SessionInfo(currentTime, null);
                     SessionLogger.logActivateApp(
-                            activity,
+                            applicationContext,
+                            activityName,
                             null,
                             appId);
                 } else if (currentSession.getSessionLastEventTime() != null) {
@@ -162,11 +171,13 @@ public void run() {
                         // We were suspended for a significant amount of time.
                         // Count this as a new session and log the old session
                         SessionLogger.logDeactivateApp(
-                                activity,
+                                applicationContext,
+                                activityName,
                                 currentSession,
                                 appId);
                         SessionLogger.logActivateApp(
-                                activity,
+                                applicationContext,
+                                activityName,
                                 null,
                                 appId);
                         currentSession = new SessionInfo(currentTime, null);
@@ -183,7 +194,7 @@ public void run() {
         singleThreadExecutor.execute(handleActivityResume);
     }
 
-    private static void onActivityPaused(final Activity activity) {
+    private static void onActivityPaused(Activity activity) {
         int count = foregroundActivityCount.decrementAndGet();
         if (count < 0) {
             // Our ref count can be off if a developer doesn't call activate
@@ -196,6 +207,10 @@ private static void onActivityPaused(final Activity activity) {
         cancelCurrentTask();
         final long currentTime = System.currentTimeMillis();
 
+        // Pull out this information now to avoid holding a reference to the activity
+        final Context applicationContext = activity.getApplicationContext();
+        final String activityName = Utility.getActivityName(activity);
+
         Runnable handleActivityPaused = new Runnable() {
             @Override
             public void run() {
@@ -215,12 +230,15 @@ public void run() {
                         public void run() {
                             if (foregroundActivityCount.get() <= 0) {
                                 SessionLogger.logDeactivateApp(
-                                        activity,
+                                        applicationContext,
+                                        activityName,
                                         currentSession,
                                         appId);
                                 SessionInfo.clearSavedSessionFromDisk();
                                 currentSession = null;
                             }
+
+                            currentFuture = null;
                         }
                     };
                     currentFuture = singleThreadExecutor.schedule(
@@ -230,6 +248,15 @@ public void run() {
 
                 }
 
+                long appearTime = ActivityLifecycleTracker.currentActivityAppearTime;
+                long timeSpentOnActivityInSeconds =  appearTime > 0
+                        ? (currentTime - appearTime) / 1000
+                        : 0;
+                AutomaticAnalyticsLogger.logActivityTimeSpentEvent(
+                        activityName,
+                        timeSpentOnActivityInSeconds
+                );
+
                 currentSession.writeSessionToDisk();
             }
         };
@@ -237,8 +264,8 @@ public void run() {
     }
 
     private static int getSessionTimeoutInSeconds() {
-        Utility.FetchedAppSettings settings =
-                Utility.getAppSettingsWithoutQuery(FacebookSdk.getApplicationId());
+        FetchedAppSettings settings =
+                FetchedAppSettingsManager.getAppSettingsWithoutQuery(FacebookSdk.getApplicationId());
         if (settings == null) {
             return Constants.getDefaultAppEventsSessionTimeoutInSeconds();
         }
@@ -253,13 +280,4 @@ private static void cancelCurrentTask() {
 
         currentFuture = null;
     }
-
-    private static void assertIsMainThread() {
-        if (BuildConfig.DEBUG){
-            boolean isMainThread = Looper.myLooper() == Looper.getMainLooper();
-            Assert.assertTrue(
-                    "Activity Lifecycle Callback not runnin on main thread",
-                    isMainThread);
-        }
-    }
 }
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/AppEventUtility.java b/facebook/src/main/java/com/facebook/appevents/internal/AppEventUtility.java
new file mode 100644
index 000000000..c9455ce57
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/internal/AppEventUtility.java
@@ -0,0 +1,49 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents.internal;
+
+import android.os.Looper;
+import android.support.v4.BuildConfig;
+
+import junit.framework.Assert;
+
+public class AppEventUtility {
+    public static void assertIsNotMainThread() {
+        if (BuildConfig.DEBUG) {
+            Assert.assertFalse(
+                    "Call cannot be made on the main thread",
+                    isMainThread());
+        }
+    }
+
+    public static void assertIsMainThread() {
+        if (BuildConfig.DEBUG) {
+            Assert.assertTrue(
+                    "Call must be made on the main thread",
+                    isMainThread());
+        }
+    }
+
+    private static boolean isMainThread() {
+        return Looper.myLooper() == Looper.getMainLooper();
+    }
+
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/AutomaticAnalyticsLogger.java b/facebook/src/main/java/com/facebook/appevents/internal/AutomaticAnalyticsLogger.java
new file mode 100644
index 000000000..bb9b7f6cb
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/internal/AutomaticAnalyticsLogger.java
@@ -0,0 +1,77 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents.internal;
+
+import android.app.Application;
+import android.content.Context;
+import android.os.Bundle;
+import android.util.Log;
+
+import com.facebook.FacebookSdk;
+import com.facebook.appevents.AppEventsLogger;
+import com.facebook.internal.FetchedAppSettings;
+import com.facebook.internal.FetchedAppSettingsManager;
+import com.facebook.internal.Validate;
+
+/**
+ * com.facebook.appevents.internal is solely for the use of other packages within the
+ * Facebook SDK for Android. Use of any of the classes in this package is
+ * unsupported, and they may be modified or removed without warning at any time.
+ */
+public class AutomaticAnalyticsLogger {
+    // Constants
+    private static final String TAG = AutomaticAnalyticsLogger.class.getCanonicalName();
+
+    public static void logActivateAppEvent() {
+        final Context context = FacebookSdk.getApplicationContext();
+        final String appId = FacebookSdk.getApplicationId();
+        final boolean autoLogAppEvents = FacebookSdk.getAutoLogAppEventsEnabled();
+        Validate.notNull(context, "context");
+        if (autoLogAppEvents) {
+            if (context instanceof Application) {
+                AppEventsLogger.activateApp((Application) context, appId);
+            } else { // Context is probably originated from ContentProvider or Mocked
+                Log.w(
+                    TAG,
+                    "Automatic logging of basic events will not happen, because " +
+                      "FacebookSdk.getApplicationContext() returns object that is not " +
+                      "instance of android.app.Application. Make sure you call " +
+                      "FacebookSdk.sdkInitialize() from Application class and pass " +
+                      "application context.");
+            }
+        }
+    }
+
+    public static void logActivityTimeSpentEvent(String activityName, long timeSpentInSeconds) {
+        final Context context = FacebookSdk.getApplicationContext();
+        final String appId = FacebookSdk.getApplicationId();
+        Validate.notNull(context, "context");
+        final FetchedAppSettings settings = FetchedAppSettingsManager.queryAppSettings(
+                appId, false);
+        if (settings != null && settings.getAutomaticLoggingEnabled() && timeSpentInSeconds > 0) {
+            AppEventsLogger appEventsLogger = AppEventsLogger.newLogger(context);
+            Bundle params = new Bundle(1);
+            params.putCharSequence(Constants.AA_TIME_SPENT_SCREEN_PARAMETER_NAME, activityName);
+            appEventsLogger.logEvent(
+                Constants.AA_TIME_SPENT_EVENT_NAME, timeSpentInSeconds, params);
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/Constants.java b/facebook/src/main/java/com/facebook/appevents/internal/Constants.java
index 9b0ef4fb1..7df30fb0c 100644
--- a/facebook/src/main/java/com/facebook/appevents/internal/Constants.java
+++ b/facebook/src/main/java/com/facebook/appevents/internal/Constants.java
@@ -22,6 +22,11 @@
 
 public class Constants {
     public static final String LOG_TIME_APP_EVENT_KEY = "_logTime";
+    public static final String EVENT_NAME_EVENT_KEY = "_eventName";
+
+    // The following are for Automatic Analytics events and parameters
+    public static final String AA_TIME_SPENT_EVENT_NAME = "fb_aa_time_spent_on_view";
+    public static final String AA_TIME_SPENT_SCREEN_PARAMETER_NAME = "fb_aa_time_spent_view_name";
 
     public static int getDefaultAppEventsSessionTimeoutInSeconds() {
         return 60;
diff --git a/samples/HelloFacebookSample/src/com/example/hellofacebook/HelloFacebookSampleApplication.java b/facebook/src/main/java/com/facebook/appevents/internal/InternalAppEventsLogger.java
similarity index 69%
rename from samples/HelloFacebookSample/src/com/example/hellofacebook/HelloFacebookSampleApplication.java
rename to facebook/src/main/java/com/facebook/appevents/internal/InternalAppEventsLogger.java
index a3e2d1eb3..1ab9d0d67 100644
--- a/samples/HelloFacebookSample/src/com/example/hellofacebook/HelloFacebookSampleApplication.java
+++ b/facebook/src/main/java/com/facebook/appevents/internal/InternalAppEventsLogger.java
@@ -18,18 +18,18 @@
  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  */
 
-package com.example.hellofacebook;
+package com.facebook.appevents.internal;
 
-import android.app.Application;
-
-import com.facebook.FacebookSdk;
+import com.facebook.AccessToken;
 import com.facebook.appevents.AppEventsLogger;
 
-public class HelloFacebookSampleApplication extends Application {
-    @Override
-    public void onCreate() {
-        super.onCreate();
-        FacebookSdk.sdkInitialize(getApplicationContext());
-        AppEventsLogger.activateApp(this);
+// This class extends the AppEventsLogger to be able to expose creating an app events logger
+// without passing in a context which is required when using AppEventsLogger.newLogger
+class InternalAppEventsLogger extends AppEventsLogger {
+    InternalAppEventsLogger(
+            String activityName,
+            String applicationId,
+            AccessToken accessToken) {
+        super(activityName, applicationId, accessToken);
     }
 }
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/SessionLogger.java b/facebook/src/main/java/com/facebook/appevents/internal/SessionLogger.java
index b0404c081..093519f17 100644
--- a/facebook/src/main/java/com/facebook/appevents/internal/SessionLogger.java
+++ b/facebook/src/main/java/com/facebook/appevents/internal/SessionLogger.java
@@ -20,11 +20,10 @@
 
 package com.facebook.appevents.internal;
 
-import android.app.Activity;
+import android.content.Context;
 import android.os.Bundle;
 import android.text.format.DateUtils;
 
-import com.facebook.FacebookSdk;
 import com.facebook.LoggingBehavior;
 import com.facebook.appevents.AppEventsConstants;
 import com.facebook.appevents.AppEventsLogger;
@@ -59,7 +58,8 @@
         };
 
     public static void logActivateApp(
-            Activity activity,
+            Context applicationContext,
+            String activityName,
             SourceApplicationInfo sourceApplicationInfo,
             String appId
     ) {
@@ -71,14 +71,19 @@ public static void logActivateApp(
         eventParams.putString(
                 AppEventsConstants.EVENT_PARAM_SOURCE_APPLICATION,
                 sourAppInfoStr);
-        AppEventsLogger.newLogger(
-                activity,
-                appId)
-                .logEvent(AppEventsConstants.EVENT_NAME_ACTIVATED_APP, eventParams);
+        AppEventsLogger logger = new InternalAppEventsLogger(
+                activityName,
+                appId,
+                null);
+        logger.logEvent(AppEventsConstants.EVENT_NAME_ACTIVATED_APP, eventParams);
+        if (logger.getFlushBehavior() != AppEventsLogger.FlushBehavior.EXPLICIT_ONLY) {
+          logger.flush();
+        }
     }
 
     public static void logDeactivateApp(
-            Activity activity,
+            Context applicationContext,
+            String activityName,
             SessionInfo sessionInfo,
             String appId) {
 
@@ -116,9 +121,10 @@ public static void logDeactivateApp(
         eventParams.putLong(Constants.LOG_TIME_APP_EVENT_KEY,
                 sessionInfo.getSessionLastEventTime() / 1000);
 
-        AppEventsLogger.newLogger(
-                activity,
-                appId)
+        new InternalAppEventsLogger(
+                activityName,
+                appId,
+                null)
                 .logEvent(
                     AppEventsConstants.EVENT_NAME_DEACTIVATED_APP,
                     (sessionLength / DateUtils.SECOND_IN_MILLIS),
diff --git a/facebook/src/main/java/com/facebook/applinks/AppLinkData.java b/facebook/src/main/java/com/facebook/applinks/AppLinkData.java
index 13b016860..c656c65ce 100644
--- a/facebook/src/main/java/com/facebook/applinks/AppLinkData.java
+++ b/facebook/src/main/java/com/facebook/applinks/AppLinkData.java
@@ -163,6 +163,9 @@ private static void fetchDeferredAppLinkFromServer(
                     AttributionIdentifiers.getAttributionIdentifiers(context),
                     AppEventsLogger.getAnonymousAppDeviceGUID(context),
                     FacebookSdk.getLimitEventAndDataUsage(context));
+            Utility.setAppEventExtendedDeviceInfoParameters(
+                    deferredApplinkParams,
+                    FacebookSdk.getApplicationContext());
             deferredApplinkParams.put("application_package_name", context.getPackageName());
         } catch (JSONException e) {
             throw new FacebookException("An error occurred while preparing deferred app link", e);
diff --git a/facebook/src/main/java/com/facebook/applinks/FacebookAppLinkResolver.java b/facebook/src/main/java/com/facebook/applinks/FacebookAppLinkResolver.java
index 807d92f1f..6045c7129 100644
--- a/facebook/src/main/java/com/facebook/applinks/FacebookAppLinkResolver.java
+++ b/facebook/src/main/java/com/facebook/applinks/FacebookAppLinkResolver.java
@@ -28,15 +28,20 @@
 import com.facebook.GraphRequest;
 import com.facebook.GraphResponse;
 
-import bolts.AppLink;
-import bolts.AppLinkResolver;
-import bolts.Continuation;
-import bolts.Task;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.util.*;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+
+import bolts.AppLink;
+import bolts.AppLinkResolver;
+import bolts.Continuation;
+import bolts.Task;
 
 /**
  * Provides an implementation for the {@link AppLinkResolver AppLinkResolver} interface that uses
@@ -93,7 +98,7 @@ public AppLink then(Task<Map<Uri, AppLink>> resolveUrisTask) throws Exception {
         StringBuilder graphRequestFields = new StringBuilder();
 
         for (Uri uri : uris) {
-            AppLink appLink = null;
+            AppLink appLink;
             synchronized (cachedAppLinks) {
                 appLink = cachedAppLinks.get(uri);
             }
@@ -153,7 +158,7 @@ public void onCompleted(GraphResponse response) {
                                 continue;
                             }
 
-                            JSONObject urlData = null;
+                            JSONObject urlData;
                             try {
                                 urlData = responseJson.getJSONObject(uri.toString());
                                 JSONObject appLinkData = urlData.getJSONObject(APP_LINK_KEY);
diff --git a/facebook/src/main/java/com/facebook/devicerequests/internal/DeviceRequestsHelper.java b/facebook/src/main/java/com/facebook/devicerequests/internal/DeviceRequestsHelper.java
new file mode 100644
index 000000000..8c0803f6a
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/devicerequests/internal/DeviceRequestsHelper.java
@@ -0,0 +1,177 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.devicerequests.internal;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.net.nsd.NsdManager;
+import android.net.nsd.NsdServiceInfo;
+import android.os.Build;
+
+import com.facebook.FacebookSdk;
+import com.facebook.internal.FetchedAppSettingsManager;
+import com.facebook.internal.SmartLoginOption;
+import com.facebook.internal.Utility;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.HashMap;
+
+/**
+ * com.facebook.devicerequests.internal is solely for the use of other packages within the
+ * Facebook SDK for Android. Use of any of the classes in this package is
+ * unsupported, and they may be modified or removed without warning at any time.
+ */
+public class DeviceRequestsHelper {
+
+    public static final String DEVICE_INFO_PARAM = "device_info";
+
+    static final String DEVICE_INFO_DEVICE = "device";
+    static final String DEVICE_INFO_MODEL = "model";
+
+    static final String SDK_HEADER = "fbsdk";
+    static final String SDK_FLAVOR = "android";
+
+    static final String SERVICE_TYPE = "_fb._tcp.";
+
+    private static HashMap<String, NsdManager.RegistrationListener> deviceRequestsListeners =
+            new HashMap<>();
+
+    public static String getDeviceInfo() {
+        // Device info
+        // We don't need all the information in Utility.setAppEventExtendedDeviceInfoParameters
+        // We only want the model so we can show it to the user, so they know which device
+        // the login request comes from
+        JSONObject deviceInfo = new JSONObject();
+        try {
+            deviceInfo.put(DEVICE_INFO_DEVICE, Build.DEVICE);
+            deviceInfo.put(DEVICE_INFO_MODEL, Build.MODEL);
+        } catch (JSONException ignored) {
+        }
+
+        return deviceInfo.toString();
+    }
+
+    public static boolean startAdvertisementService(String userCode) {
+        if (isAvailable()) {
+            return startAdvertisementServiceImpl(userCode);
+        }
+
+        return false;
+    }
+
+    /*
+    returns true if smart login is enabled and the android api level is supported.
+     */
+    public static boolean isAvailable() {
+        return (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) &&
+                FetchedAppSettingsManager.getAppSettingsWithoutQuery(FacebookSdk.getApplicationId()).
+                        getSmartLoginOptions().contains(SmartLoginOption.Enabled);
+    }
+
+    public static void cleanUpAdvertisementService(String userCode) {
+        cleanUpAdvertisementServiceImpl(userCode);
+    }
+
+    @TargetApi(16)
+    private static boolean startAdvertisementServiceImpl(final String userCode) {
+        if (deviceRequestsListeners.containsKey(userCode)) {
+            return true;
+        }
+
+        // Dots in the version will mess up the Bonjour DNS record parsing
+        String sdkVersion = FacebookSdk.getSdkVersion().replace('.', '|');
+        // Other SDKs that adopt this feature should use different flavor name
+        // The whole name should not exceed 60 characters
+        final String nsdServiceName = String.format("%s_%s_%s",
+                // static identifier
+                SDK_HEADER,
+                // sdk type and version
+                // client app parses the string based on this version
+                String.format("%s-%s",
+                        SDK_FLAVOR,
+                        sdkVersion
+                ),
+
+                // Additional fields should be added here
+
+                // short code for the login flow
+                userCode
+        );
+
+        NsdServiceInfo nsdLoginAdvertisementService = new NsdServiceInfo();
+        nsdLoginAdvertisementService.setServiceType(SERVICE_TYPE);
+        nsdLoginAdvertisementService.setServiceName(nsdServiceName);
+        nsdLoginAdvertisementService.setPort(80);
+
+        NsdManager nsdManager = (NsdManager)FacebookSdk
+                .getApplicationContext()
+                .getSystemService(Context.NSD_SERVICE);
+
+        NsdManager.RegistrationListener nsdRegistrationListener =
+                new NsdManager.RegistrationListener() {
+                    @Override
+                    public void onServiceRegistered(NsdServiceInfo NsdServiceInfo) {
+                        // Android may have changed the service name in order to resolve a conflict
+                        if (!nsdServiceName.equals(NsdServiceInfo.getServiceName())) {
+                            cleanUpAdvertisementService(userCode);
+                        }
+                    }
+
+                    @Override
+                    public void onServiceUnregistered(NsdServiceInfo serviceInfo) {
+                    }
+
+                    @Override
+                    public void onRegistrationFailed(NsdServiceInfo serviceInfo, int errorCode) {
+                        cleanUpAdvertisementService(userCode);
+                    }
+
+                    @Override
+                    public void onUnregistrationFailed(NsdServiceInfo serviceInfo, int errorCode) {
+                    }
+                };
+
+        deviceRequestsListeners.put(userCode, nsdRegistrationListener);
+
+        nsdManager.registerService(nsdLoginAdvertisementService,
+                NsdManager.PROTOCOL_DNS_SD,
+                nsdRegistrationListener);
+
+        return true;
+    }
+
+    @TargetApi(16)
+    private static void cleanUpAdvertisementServiceImpl(String userCode) {
+        NsdManager.RegistrationListener nsdRegistrationListener =
+                deviceRequestsListeners.get(userCode);
+        if (nsdRegistrationListener != null) {
+            NsdManager nsdManager = (NsdManager)FacebookSdk
+                    .getApplicationContext()
+                    .getSystemService(Context.NSD_SERVICE);
+
+            nsdManager.unregisterService(nsdRegistrationListener);
+
+            deviceRequestsListeners.remove(userCode);
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/internal/AnalyticsEvents.java b/facebook/src/main/java/com/facebook/internal/AnalyticsEvents.java
index 753eec00e..bf23211b2 100644
--- a/facebook/src/main/java/com/facebook/internal/AnalyticsEvents.java
+++ b/facebook/src/main/java/com/facebook/internal/AnalyticsEvents.java
@@ -113,4 +113,6 @@
 
     public static final String EVENT_DEVICE_SHARE_BUTTON_CREATE = "fb_device_share_button_create";
     public static final String EVENT_DEVICE_SHARE_BUTTON_DID_TAP= "fb_device_share_button_did_tap";
+
+    public static final String EVENT_SMART_LOGIN_SERVICE = "fb_smart_login_service";
 }
diff --git a/facebook/src/main/java/com/facebook/internal/AttributionIdentifiers.java b/facebook/src/main/java/com/facebook/internal/AttributionIdentifiers.java
index 0e94e9c05..8a314e367 100644
--- a/facebook/src/main/java/com/facebook/internal/AttributionIdentifiers.java
+++ b/facebook/src/main/java/com/facebook/internal/AttributionIdentifiers.java
@@ -162,6 +162,13 @@ private static AttributionIdentifiers getAndroidIdViaService(Context context) {
     }
 
     public static AttributionIdentifiers getAttributionIdentifiers(Context context) {
+        if (Looper.myLooper() == Looper.getMainLooper()) {
+            // Calling this method from the main thread might cause this app to freeze.
+            Log.e(
+                AttributionIdentifiers.TAG,
+                "getAttributionIdentifiers should not be called from the main thread");
+        }
+
         if (recentlyFetchedIdentifiers != null &&
             System.currentTimeMillis() - recentlyFetchedIdentifiers.fetchTime <
                     IDENTIFIER_REFRESH_INTERVAL_MILLIS) {
diff --git a/facebook/src/main/java/com/facebook/internal/CollectionMapper.java b/facebook/src/main/java/com/facebook/internal/CollectionMapper.java
index 6ab0f110a..191073e35 100644
--- a/facebook/src/main/java/com/facebook/internal/CollectionMapper.java
+++ b/facebook/src/main/java/com/facebook/internal/CollectionMapper.java
@@ -22,7 +22,6 @@
 
 import com.facebook.FacebookException;
 
-import java.util.HashSet;
 import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.List;
diff --git a/facebook/src/main/java/com/facebook/internal/CustomTab.java b/facebook/src/main/java/com/facebook/internal/CustomTab.java
index 863f36f37..91c345222 100644
--- a/facebook/src/main/java/com/facebook/internal/CustomTab.java
+++ b/facebook/src/main/java/com/facebook/internal/CustomTab.java
@@ -27,8 +27,9 @@
 import android.os.Bundle;
 import android.support.customtabs.CustomTabsIntent;
 
+import com.facebook.FacebookSdk;
+
 public class CustomTab {
-    private static final String CHROME_PACKAGE = "com.android.chrome";
 
     private Uri uri;
 
@@ -38,13 +39,14 @@ public CustomTab(String action, Bundle parameters) {
         }
         uri = Utility.buildUri(
                 ServerProtocol.getDialogAuthority(),
-                ServerProtocol.getAPIVersion() + "/" + ServerProtocol.DIALOG_PATH + action,
+                FacebookSdk.getGraphApiVersion() + "/" + ServerProtocol.DIALOG_PATH + action,
                 parameters);
     }
 
-    public void openCustomTab(Activity activity) {
+    public void openCustomTab(Activity activity, String packageName) {
         CustomTabsIntent customTabsIntent = new CustomTabsIntent.Builder().build();
-        customTabsIntent.intent.setPackage(CHROME_PACKAGE);
+        customTabsIntent.intent.setPackage(packageName);
+        customTabsIntent.intent.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);
         customTabsIntent.launchUrl(activity, uri);
     }
 }
diff --git a/facebook/src/main/java/com/facebook/internal/DialogPresenter.java b/facebook/src/main/java/com/facebook/internal/DialogPresenter.java
index d2f934bd3..bb8584922 100644
--- a/facebook/src/main/java/com/facebook/internal/DialogPresenter.java
+++ b/facebook/src/main/java/com/facebook/internal/DialogPresenter.java
@@ -25,7 +25,6 @@
 import android.content.Intent;
 import android.net.Uri;
 import android.os.Bundle;
-import android.support.v4.app.Fragment;
 
 import com.facebook.FacebookActivity;
 import com.facebook.FacebookException;
@@ -72,7 +71,7 @@ public static void present(AppCall appCall, FragmentWrapper fragmentWrapper) {
 
     public static boolean canPresentNativeDialogWithFeature(
             DialogFeature feature) {
-        return getProtocolVersionForNativeDialog(feature)
+        return getProtocolVersionForNativeDialog(feature).getProtocolVersion()
                 != NativeProtocol.NO_PROTOCOL_AVAILABLE;
     }
 
@@ -185,7 +184,9 @@ public static void setupAppCallForNativeDialog(
             DialogFeature feature) {
         Context context = FacebookSdk.getApplicationContext();
         String action = feature.getAction();
-        int protocolVersion = getProtocolVersionForNativeDialog(feature);
+        NativeProtocol.ProtocolVersionQueryResult protocolVersionResult =
+                getProtocolVersionForNativeDialog(feature);
+        int protocolVersion = protocolVersionResult.getProtocolVersion();
         if (protocolVersion == NativeProtocol.NO_PROTOCOL_AVAILABLE) {
             throw new FacebookException(
                     "Cannot present this dialog. This likely means that the " +
@@ -208,7 +209,7 @@ public static void setupAppCallForNativeDialog(
                 context,
                 appCall.getCallId().toString(),
                 action,
-                protocolVersion,
+                protocolVersionResult,
                 params);
         if (intent == null) {
             throw new FacebookException(
@@ -224,8 +225,8 @@ private static Uri getDialogWebFallbackUri(DialogFeature feature) {
         String action = feature.getAction();
         String applicationId = FacebookSdk.getApplicationId();
 
-        Utility.DialogFeatureConfig config =
-                Utility.getDialogFeatureConfig(applicationId, action, featureName);
+        FetchedAppSettings.DialogFeatureConfig config =
+                FetchedAppSettings.getDialogFeatureConfig(applicationId, action, featureName);
         Uri fallbackUrl = null;
         if (config != null) {
             fallbackUrl = config.getFallbackUrl();
@@ -234,7 +235,7 @@ private static Uri getDialogWebFallbackUri(DialogFeature feature) {
         return fallbackUrl;
     }
 
-    public static int getProtocolVersionForNativeDialog(
+    public static NativeProtocol.ProtocolVersionQueryResult getProtocolVersionForNativeDialog(
             DialogFeature feature) {
         String applicationId = FacebookSdk.getApplicationId();
         String action = feature.getAction();
@@ -251,8 +252,8 @@ public static int getProtocolVersionForNativeDialog(
             DialogFeature feature) {
         // Return the value from DialogFeatureConfig if available. Otherwise, just
         // default to the min-version
-        Utility.DialogFeatureConfig config =
-                Utility.getDialogFeatureConfig(applicationId, actionName, feature.name());
+        FetchedAppSettings.DialogFeatureConfig config =
+                FetchedAppSettings.getDialogFeatureConfig(applicationId, actionName, feature.name());
         if (config != null) {
             return config.getVersionSpec();
         } else {
diff --git a/facebook/src/main/java/com/facebook/internal/FacebookDialogFragment.java b/facebook/src/main/java/com/facebook/internal/FacebookDialogFragment.java
index fad56ee93..57d78ed6e 100644
--- a/facebook/src/main/java/com/facebook/internal/FacebookDialogFragment.java
+++ b/facebook/src/main/java/com/facebook/internal/FacebookDialogFragment.java
@@ -118,11 +118,18 @@ public Dialog onCreateDialog(Bundle savedInstanceState) {
         return dialog;
     }
 
+    @Override
+    public void onResume () {
+        super.onResume();
+        if (this.dialog instanceof WebDialog) {
+            ((WebDialog)this.dialog).resize();
+        }
+    }
+
     @Override
     public void onConfigurationChanged (Configuration newConfig) {
         super.onConfigurationChanged(newConfig);
-
-        if (this.dialog instanceof WebDialog) {
+        if (this.dialog instanceof WebDialog && isResumed()) {
             ((WebDialog)this.dialog).resize();
         }
     }
diff --git a/facebook/src/main/java/com/facebook/internal/FacebookInitProvider.java b/facebook/src/main/java/com/facebook/internal/FacebookInitProvider.java
new file mode 100644
index 000000000..e50f0f3af
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/internal/FacebookInitProvider.java
@@ -0,0 +1,60 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.facebook.internal;
+
+import android.content.ContentProvider;
+import android.content.ContentValues;
+import android.database.Cursor;
+import android.net.Uri;
+import android.util.Log;
+
+import com.facebook.FacebookSdk;
+
+public final class FacebookInitProvider extends ContentProvider {
+    private static final String TAG = FacebookInitProvider.class.getSimpleName();
+
+    @Override
+    @SuppressWarnings("deprecation")
+    public boolean onCreate() {
+        try {
+            FacebookSdk.sdkInitialize(getContext());
+        } catch (Exception ex) {
+            Log.i(TAG, "Failed to auto initialize the Facebook SDK", ex);
+        }
+        return false;
+    }
+
+    @Override
+    public Cursor query(
+            final Uri uri,
+            final String[] projection,
+            final String selection,
+            final String[] selectionArgs,
+            final String sortOrder) {
+        return null;
+    }
+
+    @Override
+    public String getType(final Uri uri) {
+        return null;
+    }
+
+    @Override
+    public Uri insert(final Uri uri, final ContentValues values) {
+        return null;
+    }
+
+    @Override
+    public int delete(final Uri uri, final String selection, final String[] selectionArgs) {
+        return 0;
+    }
+
+    @Override
+    public int update(
+            final Uri uri,
+            final ContentValues values,
+            final String selection,
+            final String[] selectionArgs) {
+        return 0;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/internal/FetchedAppSettings.java b/facebook/src/main/java/com/facebook/internal/FetchedAppSettings.java
new file mode 100644
index 000000000..8b6728f51
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/internal/FetchedAppSettings.java
@@ -0,0 +1,238 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.internal;
+
+import android.net.Uri;
+
+import org.json.JSONArray;
+import org.json.JSONObject;
+
+import java.util.EnumSet;
+import java.util.Map;
+
+/**
+ * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
+ * Android. Use of any of the classes in this package is unsupported, and they may be modified or
+ * removed without warning at any time.
+ */
+public final class FetchedAppSettings {
+    private boolean supportsImplicitLogging;
+    private String nuxContent;
+    private boolean nuxEnabled;
+    private boolean customTabsEnabled;
+    private int sessionTimeoutInSeconds;
+    private EnumSet<SmartLoginOption> smartLoginOptions;
+    private Map<String, Map<String, DialogFeatureConfig>> dialogConfigMap;
+    private boolean automaticLoggingEnabled;
+    private FacebookRequestErrorClassification errorClassification;
+    private String smartLoginBookmarkIconURL;
+    private String smartLoginMenuIconURL;
+
+    public FetchedAppSettings(boolean supportsImplicitLogging,
+                               String nuxContent,
+                               boolean nuxEnabled,
+                               boolean customTabsEnabled,
+                               int sessionTimeoutInSeconds,
+                               EnumSet<SmartLoginOption> smartLoginOptions,
+                               Map<String, Map<String, DialogFeatureConfig>> dialogConfigMap,
+                               boolean automaticLoggingEnabled,
+                               FacebookRequestErrorClassification errorClassification,
+                               String smartLoginBookmarkIconURL,
+                               String smartLoginMenuIconURL
+    ) {
+        this.supportsImplicitLogging = supportsImplicitLogging;
+        this.nuxContent = nuxContent;
+        this.nuxEnabled = nuxEnabled;
+        this.customTabsEnabled = customTabsEnabled;
+        this.dialogConfigMap = dialogConfigMap;
+        this.errorClassification = errorClassification;
+        this.sessionTimeoutInSeconds = sessionTimeoutInSeconds;
+        this.automaticLoggingEnabled = automaticLoggingEnabled;
+        this.smartLoginOptions = smartLoginOptions;
+        this.smartLoginBookmarkIconURL = smartLoginBookmarkIconURL;
+        this.smartLoginMenuIconURL = smartLoginMenuIconURL;
+    }
+
+    public boolean supportsImplicitLogging() {
+        return supportsImplicitLogging;
+    }
+
+    public String getNuxContent() {
+        return nuxContent;
+    }
+
+    public boolean getNuxEnabled() {
+        return nuxEnabled;
+    }
+
+    public boolean getCustomTabsEnabled() {
+        return customTabsEnabled;
+    }
+
+    public int getSessionTimeoutInSeconds() {
+        return sessionTimeoutInSeconds;
+    }
+
+    public boolean getAutomaticLoggingEnabled() {
+        return automaticLoggingEnabled;
+    }
+
+    public EnumSet<SmartLoginOption> getSmartLoginOptions() {
+        return smartLoginOptions;
+    }
+
+    public Map<String, Map<String, DialogFeatureConfig>> getDialogConfigurations() {
+        return dialogConfigMap;
+    }
+
+    public FacebookRequestErrorClassification getErrorClassification() {
+        return errorClassification;
+    }
+
+    public String getSmartLoginBookmarkIconURL() { return smartLoginBookmarkIconURL; }
+    public String getSmartLoginMenuIconURL() { return smartLoginMenuIconURL; }
+
+
+    public static class DialogFeatureConfig {
+        private static final String DIALOG_CONFIG_DIALOG_NAME_FEATURE_NAME_SEPARATOR = "\\|";
+        private static final String DIALOG_CONFIG_NAME_KEY = "name";
+        private static final String DIALOG_CONFIG_VERSIONS_KEY = "versions";
+        private static final String DIALOG_CONFIG_URL_KEY = "url";
+
+        public static DialogFeatureConfig parseDialogConfig(JSONObject dialogConfigJSON) {
+            String dialogNameWithFeature = dialogConfigJSON.optString(DIALOG_CONFIG_NAME_KEY);
+            if (Utility.isNullOrEmpty(dialogNameWithFeature)) {
+                return null;
+            }
+
+            String[] components = dialogNameWithFeature.split(
+                    DIALOG_CONFIG_DIALOG_NAME_FEATURE_NAME_SEPARATOR);
+            if (components.length != 2) {
+                // We expect the format to be dialogName|FeatureName, where both components are
+                // non-empty.
+                return null;
+            }
+
+            String dialogName = components[0];
+            String featureName = components[1];
+            if (Utility.isNullOrEmpty(dialogName) || Utility.isNullOrEmpty(featureName)) {
+                return null;
+            }
+
+            String urlString = dialogConfigJSON.optString(DIALOG_CONFIG_URL_KEY);
+            Uri fallbackUri = null;
+            if (!Utility.isNullOrEmpty(urlString)) {
+                fallbackUri = Uri.parse(urlString);
+            }
+
+            JSONArray versionsJSON = dialogConfigJSON.optJSONArray(DIALOG_CONFIG_VERSIONS_KEY);
+
+            int[] featureVersionSpec = parseVersionSpec(versionsJSON);
+
+            return new DialogFeatureConfig(
+                    dialogName, featureName, fallbackUri, featureVersionSpec);
+        }
+
+        private static int[] parseVersionSpec(JSONArray versionsJSON) {
+            // Null signifies no overrides to the min-version as specified by the SDK.
+            // An empty array would basically turn off the dialog (i.e no supported versions), so
+            // DON'T default to that.
+            int[] versionSpec = null;
+            if (versionsJSON != null) {
+                int numVersions = versionsJSON.length();
+                versionSpec = new int[numVersions];
+                for (int i = 0; i < numVersions; i++) {
+                    // See if the version was stored directly as an Integer
+                    int version = versionsJSON.optInt(i, NativeProtocol.NO_PROTOCOL_AVAILABLE);
+                    if (version == NativeProtocol.NO_PROTOCOL_AVAILABLE) {
+                        // If not, then see if it was stored as a string that can be parsed out.
+                        // If even that fails, then we will leave it as NO_PROTOCOL_AVAILABLE
+                        String versionString = versionsJSON.optString(i);
+                        if (!Utility.isNullOrEmpty(versionString)) {
+                            try {
+                                version = Integer.parseInt(versionString);
+                            } catch (NumberFormatException nfe) {
+                                Utility.logd(Utility.LOG_TAG, nfe);
+                                version = NativeProtocol.NO_PROTOCOL_AVAILABLE;
+                            }
+                        }
+                    }
+
+                    versionSpec[i] = version;
+                }
+            }
+
+            return versionSpec;
+        }
+
+        private String dialogName;
+        private String featureName;
+        private Uri fallbackUrl;
+        private int[] featureVersionSpec;
+
+        private DialogFeatureConfig(
+                String dialogName,
+                String featureName,
+                Uri fallbackUrl,
+                int[] featureVersionSpec) {
+            this.dialogName = dialogName;
+            this.featureName = featureName;
+            this.fallbackUrl = fallbackUrl;
+            this.featureVersionSpec = featureVersionSpec;
+        }
+
+        public String getDialogName() {
+            return dialogName;
+        }
+
+        public String getFeatureName() {
+            return featureName;
+        }
+
+        public Uri getFallbackUrl() {
+            return fallbackUrl;
+        }
+
+        public int[] getVersionSpec() {
+            return featureVersionSpec;
+        }
+    }
+
+    public static DialogFeatureConfig getDialogFeatureConfig(
+            String applicationId,
+            String actionName,
+            String featureName) {
+        if (Utility.isNullOrEmpty(actionName) || Utility.isNullOrEmpty(featureName)) {
+            return null;
+        }
+
+        FetchedAppSettings settings = FetchedAppSettingsManager.
+                getAppSettingsWithoutQuery(applicationId);
+        if (settings != null) {
+            Map<String, DialogFeatureConfig> featureMap =
+                    settings.getDialogConfigurations().get(actionName);
+            if (featureMap != null) {
+                return featureMap.get(featureName);
+            }
+        }
+        return null;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/internal/FetchedAppSettingsManager.java b/facebook/src/main/java/com/facebook/internal/FetchedAppSettingsManager.java
new file mode 100644
index 000000000..901e89b05
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/internal/FetchedAppSettingsManager.java
@@ -0,0 +1,240 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.internal;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.text.TextUtils;
+
+import com.facebook.FacebookSdk;
+import com.facebook.GraphRequest;
+import com.facebook.appevents.internal.AutomaticAnalyticsLogger;
+import com.facebook.appevents.internal.Constants;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.atomic.AtomicBoolean;
+
+/**
+ * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
+ * Android. Use of any of the classes in this package is unsupported, and they may be modified or
+ * removed without warning at any time.
+ */
+public final class FetchedAppSettingsManager {
+    private static final String APP_SETTINGS_PREFS_STORE =
+            "com.facebook.internal.preferences.APP_SETTINGS";
+    private static final String APP_SETTINGS_PREFS_KEY_FORMAT =
+            "com.facebook.internal.APP_SETTINGS.%s";
+    private static final String APP_SETTING_SUPPORTS_IMPLICIT_SDK_LOGGING =
+            "supports_implicit_sdk_logging";
+    private static final String APP_SETTING_NUX_CONTENT = "gdpv4_nux_content";
+    private static final String APP_SETTING_NUX_ENABLED = "gdpv4_nux_enabled";
+    private static final String APP_SETTING_CUSTOM_TABS_ENABLED =
+            "gdpv4_chrome_custom_tabs_enabled";
+    private static final String APP_SETTING_DIALOG_CONFIGS = "android_dialog_configs";
+    private static final String APP_SETTING_ANDROID_SDK_ERROR_CATEGORIES =
+            "android_sdk_error_categories";
+    private static final String APP_SETTING_APP_EVENTS_SESSION_TIMEOUT =
+            "app_events_session_timeout";
+    private static final String APP_SETTING_APP_EVENTS_FEATURE_BITMASK =
+            "app_events_feature_bitmask";
+    private static final int AUTOMATIC_LOGGING_ENABLED_BITMASK_FIELD = 1 << 3;
+    private static final String APP_SETTING_SMART_LOGIN_OPTIONS =
+            "seamless_login";
+    private static final String SMART_LOGIN_BOOKMARK_ICON_URL = "smart_login_bookmark_icon_url";
+    private static final String SMART_LOGIN_MENU_ICON_URL = "smart_login_menu_icon_url";
+
+    private static final String[] APP_SETTING_FIELDS = new String[]{
+            APP_SETTING_SUPPORTS_IMPLICIT_SDK_LOGGING,
+            APP_SETTING_NUX_CONTENT,
+            APP_SETTING_NUX_ENABLED,
+            APP_SETTING_CUSTOM_TABS_ENABLED,
+            APP_SETTING_DIALOG_CONFIGS,
+            APP_SETTING_ANDROID_SDK_ERROR_CATEGORIES,
+            APP_SETTING_APP_EVENTS_SESSION_TIMEOUT,
+            APP_SETTING_APP_EVENTS_FEATURE_BITMASK,
+            APP_SETTING_SMART_LOGIN_OPTIONS,
+            SMART_LOGIN_BOOKMARK_ICON_URL,
+            SMART_LOGIN_MENU_ICON_URL,
+    };
+    private static final String APPLICATION_FIELDS = "fields";
+
+    private static Map<String, FetchedAppSettings> fetchedAppSettings =
+            new ConcurrentHashMap<String, FetchedAppSettings>();
+    private static AtomicBoolean loadingSettings = new AtomicBoolean(false);
+
+    public static void loadAppSettingsAsync() {
+        final Context context = FacebookSdk.getApplicationContext();
+        final String applicationId = FacebookSdk.getApplicationId();
+        boolean canStartLoading = loadingSettings.compareAndSet(false, true);
+        if (Utility.isNullOrEmpty(applicationId) ||
+                fetchedAppSettings.containsKey(applicationId) ||
+                !canStartLoading) {
+            return;
+        }
+
+        final String settingsKey = String.format(APP_SETTINGS_PREFS_KEY_FORMAT, applicationId);
+
+        FacebookSdk.getExecutor().execute(new Runnable() {
+            @Override
+            public void run() {
+                // See if we had a cached copy and use that immediately.
+                SharedPreferences sharedPrefs = context.getSharedPreferences(
+                        APP_SETTINGS_PREFS_STORE,
+                        Context.MODE_PRIVATE);
+                String settingsJSONString = sharedPrefs.getString(settingsKey, null);
+                if (!Utility.isNullOrEmpty(settingsJSONString)) {
+                    JSONObject settingsJSON = null;
+                    try {
+                        settingsJSON = new JSONObject(settingsJSONString);
+                    } catch (JSONException je) {
+                        Utility.logd(Utility.LOG_TAG, je);
+                    }
+                    if (settingsJSON != null) {
+                        parseAppSettingsFromJSON(applicationId, settingsJSON);
+                    }
+                }
+
+                JSONObject resultJSON = getAppSettingsQueryResponse(applicationId);
+                if (resultJSON != null) {
+                    parseAppSettingsFromJSON(applicationId, resultJSON);
+
+                    sharedPrefs.edit()
+                            .putString(settingsKey, resultJSON.toString())
+                            .apply();
+                }
+
+                // Start log activate & deactivate app events, in case autoLogAppEvents flag is set
+                AutomaticAnalyticsLogger.logActivateAppEvent();
+
+                loadingSettings.set(false);
+            }
+        });
+    }
+
+    // This call only gets the app settings if they're already fetched
+    public static FetchedAppSettings getAppSettingsWithoutQuery(final String applicationId) {
+        return applicationId != null ? fetchedAppSettings.get(applicationId) : null;
+    }
+
+    // Note that this method makes a synchronous Graph API call, so should not be called from the
+    // main thread.
+    public static FetchedAppSettings queryAppSettings(
+            final String applicationId,
+            final boolean forceRequery) {
+        // Cache the last app checked results.
+        if (!forceRequery && fetchedAppSettings.containsKey(applicationId)) {
+            return fetchedAppSettings.get(applicationId);
+        }
+
+        JSONObject response = getAppSettingsQueryResponse(applicationId);
+        if (response == null) {
+            return null;
+        }
+
+        return parseAppSettingsFromJSON(applicationId, response);
+    }
+
+    private static FetchedAppSettings parseAppSettingsFromJSON(
+            String applicationId,
+            JSONObject settingsJSON) {
+        JSONArray errorClassificationJSON =
+                settingsJSON.optJSONArray(APP_SETTING_ANDROID_SDK_ERROR_CATEGORIES);
+        FacebookRequestErrorClassification errorClassification =
+                errorClassificationJSON == null
+                        ? FacebookRequestErrorClassification.getDefaultErrorClassification()
+                        : FacebookRequestErrorClassification.createFromJSON(
+                        errorClassificationJSON
+                );
+        int featureBitmask = settingsJSON.optInt(APP_SETTING_APP_EVENTS_FEATURE_BITMASK,0);
+        boolean automaticLoggingEnabled =
+                (featureBitmask & AUTOMATIC_LOGGING_ENABLED_BITMASK_FIELD) != 0;
+        FetchedAppSettings result = new FetchedAppSettings(
+                settingsJSON.optBoolean(APP_SETTING_SUPPORTS_IMPLICIT_SDK_LOGGING, false),
+                settingsJSON.optString(APP_SETTING_NUX_CONTENT, ""),
+                settingsJSON.optBoolean(APP_SETTING_NUX_ENABLED, false),
+                settingsJSON.optBoolean(APP_SETTING_CUSTOM_TABS_ENABLED, false),
+                settingsJSON.optInt(
+                        APP_SETTING_APP_EVENTS_SESSION_TIMEOUT,
+                        Constants.getDefaultAppEventsSessionTimeoutInSeconds()),
+                SmartLoginOption.parseOptions(settingsJSON.optLong(APP_SETTING_SMART_LOGIN_OPTIONS)),
+                parseDialogConfigurations(settingsJSON.optJSONObject(APP_SETTING_DIALOG_CONFIGS)),
+                automaticLoggingEnabled,
+                errorClassification,
+                settingsJSON.optString(SMART_LOGIN_BOOKMARK_ICON_URL),
+                settingsJSON.optString(SMART_LOGIN_MENU_ICON_URL)
+        );
+
+        fetchedAppSettings.put(applicationId, result);
+
+        return result;
+    }
+
+    // Note that this method makes a synchronous Graph API call, so should not be called from the
+    // main thread.
+    private static JSONObject getAppSettingsQueryResponse(String applicationId) {
+        Bundle appSettingsParams = new Bundle();
+        appSettingsParams.putString(APPLICATION_FIELDS, TextUtils.join(",", APP_SETTING_FIELDS));
+
+        GraphRequest request = GraphRequest.newGraphPathRequest(null, applicationId, null);
+        request.setSkipClientToken(true);
+        request.setParameters(appSettingsParams);
+
+        return request.executeAndWait().getJSONObject();
+    }
+
+    private static Map<String, Map<String, FetchedAppSettings.DialogFeatureConfig>> parseDialogConfigurations(
+            JSONObject dialogConfigResponse) {
+        HashMap<String, Map<String, FetchedAppSettings.DialogFeatureConfig>> dialogConfigMap
+                = new HashMap<String, Map<String, FetchedAppSettings.DialogFeatureConfig>>();
+
+        if (dialogConfigResponse != null) {
+            JSONArray dialogConfigData = dialogConfigResponse.optJSONArray("data");
+            if (dialogConfigData != null) {
+                for (int i = 0; i < dialogConfigData.length(); i++) {
+                    FetchedAppSettings.DialogFeatureConfig dialogConfig =
+                            FetchedAppSettings.DialogFeatureConfig.parseDialogConfig(
+                            dialogConfigData.optJSONObject(i));
+                    if (dialogConfig == null) {
+                        continue;
+                    }
+
+                    String dialogName = dialogConfig.getDialogName();
+                    Map<String, FetchedAppSettings.DialogFeatureConfig> featureMap =
+                            dialogConfigMap.get(dialogName);
+                    if (featureMap == null) {
+                        featureMap = new HashMap<String, FetchedAppSettings.DialogFeatureConfig>();
+                        dialogConfigMap.put(dialogName, featureMap);
+                    }
+                    featureMap.put(dialogConfig.getFeatureName(), dialogConfig);
+                }
+            }
+        }
+
+        return dialogConfigMap;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/internal/FileLruCache.java b/facebook/src/main/java/com/facebook/internal/FileLruCache.java
index 72e73d467..fcbc1c501 100644
--- a/facebook/src/main/java/com/facebook/internal/FileLruCache.java
+++ b/facebook/src/main/java/com/facebook/internal/FileLruCache.java
@@ -127,7 +127,7 @@ public InputStream get(String key) throws IOException {
     public InputStream get(String key, String contentTag) throws IOException {
         File file = new File(this.directory, Utility.md5hash(key));
 
-        FileInputStream input = null;
+        FileInputStream input;
         try {
             input = new FileInputStream(file);
         } catch (IOException e) {
@@ -184,7 +184,7 @@ public OutputStream openPutStream(final String key, String contentTag) throws IO
             throw new IOException("Could not create file at " + buffer.getAbsolutePath());
         }
 
-        FileOutputStream file = null;
+        FileOutputStream file;
         try {
             file = new FileOutputStream(buffer);
         } catch (FileNotFoundException e) {
@@ -448,7 +448,7 @@ static JSONObject readHeader(InputStream stream) throws IOException {
             }
 
             String headerString = new String(headerBytes);
-            JSONObject header = null;
+            JSONObject header;
             JSONTokener tokener = new JSONTokener(headerString);
             try {
                 Object parsed = tokener.nextValue();
diff --git a/facebook/src/main/java/com/facebook/internal/GraphUtil.java b/facebook/src/main/java/com/facebook/internal/GraphUtil.java
index 93b4566ed..ea60a38d1 100644
--- a/facebook/src/main/java/com/facebook/internal/GraphUtil.java
+++ b/facebook/src/main/java/com/facebook/internal/GraphUtil.java
@@ -22,17 +22,11 @@
 
 import com.facebook.FacebookException;
 import com.facebook.internal.NativeProtocol;
-import com.facebook.internal.Validate;
+
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.List;
-import java.util.Locale;
-
 /**
  * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
  * Android. Use of any of the classes in this package is unsupported, and they may be modified or
diff --git a/facebook/src/main/java/com/facebook/internal/ImageDownloader.java b/facebook/src/main/java/com/facebook/internal/ImageDownloader.java
index 9309f2beb..14b308920 100644
--- a/facebook/src/main/java/com/facebook/internal/ImageDownloader.java
+++ b/facebook/src/main/java/com/facebook/internal/ImageDownloader.java
@@ -33,8 +33,6 @@
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.net.HttpURLConnection;
-import java.net.URI;
-import java.net.URISyntaxException;
 import java.net.URL;
 import java.util.HashMap;
 import java.util.Map;
diff --git a/facebook/src/main/java/com/facebook/internal/ImageRequest.java b/facebook/src/main/java/com/facebook/internal/ImageRequest.java
index f0dbfbf3e..acbe35ebb 100644
--- a/facebook/src/main/java/com/facebook/internal/ImageRequest.java
+++ b/facebook/src/main/java/com/facebook/internal/ImageRequest.java
@@ -23,8 +23,6 @@
 import android.content.Context;
 import android.net.Uri;
 
-import java.net.URI;
-import java.net.URISyntaxException;
 import java.util.Locale;
 
 /**
diff --git a/facebook/src/main/java/com/facebook/internal/ImageResponseCache.java b/facebook/src/main/java/com/facebook/internal/ImageResponseCache.java
index 847c441d4..0a4b47583 100644
--- a/facebook/src/main/java/com/facebook/internal/ImageResponseCache.java
+++ b/facebook/src/main/java/com/facebook/internal/ImageResponseCache.java
@@ -29,9 +29,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.HttpURLConnection;
-import java.net.URI;
-import java.net.URISyntaxException;
-import java.net.URL;
 
 /**
  * com.facebook.internal is solely for the use of other packages within the
diff --git a/facebook/src/main/java/com/facebook/internal/JsonUtil.java b/facebook/src/main/java/com/facebook/internal/JsonUtil.java
index 021f9a7ef..b009e11b2 100644
--- a/facebook/src/main/java/com/facebook/internal/JsonUtil.java
+++ b/facebook/src/main/java/com/facebook/internal/JsonUtil.java
@@ -34,7 +34,7 @@
 class JsonUtil {
     static void jsonObjectClear(JSONObject jsonObject) {
         @SuppressWarnings("unchecked")
-        Iterator<String> keys = (Iterator<String>) jsonObject.keys();
+        Iterator<String> keys = jsonObject.keys();
         while (keys.hasNext()) {
             keys.next();
             keys.remove();
@@ -43,7 +43,7 @@ static void jsonObjectClear(JSONObject jsonObject) {
 
     static boolean jsonObjectContainsValue(JSONObject jsonObject, Object value) {
         @SuppressWarnings("unchecked")
-        Iterator<String> keys = (Iterator<String>) jsonObject.keys();
+        Iterator<String> keys = jsonObject.keys();
         while (keys.hasNext()) {
             Object thisValue = jsonObject.opt(keys.next());
             if (thisValue != null && thisValue.equals(value)) {
@@ -84,7 +84,7 @@ public Object setValue(Object object) {
         HashSet<Map.Entry<String, Object>> result = new HashSet<Map.Entry<String, Object>>();
 
         @SuppressWarnings("unchecked")
-        Iterator<String> keys = (Iterator<String>) jsonObject.keys();
+        Iterator<String> keys = jsonObject.keys();
         while (keys.hasNext()) {
             String key = keys.next();
             Object value = jsonObject.opt(key);
@@ -98,7 +98,7 @@ public Object setValue(Object object) {
         HashSet<String> result = new HashSet<String>();
 
         @SuppressWarnings("unchecked")
-        Iterator<String> keys = (Iterator<String>) jsonObject.keys();
+        Iterator<String> keys = jsonObject.keys();
         while (keys.hasNext()) {
             result.add(keys.next());
         }
@@ -121,7 +121,7 @@ static void jsonObjectPutAll(JSONObject jsonObject, Map<String, Object> map) {
         ArrayList<Object> result = new ArrayList<Object>();
 
         @SuppressWarnings("unchecked")
-        Iterator<String> keys = (Iterator<String>) jsonObject.keys();
+        Iterator<String> keys = jsonObject.keys();
         while (keys.hasNext()) {
             result.add(jsonObject.opt(keys.next()));
         }
diff --git a/facebook/src/main/java/com/facebook/internal/NativeAppCallAttachmentStore.java b/facebook/src/main/java/com/facebook/internal/NativeAppCallAttachmentStore.java
index 18814f355..e3a44572f 100644
--- a/facebook/src/main/java/com/facebook/internal/NativeAppCallAttachmentStore.java
+++ b/facebook/src/main/java/com/facebook/internal/NativeAppCallAttachmentStore.java
@@ -81,7 +81,7 @@ private static void processAttachmentFile(
             File outputFile) throws IOException {
         FileOutputStream outputStream = new FileOutputStream(outputFile);
         try {
-            InputStream inputStream = null;
+            InputStream inputStream;
             if (!isContentUri) {
                 inputStream = new FileInputStream(imageUri.getPath());
             } else {
diff --git a/facebook/src/main/java/com/facebook/internal/NativeProtocol.java b/facebook/src/main/java/com/facebook/internal/NativeProtocol.java
index 0edde69e1..1a2af60b4 100644
--- a/facebook/src/main/java/com/facebook/internal/NativeProtocol.java
+++ b/facebook/src/main/java/com/facebook/internal/NativeProtocol.java
@@ -23,23 +23,36 @@
 import android.content.ContentResolver;
 import android.content.Context;
 import android.content.Intent;
-import android.content.pm.*;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.ProviderInfo;
+import android.content.pm.ResolveInfo;
+import android.content.pm.Signature;
 import android.database.Cursor;
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
+import android.support.annotation.Nullable;
 import android.text.TextUtils;
+import android.util.Log;
+
 import com.facebook.FacebookException;
 import com.facebook.FacebookOperationCanceledException;
 import com.facebook.FacebookSdk;
 import com.facebook.login.DefaultAudience;
 
-import java.util.*;
-import java.util.concurrent.Callable;
-import java.util.concurrent.Executors;
-import java.util.concurrent.FutureTask;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.TreeSet;
+import java.util.UUID;
 import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.atomic.AtomicInteger;
 
 /**
  * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
@@ -50,6 +63,8 @@
 
     public static final int NO_PROTOCOL_AVAILABLE = -1;
 
+    private static final String TAG = NativeProtocol.class.getName();
+
     private static final String FACEBOOK_PROXY_AUTH_ACTIVITY = "com.facebook.katana.ProxyAuth";
     private static final String FACEBOOK_TOKEN_REFRESH_ACTIVITY =
             "com.facebook.katana.platform.TokenRefreshService";
@@ -226,6 +241,7 @@
 
     private static abstract class NativeAppInfo {
         abstract protected String getPackage();
+        abstract protected String getLoginActivity();
 
         private static final String FBI_HASH = "a4b7452e2ed8f5f191058ca7bbfd26b0d3214bfc";
         private static final String FBL_HASH = "5e8f16062ea3cd2c4a0d547876baa6f38cabf625";
@@ -252,7 +268,7 @@ public boolean validateSignature(Context context, String packageName) {
                 return true;
             }
 
-            PackageInfo packageInfo = null;
+            PackageInfo packageInfo;
             try {
                 packageInfo = context.getPackageManager().getPackageInfo(packageName,
                         PackageManager.GET_SIGNATURES);
@@ -260,14 +276,19 @@ public boolean validateSignature(Context context, String packageName) {
                 return false;
             }
 
+            // just in case
+            if (packageInfo.signatures == null || packageInfo.signatures.length <= 0) {
+                return false;
+            }
+
             for (Signature signature : packageInfo.signatures) {
                 String hashedSignature = Utility.sha1hash(signature.toByteArray());
-                if (validAppSignatureHashes.contains(hashedSignature)) {
-                    return true;
+                if (!validAppSignatureHashes.contains(hashedSignature)) {
+                    return false;
                 }
             }
 
-            return false;
+            return true;
         }
 
         public TreeSet<Integer> getAvailableVersions() {
@@ -291,6 +312,11 @@ private synchronized void fetchAvailableVersions(boolean force) {
         protected String getPackage() {
             return KATANA_PACKAGE;
         }
+
+        @Override
+        protected String getLoginActivity() {
+            return FACEBOOK_PROXY_AUTH_ACTIVITY;
+        }
     }
 
     private static class MessengerAppInfo extends NativeAppInfo {
@@ -300,6 +326,11 @@ protected String getPackage() {
         protected String getPackage() {
             return MESSENGER_PACKAGE;
         }
+
+        @Override
+        protected String getLoginActivity() {
+            return null;
+        }
     }
 
     private static class WakizashiAppInfo extends NativeAppInfo {
@@ -309,9 +340,29 @@ protected String getPackage() {
         protected String getPackage() {
             return WAKIZASHI_PACKAGE;
         }
+
+        @Override
+        protected String getLoginActivity() {
+            return FACEBOOK_PROXY_AUTH_ACTIVITY;
+        }
+    }
+
+    private static class FBLiteAppInfo extends NativeAppInfo {
+        static final String FBLITE_PACKAGE = "com.facebook.lite";
+        static final String FACEBOOK_LITE_ACTIVITY =
+                "com.facebook.lite.platform.LoginGDPDialogActivity";
+
+        @Override
+        protected String getPackage() {
+            return FBLITE_PACKAGE;
+        }
+
+        @Override
+        protected String getLoginActivity() {
+            return FACEBOOK_LITE_ACTIVITY;
+        }
     }
 
-    private static final NativeAppInfo FACEBOOK_APP_INFO = new KatanaAppInfo();
     private static List<NativeAppInfo> facebookAppInfoList = buildFacebookAppList();
     private static Map<String, List<NativeAppInfo>> actionToAppInfoMap = buildActionToAppInfoMap();
     private static AtomicBoolean protocolVersionsAsyncUpdating = new AtomicBoolean(false);
@@ -321,7 +372,7 @@ protected String getPackage() {
 
         // Katana needs to be the first thing in the list since it will get selected as the default
         // FACEBOOK_APP_INFO
-        list.add(FACEBOOK_APP_INFO);
+        list.add(new KatanaAppInfo());
         list.add(new WakizashiAppInfo());
 
         return list;
@@ -378,7 +429,7 @@ static Intent validateServiceIntent(Context context, Intent intent, NativeAppInf
         return intent;
     }
 
-    public static Intent createProxyAuthIntent(
+    public static Intent createFacebookLiteIntent(
             Context context,
             String applicationId,
             Collection<String> permissions,
@@ -386,45 +437,94 @@ public static Intent createProxyAuthIntent(
             boolean isRerequest,
             boolean isForPublish,
             DefaultAudience defaultAudience,
-            String clientState) {
-        for (NativeAppInfo appInfo : facebookAppInfoList) {
-            Intent intent = new Intent()
-                    .setClassName(appInfo.getPackage(), FACEBOOK_PROXY_AUTH_ACTIVITY)
-                    .putExtra(FACEBOOK_PROXY_AUTH_APP_ID_KEY, applicationId);
+            String clientState
+    ) {
+        NativeAppInfo appInfo = new FBLiteAppInfo();
+        Intent intent = createNativeAppIntent(
+                appInfo,
+                applicationId,
+                permissions,
+                e2e,
+                isRerequest,
+                isForPublish,
+                defaultAudience,
+                clientState);
+        intent = validateActivityIntent(context, intent, appInfo);
 
-            if (!Utility.isNullOrEmpty(permissions)) {
-                intent.putExtra(
-                        FACEBOOK_PROXY_AUTH_PERMISSIONS_KEY, TextUtils.join(",", permissions));
-            }
-            if (!Utility.isNullOrEmpty(e2e)) {
-                intent.putExtra(FACEBOOK_PROXY_AUTH_E2E_KEY, e2e);
-            }
+        return intent;
+    }
 
-            intent.putExtra(ServerProtocol.DIALOG_PARAM_STATE, clientState);
-            intent.putExtra(
-                    ServerProtocol.DIALOG_PARAM_RESPONSE_TYPE,
-                    ServerProtocol.DIALOG_RESPONSE_TYPE_TOKEN_AND_SIGNED_REQUEST);
+    private static Intent createNativeAppIntent(
+            NativeAppInfo appInfo,
+            String applicationId,
+            Collection<String> permissions,
+            String e2e,
+            boolean isRerequest,
+            boolean isForPublish,
+            DefaultAudience defaultAudience,
+            String clientState
+    ) {
+        String activityName = appInfo.getLoginActivity();
+        // the NativeApp doesn't have a login activity
+        if (activityName == null) {
+            return null;
+        }
+
+        Intent intent = new Intent()
+                .setClassName(appInfo.getPackage(), activityName)
+                .putExtra(FACEBOOK_PROXY_AUTH_APP_ID_KEY, applicationId);
+
+        if (!Utility.isNullOrEmpty(permissions)) {
             intent.putExtra(
-                    ServerProtocol.DIALOG_PARAM_RETURN_SCOPES,
-                    ServerProtocol.DIALOG_RETURN_SCOPES_TRUE);
-            if (isForPublish) {
-                intent.putExtra(
-                        ServerProtocol.DIALOG_PARAM_DEFAULT_AUDIENCE,
-                        defaultAudience.getNativeProtocolAudience());
-            }
+                    FACEBOOK_PROXY_AUTH_PERMISSIONS_KEY, TextUtils.join(",", permissions));
+        }
+        if (!Utility.isNullOrEmpty(e2e)) {
+            intent.putExtra(FACEBOOK_PROXY_AUTH_E2E_KEY, e2e);
+        }
 
-            // Override the API Version for Auth
+        intent.putExtra(ServerProtocol.DIALOG_PARAM_STATE, clientState);
+        intent.putExtra(
+                ServerProtocol.DIALOG_PARAM_RESPONSE_TYPE,
+                ServerProtocol.DIALOG_RESPONSE_TYPE_TOKEN_AND_SIGNED_REQUEST);
+        intent.putExtra(
+                ServerProtocol.DIALOG_PARAM_RETURN_SCOPES,
+                ServerProtocol.DIALOG_RETURN_SCOPES_TRUE);
+        if (isForPublish) {
             intent.putExtra(
-                    ServerProtocol.DIALOG_PARAM_LEGACY_OVERRIDE,
-                    ServerProtocol.GRAPH_API_VERSION);
-
-            // Set the re-request auth type for requests
-            if (isRerequest) {
-                intent.putExtra(
-                        ServerProtocol.DIALOG_PARAM_AUTH_TYPE,
-                        ServerProtocol.DIALOG_REREQUEST_AUTH_TYPE);
-            }
+                    ServerProtocol.DIALOG_PARAM_DEFAULT_AUDIENCE,
+                    defaultAudience.getNativeProtocolAudience());
+        }
+
+        // Override the API Version for Auth
+        intent.putExtra(
+                ServerProtocol.DIALOG_PARAM_LEGACY_OVERRIDE,
+                FacebookSdk.getGraphApiVersion());
+
+        intent.putExtra(
+                ServerProtocol.DIALOG_PARAM_AUTH_TYPE,
+                ServerProtocol.DIALOG_REREQUEST_AUTH_TYPE);
+        return intent;
+    }
 
+    public static Intent createProxyAuthIntent(
+            Context context,
+            String applicationId,
+            Collection<String> permissions,
+            String e2e,
+            boolean isRerequest,
+            boolean isForPublish,
+            DefaultAudience defaultAudience,
+            String clientState) {
+        for (NativeAppInfo appInfo : facebookAppInfoList) {
+            Intent intent = createNativeAppIntent(
+                    appInfo,
+                    applicationId,
+                    permissions,
+                    e2e,
+                    isRerequest,
+                    isForPublish,
+                    defaultAudience,
+                    clientState);
             intent = validateActivityIntent(context, intent, appInfo);
 
             if (intent != null) {
@@ -469,30 +569,6 @@ public static final int getLatestKnownVersion() {
                     PROTOCOL_VERSION_20121101
             );
 
-    private static Intent findActivityIntent(
-            Context context,
-            String activityAction,
-            String internalAction) {
-        List<NativeAppInfo> list = actionToAppInfoMap.get(internalAction);
-        if (list == null) {
-            return null;
-        }
-
-        Intent intent = null;
-        for (NativeAppInfo appInfo : list) {
-            intent = new Intent()
-                    .setAction(activityAction)
-                    .setPackage(appInfo.getPackage())
-                    .addCategory(Intent.CATEGORY_DEFAULT);
-            intent = validateActivityIntent(context, intent, appInfo);
-            if (intent != null) {
-                return intent;
-            }
-        }
-
-        return intent;
-    }
-
     public static boolean isVersionCompatibleWithBucketedIntent(int version) {
         return KNOWN_PROTOCOL_VERSIONS.contains(version) && version >= PROTOCOL_VERSION_20140701;
     }
@@ -505,14 +581,27 @@ public static Intent createPlatformActivityIntent(
             Context context,
             String callId,
             String action,
-            int version,
+            ProtocolVersionQueryResult versionResult,
             Bundle extras) {
-        Intent intent = findActivityIntent(context, INTENT_ACTION_PLATFORM_ACTIVITY, action);
+        if (versionResult == null) {
+            return null;
+        }
+
+        NativeAppInfo appInfo = versionResult.nativeAppInfo;
+        if (appInfo == null) {
+            return null;
+        }
+
+        Intent intent = new Intent()
+                .setAction(INTENT_ACTION_PLATFORM_ACTIVITY)
+                .setPackage(appInfo.getPackage())
+                .addCategory(Intent.CATEGORY_DEFAULT);
+        intent = validateActivityIntent(context, intent, appInfo);
         if (intent == null) {
             return null;
         }
 
-        setupProtocolRequestIntent(intent, callId, action, version, extras);
+        setupProtocolRequestIntent(intent, callId, action, versionResult.protocolVersion, extras);
 
         return intent;
     }
@@ -716,24 +805,24 @@ public static Bundle createBundleForException(FacebookException e) {
     public static int getLatestAvailableProtocolVersionForService(final int minimumVersion) {
         // Services are currently always against the Facebook App
         return getLatestAvailableProtocolVersionForAppInfoList(
-                facebookAppInfoList, new int[]{minimumVersion});
+                facebookAppInfoList, new int[]{minimumVersion}).getProtocolVersion();
     }
 
-    public static int getLatestAvailableProtocolVersionForAction(
+    public static ProtocolVersionQueryResult getLatestAvailableProtocolVersionForAction(
             String action,
             int[] versionSpec) {
         List<NativeAppInfo> appInfoList = actionToAppInfoMap.get(action);
         return getLatestAvailableProtocolVersionForAppInfoList(appInfoList, versionSpec);
     }
 
-    private static int getLatestAvailableProtocolVersionForAppInfoList(
+    private static ProtocolVersionQueryResult getLatestAvailableProtocolVersionForAppInfoList(
             List<NativeAppInfo> appInfoList,
             int[] versionSpec) {
         // Kick off an update
         updateAllAvailableProtocolVersionsAsync();
 
         if (appInfoList == null) {
-            return NO_PROTOCOL_AVAILABLE;
+            return ProtocolVersionQueryResult.createEmpty();
         }
 
         // Could potentially cache the NativeAppInfo to latestProtocolVersion
@@ -745,11 +834,11 @@ private static int getLatestAvailableProtocolVersionForAppInfoList(
                             versionSpec);
 
             if (protocolVersion != NO_PROTOCOL_AVAILABLE) {
-                return protocolVersion;
+                return ProtocolVersionQueryResult.create(appInfo, protocolVersion);
             }
         }
 
-        return NO_PROTOCOL_AVAILABLE;
+        return ProtocolVersionQueryResult.createEmpty();
     }
 
     public static void updateAllAvailableProtocolVersionsAsync() {
@@ -787,9 +876,29 @@ public void run() {
             // logcat saying that the provider was not found.
             PackageManager pm = FacebookSdk.getApplicationContext().getPackageManager();
             String contentProviderName = appInfo.getPackage() + PLATFORM_PROVIDER;
-            ProviderInfo pInfo = pm.resolveContentProvider(contentProviderName, 0);
+            ProviderInfo pInfo = null;
+            try {
+                pInfo = pm.resolveContentProvider(contentProviderName, 0);
+            } catch (RuntimeException e) {
+                // Accessing a dead provider will cause an DeadObjectException in the
+                // package manager. It will be thrown as a Runtime Exception.
+                // This will cause a incorrect indication of if the FB app installed but
+                // it is better then crashing.
+                Log.e(TAG, "Failed to query content resolver.", e);
+            }
             if (pInfo != null) {
-                c = contentResolver.query(uri, projection, null, null, null);
+                try {
+                    c = contentResolver.query(uri, projection, null, null, null);
+                } catch (NullPointerException|SecurityException ex) {
+                    Log.e(TAG, "Failed to query content resolver.");
+                    // Meizu devices running Android 5.0+ have a bug where they can throw a
+                    // NullPointerException when trying resolve a ContentProvider. Additionally,
+                    // rarely some 5.0+ devices have a bug which can rarely cause a
+                    // SecurityException to be thrown. This will cause a incorrect indication
+                    // of if the FB app installed but it is better then crashing.
+                    c = null;
+                }
+
                 if (c != null) {
                     while (c.moveToNext()) {
                         int version = c.getInt(c.getColumnIndex(PLATFORM_PROVIDER_VERSION_COLUMN));
@@ -797,13 +906,13 @@ public void run() {
                     }
                 }
             }
-
-            return allAvailableVersions;
         } finally {
             if (c != null) {
                 c.close();
             }
         }
+
+        return allAvailableVersions;
     }
 
     public static int computeLatestAvailableVersionFromVersionSpec(
@@ -854,4 +963,37 @@ public static int computeLatestAvailableVersionFromVersionSpec(
     private static Uri buildPlatformProviderVersionURI(NativeAppInfo appInfo) {
         return Uri.parse(CONTENT_SCHEME + appInfo.getPackage() + PLATFORM_PROVIDER_VERSIONS);
     }
+
+    public static class ProtocolVersionQueryResult {
+        private NativeAppInfo nativeAppInfo;
+        private int protocolVersion;
+
+        public static ProtocolVersionQueryResult create(
+                NativeAppInfo nativeAppInfo,
+                int protocolVersion) {
+            ProtocolVersionQueryResult result = new ProtocolVersionQueryResult();
+            result.nativeAppInfo = nativeAppInfo;
+            result.protocolVersion = protocolVersion;
+
+            return result;
+        }
+
+        public static ProtocolVersionQueryResult createEmpty() {
+            ProtocolVersionQueryResult result = new ProtocolVersionQueryResult();
+            result.protocolVersion = NO_PROTOCOL_AVAILABLE;
+
+            return result;
+        }
+
+        private ProtocolVersionQueryResult() {
+        }
+
+        public @Nullable NativeAppInfo getAppInfo() {
+            return nativeAppInfo;
+        }
+
+        public int getProtocolVersion() {
+            return protocolVersion;
+        }
+    }
 }
diff --git a/facebook/src/main/java/com/facebook/internal/PlatformServiceClient.java b/facebook/src/main/java/com/facebook/internal/PlatformServiceClient.java
index e3bc3f090..45b7dfab8 100644
--- a/facebook/src/main/java/com/facebook/internal/PlatformServiceClient.java
+++ b/facebook/src/main/java/com/facebook/internal/PlatformServiceClient.java
@@ -142,7 +142,11 @@ protected void handleMessage(Message message) {
             } else {
                 callback(extras);
             }
-            context.unbindService(this);
+            try {
+                context.unbindService(this);
+            } catch (IllegalArgumentException ex) {
+                // Do nothing, the connection was already unbound
+            }
         }
     }
 
diff --git a/facebook/src/main/java/com/facebook/internal/ServerProtocol.java b/facebook/src/main/java/com/facebook/internal/ServerProtocol.java
index 0aaf5f3c5..3aa09b051 100644
--- a/facebook/src/main/java/com/facebook/internal/ServerProtocol.java
+++ b/facebook/src/main/java/com/facebook/internal/ServerProtocol.java
@@ -54,6 +54,7 @@
     public static final String DIALOG_PARAM_RESPONSE_TYPE = "response_type";
     public static final String DIALOG_PARAM_RETURN_SCOPES = "return_scopes";
     public static final String DIALOG_PARAM_SCOPE = "scope";
+    public static final String DIALOG_PARAM_SSO_DEVICE = "sso";
     public static final String DIALOG_PARAM_DEFAULT_AUDIENCE = "default_audience";
     public static final String DIALOG_PARAM_SDK_VERSION = "sdk";
     public static final String DIALOG_PARAM_STATE = "state";
@@ -75,7 +76,7 @@
     // URL components
     private static final String GRAPH_VIDEO_URL_FORMAT = "https://graph-video.%s";
     private static final String GRAPH_URL_FORMAT = "https://graph.%s";
-    public static final String GRAPH_API_VERSION = "v2.6";
+    private static final String GRAPH_API_VERSION = "v2.8";
 
     public static final Collection<String> errorsProxyAuthDisabled =
             Utility.unmodifiableCollection("service_disabled", "AndroidAuthKillSwitchException");
@@ -95,7 +96,7 @@ public static final String getGraphVideoUrlBase() {
         return String.format(GRAPH_VIDEO_URL_FORMAT, FacebookSdk.getFacebookDomain());
     }
 
-    public static final String getAPIVersion() {
+    public static final String getDefaultAPIVersion() {
         return GRAPH_API_VERSION;
     }
 
diff --git a/facebook/src/main/java/com/facebook/internal/SmartLoginOption.java b/facebook/src/main/java/com/facebook/internal/SmartLoginOption.java
new file mode 100644
index 000000000..4283bda91
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/internal/SmartLoginOption.java
@@ -0,0 +1,49 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+package com.facebook.internal;
+
+import java.util.EnumSet;
+
+public enum SmartLoginOption {
+    None(0),
+    Enabled(1),
+    RequireConfirm(2);
+
+    public static final EnumSet<SmartLoginOption> ALL = EnumSet.allOf(SmartLoginOption.class);
+    public static EnumSet<SmartLoginOption> parseOptions(long bitmask) {
+        EnumSet<SmartLoginOption> result = EnumSet.noneOf(SmartLoginOption.class);
+        for (SmartLoginOption opt : ALL) {
+            if ((bitmask & opt.getValue()) != 0) {
+                result.add(opt);
+            }
+        }
+        return result;
+    }
+
+    private final long mValue;
+
+    SmartLoginOption(long value) {
+        this.mValue= value;
+    }
+
+    public long getValue(){
+        return mValue;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/internal/Utility.java b/facebook/src/main/java/com/facebook/internal/Utility.java
index 074ca876e..fcf3fdc82 100644
--- a/facebook/src/main/java/com/facebook/internal/Utility.java
+++ b/facebook/src/main/java/com/facebook/internal/Utility.java
@@ -21,7 +21,6 @@
 package com.facebook.internal;
 
 import android.content.Context;
-import android.content.SharedPreferences;
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
 import android.database.Cursor;
@@ -47,25 +46,42 @@
 import com.facebook.GraphRequest;
 import com.facebook.GraphResponse;
 import com.facebook.HttpMethod;
-import com.facebook.appevents.AppEventsConstants;
-import com.facebook.appevents.internal.Constants;
 
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 import org.json.JSONTokener;
 
-import java.io.*;
+import java.io.BufferedInputStream;
+import java.io.Closeable;
+import java.io.File;
+import java.io.FilenameFilter;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.OutputStream;
+import java.io.UnsupportedEncodingException;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.math.BigInteger;
 import java.net.HttpURLConnection;
 import java.net.URLConnection;
-
 import java.net.URLDecoder;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.Random;
+import java.util.Set;
+import java.util.TimeZone;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.regex.Pattern;
@@ -80,40 +96,10 @@
     private static final String HASH_ALGORITHM_MD5 = "MD5";
     private static final String HASH_ALGORITHM_SHA1 = "SHA-1";
     private static final String URL_SCHEME = "https";
-    private static final String APP_SETTINGS_PREFS_STORE =
-            "com.facebook.internal.preferences.APP_SETTINGS";
-    private static final String APP_SETTINGS_PREFS_KEY_FORMAT =
-            "com.facebook.internal.APP_SETTINGS.%s";
-    private static final String APP_SETTING_SUPPORTS_IMPLICIT_SDK_LOGGING =
-            "supports_implicit_sdk_logging";
-    private static final String APP_SETTING_NUX_CONTENT = "gdpv4_nux_content";
-    private static final String APP_SETTING_NUX_ENABLED = "gdpv4_nux_enabled";
-    private static final String APP_SETTING_CUSTOM_TABS_ENABLED =
-            "gdpv4_chrome_custom_tabs_enabled";
-    private static final String APP_SETTING_DIALOG_CONFIGS = "android_dialog_configs";
-    private static final String APP_SETTING_ANDROID_SDK_ERROR_CATEGORIES =
-            "android_sdk_error_categories";
-    private static final String APP_SETTING_APP_EVENTS_SESSION_TIMEOUT =
-            "app_events_session_timeout";
     private static final String EXTRA_APP_EVENTS_INFO_FORMAT_VERSION = "a2";
-    private static final String DIALOG_CONFIG_DIALOG_NAME_FEATURE_NAME_SEPARATOR = "\\|";
-    private static final String DIALOG_CONFIG_NAME_KEY = "name";
-    private static final String DIALOG_CONFIG_VERSIONS_KEY = "versions";
-    private static final String DIALOG_CONFIG_URL_KEY = "url";
 
     private final static String UTF8 = "UTF-8";
 
-    private static final String[] APP_SETTING_FIELDS = new String[]{
-            APP_SETTING_SUPPORTS_IMPLICIT_SDK_LOGGING,
-            APP_SETTING_NUX_CONTENT,
-            APP_SETTING_NUX_ENABLED,
-            APP_SETTING_CUSTOM_TABS_ENABLED,
-            APP_SETTING_DIALOG_CONFIGS,
-            APP_SETTING_ANDROID_SDK_ERROR_CATEGORIES,
-            APP_SETTING_APP_EVENTS_SESSION_TIMEOUT
-    };
-    private static final String APPLICATION_FIELDS = "fields";
-
     // This is the default used by the buffer streams, but they trace a warning if you do not
     // specify.
     public static final int DEFAULT_STREAM_BUFFER_SIZE = 8192;
@@ -125,11 +111,6 @@
 
     private static final int GINGERBREAD_MR1 = 10;
 
-    private static Map<String, FetchedAppSettings> fetchedAppSettings =
-            new ConcurrentHashMap<String, FetchedAppSettings>();
-
-    private static AtomicBoolean loadingSettings = new AtomicBoolean(false);
-
     private static int numCPUCores = 0;
 
     private static long timestampOfLastCheck = -1;
@@ -139,160 +120,6 @@
     private static String deviceTimeZoneName = "";
     private static String carrierName = noCarrierConstant;
 
-    public static class FetchedAppSettings {
-        private boolean supportsImplicitLogging;
-        private String nuxContent;
-        private boolean nuxEnabled;
-        private boolean customTabsEnabled;
-        private int sessionTimeoutInSeconds;
-        private Map<String, Map<String, DialogFeatureConfig>> dialogConfigMap;
-        private FacebookRequestErrorClassification errorClassification;
-
-        private FetchedAppSettings(boolean supportsImplicitLogging,
-                                   String nuxContent,
-                                   boolean nuxEnabled,
-                                   boolean customTabsEnabled,
-                                   int sessionTimeoutInSeconds,
-                                   Map<String, Map<String, DialogFeatureConfig>> dialogConfigMap,
-                                   FacebookRequestErrorClassification errorClassification) {
-            this.supportsImplicitLogging = supportsImplicitLogging;
-            this.nuxContent = nuxContent;
-            this.nuxEnabled = nuxEnabled;
-            this.customTabsEnabled = customTabsEnabled;
-            this.dialogConfigMap = dialogConfigMap;
-            this.errorClassification = errorClassification;
-            this.sessionTimeoutInSeconds = sessionTimeoutInSeconds;
-        }
-
-        public boolean supportsImplicitLogging() {
-            return supportsImplicitLogging;
-        }
-
-        public String getNuxContent() {
-            return nuxContent;
-        }
-
-        public boolean getNuxEnabled() {
-            return nuxEnabled;
-        }
-
-        public boolean getCustomTabsEnabled() {
-            return customTabsEnabled;
-        }
-
-        public int getSessionTimeoutInSeconds() {
-            return sessionTimeoutInSeconds;
-        }
-
-        public Map<String, Map<String, DialogFeatureConfig>> getDialogConfigurations() {
-            return dialogConfigMap;
-        }
-
-        public FacebookRequestErrorClassification getErrorClassification() {
-            return errorClassification;
-        }
-    }
-
-    public static class DialogFeatureConfig {
-        private static DialogFeatureConfig parseDialogConfig(JSONObject dialogConfigJSON) {
-            String dialogNameWithFeature = dialogConfigJSON.optString(DIALOG_CONFIG_NAME_KEY);
-            if (Utility.isNullOrEmpty(dialogNameWithFeature)) {
-                return null;
-            }
-
-            String[] components = dialogNameWithFeature.split(
-                    DIALOG_CONFIG_DIALOG_NAME_FEATURE_NAME_SEPARATOR);
-            if (components.length != 2) {
-                // We expect the format to be dialogName|FeatureName, where both components are
-                // non-empty.
-                return null;
-            }
-
-            String dialogName = components[0];
-            String featureName = components[1];
-            if (isNullOrEmpty(dialogName) || isNullOrEmpty(featureName)) {
-                return null;
-            }
-
-            String urlString = dialogConfigJSON.optString(DIALOG_CONFIG_URL_KEY);
-            Uri fallbackUri = null;
-            if (!Utility.isNullOrEmpty(urlString)) {
-                fallbackUri = Uri.parse(urlString);
-            }
-
-            JSONArray versionsJSON = dialogConfigJSON.optJSONArray(DIALOG_CONFIG_VERSIONS_KEY);
-
-            int[] featureVersionSpec = parseVersionSpec(versionsJSON);
-
-            return new DialogFeatureConfig(
-                    dialogName, featureName, fallbackUri, featureVersionSpec);
-        }
-
-        private static int[] parseVersionSpec(JSONArray versionsJSON) {
-            // Null signifies no overrides to the min-version as specified by the SDK.
-            // An empty array would basically turn off the dialog (i.e no supported versions), so
-            // DON'T default to that.
-            int[] versionSpec = null;
-            if (versionsJSON != null) {
-                int numVersions = versionsJSON.length();
-                versionSpec = new int[numVersions];
-                for (int i = 0; i < numVersions; i++) {
-                    // See if the version was stored directly as an Integer
-                    int version = versionsJSON.optInt(i, NativeProtocol.NO_PROTOCOL_AVAILABLE);
-                    if (version == NativeProtocol.NO_PROTOCOL_AVAILABLE) {
-                        // If not, then see if it was stored as a string that can be parsed out.
-                        // If even that fails, then we will leave it as NO_PROTOCOL_AVAILABLE
-                        String versionString = versionsJSON.optString(i);
-                        if (!isNullOrEmpty(versionString)) {
-                            try {
-                                version = Integer.parseInt(versionString);
-                            } catch (NumberFormatException nfe) {
-                                logd(LOG_TAG, nfe);
-                                version = NativeProtocol.NO_PROTOCOL_AVAILABLE;
-                            }
-                        }
-                    }
-
-                    versionSpec[i] = version;
-                }
-            }
-
-            return versionSpec;
-        }
-
-        private String dialogName;
-        private String featureName;
-        private Uri fallbackUrl;
-        private int[] featureVersionSpec;
-
-        private DialogFeatureConfig(
-                String dialogName,
-                String featureName,
-                Uri fallbackUrl,
-                int[] featureVersionSpec) {
-            this.dialogName = dialogName;
-            this.featureName = featureName;
-            this.fallbackUrl = fallbackUrl;
-            this.featureVersionSpec = featureVersionSpec;
-        }
-
-        public String getDialogName() {
-            return dialogName;
-        }
-
-        public String getFeatureName() {
-            return featureName;
-        }
-
-        public Uri getFallbackUrl() {
-            return fallbackUrl;
-        }
-
-        public int[] getVersionSpec() {
-            return featureVersionSpec;
-        }
-    }
-
     /**
      * Each array represents a set of closed or open Range, like so: [0,10,50,60] - Ranges are
      * {0-9}, {50-59} [20] - Ranges are {20-} [30,40,100] - Ranges are {30-39}, {100-}
@@ -565,9 +392,9 @@ public static boolean putJSONValueInBundle(Bundle bundle, String key, Object val
         } else if (value instanceof String) {
             bundle.putString(key, (String) value);
         } else if (value instanceof JSONArray) {
-            bundle.putString(key, ((JSONArray) value).toString());
+            bundle.putString(key, value.toString());
         } else if (value instanceof JSONObject) {
-            bundle.putString(key, ((JSONObject) value).toString());
+            bundle.putString(key, value.toString());
         } else {
             return false;
         }
@@ -785,164 +612,6 @@ public static boolean hasSameId(JSONObject a, JSONObject b) {
         return idA.equals(idB);
     }
 
-    public static void loadAppSettingsAsync(
-            final Context context,
-            final String applicationId
-    ) {
-        boolean canStartLoading = loadingSettings.compareAndSet(false, true);
-        if (Utility.isNullOrEmpty(applicationId) ||
-                fetchedAppSettings.containsKey(applicationId) ||
-                !canStartLoading) {
-            return;
-        }
-
-        final String settingsKey = String.format(APP_SETTINGS_PREFS_KEY_FORMAT, applicationId);
-
-        FacebookSdk.getExecutor().execute(new Runnable() {
-            @Override
-            public void run() {
-                // See if we had a cached copy and use that immediately.
-                SharedPreferences sharedPrefs = context.getSharedPreferences(
-                        APP_SETTINGS_PREFS_STORE,
-                        Context.MODE_PRIVATE);
-                String settingsJSONString = sharedPrefs.getString(settingsKey, null);
-                if (!isNullOrEmpty(settingsJSONString)) {
-                    JSONObject settingsJSON = null;
-                    try {
-                        settingsJSON = new JSONObject(settingsJSONString);
-                    } catch (JSONException je) {
-                        logd(LOG_TAG, je);
-                    }
-                    if (settingsJSON != null) {
-                        parseAppSettingsFromJSON(applicationId, settingsJSON);
-                    }
-                }
-
-                JSONObject resultJSON = getAppSettingsQueryResponse(applicationId);
-                if (resultJSON != null) {
-                    parseAppSettingsFromJSON(applicationId, resultJSON);
-
-                    sharedPrefs.edit()
-                            .putString(settingsKey, resultJSON.toString())
-                            .apply();
-                }
-
-                loadingSettings.set(false);
-            }
-        });
-    }
-
-    // This call only gets the app settings if they're already fetched
-    public static FetchedAppSettings getAppSettingsWithoutQuery(final String applicationId) {
-        return applicationId != null ? fetchedAppSettings.get(applicationId) : null;
-    }
-
-    // Note that this method makes a synchronous Graph API call, so should not be called from the
-    // main thread.
-    public static FetchedAppSettings queryAppSettings(
-            final String applicationId,
-            final boolean forceRequery) {
-        // Cache the last app checked results.
-        if (!forceRequery && fetchedAppSettings.containsKey(applicationId)) {
-            return fetchedAppSettings.get(applicationId);
-        }
-
-        JSONObject response = getAppSettingsQueryResponse(applicationId);
-        if (response == null) {
-            return null;
-        }
-
-        return parseAppSettingsFromJSON(applicationId, response);
-    }
-
-    private static FetchedAppSettings parseAppSettingsFromJSON(
-            String applicationId,
-            JSONObject settingsJSON) {
-        JSONArray errorClassificationJSON =
-                settingsJSON.optJSONArray(APP_SETTING_ANDROID_SDK_ERROR_CATEGORIES);
-        FacebookRequestErrorClassification errorClassification =
-                errorClassificationJSON == null
-                        ? FacebookRequestErrorClassification.getDefaultErrorClassification()
-                        : FacebookRequestErrorClassification.createFromJSON(
-                        errorClassificationJSON
-                );
-        FetchedAppSettings result = new FetchedAppSettings(
-                settingsJSON.optBoolean(APP_SETTING_SUPPORTS_IMPLICIT_SDK_LOGGING, false),
-                settingsJSON.optString(APP_SETTING_NUX_CONTENT, ""),
-                settingsJSON.optBoolean(APP_SETTING_NUX_ENABLED, false),
-                settingsJSON.optBoolean(APP_SETTING_CUSTOM_TABS_ENABLED, false),
-                settingsJSON.optInt(
-                        APP_SETTING_APP_EVENTS_SESSION_TIMEOUT,
-                        Constants.getDefaultAppEventsSessionTimeoutInSeconds()),
-                parseDialogConfigurations(settingsJSON.optJSONObject(APP_SETTING_DIALOG_CONFIGS)),
-                errorClassification
-        );
-
-        fetchedAppSettings.put(applicationId, result);
-
-        return result;
-    }
-
-    // Note that this method makes a synchronous Graph API call, so should not be called from the
-    // main thread.
-    private static JSONObject getAppSettingsQueryResponse(String applicationId) {
-        Bundle appSettingsParams = new Bundle();
-        appSettingsParams.putString(APPLICATION_FIELDS, TextUtils.join(",", APP_SETTING_FIELDS));
-
-        GraphRequest request = GraphRequest.newGraphPathRequest(null, applicationId, null);
-        request.setSkipClientToken(true);
-        request.setParameters(appSettingsParams);
-
-        return request.executeAndWait().getJSONObject();
-    }
-
-    public static DialogFeatureConfig getDialogFeatureConfig(
-            String applicationId,
-            String actionName,
-            String featureName) {
-        if (Utility.isNullOrEmpty(actionName) || Utility.isNullOrEmpty(featureName)) {
-            return null;
-        }
-
-        FetchedAppSettings settings = fetchedAppSettings.get(applicationId);
-        if (settings != null) {
-            Map<String, DialogFeatureConfig> featureMap =
-                    settings.getDialogConfigurations().get(actionName);
-            if (featureMap != null) {
-                return featureMap.get(featureName);
-            }
-        }
-        return null;
-    }
-
-    private static Map<String, Map<String, DialogFeatureConfig>> parseDialogConfigurations(
-            JSONObject dialogConfigResponse) {
-        HashMap<String, Map<String, DialogFeatureConfig>> dialogConfigMap = new HashMap<String, Map<String, DialogFeatureConfig>>();
-
-        if (dialogConfigResponse != null) {
-            JSONArray dialogConfigData = dialogConfigResponse.optJSONArray("data");
-            if (dialogConfigData != null) {
-                for (int i = 0; i < dialogConfigData.length(); i++) {
-                    DialogFeatureConfig dialogConfig = DialogFeatureConfig.parseDialogConfig(
-                            dialogConfigData.optJSONObject(i));
-                    if (dialogConfig == null) {
-                        continue;
-                    }
-
-                    String dialogName = dialogConfig.getDialogName();
-                    Map<String, DialogFeatureConfig> featureMap = dialogConfigMap.get(dialogName);
-                    if (featureMap == null) {
-                        featureMap = new HashMap<String, DialogFeatureConfig>();
-                        dialogConfigMap.put(dialogName, featureMap);
-                    }
-                    featureMap.put(dialogConfig.getFeatureName(), dialogConfig);
-                }
-            }
-        }
-
-        return dialogConfigMap;
-    }
-
     public static String safeGetStringFromResponse(JSONObject response, String propertyName) {
         return response != null ? response.optString(propertyName, "") : "";
     }
@@ -1060,7 +729,7 @@ public static void setAppEventExtendedDeviceInfoParameters(
         extraInfoArray.put(Build.MODEL);
 
         // Locale
-        Locale locale = null;
+        Locale locale;
         try {
             locale = appContext.getResources().getConfiguration().locale;
         } catch (Exception e) {
@@ -1196,7 +865,8 @@ public static String getUriString(final Uri uri) {
     public static boolean isWebUri(final Uri uri) {
         return (uri != null)
                 && ("http".equalsIgnoreCase(uri.getScheme())
-                || "https".equalsIgnoreCase(uri.getScheme()));
+                || "https".equalsIgnoreCase(uri.getScheme())
+                || "fbstaging".equalsIgnoreCase(uri.getScheme()));
     }
 
     public static boolean isContentUri(final Uri uri) {
@@ -1230,7 +900,7 @@ public static Date getBundleLongAsDate(Bundle bundle, String key, Date dateBase)
             return null;
         }
 
-        long secondsFromBase = Long.MIN_VALUE;
+        long secondsFromBase;
 
         Object secondsObject = bundle.get(key);
         if (secondsObject instanceof Long) {
@@ -1356,7 +1026,6 @@ private static int refreshBestGuessNumberOfCPUCores() {
 
         // Enumerate all available CPU files and try to count the number of CPU cores.
         try {
-            int res = 0;
             File cpuDir = new File("/sys/devices/system/cpu/");
             File[] cpuFiles = cpuDir.listFiles(new FilenameFilter() {
                 @Override
diff --git a/facebook/src/main/java/com/facebook/internal/Validate.java b/facebook/src/main/java/com/facebook/internal/Validate.java
index 5ad4b5073..72f87abcf 100644
--- a/facebook/src/main/java/com/facebook/internal/Validate.java
+++ b/facebook/src/main/java/com/facebook/internal/Validate.java
@@ -184,6 +184,7 @@ public static void hasFacebookActivity(Context context) {
         Validate.hasFacebookActivity(context, true);
     }
 
+    @SuppressWarnings("WrongConstant")
     public static void hasFacebookActivity(Context context, boolean shouldThrow) {
         Validate.notNull(context, "context");
         PackageManager pm = context.getPackageManager();
diff --git a/facebook/src/main/java/com/facebook/internal/WebDialog.java b/facebook/src/main/java/com/facebook/internal/WebDialog.java
index f92dd8230..03fce8859 100644
--- a/facebook/src/main/java/com/facebook/internal/WebDialog.java
+++ b/facebook/src/main/java/com/facebook/internal/WebDialog.java
@@ -32,19 +32,48 @@
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
 import android.net.http.SslError;
+import android.os.AsyncTask;
 import android.os.Bundle;
 import android.util.DisplayMetrics;
-import android.view.*;
+import android.view.Display;
+import android.view.Gravity;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.Window;
+import android.view.WindowManager;
 import android.webkit.SslErrorHandler;
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.LinearLayout;
-import com.facebook.*;
+
+import com.facebook.AccessToken;
+import com.facebook.FacebookDialogException;
+import com.facebook.FacebookException;
+import com.facebook.FacebookGraphResponseException;
+import com.facebook.FacebookOperationCanceledException;
+import com.facebook.FacebookRequestError;
+import com.facebook.FacebookSdk;
+import com.facebook.FacebookServiceException;
+import com.facebook.GraphRequest;
+import com.facebook.GraphRequestAsyncTask;
+import com.facebook.GraphResponse;
 import com.facebook.R;
+import com.facebook.share.internal.ShareConstants;
+import com.facebook.share.internal.ShareInternalUtility;
+import com.facebook.share.widget.ShareDialog;
+
+import org.json.JSONArray;
+import org.json.JSONObject;
 
+import java.util.Arrays;
+import java.util.List;
 import java.util.Locale;
+import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.concurrent.CountDownLatch;
 
 /**
  * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
@@ -77,8 +106,6 @@
     // translucent border around the webview
     private static final int BACKGROUND_GRAY = 0xCC000000;
 
-    public static final int DEFAULT_THEME = android.R.style.Theme_Translucent_NoTitleBar;
-
     private String url;
     private String expectedRedirectUrl = REDIRECT_URI;
     private OnCompleteListener onCompleteListener;
@@ -86,6 +113,7 @@
     private ProgressDialog spinner;
     private ImageView crossImageView;
     private FrameLayout contentFrameLayout;
+    private UploadStagingResourcesTask uploadTask;
     private boolean listenerCalled = false;
     private boolean isDetached = false;
     private boolean isPageFinished = false;
@@ -154,12 +182,18 @@ public WebDialog(Context context, String action, Bundle parameters, int theme, O
                 ServerProtocol.DIALOG_PARAM_SDK_VERSION,
                 String.format(Locale.ROOT, "android-%s", FacebookSdk.getSdkVersion()));
 
-        Uri uri = Utility.buildUri(
-                ServerProtocol.getDialogAuthority(),
-                ServerProtocol.getAPIVersion() + "/" + ServerProtocol.DIALOG_PATH + action,
-                parameters);
-        this.url = uri.toString();
         onCompleteListener = listener;
+
+        if (action.equals(ShareDialog.WEB_SHARE_DIALOG) &&
+                parameters.containsKey(ShareConstants.WEB_DIALOG_PARAM_MEDIA)) {
+            this.uploadTask = new UploadStagingResourcesTask(action, parameters);
+        } else {
+            Uri uri = Utility.buildUri(
+                    ServerProtocol.getDialogAuthority(),
+                    FacebookSdk.getGraphApiVersion() + "/" + ServerProtocol.DIALOG_PATH + action,
+                    parameters);
+            this.url = uri.toString();
+        }
     }
 
     /**
@@ -205,7 +239,21 @@ public void dismiss() {
     @Override
     protected void onStart() {
         super.onStart();
-        resize();
+        if (uploadTask != null && uploadTask.getStatus() == AsyncTask.Status.PENDING) {
+            uploadTask.execute();
+            spinner.show();
+        } else {
+            resize();
+        }
+    }
+
+    @Override
+    protected void onStop() {
+        if (uploadTask != null) {
+            uploadTask.cancel(true);
+            spinner.dismiss();
+        }
+        super.onStop();
     }
 
     @Override
@@ -252,12 +300,13 @@ public void onCancel(DialogInterface dialogInterface) {
          */
         createCrossImage();
 
-        /* Now we know 'x' drawable width and height,
-         * layout the webview and add it the contentFrameLayout layout
-         */
-        int crossWidth = crossImageView.getDrawable().getIntrinsicWidth();
-
-        setUpWebView(crossWidth / 2 + 1);
+        if (this.url != null) {
+            /* Now we know 'x' drawable width and height,
+            * layout the webview and add it the contentFrameLayout layout
+            */
+            int crossWidth = crossImageView.getDrawable().getIntrinsicWidth();
+            setUpWebView(crossWidth / 2 + 1);
+        }
 
         /* Finally add the 'x' image to the contentFrameLayout layout and
         * add contentFrameLayout to the Dialog view
@@ -350,7 +399,7 @@ protected void sendSuccessToListener(Bundle values) {
     protected void sendErrorToListener(Throwable error) {
         if (onCompleteListener != null && !listenerCalled) {
             listenerCalled = true;
-            FacebookException facebookException = null;
+            FacebookException facebookException;
             if (error instanceof FacebookException) {
                 facebookException = (FacebookException) error;
             } else {
@@ -656,4 +705,125 @@ private void finishInit(Context context, String action, Bundle parameters) {
             }
         }
     }
+
+    private class UploadStagingResourcesTask extends AsyncTask<Void, Void, String[]> {
+        private String action;
+        private Bundle parameters;
+        private Exception[] exceptions;
+
+        UploadStagingResourcesTask(String action, Bundle parameters) {
+            this.action = action;
+            this.parameters = parameters;
+        }
+
+        @Override
+        protected String[] doInBackground(Void... args) {
+            final String[] params =
+                    parameters.getStringArray(ShareConstants.WEB_DIALOG_PARAM_MEDIA);
+            final String[] results = new String[params.length];
+            exceptions = new Exception[params.length];
+
+            final CountDownLatch latch = new CountDownLatch(params.length);
+            final ConcurrentLinkedQueue<GraphRequestAsyncTask> tasks =
+                    new ConcurrentLinkedQueue<>();
+
+            final AccessToken accessToken = AccessToken.getCurrentAccessToken();
+            try {
+                for (int i = 0; i < params.length; i++) {
+                    if (isCancelled()) {
+                        for (AsyncTask task : tasks) {
+                            task.cancel(true);
+                        }
+                        return null;
+                    }
+                    final Uri uri = Uri.parse(params[i]);
+                    final int writeIndex = i;
+                    if (Utility.isWebUri(uri)) {
+                        results[writeIndex] = uri.toString();
+                        latch.countDown();
+                        continue;
+                    }
+                    final GraphRequest.Callback callback = new GraphRequest.Callback() {
+                        @Override
+                        public void onCompleted(GraphResponse response) {
+                            try {
+                                final FacebookRequestError error = response.getError();
+                                if (error != null) {
+                                    String message = error.getErrorMessage();
+                                    if (message == null) {
+                                        message = "Error staging photo.";
+                                    }
+                                    throw new FacebookGraphResponseException(response, message);
+                                }
+                                final JSONObject data = response.getJSONObject();
+                                if (data == null) {
+                                    throw new FacebookException("Error staging photo.");
+                                }
+                                final String stagedImageUri = data.optString("uri");
+                                if (stagedImageUri == null) {
+                                    throw new FacebookException("Error staging photo.");
+                                }
+                                results[writeIndex] = stagedImageUri;
+                            } catch(Exception e) {
+                                exceptions[writeIndex] = e;
+                            }
+                            latch.countDown();
+                        }
+                    };
+
+                    GraphRequestAsyncTask task =
+                            ShareInternalUtility.newUploadStagingResourceWithImageRequest(
+                                    accessToken,
+                                    uri,
+                                    callback).executeAsync();
+                    tasks.add(task);
+                }
+                latch.await();
+            } catch(Exception e) {
+                for (AsyncTask task : tasks) {
+                    task.cancel(true);
+                }
+                return null;
+            }
+
+            return results;
+        }
+
+        @Override
+        protected void onPostExecute(String[] results) {
+            spinner.dismiss();
+
+            for (Exception e : exceptions) {
+                if (e != null) {
+                    sendErrorToListener(e);
+                    return;
+                }
+            }
+
+            if (results == null) {
+                sendErrorToListener(new FacebookException("Failed to stage photos for web dialog"));
+                return;
+            }
+
+            List<String> resultList = Arrays.asList(results);
+            if (resultList.contains(null)) {
+                sendErrorToListener(new FacebookException("Failed to stage photos for web dialog"));
+                return;
+            }
+
+            Utility.putJSONValueInBundle(
+                    parameters,
+                    ShareConstants.WEB_DIALOG_PARAM_MEDIA,
+                    new JSONArray(resultList));
+
+            Uri uri = Utility.buildUri(
+                    ServerProtocol.getDialogAuthority(),
+                    FacebookSdk.getGraphApiVersion() + "/" + ServerProtocol.DIALOG_PATH + action,
+                    parameters);
+
+            WebDialog.this.url = uri.toString();
+            int crossWidth = crossImageView.getDrawable().getIntrinsicWidth();
+            setUpWebView(crossWidth / 2 + 1);
+        }
+    }
 }
diff --git a/facebook/src/main/java/com/facebook/login/CustomTabLoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/CustomTabLoginMethodHandler.java
index 5dbdff349..06c5b33c4 100644
--- a/facebook/src/main/java/com/facebook/login/CustomTabLoginMethodHandler.java
+++ b/facebook/src/main/java/com/facebook/login/CustomTabLoginMethodHandler.java
@@ -24,32 +24,51 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.pm.ResolveInfo;
+import android.content.pm.ServiceInfo;
+import android.net.Uri;
 import android.os.Bundle;
 import android.os.Parcel;
 import android.os.Parcelable;
-import android.util.Log;
 
 import com.facebook.AccessTokenSource;
+import com.facebook.CustomTabMainActivity;
+import com.facebook.FacebookException;
+import com.facebook.FacebookOperationCanceledException;
+import com.facebook.FacebookRequestError;
 import com.facebook.FacebookSdk;
-import com.facebook.internal.CustomTab;
+import com.facebook.FacebookServiceException;
+import com.facebook.internal.FetchedAppSettings;
+import com.facebook.internal.FetchedAppSettingsManager;
+import com.facebook.internal.ServerProtocol;
 import com.facebook.internal.Utility;
 import com.facebook.internal.Validate;
 
 import org.json.JSONException;
 import org.json.JSONObject;
 
+import java.util.Arrays;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 
 public class CustomTabLoginMethodHandler extends WebLoginMethodHandler {
-    private static final String OAUTH_DIALOG = "oauth";
+    private static final int CUSTOM_TAB_REQUEST_CODE = 1;
+    private static final int CHALLENGE_LENGTH = 20;
+    private static final int API_EC_DIALOG_CANCEL = 4201;
     private static final String CUSTOM_TABS_SERVICE_ACTION =
             "android.support.customtabs.action.CustomTabsService";
-    private static final String CHROME_PACKAGE = "com.android.chrome";
+    private static final String[] CHROME_PACKAGES = {
+            "com.android.chrome",
+            "com.chrome.beta",
+            "com.chrome.dev",
+    };
 
-    private CustomTab customTab;
+    private String currentPackage;
+    private String expectedChallenge;
 
     CustomTabLoginMethodHandler(LoginClient loginClient) {
         super(loginClient);
+        expectedChallenge = Utility.generateRandomString(CHALLENGE_LENGTH);
     }
 
     @Override
@@ -59,7 +78,12 @@ String getNameForLogging() {
 
     @Override
     AccessTokenSource getTokenSource() {
-        return AccessTokenSource.CUSTOM_TAB;
+        return AccessTokenSource.CHROME_CUSTOM_TAB;
+    }
+
+    @Override
+    protected String getSSODevice() {
+        return "chrome_custom_tab";
     }
 
     @Override
@@ -72,39 +96,130 @@ boolean tryAuthorize(final LoginClient.Request request) {
         parameters = addExtraParameters(parameters, request);
         Activity activity = loginClient.getActivity();
 
-        customTab = new CustomTab(OAUTH_DIALOG, parameters);
-
-        customTab.openCustomTab(activity);
+        Intent intent = new Intent(activity, CustomTabMainActivity.class);
+        intent.putExtra(CustomTabMainActivity.EXTRA_PARAMS, parameters);
+        intent.putExtra(CustomTabMainActivity.EXTRA_CHROME_PACKAGE, getChromePackage());
+        loginClient.getFragment().startActivityForResult(intent, CUSTOM_TAB_REQUEST_CODE);
 
         return true;
     }
 
-    @Override
-    protected void putChallengeParam(JSONObject param) throws JSONException {
-        if (loginClient.getFragment() instanceof LoginFragment) {
-            param.put(LoginLogger.EVENT_PARAM_CHALLENGE,
-                    ((LoginFragment) loginClient.getFragment()).getChallengeParam());
-        }
-    }
-
     private boolean isCustomTabsAllowed() {
         return isCustomTabsEnabled()
-                && isChromeCustomTabsSupported(loginClient.getActivity())
+                && getChromePackage() != null
                 && Validate.hasCustomTabRedirectActivity(FacebookSdk.getApplicationContext());
     }
 
-    private boolean isChromeCustomTabsSupported(final Context context) {
+    private boolean isCustomTabsEnabled() {
+        final String appId = Utility.getMetadataApplicationId(loginClient.getActivity());
+        final FetchedAppSettings settings = FetchedAppSettingsManager.getAppSettingsWithoutQuery(appId);
+        return settings != null && settings.getCustomTabsEnabled();
+    }
+
+    private String getChromePackage() {
+        if (currentPackage != null) {
+            return currentPackage;
+        }
+        Context context = loginClient.getActivity();
         Intent serviceIntent = new Intent(CUSTOM_TABS_SERVICE_ACTION);
-        serviceIntent.setPackage(CHROME_PACKAGE);
         List<ResolveInfo> resolveInfos =
                 context.getPackageManager().queryIntentServices(serviceIntent, 0);
-        return !(resolveInfos == null || resolveInfos.isEmpty());
+        if (resolveInfos != null) {
+            Set<String> chromePackages = new HashSet<>(Arrays.asList(CHROME_PACKAGES));
+            for (ResolveInfo resolveInfo : resolveInfos) {
+                ServiceInfo serviceInfo = resolveInfo.serviceInfo;
+                if (serviceInfo != null && chromePackages.contains(serviceInfo.packageName)) {
+                    currentPackage = serviceInfo.packageName;
+                    return currentPackage;
+                }
+            }
+        }
+        return null;
     }
 
-    private boolean isCustomTabsEnabled() {
-        final String appId = Utility.getMetadataApplicationId(loginClient.getActivity());
-        final Utility.FetchedAppSettings settings = Utility.getAppSettingsWithoutQuery(appId);
-        return settings != null && settings.getCustomTabsEnabled();
+    @Override
+    boolean onActivityResult(int requestCode, int resultCode, Intent data) {
+        if (requestCode != CUSTOM_TAB_REQUEST_CODE) {
+            return super.onActivityResult(requestCode, resultCode, data);
+        }
+        LoginClient.Request request = loginClient.getPendingRequest();
+        if (resultCode == Activity.RESULT_OK) {
+            onCustomTabComplete(data.getStringExtra(CustomTabMainActivity.EXTRA_URL), request);
+            return true;
+        }
+        super.onComplete(request, null, new FacebookOperationCanceledException());
+        return false;
+    }
+
+    private void onCustomTabComplete(String url, LoginClient.Request request) {
+        if (url != null && url.startsWith(CustomTabMainActivity.getRedirectUrl())) {
+            Uri uri = Uri.parse(url);
+            Bundle values = Utility.parseUrlQueryString(uri.getQuery());
+            values.putAll(Utility.parseUrlQueryString(uri.getFragment()));
+
+            if (!validateChallengeParam(values)) {
+                super.onComplete(request, null, new FacebookException("Invalid state parameter"));
+                return;
+            }
+
+            String error = values.getString("error");
+            if (error == null) {
+                error = values.getString("error_type");
+            }
+
+            String errorMessage = values.getString("error_msg");
+            if (errorMessage == null) {
+                errorMessage = values.getString("error_message");
+            }
+            if (errorMessage == null) {
+                errorMessage = values.getString("error_description");
+            }
+            String errorCodeString = values.getString("error_code");
+            int errorCode = FacebookRequestError.INVALID_ERROR_CODE;
+            if (!Utility.isNullOrEmpty(errorCodeString)) {
+                try {
+                    errorCode = Integer.parseInt(errorCodeString);
+                } catch (NumberFormatException ex) {
+                    errorCode = FacebookRequestError.INVALID_ERROR_CODE;
+                }
+            }
+
+            if (Utility.isNullOrEmpty(error) && Utility.isNullOrEmpty(errorMessage)
+                    && errorCode == FacebookRequestError.INVALID_ERROR_CODE) {
+                super.onComplete(request, values, null);
+            } else if (error != null && (error.equals("access_denied") ||
+                    error.equals("OAuthAccessDeniedException"))) {
+                super.onComplete(request, null, new FacebookOperationCanceledException());
+            } else if (errorCode == API_EC_DIALOG_CANCEL) {
+                super.onComplete(request, null, new FacebookOperationCanceledException());
+            } else {
+                FacebookRequestError requestError =
+                        new FacebookRequestError(errorCode, error, errorMessage);
+                super.onComplete(
+                        request,
+                        null,
+                        new FacebookServiceException(requestError, errorMessage));
+            }
+        }
+    }
+
+    @Override
+    protected void putChallengeParam(JSONObject param) throws JSONException {
+        param.put(LoginLogger.EVENT_PARAM_CHALLENGE, expectedChallenge);
+    }
+
+    private boolean validateChallengeParam(Bundle values) {
+        try {
+            String stateString = values.getString(ServerProtocol.DIALOG_PARAM_STATE);
+            if (stateString == null) {
+                return false;
+            }
+            JSONObject state = new JSONObject(stateString);
+            String challenge = state.getString(LoginLogger.EVENT_PARAM_CHALLENGE);
+            return challenge.equals(expectedChallenge);
+        } catch (JSONException e) {
+            return false;
+        }
     }
 
     @Override
@@ -114,11 +229,13 @@ public int describeContents() {
 
     CustomTabLoginMethodHandler(Parcel source) {
         super(source);
+        expectedChallenge = source.readString();
     }
 
     @Override
     public void writeToParcel(Parcel dest, int flags) {
         super.writeToParcel(dest, flags);
+        dest.writeString(expectedChallenge);
     }
 
     public static final Parcelable.Creator<CustomTabLoginMethodHandler> CREATOR =
diff --git a/facebook/src/main/java/com/facebook/login/DeviceAuthDialog.java b/facebook/src/main/java/com/facebook/login/DeviceAuthDialog.java
index b6f8c66d9..6de72a018 100644
--- a/facebook/src/main/java/com/facebook/login/DeviceAuthDialog.java
+++ b/facebook/src/main/java/com/facebook/login/DeviceAuthDialog.java
@@ -20,8 +20,12 @@
 
 package com.facebook.login;
 
+import android.app.AlertDialog;
 import android.app.Dialog;
 import android.content.DialogInterface;
+import android.graphics.Bitmap;
+import android.graphics.drawable.BitmapDrawable;
+import android.net.Uri;
 import android.os.Bundle;
 import android.os.Parcel;
 import android.os.Parcelable;
@@ -48,6 +52,15 @@
 import com.facebook.GraphResponse;
 import com.facebook.HttpMethod;
 import com.facebook.R;
+import com.facebook.appevents.AppEventsLogger;
+import com.facebook.devicerequests.internal.DeviceRequestsHelper;
+import com.facebook.internal.AnalyticsEvents;
+import com.facebook.internal.FetchedAppSettings;
+import com.facebook.internal.FetchedAppSettingsManager;
+import com.facebook.internal.ImageDownloader;
+import com.facebook.internal.ImageRequest;
+import com.facebook.internal.ImageResponse;
+import com.facebook.internal.SmartLoginOption;
 import com.facebook.internal.Utility;
 import com.facebook.internal.Validate;
 
@@ -81,6 +94,8 @@
     // Used to tell if we are destroying the fragment because it was dismissed or dismissing the
     // fragment because it is being destroyed.
     private boolean isBeingDestroyed = false;
+    private boolean isRetry = false;
+    private LoginClient.Request mRequest = null;
 
     @Nullable
     @Override
@@ -110,22 +125,8 @@ public View onCreateView(
     public Dialog onCreateDialog(Bundle savedInstanceState) {
         dialog = new Dialog(getActivity(), R.style.com_facebook_auth_dialog);
         LayoutInflater inflater = getActivity().getLayoutInflater();
-        View view = inflater.inflate(R.layout.com_facebook_device_auth_dialog_fragment, null);
-        progressBar = (ProgressBar)view.findViewById(R.id.progress_bar);
-        confirmationCode = (TextView)view.findViewById(R.id.confirmation_code);
 
-        Button cancelButton = (Button) view.findViewById(R.id.cancel_button);
-        cancelButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                onCancel();
-            }
-        });
-
-        TextView instructions = (TextView)view.findViewById(
-                R.id.com_facebook_device_auth_instructions);
-        instructions.setText(
-                Html.fromHtml(getString(R.string.com_facebook_device_auth_instructions)));
+        View view = initializeContentView(DeviceRequestsHelper.isAvailable() && !this.isRetry);
 
         dialog.setContentView(view);
         return dialog;
@@ -165,7 +166,8 @@ public void onDestroy() {
     }
 
     public void startLogin(final LoginClient.Request request) {
-        Bundle parameters = new Bundle();
+        this.mRequest = request;
+        final Bundle parameters = new Bundle();
         parameters.putString("scope", TextUtils.join(",", request.getPermissions()));
 
         String redirectUriString = request.getDeviceRedirectUriString();
@@ -175,6 +177,9 @@ public void startLogin(final LoginClient.Request request) {
 
         String accessToken = Validate.hasAppID()+ "|" + Validate.hasClientToken();
         parameters.putString(GraphRequest.ACCESS_TOKEN_PARAM, accessToken);
+        parameters.putString(DeviceRequestsHelper.DEVICE_INFO_PARAM,
+                             DeviceRequestsHelper.getDeviceInfo());
+
         GraphRequest graphRequest = new GraphRequest(
                 null,
                 DEVICE_LOGIN_ENDPOINT,
@@ -183,6 +188,9 @@ public void startLogin(final LoginClient.Request request) {
                 new GraphRequest.Callback() {
             @Override
             public void onCompleted(GraphResponse response) {
+                if (isBeingDestroyed) {
+                    return;
+                }
                 if (response.getError() != null) {
                     onError(response.getError().getException());
                     return;
@@ -211,6 +219,13 @@ private void setCurrentRequestState(RequestState currentRequestState) {
         confirmationCode.setVisibility(View.VISIBLE);
         progressBar.setVisibility(View.GONE);
 
+        if (!isRetry) {
+            if (DeviceRequestsHelper.startAdvertisementService(currentRequestState.getUserCode())) {
+                final AppEventsLogger logger = AppEventsLogger.newLogger(getContext());
+                logger.logSdkEvent(AnalyticsEvents.EVENT_SMART_LOGIN_SERVICE, null, null);
+            }
+        }
+
         // If we polled within the last interval schedule a poll else start a poll.
         if (currentRequestState.withinLastRefreshWindow()) {
             schedulePoll();
@@ -219,6 +234,68 @@ private void setCurrentRequestState(RequestState currentRequestState) {
         }
     }
 
+    private void appendIconToTextView(final TextView textView, final String iconUriString) {
+        final int iconSize = 24;
+        ImageRequest request = new ImageRequest.Builder(
+                this.getContext(),
+                Uri.parse(iconUriString))
+                .setCallback( new ImageRequest.Callback() {
+                    @Override
+                    public void onCompleted(ImageResponse response) {
+                        if (response.getBitmap() != null) {
+                            Bitmap bitmap = Bitmap.createScaledBitmap(response.getBitmap(),
+                                    iconSize, iconSize, false);
+                            BitmapDrawable drawable = new BitmapDrawable(getResources(),
+                                    bitmap);
+                            textView.setCompoundDrawablesWithIntrinsicBounds(
+                                    null, null, drawable, null);
+                        }
+
+                    }
+                }).build();
+        ImageDownloader.downloadAsync(request);
+    }
+
+    private View initializeContentView(boolean isSmartLogin) {
+        View view;
+        LayoutInflater inflater = this.getActivity().getLayoutInflater();
+        if (isSmartLogin) {
+            view = inflater.inflate(R.layout.com_facebook_smart_device_dialog_fragment, null);
+
+            FetchedAppSettings settings =
+                    FetchedAppSettingsManager.getAppSettingsWithoutQuery(
+                            FacebookSdk.getApplicationId());
+            if (settings.getSmartLoginBookmarkIconURL() != null) {
+                final TextView instructions2 = (TextView)view.findViewById(
+                        R.id.com_facebook_smart_instructions_2);
+                this.appendIconToTextView(instructions2, settings.getSmartLoginBookmarkIconURL());
+            }
+            if (settings.getSmartLoginMenuIconURL() != null) {
+                final TextView instructions1 = (TextView)view.findViewById(
+                        R.id.com_facebook_smart_instructions_1);
+                this.appendIconToTextView(instructions1, settings.getSmartLoginMenuIconURL());
+            }
+        } else {
+            view = inflater.inflate(R.layout.com_facebook_device_auth_dialog_fragment, null);
+        }
+        progressBar = (ProgressBar)view.findViewById(R.id.progress_bar);
+        confirmationCode = (TextView)view.findViewById(R.id.confirmation_code);
+
+        Button cancelButton = (Button) view.findViewById(R.id.cancel_button);
+        cancelButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                onCancel();
+            }
+        });
+
+        TextView instructions = (TextView)view.findViewById(
+                R.id.com_facebook_device_auth_instructions);
+        instructions.setText(
+                Html.fromHtml(getString(R.string.com_facebook_device_auth_instructions)));
+        return view;
+    }
+
     private void poll() {
         currentRequestState.setLastPoll(new Date().getTime());
         currentGraphRequestPoll = getPollRequest().executeAsync();
@@ -284,9 +361,37 @@ public void onCompleted(GraphResponse response) {
                 });
     }
 
+    private void presentConfirmation(final String userId,
+                                     final Utility.PermissionsPair permissions,
+                                     final String accessToken,
+                                     final String name) {
+        final String message = getResources().getString(
+            R.string.com_facebook_smart_login_confirmation_title);
+        final String continueFormat = getResources().getString(
+            R.string.com_facebook_smart_login_confirmation_continue_as);
+        final String cancel = getResources().getString(
+            R.string.com_facebook_smart_login_confirmation_cancel);
+        final String continueText = String.format(continueFormat, name);
+        AlertDialog.Builder builder = new AlertDialog.Builder(getContext());
+        builder.setMessage(message)
+                .setCancelable(true)
+                .setNegativeButton(continueText, new DialogInterface.OnClickListener() {
+                    public void onClick(DialogInterface alertDialog, int which) {
+                        completeLogin(userId, permissions, accessToken);
+                    }
+                })
+                .setPositiveButton(cancel, new DialogInterface.OnClickListener() {
+                    public void onClick(DialogInterface alertDialog, int which) {
+                        View view = initializeContentView(false);
+                        dialog.setContentView(view);
+                        startLogin(mRequest);
+                    }
+                });
+        builder.create().show();
+    }
     private void onSuccess(final String accessToken) {
         Bundle parameters = new Bundle();
-        parameters.putString("fields", "id,permissions");
+        parameters.putString("fields", "id,permissions,name");
         AccessToken temporaryToken = new AccessToken(
                 accessToken,
                 FacebookSdk.getApplicationId(),
@@ -316,35 +421,58 @@ public void onCompleted(GraphResponse response) {
 
                         String userId;
                         Utility.PermissionsPair permissions;
+                        String name;
                         try {
                             JSONObject jsonObject = response.getJSONObject();
                             userId = jsonObject.getString("id");
                             permissions = Utility.handlePermissionResponse(jsonObject);
+                            name = jsonObject.getString("name");
                         } catch (JSONException ex) {
                             onError(new FacebookException(ex));
                             return;
                         }
+                        DeviceRequestsHelper.cleanUpAdvertisementService(
+                                currentRequestState.getUserCode());
+
+                        boolean requireConfirm =
+                                FetchedAppSettingsManager.
+                                getAppSettingsWithoutQuery(FacebookSdk.getApplicationId()).
+                                getSmartLoginOptions().contains(SmartLoginOption.RequireConfirm);
+                        if (requireConfirm && !isRetry) {
+                            isRetry = true;
+                            presentConfirmation(userId, permissions, accessToken, name);
+                            return;
+                        }
 
-                        deviceAuthMethodHandler.onSuccess(
-                                accessToken,
-                                FacebookSdk.getApplicationId(),
-                                userId,
-                                permissions.getGrantedPermissions(),
-                                permissions.getDeclinedPermissions(),
-                                AccessTokenSource.DEVICE_AUTH,
-                                null,
-                                null);
-                        dialog.dismiss();
+                        completeLogin(userId, permissions, accessToken);
                     }
                 });
         request.executeAsync();
     }
 
+    private void completeLogin(String userId,
+                               Utility.PermissionsPair permissions,
+                               String accessToken) {
+        deviceAuthMethodHandler.onSuccess(
+                accessToken,
+                FacebookSdk.getApplicationId(),
+                userId,
+                permissions.getGrantedPermissions(),
+                permissions.getDeclinedPermissions(),
+                AccessTokenSource.DEVICE_AUTH,
+                null,
+                null);
+        dialog.dismiss();
+    }
+
     private void onError(FacebookException ex) {
         if (!completed.compareAndSet(false, true)) {
             return;
         }
 
+        if (currentRequestState != null) {
+            DeviceRequestsHelper.cleanUpAdvertisementService(currentRequestState.getUserCode());
+        }
         deviceAuthMethodHandler.onError(ex);
         dialog.dismiss();
     }
@@ -355,6 +483,10 @@ private void onCancel() {
             return;
         }
 
+        if (currentRequestState != null) {
+            DeviceRequestsHelper.cleanUpAdvertisementService(currentRequestState.getUserCode());
+        }
+
         if (deviceAuthMethodHandler != null) {
             // We are detached and cannot send a cancel message back
             deviceAuthMethodHandler.onCancel();
diff --git a/facebook/src/main/java/com/facebook/login/DeviceAuthMethodHandler.java b/facebook/src/main/java/com/facebook/login/DeviceAuthMethodHandler.java
index 9539525f3..e034b18e8 100644
--- a/facebook/src/main/java/com/facebook/login/DeviceAuthMethodHandler.java
+++ b/facebook/src/main/java/com/facebook/login/DeviceAuthMethodHandler.java
@@ -20,7 +20,6 @@
 
 package com.facebook.login;
 
-import android.app.Dialog;
 import android.os.Parcel;
 import android.os.Parcelable;
 
diff --git a/facebook/src/main/java/com/facebook/login/FacebookLiteLoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/FacebookLiteLoginMethodHandler.java
new file mode 100644
index 000000000..4de6dfa9b
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/login/FacebookLiteLoginMethodHandler.java
@@ -0,0 +1,87 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.login;
+
+import android.content.Intent;
+import android.os.Parcel;
+import android.os.Parcelable;
+
+import com.facebook.internal.NativeProtocol;
+import com.facebook.internal.ServerProtocol;
+
+
+class FacebookLiteLoginMethodHandler extends NativeAppLoginMethodHandler {
+
+    FacebookLiteLoginMethodHandler(LoginClient loginClient) {
+        super(loginClient);
+    }
+
+    @Override
+    String getNameForLogging() {
+        return "fb_lite_login";
+    }
+
+    @Override
+    boolean tryAuthorize(LoginClient.Request request) {
+        String e2e = LoginClient.getE2E();
+        Intent intent = NativeProtocol.createFacebookLiteIntent(
+                loginClient.getActivity(),
+                request.getApplicationId(),
+                request.getPermissions(),
+                e2e,
+                request.isRerequest(),
+                request.hasPublishPermission(),
+                request.getDefaultAudience(),
+                getClientState(request.getAuthId()));
+
+        addLoggingExtra(ServerProtocol.DIALOG_PARAM_E2E, e2e);
+
+        return tryIntent(intent, LoginClient.getLoginRequestCode());
+    }
+
+    FacebookLiteLoginMethodHandler(Parcel source) {
+        super(source);
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        super.writeToParcel(dest, flags);
+    }
+
+    public static final Parcelable.Creator<FacebookLiteLoginMethodHandler> CREATOR =
+            new Parcelable.Creator() {
+
+                @Override
+                public FacebookLiteLoginMethodHandler createFromParcel(Parcel source) {
+                    return new FacebookLiteLoginMethodHandler(source);
+                }
+
+                @Override
+                public FacebookLiteLoginMethodHandler[] newArray(int size) {
+                    return new FacebookLiteLoginMethodHandler[size];
+                }
+            };
+}
diff --git a/facebook/src/main/java/com/facebook/login/KatanaProxyLoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/KatanaProxyLoginMethodHandler.java
index 9fb8c5b7d..fee9eac8f 100644
--- a/facebook/src/main/java/com/facebook/login/KatanaProxyLoginMethodHandler.java
+++ b/facebook/src/main/java/com/facebook/login/KatanaProxyLoginMethodHandler.java
@@ -20,22 +20,14 @@
 
 package com.facebook.login;
 
-import android.app.Activity;
-import android.content.ActivityNotFoundException;
 import android.content.Intent;
-import android.os.Bundle;
 import android.os.Parcel;
 import android.os.Parcelable;
 
-import com.facebook.AccessToken;
-import com.facebook.AccessTokenSource;
-import com.facebook.FacebookException;
-import com.facebook.internal.CallbackManagerImpl;
 import com.facebook.internal.NativeProtocol;
 import com.facebook.internal.ServerProtocol;
-import com.facebook.internal.Utility;
 
-class KatanaProxyLoginMethodHandler extends LoginMethodHandler {
+class KatanaProxyLoginMethodHandler extends NativeAppLoginMethodHandler {
 
     KatanaProxyLoginMethodHandler(LoginClient loginClient) {
         super(loginClient);
@@ -64,111 +56,6 @@ boolean tryAuthorize(LoginClient.Request request) {
         return tryIntent(intent, LoginClient.getLoginRequestCode());
     }
 
-    @Override
-    boolean onActivityResult(int requestCode, int resultCode, Intent data) {
-        // Handle stuff
-        LoginClient.Result outcome;
-
-        LoginClient.Request request = loginClient.getPendingRequest();
-
-        if (data == null) {
-            // This happens if the user presses 'Back'.
-            outcome = LoginClient.Result.createCancelResult(request, "Operation canceled");
-        } else if (resultCode == Activity.RESULT_CANCELED) {
-            outcome = handleResultCancel(request, data);
-        } else if (resultCode != Activity.RESULT_OK) {
-            outcome = LoginClient.Result.createErrorResult(request,
-                    "Unexpected resultCode from authorization.", null);
-        } else {
-            outcome = handleResultOk(request, data);
-        }
-
-        if (outcome != null) {
-            loginClient.completeAndValidate(outcome);
-        } else {
-            loginClient.tryNextHandler();
-        }
-        return true;
-    }
-
-    private LoginClient.Result handleResultOk(LoginClient.Request request, Intent data) {
-        Bundle extras = data.getExtras();
-        String error = getError(extras);
-        String errorCode = extras.getString("error_code");
-        String errorMessage = getErrorMessage(extras);
-
-        String e2e = extras.getString(NativeProtocol.FACEBOOK_PROXY_AUTH_E2E_KEY);
-        if (!Utility.isNullOrEmpty(e2e)) {
-            logWebLoginCompleted(e2e);
-        }
-
-        if (error == null && errorCode == null && errorMessage == null) {
-            try {
-                AccessToken token = createAccessTokenFromWebBundle(request.getPermissions(),
-                        extras, AccessTokenSource.FACEBOOK_APPLICATION_WEB,
-                        request.getApplicationId());
-                return LoginClient.Result.createTokenResult(request, token);
-            } catch (FacebookException ex) {
-                return LoginClient.Result.createErrorResult(request, null, ex.getMessage());
-            }
-        } else if (ServerProtocol.errorsProxyAuthDisabled.contains(error)) {
-            return null;
-        } else if (ServerProtocol.errorsUserCanceled.contains(error)) {
-            return LoginClient.Result.createCancelResult(request, null);
-        } else {
-            return LoginClient.Result.createErrorResult(request, error, errorMessage, errorCode);
-        }
-    }
-
-    private LoginClient.Result handleResultCancel(LoginClient.Request request, Intent data) {
-        Bundle extras = data.getExtras();
-        String error = getError(extras);
-        String errorCode = extras.getString("error_code");
-
-        // If the device has lost network, the result will be a cancel with a connection failure
-        // error. We want our consumers to be notified of this as an error so they can tell their
-        // users to "reconnect and try again".
-        if (ServerProtocol.errorConnectionFailure.equals(errorCode)) {
-            String errorMessage = getErrorMessage(extras);
-
-            return LoginClient.Result.createErrorResult(request, error, errorMessage, errorCode);
-        }
-
-        return LoginClient.Result.createCancelResult(request, error);
-    }
-
-    private String getError(Bundle extras) {
-        String error = extras.getString("error");
-        if (error == null) {
-            error = extras.getString("error_type");
-        }
-        return error;
-    }
-
-    private String getErrorMessage(Bundle extras) {
-        String errorMessage = extras.getString("error_message");
-        if (errorMessage == null) {
-            errorMessage = extras.getString("error_description");
-        }
-        return errorMessage;
-    }
-
-    protected boolean tryIntent(Intent intent, int requestCode) {
-        if (intent == null) {
-            return false;
-        }
-
-        try {
-            loginClient.getFragment().startActivityForResult(intent, requestCode);
-        } catch (ActivityNotFoundException e) {
-            // We don't expect this to happen, since we've already validated the intent and bailed
-            // out before now if it couldn't be resolved.
-            return false;
-        }
-
-        return true;
-    }
-
     KatanaProxyLoginMethodHandler(Parcel source) {
         super(source);
     }
diff --git a/facebook/src/main/java/com/facebook/login/LoginBehavior.java b/facebook/src/main/java/com/facebook/login/LoginBehavior.java
index 78194d4f6..45c3cac4b 100644
--- a/facebook/src/main/java/com/facebook/login/LoginBehavior.java
+++ b/facebook/src/main/java/com/facebook/login/LoginBehavior.java
@@ -28,37 +28,60 @@
      * Specifies that login should attempt login in using the Facebook App, and if that
      * does not work fall back to web dialog auth. This is the default behavior.
      */
-    NATIVE_WITH_FALLBACK(true, true, false),
+    NATIVE_WITH_FALLBACK(true, true, true, false, true, true),
 
     /**
      * Specifies that login should only attempt to login using the Facebook App.
      * If the Facebook App cannot be used then the login fails.
      */
-    NATIVE_ONLY(true, false, false),
+    NATIVE_ONLY(true, true, false, false, false, true),
+
+    /**
+     * Specifies that login should only attempt to use Katana Proxy Login.
+     */
+    KATANA_ONLY(false, true, false, false, false, false),
 
     /**
      * Specifies that only the web dialog auth should be used.
      */
-    WEB_ONLY(false, true, false),
+    WEB_ONLY(false, false, true, false, true, false),
+
+    /**
+     * Specifies that only the web view dialog auth should be used.
+     */
+    WEB_VIEW_ONLY(false, false, true, false, false, false),
 
     /**
      * Specifies that device login authentication flow should be used.
      * Use it via ({@link com.facebook.login.widget.DeviceLoginButton DeviceLoginButton}
      * or ({@link com.facebook.login.DeviceLoginManager DeviceLoginManager} to authenticate.
      */
-    DEVICE_AUTH(false, false, true);
+    DEVICE_AUTH(false, false, false, true, false, false);
 
+    private final boolean allowsGetTokenAuth;
     private final boolean allowsKatanaAuth;
     private final boolean allowsWebViewAuth;
     private final boolean allowsDeviceAuth;
+    private final boolean allowsCustomTabAuth;
+    private final boolean allowsFacebookLiteAuth;
 
-    private LoginBehavior(
+    LoginBehavior(
+            boolean allowsGetTokenAuth,
             boolean allowsKatanaAuth,
             boolean allowsWebViewAuth,
-            boolean allowsDeviceAuth) {
+            boolean allowsDeviceAuth,
+            boolean allowsCustomTabAuth,
+            boolean allowsFacebookLiteAuth) {
+        this.allowsGetTokenAuth = allowsGetTokenAuth;
         this.allowsKatanaAuth = allowsKatanaAuth;
         this.allowsWebViewAuth = allowsWebViewAuth;
         this.allowsDeviceAuth = allowsDeviceAuth;
+        this.allowsCustomTabAuth = allowsCustomTabAuth;
+        this.allowsFacebookLiteAuth = allowsFacebookLiteAuth;
+    }
+
+    boolean allowsGetTokenAuth() {
+        return allowsGetTokenAuth;
     }
 
     boolean allowsKatanaAuth() {
@@ -72,4 +95,12 @@ boolean allowsWebViewAuth() {
     boolean allowsDeviceAuth() {
         return allowsDeviceAuth;
     }
+
+    boolean allowsCustomTabAuth() {
+        return allowsCustomTabAuth;
+    }
+
+    boolean allowsFacebookLiteAuth() {
+        return allowsFacebookLiteAuth;
+    }
 }
diff --git a/facebook/src/main/java/com/facebook/login/LoginClient.java b/facebook/src/main/java/com/facebook/login/LoginClient.java
index 347ebf086..486b26b9e 100644
--- a/facebook/src/main/java/com/facebook/login/LoginClient.java
+++ b/facebook/src/main/java/com/facebook/login/LoginClient.java
@@ -24,8 +24,6 @@
 import android.app.Activity;
 import android.content.Intent;
 import android.content.pm.PackageManager;
-import android.net.Uri;
-import android.os.Bundle;
 import android.os.Parcel;
 import android.os.Parcelable;
 import android.support.v4.app.Fragment;
@@ -33,17 +31,13 @@
 import android.text.TextUtils;
 
 import com.facebook.AccessToken;
-import com.facebook.GraphRequest;
-import com.facebook.GraphResponse;
-import com.facebook.appevents.AppEventsConstants;
 import com.facebook.FacebookException;
-import com.facebook.HttpMethod;
 import com.facebook.R;
+import com.facebook.appevents.AppEventsConstants;
 import com.facebook.internal.CallbackManagerImpl;
 import com.facebook.internal.Utility;
 import com.facebook.internal.Validate;
 
-import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
@@ -51,7 +45,6 @@
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.HashSet;
-import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
@@ -154,18 +147,28 @@ public boolean onActivityResult(int requestCode, int resultCode, Intent data) {
         return false;
     }
 
-    private LoginMethodHandler [] getHandlersToTry(Request request) {
+    protected LoginMethodHandler [] getHandlersToTry(Request request) {
         ArrayList<LoginMethodHandler> handlers = new ArrayList<LoginMethodHandler>();
 
         final LoginBehavior behavior = request.getLoginBehavior();
 
-        if (behavior.allowsKatanaAuth()) {
+        if (behavior.allowsGetTokenAuth()) {
             handlers.add(new GetTokenLoginMethodHandler(this));
+        }
+
+        if (behavior.allowsKatanaAuth()) {
             handlers.add(new KatanaProxyLoginMethodHandler(this));
         }
 
-        if (behavior.allowsWebViewAuth()) {
+        if (behavior.allowsFacebookLiteAuth()) {
+            handlers.add(new FacebookLiteLoginMethodHandler(this));
+        }
+
+        if (behavior.allowsCustomTabAuth()) {
             handlers.add(new CustomTabLoginMethodHandler(this));
+        }
+
+        if (behavior.allowsWebViewAuth()) {
             handlers.add(new WebViewLoginMethodHandler(this));
         }
 
@@ -255,6 +258,8 @@ boolean tryCurrentHandler() {
         } else {
             // We didn't try it, so we don't get any other completion
             // notification -- log that we skipped it.
+            getLogger().logAuthorizationMethodNotTried(pendingRequest.getAuthId(),
+                    handler.getNameForLogging());
             addLoggingExtra(
                     LoginLogger.EVENT_EXTRAS_NOT_TRIED,
                     handler.getNameForLogging(),
@@ -329,7 +334,7 @@ void validateSameFbidAndFinish(Result pendingResult) {
         AccessToken newToken = pendingResult.token;
 
         try {
-            Result result = null;
+            Result result;
             if (previousToken != null && newToken != null &&
                     previousToken.getUserId().equals(newToken.getUserId())) {
                 result = Result.createTokenResult(pendingRequest, pendingResult.token);
@@ -512,7 +517,7 @@ private Request(Parcel parcel) {
             this.defaultAudience = enumValue != null ? DefaultAudience.valueOf(enumValue) : null;
             this.applicationId = parcel.readString();
             this.authId = parcel.readString();
-            this.isRerequest = parcel.readByte() != 0 ? true : false;
+            this.isRerequest = parcel.readByte() != 0;
             this.deviceRedirectUriString = parcel.readString();
         }
 
diff --git a/facebook/src/main/java/com/facebook/login/LoginFragment.java b/facebook/src/main/java/com/facebook/login/LoginFragment.java
index 60342afb0..737e3ddc7 100644
--- a/facebook/src/main/java/com/facebook/login/LoginFragment.java
+++ b/facebook/src/main/java/com/facebook/login/LoginFragment.java
@@ -31,14 +31,7 @@
 import android.view.View;
 import android.view.ViewGroup;
 
-import com.facebook.FacebookActivity;
-import com.facebook.FacebookOperationCanceledException;
 import com.facebook.R;
-import com.facebook.internal.ServerProtocol;
-import com.facebook.internal.Utility;
-
-import org.json.JSONException;
-import org.json.JSONObject;
 
 /**
  * This Fragment is a necessary part of the overall Facebook login process
@@ -49,6 +42,7 @@
 
 public class LoginFragment extends Fragment {
     static final String RESULT_KEY = "com.facebook.LoginFragment:Result";
+    static final String REQUEST_KEY = "com.facebook.LoginFragment:Request";
     static final String EXTRA_REQUEST = "request";
 
     private static final String TAG = "LoginFragment";
@@ -56,28 +50,19 @@
             "Cannot call LoginFragment with a null calling package. " +
                     "This can occur if the launchMode of the caller is singleInstance.";
     private static final String SAVED_LOGIN_CLIENT = "loginClient";
-    private static final String SAVED_CHALLENGE = "challenge";
-    private static final int CHALLENGE_LENGTH = 20;
 
     private String callingPackage;
     private LoginClient loginClient;
     private LoginClient.Request request;
-    private boolean restarted;
-    private String expectedChallenge;
 
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-
-        restarted = savedInstanceState != null;
-
         if (savedInstanceState != null) {
             loginClient = savedInstanceState.getParcelable(SAVED_LOGIN_CLIENT);
             loginClient.setFragment(this);
-            expectedChallenge = savedInstanceState.getString(SAVED_CHALLENGE);
         } else {
-            loginClient = new LoginClient(this);
-            expectedChallenge = Utility.generateRandomString(CHALLENGE_LENGTH);
+            loginClient = createLoginClient();
         }
 
         loginClient.setOnCompletedListener(new LoginClient.OnCompletedListener() {
@@ -95,14 +80,15 @@ public void onCompleted(LoginClient.Result outcome) {
         initializeCallingPackage(activity);
         if (activity.getIntent() != null) {
             Intent intent = activity.getIntent();
-            // Set the class loader explicitly to avoid a possible issue where the wrong
-            // class loader is used by android for unmarshalling LoginClient.Request on
-            // Samsung devices
-            intent.setExtrasClassLoader(LoginClient.Request.class.getClassLoader());
-            request = (LoginClient.Request)intent.getParcelableExtra(EXTRA_REQUEST);
+            Bundle bundle = intent.getBundleExtra(REQUEST_KEY);
+            request = bundle.getParcelable(EXTRA_REQUEST);
         }
     }
 
+    protected LoginClient createLoginClient() {
+        return new LoginClient(this);
+    }
+
     @Override
     public void onDestroy() {
         loginClient.cancelCurrentHandler();
@@ -164,17 +150,6 @@ public void onResume() {
             return;
         }
 
-        if (restarted) {
-            Activity activity = getActivity();
-            if (activity instanceof FacebookActivity
-                    && loginClient.getCurrentHandler() instanceof CustomTabLoginMethodHandler) {
-                // custom tab was closed
-                ((FacebookActivity) activity)
-                        .sendResult(null, new FacebookOperationCanceledException());
-            }
-        }
-        restarted = true;
-
         loginClient.startOrContinueAuth(request);
     }
 
@@ -197,7 +172,6 @@ public void onSaveInstanceState(Bundle outState) {
         super.onSaveInstanceState(outState);
 
         outState.putParcelable(SAVED_LOGIN_CLIENT, loginClient);
-        outState.putString(SAVED_CHALLENGE, expectedChallenge);
     }
 
     private void initializeCallingPackage(final Activity activity) {
@@ -208,24 +182,6 @@ private void initializeCallingPackage(final Activity activity) {
         callingPackage = componentName.getPackageName();
     }
 
-    public boolean validateChallengeParam(Bundle values) {
-        try {
-            String stateString = values.getString(ServerProtocol.DIALOG_PARAM_STATE);
-            if (stateString == null) {
-                return false;
-            }
-            JSONObject state = new JSONObject(stateString);
-            String challenge = state.getString(LoginLogger.EVENT_PARAM_CHALLENGE);
-            return challenge.equals(expectedChallenge);
-        } catch (JSONException e) {
-            return false;
-        }
-    }
-
-    public String getChallengeParam() {
-        return expectedChallenge;
-    }
-
     LoginClient getLoginClient() {
         return loginClient;
     }
diff --git a/facebook/src/main/java/com/facebook/login/LoginLogger.java b/facebook/src/main/java/com/facebook/login/LoginLogger.java
index c5a094c76..d8ca97151 100644
--- a/facebook/src/main/java/com/facebook/login/LoginLogger.java
+++ b/facebook/src/main/java/com/facebook/login/LoginLogger.java
@@ -37,6 +37,7 @@
     // Constants for logging login-related data.
     static final String EVENT_NAME_LOGIN_METHOD_START = "fb_mobile_login_method_start";
     static final String EVENT_NAME_LOGIN_METHOD_COMPLETE = "fb_mobile_login_method_complete";
+    static final String EVENT_NAME_LOGIN_METHOD_NOT_TRIED = "fb_mobile_login_method_not_tried";
     static final String EVENT_PARAM_METHOD_RESULT_SKIPPED = "skipped";
     static final String EVENT_NAME_LOGIN_START = "fb_mobile_login_start";
     static final String EVENT_NAME_LOGIN_COMPLETE = "fb_mobile_login_complete";
@@ -142,7 +143,7 @@ public void logCompleteLogin(String loginRequestId, Map<String, String> loggingE
 
         // Combine extras from the request and from the result.
         JSONObject jsonObject = null;
-        if (loggingExtras.isEmpty() == false) {
+        if (!loggingExtras.isEmpty()) {
             jsonObject = new JSONObject(loggingExtras);
         }
         if (resultExtras != null) {
@@ -193,6 +194,13 @@ public void logAuthorizationMethodComplete(String authId, String method, String
         appEventsLogger.logSdkEvent(EVENT_NAME_LOGIN_METHOD_COMPLETE, null, bundle);
     }
 
+    public void logAuthorizationMethodNotTried(String authId, String method) {
+        Bundle bundle = LoginLogger.newAuthorizationLoggingBundle(authId);
+        bundle.putString(EVENT_PARAM_METHOD, method);
+
+        appEventsLogger.logSdkEvent(EVENT_NAME_LOGIN_METHOD_NOT_TRIED, null, bundle);
+    }
+
     public void logUnexpectedError(String eventName, String errorMessage) {
         logUnexpectedError(eventName, errorMessage, "");
     }
diff --git a/facebook/src/main/java/com/facebook/login/LoginManager.java b/facebook/src/main/java/com/facebook/login/LoginManager.java
index 33cbcac15..a43df449a 100644
--- a/facebook/src/main/java/com/facebook/login/LoginManager.java
+++ b/facebook/src/main/java/com/facebook/login/LoginManager.java
@@ -29,7 +29,6 @@
 import android.support.v4.app.Fragment;
 
 import com.facebook.AccessToken;
-import com.facebook.AccessTokenSource;
 import com.facebook.CallbackManager;
 import com.facebook.FacebookActivity;
 import com.facebook.FacebookAuthorizationException;
@@ -180,7 +179,7 @@ boolean onActivityResult(int resultCode, Intent data, FacebookCallback<LoginResu
         boolean isCanceled = false;
         if (data != null) {
             LoginClient.Result result =
-                    (LoginClient.Result) data.getParcelableExtra(LoginFragment.RESULT_KEY);
+                    data.getParcelableExtra(LoginFragment.RESULT_KEY);
             if (result != null) {
                 originalRequest = result.request;
                 code = result.code;
@@ -518,22 +517,18 @@ private boolean tryFacebookActivity(
     private boolean resolveIntent(Intent intent) {
         ResolveInfo resolveInfo = FacebookSdk.getApplicationContext().getPackageManager()
             .resolveActivity(intent, 0);
-        if (resolveInfo == null) {
-            return false;
-        }
-        return true;
+        return resolveInfo != null;
     }
 
-    private Intent getFacebookActivityIntent(LoginClient.Request request) {
+    protected Intent getFacebookActivityIntent(LoginClient.Request request) {
         Intent intent = new Intent();
         intent.setClass(FacebookSdk.getApplicationContext(), FacebookActivity.class);
         intent.setAction(request.getLoginBehavior().toString());
 
         // Let FacebookActivity populate extras appropriately
-        LoginClient.Request authClientRequest = request;
         Bundle extras = new Bundle();
         extras.putParcelable(LoginFragment.EXTRA_REQUEST, request);
-        intent.putExtras(extras);
+        intent.putExtra(LoginFragment.REQUEST_KEY, extras);
 
         return intent;
     }
@@ -584,17 +579,6 @@ private void finishLogin(
         }
     }
 
-    public static void setSuccessResult(Intent intent, Bundle values) {
-        LoginClient.Request request = intent.getExtras().getParcelable(LoginFragment.EXTRA_REQUEST);
-        AccessToken token = LoginMethodHandler.createAccessTokenFromWebBundle(
-                request.getPermissions(),
-                values,
-                AccessTokenSource.CUSTOM_TAB,
-                request.getApplicationId());
-        LoginClient.Result result = LoginClient.Result.createTokenResult(request, token);
-        intent.putExtra(LoginFragment.RESULT_KEY, result);
-    }
-
     private static class ActivityStartActivityDelegate implements StartActivityDelegate {
         private final Activity activity;
 
diff --git a/facebook/src/main/java/com/facebook/login/LoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/LoginMethodHandler.java
index fc3e01879..607dab2ab 100644
--- a/facebook/src/main/java/com/facebook/login/LoginMethodHandler.java
+++ b/facebook/src/main/java/com/facebook/login/LoginMethodHandler.java
@@ -29,13 +29,11 @@
 
 import com.facebook.AccessToken;
 import com.facebook.AccessTokenSource;
-import com.facebook.FacebookAuthorizationException;
 import com.facebook.FacebookException;
 import com.facebook.appevents.AppEventsLogger;
 import com.facebook.internal.AnalyticsEvents;
 import com.facebook.internal.NativeProtocol;
 import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
 
 import org.json.JSONException;
 import org.json.JSONObject;
diff --git a/facebook/src/main/java/com/facebook/login/NativeAppLoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/NativeAppLoginMethodHandler.java
new file mode 100644
index 000000000..be86941ad
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/login/NativeAppLoginMethodHandler.java
@@ -0,0 +1,152 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.login;
+
+import android.app.Activity;
+import android.content.ActivityNotFoundException;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Parcel;
+
+import com.facebook.AccessToken;
+import com.facebook.AccessTokenSource;
+import com.facebook.FacebookException;
+import com.facebook.internal.NativeProtocol;
+import com.facebook.internal.ServerProtocol;
+import com.facebook.internal.Utility;
+
+abstract class NativeAppLoginMethodHandler extends LoginMethodHandler {
+
+    NativeAppLoginMethodHandler(LoginClient loginClient) {
+        super(loginClient);
+    }
+
+    NativeAppLoginMethodHandler(Parcel source) {
+        super(source);
+    }
+
+    abstract boolean tryAuthorize(LoginClient.Request request);
+
+    @Override
+    boolean onActivityResult(int requestCode, int resultCode, Intent data) {
+        // Handle stuff
+        LoginClient.Result outcome;
+
+        LoginClient.Request request = loginClient.getPendingRequest();
+
+        if (data == null) {
+            // This happens if the user presses 'Back'.
+            outcome = LoginClient.Result.createCancelResult(request, "Operation canceled");
+        } else if (resultCode == Activity.RESULT_CANCELED) {
+            outcome = handleResultCancel(request, data);
+        } else if (resultCode != Activity.RESULT_OK) {
+            outcome = LoginClient.Result.createErrorResult(request,
+                    "Unexpected resultCode from authorization.", null);
+        } else {
+            outcome = handleResultOk(request, data);
+        }
+
+        if (outcome != null) {
+            loginClient.completeAndValidate(outcome);
+        } else {
+            loginClient.tryNextHandler();
+        }
+        return true;
+    }
+
+    private LoginClient.Result handleResultOk(LoginClient.Request request, Intent data) {
+        Bundle extras = data.getExtras();
+        String error = getError(extras);
+        String errorCode = extras.getString("error_code");
+        String errorMessage = getErrorMessage(extras);
+
+        String e2e = extras.getString(NativeProtocol.FACEBOOK_PROXY_AUTH_E2E_KEY);
+        if (!Utility.isNullOrEmpty(e2e)) {
+            logWebLoginCompleted(e2e);
+        }
+
+        if (error == null && errorCode == null && errorMessage == null) {
+            try {
+                AccessToken token = createAccessTokenFromWebBundle(request.getPermissions(),
+                        extras, AccessTokenSource.FACEBOOK_APPLICATION_WEB,
+                        request.getApplicationId());
+                return LoginClient.Result.createTokenResult(request, token);
+            } catch (FacebookException ex) {
+                return LoginClient.Result.createErrorResult(request, null, ex.getMessage());
+            }
+        } else if (ServerProtocol.errorsProxyAuthDisabled.contains(error)) {
+            return null;
+        } else if (ServerProtocol.errorsUserCanceled.contains(error)) {
+            return LoginClient.Result.createCancelResult(request, null);
+        } else {
+            return LoginClient.Result.createErrorResult(request, error, errorMessage, errorCode);
+        }
+    }
+
+    private LoginClient.Result handleResultCancel(LoginClient.Request request, Intent data) {
+        Bundle extras = data.getExtras();
+        String error = getError(extras);
+        String errorCode = extras.getString("error_code");
+
+        // If the device has lost network, the result will be a cancel with a connection failure
+        // error. We want our consumers to be notified of this as an error so they can tell their
+        // users to "reconnect and try again".
+        if (ServerProtocol.errorConnectionFailure.equals(errorCode)) {
+            String errorMessage = getErrorMessage(extras);
+
+            return LoginClient.Result.createErrorResult(request, error, errorMessage, errorCode);
+        }
+
+        return LoginClient.Result.createCancelResult(request, error);
+    }
+
+    private String getError(Bundle extras) {
+        String error = extras.getString("error");
+        if (error == null) {
+            error = extras.getString("error_type");
+        }
+        return error;
+    }
+
+    private String getErrorMessage(Bundle extras) {
+        String errorMessage = extras.getString("error_message");
+        if (errorMessage == null) {
+            errorMessage = extras.getString("error_description");
+        }
+        return errorMessage;
+    }
+
+    protected boolean tryIntent(Intent intent, int requestCode) {
+        if (intent == null) {
+            return false;
+        }
+
+        try {
+            loginClient.getFragment().startActivityForResult(intent, requestCode);
+        } catch (ActivityNotFoundException e) {
+            // We don't expect this to happen, since we've already validated the intent and bailed
+            // out before now if it couldn't be resolved.
+            return false;
+        }
+
+        return true;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/login/WebLoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/WebLoginMethodHandler.java
index 0a0db1937..1aa098c76 100644
--- a/facebook/src/main/java/com/facebook/login/WebLoginMethodHandler.java
+++ b/facebook/src/main/java/com/facebook/login/WebLoginMethodHandler.java
@@ -61,6 +61,10 @@ private static final String getRedirectUri() {
 
     abstract AccessTokenSource getTokenSource();
 
+    protected String getSSODevice() {
+        return null;
+    }
+
     protected Bundle getParameters(final LoginClient.Request request) {
         Bundle parameters = new Bundle();
         if (!Utility.isNullOrEmpty(request.getPermissions())) {
@@ -108,12 +112,11 @@ protected Bundle addExtraParameters(Bundle parameters, final LoginClient.Request
         parameters.putString(
                 ServerProtocol.DIALOG_PARAM_RETURN_SCOPES,
                 ServerProtocol.DIALOG_RETURN_SCOPES_TRUE);
-
-        // Set the re-request auth type for requests
-        if (request.isRerequest()) {
-            parameters.putString(
-                    ServerProtocol.DIALOG_PARAM_AUTH_TYPE,
-                    ServerProtocol.DIALOG_REREQUEST_AUTH_TYPE);
+        parameters.putString(
+                ServerProtocol.DIALOG_PARAM_AUTH_TYPE,
+                ServerProtocol.DIALOG_REREQUEST_AUTH_TYPE);
+        if (getSSODevice() != null) {
+            parameters.putString(ServerProtocol.DIALOG_PARAM_SSO_DEVICE, getSSODevice());
         }
 
         return parameters;
diff --git a/facebook/src/main/java/com/facebook/login/WebViewLoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/WebViewLoginMethodHandler.java
index cb7245c6c..e83ead459 100644
--- a/facebook/src/main/java/com/facebook/login/WebViewLoginMethodHandler.java
+++ b/facebook/src/main/java/com/facebook/login/WebViewLoginMethodHandler.java
@@ -134,13 +134,9 @@ public WebDialog build() {
             parameters.putString(
                     ServerProtocol.DIALOG_PARAM_RETURN_SCOPES,
                     ServerProtocol.DIALOG_RETURN_SCOPES_TRUE);
-
-            // Set the re-request auth type for requests
-            if (isRerequest) {
-                parameters.putString(
+            parameters.putString(
                         ServerProtocol.DIALOG_PARAM_AUTH_TYPE,
                         ServerProtocol.DIALOG_REREQUEST_AUTH_TYPE);
-            }
 
             return new WebDialog(getContext(), OAUTH_DIALOG, parameters, getTheme(), getListener());
         }
diff --git a/facebook/src/main/java/com/facebook/login/widget/LoginButton.java b/facebook/src/main/java/com/facebook/login/widget/LoginButton.java
index 0ae9eb9a2..bba109f0a 100644
--- a/facebook/src/main/java/com/facebook/login/widget/LoginButton.java
+++ b/facebook/src/main/java/com/facebook/login/widget/LoginButton.java
@@ -27,17 +27,26 @@
 import android.content.res.TypedArray;
 import android.graphics.Canvas;
 import android.graphics.Paint;
-import android.net.Uri;
 import android.os.Bundle;
+import android.support.v7.content.res.AppCompatResources;
 import android.util.AttributeSet;
 import android.view.View;
-import com.facebook.*;
+
+import com.facebook.AccessToken;
+import com.facebook.AccessTokenTracker;
+import com.facebook.CallbackManager;
+import com.facebook.FacebookButtonBase;
+import com.facebook.FacebookCallback;
+import com.facebook.FacebookSdk;
+import com.facebook.Profile;
+import com.facebook.R;
 import com.facebook.appevents.AppEventsLogger;
 import com.facebook.internal.AnalyticsEvents;
 import com.facebook.internal.CallbackManagerImpl;
+import com.facebook.internal.FetchedAppSettings;
+import com.facebook.internal.FetchedAppSettingsManager;
 import com.facebook.internal.LoginAuthorizationType;
 import com.facebook.internal.Utility;
-import com.facebook.internal.Utility.FetchedAppSettings;
 import com.facebook.login.DefaultAudience;
 import com.facebook.login.LoginBehavior;
 import com.facebook.login.LoginManager;
@@ -123,7 +132,7 @@ public int getValue() {
 
     static class LoginButtonProperties {
         private DefaultAudience defaultAudience = DefaultAudience.FRIENDS;
-        private List<String> permissions = Collections.<String>emptyList();
+        private List<String> permissions = Collections.emptyList();
         private LoginAuthorizationType authorizationType = null;
         private LoginBehavior loginBehavior = LoginBehavior.NATIVE_WITH_FALLBACK;
 
@@ -488,7 +497,7 @@ private void checkToolTipSettings() {
                 FacebookSdk.getExecutor().execute(new Runnable() {
                     @Override
                     public void run() {
-                        final FetchedAppSettings settings = Utility.queryAppSettings(appId, false);
+                        final FetchedAppSettings settings = FetchedAppSettingsManager.queryAppSettings(appId, false);
                         getActivity().runOnUiThread(new Runnable() {
                             @Override
                             public void run() {
@@ -558,7 +567,7 @@ protected void configureButton(
             setBackgroundColor(getResources().getColor(R.color.com_facebook_blue));
             // hardcoding in edit mode as getResources().getString() doesn't seem to work in
             // IntelliJ
-            loginText = "Log in with Facebook";
+            loginText = "Continue with Facebook";
         } else {
             accessTokenTracker = new AccessTokenTracker() {
                 @Override
@@ -571,6 +580,13 @@ protected void onCurrentAccessTokenChanged(
         }
 
         setButtonText();
+
+        // set vector drawables on the button
+        setCompoundDrawablesWithIntrinsicBounds(
+            AppCompatResources.getDrawable(getContext(), R.drawable.com_facebook_button_login_logo),
+            null,
+            null,
+            null);
     }
 
     protected LoginClickListener getNewLoginClickListener() {
@@ -617,7 +633,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         int logInWidth;
         int width;
         if (text == null) {
-            text = resources.getString(R.string.com_facebook_loginview_log_in_button_long);
+            text = resources.getString(R.string.com_facebook_loginview_log_in_button_continue);
             logInWidth = measureButtonWidth(text);
             width = resolveSize(logInWidth, widthMeasureSpec);
             if (width < logInWidth) {
@@ -638,11 +654,10 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
 
     private int measureButtonWidth(final String text) {
         int textWidth = measureTextWidth(text);
-        int width = (getCompoundPaddingLeft() +
+        return (getCompoundPaddingLeft() +
                 getCompoundDrawablePadding() +
                 textWidth +
                 getCompoundPaddingRight());
-        return width;
     }
 
     private void setButtonText() {
@@ -656,7 +671,7 @@ private void setButtonText() {
                 setText(loginText);
             } else {
                 String text = resources.getString(
-                        R.string.com_facebook_loginview_log_in_button_long);
+                        R.string.com_facebook_loginview_log_in_button_continue);
                 int width = getWidth();
                 // if the width is 0, we are going to measure size, so use the long text
                 if (width != 0) {
diff --git a/facebook/src/main/java/com/facebook/share/DeviceShareDialog.java b/facebook/src/main/java/com/facebook/share/DeviceShareDialog.java
index c9c017124..bbf8422e8 100644
--- a/facebook/src/main/java/com/facebook/share/DeviceShareDialog.java
+++ b/facebook/src/main/java/com/facebook/share/DeviceShareDialog.java
@@ -22,7 +22,6 @@
 import android.app.Activity;
 import android.app.Fragment;
 import android.content.Intent;
-import android.os.Bundle;
 
 import com.facebook.FacebookActivity;
 import com.facebook.FacebookCallback;
@@ -121,7 +120,6 @@ protected void registerCallbackImpl(
                 new CallbackManagerImpl.Callback() {
                     @Override
                     public boolean onActivityResult(int resultCode, Intent data) {
-                        Bundle extras = data.getExtras();
                         if (data.hasExtra("error")) {
                             FacebookRequestError error = data.getParcelableExtra("error");
                             callback.onError(error.getException());
diff --git a/facebook/src/main/java/com/facebook/share/ShareApi.java b/facebook/src/main/java/com/facebook/share/ShareApi.java
index 2917e345e..7940f63f2 100644
--- a/facebook/src/main/java/com/facebook/share/ShareApi.java
+++ b/facebook/src/main/java/com/facebook/share/ShareApi.java
@@ -350,7 +350,7 @@ public void onCompleted(GraphResponse response) {
         };
         try {
             for (SharePhoto photo : photoContent.getPhotos()) {
-                Bundle params = null;
+                Bundle params;
                 try {
                     params = getSharePhotoCommonParameters(photo, photoContent);
                 } catch (JSONException e) {
diff --git a/facebook/src/main/java/com/facebook/share/internal/DeviceShareDialogFragment.java b/facebook/src/main/java/com/facebook/share/internal/DeviceShareDialogFragment.java
index ba25eed17..9a974f2fc 100644
--- a/facebook/src/main/java/com/facebook/share/internal/DeviceShareDialogFragment.java
+++ b/facebook/src/main/java/com/facebook/share/internal/DeviceShareDialogFragment.java
@@ -43,6 +43,7 @@
 import com.facebook.GraphResponse;
 import com.facebook.HttpMethod;
 import com.facebook.R;
+import com.facebook.devicerequests.internal.DeviceRequestsHelper;
 import com.facebook.internal.Validate;
 import com.facebook.share.model.ShareContent;
 import com.facebook.share.model.ShareLinkContent;
@@ -110,9 +111,6 @@ public void onClick(View v) {
         instructions.setText(
                 Html.fromHtml(getString(R.string.com_facebook_device_auth_instructions)));
 
-        TextView title = (TextView)view.findViewById(
-                R.id.com_facebook_device_dialog_title);
-        title.setText(getString(R.string.com_facebook_share_button_text));
         dialog.setContentView(view);
 
         this.startShare();
@@ -138,6 +136,8 @@ public void onSaveInstanceState(Bundle outState) {
     }
 
     private void finishActivity(int resultCode, Intent data) {
+        DeviceRequestsHelper.cleanUpAdvertisementService(currentRequestState.getUserCode());
+
         if (isAdded()) {
             Activity activity = getActivity();
             activity.setResult(resultCode, data);
@@ -174,8 +174,12 @@ private void startShare() {
             this.finishActivityWithError(
                     new FacebookRequestError(0, "", "Failed to get share content"));
         }
+
         String accessToken = Validate.hasAppID()+ "|" + Validate.hasClientToken();
         parameters.putString(GraphRequest.ACCESS_TOKEN_PARAM, accessToken);
+        parameters.putString(DeviceRequestsHelper.DEVICE_INFO_PARAM,
+                             DeviceRequestsHelper.getDeviceInfo());
+
         GraphRequest graphRequest = new GraphRequest(
                 null,
                 DEVICE_SHARE_ENDPOINT,
diff --git a/facebook/src/main/java/com/facebook/share/internal/LegacyNativeDialogParameters.java b/facebook/src/main/java/com/facebook/share/internal/LegacyNativeDialogParameters.java
index a00f9e5fc..7b187ac5b 100644
--- a/facebook/src/main/java/com/facebook/share/internal/LegacyNativeDialogParameters.java
+++ b/facebook/src/main/java/com/facebook/share/internal/LegacyNativeDialogParameters.java
@@ -20,7 +20,6 @@
 
 package com.facebook.share.internal;
 
-import android.content.Context;
 import android.os.Bundle;
 
 import com.facebook.FacebookException;
@@ -28,7 +27,6 @@
 import com.facebook.internal.Validate;
 import com.facebook.share.model.ShareContent;
 import com.facebook.share.model.ShareLinkContent;
-import com.facebook.share.model.ShareOpenGraphAction;
 import com.facebook.share.model.ShareOpenGraphContent;
 import com.facebook.share.model.SharePhotoContent;
 import com.facebook.share.model.ShareVideoContent;
diff --git a/facebook/src/main/java/com/facebook/share/internal/LikeActionController.java b/facebook/src/main/java/com/facebook/share/internal/LikeActionController.java
index 04caec8ef..3f0c8fd27 100644
--- a/facebook/src/main/java/com/facebook/share/internal/LikeActionController.java
+++ b/facebook/src/main/java/com/facebook/share/internal/LikeActionController.java
@@ -38,7 +38,6 @@
 import com.facebook.internal.FragmentWrapper;
 import com.facebook.internal.Logger;
 import com.facebook.internal.NativeProtocol;
-import com.facebook.internal.ServerProtocol;
 import com.facebook.internal.Utility;
 import com.facebook.internal.WorkQueue;
 import com.facebook.share.widget.LikeView;
@@ -1677,7 +1676,7 @@ protected void setRequest(GraphRequest request) {
             this.request = request;
             // Make sure that our requests are hitting the latest version of the API known to this
             // sdk.
-            request.setVersion(ServerProtocol.GRAPH_API_VERSION);
+            request.setVersion(FacebookSdk.getGraphApiVersion());
             request.setCallback(new GraphRequest.Callback() {
                 @Override
                 public void onCompleted(GraphResponse response) {
diff --git a/facebook/src/main/java/com/facebook/share/internal/LikeContent.java b/facebook/src/main/java/com/facebook/share/internal/LikeContent.java
index 481c03575..ffd46cbce 100644
--- a/facebook/src/main/java/com/facebook/share/internal/LikeContent.java
+++ b/facebook/src/main/java/com/facebook/share/internal/LikeContent.java
@@ -126,11 +126,5 @@ public Builder readFrom(final LikeContent content) {
                     .setObjectId(content.getObjectId())
                     .setObjectType(content.getObjectType());
         }
-
-        @Override
-        public Builder readFrom(final Parcel parcel) {
-            return this.readFrom((LikeContent) parcel
-                    .readParcelable(LikeContent.class.getClassLoader()));
-        }
     }
 }
diff --git a/facebook/src/main/java/com/facebook/share/internal/OpenGraphJSONUtility.java b/facebook/src/main/java/com/facebook/share/internal/OpenGraphJSONUtility.java
index dfa01941d..787600ca2 100644
--- a/facebook/src/main/java/com/facebook/share/internal/OpenGraphJSONUtility.java
+++ b/facebook/src/main/java/com/facebook/share/internal/OpenGraphJSONUtility.java
@@ -20,9 +20,8 @@
 
 package com.facebook.share.internal;
 
-import android.os.Bundle;
 import android.support.annotation.Nullable;
-import com.facebook.internal.Validate;
+
 import com.facebook.share.model.ShareOpenGraphAction;
 import com.facebook.share.model.ShareOpenGraphObject;
 import com.facebook.share.model.SharePhoto;
diff --git a/facebook/src/main/java/com/facebook/share/internal/ShareConstants.java b/facebook/src/main/java/com/facebook/share/internal/ShareConstants.java
index c5f3f44b7..550545b96 100644
--- a/facebook/src/main/java/com/facebook/share/internal/ShareConstants.java
+++ b/facebook/src/main/java/com/facebook/share/internal/ShareConstants.java
@@ -44,6 +44,8 @@
     public static final String WEB_DIALOG_PARAM_ACTION_PROPERTIES = "action_properties";
     public static final String WEB_DIALOG_PARAM_QUOTE = "quote";
     public static final String WEB_DIALOG_PARAM_HASHTAG = "hashtag";
+    // Images from a SharePhotoContent
+    public static final String WEB_DIALOG_PARAM_MEDIA =   "media";
 
     // Feed Dialog Params
     public static final String WEB_DIALOG_PARAM_LINK = "link";
@@ -111,6 +113,7 @@
     public static final String PROMO_CODE = "promo_code";
     public static final String PROMO_TEXT = "promo_text";
     public static final String DEEPLINK_CONTEXT = "deeplink_context";
+    public static final String DESTINATION = "destination";
 
     // Extras supported for MESSAGE_GET_LIKE_STATUS_REQUEST:
     public static final String EXTRA_OBJECT_ID = "com.facebook.platform.extra.OBJECT_ID";
diff --git a/facebook/src/main/java/com/facebook/share/internal/ShareContentValidation.java b/facebook/src/main/java/com/facebook/share/internal/ShareContentValidation.java
index ef0dbc864..728534c7e 100644
--- a/facebook/src/main/java/com/facebook/share/internal/ShareContentValidation.java
+++ b/facebook/src/main/java/com/facebook/share/internal/ShareContentValidation.java
@@ -138,7 +138,7 @@ private static void validatePhotoContent(
         }
     }
 
-    private static void validatePhotoForApi(SharePhoto photo, Validator validator) {
+    private static void validatePhoto(SharePhoto photo) {
         if (photo == null) {
             throw new FacebookException("Cannot share a null SharePhoto");
         }
@@ -146,17 +146,21 @@ private static void validatePhotoForApi(SharePhoto photo, Validator validator) {
         Bitmap photoBitmap = photo.getBitmap();
         Uri photoUri = photo.getImageUrl();
 
-        if (photoBitmap == null) {
-            if (photoUri == null) {
-                throw new FacebookException(
-                        "SharePhoto does not have a Bitmap or ImageUrl specified");
-            }
+        if (photoBitmap == null && photoUri == null) {
+            throw new FacebookException("SharePhoto does not have a Bitmap or ImageUrl specified");
+        }
+    }
 
-            if (Utility.isWebUri(photoUri) && !validator.isOpenGraphContent()) {
-                throw new FacebookException(
-                        "Cannot set the ImageUrl of a SharePhoto to the Uri of an image on the " +
-                                "web when sharing SharePhotoContent");
-            }
+    private static void validatePhotoForApi(SharePhoto photo, Validator validator) {
+        validatePhoto(photo);
+
+        Bitmap photoBitmap = photo.getBitmap();
+        Uri photoUri = photo.getImageUrl();
+
+        if (photoBitmap == null && Utility.isWebUri(photoUri) && !validator.isOpenGraphContent()) {
+            throw new FacebookException(
+                    "Cannot set the ImageUrl of a SharePhoto to the Uri of an image on the " +
+                            "web when sharing SharePhotoContent");
         }
     }
 
@@ -169,16 +173,7 @@ private static void validatePhotoForNativeDialog(SharePhoto photo, Validator val
     }
 
     private static void validatePhotoForWebDialog(SharePhoto photo, Validator validator) {
-        if (photo == null) {
-            throw new FacebookException("Cannot share a null SharePhoto");
-        }
-
-        Uri imageUri = photo.getImageUrl();
-        if (imageUri == null || !Utility.isWebUri(imageUri)) {
-            throw new FacebookException(
-                    "SharePhoto must have a non-null imageUrl set to the Uri of an image " +
-                            "on the web");
-        }
+        validatePhoto(photo);
     }
 
     private static void validateVideoContent(
@@ -265,7 +260,7 @@ private static void validateOpenGraphAction(
             throw new FacebookException("ShareOpenGraphAction must have a non-empty actionType");
         }
 
-        validator.validate((ShareOpenGraphValueContainer) openGraphAction, false);
+        validator.validate(openGraphAction, false);
     }
 
     private static void validateOpenGraphObject(
@@ -275,7 +270,7 @@ private static void validateOpenGraphObject(
             throw new FacebookException("Cannot share a null ShareOpenGraphObject");
         }
 
-        validator.validate((ShareOpenGraphValueContainer) openGraphObject, true);
+        validator.validate(openGraphObject, true);
     }
 
     private static void validateOpenGraphValueContainer(
@@ -328,11 +323,6 @@ private static void validateOpenGraphValueContainerObject(
     }
 
     private static class WebShareValidator extends Validator {
-        @Override
-        public void validate(final SharePhotoContent photoContent) {
-            throw new FacebookException("Cannot share SharePhotoContent via web sharing dialogs");
-        }
-
         @Override
         public void validate(final ShareVideoContent videoContent) {
             throw new FacebookException("Cannot share ShareVideoContent via web sharing dialogs");
diff --git a/facebook/src/main/java/com/facebook/share/internal/ShareFeedContent.java b/facebook/src/main/java/com/facebook/share/internal/ShareFeedContent.java
index 2ae7bf88f..e3f3cdfdd 100644
--- a/facebook/src/main/java/com/facebook/share/internal/ShareFeedContent.java
+++ b/facebook/src/main/java/com/facebook/share/internal/ShareFeedContent.java
@@ -25,9 +25,6 @@
 
 import com.facebook.share.model.ShareContent;
 
-import java.util.HashMap;
-import java.util.Map;
-
 // This class is used specifically for backwards support in unity for various feed parameters
 // Currently this content is only supported if you set the mode to Feed when sharing.
 public class ShareFeedContent
@@ -186,13 +183,5 @@ public Builder readFrom(final ShareFeedContent model) {
                     .setMediaSource(model.getMediaSource())
                     ;
         }
-
-        @Override
-        public Builder readFrom(final Parcel parcel) {
-            return this.readFrom(
-                    (ShareFeedContent) parcel.readParcelable(
-                            ShareFeedContent.class.getClassLoader()));
-        }
-
     }
 }
diff --git a/facebook/src/main/java/com/facebook/share/internal/ShareInternalUtility.java b/facebook/src/main/java/com/facebook/share/internal/ShareInternalUtility.java
index 4e8305eb2..c5c8d365f 100644
--- a/facebook/src/main/java/com/facebook/share/internal/ShareInternalUtility.java
+++ b/facebook/src/main/java/com/facebook/share/internal/ShareInternalUtility.java
@@ -401,7 +401,7 @@ public JSONObject toJSONObject(SharePhoto photo) {
             for (String peopleId : content.getPeopleIds()) {
                 peopleIdSet.add(peopleId);
             }
-            actionJSON.put("tags", new ArrayList<>(peopleIdSet));
+            actionJSON.put("tags", new JSONArray(peopleIdSet));
         }
 
         return actionJSON;
@@ -460,7 +460,7 @@ public static JSONObject removeNamespacesFromOGJsonObject(
             JSONArray names = jsonObject.names();
             for (int i = 0; i < names.length(); ++i) {
                 String key = names.getString(i);
-                Object value = null;
+                Object value;
                 value = jsonObject.get(key);
                 if (value instanceof JSONObject) {
                     value = removeNamespacesFromOGJsonObject((JSONObject) value, true);
diff --git a/facebook/src/main/java/com/facebook/share/internal/VideoUploader.java b/facebook/src/main/java/com/facebook/share/internal/VideoUploader.java
index 52a012d9d..48c370a22 100644
--- a/facebook/src/main/java/com/facebook/share/internal/VideoUploader.java
+++ b/facebook/src/main/java/com/facebook/share/internal/VideoUploader.java
@@ -230,7 +230,7 @@ private static synchronized void enqueueRequest(
         int bufferSize = Math.min(8192, chunkSize);
         byte[] buffer = new byte[bufferSize];
 
-        int len = 0;
+        int len;
         while ((len = uploadContext.videoStream.read(buffer)) != -1) {
             byteBufferStream.write(buffer, 0, len);
 
@@ -333,7 +333,7 @@ private UploadContext(
 
         private void initialize()
                 throws FileNotFoundException {
-            ParcelFileDescriptor fileDescriptor = null;
+            ParcelFileDescriptor fileDescriptor;
             try {
                 if (Utility.isFileUri(videoUri)) {
                     fileDescriptor = ParcelFileDescriptor.open(
diff --git a/facebook/src/main/java/com/facebook/share/internal/WebDialogParameters.java b/facebook/src/main/java/com/facebook/share/internal/WebDialogParameters.java
index 3cff1b099..ca2b5f5d8 100644
--- a/facebook/src/main/java/com/facebook/share/internal/WebDialogParameters.java
+++ b/facebook/src/main/java/com/facebook/share/internal/WebDialogParameters.java
@@ -21,27 +21,22 @@
 package com.facebook.share.internal;
 
 import android.os.Bundle;
-import android.support.annotation.NonNull;
 
 import com.facebook.FacebookException;
 import com.facebook.internal.Utility;
-import com.facebook.internal.WebDialog;
 import com.facebook.share.model.AppGroupCreationContent;
 import com.facebook.share.model.GameRequestContent;
 import com.facebook.share.model.ShareContent;
 import com.facebook.share.model.ShareHashtag;
 import com.facebook.share.model.ShareLinkContent;
 import com.facebook.share.model.ShareOpenGraphContent;
+import com.facebook.share.model.SharePhoto;
+import com.facebook.share.model.SharePhotoContent;
 
-import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.util.Collection;
-import java.util.HashMap;
 import java.util.Locale;
-import java.util.Map;
-import java.util.Set;
 
 /**
  * com.facebook.share.internal is solely for the use of other packages within the
@@ -156,6 +151,24 @@ public static Bundle create(ShareOpenGraphContent shareOpenGraphContent) {
         return params;
     }
 
+    public static Bundle create(SharePhotoContent sharePhotoContent) {
+        final Bundle params = createBaseParameters(sharePhotoContent);
+
+        final String[] urls = new String[sharePhotoContent.getPhotos().size()];
+        Utility.map(
+                sharePhotoContent.getPhotos(),
+                new Utility.Mapper<SharePhoto, String>() {
+                    @Override
+                    public String apply(SharePhoto item) {
+                        return item.getImageUrl().toString();
+                    }
+                }).toArray(urls);
+
+        params.putStringArray(ShareConstants.WEB_DIALOG_PARAM_MEDIA ,urls);
+
+        return params;
+    }
+
     public static Bundle createBaseParameters(ShareContent shareContent) {
         Bundle params = new Bundle();
 
@@ -193,6 +206,18 @@ public static Bundle createForFeed(ShareLinkContent shareLinkContent) {
                 ShareConstants.WEB_DIALOG_PARAM_PICTURE,
                 Utility.getUriString(shareLinkContent.getImageUrl()));
 
+        Utility.putNonEmptyString(
+                webParams,
+                ShareConstants.WEB_DIALOG_PARAM_QUOTE,
+                shareLinkContent.getQuote());
+
+        ShareHashtag shareHashtag = shareLinkContent.getShareHashtag();
+        if (shareHashtag != null) {
+            Utility.putNonEmptyString(
+                    webParams,
+                    ShareConstants.WEB_DIALOG_PARAM_HASHTAG,
+                    shareLinkContent.getShareHashtag().getHashtag());
+        }
         return webParams;
     }
 
diff --git a/facebook/src/main/java/com/facebook/share/model/AppGroupCreationContent.java b/facebook/src/main/java/com/facebook/share/model/AppGroupCreationContent.java
index a63f5f9dd..d85a06756 100644
--- a/facebook/src/main/java/com/facebook/share/model/AppGroupCreationContent.java
+++ b/facebook/src/main/java/com/facebook/share/model/AppGroupCreationContent.java
@@ -164,12 +164,5 @@ public Builder readFrom(final AppGroupCreationContent content) {
                     .setDescription(content.getDescription())
                     .setAppGroupPrivacy(content.getAppGroupPrivacy());
         }
-
-        @Override
-        public Builder readFrom(final Parcel parcel) {
-            return this.readFrom(
-                    (AppGroupCreationContent) parcel.readParcelable(
-                            AppGroupCreationContent.class.getClassLoader()));
-        }
     }
 }
diff --git a/facebook/src/main/java/com/facebook/share/model/AppInviteContent.java b/facebook/src/main/java/com/facebook/share/model/AppInviteContent.java
index 46d313295..c9b690cf5 100644
--- a/facebook/src/main/java/com/facebook/share/model/AppInviteContent.java
+++ b/facebook/src/main/java/com/facebook/share/model/AppInviteContent.java
@@ -31,12 +31,14 @@
     private final String previewImageUrl;
     private final String promoCode;
     private final String promoText;
+    private final Builder.Destination destination;
 
     private AppInviteContent(final Builder builder) {
         this.applinkUrl = builder.applinkUrl;
         this.previewImageUrl = builder.previewImageUrl;
         this.promoCode = builder.promoCode;
         this.promoText = builder.promoText;
+        this.destination = builder.destination;
     }
 
     AppInviteContent(final Parcel in) {
@@ -44,6 +46,14 @@ private AppInviteContent(final Builder builder) {
         this.previewImageUrl = in.readString();
         this.promoText = in.readString();
         this.promoCode = in.readString();
+
+        String destinationString = in.readString();
+        if (destinationString.length() > 0) {
+            this.destination = Builder.Destination.valueOf(destinationString);
+        }
+        else {
+            this.destination = Builder.Destination.FACEBOOK;
+        }
     }
 
     /**
@@ -78,6 +88,18 @@ public String getPromotionText() {
         return promoText;
     }
 
+    /**
+     * Gets the destination for the invite.
+     * @return The destination for the invite.
+     */
+    public Builder.Destination getDestination() {
+        if (destination != null) {
+            return destination;
+        } else {
+            return Builder.Destination.FACEBOOK;
+        }
+    }
+
     public int describeContents() {
         return 0;
     }
@@ -87,6 +109,7 @@ public void writeToParcel(final Parcel out, final int flags) {
         out.writeString(this.previewImageUrl);
         out.writeString(this.promoText);
         out.writeString(this.promoCode);
+        out.writeString(this.destination.toString());
     }
 
     @SuppressWarnings("unused")
@@ -110,6 +133,27 @@ public AppInviteContent createFromParcel(final Parcel in) {
         private String previewImageUrl;
         private String promoCode;
         private String promoText;
+        private Destination destination;
+
+
+        public enum Destination {
+            FACEBOOK ("facebook"),
+            MESSENGER ("messenger");
+
+            private final String name;
+
+            private Destination(String s) {
+                name = s;
+            }
+
+            public boolean equalsName(String otherName) {
+                return (otherName == null) ? false : name.equals(otherName);
+            }
+
+            public String toString() {
+                return this.name;
+            }
+        }
 
         /**
          * Sets the applink url that will be used for deep-linking
@@ -183,6 +227,12 @@ public Builder setPromotionDetails(final String promotionText, final String prom
             return this;
         }
 
+        public Builder setDestination(Destination destination) {
+            this.destination = destination;
+            return this;
+        }
+
+
         @Override
         public AppInviteContent build() {
             return new AppInviteContent(this);
@@ -197,13 +247,8 @@ public Builder readFrom(final AppInviteContent content) {
             return this
                     .setApplinkUrl(content.getApplinkUrl())
                     .setPreviewImageUrl(content.getPreviewImageUrl())
-                    .setPromotionDetails(content.getPromotionText(), content.getPromotionCode());
-        }
-
-        @Override
-        public Builder readFrom(final Parcel parcel) {
-            return this.readFrom((AppInviteContent) parcel
-                    .readParcelable(AppInviteContent.class.getClassLoader()));
+                    .setPromotionDetails(content.getPromotionText(), content.getPromotionCode())
+                    .setDestination(content.getDestination());
         }
 
         private boolean isAlphanumericWithSpaces(String str) {
diff --git a/facebook/src/main/java/com/facebook/share/model/GameRequestContent.java b/facebook/src/main/java/com/facebook/share/model/GameRequestContent.java
index 3f1b81c2b..cc4fa0c2b 100644
--- a/facebook/src/main/java/com/facebook/share/model/GameRequestContent.java
+++ b/facebook/src/main/java/com/facebook/share/model/GameRequestContent.java
@@ -23,7 +23,6 @@
 import android.os.Parcel;
 import android.text.TextUtils;
 
-import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 
@@ -303,8 +302,7 @@ public Builder readFrom(final GameRequestContent content) {
                     .setSuggestions(content.getSuggestions());
         }
 
-        @Override
-        public Builder readFrom(final Parcel parcel) {
+        Builder readFrom(final Parcel parcel) {
             return this.readFrom(
                     (GameRequestContent) parcel.readParcelable(
                             GameRequestContent.class.getClassLoader()));
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareHashtag.java b/facebook/src/main/java/com/facebook/share/model/ShareHashtag.java
index 2d8207c18..95fdbdc90 100644
--- a/facebook/src/main/java/com/facebook/share/model/ShareHashtag.java
+++ b/facebook/src/main/java/com/facebook/share/model/ShareHashtag.java
@@ -100,8 +100,7 @@ public Builder readFrom(final ShareHashtag model) {
             return this.setHashtag(model.getHashtag());
         }
 
-        @Override
-        public Builder readFrom(final Parcel parcel) {
+        Builder readFrom(final Parcel parcel) {
             return this.readFrom(
                     (ShareHashtag)parcel.readParcelable(ShareHashtag.class.getClassLoader()));
         }
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareLinkContent.java b/facebook/src/main/java/com/facebook/share/model/ShareLinkContent.java
index f8f062a83..f95134a75 100644
--- a/facebook/src/main/java/com/facebook/share/model/ShareLinkContent.java
+++ b/facebook/src/main/java/com/facebook/share/model/ShareLinkContent.java
@@ -183,13 +183,5 @@ public Builder readFrom(final ShareLinkContent model) {
                     .setQuote(model.getQuote())
                     ;
         }
-
-        @Override
-        public Builder readFrom(final Parcel parcel) {
-            return this.readFrom(
-                    (ShareLinkContent) parcel.readParcelable(
-                            ShareLinkContent.class.getClassLoader()));
-        }
-
     }
 }
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareMedia.java b/facebook/src/main/java/com/facebook/share/model/ShareMedia.java
index bdf8aa502..96efc6b29 100644
--- a/facebook/src/main/java/com/facebook/share/model/ShareMedia.java
+++ b/facebook/src/main/java/com/facebook/share/model/ShareMedia.java
@@ -22,7 +22,7 @@
 
 import android.os.Bundle;
 import android.os.Parcel;
-import android.os.ParcelFormatException;
+import android.os.Parcelable;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -63,28 +63,9 @@ public int describeContents() {
 
     @Override
     public void writeToParcel(Parcel dest, int flags) {
-        dest.writeString(this.getMediaType().name());
         dest.writeBundle(params);
     }
 
-    @SuppressWarnings("unused")
-    public static final Creator<ShareMedia> CREATOR = new Creator<ShareMedia>() {
-        public ShareMedia createFromParcel(final Parcel in) {
-            switch (Type.valueOf(in.readString())) {
-                case PHOTO:
-                    return new SharePhoto(in);
-                case VIDEO:
-                    return new ShareVideo(in);
-                default:
-                    throw new ParcelFormatException("ShareMedia has invalid type");
-            }
-        }
-
-        public ShareMedia[] newArray(final int size) {
-            return new ShareMedia[size];
-        }
-    };
-
     public abstract Type getMediaType();
 
     /**
@@ -120,14 +101,21 @@ public B readFrom(final M model) {
             return this.setParameters(model.getParameters());
         }
 
-        public static void writeListTo(final Parcel out, final List<ShareMedia> media) {
-            out.writeTypedList(media);
+        static void writeListTo(
+                final Parcel out,
+                int parcelFlags,
+                final List<ShareMedia> media) {
+            out.writeParcelableArray((ShareMedia[]) media.toArray(), parcelFlags);
         }
 
-        public static List<ShareMedia> readListFrom(final Parcel in) {
-            final List<ShareMedia> list = new ArrayList<>();
-            in.readTypedList(list, CREATOR);
-            return list;
+        static List<ShareMedia> readListFrom(final Parcel in) {
+            Parcelable[] parcelables = in.readParcelableArray(
+                    ShareMedia.class.getClassLoader());
+            List<ShareMedia> shareMedia = new ArrayList<>(parcelables.length);
+            for (Parcelable parcelable : parcelables) {
+                shareMedia.add((ShareMedia) parcelable);
+            }
+            return shareMedia;
         }
     }
 }
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareMediaContent.java b/facebook/src/main/java/com/facebook/share/model/ShareMediaContent.java
index aa3e2fbd3..3474d1a16 100644
--- a/facebook/src/main/java/com/facebook/share/model/ShareMediaContent.java
+++ b/facebook/src/main/java/com/facebook/share/model/ShareMediaContent.java
@@ -24,6 +24,7 @@
 import android.support.annotation.Nullable;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 
@@ -38,7 +39,9 @@ private ShareMediaContent(final Builder builder) {
 
     ShareMediaContent(final Parcel in) {
         super(in);
-        this.media = Collections.unmodifiableList(ShareMedia.Builder.readListFrom(in));
+        ShareMedia[] shareMedia = (ShareMedia[])in.readParcelableArray(
+                ShareMedia.class.getClassLoader());
+        this.media = Arrays.asList(shareMedia);
     }
 
     /**
@@ -57,7 +60,7 @@ public int describeContents() {
 
     public void writeToParcel(final Parcel out, final int flags) {
         super.writeToParcel(out, flags);
-        ShareMedia.Builder.writeListTo(out, this.media);
+        out.writeParcelableArray((ShareMedia[])this.media.toArray(), flags);
     }
 
     @SuppressWarnings("unused")
@@ -130,13 +133,6 @@ public Builder readFrom(final ShareMediaContent model) {
                     .addMedia(model.getMedia());
         }
 
-        @Override
-        public Builder readFrom(final Parcel parcel) {
-            return this.readFrom(
-                    (ShareMediaContent) parcel.readParcelable(
-                            ShareMediaContent.class.getClassLoader()));
-        }
-
         /**
          * Replaces the media for the builder.
          *
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareModelBuilder.java b/facebook/src/main/java/com/facebook/share/model/ShareModelBuilder.java
index 794f1d5c2..3500dde49 100644
--- a/facebook/src/main/java/com/facebook/share/model/ShareModelBuilder.java
+++ b/facebook/src/main/java/com/facebook/share/model/ShareModelBuilder.java
@@ -20,8 +20,6 @@
 
 package com.facebook.share.model;
 
-import android.os.Parcel;
-
 import com.facebook.share.ShareBuilder;
 
 /**
@@ -37,12 +35,4 @@
      * @return The builder.
      */
     public E readFrom(P model);
-
-    /**
-     * Reads the values from a parcel into the builder.  The parcel must have packaged an instance
-     * of the ShareModel that came from the same type of builder.
-     * @param parcel The Parcel that contains the ShareModel.
-     * @return The builder.
-     */
-    public E readFrom(Parcel parcel);
 }
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphAction.java b/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphAction.java
index 81f5767ed..683cddd21 100644
--- a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphAction.java
+++ b/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphAction.java
@@ -98,8 +98,7 @@ public Builder readFrom(final ShareOpenGraphAction model) {
                     ;
         }
 
-        @Override
-        public Builder readFrom(final Parcel parcel) {
+        Builder readFrom(final Parcel parcel) {
             return this.readFrom(
                     (ShareOpenGraphAction) parcel.readParcelable(
                             ShareOpenGraphAction.class.getClassLoader()));
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphContent.java b/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphContent.java
index 5806c9c8c..725b1cc82 100644
--- a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphContent.java
+++ b/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphContent.java
@@ -144,12 +144,5 @@ public Builder readFrom(final com.facebook.share.model.ShareOpenGraphContent mod
                     ;
         }
 
-        @Override
-        public Builder readFrom(final Parcel parcel) {
-            return this.readFrom(
-                    (com.facebook.share.model.ShareOpenGraphContent) parcel.readParcelable(
-                            ShareOpenGraphContent.class.getClassLoader()));
-        }
-
     }
 }
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphObject.java b/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphObject.java
index 15c10ab69..368207022 100644
--- a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphObject.java
+++ b/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphObject.java
@@ -70,8 +70,7 @@ public ShareOpenGraphObject build() {
             return new ShareOpenGraphObject(this);
         }
 
-        @Override
-        public Builder readFrom(final Parcel parcel) {
+        Builder readFrom(final Parcel parcel) {
             return this.readFrom(
                     (ShareOpenGraphObject)parcel.readParcelable(
                             ShareOpenGraphObject.class.getClassLoader()));
diff --git a/facebook/src/main/java/com/facebook/share/model/SharePhoto.java b/facebook/src/main/java/com/facebook/share/model/SharePhoto.java
index 6f0e167fa..fdd834ac3 100644
--- a/facebook/src/main/java/com/facebook/share/model/SharePhoto.java
+++ b/facebook/src/main/java/com/facebook/share/model/SharePhoto.java
@@ -23,6 +23,7 @@
 import android.graphics.Bitmap;
 import android.net.Uri;
 import android.os.Parcel;
+import android.os.Parcelable;
 import android.support.annotation.Nullable;
 
 import java.util.ArrayList;
@@ -104,6 +105,20 @@ public void writeToParcel(final Parcel out, final int flags) {
         out.writeString(caption);
     }
 
+    public static final Parcelable.Creator<SharePhoto> CREATOR =
+            new Parcelable.Creator<SharePhoto>() {
+
+                @Override
+                public SharePhoto createFromParcel(final Parcel source) {
+                    return new SharePhoto(source);
+                }
+
+                @Override
+                public SharePhoto[] newArray(final int size) {
+                    return new SharePhoto[size];
+                }
+            };
+
     @Override
     public Type getMediaType() {
         return Type.PHOTO;
@@ -190,31 +205,31 @@ public Builder readFrom(final SharePhoto model) {
                     ;
         }
 
-        @Override
-        public Builder readFrom(final Parcel parcel) {
+        Builder readFrom(final Parcel parcel) {
             return this.readFrom(
                     (SharePhoto) parcel.readParcelable(SharePhoto.class.getClassLoader()));
         }
 
         /*
-         * For backwards compatability with SharePhotoContent.  Prefer ShareMediaContent for new
+         * For backwards compatibility with SharePhotoContent.  Prefer ShareMediaContent for new
          * code.
          */
-        public static void writePhotoListTo(
+        static void writePhotoListTo(
                 final Parcel out,
+                int parcelFlags,
                 final List<SharePhoto> photos) {
-            final List<ShareMedia> list = new ArrayList<>();
-            for (SharePhoto photo : photos) {
-                list.add(photo);
+            ShareMedia[] array = new ShareMedia[photos.size()];
+            for (int i = 0; i < photos.size(); ++i) {
+                array[i] = photos.get(i);
             }
-            writeListTo(out, list);
+            out.writeParcelableArray(array, parcelFlags);
         }
 
         /*
-         * For backwards compatability with SharePhotoContent.  Prefer ShareMediaContent for new
+         * For backwards compatibility with SharePhotoContent.  Prefer ShareMediaContent for new
          * code.
          */
-        public static List<SharePhoto> readPhotoListFrom(final Parcel in) {
+        static List<SharePhoto> readPhotoListFrom(final Parcel in) {
             final List<ShareMedia> media = readListFrom(in);
             final List<SharePhoto> photos = new ArrayList<>();
             for (ShareMedia medium : media) {
diff --git a/facebook/src/main/java/com/facebook/share/model/SharePhotoContent.java b/facebook/src/main/java/com/facebook/share/model/SharePhotoContent.java
index 12feb4345..8b740bf7b 100644
--- a/facebook/src/main/java/com/facebook/share/model/SharePhotoContent.java
+++ b/facebook/src/main/java/com/facebook/share/model/SharePhotoContent.java
@@ -23,8 +23,6 @@
 import android.os.Parcel;
 import android.support.annotation.Nullable;
 
-import com.facebook.share.internal.ShareConstants;
-
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -45,6 +43,7 @@ private SharePhotoContent(final Builder builder) {
 
     SharePhotoContent(final Parcel in) {
         super(in);
+
         this.photos = Collections.unmodifiableList(SharePhoto.Builder.readPhotoListFrom(in));
     }
 
@@ -63,7 +62,7 @@ public int describeContents() {
 
     public void writeToParcel(final Parcel out, final int flags) {
         super.writeToParcel(out, flags);
-        SharePhoto.Builder.writePhotoListTo(out, this.photos);
+        SharePhoto.Builder.writePhotoListTo(out, flags, this.photos);
     }
 
     @SuppressWarnings("unused")
@@ -125,13 +124,6 @@ public Builder readFrom(final SharePhotoContent model) {
                     .addPhotos(model.getPhotos());
         }
 
-        @Override
-        public Builder readFrom(final Parcel parcel) {
-            return this.readFrom(
-                    (SharePhotoContent) parcel.readParcelable(
-                            SharePhotoContent.class.getClassLoader()));
-        }
-
         /**
          * Replaces the photos for the builder.
          * @param photos {@link java.util.List} of {@link com.facebook.share.model.SharePhoto}s to add.
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareVideo.java b/facebook/src/main/java/com/facebook/share/model/ShareVideo.java
index 3cccd6160..0a919f6f2 100644
--- a/facebook/src/main/java/com/facebook/share/model/ShareVideo.java
+++ b/facebook/src/main/java/com/facebook/share/model/ShareVideo.java
@@ -22,6 +22,7 @@
 
 import android.net.Uri;
 import android.os.Parcel;
+import android.os.Parcelable;
 import android.support.annotation.Nullable;
 
 /**
@@ -60,6 +61,20 @@ public void writeToParcel(final Parcel out, final int flags) {
         out.writeParcelable(this.localUrl, 0);
     }
 
+    public static final Parcelable.Creator<ShareVideo> CREATOR =
+        new Parcelable.Creator<ShareVideo>() {
+
+            @Override
+            public ShareVideo createFromParcel(final Parcel source) {
+                return new ShareVideo(source);
+            }
+
+            @Override
+            public ShareVideo[] newArray(final int size) {
+                return new ShareVideo[size];
+            }
+        };
+
     @Override
     public Type getMediaType() {
         return Type.VIDEO;
@@ -95,8 +110,7 @@ public Builder readFrom(final ShareVideo model) {
                     .setLocalUrl(model.getLocalUrl());
         }
 
-        @Override
-        public Builder readFrom(final Parcel parcel) {
+        Builder readFrom(final Parcel parcel) {
             return this.readFrom(
                     (ShareVideo) parcel.readParcelable(ShareVideo.class.getClassLoader()));
         }
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareVideoContent.java b/facebook/src/main/java/com/facebook/share/model/ShareVideoContent.java
index 24b510210..ed82b3fb3 100644
--- a/facebook/src/main/java/com/facebook/share/model/ShareVideoContent.java
+++ b/facebook/src/main/java/com/facebook/share/model/ShareVideoContent.java
@@ -193,12 +193,5 @@ public Builder readFrom(final ShareVideoContent model) {
                     .setVideo(model.getVideo())
                     ;
         }
-
-        @Override
-        public Builder readFrom(final Parcel parcel) {
-            return this.readFrom((ShareVideoContent)parcel.readParcelable(
-                    ShareVideoContent.class.getClassLoader()));
-        }
-
     }
 }
diff --git a/facebook/src/main/java/com/facebook/share/widget/AppInviteDialog.java b/facebook/src/main/java/com/facebook/share/widget/AppInviteDialog.java
index f8065c351..3266093e0 100644
--- a/facebook/src/main/java/com/facebook/share/widget/AppInviteDialog.java
+++ b/facebook/src/main/java/com/facebook/share/widget/AppInviteDialog.java
@@ -32,7 +32,6 @@
 import com.facebook.share.internal.*;
 import com.facebook.share.model.AppInviteContent;
 
-import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
@@ -277,6 +276,10 @@ private static Bundle createParameters(final AppInviteContent content) {
         Bundle params = new Bundle();
         params.putString(ShareConstants.APPLINK_URL, content.getApplinkUrl());
         params.putString(ShareConstants.PREVIEW_IMAGE_URL, content.getPreviewImageUrl());
+        params.putString(
+                ShareConstants.DESTINATION,
+                content.getDestination().toString()
+        );
 
         String promoCode = content.getPromotionCode();
         promoCode = promoCode != null ? promoCode : "";
diff --git a/facebook/src/main/java/com/facebook/share/widget/CreateAppGroupDialog.java b/facebook/src/main/java/com/facebook/share/widget/CreateAppGroupDialog.java
index 020dbdce6..b5b0e99c4 100644
--- a/facebook/src/main/java/com/facebook/share/widget/CreateAppGroupDialog.java
+++ b/facebook/src/main/java/com/facebook/share/widget/CreateAppGroupDialog.java
@@ -40,8 +40,11 @@
 import java.util.List;
 
 /**
- * A dialog for creating app groups
+ * @deprecated
+ * App and game groups are being deprecated. See
+ * https://developers.facebook.com/docs/games/services/game-groups for more information.
  */
+@Deprecated
 public class CreateAppGroupDialog
         extends FacebookDialogBase<AppGroupCreationContent, CreateAppGroupDialog.Result> {
 
@@ -51,8 +54,11 @@
             CallbackManagerImpl.RequestCodeOffset.AppGroupCreate.toRequestCode();
 
     /**
-     * Helper object for handling the result from a create app group dialog.
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public static final class Result {
         private final String id;
 
@@ -70,21 +76,21 @@ public String getId() {
     }
 
     /**
-     * Indicates whether the create app group dialog can be shown.
-     *
-     * @return true if the dialog can be shown
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public static boolean canShow() {
         return true;
     }
 
     /**
-     * Shows an {@link CreateAppGroupDialog} to create a group with the passed in content, using
-     * the passed in activity. No callback will be invoked.
-     *
-     * @param activity Activity hosting the dialog
-     * @param appGroupCreationContent Content describing the group to be created
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public static void show(
             final Activity activity,
             final AppGroupCreationContent appGroupCreationContent) {
@@ -92,12 +98,11 @@ public static void show(
     }
 
     /**
-     * Shows an {@link CreateAppGroupDialog} to create a group with the passed in content, using
-     * the passed in fragment. No callback will be invoked.
-     *
-     * @param fragment android.support.v4.app.Fragment hosting the dialog
-     * @param appGroupCreationContent Content describing the group to be created
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public static void show(
             final Fragment fragment,
             AppGroupCreationContent appGroupCreationContent) {
@@ -105,12 +110,11 @@ public static void show(
     }
 
     /**
-     * Shows an {@link CreateAppGroupDialog} to create a group with the passed in content, using
-     * the passed in fragment. No callback will be invoked.
-     *
-     * @param fragment android.app.Fragment hosting the dialog
-     * @param appGroupCreationContent Content describing the group to be created
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public static void show(
             final android.app.Fragment fragment,
             AppGroupCreationContent appGroupCreationContent) {
@@ -124,25 +128,31 @@ private static void show(
     }
 
     /**
-     * Constructs a new CreateAppGroupDialog.
-     * @param activity Activity hosting the dialog.
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public CreateAppGroupDialog(final Activity activity) {
         super(activity, DEFAULT_REQUEST_CODE);
     }
 
     /**
-     * Constructs a new CreateAppGroupDialog.
-     * @param fragment android.support.v4.app.Fragment hosting the dialog.
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public CreateAppGroupDialog(final Fragment fragment) {
         this(new FragmentWrapper(fragment));
     }
 
     /**
-     * Constructs a new CreateAppGroupDialog.
-     * @param fragment android.app.Fragment hosting the dialog.
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public CreateAppGroupDialog(final android.app.Fragment fragment) {
         this(new FragmentWrapper(fragment));
     }
diff --git a/facebook/src/main/java/com/facebook/share/widget/JoinAppGroupDialog.java b/facebook/src/main/java/com/facebook/share/widget/JoinAppGroupDialog.java
index a373da9b5..00298627f 100644
--- a/facebook/src/main/java/com/facebook/share/widget/JoinAppGroupDialog.java
+++ b/facebook/src/main/java/com/facebook/share/widget/JoinAppGroupDialog.java
@@ -39,8 +39,11 @@
 import java.util.List;
 
 /**
- * A dialog for joining app groups
+ * @deprecated
+ * App and game groups are being deprecated. See
+ * https://developers.facebook.com/docs/games/services/game-groups for more information.
  */
+@Deprecated
 public class JoinAppGroupDialog extends FacebookDialogBase<String, JoinAppGroupDialog.Result> {
 
     private static final String JOIN_GAME_GROUP_DIALOG = "game_group_join";
@@ -49,8 +52,11 @@
             CallbackManagerImpl.RequestCodeOffset.AppGroupJoin.toRequestCode();
 
     /**
-     * Helper object for handling the result from a join app group dialog.
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public static final class Result {
         private final Bundle data;
 
@@ -68,21 +74,21 @@ public Bundle getData() {
     }
 
     /**
-     * Indicates whether the join app group dialog can be shown.
-     *
-     * @return true if the dialog can be shown
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public static boolean canShow() {
         return true;
     }
 
     /**
-     * Shows an {@link JoinAppGroupDialog} to join a group with the passed in Id, using
-     * the passed in activity. No callback will be invoked.
-     *
-     * @param activity Activity hosting the dialog
-     * @param groupId Id of the group to join
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public static void show(
             final Activity activity,
             final String groupId) {
@@ -90,12 +96,11 @@ public static void show(
     }
 
     /**
-     * Shows an {@link JoinAppGroupDialog} to join a group with the passed in Id, using
-     * the passed in fragment. No callback will be invoked.
-     *
-     * @param fragment android.support.v4.app.Fragment hosting the dialog
-     * @param groupId Id of the group to join
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public static void show(
             final Fragment fragment,
             final String groupId) {
@@ -103,12 +108,11 @@ public static void show(
     }
 
     /**
-     * Shows an {@link JoinAppGroupDialog} to join a group with the passed in Id, using
-     * the passed in fragment. No callback will be invoked.
-     *
-     * @param fragment android.app.Fragment hosting the dialog
-     * @param groupId Id of the group to join
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public static void show(
             final android.app.Fragment fragment,
             final String groupId) {
@@ -122,25 +126,31 @@ private static void show(
     }
 
     /**
-     * Constructs a JoinAppGroupDialog.
-     * @param activity Activity hosting the dialog.
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public JoinAppGroupDialog(final Activity activity) {
         super(activity, DEFAULT_REQUEST_CODE);
     }
 
     /**
-     * Constructs a JoinAppGroupDialog.
-     * @param fragment android.support.v4.app.Fragment hosting the dialog.
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public JoinAppGroupDialog(final Fragment fragment) {
         this(new FragmentWrapper(fragment));
     }
 
     /**
-     * Constructs a JoinAppGroupDialog.
-     * @param fragment android.app.Fragment hosting the dialog.
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public JoinAppGroupDialog(final android.app.Fragment fragment) {
         this(new FragmentWrapper(fragment));
     }
diff --git a/facebook/src/main/java/com/facebook/share/widget/MessageDialog.java b/facebook/src/main/java/com/facebook/share/widget/MessageDialog.java
index 01fb16943..03abaabd0 100644
--- a/facebook/src/main/java/com/facebook/share/widget/MessageDialog.java
+++ b/facebook/src/main/java/com/facebook/share/widget/MessageDialog.java
@@ -212,7 +212,6 @@ public AppCall createAppCall(final ShareContent content) {
 
             final AppCall appCall = createBaseAppCall();
             final boolean shouldFailOnDataError = getShouldFailOnDataError();
-            final Activity activity = getActivityContext();
 
             DialogPresenter.setupAppCallForNativeDialog(
                     appCall,
diff --git a/facebook/src/main/java/com/facebook/share/widget/SendButton.java b/facebook/src/main/java/com/facebook/share/widget/SendButton.java
index 068d9ebc6..a85330561 100644
--- a/facebook/src/main/java/com/facebook/share/widget/SendButton.java
+++ b/facebook/src/main/java/com/facebook/share/widget/SendButton.java
@@ -22,7 +22,6 @@
 
 import android.content.Context;
 import android.util.AttributeSet;
-import android.view.View;
 
 import com.facebook.R;
 import com.facebook.internal.AnalyticsEvents;
diff --git a/facebook/src/main/java/com/facebook/share/widget/ShareButton.java b/facebook/src/main/java/com/facebook/share/widget/ShareButton.java
index 2c5835150..810218227 100644
--- a/facebook/src/main/java/com/facebook/share/widget/ShareButton.java
+++ b/facebook/src/main/java/com/facebook/share/widget/ShareButton.java
@@ -22,7 +22,6 @@
 
 import android.content.Context;
 import android.util.AttributeSet;
-import android.view.View;
 
 import com.facebook.R;
 import com.facebook.internal.AnalyticsEvents;
diff --git a/facebook/src/main/java/com/facebook/share/widget/ShareDialog.java b/facebook/src/main/java/com/facebook/share/widget/ShareDialog.java
index a5ef533ab..0ad84e399 100644
--- a/facebook/src/main/java/com/facebook/share/widget/ShareDialog.java
+++ b/facebook/src/main/java/com/facebook/share/widget/ShareDialog.java
@@ -21,11 +21,13 @@
 package com.facebook.share.widget;
 
 import android.app.Activity;
-import android.app.Dialog;
 import android.content.Context;
+import android.graphics.Bitmap;
+import android.net.Uri;
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
 
+import com.facebook.AccessToken;
 import com.facebook.FacebookCallback;
 import com.facebook.appevents.AppEventsLogger;
 import com.facebook.internal.AnalyticsEvents;
@@ -35,20 +37,28 @@
 import com.facebook.internal.DialogPresenter;
 import com.facebook.internal.FacebookDialogBase;
 import com.facebook.internal.FragmentWrapper;
+import com.facebook.internal.NativeAppCallAttachmentStore;
 import com.facebook.internal.Utility;
-import com.facebook.share.internal.ShareFeedContent;
 import com.facebook.share.Sharer;
 import com.facebook.share.internal.LegacyNativeDialogParameters;
 import com.facebook.share.internal.NativeDialogParameters;
 import com.facebook.share.internal.OpenGraphActionDialogFeature;
 import com.facebook.share.internal.ShareContentValidation;
 import com.facebook.share.internal.ShareDialogFeature;
+import com.facebook.share.internal.ShareFeedContent;
 import com.facebook.share.internal.ShareInternalUtility;
 import com.facebook.share.internal.WebDialogParameters;
-import com.facebook.share.model.*;
+import com.facebook.share.model.ShareContent;
+import com.facebook.share.model.ShareLinkContent;
+import com.facebook.share.model.ShareMediaContent;
+import com.facebook.share.model.ShareOpenGraphContent;
+import com.facebook.share.model.SharePhoto;
+import com.facebook.share.model.SharePhotoContent;
+import com.facebook.share.model.ShareVideoContent;
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.UUID;
 
 /**
  * Provides functionality to share content via the Facebook Share Dialog
@@ -80,7 +90,7 @@
     }
 
     private static final String FEED_DIALOG = "feed";
-    private static final String WEB_SHARE_DIALOG = "share";
+    public static final String WEB_SHARE_DIALOG = "share";
     private static final String WEB_OG_SHARE_DIALOG = "share_open_graph";
 
     private static final int DEFAULT_REQUEST_CODE =
@@ -159,8 +169,14 @@ private static boolean canShowWebTypeCheck(Class<? extends ShareContent> content
         // The instance method version of this check is more accurate and should be used on
         // ShareDialog instances.
 
+        // SharePhotoContent currently requires the user staging endpoint, so we need a user access
+        // token, so we need to see if we have one
+        final AccessToken accessToken = AccessToken.getCurrentAccessToken();
+        final boolean haveUserAccessToken = accessToken != null && !accessToken.isExpired();
+
         return ShareLinkContent.class.isAssignableFrom(contentType)
-                || ShareOpenGraphContent.class.isAssignableFrom(contentType);
+                || ShareOpenGraphContent.class.isAssignableFrom(contentType)
+                || (SharePhotoContent.class.isAssignableFrom(contentType) && haveUserAccessToken);
     }
 
     /**
@@ -360,6 +376,10 @@ public AppCall createAppCall(final ShareContent content) {
             Bundle params;
             if (content instanceof ShareLinkContent) {
                 params = WebDialogParameters.create((ShareLinkContent)content);
+            } else if (content instanceof SharePhotoContent) {
+                final SharePhotoContent photoContent =
+                        createAndMapAttachments((SharePhotoContent)content, appCall.getCallId());
+                params = WebDialogParameters.create(photoContent);
             } else {
                 params = WebDialogParameters.create((ShareOpenGraphContent)content);
             }
@@ -373,7 +393,8 @@ public AppCall createAppCall(final ShareContent content) {
         }
 
         private String getActionName(ShareContent shareContent) {
-            if (shareContent instanceof ShareLinkContent) {
+            if (shareContent instanceof ShareLinkContent
+                    || shareContent instanceof SharePhotoContent) {
                 return WEB_SHARE_DIALOG;
             } else if (shareContent instanceof ShareOpenGraphContent) {
                 return WEB_OG_SHARE_DIALOG;
@@ -381,6 +402,35 @@ private String getActionName(ShareContent shareContent) {
 
             return null;
         }
+
+        private SharePhotoContent createAndMapAttachments(
+                final SharePhotoContent content,
+                final UUID callId) {
+            final SharePhotoContent.Builder contentBuilder =
+                    new SharePhotoContent.Builder().readFrom(content);
+            final List<SharePhoto> photos = new ArrayList<>();
+            final List<NativeAppCallAttachmentStore.Attachment> attachments = new ArrayList<>();
+            for (int i = 0; i < content.getPhotos().size(); i++) {
+                SharePhoto sharePhoto = content.getPhotos().get(i);
+                final Bitmap photoBitmap = sharePhoto.getBitmap();
+
+                if (photoBitmap != null) {
+                    NativeAppCallAttachmentStore.Attachment attachment =
+                            NativeAppCallAttachmentStore.createAttachment(callId, photoBitmap);
+                    sharePhoto = new SharePhoto.Builder()
+                            .readFrom(sharePhoto)
+                            .setImageUrl(Uri.parse(attachment.getAttachmentUrl()))
+                            .setBitmap(null)
+                            .build();
+                    attachments.add(attachment);
+                }
+
+                photos.add(sharePhoto);
+            }
+            contentBuilder.setPhotos(photos);
+            NativeAppCallAttachmentStore.addAttachments(attachments);
+            return contentBuilder.build();
+        }
     }
 
     private class FeedHandler extends ModeHandler {
diff --git a/facebook/src/main/res/drawable-hdpi/com_facebook_favicon_white.png b/facebook/src/main/res/drawable-hdpi/com_facebook_favicon_white.png
deleted file mode 100644
index 3042a7bb2..000000000
Binary files a/facebook/src/main/res/drawable-hdpi/com_facebook_favicon_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-mdpi/com_facebook_favicon_white.png b/facebook/src/main/res/drawable-mdpi/com_facebook_favicon_white.png
deleted file mode 100644
index 72fe4b60b..000000000
Binary files a/facebook/src/main/res/drawable-mdpi/com_facebook_favicon_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xhdpi/com_facebook_favicon_white.png b/facebook/src/main/res/drawable-xhdpi/com_facebook_favicon_white.png
deleted file mode 100644
index ce5c8909f..000000000
Binary files a/facebook/src/main/res/drawable-xhdpi/com_facebook_favicon_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xxhdpi/com_facebook_favicon_white.png b/facebook/src/main/res/drawable-xxhdpi/com_facebook_favicon_white.png
deleted file mode 100644
index 82fd70fae..000000000
Binary files a/facebook/src/main/res/drawable-xxhdpi/com_facebook_favicon_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable/com_facebook_auth_dialog_background.xml b/facebook/src/main/res/drawable/com_facebook_auth_dialog_background.xml
index 2088e1b1c..77fd0a910 100644
--- a/facebook/src/main/res/drawable/com_facebook_auth_dialog_background.xml
+++ b/facebook/src/main/res/drawable/com_facebook_auth_dialog_background.xml
@@ -20,7 +20,7 @@
 -->
 
 <shape xmlns:android="http://schemas.android.com/apk/res/android">
-    <solid android:color="#f2fafafa" />
+    <solid android:color="@android:color/white" />
     <corners
         android:bottomLeftRadius="@dimen/com_facebook_auth_dialog_corner_radius"
         android:bottomRightRadius="@dimen/com_facebook_auth_dialog_corner_radius"
diff --git a/facebook/src/main/res/drawable/com_facebook_auth_dialog_header_background.xml b/facebook/src/main/res/drawable/com_facebook_auth_dialog_header_background.xml
index 3321bf82c..66cd5cff4 100644
--- a/facebook/src/main/res/drawable/com_facebook_auth_dialog_header_background.xml
+++ b/facebook/src/main/res/drawable/com_facebook_auth_dialog_header_background.xml
@@ -20,7 +20,7 @@
 -->
 
 <shape xmlns:android="http://schemas.android.com/apk/res/android">
-    <solid android:color="@color/com_facebook_blue" />
+    <solid android:color="#fffafafa" />
     <corners
         android:bottomLeftRadius="0dp"
         android:bottomRightRadius="0dp"
diff --git a/facebook/src/main/res/drawable/com_facebook_button_login_background.xml b/facebook/src/main/res/drawable/com_facebook_button_login_background.xml
new file mode 100644
index 000000000..2735fba16
--- /dev/null
+++ b/facebook/src/main/res/drawable/com_facebook_button_login_background.xml
@@ -0,0 +1,58 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_enabled="false" android:state_focused="true">
+        <shape android:shape="rectangle">
+            <corners android:radius="@dimen/com_facebook_button_login_corner_radius" />
+            <solid android:color="@color/com_facebook_button_background_color_focused_disabled" />
+        </shape>
+    </item>
+    <item android:state_enabled="false" android:state_focused="false">
+        <shape android:shape="rectangle">
+            <corners android:radius="@dimen/com_facebook_button_login_corner_radius" />
+            <solid android:color="@color/com_facebook_button_background_color_disabled" />
+        </shape>
+    </item>
+    <item android:state_focused="true">
+        <shape android:shape="rectangle">
+            <corners android:radius="@dimen/com_facebook_button_login_corner_radius" />
+            <solid android:color="@color/com_facebook_button_background_color_focused" />
+            <stroke
+                android:width="1dp"
+                android:color="@color/com_facebook_button_border_color_focused"
+                >
+            </stroke>
+        </shape>
+    </item>
+    <item android:state_pressed="true">
+        <shape android:shape="rectangle">
+            <corners android:radius="@dimen/com_facebook_button_login_corner_radius" />
+            <solid android:color="@color/com_facebook_button_background_color_pressed" />
+        </shape>
+    </item>
+    <item>
+        <shape android:shape="rectangle">
+            <corners android:radius="@dimen/com_facebook_button_login_corner_radius" />
+            <solid android:color="@color/com_facebook_button_login_background_color" />
+        </shape>
+    </item>
+</selector>
diff --git a/facebook/src/main/res/drawable/com_facebook_button_login_logo.xml b/facebook/src/main/res/drawable/com_facebook_button_login_logo.xml
new file mode 100644
index 000000000..4a528aae0
--- /dev/null
+++ b/facebook/src/main/res/drawable/com_facebook_button_login_logo.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<vector
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:height="16dp"
+    android:viewportHeight="22.0"
+    android:viewportWidth="22.0"
+    android:width="16dp"
+    >
+    <path
+        android:fillColor="#FFFFFF"
+        android:pathData="M20,0H2C0.895,0 0,0.896 0,2v18c0,1.105 0.895,2 2,
+            2h9.96v-8.662H9.01V9.962h2.95v-2.49c0,-2.888 1.785,-4.46 4.393,-4.46 1.25,
+            0 2.323,0.09 2.637,0.13v3.02l-1.81,0.002c-1.418,0 -1.693,0.666 -1.693,
+            1.643v2.155h3.383l-0.44,3.376h-2.943V22H20c1.105,0 2,-0.895 2,-2V2c0,
+            -1.104 -0.895,-2 -2,-2"
+    />
+</vector>
diff --git a/facebook/src/main/res/drawable/com_facebook_favicon_blue.xml b/facebook/src/main/res/drawable/com_facebook_favicon_blue.xml
new file mode 100644
index 000000000..2f5ed129a
--- /dev/null
+++ b/facebook/src/main/res/drawable/com_facebook_favicon_blue.xml
@@ -0,0 +1,27 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<vector android:height="14dp"
+    android:viewportHeight="22.0"
+    android:viewportWidth="22.0"
+    android:width="14dp"
+    xmlns:android="http://schemas.android.com/apk/res/android">
+    <path android:fillColor="#3c6399" android:pathData="M20,0H2C0.895,0 0,0.896 0,2v18c0,1.105 0.895,2 2,2h9.96v-8.662H9.01V9.962h2.95v-2.49c0,-2.888 1.785,-4.46 4.393,-4.46 1.25,0 2.323,0.09 2.637,0.13v3.02l-1.81,0.002c-1.418,0 -1.693,0.666 -1.693,1.643v2.155h3.383l-0.44,3.376h-2.943V22H20c1.105,0 2,-0.895 2,-2V2c0,-1.104 -0.895,-2 -2,-2"/>
+</vector>
diff --git a/facebook/src/main/res/layout/com_facebook_device_auth_dialog_fragment.xml b/facebook/src/main/res/layout/com_facebook_device_auth_dialog_fragment.xml
index a90aab7b3..3acc823e0 100644
--- a/facebook/src/main/res/layout/com_facebook_device_auth_dialog_fragment.xml
+++ b/facebook/src/main/res/layout/com_facebook_device_auth_dialog_fragment.xml
@@ -20,21 +20,21 @@
 -->
 
 <android.support.v7.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:card_view="http://schemas.android.com/apk/res-auto"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
     android:layout_width="wrap_content"
     android:layout_height="wrap_content"
-    card_view:cardBackgroundColor="@android:color/transparent"
-    card_view:cardElevation="10dp">
+    app:cardBackgroundColor="@android:color/transparent"
+    app:cardElevation="10dp">
 
     <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-        android:layout_width="wrap_content"
+        android:layout_width="300dp"
         android:layout_height="wrap_content"
         android:background="@drawable/com_facebook_auth_dialog_background"
         android:orientation="vertical">
 
         <RelativeLayout
-            android:layout_width="300dp"
-            android:layout_height="wrap_content"
+            android:layout_width="match_parent"
+            android:layout_height="100dp"
             android:background="@drawable/com_facebook_auth_dialog_header_background"
             android:orientation="horizontal">
 
@@ -42,7 +42,7 @@
                 android:layout_width="match_parent"
                 android:layout_height="wrap_content">
 
-                <ImageView
+                <android.support.v7.widget.AppCompatImageView
                     android:layout_width="18dp"
                     android:layout_height="18dp"
                     android:layout_marginBottom="11dp"
@@ -50,55 +50,23 @@
                     android:layout_marginTop="11dp"
                     android:adjustViewBounds="false"
                     android:scaleType="fitXY"
-                    android:src="@drawable/com_facebook_favicon_white" />
+                    app:srcCompat="@drawable/com_facebook_favicon_blue" />
             </FrameLayout>
 
             <TextView
-                android:id="@+id/com_facebook_device_dialog_title"
+                android:id="@+id/confirmation_code"
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
                 android:layout_centerInParent="true"
-                android:fontFamily="sans-serif-light"
+                android:fontFamily="roboto_condensed"
                 android:gravity="center"
-                android:text="@string/com_facebook_loginview_log_in_button_long"
-                android:textColor="@color/com_facebook_share_button_text_color"
-                android:textSize="13sp"
-                android:typeface="sans" />
-
-        </RelativeLayout>
-
-        <TextView
-            android:id="@+id/com_facebook_device_auth_instructions"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="28dp"
-            android:fontFamily="sans-serif-light"
-            android:gravity="center_horizontal"
-            android:singleLine="false"
-            android:textColor="@color/com_facebook_device_auth_text"
-            android:textSize="14sp"
-            android:typeface="sans" />
-
-        <RelativeLayout
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center_horizontal"
-            android:layout_marginTop="14dp">
-
-            <TextView
-                android:id="@+id/confirmation_code"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_gravity="center_horizontal"
-                android:fontFamily="sans-serif-light"
-                android:textColor="@color/com_facebook_device_auth_text"
-                android:textSize="23sp"
+                android:textColor="@color/com_facebook_blue"
+                android:textSize="30sp"
                 android:typeface="sans"
                 android:visibility="invisible" />
 
             <ProgressBar
                 android:id="@+id/progress_bar"
-                style="@android:style/Widget.Holo.Light.ProgressBar"
                 android:layout_width="wrap_content"
                 android:layout_height="0dp"
                 android:layout_alignBottom="@+id/confirmation_code"
@@ -106,13 +74,28 @@
                 android:layout_centerHorizontal="true"
                 android:layout_centerInParent="true"
                 android:layout_centerVertical="true" />
+
         </RelativeLayout>
 
+        <TextView
+            android:id="@+id/com_facebook_device_auth_instructions"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginEnd="16dp"
+            android:layout_marginStart="16dp"
+            android:layout_marginTop="20dp"
+            android:fontFamily="roboto_condensed"
+            android:gravity="center_horizontal"
+            android:singleLine="false"
+            android:textColor="@color/com_facebook_device_auth_text"
+            android:textSize="12sp"
+            android:typeface="sans" />
+
         <FrameLayout
             android:layout_width="match_parent"
-            android:layout_height="match_parent"
-            android:layout_marginBottom="14dp"
-            android:layout_marginTop="17dp">
+            android:layout_height="wrap_content"
+            android:layout_marginBottom="17dp"
+            android:layout_marginTop="14dp">
 
             <Button
                 android:id="@+id/cancel_button"
@@ -122,7 +105,7 @@
                 android:background="@drawable/com_facebook_auth_dialog_cancel_background"
                 android:clickable="true"
                 android:focusable="true"
-                android:fontFamily="sans-serif-medium"
+                android:fontFamily="roboto_condensed"
                 android:text="@android:string/cancel"
                 android:textAllCaps="true"
                 android:textColor="@color/com_facebook_device_auth_text"
diff --git a/facebook/src/main/res/layout/com_facebook_smart_device_dialog_fragment.xml b/facebook/src/main/res/layout/com_facebook_smart_device_dialog_fragment.xml
new file mode 100644
index 000000000..e86adda67
--- /dev/null
+++ b/facebook/src/main/res/layout/com_facebook_smart_device_dialog_fragment.xml
@@ -0,0 +1,155 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<android.support.v7.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    app:cardBackgroundColor="@android:color/transparent"
+    app:cardElevation="10dp">
+
+    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_width="600dp"
+        android:layout_height="405dp"
+        android:background="@drawable/com_facebook_auth_dialog_background"
+        android:orientation="vertical"
+        android:gravity="center_horizontal"
+        >
+
+        <RelativeLayout
+            android:layout_width="match_parent"
+            android:layout_height="110dp"
+            android:background="@drawable/com_facebook_auth_dialog_header_background"
+            android:orientation="horizontal">
+
+            <FrameLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content">
+
+                <android.support.v7.widget.AppCompatImageView
+                    android:layout_width="18dp"
+                    android:layout_height="18dp"
+                    android:layout_marginBottom="11dp"
+                    android:layout_marginStart="12dp"
+                    android:layout_marginLeft="12dp"
+                    android:layout_marginTop="11dp"
+                    android:adjustViewBounds="false"
+                    android:scaleType="fitXY"
+                    app:srcCompat="@drawable/com_facebook_favicon_blue" />
+            </FrameLayout>
+
+            <TextView
+                android:id="@+id/confirmation_code"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_centerInParent="true"
+                android:fontFamily="sans-serif-light"
+                android:gravity="center"
+                android:textColor="@color/com_smart_login_code"
+                android:textSize="52sp"
+                android:typeface="sans"
+                android:visibility="invisible" />
+
+            <ProgressBar
+                android:id="@+id/progress_bar"
+                android:layout_width="wrap_content"
+                android:layout_height="0dp"
+                android:layout_alignBottom="@+id/confirmation_code"
+                android:layout_alignTop="@+id/confirmation_code"
+                android:layout_centerHorizontal="true"
+                android:layout_centerInParent="true"
+                android:layout_centerVertical="true" />
+
+        </RelativeLayout>
+
+        <TextView
+            android:id="@+id/com_facebook_smart_instructions_0"
+            style="@style/com_facebook_auth_dialog_instructions_textview"
+            android:layout_marginTop="18dp"
+            android:text="@string/com_facebook_smart_device_instructions_0"
+            />
+        <TextView
+            android:id="@+id/com_facebook_smart_instructions_1"
+            style="@style/com_facebook_auth_dialog_instructions_textview"
+            android:text="@string/com_facebook_smart_device_instructions_1"
+            android:drawablePadding="10dp"
+            android:layout_marginTop="7dp"
+            />
+
+
+        <TextView
+            android:id="@+id/com_facebook_smart_instructions_2"
+            style="@style/com_facebook_auth_dialog_instructions_textview"
+            android:text="@string/com_facebook_smart_device_instructions_2"
+            android:drawablePadding="10dp"
+            android:layout_marginTop="7dp"
+            />
+        <TextView
+            android:id="@+id/com_facebook_smart_instructions_3"
+            style="@style/com_facebook_auth_dialog_instructions_textview"
+            android:text="@string/com_facebook_smart_device_instructions_3"
+            android:layout_marginTop="7dp"
+            />
+
+        <TextView
+            android:id="@+id/com_facebook_smart_instructions_or"
+            style="@style/com_facebook_auth_dialog_instructions_textview"
+            android:layout_width="match_parent"
+            android:gravity="center_horizontal"
+            android:textStyle="bold"
+            android:layout_marginTop="12dp"
+            android:layout_marginStart="0dp"
+            android:layout_marginEnd="0dp"
+            android:text="@string/com_facebook_smart_device_instructions_or"
+            />
+
+        <TextView
+            android:id="@+id/com_facebook_device_auth_instructions"
+            style="@style/com_facebook_auth_dialog_instructions_textview"
+            android:layout_marginTop="12dp"
+            />
+
+        <FrameLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginBottom="17dp"
+            android:layout_marginTop="28dp">
+
+            <Button
+                android:id="@+id/cancel_button"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:minWidth="200dp"
+                android:layout_gravity="center_horizontal"
+                android:background="@drawable/com_facebook_auth_dialog_cancel_background"
+                android:clickable="true"
+                android:focusable="true"
+                android:fontFamily="sans-serif-medium"
+                android:text="@android:string/cancel"
+                android:textAllCaps="true"
+                android:textColor="@color/com_facebook_device_auth_text"
+                android:textSize="18sp"
+                android:textStyle="bold"
+                android:typeface="sans" />
+        </FrameLayout>
+
+    </LinearLayout>
+</android.support.v7.widget.CardView>
diff --git a/facebook/src/main/res/values-af/strings.xml b/facebook/src/main/res/values-af/strings.xml
index 0043107da..04f121aae 100644
--- a/facebook/src/main/res/values-af/strings.xml
+++ b/facebook/src/main/res/values-af/strings.xml
@@ -24,18 +24,19 @@
     <string name="com_facebook_like_button_liked">Hou van</string>
     <string name="com_facebook_loginview_log_out_button">Meld af</string>
     <string name="com_facebook_loginview_log_in_button">Meld aan</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Gaan voort met Facebook</string>
     <string name="com_facebook_loginview_log_in_button_long">Meld met Facebook aan</string>
     <string name="com_facebook_loginview_logged_in_as">Aangemeld as: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Met Facebook aangemeld</string>
     <string name="com_facebook_loginview_log_out_action">Meld af</string>
     <string name="com_facebook_loginview_cancel_action">Kanselleer</string>
-    <string name="com_facebook_loading">Laai tans...</string>
+    <string name="com_facebook_loading">Laai tans&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">AndroidManifest-fout</string>
     <string name="com_facebook_internet_permission_error_message">Webaansig-aanmelding benodig INTERNET-toestemming</string>
-    <string name="com_facebook_tooltip_default">Nuut! Jy is in beheer - kies watter inligting jy met toepassings wil deel.</string>
+    <string name="com_facebook_tooltip_default">Jy is in beheer – kies watter inligting jy met toepassings wil deel.</string>
     <string name="com_facebook_image_download_unknown_error">Onverwagse fout met aflaai van \'n
         prent.</string>
     <string name="com_facebook_share_button_text">Deel</string>
     <string name="com_facebook_send_button_text">Stuur</string>
-    <string name="com_facebook_device_auth_instructions">Besoek %@ op jou slimfoon of rekenaar en voer hierdie kode in:</string>
+    <string name="com_facebook_device_auth_instructions">Besoek &lt;b&gt;facebook.com/device&lt;/b&gt; op jou slimfoon of rekenaar en voer hierdie kode in:</string>
 </resources>
diff --git a/facebook/src/main/res/values-ar/strings.xml b/facebook/src/main/res/values-ar/strings.xml
index d21abed0d..a2351c00e 100644
--- a/facebook/src/main/res/values-ar/strings.xml
+++ b/facebook/src/main/res/values-ar/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">أعجبني</string>
     <string name="com_facebook_loginview_log_out_button">تسجيل الخروج</string>
     <string name="com_facebook_loginview_log_in_button">تسجيل الدخول</string>
+    <string name="com_facebook_loginview_log_in_button_continue">متابعة بحساب فيسبوك</string>
     <string name="com_facebook_loginview_log_in_button_long">تسجيل الدخول بحساب فيسبوك</string>
     <string name="com_facebook_loginview_logged_in_as">تم تسجيل الدخول باسم: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">تم تسجيل الدخول بحساب فيسبوك</string>
     <string name="com_facebook_loginview_log_out_action">تسجيل الخروج</string>
     <string name="com_facebook_loginview_cancel_action">إلغاء</string>
-    <string name="com_facebook_loading">جارٍ التحميل...</string>
+    <string name="com_facebook_loading">جارٍ التحميل&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">خطأ AndroidManifest</string>
     <string name="com_facebook_internet_permission_error_message">يتطلب تسجيل الدخول إلى WebView إذن الاتصال بالإنترنت</string>
-    <string name="com_facebook_tooltip_default">جديد! أنت المتحكم - اختر المعلومات التي تريد مشاركتها مع التطبيقات.</string>
+    <string name="com_facebook_tooltip_default">أنت المتحكم - اختر المعلومات التي تريد مشاركتها مع التطبيقات.</string>
     <string name="com_facebook_image_download_unknown_error">حدث خطأ غير متوقع أثناء تنزيل صورة.</string>
     <string name="com_facebook_share_button_text">مشاركة</string>
     <string name="com_facebook_send_button_text">إرسال</string>
-    <string name="com_facebook_device_auth_instructions">زر %@ على هاتفك الذكي أو الكمبيوتر ثم أدخل هذا الرمز:</string>
+    <string name="com_facebook_device_auth_instructions">زر &lt;b&gt;facebook.com/device&lt;/b&gt; على هاتفك الذكي أو الكمبيوتر ثم أدخل هذا الرمز:</string>
 </resources>
diff --git a/facebook/src/main/res/values-bn/strings.xml b/facebook/src/main/res/values-bn/strings.xml
index 26a70fc1e..8c1301a66 100644
--- a/facebook/src/main/res/values-bn/strings.xml
+++ b/facebook/src/main/res/values-bn/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">পছন্দ করা হয়েছে</string>
     <string name="com_facebook_loginview_log_out_button">লগ আউট করুন</string>
     <string name="com_facebook_loginview_log_in_button">লগ ইন করুন</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Facebook এর সাথে চালিয়ে যান</string>
     <string name="com_facebook_loginview_log_in_button_long">Facebook -এর সাথে লগ ইন করুন</string>
     <string name="com_facebook_loginview_logged_in_as">এই হিসাবে লগ ইন করা হয়েছে: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Facebook ব্যবহার করে লগ ইন করা হয়েছে</string>
     <string name="com_facebook_loginview_log_out_action">লগ আউট করুন</string>
     <string name="com_facebook_loginview_cancel_action">বাতিল করুন</string>
-    <string name="com_facebook_loading">লোড হচ্ছে...</string>
+    <string name="com_facebook_loading">লোড হচ্ছে&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">AndroidManifest ত্রুটি</string>
     <string name="com_facebook_internet_permission_error_message">WebView লগ ইন করার জন্য INTERNET-এর অনুমতির প্রয়োজন আছে</string>
-    <string name="com_facebook_tooltip_default">নতুন! আপনি নিয়ন্ত্রণে আছেন-অ্যাপসের সাথে আপনি কোন তথ্য ভাগ করতে চাইছেন তা চয়ন করুন৷</string>
+    <string name="com_facebook_tooltip_default">আপনি নিয়ন্ত্রণে আছেন - অ্যাপ্সের সাথে আপনি যে তথ্য শেয়ার করতে চান তা বাছুন৷</string>
     <string name="com_facebook_image_download_unknown_error">একটি চিত্র ডাউনলোড করার সময়ে অপ্রত্যাশিত ত্রুটি দেখা দিচ্ছে৷</string>
     <string name="com_facebook_share_button_text">ভাগ করুন</string>
     <string name="com_facebook_send_button_text">পাঠান</string>
-    <string name="com_facebook_device_auth_instructions">আপনার কম্পিউটার বা স্মার্টফোন থেকে %@ এ যান এবং এই কোডটিকে প্রবেশ করান:</string>
+    <string name="com_facebook_device_auth_instructions">আপনার কম্পিউটার বা স্মার্টফোন থেকে &lt;b&gt;facebook.com/device&lt;/b&gt; এ যান এবং এই কোডটিকে প্রবেশ করান:</string>
 </resources>
diff --git a/facebook/src/main/res/values-cs/strings.xml b/facebook/src/main/res/values-cs/strings.xml
index 45cd6c263..d2f7d66c3 100644
--- a/facebook/src/main/res/values-cs/strings.xml
+++ b/facebook/src/main/res/values-cs/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">Už se mi to líbí</string>
     <string name="com_facebook_loginview_log_out_button">Odhlásit</string>
     <string name="com_facebook_loginview_log_in_button">Přihlásit</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Pokračovat přes Facebook</string>
     <string name="com_facebook_loginview_log_in_button_long">Přihlásit se přes Facebook</string>
     <string name="com_facebook_loginview_logged_in_as">Přihlášen(a) jako: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Přihlášen(a) přes Facebook</string>
     <string name="com_facebook_loginview_log_out_action">Odhlásit</string>
     <string name="com_facebook_loginview_cancel_action">Zrušit</string>
-    <string name="com_facebook_loading">Načítání…</string>
+    <string name="com_facebook_loading">Načítání&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">Chyba AndroidManifest</string>
     <string name="com_facebook_internet_permission_error_message">Webové přihlášení vyžaduje oprávnění použít INTERNET</string>
-    <string name="com_facebook_tooltip_default">Novinka! Je jen na vás, které informace chcete s aplikacemi sdílet.</string>
+    <string name="com_facebook_tooltip_default">Je jen na vás, které informace chcete s aplikacemi sdílet.</string>
     <string name="com_facebook_image_download_unknown_error">Při stahování obrázku došlo k nečekané chybě.</string>
     <string name="com_facebook_share_button_text">Sdílet</string>
     <string name="com_facebook_send_button_text">Odeslat</string>
-    <string name="com_facebook_device_auth_instructions">Přejděte ze smartphonu nebo počítače na %@ a zadejte tento kód:</string>
+    <string name="com_facebook_device_auth_instructions">Přejděte ze smartphonu nebo počítače na &lt;b&gt;facebook.com/device&lt;/b&gt; a zadejte tento kód:</string>
 </resources>
diff --git a/facebook/src/main/res/values-da/strings.xml b/facebook/src/main/res/values-da/strings.xml
index 6e12894e4..17912e303 100644
--- a/facebook/src/main/res/values-da/strings.xml
+++ b/facebook/src/main/res/values-da/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">Synes godt om</string>
     <string name="com_facebook_loginview_log_out_button">Log af</string>
     <string name="com_facebook_loginview_log_in_button">Log på</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Fortsæt med Facebook</string>
     <string name="com_facebook_loginview_log_in_button_long">Log på med Facebook</string>
     <string name="com_facebook_loginview_logged_in_as">Logget på som: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Logget på med Facebook</string>
     <string name="com_facebook_loginview_log_out_action">Log af</string>
     <string name="com_facebook_loginview_cancel_action">Annuller</string>
-    <string name="com_facebook_loading">Indlæser ...</string>
+    <string name="com_facebook_loading">Indlæser &#8230;</string>
     <string name="com_facebook_internet_permission_error_title">Fejl i forbindelse med AndroidManifest</string>
     <string name="com_facebook_internet_permission_error_message">WebView-login kræver tilladelse til INTERNET</string>
-    <string name="com_facebook_tooltip_default">Nyhed! Du har styringen – vælg de oplysninger, som du vil dele med apps.</string>
+    <string name="com_facebook_tooltip_default">Du har styringen – vælg de oplysninger, som du vil dele med apps.</string>
     <string name="com_facebook_image_download_unknown_error">Der opstod en uventet fejl under download af et billede.</string>
     <string name="com_facebook_share_button_text">Del</string>
     <string name="com_facebook_send_button_text">Send</string>
-    <string name="com_facebook_device_auth_instructions">Gå til %@ på din smartphone eller computer, og indtast denne kode:</string>
+    <string name="com_facebook_device_auth_instructions">Gå til &lt;b&gt;facebook.com/device&lt;/b&gt; på din smartphone eller computer, og indtast denne kode:</string>
 </resources>
diff --git a/facebook/src/main/res/values-de/strings.xml b/facebook/src/main/res/values-de/strings.xml
index ae0fa73e6..2609c2897 100644
--- a/facebook/src/main/res/values-de/strings.xml
+++ b/facebook/src/main/res/values-de/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">Gefällt dir</string>
     <string name="com_facebook_loginview_log_out_button">Abmelden</string>
     <string name="com_facebook_loginview_log_in_button">Anmelden</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Mit Facebook fortfahren</string>
     <string name="com_facebook_loginview_log_in_button_long">Über Facebook anmelden</string>
     <string name="com_facebook_loginview_logged_in_as">Angemeldet als: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Über Facebook angemeldet</string>
     <string name="com_facebook_loginview_log_out_action">Abmelden</string>
     <string name="com_facebook_loginview_cancel_action">Abbrechen</string>
-    <string name="com_facebook_loading">Wird geladen ...</string>
+    <string name="com_facebook_loading">Wird geladen &#8230;</string>
     <string name="com_facebook_internet_permission_error_title">AndroidManifest-Fehler</string>
     <string name="com_facebook_internet_permission_error_message">Die WebView-Anmeldung erfordert die INTERNET-Berechtigung</string>
-    <string name="com_facebook_tooltip_default">Neu! Es liegt ganz an dir – du kannst dir aussuchen, was du mit Apps teilen möchtest.</string>
+    <string name="com_facebook_tooltip_default">Es liegt ganz an dir – du kannst dir aussuchen, was du mit Apps teilen möchtest.</string>
     <string name="com_facebook_image_download_unknown_error">Unerwarteter Fehler beim Herunterladen eines Bildes.</string>
     <string name="com_facebook_share_button_text">Teilen</string>
     <string name="com_facebook_send_button_text">Senden</string>
-    <string name="com_facebook_device_auth_instructions">Gehe über dein Smartphone oder deinen Computer zu %@ und gib diesen Code ein:</string>
+    <string name="com_facebook_device_auth_instructions">Gehe über dein Smartphone oder deinen Computer zu &lt;b&gt;facebook.com/device&lt;/b&gt; und gib diesen Code ein:</string>
 </resources>
diff --git a/facebook/src/main/res/values-el/strings.xml b/facebook/src/main/res/values-el/strings.xml
index b771b4232..de7a275f6 100644
--- a/facebook/src/main/res/values-el/strings.xml
+++ b/facebook/src/main/res/values-el/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">Σας αρέσει</string>
     <string name="com_facebook_loginview_log_out_button">Αποσύνδεση</string>
     <string name="com_facebook_loginview_log_in_button">Σύνδεση</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Συνεχίστε με το Facebook</string>
     <string name="com_facebook_loginview_log_in_button_long">Σύνδεση μέσω Facebook</string>
     <string name="com_facebook_loginview_logged_in_as">Έχει γίνει σύνδεση ως: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Έχει γίνει σύνδεση μέσω Facebook</string>
     <string name="com_facebook_loginview_log_out_action">Αποσύνδεση</string>
     <string name="com_facebook_loginview_cancel_action">Άκυρο</string>
-    <string name="com_facebook_loading">Φόρτωση...</string>
+    <string name="com_facebook_loading">Φόρτωση&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">Σφάλμα AndroidManifest</string>
     <string name="com_facebook_internet_permission_error_message">Για τη σύνδεση στο WebView απαιτείται σύνδεση INTERNET</string>
-    <string name="com_facebook_tooltip_default">Νέο! Έχετε τον έλεγχο - επιλέξτε ποιες πληροφορίες θέλετε να κοινοποιούνται στις εφαρμογές.</string>
+    <string name="com_facebook_tooltip_default">Έχετε τον έλεγχο - επιλέξτε ποιες πληροφορίες θέλετε να κοινοποιούνται στις εφαρμογές.</string>
     <string name="com_facebook_image_download_unknown_error">Προέκυψε μη αναμενόμενο σφάλμα κατά τη λήψη μιας εικόνας.</string>
     <string name="com_facebook_share_button_text">Κοινοποίηση</string>
     <string name="com_facebook_send_button_text">Αποστολή</string>
-    <string name="com_facebook_device_auth_instructions">Επισκεφτείτε τον ιστότοπο %@ από το smartphone ή τον υπολογιστή σας και πληκτρολογήστε αυτόν τον κωδικό:</string>
+    <string name="com_facebook_device_auth_instructions">Επισκεφτείτε τον ιστότοπο &lt;b&gt;facebook.com/device&lt;/b&gt; από το smartphone ή τον υπολογιστή σας και πληκτρολογήστε αυτόν τον κωδικό:</string>
 </resources>
diff --git a/facebook/src/main/res/values-es-rES/strings.xml b/facebook/src/main/res/values-es-rES/strings.xml
index a41aed815..3ce396a2c 100644
--- a/facebook/src/main/res/values-es-rES/strings.xml
+++ b/facebook/src/main/res/values-es-rES/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">Te gusta</string>
     <string name="com_facebook_loginview_log_out_button">Salir</string>
     <string name="com_facebook_loginview_log_in_button">Inicio de sesión</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Continuar con Facebook</string>
     <string name="com_facebook_loginview_log_in_button_long">Iniciar sesión con Facebook</string>
     <string name="com_facebook_loginview_logged_in_as">Sesión iniciada como: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Sesión iniciada con Facebook</string>
     <string name="com_facebook_loginview_log_out_action">Salir</string>
     <string name="com_facebook_loginview_cancel_action">Cancelar</string>
-    <string name="com_facebook_loading">Cargando...</string>
+    <string name="com_facebook_loading">Cargando&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">Error de AndroidManifest</string>
     <string name="com_facebook_internet_permission_error_message">El inicio de sesión de WebView requiere permiso para INTERNET</string>
-    <string name="com_facebook_tooltip_default">Novedad: Tú eres quien controla y elige la información que quieres compartir con las aplicaciones.</string>
+    <string name="com_facebook_tooltip_default">Tú tienes el control: elige la información que quieres compartir con las aplicaciones.</string>
     <string name="com_facebook_image_download_unknown_error">Error inesperado al descargar una imagen.</string>
     <string name="com_facebook_share_button_text">Compartir</string>
     <string name="com_facebook_send_button_text">Enviar</string>
-    <string name="com_facebook_device_auth_instructions">Visita %@ en tu smartphone o computadora e ingresa este código:</string>
+    <string name="com_facebook_device_auth_instructions">Visita &lt;b&gt;facebook.com/device&lt;/b&gt; en tu smartphone o computadora e ingresa este código:</string>
 </resources>
diff --git a/facebook/src/main/res/values-es/strings.xml b/facebook/src/main/res/values-es/strings.xml
index 7dfbf4ab0..8aab0614a 100644
--- a/facebook/src/main/res/values-es/strings.xml
+++ b/facebook/src/main/res/values-es/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">Te gusta</string>
     <string name="com_facebook_loginview_log_out_button">Salir</string>
     <string name="com_facebook_loginview_log_in_button">Inicio de sesión</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Continuar con Facebook</string>
     <string name="com_facebook_loginview_log_in_button_long">Iniciar sesión con Facebook</string>
     <string name="com_facebook_loginview_logged_in_as">Sesión iniciada como: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Sesión iniciada con Facebook</string>
     <string name="com_facebook_loginview_log_out_action">Salir</string>
     <string name="com_facebook_loginview_cancel_action">Cancelar</string>
-    <string name="com_facebook_loading">Cargando…</string>
+    <string name="com_facebook_loading">Cargando&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">Error AndroidManifest</string>
     <string name="com_facebook_internet_permission_error_message">El inicio de sesión a la web requiere permiso de conexión a internet</string>
-    <string name="com_facebook_tooltip_default">¡Nuevo! Tú tienes el control: elige qué información quieres compartir con las aplicaciones.</string>
+    <string name="com_facebook_tooltip_default">Tú decides: elige qué información quieres compartir con las aplicaciones.</string>
     <string name="com_facebook_image_download_unknown_error">Se produjo un error inesperado al descargar una imagen.</string>
     <string name="com_facebook_share_button_text">Compartir</string>
     <string name="com_facebook_send_button_text">Enviar</string>
-    <string name="com_facebook_device_auth_instructions">Visita %@ en tu smartphone u ordenador e introduce este código:</string>
+    <string name="com_facebook_device_auth_instructions">Visita &lt;b&gt;facebook.com/device&lt;/b&gt; en tu smartphone u ordenador e introduce este código:</string>
 </resources>
diff --git a/facebook/src/main/res/values-fi/strings.xml b/facebook/src/main/res/values-fi/strings.xml
index 174a7761f..eda2bf920 100644
--- a/facebook/src/main/res/values-fi/strings.xml
+++ b/facebook/src/main/res/values-fi/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">Tykätty</string>
     <string name="com_facebook_loginview_log_out_button">Kirjaudu ulos</string>
     <string name="com_facebook_loginview_log_in_button">Kirjaudu sisään</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Jatka Facebook-tunnuksilla</string>
     <string name="com_facebook_loginview_log_in_button_long">Kirjaudu sisään Facebookin avulla</string>
     <string name="com_facebook_loginview_logged_in_as">Sisäänkirjautunut nimellä: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Sisäänkirjautunut Facebookin avulla</string>
     <string name="com_facebook_loginview_log_out_action">Kirjaudu ulos</string>
     <string name="com_facebook_loginview_cancel_action">Peruuta</string>
-    <string name="com_facebook_loading">Ladataan...</string>
+    <string name="com_facebook_loading">Ladataan&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">AndroidManifest-virhe</string>
     <string name="com_facebook_internet_permission_error_message">WebView-kirjautuminen edellyttää INTERNET-käyttöoikeutta</string>
-    <string name="com_facebook_tooltip_default">Uutta! Sinä päätät – valitse, mitä haluat jakaa sovellusten kanssa.</string>
+    <string name="com_facebook_tooltip_default">Sinä voit valita, mitä tietoja jaat sovelluksille.</string>
     <string name="com_facebook_image_download_unknown_error">Odottamaton virhe kuvan palvelimesta lataamisen aikana.</string>
     <string name="com_facebook_share_button_text">Jaa</string>
     <string name="com_facebook_send_button_text">Lähetä</string>
-    <string name="com_facebook_device_auth_instructions">Siirry osoitteeseen %@ älypuhelimella tai tietokoneella ja anna seuraava koodi:</string>
+    <string name="com_facebook_device_auth_instructions">Siirry osoitteeseen &lt;b&gt;facebook.com/device&lt;/b&gt; älypuhelimella tai tietokoneella ja anna seuraava koodi:</string>
 </resources>
diff --git a/facebook/src/main/res/values-fr/strings.xml b/facebook/src/main/res/values-fr/strings.xml
index 5247f3cdf..567de0ec2 100644
--- a/facebook/src/main/res/values-fr/strings.xml
+++ b/facebook/src/main/res/values-fr/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">J’aime déjà</string>
     <string name="com_facebook_loginview_log_out_button">Déconnexion</string>
     <string name="com_facebook_loginview_log_in_button">Connexion</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Continuer avec Facebook</string>
     <string name="com_facebook_loginview_log_in_button_long">Connexion avec Facebook</string>
     <string name="com_facebook_loginview_logged_in_as">Connexion en tant que : %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Connecté(e) à l’aide de Facebook</string>
     <string name="com_facebook_loginview_log_out_action">Déconnexion</string>
     <string name="com_facebook_loginview_cancel_action">Annuler</string>
-    <string name="com_facebook_loading">Chargement...</string>
+    <string name="com_facebook_loading">Chargement&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">Erreur AndroidManifest</string>
     <string name="com_facebook_internet_permission_error_message">La connexion au web nécessite une autorisation d’accéder à INTERNET</string>
-    <string name="com_facebook_tooltip_default">Nouveau ! Choisissez les informations que vous souhaitez partager avec les applications.</string>
+    <string name="com_facebook_tooltip_default">Vous gardez le contrôle. Choisissez les informations que vous souhaitez partager avec les applications.</string>
     <string name="com_facebook_image_download_unknown_error">Une erreur inattendue s’est produite au moment de télécharger une image.</string>
     <string name="com_facebook_share_button_text">Partager</string>
     <string name="com_facebook_send_button_text">Envoyer</string>
-    <string name="com_facebook_device_auth_instructions">Rendez-vous sur %@ sur votre smartphone ou votre ordinateur et entrez ce code :</string>
+    <string name="com_facebook_device_auth_instructions">Rendez-vous sur &lt;b&gt;facebook.com/device&lt;/b&gt; sur votre smartphone ou votre ordinateur et entrez ce code :</string>
 </resources>
diff --git a/facebook/src/main/res/values-gu/strings.xml b/facebook/src/main/res/values-gu/strings.xml
index 32550142b..ae1a92506 100644
--- a/facebook/src/main/res/values-gu/strings.xml
+++ b/facebook/src/main/res/values-gu/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">પસંદ કર્યું</string>
     <string name="com_facebook_loginview_log_out_button">લૉગ આઉટ કરો</string>
     <string name="com_facebook_loginview_log_in_button">લૉગ ઇન કરો</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Facebook સાથે ચાલુ રાખો</string>
     <string name="com_facebook_loginview_log_in_button_long">ફેસબુક સાથે લૉગ ઇન કરો</string>
     <string name="com_facebook_loginview_logged_in_as">આ તરીકે લૉગ ઇન થયાં: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">ફેસબુકનો ઉપયોગ કરીને લૉગ ઇન કરો</string>
     <string name="com_facebook_loginview_log_out_action">લૉગ આઉટ કરો</string>
     <string name="com_facebook_loginview_cancel_action">રદ કરો</string>
-    <string name="com_facebook_loading">લોડ કરી રહ્યાં છે...</string>
+    <string name="com_facebook_loading">લોડ કરી રહ્યાં છે&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">AndroidManifest ભૂલ</string>
     <string name="com_facebook_internet_permission_error_message">WebView લૉગિન માટે ઇન્ટરનેટ પરવાગની આવશ્યક છે</string>
-    <string name="com_facebook_tooltip_default">નવું! તમે નિયંત્રણ કરો છો - તમે એપ્લિકેશન્સ સાથે કઈ માહિતી શેર કરવા માંગો છો તે પસંદ કરો.</string>
+    <string name="com_facebook_tooltip_default">તમે નિયંત્રણ કરો છો - તમે એપ્લિકેશન્સ સાથે કઈ માહિતી શેર કરવા માંગો છો તે પસંદ કરો.</string>
     <string name="com_facebook_image_download_unknown_error">છબી ડાઉનલોડ કરતી વખતે અનપેક્ષિત ભૂલ આવી.</string>
     <string name="com_facebook_share_button_text">શેર કરો</string>
     <string name="com_facebook_send_button_text">મોકલો</string>
-    <string name="com_facebook_device_auth_instructions">તમારા સ્માર્ટફોન અથવા કમ્પ્યુટર પર %@ ની મુલાકાત લો અને આ કોડ દાખલ કરો:</string>
+    <string name="com_facebook_device_auth_instructions">તમારા સ્માર્ટફોન અથવા કમ્પ્યુટર પર &lt;b&gt;facebook.com/device&lt;/b&gt; ની મુલાકાત લો અને આ કોડ દાખલ કરો:</string>
 </resources>
diff --git a/facebook/src/main/res/values-hi/strings.xml b/facebook/src/main/res/values-hi/strings.xml
index 0088a75c6..10c9caf6d 100644
--- a/facebook/src/main/res/values-hi/strings.xml
+++ b/facebook/src/main/res/values-hi/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">पसंद किया</string>
     <string name="com_facebook_loginview_log_out_button">लॉग आउट</string>
     <string name="com_facebook_loginview_log_in_button">लॉग इन करें</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Facebook के साथ जारी रखें</string>
     <string name="com_facebook_loginview_log_in_button_long">Facebook से लॉग इन करें</string>
     <string name="com_facebook_loginview_logged_in_as">इस रूप में लॉग इन किया: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Facebook का उपयोग करके लॉग इन किया हुआ है</string>
     <string name="com_facebook_loginview_log_out_action">लॉग आउट</string>
     <string name="com_facebook_loginview_cancel_action">रद्द करें</string>
-    <string name="com_facebook_loading">लोड हो रहा है...</string>
+    <string name="com_facebook_loading">लोड हो रहा है&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">AndroidManifest गलती</string>
     <string name="com_facebook_internet_permission_error_message">WebView लॉग इन के लिए INTERNET अनुमति की आवश्यकता है</string>
-    <string name="com_facebook_tooltip_default">नया! आप नियंत्रण में हैं - चुनें कि आप एप्लिकेशन से कौन-सी जानकारी साझा करना चाहते हैं.</string>
+    <string name="com_facebook_tooltip_default">आप नियंत्रण में हैं - चुनें कि आप एप्लिकेशन से कौन-सी जानकारी साझा करना चाहते हैं.</string>
     <string name="com_facebook_image_download_unknown_error">एक चित्र डाउनलोड करते समय अनपेक्षित गलती हुई.</string>
     <string name="com_facebook_share_button_text">साझा करें</string>
     <string name="com_facebook_send_button_text">भेजें</string>
-    <string name="com_facebook_device_auth_instructions">अपने स्मार्टफ़ोन या कंप्यूटर पर %@ पर जाएँ और यह कोड डालें:</string>
+    <string name="com_facebook_device_auth_instructions">अपने स्मार्टफ़ोन या कंप्यूटर पर &lt;b&gt;facebook.com/device&lt;/b&gt; पर जाएँ और यह कोड डालें:</string>
 </resources>
diff --git a/facebook/src/main/res/values-hr/strings.xml b/facebook/src/main/res/values-hr/strings.xml
index 25d909b28..50217a847 100644
--- a/facebook/src/main/res/values-hr/strings.xml
+++ b/facebook/src/main/res/values-hr/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">Označeno sa "sviđa mi se"</string>
     <string name="com_facebook_loginview_log_out_button">Odjavi se</string>
     <string name="com_facebook_loginview_log_in_button">Prijavi se</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Nastavite s korištenjem Facebooka</string>
     <string name="com_facebook_loginview_log_in_button_long">Prijava putem Facebooka</string>
     <string name="com_facebook_loginview_logged_in_as">Prijavljen kao: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Prijavljen putem Facebooka</string>
     <string name="com_facebook_loginview_log_out_action">Odjavi se</string>
     <string name="com_facebook_loginview_cancel_action">Odustani</string>
-    <string name="com_facebook_loading">Učitavanje u tijeku…</string>
+    <string name="com_facebook_loading">Učitavanje u tijeku&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">Pogreška datoteke AndroidManifest</string>
     <string name="com_facebook_internet_permission_error_message">Za prijavu u aplikaciju WebView potrebna je dozvola INTERNET</string>
-    <string name="com_facebook_tooltip_default">Novo! Vi odlučujete – odaberite koje informacije želite podijeliti u aplikacijama.</string>
+    <string name="com_facebook_tooltip_default">Vi odlučujete – odaberite koje podatke želite dijeliti u aplikacijama.</string>
     <string name="com_facebook_image_download_unknown_error">Prilikom preuzimanja slike došlo je do neočekivane pogreške.</string>
     <string name="com_facebook_share_button_text">Dijeli</string>
     <string name="com_facebook_send_button_text">Pošalji</string>
-    <string name="com_facebook_device_auth_instructions">Posjetite %@ na pametnom telefonu ili računalu i unesite ovaj kôd:</string>
+    <string name="com_facebook_device_auth_instructions">Posjetite &lt;b&gt;facebook.com/device&lt;/b&gt; na pametnom telefonu ili računalu i unesite ovaj kôd:</string>
 </resources>
diff --git a/facebook/src/main/res/values-hu/strings.xml b/facebook/src/main/res/values-hu/strings.xml
index 35b1d0dfc..86bcd7d67 100644
--- a/facebook/src/main/res/values-hu/strings.xml
+++ b/facebook/src/main/res/values-hu/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">Kedveled</string>
     <string name="com_facebook_loginview_log_out_button">Kijelentkezés</string>
     <string name="com_facebook_loginview_log_in_button">Bejelentkezés</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Folytatás a Facebookkal</string>
     <string name="com_facebook_loginview_log_in_button_long">Bejelentkezés a Facebook használatával</string>
     <string name="com_facebook_loginview_logged_in_as">Bejelentkezve %1$s néven</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Bejelentkezve a Facebook használatával</string>
     <string name="com_facebook_loginview_log_out_action">Kijelentkezés</string>
     <string name="com_facebook_loginview_cancel_action">Törlés</string>
-    <string name="com_facebook_loading">Betöltés...</string>
+    <string name="com_facebook_loading">Betöltés&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">AndroidManifest-hiba</string>
     <string name="com_facebook_internet_permission_error_message">A webes bejelentkezéshez szükséges a jogosultság az internet használatára.</string>
-    <string name="com_facebook_tooltip_default">Újdonság! A döntés a kezedben van: kiválaszthatod, hogy milyen adatokat osztasz meg az alkalmazásokkal.</string>
+    <string name="com_facebook_tooltip_default">A döntés a kezedben van: kiválaszthatod, hogy milyen adatokat osztasz meg az alkalmazásokkal.</string>
     <string name="com_facebook_image_download_unknown_error">Váratlan hiba történt egy kép betöltése közben.</string>
     <string name="com_facebook_share_button_text">Megosztás</string>
     <string name="com_facebook_send_button_text">Küldés</string>
-    <string name="com_facebook_device_auth_instructions">Keresd fel a(z) %@ oldalt a telefonodról vagy számítógépről, és írd be a következő kódot:</string>
+    <string name="com_facebook_device_auth_instructions">Keresd fel a(z) &lt;b&gt;facebook.com/device&lt;/b&gt; oldalt a telefonodról vagy számítógépről, és írd be a következő kódot:</string>
 </resources>
diff --git a/facebook/src/main/res/values-id/strings.xml b/facebook/src/main/res/values-id/strings.xml
index ba8d27bcc..bd56a9541 100644
--- a/facebook/src/main/res/values-id/strings.xml
+++ b/facebook/src/main/res/values-id/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">Disukai</string>
     <string name="com_facebook_loginview_log_out_button">Keluar</string>
     <string name="com_facebook_loginview_log_in_button">Masuk</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Lanjutkan dengan Facebook</string>
     <string name="com_facebook_loginview_log_in_button_long">Masuk menggunakan Facebook</string>
     <string name="com_facebook_loginview_logged_in_as">Masuk sebagai: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Masuk menggunakan Facebook</string>
     <string name="com_facebook_loginview_log_out_action">Keluar</string>
     <string name="com_facebook_loginview_cancel_action">Batal</string>
-    <string name="com_facebook_loading">Memuat...</string>
+    <string name="com_facebook_loading">Memuat&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">Kesalahan AndroidManifest</string>
     <string name="com_facebook_internet_permission_error_message">Masuk WebView memerlukan izin INTERNET</string>
-    <string name="com_facebook_tooltip_default">Baru! Anda memegang kendali - pilih info yang ingin Anda bagikan dengan aplikasi.</string>
+    <string name="com_facebook_tooltip_default">Anda memegang kendali - pilih info yang ingin Anda bagikan dengan aplikasi.</string>
     <string name="com_facebook_image_download_unknown_error">Kesalahan yang tidak diharapkan saat mengunduh gambar.</string>
     <string name="com_facebook_share_button_text">Berbagi</string>
     <string name="com_facebook_send_button_text">Kirim</string>
-    <string name="com_facebook_device_auth_instructions">Buka %@ dari smartphone Anda atau komputer dan masukkan kode ini:</string>
+    <string name="com_facebook_device_auth_instructions">Buka &lt;b&gt;facebook.com/device&lt;/b&gt; dari smartphone Anda atau komputer dan masukkan kode ini:</string>
 </resources>
diff --git a/facebook/src/main/res/values-it/strings.xml b/facebook/src/main/res/values-it/strings.xml
index 170fad349..7a2df115c 100644
--- a/facebook/src/main/res/values-it/strings.xml
+++ b/facebook/src/main/res/values-it/strings.xml
@@ -24,19 +24,20 @@
     <string name="com_facebook_like_button_liked">Ti piace</string>
     <string name="com_facebook_loginview_log_out_button">Esci</string>
     <string name="com_facebook_loginview_log_in_button">Accedi</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Continua con Facebook</string>
     <string name="com_facebook_loginview_log_in_button_long">Accedi con Facebook</string>
     <string name="com_facebook_loginview_logged_in_as">Accesso effettuato come: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Accesso effettuato con Facebook</string>
     <string name="com_facebook_loginview_log_out_action">Esci</string>
     <string name="com_facebook_loginview_cancel_action">Annulla</string>
-    <string name="com_facebook_loading">Caricamento...</string>
+    <string name="com_facebook_loading">Caricamento&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">AndroidManifest Error</string>
     <string name="com_facebook_internet_permission_error_message">L\'accesso tramite Web richiede
         l\'autorizzazione INTERNET</string>
-    <string name="com_facebook_tooltip_default">Novità! Il controllo è nelle tue mani: scegli quali informazioni condividere con le applicazioni.</string>
+    <string name="com_facebook_tooltip_default">Il controllo è nelle tue mani: scegli quali informazioni condividere con le app.</string>
     <string name="com_facebook_image_download_unknown_error">Errore imprevisto durante il
         caricamento di un\'immagine.</string>
     <string name="com_facebook_share_button_text">Condividi</string>
     <string name="com_facebook_send_button_text">Invia</string>
-    <string name="com_facebook_device_auth_instructions">Accedi a %@ nel tuo smartphone o computer e inserisci questo codice:</string>
+    <string name="com_facebook_device_auth_instructions">Accedi a &lt;b&gt;facebook.com/device&lt;/b&gt; nel tuo smartphone o computer e inserisci questo codice:</string>
 </resources>
diff --git a/facebook/src/main/res/values-ja/strings.xml b/facebook/src/main/res/values-ja/strings.xml
index e9895e50e..b068a63f1 100644
--- a/facebook/src/main/res/values-ja/strings.xml
+++ b/facebook/src/main/res/values-ja/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">いいね！済み</string>
     <string name="com_facebook_loginview_log_out_button">ログアウト</string>
     <string name="com_facebook_loginview_log_in_button">ログイン</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Facebookで続ける</string>
     <string name="com_facebook_loginview_log_in_button_long">Facebookでログイン</string>
     <string name="com_facebook_loginview_logged_in_as">次のユーザーとしてログイン中: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Facebookを使用してログイン中</string>
     <string name="com_facebook_loginview_log_out_action">ログアウト</string>
     <string name="com_facebook_loginview_cancel_action">キャンセル</string>
-    <string name="com_facebook_loading">読み込み中...</string>
+    <string name="com_facebook_loading">読み込み中&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">AndroidManifestエラー</string>
     <string name="com_facebook_internet_permission_error_message">WebViewログインにはINTERNET権限が必要です</string>
-    <string name="com_facebook_tooltip_default">新機能！アプリと共有する情報をコントロールできます。</string>
+    <string name="com_facebook_tooltip_default">アプリと共有する情報をコントロールできます。</string>
     <string name="com_facebook_image_download_unknown_error">画像のダウンロード中に予期しないエラーが発生しました。</string>
     <string name="com_facebook_share_button_text">シェア</string>
     <string name="com_facebook_send_button_text">送信</string>
-    <string name="com_facebook_device_auth_instructions">スマートフォンまたはコンピュータから%@にアクセスし、次のコードを入力してください。</string>
+    <string name="com_facebook_device_auth_instructions">スマートフォンまたはコンピュータから&lt;b&gt;facebook.com/device&lt;/b&gt;にアクセスし、次のコードを入力してください。</string>
 </resources>
diff --git a/facebook/src/main/res/values-kn/strings.xml b/facebook/src/main/res/values-kn/strings.xml
index e95d4b409..be80408f9 100644
--- a/facebook/src/main/res/values-kn/strings.xml
+++ b/facebook/src/main/res/values-kn/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">ಇಷ್ಟಪಟ್ಟಿದ್ದಾರೆ</string>
     <string name="com_facebook_loginview_log_out_button">ಲಾಗ್‌ ಔಟ್‌</string>
     <string name="com_facebook_loginview_log_in_button">ಲಾಗ್‌ ಇನ್‌</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Facebook ಅನ್ನು ಮುಂದುವರಿಸಿ</string>
     <string name="com_facebook_loginview_log_in_button_long">Facebook ಮೂಲಕ ಲಾಗ್‌ ಇನ್‌ ಮಾಡಿ</string>
     <string name="com_facebook_loginview_logged_in_as">ಇದರಂತೆ ಲಾಗಿನ್‌ ಮಾಡಲಾಗಿದೆ: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Facebook ಬಳಸಿಕೊಂಡು ಲಾಗಿನ್‌ ಮಾಡಲಾಗಿದೆ</string>
     <string name="com_facebook_loginview_log_out_action">ಲಾಗ್‌ ಔಟ್‌</string>
     <string name="com_facebook_loginview_cancel_action">ರದ್ದುಮಾಡು</string>
-    <string name="com_facebook_loading">ಲೋಡ್‌ ಆಗುತ್ತಿದೆ...</string>
+    <string name="com_facebook_loading">ಲೋಡ್‌ ಆಗುತ್ತಿದೆ&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">AndroidManifest ದೋಷ</string>
     <string name="com_facebook_internet_permission_error_message">WebView ಲಾಗಿನ್‌ಗೆ ಇಂಟರ್ನೆಟ್ ಅನುಮತಿಯ ಅಗತ್ಯವಿದೆ</string>
-    <string name="com_facebook_tooltip_default">ಹೊಸ! ನೀವು ನಿಯಂತ್ರಣದಲ್ಲಿರುವಿರಿ - ನೀವು ಅಪ್ಲಿಕೇಶನ್‌ಗಳನ್ನು ಬಳಸಿಕೊಂಡು ಹಂಚಿಕೊಳ್ಳಲು ಬಯಸುವ ವಿಷಯವನ್ನು ಆರಿಸಿ.</string>
+    <string name="com_facebook_tooltip_default">ನೀವು ನಿಯಂತ್ರಣದಲ್ಲಿರುವಿರಿ - ನೀವು ಅಪ್ಲಿಕೇಶನ್‌ಗಳನ್ನು ಬಳಸಿಕೊಂಡು ಹಂಚಿಕೊಳ್ಳಲು ಬಯಸುವ ವಿಷಯವನ್ನು ಆರಿಸಿ.</string>
     <string name="com_facebook_image_download_unknown_error">ಚಿತ್ರವನ್ನು ಡೌನ್‌ಲೋಡ್‌ ಮಾಡುವಾಗ ಅನಿರೀಕ್ಷಿತ ದೋಷ ಕಂಡುಬಂದಿದೆ.</string>
     <string name="com_facebook_share_button_text">ಹಂಚಿಕೊಳ್ಳಿ</string>
     <string name="com_facebook_send_button_text">ಕಳುಹಿಸಿ</string>
-    <string name="com_facebook_device_auth_instructions">ನಿಮ್ಮ ಸ್ಮಾರ್ಟ್‌ ಫೋನ್‌ ಅಥವಾ ಕಂಪ್ಯೂಟರ್‌ನಲ್ಲಿ %@ ಗೆ ಭೇಟಿ ನೀಡಿ ಮತ್ತು ಈ ಕೋಡ್‌ ಅನ್ನು ನಮೂದಿಸಿ:</string>
+    <string name="com_facebook_device_auth_instructions">ನಿಮ್ಮ ಸ್ಮಾರ್ಟ್‌ ಫೋನ್‌ ಅಥವಾ ಕಂಪ್ಯೂಟರ್‌ನಲ್ಲಿ &lt;b&gt;facebook.com/device&lt;/b&gt; ಗೆ ಭೇಟಿ ನೀಡಿ ಮತ್ತು ಈ ಕೋಡ್‌ ಅನ್ನು ನಮೂದಿಸಿ:</string>
 </resources>
diff --git a/facebook/src/main/res/values-ko/strings.xml b/facebook/src/main/res/values-ko/strings.xml
index 293f0239a..0535150e3 100644
--- a/facebook/src/main/res/values-ko/strings.xml
+++ b/facebook/src/main/res/values-ko/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">좋아요</string>
     <string name="com_facebook_loginview_log_out_button">로그아웃</string>
     <string name="com_facebook_loginview_log_in_button">로그인</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Facebook으로 계속</string>
     <string name="com_facebook_loginview_log_in_button_long">Facebook으로 로그인</string>
     <string name="com_facebook_loginview_logged_in_as">로그인할 이름: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Facebook 계정으로 로그인함</string>
     <string name="com_facebook_loginview_log_out_action">로그아웃</string>
     <string name="com_facebook_loginview_cancel_action">취소</string>
-    <string name="com_facebook_loading">읽어들이는 중...</string>
+    <string name="com_facebook_loading">읽어들이는 중&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">AndroidManifest 오류</string>
     <string name="com_facebook_internet_permission_error_message">WebView에 로그인하려면 인터넷 권한이 필요합니다</string>
-    <string name="com_facebook_tooltip_default">새로운 기능! 이제 앱과 어떤 정보를 공유할지 자유롭게 선택할 수 있습니다.</string>
+    <string name="com_facebook_tooltip_default">원하는 정보를 선택하여 앱에 공유할 수 있습니다.</string>
     <string name="com_facebook_image_download_unknown_error">이미지를 다운로드하는 중 예기치 않은 오류가 발생했습니다.</string>
     <string name="com_facebook_share_button_text">공유하기</string>
     <string name="com_facebook_send_button_text">보내기</string>
-    <string name="com_facebook_device_auth_instructions">스마트폰이나 컴퓨터에서 %@ 주소를 방문하여 다음 코드를 입력하세요.</string>
+    <string name="com_facebook_device_auth_instructions">스마트폰이나 컴퓨터에서 &lt;b&gt;facebook.com/device&lt;/b&gt; 주소를 방문하여 다음 코드를 입력하세요.</string>
 </resources>
diff --git a/facebook/src/main/res/values-ml/strings.xml b/facebook/src/main/res/values-ml/strings.xml
index 5a304a369..2772476b7 100644
--- a/facebook/src/main/res/values-ml/strings.xml
+++ b/facebook/src/main/res/values-ml/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">ലൈക്കുചെയ്‌‌തു</string>
     <string name="com_facebook_loginview_log_out_button">ലോഗ്ഔട്ട് ചെയ്യുക</string>
     <string name="com_facebook_loginview_log_in_button">ലോഗിൻ ചെയ്യുക</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Facebook ഉപയോഗിച്ച് തുടരുക</string>
     <string name="com_facebook_loginview_log_in_button_long">Facebook ഉപയോഗിച്ച് ലോഗിൻ ചെയ്യുക</string>
     <string name="com_facebook_loginview_logged_in_as">ഇതുപ്രകാരം ലോഗിൻ ചെയ്യുക: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Facebook ഉപയോഗിച്ച് ലോഗിൻ ചെയ്‌തു</string>
     <string name="com_facebook_loginview_log_out_action">ലോഗ്ഔട്ട് ചെയ്യുക</string>
     <string name="com_facebook_loginview_cancel_action">റദ്ദാക്കുക</string>
-    <string name="com_facebook_loading">ലോഡുചെയ്യുന്നു...</string>
+    <string name="com_facebook_loading">ലോഡുചെയ്യുന്നു&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">AndroidManifest പിശക്</string>
     <string name="com_facebook_internet_permission_error_message">WebView ലോഗിന് ഇന്റർനെറ്റ് അനുമതി ആവശ്യമാണ്</string>
-    <string name="com_facebook_tooltip_default">പുതിയത്! നിങ്ങൾ നിയന്ത്രണത്തിലാണ് - നിങ്ങൾക്ക് ആപ്ലിക്കേഷനുകളുമായി പങ്കിടേണ്ടതുണ്ടെങ്കിൽ തിരഞ്ഞെടുക്കുക.</string>
+    <string name="com_facebook_tooltip_default">നിങ്ങളുടെ നിയന്ത്രണത്തിലാണ് - നിങ്ങൾക്ക് ആപ്‌സുമായി ഏതെല്ലാം വിവരങ്ങൾ പങ്കിടണമെന്ന് തിരഞ്ഞെടുക്കുക.</string>
     <string name="com_facebook_image_download_unknown_error">ചിത്രം ഡൗൺലോഡുചെയ്യുന്നതിൽ അപ്രതീക്ഷിത പിശക് സംഭവിച്ചു.</string>
     <string name="com_facebook_share_button_text">പങ്കിടുക</string>
     <string name="com_facebook_send_button_text">അയയ്‌ക്കുക</string>
-    <string name="com_facebook_device_auth_instructions">നിങ്ങളുടെ സ്‌മാർട്ട്ഫോണിലെ അല്ലെങ്കിൽ കമ്പ്യൂട്ടറിലെ %@ സന്ദർശിച്ച് ഇനിപ്പറയുന്ന കോഡ് നൽകുക:</string>
+    <string name="com_facebook_device_auth_instructions">നിങ്ങളുടെ സ്‌മാർട്ട്ഫോണിലെ അല്ലെങ്കിൽ കമ്പ്യൂട്ടറിലെ &lt;b&gt;facebook.com/device&lt;/b&gt; സന്ദർശിച്ച് ഇനിപ്പറയുന്ന കോഡ് നൽകുക:</string>
 </resources>
diff --git a/facebook/src/main/res/values-mr/strings.xml b/facebook/src/main/res/values-mr/strings.xml
index 55383f985..643d38b5e 100644
--- a/facebook/src/main/res/values-mr/strings.xml
+++ b/facebook/src/main/res/values-mr/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">आवडलेले</string>
     <string name="com_facebook_loginview_log_out_button">लॉग आउट करा</string>
     <string name="com_facebook_loginview_log_in_button">लॉग इन करा</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Facebook सह चालू ठेवा</string>
     <string name="com_facebook_loginview_log_in_button_long">फेसबुकसह लॉग इन करा</string>
     <string name="com_facebook_loginview_logged_in_as">म्हणून लॉग इन केले: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">फेसबुक वापरून लॉग इन केले</string>
     <string name="com_facebook_loginview_log_out_action">लॉग आउट करा</string>
     <string name="com_facebook_loginview_cancel_action">रद्द करा</string>
-    <string name="com_facebook_loading">लोड होत आहे...</string>
+    <string name="com_facebook_loading">लोड होत आहे&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">AndroidManifest त्रुटी</string>
     <string name="com_facebook_internet_permission_error_message">वेबदृश्य लॉग इन आवश्यकता इंटरनेट परवानगी</string>
-    <string name="com_facebook_tooltip_default">नवीन! आपण नियंत्रणात आहात - आपण कोणती माहिती अनुप्रयोगांसह शेअर करू इच्छिता ते निवडा.</string>
+    <string name="com_facebook_tooltip_default">तुम्ही नियंत्रणात आहात - तुम्ही कोणती माहिती अॅपसह सामायिक करू इच्छिता ते निवडा.</string>
     <string name="com_facebook_image_download_unknown_error">प्रतिमा डाउनलोड करताना अनपेक्षित त्रुटी.</string>
     <string name="com_facebook_share_button_text">सामायिक करा</string>
     <string name="com_facebook_send_button_text">पाठवा</string>
-    <string name="com_facebook_device_auth_instructions">आपला स्‍मार्ट फोन किंवा संगणकावर %@ ला भेट द्या आणि हा कोड प्रविष्‍ट करा:</string>
+    <string name="com_facebook_device_auth_instructions">आपला स्‍मार्ट फोन किंवा संगणकावर &lt;b&gt;facebook.com/device&lt;/b&gt; ला भेट द्या आणि हा कोड प्रविष्‍ट करा:</string>
 </resources>
diff --git a/facebook/src/main/res/values-ms/strings.xml b/facebook/src/main/res/values-ms/strings.xml
index 2c5b536f2..7433bef50 100644
--- a/facebook/src/main/res/values-ms/strings.xml
+++ b/facebook/src/main/res/values-ms/strings.xml
@@ -24,15 +24,16 @@
     <string name="com_facebook_like_button_liked">Disukai</string>
     <string name="com_facebook_loginview_log_out_button">Log keluar</string>
     <string name="com_facebook_loginview_log_in_button">Log masuk</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Teruskan dengan Facebook</string>
     <string name="com_facebook_loginview_log_in_button_long">Log masuk dengan Facebook</string>
     <string name="com_facebook_loginview_logged_in_as">Dilog masuk sebagai: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Dilog masuk menggunakan Facebook</string>
     <string name="com_facebook_loginview_log_out_action">Log keluar</string>
     <string name="com_facebook_loginview_cancel_action">Batal</string>
-    <string name="com_facebook_loading">Memuatkan...</string>
+    <string name="com_facebook_loading">Memuatkan&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">Ralat AndroidManifest</string>
     <string name="com_facebook_internet_permission_error_message">Log masuk WebView memerlukan kebenaran INTERNET</string>
-    <string name="com_facebook_tooltip_default">Baru! Anda yang mengawal - pilih maklumat yang anda ingin kongsi dengan aplikasi.</string>
+    <string name="com_facebook_tooltip_default">Anda yang mengawal - pilih maklumat yang anda ingin kongsi dengan apl.</string>
     <string name="com_facebook_image_download_unknown_error">Ralat tidak dijangka ketika memuat turun imej.</string>
     <string name="com_facebook_share_button_text">Kongsi</string>
     <string name="com_facebook_send_button_text">Hantar</string>
diff --git a/facebook/src/main/res/values-nb/strings.xml b/facebook/src/main/res/values-nb/strings.xml
index e32f25ea7..d0f2af557 100644
--- a/facebook/src/main/res/values-nb/strings.xml
+++ b/facebook/src/main/res/values-nb/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">Likt</string>
     <string name="com_facebook_loginview_log_out_button">Logg ut</string>
     <string name="com_facebook_loginview_log_in_button">Logg inn</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Fortsett med Facebook</string>
     <string name="com_facebook_loginview_log_in_button_long">Logg inn med Facebook</string>
     <string name="com_facebook_loginview_logged_in_as">Logget inn som: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Logget inn med Facebook</string>
     <string name="com_facebook_loginview_log_out_action">Logg ut</string>
     <string name="com_facebook_loginview_cancel_action">Avbryt</string>
-    <string name="com_facebook_loading">Laster inn …</string>
+    <string name="com_facebook_loading">Laster inn &#8230;</string>
     <string name="com_facebook_internet_permission_error_title">AndroidManifest-feil</string>
     <string name="com_facebook_internet_permission_error_message">Webvisning-innlogging krever INTERNETT-tillatelse</string>
-    <string name="com_facebook_tooltip_default">Nyhet! Du bestemmer – velg hvilke opplysninger du vil dele med appene.</string>
+    <string name="com_facebook_tooltip_default">Du bestemmer – velg hvilke opplysninger du vil dele med appene.</string>
     <string name="com_facebook_image_download_unknown_error">Det oppstod en uventet feil ved nedlasting av et bilde.</string>
     <string name="com_facebook_share_button_text">Del</string>
     <string name="com_facebook_send_button_text">Send</string>
-    <string name="com_facebook_device_auth_instructions">Gå til %@ på smarttelefonen eller datamaskinen din, og oppgi denne koden:</string>
+    <string name="com_facebook_device_auth_instructions">Gå til &lt;b&gt;facebook.com/device&lt;/b&gt; på smarttelefonen eller datamaskinen din, og oppgi denne koden:</string>
 </resources>
diff --git a/facebook/src/main/res/values-nl/strings.xml b/facebook/src/main/res/values-nl/strings.xml
index 5bd975f03..a03027d4c 100644
--- a/facebook/src/main/res/values-nl/strings.xml
+++ b/facebook/src/main/res/values-nl/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">Vind ik leuk</string>
     <string name="com_facebook_loginview_log_out_button">Afmelden</string>
     <string name="com_facebook_loginview_log_in_button">Aanmelden</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Doorgaan met Facebook</string>
     <string name="com_facebook_loginview_log_in_button_long">Aanmelden met Facebook</string>
     <string name="com_facebook_loginview_logged_in_as">Aangemeld als: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Aangemeld via Facebook</string>
     <string name="com_facebook_loginview_log_out_action">Afmelden</string>
     <string name="com_facebook_loginview_cancel_action">Annuleren</string>
-    <string name="com_facebook_loading">Laden…</string>
+    <string name="com_facebook_loading">Laden&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">AndroidManifest Error</string>
     <string name="com_facebook_internet_permission_error_message">Voor aanmelding via webweergave is de toestemming INTERNET vereist</string>
-    <string name="com_facebook_tooltip_default">Nieuw! Jij hebt de controle. Kies welke informatie je met apps wilt delen.</string>
+    <string name="com_facebook_tooltip_default">Jij hebt de controle. Kies welke informatie je met apps wilt delen.</string>
     <string name="com_facebook_image_download_unknown_error">Onverwachte fout tijdens het downloaden van een afbeelding.</string>
     <string name="com_facebook_share_button_text">Delen</string>
     <string name="com_facebook_send_button_text">Verzenden</string>
-    <string name="com_facebook_device_auth_instructions">Ga op je smartphone of computer naar %@ en voer deze code in:</string>
+    <string name="com_facebook_device_auth_instructions">Ga op je smartphone of computer naar &lt;b&gt;facebook.com/device&lt;/b&gt; en voer deze code in:</string>
 </resources>
diff --git a/facebook/src/main/res/values-pa/strings.xml b/facebook/src/main/res/values-pa/strings.xml
index ed15cdab4..519bd4fb5 100644
--- a/facebook/src/main/res/values-pa/strings.xml
+++ b/facebook/src/main/res/values-pa/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">ਪਸੰਦ ਕੀਤਾ ਗਿਆ</string>
     <string name="com_facebook_loginview_log_out_button">ਲੌਗ ਆਉਟ ਕਰੋ</string>
     <string name="com_facebook_loginview_log_in_button">ਲੌਗ ਇਨ ਕਰੋ</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Facebook ਦੇ ਨਾਲ ਜਾਰੀ ਰੱਖੋ</string>
     <string name="com_facebook_loginview_log_in_button_long">Facebook ਦੇ ਨਾਲ ਲੌਗ ਇਨ ਕਰੋ</string>
     <string name="com_facebook_loginview_logged_in_as">ਇਸ ਵੱਜੋਂ ਲੌਗ ਇਨ ਕੀਤਾ ਗਿਆ: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Facebook ਦਾ ਉਪਯੋਗ ਕਰਕੇ ਲੌਗ ਇਨ ਕੀਤਾ ਗਿਆ</string>
     <string name="com_facebook_loginview_log_out_action">ਲੌਗ ਆਉਟ ਕਰੋ</string>
     <string name="com_facebook_loginview_cancel_action">ਰੱਦ ਕਰੋ</string>
-    <string name="com_facebook_loading">ਲੋਡ ਕਰ ਰਿਹਾ ਹੈ...</string>
+    <string name="com_facebook_loading">ਲੋਡ ਕਰ ਰਿਹਾ ਹੈ&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">AndroidManifest ਤਰੁੱਟੀ</string>
     <string name="com_facebook_internet_permission_error_message">WebView ਲੌਗ ਨੂੰ ਇੰਟਰਨੈੱਟ ਅਨੁਮਤੀ ਦੀ ਲੋੜ ਹੁੰਦੀ ਹੈ</string>
-    <string name="com_facebook_tooltip_default">ਨਵਾਂ! ਤੁ\ਸੀਂ ਨਿਯੰਤਰਣ ਵਿੱਚ ਹੋ - ਉਹ ਜਾਣਕਾਰੀ ਚੁਣੋ ਜੋ ਤੁਸੀਂ ਐਪਸ ਦੇ ਨਾਲ ਸਾਂਝੀ ਕਰਨੀ ਚਾਹੁੰਦੇ ਹੋ।</string>
+    <string name="com_facebook_tooltip_default">ਤੁ\ਸੀਂ ਨਿਯੰਤਰਣ ਵਿੱਚ ਹੋ - ਉਹ ਜਾਣਕਾਰੀ ਚੁਣੋ ਜੋ ਤੁਸੀਂ ਐਪਸ ਦੇ ਨਾਲ ਸਾਂਝੀ ਕਰਨੀ ਚਾਹੁੰਦੇ ਹੋ।</string>
     <string name="com_facebook_image_download_unknown_error">ਕਿਸੇ ਤਸਵੀਰ ਨੂੰ ਡਾਉਨਲੋਡ ਕਰਨ ਵੇਲੇ ਅਗਿਆਤ ਤਰੁੱਟੀ ਹੋ ਗਈ।</string>
     <string name="com_facebook_share_button_text">ਸਾਂਝਾ ਕਰੋ</string>
     <string name="com_facebook_send_button_text">ਭੇਜੋ</string>
-    <string name="com_facebook_device_auth_instructions">ਆਪਣੇ ਸਮਾਰਟਫ਼ੋਨ ਜਾਂ ਕੰਪਿਊਟਰ \'ਤੇ %@ ਵਿੱਚ ਜਾਓ ਅਤੇ ਇਸ ਕੋਡ ਨੂੰ ਦਾਖ਼ਲ ਕਰੋ:</string>
+    <string name="com_facebook_device_auth_instructions">ਆਪਣੇ ਸਮਾਰਟਫ਼ੋਨ ਜਾਂ ਕੰਪਿਊਟਰ \'ਤੇ &lt;b&gt;facebook.com/device&lt;/b&gt; ਵਿੱਚ ਜਾਓ ਅਤੇ ਇਸ ਕੋਡ ਨੂੰ ਦਾਖ਼ਲ ਕਰੋ:</string>
 </resources>
diff --git a/facebook/src/main/res/values-pl/strings.xml b/facebook/src/main/res/values-pl/strings.xml
index 5ee1ccbdf..95a720a1d 100644
--- a/facebook/src/main/res/values-pl/strings.xml
+++ b/facebook/src/main/res/values-pl/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">Polubione</string>
     <string name="com_facebook_loginview_log_out_button">Wyloguj się</string>
     <string name="com_facebook_loginview_log_in_button">Zaloguj się</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Kontynuuj za pośrednictwem Facebooka</string>
     <string name="com_facebook_loginview_log_in_button_long">Zaloguj się przez Facebooka</string>
     <string name="com_facebook_loginview_logged_in_as">Zalogowano jako: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Zalogowano przez Facebooka</string>
     <string name="com_facebook_loginview_log_out_action">Wyloguj się</string>
     <string name="com_facebook_loginview_cancel_action">Anuluj</string>
-    <string name="com_facebook_loading">Ładowanie...</string>
+    <string name="com_facebook_loading">Ładowanie&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">AndroidManifest Error</string>
     <string name="com_facebook_internet_permission_error_message">Logowanie się do sieci wymaga zezwolenia na dostęp do INTERNETU</string>
-    <string name="com_facebook_tooltip_default">Nowość! Masz pełną kontrolę – określ, jakie informacje chcesz udostępniać aplikacjom.</string>
+    <string name="com_facebook_tooltip_default">Masz pełną kontrolę – określ, jakie informacje chcesz udostępniać aplikacjom.</string>
     <string name="com_facebook_image_download_unknown_error">Nieoczekiwany błąd podczas pobierania obrazu.</string>
     <string name="com_facebook_share_button_text">Udostępnij</string>
     <string name="com_facebook_send_button_text">Wyślij</string>
-    <string name="com_facebook_device_auth_instructions">Przejdź do %@ na smartfonie lub komputerze i wprowadź ten kod:</string>
+    <string name="com_facebook_device_auth_instructions">Przejdź do &lt;b&gt;facebook.com/device&lt;/b&gt; na smartfonie lub komputerze i wprowadź ten kod:</string>
 </resources>
diff --git a/facebook/src/main/res/values-pt-rPT/strings.xml b/facebook/src/main/res/values-pt-rPT/strings.xml
index 99a240396..a0443994a 100644
--- a/facebook/src/main/res/values-pt-rPT/strings.xml
+++ b/facebook/src/main/res/values-pt-rPT/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">Gostei</string>
     <string name="com_facebook_loginview_log_out_button">Terminar sessão</string>
     <string name="com_facebook_loginview_log_in_button">Iniciar sessão</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Continuar com o Facebook</string>
     <string name="com_facebook_loginview_log_in_button_long">Iniciar sessão com o Facebook</string>
     <string name="com_facebook_loginview_logged_in_as">Com sessão iniciada como: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Com sessão iniciada através do Facebook</string>
     <string name="com_facebook_loginview_log_out_action">Terminar sessão</string>
     <string name="com_facebook_loginview_cancel_action">Cancelar</string>
-    <string name="com_facebook_loading">A carregar...</string>
+    <string name="com_facebook_loading">A carregar&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">Erro AndroidManifest</string>
     <string name="com_facebook_internet_permission_error_message">O início de sessão WebView necessita de permissão para aceder à INTERNET</string>
-    <string name="com_facebook_tooltip_default">Novidade! Tens o controlo: escolhe a informação que pretendes partilhar com as aplicações.</string>
+    <string name="com_facebook_tooltip_default">Tens o controlo: escolhe a informação que pretendes partilhar com as apps.</string>
     <string name="com_facebook_image_download_unknown_error">Ocorreu um erro inesperado ao descarregar uma imagem.</string>
     <string name="com_facebook_share_button_text">Partilhar</string>
     <string name="com_facebook_send_button_text">Enviar</string>
-    <string name="com_facebook_device_auth_instructions">Visita %@ no teu smartphone ou computador e insere este código:</string>
+    <string name="com_facebook_device_auth_instructions">Visita &lt;b&gt;facebook.com/device&lt;/b&gt; no teu smartphone ou computador e insere este código:</string>
 </resources>
diff --git a/facebook/src/main/res/values-pt/strings.xml b/facebook/src/main/res/values-pt/strings.xml
index 0c4c4902d..61b59ecc2 100644
--- a/facebook/src/main/res/values-pt/strings.xml
+++ b/facebook/src/main/res/values-pt/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">Curtiu</string>
     <string name="com_facebook_loginview_log_out_button">Sair</string>
     <string name="com_facebook_loginview_log_in_button">Entrar</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Continuar com o Facebook</string>
     <string name="com_facebook_loginview_log_in_button_long">Entrar com o Facebook</string>
     <string name="com_facebook_loginview_logged_in_as">Conectado como: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Você entrou usando o Facebook</string>
     <string name="com_facebook_loginview_log_out_action">Sair</string>
     <string name="com_facebook_loginview_cancel_action">Cancelar</string>
-    <string name="com_facebook_loading">Carregando...</string>
+    <string name="com_facebook_loading">Carregando&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">Erro no AndroidManifest</string>
     <string name="com_facebook_internet_permission_error_message">A permissão de INTERNET é necessária para fazer o login WebView</string>
-    <string name="com_facebook_tooltip_default">Novidade! Você está no controle - escolha quais informações quer compartilhar com os aplicativos.</string>
+    <string name="com_facebook_tooltip_default">Você é quem controla — escolha quais informações você quer compartilhar com os aplicativos.</string>
     <string name="com_facebook_image_download_unknown_error">Erro inesperado ao baixar uma imagem.</string>
     <string name="com_facebook_share_button_text">Compartilhar</string>
     <string name="com_facebook_send_button_text">Envio</string>
-    <string name="com_facebook_device_auth_instructions">Acesse %@ no seu smartphone ou computador e insira este código:</string>
+    <string name="com_facebook_device_auth_instructions">Acesse &lt;b&gt;facebook.com/device&lt;/b&gt; no seu smartphone ou computador e insira este código:</string>
 </resources>
diff --git a/facebook/src/main/res/values-ru/strings.xml b/facebook/src/main/res/values-ru/strings.xml
index 9b979802c..29b933ed4 100644
--- a/facebook/src/main/res/values-ru/strings.xml
+++ b/facebook/src/main/res/values-ru/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">Понравилось</string>
     <string name="com_facebook_loginview_log_out_button">Выход</string>
     <string name="com_facebook_loginview_log_in_button">Вход</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Продолжить с Facebook</string>
     <string name="com_facebook_loginview_log_in_button_long">Вход через Facebook</string>
     <string name="com_facebook_loginview_logged_in_as">Вы вошли как: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Выполнен вход с помощью Facebook</string>
     <string name="com_facebook_loginview_log_out_action">Выход</string>
     <string name="com_facebook_loginview_cancel_action">Отменить</string>
-    <string name="com_facebook_loading">Загрузка...</string>
+    <string name="com_facebook_loading">Загрузка&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">Ошибка AndroidManifest</string>
     <string name="com_facebook_internet_permission_error_message">Для входа в WebView необходимо разрешение INTERNET</string>
-    <string name="com_facebook_tooltip_default">Новинка! У вас все под контролем — выбирайте, какой информацией вы хотите поделиться с приложениями.</string>
+    <string name="com_facebook_tooltip_default">Вы сами выбираете, какой информацией поделиться с приложениями.</string>
     <string name="com_facebook_image_download_unknown_error">При загрузке изображения возникла неожиданная ошибка.</string>
     <string name="com_facebook_share_button_text">Поделиться</string>
     <string name="com_facebook_send_button_text">Отправить</string>
-    <string name="com_facebook_device_auth_instructions">Откройте «%@» на своем смартфофне или компьютере и введите этот код:</string>
+    <string name="com_facebook_device_auth_instructions">Откройте «&lt;b&gt;facebook.com/device&lt;/b&gt;» на своем смартфофне или компьютере и введите этот код:</string>
 </resources>
diff --git a/facebook/src/main/res/values-sk/strings.xml b/facebook/src/main/res/values-sk/strings.xml
index 1924543a7..ac0fdad44 100644
--- a/facebook/src/main/res/values-sk/strings.xml
+++ b/facebook/src/main/res/values-sk/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">Páči sa mi to</string>
     <string name="com_facebook_loginview_log_out_button">Odhlásiť sa</string>
     <string name="com_facebook_loginview_log_in_button">Prihlásiť sa</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Pokračovať s Facebookom</string>
     <string name="com_facebook_loginview_log_in_button_long">Prihlásiť sa cez Facebook</string>
     <string name="com_facebook_loginview_logged_in_as">Prihlásený ako: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Prihlásený cez Facebook</string>
     <string name="com_facebook_loginview_log_out_action">Odhlásiť sa</string>
     <string name="com_facebook_loginview_cancel_action">Zrušiť</string>
-    <string name="com_facebook_loading">Načítava sa...</string>
+    <string name="com_facebook_loading">Načítava sa&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">Chyba súboru AndroidManifest</string>
     <string name="com_facebook_internet_permission_error_message">Na prihlásenie sa v rozhraní WebView sa vyžaduje povolenie pre INTERNET</string>
-    <string name="com_facebook_tooltip_default">Novinka! Máte to pod kontrolou: vyberte, ktoré informácie chcete zdieľať s aplikáciami.</string>
+    <string name="com_facebook_tooltip_default">Máte to pod kontrolou: vyberte, ktoré informácie chcete zdieľať s aplikáciami.</string>
     <string name="com_facebook_image_download_unknown_error">Pri sťahovaní obrázka sa vyskytla neočakávaná chyba.</string>
     <string name="com_facebook_share_button_text">Zdieľať</string>
     <string name="com_facebook_send_button_text">Odoslať</string>
-    <string name="com_facebook_device_auth_instructions">Navštívte %@ v smartfóne alebo počítači a zadajte tento kód:</string>
+    <string name="com_facebook_device_auth_instructions">Navštívte &lt;b&gt;facebook.com/device&lt;/b&gt; v smartfóne alebo počítači a zadajte tento kód:</string>
 </resources>
diff --git a/facebook/src/main/res/values-sv/strings.xml b/facebook/src/main/res/values-sv/strings.xml
index 2d83109bf..a1f318b39 100644
--- a/facebook/src/main/res/values-sv/strings.xml
+++ b/facebook/src/main/res/values-sv/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">Gillade</string>
     <string name="com_facebook_loginview_log_out_button">Logga ut</string>
     <string name="com_facebook_loginview_log_in_button">Logga in</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Fortsätt med Facebook</string>
     <string name="com_facebook_loginview_log_in_button_long">Logga in med Facebook</string>
     <string name="com_facebook_loginview_logged_in_as">Inloggad som: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Inloggad med Facebook</string>
     <string name="com_facebook_loginview_log_out_action">Logga ut</string>
     <string name="com_facebook_loginview_cancel_action">Avbryt</string>
-    <string name="com_facebook_loading">Laddar ...</string>
+    <string name="com_facebook_loading">Laddar &#8230;</string>
     <string name="com_facebook_internet_permission_error_title">AndroidManifest-fel</string>
     <string name="com_facebook_internet_permission_error_message">Webbinloggning kräver internetbehörighet</string>
-    <string name="com_facebook_tooltip_default">Nyhet! Du bestämmer – välj vilken info du vill dela med appar.</string>
+    <string name="com_facebook_tooltip_default">Du bestämmer – välj vilken info du vill dela med appar.</string>
     <string name="com_facebook_image_download_unknown_error">Oväntat fel vid hämtning av en bild.</string>
     <string name="com_facebook_share_button_text">Dela</string>
     <string name="com_facebook_send_button_text">Skicka</string>
-    <string name="com_facebook_device_auth_instructions">Besök %@ på din smartphone eller dator och ange den här koden:</string>
+    <string name="com_facebook_device_auth_instructions">Besök &lt;b&gt;facebook.com/device&lt;/b&gt; på din smartphone eller dator och ange den här koden:</string>
 </resources>
diff --git a/facebook/src/main/res/values-ta/strings.xml b/facebook/src/main/res/values-ta/strings.xml
index e15ba007d..95cb309f1 100644
--- a/facebook/src/main/res/values-ta/strings.xml
+++ b/facebook/src/main/res/values-ta/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">விரும்பப்பட்டது</string>
     <string name="com_facebook_loginview_log_out_button">வெளியேறு</string>
     <string name="com_facebook_loginview_log_in_button">உள்நுழைவு</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Facebook இல் தொடரவும்</string>
     <string name="com_facebook_loginview_log_in_button_long">Facebook மூலம் உள்நுழையவும்</string>
     <string name="com_facebook_loginview_logged_in_as">உள்நுழைந்துள்ள கணக்கு: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Facebook மூலம் உள்நுழையப்பட்டுள்ளது</string>
     <string name="com_facebook_loginview_log_out_action">வெளியேறு</string>
     <string name="com_facebook_loginview_cancel_action">ரத்துசெய்</string>
-    <string name="com_facebook_loading">ஏற்றுகிறது...</string>
+    <string name="com_facebook_loading">ஏற்றுகிறது&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">AndroidManifest பிழை</string>
     <string name="com_facebook_internet_permission_error_message">WebView இல் உள்நுழைய இணைய அனுமதி தேவை</string>
-    <string name="com_facebook_tooltip_default">புதிது! உங்கள் கட்டுப்பாட்டில் இருப்பதால், பயன்பாடுகளுடன் பகிர வேண்டிய தகவலைத் தேர்வுசெய்யவும்.</string>
+    <string name="com_facebook_tooltip_default">பயன்பாடுகளில் எந்தத் தகவலைப் பகிர விரும்புகிறீர்கள் என்பதை நீங்கள் கட்டுப்படுத்தலாம்.</string>
     <string name="com_facebook_image_download_unknown_error">படத்தைப் பதிவிறக்கும் போது பிழை ஏற்பட்டது.</string>
     <string name="com_facebook_share_button_text">பகிர்</string>
     <string name="com_facebook_send_button_text">அனுப்பு</string>
-    <string name="com_facebook_device_auth_instructions">உங்கள் ஸ்மார்ட்ஃபோன் அல்லது கணினியில் %@ ஐப் பார்வையிட்டு, பின்வரும் குறியீட்டை உள்ளிடவும்:</string>
+    <string name="com_facebook_device_auth_instructions">உங்கள் ஸ்மார்ட்ஃபோன் அல்லது கணினியில் &lt;b&gt;facebook.com/device&lt;/b&gt; ஐப் பார்வையிட்டு, பின்வரும் குறியீட்டை உள்ளிடவும்:</string>
 </resources>
diff --git a/facebook/src/main/res/values-te/strings.xml b/facebook/src/main/res/values-te/strings.xml
index d31dff43f..6c60b5476 100644
--- a/facebook/src/main/res/values-te/strings.xml
+++ b/facebook/src/main/res/values-te/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">ఇష్టంగా గుర్తు పెట్టబడింది</string>
     <string name="com_facebook_loginview_log_out_button">లాగ్ అవుట్ చేయి</string>
     <string name="com_facebook_loginview_log_in_button">లాగిన్ చేయి</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Facebookతో కొనసాగించండి</string>
     <string name="com_facebook_loginview_log_in_button_long">Facebookతో లాగిన్ చేయి</string>
     <string name="com_facebook_loginview_logged_in_as">ఇలా లాగిన్ చేసారు: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Facebook ఉపయోగించి లాగిన్ చేసారు</string>
     <string name="com_facebook_loginview_log_out_action">లాగ్ అవుట్ చేయి</string>
     <string name="com_facebook_loginview_cancel_action">రద్దు చేయి</string>
-    <string name="com_facebook_loading">లోడ్ చేస్తోంది...</string>
+    <string name="com_facebook_loading">లోడ్ చేస్తోంది&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">AndroidManifest లోపం</string>
     <string name="com_facebook_internet_permission_error_message">వెబ్ వీక్షణ లాగిన్‌కు ఇంటర్నెట్ అనుమతి అవసరం</string>
-    <string name="com_facebook_tooltip_default">సరికొత్తది! మీకు నియంత్రణ ఉంది - మీరు అప్లికేషన్‌లతో ఏ సమాచారాన్ని భాగస్వామ్యం చేయాలనుకుంటున్నారో ఎంచుకోండి.</string>
+    <string name="com_facebook_tooltip_default">మీకు నియంత్రణ ఉంది - మీరు అనువర్తనాలతో భాగస్వామ్యం చేయాలనుకునే సమాచారాన్ని ఎంచుకోండి.</string>
     <string name="com_facebook_image_download_unknown_error">చిత్రాన్ని డౌన్‌లోడ్ చేస్తున్నప్పుడు ఊహించని లోపం ఏర్పడింది.</string>
     <string name="com_facebook_share_button_text">భాగస్వామ్యం చేయండి</string>
     <string name="com_facebook_send_button_text">పంపు</string>
-    <string name="com_facebook_device_auth_instructions">మీ స్మార్ట్‌ఫోన్ లేదా కంప్యూటర్‌లో %@ సందర్శించి, ఈ కోడ్‌ను నమోదు చేయండి:</string>
+    <string name="com_facebook_device_auth_instructions">మీ స్మార్ట్‌ఫోన్ లేదా కంప్యూటర్‌లో &lt;b&gt;facebook.com/device&lt;/b&gt; సందర్శించి, ఈ కోడ్‌ను నమోదు చేయండి:</string>
 </resources>
diff --git a/facebook/src/main/res/values-th/strings.xml b/facebook/src/main/res/values-th/strings.xml
index 3ae8b30fa..7b5f978a4 100644
--- a/facebook/src/main/res/values-th/strings.xml
+++ b/facebook/src/main/res/values-th/strings.xml
@@ -24,18 +24,19 @@
     <string name="com_facebook_like_button_liked">ถูกใจแล้ว</string>
     <string name="com_facebook_loginview_log_out_button">ออกจากระบบ</string>
     <string name="com_facebook_loginview_log_in_button">เข้าสู่ระบบ</string>
+    <string name="com_facebook_loginview_log_in_button_continue">ดำเนินการต่อด้วย Facebook</string>
     <string name="com_facebook_loginview_log_in_button_long">เข้าสู่ระบบด้วย Facebook</string>
     <string name="com_facebook_loginview_logged_in_as">เข้าสู่ระบบในชื่อ: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">เข้าสู่ระบบโดยใช้ Facebook</string>
     <string name="com_facebook_loginview_log_out_action">ออกจากระบบ</string>
     <string name="com_facebook_loginview_cancel_action">ยกเลิก</string>
-    <string name="com_facebook_loading">กำลังโหลด...</string>
+    <string name="com_facebook_loading">กำลังโหลด&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">ข้อผิดพลาดของ AndroidManifest</string>
     <string name="com_facebook_internet_permission_error_message">การเข้าสู่ระบบ WebView จำเป็นต้องได้รับอนุญาตจากอินเทอร์เน็ต</string>
-    <string name="com_facebook_tooltip_default">ใหม่! คุณเป็นฝ่ายควบคุม โปรดเลือกข้อมูลที่คุณต้องการแชร์ด้วยแอพ</string>
+    <string name="com_facebook_tooltip_default">คุณเป็นฝ่ายควบคุม โปรดเลือกข้อมูลที่คุณต้องการแชร์ด้วยแอพ</string>
     <string name="com_facebook_image_download_unknown_error">เกิดข้อผิดพลาดที่ไม่คาดคิดขณะดาวน์โหลดรูปภาพ</string>
     <string name="com_facebook_share_button_text">แชร์</string>
     <string name="com_facebook_send_button_text">ส่ง</string>
-    <string name="com_facebook_device_auth_instructions">ไปที่ %@ ในสมาร์ทโฟนหรือคอมพิวเตอร์ของคุณ แล้วป้อนรหัสนี้:</string>
+    <string name="com_facebook_device_auth_instructions">ไปที่ &lt;b&gt;facebook.com/device&lt;/b&gt; ในสมาร์ทโฟนหรือคอมพิวเตอร์ของคุณ แล้วป้อนรหัสนี้:</string>
 
 </resources>
diff --git a/facebook/src/main/res/values-tl/strings.xml b/facebook/src/main/res/values-tl/strings.xml
index 478329b39..79410dd0f 100644
--- a/facebook/src/main/res/values-tl/strings.xml
+++ b/facebook/src/main/res/values-tl/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">Nagustuhan</string>
     <string name="com_facebook_loginview_log_out_button">Mag-log out</string>
     <string name="com_facebook_loginview_log_in_button">Mag-log in</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Magatuloy sa Facebook</string>
     <string name="com_facebook_loginview_log_in_button_long">Mag-log in sa pamamagitan ng Facebook</string>
     <string name="com_facebook_loginview_logged_in_as">Naka-log in bilang si: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Naka-log in gamit ang Facebook</string>
     <string name="com_facebook_loginview_log_out_action">Mag-log out</string>
     <string name="com_facebook_loginview_cancel_action">Kanselahin</string>
-    <string name="com_facebook_loading">Naglo-load...</string>
+    <string name="com_facebook_loading">Naglo-load&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">Error na AndroidManifest</string>
     <string name="com_facebook_internet_permission_error_message">Ang pag-log in sa Web ay nangangailangan ng pahintulot sa INTERNET</string>
-    <string name="com_facebook_tooltip_default">Bago! Ikaw ang may kontrol - piliin kung anong impormasyon ang gusto mong ibahagi sa mga app.</string>
+    <string name="com_facebook_tooltip_default">Ikaw ang may kontrol - piliin kung anong impormasyon ang gusto mong ibahagi sa mga app.</string>
     <string name="com_facebook_image_download_unknown_error">Hindi inaasahang error habang dina-download ang imahe.</string>
     <string name="com_facebook_share_button_text">Ibahagi</string>
     <string name="com_facebook_send_button_text">Ipadala</string>
-    <string name="com_facebook_device_auth_instructions">Puntahan ang %@ sa iyong smartphone o computer at ilagay ang code na ito:</string>
+    <string name="com_facebook_device_auth_instructions">Puntahan ang &lt;b&gt;facebook.com/device&lt;/b&gt; sa iyong smartphone o computer at ilagay ang code na ito:</string>
 </resources>
diff --git a/facebook/src/main/res/values-tr/strings.xml b/facebook/src/main/res/values-tr/strings.xml
index 2aa1bdce9..2b29091cf 100644
--- a/facebook/src/main/res/values-tr/strings.xml
+++ b/facebook/src/main/res/values-tr/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">Beğendin</string>
     <string name="com_facebook_loginview_log_out_button">Çıkış yap</string>
     <string name="com_facebook_loginview_log_in_button">Giriş yap</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Facebook ile Devam Et</string>
     <string name="com_facebook_loginview_log_in_button_long">Facebook ile giriş yap</string>
     <string name="com_facebook_loginview_logged_in_as">Giriş yapan: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Facebook ile giriş yapıldı</string>
     <string name="com_facebook_loginview_log_out_action">Çıkış yap</string>
     <string name="com_facebook_loginview_cancel_action">İptal</string>
-    <string name="com_facebook_loading">Yükleniyor...</string>
+    <string name="com_facebook_loading">Yükleniyor&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">AndroidManifest Hatası</string>
     <string name="com_facebook_internet_permission_error_message">WebView girişi için İNTERNET izni gerekir</string>
-    <string name="com_facebook_tooltip_default">Yeni! Kontrol sende. Uygulamalarla paylaşmak istediğin bilgileri seç.</string>
+    <string name="com_facebook_tooltip_default">Kontrol sende. Uygulamalarla paylaşmak istediğin bilgileri seç.</string>
     <string name="com_facebook_image_download_unknown_error">Görsel indirilirken beklenmeyen hata.</string>
     <string name="com_facebook_share_button_text">Paylaş</string>
     <string name="com_facebook_send_button_text">Gönder</string>
-    <string name="com_facebook_device_auth_instructions">Akıllı telefonunda veya bilgisayarında %@ adresine git ve bu kodu gir:</string>
+    <string name="com_facebook_device_auth_instructions">Akıllı telefonunda veya bilgisayarında &lt;b&gt;facebook.com/device&lt;/b&gt; adresine git ve bu kodu gir:</string>
 </resources>
diff --git a/facebook/src/main/res/values-vi/strings.xml b/facebook/src/main/res/values-vi/strings.xml
index 35cedacae..841bfc838 100644
--- a/facebook/src/main/res/values-vi/strings.xml
+++ b/facebook/src/main/res/values-vi/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">Đã thích</string>
     <string name="com_facebook_loginview_log_out_button">Đăng xuất</string>
     <string name="com_facebook_loginview_log_in_button">Đăng nhập</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Tiếp tục với Facebook</string>
     <string name="com_facebook_loginview_log_in_button_long">Đăng nhập bằng Facebook</string>
     <string name="com_facebook_loginview_logged_in_as">Đã đăng nhập với tư cách là: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Đã đăng nhập bằng Facebook</string>
     <string name="com_facebook_loginview_log_out_action">Đăng xuất</string>
     <string name="com_facebook_loginview_cancel_action">Hủy</string>
-    <string name="com_facebook_loading">Đang tải...</string>
+    <string name="com_facebook_loading">Đang tải&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">Lỗi AndroidManifest</string>
     <string name="com_facebook_internet_permission_error_message">Đăng nhập WebView yêu cầu INTERNET cho phép</string>
-    <string name="com_facebook_tooltip_default">Mới! Bạn đang có quyền kiểm soát - hãy chọn thông tin bạn muốn chia sẻ với các ứng dụng.</string>
+    <string name="com_facebook_tooltip_default">Bạn đang có quyền kiểm soát - hãy chọn thông tin bạn muốn chia sẻ với ứng dụng.</string>
     <string name="com_facebook_image_download_unknown_error">Lỗi bất ngờ khi tải ảnh xuống.</string>
     <string name="com_facebook_share_button_text">Chia sẻ</string>
     <string name="com_facebook_send_button_text">Gửi</string>
-    <string name="com_facebook_device_auth_instructions">Truy cập %@ trên điện thoại thông minh hoặc máy tính và nhập mã sau:</string>
+    <string name="com_facebook_device_auth_instructions">Truy cập &lt;b&gt;facebook.com/device&lt;/b&gt; trên điện thoại thông minh hoặc máy tính và nhập mã sau:</string>
 </resources>
diff --git a/facebook/src/main/res/values-zh-rCN/strings.xml b/facebook/src/main/res/values-zh-rCN/strings.xml
index 708e677ab..eb9a0750e 100644
--- a/facebook/src/main/res/values-zh-rCN/strings.xml
+++ b/facebook/src/main/res/values-zh-rCN/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">赞了</string>
     <string name="com_facebook_loginview_log_out_button">退出</string>
     <string name="com_facebook_loginview_log_in_button">登录</string>
+    <string name="com_facebook_loginview_log_in_button_continue">继续使用 Facebook 登录</string>
     <string name="com_facebook_loginview_log_in_button_long">使用 Facebook 登录</string>
     <string name="com_facebook_loginview_logged_in_as">已以%1$s 身份登录</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">已使用 Facebook 登录</string>
     <string name="com_facebook_loginview_log_out_action">退出</string>
     <string name="com_facebook_loginview_cancel_action">取消</string>
-    <string name="com_facebook_loading">正在加载...</string>
+    <string name="com_facebook_loading">正在加载&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">AndroidManifest 错误</string>
     <string name="com_facebook_internet_permission_error_message">Web 登录需要互联网许可</string>
-    <string name="com_facebook_tooltip_default">新增功能！一切任您掌控 — 选择您想通过应用分享的信息。</string>
+    <string name="com_facebook_tooltip_default">一切任您掌控 — 选择您想通过应用分享的信息。</string>
     <string name="com_facebook_image_download_unknown_error">下载图片时出现意外错误。</string>
     <string name="com_facebook_share_button_text">分享</string>
     <string name="com_facebook_send_button_text">发送</string>
-    <string name="com_facebook_device_auth_instructions">请用智能手机或电脑访问 %@，然后输入验证码：</string>
+    <string name="com_facebook_device_auth_instructions">请用智能手机或电脑访问 &lt;b&gt;facebook.com/device&lt;/b&gt;，然后输入验证码：</string>
 </resources>
diff --git a/facebook/src/main/res/values-zh-rHK/strings.xml b/facebook/src/main/res/values-zh-rHK/strings.xml
index 857bbdd69..8df922d38 100644
--- a/facebook/src/main/res/values-zh-rHK/strings.xml
+++ b/facebook/src/main/res/values-zh-rHK/strings.xml
@@ -24,6 +24,7 @@
     <string name="com_facebook_like_button_liked">已讚好</string>
     <string name="com_facebook_loginview_log_out_button">登出</string>
     <string name="com_facebook_loginview_log_in_button">登入</string>
+    <string name="com_facebook_loginview_log_in_button_continue">繼續使用 Facebook</string>
     <string name="com_facebook_loginview_log_in_button_long">使用 Facebook 登入</string>
     <string name="com_facebook_loginview_logged_in_as">以以下身分登入：%1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">使用 Facebook 登入</string>
@@ -32,9 +33,9 @@
     <string name="com_facebook_loading">載入中⋯</string>
     <string name="com_facebook_internet_permission_error_title">AndroidManifest 錯誤</string>
     <string name="com_facebook_internet_permission_error_message">WebView 登入需有 INTERNET 權限</string>
-    <string name="com_facebook_tooltip_default">最新消息！控制權在您 - 選擇您要與應用程式分享的資訊。</string>
+    <string name="com_facebook_tooltip_default">控制權在您 - 選擇您要與應用程式分享的資訊。</string>
     <string name="com_facebook_image_download_unknown_error">下載圖像時發生預期外的錯誤。</string>
     <string name="com_facebook_share_button_text">分享</string>
     <string name="com_facebook_send_button_text">傳送</string>
-    <string name="com_facebook_device_auth_instructions">在智能手機或電腦前往 %@ 並輸入此代碼：</string>
+    <string name="com_facebook_device_auth_instructions">在智能手機或電腦前往 &lt;b&gt;facebook.com/device&lt;/b&gt; 並輸入此代碼：</string>
 </resources>
diff --git a/facebook/src/main/res/values-zh-rTW/strings.xml b/facebook/src/main/res/values-zh-rTW/strings.xml
index dc798ed98..1414f7246 100644
--- a/facebook/src/main/res/values-zh-rTW/strings.xml
+++ b/facebook/src/main/res/values-zh-rTW/strings.xml
@@ -24,17 +24,18 @@
     <string name="com_facebook_like_button_liked">說讚</string>
     <string name="com_facebook_loginview_log_out_button">登出</string>
     <string name="com_facebook_loginview_log_in_button">登入</string>
+    <string name="com_facebook_loginview_log_in_button_continue">繼續使用 Facebook 帳號</string>
     <string name="com_facebook_loginview_log_in_button_long">使用 Facebook 登入</string>
     <string name="com_facebook_loginview_logged_in_as">使用下列身分登入：%1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">已使用 Facebook 登入</string>
     <string name="com_facebook_loginview_log_out_action">登出</string>
     <string name="com_facebook_loginview_cancel_action">取消</string>
-    <string name="com_facebook_loading">正在載入…</string>
+    <string name="com_facebook_loading">正在載入&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">AndroidManifest 錯誤</string>
     <string name="com_facebook_internet_permission_error_message">WebView 登入需要「網際網路」授權</string>
-    <string name="com_facebook_tooltip_default">新消息！您已成功登入，請選擇要與應用程式分享的資訊。</string>
+    <string name="com_facebook_tooltip_default">您可以全盤掌控！選擇您想和應用程式分享的資訊內容。</string>
     <string name="com_facebook_image_download_unknown_error">下載圖像時發生非預期的錯誤。</string>
     <string name="com_facebook_share_button_text">分享</string>
     <string name="com_facebook_send_button_text">傳送</string>
-    <string name="com_facebook_device_auth_instructions">使用您的智慧型手機或電腦前往 %@，然後輸入此代碼：</string>
+    <string name="com_facebook_device_auth_instructions">使用您的智慧型手機或電腦前往 &lt;b&gt;facebook.com/device&lt;/b&gt;，然後輸入此代碼：</string>
 </resources>
diff --git a/facebook/src/main/res/values/dimens.xml b/facebook/src/main/res/values/dimens.xml
index 5ae0ed683..0739a3225 100644
--- a/facebook/src/main/res/values/dimens.xml
+++ b/facebook/src/main/res/values/dimens.xml
@@ -25,4 +25,5 @@
     one does not stick out-->
     <dimen name="com_facebook_auth_dialog_corner_radius_oversized">4dp</dimen>
     <dimen name="com_facebook_button_corner_radius">2dp</dimen>
+    <dimen name="com_facebook_button_login_corner_radius">3dp</dimen>
 </resources>
diff --git a/facebook/src/main/res/values/strings.xml b/facebook/src/main/res/values/strings.xml
index 2c7d8a066..6ca184440 100644
--- a/facebook/src/main/res/values/strings.xml
+++ b/facebook/src/main/res/values/strings.xml
@@ -25,16 +25,25 @@
     <string name="com_facebook_loginview_log_out_button">Log out</string>
     <string name="com_facebook_loginview_log_in_button">Log in</string>
     <string name="com_facebook_loginview_log_in_button_long">Log in with Facebook</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Continue with Facebook</string>
     <string name="com_facebook_loginview_logged_in_as">Logged in as: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Logged in using Facebook</string>
     <string name="com_facebook_loginview_log_out_action">Log out</string>
     <string name="com_facebook_loginview_cancel_action">Cancel</string>
-    <string name="com_facebook_loading">Loading...</string>
+    <string name="com_facebook_loading">Loading&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">AndroidManifest Error</string>
     <string name="com_facebook_internet_permission_error_message">WebView login requires INTERNET permission</string>
-    <string name="com_facebook_tooltip_default">New! You\'re in control - choose what info you want to share with apps.</string>
+    <string name="com_facebook_tooltip_default">You\'re in control - choose what info you want to share with apps.</string>
     <string name="com_facebook_image_download_unknown_error">Unexpected error while downloading an image.</string>
     <string name="com_facebook_share_button_text">Share</string>
     <string name="com_facebook_send_button_text">Send</string>
-    <string name="com_facebook_device_auth_instructions">Visit &lt;b&gt;facebook.com/device&lt;/b&gt;&lt;br /&gt;on your smartphone or computer&lt;br /&gt;and enter this code</string>
+    <string name="com_facebook_device_auth_instructions">Visit &lt;b&gt;facebook.com/device&lt;/b&gt; and enter your code.</string>
+    <string name="com_facebook_smart_device_instructions_0">Confirm your code on Facebook.</string>
+    <string name="com_facebook_smart_device_instructions_1">1.\tGo to the Menu</string>
+    <string name="com_facebook_smart_device_instructions_2">2.\tSelect Device Requests</string>
+    <string name="com_facebook_smart_device_instructions_3">3.\tConfirm code.</string>
+    <string name="com_facebook_smart_device_instructions_or">- OR -</string>
+    <string name="com_facebook_smart_login_confirmation_title">Confirm Login</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as">Continue as %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel">Not you?</string>
 </resources>
diff --git a/facebook/src/main/res/values/styles.xml b/facebook/src/main/res/values/styles.xml
index b7824d208..22e56d9a7 100644
--- a/facebook/src/main/res/values/styles.xml
+++ b/facebook/src/main/res/values/styles.xml
@@ -19,7 +19,9 @@
     CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 -->
 
-<resources xmlns:android="http://schemas.android.com/apk/res/android">
+<resources xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools">
+    <color name="com_smart_login_code">#3C6499</color>
     <color name="com_facebook_blue">#3B5998</color>
     <color name="com_facebook_messenger_blue">#0084ff</color>
 
@@ -51,7 +53,7 @@
 
     <dimen name="com_facebook_tooltip_horizontal_padding">10dp</dimen>
 
-    <color name="com_facebook_device_auth_text">#797E87</color>
+    <color name="com_facebook_device_auth_text">#90949C</color>
 
     <style name="tooltip_bubble_text">
         <item name="android:textColor">@android:color/white</item>
@@ -69,6 +71,7 @@
     <color name="com_facebook_button_background_color_disabled">#bdc1c9</color>
     <color name="com_facebook_button_background_color_pressed">#2f477a</color>
     <color name="com_facebook_button_login_silver_background_color">#f4f6f8</color>
+    <color name="com_facebook_button_login_background_color">#4267b2</color>
     <color name="com_facebook_button_login_silver_background_color_pressed">#e9eaf0</color>
     <color name="com_facebook_button_send_background_color">@color/com_facebook_messenger_blue</color>
     <color name="com_facebook_button_send_background_color_pressed">#006fff</color>
@@ -92,7 +95,11 @@
     </style>
 
     <style name="com_facebook_loginview_default_style" parent="com_facebook_button">
-        <item name="android:drawableLeft">@drawable/com_facebook_button_icon</item>
+        <item name="android:background">@drawable/com_facebook_button_login_background</item>
+        <item name="android:drawablePadding">5dp</item>
+        <item name="android:paddingLeft">6dp</item>
+        <item name="android:paddingRight">6dp</item>
+        <item name="android:textSize">13.0dp</item>
     </style>
 
     <style name="com_facebook_loginview_silver_style" parent="com_facebook_loginview_default_style">
@@ -113,11 +120,28 @@
         <item name="android:text">@string/com_facebook_share_button_text</item>
     </style>
 
-    <style name="com_facebook_auth_dialog" parent="android:style/Theme.Dialog">
+    <style name="com_facebook_auth_dialog" parent="@style/Theme.AppCompat.Dialog">
         <item name="android:windowIsTranslucent">true</item>
         <item name="android:windowBackground">@android:color/transparent</item>
         <item name="android:windowNoTitle">true</item>
         <item name="android:windowIsFloating">true</item>
     </style>
 
+    <style name="com_facebook_auth_dialog_instructions_textview" tools:targetApi="17">
+        <item name="android:layout_width">wrap_content</item>
+        <item name="android:layout_height">wrap_content</item>
+        <item name="android:fontFamily">roboto</item>
+        <item name="android:gravity">center</item>
+        <item name="android:singleLine">false</item>
+        <item name="android:textColor">@color/com_facebook_device_auth_text</item>
+        <item name="android:textSize">16sp</item>
+        <item name="android:typeface">sans</item>
+    </style>
+
+    <style name="com_facebook_activity_theme" parent="@style/Theme.AppCompat.NoActionBar">
+        <item name="android:windowIsTranslucent">true</item>
+        <item name="android:windowBackground">@android:color/transparent</item>
+        <item name="android:windowNoTitle">true</item>
+    </style>
+
 </resources>
diff --git a/facebook/src/test/java/com/facebook/AccessTokenCacheTest.java b/facebook/src/test/java/com/facebook/AccessTokenCacheTest.java
index caf1f87c0..16f2b8200 100644
--- a/facebook/src/test/java/com/facebook/AccessTokenCacheTest.java
+++ b/facebook/src/test/java/com/facebook/AccessTokenCacheTest.java
@@ -33,7 +33,6 @@
 import org.mockito.Mock;
 import org.powermock.api.mockito.PowerMockito;
 import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
 
 import java.util.Arrays;
diff --git a/facebook/src/test/java/com/facebook/AccessTokenManagerTest.java b/facebook/src/test/java/com/facebook/AccessTokenManagerTest.java
index 3ae3d47a6..af1debf1e 100644
--- a/facebook/src/test/java/com/facebook/AccessTokenManagerTest.java
+++ b/facebook/src/test/java/com/facebook/AccessTokenManagerTest.java
@@ -31,18 +31,24 @@
 import org.json.JSONException;
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.Mock;
-import org.powermock.api.mockito.PowerMockito;
 import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
 
 import java.util.Arrays;
 import java.util.Date;
 import java.util.List;
 
-import static org.mockito.Mockito.*;
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+import static org.mockito.Mockito.any;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
 import static org.powermock.api.mockito.PowerMockito.mockStatic;
 import static org.powermock.api.mockito.PowerMockito.when;
 import static org.powermock.api.support.membermodification.MemberMatcher.method;
@@ -139,9 +145,9 @@ public void onReceive(Context context, Intent intent) {
         assertNotNull(intent);
 
         AccessToken oldAccessToken =
-                (AccessToken) intent.getParcelableExtra(AccessTokenManager.EXTRA_OLD_ACCESS_TOKEN);
+                intent.getParcelableExtra(AccessTokenManager.EXTRA_OLD_ACCESS_TOKEN);
         AccessToken newAccessToken =
-                (AccessToken) intent.getParcelableExtra(AccessTokenManager.EXTRA_NEW_ACCESS_TOKEN);
+                intent.getParcelableExtra(AccessTokenManager.EXTRA_NEW_ACCESS_TOKEN);
 
         assertEquals(accessToken.getToken(), oldAccessToken.getToken());
         assertEquals(anotherAccessToken.getToken(), newAccessToken.getToken());
diff --git a/facebook/src/test/java/com/facebook/AccessTokenTest.java b/facebook/src/test/java/com/facebook/AccessTokenTest.java
index 8ec902bbe..cf218918d 100644
--- a/facebook/src/test/java/com/facebook/AccessTokenTest.java
+++ b/facebook/src/test/java/com/facebook/AccessTokenTest.java
@@ -30,18 +30,20 @@
 import org.junit.Test;
 import org.powermock.api.mockito.PowerMockito;
 import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
 
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.Date;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
 import static org.powermock.api.support.membermodification.MemberModifier.stub;
 
 @PrepareForTest( {Utility.class})
@@ -231,7 +233,7 @@ public void testCachePutGet() {
         String userId = "1000";
 
         List<String> normalList = Arrays.asList("", "Another completely random token value");
-        List<String> emptyList = Arrays.asList();
+        List<String> emptyList = Collections.emptyList();
         HashSet<String> normalArrayList = new HashSet<String>(normalList);
         HashSet<String> emptyArrayList = new HashSet<String>();
         @SuppressWarnings("unchecked")
@@ -273,7 +275,7 @@ public void testParceling() throws IOException {
         Set<String> permissions = new HashSet<String>(
                 Arrays.asList("permission_1", "permission_2"));
         Set<String> declinedPermissions = new HashSet<String>(
-                Arrays.asList("permission_3"));
+                Collections.singletonList("permission_3"));
         AccessTokenSource source = AccessTokenSource.WEB_VIEW;
         AccessToken accessToken1 = new AccessToken(
                 token,
diff --git a/facebook/src/test/java/com/facebook/FacebookSdkPowerMockTest.java b/facebook/src/test/java/com/facebook/FacebookSdkPowerMockTest.java
index 3893e5c16..74a9c163b 100644
--- a/facebook/src/test/java/com/facebook/FacebookSdkPowerMockTest.java
+++ b/facebook/src/test/java/com/facebook/FacebookSdkPowerMockTest.java
@@ -27,6 +27,7 @@
 import android.os.ConditionVariable;
 
 import com.facebook.internal.CallbackManagerImpl;
+import com.facebook.internal.FetchedAppSettingsManager;
 import com.facebook.internal.ServerProtocol;
 import com.facebook.internal.Utility;
 
@@ -48,14 +49,14 @@
 import static org.powermock.api.support.membermodification.MemberMatcher.method;
 import static org.powermock.api.support.membermodification.MemberModifier.stub;
 
-@PrepareForTest({ FacebookSdk.class, Utility.class })
+@PrepareForTest({ FacebookSdk.class, Utility.class, FetchedAppSettingsManager.class})
 public final class FacebookSdkPowerMockTest extends FacebookPowerMockTestCase {
 
     @Before
     public void before() {
         Whitebox.setInternalState(FacebookSdk.class, "callbackRequestCodeOffset", 0xface);
         Whitebox.setInternalState(FacebookSdk.class, "sdkInitialized", false);
-        stub(method(Utility.class, "loadAppSettingsAsync")).toReturn(null);
+        stub(method(FetchedAppSettingsManager.class, "loadAppSettingsAsync")).toReturn(null);
 
     }
 
@@ -148,11 +149,13 @@ public void testLoadDefaultsDoesNotOverwrite() throws Exception {
         stub(method(FacebookSdk.class, "isInitialized")).toReturn(true);
         FacebookSdk.setApplicationId("hello");
         FacebookSdk.setClientToken("world");
+        FacebookSdk.setAutoLogAppEventsEnabled(false);
 
         FacebookSdk.loadDefaultsFromMetadata(mockContextWithAppIdAndClientToken());
 
         assertEquals("hello", FacebookSdk.getApplicationId());
         assertEquals("world", FacebookSdk.getClientToken());
+        assertEquals(false, FacebookSdk.getAutoLogAppEventsEnabled());
     }
 
     @Test
diff --git a/facebook/src/test/java/com/facebook/GraphRequestTest.java b/facebook/src/test/java/com/facebook/GraphRequestTest.java
index 3aca6e1c5..487c75d0c 100644
--- a/facebook/src/test/java/com/facebook/GraphRequestTest.java
+++ b/facebook/src/test/java/com/facebook/GraphRequestTest.java
@@ -25,11 +25,8 @@
 import android.net.Uri;
 import android.os.Bundle;
 
-import com.facebook.internal.GraphUtil;
-import com.facebook.internal.ServerProtocol;
 import com.facebook.share.internal.ShareInternalUtility;
 
-import org.json.JSONException;
 import org.json.JSONObject;
 import org.junit.Before;
 import org.junit.Test;
@@ -210,7 +207,7 @@ public void testSingleGetToHttpRequest() throws Exception {
         assertTrue(connection != null);
 
         assertEquals("GET", connection.getRequestMethod());
-        assertEquals("/" + ServerProtocol.getAPIVersion() + "/TourEiffel",
+        assertEquals("/" + FacebookSdk.getGraphApiVersion() + "/TourEiffel",
             connection.getURL().getPath());
 
         assertTrue(connection.getRequestProperty("User-Agent").startsWith("FBAndroidSDK"));
diff --git a/facebook/src/test/java/com/facebook/appevents/AnalyticsUserIDTest.java b/facebook/src/test/java/com/facebook/appevents/AnalyticsUserIDTest.java
new file mode 100644
index 000000000..f7485fd75
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/appevents/AnalyticsUserIDTest.java
@@ -0,0 +1,61 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import com.facebook.FacebookPowerMockTestCase;
+import com.facebook.FacebookSdk;
+
+import org.json.JSONObject;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+import org.robolectric.RuntimeEnvironment;
+
+public class AnalyticsUserIDTest extends FacebookPowerMockTestCase {
+    @Before
+    public void init() {
+        FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
+        AnalyticsUserIDStore.initStore();
+    }
+
+    @Test
+    public void testUserIDPersistence() throws Exception {
+        String userID = "123456789";
+
+        AppEventsLogger.setUserID(userID);
+        // The userID is saved async so we must wait before checking for the value
+        Thread.sleep(10);
+        Assert.assertEquals(userID, AppEventsLogger.getUserID());
+        AppEventsLogger.clearUserID();
+        Thread.sleep(10);
+        Assert.assertNull(AppEventsLogger.getUserID());
+    }
+
+    @Test
+    public void testUserIDAddedToAppEvent() throws Exception {
+        String userID = "123456789";
+        AppEventsLogger.setUserID(userID);
+        AppEvent appEvent = AppEventTestUtilities.getTestAppEvent();
+        JSONObject jsonObject = appEvent.getJSONObject();
+        Assert.assertEquals(jsonObject.getString("_app_user_id"), userID);
+    }
+
+}
diff --git a/facebook/src/test/java/com/facebook/appevents/AppEventTest.java b/facebook/src/test/java/com/facebook/appevents/AppEventTest.java
new file mode 100644
index 000000000..a1ee11601
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/appevents/AppEventTest.java
@@ -0,0 +1,69 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import com.facebook.FacebookSdk;
+import com.facebook.FacebookTestCase;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+import org.robolectric.RuntimeEnvironment;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+
+public class AppEventTest extends FacebookTestCase {
+    @Before
+    public void init() {
+        FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
+    }
+
+    @Test
+    public void testChecksumOfAppEvent() throws Exception {
+        AppEvent appEvent = AppEventTestUtilities.getTestAppEvent();
+        Assert.assertTrue(appEvent.isChecksumValid());
+        appEvent.getJSONObject().put("new_key", "corrupted");
+        Assert.assertFalse(appEvent.isChecksumValid());
+    }
+
+    @Test
+    public void testAppEventSerializedChecksum() throws Exception {
+        AppEvent appEvent1 = AppEventTestUtilities.getTestAppEvent();
+
+        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
+        ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
+        objectOutputStream.writeObject(appEvent1);
+
+        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(
+                byteArrayOutputStream.toByteArray());
+        ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
+
+        AppEvent appEvent2 = (AppEvent)objectInputStream.readObject();
+        Assert.assertTrue(appEvent2.isChecksumValid());
+
+        // A secondary validation ensure that the json string matches the original
+        Assert.assertTrue(
+                appEvent1.getJSONObject().toString().equals(appEvent2.getJSONObject().toString()));
+    }
+}
diff --git a/facebook/src/test/java/com/facebook/appevents/AppEventTestUtilities.java b/facebook/src/test/java/com/facebook/appevents/AppEventTestUtilities.java
new file mode 100644
index 000000000..69414c7a7
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/appevents/AppEventTestUtilities.java
@@ -0,0 +1,42 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import android.os.Bundle;
+
+import java.util.UUID;
+
+public class AppEventTestUtilities {
+    public static AppEvent getTestAppEvent() throws Exception {
+        Bundle customParams = new Bundle();
+        customParams.putString("key1", "value1");
+        customParams.putString("key2", "value2");
+        AppEvent appEvent = new AppEvent(
+                "contextName",
+                "eventName",
+                1.0,
+                customParams,
+                false,
+                UUID.fromString("65565271-1ace-4580-bd13-b2bc6d0df035"));
+        appEvent.isChecksumValid();
+        return appEvent;
+    }
+}
diff --git a/facebook/src/test/java/com/facebook/appevents/AutomaticAnalyticsTest.java b/facebook/src/test/java/com/facebook/appevents/AutomaticAnalyticsTest.java
new file mode 100644
index 000000000..8f0f2e7e5
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/appevents/AutomaticAnalyticsTest.java
@@ -0,0 +1,69 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import com.facebook.internal.FetchedAppSettingsManager;
+import com.facebook.internal.Utility;
+import com.facebook.internal.FetchedAppSettings;
+import com.facebook.FacebookTestCase;
+
+import org.json.JSONObject;
+import static org.junit.Assert.assertEquals;
+import org.junit.Test;
+import org.powermock.reflect.Whitebox;
+
+public class AutomaticAnalyticsTest extends FacebookTestCase {
+
+    @Test
+    public void testAutomaticLoggingEnabledServerConfiguration() throws Exception {
+        JSONObject settingsJSON = new JSONObject();
+        settingsJSON.put("app_events_feature_bitmask", "0");
+        FetchedAppSettings settings = Whitebox.invokeMethod(
+                FetchedAppSettingsManager.class, "parseAppSettingsFromJSON", "123", settingsJSON);
+        assertEquals(settings.getAutomaticLoggingEnabled(),false);
+
+        settingsJSON.put("app_events_feature_bitmask", "7");
+        settings = Whitebox.invokeMethod(
+                FetchedAppSettingsManager.class, "parseAppSettingsFromJSON", "123", settingsJSON);
+        assertEquals(settings.getAutomaticLoggingEnabled(),false);
+
+        settingsJSON.put("app_events_feature_bitmask", "23");
+        settings = Whitebox.invokeMethod(
+                FetchedAppSettingsManager.class, "parseAppSettingsFromJSON", "123", settingsJSON);
+        assertEquals(settings.getAutomaticLoggingEnabled(),false);
+
+        settingsJSON.put("app_events_feature_bitmask", "8");
+        settings = Whitebox.invokeMethod(
+                FetchedAppSettingsManager.class, "parseAppSettingsFromJSON", "123", settingsJSON);
+        assertEquals(settings.getAutomaticLoggingEnabled(),true);
+
+        settingsJSON.put("app_events_feature_bitmask", "9");
+        settings = Whitebox.invokeMethod(
+                FetchedAppSettingsManager.class, "parseAppSettingsFromJSON", "123", settingsJSON);
+        assertEquals(settings.getAutomaticLoggingEnabled(),true);
+
+        JSONObject noBitmaskFieldSettings = new JSONObject();
+        settings = Whitebox.invokeMethod(
+                FetchedAppSettingsManager.class, "parseAppSettingsFromJSON", "123", noBitmaskFieldSettings);
+        assertEquals(settings.getAutomaticLoggingEnabled(),false);
+    }
+
+}
diff --git a/facebook/src/test/java/com/facebook/internal/ShareInternalUtilityTest.java b/facebook/src/test/java/com/facebook/internal/ShareInternalUtilityTest.java
index 78249805b..efa4d443c 100644
--- a/facebook/src/test/java/com/facebook/internal/ShareInternalUtilityTest.java
+++ b/facebook/src/test/java/com/facebook/internal/ShareInternalUtilityTest.java
@@ -35,7 +35,6 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
-import java.util.UUID;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
@@ -93,7 +92,7 @@ public void testJsonSerializationOfOpenGraph() {
             List<String> peopleIds = Utility.jsonArrayToStringList(object.getJSONArray("tags"));
             assertEquals(4, peopleIds.size());
             for (int i = 1; i < 5; ++i) {
-                assertTrue(peopleIds.contains(new Integer(i).toString()));
+                assertTrue(peopleIds.contains(Integer.valueOf(i).toString()));
             }
 
             assertEquals(placeId, object.getString("place"));
diff --git a/facebook/src/test/java/com/facebook/login/CustomTabLoginMethodHandlerTest.java b/facebook/src/test/java/com/facebook/login/CustomTabLoginMethodHandlerTest.java
new file mode 100644
index 000000000..f1be054a3
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/login/CustomTabLoginMethodHandlerTest.java
@@ -0,0 +1,237 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.login;
+
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.content.pm.ServiceInfo;
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentActivity;
+
+import com.facebook.AccessToken;
+import com.facebook.FacebookActivity;
+import com.facebook.FacebookException;
+import com.facebook.FacebookOperationCanceledException;
+import com.facebook.FacebookSdk;
+import com.facebook.TestUtils;
+import com.facebook.internal.FetchedAppSettings;
+import com.facebook.internal.FetchedAppSettingsManager;
+import com.facebook.internal.Utility;
+import com.facebook.internal.Validate;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.mockito.ArgumentCaptor;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.powermock.api.mockito.PowerMockito.mockStatic;
+import static org.powermock.api.mockito.PowerMockito.when;
+
+@PrepareForTest({
+        LoginClient.class,
+        Validate.class,
+        Utility.class,
+        FacebookSdk.class,
+        AccessToken.class,
+        FetchedAppSettings.class,
+        FetchedAppSettingsManager.class
+})
+public class CustomTabLoginMethodHandlerTest extends LoginHandlerTestCase {
+    private final static String SIGNED_REQUEST_STR = "ggarbage.eyJhbGdvcml0aG0iOiJITUFDSEEyNTYiLCJ"
+            + "jb2RlIjoid2h5bm90IiwiaXNzdWVkX2F0IjoxNDIyNTAyMDkyLCJ1c2VyX2lkIjoiMTIzIn0";
+    private final static String CHROME_PACKAGE = "com.android.chrome";
+    private final static String DEV_PACKAGE = "com.chrome.dev";
+    private final static String BETA_PACKAGE = "com.chrome.beta";
+
+    private CustomTabLoginMethodHandler handler;
+    private LoginClient.Request request;
+
+    @Before
+    public void setUp() {
+        handler = new CustomTabLoginMethodHandler(mockLoginClient);
+        request = createRequest();
+    }
+
+    @Test
+    public void testCustomTabHandlesSuccess() {
+        final Bundle bundle = new Bundle();
+        bundle.putString("access_token", ACCESS_TOKEN);
+        bundle.putString("expires_in", String.format("%d", EXPIRES_IN_DELTA));
+        bundle.putString("code", "Something else");
+        bundle.putString("signed_request", SIGNED_REQUEST_STR);
+        handler.onComplete(request, bundle, null);
+
+        final ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
+                ArgumentCaptor.forClass(LoginClient.Result.class);
+        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
+
+        final LoginClient.Result result = resultArgumentCaptor.getValue();
+        assertNotNull(result);
+        assertEquals(LoginClient.Result.Code.SUCCESS, result.code);
+
+        final AccessToken token = result.token;
+        assertNotNull(token);
+        assertEquals(ACCESS_TOKEN, token.getToken());
+        assertDateDiffersWithinDelta(new Date(), token.getExpires(), EXPIRES_IN_DELTA * 1000, 1000);
+        TestUtils.assertSamePermissions(PERMISSIONS, token.getPermissions());
+    }
+
+    @Test
+    public void testCustomTabHandlesCancel() {
+        handler.onComplete(request, null, new FacebookOperationCanceledException());
+
+        final ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
+                ArgumentCaptor.forClass(LoginClient.Result.class);
+        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
+        final LoginClient.Result result = resultArgumentCaptor.getValue();
+
+        assertNotNull(result);
+        assertEquals(LoginClient.Result.Code.CANCEL, result.code);
+        assertNull(result.token);
+        assertNotNull(result.errorMessage);
+    }
+
+    @Test
+    public void testCustomTabHandlesError() {
+        handler.onComplete(request, null, new FacebookException(ERROR_MESSAGE));
+
+        final ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
+                ArgumentCaptor.forClass(LoginClient.Result.class);
+        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
+        final LoginClient.Result result = resultArgumentCaptor.getValue();
+
+        assertNotNull(result);
+        assertEquals(LoginClient.Result.Code.ERROR, result.code);
+        assertNull(result.token);
+        assertNotNull(result.errorMessage);
+        assertEquals(ERROR_MESSAGE, result.errorMessage);
+    }
+
+    @Test
+    public void testTryAuthorizeNeedsRedirectActivity() {
+        mockTryAuthorize();
+
+        mockChromeCustomTabsSupported(true, CHROME_PACKAGE);
+        mockCustomTabsAllowed(true);
+        mockCustomTabRedirectActivity(true);
+        assertTrue(handler.tryAuthorize(request));
+
+        mockCustomTabsAllowed(false);
+        assertFalse(handler.tryAuthorize(request));
+    }
+
+    @Test
+    public void testTryAuthorizeWithChromePackage() {
+        mockTryAuthorize();
+        mockCustomTabsAllowed(true);
+        mockCustomTabRedirectActivity(true);
+
+        mockChromeCustomTabsSupported(true, CHROME_PACKAGE);
+        assertTrue(handler.tryAuthorize(request));
+    }
+
+    @Test
+    public void testTryAuthorizeWithChromeBetaPackage() {
+        mockTryAuthorize();
+        mockCustomTabsAllowed(true);
+        mockCustomTabRedirectActivity(true);
+
+        mockChromeCustomTabsSupported(true, BETA_PACKAGE);
+        assertTrue(handler.tryAuthorize(request));
+    }
+
+    @Test
+    public void testTryAuthorizeWithChromeDevPackage() {
+        mockTryAuthorize();
+        mockCustomTabsAllowed(true);
+        mockCustomTabRedirectActivity(true);
+
+        mockChromeCustomTabsSupported(true, DEV_PACKAGE);
+        assertTrue(handler.tryAuthorize(request));
+    }
+
+    @Test
+    public void testTryAuthorizeWithoutChromePackage() {
+        mockTryAuthorize();
+        mockCustomTabsAllowed(true);
+        mockCustomTabRedirectActivity(true);
+
+        mockChromeCustomTabsSupported(true, "not.chrome.package");
+        assertFalse(handler.tryAuthorize(request));
+    }
+
+    private void mockTryAuthorize() {
+        mockStatic(FacebookSdk.class);
+        when(FacebookSdk.isInitialized()).thenReturn(true);
+        mockStatic(AccessToken.class);
+        when(AccessToken.getCurrentAccessToken()).thenReturn(null);
+        Fragment fragment = mock(LoginFragment.class);
+        when(mockLoginClient.getFragment()).thenReturn(fragment);
+    }
+
+    private void mockChromeCustomTabsSupported(final boolean supported, final String packageName) {
+        final List<ResolveInfo> resolveInfos = new ArrayList<>();
+        ResolveInfo resolveInfo = new ResolveInfo();
+        ServiceInfo serviceInfo = new ServiceInfo();
+        serviceInfo.packageName = packageName;
+        resolveInfo.serviceInfo = serviceInfo;
+        if (supported) {
+            resolveInfos.add(resolveInfo);
+        }
+        final PackageManager packageManager = mock(PackageManager.class);
+        when(packageManager.queryIntentServices(any(Intent.class), anyInt()))
+                .thenReturn(resolveInfos);
+        activity = mock(FacebookActivity.class);
+        when(mockLoginClient.getActivity()).thenReturn(activity);
+        when(activity.getPackageManager()).thenReturn(packageManager);
+    }
+
+    private void mockCustomTabRedirectActivity(final boolean hasActivity) {
+        mockStatic(Validate.class);
+        when(Validate.hasCustomTabRedirectActivity(any(Context.class))).thenReturn(hasActivity);
+    }
+
+    private void mockCustomTabsAllowed(final boolean allowed) {
+        final FetchedAppSettings settings = mock(FetchedAppSettings.class);
+        when(settings.getCustomTabsEnabled()).thenReturn(allowed);
+        mockStatic(FetchedAppSettingsManager.class);
+        when(FetchedAppSettingsManager.getAppSettingsWithoutQuery(anyString())).thenReturn(settings);
+    }
+
+}
diff --git a/facebook/src/test/java/com/facebook/login/FacebookLiteLoginMethodHandlerTest.java b/facebook/src/test/java/com/facebook/login/FacebookLiteLoginMethodHandlerTest.java
new file mode 100644
index 000000000..d8ee20708
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/login/FacebookLiteLoginMethodHandlerTest.java
@@ -0,0 +1,171 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.login;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+
+import com.facebook.AccessToken;
+import com.facebook.FacebookSdk;
+import com.facebook.TestUtils;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.mockito.ArgumentCaptor;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.robolectric.RuntimeEnvironment;
+
+import java.util.Date;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.powermock.api.mockito.PowerMockito.when;
+
+@PrepareForTest( { LoginClient.class })
+public class FacebookLiteLoginMethodHandlerTest extends LoginHandlerTestCase {
+    private static final String CANCEL_MESSAGE = "Permissions error";
+    private final static String SIGNED_REQUEST_STR = "ggarbage.eyJhbGdvcml0aG0iOiJITUFDSEEyNTYiLCJ"
+            + "jb2RlIjoid2h5bm90IiwiaXNzdWVkX2F0IjoxNDIyNTAyMDkyLCJ1c2VyX2lkIjoiMTIzIn0";
+
+    @Before
+    @Override
+    public void before() throws Exception {
+        super.before();
+        FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
+    }
+
+    @Test
+    public void testFacebookLiteHandlesSuccess() {
+        Bundle bundle = new Bundle();
+        bundle.putLong("expires_in", EXPIRES_IN_DELTA);
+        bundle.putString("access_token", ACCESS_TOKEN);
+        bundle.putString("signed_request", SIGNED_REQUEST_STR);
+
+        Intent intent = new Intent();
+        intent.putExtras(bundle);
+
+        FacebookLiteLoginMethodHandler handler =
+                new FacebookLiteLoginMethodHandler(mockLoginClient);
+
+        LoginClient.Request request = createRequest();
+        when(mockLoginClient.getPendingRequest()).thenReturn(request);
+
+        handler.tryAuthorize(request);
+        handler.onActivityResult(0, Activity.RESULT_OK, intent);
+
+        ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
+                ArgumentCaptor.forClass(LoginClient.Result.class);
+        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
+
+        LoginClient.Result result = resultArgumentCaptor.getValue();
+
+        assertNotNull(result);
+        assertEquals(LoginClient.Result.Code.SUCCESS, result.code);
+
+        AccessToken token = result.token;
+        assertNotNull(token);
+        assertEquals(ACCESS_TOKEN, token.getToken());
+        assertDateDiffersWithinDelta(new Date(), token.getExpires(), EXPIRES_IN_DELTA * 1000, 1000);
+        TestUtils.assertSamePermissions(PERMISSIONS, token.getPermissions());
+    }
+
+    @Test
+    public void testFacebookLiteHandlesBack() {
+        FacebookLiteLoginMethodHandler handler =
+                new FacebookLiteLoginMethodHandler(mockLoginClient);
+
+        LoginClient.Request request = createRequest();
+        handler.tryAuthorize(request);
+        handler.onActivityResult(0, Activity.RESULT_CANCELED, null);
+
+        ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
+                ArgumentCaptor.forClass(LoginClient.Result.class);
+        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
+
+        LoginClient.Result result = resultArgumentCaptor.getValue();
+
+        assertNotNull(result);
+        assertEquals(LoginClient.Result.Code.CANCEL, result.code);
+
+        assertNull(result.token);
+        assertEquals(result.errorMessage, "Operation canceled");
+    }
+
+    @Test
+    public void testFacebookLiteHandlesCancel() {
+        Bundle bundle = new Bundle();
+        bundle.putString("error", CANCEL_MESSAGE);
+
+        Intent intent = new Intent();
+        intent.putExtras(bundle);
+
+        FacebookLiteLoginMethodHandler handler =
+                new FacebookLiteLoginMethodHandler(mockLoginClient);
+
+        LoginClient.Request request = createRequest();
+        handler.tryAuthorize(request);
+        handler.onActivityResult(0, Activity.RESULT_CANCELED, intent);
+
+        ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
+                ArgumentCaptor.forClass(LoginClient.Result.class);
+        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
+
+        LoginClient.Result result = resultArgumentCaptor.getValue();
+
+        assertNotNull(result);
+    }
+
+    @Test
+    public void testFacebookLiteHandlesErrorMessage() {
+        Bundle bundle = new Bundle();
+        bundle.putString("error", ERROR_MESSAGE);
+
+        Intent intent = new Intent();
+        intent.putExtras(bundle);
+
+        FacebookLiteLoginMethodHandler handler =
+                new FacebookLiteLoginMethodHandler(mockLoginClient);
+
+        LoginClient.Request request = createRequest();
+        handler.tryAuthorize(request);
+        handler.onActivityResult(0, Activity.RESULT_CANCELED, intent);
+
+        ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
+                ArgumentCaptor.forClass(LoginClient.Result.class);
+        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
+
+        LoginClient.Result result = resultArgumentCaptor.getValue();
+
+        assertNotNull(result);
+        assertEquals(LoginClient.Result.Code.CANCEL, result.code);
+
+        assertNull(result.token);
+        assertNotNull(result.errorMessage);
+        assertTrue(result.errorMessage.contains(ERROR_MESSAGE));
+    }
+}
diff --git a/facebook/src/test/java/com/facebook/login/KatanaProxyLoginMethodHandlerTest.java b/facebook/src/test/java/com/facebook/login/KatanaProxyLoginMethodHandlerTest.java
index c57831876..5f8249d15 100644
--- a/facebook/src/test/java/com/facebook/login/KatanaProxyLoginMethodHandlerTest.java
+++ b/facebook/src/test/java/com/facebook/login/KatanaProxyLoginMethodHandlerTest.java
@@ -32,7 +32,6 @@
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;
 import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
 
 import java.util.Date;
diff --git a/facebook/src/test/java/com/facebook/login/LoginManagerTest.java b/facebook/src/test/java/com/facebook/login/LoginManagerTest.java
index 59f0a7d54..c3b14805e 100644
--- a/facebook/src/test/java/com/facebook/login/LoginManagerTest.java
+++ b/facebook/src/test/java/com/facebook/login/LoginManagerTest.java
@@ -27,6 +27,7 @@
 import android.content.Intent;
 import android.content.pm.PackageManager;
 import android.content.pm.ResolveInfo;
+import android.os.Bundle;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentActivity;
 
@@ -66,6 +67,7 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 import static org.powermock.api.mockito.PowerMockito.*;
 
 @PrepareForTest({ FacebookSdk.class, AccessToken.class, Profile.class})
@@ -98,6 +100,7 @@ public void before() throws Exception {
         when(FacebookSdk.getApplicationContext()).thenReturn(mockApplicationContext);
         when(FacebookSdk.getExecutor()).thenReturn(threadExecutor);
         when(mockFragment.getActivity()).thenReturn(mockFragmentActivity);
+        when(mockActivity.getApplicationContext()).thenReturn(mockApplicationContext);
 
         // We use mocks rather than RobolectricPackageManager because it's simpler to not
         // have to specify Intents. Default to resolving all intents to something.
@@ -264,8 +267,9 @@ public void implTestLogInCreatesPendingRequestWithCorrectValues(
             @Override
             public boolean matches(Object argument) {
                 Intent orig = (Intent)argument;
+                Bundle bundle = orig.getBundleExtra(LoginFragment.REQUEST_KEY);
                 LoginClient.Request request =
-                        (LoginClient.Request)orig.getParcelableExtra(LoginFragment.EXTRA_REQUEST);
+                        (LoginClient.Request)bundle.getParcelable(LoginFragment.EXTRA_REQUEST);
                 assertEquals(MOCK_APP_ID, request.getApplicationId());
                 assertEquals(LoginBehavior.NATIVE_ONLY, request.getLoginBehavior());
                 assertEquals(DefaultAudience.EVERYONE, request.getDefaultAudience());
diff --git a/facebook/src/test/java/com/facebook/share/internal/ShareContentValidationTest.java b/facebook/src/test/java/com/facebook/share/internal/ShareContentValidationTest.java
index 775fd8051..0e80ebf01 100644
--- a/facebook/src/test/java/com/facebook/share/internal/ShareContentValidationTest.java
+++ b/facebook/src/test/java/com/facebook/share/internal/ShareContentValidationTest.java
@@ -161,8 +161,8 @@ public void testItValidatesNullContentForWebShare() {
         ShareContentValidation.validateForWebShare(null);
     }
 
-    @Test(expected = FacebookException.class)
-    public void testItDoesNotAcceptSharePhotoContentByWeb() {
+    @Test
+    public void testItDoesAcceptSharePhotoContentByWeb() {
         SharePhoto sharePhoto = buildSharePhoto("https://facebook.com/awesome.gif");
         SharePhotoContent sharePhotoContent =
                 new SharePhotoContent.Builder().addPhoto(sharePhoto).build();
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index fd7e590e5..ca78035ef 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 431dd073f..9c0bad963 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Mon Oct 05 14:11:01 PDT 2015
+#Fri Sep 16 14:59:52 PDT 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.6-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip
diff --git a/gradlew b/gradlew
index 91a7e269e..27309d923 100755
--- a/gradlew
+++ b/gradlew
@@ -6,12 +6,30 @@
 ##
 ##############################################################################
 
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
 
 APP_NAME="Gradle"
 APP_BASE_NAME=`basename "$0"`
 
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD="maximum"
 
@@ -30,6 +48,7 @@ die ( ) {
 cygwin=false
 msys=false
 darwin=false
+nonstop=false
 case "`uname`" in
   CYGWIN* )
     cygwin=true
@@ -40,31 +59,11 @@ case "`uname`" in
   MINGW* )
     msys=true
     ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
 esac
 
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-fi
-
-# Attempt to set APP_HOME
-# Resolve links: $0 may be a link
-PRG="$0"
-# Need this for relative symlinks.
-while [ -h "$PRG" ] ; do
-    ls=`ls -ld "$PRG"`
-    link=`expr "$ls" : '.*-> \(.*\)$'`
-    if expr "$link" : '/.*' > /dev/null; then
-        PRG="$link"
-    else
-        PRG=`dirname "$PRG"`"/$link"
-    fi
-done
-SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >&-
-APP_HOME="`pwd -P`"
-cd "$SAVED" >&-
-
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
 # Determine the Java command to use to start the JVM.
@@ -90,7 +89,7 @@ location of your Java installation."
 fi
 
 # Increase the maximum file descriptors if we can.
-if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
     MAX_FD_LIMIT=`ulimit -H -n`
     if [ $? -eq 0 ] ; then
         if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
@@ -114,6 +113,7 @@ fi
 if $cygwin ; then
     APP_HOME=`cygpath --path --mixed "$APP_HOME"`
     CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
 
     # We build the pattern for arguments to be converted via cygpath
     ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
diff --git a/gradlew.bat b/gradlew.bat
index aec99730b..f6d5974e7 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -8,14 +8,14 @@
 @rem Set local scope for the variables with windows NT shell
 if "%OS%"=="Windows_NT" setlocal
 
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
 set DIRNAME=%~dp0
 if "%DIRNAME%" == "" set DIRNAME=.
 set APP_BASE_NAME=%~n0
 set APP_HOME=%DIRNAME%
 
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
 @rem Find java.exe
 if defined JAVA_HOME goto findJavaFromJavaHome
 
@@ -46,7 +46,7 @@ echo location of your Java installation.
 goto fail
 
 :init
-@rem Get command-line arguments, handling Windowz variants
+@rem Get command-line arguments, handling Windows variants
 
 if not "%OS%" == "Windows_NT" goto win9xME_args
 if "%@eval[2+2]" == "4" goto 4NT_args
diff --git a/keystores/BUCK b/keystores/BUCK
deleted file mode 100644
index 15da20e6b..000000000
--- a/keystores/BUCK
+++ /dev/null
@@ -1,8 +0,0 @@
-keystore(
-  name = 'debug',
-  store = 'debug.keystore',
-  properties = 'debug.keystore.properties',
-  visibility = [
-    'PUBLIC',
-  ],
-)
diff --git a/keystores/debug.keystore b/keystores/debug.keystore
deleted file mode 100644
index 364e105ed..000000000
Binary files a/keystores/debug.keystore and /dev/null differ
diff --git a/keystores/debug.keystore.properties b/keystores/debug.keystore.properties
deleted file mode 100644
index 121bfb49f..000000000
--- a/keystores/debug.keystore.properties
+++ /dev/null
@@ -1,4 +0,0 @@
-key.store=debug.keystore
-key.alias=androiddebugkey
-key.store.password=android
-key.alias.password=android
diff --git a/libs/BUCK b/libs/BUCK
deleted file mode 100644
index 9d476d1d5..000000000
--- a/libs/BUCK
+++ /dev/null
@@ -1,15 +0,0 @@
-prebuilt_jar(
-  name = 'android-support-v4',
-  binary_jar = 'android-support-v4.jar',
-  visibility = [
-    'PUBLIC',
-  ],
-)
-
-prebuilt_jar(
-  name = 'bolts',
-  binary_jar = 'bolts-android-1.1.2.jar',
-  visibility = [
-    'PUBLIC',
-  ],
-)
diff --git a/libs/android-support-v4.jar b/libs/android-support-v4.jar
deleted file mode 100644
index c31cede47..000000000
Binary files a/libs/android-support-v4.jar and /dev/null differ
diff --git a/libs/bolts-android-1.1.2.jar b/libs/bolts-android-1.1.2.jar
deleted file mode 100644
index 88a01a30b..000000000
Binary files a/libs/bolts-android-1.1.2.jar and /dev/null differ
diff --git a/samples/HelloFacebookSample/AndroidManifest.xml b/samples/HelloFacebookSample/AndroidManifest.xml
index 454494221..cb9bd5e9d 100644
--- a/samples/HelloFacebookSample/AndroidManifest.xml
+++ b/samples/HelloFacebookSample/AndroidManifest.xml
@@ -28,7 +28,6 @@
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
 
     <application
-        android:name=".HelloFacebookSampleApplication"
         android:icon="@drawable/icon"
         android:label="@string/app_name"
         android:theme="@android:style/Theme.NoTitleBar">
@@ -42,13 +41,7 @@
             </intent-filter>
         </activity>
         <activity
-            android:name="com.facebook.FacebookActivity"
-            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
-            android:label="@string/app_name"
-            android:theme="@android:style/Theme.Translucent.NoTitleBar" />
-        <activity
-            android:name="com.facebook.CustomTabActivity"
-            android:exported="true">
+            android:name="com.facebook.CustomTabActivity">
             <intent-filter>
                 <action android:name="android.intent.action.VIEW" />
 
diff --git a/samples/HelloFacebookSample/BUCK b/samples/HelloFacebookSample/BUCK
deleted file mode 100644
index 9796c61d9..000000000
--- a/samples/HelloFacebookSample/BUCK
+++ /dev/null
@@ -1,35 +0,0 @@
-android_resource(
-  name = 'res',
-  res = 'res',
-  package = 'com.example.hellofacebook',
-  deps = [
-    '//facebook:android-sdk',
-  ],
-)
-
-android_library(
-  name = 'lib',
-  srcs = glob(['src/**/*.java']),
-  deps = [
-    ':res',
-    '//facebook:android-sdk',
-    '//libs:android-support-v4',
-  ],
-)
-
-android_binary(
-  name = 'app',
-  manifest = 'AndroidManifest.xml',
-  keystore = '//keystores:debug',
-  package_type = 'debug',
-  deps = [
-    ':lib',
-    '//facebook:android-sdk',
-    '//libs:android-support-v4',
-  ],
-)
-
-project_config(
-  src_target = ':app',
-  src_roots = ['src'],
-)
diff --git a/samples/HelloFacebookSample/build.gradle b/samples/HelloFacebookSample/build.gradle
index 8ba946d53..7d7156e28 100644
--- a/samples/HelloFacebookSample/build.gradle
+++ b/samples/HelloFacebookSample/build.gradle
@@ -9,6 +9,7 @@ android {
     buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
+        applicationId 'com.example.hellofacebook'
         minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
         targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
     }
diff --git a/samples/HelloFacebookSample/src/com/example/hellofacebook/HelloFacebookSampleActivity.java b/samples/HelloFacebookSample/src/com/example/hellofacebook/HelloFacebookSampleActivity.java
index 328e6e9d1..1c963e729 100644
--- a/samples/HelloFacebookSample/src/com/example/hellofacebook/HelloFacebookSampleActivity.java
+++ b/samples/HelloFacebookSample/src/com/example/hellofacebook/HelloFacebookSampleActivity.java
@@ -114,7 +114,6 @@ private void showResult(String title, String alertMessage) {
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        FacebookSdk.sdkInitialize(this.getApplicationContext());
 
         callbackManager = CallbackManager.Factory.create();
 
diff --git a/samples/Iconicus/AndroidManifest.xml b/samples/Iconicus/AndroidManifest.xml
index 16cd19340..f82f3e846 100644
--- a/samples/Iconicus/AndroidManifest.xml
+++ b/samples/Iconicus/AndroidManifest.xml
@@ -23,7 +23,6 @@
     package="com.example.iconicus">
     <uses-permission android:name="android.permission.INTERNET" />
     <application
-        android:name=".IconicusApplication"
         android:allowBackup="true"
         android:icon="@drawable/ic_launcher"
         android:label="@string/app_name"
@@ -58,13 +57,7 @@
             </intent-filter>
         </activity>
         <activity
-            android:name="com.facebook.FacebookActivity"
-            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
-            android:label="@string/app_name"
-            android:theme="@android:style/Theme.Translucent.NoTitleBar" />
-        <activity
-            android:name="com.facebook.CustomTabActivity"
-            android:exported="true">
+            android:name="com.facebook.CustomTabActivity">
             <intent-filter>
                 <action android:name="android.intent.action.VIEW" />
 
diff --git a/samples/Iconicus/BUCK b/samples/Iconicus/BUCK
deleted file mode 100644
index 7d7dfd9fb..000000000
--- a/samples/Iconicus/BUCK
+++ /dev/null
@@ -1,35 +0,0 @@
-android_resource(
-  name = 'res',
-  res = 'res',
-  package = 'com.example.iconicus',
-  deps = [
-    '//facebook:android-sdk',
-  ],
-)
-
-android_library(
-  name = 'lib',
-  srcs = glob(['src/**/*.java']),
-  deps = [
-    ':res',
-    '//facebook:android-sdk',
-    '//libs:android-support-v4',
-  ],
-)
-
-android_binary(
-  name = 'app',
-  manifest = 'AndroidManifest.xml',
-  keystore = '//keystores:debug',
-  package_type = 'debug',
-  deps = [
-    ':lib',
-    '//facebook:android-sdk',
-    '//libs:android-support-v4',
-  ],
-)
-
-project_config(
-  src_target = ':app',
-  src_roots = ['src'],
-)
diff --git a/samples/LoginSample/build.gradle b/samples/LoginSample/build.gradle
new file mode 100644
index 000000000..032dc78c8
--- /dev/null
+++ b/samples/LoginSample/build.gradle
@@ -0,0 +1,47 @@
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
+
+    defaultConfig {
+        applicationId "com.facebook.samples.loginsample"
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+        versionCode 1
+        versionName "1.0"
+    }
+
+    buildTypes {
+        debug {
+            minifyEnabled true
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+        release {
+            minifyEnabled true
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+
+    lintOptions {
+        abortOnError false
+    }
+
+    splits {
+        abi {
+            enable true
+            reset()
+            include 'armeabi', 'armeabi-v7a', 'x86'
+            universalApk true
+        }
+    }
+}
+
+dependencies {
+    compile fileTree(dir: 'libs', include: ['*.jar'])
+    compile project(':facebook')
+    compile 'com.android.support:appcompat-v7:24.1.1'
+    compile 'com.facebook.android:account-kit-sdk:4.+'
+    testCompile 'junit:junit:4.12'
+}
+
diff --git a/samples/LoginSample/proguard-rules.pro b/samples/LoginSample/proguard-rules.pro
new file mode 100644
index 000000000..a8376722c
--- /dev/null
+++ b/samples/LoginSample/proguard-rules.pro
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in /Users/abeatte/resources/android_sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/samples/RPSSample/src/com/example/rps/RpsApplication.java b/samples/LoginSample/src/androidTest/java/com/facebook/samples/loginsample/ApplicationTest.java
similarity index 77%
rename from samples/RPSSample/src/com/example/rps/RpsApplication.java
rename to samples/LoginSample/src/androidTest/java/com/facebook/samples/loginsample/ApplicationTest.java
index f6443f830..3730d148b 100644
--- a/samples/RPSSample/src/com/example/rps/RpsApplication.java
+++ b/samples/LoginSample/src/androidTest/java/com/facebook/samples/loginsample/ApplicationTest.java
@@ -18,18 +18,16 @@
  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  */
 
-package com.example.rps;
+package com.facebook.samples.loginsample;
 
 import android.app.Application;
+import android.test.ApplicationTestCase;
 
-import com.facebook.FacebookSdk;
-import com.facebook.appevents.AppEventsLogger;
-
-public class RpsApplication extends Application {
-    @Override
-    public void onCreate() {
-        super.onCreate();
-        FacebookSdk.sdkInitialize(getApplicationContext());
-        AppEventsLogger.activateApp(this);
+/**
+ * <a href="http://d.android.com/tools/testing/testing_android.html">Testing Fundamentals</a>
+ */
+public class ApplicationTest extends ApplicationTestCase<Application> {
+    public ApplicationTest() {
+        super(Application.class);
     }
 }
diff --git a/samples/LoginSample/src/main/AndroidManifest.xml b/samples/LoginSample/src/main/AndroidManifest.xml
new file mode 100644
index 000000000..b590a02d5
--- /dev/null
+++ b/samples/LoginSample/src/main/AndroidManifest.xml
@@ -0,0 +1,115 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    package="com.facebook.samples.loginsample">
+
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.READ_PHONE_STATE" />
+    <uses-permission android:name="android.permission.RECEIVE_SMS" />
+    <uses-permission android:name="android.permission.GET_ACCOUNTS" />
+
+    <application
+        android:allowBackup="true"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:supportsRtl="true"
+        android:theme="@style/AppTheme">
+
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationId"
+            android:value="@string/facebook_app_id"/>
+
+        <activity android:name=".MainActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+
+        <activity android:label="@string/label_facebook_login"
+            android:name=".facebook.FacebookLoginActivity"/>
+
+        <activity android:name=".facebook.PermissionSelectActivity"/>
+
+        <activity android:label="@string/label_account_kit_login"
+            android:name=".accountkit.AccountKitLoginActivity"/>
+
+        <activity
+            android:name=".accountkit.ErrorActivity"
+            android:label="@string/action_bar_title_hello" />
+
+        <activity
+            android:name=".accountkit.CodeActivity"
+            android:label="@string/action_bar_title_hello" />
+
+        <activity
+            android:name=".accountkit.TokenActivity"
+            android:label="@string/action_bar_title_hello" />
+
+        <!--Account Kit-->
+
+        <activity
+            android:name="com.facebook.CustomTabActivity"
+            android:exported="true">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+                <data android:scheme="@string/fb_login_protocol_scheme" />
+            </intent-filter>
+        </activity>
+
+        <meta-data android:name="com.facebook.accountkit.ApplicationName"
+            android:value="@string/app_name" />
+        <meta-data android:name="com.facebook.sdk.ApplicationId"
+            android:value="@string/facebook_app_id" />
+        <meta-data android:name="com.facebook.accountkit.ClientToken"
+            android:value="@string/ACCOUNT_KIT_CLIENT_TOKEN" />
+
+        <activity
+            android:name="com.facebook.accountkit.ui.AccountKitActivity"
+            android:theme="@style/AppLoginTheme"
+            tools:replace="android:theme">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+                <data android:scheme="@string/ak_login_protocol_scheme" />
+            </intent-filter>
+        </activity>
+
+        <activity android:name="com.facebook.accountkit.ui.AccountKitEmailRedirectActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+
+                <data android:scheme="@string/ak_login_protocol_scheme" />
+            </intent-filter>
+        </activity>
+
+    </application>
+
+</manifest>
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/MainActivity.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/MainActivity.java
new file mode 100644
index 000000000..3fe6ed627
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/MainActivity.java
@@ -0,0 +1,63 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
+import android.view.View;
+import android.widget.Button;
+
+import com.facebook.FacebookSdk;
+import com.facebook.samples.loginsample.accountkit.AccountKitLoginActivity;
+import com.facebook.samples.loginsample.facebook.FacebookLoginActivity;
+
+public class MainActivity extends AppCompatActivity {
+
+    @Override
+    protected void onCreate(final Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+
+        initFacebookLogin();
+        initAccountKitLogin();
+    }
+
+    private void initFacebookLogin() {
+        final Button fbLoginButton = (Button) findViewById(R.id.fb_login_button);
+        fbLoginButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                startActivity(new Intent(MainActivity.this, FacebookLoginActivity.class));
+            }
+        });
+    }
+
+    private void initAccountKitLogin() {
+        final Button akLoginButton = (Button) findViewById(R.id.ak_login_button);
+        akLoginButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                startActivity(new Intent(MainActivity.this, AccountKitLoginActivity.class));
+            }
+        });
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/AccountKitLoginActivity.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/AccountKitLoginActivity.java
new file mode 100644
index 000000000..836b90a36
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/AccountKitLoginActivity.java
@@ -0,0 +1,606 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.Manifest;
+import android.annotation.TargetApi;
+import android.app.AlertDialog;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.pm.PackageManager;
+import android.os.Build;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.v4.content.LocalBroadcastManager;
+import android.support.v7.app.AppCompatActivity;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.CompoundButton;
+import android.widget.LinearLayout;
+import android.widget.Spinner;
+import android.widget.Switch;
+import android.widget.Toast;
+
+import com.facebook.accountkit.AccessToken;
+import com.facebook.accountkit.AccountKit;
+import com.facebook.accountkit.AccountKitError;
+import com.facebook.accountkit.AccountKitLoginResult;
+import com.facebook.accountkit.ui.AccountKitConfiguration;
+import com.facebook.accountkit.ui.ButtonType;
+import com.facebook.accountkit.ui.LoginType;
+import com.facebook.accountkit.ui.TextPosition;
+import com.facebook.samples.loginsample.R;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.UUID;
+
+public class AccountKitLoginActivity extends AppCompatActivity {
+    private static final int FRAMEWORK_REQUEST_CODE = 1;
+
+    private Switch advancedUISwitch;
+    private ButtonType confirmButton;
+    private ButtonType entryButton;
+    private String initialStateParam;
+    private int nextPermissionsRequestCode = 4000;
+    private final Map<Integer, OnCompleteListener> permissionsListeners = new HashMap<>();
+    private int selectedThemeId = -1;
+    private BroadcastReceiver switchLoginTypeReceiver;
+    private TextPosition textPosition;
+
+    private interface OnCompleteListener {
+        void onComplete();
+    }
+
+    @Override
+    protected void onCreate(final Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.account_kit_activity);
+
+        if (AccountKit.getCurrentAccessToken() != null) {
+            showHelloActivity(null);
+        }
+
+        final Spinner themeSpinner = (Spinner) findViewById(R.id.theme_spinner);
+        if (themeSpinner != null) {
+            final ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(
+                    this,
+                    R.array.theme_options,
+                    android.R.layout.simple_spinner_dropdown_item);
+            themeSpinner.setAdapter(adapter);
+            themeSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
+                @Override
+                public void onItemSelected(
+                        final AdapterView<?> parent,
+                        final View view,
+                        final int position,
+                        final long id) {
+                    switch (position) {
+                        case 0:
+                            selectedThemeId = R.style.AppLoginTheme;
+                            break;
+                        case 1:
+                            selectedThemeId = R.style.AppLoginTheme_Salmon;
+                            break;
+                        case 2:
+                            selectedThemeId = R.style.AppLoginTheme_Yellow;
+                            break;
+                        case 3:
+                            selectedThemeId = R.style.AppLoginTheme_Red;
+                            break;
+                        case 4:
+                            selectedThemeId = R.style.AppLoginTheme_Dog;
+                            break;
+                        case 5:
+                            selectedThemeId = R.style.AppLoginTheme_Bicycle;
+                            break;
+                        case 6:
+                            selectedThemeId = R.style.AppLoginTheme_Reverb_A;
+                            advancedUISwitch.setChecked(true);
+                            break;
+                        case 7:
+                            selectedThemeId = R.style.AppLoginTheme_Reverb_B;
+                            advancedUISwitch.setChecked(true);
+                            break;
+                        case 8:
+                            selectedThemeId = R.style.AppLoginTheme_Reverb_C;
+                            advancedUISwitch.setChecked(true);
+                            break;
+                        default:
+                            selectedThemeId = -1;
+                            break;
+                    }
+                }
+
+                @Override
+                public void onNothingSelected(final AdapterView<?> parent) {
+                    selectedThemeId = -1;
+                }
+            });
+        }
+
+        advancedUISwitch = (Switch) findViewById(R.id.advanced_ui_switch);
+
+        final AccountKitLoginActivity thisActivity = this;
+        final LinearLayout advancedUIOptionsLayout =
+                (LinearLayout) findViewById(R.id.advanced_ui_options);
+
+        final List<CharSequence> buttonNames = new ArrayList<>();
+        buttonNames.add("Default");
+        for (ButtonType buttonType : ButtonType.values()) {
+            buttonNames.add(buttonType.name());
+        }
+        final ArrayAdapter<CharSequence> buttonNameAdapter
+                = new ArrayAdapter<>(
+                thisActivity,
+                android.R.layout.simple_spinner_dropdown_item,
+                buttonNames);
+
+        advancedUISwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+                if (isChecked) {
+                    advancedUIOptionsLayout.setVisibility(View.VISIBLE);
+
+                    final Spinner entryButtonSpinner =
+                            (Spinner) findViewById(R.id.entry_button_spinner);
+                    if (entryButtonSpinner != null) {
+                        entryButtonSpinner.setAdapter(buttonNameAdapter);
+                        entryButtonSpinner.setOnItemSelectedListener(
+                                new AdapterView.OnItemSelectedListener() {
+                                    @Override
+                                    public void onItemSelected(
+                                            final AdapterView<?> parent,
+                                            final View view,
+                                            final int position,
+                                            final long id) {
+                                        // First position is empty, so anything past that
+                                        if (position > 0) {
+                                            entryButton = ButtonType.valueOf(
+                                                    entryButtonSpinner
+                                                            .getSelectedItem()
+                                                            .toString());
+                                        } else {
+                                            entryButton = null;
+                                        }
+                                    }
+
+                                    @Override
+                                    public void onNothingSelected(final AdapterView<?> parent) {
+                                        entryButton = null;
+                                    }
+                                });
+                    }
+
+                    final Spinner confirmButtonSpinner =
+                            (Spinner) findViewById(R.id.confirm_button_spinner);
+                    if (confirmButtonSpinner != null) {
+                        confirmButtonSpinner.setAdapter(buttonNameAdapter);
+                        confirmButtonSpinner.setOnItemSelectedListener(
+                                new AdapterView.OnItemSelectedListener() {
+                                    @Override
+                                    public void onItemSelected(
+                                            final AdapterView<?> parent,
+                                            final View view,
+                                            final int position,
+                                            final long id) {
+                                        // First position is empty, so anything past
+                                        // that
+                                        if (position > 0) {
+                                            confirmButton = ButtonType.valueOf(
+                                                    confirmButtonSpinner
+                                                            .getSelectedItem()
+                                                            .toString());
+                                        } else {
+                                            confirmButton = null;
+                                        }
+                                    }
+
+                                    @Override
+                                    public void onNothingSelected(
+                                            final AdapterView<?> parent) {
+                                        confirmButton = null;
+                                    }
+                                });
+                    }
+
+                    final Spinner textPositionSpinner =
+                            (Spinner) findViewById(R.id.text_position_spinner);
+                    if (textPositionSpinner != null) {
+                        final List<CharSequence> textPositions = new ArrayList<>();
+                        textPositions.add("Default");
+                        for (TextPosition textPosition : TextPosition.values()) {
+                            textPositions.add(textPosition.name());
+                        }
+                        final ArrayAdapter<CharSequence> textPositionAdapter
+                                = new ArrayAdapter<>(
+                                thisActivity,
+                                android.R.layout.simple_spinner_dropdown_item,
+                                textPositions);
+
+                        textPositionSpinner.setAdapter(textPositionAdapter);
+                        textPositionSpinner.setOnItemSelectedListener(
+                                new AdapterView.OnItemSelectedListener() {
+                                    @Override
+                                    public void onItemSelected(
+                                            final AdapterView<?> parent,
+                                            final View view,
+                                            final int position,
+                                            final long id) {
+                                        // First position is empty, so anything past
+                                        // that
+                                        if (position > 0) {
+                                            textPosition = TextPosition.valueOf(
+                                                    textPositionSpinner
+                                                            .getSelectedItem()
+                                                            .toString());
+                                        } else {
+                                            textPosition = null;
+                                        }
+                                    }
+
+                                    @Override
+                                    public void onNothingSelected(
+                                            final AdapterView<?> parent) {
+                                        textPosition = null;
+                                    }
+                                });
+                    }
+                } else if (isReverbThemeSelected()) {
+                    advancedUISwitch.setChecked(true);
+                    Toast.makeText(
+                            AccountKitLoginActivity.this,
+                            R.string.reverb_advanced_ui_required,
+                            Toast.LENGTH_LONG)
+                            .show();
+                } else {
+                    advancedUIOptionsLayout.setVisibility(View.GONE);
+                }
+            }
+        });
+    }
+
+    @Override
+    protected void onDestroy() {
+        LocalBroadcastManager.getInstance(getApplicationContext())
+                .unregisterReceiver(switchLoginTypeReceiver);
+
+        super.onDestroy();
+    }
+
+    public void onLoginEmail(final View view) {
+        onLogin(LoginType.EMAIL);
+    }
+
+    public void onLoginPhone(final View view) {
+        onLogin(LoginType.PHONE);
+    }
+
+    @Override
+    protected void onActivityResult(
+            final int requestCode,
+            final int resultCode,
+            final Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+
+        if (requestCode != FRAMEWORK_REQUEST_CODE) {
+            return;
+        }
+
+        final String toastMessage;
+        final AccountKitLoginResult loginResult = AccountKit.loginResultWithIntent(data);
+        if (loginResult == null || loginResult.wasCancelled()) {
+            toastMessage = "Login Cancelled";
+        } else if (loginResult.getError() != null) {
+            toastMessage = loginResult.getError().getErrorType().getMessage();
+            showErrorActivity(loginResult.getError());
+        } else {
+            final AccessToken accessToken = loginResult.getAccessToken();
+            final String authorizationCode = loginResult.getAuthorizationCode();
+            final long tokenRefreshIntervalInSeconds =
+                    loginResult.getTokenRefreshIntervalInSeconds();
+            if (accessToken != null) {
+                toastMessage = "Success:" + accessToken.getAccountId()
+                        + tokenRefreshIntervalInSeconds;
+                showHelloActivity(loginResult.getFinalAuthorizationState());
+            } else if (authorizationCode != null) {
+                toastMessage = String.format(
+                        "Success:%s...",
+                        authorizationCode.substring(0, 10));
+                showHelloActivity(authorizationCode, loginResult.getFinalAuthorizationState());
+            } else {
+                toastMessage = "Unknown response type";
+            }
+        }
+
+        Toast.makeText(
+                this,
+                toastMessage,
+                Toast.LENGTH_LONG)
+                .show();
+    }
+
+    private com.facebook.accountkit.ui.AccountKitActivity.ResponseType getResponseType() {
+        final Switch responseTypeSwitch = (Switch) findViewById(R.id.response_type_switch);
+        if (responseTypeSwitch != null && responseTypeSwitch.isChecked()) {
+            return com.facebook.accountkit.ui.AccountKitActivity.ResponseType.TOKEN;
+        } else {
+            return com.facebook.accountkit.ui.AccountKitActivity.ResponseType.CODE;
+        }
+    }
+
+    private AccountKitConfiguration.AccountKitConfigurationBuilder createAccountKitConfiguration(
+            final LoginType loginType) {
+        AccountKitConfiguration.AccountKitConfigurationBuilder configurationBuilder
+                = new AccountKitConfiguration.AccountKitConfigurationBuilder(
+                loginType,
+                getResponseType());
+        final Switch titleTypeSwitch = (Switch) findViewById(R.id.title_type_switch);
+        final Switch stateParamSwitch = (Switch) findViewById(R.id.state_param_switch);
+        final Switch facebookNotificationsSwitch =
+                (Switch) findViewById(R.id.facebook_notification_switch);
+        final Switch useManualWhiteListBlacklist =
+                (Switch) findViewById(R.id.whitelist_blacklist_switch);
+        final Switch readPhoneStateSwitch =
+                (Switch) findViewById(R.id.read_phone_state_switch);
+        final Switch receiveSMS =
+                (Switch) findViewById(R.id.receive_sms_switch);
+
+        if (titleTypeSwitch != null && titleTypeSwitch.isChecked()) {
+            configurationBuilder
+                    .setTitleType(com.facebook.accountkit.ui.AccountKitActivity.TitleType.APP_NAME);
+        }
+        if (advancedUISwitch != null && advancedUISwitch.isChecked()) {
+            if (isReverbThemeSelected()) {
+                if (switchLoginTypeReceiver == null) {
+                    switchLoginTypeReceiver = new BroadcastReceiver() {
+                        @Override
+                        public void onReceive(final Context context, final Intent intent) {
+                            final String loginTypeString
+                                    = intent.getStringExtra(ReverbUIManager.LOGIN_TYPE_EXTRA);
+                            if (loginTypeString == null) {
+                                return;
+                            }
+                            final LoginType loginType = LoginType.valueOf(loginTypeString);
+                            if (loginType == null) {
+                                return;
+                            }
+                            onLogin(loginType);
+                        }
+                    };
+                    LocalBroadcastManager.getInstance(getApplicationContext())
+                            .registerReceiver(
+                                    switchLoginTypeReceiver,
+                                    new IntentFilter(ReverbUIManager.SWITCH_LOGIN_TYPE_EVENT));
+                }
+                configurationBuilder.setAdvancedUIManager(new ReverbUIManager(
+                        confirmButton,
+                        entryButton,
+                        loginType,
+                        textPosition,
+                        selectedThemeId));
+            } else {
+                configurationBuilder.setAdvancedUIManager(new AccountKitSampleAdvancedUIManager(
+                        confirmButton,
+                        entryButton,
+                        textPosition,
+                        loginType));
+            }
+        }
+        if (stateParamSwitch != null && stateParamSwitch.isChecked()) {
+            initialStateParam = UUID.randomUUID().toString();
+            configurationBuilder.setInitialAuthState(initialStateParam);
+        }
+        if (facebookNotificationsSwitch != null && !facebookNotificationsSwitch.isChecked()) {
+            configurationBuilder.setFacebookNotificationsEnabled(false);
+        }
+        if (selectedThemeId > 0) {
+            configurationBuilder.setTheme(selectedThemeId);
+        }
+        if (useManualWhiteListBlacklist != null && useManualWhiteListBlacklist.isChecked()) {
+            final String[] blackList
+                    = getResources().getStringArray(R.array.blacklistedSmsCountryCodes);
+            final String[] whiteList
+                    = getResources().getStringArray(R.array.whitelistedSmsCountryCodes);
+            configurationBuilder.setSMSBlacklist(blackList);
+            configurationBuilder.setSMSWhitelist(whiteList);
+        }
+        if (readPhoneStateSwitch != null && !(readPhoneStateSwitch.isChecked())) {
+            configurationBuilder.setReadPhoneStateEnabled(false);
+        }
+        if (receiveSMS != null && !receiveSMS.isChecked()) {
+            configurationBuilder.setReceiveSMS(false);
+        }
+
+        return configurationBuilder;
+    }
+
+    private boolean isReverbThemeSelected() {
+        return selectedThemeId == R.style.AppLoginTheme_Reverb_A
+                || selectedThemeId == R.style.AppLoginTheme_Reverb_B
+                || selectedThemeId == R.style.AppLoginTheme_Reverb_C;
+    }
+
+    private void onLogin(final LoginType loginType) {
+        final Intent intent = new Intent(this, com.facebook.accountkit.ui.AccountKitActivity.class);
+        final AccountKitConfiguration.AccountKitConfigurationBuilder configurationBuilder
+                = createAccountKitConfiguration(loginType);
+        final AccountKitConfiguration configuration = configurationBuilder.build();
+        intent.putExtra(
+                com.facebook.accountkit.ui.AccountKitActivity.ACCOUNT_KIT_ACTIVITY_CONFIGURATION,
+                configuration);
+        OnCompleteListener completeListener = new OnCompleteListener() {
+            @Override
+            public void onComplete() {
+                startActivityForResult(intent, FRAMEWORK_REQUEST_CODE);
+            }
+        };
+        switch (loginType) {
+            case EMAIL:
+                final OnCompleteListener getAccountsCompleteListener = completeListener;
+                completeListener = new OnCompleteListener() {
+                    @Override
+                    public void onComplete() {
+                        requestPermissions(
+                                Manifest.permission.GET_ACCOUNTS,
+                                R.string.permissions_get_accounts_title,
+                                R.string.permissions_get_accounts_message,
+                                getAccountsCompleteListener);
+                    }
+                };
+                break;
+            case PHONE:
+                if (configuration.isReceiveSMSEnabled()) {
+                    final OnCompleteListener receiveSMSCompleteListener = completeListener;
+                    completeListener = new OnCompleteListener() {
+                        @Override
+                        public void onComplete() {
+                            requestPermissions(
+                                    Manifest.permission.RECEIVE_SMS,
+                                    R.string.permissions_receive_sms_title,
+                                    R.string.permissions_receive_sms_message,
+                                    receiveSMSCompleteListener);
+                        }
+                    };
+                }
+                if (configuration.isReadPhoneStateEnabled()) {
+                    final OnCompleteListener readPhoneStateCompleteListener = completeListener;
+                    completeListener = new OnCompleteListener() {
+                        @Override
+                        public void onComplete() {
+                            requestPermissions(
+                                    Manifest.permission.READ_PHONE_STATE,
+                                    R.string.permissions_read_phone_state_title,
+                                    R.string.permissions_read_phone_state_message,
+                                    readPhoneStateCompleteListener);
+                        }
+                    };
+                }
+                break;
+        }
+        completeListener.onComplete();
+    }
+
+    private void showHelloActivity(final String finalState) {
+        final Intent intent = new Intent(this, TokenActivity.class);
+        intent.putExtra(
+                TokenActivity.HELLO_TOKEN_ACTIVITY_INITIAL_STATE_EXTRA,
+                initialStateParam);
+        intent.putExtra(TokenActivity.HELLO_TOKEN_ACTIVITY_FINAL_STATE_EXTRA, finalState);
+        startActivity(intent);
+    }
+
+    private void showHelloActivity(final String code, final String finalState) {
+        final Intent intent = new Intent(this, CodeActivity.class);
+        intent.putExtra(CodeActivity.HELLO_CODE_ACTIVITY_CODE_EXTRA, code);
+        intent.putExtra(
+                CodeActivity.HELLO_CODE_ACTIVITY_INITIAL_STATE_EXTRA,
+                initialStateParam);
+        intent.putExtra(CodeActivity.HELLO_CODE_ACTIVITY_FINAL_STATE_EXTRA, finalState);
+
+        startActivity(intent);
+    }
+
+    private void showErrorActivity(final AccountKitError error) {
+        final Intent intent = new Intent(this, ErrorActivity.class);
+        intent.putExtra(ErrorActivity.HELLO_TOKEN_ACTIVITY_ERROR_EXTRA, error);
+
+        startActivity(intent);
+    }
+
+    private void requestPermissions(
+            final String permission,
+            final int rationaleTitleResourceId,
+            final int rationaleMessageResourceId,
+            final OnCompleteListener listener) {
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
+            if (listener != null) {
+                listener.onComplete();
+            }
+            return;
+        }
+
+        checkRequestPermissions(
+                permission,
+                rationaleTitleResourceId,
+                rationaleMessageResourceId,
+                listener);
+    }
+
+    @TargetApi(23)
+    private void checkRequestPermissions(
+            final String permission,
+            final int rationaleTitleResourceId,
+            final int rationaleMessageResourceId,
+            final OnCompleteListener listener) {
+        if (checkSelfPermission(permission) == PackageManager.PERMISSION_GRANTED) {
+            if (listener != null) {
+                listener.onComplete();
+            }
+            return;
+        }
+
+        final int requestCode = nextPermissionsRequestCode++;
+        permissionsListeners.put(requestCode, listener);
+
+        if (shouldShowRequestPermissionRationale(permission)) {
+            new AlertDialog.Builder(this)
+                    .setTitle(rationaleTitleResourceId)
+                    .setMessage(rationaleMessageResourceId)
+                    .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(final DialogInterface dialog, final int which) {
+                            requestPermissions(new String[] { permission }, requestCode);
+                        }
+                    })
+                    .setNegativeButton(android.R.string.no, new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(final DialogInterface dialog, final int which) {
+                            // ignore and clean up the listener
+                            permissionsListeners.remove(requestCode);
+                        }
+                    })
+                    .setIcon(android.R.drawable.ic_dialog_alert)
+                    .show();
+        } else {
+            requestPermissions(new String[]{ permission }, requestCode);
+        }
+    }
+
+    @TargetApi(23)
+    @SuppressWarnings("unused")
+    @Override
+    public void onRequestPermissionsResult(final int requestCode,
+                                           final @NonNull String permissions[],
+                                           final @NonNull int[] grantResults) {
+        final OnCompleteListener permissionsListener = permissionsListeners.remove(requestCode);
+        if (permissionsListener != null
+                && grantResults.length > 0
+                && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+            permissionsListener.onComplete();
+        }
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/AccountKitSampleAdvancedUIManager.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/AccountKitSampleAdvancedUIManager.java
new file mode 100644
index 000000000..37a128079
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/AccountKitSampleAdvancedUIManager.java
@@ -0,0 +1,255 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Fragment;
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.support.annotation.Nullable;
+import android.view.View;
+
+import com.facebook.accountkit.AccountKitError;
+import com.facebook.accountkit.ui.AdvancedUIManager;
+import com.facebook.accountkit.ui.ButtonType;
+import com.facebook.accountkit.ui.LoginFlowState;
+import com.facebook.accountkit.ui.LoginType;
+import com.facebook.accountkit.ui.TextPosition;
+import com.facebook.samples.loginsample.R;
+
+public class AccountKitSampleAdvancedUIManager implements AdvancedUIManager, Parcelable {
+    private static final int ACTION_BAR_HEIGHT = 40;
+    private static final int BODY_HEIGHT = 80;
+    private static final int FOOTER_HEIGHT = 120;
+    private static final int HEADER_HEIGHT = 80;
+
+    private final ButtonType confirmButton;
+    private final ButtonType entryButton;
+    private AccountKitError error;
+    private LoginType loginType;
+    private AdvancedUIManagerListener listener;
+    private final TextPosition textPosition;
+
+    public AccountKitSampleAdvancedUIManager(
+            final ButtonType confirmButton,
+            final ButtonType entryButton,
+            final TextPosition textPosition,
+            final LoginType loginType) {
+        this.confirmButton = confirmButton;
+        this.entryButton = entryButton;
+        this.textPosition = textPosition;
+        this.loginType = loginType;
+    }
+
+    @Override
+    @Nullable
+    public Fragment getActionBarFragment(final LoginFlowState state) {
+        final PlaceholderFragment fragment = getPlaceholderFragment(
+                state,
+                ACTION_BAR_HEIGHT,
+                "Action Bar");
+        if (fragment != null) {
+            fragment.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(final View v) {
+                    listener.onBack();
+                }
+            });
+        }
+        return fragment;
+    }
+
+    @Override
+    @Nullable
+    public Fragment getBodyFragment(final LoginFlowState state) {
+        return getPlaceholderFragment(state, BODY_HEIGHT, "Body");
+    }
+
+    @Override
+    @Nullable
+    public ButtonType getButtonType(final LoginFlowState state) {
+        switch (state) {
+            case PHONE_NUMBER_INPUT:
+            case EMAIL_INPUT:
+                return entryButton;
+            case CODE_INPUT:
+            case CONFIRM_ACCOUNT_VERIFIED:
+                return confirmButton;
+            default:
+                return null;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Fragment getFooterFragment(final LoginFlowState state) {
+        return getPlaceholderFragment(state, FOOTER_HEIGHT, "Footer");
+    }
+
+    @Override
+    @Nullable
+    public Fragment getHeaderFragment(final LoginFlowState state) {
+        if (state != LoginFlowState.ERROR) {
+            return getPlaceholderFragment(state, HEADER_HEIGHT, "Header");
+        }
+        final String errorMessage = getErrorMessage();
+        if (errorMessage == null) {
+            return PlaceholderFragment.create(HEADER_HEIGHT, R.string.error_message);
+        } else {
+            return PlaceholderFragment.create(HEADER_HEIGHT, errorMessage);
+        }
+    }
+
+    @Override
+    @Nullable
+    public TextPosition getTextPosition(final LoginFlowState state) {
+        return textPosition;
+    }
+
+    @Override
+    public void setAdvancedUIManagerListener(final AdvancedUIManagerListener listener) {
+        this.listener = listener;
+    }
+
+    @Override
+    public void onError(final AccountKitError error) {
+        this.error = error;
+    }
+
+    private String getErrorMessage() {
+        if (error == null) {
+            return null;
+        }
+
+        final String message = error.getUserFacingMessage();
+        if (message == null) {
+            return null;
+        }
+
+        return message;
+    }
+
+    @Nullable
+    private PlaceholderFragment getPlaceholderFragment(
+            final LoginFlowState state,
+            final int height,
+            final String suffix) {
+        final String prefix;
+        switch (state) {
+            case PHONE_NUMBER_INPUT:
+                prefix = "Custom Phone Number ";
+                break;
+            case EMAIL_INPUT:
+                prefix = "Custom Email ";
+                break;
+            case ACCOUNT_VERIFIED:
+                prefix = "Custom Account Verified ";
+                break;
+            case CONFIRM_ACCOUNT_VERIFIED:
+                prefix = "Custom Confirm Account Verified ";
+                break;
+            case CONFIRM_INSTANT_VERIFICATION_LOGIN:
+                prefix = "Custom Confirm Instant Verification Login ";
+                break;
+            case EMAIL_VERIFY:
+                prefix = "Custom Email Verify ";
+                break;
+            case SENDING_CODE:
+                switch (loginType) {
+                    case EMAIL:
+                        prefix = "Custom Sending Email ";
+                        break;
+                    case PHONE:
+                        prefix = "Custom Sending Code ";
+                        break;
+                    default:
+                        return null;
+                }
+                break;
+            case SENT_CODE:
+                switch (loginType) {
+                    case EMAIL:
+                        prefix = "Custom Sent Email ";
+                        break;
+                    case PHONE:
+                        prefix = "Custom Sent Code ";
+                        break;
+                    default:
+                        return null;
+                }
+                break;
+            case CODE_INPUT:
+                prefix = "Custom Code Input ";
+                break;
+            case VERIFYING_CODE:
+                prefix = "Custom Verifying ";
+                break;
+            case VERIFIED:
+                prefix = "Custom Verified ";
+                break;
+            case RESEND:
+                prefix = "Custom Resend ";
+                break;
+            case ERROR:
+                prefix = "Custom Error ";
+                break;
+            default:
+                return null;
+        }
+        return PlaceholderFragment.create(height, prefix.concat(suffix));
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(final Parcel dest, final int flags) {
+        dest.writeString(confirmButton != null ? confirmButton.name() : null);
+        dest.writeString(entryButton != null ? entryButton.name() : null);
+        dest.writeString(textPosition != null ? textPosition.name() : null);
+        dest.writeString(loginType.name());
+    }
+
+    public static final Creator<AccountKitSampleAdvancedUIManager> CREATOR
+            = new Creator<AccountKitSampleAdvancedUIManager>() {
+        @Override
+        public AccountKitSampleAdvancedUIManager createFromParcel(final Parcel source) {
+            String s = source.readString();
+            final ButtonType confirmButton = s == null ? null : ButtonType.valueOf(s);
+            s = source.readString();
+            final ButtonType entryButton = s == null ? null : ButtonType.valueOf(s);
+            s = source.readString();
+            final TextPosition textPosition = s == null ? null : TextPosition.valueOf(s);
+            final LoginType loginType = LoginType.valueOf(source.readString());
+            return new AccountKitSampleAdvancedUIManager(
+                    confirmButton,
+                    entryButton,
+                    textPosition,
+                    loginType);
+        }
+
+        @Override
+        public AccountKitSampleAdvancedUIManager[] newArray(final int size) {
+            return new AccountKitSampleAdvancedUIManager[size];
+        }
+    };
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/CodeActivity.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/CodeActivity.java
new file mode 100644
index 000000000..f679d79ff
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/CodeActivity.java
@@ -0,0 +1,88 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.facebook.accountkit.AccountKit;
+import com.facebook.samples.loginsample.R;
+
+public class CodeActivity extends Activity {
+    static final String HELLO_CODE_ACTIVITY_CODE_EXTRA = "HELLO_CODE_ACTIVITY_CODE_EXTRA";
+    static final String HELLO_CODE_ACTIVITY_FINAL_STATE_EXTRA =
+            "HELLO_CODE_ACTIVITY_FINAL_STATE_EXTRA";
+    static final String HELLO_CODE_ACTIVITY_INITIAL_STATE_EXTRA =
+            "HELLO_CODE_ACTIVITY_INITIAL_STATE_EXTRA";
+
+    @Override
+    public void onCreate(final Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_hello_code);
+
+        final String code = getIntent().getStringExtra(HELLO_CODE_ACTIVITY_CODE_EXTRA);
+        final String finalState =
+                getIntent().getStringExtra(HELLO_CODE_ACTIVITY_FINAL_STATE_EXTRA);
+        final String initialState =
+                getIntent().getStringExtra(HELLO_CODE_ACTIVITY_INITIAL_STATE_EXTRA);
+
+        if (code != null) {
+            final TextView codeView = (TextView) findViewById(R.id.code);
+            if (codeView != null) {
+                codeView.setText(code);
+            }
+        }
+
+        if (initialState != null) {
+            final TextView initialStateView = (TextView) findViewById(R.id.initial_state);
+            final TextView initialStateLabelView =
+                    (TextView) findViewById(R.id.initial_state_label);
+            if (initialStateView != null && initialStateLabelView != null) {
+                initialStateView.setText(initialState);
+                initialStateView.setVisibility(View.VISIBLE);
+                initialStateLabelView.setVisibility(View.VISIBLE);
+            }
+        }
+
+        if (finalState != null) {
+            final TextView finalStateView = (TextView) findViewById(R.id.final_state);
+            final TextView finalStateLabelView =
+                    (TextView) findViewById(R.id.final_state_label);
+            if (finalStateView != null && finalStateLabelView != null) {
+                finalStateView.setText(finalState);
+                finalStateView.setVisibility(View.VISIBLE);
+                finalStateLabelView.setVisibility(View.VISIBLE);
+            }
+        }
+
+        final Button signOut = (Button) findViewById(R.id.log_out_button);
+        signOut.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                AccountKit.logOut();
+                finish();
+            }
+        });
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ErrorActivity.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ErrorActivity.java
new file mode 100644
index 000000000..3aefa408c
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ErrorActivity.java
@@ -0,0 +1,63 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.facebook.accountkit.AccountKit;
+import com.facebook.accountkit.AccountKitError;
+import com.facebook.samples.loginsample.R;
+
+public class ErrorActivity extends Activity {
+    static final String HELLO_TOKEN_ACTIVITY_ERROR_EXTRA =
+            "HELLO_TOKEN_ACTIVITY_ERROR_EXTRA";
+
+    @Override
+    public void onCreate(final Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_error);
+
+        final Button signOut = (Button) findViewById(R.id.log_out_button);
+        signOut.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                AccountKit.logOut();
+                finish();
+            }
+        });
+
+        final AccountKitError error =
+                getIntent().getParcelableExtra(HELLO_TOKEN_ACTIVITY_ERROR_EXTRA);
+
+        final TextView errorView = (TextView) findViewById(R.id.error);
+        if (errorView != null) {
+            if (error != null) {
+                errorView.setText(error.toString());
+            } else {
+                errorView.setText(R.string.na);
+            }
+        }
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/InflateFragment.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/InflateFragment.java
new file mode 100644
index 000000000..ffe5a5241
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/InflateFragment.java
@@ -0,0 +1,62 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.annotation.TargetApi;
+import android.app.Activity;
+import android.app.Fragment;
+import android.content.Context;
+import android.os.Bundle;
+import android.util.AttributeSet;
+import com.facebook.samples.loginsample.R;
+
+@SuppressWarnings("All")
+class InflateFragment extends Fragment {
+    @TargetApi(11)
+    @Override
+    public void onInflate(final AttributeSet attrs, final Bundle savedInstanceState) {
+        super.onInflate(attrs, savedInstanceState);
+        handleAttributes(attrs);
+    }
+
+    @TargetApi(21)
+    @Override
+    public void onInflate(
+            final Activity activity,
+            final AttributeSet attrs,
+            final Bundle savedInstanceState) {
+        super.onInflate(activity, attrs, savedInstanceState);
+        handleAttributes(attrs);
+    }
+
+    @TargetApi(23)
+    @Override
+    public void onInflate(
+            final Context context,
+            final AttributeSet attrs,
+            final Bundle savedInstanceState) {
+        super.onInflate(context, attrs, savedInstanceState);
+        handleAttributes(attrs);
+    }
+
+    protected void handleAttributes(final AttributeSet attrs) {
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/PlaceholderFragment.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/PlaceholderFragment.java
new file mode 100644
index 000000000..d15c55865
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/PlaceholderFragment.java
@@ -0,0 +1,105 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Fragment;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.util.TypedValue;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+import com.facebook.samples.loginsample.R;
+
+public class PlaceholderFragment extends Fragment {
+    private static final String HEIGHT_KEY = "height";
+    private static final String TEXT_KEY = "text";
+    private static final String TEXT_RESOURCE_ID_KEY = "textResourceId";
+
+    private View.OnClickListener onClickListener;
+
+    public static PlaceholderFragment create(final int height, final String text) {
+        final PlaceholderFragment fragment = new PlaceholderFragment();
+        final Bundle arguments = new Bundle();
+        arguments.putInt(HEIGHT_KEY, height);
+        arguments.putString(TEXT_KEY, text);
+        fragment.setArguments(arguments);
+        return fragment;
+    }
+
+    public static PlaceholderFragment create(final int height, final int textResourceId) {
+        final PlaceholderFragment fragment = new PlaceholderFragment();
+        final Bundle arguments = new Bundle();
+        arguments.putInt(HEIGHT_KEY, height);
+        arguments.putInt(TEXT_RESOURCE_ID_KEY, textResourceId);
+        fragment.setArguments(arguments);
+        return fragment;
+    }
+
+    public void setOnClickListener(final View.OnClickListener onClickListener) {
+        this.onClickListener = onClickListener;
+        final View view = getView();
+        if (view != null) {
+            view.setOnClickListener(onClickListener);
+        }
+    }
+
+    @Nullable
+    @Override
+    public View onCreateView(
+            final LayoutInflater inflater,
+            final ViewGroup container,
+            @Nullable final Bundle savedInstanceState) {
+        View view = super.onCreateView(inflater, container, savedInstanceState);
+        if (view == null) {
+            view = inflater.inflate(R.layout.fragment_placeholder, container, false);
+        }
+
+        final Bundle arguments = getArguments();
+        if (arguments != null) {
+            final int height = arguments.getInt(HEIGHT_KEY, -1);
+            if (height >= 0) {
+                view.getLayoutParams().height = (int) TypedValue.applyDimension(
+                        TypedValue.COMPLEX_UNIT_DIP,
+                        height,
+                        getResources().getDisplayMetrics());
+            }
+
+            final String text = arguments.getString(TEXT_KEY);
+            final int textResourceId = arguments.getInt(TEXT_RESOURCE_ID_KEY, -1);
+            final TextView textView = (TextView) view.findViewById(R.id.text_view);
+            if (textView != null) {
+                if (text != null) {
+                    textView.setText(text);
+                } else if (textResourceId > 0) {
+                    textView.setText(textResourceId);
+                }
+            }
+        }
+
+        if (onClickListener != null) {
+            view.setOnClickListener(onClickListener);
+        }
+
+        return view;
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbActionBarFragment.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbActionBarFragment.java
new file mode 100644
index 000000000..7b11d49a9
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbActionBarFragment.java
@@ -0,0 +1,125 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Fragment;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import com.facebook.accountkit.ui.LoginFlowState;
+import com.facebook.samples.loginsample.R;
+
+public class ReverbActionBarFragment extends Fragment {
+    private static final String STATE_KEY = "state";
+
+    private LoginFlowState state = LoginFlowState.NONE;
+
+    public void setState(final LoginFlowState state) {
+        if (state == null) {
+            return;
+        }
+        this.state = state;
+        updateTitleView(getView());
+    }
+
+    @Nullable
+    @Override
+    public View onCreateView(
+            final LayoutInflater inflater,
+            final ViewGroup container,
+            final Bundle savedInstanceState) {
+        if (savedInstanceState != null) {
+            final String stateString = savedInstanceState.getString(STATE_KEY);
+            state = stateString == null ? state : LoginFlowState.valueOf(stateString);
+        }
+
+        View view = super.onCreateView(inflater, container, savedInstanceState);
+        if (view == null) {
+            view = inflater.inflate(R.layout.fragment_reverb_action_bar, container, false);
+        }
+        if (view == null) {
+            return null;
+        }
+        updateTitleView(view);
+        return view;
+    }
+
+    @Override
+    public void onSaveInstanceState(final Bundle outState) {
+        super.onSaveInstanceState(outState);
+
+        outState.putString(STATE_KEY, state.name());
+    }
+
+    private void updateTitleView(@Nullable final View view) {
+        if (view == null || state == null) {
+            return;
+        }
+        final TextView titleView = (TextView) view.findViewById(R.id.title_view);
+        if (titleView != null) {
+            switch (state) {
+                case PHONE_NUMBER_INPUT:
+                    titleView.setText(R.string.reverb_title_phone_number_input);
+                    break;
+                case EMAIL_INPUT:
+                    titleView.setText(R.string.reverb_title_email_input);
+                    break;
+                case SENDING_CODE:
+                    titleView.setText(R.string.reverb_title_sending_code);
+                    break;
+                case SENT_CODE:
+                    titleView.setText(R.string.reverb_title_sent_code);
+                    break;
+                case ACCOUNT_VERIFIED:
+                    titleView.setText(R.string.reverb_title_account_verified);
+                    break;
+                case CODE_INPUT:
+                    titleView.setText(R.string.reverb_title_code_input);
+                    break;
+                case EMAIL_VERIFY:
+                    titleView.setText(R.string.reverb_title_email_verify);
+                    break;
+                case CONFIRM_ACCOUNT_VERIFIED:
+                    titleView.setText(R.string.reverb_title_account_verified);
+                    break;
+                case VERIFYING_CODE:
+                    titleView.setText(R.string.reverb_title_verifying_code);
+                    break;
+                case CONFIRM_INSTANT_VERIFICATION_LOGIN:
+                    titleView.setText(R.string.reverb_title_logging_in);
+                    break;
+                case VERIFIED:
+                    titleView.setText(R.string.reverb_title_verified);
+                    break;
+                case RESEND:
+                    titleView.setText(R.string.reverb_title_resend);
+                    break;
+                case ERROR:
+                    titleView.setText(R.string.reverb_title_error);
+                    break;
+            }
+        }
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbBodyFragment.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbBodyFragment.java
new file mode 100644
index 000000000..b67ba4bfd
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbBodyFragment.java
@@ -0,0 +1,96 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Fragment;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import com.facebook.samples.loginsample.R;
+
+public class ReverbBodyFragment extends Fragment {
+    private static final String ICON_RESOURCE_ID_KEY = "iconResourceId";
+    private static final String SHOW_PROGRESS_SPINNER_KEY = "showProgressSpinner";
+
+    private int iconResourceId = 0;
+    private boolean showProgressSpinner;
+
+    public void setIconResourceId(final int iconResourceId) {
+        this.iconResourceId = iconResourceId;
+        updateIcon(getView());
+    }
+
+    public void setShowProgressSpinner(final boolean showProgressSpinner) {
+        this.showProgressSpinner = showProgressSpinner;
+        updateIcon(getView());
+    }
+
+    public View onCreateView(
+            final LayoutInflater inflater,
+            final ViewGroup container,
+            final Bundle savedInstanceState) {
+        if (savedInstanceState != null) {
+            iconResourceId = savedInstanceState.getInt(ICON_RESOURCE_ID_KEY, iconResourceId);
+            showProgressSpinner = savedInstanceState.getBoolean(
+                    SHOW_PROGRESS_SPINNER_KEY,
+                    showProgressSpinner);
+        }
+
+        View view = super.onCreateView(inflater, container, savedInstanceState);
+        if (view == null) {
+            view = inflater.inflate(R.layout.fragment_reverb_body, container, false);
+        }
+        updateIcon(view);
+        return view;
+    }
+
+    @Override
+    public void onSaveInstanceState(final Bundle outState) {
+        super.onSaveInstanceState(outState);
+
+        outState.putInt(ICON_RESOURCE_ID_KEY, iconResourceId);
+        outState.putBoolean(SHOW_PROGRESS_SPINNER_KEY, showProgressSpinner);
+    }
+
+    private void updateIcon(@Nullable final View view) {
+        if (view == null) {
+            return;
+        }
+
+        final View progressSpinner = view.findViewById(R.id.reverb_progress_spinner);
+        if (progressSpinner != null) {
+            progressSpinner.setVisibility(showProgressSpinner ? View.VISIBLE : View.GONE);
+        }
+
+        final ImageView iconView = (ImageView) view.findViewById(R.id.reverb_icon);
+        if (iconView != null) {
+            if (iconResourceId > 0) {
+                iconView.setImageResource(iconResourceId);
+                iconView.setVisibility(View.VISIBLE);
+            } else {
+                iconView.setVisibility(View.GONE);
+            }
+        }
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbFooterFragment.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbFooterFragment.java
new file mode 100644
index 000000000..e85f85f36
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbFooterFragment.java
@@ -0,0 +1,175 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Fragment;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+
+import com.facebook.accountkit.ui.LoginType;
+import com.facebook.samples.loginsample.R;
+
+public class ReverbFooterFragment extends Fragment {
+    private static final String LOGIN_TYPE_KEY = "loginType";
+    private static final String PROGRESS_KEY = "progress";
+    private static final String PROGRESS_TYPE_KEY = "progressType";
+
+    public enum ProgressType {
+        BAR,
+        DOTS,
+    }
+
+    public interface OnSwitchLoginTypeListener {
+        void onSwitchLoginType();
+    }
+
+    private LoginType loginType;
+    private OnSwitchLoginTypeListener onSwitchLoginTypeListener;
+    private int progress = 0;
+    private ProgressType progressType = ProgressType.BAR;
+
+    public void setLoginType(final LoginType loginType) {
+        if (loginType == null) {
+            return;
+        }
+        this.loginType = loginType;
+        updateButtonText(getView());
+    }
+
+    public void setOnSwitchLoginTypeListener(
+            final OnSwitchLoginTypeListener onSwitchLoginTypeListener) {
+        this.onSwitchLoginTypeListener = onSwitchLoginTypeListener;
+        updateSwitchLoginTypeListener(getView());
+    }
+
+    public void setProgress(final int progress) {
+        this.progress = progress;
+        updateProgress(getView());
+    }
+
+    public void setProgressType(final ProgressType progressType) {
+        if (progressType == null) {
+            return;
+        }
+        this.progressType = progressType;
+    }
+
+    public View onCreateView(
+            final LayoutInflater inflater,
+            final ViewGroup container,
+            final Bundle savedInstanceState) {
+        if (savedInstanceState != null) {
+            final String loginTypeString = savedInstanceState.getString(LOGIN_TYPE_KEY);
+            loginType = loginTypeString == null ? loginType : LoginType.valueOf(loginTypeString);
+            progress = savedInstanceState.getInt(PROGRESS_KEY, progress);
+            final String progressTypeString = savedInstanceState.getString(PROGRESS_TYPE_KEY);
+            progressType = progressTypeString == null
+                    ? progressType
+                    : ProgressType.valueOf(progressTypeString);
+        }
+
+        View view = super.onCreateView(inflater, container, savedInstanceState);
+        if (view == null) {
+            final int layoutResourceId;
+            switch (progressType) {
+                case DOTS:
+                    layoutResourceId = R.layout.fragment_reverb_footer_dots;
+                    break;
+                case BAR:
+                default:
+                    layoutResourceId = R.layout.fragment_reverb_footer_bar;
+                    break;
+            }
+            view = inflater.inflate(layoutResourceId, container, false);
+        }
+        updateButtonText(view);
+        updateProgress(view);
+        updateSwitchLoginTypeListener(view);
+        return view;
+    }
+
+    @Override
+    public void onSaveInstanceState(final Bundle outState) {
+        super.onSaveInstanceState(outState);
+
+        outState.putString(LOGIN_TYPE_KEY, loginType == null ? null : loginType.name());
+        outState.putInt(PROGRESS_KEY, progress);
+        outState.putString(PROGRESS_TYPE_KEY, progressType.name());
+    }
+
+    private void updateButtonText(@Nullable final View view) {
+        if (view == null) {
+            return;
+        }
+        final TextView switchLoginTypeButton
+                = (TextView) view.findViewById(R.id.switch_login_type_button);
+        if (switchLoginTypeButton == null) {
+            return;
+        }
+        if (loginType == null) {
+            switchLoginTypeButton.setVisibility(View.GONE);
+            return;
+        }
+        switch (loginType) {
+            case EMAIL:
+                switchLoginTypeButton.setText(R.string.reverb_switch_login_type_email);
+                break;
+            case PHONE:
+                switchLoginTypeButton.setText(R.string.reverb_switch_login_type_phone);
+                break;
+        }
+        switchLoginTypeButton.setVisibility(View.VISIBLE);
+    }
+
+    private void updateProgress(@Nullable final View view) {
+        if (view == null) {
+            return;
+        }
+
+        final ProgressBar progressBar = (ProgressBar) view.findViewById(R.id.reverb_progress_bar);
+        if (progressBar != null) {
+            progressBar.setProgress(progress);
+        }
+    }
+
+    private void updateSwitchLoginTypeListener(@Nullable final View view) {
+        if (view == null || onSwitchLoginTypeListener == null) {
+            return;
+        }
+        final View switchLoginTypeButton = view.findViewById(R.id.switch_login_type_button);
+        if (switchLoginTypeButton == null) {
+            return;
+        }
+        switchLoginTypeButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(final View v) {
+                if (onSwitchLoginTypeListener != null) {
+                    onSwitchLoginTypeListener.onSwitchLoginType();
+                }
+            }
+        });
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbUIManager.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbUIManager.java
new file mode 100644
index 000000000..038af7a37
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbUIManager.java
@@ -0,0 +1,277 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Activity;
+import android.app.Fragment;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.support.annotation.Nullable;
+import android.support.v4.content.LocalBroadcastManager;
+
+import com.facebook.accountkit.AccountKitError;
+import com.facebook.accountkit.ui.AdvancedUIManager;
+import com.facebook.accountkit.ui.ButtonType;
+import com.facebook.accountkit.ui.LoginFlowState;
+import com.facebook.accountkit.ui.LoginType;
+import com.facebook.accountkit.ui.TextPosition;
+import com.facebook.samples.loginsample.R;
+
+public class ReverbUIManager implements AdvancedUIManager, Parcelable {
+    public static final String LOGIN_TYPE_EXTRA = "loginType";
+    public static final String SWITCH_LOGIN_TYPE_EVENT = "switch-login-type";
+
+    private final ButtonType confirmButton;
+    private final ButtonType entryButton;
+    private AdvancedUIManagerListener listener;
+    private final LoginType loginType;
+    private final TextPosition textPosition;
+    private final int themeResourceId;
+
+    public ReverbUIManager(
+            final ButtonType confirmButton,
+            final ButtonType entryButton,
+            final LoginType loginType,
+            final TextPosition textPosition,
+            final int themeResourceId) {
+        this.confirmButton = confirmButton;
+        this.entryButton = entryButton;
+        this.loginType = loginType;
+        this.textPosition = textPosition;
+        this.themeResourceId = themeResourceId;
+    }
+
+    @Override
+    @Nullable
+    public  Fragment getActionBarFragment(final LoginFlowState state) {
+        final ReverbActionBarFragment fragment = new ReverbActionBarFragment();
+        fragment.setState(state);
+        return fragment;
+    }
+
+    @Override
+    @Nullable
+    public Fragment getBodyFragment(final LoginFlowState state) {
+        int iconResourceId = 0;
+        boolean showProgressSpinner = false;
+        switch (state) {
+            case SENDING_CODE:
+                showProgressSpinner = true;
+                break;
+            case SENT_CODE:
+                switch (loginType) {
+                    case EMAIL:
+                        iconResourceId = R.drawable.reverb_email;
+                        break;
+                    case PHONE:
+                        iconResourceId = R.drawable.reverb_progress_complete;
+                        break;
+                }
+                break;
+            case EMAIL_VERIFY:
+                iconResourceId = R.drawable.reverb_email_sent;
+                break;
+            case VERIFYING_CODE:
+            case CONFIRM_INSTANT_VERIFICATION_LOGIN:
+                showProgressSpinner = true;
+                break;
+            case VERIFIED:
+                iconResourceId = R.drawable.reverb_progress_complete;
+                break;
+            case ERROR:
+                iconResourceId = R.drawable.reverb_error;
+                break;
+            case PHONE_NUMBER_INPUT:
+            case EMAIL_INPUT:
+            case CODE_INPUT:
+            case CONFIRM_ACCOUNT_VERIFIED:
+            case RESEND:
+            case NONE:
+            default:
+                return null;
+        }
+        final ReverbBodyFragment fragment = new ReverbBodyFragment();
+        fragment.setIconResourceId(iconResourceId);
+        fragment.setShowProgressSpinner(showProgressSpinner);
+        return fragment;
+    }
+
+    @Override
+    @Nullable
+    public ButtonType getButtonType(final LoginFlowState state) {
+        switch (state) {
+            case PHONE_NUMBER_INPUT:
+            case EMAIL_INPUT:
+                return entryButton;
+            case CODE_INPUT:
+            case CONFIRM_ACCOUNT_VERIFIED:
+                return confirmButton;
+            default:
+                return null;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Fragment getFooterFragment(final LoginFlowState state) {
+        final int progress;
+        switch (state) {
+            case PHONE_NUMBER_INPUT:
+            case EMAIL_INPUT:
+                progress = 1;
+                break;
+            case SENDING_CODE:
+            case SENT_CODE:
+                progress = 2;
+                break;
+            case CODE_INPUT:
+            case EMAIL_VERIFY:
+            case CONFIRM_ACCOUNT_VERIFIED:
+                progress = 3;
+                break;
+            case VERIFYING_CODE:
+            case CONFIRM_INSTANT_VERIFICATION_LOGIN:
+                progress = 4;
+                break;
+            case VERIFIED:
+                progress = 5;
+                break;
+            case RESEND:
+            case ERROR:
+            case NONE:
+            default:
+                return null;
+        }
+        final ReverbFooterFragment fragment = new ReverbFooterFragment();
+        if (progress == 1) {
+            fragment.setLoginType(loginType);
+            fragment.setOnSwitchLoginTypeListener(
+                    new ReverbFooterFragment.OnSwitchLoginTypeListener() {
+                        @Override
+                        public void onSwitchLoginType() {
+                            if (listener == null) {
+                                return;
+                            }
+
+                            listener.onCancel();
+
+                            final Activity activity = fragment.getActivity();
+                            if (activity == null) {
+                                return;
+                            }
+                            final Context applicationContext = activity.getApplicationContext();
+                            final LoginType newLoginType;
+                            switch (loginType) {
+                                case EMAIL:
+                                    newLoginType = LoginType.PHONE;
+                                    break;
+                                case PHONE:
+                                    newLoginType = LoginType.EMAIL;
+                                    break;
+                                default:
+                                    return;
+                            }
+                            LocalBroadcastManager
+                                    .getInstance(applicationContext)
+                                    .sendBroadcast(new Intent(SWITCH_LOGIN_TYPE_EVENT)
+                                            .putExtra(LOGIN_TYPE_EXTRA, newLoginType.name()));
+                        }
+                    });
+        }
+        if (themeResourceId == R.style.AppLoginTheme_Reverb_A) {
+            fragment.setProgressType(ReverbFooterFragment.ProgressType.BAR);
+        } else if (themeResourceId == R.style.AppLoginTheme_Reverb_B
+                || themeResourceId == R.style.AppLoginTheme_Reverb_C) {
+            fragment.setProgressType(ReverbFooterFragment.ProgressType.DOTS);
+        }
+        fragment.setProgress(progress);
+        return fragment;
+    }
+
+    @Override
+    @Nullable
+    public Fragment getHeaderFragment(final LoginFlowState state) {
+        if (state == LoginFlowState.ERROR) {
+            return null;
+        } else {
+            return SpaceFragment.create(
+                    R.styleable.Theme_AccountKitSample_Style_reverb_content_margin_top);
+        }
+    }
+
+    @Override
+    @Nullable
+    public TextPosition getTextPosition(final LoginFlowState state) {
+        return textPosition == null ? TextPosition.ABOVE_BODY : textPosition;
+    }
+
+    @Override
+    public void setAdvancedUIManagerListener(final AdvancedUIManagerListener listener) {
+        this.listener = listener;
+    }
+
+    @Override
+    public void onError(final AccountKitError error) {
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(final Parcel dest, final int flags) {
+        dest.writeString(confirmButton != null ? confirmButton.name() : null);
+        dest.writeString(entryButton != null ? entryButton.name() : null);
+        dest.writeString(loginType != null ? loginType.name() : null);
+        dest.writeString(textPosition != null ? textPosition.name() : null);
+        dest.writeInt(themeResourceId);
+    }
+
+    public static final Creator<ReverbUIManager> CREATOR
+            = new Creator<ReverbUIManager>() {
+        @Override
+        public ReverbUIManager createFromParcel(final Parcel source) {
+            String s = source.readString();
+            final ButtonType confirmButton = s == null ? null : ButtonType.valueOf(s);
+            s = source.readString();
+            final ButtonType entryButton = s == null ? null : ButtonType.valueOf(s);
+            s = source.readString();
+            final LoginType loginType = s == null ? null : LoginType.valueOf(s);
+            s = source.readString();
+            final TextPosition textPosition = s == null ? null : TextPosition.valueOf(s);
+            final int themeResourceId = source.readInt();
+            return new ReverbUIManager(
+                    confirmButton,
+                    entryButton,
+                    loginType,
+                    textPosition,
+                    themeResourceId);
+        }
+
+        @Override
+        public ReverbUIManager[] newArray(final int size) {
+            return new ReverbUIManager[size];
+        }
+    };
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/SpaceFragment.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/SpaceFragment.java
new file mode 100644
index 000000000..9f28c34da
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/SpaceFragment.java
@@ -0,0 +1,93 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Activity;
+import android.content.res.TypedArray;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.util.AttributeSet;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import com.facebook.samples.loginsample.R;
+
+public class SpaceFragment extends InflateFragment {
+
+    private static final String HEIGHT_ATTRIBUTE_KEY = "heightAttribute";
+
+    private AttributeSet attributes;
+
+    public static SpaceFragment create(final int heightAttribute) {
+        final SpaceFragment fragment = new SpaceFragment();
+        final Bundle arguments = new Bundle();
+        arguments.putInt(HEIGHT_ATTRIBUTE_KEY, heightAttribute);
+        fragment.setArguments(arguments);
+        return fragment;
+    }
+
+    @Nullable
+    @Override
+    public View onCreateView(
+            final LayoutInflater inflater,
+            final ViewGroup container,
+            final Bundle savedInstanceState) {
+        View view = super.onCreateView(inflater, container, savedInstanceState);
+        if (view == null) {
+            view = inflater.inflate(R.layout.fragment_space, container, false);
+        }
+        updateHeight(view);
+        return view;
+    }
+
+    @Override
+    protected void handleAttributes(final AttributeSet attrs) {
+        attributes = attrs;
+        updateHeight(getView());
+    }
+
+    private void updateHeight(final View view) {
+        if (view == null) {
+            return;
+        }
+        final Activity activity = getActivity();
+        if (activity == null) {
+            return;
+        }
+
+        final Bundle arguments = getArguments();
+        if (arguments == null) {
+            return;
+        }
+
+        final int heightAttribute = arguments.getInt(HEIGHT_ATTRIBUTE_KEY, -1);
+        if (heightAttribute >= 0) {
+            final TypedArray a = activity.obtainStyledAttributes(
+                    attributes,
+                    R.styleable.Theme_AccountKitSample_Style);
+            final int heightAttributeValue = a.getDimensionPixelSize(heightAttribute, -1);
+            a.recycle();
+            if (heightAttributeValue >= 0) {
+                view.getLayoutParams().height = heightAttributeValue;
+            }
+        }
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/TokenActivity.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/TokenActivity.java
new file mode 100644
index 000000000..5b89baad1
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/TokenActivity.java
@@ -0,0 +1,107 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.facebook.accountkit.Account;
+import com.facebook.accountkit.AccountKit;
+import com.facebook.accountkit.AccountKitCallback;
+import com.facebook.accountkit.AccountKitError;
+import com.facebook.accountkit.PhoneNumber;
+import com.facebook.samples.loginsample.R;
+
+public class TokenActivity extends Activity {
+    static final String HELLO_TOKEN_ACTIVITY_FINAL_STATE_EXTRA =
+            "HELLO_TOKEN_ACTIVITY_FINAL_STATE_EXTRA";
+    static final String HELLO_TOKEN_ACTIVITY_INITIAL_STATE_EXTRA =
+            "HELLO_TOKEN_ACTIVITY_INITIAL_STATE_EXTRA";
+
+    @Override
+    public void onCreate(final Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_hello_token);
+
+        final Button signOut = (Button) findViewById(R.id.log_out_button);
+        signOut.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                AccountKit.logOut();
+                finish();
+            }
+        });
+
+        final String finalState =
+                getIntent().getStringExtra(HELLO_TOKEN_ACTIVITY_FINAL_STATE_EXTRA);
+        final String initialState =
+                getIntent().getStringExtra(HELLO_TOKEN_ACTIVITY_INITIAL_STATE_EXTRA);
+
+        if (initialState != null) {
+            final TextView initialStateView = (TextView) findViewById(R.id.initial_state);
+            final TextView initialStateLabelView =
+                    (TextView) findViewById(R.id.initial_state_label);
+            if (initialStateView != null && initialStateLabelView != null) {
+                initialStateView.setText(initialState);
+                initialStateView.setVisibility(View.VISIBLE);
+                initialStateLabelView.setVisibility(View.VISIBLE);
+            }
+        }
+
+        if (finalState != null) {
+            final TextView finalStateView = (TextView) findViewById(R.id.final_state);
+            final TextView finalStateLabelView =
+                    (TextView) findViewById(R.id.final_state_label);
+            if (finalStateView != null && finalStateLabelView != null) {
+                finalStateView.setText(finalState);
+                finalStateView.setVisibility(View.VISIBLE);
+                finalStateLabelView.setVisibility(View.VISIBLE);
+            }
+        }
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+
+        AccountKit.getCurrentAccount(new AccountKitCallback<Account>() {
+            @Override
+            public void onSuccess(final Account account) {
+                final TextView userId = (TextView) findViewById(R.id.user_id);
+                userId.setText(account.getId());
+
+                final TextView phoneNumber = (TextView) findViewById(R.id.user_phone);
+                final PhoneNumber number = account.getPhoneNumber();
+                phoneNumber.setText(number == null ? null : number.toString());
+
+                final TextView email = (TextView) findViewById(R.id.user_email);
+                email.setText(account.getEmail());
+            }
+
+            @Override
+            public void onError(final AccountKitError error) {
+            }
+        });
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/facebook/FacebookLoginActivity.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/facebook/FacebookLoginActivity.java
new file mode 100644
index 000000000..7ba24c86b
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/facebook/FacebookLoginActivity.java
@@ -0,0 +1,226 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.facebook;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
+import android.view.View;
+import android.widget.Button;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.facebook.AccessToken;
+import com.facebook.CallbackManager;
+import com.facebook.FacebookCallback;
+import com.facebook.FacebookException;
+import com.facebook.GraphRequest;
+import com.facebook.GraphResponse;
+import com.facebook.HttpMethod;
+import com.facebook.Profile;
+import com.facebook.ProfileTracker;
+import com.facebook.login.DefaultAudience;
+import com.facebook.login.LoginManager;
+import com.facebook.login.LoginResult;
+import com.facebook.login.widget.LoginButton;
+import com.facebook.login.widget.ProfilePictureView;
+import com.facebook.samples.loginsample.R;
+
+import org.json.JSONException;
+
+public class FacebookLoginActivity extends AppCompatActivity {
+
+    private static final String GRAPH_PATH = "me/permissions";
+    private static final String SUCCESS = "success";
+
+    private static final int PICK_PERMS_REQUEST = 0;
+
+    private CallbackManager callbackManager;
+
+    private ProfilePictureView profilePictureView;
+    private TextView userNameView;
+    private LoginButton fbLoginButton;
+
+    @Override
+    protected void onCreate(final Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_facebook_login);
+
+        callbackManager = CallbackManager.Factory.create();
+
+        fbLoginButton = (LoginButton) findViewById(R.id._fb_login);
+        profilePictureView = (ProfilePictureView) findViewById(R.id.user_pic);
+        profilePictureView.setCropped(true);
+
+        userNameView = (TextView) findViewById(R.id.user_name);
+
+        final Button deAuthButton = (Button) findViewById(R.id.deauth);
+        deAuthButton.setOnClickListener(new View.OnClickListener() {
+            public void onClick(View v) {
+                if (!isLoggedIn()) {
+                    Toast.makeText(
+                            FacebookLoginActivity.this,
+                            R.string.app_not_logged_in,
+                            Toast.LENGTH_LONG).show();
+                    return;
+                }
+                GraphRequest.Callback callback = new GraphRequest.Callback() {
+                    @Override
+                    public void onCompleted(GraphResponse response) {
+                        try {
+                            if(response.getError() != null) {
+                                Toast.makeText(
+                                        FacebookLoginActivity.this,
+                                        getResources().getString(
+                                                R.string.failed_to_deauth,
+                                                response.toString()),
+                                        Toast.LENGTH_LONG
+                                ).show();
+                            }
+                            else if (response.getJSONObject().getBoolean(SUCCESS)) {
+                                LoginManager.getInstance().logOut();
+                                // updateUI();?
+                            }
+                        } catch (JSONException ex) { /* no op */ }
+                    }
+                };
+                GraphRequest request = new GraphRequest(AccessToken.getCurrentAccessToken(),
+                        GRAPH_PATH, new Bundle(), HttpMethod.DELETE, callback);
+                request.executeAsync();
+            }
+        });
+
+        final Button permsButton = (Button) findViewById(R.id.perms);
+        permsButton.setOnClickListener(new View.OnClickListener() {
+            public void onClick(final View v) {
+                Intent selectPermsIntent =
+                        new Intent(FacebookLoginActivity.this, PermissionSelectActivity.class);
+                startActivityForResult(selectPermsIntent, PICK_PERMS_REQUEST);
+            }
+        });
+
+        // Callback registration
+        fbLoginButton.registerCallback(callbackManager, new FacebookCallback<LoginResult>() {
+            @Override
+            public void onSuccess(final LoginResult loginResult) {
+                // App code
+                Toast.makeText(
+                        FacebookLoginActivity.this,
+                        R.string.success,
+                        Toast.LENGTH_LONG).show();
+                updateUI();
+            }
+
+            @Override
+            public void onCancel() {
+                // App code
+                Toast.makeText(
+                        FacebookLoginActivity.this,
+                        R.string.cancel,
+                        Toast.LENGTH_LONG).show();
+            }
+
+            @Override
+            public void onError(final FacebookException exception) {
+                // App code
+                Toast.makeText(
+                        FacebookLoginActivity.this,
+                        R.string.error,
+                        Toast.LENGTH_LONG).show();
+            }
+        });
+
+        new ProfileTracker() {
+            @Override
+            protected void onCurrentProfileChanged(
+                    final Profile oldProfile,
+                    final Profile currentProfile) {
+                updateUI();
+            }
+        };
+    }
+
+    private boolean isLoggedIn() {
+        AccessToken accesstoken = AccessToken.getCurrentAccessToken();
+        return !(accesstoken == null || accesstoken.getPermissions().isEmpty());
+    }
+
+    private void updateUI() {
+        Profile profile = Profile.getCurrentProfile();
+        if (profile != null) {
+            profilePictureView.setProfileId(profile.getId());
+            userNameView
+                    .setText(String.format("%s %s",profile.getFirstName(), profile.getLastName()));
+        } else {
+            profilePictureView.setProfileId(null);
+            userNameView.setText(getString(R.string.welcome));
+        }
+    }
+
+    @Override
+    protected void onActivityResult(
+            final int requestCode,
+            final int resultCode,
+            final Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        if(requestCode == PICK_PERMS_REQUEST) {
+            if(resultCode == RESULT_OK) {
+                String[] readPermsArr = data
+                        .getStringArrayExtra(PermissionSelectActivity.EXTRA_SELECTED_READ_PARAMS);
+                String writePrivacy = data
+                        .getStringExtra(PermissionSelectActivity.EXTRA_SELECTED_WRITE_PRIVACY);
+                String[] publishPermsArr = data
+                        .getStringArrayExtra(
+                                PermissionSelectActivity.EXTRA_SELECTED_PUBLISH_PARAMS);
+
+                fbLoginButton.clearPermissions();
+
+                if (readPermsArr != null) {
+                    if(readPermsArr.length > 0) {
+                        fbLoginButton.setReadPermissions(readPermsArr);
+                    }
+                }
+
+                if ((readPermsArr == null ||
+                        readPermsArr.length == 0) &&
+                        publishPermsArr != null) {
+                    if(publishPermsArr.length > 0) {
+                        fbLoginButton.setPublishPermissions(publishPermsArr);
+                    }
+                }
+                // Set write privacy for the user
+                if ((writePrivacy != null)) {
+                    DefaultAudience audience;
+                    if (DefaultAudience.EVERYONE.toString().equals(writePrivacy)) {
+                        audience = DefaultAudience.EVERYONE;
+                    } else if (DefaultAudience.FRIENDS.toString().equals(writePrivacy)) {
+                        audience = DefaultAudience.FRIENDS;
+                    } else {
+                        audience = DefaultAudience.ONLY_ME;
+                    }
+                    fbLoginButton.setDefaultAudience(audience);
+                }
+            }
+        } else {
+            callbackManager.onActivityResult(requestCode, resultCode, data);
+        }
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/facebook/PermissionSelectActivity.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/facebook/PermissionSelectActivity.java
new file mode 100644
index 000000000..ee7db339c
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/facebook/PermissionSelectActivity.java
@@ -0,0 +1,120 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.facebook;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.util.SparseBooleanArray;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.widget.ArrayAdapter;
+import android.widget.Button;
+import android.widget.ListView;
+import com.facebook.login.DefaultAudience;
+import com.facebook.samples.loginsample.R;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.Set;
+
+public class PermissionSelectActivity extends Activity implements OnClickListener{
+
+    public static final String TAG = PermissionSelectActivity.class.getSimpleName();
+
+    public static final String EXTRA_SELECTED_READ_PARAMS = TAG + ".selectedReadPerms";
+    public static final String EXTRA_SELECTED_WRITE_PRIVACY = TAG + ".selectedWritePrivacy";
+    public static final String EXTRA_SELECTED_PUBLISH_PARAMS = TAG + ".selectedPublishPerms";
+
+    // Permissions
+    public static String PUBLISH_ACTIONS = "publish_actions";
+    public static String PUBLISH_CHECKINS = "publish_checkins";
+    public static String ADS_MANAGEMENT = "ads_management";
+    public static String CREATE_EVENT = "create_event";
+    public static String MANAGE_FRIENDLISTS = "manage_friendlists";
+    public static String MANAGE_NOTIFICATIONS = "manage_notifications";
+    public static String MANAGE_PAGES = "manage_pages";
+    public static String RSVP_EVENT = "rsvp_event";
+
+    public static final Set<String> PUBLISH_PERMS_LIST = new HashSet<>(Arrays.asList(
+            PUBLISH_ACTIONS,
+            PUBLISH_CHECKINS,
+            ADS_MANAGEMENT,
+            CREATE_EVENT,
+            MANAGE_FRIENDLISTS,
+            MANAGE_NOTIFICATIONS,
+            MANAGE_PAGES,
+            RSVP_EVENT));
+
+    Button button;
+    ListView listView;
+    ArrayAdapter<String> adapter;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.list_perms_new);
+        listView = (ListView) findViewById(R.id.list);
+        button = (Button) findViewById(R.id.confirm);
+        String[] perms = getResources().getStringArray(R.array.perms_array);
+
+        adapter = new ArrayAdapter<>(this,
+                android.R.layout.simple_list_item_multiple_choice, perms);
+        listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
+        listView.setAdapter(adapter);
+        button.setOnClickListener(this);
+    }
+
+    public void onClick(View v) {
+        SparseBooleanArray checked = listView.getCheckedItemPositions();
+        ArrayList<String> readPerms = new ArrayList<>();
+        String writePri = null;
+        ArrayList<String> publishPerms = new ArrayList<>();
+        for (int i = 0; i < checked.size(); i++) {
+            // Item position in adapter
+            int position = checked.keyAt(i);
+            // Add perm only if checked
+            if (checked.valueAt(i)){
+                String checkedItem = adapter.getItem(position);
+                if (DefaultAudience.EVERYONE.toString().equals(checkedItem)) {
+                    writePri = "EVERYONE";
+                } else if (DefaultAudience.FRIENDS.toString().equals(checkedItem)) {
+                    writePri = "FRIENDS";
+                } else if (DefaultAudience.ONLY_ME.toString().equals(checkedItem)) {
+                    writePri = "ONLY_ME";
+                } else if ((PUBLISH_PERMS_LIST).contains(checkedItem)) {
+                    publishPerms.add(checkedItem);
+                } else
+                    readPerms.add(checkedItem);
+            }
+        }
+
+        String[] readPermsArr = readPerms.toArray(new String[readPerms.size()]);
+        String[] publishPermsArr = publishPerms.toArray(new String[publishPerms.size()]);
+        Intent intent=new Intent();
+        intent.putExtra(EXTRA_SELECTED_READ_PARAMS, readPermsArr);
+        intent.putExtra(EXTRA_SELECTED_WRITE_PRIVACY, writePri);
+        intent.putExtra(EXTRA_SELECTED_PUBLISH_PARAMS, publishPermsArr);
+        setResult(RESULT_OK, intent);
+        finish();
+    }
+}
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/bicycle.jpg b/samples/LoginSample/src/main/res/drawable-hdpi/bicycle.jpg
new file mode 100644
index 000000000..f9793bcec
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/bicycle.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/dog.jpg b/samples/LoginSample/src/main/res/drawable-hdpi/dog.jpg
new file mode 100644
index 000000000..87d1c8011
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/dog.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_arrow_purple.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_arrow_purple.png
new file mode 100644
index 000000000..d257e4801
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_arrow_purple.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_arrow_white.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_arrow_white.png
new file mode 100644
index 000000000..2b5fe5946
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_arrow_white.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_checkmark.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_checkmark.png
new file mode 100644
index 000000000..c03233229
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_checkmark.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_email.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_email.png
new file mode 100644
index 000000000..dc2ffbd70
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_email.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_email_sent.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_email_sent.png
new file mode 100644
index 000000000..fe4a768f2
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_email_sent.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_error.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_error.png
new file mode 100644
index 000000000..b4e8ef844
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_error.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_icon.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_icon.png
new file mode 100644
index 000000000..ae2b9c625
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_icon.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_progress_ring.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_progress_ring.png
new file mode 100644
index 000000000..415b3b283
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_progress_ring.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_rating_bar_selected.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_rating_bar_selected.png
new file mode 100644
index 000000000..3271014a5
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_rating_bar_selected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_rating_bar_unselected.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_rating_bar_unselected.png
new file mode 100644
index 000000000..f0dae891a
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_rating_bar_unselected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/bicycle.jpg b/samples/LoginSample/src/main/res/drawable-mdpi/bicycle.jpg
new file mode 100644
index 000000000..aefd987f6
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/bicycle.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/dog.jpg b/samples/LoginSample/src/main/res/drawable-mdpi/dog.jpg
new file mode 100644
index 000000000..3d5437852
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/dog.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_arrow_purple.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_arrow_purple.png
new file mode 100644
index 000000000..7bff78a4c
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_arrow_purple.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_arrow_white.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_arrow_white.png
new file mode 100644
index 000000000..317eb1e35
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_arrow_white.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_checkmark.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_checkmark.png
new file mode 100644
index 000000000..6ec8827b8
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_checkmark.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_email.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_email.png
new file mode 100644
index 000000000..0c1a77a8c
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_email.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_email_sent.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_email_sent.png
new file mode 100644
index 000000000..56ff2acd2
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_email_sent.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_error.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_error.png
new file mode 100644
index 000000000..31ffdbb8d
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_error.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_icon.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_icon.png
new file mode 100644
index 000000000..413dacb18
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_icon.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_progress_ring.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_progress_ring.png
new file mode 100644
index 000000000..1cc00e784
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_progress_ring.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_rating_bar_selected.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_rating_bar_selected.png
new file mode 100644
index 000000000..2fc152447
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_rating_bar_selected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_rating_bar_unselected.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_rating_bar_unselected.png
new file mode 100644
index 000000000..128c70666
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_rating_bar_unselected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/bicycle.jpg b/samples/LoginSample/src/main/res/drawable-xhdpi/bicycle.jpg
new file mode 100644
index 000000000..542ad35f1
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/bicycle.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/dog.jpg b/samples/LoginSample/src/main/res/drawable-xhdpi/dog.jpg
new file mode 100644
index 000000000..16170ddf8
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/dog.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_arrow_purple.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_arrow_purple.png
new file mode 100644
index 000000000..ae1e819c9
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_arrow_purple.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_arrow_white.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_arrow_white.png
new file mode 100644
index 000000000..607f8af4e
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_arrow_white.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_checkmark.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_checkmark.png
new file mode 100644
index 000000000..daf155d69
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_checkmark.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_email.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_email.png
new file mode 100644
index 000000000..813db5112
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_email.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_email_sent.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_email_sent.png
new file mode 100644
index 000000000..144c1cbc5
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_email_sent.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_error.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_error.png
new file mode 100644
index 000000000..27c4c9ba7
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_error.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_icon.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_icon.png
new file mode 100644
index 000000000..d3bb03e90
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_icon.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_progress_ring.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_progress_ring.png
new file mode 100644
index 000000000..e76c5152a
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_progress_ring.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_rating_bar_selected.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_rating_bar_selected.png
new file mode 100644
index 000000000..0ebd0c33d
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_rating_bar_selected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_rating_bar_unselected.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_rating_bar_unselected.png
new file mode 100644
index 000000000..cae2f159f
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_rating_bar_unselected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/bicycle.jpg b/samples/LoginSample/src/main/res/drawable-xxhdpi/bicycle.jpg
new file mode 100644
index 000000000..a029a356a
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/bicycle.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/dog.jpg b/samples/LoginSample/src/main/res/drawable-xxhdpi/dog.jpg
new file mode 100644
index 000000000..81b3ee646
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/dog.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_arrow_purple.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_arrow_purple.png
new file mode 100644
index 000000000..965439d33
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_arrow_purple.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_arrow_white.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_arrow_white.png
new file mode 100644
index 000000000..d6491c11a
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_arrow_white.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_checkmark.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_checkmark.png
new file mode 100644
index 000000000..7ac4d4328
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_checkmark.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_email.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_email.png
new file mode 100644
index 000000000..d6906ad31
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_email.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_email_sent.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_email_sent.png
new file mode 100644
index 000000000..d634b90d5
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_email_sent.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_error.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_error.png
new file mode 100644
index 000000000..4c5ff33f0
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_error.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_icon.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_icon.png
new file mode 100644
index 000000000..cf2889df9
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_icon.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_progress_ring.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_progress_ring.png
new file mode 100644
index 000000000..cd1af3e94
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_progress_ring.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_rating_bar_selected.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_rating_bar_selected.png
new file mode 100644
index 000000000..498cb9786
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_rating_bar_selected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_rating_bar_unselected.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_rating_bar_unselected.png
new file mode 100644
index 000000000..5956cb39b
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_rating_bar_unselected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/bicycle.jpg b/samples/LoginSample/src/main/res/drawable-xxxhdpi/bicycle.jpg
new file mode 100644
index 000000000..5e0c6c8c2
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/bicycle.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/dog.jpg b/samples/LoginSample/src/main/res/drawable-xxxhdpi/dog.jpg
new file mode 100644
index 000000000..8ee6d7166
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/dog.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_arrow_purple.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_arrow_purple.png
new file mode 100644
index 000000000..415d397ba
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_arrow_purple.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_arrow_white.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_arrow_white.png
new file mode 100644
index 000000000..f68850d93
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_arrow_white.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_checkmark.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_checkmark.png
new file mode 100644
index 000000000..694f511eb
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_checkmark.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_email.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_email.png
new file mode 100644
index 000000000..b76b5c2d9
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_email.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_email_sent.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_email_sent.png
new file mode 100644
index 000000000..6a0559955
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_email_sent.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_error.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_error.png
new file mode 100644
index 000000000..fa6ac722a
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_error.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_icon.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_icon.png
new file mode 100644
index 000000000..c59f539fb
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_icon.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_progress_ring.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_progress_ring.png
new file mode 100644
index 000000000..cce40d2dd
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_progress_ring.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_rating_bar_selected.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_rating_bar_selected.png
new file mode 100644
index 000000000..2db4d892b
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_rating_bar_selected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_rating_bar_unselected.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_rating_bar_unselected.png
new file mode 100644
index 000000000..84ff81eb7
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_rating_bar_unselected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable/placeholder_background.xml b/samples/LoginSample/src/main/res/drawable/placeholder_background.xml
new file mode 100644
index 000000000..469f62a35
--- /dev/null
+++ b/samples/LoginSample/src/main/res/drawable/placeholder_background.xml
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <item>
+        <shape android:shape="rectangle">
+            <solid android:color="#e02727" />
+        </shape>
+    </item>
+    <item
+        android:bottom="6dp"
+        android:left="6dp"
+        android:right="6dp"
+        android:top="6dp"
+        >
+        <shape android:shape="rectangle">
+            <corners android:radius="6dp" />
+            <stroke
+                android:color="#cccccccc"
+                android:dashGap="4dp"
+                android:dashWidth="8dp"
+                android:width="2dp"
+                />
+        </shape>
+    </item>
+</layer-list>
diff --git a/samples/LoginSample/src/main/res/drawable/reverb_progress_bar.xml b/samples/LoginSample/src/main/res/drawable/reverb_progress_bar.xml
new file mode 100644
index 000000000..f7e0fac75
--- /dev/null
+++ b/samples/LoginSample/src/main/res/drawable/reverb_progress_bar.xml
@@ -0,0 +1,43 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:id="@android:id/background">
+        <shape>
+            <corners android:radius="@dimen/reverb_progress_bar_corner_radius" />
+            <solid android:color="@color/reverb_light" />
+        </shape>
+    </item>
+    <item android:id="@android:id/secondaryProgress">
+        <shape>
+            <corners android:radius="@dimen/reverb_progress_bar_corner_radius" />
+            <solid android:color="@color/reverb_light" />
+        </shape>
+    </item>
+    <item android:id="@android:id/progress">
+        <clip>
+            <shape>
+                <corners android:radius="@dimen/reverb_progress_bar_corner_radius" />
+                <solid android:color="@color/reverb_dark" />
+            </shape>
+        </clip>
+    </item>
+</layer-list>
diff --git a/samples/LoginSample/src/main/res/drawable/reverb_progress_complete.xml b/samples/LoginSample/src/main/res/drawable/reverb_progress_complete.xml
new file mode 100644
index 000000000..06abcd053
--- /dev/null
+++ b/samples/LoginSample/src/main/res/drawable/reverb_progress_complete.xml
@@ -0,0 +1,42 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <item>
+        <shape
+            android:shape="ring"
+            android:innerRadius="37dp"
+            android:thickness="4dp"
+            android:useLevel="false"
+            >
+            <solid
+                android:color="@color/reverb_dark"
+                android:useLevel="false"
+                />
+        </shape>
+    </item>
+    <item>
+        <bitmap
+            android:src="@drawable/reverb_checkmark"
+            android:tint="@color/reverb_dark"
+            />
+    </item>
+</layer-list>
diff --git a/samples/LoginSample/src/main/res/drawable/reverb_progress_rotating_ring.xml b/samples/LoginSample/src/main/res/drawable/reverb_progress_rotating_ring.xml
new file mode 100644
index 000000000..5ae1d9c40
--- /dev/null
+++ b/samples/LoginSample/src/main/res/drawable/reverb_progress_rotating_ring.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<rotate
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:drawable="@drawable/reverb_progress_ring"
+    android:fromDegrees="0"
+    android:pivotX="50%"
+    android:pivotY="50%"
+    android:toDegrees="720"
+    />
diff --git a/samples/LoginSample/src/main/res/drawable/reverb_rating_bar.xml b/samples/LoginSample/src/main/res/drawable/reverb_rating_bar.xml
new file mode 100644
index 000000000..7c66ea0eb
--- /dev/null
+++ b/samples/LoginSample/src/main/res/drawable/reverb_rating_bar.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <!-- RatingBar does not handle ShapeDrawables for the items, so just use images -->
+    <item
+        android:id="@android:id/background"
+        android:drawable="@drawable/reverb_rating_bar_unselected"
+        />
+    <item
+        android:id="@android:id/secondaryProgress"
+        android:drawable="@drawable/reverb_rating_bar_unselected"
+        />
+    <item
+        android:id="@android:id/progress"
+        android:drawable="@drawable/reverb_rating_bar_selected"
+        />
+</layer-list>
diff --git a/samples/LoginSample/src/main/res/layout/account_kit_activity.xml b/samples/LoginSample/src/main/res/layout/account_kit_activity.xml
new file mode 100644
index 000000000..01c5ada7c
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/account_kit_activity.xml
@@ -0,0 +1,215 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<ScrollView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    >
+    <LinearLayout style="@style/Sample.ScrollContent">
+        <LinearLayout
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:orientation="vertical"
+            android:minWidth="300dp"
+            tools:ignore="UselessParent"
+            >
+            <Switch
+                android:id="@+id/title_type_switch"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:lines="1"
+                android:text="@string/config_title_type_label"
+                android:textColor="@android:color/black"
+                />
+            <Switch
+                android:id="@+id/advanced_ui_switch"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:lines="1"
+                android:text="@string/config_advanced_ui_label"
+                android:textColor="@android:color/black"
+                />
+            <Switch
+                android:id="@+id/response_type_switch"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:lines="1"
+                android:checked="true"
+                android:text="@string/config_response_type_label"
+                android:textColor="@android:color/black"
+                />
+            <Switch
+                android:id="@+id/state_param_switch"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:lines="1"
+                android:text="@string/confirm_state_param_label"
+                android:textColor="@android:color/black"
+                />
+            <Switch
+                android:id="@+id/facebook_notification_switch"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:lines="1"
+                android:checked="true"
+                android:text="@string/confirm_facebook_notification_label"
+                android:textColor="@android:color/black"
+                />
+            <Switch
+                android:id="@+id/whitelist_blacklist_switch"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:lines="1"
+                android:text="@string/use_manual_whitelistblacklist_label"
+                android:textColor="@android:color/black"
+                />
+            <Switch
+                android:id="@+id/read_phone_state_switch"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:lines="1"
+                android:checked="true"
+                android:text="@string/read_phone_state_label"
+                android:textColor="@android:color/black"
+                />
+            <Switch
+                android:id="@+id/receive_sms_switch"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:lines="1"
+                android:checked="true"
+                android:text="@string/receive_sms_label"
+                android:textColor="@android:color/black"
+                />
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:gravity="center"
+                android:orientation="horizontal"
+                >
+                <TextView
+                    android:layout_width="0dp"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="1"
+                    android:text="@string/config_theme_label"
+                    android:textColor="@android:color/black"
+                    />
+                <Spinner
+                    android:id="@+id/theme_spinner"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:gravity="end"
+                    android:textAlignment="center"
+                    tools:ignore="UnusedAttribute"
+                    />
+            </LinearLayout>
+            <LinearLayout
+                android:id="@+id/advanced_ui_options"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:gravity="center"
+                android:orientation="vertical"
+                android:visibility="gone"
+                >
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:gravity="center"
+                    android:orientation="horizontal"
+                    >
+                    <TextView
+                        android:layout_width="0dp"
+                        android:layout_height="wrap_content"
+                        android:layout_weight="1"
+                        android:text="@string/config_entry_button_label"
+                        android:textColor="@android:color/black"
+                        />
+                    <Spinner
+                        android:id="@+id/entry_button_spinner"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:gravity="end"
+                        android:textAlignment="center"
+                        tools:ignore="UnusedAttribute"
+                        />
+                </LinearLayout>
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:gravity="center"
+                    android:orientation="horizontal"
+                    >
+                    <TextView
+                        android:layout_width="0dp"
+                        android:layout_height="wrap_content"
+                        android:layout_weight="1"
+                        android:text="@string/config_confirm_button_label"
+                        android:textColor="@android:color/black"
+                        />
+                    <Spinner
+                        android:id="@+id/confirm_button_spinner"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:gravity="end"
+                        android:textAlignment="center"
+                        tools:ignore="UnusedAttribute"
+                        />
+                </LinearLayout>
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:gravity="center"
+                    android:orientation="horizontal"
+                    >
+                    <TextView
+                        android:layout_width="0dp"
+                        android:layout_height="wrap_content"
+                        android:layout_weight="1"
+                        android:text="@string/config_text_position_label"
+                        android:textColor="@android:color/black"
+                        />
+                    <Spinner
+                        android:id="@+id/text_position_spinner"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:gravity="end"
+                        android:textAlignment="center"
+                        tools:ignore="UnusedAttribute"
+                        />
+                </LinearLayout>
+            </LinearLayout>
+            <Button
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:onClick="onLoginPhone"
+                android:text="@string/log_in_phone_button"
+                />
+            <Button
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:onClick="onLoginEmail"
+                android:text="@string/log_in_email_button"
+                />
+        </LinearLayout>
+    </LinearLayout>
+</ScrollView>
diff --git a/samples/LoginSample/src/main/res/layout/activity_error.xml b/samples/LoginSample/src/main/res/layout/activity_error.xml
new file mode 100644
index 000000000..c3711ec54
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/activity_error.xml
@@ -0,0 +1,50 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<ScrollView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    >
+    <LinearLayout style="@style/Sample.ScrollContent">
+        <Button
+            android:id="@+id/log_out_button"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:text="@string/log_out_button"
+            />
+        <TextView
+            android:id="@+id/error_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/error_label"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/error"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/loading_placeholder"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+    </LinearLayout>
+</ScrollView>
diff --git a/samples/LoginSample/src/main/res/layout/activity_facebook_login.xml b/samples/LoginSample/src/main/res/layout/activity_facebook_login.xml
new file mode 100644
index 000000000..d0f1176c1
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/activity_facebook_login.xml
@@ -0,0 +1,85 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:facebook="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    android:gravity="center">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:gravity="center">
+
+        <com.facebook.login.widget.ProfilePictureView
+            android:id="@+id/user_pic"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="10dp"
+            android:layout_marginStart="10dp"
+            android:layout_marginRight="10dp"
+            android:layout_marginEnd="10dp"
+            facebook:com_facebook_preset_size="small" />
+
+        <TextView
+            android:id="@+id/user_name"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/welcome" />
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:gravity="center"
+        android:layout_margin="10dp">
+
+        <Button
+            android:id="@+id/deauth"
+            android:layout_width="182dip"
+            android:layout_height="wrap_content"
+            android:text="@string/de_authorize_app"
+            android:layout_marginRight="5dp"
+            android:layout_marginEnd="5dp"
+            android:textSize="12sp" />
+
+        <Button
+            android:id="@+id/perms"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/permissions"
+            android:layout_marginLeft="5dp"
+            android:layout_marginStart="5dp"
+            android:textSize="12sp" />
+
+    </LinearLayout>
+
+    <com.facebook.login.widget.LoginButton
+        android:id="@+id/_fb_login"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center_horizontal" />
+
+</LinearLayout>
diff --git a/samples/LoginSample/src/main/res/layout/activity_hello_code.xml b/samples/LoginSample/src/main/res/layout/activity_hello_code.xml
new file mode 100644
index 000000000..30b0bf7c4
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/activity_hello_code.xml
@@ -0,0 +1,81 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<ScrollView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    >
+    <LinearLayout style="@style/Sample.ScrollContent">
+        <Button
+            android:id="@+id/log_out_button"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:text="@string/log_out_button"
+            />
+        <TextView
+            android:id="@+id/user_code_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/code_label"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/code"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/loading_placeholder"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/initial_state_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/initial_state_label"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            android:visibility="gone"
+            />
+        <TextView
+            android:id="@+id/initial_state"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:visibility="gone"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/final_state_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/final_state_label"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            android:visibility="gone"
+            />
+        <TextView
+            android:id="@+id/final_state"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:visibility="gone"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+
+    </LinearLayout>
+</ScrollView>
diff --git a/samples/LoginSample/src/main/res/layout/activity_hello_token.xml b/samples/LoginSample/src/main/res/layout/activity_hello_token.xml
new file mode 100644
index 000000000..eea3b554b
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/activity_hello_token.xml
@@ -0,0 +1,108 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<ScrollView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    >
+    <LinearLayout style="@style/Sample.ScrollContent">
+        <Button
+            android:id="@+id/log_out_button"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:text="@string/log_out_button"
+            />
+        <TextView
+            android:id="@+id/user_id_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/user_id_label"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/user_id"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/loading_placeholder"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/user_phone_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/phone_number_label"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/user_phone"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/loading_placeholder"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/user_email_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/email_label"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/user_email"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/loading_placeholder"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/initial_state_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/initial_state_label"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            android:visibility="gone"
+            />
+        <TextView
+            android:id="@+id/initial_state"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:visibility="gone"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/final_state_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/final_state_label"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            android:visibility="gone"
+            />
+        <TextView
+            android:id="@+id/final_state"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:visibility="gone"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+    </LinearLayout>
+</ScrollView>
diff --git a/samples/LoginSample/src/main/res/layout/activity_main.xml b/samples/LoginSample/src/main/res/layout/activity_main.xml
new file mode 100644
index 000000000..c5828e387
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/activity_main.xml
@@ -0,0 +1,50 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin"
+    android:gravity="center"
+    android:orientation="vertical"
+    tools:context="com.facebook.samples.loginsample.MainActivity">
+
+    <Button
+        android:id="@+id/fb_login_button"
+        android:text="@string/log_in_with_facebook"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_margin="10dp"
+        android:textSize="12sp"/>
+
+    <Button
+        android:id="@+id/ak_login_button"
+        android:text="@string/login_with_account_kit"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_margin="10dp"
+        android:textSize="12sp"/>
+
+</LinearLayout>
diff --git a/samples/LoginSample/src/main/res/layout/fragment_placeholder.xml b/samples/LoginSample/src/main/res/layout/fragment_placeholder.xml
new file mode 100644
index 000000000..3f0e56e02
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/fragment_placeholder.xml
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="100dp"
+    android:background="@drawable/placeholder_background"
+    >
+    <TextView
+        android:id="@+id/text_view"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center"
+        android:textColor="#ffffff"
+        />
+</FrameLayout>
diff --git a/samples/LoginSample/src/main/res/layout/fragment_reverb_action_bar.xml b/samples/LoginSample/src/main/res/layout/fragment_reverb_action_bar.xml
new file mode 100644
index 000000000..080c48105
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/fragment_reverb_action_bar.xml
@@ -0,0 +1,61 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="@dimen/reverb_action_bar_height"
+    android:background="?attr/com_accountkit_header_background_color"
+    android:gravity="center_vertical"
+    android:orientation="horizontal"
+    android:paddingEnd="@dimen/activity_horizontal_margin"
+    android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingStart="@dimen/activity_horizontal_margin"
+    tools:ignore="Overdraw"
+    >
+    <ImageView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:onClick="onBackPressed"
+        android:src="?attr/reverb_back_arrow_src"
+        tools:ignore="ContentDescription,OnClick"
+        />
+    <TextView
+        android:id="@+id/title_view"
+        android:layout_width="0dp"
+        android:layout_height="match_parent"
+        android:layout_weight="1"
+        android:gravity="center_vertical"
+        android:paddingLeft="@dimen/activity_horizontal_margin"
+        android:paddingRight="@dimen/activity_horizontal_margin"
+        android:textAllCaps="?attr/reverb_text_all_caps"
+        android:textColor="?attr/com_accountkit_header_text_color"
+        />
+    <ImageView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:src="@drawable/reverb_icon"
+        android:visibility="?attr/reverb_app_icon_visibility"
+        tools:ignore="ContentDescription"
+        />
+</LinearLayout>
diff --git a/samples/LoginSample/src/main/res/layout/fragment_reverb_body.xml b/samples/LoginSample/src/main/res/layout/fragment_reverb_body.xml
new file mode 100644
index 000000000..1e95eae43
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/fragment_reverb_body.xml
@@ -0,0 +1,50 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="vertical"
+    >
+    <FrameLayout
+        android:id="@+id/reverb_progress_spinner"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:visibility="gone"
+        >
+        <ProgressBar
+            android:layout_width="@dimen/reverb_icon_size"
+            android:layout_height="@dimen/reverb_icon_size"
+            android:layout_gravity="center"
+            android:indeterminateDrawable="@drawable/reverb_progress_rotating_ring"
+            />
+    </FrameLayout>
+    <ImageView
+        android:id="@+id/reverb_icon"
+        android:layout_width="@dimen/reverb_icon_size"
+        android:layout_height="@dimen/reverb_icon_size"
+        android:layout_gravity="center"
+        android:visibility="gone"
+        tools:ignore="ContentDescription"
+        />
+</LinearLayout>
diff --git a/samples/LoginSample/src/main/res/layout/fragment_reverb_footer_bar.xml b/samples/LoginSample/src/main/res/layout/fragment_reverb_footer_bar.xml
new file mode 100644
index 000000000..2809db05b
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/fragment_reverb_footer_bar.xml
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:paddingBottom="@dimen/reverb_progress_bar_padding"
+    android:paddingTop="@dimen/reverb_progress_bar_padding"
+    style="@style/Reverb.Footer"
+    >
+    <include layout="@layout/layout_reverb_switch_login_type" />
+    <ProgressBar
+        android:id="@+id/reverb_progress_bar"
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/reverb_progress_bar_height"
+        android:indeterminateOnly="false"
+        android:max="5"
+        android:progressDrawable="@drawable/reverb_progress_bar"
+        />
+</LinearLayout>
diff --git a/samples/LoginSample/src/main/res/layout/fragment_reverb_footer_dots.xml b/samples/LoginSample/src/main/res/layout/fragment_reverb_footer_dots.xml
new file mode 100644
index 000000000..546cb2530
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/fragment_reverb_footer_dots.xml
@@ -0,0 +1,39 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    style="@style/Reverb.Footer"
+    >
+    <include layout="@layout/layout_reverb_switch_login_type" />
+    <RatingBar
+        android:id="@+id/reverb_progress_bar"
+        android:isIndicator="true"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:maxHeight="@dimen/reverb_rating_bar_height"
+        android:minHeight="@dimen/reverb_rating_bar_height"
+        android:numStars="5"
+        android:progressDrawable="@drawable/reverb_rating_bar"
+        android:rating="1.0"
+        android:stepSize="1.0"
+        />
+</LinearLayout>
diff --git a/samples/LoginSample/src/main/res/layout/fragment_space.xml b/samples/LoginSample/src/main/res/layout/fragment_space.xml
new file mode 100644
index 000000000..5827d721c
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/fragment_space.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="0dp"
+    />
diff --git a/samples/LoginSample/src/main/res/layout/layout_reverb_switch_login_type.xml b/samples/LoginSample/src/main/res/layout/layout_reverb_switch_login_type.xml
new file mode 100644
index 000000000..8b515f11d
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/layout_reverb_switch_login_type.xml
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<TextView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/switch_login_type_button"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:layout_marginTop="@dimen/reverb_footer_margin_top"
+    android:gravity="center"
+    android:padding="@dimen/reverb_padding"
+    android:textColor="?attr/com_accountkit_button_background_color"
+    android:textSize="@dimen/reverb_switch_login_type_text_size"
+    android:textStyle="bold"
+    android:visibility="gone"
+    />
diff --git a/samples/LoginSample/src/main/res/layout/list_perms_new.xml b/samples/LoginSample/src/main/res/layout/list_perms_new.xml
new file mode 100644
index 000000000..2ab9dbc86
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/list_perms_new.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent" >
+
+    <Button
+        android:id="@+id/confirm"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        android:text="@android:string/ok" />
+
+    <ListView
+        android:id="@+id/list"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:layout_above="@id/confirm"
+        android:layout_alignParentTop="true"
+        />
+</RelativeLayout>
diff --git a/samples/LoginSample/src/main/res/mipmap-hdpi/ic_launcher.png b/samples/LoginSample/src/main/res/mipmap-hdpi/ic_launcher.png
new file mode 100755
index 000000000..a4a96fed1
Binary files /dev/null and b/samples/LoginSample/src/main/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/samples/LoginSample/src/main/res/mipmap-mdpi/ic_launcher.png b/samples/LoginSample/src/main/res/mipmap-mdpi/ic_launcher.png
new file mode 100755
index 000000000..909d5b7f7
Binary files /dev/null and b/samples/LoginSample/src/main/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/samples/LoginSample/src/main/res/mipmap-xhdpi/ic_launcher.png b/samples/LoginSample/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100755
index 000000000..507873baa
Binary files /dev/null and b/samples/LoginSample/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/samples/LoginSample/src/main/res/mipmap-xxhdpi/ic_launcher.png b/samples/LoginSample/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100755
index 000000000..b2f1081ed
Binary files /dev/null and b/samples/LoginSample/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/samples/LoginSample/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/samples/LoginSample/src/main/res/mipmap-xxxhdpi/ic_launcher.png
new file mode 100755
index 000000000..26a703056
Binary files /dev/null and b/samples/LoginSample/src/main/res/mipmap-xxxhdpi/ic_launcher.png differ
diff --git a/samples/LoginSample/src/main/res/values-v17/styles.xml b/samples/LoginSample/src/main/res/values-v17/styles.xml
new file mode 100644
index 000000000..caabf4282
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values-v17/styles.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <style name="Sample.ScrollContent" parent="Base.Sample.ScrollContent">
+        <item name="android:paddingEnd">@dimen/activity_horizontal_margin</item>
+        <item name="android:paddingStart">@dimen/activity_horizontal_margin</item>
+    </style>
+
+    <style name="Reverb.Footer" parent="Base.Reverb.Footer">
+        <item name="android:layout_marginEnd">@dimen/reverb_content_margin_end</item>
+        <item name="android:layout_marginStart">@dimen/reverb_content_margin_start</item>
+    </style>
+</resources>
diff --git a/samples/LoginSample/src/main/res/values-w820dp/dimens.xml b/samples/LoginSample/src/main/res/values-w820dp/dimens.xml
new file mode 100644
index 000000000..72bb51545
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values-w820dp/dimens.xml
@@ -0,0 +1,26 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <!-- Example customization of dimensions originally defined in res/values/dimens.xml
+         (such as screen margins) for screens with more than 820dp of available width. This
+         would include 7" and 10" devices in landscape (~960dp and ~1280dp respectively). -->
+    <dimen name="activity_horizontal_margin">64dp</dimen>
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/accountkit_colors.xml b/samples/LoginSample/src/main/res/values/accountkit_colors.xml
new file mode 100644
index 000000000..c32c0a5e5
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/accountkit_colors.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <color name="reverb_dark">#262261</color>
+    <color name="reverb_light">#e9e8ef</color>
+    <color name="reverb_text">#1d2129</color>
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/accountkit_dimens.xml b/samples/LoginSample/src/main/res/values/accountkit_dimens.xml
new file mode 100644
index 000000000..2d11a897d
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/accountkit_dimens.xml
@@ -0,0 +1,39 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <dimen name="reverb_action_bar_height">50dp</dimen>
+    <dimen name="reverb_content_margin_end">25dp</dimen>
+    <dimen name="reverb_content_margin_start">25dp</dimen>
+    <dimen name="reverb_content_margin_top_large">22dp</dimen>
+    <dimen name="reverb_content_margin_top_small">14dp</dimen>
+    <dimen name="reverb_content_max_width">360dp</dimen>
+    <dimen name="reverb_content_min_height">340dp</dimen>
+    <dimen name="reverb_footer_margin_bottom">12dp</dimen>
+    <dimen name="reverb_footer_margin_top">14dp</dimen>
+    <dimen name="reverb_icon_size">86dp</dimen>
+    <dimen name="reverb_padding">8dp</dimen>
+    <dimen name="reverb_progress_bar_corner_radius">3dp</dimen>
+    <dimen name="reverb_progress_bar_height">14dp</dimen>
+    <dimen name="reverb_progress_bar_padding">10dp</dimen>
+    <dimen name="reverb_rating_bar_height">20dp</dimen>
+    <dimen name="reverb_switch_login_type_text_size">12sp</dimen>
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/accountkit_strings.xml b/samples/LoginSample/src/main/res/values/accountkit_strings.xml
new file mode 100644
index 000000000..8ab1f956e
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/accountkit_strings.xml
@@ -0,0 +1,89 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <string name="action_bar_title_hello">Hello</string>
+    <string name="code_label">Code</string>
+    <string name="config_advanced_ui_label">Use advanced UI theming</string>
+    <string name="config_confirm_button_label">Confirm button Text</string>
+    <string name="config_entry_button_label">Entry button Text</string>
+    <string name="config_response_type_label">Enable Client Access Token Flow</string>
+    <string name="config_text_position_label">Text Position</string>
+    <string name="config_theme_label">Theme</string>
+    <string name="config_title_type_label">App Name only for title</string>
+    <string name="confirm_facebook_notification_label">Facebook Notifications Fallback</string>
+    <string name="confirm_state_param_label">Is State Param passed?</string>
+    <string name="email_label">Email</string>
+    <string name="error_label">Error</string>
+    <string name="error_message">An error has occurred.</string>
+    <string name="final_state_label">Final State</string>
+    <string name="initial_state_label">Initial State</string>
+    <string name="loading_placeholder">Loading…</string>
+    <string name="log_in_email_button">Log In via Email</string>
+    <string name="log_in_phone_button">Log In via Phone</string>
+    <string name="log_out_button">Log Out</string>
+    <string name="na">NA</string>
+    <string name="permissions_get_accounts_message">
+        Grant permission to read your email address from your device to pre-fill.
+    </string>
+    <string name="permissions_get_accounts_title">Read Email Address</string>
+    <string name="permissions_read_phone_state_message">
+        Grant permission to read your phone number from your device to pre-fill.
+    </string>
+    <string name="permissions_read_phone_state_title">Read Phone Number</string>
+    <string name="permissions_receive_sms_message">
+        Grant permission to read your SMS code from your device to pre-fill.
+    </string>
+    <string name="permissions_receive_sms_title">Read SMS Code</string>
+    <string name="phone_number_label">Phone Number</string>
+    <string name="read_phone_state_label">Read phone number?</string>
+    <string name="receive_sms_label">Receive SMS?</string>
+    <string name="use_manual_whitelistblacklist_label">Use manual whitelist/blacklist</string>
+    <string name="user_id_label">Account ID</string>
+    <string name="reverb_advanced_ui_required">
+        Advanced UI theming is required for Reverb themes. Select a different theme to disable.
+    </string>
+    <string name="reverb_switch_login_type_phone">SIGN IN WITH PHONE</string>
+    <string name="reverb_switch_login_type_email">SIGN IN WITH EMAIL</string>
+    <string name="reverb_title_code_input">Enter your code</string>
+    <string name="reverb_title_email_input">Enter your email address</string>
+    <string name="reverb_title_email_verify">Open the email and confirm your address</string>
+    <string name="reverb_title_error">We\'re sorry, something went wrong.</string>
+    <string name="reverb_title_phone_number_input">Enter your phone number</string>
+    <string name="reverb_title_resend">We\'re sorry. Try these options to continue.</string>
+    <string name="reverb_title_sending_code">Sending your code…</string>
+    <string name="reverb_title_sent_code">Sent!</string>
+    <string name="reverb_title_account_verified">Account verified!</string>
+    <string name="reverb_title_logging_in">Logging in…</string>
+    <string name="reverb_title_verified">Done!</string>
+    <string name="reverb_title_verifying_code">Verifying your code…</string>
+    <string-array name="theme_options">
+        <item>Default</item>
+        <item>Salmon</item>
+        <item>Yellow</item>
+        <item>Red</item>
+        <item>Dog</item>
+        <item>Bicycle</item>
+        <item>Reverb A</item>
+        <item>Reverb B</item>
+        <item>Reverb C</item>
+    </string-array>
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/accountkit_styles.xml b/samples/LoginSample/src/main/res/values/accountkit_styles.xml
new file mode 100644
index 000000000..6e490e3a8
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/accountkit_styles.xml
@@ -0,0 +1,48 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <style name="Sample.ScrollContent" parent="Base.Sample.ScrollContent" />
+
+    <style name="Base.Sample.ScrollContent" parent="">
+        <item name="android:gravity">center_horizontal</item>
+        <item name="android:layout_height">wrap_content</item>
+        <item name="android:layout_width">match_parent</item>
+        <item name="android:orientation">vertical</item>
+        <item name="android:paddingBottom">@dimen/activity_vertical_margin</item>
+        <item name="android:paddingLeft">@dimen/activity_horizontal_margin</item>
+        <item name="android:paddingRight">@dimen/activity_horizontal_margin</item>
+        <item name="android:paddingTop">@dimen/activity_vertical_margin</item>
+    </style>
+
+    <style name="Reverb.Footer" parent="Base.Reverb.Footer" />
+
+    <style name="Base.Reverb.Footer" parent="">
+        <item name="android:gravity">center_horizontal|bottom</item>
+        <item name="android:layout_height">wrap_content</item>
+        <item name="android:layout_marginBottom">@dimen/reverb_footer_margin_bottom</item>
+        <item name="android:layout_marginLeft">@dimen/reverb_content_margin_start</item>
+        <item name="android:layout_marginRight">@dimen/reverb_content_margin_end</item>
+        <item name="android:layout_marginTop">@dimen/reverb_footer_margin_top</item>
+        <item name="android:layout_width">match_parent</item>
+        <item name="android:orientation">vertical</item>
+    </style>
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/accountkit_themes.xml b/samples/LoginSample/src/main/res/values/accountkit_themes.xml
new file mode 100644
index 000000000..f28bc7c42
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/accountkit_themes.xml
@@ -0,0 +1,119 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <style name="AppLoginTheme" parent="Theme.AccountKit" />
+    <style name="AppLoginTheme.Salmon" parent="Theme.AccountKit">
+        <item name="com_accountkit_primary_color">@android:color/white</item>
+        <item name="com_accountkit_primary_text_color">#565a5c</item>
+        <item name="com_accountkit_secondary_color">#ffe5e5</item>
+        <item name="com_accountkit_secondary_text_color">
+            ?attr/com_accountkit_primary_text_color
+        </item>
+        <item name="com_accountkit_status_bar_color">@android:color/black</item>
+        <item name="com_accountkit_button_background_color">#ff5a5f</item>
+        <item name="com_accountkit_button_text_color">@android:color/white</item>
+        <item name="com_accountkit_icon_color">#ff5a5f</item>
+        <item name="com_accountkit_toolbar_elevation">8dp</item>
+    </style>
+    <style name="AppLoginTheme.Yellow" parent="Theme.AccountKit.Outline">
+        <item name="com_accountkit_primary_color">#f4bf56</item>
+        <item name="com_accountkit_primary_text_color">@android:color/white</item>
+        <item name="com_accountkit_secondary_text_color">#44566b</item>
+        <item name="com_accountkit_status_bar_color">#ed9d00</item>
+        <item name="com_accountkit_input_accent_color">?attr/com_accountkit_primary_color</item>
+        <item name="com_accountkit_input_border_color">?attr/com_accountkit_primary_color</item>
+    </style>
+    <style name="AppLoginTheme.Red" parent="Theme.AccountKit.Outline">
+        <item name="com_accountkit_primary_color">#333333</item>
+        <item name="com_accountkit_primary_text_color">@android:color/white</item>
+        <item name="com_accountkit_secondary_text_color">#151515</item>
+        <item name="com_accountkit_status_bar_color">@android:color/black</item>
+        <item name="com_accountkit_background_color">#f7f7f7</item>
+        <item name="com_accountkit_button_background_color">#e02727</item>
+        <item name="com_accountkit_button_border_color">
+            ?attr/com_accountkit_button_background_color
+        </item>
+        <item name="com_accountkit_input_border_color">#bbbbbb</item>
+    </style>
+    <style name="AppLoginTheme.Dog" parent="Theme.AccountKit">
+        <item name="com_accountkit_primary_color">@android:color/white</item>
+        <item name="com_accountkit_primary_text_color">#44566b</item>
+        <item name="com_accountkit_secondary_color">#ccffffff</item>
+        <item name="com_accountkit_secondary_text_color">@android:color/white</item>
+        <item name="com_accountkit_background">@drawable/dog</item>
+        <item name="com_accountkit_background_color">#994e7e24</item>
+        <item name="com_accountkit_input_text_color">?attr/com_accountkit_primary_text_color</item>
+    </style>
+    <style name="AppLoginTheme.Bicycle" parent="Theme.AccountKit.Outline">
+        <item name="com_accountkit_primary_color">#ff5a5f</item>
+        <item name="com_accountkit_primary_text_color">@android:color/white</item>
+        <item name="com_accountkit_secondary_text_color">@android:color/white</item>
+        <item name="com_accountkit_background">@drawable/bicycle</item>
+        <item name="com_accountkit_background_color">#66000000</item>
+        <item name="com_accountkit_input_accent_color">@android:color/white</item>
+        <item name="com_accountkit_input_background_color">#00000000</item>
+        <item name="com_accountkit_input_border_color">@android:color/white</item>
+    </style>
+    <style name="Base.AppLoginTheme.Reverb" parent="AppLoginTheme">
+        <item name="com_accountkit_primary_color">?attr/com_accountkit_secondary_color</item>
+        <item name="com_accountkit_primary_text_color">
+            ?attr/com_accountkit_secondary_text_color
+        </item>
+        <item name="com_accountkit_secondary_color">@color/reverb_light</item>
+        <item name="com_accountkit_secondary_text_color">@color/reverb_text</item>
+        <item name="com_accountkit_status_bar_color">@color/reverb_dark</item>
+        <item name="com_accountkit_button_background_color">@color/reverb_dark</item>
+        <item name="com_accountkit_button_border_color">@color/reverb_dark</item>
+        <item name="com_accountkit_button_text_color">@android:color/white</item>
+        <item name="com_accountkit_content_body_layout_weight">1</item>
+        <item name="com_accountkit_content_bottom_layout_weight">1</item>
+        <item name="com_accountkit_content_footer_layout_weight">0</item>
+        <item name="com_accountkit_content_header_layout_weight">1</item>
+        <item name="com_accountkit_content_text_layout_weight">1</item>
+        <item name="com_accountkit_content_top_layout_weight">1</item>
+        <item name="com_accountkit_content_margin_end">@dimen/reverb_content_margin_end</item>
+        <item name="com_accountkit_content_margin_start">@dimen/reverb_content_margin_start</item>
+        <item name="com_accountkit_content_max_width">@dimen/reverb_content_max_width</item>
+        <item name="com_accountkit_content_min_height">@dimen/reverb_content_min_height</item>
+        <item name="com_accountkit_icon_color">?attr/com_accountkit_status_bar_color</item>
+        <item name="reverb_app_icon_visibility">gone</item>
+        <item name="reverb_back_arrow_src">@drawable/reverb_arrow_purple</item>
+        <item name="reverb_content_margin_top">@dimen/reverb_content_margin_top_small</item>
+        <item name="reverb_text_all_caps">false</item>
+    </style>
+    <style name="AppLoginTheme.Reverb.A" parent="Base.AppLoginTheme.Reverb">
+        <item name="com_accountkit_header_background_color">@android:color/white</item>
+        <item name="com_accountkit_header_text_color">?attr/com_accountkit_status_bar_color</item>
+    </style>
+    <style name="AppLoginTheme.Reverb.B" parent="Base.AppLoginTheme.Reverb">
+        <item name="com_accountkit_header_background_color">#7c7aa0</item>
+        <item name="com_accountkit_header_text_color">@android:color/white</item>
+        <item name="reverb_app_icon_visibility">visible</item>
+        <item name="reverb_back_arrow_src">@drawable/reverb_arrow_white</item>
+        <item name="reverb_content_margin_top">@dimen/reverb_content_margin_top_large</item>
+        <item name="reverb_text_all_caps">true</item>
+    </style>
+    <style name="AppLoginTheme.Reverb.C" parent="AppLoginTheme.Reverb.A">
+        <item name="reverb_app_icon_visibility">visible</item>
+        <item name="reverb_text_all_caps">true</item>
+    </style>
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/attrs.xml b/samples/LoginSample/src/main/res/values/attrs.xml
new file mode 100644
index 000000000..e20fc7ffd
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/attrs.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <declare-styleable name="Theme.AccountKitSample.Style">
+        <attr name="reverb_app_icon_visibility" format="enum">
+            <enum name="visible" value="0" />
+            <enum name="gone" value="2" />
+        </attr>
+        <attr name="reverb_back_arrow_src" format="reference" />
+        <attr name="reverb_content_margin_top" format="dimension" />
+        <attr name="reverb_text_all_caps" format="boolean" />
+    </declare-styleable>
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/blacklisted_phone_country_codes.xml b/samples/LoginSample/src/main/res/values/blacklisted_phone_country_codes.xml
new file mode 100644
index 000000000..3ef4ccaea
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/blacklisted_phone_country_codes.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources xmlns:tools="http://schemas.android.com/tools">
+    <string-array name="blacklistedSmsCountryCodes" tools:ignore="MissingTranslation">
+        <item>ID</item>
+    </string-array>
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/colors.xml b/samples/LoginSample/src/main/res/values/colors.xml
new file mode 100644
index 000000000..a887ffe50
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/colors.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+
+    <color name="colorPrimary">#3F51B5</color>
+    <color name="colorPrimaryDark">#303F9F</color>
+    <color name="colorAccent">#FF4081</color>
+
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/dimens.xml b/samples/LoginSample/src/main/res/values/dimens.xml
new file mode 100644
index 000000000..34e488dbb
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/dimens.xml
@@ -0,0 +1,26 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <!-- Default screen margins, per the Android Design guidelines. -->
+    <dimen name="activity_horizontal_margin">16dp</dimen>
+    <dimen name="activity_vertical_margin">16dp</dimen>
+
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/strings.xml b/samples/LoginSample/src/main/res/values/strings.xml
new file mode 100644
index 000000000..72639e7c0
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/strings.xml
@@ -0,0 +1,85 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+
+    <string name="app_name">Login Sample</string>
+    <string name="facebook_app_id">133094273807591</string>
+    <string name="fb_login_protocol_scheme">fb133094273807591</string>
+    <string name="ACCOUNT_KIT_CLIENT_TOKEN">9d92ebdd3db421ff3ddb041fb8fe60c0</string>
+    <string name="ak_login_protocol_scheme">ak133094273807591</string>
+
+    <string name="login_with_account_kit">Log in with AccountKit</string>
+
+    <string name="welcome">Welcome!</string>
+    <string name="log_in_with_facebook">Log in with Facebook</string>
+    <string name="permissions">Permissions</string>
+    <string name="label_facebook_login">Facebook Login</string>
+    <string name="label_account_kit_login">Account Kit Login</string>
+    <string name="de_authorize_app">De-authorize App</string>
+    <string name="failed_to_deauth">"failed to deauthorize app %1s"</string>
+    <string name="app_not_logged_in">App not logged in</string>
+    <string name="success">SUCCESS</string>
+    <string name="cancel">CANCEL</string>
+    <string name="error">ERROR</string>
+
+    <string-array name="perms_array">
+        // User Data Permissions
+        <item>basic_info</item>
+        <item>public_profile</item>
+        <item>email</item>
+        <item>publish_actions</item>
+        <item>user_about_me</item>
+        <item>user_activities</item>
+        <item>user_birthday</item>
+        <item>user_mobile_phone</item>
+        <item>user_education_history</item>
+        <item>user_friends</item>
+        <item>user_games_activity</item>
+        <item>user_hometown</item>
+        <item>user_interests</item>
+        <item>user_likes</item>
+        <item>user_location</item>
+        <item>user_photos</item>
+        <item>user_posts</item>
+        <item>user_relationship_details</item>
+        <item>user_relationships</item>
+        <item>user_religion_politics</item>
+        <item>user_status</item>
+        <item>user_tagged_places</item>
+        <item>user_videos</item>
+        <item>user_website</item>
+        <item>user_work_history</item>
+
+        // Other Permissions
+        <item>manage_notifications</item>
+        <item>read_custom_friendlists</item>
+        <item>read_insights</item>
+        <item>read_mailbox</item>
+        <item>read_stream</item>
+        <item>read_audience_network_insights</item>
+
+        // Privacy
+        <item>ONLY_ME</item>
+        <item>FRIENDS</item>
+        <item>EVERYONE</item>
+    </string-array>
+
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/styles.xml b/samples/LoginSample/src/main/res/values/styles.xml
new file mode 100644
index 000000000..cbe3e82a6
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/styles.xml
@@ -0,0 +1,31 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <!-- Customize your theme here. -->
+        <item name="colorPrimary">@color/colorPrimary</item>
+        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+        <item name="colorAccent">@color/colorAccent</item>
+    </style>
+
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/themes.xml b/samples/LoginSample/src/main/res/values/themes.xml
new file mode 100644
index 000000000..7c0e3007e
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/themes.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+
+    <style name="AppTheme.NoActionBar">
+        <item name="windowActionBar">false</item>
+        <item name="windowNoTitle">true</item>
+    </style>
+
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/whitelisted_phone_country_codes.xml b/samples/LoginSample/src/main/res/values/whitelisted_phone_country_codes.xml
new file mode 100644
index 000000000..b573a2b9a
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/whitelisted_phone_country_codes.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <string-array name="whitelistedSmsCountryCodes">
+        <item>ID</item>
+        <item>US</item>
+    </string-array>
+</resources>
diff --git a/samples/ShareIt/src/com/example/shareit/ShareItApplication.java b/samples/LoginSample/src/test/java/com/facebook/samples/loginsample/ExampleUnitTest.java
similarity index 75%
rename from samples/ShareIt/src/com/example/shareit/ShareItApplication.java
rename to samples/LoginSample/src/test/java/com/facebook/samples/loginsample/ExampleUnitTest.java
index ce2d494f1..b5a7d1ebb 100644
--- a/samples/ShareIt/src/com/example/shareit/ShareItApplication.java
+++ b/samples/LoginSample/src/test/java/com/facebook/samples/loginsample/ExampleUnitTest.java
@@ -18,18 +18,18 @@
  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  */
 
-package com.example.shareit;
+package com.facebook.samples.loginsample;
 
-import android.app.Application;
+import org.junit.Test;
 
-import com.facebook.FacebookSdk;
-import com.facebook.appevents.AppEventsLogger;
+import static org.junit.Assert.*;
 
-public class ShareItApplication extends Application {
-    @Override
-    public void onCreate() {
-        super.onCreate();
-        FacebookSdk.sdkInitialize(getApplicationContext());
-        AppEventsLogger.activateApp(this);
+/**
+ * To work on unit tests, switch the Test Artifact in the Build Variants view.
+ */
+public class ExampleUnitTest {
+    @Test
+    public void addition_isCorrect() throws Exception {
+        assertEquals(4, 2 + 2);
     }
 }
diff --git a/samples/MessengerSendSample/src/main/AndroidManifest.xml b/samples/MessengerSendSample/src/main/AndroidManifest.xml
index e7dd459ff..f2aef47fd 100644
--- a/samples/MessengerSendSample/src/main/AndroidManifest.xml
+++ b/samples/MessengerSendSample/src/main/AndroidManifest.xml
@@ -26,7 +26,6 @@
     <uses-permission android:name="android.permission.INTERNET" />
 
     <application
-        android:name='MessengerSendSampleApplication'
         android:icon='@null'
         android:label='@string/app_name'
         android:theme='@style/Theme.AppCompat.NoActionBar'>
diff --git a/samples/MessengerSendSample/src/main/java/com/facebook/samples/messenger/send/MessengerSendSampleApplication.java b/samples/MessengerSendSample/src/main/java/com/facebook/samples/messenger/send/MessengerSendSampleApplication.java
deleted file mode 100644
index 00cd030f1..000000000
--- a/samples/MessengerSendSample/src/main/java/com/facebook/samples/messenger/send/MessengerSendSampleApplication.java
+++ /dev/null
@@ -1,39 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.samples.messenger.send;
-
-import android.app.Application;
-
-import com.facebook.FacebookSdk;
-import com.facebook.appevents.AppEventsLogger;
-
-/**
- * Application object for sample app.
- */
-public class MessengerSendSampleApplication extends Application {
-
-  @Override
-  public void onCreate() {
-    super.onCreate();
-    FacebookSdk.sdkInitialize(this);
-    AppEventsLogger.activateApp(this);
-  }
-}
diff --git a/samples/RPSSample/AndroidManifest.xml b/samples/RPSSample/AndroidManifest.xml
index 8fa6f400f..129f0c5da 100644
--- a/samples/RPSSample/AndroidManifest.xml
+++ b/samples/RPSSample/AndroidManifest.xml
@@ -28,7 +28,6 @@
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
 
     <application
-        android:name=".RpsApplication"
         android:icon="@drawable/icon"
         android:label="@string/app_name"
         android:theme="@android:style/Theme.NoTitleBar">
@@ -53,13 +52,7 @@
             </intent-filter>
         </activity>
         <activity
-            android:name="com.facebook.FacebookActivity"
-            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
-            android:label="@string/app_name"
-            android:theme="@android:style/Theme.Translucent.NoTitleBar" />
-        <activity
-            android:name="com.facebook.CustomTabActivity"
-            android:exported="true">
+            android:name="com.facebook.CustomTabActivity">
             <intent-filter>
                 <action android:name="android.intent.action.VIEW" />
 
diff --git a/samples/RPSSample/BUCK b/samples/RPSSample/BUCK
deleted file mode 100644
index f2e6f55ec..000000000
--- a/samples/RPSSample/BUCK
+++ /dev/null
@@ -1,35 +0,0 @@
-android_resource(
-  name = 'res',
-  res = 'res',
-  package = 'com.example.rps',
-  deps = [
-    '//facebook:android-sdk',
-  ],
-)
-
-android_library(
-  name = 'lib',
-  srcs = glob(['src/**/*.java']),
-  deps = [
-    ':res',
-    '//facebook:android-sdk',
-    '//libs:android-support-v4',
-  ],
-)
-
-android_binary(
-  name = 'app',
-  manifest = 'AndroidManifest.xml',
-  keystore = '//keystores:debug',
-  package_type = 'debug',
-  deps = [
-    ':lib',
-    '//facebook:android-sdk',
-    '//libs:android-support-v4',
-  ],
-)
-
-project_config(
-  src_target = ':app',
-  src_roots = ['src'],
-)
diff --git a/samples/RPSSample/build.gradle b/samples/RPSSample/build.gradle
index 8ba946d53..d0cc1b80f 100644
--- a/samples/RPSSample/build.gradle
+++ b/samples/RPSSample/build.gradle
@@ -9,6 +9,7 @@ android {
     buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
+        applicationId 'com.example.rps'
         minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
         targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
     }
diff --git a/samples/Scrumptious/AndroidManifest.xml b/samples/Scrumptious/AndroidManifest.xml
index 0cccb0cc1..0fc0fdbfc 100644
--- a/samples/Scrumptious/AndroidManifest.xml
+++ b/samples/Scrumptious/AndroidManifest.xml
@@ -50,13 +50,7 @@
             android:name="com.example.scrumptious.PickerActivity"
             android:label="@string/app_name" />
         <activity
-            android:name="com.facebook.FacebookActivity"
-            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
-            android:label="@string/app_name"
-            android:theme="@android:style/Theme.Translucent.NoTitleBar" />
-        <activity
-            android:name="com.facebook.CustomTabActivity"
-            android:exported="true">
+            android:name="com.facebook.CustomTabActivity">
             <intent-filter>
                 <action android:name="android.intent.action.VIEW" />
                 <category android:name="android.intent.category.DEFAULT" />
diff --git a/samples/Scrumptious/BUCK b/samples/Scrumptious/BUCK
deleted file mode 100644
index 61f0ab4c0..000000000
--- a/samples/Scrumptious/BUCK
+++ /dev/null
@@ -1,35 +0,0 @@
-android_resource(
-  name = 'res',
-  res = 'res',
-  package = 'com.example.scrumptious',
-  deps = [
-    '//facebook:android-sdk',
-  ],
-)
-
-android_library(
-  name = 'lib',
-  srcs = glob(['src/**/*.java']),
-  deps = [
-    ':res',
-    '//facebook:android-sdk',
-    '//libs:android-support-v4',
-  ],
-)
-
-android_binary(
-  name = 'app',
-  manifest = 'AndroidManifest.xml',
-  keystore = '//keystores:debug',
-  package_type = 'debug',
-  deps = [
-    ':lib',
-    '//facebook:android-sdk',
-    '//libs:android-support-v4',
-  ],
-)
-
-project_config(
-  src_target = ':app',
-  src_roots = ['src'],
-)
diff --git a/samples/Scrumptious/build.gradle b/samples/Scrumptious/build.gradle
index 8ba946d53..b939629a6 100644
--- a/samples/Scrumptious/build.gradle
+++ b/samples/Scrumptious/build.gradle
@@ -9,6 +9,7 @@ android {
     buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
+        applicationId 'com.example.scrumptious'
         minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
         targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
     }
diff --git a/samples/Scrumptious/src/com/example/scrumptious/PickerActivity.java b/samples/Scrumptious/src/com/example/scrumptious/PickerActivity.java
index 09dc84ebf..1d8a57bc6 100644
--- a/samples/Scrumptious/src/com/example/scrumptious/PickerActivity.java
+++ b/samples/Scrumptious/src/com/example/scrumptious/PickerActivity.java
@@ -20,17 +20,21 @@
 
 package com.example.scrumptious;
 
+import android.Manifest;
+import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.app.Fragment;
 import android.app.FragmentManager;
 import android.content.Context;
 import android.content.DialogInterface;
+import android.content.pm.PackageManager;
 import android.location.Criteria;
 import android.location.Location;
 import android.location.LocationListener;
 import android.location.LocationManager;
 import android.net.Uri;
+import android.os.Build;
 import android.os.Bundle;
 import android.os.Looper;
 import android.widget.Toast;
@@ -127,6 +131,7 @@ public void onDoneButtonClicked(PickerFragment fragment) {
     }
 
     @Override
+    @SuppressLint("MissingPermission")
     protected void onStart() {
         super.onStart();
         if (FRIEND_PICKER.equals(getIntent().getData())) {
@@ -141,7 +146,7 @@ protected void onStart() {
                 Criteria criteria = new Criteria();
                 LocationManager locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
                 String bestProvider = locationManager.getBestProvider(criteria, false);
-                if (bestProvider != null) {
+                if (bestProvider != null && checkForLocationPermissionsAndRequest()) {
                     location = locationManager.getLastKnownLocation(bestProvider);
                     if (locationManager.isProviderEnabled(bestProvider) && locationListener == null) {
                         locationListener = new LocationListener() {
@@ -185,11 +190,15 @@ public void onProviderDisabled(String s) {
     }
 
     @Override
+    @SuppressLint("MissingPermission")
     protected void onStop() {
         super.onStop();
         if (locationListener != null) {
-            LocationManager locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
-            locationManager.removeUpdates(locationListener);
+            if (hasLocationPermissions()) {
+                LocationManager locationManager =
+                        (LocationManager)getSystemService(Context.LOCATION_SERVICE);
+                locationManager.removeUpdates(locationListener);
+            }
             locationListener = null;
         }
     }
@@ -229,4 +238,36 @@ private void finishActivity() {
         setResult(RESULT_OK, null);
         finish();
     }
+
+    private boolean checkForLocationPermissionsAndRequest() {
+        if (!hasLocationPermissions()) {
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+                requestPermissions(
+                        new String[]{
+                                Manifest.permission.ACCESS_FINE_LOCATION,
+                                Manifest.permission.ACCESS_COARSE_LOCATION
+                        },
+                        0);
+            }
+
+            return false;
+        } else {
+            return true;
+        }
+    }
+
+    private boolean hasLocationPermissions() {
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
+            return true;
+        }
+
+        if (checkSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION)
+                != PackageManager.PERMISSION_GRANTED
+                && checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION)
+                != PackageManager.PERMISSION_GRANTED) {
+            return false;
+        }
+
+        return true;
+    }
 }
diff --git a/samples/Scrumptious/src/com/example/scrumptious/ScrumptiousApplication.java b/samples/Scrumptious/src/com/example/scrumptious/ScrumptiousApplication.java
index ddae0a182..4a775d76f 100644
--- a/samples/Scrumptious/src/com/example/scrumptious/ScrumptiousApplication.java
+++ b/samples/Scrumptious/src/com/example/scrumptious/ScrumptiousApplication.java
@@ -23,7 +23,6 @@
 import android.app.Application;
 
 import com.facebook.FacebookSdk;
-import com.facebook.appevents.AppEventsLogger;
 
 import org.json.JSONObject;
 
@@ -33,14 +32,6 @@
  * Use a custom Application class to pass state data between Activities.
  */
 public class ScrumptiousApplication extends Application {
-
-    @Override
-    public void onCreate() {
-        super.onCreate();
-        FacebookSdk.sdkInitialize(getApplicationContext());
-        AppEventsLogger.activateApp(this);
-    }
-
     private List<JSONObject> selectedUsers;
     private JSONObject selectedPlace;
 
diff --git a/samples/ShareIt/AndroidManifest.xml b/samples/ShareIt/AndroidManifest.xml
index fede962e1..2c8f2fbf1 100644
--- a/samples/ShareIt/AndroidManifest.xml
+++ b/samples/ShareIt/AndroidManifest.xml
@@ -25,7 +25,6 @@
     <uses-permission android:name="android.permission.INTERNET" />
 
     <application
-        android:name="com.example.shareit.ShareItApplication"
         android:allowBackup="true"
         android:icon="@drawable/icon"
         android:label="@string/app_name"
@@ -40,13 +39,7 @@
             </intent-filter>
         </activity>
         <activity
-            android:name="com.facebook.FacebookActivity"
-            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
-            android:label="@string/app_name"
-            android:theme="@android:style/Theme.Translucent.NoTitleBar" />
-        <activity
-            android:name="com.facebook.CustomTabActivity"
-            android:exported="true">
+            android:name="com.facebook.CustomTabActivity">
             <intent-filter>
                 <action android:name="android.intent.action.VIEW" />
                 <category android:name="android.intent.category.DEFAULT" />
diff --git a/samples/ShareIt/build.gradle b/samples/ShareIt/build.gradle
index 3288f92db..173deb16d 100644
--- a/samples/ShareIt/build.gradle
+++ b/samples/ShareIt/build.gradle
@@ -17,7 +17,7 @@ android {
     buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
-        applicationId "com.example.shareit"
+        applicationId 'com.example.shareit'
         minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
         targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
     }
diff --git a/samples/SwitchUserSample/AndroidManifest.xml b/samples/SwitchUserSample/AndroidManifest.xml
index 955229445..d13d8a46c 100644
--- a/samples/SwitchUserSample/AndroidManifest.xml
+++ b/samples/SwitchUserSample/AndroidManifest.xml
@@ -25,7 +25,6 @@
 
     <uses-permission android:name="android.permission.INTERNET" />
     <application
-        android:name=".SwitchUserApplication"
         android:allowBackup="false"
         android:icon="@drawable/icon"
         android:label="@string/app_name">
@@ -40,13 +39,7 @@
             </intent-filter>
         </activity>
         <activity
-            android:name="com.facebook.FacebookActivity"
-            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
-            android:label="@string/app_name"
-            android:theme="@android:style/Theme.Translucent.NoTitleBar" />
-        <activity
-            android:name="com.facebook.CustomTabActivity"
-            android:exported="true">
+            android:name="com.facebook.CustomTabActivity">
             <intent-filter>
                 <action android:name="android.intent.action.VIEW" />
 
diff --git a/samples/SwitchUserSample/build.gradle b/samples/SwitchUserSample/build.gradle
index a34022f03..276a86928 100644
--- a/samples/SwitchUserSample/build.gradle
+++ b/samples/SwitchUserSample/build.gradle
@@ -10,6 +10,7 @@ android {
     buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
+        applicationId 'com.example.switchuser'
         minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
         targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
     }
diff --git a/samples/SwitchUserSample/src/com/example/switchuser/ProfileFragment.java b/samples/SwitchUserSample/src/com/example/switchuser/ProfileFragment.java
index cca057952..310e9ebe9 100644
--- a/samples/SwitchUserSample/src/com/example/switchuser/ProfileFragment.java
+++ b/samples/SwitchUserSample/src/com/example/switchuser/ProfileFragment.java
@@ -120,7 +120,7 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
     public void onDestroy() {
         super.onDestroy();
         profileTracker.stopTracking();
-        accessTokenTracker.startTracking();
+        accessTokenTracker.stopTracking();
     }
 
     public void setOnOptionsItemSelectedListener(OnOptionsItemSelectedListener listener) {
diff --git a/samples/SwitchUserSample/src/com/example/switchuser/UserInfoCache.java b/samples/SwitchUserSample/src/com/example/switchuser/UserInfoCache.java
index c65e9fedd..2ac7fdb9a 100644
--- a/samples/SwitchUserSample/src/com/example/switchuser/UserInfoCache.java
+++ b/samples/SwitchUserSample/src/com/example/switchuser/UserInfoCache.java
@@ -42,7 +42,12 @@ public UserInfo get() {
         if(encodedToken == null) {
             return null;
         }
-        return decodeUserInfo(encodedToken);
+        UserInfo info = decodeUserInfo(encodedToken);
+        if (info.getAccessToken().isExpired()) {
+            clear();
+            return null;
+        }
+        return info;
     }
 
     public void put(UserInfo userInfo) {
diff --git a/settings.gradle b/settings.gradle
index 9b8e32a98..23c413f6a 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -4,6 +4,7 @@ include ':facebook'
 // Samples
 include ':samples:HelloFacebookSample'
 include ':samples:Iconicus'
+include ':samples:LoginSample'
 include ':samples:RPSSample'
 include ':samples:MessengerSendSample'
 include ':samples:Scrumptious'
@@ -11,9 +12,9 @@ include ':samples:SwitchUserSample'
 include ':samples:ShareIt'
 
 if (file('internal/internal-settings.gradle').exists()) {
-  apply from: 'internal/internal-settings.gradle'
+    apply from: 'internal/internal-settings.gradle'
 }
 
 if (file('local.gradle').exists()) {
-  apply from: 'local.gradle'
+    apply from: 'local.gradle'
 }
