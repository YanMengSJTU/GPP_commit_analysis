diff --git a/facebook-core/src/main/java/com/facebook/appevents/codeless/CodelessMatcher.java b/facebook-core/src/main/java/com/facebook/appevents/codeless/CodelessMatcher.java
index cb4686343..83d3967ff 100644
--- a/facebook-core/src/main/java/com/facebook/appevents/codeless/CodelessMatcher.java
+++ b/facebook-core/src/main/java/com/facebook/appevents/codeless/CodelessMatcher.java
@@ -457,9 +457,15 @@ private void attachListener(final MatchedView matchedView,
                     return;
                 }
 
-                // If it's React Native Button, then attach OnTouchListener and then return
-                if (ViewHierarchy.isRCTButton(view, null)) {
-                    attachRCTListener(matchedView, rootView, mapping);
+                // If it's React Native Button, then attach React Native OnTouchListener
+                View RCTRootView = ViewHierarchy.findRCTRootView(view);
+                if (null != RCTRootView && ViewHierarchy.isRCTButton(view, RCTRootView)) {
+                    attachRCTListener(matchedView, rootView, RCTRootView, mapping);
+                    return;
+                }
+
+                // Skip if the view comes from React Native
+                if (view.getClass().getName().startsWith("com.facebook.react")) {
                     return;
                 }
 
@@ -489,13 +495,13 @@ private void attachListener(final MatchedView matchedView,
 
         private void attachRCTListener(final MatchedView matchedView,
                                        final View rootView,
+                                       final View RCTRootView,
                                        final EventBinding mapping){
-            // We should attach the listener to the button's ReactTextView
             if (mapping == null) {
                 return;
             }
             View view = matchedView.getView();
-            if (view == null || !ViewHierarchy.isRCTButton(view, null)) {
+            if (view == null || !ViewHierarchy.isRCTButton(view, RCTRootView)) {
                 return;
             }
 
diff --git a/facebook-core/src/main/java/com/facebook/appevents/codeless/RCTCodelessLoggingEventListener.java b/facebook-core/src/main/java/com/facebook/appevents/codeless/RCTCodelessLoggingEventListener.java
index 89c95b31e..fbf49e22f 100644
--- a/facebook-core/src/main/java/com/facebook/appevents/codeless/RCTCodelessLoggingEventListener.java
+++ b/facebook-core/src/main/java/com/facebook/appevents/codeless/RCTCodelessLoggingEventListener.java
@@ -73,7 +73,11 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
         }
 
         private void logEvent() {
-            final String eventName = this.mapping.getEventName();
+            if (null == mapping) {
+                return;
+            }
+
+            final String eventName = mapping.getEventName();
             final Bundle parameters = CodelessMatcher.getParameters(
                     mapping,
                     rootView.get(),
diff --git a/facebook-core/src/main/java/com/facebook/appevents/codeless/internal/ViewHierarchy.java b/facebook-core/src/main/java/com/facebook/appevents/codeless/internal/ViewHierarchy.java
index 2798041aa..d98019b0a 100644
--- a/facebook-core/src/main/java/com/facebook/appevents/codeless/internal/ViewHierarchy.java
+++ b/facebook-core/src/main/java/com/facebook/appevents/codeless/internal/ViewHierarchy.java
@@ -454,22 +454,10 @@ private static JSONObject getDimensionOfView(View view) {
         return null;
     }
 
-    public static boolean isRCTButton(View view, @Nullable View RCTRootView) {
-        // React Native Button and Touchable components are all ReactViewGroup
-        String className = view.getClass().getName();
-        if (className.equals(CLASS_RCTVIEWGROUP)) {
-            float[] location = getViewLocationOnScreen(view);
-            int touchTargetTag = getTouchReactTag(location, RCTRootView);
-            return touchTargetTag > 0 && touchTargetTag == view.getId();
-        }
-
-        return false;
-    }
-
-    public static int getTouchReactTag(float[] location, @Nullable View RCTRootView) {
+    public static @Nullable View getTouchReactView(float[] location, @Nullable View RCTRootView) {
         initTouchTargetHelperMethods();
         if (null == methodFindTouchTargetView || null == RCTRootView) {
-            return -1;
+            return null;
         }
 
         try {
@@ -478,7 +466,7 @@ public static int getTouchReactTag(float[] location, @Nullable View RCTRootView)
             if (nativeTargetView != null && nativeTargetView.getId() > 0) {
                 View reactTargetView = (View)nativeTargetView.getParent();
                 if (reactTargetView != null) {
-                    return reactTargetView.getId();
+                    return reactTargetView;
                 }
             }
         } catch (IllegalAccessException e) {
@@ -487,7 +475,24 @@ public static int getTouchReactTag(float[] location, @Nullable View RCTRootView)
             Utility.logd(TAG, e);
         }
 
-        return -1;
+        return null;
+    }
+
+    public static boolean isRCTButton(View view, @Nullable View RCTRootView) {
+        // React Native Button and Touchable components are all ReactViewGroup
+        String className = view.getClass().getName();
+        if (className.equals(CLASS_RCTVIEWGROUP)) {
+            float[] location = getViewLocationOnScreen(view);
+            View touchTargetView = getTouchReactView(location, RCTRootView);
+            return touchTargetView != null && touchTargetView.getId() == view.getId();
+        }
+
+        return false;
+    }
+
+    public static boolean isRCTRootView(View view) {
+        String className = view.getClass().getName();
+        return className.equals(CLASS_RCTROOTVIEW);
     }
 
     public static boolean isRCTTextView(View view) {
@@ -495,6 +500,26 @@ public static boolean isRCTTextView(View view) {
         return className.equals(CLASS_RCTTEXTVIEW);
     }
 
+    public static boolean isRCTViewGroup(View view) {
+        String className = view.getClass().getName();
+        return className.equals(CLASS_RCTVIEWGROUP);
+    }
+
+    public static @Nullable View findRCTRootView(View view) {
+        while (null != view) {
+            if (isRCTRootView(view)) {
+                return view;
+            }
+            ViewParent viewParent = view.getParent();
+            if (null != viewParent && viewParent instanceof View) {
+                view = (View)viewParent;
+            } else {
+                break;
+            }
+        }
+        return null;
+    }
+
     private static float[] getViewLocationOnScreen(View view) {
         float[] result = new float[2];
         int[] location = new int[2];
