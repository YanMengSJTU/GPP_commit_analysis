diff --git a/README.md b/README.md
index fcfc937a5..4a6bf34b0 100644
--- a/README.md
+++ b/README.md
@@ -16,6 +16,15 @@ This library includes three sample applications to guide you in development.
 
 * __Hackbook__: This includes Single Sign On implementation (SSO), sample API calls, and advanced features like Get new Permissions, Run sample FQL Query and Graph API Explorer. Check out [Hackbook for Android](https://developers.facebook.com/docs/mobile/android/hackbook/)
 
+Developer Terms
+===============
+* By enabling Facebook integrations, including through this SDK, you can share information with Facebook, including information about peopleâ€™s use of your app. Facebook will use information received in accordance with our Data Use Policy [https://www.facebook.com/about/privacy/], including to provide you with insights about the effectiveness of your ads and the use of your app.  These integrations also enable us and our partners to serve ads on and off Facebook.
+
+* You may limit your sharing of information with us by updating the Insights control in the developer tool [https://developers.facebook.com/apps/<app_id>/advanced].
+
+* If you use a Facebook integration, including to share information with us, you agree and confirm that you have provided appropriate and sufficiently prominent notice to and obtained the appropriate consent from your users regarding such collection, use, and disclosure (including, at a minimum, through your privacy policy). You further agree that you will not share information with us about children under the age of 13.
+
+* You agree to comply with all applicable laws and regulations and also agree to our Terms <https://www.facebook.com/policies/>, including our Platform Policies <https://developers.facebook.com/policy/>.and Advertising Guidelines, as applicable <https://www.facebook.com/ad_guidelines.php>.
 
 Report Issues/Bugs
 ===============
diff --git a/facebook/src/com/facebook/android/Facebook.java b/facebook/src/com/facebook/android/Facebook.java
index 80083a6e1..509f20bcf 100644
--- a/facebook/src/com/facebook/android/Facebook.java
+++ b/facebook/src/com/facebook/android/Facebook.java
@@ -24,14 +24,19 @@
 import android.app.Activity;
 import android.content.ActivityNotFoundException;
 import android.content.ComponentName;
+import android.content.ContentResolver;
 import android.content.Context;
 import android.content.Intent;
 import android.content.ServiceConnection;
+import android.content.SharedPreferences;
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
 import android.content.pm.PackageManager.NameNotFoundException;
 import android.content.pm.ResolveInfo;
 import android.content.pm.Signature;
+import android.database.Cursor;
+import android.net.Uri;
+import android.os.AsyncTask;
 import android.os.Bundle;
 import android.os.Handler;
 import android.os.IBinder;
@@ -40,6 +45,8 @@
 import android.os.RemoteException;
 import android.text.TextUtils;
 import android.webkit.CookieSyncManager;
+import org.json.JSONException;
+import org.json.JSONObject;
 
 /**
  * Main Facebook object for interacting with the Facebook developer API.
@@ -60,6 +67,18 @@
     public static final String EXPIRES = "expires_in";
     public static final String SINGLE_SIGN_ON_DISABLED = "service_disabled";
 
+    public static final Uri ATTRIBUTION_ID_CONTENT_URI =
+        Uri.parse("content://com.facebook.katana.provider.AttributionIdProvider");
+    public static final String ATTRIBUTION_ID_COLUMN_NAME = "aid";
+
+    private static final String ATTRIBUTION_PREFERENCES = "com.facebook.sdk.attributionTracking";
+    private static final String PUBLISH_ACTIVITY_PATH = "%s/activities";
+    private static final String MOBILE_INSTALL_EVENT = "MOBILE_APP_INSTALL";
+    private static final String SUPPORTS_ATTRIBUTION = "supports_attribution";
+    private static final String APPLICATION_FIELDS = "fields";
+    private static final String ANALYTICS_EVENT = "event";
+    private static final String ATTRIBUTION_KEY = "attribution";
+
     public static final int FORCE_DIALOG_AUTH = -1;
 
     private static final String LOGIN = "oauth";
@@ -89,6 +108,9 @@
     // we try to refresh the access token again.
     final private long REFRESH_TOKEN_BARRIER = 24L * 60L * 60L * 1000L;
 
+    private boolean shouldAutoPublishInstall = true;
+    private AutoPublishAsyncTask mAutoPublishAsyncTask = null;
+
     /**
      * Constructor for Facebook object.
      *
@@ -196,6 +218,9 @@ public void authorize(Activity activity, String[] permissions,
 
         mAuthDialogListener = listener;
 
+        // fire off an auto-attribution publish if appropriate.
+        autoPublishAsync(activity.getApplicationContext());
+
         // Prefer single sign-on, where available.
         if (activityCode >= 0) {
             singleSignOnStarted = startSingleSignOn(activity, mAppId,
@@ -913,6 +938,155 @@ public void setAppId(String appId) {
         mAppId = appId;
     }
 
+    /**
+     * Get Attribution ID for app install conversion tracking.
+     * @param contentResolver
+     * @return Attribution ID that will be used for conversion tracking. It will be null only if
+     *         the user has not installed or logged in to the Facebook app.
+     */
+    public static String getAttributionId(ContentResolver contentResolver) {
+        String [] projection = {ATTRIBUTION_ID_COLUMN_NAME};
+        Cursor c = contentResolver.query(ATTRIBUTION_ID_CONTENT_URI, projection, null, null, null);
+        if (c == null || !c.moveToFirst()) {
+            return null;
+        }
+        String attributionId = c.getString(c.getColumnIndex(ATTRIBUTION_ID_COLUMN_NAME));
+
+        return attributionId;
+    }
+
+    /**
+     * Get the auto install publish setting.  If true, an install event will be published during authorize(), unless
+     * it has occurred previously or the app does not have install attribution enabled on the application's developer
+     * config page.
+     * @return
+     */
+    public boolean getShouldAutoPublishInstall() {
+        return shouldAutoPublishInstall;
+    }
+
+    /**
+     * Sets whether auto publishing of installs will occur.
+     * @param value
+     */
+    public void setShouldAutoPublishInstall(boolean value) {
+        shouldAutoPublishInstall = value;
+    }
+
+    /**
+     * Manually publish install attribution to the facebook graph.  Internally handles tracking repeat calls to prevent
+     * multiple installs being published to the graph.
+     * @param context
+     * @return returns false on error.  Applications should retry until true is returned.  Safe to call again after
+     * true is returned.
+     */
+    public boolean publishInstall(final Context context) {
+        try {
+            // copy the application id to guarantee thread safety..
+            String applicationId = mAppId;
+            if (applicationId != null) {
+                publishInstall(this, applicationId, context);
+                return true;
+            }
+        } catch (Exception e) {
+            // if there was an error, fall through to the failure case.
+            Util.logd("Facebook-publish", e.getMessage());
+        }
+        return false;
+    }
+
+    /**
+     * This function does the heavy lifting of publishing an install.
+     * @param fb
+     * @param applicationId
+     * @param context
+     * @throws Exception
+     */
+    private static void publishInstall(final Facebook fb, final String applicationId, final Context context)
+            throws JSONException, FacebookError, MalformedURLException, IOException {
+
+        String attributionId = Facebook.getAttributionId(context.getContentResolver());
+        SharedPreferences preferences = context.getSharedPreferences(ATTRIBUTION_PREFERENCES, Context.MODE_PRIVATE);
+        String pingKey = applicationId+"ping";
+        long lastPing = preferences.getLong(pingKey, 0);
+        if (lastPing == 0 && attributionId != null) {
+            Bundle supportsAttributionParams = new Bundle();
+            supportsAttributionParams.putString(APPLICATION_FIELDS, SUPPORTS_ATTRIBUTION);
+            JSONObject supportResponse = Util.parseJson(fb.request(applicationId, supportsAttributionParams));
+            Object doesSupportAttribution = (Boolean)supportResponse.get(SUPPORTS_ATTRIBUTION);
+
+            if (!(doesSupportAttribution instanceof Boolean)) {
+                throw new JSONException(String.format(
+                    "%s contains %s instead of a Boolean", SUPPORTS_ATTRIBUTION, doesSupportAttribution));
+            }
+
+            if ((Boolean)doesSupportAttribution) {
+                Bundle publishParams = new Bundle();
+                publishParams.putString(ANALYTICS_EVENT, MOBILE_INSTALL_EVENT);
+                publishParams.putString(ATTRIBUTION_KEY, attributionId);
+
+                String publishUrl = String.format(PUBLISH_ACTIVITY_PATH, applicationId);
+
+                fb.request(publishUrl, publishParams, "POST");
+
+                // denote success since no error threw from the post.
+                SharedPreferences.Editor editor = preferences.edit();
+                editor.putLong(pingKey, System.currentTimeMillis());
+                editor.commit();
+            }
+        }
+    }
+
+    void autoPublishAsync(final Context context) {
+        AutoPublishAsyncTask asyncTask = null;
+        synchronized (this) {
+            if (mAutoPublishAsyncTask == null) {
+                // copy the application id to guarantee thread safety against our container.
+                String applicationId = Facebook.this.mAppId;
+
+                // skip publish if we don't have an application id.
+                if (applicationId != null) {
+                    asyncTask = mAutoPublishAsyncTask = new AutoPublishAsyncTask(applicationId, context);
+                }
+            }
+        }
+
+        if (asyncTask != null) {
+            asyncTask.execute();
+        }
+    }
+
+    /**
+     * Async implementation to allow auto publishing to not block the ui thread.
+     */
+    private class AutoPublishAsyncTask extends AsyncTask<Void, Void, Void> {
+        private final String mApplicationId;
+        private final Context mApplicationContext;
+
+        public AutoPublishAsyncTask(String applicationId, Context context) {
+            mApplicationId = applicationId;
+            mApplicationContext = context.getApplicationContext();
+        }
+
+        @Override
+        protected Void doInBackground(Void... voids) {
+            try {
+                Facebook.publishInstall(Facebook.this, mApplicationId, mApplicationContext);
+            } catch (Exception e) {
+                Util.logd("Facebook-publish", e.getMessage());
+            }
+            return null;
+        }
+
+        @Override
+        protected void onPostExecute(Void result) {
+            // always clear out the publisher to allow other invocations.
+            synchronized (Facebook.this) {
+                mAutoPublishAsyncTask = null;
+            }
+        }
+    }
+
     /**
      * Callback interface for dialog requests.
      *
