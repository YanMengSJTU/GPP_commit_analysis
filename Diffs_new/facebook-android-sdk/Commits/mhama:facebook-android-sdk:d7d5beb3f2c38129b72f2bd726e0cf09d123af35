diff --git a/facebook/src/com/facebook/UiLifecycleHelper.java b/facebook/src/com/facebook/UiLifecycleHelper.java
index 3ebf61c98..91abbcf57 100644
--- a/facebook/src/com/facebook/UiLifecycleHelper.java
+++ b/facebook/src/com/facebook/UiLifecycleHelper.java
@@ -48,6 +48,10 @@
     private static final String DIALOG_CALL_ID_SAVE_KEY =
             "com.facebook.UiLifecycleHelper.pendingFacebookDialogCallKey";
 
+    public interface SessionFactory {
+        public Session create();
+    }
+
     private final static String ACTIVITY_NULL_MESSAGE = "activity cannot be null";
 
     private final Activity activity;
@@ -59,6 +63,7 @@
     private PendingCallStore pendingFacebookDialogCallStore;
 
     private AppEventsLogger appEventsLogger;
+    private final SessionFactory sessionFactory;
 
     /**
      * Creates a new UiLifecycleHelper.
@@ -76,12 +81,32 @@ public UiLifecycleHelper(Activity activity, Session.StatusCallback callback) {
         this.callback = callback;
         this.receiver = new ActiveSessionBroadcastReceiver();
         this.broadcastManager = LocalBroadcastManager.getInstance(activity);
+        this.sessionFactory = null;
         this.pendingFacebookDialogCallStore = PendingCallStore.getInstance();
 
         // initialize SDK
         Settings.sdkInitialize(activity);
     }
 
+    /**
+     * Creates a new UiLifecycleHelper.
+     *
+     * @param activity the Activity associated with the helper. If calling from a Fragment,
+     *                 use {@link android.support.v4.app.Fragment#getActivity()}
+     * @param callback the callback for Session status changes, can be null
+     * @param factory  the factory object to create new session instance.
+     */
+    public UiLifecycleHelper(Activity activity, Session.StatusCallback callback, SessionFactory factory) {
+        if (activity == null) {
+            throw new IllegalArgumentException(ACTIVITY_NULL_MESSAGE);
+        }
+        this.activity = activity;
+        this.callback = callback;
+        this.receiver = new ActiveSessionBroadcastReceiver();
+        this.broadcastManager = LocalBroadcastManager.getInstance(activity);
+        this.sessionFactory = factory;
+    }
+
     /**
      * To be called from an Activity or Fragment's onCreate method.
      *
@@ -94,7 +119,10 @@ public void onCreate(Bundle savedInstanceState) {
                 session = Session.restoreSession(activity, null, callback, savedInstanceState);
             }
             if (session == null) {
-                session = new Session(activity);
+                if (this.sessionFactory != null)
+                    session = this.sessionFactory.create();
+                else
+                    session = new Session(activity);
             }
             Session.setActiveSession(session);
         }
