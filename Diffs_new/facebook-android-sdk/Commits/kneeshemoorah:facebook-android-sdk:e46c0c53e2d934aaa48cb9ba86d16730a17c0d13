diff --git a/.classpath b/.classpath
deleted file mode 100644
index 9365b7ac5..000000000
--- a/.classpath
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="facebook/src"/>
-	<classpathentry excluding="*" kind="src" path="example"/>
-	<classpathentry excluding="**/*" kind="src" path="facedroid"/>
-	<classpathentry kind="lib" path="/Users/yariv/android-sdk-mac_86/platforms/android-7/android.jar"/>
-	<classpathentry kind="output" path="bin"/>
-</classpath>
diff --git a/.gitignore b/.gitignore
index 9bdb6eecc..47acd648f 100644
--- a/.gitignore
+++ b/.gitignore
@@ -2,8 +2,14 @@
 *.DS_Store
 *.class
 *java#
+*.classpath
+*.project
+*.settings
 facebook/bin/
+facebook/gen/
 examples/stream/bin/
 examples/simple/bin/
 examples/stream/gen/
 examples/simple/gen/
+tests/bin
+tests/gen
\ No newline at end of file
diff --git a/.project b/.project
deleted file mode 100644
index a4dbddaa9..000000000
--- a/.project
+++ /dev/null
@@ -1,33 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>android-sdk</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
diff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs
deleted file mode 100644
index b29c0c109..000000000
--- a/.settings/org.eclipse.jdt.core.prefs
+++ /dev/null
@@ -1,8 +0,0 @@
-#Mon May 10 14:32:59 PDT 2010
-eclipse.preferences.version=1
-org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
-org.eclipse.jdt.core.compiler.compliance=1.6
-org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
-org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
-org.eclipse.jdt.core.compiler.source=1.6
diff --git a/README.md b/README.md
index 9eb89e71c..7c57460dc 100644
--- a/README.md
+++ b/README.md
@@ -1,3 +1,5 @@
+*June 4, 2010: The project configuration has been updated based on user feedback to reduce the number of configuration problems in Eclipse, and to provide better support for those using other build tools, such as Ant.  If you pull this configuration from GitHub, you may need to update your project configuration, or create a new project with your source -- see the set up instructions below.*
+
 This open source Java library allows you to integrate Facebook into your Android application.
 
 Except as otherwise noted, the Facebook Connect Android SDK is licensed under the Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0.html)
@@ -10,13 +12,15 @@ This is an _alpha_ release. In order to guide the development of the library and
 Known Issues
 ------------
 
-In the Facebook login dialog, the WebKit WebView password field misaligns text input and does not display correctly on Android 2.0 and 2.1.  This is reportedly corrected in Android 2.2 (Froyo): see http://code.google.com/p/android/issues/detail?id=5596
+1. In the Facebook login dialog, the WebKit WebView password field misaligns text input and does not display correctly on Android 2.0 and 2.1.  This is corrected in Android 2.2 (Froyo): see http://code.google.com/p/android/issues/detail?id=5596
+
+2. The example apps do not automatically redraw a dialog if the screen orientation changes.
 
-As of May 25, 2010, there is a race condition in the "stream.publish" UI dialog that may prevent the text input box from appearing; this will be corrected with the next server push.
+3. Binary API parameters (such as uploading pictures) is not yet supported -- coming soon, but if you have already implemented it, feel free to send us a patch!
 
-The example app does not automatically redraw a dialog if the screen orientation changes.
+4. The dialog webviews may be blank if an error occurs -- we are working on figuring these out and providing more debugging information.  Sorry for the frustration.
 
-Binary API parameters (such as uploading pictures) is not yet supported -- coming soon!
+5. If you see "an invalid next or cancel parameter was specified" message in the login dialog, then you need to migrate your application to the New Data Permissions.  This can be done by going to http://www.facebook.com/developers/apps.php then selecting the application you are testing with, and clicking "Edit Settings" (the third item underneath Total Users).  On the settings page, click on Migrations (bottom of the left menu), then set New Data Permissions to "Enabled".
 
 Getting Started
 ===============
@@ -28,44 +32,56 @@ Install necessary packages
 
 * Follow the (http://developer.android.com/sdk/index.html)[Android SDK Getting Started Guide].  You will probably want do set up a device emulator and debugging tools (such as using "adb logcat" for viewing the device debugging and error log).
 
-* Pull this repository from github
+* Pull the read-only repository from github
 
-     git clone git@github.com:facebook/facebook-android-sdk.git
+     e.g. "git clone git://github.com/facebook/facebook-android-sdk.git"
 
-* Import the Facebook SDK project into your Eclipse workspace. 
-  * Open the __File__ menu, click on __Import...__ and choose __Existing project into workspace__ under the General group. 
-  * Select the __facebook__ subdirectory from within the git repository. 
-  * You should see an entry for __FacebookSDK__ listed under __Projects__. Click __Finish__.
+     (if you have trouble, you could also try "git clone http://github.com/facebook/facebook-android-sdk.git")
 
-* To ensure Eclipse can build the project, you will have to define the ANDROID_DIR build path variable. 
-  * Right click on the project, select __Build Path->Configure Build Path...__.
-  * In the __Java Build Path__ panel, select the __Libraries__ tab, and click __Add Variable..._.
-  * In the pop up, click on __Configure Variables...__ and then __New...__
-  * In the 'name' field enter __ANDROID_JAR__ and in the 'path' field click on __File...__ and select the android.jar file from the Android SDK directory on your local machine.
+To build with Eclipse (3.5), do the following:
 
-__NOTE: If you run into trouble, add the android.jar file directly to the project's build path.  You can also try Build Clean... from the Eclipse Project menu or Fix Project Properties in the Android Tools on the context (right-click) menu for your project.__
+* Create a new project for the Facebook SDK in your Eclipse workspace. 
+  * Open the __File__ menu, select New --> Project and choose __Android Project__ (inside the Android folder), then click Next.
+  * Select "Create project from existing source".
+  * Select the __facebook__ subdirectory from within the git repository. 
+  * You should see the project properties populated (you might want to change the project name to something like "FacebookSDK").
+  * Click Finish to continue.
 
-The Facebook SDK is now configured and ready to go.
+The Facebook SDK is now configured and ready to go.  
 
 Run the sample application
 --------------------------
 
-To test the SDK, you should run the simple sample application included.
+To test the SDK, you should run the simple sample application.  You can do this with Eclipse (3.5) as follows:
+
+* Create the sample application in your workspace:
+  * Repeat as described above, but choose the __examples/simple__ subdirectory from within the git repository.
+  * Add your Facebook application ID to the Example.java file.  This Facebook app should use the New Data Permissions, as described in the known issues section above.  If you do not have a Facebook application ID, you can create one: http://www.facebook.com/developers/createapp.php
 
-* Import the sample application project into your Eclipse workspace.
-  * Import as above, but choose the __examples/simple__ subdirectory from within the git repository.
-  * You should see an entry for FacebookSDK-example.
+Build the project: from the Project menu, select "Build Project".  You may see a build error about missing "gen" files, but this should go away when you build the project -- if you have trouble, try running "Clean..." in the Project menu.
 
-Update the APP_ID variable in the Example class to your application ID.  Create a Run Configuration under Android Application and Launch the default activity.
+Run the application: from the Run menu, select "Run Configurations...".  Under Android Application, you can create a new run configuration: give it a name and select the simple Example project; use the default activity Launch Action.  See http://developer.android.com/guide/developing/eclipse-adt.html#RunConfig for more details.
 
-To run a sample application on a real device, follow the instructions at http://developer.android.com/guide/developing/device.html 
+To run a sample application on a real device, ensure that the device has Internet access, and follow the instructions at http://developer.android.com/guide/developing/device.html 
 
 Create your own application
 ---------------------------
 
 * Create a Facebook Application: http://www.facebook.com/developers/createapp.php
+
 * Check out the mobile documentation: http://developers.facebook.com/docs/guides/mobile/
 
+* Add a dependency on the Facebook Android SDK library on your application:
+  - from the File menu, select "Properties"
+  - once the project Properties are displayed, open the Android section, which should list the build targets and libraries
+  - in the bottom "Library" section, click "Add..." and select the Facebook SDK project
+  - refer to http://developer.android.com/guide/developing/eclipse-adt.html#libraryProject for more details  
+
+* Ensure that your application has network access (android.permission.INTERNET) in the Android manifest:
+
+    <uses-permission android:name="android.permission.INTERNET"></uses-permission>
+
+
 Usage
 =====
 
diff --git a/examples/simple/.classpath b/examples/simple/.classpath
deleted file mode 100644
index 2c9465bd0..000000000
--- a/examples/simple/.classpath
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry combineaccessrules="false" kind="src" path="/FacebookSDK"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry kind="output" path="bin"/>
-</classpath>
diff --git a/examples/simple/.project b/examples/simple/.project
deleted file mode 100644
index 6487cb926..000000000
--- a/examples/simple/.project
+++ /dev/null
@@ -1,33 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>FacebookSDK-example</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
diff --git a/examples/simple/AndroidManifest.xml b/examples/simple/AndroidManifest.xml
index 5fa1016cc..53668e6b5 100644
--- a/examples/simple/AndroidManifest.xml
+++ b/examples/simple/AndroidManifest.xml
@@ -16,6 +16,6 @@
 		</activity>
 	</application>
 	<uses-permission android:name="android.permission.INTERNET"></uses-permission>
-	<uses-sdk android:minSdkVersion="3" />
-
+	<uses-sdk android:minSdkVersion="3" android:targetSdkVersion="7"/>
+	<supports-screens android:anyDensity="true"/>
 </manifest> 
\ No newline at end of file
diff --git a/examples/simple/default.properties b/examples/simple/default.properties
index a1ef8e9ff..f90bb6b9e 100644
--- a/examples/simple/default.properties
+++ b/examples/simple/default.properties
@@ -7,7 +7,9 @@
 # "build.properties", and override values to adapt the script to your
 # project structure.
 
+android.library.reference.1=../../facebook/
 # Indicates whether an apk should be generated for each density.
 split.density=false
+android.library.reference.1=../../facebook/
 # Project target.
-target=android-3
+target=android-7
diff --git a/examples/simple/src/com/facebook/android/Example.java b/examples/simple/src/com/facebook/android/Example.java
index 72e494b63..2912a8d47 100644
--- a/examples/simple/src/com/facebook/android/Example.java
+++ b/examples/simple/src/com/facebook/android/Example.java
@@ -25,7 +25,6 @@
 import com.facebook.android.SessionEvents.LogoutListener;
 
 import android.app.Activity;
-import android.app.AlertDialog.Builder;
 import android.os.Bundle;
 import android.util.Log;
 import android.view.View;
@@ -56,11 +55,8 @@ public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         
         if (APP_ID == null) {
-            Builder alertBuilder = new Builder(this);
-            alertBuilder.setTitle("Warning");
-            alertBuilder.setMessage("A Facebook Applicaton ID must be " +
+            Util.showAlert(this, "Warning", "Facebook Applicaton ID must be " +
                     "specified before running this example: see Example.java");
-            alertBuilder.create().show();
         }
         
         setContentView(R.layout.main);
@@ -208,4 +204,4 @@ public void onClick(View v) {
         }
     }
     
-}
\ No newline at end of file
+}
diff --git a/examples/stream/.classpath b/examples/stream/.classpath
index 2c9465bd0..4697aee30 100644
--- a/examples/stream/.classpath
+++ b/examples/stream/.classpath
@@ -2,7 +2,7 @@
 <classpath>
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="src" path="gen"/>
-	<classpathentry combineaccessrules="false" kind="src" path="/FacebookSDK"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
+	<classpathentry kind="src" path="com_facebook_android"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>
diff --git a/examples/stream/.project b/examples/stream/.project
index bd79f52f4..3c78f7f49 100644
--- a/examples/stream/.project
+++ b/examples/stream/.project
@@ -1,9 +1,8 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <projectDescription>
-	<name>stream</name>
+	<name>FB Example Stream</name>
 	<comment></comment>
 	<projects>
-		<project>android-sdk</project>
 	</projects>
 	<buildSpec>
 		<buildCommand>
@@ -31,4 +30,16 @@
 		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
 		<nature>org.eclipse.jdt.core.javanature</nature>
 	</natures>
+	<linkedResources>
+		<link>
+			<name>com_facebook_android</name>
+			<type>2</type>
+			<locationURI>_android_com_facebook_android/src</locationURI>
+		</link>
+		<link>
+			<name>sdk</name>
+			<type>2</type>
+			<location>/home/mike/android-workspace/facebook-android-sdk/facebook/src</location>
+		</link>
+	</linkedResources>
 </projectDescription>
diff --git a/examples/stream/.settings/org.eclipse.jdt.core.prefs b/examples/stream/.settings/org.eclipse.jdt.core.prefs
deleted file mode 100644
index f6b327549..000000000
--- a/examples/stream/.settings/org.eclipse.jdt.core.prefs
+++ /dev/null
@@ -1,5 +0,0 @@
-#Tue May 04 17:29:57 PDT 2010
-eclipse.preferences.version=1
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
-org.eclipse.jdt.core.compiler.compliance=1.5
-org.eclipse.jdt.core.compiler.source=1.5
diff --git a/examples/stream/default.properties b/examples/stream/default.properties
index 128c6ef18..e5db9b746 100644
--- a/examples/stream/default.properties
+++ b/examples/stream/default.properties
@@ -7,7 +7,9 @@
 # "build.properties", and override values to adapt the script to your
 # project structure.
 
+android.library.reference.1=../../facebook/
 # Indicates whether an apk should be generated for each density.
 split.density=false
+android.library.reference.1=../../facebook/
 # Project target.
-target=android-7
+target=android-3
diff --git a/examples/stream/src/com/facebook/stream/StreamRenderer.java b/examples/stream/src/com/facebook/stream/StreamRenderer.java
index 0d1f97bd6..fffcd1dbc 100644
--- a/examples/stream/src/com/facebook/stream/StreamRenderer.java
+++ b/examples/stream/src/com/facebook/stream/StreamRenderer.java
@@ -25,6 +25,8 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
+import android.util.Log;
+
 /**
  * Contains logic for converting a JSONObject obtained from
  * querying /me/home to a HTML string that can be rendered
@@ -485,11 +487,16 @@ private void renderComments(JSONObject post) throws JSONException {
      */
     private void renderComment(JSONObject comment) {
         JSONObject from = comment.optJSONObject("from");
-        String authorId = from.optString("id");
-        String authorName = from.optString("name");
+        if (from == null) {
+            Log.w("StreamRenderer",
+                    "Comment missing from field: " + comment.toString());
+        } else {
+            String authorId = from.optString("id");
+            String authorName = from.optString("name");
+            renderAuthor(authorId, authorName);
+        }
         String message = comment.optString("message");
         append("<div class=\"comment\">");
-        renderAuthor(authorId, authorName);
         String[] chunks = {
             "&nbsp;",
             message,
diff --git a/facebook/.classpath b/facebook/.classpath
index 9057b856b..609aa00eb 100644
--- a/facebook/.classpath
+++ b/facebook/.classpath
@@ -1,6 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
 	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="var" path="ANDROID_JAR"/>
+	<classpathentry kind="src" path="gen"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>
diff --git a/facebook/.project b/facebook/.project
index debe3f69c..1611b8447 100644
--- a/facebook/.project
+++ b/facebook/.project
@@ -1,17 +1,33 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <projectDescription>
-	<name>FacebookSDK</name>
+	<name>com_facebook_android</name>
 	<comment></comment>
 	<projects>
 	</projects>
 	<buildSpec>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
 		<buildCommand>
 			<name>org.eclipse.jdt.core.javabuilder</name>
 			<arguments>
 			</arguments>
 		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
 	</buildSpec>
 	<natures>
+		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
 		<nature>org.eclipse.jdt.core.javanature</nature>
 	</natures>
 </projectDescription>
diff --git a/facebook/.settings/org.eclipse.jdt.core.prefs b/facebook/.settings/org.eclipse.jdt.core.prefs
deleted file mode 100644
index 776466067..000000000
--- a/facebook/.settings/org.eclipse.jdt.core.prefs
+++ /dev/null
@@ -1,12 +0,0 @@
-#Fri May 07 12:11:08 PDT 2010
-eclipse.preferences.version=1
-org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
-org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
-org.eclipse.jdt.core.compiler.compliance=1.6
-org.eclipse.jdt.core.compiler.debug.lineNumber=generate
-org.eclipse.jdt.core.compiler.debug.localVariable=generate
-org.eclipse.jdt.core.compiler.debug.sourceFile=generate
-org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
-org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
-org.eclipse.jdt.core.compiler.source=1.6
diff --git a/facebook/AndroidManifest.xml b/facebook/AndroidManifest.xml
new file mode 100644
index 000000000..e6940f838
--- /dev/null
+++ b/facebook/AndroidManifest.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+ * Copyright (C) 2010 Facebook Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+-->
+
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+      package="com.facebook.android">
+    <application/>
+</manifest>
diff --git a/facebook/default.properties b/facebook/default.properties
new file mode 100644
index 000000000..2262a388e
--- /dev/null
+++ b/facebook/default.properties
@@ -0,0 +1,12 @@
+# This file is automatically generated by Android Tools.
+# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
+# 
+# This file must be checked in Version Control Systems.
+# 
+# To customize properties used by the Ant build system use,
+# "build.properties", and override values to adapt the script to your
+# project structure.
+
+android.library=true
+# Project target.
+target=android-3
diff --git a/facebook/pom.xml b/facebook/pom.xml
new file mode 100644
index 000000000..15c22d314
--- /dev/null
+++ b/facebook/pom.xml
@@ -0,0 +1,60 @@
+<project xmlns="http://maven.apache.org/POM/4.0.0" 
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
+    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>com.facebook.android</groupId>
+  <artifactId>facebook</artifactId>
+  <name>Facebook SDK for Android</name>
+  <version>0.0.2-SNAPSHOT</version>
+  <packaging>apk</packaging>
+  <description>Facebook SDK for Android</description>
+  <url>http://github.com/facebook/facebook-android-sdk</url>
+  <issueManagement>
+    <system>Google Code</system>
+    <url>http://github.com/facebook/facebook-android-sdk/issues</url>
+  </issueManagement>
+  <licenses>
+    <license>
+      <name>Apache License 2.0</name>
+      <url>http://www.apache.org/licenses/LICENSE-2.0</url>
+    </license>
+  </licenses>
+  <scm>
+    <connection>scm:git:http://github.com/facebook/facebook-android-sdk.git</connection>
+    <developerConnection>scm:git:http://github.com/facebook/facebook-android-sdk.git</developerConnection>
+    <url>http://github.com/facebook/facebook-android-sdk/</url>
+  </scm>
+  <build>
+    <sourceDirectory>src</sourceDirectory>
+	<plugins>
+		<plugin>
+			<groupId>com.jayway.maven.plugins.android.generation2</groupId>
+			<artifactId>maven-android-plugin</artifactId>
+			<configuration>
+				<sdk>
+					<path>${env.ANDROID_HOME}</path>
+					<platform>3</platform>
+				</sdk>
+				<deleteConflictingFiles>true</deleteConflictingFiles>
+			</configuration>
+			<extensions>true</extensions>
+		</plugin>
+		<plugin>
+			<artifactId>maven-compiler-plugin</artifactId>
+			<configuration>
+				<source>1.6</source>
+				<target>1.6</target>
+				<encoding>UTF-8</encoding>
+			</configuration>
+		</plugin>
+	</plugins>
+  </build>
+  <dependencies>
+          <dependency>
+            <groupId>android</groupId>
+            <artifactId>android</artifactId>
+	    <version>1.5_r3</version>
+            <scope>provided</scope>
+        </dependency>
+  </dependencies>
+</project>
diff --git a/facebook/res/drawable-hdpi/facebook_icon.png b/facebook/res/drawable-hdpi/facebook_icon.png
new file mode 100644
index 000000000..af8e077ac
Binary files /dev/null and b/facebook/res/drawable-hdpi/facebook_icon.png differ
diff --git a/facebook/res/drawable-ldpi/facebook_icon.png b/facebook/res/drawable-ldpi/facebook_icon.png
new file mode 100644
index 000000000..5bbc2cc91
Binary files /dev/null and b/facebook/res/drawable-ldpi/facebook_icon.png differ
diff --git a/facebook/src/icon.png b/facebook/res/drawable-mdpi/facebook_icon.png
similarity index 100%
rename from facebook/src/icon.png
rename to facebook/res/drawable-mdpi/facebook_icon.png
diff --git a/facebook/src/com/facebook/android/Facebook.java b/facebook/src/com/facebook/android/Facebook.java
index bbd407312..f3bd4435a 100644
--- a/facebook/src/com/facebook/android/Facebook.java
+++ b/facebook/src/com/facebook/android/Facebook.java
@@ -20,10 +20,13 @@
 import java.io.IOException;
 import java.net.MalformedURLException;
 
+import android.Manifest;
 import android.content.Context;
+import android.content.pm.PackageManager;
 import android.os.Bundle;
 import android.text.TextUtils;
 import android.util.Log;
+import android.webkit.CookieSyncManager;
 
 /**
  * Main Facebook object for interacting with the Facebook developer API.
@@ -47,7 +50,7 @@
     protected static String OAUTH_ENDPOINT = 
         "https://graph.facebook.com/oauth/authorize";
     protected static String UI_SERVER = 
-        "http://www.facebook.com/connect/uiserver.php";
+        "https://www.facebook.com/connect/uiserver.php";
     protected static String GRAPH_BASE_URL = 
         "https://graph.facebook.com/";
     protected static String RESTSERVER_URL = 
@@ -104,10 +107,12 @@ public void authorize(Context context,
         if (permissions.length > 0) {
             params.putString("scope", TextUtils.join(",", permissions));
         }
+        CookieSyncManager.createInstance(context);
         dialog(context, LOGIN, params, new DialogListener() {
 
-            @Override
             public void onComplete(Bundle values) {
+                // ensure any cookies set by the dialog are saved
+                CookieSyncManager.getInstance().sync(); 
                 setAccessToken(values.getString(TOKEN));
                 setAccessExpiresIn(values.getString(EXPIRES));
                 if (isSessionValid()) {
@@ -120,19 +125,16 @@ public void onComplete(Bundle values) {
                 }                
             }
 
-            @Override
             public void onError(DialogError error) {
                 Log.d("Facebook-authorize", "Login failed: " + error);
                 listener.onError(error);
             }
 
-            @Override
             public void onFacebookError(FacebookError error) {
                 Log.d("Facebook-authorize", "Login failed: " + error);
                 listener.onFacebookError(error);
             }
-            
-            @Override
+
             public void onCancel() {
                 Log.d("Facebook-authorize", "Login cancelled");
                 listener.onCancel();
@@ -352,7 +354,13 @@ public void dialog(Context context,
             parameters.putString(TOKEN, getAccessToken());
         }
         String url = endpoint + "?" + Util.encodeUrl(parameters);
-        new FbDialog(context, url, listener).show();
+        if (context.checkCallingOrSelfPermission(Manifest.permission.INTERNET)
+                != PackageManager.PERMISSION_GRANTED) {
+            Util.showAlert(context, "Error", 
+                    "Application requires permission to access the Internet");
+        } else {
+            new FbDialog(context, url, listener).show();
+        }
     }
 
     /**
@@ -408,7 +416,7 @@ public void setAccessExpires(long time) {
      * @param expiresIn - duration in seconds
      */
     public void setAccessExpiresIn(String expiresIn) {
-        if (expiresIn != null) {
+        if (expiresIn != null && !expiresIn.equals("0")) {
             setAccessExpires(System.currentTimeMillis()
                     + Integer.parseInt(expiresIn) * 1000);
         }
diff --git a/facebook/src/com/facebook/android/FbDialog.java b/facebook/src/com/facebook/android/FbDialog.java
index 4eb80029a..0cd25b3f7 100644
--- a/facebook/src/com/facebook/android/FbDialog.java
+++ b/facebook/src/com/facebook/android/FbDialog.java
@@ -16,8 +16,6 @@
 
 package com.facebook.android;
 
-import com.facebook.android.Facebook.DialogListener;
-
 import android.app.Dialog;
 import android.app.ProgressDialog;
 import android.content.Context;
@@ -34,21 +32,23 @@
 import android.view.Window;
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
+import android.widget.FrameLayout;
 import android.widget.LinearLayout;
 import android.widget.TextView;
-import android.widget.FrameLayout.LayoutParams;
+
+import com.facebook.android.Facebook.DialogListener;
 
 public class FbDialog extends Dialog {
 
     static final int FB_BLUE = 0xFF6D84B4;
-    static final LayoutParams DEFAULT_LANDSCAPE = new LayoutParams(460, 260);
-    static final LayoutParams DEFAULT_PORTRAIT = new LayoutParams(280, 420);
-    static final LayoutParams FILL = 
-        new LayoutParams(ViewGroup.LayoutParams.FILL_PARENT, 
+    static final float[] DIMENSIONS_LANDSCAPE = {460, 260};
+    static final float[] DIMENSIONS_PORTRAIT = {280, 420};
+    static final FrameLayout.LayoutParams FILL = 
+        new FrameLayout.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT, 
                          ViewGroup.LayoutParams.FILL_PARENT);
     static final int MARGIN = 4;
     static final int PADDING = 2;
-    static final String DISPLAY_STRING = "display=touch";
+    static final String DISPLAY_STRING = "touch";
     static final String FB_ICON = "icon.png";
     
     private String mUrl;
@@ -57,7 +57,7 @@
     private WebView mWebView;
     private LinearLayout mContent;
     private TextView mTitle;
-   
+    
     public FbDialog(Context context, String url, DialogListener listener) {
         super(context);
         mUrl = url;
@@ -76,23 +76,26 @@ protected void onCreate(Bundle savedInstanceState) {
         setUpTitle();
         setUpWebView();
         Display display = getWindow().getWindowManager().getDefaultDisplay();
-        addContentView(mContent, display.getWidth() < display.getHeight() ?
-                DEFAULT_PORTRAIT : DEFAULT_LANDSCAPE);
+        final float scale = getContext().getResources().getDisplayMetrics().density;
+        float[] dimensions = display.getWidth() < display.getHeight() ?
+        		DIMENSIONS_PORTRAIT : DIMENSIONS_LANDSCAPE;
+        addContentView(mContent, new FrameLayout.LayoutParams(
+        		(int) (dimensions[0] * scale + 0.5f),
+        		(int) (dimensions[1] * scale + 0.5f)));
     }
 
     private void setUpTitle() {
         requestWindowFeature(Window.FEATURE_NO_TITLE);
-        Drawable icon = Drawable.createFromStream(getClass().
-                getClassLoader().getResourceAsStream(FB_ICON), FB_ICON);
+        Drawable icon = getContext().getResources().getDrawable(
+                R.drawable.facebook_icon);
         mTitle = new TextView(getContext());
         mTitle.setText("Facebook");
         mTitle.setTextColor(Color.WHITE);
         mTitle.setTypeface(Typeface.DEFAULT_BOLD);
         mTitle.setBackgroundColor(FB_BLUE);
         mTitle.setPadding(MARGIN + PADDING, MARGIN, MARGIN, MARGIN);
-        mTitle.setCompoundDrawablePadding(MARGIN + PADDING);
-        mTitle.setCompoundDrawablesWithIntrinsicBounds(
-                icon, null, null, null);
+        //mTitle.setCompoundDrawablePadding(MARGIN + PADDING);
+        //mTitle.setCompoundDrawablesWithIntrinsicBounds(icon, null, null, null);
         mContent.addView(mTitle);
     }
     
diff --git a/facebook/src/com/facebook/android/Util.java b/facebook/src/com/facebook/android/Util.java
index 61be5b013..c297e8121 100644
--- a/facebook/src/com/facebook/android/Util.java
+++ b/facebook/src/com/facebook/android/Util.java
@@ -28,6 +28,7 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
+import android.app.AlertDialog.Builder;
 import android.content.Context;
 import android.os.Bundle;
 import android.util.Log;
@@ -236,4 +237,21 @@ public int getResponseCode()
 			return this.responseCode;
 		}
     }
+    
+    /**
+     * Display a simple alert dialog with the given text and title.
+     * 
+     * @param context 
+     *          Android context in which the dialog should be displayed
+     * @param title 
+     *          Alert dialog title
+     * @param text
+     *          Alert dialog message
+     */
+    public static void showAlert(Context context, String title, String text) {
+        Builder alertBuilder = new Builder(context);
+        alertBuilder.setTitle(title);
+        alertBuilder.setMessage(text);
+        alertBuilder.create().show();
+    }
 }
diff --git a/tests/AndroidManifest.xml b/tests/AndroidManifest.xml
new file mode 100644
index 000000000..35f8aefcb
--- /dev/null
+++ b/tests/AndroidManifest.xml
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+      package="com.facebook.android.tests"
+      android:versionCode="1"
+      android:versionName="1.0">
+    <application android:icon="@drawable/icon" android:label="@string/app_name">
+        <activity android:name=".Tests"
+                  android:label="@string/app_name">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+
+    </application>
+    <uses-permission android:name="android.permission.INTERNET"></uses-permission>
+    <uses-sdk android:minSdkVersion="3" />
+</manifest> 
\ No newline at end of file
diff --git a/tests/default.properties b/tests/default.properties
new file mode 100644
index 000000000..1af14f6b5
--- /dev/null
+++ b/tests/default.properties
@@ -0,0 +1,12 @@
+# This file is automatically generated by Android Tools.
+# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
+# 
+# This file must be checked in Version Control Systems.
+# 
+# To customize properties used by the Ant build system use,
+# "build.properties", and override values to adapt the script to your
+# project structure.
+
+android.library.reference.1=../b5/facebook-android-sdk/facebook/
+# Project target.
+target=android-3
diff --git a/tests/res/drawable/icon.png b/tests/res/drawable/icon.png
new file mode 100644
index 000000000..a07c69fa5
Binary files /dev/null and b/tests/res/drawable/icon.png differ
diff --git a/tests/res/layout/main.xml b/tests/res/layout/main.xml
new file mode 100644
index 000000000..1d0daf1c5
--- /dev/null
+++ b/tests/res/layout/main.xml
@@ -0,0 +1,73 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="fill_parent"
+    android:layout_height="fill_parent" android:background="@drawable/black"
+    android:gravity="center_horizontal">
+
+    <TextView android:id="@+id/publicTests" 
+        android:text="@string/hello"
+        android:textColor="@drawable/black"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        />
+    <TextView android:id="@+id/publicErrors" 
+        android:text="@string/hello"
+        android:textColor="@drawable/black"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        />
+    <Button android:id="@+id/login" 
+        android:text="@string/login"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content" 
+        android:paddingRight="20dp" 
+        android:paddingLeft="20dp"
+        android:layout_margin="20dp" 
+        />
+    <TextView android:id="@+id/authenticatedTests" 
+        android:text="@string/hello"
+        android:textColor="@drawable/black"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        />
+    <TextView android:id="@+id/authenticatedErrors" 
+        android:text="@string/hello"
+        android:textColor="@drawable/black"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        />  
+    <Button android:id="@+id/post" 
+        android:text="@string/post"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content" 
+        android:paddingRight="20dp" 
+        android:paddingLeft="20dp"
+        android:layout_margin="20dp" 
+        />
+    <TextView android:id="@+id/wallPost" 
+        android:text="@string/hello"
+        android:textColor="@drawable/black"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        />
+    <TextView android:id="@+id/deletedPost" 
+        android:text="@string/hello"
+        android:textColor="@drawable/black"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        /> 
+    <Button android:id="@+id/logout" 
+        android:text="@string/logout"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content" 
+        android:paddingRight="20dp" 
+        android:paddingLeft="20dp"
+        android:layout_margin="20dp" 
+        />
+    <TextView android:id="@+id/logoutTest" 
+        android:text="@string/hello"
+        android:textColor="@drawable/black"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        />
+</LinearLayout>
diff --git a/tests/res/values/colors.xml b/tests/res/values/colors.xml
new file mode 100644
index 000000000..2aa7e8e36
--- /dev/null
+++ b/tests/res/values/colors.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <drawable name="white">#ffffff</drawable>
+    <drawable name="black">#000000</drawable>
+</resources>
\ No newline at end of file
diff --git a/tests/res/values/strings.xml b/tests/res/values/strings.xml
new file mode 100644
index 000000000..1c7c09076
--- /dev/null
+++ b/tests/res/values/strings.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="hello">Hello World, Tests!</string>
+    <string name="login">Test Login</string>
+    <string name="post">Test UI Server</string>
+    <string name="logout">Test Logout</string>
+    <string name="app_name">Functional Tests</string>
+</resources>
diff --git a/tests/src/com/facebook/android/tests/Tests.java b/tests/src/com/facebook/android/tests/Tests.java
new file mode 100644
index 000000000..7cf762b3c
--- /dev/null
+++ b/tests/src/com/facebook/android/tests/Tests.java
@@ -0,0 +1,586 @@
+package com.facebook.android.tests;
+
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.net.MalformedURLException;
+import java.net.URLEncoder;
+
+import org.json.JSONObject;
+
+import com.facebook.android.AsyncFacebookRunner;
+import com.facebook.android.DialogError;
+import com.facebook.android.Facebook;
+import com.facebook.android.FacebookError;
+import com.facebook.android.Util;
+import com.facebook.android.AsyncFacebookRunner.RequestListener;
+import com.facebook.android.Facebook.DialogListener;
+
+import android.app.Activity;
+import android.graphics.Color;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.widget.Button;
+import android.widget.TextView;
+
+public class Tests extends Activity {
+    
+    // Your Facebook Application ID must be set before running this example
+    // See http://www.facebook.com/developers/createapp.php
+    public static final String APP_ID = "110862205611506";
+    
+    private static final String[] PERMISSIONS =
+        new String[] {"publish_stream", "read_stream", "offline_access"};
+    
+    TextView publicTestsText;
+    TextView publicErrorsText;
+    Button loginButton;
+    TextView authenticatedTestsText;
+    TextView authenticatedErrorsText;
+    Button postButton;
+    TextView wallPostText;
+    TextView deletedPostText;
+    Button logoutButton;
+    TextView logoutText;
+    
+    Facebook authenticatedFacebook = new Facebook();
+    
+    /** Called when the activity is first created. */
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.main);
+        
+        publicTestsText = (TextView) findViewById(R.id.publicTests);
+        publicErrorsText = (TextView) findViewById(R.id.publicErrors);
+        loginButton = (Button) findViewById(R.id.login);
+        authenticatedTestsText = (TextView) findViewById(
+                R.id.authenticatedTests);
+        authenticatedErrorsText = (TextView) findViewById(
+                R.id.authenticatedErrors);
+        postButton = (Button) findViewById(R.id.post);
+        wallPostText = (TextView) findViewById(R.id.wallPost);
+        deletedPostText = (TextView) findViewById(R.id.deletedPost);
+        logoutButton = (Button) findViewById(R.id.logout);
+        logoutText = (TextView) findViewById(R.id.logoutTest);
+               
+        // button to test UI Server login method
+        loginButton.setOnClickListener(new OnClickListener() {
+            public void onClick(View v) {
+                authenticatedFacebook.authorize(Tests.this, 
+                        APP_ID, PERMISSIONS, new TestLoginListener());
+            }
+        });
+        
+        // button for testing UI server publish stream dialog
+        postButton.setOnClickListener(new OnClickListener() {
+            public void onClick(View v) {
+                authenticatedFacebook.dialog(Tests.this, "stream.publish", 
+                        new TestUiServerListener());
+            }
+        });
+        
+        // enable logout test button
+        logoutButton.setOnClickListener(new OnClickListener() {
+            public void onClick(View v) {
+                runTestLogout();
+            }
+        });
+        
+        runTestPublicApi();
+    }
+    
+    public void runTestPublicApi() {
+        if (testPublicApi()) {
+            publicTestsText.setText("Public API tests passed");
+            publicTestsText.setTextColor(Color.GREEN);
+        } else {
+            publicTestsText.setText("Public API tests failed");
+            publicTestsText.setTextColor(Color.RED);
+        }
+        
+        if (testPublicErrors()) {
+            publicErrorsText.setText("Public API errors passed");
+            publicErrorsText.setTextColor(Color.GREEN);
+        } else {
+            publicErrorsText.setText("Public API errors failed");
+            publicErrorsText.setTextColor(Color.RED);
+        }
+    }
+    
+    public boolean testPublicApi() {
+        Facebook fb = new Facebook();
+        try {
+            Log.d("Tests", "Testing standard API call");
+            JSONObject response = Util.parseJson(fb.request("4"));
+            if (!response.getString("name").equals("Mark Zuckerberg")) {
+                return false;
+            }
+            
+            Log.d("Tests", "Testing an API call with a specific method");
+            response = Util.parseJson(
+                    fb.request("soneff", new Bundle(), "GET"));
+            if (!response.getString("name").equals("Steven Soneff")) {
+                return false;
+            }
+            
+            Log.d("Tests", "Testing a public search query");
+            Bundle params = new Bundle();
+            params.putString("q", "facebook");
+            response = Util.parseJson(fb.request("search", params));
+            if (response.getJSONArray("data").length() == 0) return false;
+            
+            Log.d("Tests", "Public API Tests passed"); 
+            return true;
+        } catch (Throwable e) {
+            e.printStackTrace();
+            return false;
+        }
+    }
+    
+    public boolean testPublicErrors() {
+        Facebook fb = new Facebook();
+        try {
+            Bundle params = new Bundle();
+            
+            Log.d("Tests", "Testing illegal post");
+            params.putString("message", "Hello World");
+            try {
+                Util.parseJson(fb.request("4", params, "POST"));
+                return false;
+            } catch (FacebookError e) {
+                Log.d("Tests", "*" + e.getMessage() + "*");
+                if (!e.getMessage().equals("Unsupported post request.")) {
+                    return false;
+                }
+            }
+            
+            Log.d("Tests", "Testing illegal delete");
+            try {
+                Util.parseJson(fb.request("4", new Bundle(), "DELETE"));
+                return false;
+            } catch (FacebookError e) {
+                Log.d("Tests", "*" + e.getMessage() + "*");
+                if (!e.getMessage().equals("Unsupported delete request.")) {
+                    return false;
+                }
+            }
+            
+            Log.d("Tests", "Testing illegal post to Zuck's feed");
+            try {
+                Util.parseJson(fb.request("4/feed", new Bundle(), "POST"));
+                return false;
+            } catch (FacebookError e) {
+                Log.d("Tests", "*" + e.getMessage() + "*");
+                if (!e.getMessage().equals("(#200) The user hasn't " +
+                		"authorized the application to perform this action")) {
+                    return false;
+                }
+            }
+            
+            Log.d("Tests", "Testing invalidly specified parameters");
+            try {
+                Util.parseJson(fb.request("bgolub?fields=id,name,picture"));
+                return false;
+            } catch (FacebookError e) {
+                Log.d("Tests", "*" + e.getMessage() + "*");
+                if (!e.getMessage().startsWith("Unknown fields: picture?")) {
+                    return false;
+                }
+            }
+            
+            Log.d("Tests", "Testing request for 'me' is rejected without " +
+            		"access_token");
+            try {
+                Util.parseJson(fb.request("me"));
+                return false;
+            } catch (FacebookError e) {
+                Log.d("Tests", "*" + e.getMessage() + "*");
+                if (!e.getMessage().equals(
+                        "An active access token must be used to " +
+                        "query information about the current user.")) {
+                    return false;
+                }
+            }
+            
+            Log.d("Tests", "Testing empty request");
+            try {
+                Util.parseJson(fb.request(""));
+                return false;
+            } catch (FacebookError e) {
+                Log.d("Tests", "*" + e.getMessage() + "*");
+                if (!e.getMessage().equals("Unsupported get request.")) {
+                    return false;
+                }
+            }
+            
+            Log.d("Tests", "Testing an invalid path");
+            try {
+                Util.parseJson(fb.request("invalidinvalidinvalidinvalid"));
+                return false;
+            } catch (FacebookError e) {
+                Log.d("Tests", "*" + e.getMessage() + "*");
+                if (!e.getMessage().equals(
+                        "Some of the aliases you requested do not exist: " +
+                        "invalidinvalidinvalidinvalid")) {
+                    return false;
+                }
+            }
+            
+            Log.d("Tests", "Testing missing query parameter");
+            try {
+                Util.parseJson(fb.request("search", new Bundle(), "GET"));
+                return false;
+            } catch (FacebookError e) {
+                Log.d("Tests", "*" + e.getMessage() + "*");
+                if (!e.getMessage().equals("No node specified")) return false;
+            }
+            
+            Log.d("Tests", "Testing that API method is specified");
+            try {
+                fb.request(new Bundle());
+                return false;
+            } catch (IllegalArgumentException e) {
+                Log.d("Tests", "*" + e.getMessage() + "*");
+                if (!e.getMessage().equals(
+                        "API method must be specified. " +
+                        "(parameters must contain key \"method\" " +
+                        "and value). See http://developers.facebook." +
+                        "com/docs/reference/rest/")) {
+                    return false;
+                }
+            }
+            
+            Log.d("Tests", "Testing that old API cannot be made without " +
+            		"access token");
+            params.putString("method", "stream.publish");
+            try {
+                Util.parseJson(fb.request(params));
+                return false;
+            } catch (FacebookError e) {
+                Log.d("Tests", "*" + e.getMessage() + "*");
+                if (e.getErrorCode() != 101 || 
+                        !e.getMessage().equals("Invalid API key") ) {
+                    return false;
+                }
+            }
+            
+            Log.d("Tests", "Testing invalid access token");
+            try {
+                fb.setAccessToken("invalid");
+                Util.parseJson(fb.request("me", new Bundle(), "GET"));
+                return false;
+            } catch (FacebookError e) {
+                Log.d("Tests", "*" + e.getMessage() + "*");
+                if (!e.getMessage().equals("Invalid OAuth access token.")) {
+                    return false;
+                }
+            }
+            
+            Log.d("Tests", "Public API Error Tests passed"); 
+            return true;
+        } catch (Throwable e) {
+            e.printStackTrace();
+            return false;
+        }
+    }
+    
+    public class TestLoginListener implements DialogListener {
+
+        public void onComplete(Bundle values) {
+            if (testAuthenticatedApi()) {
+                authenticatedTestsText.setText(
+                        "Authenticated API tests passed");
+                authenticatedTestsText.setTextColor(Color.GREEN);
+            } else {
+                authenticatedTestsText.setText(
+                        "Authenticated API tests failed");
+                authenticatedTestsText.setTextColor(Color.RED);
+            }
+            if (testAuthenticatedErrors()) {
+                authenticatedErrorsText.setText(
+                        "Authenticated API errors passed");
+                authenticatedErrorsText.setTextColor(Color.GREEN);
+            } else {
+                authenticatedErrorsText.setText(
+                        "Authenticated API errors failed");
+                authenticatedErrorsText.setTextColor(Color.RED);
+            }
+        }
+
+        public void onCancel() {
+        }
+
+        public void onError(DialogError e) {
+            e.printStackTrace();
+        }
+
+        public void onFacebookError(FacebookError e) {
+            e.printStackTrace();
+        }
+    }
+    
+    public boolean testAuthenticatedApi() {
+        if (!authenticatedFacebook.isSessionValid()) return false;
+        try {
+            Log.d("Tests", "Testing request for 'me'");
+            String response = authenticatedFacebook.request("me");
+            JSONObject obj = Util.parseJson(response);
+            if (obj.getString("name") == null || 
+                    obj.getString("name").equals("")) {
+                return false;
+            }
+            
+            Log.d("Tests", "Testing graph API wall post");
+            Bundle parameters = new Bundle();
+            parameters.putString("message", URLEncoder.encode("hello world"));
+            parameters.putString("description", 
+                    URLEncoder.encode("test test test"));
+            response = authenticatedFacebook.request("me/feed", parameters, 
+                    "POST");
+            Log.d("Tests", "got response: " + response);
+            if (response == null || response.equals("") || 
+                    response.equals("false")) {
+                return false;
+            }
+            
+            Log.d("Tests", "Testing graph API delete");
+            response = response.replaceAll("\\{\"id\":\"", "");
+            response = response.replaceAll("\"\\}", "");
+            response = authenticatedFacebook.request(response, new Bundle(), 
+                    "DELETE");
+            if (!response.equals("true")) return false;
+            
+            Log.d("Tests", "Testing old API wall post");
+            parameters = new Bundle();
+            parameters.putString("method", "stream.publish");
+            String attachments = 
+                URLEncoder.encode("{\"name\":\"Name=Title\"," +
+                		"\"href\":\"http://www.google.fr/\",\"" +
+                		"caption\":\"Caption\",\"description\":\"Description" +
+                		"\",\"media\":[{\"type\":\"image\",\"src\":" +
+                		"\"http://www.kratiroff.com/logo-facebook.jpg\"," +
+                		"\"href\":\"http://developers.facebook.com/\"}]," +
+                		"\"properties\":{\"another link\":{\"text\":\"" +
+                		"Facebook homepage\",\"href\":\"http://www.facebook." +
+                		"com\"}}}");
+            parameters.putString("attachment", attachments);
+            response = authenticatedFacebook.request(parameters);
+            Log.d("Tests", "got response: " + response);
+            if (response == null || response.equals("") || 
+                    response.equals("false")) {
+                return false;
+            }
+            
+            Log.d("Tests", "Testing wall post delete");
+            response = response.replaceAll("\"", "");
+            response = authenticatedFacebook.request(
+                    response, new Bundle(), "DELETE");
+            if (!response.equals("true")) return false;
+            
+            Log.d("Tests", "All Authenticated Tests Passed");
+            return true;
+        } catch (Throwable e) {
+            e.printStackTrace();
+            return false;
+        }
+    }
+    
+    public boolean testAuthenticatedErrors() {
+        if (!authenticatedFacebook.isSessionValid()) return false;
+        
+        Log.d("Tests", "Testing that request for 'me/invalid' is rejected");
+        try {
+            Util.parseJson(authenticatedFacebook.request("me/invalid"));
+            return false;
+        } catch (Throwable e) {
+            Log.d("Tests", "*" + e.getMessage() + "*");
+            if (!e.getMessage().equals("Unknown path components: /invalid")) {
+                return false;
+            }
+        }
+        
+        Log.d("Tests", "Testing that old API call with invalid method fails");
+        Bundle params = new Bundle();
+        params.putString("method", "something_invalid");
+        try {
+            Util.parseJson(authenticatedFacebook.request(params));
+            return false;
+        } catch (Throwable e) {
+            Log.d("Tests", "*" + e.getMessage() + "*");
+            if (!e.getMessage().equals("Unknown method") ) {
+                return false;
+            }
+        }
+        
+        Log.d("Tests", "All Authenticated Error Tests Passed");
+        return true;
+    }
+    
+    public class TestUiServerListener implements DialogListener {
+
+        public void onComplete(Bundle values) {
+            final String postId = values.getString("post_id");
+            if (postId != null) {
+                Log.d("Facebook-Example", "Dialog Success! post_id=" + postId);
+                new AsyncFacebookRunner(authenticatedFacebook).request(postId, 
+                        new TestPostRequestListener());
+            } else {
+                Tests.this.runOnUiThread(new Runnable() {
+                    public void run() {
+                        wallPostText.setText("Wall Post Failure");
+                        wallPostText.setTextColor(Color.RED);
+                    }
+                });
+            }
+        }
+
+        public void onCancel() { }
+
+        public void onError(DialogError e) {
+            e.printStackTrace();
+        }
+
+        public void onFacebookError(FacebookError e) {
+            e.printStackTrace();
+        }
+    }
+    
+    public class TestPostRequestListener implements RequestListener {
+        
+        public void onComplete(final String response) {
+            Log.d("Tests", "Got response: " + response);
+            try {
+                JSONObject json = Util.parseJson(response);
+                //final String message = json.getString("message");
+                String postId = json.getString("id");
+                Tests.this.runOnUiThread(new Runnable() {
+                    public void run() {
+                        wallPostText.setText("Wall Post Success");
+                        wallPostText.setTextColor(Color.GREEN);
+                    }
+                });
+                
+                Log.d("Tests", "Testing wall post delete");
+                if (testPostDelete(postId)) {
+                    Tests.this.runOnUiThread(new Runnable() {
+                        public void run() {
+                            deletedPostText.setText("Deleted Post Success");
+                            deletedPostText.setTextColor(Color.GREEN);
+                        }
+                    });
+                } else {
+                    Tests.this.runOnUiThread(new Runnable() {
+                        public void run() {
+                            deletedPostText.setText("Deleted Post Failure");
+                            deletedPostText.setTextColor(Color.RED);
+                        }
+                    });
+                }
+            } catch (Throwable e) {
+                e.printStackTrace();
+                Tests.this.runOnUiThread(new Runnable() {
+                    public void run() {
+                        wallPostText.setText("Wall Post Failure");
+                        wallPostText.setTextColor(Color.RED);
+                    }
+                });
+            }
+        }
+
+        public void onFacebookError(FacebookError e) {
+            e.printStackTrace();
+        }
+
+        public void onFileNotFoundException(FileNotFoundException e) {
+            e.printStackTrace();
+        }
+
+        public void onIOException(IOException e) {
+            e.printStackTrace();
+        }
+
+        public void onMalformedURLException(MalformedURLException e) {
+            e.printStackTrace();
+        }
+    }
+    
+    public boolean testPostDelete(String postId) {
+        try {
+            String deleteResponse = 
+                authenticatedFacebook.request(postId, new Bundle(), "DELETE");
+            return deleteResponse.equals("true");
+        } catch (Throwable e) {
+            e.printStackTrace();
+            return false;
+        }
+    }
+    
+    public void runTestLogout() {
+        if (testLogout()) {
+            logoutText.setText("Logout Tests Passed");
+            logoutText.setTextColor(Color.GREEN);
+        } else {
+            logoutText.setText("Logout Tests Failed");
+            logoutText.setTextColor(Color.RED);
+        }
+    }
+    
+    public boolean testLogout() {
+        try {
+            String oldAccessToken = authenticatedFacebook.getAccessToken();
+            
+            Log.d("Tests", "Testing logout");
+            String response = authenticatedFacebook.logout(this);
+            Log.d("Tests", "Got logout response: *" + response + "*");
+            if (!response.equals("true")) {
+                return false;
+            }
+            
+            Log.d("Tests", "Testing logout on logged out facebook session");
+            try {
+                Util.parseJson(authenticatedFacebook.logout(this));
+                return false;
+            } catch (FacebookError e) {
+                if (e.getErrorCode() != 101 || 
+                        !e.getMessage().equals("Invalid API key") ) {
+                    return false;
+                }
+            }
+            
+            Log.d("Tests", "Testing logout on unauthenticated object");
+            try {
+                Util.parseJson(new Facebook().logout(this));
+                return false;
+            } catch (FacebookError e) {
+                if (e.getErrorCode() != 101 || 
+                        !e.getMessage().equals("Invalid API key") ) {
+                    return false;
+                }
+            }
+            
+            Log.d("Tests", "Testing that old access token no longer works");
+            Facebook invalidFb = new Facebook();
+            invalidFb.setAccessToken(oldAccessToken);
+            try {
+                Util.parseJson(invalidFb.request("me"));
+                return false;
+            } catch (FacebookError e) {
+                if (!e.getMessage().equals("Error processing access token.")) {
+                    return false;
+                }
+            }
+            
+            Log.d("Tests", "All Logout Tests Passed");
+            return true;
+        } catch (Throwable e) {
+            e.printStackTrace();
+            return false;
+        }
+    }
+    
+    // test bad UI server method?
+    
+    // test invalid permission? <-- UI server test
+}
\ No newline at end of file
