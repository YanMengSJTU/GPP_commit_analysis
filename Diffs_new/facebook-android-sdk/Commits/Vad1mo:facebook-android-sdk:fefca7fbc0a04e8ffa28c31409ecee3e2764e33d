diff --git a/facebook/AndroidManifest.xml b/facebook/AndroidManifest.xml
index e6940f838..c79b191b3 100644
--- a/facebook/AndroidManifest.xml
+++ b/facebook/AndroidManifest.xml
@@ -17,5 +17,6 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.facebook.android">
+    <uses-sdk android:minSdkVersion="3"/>
     <application/>
 </manifest>
diff --git a/facebook/project.properties b/facebook/project.properties
index ea36ac54a..cd0ca122a 100644
--- a/facebook/project.properties
+++ b/facebook/project.properties
@@ -12,4 +12,4 @@
 
 android.library=true
 # Project target.
-target=android-3
+target=android-8
diff --git a/facebook/src/com/facebook/android/Facebook.java b/facebook/src/com/facebook/android/Facebook.java
index aa92877dd..c01b9a8f0 100644
--- a/facebook/src/com/facebook/android/Facebook.java
+++ b/facebook/src/com/facebook/android/Facebook.java
@@ -800,11 +800,12 @@ public void dialog(Context context, String action, Bundle parameters,
             parameters.putString("client_id", mAppId);
         } else {
             parameters.putString("app_id", mAppId);
+            if (isSessionValid()) {
+                parameters.putString(TOKEN, getAccessToken());
+            }
         }
 
-        if (isSessionValid()) {
-            parameters.putString(TOKEN, getAccessToken());
-        }
+
         String url = endpoint + "?" + Util.encodeUrl(parameters);
         if (context.checkCallingOrSelfPermission(Manifest.permission.INTERNET)
                 != PackageManager.PERMISSION_GRANTED) {
diff --git a/facebook/src/com/facebook/android/FacebookError.java b/facebook/src/com/facebook/android/FacebookError.java
index 3a2c6cd43..e2d7b2c85 100644
--- a/facebook/src/com/facebook/android/FacebookError.java
+++ b/facebook/src/com/facebook/android/FacebookError.java
@@ -27,7 +27,7 @@
     private static final long serialVersionUID = 1L;
 
     private int mErrorCode = 0;
-    private String mErrorType;
+    private String mErrorType = "none";
 
     public FacebookError(String message) {
         super(message);
diff --git a/facebook/src/com/facebook/android/UploadContext.java b/facebook/src/com/facebook/android/UploadContext.java
new file mode 100644
index 000000000..eb441d482
--- /dev/null
+++ b/facebook/src/com/facebook/android/UploadContext.java
@@ -0,0 +1,27 @@
+package com.facebook.android;
+
+import android.content.Context;
+import android.os.Handler;
+import android.os.Handler.Callback;
+import android.os.Looper;
+
+/**
+ * Call Back showing the already transfered and total bytes send to FB
+ * 
+ *	@see {@link Util#uploadProgress}  to register your implementation 
+ * <br/>
+ * Example:
+ * <p><blockquote><pre>
+ *Util.uploadProgress = new UploadDataProgress(){
+ *		public void progress(int totalBytes, int transferedBytes) {
+ *			notification.contentView.setProgressBar(R.id.status_progress, totalBytes, transferedBytes, false);
+ *			notificationManager.notify(42, notification);
+ *		}
+ *};
+ * </pre></blockquote></p>
+ */
+public abstract class UploadContext extends Handler{
+	
+	public abstract Context getContext();
+	
+}
\ No newline at end of file
diff --git a/facebook/src/com/facebook/android/Util.java b/facebook/src/com/facebook/android/Util.java
index c8bdfaa11..e1119347d 100644
--- a/facebook/src/com/facebook/android/Util.java
+++ b/facebook/src/com/facebook/android/Util.java
@@ -31,344 +31,371 @@
 import java.net.URLDecoder;
 import java.net.URLEncoder;
 
+import org.apache.http.client.HttpClient;
+import org.apache.http.impl.client.DefaultHttpClient;
 import org.json.JSONException;
 import org.json.JSONObject;
 
+import roboguice.util.Ln;
+
 import android.app.AlertDialog.Builder;
 import android.content.Context;
+import android.content.res.AssetFileDescriptor;
+import android.net.Uri;
 import android.os.Bundle;
+import android.os.Message;
+import android.os.Parcelable;
 import android.util.Log;
 import android.webkit.CookieManager;
 import android.webkit.CookieSyncManager;
 
 /**
  * Utility class supporting the Facebook Object.
- *
+ * 
  * @author ssoneff@facebook.com
- *
+ * 
  */
 public final class Util {
+	public static final String TAG = Util.class.getSimpleName();
+	
 
-    /**
-     * Set this to true to enable log output.  Remember to turn this back off
-     * before releasing.  Sending sensitive data to log is a security risk.
-     */
-    private static boolean ENABLE_LOG = false;
-    
-	static UploadDataProgress uploadProgress;
-
-    /**
-     * Generate the multi-part post body providing the parameters and boundary
-     * string
-     * 
-     * @param parameters the parameters need to be posted
-     * @param boundary the random string as boundary
-     * @return a string of the post body
-     */
-    public static String encodePostBody(Bundle parameters, String boundary) {
-        if (parameters == null) return "";
-        StringBuilder sb = new StringBuilder();
-
-        for (String key : parameters.keySet()) {
-            Object parameter = parameters.get(key);
-            if (!(parameter instanceof String)) {
-                continue;
-            }
-
-            sb.append("Content-Disposition: form-data; name=\"" + key +
-                    "\"\r\n\r\n" + (String)parameter);
-            sb.append("\r\n" + "--" + boundary + "\r\n");
-        }
-
-        return sb.toString();
-    }
-
-    public static String encodeUrl(Bundle parameters) {
-        if (parameters == null) {
-            return "";
-        }
-
-        StringBuilder sb = new StringBuilder();
-        boolean first = true;
-        for (String key : parameters.keySet()) {
-            Object parameter = parameters.get(key);
-            if (!(parameter instanceof String)) {
-                continue;
-            }
-
-            if (first) first = false; else sb.append("&");
-            sb.append(URLEncoder.encode(key) + "=" +
-                      URLEncoder.encode(parameters.getString(key)));
-        }
-        return sb.toString();
-    }
-
-    public static Bundle decodeUrl(String s) {
-        Bundle params = new Bundle();
-        if (s != null) {
-            String array[] = s.split("&");
-            for (String parameter : array) {
-                String v[] = parameter.split("=");
-                if (v.length == 2) {
-                    params.putString(URLDecoder.decode(v[0]),
-                                     URLDecoder.decode(v[1]));
-                }
-            }
-        }
-        return params;
-    }
-
-    /**
-     * Parse a URL query and fragment parameters into a key-value bundle.
-     *
-     * @param url the URL to parse
-     * @return a dictionary bundle of keys and values
-     */
-    public static Bundle parseUrl(String url) {
-        // hack to prevent MalformedURLException
-        url = url.replace("fbconnect", "http");
-        try {
-            URL u = new URL(url);
-            Bundle b = decodeUrl(u.getQuery());
-            b.putAll(decodeUrl(u.getRef()));
-            return b;
-        } catch (MalformedURLException e) {
-            return new Bundle();
-        }
-    }
-
-    
-    /**
-     * Connect to an HTTP URL and return the response as a string.
-     *
-     * Note that the HTTP method override is used on non-GET requests. (i.e.
-     * requests are made as "POST" with method specified in the body).
-     *
-     * @param url - the resource to open: must be a welformed URL
-     * @param method - the HTTP method to use ("GET", "POST", etc.)
-     * @param params - the query parameter for the URL (e.g. access_token=foo)
-     * @return the URL contents as a String
-     * @throws MalformedURLException - if the URL format is invalid
-     * @throws IOException - if a network problem occurs
-     */
-    public static String openUrl(String url, String method, Bundle params)
-          throws MalformedURLException, IOException {
-        // random string as boundary for multi-part http post
-        String strBoundary = "3i2ndDfv2rTHiSisAbouNdArYfORhtTPEefj3q2f";
-        String endLine = "\r\n";
-
-        OutputStream os;
-
-        if (method.equals("GET")) {
-            url = url + "?" + encodeUrl(params);
-        }
-        Util.logd("Facebook-Util", method + " URL: " + url);
-        HttpURLConnection conn =
-            (HttpURLConnection) new URL(url).openConnection();
-        conn.setRequestProperty("User-Agent", System.getProperties().
-                getProperty("http.agent") + " FacebookAndroidSDK");
-        if (!method.equals("GET")) {
-            Bundle dataparams = new Bundle();
-            for (String key : params.keySet()) {
-                Object parameter = params.get(key);
-                if (parameter instanceof byte[]) {
-                    dataparams.putByteArray(key, (byte[])parameter);
-                }
-            }
-
-            // use method override
-            if (!params.containsKey("method")) {
-                params.putString("method", method);
-            }
-
-            if (params.containsKey("access_token")) {
-                String decoded_token =
-                    URLDecoder.decode(params.getString("access_token"));
-                params.putString("access_token", decoded_token);
-            }
-
-            conn.setRequestMethod("POST");
-            conn.setRequestProperty(
-                    "Content-Type",
-                    "multipart/form-data;boundary="+strBoundary);
-            conn.setDoOutput(true);
-            conn.setDoInput(true);
-            conn.setRequestProperty("Connection", "Keep-Alive");
-            conn.connect();
-            os = new BufferedOutputStream(conn.getOutputStream());
-
-            os.write(("--" + strBoundary +endLine).getBytes());
-            os.write((encodePostBody(params, strBoundary)).getBytes());
-            os.write((endLine + "--" + strBoundary + endLine).getBytes());
-
-            if (!dataparams.isEmpty()) {
-
-                for (String key: dataparams.keySet()){
-                    os.write(("Content-Disposition: form-data; filename=\"" + key + "\"" + endLine).getBytes());
-                    os.write(("Content-Type: content/unknown" + endLine + endLine).getBytes());
-                    writeWithProgress(dataparams.getByteArray(key),os);
-                    os.write((endLine + "--" + strBoundary + endLine).getBytes());
-
-                }
-            }
-            os.flush();
-        }
-
-        String response = "";
-        try {
-            response = read(conn.getInputStream());
-        } catch (FileNotFoundException e) {
-            // Error Stream contains JSON that we can parse to a FB error
-            response = read(conn.getErrorStream());
-        }
-        return response;
-    }
+	/**
+	 * Set this to true to enable log output. Remember to turn this back off
+	 * before releasing. Sending sensitive data to log is a security risk.
+	 */
+	private static boolean ENABLE_LOG = false;
+
+	public static UploadContext handler;
+
+	/**
+	 * Generate the multi-part post body providing the parameters and boundary
+	 * string
+	 * 
+	 * @param parameters
+	 *            the parameters need to be posted
+	 * @param boundary
+	 *            the random string as boundary
+	 * @return a string of the post body
+	 */
+	public static String encodePostBody(Bundle parameters, String boundary) {
+		if (parameters == null)
+			return "";
+		StringBuilder sb = new StringBuilder();
+
+		for (String key : parameters.keySet()) {
+			Object parameter = parameters.get(key);
+			if (!(parameter instanceof String)) {
+				continue;
+			}
+
+			sb.append("Content-Disposition: form-data; name=\"" + key + "\"\r\n\r\n" + (String) parameter);
+			sb.append("\r\n" + "--" + boundary + "\r\n");
+		}
 
-	
-    
-	/** If {@link Util#uploadProgress} is not null the registered progress listener will be called.
-	 * @param data to be transfered
-	 * @param os OutputStrem to transfer too
+		return sb.toString();
+	}
+
+	public static String encodeUrl(Bundle parameters) {
+		if (parameters == null) {
+			return "";
+		}
+
+		StringBuilder sb = new StringBuilder();
+		boolean first = true;
+		for (String key : parameters.keySet()) {
+			Object parameter = parameters.get(key);
+			if (!(parameter instanceof String)) {
+				continue;
+			}
+
+			if (first)
+				first = false;
+			else
+				sb.append("&");
+			sb.append(URLEncoder.encode(key) + "=" + URLEncoder.encode(parameters.getString(key)));
+		}
+		return sb.toString();
+	}
+
+	public static Bundle decodeUrl(String s) {
+		Bundle params = new Bundle();
+		if (s != null) {
+			String array[] = s.split("&");
+			for (String parameter : array) {
+				String v[] = parameter.split("=");
+				if (v.length == 2) {
+					params.putString(URLDecoder.decode(v[0]), URLDecoder.decode(v[1]));
+				}
+			}
+		}
+		return params;
+	}
+
+	/**
+	 * Parse a URL query and fragment parameters into a key-value bundle.
+	 * 
+	 * @param url
+	 *            the URL to parse
+	 * @return a dictionary bundle of keys and values
+	 */
+	public static Bundle parseUrl(String url) {
+		// hack to prevent MalformedURLException
+		url = url.replace("fbconnect", "http");
+		try {
+			URL u = new URL(url);
+			Bundle b = decodeUrl(u.getQuery());
+			b.putAll(decodeUrl(u.getRef()));
+			return b;
+		} catch (MalformedURLException e) {
+			return new Bundle();
+		}
+	}
+
+	/**
+	 * Connect to an HTTP URL and return the response as a string.
+	 * 
+	 * Note that the HTTP method override is used on non-GET requests. (i.e.
+	 * requests are made as "POST" with method specified in the body).
+	 * 
+	 * @param url
+	 *            - the resource to open: must be a welformed URL
+	 * @param method
+	 *            - the HTTP method to use ("GET", "POST", etc.)
+	 * @param params
+	 *            - the query parameter for the URL (e.g. access_token=foo)
+	 * @return the URL contents as a String
+	 * @throws MalformedURLException
+	 *             - if the URL format is invalid
 	 * @throws IOException
+	 *             - if a network problem occurs
 	 */
-	private static void writeWithProgress(byte[] data, OutputStream os) throws IOException {
-		BufferedInputStream bis = new BufferedInputStream(new ByteArrayInputStream(data));
-		byte[] buffer = new byte[8192]; //8k
+	public static String openUrl(String url, String method, Bundle params) throws MalformedURLException, IOException {
+		// random string as boundary for multi-part http post
+		String strBoundary = "3i2ndDfv2rTHiSisAbouNdArYfORhtTPEefj3q2f";
+		String endLine = "\r\n";
+
+		OutputStream os;
+
+		if (method.equals("GET")) {
+			url = url + "?" + encodeUrl(params);
+		}
+		Util.logd("Facebook-Util", method + " URL: " + url);
+		HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
+		conn.setRequestProperty("User-Agent", System.getProperties().getProperty("http.agent") + " FacebookAndroidSDK");
+		if (!method.equals("GET")) {
+			Bundle dataparams = new Bundle();
+			for (String key : params.keySet()) {
+				Object parameter = params.get(key);
+				if (parameter instanceof byte[]) {
+					dataparams.putByteArray(key, (byte[]) parameter);
+				}
+				if (parameter instanceof Parcelable) {
+					dataparams.putParcelable(key, (Parcelable) parameter);
+				}
+			}
+
+			// use method override
+			if (!params.containsKey("method")) {
+				params.putString("method", method);
+			}
+
+			if (params.containsKey("access_token")) {
+				String decoded_token = URLDecoder.decode(params.getString("access_token"));
+				params.putString("access_token", decoded_token);
+			}
+
+			conn.setRequestMethod("POST");
+			conn.setRequestProperty("Content-Type", "multipart/form-data;boundary=" + strBoundary);
+			conn.setDoOutput(true);
+			conn.setDoInput(true);
+			conn.setRequestProperty("Connection", "Keep-Alive");
+			conn.setChunkedStreamingMode(0);
+			conn.connect();
+			os = new BufferedOutputStream(conn.getOutputStream());
+
+			os.write(("--" + strBoundary + endLine).getBytes());
+			os.write((encodePostBody(params, strBoundary)).getBytes());
+			os.write((endLine + "--" + strBoundary + endLine).getBytes());
+
+			if (!dataparams.isEmpty()) {
+
+				for (String key : dataparams.keySet()) {
+					os.write(("Content-Disposition: form-data; filename=\"" + key + "\"" + endLine).getBytes());
+					os.write(("Content-Type: content/unknown" + endLine + endLine).getBytes());
+					writeWithProgress(params.getInt("what"), dataparams.get(key), os);
+					os.write((endLine + "--" + strBoundary + endLine).getBytes());
+					os.flush();
+				}
+			}
+			os.flush();
+			os.close();
+		}
+
+		String response = "";
+		try {
+			response = read(conn.getInputStream());
+		} catch (FileNotFoundException e) {
+			// Error Stream contains JSON that we can parse to a FB error
+			response = read(conn.getErrorStream());
+		}
+		conn.disconnect();
+		conn=null;
+		return response;
+	}
+
+	private static void writeWithProgress(int what, Object dataparam, OutputStream os) throws IOException {
+		if (dataparam instanceof byte[]) {
+			byte[] data = (byte[]) dataparam;
+			writeWithProgress(what, data, os);
+		} else {
+			try{
+			Uri uri = (Uri) dataparam;
+			AssetFileDescriptor fd = handler.getContext().getContentResolver().openAssetFileDescriptor(uri, "r");
+			writeWithProgress(what, (int) fd.getLength(), fd.createInputStream(), os);
+			}catch (NullPointerException npe) {//workaround when sometimes npe
+				Ln.e(npe, "Vars: handler=%s, dataparams", handler, dataparam);
+			}
+		}
+	}
+
+	/**
+	 * If {@link Util#uploadProgress} is not null the registered progress listener will be called.
+	 * 
+	 * @param data
+	 *            to be transfered
+	 * @param os
+	 *            OutputStrem to transfer too
+	 * @throws IOException
+	 */
+	private static void writeWithProgress(int what, byte[] data, OutputStream os) throws IOException {
+		InputStream is = new ByteArrayInputStream(data);
+		writeWithProgress(what, data.length, is, os);
+	}
+
+	private static void writeWithProgress(int what, int size, InputStream is, OutputStream os) throws IOException {
+		BufferedInputStream bis = new BufferedInputStream(is);
+		int bufferSize = 8192;
+		byte[] buffer = new byte[bufferSize]; // 8k
+		int done = 0;
 		int bytesRead = 0;
-		while ((bytesRead += bis.read(buffer)) > 0) {
-			os.write(buffer, 0, buffer.length);
-			if (uploadProgress != null){
-				uploadProgress.progress(data.length, bytesRead);
-			}	
+		int step = size/10; //steps
+		while ((bytesRead = bis.read(buffer, 0, bufferSize)) > 0) {
+			os.write(buffer, 0, bytesRead);
+			done+=bytesRead;
+			if (handler != null && done > step ) {
+				step += step; 
+				handler.sendMessage(handler.obtainMessage(what,size,done));
+				Log.d(TAG, "Upload Progress of id: " + what + " Size: " + size + " Done: " +done);
+			}
 		}
+		if (handler != null)
+			handler.sendMessage(handler.obtainMessage(what,size,done));
+		bis.close();
+		is.close();
 	}
-	
-	
 
-    private static String read(InputStream in) throws IOException {
-        StringBuilder sb = new StringBuilder();
-        BufferedReader r = new BufferedReader(new InputStreamReader(in), 1000);
-        for (String line = r.readLine(); line != null; line = r.readLine()) {
-            sb.append(line);
-        }
-        in.close();
-        return sb.toString();
-    }
-
-    public static void clearCookies(Context context) {
-        // Edge case: an illegal state exception is thrown if an instance of
-        // CookieSyncManager has not be created.  CookieSyncManager is normally
-        // created by a WebKit view, but this might happen if you start the
-        // app, restore saved state, and click logout before running a UI
-        // dialog in a WebView -- in which case the app crashes
-        @SuppressWarnings("unused")
-        CookieSyncManager cookieSyncMngr =
-            CookieSyncManager.createInstance(context);
-        CookieManager cookieManager = CookieManager.getInstance();
-        cookieManager.removeAllCookie();
-    }
-
-    /**
-     * Parse a server response into a JSON Object. This is a basic
-     * implementation using org.json.JSONObject representation. More
-     * sophisticated applications may wish to do their own parsing.
-     *
-     * The parsed JSON is checked for a variety of error fields and
-     * a FacebookException is thrown if an error condition is set,
-     * populated with the error message and error type or code if
-     * available.
-     *
-     * @param response - string representation of the response
-     * @return the response as a JSON Object
-     * @throws JSONException - if the response is not valid JSON
-     * @throws FacebookError - if an error condition is set
-     */
-    public static JSONObject parseJson(String response)
-          throws JSONException, FacebookError {
-        // Edge case: when sending a POST request to /[post_id]/likes
-        // the return value is 'true' or 'false'. Unfortunately
-        // these values cause the JSONObject constructor to throw
-        // an exception.
-        if (response.equals("false")) {
-            throw new FacebookError("request failed");
-        }
-        if (response.equals("true")) {
-            response = "{value : true}";
-        }
-        JSONObject json = new JSONObject(response);
-
-        // errors set by the server are not consistent
-        // they depend on the method and endpoint
-        if (json.has("error")) {
-            JSONObject error = json.getJSONObject("error");
-            throw new FacebookError(
-                    error.getString("message"), error.getString("type"), 0);
-        }
-        if (json.has("error_code") && json.has("error_msg")) {
-            throw new FacebookError(json.getString("error_msg"), "",
-                    Integer.parseInt(json.getString("error_code")));
-        }
-        if (json.has("error_code")) {
-            throw new FacebookError("request failed", "",
-                    Integer.parseInt(json.getString("error_code")));
-        }
-        if (json.has("error_msg")) {
-            throw new FacebookError(json.getString("error_msg"));
-        }
-        if (json.has("error_reason")) {
-            throw new FacebookError(json.getString("error_reason"));
-        }
-        return json;
-    }
-
-    /**
-     * Display a simple alert dialog with the given text and title.
-     *
-     * @param context
-     *          Android context in which the dialog should be displayed
-     * @param title
-     *          Alert dialog title
-     * @param text
-     *          Alert dialog message
-     */
-    public static void showAlert(Context context, String title, String text) {
-        Builder alertBuilder = new Builder(context);
-        alertBuilder.setTitle(title);
-        alertBuilder.setMessage(text);
-        alertBuilder.create().show();
-    }
-
-    /**
-     * A proxy for Log.d api that kills log messages in release build. It
-     * not recommended to send sensitive information to log output in
-     * shipping apps.
-     *
-     * @param tag
-     * @param msg
-     */
-    public static void logd(String tag, String msg) {
-        if (ENABLE_LOG) {
-            Log.d(tag, msg);
-        }
-    }
-}
+	private static String read(InputStream in) throws IOException {
+		StringBuilder sb = new StringBuilder();
+		BufferedReader r = new BufferedReader(new InputStreamReader(in), 1000);
+		for (String line = r.readLine(); line != null; line = r.readLine()) {
+			sb.append(line);
+		}
+		in.close();
+		return sb.toString();
+	}
 
-/**
- * Call Back showing the already transfered and total bytes send to FB
- * 
- *	@see {@link Util#uploadProgress}  to register your implementation 
- * <br/>
- * Example:
- * <p><blockquote><pre>
- *Util.uploadProgress = new UploadDataProgress(){
- *		public void progress(int totalBytes, int transferedBytes) {
- *			notification.contentView.setProgressBar(R.id.status_progress, totalBytes, transferedBytes, false);
- *			notificationManager.notify(42, notification);
- *		}
- *};
- * </pre></blockquote></p>
- */
-interface UploadDataProgress{
-	
-	public void progress(int totalBytes, int transferedBytes);
+	public static void clearCookies(Context context) {
+		// Edge case: an illegal state exception is thrown if an instance of
+		// CookieSyncManager has not be created. CookieSyncManager is normally
+		// created by a WebKit view, but this might happen if you start the
+		// app, restore saved state, and click logout before running a UI
+		// dialog in a WebView -- in which case the app crashes
+		@SuppressWarnings("unused")
+		CookieSyncManager cookieSyncMngr = CookieSyncManager.createInstance(context);
+		CookieManager cookieManager = CookieManager.getInstance();
+		cookieManager.removeAllCookie();
+	}
+
+	/**
+	 * Parse a server response into a JSON Object. This is a basic
+	 * implementation using org.json.JSONObject representation. More
+	 * sophisticated applications may wish to do their own parsing.
+	 * 
+	 * The parsed JSON is checked for a variety of error fields and
+	 * a FacebookException is thrown if an error condition is set,
+	 * populated with the error message and error type or code if
+	 * available.
+	 * 
+	 * @param response
+	 *            - string representation of the response
+	 * @return the response as a JSON Object
+	 * @throws JSONException
+	 *             - if the response is not valid JSON
+	 * @throws FacebookError
+	 *             - if an error condition is set
+	 */
+	public static JSONObject parseJson(String response) throws JSONException, FacebookError {
+		// Edge case: when sending a POST request to /[post_id]/likes
+		// the return value is 'true' or 'false'. Unfortunately
+		// these values cause the JSONObject constructor to throw
+		// an exception.
+		if (response.equals("false")) {
+			throw new FacebookError("request failed");
+		}
+		if (response.equals("true")) {
+			response = "{value : true}";
+		}
+		JSONObject json = new JSONObject(response);
+
+		// errors set by the server are not consistent
+		// they depend on the method and endpoint
+		if (json.has("error")) {
+			JSONObject error = json.getJSONObject("error");
+			throw new FacebookError(error.getString("message"), error.getString("type"), 0);
+		}
+		if (json.has("error_code") && json.has("error_msg")) {
+			throw new FacebookError(json.getString("error_msg"), "", Integer.parseInt(json.getString("error_code")));
+		}
+		if (json.has("error_code")) {
+			throw new FacebookError("request failed", "", Integer.parseInt(json.getString("error_code")));
+		}
+		if (json.has("error_msg")) {
+			throw new FacebookError(json.getString("error_msg"));
+		}
+		if (json.has("error_reason")) {
+			throw new FacebookError(json.getString("error_reason"));
+		}
+		return json;
+	}
+
+	/**
+	 * Display a simple alert dialog with the given text and title.
+	 * 
+	 * @param context
+	 *            Android context in which the dialog should be displayed
+	 * @param title
+	 *            Alert dialog title
+	 * @param text
+	 *            Alert dialog message
+	 */
+	public static void showAlert(Context context, String title, String text) {
+		Builder alertBuilder = new Builder(context);
+		alertBuilder.setTitle(title);
+		alertBuilder.setMessage(text);
+		alertBuilder.create().show();
+	}
+
+	/**
+	 * A proxy for Log.d api that kills log messages in release build. It
+	 * not recommended to send sensitive information to log output in
+	 * shipping apps.
+	 * 
+	 * @param tag
+	 * @param msg
+	 */
+	public static void logd(String tag, String msg) {
+		if (ENABLE_LOG) {
+			Log.d(tag, msg);
+		}
+	}
 }
