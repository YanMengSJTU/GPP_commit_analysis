diff --git a/facebook-core/src/main/java/com/facebook/FacebookSdk.java b/facebook-core/src/main/java/com/facebook/FacebookSdk.java
index 4c49a493c..365a0a4a7 100644
--- a/facebook-core/src/main/java/com/facebook/FacebookSdk.java
+++ b/facebook-core/src/main/java/com/facebook/FacebookSdk.java
@@ -864,6 +864,13 @@ public static boolean getCodelessDebugLogEnabled() {
         return codelessDebugLogEnabled;
     }
 
+    /**
+     * @return the codeless enabled flag for the application
+     */
+    public static boolean getCodelessSetupEnabled() {
+        return UserSettingsManager.getCodelessSetupEnabled();
+    }
+
     /**
      * Sets the advertiserID collection flag for the application
      * @param flag true or false
diff --git a/facebook-core/src/main/java/com/facebook/UserSettingsManager.java b/facebook-core/src/main/java/com/facebook/UserSettingsManager.java
index 25eb7790b..ac41a9bcb 100644
--- a/facebook-core/src/main/java/com/facebook/UserSettingsManager.java
+++ b/facebook-core/src/main/java/com/facebook/UserSettingsManager.java
@@ -24,22 +24,17 @@
 import android.content.SharedPreferences;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
-import android.media.FaceDetector;
-import android.support.annotation.Nullable;
+import android.os.Bundle;
 import android.util.Log;
 
+import com.facebook.internal.AttributionIdentifiers;
 import com.facebook.internal.FetchedAppSettings;
+import com.facebook.internal.FetchedAppSettingsManager;
 import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
 
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import static com.facebook.FacebookSdk.ADVERTISER_ID_COLLECTION_ENABLED_PROPERTY;
@@ -50,6 +45,12 @@
 
     private static AtomicBoolean isInitialized = new AtomicBoolean(false);
 
+    private static final String EVENTS_CODELESS_SETUP_ENABLED =
+            "auto_event_setup_enabled";
+    private static final long TIMEOUT_7D = 7 * 24 * 60 * 60 * 1000; // Millisecond
+    private static final String ADVERTISER_ID_KEY = "advertiser_id";
+    private static final String APPLICATION_FIELDS = "fields";
+
     private static UserSetting autoLogAppEventsEnabled = new UserSetting(
             true,
             AUTO_LOG_APP_EVENTS_ENABLED_PROPERTY,
@@ -58,6 +59,10 @@
             true,
             ADVERTISER_ID_COLLECTION_ENABLED_PROPERTY,
             ADVERTISER_ID_COLLECTION_ENABLED_PROPERTY);
+    private static UserSetting codelessSetupEnabled = new UserSetting(
+            false,
+            EVENTS_CODELESS_SETUP_ENABLED,
+            null);
 
     // Cache
     private static final String USER_SETTINGS = "com.facebook.sdk.USER_SETTINGS";
@@ -68,7 +73,7 @@
     private static final String LAST_TIMESTAMP = "last_timestamp";
     private static final String VALUE = "value";
 
-    private static void initializeIfNotInitialized() {
+    public static void initializeIfNotInitialized() {
         if (!FacebookSdk.isInitialized()) {
             return;
         }
@@ -83,21 +88,72 @@ private static void initializeIfNotInitialized() {
 
         initializeUserSetting(autoLogAppEventsEnabled);
         initializeUserSetting(advertiserIDCollectionEnabled);
+        initializeCodelessSepupEnabledAsync();
     }
 
     private static void initializeUserSetting(UserSetting userSetting) {
-        if (userSetting.value == null) {
-            loadSettingFromCache(userSetting);
-            if (userSetting.value == null && userSetting.keyInManifest != null) {
-                loadSettingFromManifest(userSetting);
+        if (userSetting == codelessSetupEnabled) {
+            initializeCodelessSepupEnabledAsync();
+        } else {
+            if (userSetting.value == null) {
+                readSettingFromCache(userSetting);
+                if (userSetting.value == null && userSetting.keyInManifest != null) {
+                    loadSettingFromManifest(userSetting);
+                }
+            } else {
+                // if flag has been set before initialization, load setting to cache
+                writeSettingToCache(userSetting);
             }
+        }
+    }
+
+    private static void initializeCodelessSepupEnabledAsync() {
+        readSettingFromCache(codelessSetupEnabled);
+        final long currTime = System.currentTimeMillis();
+        if (codelessSetupEnabled.value != null && currTime - codelessSetupEnabled.lastTS < TIMEOUT_7D) {
+            return;
         } else {
-            // if flag has been set before initialization, load setting to cache
-            putSettingToCache(userSetting);
+            codelessSetupEnabled.value = null;
+            codelessSetupEnabled.lastTS = 0;
         }
+
+        // fetch data through Graph request if cache is unavailable
+        FacebookSdk.getExecutor().execute(new Runnable() {
+            @Override
+            public void run() {
+                FetchedAppSettings appSettings = FetchedAppSettingsManager
+                        .queryAppSettings(FacebookSdk.getApplicationId(), false);
+                if (appSettings != null && appSettings.getCodelessEventsEnabled()) {
+                    String advertiser_id = null;
+                    final Context context = FacebookSdk.getApplicationContext();
+                    AttributionIdentifiers identifiers =
+                            AttributionIdentifiers.getAttributionIdentifiers(context);
+                    if (identifiers != null
+                            && identifiers.getAndroidAdvertiserId() != null) {
+                        advertiser_id = identifiers.getAndroidAdvertiserId();
+                    }
+                    if (advertiser_id != null) {
+                        Bundle codelessSettingsParams = new Bundle();
+                        codelessSettingsParams.putString(
+                                ADVERTISER_ID_KEY, identifiers.getAndroidAdvertiserId());
+                        codelessSettingsParams.putString(
+                                APPLICATION_FIELDS, EVENTS_CODELESS_SETUP_ENABLED);
+                        GraphRequest codelessRequest = GraphRequest.newGraphPathRequest(
+                                null, FacebookSdk.getApplicationId(), null);
+                        codelessRequest.setSkipClientToken(true);
+                        codelessRequest.setParameters(codelessSettingsParams);
+                        JSONObject response = codelessRequest.executeAndWait().getJSONObject();
+                        codelessSetupEnabled.value =
+                                response.optBoolean(EVENTS_CODELESS_SETUP_ENABLED, false);
+                        codelessSetupEnabled.lastTS = currTime;
+                        writeSettingToCache(codelessSetupEnabled);
+                    }
+                }
+            }
+        });
     }
 
-    private static void putSettingToCache(UserSetting userSetting) {
+    private static void writeSettingToCache(UserSetting userSetting) {
         validateInitialized();
         try {
             JSONObject jsonObject = new JSONObject();
@@ -111,7 +167,7 @@ private static void putSettingToCache(UserSetting userSetting) {
         }
     }
 
-    private static void loadSettingFromCache(UserSetting userSetting) {
+    private static void readSettingFromCache(UserSetting userSetting) {
         validateInitialized();
         try {
             String settingStr = userSettingPref.getString(userSetting.keyInCache, "");
@@ -157,7 +213,7 @@ public static void setAutoLogAppEventsEnabled(boolean flag) {
         autoLogAppEventsEnabled.value = flag;
         autoLogAppEventsEnabled.lastTS = System.currentTimeMillis();
         if (isInitialized.get()) {
-            putSettingToCache(autoLogAppEventsEnabled);
+            writeSettingToCache(autoLogAppEventsEnabled);
         } else {
             initializeIfNotInitialized();
         }
@@ -172,7 +228,7 @@ public static void setAdvertiserIDCollectionEnabled(boolean flag) {
         advertiserIDCollectionEnabled.value = flag;
         advertiserIDCollectionEnabled.lastTS = System.currentTimeMillis();
         if (isInitialized.get()) {
-            putSettingToCache(advertiserIDCollectionEnabled);
+            writeSettingToCache(advertiserIDCollectionEnabled);
         } else {
             initializeIfNotInitialized();
         }
@@ -183,6 +239,11 @@ public static boolean getAdvertiserIDCollectionEnabled() {
         return advertiserIDCollectionEnabled.getValue();
     }
 
+    public static boolean getCodelessSetupEnabled() {
+        initializeIfNotInitialized();
+        return codelessSetupEnabled.getValue();
+    }
+
     private static class UserSetting {
         String keyInCache;
         String keyInManifest;
diff --git a/facebook-core/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java b/facebook-core/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java
index 8e11e5bd3..a38a24bdf 100644
--- a/facebook-core/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java
+++ b/facebook-core/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java
@@ -212,7 +212,7 @@ public void run() {
         final String appId = FacebookSdk.getApplicationId();
         final FetchedAppSettings appSettings =
                 FetchedAppSettingsManager.getAppSettingsWithoutQuery(appId);
-        if ((appSettings != null && appSettings.getCodelessSetupEnabled()) ||
+        if ((appSettings != null && FacebookSdk.getCodelessSetupEnabled()) ||
                 (BuildConfig.DEBUG && AppEventUtility.isEmulator())) {
             sensorManager = (SensorManager) applicationContext.
                     getSystemService(Context.SENSOR_SERVICE);
diff --git a/facebook-core/src/main/java/com/facebook/internal/FetchedAppSettings.java b/facebook-core/src/main/java/com/facebook/internal/FetchedAppSettings.java
index e8d88b754..caa2b83c4 100644
--- a/facebook-core/src/main/java/com/facebook/internal/FetchedAppSettings.java
+++ b/facebook-core/src/main/java/com/facebook/internal/FetchedAppSettings.java
@@ -50,25 +50,23 @@
     private String sdkUpdateMessage;
     private JSONArray eventBindings;
     private boolean trackUninstallEnabled;
-    private boolean codelessSetupEnabled;
 
     public FetchedAppSettings(boolean supportsImplicitLogging,
-                               String nuxContent,
-                               boolean nuxEnabled,
-                               boolean customTabsEnabled,
-                               int sessionTimeoutInSeconds,
-                               EnumSet<SmartLoginOption> smartLoginOptions,
-                               Map<String, Map<String, DialogFeatureConfig>> dialogConfigMap,
-                               boolean automaticLoggingEnabled,
-                               FacebookRequestErrorClassification errorClassification,
-                               String smartLoginBookmarkIconURL,
-                               String smartLoginMenuIconURL,
-                               boolean IAPAutomaticLoggingEnabled,
-                               boolean codelessEventsEnabled,
-                               JSONArray eventBindings,
-                               String sdkUpdateMessage,
-                               boolean trackUninstallEnabled,
-                               boolean codelessSetupEnabled
+                              String nuxContent,
+                              boolean nuxEnabled,
+                              boolean customTabsEnabled,
+                              int sessionTimeoutInSeconds,
+                              EnumSet<SmartLoginOption> smartLoginOptions,
+                              Map<String, Map<String, DialogFeatureConfig>> dialogConfigMap,
+                              boolean automaticLoggingEnabled,
+                              FacebookRequestErrorClassification errorClassification,
+                              String smartLoginBookmarkIconURL,
+                              String smartLoginMenuIconURL,
+                              boolean IAPAutomaticLoggingEnabled,
+                              boolean codelessEventsEnabled,
+                              JSONArray eventBindings,
+                              String sdkUpdateMessage,
+                              boolean trackUninstallEnabled
     ) {
         this.supportsImplicitLogging = supportsImplicitLogging;
         this.nuxContent = nuxContent;
@@ -86,7 +84,6 @@ public FetchedAppSettings(boolean supportsImplicitLogging,
         this.eventBindings = eventBindings;
         this.sdkUpdateMessage = sdkUpdateMessage;
         this.trackUninstallEnabled = trackUninstallEnabled;
-        this.codelessSetupEnabled = codelessSetupEnabled;
     }
 
     public boolean supportsImplicitLogging() {
@@ -136,10 +133,6 @@ public boolean getCodelessEventsEnabled() {
         return codelessEventsEnabled;
     }
 
-    public boolean getCodelessSetupEnabled() {
-        return codelessSetupEnabled;
-    }
-
     public JSONArray getEventBindings() {
         return eventBindings;
     }
diff --git a/facebook-core/src/main/java/com/facebook/internal/FetchedAppSettingsManager.java b/facebook-core/src/main/java/com/facebook/internal/FetchedAppSettingsManager.java
index 6ca4dfc84..b535a2e25 100644
--- a/facebook-core/src/main/java/com/facebook/internal/FetchedAppSettingsManager.java
+++ b/facebook-core/src/main/java/com/facebook/internal/FetchedAppSettingsManager.java
@@ -87,8 +87,6 @@
             "app_events_feature_bitmask";
     private static final String APP_SETTING_APP_EVENTS_EVENT_BINDINGS =
             "auto_event_mapping_android";
-    private static final String APP_SETTING_APP_EVENTS_CODELESS_SETUP_ENABLED =
-            "auto_event_setup_enabled";
     private static final int AUTOMATIC_LOGGING_ENABLED_BITMASK_FIELD = 1 << 3;
     // The second bit of app_events_feature_bitmask is used for iOS in-app purchase automatic
     // logging, while the fourth bit is used for Android in-app purchase automatic logging.
@@ -111,7 +109,6 @@
             APP_SETTING_APP_EVENTS_SESSION_TIMEOUT,
             APP_SETTING_APP_EVENTS_FEATURE_BITMASK,
             APP_SETTING_APP_EVENTS_EVENT_BINDINGS,
-            APP_SETTING_APP_EVENTS_CODELESS_SETUP_ENABLED,
             APP_SETTING_SMART_LOGIN_OPTIONS,
             SMART_LOGIN_BOOKMARK_ICON_URL,
             SMART_LOGIN_MENU_ICON_URL
@@ -212,6 +209,7 @@ public void run() {
     }
 
     // This call only gets the app settings if they're already fetched
+    @Nullable
     public static FetchedAppSettings getAppSettingsWithoutQuery(final String applicationId) {
         return applicationId != null ? fetchedAppSettings.get(applicationId) : null;
     }
@@ -268,6 +266,7 @@ public void run() {
     // Note that this method makes a synchronous Graph API call, so should not be called from the
     // main thread. This call can block for long time if network is not available and network
     // timeout is long.
+    @Nullable
     public static FetchedAppSettings queryAppSettings(
             final String applicationId,
             final boolean forceRequery) {
@@ -311,8 +310,6 @@ private static FetchedAppSettings parseAppSettingsFromJSON(
                 (featureBitmask & CODELESS_EVENTS_ENABLED_BITMASK_FIELD) != 0;
         boolean trackUninstallEnabled =
                 (featureBitmask & TRACK_UNINSTALL_ENABLED_BITMASK_FIELD) != 0;
-        boolean codelessSetupEnabled =
-                settingsJSON.optBoolean(APP_SETTING_APP_EVENTS_CODELESS_SETUP_ENABLED, false);
         JSONArray eventBindings = settingsJSON.optJSONArray(APP_SETTING_APP_EVENTS_EVENT_BINDINGS);
 
         unityEventBindings = eventBindings;
@@ -338,8 +335,7 @@ private static FetchedAppSettings parseAppSettingsFromJSON(
                 codelessEventsEnabled,
                 eventBindings,
                 settingsJSON.optString(SDK_UPDATE_MESSAGE),
-                trackUninstallEnabled,
-                codelessSetupEnabled
+                trackUninstallEnabled
         );
 
         fetchedAppSettings.put(applicationId, result);
@@ -366,13 +362,6 @@ private static JSONObject getAppSettingsQueryResponse(String applicationId) {
         }
 
         appSettingsParams.putString(APPLICATION_FIELDS, TextUtils.join(",", appSettingFields));
-        final Context context = FacebookSdk.getApplicationContext();
-        AttributionIdentifiers identifiers =
-                AttributionIdentifiers.getAttributionIdentifiers(context);
-        if (identifiers != null
-                && identifiers.getAndroidAdvertiserId() != null) {
-            appSettingsParams.putString(ADVERTISER_ID_KEY, identifiers.getAndroidAdvertiserId());
-        }
 
         GraphRequest request = GraphRequest.newGraphPathRequest(null, applicationId, null);
         request.setSkipClientToken(true);
@@ -416,4 +405,4 @@ private static JSONObject getAppSettingsQueryResponse(String applicationId) {
         void onSuccess(FetchedAppSettings fetchedAppSettings);
         void onError();
     }
-}
+}
\ No newline at end of file
