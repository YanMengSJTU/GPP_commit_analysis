diff --git a/.arcconfig b/.arcconfig
deleted file mode 100644
index e5b788da0..000000000
--- a/.arcconfig
+++ /dev/null
@@ -1,11 +0,0 @@
-{
-  "project_id" : "facebook-android-sdk",
-  "conduit_uri" : "https://phabricator.fb.com/api/",
-  "copyright_holder" : "Facebook",
-  "phutil_libraries" : {
-    "android-sdk-arcanist" : "internal/arcanist"
-  },
-  "arcanist_configuration" : "FacebookAndroidSDKArcanistConfiguration",
-  "unit_engine" : "AndroidSdkUnitTestEngine",
-  "lint_engine" : "AndroidSdkLintEngine"
-}
diff --git a/.buckconfig b/.buckconfig
deleted file mode 100644
index ed8b51685..000000000
--- a/.buckconfig
+++ /dev/null
@@ -1,22 +0,0 @@
-# .buckconfig.local is in .gitignore, so you do not have to worry about checking your
-# personal customizations to Buck into the repo.
-
-[java]
-    # This makes it possible to determine the package of a
-    # Java file from the path alone.
-    src_roots = /facebook/src/, /samples/HelloFacebookSample/src/
-
-    # We target gingerbread. Ensure that libraries target that.
-    source_level = 7
-    target_level = 7
-
-[build]
-    build_dependencies = FIRST_ORDER_ONLY
-
-[alias]
-    sdk = //facebook:android-sdk
-    hello-facebook = //samples/HelloFacebookSample:app
-    iconicus = //samples/Iconicus:app
-    rps = //samples/RPSSample:app
-    scrumptious = //samples/Scrumptious:app
-    switch-user = //samples/SwitchUserSample:app
diff --git a/.buckversion b/.buckversion
deleted file mode 100644
index 33b8b7e09..000000000
--- a/.buckversion
+++ /dev/null
@@ -1 +0,0 @@
-edff8b2b8818bb64982837158dd546a66b6ef6c2
diff --git a/.gitignore b/.gitignore
index 1d6218e3e..b43ca86b3 100644
--- a/.gitignore
+++ b/.gitignore
@@ -11,6 +11,7 @@
 # generated files
 bin/
 gen/
+libs/
 
 # Local configuration file (sdk path, etc)
 local.properties
@@ -33,6 +34,10 @@ proguard/
 build
 
 # Buck
+BUCK*
+.buckconfig
+.buckversion
+keystores/
 /buck-cache/
 /buck-out/
 /.buckconfig.local
@@ -43,14 +48,10 @@ build
 # vim temp files
 *.swp
 
-# Arc generated
-.phutil_module_cache
-
 *~
 *.DS_Store
 *java#
 *.settings
-.arc/
 out/
 facebook/doc/
 facebook/tests/lint.xml
diff --git a/PULL_REQUEST_TEMPLATE b/PULL_REQUEST_TEMPLATE
new file mode 100644
index 000000000..21bd8ebe9
--- /dev/null
+++ b/PULL_REQUEST_TEMPLATE
@@ -0,0 +1,6 @@
+Thanks for proposing a pull request.
+
+To help us review the request, please complete the following:
+- [ ] sign contributor license agreement: https://developers.facebook.com/opensource/cla
+- [ ] submit against our `:dev` branch, not `master`.
+- [ ] describe the change (for example, what happens before the change, and after the change)
diff --git a/README.mdown b/README.mdown
index 2c0d09c85..d13f6a4bc 100644
--- a/README.mdown
+++ b/README.mdown
@@ -19,7 +19,7 @@ FEATURES
 * Sharing - https://developers.facebook.com/docs/sharing
 * App Links - https://developers.facebook.com/docs/applinks
 * Graph API - https://developers.facebook.com/docs/android/graph
-* Analytics for Apps - https://developers.facebook.com/docs/analytics
+* Analytics - https://developers.facebook.com/docs/analytics
 
 GIVE FEEDBACK
 -------------
diff --git a/build.gradle b/build.gradle
index 7769d34dd..ba6fab1ea 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,15 +1,22 @@
 // Top-level build file where you can add configuration options common to all sub-projects/modules.
 buildscript {
     repositories {
+        jcenter()
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.3.0'
+        classpath 'com.android.tools.build:gradle:2.3.2'
     }
 }
 
 allprojects {
     repositories {
         mavenCentral()
+        jcenter()
+        maven {
+            url "https://maven.google.com"
+        }
     }
+
+    project.apply from: "${rootDir}/constants.gradle"
 }
diff --git a/build.gradle.orig b/build.gradle.orig
new file mode 100644
index 000000000..3cc25de13
--- /dev/null
+++ b/build.gradle.orig
@@ -0,0 +1,15 @@
+// Top-level build file where you can add configuration options common to all sub-projects/modules.
+buildscript {
+    repositories {
+        mavenCentral()
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:2.1.0'
+    }
+}
+
+allprojects {
+    repositories {
+        mavenCentral()
+    }
+}
diff --git a/constants.gradle b/constants.gradle
new file mode 100644
index 000000000..2b95ec8a1
--- /dev/null
+++ b/constants.gradle
@@ -0,0 +1,7 @@
+project.ext {
+    buildTools = "25.0.3"
+    supportLibraryVersion = "25.3.1"
+    compileSdk = 25
+    minSdk = 15
+    targetSdk = 25
+}
\ No newline at end of file
diff --git a/facebook/BUCK b/facebook/BUCK
index b7d6df31e..ae9167a51 100644
--- a/facebook/BUCK
+++ b/facebook/BUCK
@@ -1,31 +1,144 @@
+prebuilt_jar(
+  name = 'support-annotations-25.0.0',
+  binary_jar = 'libs/support-annotations-25.0.0.jar',
+  visibility = [
+    'PUBLIC',
+  ],
+)
+
+prebuilt_jar(
+  name = 'bolts-applinks-1.4.0',
+  binary_jar = 'libs/bolts-applinks-1.4.0.jar',
+  visibility = [
+    'PUBLIC',
+  ],
+)
+
+prebuilt_jar(
+  name = 'bolts-tasks-1.4.0',
+  binary_jar = 'libs/bolts-tasks-1.4.0.jar',
+  visibility = [
+    'PUBLIC',
+  ],
+)
+
+android_prebuilt_aar(
+  name = 'support-v4-25.0.0',
+  aar = 'libs/support-v4-25.0.0.aar',
+  visibility = [
+    'PUBLIC',
+  ],
+)
+
+android_prebuilt_aar(
+  name = 'support-compat-25.0.0',
+  aar = 'libs/support-compat-25.0.0.aar',
+  visibility = [
+    'PUBLIC',
+  ],
+)
+
+android_prebuilt_aar(
+  name = 'support-core-ui-25.0.0',
+  aar = 'libs/support-core-ui-25.0.0.aar',
+  visibility = [
+    'PUBLIC',
+  ],
+)
+
+android_prebuilt_aar(
+  name = 'support-core-utils-25.0.0',
+  aar = 'libs/support-core-utils-25.0.0.aar',
+  visibility = [
+    'PUBLIC',
+  ],
+)
+
+android_prebuilt_aar(
+  name = 'support-fragment-25.0.0',
+  aar = 'libs/support-fragment-25.0.0.aar',
+  visibility = [
+    'PUBLIC',
+  ],
+)
+
+android_prebuilt_aar(
+  name = 'cardview-v7-25.0.0',
+  aar = 'libs/cardview-v7-25.0.0.aar',
+  visibility = [
+    'PUBLIC',
+  ],
+)
+
+android_prebuilt_aar(
+  name = 'customtabs-25.0.0',
+  aar = 'libs/customtabs-25.0.0.aar',
+  visibility = [
+    'PUBLIC',
+  ],
+)
+
+android_prebuilt_aar(
+  name = 'appcompat-v7-25.0.0',
+  aar = 'libs/appcompat-v7-25.0.0.aar',
+  visibility = [
+    'PUBLIC',
+  ],
+)
+
+android_prebuilt_aar(
+  name = 'support-vector-drawable-25.0.0',
+  aar = 'libs/support-vector-drawable-25.0.0.aar',
+  visibility = [
+    'PUBLIC',
+  ],
+)
+
 android_build_config(
-  name = 'build_config',
-  package = 'com.facebook',
+  name = "build_config",
+  package = "com.facebook",
+  values = [
+    "String VERSION_NAME = \"4.21.1\"",
+  ],
+  visibility = [
+    "PUBLIC",
+  ],
 )
 
 android_resource(
   name = 'res',
-  res = 'res',
+  res = 'src/main/res',
   package = 'com.facebook',
   deps = [
   ],
+  visibility = [
+    'PUBLIC',
+  ],
 )
 
 android_library(
-  name = 'android-sdk',
-  srcs = glob(['src/**/*.java']),
+  name = 'lib',
+  srcs = glob(['src/main/**/*.java']),
+  manifest = 'src/main/AndroidManifest.xml',
+  provided_deps = [
+  ],
   deps = [
+    ':appcompat-v7-25.0.0',
+    ':bolts-applinks-1.4.0',
+    ':bolts-tasks-1.4.0',
     ':build_config',
+    ':cardview-v7-25.0.0',
+    ':customtabs-25.0.0',
     ':res',
-    '//libs:android-support-v4',
-    '//libs:bolts',
+    ':support-annotations-25.0.0',
+    ':support-compat-25.0.0',
+    ':support-core-ui-25.0.0',
+    ':support-core-utils-25.0.0',
+    ':support-fragment-25.0.0',
+    ':support-v4-25.0.0',
+    ':support-vector-drawable-25.0.0',
   ],
   visibility = [
     'PUBLIC',
   ],
 )
-
-project_config(
-  src_target = ':android-sdk',
-  src_roots = ['src'],
-)
diff --git a/facebook/build.gradle b/facebook/build.gradle
index f56c38be8..57e709a8d 100644
--- a/facebook/build.gradle
+++ b/facebook/build.gradle
@@ -7,24 +7,22 @@ repositories {
 project.group = 'com.facebook.android'
 
 dependencies {
-    // Facbook Dependancies
-    compile 'com.android.support:support-v4:(23,24]'
-    compile 'com.android.support:cardview-v7:(23,24]'
-    compile 'com.parse.bolts:bolts-tasks:1.3.0'
-    compile 'com.parse.bolts:bolts-applinks:1.3.0'
+    // Facebook Dependencies
+    compile 'com.android.support:support-v4:25.3.1'
+    compile 'com.android.support:appcompat-v7:25.3.1'
+    compile 'com.android.support:cardview-v7:25.3.1'
+    compile 'com.android.support:customtabs:25.3.1'
+    compile 'com.parse.bolts:bolts-android:1.4.0'
 
     // Unit Tests
-    testCompile 'com.android.support:appcompat-v7:(23,24]'
-
     testCompile 'junit:junit:4.12'
-    testCompile 'org.robolectric:robolectric:3.0'
-    testCompile 'org.robolectric:shadows-support-v4:3.0'
+    testCompile 'org.robolectric:robolectric:3.3'
 
     def powerMockVersion = '1.6.1'
+    testCompile "org.powermock:powermock-api-mockito:$powerMockVersion"
     testCompile "org.powermock:powermock-module-junit4:$powerMockVersion"
     testCompile "org.powermock:powermock-module-junit4-rule:$powerMockVersion"
     testCompile "org.powermock:powermock-classloading-xstream:$powerMockVersion"
-    testCompile "org.powermock:powermock-api-mockito:$powerMockVersion"
 
     // Connected Tests
     androidTestCompile 'org.mockito:mockito-core:1.10.19'
@@ -33,12 +31,19 @@ dependencies {
 }
 
 android {
-    compileSdkVersion 22
-    buildToolsVersion '22.0.1'
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
         minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
         targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+        consumerProguardFiles 'proguard-project.txt'
+
+        vectorDrawables.useSupportLibrary = true
+    }
+
+    aaptOptions {
+        additionalParameters "--no-version-vectors"
     }
 
     lintOptions {
diff --git a/facebook/proguard-project.txt b/facebook/proguard-project.txt
index f2fe1559a..1eca961d7 100644
--- a/facebook/proguard-project.txt
+++ b/facebook/proguard-project.txt
@@ -18,3 +18,11 @@
 #-keepclassmembers class fqcn.of.javascript.interface.for.webview {
 #   public *;
 #}
+
+-keepclassmembers class * implements java.io.Serializable {
+    private static final java.io.ObjectStreamField[] serialPersistentFields;
+    private void writeObject(java.io.ObjectOutputStream);
+    private void readObject(java.io.ObjectInputStream);
+    java.lang.Object writeReplace();
+    java.lang.Object readResolve();
+}
\ No newline at end of file
diff --git a/facebook/src/androidTest/java/com/facebook/AsyncRequestTests.java b/facebook/src/androidTest/java/com/facebook/AsyncRequestTests.java
index da6bc7eaa..399d62be5 100644
--- a/facebook/src/androidTest/java/com/facebook/AsyncRequestTests.java
+++ b/facebook/src/androidTest/java/com/facebook/AsyncRequestTests.java
@@ -25,6 +25,7 @@
 import android.test.suitebuilder.annotation.LargeTest;
 import android.test.suitebuilder.annotation.MediumTest;
 import android.test.suitebuilder.annotation.SmallTest;
+import android.test.suitebuilder.annotation.Suppress;
 
 import com.facebook.internal.BundleJSONConverter;
 import com.facebook.share.internal.ShareInternalUtility;
@@ -100,69 +101,6 @@ public void testExecuteBatchWithNullRequestThrows() throws Exception {
 
     }
 
-    @MediumTest
-    @LargeTest
-    public void testExecuteSingleGet() {
-        final AccessToken accessToken = getAccessTokenForSharedUser();
-        Bundle parameters = new Bundle();
-        parameters.putString("fields", "location");
-        GraphRequest request = new GraphRequest(
-                accessToken,
-                "TourEiffel",
-                parameters,
-                null,
-                new ExpectSuccessCallback() {
-                    @Override
-                    protected void performAsserts(GraphResponse response) {
-                        assertNotNull(response);
-                        JSONObject graphPlace = response.getJSONObject();
-                        assertEquals(
-                                "Paris",
-                                graphPlace.optJSONObject("location").optString("city"));
-                    }
-                });
-
-        TestGraphRequestAsyncTask task = new TestGraphRequestAsyncTask(request);
-
-        task.executeOnBlockerThread();
-
-        // Wait on 2 signals: request and task will both signal.
-        waitAndAssertSuccess(2);
-    }
-
-    @MediumTest
-    @LargeTest
-    public void testExecuteSingleGetUsingHttpURLConnection() {
-        final AccessToken accessToken = getAccessTokenForSharedUser();
-        Bundle parameters = new Bundle();
-        parameters.putString("fields", "location");
-        GraphRequest request = new GraphRequest(
-                accessToken,
-                "TourEiffel",
-                parameters,
-                null,
-                new ExpectSuccessCallback() {
-                    @Override
-                    protected void performAsserts(GraphResponse response) {
-                        assertNotNull(response);
-                        JSONObject graphPlace = response.getJSONObject();
-                        assertEquals(
-                                "Paris",
-                                graphPlace.optJSONObject("location").optString("city"));
-                    }
-                });
-        HttpURLConnection connection = GraphRequest.toHttpConnection(request);
-
-        TestGraphRequestAsyncTask task = new TestGraphRequestAsyncTask(
-                connection,
-                Arrays.asList(new GraphRequest[] { request }));
-
-        task.executeOnBlockerThread();
-
-        // Wait on 2 signals: request and task will both signal.
-        waitAndAssertSuccess(2);
-    }
-
     @MediumTest
     @LargeTest
     public void testExecuteSingleGetFailureCase() {
diff --git a/facebook/src/androidTest/java/com/facebook/BatchRequestTests.java b/facebook/src/androidTest/java/com/facebook/BatchRequestTests.java
index 135225b40..7f371cdeb 100644
--- a/facebook/src/androidTest/java/com/facebook/BatchRequestTests.java
+++ b/facebook/src/androidTest/java/com/facebook/BatchRequestTests.java
@@ -23,6 +23,7 @@
 import android.graphics.Bitmap;
 import android.os.Bundle;
 import android.test.suitebuilder.annotation.LargeTest;
+import android.test.suitebuilder.annotation.Suppress;
 
 import com.facebook.share.internal.ShareInternalUtility;
 
@@ -64,75 +65,6 @@ public void testBatchWithoutAppIDIsError() {
         GraphRequest.executeBatchAndWait(request1, request2);
     }
 
-    @LargeTest
-    public void testExecuteBatchRequestsPathEncoding() throws IOException {
-        // ensures that paths passed to batch requests are encoded properly before
-        // we send it up to the server
-
-        final AccessToken accessToken = getAccessTokenForSharedUser();
-
-        Bundle parameters = new Bundle();
-        parameters.putString("fields", "location");
-
-        GraphRequest request1 = new GraphRequest(
-                accessToken,
-                "TourEiffel",
-                parameters,
-                null);
-        request1.setBatchEntryName("eiffel");
-        request1.setBatchEntryOmitResultOnSuccess(false);
-        GraphRequest request2 = new GraphRequest(
-                accessToken,
-                "{result=eiffel:$.id}",
-                parameters,
-                null);
-
-        List<GraphResponse> responses = GraphRequest.executeBatchAndWait(request1, request2);
-        assertEquals(2, responses.size());
-        assertTrue(responses.get(0).getError() == null);
-        assertTrue(responses.get(1).getError() == null);
-
-        JSONObject eiffelTower1 = responses.get(0).getJSONObject();
-        JSONObject eiffelTower2 = responses.get(1).getJSONObject();
-        assertTrue(eiffelTower1 != null);
-        assertTrue(eiffelTower2 != null);
-
-        assertEquals("Paris", eiffelTower1.optJSONObject("location").optString("city"));
-        assertEquals("Paris", eiffelTower2.optJSONObject("location").optString("city"));
-    }
-
-    @LargeTest
-    public void testExecuteBatchedGets() throws IOException {
-        final AccessToken accessToken = getAccessTokenForSharedUser();
-
-        Bundle parameters = new Bundle();
-        parameters.putString("fields", "location");
-
-        GraphRequest request1 = new GraphRequest(
-                accessToken,
-                "TourEiffel",
-                parameters,
-                null);
-        GraphRequest request2 = new GraphRequest(
-                accessToken,
-                "SpaceNeedle",
-                parameters,
-                null);
-
-        List<GraphResponse> responses = GraphRequest.executeBatchAndWait(request1, request2);
-        assertEquals(2, responses.size());
-        assertTrue(responses.get(0).getError() == null);
-        assertTrue(responses.get(1).getError() == null);
-
-        JSONObject eiffelTower = responses.get(0).getJSONObject();
-        JSONObject spaceNeedle = responses.get(1).getJSONObject();
-        assertTrue(eiffelTower != null);
-        assertTrue(spaceNeedle != null);
-
-        assertEquals("Paris", eiffelTower.optJSONObject("location").optString("city"));
-        assertEquals("Seattle", spaceNeedle.optJSONObject("location").optString("city"));
-    }
-
     @LargeTest
     public void testFacebookErrorResponsesCreateErrors() {
         setBatchApplicationIdForTestApp();
diff --git a/facebook/src/androidTest/java/com/facebook/FacebookAppLinkResolverTests.java b/facebook/src/androidTest/java/com/facebook/FacebookAppLinkResolverTests.java
index 3042f889d..fb11d0776 100644
--- a/facebook/src/androidTest/java/com/facebook/FacebookAppLinkResolverTests.java
+++ b/facebook/src/androidTest/java/com/facebook/FacebookAppLinkResolverTests.java
@@ -22,6 +22,7 @@
 
 import android.net.Uri;
 import android.os.Handler;
+import android.test.FlakyTest;
 
 import com.facebook.applinks.FacebookAppLinkResolver;
 
@@ -35,45 +36,6 @@
 public class FacebookAppLinkResolverTests extends FacebookTestCase {
     private Task resolveTask;
 
-    public void testSingleUrl() {
-        String testUrlString = "https://fb.me/732873156764191";
-        Uri testUrl = Uri.parse(testUrlString);
-        Uri testWebUri = Uri.parse("http://www.facebook.com/");
-        ArrayList<AppLink.Target> testTargets = new ArrayList<AppLink.Target>();
-        testTargets.add(new AppLink.Target(
-                "com.myapp",
-                null,
-                Uri.parse("myapp://3"),
-                "my app"));
-        testTargets.add(new AppLink.Target(
-                "com.myapp-test",
-                null,
-                Uri.parse("myapp-test://4"),
-                "my test app"));
-        try {
-            executeResolverOnBlockerThread(new FacebookAppLinkResolver(), testUrl);
-
-            getTestBlocker().waitForSignals(1);
-
-            assertNotNull(resolveTask);
-
-            Task<AppLink> singleUrlResolveTask = (Task<AppLink>)resolveTask;
-
-            assertTrue(singleUrlResolveTask.isCompleted() &&
-                    !singleUrlResolveTask.isCancelled() &&
-                    !singleUrlResolveTask.isFaulted());
-
-            AppLink appLink = singleUrlResolveTask.getResult();
-
-            assertEquals(appLink.getSourceUrl(), testUrl);
-            assertEquals(appLink.getWebUrl(), testWebUri);
-            assertTrue(targetListsAreEqual(appLink.getTargets(), testTargets));
-        } catch (Exception e) {
-            // Forcing the test to fail with details
-            assertNull(e);
-        }
-    }
-
     public void testUrlWithNoAppLinkData() {
         String testNoAppLinkUrlString = "https://fb.me/732873156764191_no_app_link";
         Uri testNoAppLinkUrl = Uri.parse(testNoAppLinkUrlString);
@@ -98,48 +60,6 @@ public void testUrlWithNoAppLinkData() {
         }
     }
 
-    public void testCachedAppLinkData() {
-        String testUrlString = "https://fb.me/732873156764191";
-        Uri testUrl = Uri.parse(testUrlString);
-        Uri testWebUri = Uri.parse("http://www.facebook.com/");
-        ArrayList<AppLink.Target> testTargets = new ArrayList<AppLink.Target>();
-        testTargets.add(new AppLink.Target(
-                "com.myapp",
-                null,
-                Uri.parse("myapp://3"),
-                "my app"));
-        testTargets.add(new AppLink.Target(
-                "com.myapp-test",
-                null,
-                Uri.parse("myapp-test://4"),
-                "my test app"));
-
-        try {
-            FacebookAppLinkResolver resolver = new FacebookAppLinkResolver();
-
-            // This will prefetch the app link
-            executeResolverOnBlockerThread(resolver, testUrl);
-            getTestBlocker().waitForSignals(1);
-            assertNotNull(resolveTask);
-
-            // Now let's fetch it again. This should complete the task synchronously.
-            Task<AppLink> cachedUrlResolveTask = resolver.getAppLinkFromUrlInBackground(testUrl);
-
-            assertTrue(cachedUrlResolveTask.isCompleted() &&
-                    !cachedUrlResolveTask.isCancelled() &&
-                    !cachedUrlResolveTask.isFaulted());
-
-            AppLink appLink = cachedUrlResolveTask.getResult();
-
-            assertEquals(appLink.getSourceUrl(), testUrl);
-            assertEquals(appLink.getWebUrl(), testWebUri);
-            assertTrue(targetListsAreEqual(appLink.getTargets(), testTargets));
-        } catch (Exception e) {
-            // Forcing the test to fail with details
-            assertNull(e);
-        }
-    }
-
     public void executeResolverOnBlockerThread(final FacebookAppLinkResolver resolver, final Uri testUrl) {
         final TestBlocker blocker = getTestBlocker();
         Runnable runnable = new Runnable() {
diff --git a/facebook/src/androidTest/java/com/facebook/GraphRequestTests.java b/facebook/src/androidTest/java/com/facebook/GraphRequestTests.java
index 6745a0fab..5556e8991 100644
--- a/facebook/src/androidTest/java/com/facebook/GraphRequestTests.java
+++ b/facebook/src/androidTest/java/com/facebook/GraphRequestTests.java
@@ -20,11 +20,14 @@
 
 package com.facebook;
 
+import android.net.Uri;
 import android.test.suitebuilder.annotation.LargeTest;
+import android.test.suitebuilder.annotation.SmallTest;
+
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.util.Date;
+import java.net.HttpURLConnection;
 
 // These tests relate to serialization/de-serialization of graph objects in a variety of scenarios, rather than
 // to the underlying request/batch plumbing.
@@ -68,4 +71,25 @@ public void testCommentRoundTrip() throws JSONException {
         assertNotNull(comment2Message);
         assertEquals(commentMessage, comment2Message);
     }
+
+    @SmallTest
+    public void testSetVersion() throws Exception {
+        String currentVersion = FacebookSdk.getGraphApiVersion();
+        FacebookSdk.setGraphApiVersion("v4.5");
+        GraphRequest requestMe = new GraphRequest(null, "TourEiffel");
+        HttpURLConnection connection = GraphRequest.toHttpConnection(requestMe);
+
+        assertTrue(connection != null);
+
+        assertEquals("GET", connection.getRequestMethod());
+        assertEquals("v4.5", FacebookSdk.getGraphApiVersion());
+        assertEquals("/v4.5" + "/TourEiffel", connection.getURL().getPath());
+
+        assertTrue(connection.getRequestProperty("User-Agent").startsWith("FBAndroidSDK"));
+
+        Uri uri = Uri.parse(connection.getURL().toString());
+        assertEquals("android", uri.getQueryParameter("sdk"));
+        assertEquals("json", uri.getQueryParameter("format"));
+        FacebookSdk.setGraphApiVersion(currentVersion);
+    }
 }
diff --git a/facebook/src/androidTest/java/com/facebook/RequestTests.java b/facebook/src/androidTest/java/com/facebook/RequestTests.java
index 61f0c5547..59c3491af 100644
--- a/facebook/src/androidTest/java/com/facebook/RequestTests.java
+++ b/facebook/src/androidTest/java/com/facebook/RequestTests.java
@@ -25,6 +25,7 @@
 import android.net.Uri;
 import android.os.Bundle;
 import android.test.suitebuilder.annotation.LargeTest;
+import android.test.suitebuilder.annotation.Suppress;
 
 import com.facebook.internal.GraphUtil;
 import com.facebook.share.ShareApi;
@@ -58,6 +59,9 @@
     private static final String TEST_OG_ACTION_TYPE = "facebooksdktests:run";
     private static final long REQUEST_TIMEOUT_MILLIS = 10000;
 
+    public static final String TEST_PAGE_ID = "1163806960341831";
+    public static final String TEST_PAGE_ID_2 = "110774245616525";
+
     protected String[] getDefaultPermissions()
     {
         return new String[] {
@@ -80,27 +84,6 @@ public void tearDown() throws Exception {
         super.tearDown();
     }
 
-    @LargeTest
-    public void testExecuteSingleGet() {
-        Bundle parameters = new Bundle();
-        parameters.putString("fields", "location");
-
-        GraphRequest request = new GraphRequest(
-                AccessToken.getCurrentAccessToken(),
-                "TourEiffel",
-                parameters,
-                null);
-        GraphResponse response = request.executeAndWait();
-
-        assertTrue(response != null);
-        assertTrue(response.getError() == null);
-        assertNotNull(response.getJSONObject());
-        assertNotNull(response.getRawResponse());
-
-        JSONObject graphPlace = response.getJSONObject();
-        assertEquals("Paris", graphPlace.optJSONObject("location").optString("city"));
-    }
-
     @LargeTest
     public void testBuildsUploadPhotoHttpURLConnection() throws Exception {
         Bitmap image = createTestBitmap(128);
@@ -119,46 +102,6 @@ public void testBuildsUploadPhotoHttpURLConnection() throws Exception {
         assertNotSame("application/x-www-form-urlencoded", connection.getRequestProperty("Content-Type"));
     }
 
-    @LargeTest
-    public void testExecuteSingleGetUsingHttpURLConnection() throws IOException {
-        Bundle parameters = new Bundle();
-        parameters.putString("fields", "location");
-
-        GraphRequest request = new GraphRequest(
-                AccessToken.getCurrentAccessToken(),
-                "TourEiffel",
-                parameters,
-                null);
-        HttpURLConnection connection = GraphRequest.toHttpConnection(request);
-
-        assertEquals("gzip", connection.getRequestProperty("Content-Encoding"));
-        assertEquals(
-                "application/x-www-form-urlencoded",
-                connection.getRequestProperty("Content-Type"));
-
-        List<GraphResponse> responses = GraphRequest.executeConnectionAndWait(
-                connection,
-                Arrays.asList(new GraphRequest[]{request}));
-        assertNotNull(responses);
-        assertEquals(1, responses.size());
-
-        GraphResponse response = responses.get(0);
-
-        assertTrue(response != null);
-        assertTrue(response.getError() == null);
-        assertNotNull(response.getJSONObject());
-        assertNotNull(response.getRawResponse());
-
-        JSONObject graphPlace = response.getJSONObject();
-        assertEquals("Paris", graphPlace.optJSONObject("location").optString("city"));
-
-        // Make sure calling code can still access HTTP headers and call disconnect themselves.
-        int code = connection.getResponseCode();
-        assertEquals(200, code);
-        assertTrue(connection.getHeaderFields().keySet().contains("Content-Type"));
-        connection.disconnect();
-    }
-
     @LargeTest
     public void testFacebookErrorResponseCreatesError() {
         GraphRequest request = new GraphRequest(null, "somestringthatshouldneverbeavalidfobjectid");
@@ -980,56 +923,4 @@ public void testCantUseComplexParameterInGetRequest() {
             setLongitude(-122.3331);
         }
     };
-
-    @LargeTest
-    public void testPaging() {
-        final List<JSONObject> returnedPlaces = new ArrayList<JSONObject>();
-        GraphRequest request = GraphRequest
-                .newPlacesSearchRequest(
-                        AccessToken.getCurrentAccessToken(),
-                        SEATTLE_LOCATION,
-                        1000,
-                        3,
-                        null,
-                        new GraphRequest.GraphJSONArrayCallback() {
-                            @Override
-                            public void onCompleted(JSONArray places, GraphResponse response) {
-                                if (places == null) {
-                                    assertNotNull(places);
-                                }
-                                for (int i = 0; i < places.length(); ++i) {
-                                    returnedPlaces.add(places.optJSONObject(i));
-                                }
-                            }
-                        });
-        GraphResponse response = request.executeAndWait();
-
-        assertNull(response.getError());
-        assertNotNull(response.getJSONObject());
-        assertNotSame(0, returnedPlaces.size());
-
-        returnedPlaces.clear();
-
-        GraphRequest nextRequest = response.getRequestForPagedResults(GraphResponse.PagingDirection.NEXT);
-        assertNotNull(nextRequest);
-
-        nextRequest.setCallback(request.getCallback());
-        response = nextRequest.executeAndWait();
-
-        assertNull(response.getError());
-        assertNotNull(response.getJSONObject());
-        assertNotSame(0, returnedPlaces.size());
-
-        returnedPlaces.clear();
-
-        GraphRequest previousRequest = response.getRequestForPagedResults(GraphResponse.PagingDirection.PREVIOUS);
-        assertNotNull(previousRequest);
-
-        previousRequest.setCallback(request.getCallback());
-        response = previousRequest.executeAndWait();
-
-        assertNull(response.getError());
-        assertNotNull(response.getJSONObject());
-        assertNotSame(0, returnedPlaces.size());
-    }
 }
diff --git a/facebook/src/androidTest/java/com/facebook/appevents/AppEventsLoggerTests.java b/facebook/src/androidTest/java/com/facebook/appevents/AppEventsLoggerTests.java
index e3bf4d6c7..22fb6f6f0 100644
--- a/facebook/src/androidTest/java/com/facebook/appevents/AppEventsLoggerTests.java
+++ b/facebook/src/androidTest/java/com/facebook/appevents/AppEventsLoggerTests.java
@@ -26,9 +26,12 @@
 import android.support.v4.content.LocalBroadcastManager;
 
 import com.facebook.AccessToken;
+import com.facebook.AccessTokenSource;
+import com.facebook.FacebookSdk;
 import com.facebook.FacebookTestCase;
 import com.facebook.WaitForBroadcastReceiver;
 import com.facebook.appevents.AppEventsLogger;
+import com.facebook.internal.FetchedAppSettingsManager;
 
 import java.io.FileInputStream;
 import java.io.IOException;
@@ -49,7 +52,8 @@ public void testSimpleCall() throws InterruptedException {
         final WaitForBroadcastReceiver waitForBroadcastReceiver = new WaitForBroadcastReceiver();
         waitForBroadcastReceiver.incrementExpectCount();
 
-        final LocalBroadcastManager broadcastManager = LocalBroadcastManager.getInstance(getActivity());
+        final LocalBroadcastManager broadcastManager =
+                LocalBroadcastManager.getInstance(getActivity());
 
         try {
             // Need to get notifications on another thread so we can wait for them.
@@ -82,4 +86,52 @@ public void run() {
             broadcastManager.unregisterReceiver(waitForBroadcastReceiver);
         }
     }
+
+    public void testExplicitCallWithNoAppSettings() throws InterruptedException {
+        AppEventsLogger.setFlushBehavior(AppEventsLogger.FlushBehavior.EXPLICIT_ONLY);
+
+        AccessToken accessToken1 = getFakeAccessToken();
+        FacebookSdk.setApplicationId("234");
+
+        AppEventsLogger logger1 = AppEventsLogger.newLogger(getActivity(), accessToken1);
+
+        final WaitForBroadcastReceiver waitForBroadcastReceiver = new WaitForBroadcastReceiver();
+        waitForBroadcastReceiver.incrementExpectCount();
+
+        final LocalBroadcastManager broadcastManager =
+                LocalBroadcastManager.getInstance(getActivity());
+
+        try {
+            // Need to get notifications on another thread so we can wait for them.
+            runOnBlockerThread(new Runnable() {
+                @Override
+                public void run() {
+                    broadcastManager.registerReceiver(waitForBroadcastReceiver,
+                            new IntentFilter(AppEventsLogger.ACTION_APP_EVENTS_FLUSHED));
+                }
+            }, true);
+
+            logger1.logEvent("an_event");
+
+            logger1.flush();
+
+            waitForBroadcastReceiver.waitForExpectedCalls();
+
+            closeBlockerAndAssertSuccess();
+        } finally {
+            broadcastManager.unregisterReceiver(waitForBroadcastReceiver);
+        }
+    }
+
+    private AccessToken getFakeAccessToken() {
+        return new AccessToken(
+                "foobar",
+                "234",
+                "567",
+                null,
+                null,
+                AccessTokenSource.TEST_USER,
+                null,
+                null);
+    }
 }
diff --git a/facebook/src/androidTest/java/com/facebook/appevents/UpdateUserPropertiesTests.java b/facebook/src/androidTest/java/com/facebook/appevents/UpdateUserPropertiesTests.java
new file mode 100644
index 000000000..ebc23cd87
--- /dev/null
+++ b/facebook/src/androidTest/java/com/facebook/appevents/UpdateUserPropertiesTests.java
@@ -0,0 +1,55 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import android.os.Bundle;
+
+import com.facebook.FacebookTestCase;
+import com.facebook.GraphRequest;
+import com.facebook.GraphResponse;
+import com.facebook.TestBlocker;
+
+public class UpdateUserPropertiesTests extends FacebookTestCase {
+    public void testUserUpdateProperties() throws Exception {
+        final TestBlocker blocker = getTestBlocker();
+        Bundle parameters = new Bundle();
+        parameters.putString("custom_value", "1");
+        AppEventsLogger.setUserID("1");
+        AppEventsLogger.updateUserProperties(
+                parameters,
+                getApplicationId(),
+                new GraphRequest.Callback() {
+            @Override
+            public void onCompleted(GraphResponse response) {
+                if (response.getError() != null) {
+                    blocker.setException(response.getError().getException());
+                }
+
+                blocker.signal();
+            }
+        });
+
+        blocker.waitForSignals(1);
+        if (blocker.getException() != null) {
+            throw blocker.getException();
+        }
+    }
+}
diff --git a/facebook/src/androidTest/java/com/facebook/internal/ImageResponseCacheTest.java b/facebook/src/androidTest/java/com/facebook/internal/ImageResponseCacheTest.java
index ae67aead5..dfc53405b 100644
--- a/facebook/src/androidTest/java/com/facebook/internal/ImageResponseCacheTest.java
+++ b/facebook/src/androidTest/java/com/facebook/internal/ImageResponseCacheTest.java
@@ -26,6 +26,8 @@
 import android.net.Uri;
 import android.test.AndroidTestCase;
 import android.test.suitebuilder.annotation.LargeTest;
+
+import com.facebook.FacebookSdk;
 import com.facebook.TestUtils;
 
 import java.io.IOException;
@@ -37,19 +39,6 @@
 import java.util.Arrays;
 
 public final class ImageResponseCacheTest extends AndroidTestCase {
-
-    @LargeTest
-    public void testImageCaching() throws Exception {
-        // In unit test, since we need verify first access the image is not in cache
-        // we need clear the cache first
-        TestUtils.clearFileLruCache(ImageResponseCache.getCache(safeGetContext()));
-        String imgUrl = "http://profile.ak.fbcdn.net/hprofile-ak-frc1/369438_100003049100322_615834658_n.jpg";
-
-        Bitmap bmp1 = readImage(imgUrl, false);
-        Bitmap bmp2 = readImage(imgUrl, true);
-        compareImages(bmp1, bmp2);
-    }
-
     @LargeTest
     public void testImageNotCaching() throws IOException {
 
diff --git a/facebook/src/androidTest/java/com/facebook/internal/UtilityTest.java b/facebook/src/androidTest/java/com/facebook/internal/UtilityTest.java
index 464531a21..3480a0f27 100644
--- a/facebook/src/androidTest/java/com/facebook/internal/UtilityTest.java
+++ b/facebook/src/androidTest/java/com/facebook/internal/UtilityTest.java
@@ -29,8 +29,8 @@
 
     @LargeTest
     public void testFetchedAppSettingsErrorClassification() throws Exception {
-        Utility.FetchedAppSettings fetchedAppSettings =
-                Utility.queryAppSettings(getApplicationId(), false);
+        FetchedAppSettings fetchedAppSettings =
+                FetchedAppSettingsManager.queryAppSettings(getApplicationId(), false);
         FacebookRequestErrorClassification errorClassification = fetchedAppSettings
                 .getErrorClassification();
         assertNotNull(errorClassification);
diff --git a/facebook/src/androidTest/java/com/facebook/login/LoginClientTests.java b/facebook/src/androidTest/java/com/facebook/login/LoginClientTests.java
index 2dba1ba93..e780e860c 100644
--- a/facebook/src/androidTest/java/com/facebook/login/LoginClientTests.java
+++ b/facebook/src/androidTest/java/com/facebook/login/LoginClientTests.java
@@ -20,6 +20,7 @@
 
 package com.facebook.login;
 
+import android.annotation.SuppressLint;
 import android.support.v4.app.Fragment;
 import android.test.suitebuilder.annotation.LargeTest;
 
@@ -33,6 +34,7 @@
     private static final Set<String> PERMISSIONS = new HashSet<String>(
             Arrays.asList("go outside", "come back in"));
 
+    @SuppressLint("ParcelCreator")
     class MockLoginClient extends LoginClient {
         Result result;
         boolean triedNextHandler = false;
@@ -70,6 +72,7 @@ void tryNextHandler() {
         );
     }
 
+    @SuppressLint("ParcelCreator")
     class MockValidatingLoginClient extends MockLoginClient {
         private final HashMap<String, String> mapAccessTokenToFbid = new HashMap<String, String>();
         private Set<String> permissionsToReport = new HashSet<String>();
diff --git a/facebook/src/main/AndroidManifest.xml b/facebook/src/main/AndroidManifest.xml
index 587ea1763..ee6a2a828 100644
--- a/facebook/src/main/AndroidManifest.xml
+++ b/facebook/src/main/AndroidManifest.xml
@@ -21,5 +21,24 @@
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.facebook">
-    <application/>
+    <application>
+        <activity
+            android:name="com.facebook.FacebookActivity"
+            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
+            android:theme="@style/com_facebook_activity_theme" />
+        <activity android:name="com.facebook.CustomTabMainActivity" />
+
+        <!-- The initialization ContentProvider will call FacebookSdk.sdkInitialize automatically
+         with the application context. This config is merged in with the host app's manifest,
+         but there can only be one provider with the same authority activated at any given
+         point; so if the end user has two or more different apps that use Facebook SDK, only the
+         first one will be able to use the provider. To work around this problem, we use the
+         following placeholder in the authority to identify each host application as if it was
+         a completely different provider.
+        -->
+        <provider
+            android:authorities="${applicationId}.FacebookInitProvider"
+            android:name=".internal.FacebookInitProvider"
+            android:exported="false" />
+    </application>
 </manifest>
diff --git a/facebook/src/main/java/com/facebook/AccessToken.java b/facebook/src/main/java/com/facebook/AccessToken.java
index 523b34c6f..289e99e7c 100644
--- a/facebook/src/main/java/com/facebook/AccessToken.java
+++ b/facebook/src/main/java/com/facebook/AccessToken.java
@@ -23,8 +23,6 @@
 import android.annotation.SuppressLint;
 import android.content.Intent;
 import android.os.Bundle;
-import android.os.Handler;
-import android.os.Looper;
 import android.os.Parcel;
 import android.os.Parcelable;
 import android.support.annotation.Nullable;
@@ -37,7 +35,13 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Date;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
 
 /**
  * This class represents an immutable access token for using Facebook APIs. It also includes
diff --git a/facebook/src/main/java/com/facebook/AccessTokenSource.java b/facebook/src/main/java/com/facebook/AccessTokenSource.java
index 622c3fe5d..547627a3b 100644
--- a/facebook/src/main/java/com/facebook/AccessTokenSource.java
+++ b/facebook/src/main/java/com/facebook/AccessTokenSource.java
@@ -48,7 +48,12 @@
      * Indicates an access token was obtained by the user logging in through the
      * Web-based dialog.
      */
-    WEB_VIEW(false),
+    WEB_VIEW(true),
+    /**
+     * Indicates an access token was obtained by the user logging in through the
+     * Web-based dialog on a Chrome Custom Tab.
+     */
+    CHROME_CUSTOM_TAB(true),
     /**
      * Indicates an access token is for a test user rather than an actual
      * Facebook user.
diff --git a/facebook/src/main/java/com/facebook/CustomTabActivity.java b/facebook/src/main/java/com/facebook/CustomTabActivity.java
new file mode 100644
index 000000000..bd4769cbf
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/CustomTabActivity.java
@@ -0,0 +1,88 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook;
+
+import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.os.Bundle;
+import android.support.v4.content.LocalBroadcastManager;
+
+/*
+ * Login from a custom tab redirects here. Pass the url on to CustomTabMainActivity so it can return
+ * the result.
+ */
+public class CustomTabActivity extends Activity {
+    private static final int CUSTOM_TAB_REDIRECT_REQUEST_CODE = 2;
+    public static final String CUSTOM_TAB_REDIRECT_ACTION =
+            CustomTabActivity.class.getSimpleName() + ".action_customTabRedirect";
+    public static final String DESTROY_ACTION =
+            CustomTabActivity.class.getSimpleName() + ".action_destroy";
+
+    private BroadcastReceiver closeReceiver;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        Intent intent = new Intent(this, CustomTabMainActivity.class);
+        intent.setAction(CUSTOM_TAB_REDIRECT_ACTION);
+        intent.putExtra(CustomTabMainActivity.EXTRA_URL, getIntent().getDataString());
+
+        // these flags will open CustomTabMainActivity from the back stack as well as closing this
+        // activity and the custom tab opened by CustomTabMainActivity.
+        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
+
+        startActivityForResult(intent, CUSTOM_TAB_REDIRECT_REQUEST_CODE);
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+
+        if (resultCode == RESULT_CANCELED) {
+            // We weren't able to open CustomTabMainActivity from the back stack. Send a broadcast
+            // instead.
+            Intent broadcast = new Intent(CUSTOM_TAB_REDIRECT_ACTION);
+            broadcast.putExtra(CustomTabMainActivity.EXTRA_URL, getIntent().getDataString());
+            LocalBroadcastManager.getInstance(this).sendBroadcast(broadcast);
+
+            // Wait for the custom tab to be removed from the back stack before finishing.
+            closeReceiver = new BroadcastReceiver() {
+                @Override
+                public void onReceive(Context context, Intent intent) {
+                    CustomTabActivity.this.finish();
+                }
+            };
+            LocalBroadcastManager.getInstance(this).registerReceiver(
+                    closeReceiver,
+                    new IntentFilter(CustomTabActivity.DESTROY_ACTION)
+            );
+        }
+    }
+
+    @Override
+    protected void onDestroy() {
+        LocalBroadcastManager.getInstance(this).unregisterReceiver(closeReceiver);
+        super.onDestroy();
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/CustomTabMainActivity.java b/facebook/src/main/java/com/facebook/CustomTabMainActivity.java
new file mode 100644
index 000000000..f29c027fb
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/CustomTabMainActivity.java
@@ -0,0 +1,126 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook;
+
+
+import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.os.Bundle;
+import android.support.v4.content.LocalBroadcastManager;
+
+import com.facebook.internal.CustomTab;
+
+public class CustomTabMainActivity extends Activity {
+    public static final String EXTRA_PARAMS =
+            CustomTabMainActivity.class.getSimpleName() + ".extra_params";
+    public static final String EXTRA_CHROME_PACKAGE =
+            CustomTabMainActivity.class.getSimpleName() + ".extra_chromePackage";
+    public static final String EXTRA_URL =
+            CustomTabMainActivity.class.getSimpleName() + ".extra_url";
+    public static final String REFRESH_ACTION =
+            CustomTabMainActivity.class.getSimpleName() + ".action_refresh";
+    public static final String getRedirectUrl() {
+        return "fb" + FacebookSdk.getApplicationId() + "://authorize";
+    }
+    private static final String OAUTH_DIALOG = "oauth";
+
+    private boolean shouldCloseCustomTab = true;
+    private BroadcastReceiver redirectReceiver;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        // Custom Tab Redirects should not be creating a new instance of this activity
+        if (CustomTabActivity.CUSTOM_TAB_REDIRECT_ACTION.equals(getIntent().getAction())) {
+            setResult(RESULT_CANCELED);
+            finish();
+            return;
+        }
+
+        if (savedInstanceState == null) {
+            Bundle parameters = getIntent().getBundleExtra(EXTRA_PARAMS);
+            String chromePackage = getIntent().getStringExtra(EXTRA_CHROME_PACKAGE);
+
+            CustomTab customTab = new CustomTab(OAUTH_DIALOG, parameters);
+            customTab.openCustomTab(this, chromePackage);
+
+            shouldCloseCustomTab = false;
+
+            // This activity will receive a broadcast if it can't be opened from the back stack
+            redirectReceiver = new BroadcastReceiver() {
+                @Override
+                public void onReceive(Context context, Intent intent) {
+                    // Remove the custom tab on top of this activity.
+                    Intent newIntent =
+                            new Intent(CustomTabMainActivity.this, CustomTabMainActivity.class);
+                    newIntent.setAction(REFRESH_ACTION);
+                    newIntent.putExtra(EXTRA_URL, intent.getStringExtra(EXTRA_URL));
+                    newIntent.addFlags(
+                            Intent.FLAG_ACTIVITY_CLEAR_TOP |
+                            Intent.FLAG_ACTIVITY_SINGLE_TOP);
+                    startActivity(newIntent);
+                }
+            };
+            LocalBroadcastManager.getInstance(this).registerReceiver(
+                    redirectReceiver,
+                    new IntentFilter(CustomTabActivity.CUSTOM_TAB_REDIRECT_ACTION)
+            );
+        }
+    }
+
+    @Override
+    protected void onNewIntent(Intent intent) {
+        super.onNewIntent(intent);
+        if (REFRESH_ACTION.equals(intent.getAction())) {
+            // The custom tab is now destroyed so we can finish the redirect activity
+            Intent broadcast = new Intent(CustomTabActivity.DESTROY_ACTION);
+            LocalBroadcastManager.getInstance(this).sendBroadcast(broadcast);
+            sendResult(RESULT_OK, intent);
+        } else if (CustomTabActivity.CUSTOM_TAB_REDIRECT_ACTION.equals(intent.getAction())) {
+            // We have successfully redirected back to this activity. Return the result and close.
+            sendResult(RESULT_OK, intent);
+        }
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        if (shouldCloseCustomTab) {
+            // The custom tab was closed without getting a result.
+            sendResult(RESULT_CANCELED, null);
+        }
+        shouldCloseCustomTab = true;
+    }
+
+    private void sendResult(int resultCode, Intent resultIntent) {
+        LocalBroadcastManager.getInstance(this).unregisterReceiver(redirectReceiver);
+        if (resultIntent != null) {
+            setResult(resultCode, resultIntent);
+        } else {
+            setResult(resultCode);
+        }
+        finish();
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/FacebookActivity.java b/facebook/src/main/java/com/facebook/FacebookActivity.java
index 5b5c85fb6..ded4c9660 100644
--- a/facebook/src/main/java/com/facebook/FacebookActivity.java
+++ b/facebook/src/main/java/com/facebook/FacebookActivity.java
@@ -26,10 +26,13 @@
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentActivity;
 import android.support.v4.app.FragmentManager;
+import android.util.Log;
 
 import com.facebook.internal.FacebookDialogFragment;
 import com.facebook.internal.NativeProtocol;
 import com.facebook.login.LoginFragment;
+import com.facebook.share.internal.DeviceShareDialogFragment;
+import com.facebook.share.model.ShareContent;
 
 /**
  * This Activity is a necessary part of the overall Facebook SDK,
@@ -49,20 +52,39 @@
 
     public static String PASS_THROUGH_CANCEL_ACTION = "PassThrough";
     private static String FRAGMENT_TAG = "SingleFragment";
+    private static final String TAG = FacebookActivity.class.getName();
 
     private Fragment singleFragment;
 
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
+        Intent intent = getIntent();
+
+        // Some apps using this sdk don't put the sdk initialize code in the application
+        // on create method. This can cause issues when opening this activity after an application
+        // has been killed since the sdk won't be initialized. Attempt to initialize the sdk
+        // here if it hasn't already been initialized.
+        if (!FacebookSdk.isInitialized()) {
+            Log.d(
+                TAG,
+                "Facebook SDK not initialized. Make sure you call sdkInitialize inside " +
+                        "your Application's onCreate method.");
+            FacebookSdk.sdkInitialize(getApplicationContext());
+        }
+
         setContentView(R.layout.com_facebook_activity_layout);
 
-        Intent intent = getIntent();
         if (PASS_THROUGH_CANCEL_ACTION.equals(intent.getAction())) {
             handlePassThroughError();
             return;
         }
 
+        singleFragment = getFragment();
+    }
+
+    protected Fragment getFragment() {
+        Intent intent = getIntent();
         FragmentManager manager = getSupportFragmentManager();
         Fragment fragment = manager.findFragmentByTag(FRAGMENT_TAG);
 
@@ -72,6 +94,12 @@ public void onCreate(Bundle savedInstanceState) {
                 dialogFragment.setRetainInstance(true);
                 dialogFragment.show(manager, FRAGMENT_TAG);
 
+                fragment = dialogFragment;
+            } else if (DeviceShareDialogFragment.TAG.equals(intent.getAction())) {
+                DeviceShareDialogFragment dialogFragment = new DeviceShareDialogFragment();
+                dialogFragment.setRetainInstance(true);
+                dialogFragment.setShareContent((ShareContent) intent.getParcelableExtra("content"));
+                dialogFragment.show(manager, FRAGMENT_TAG);
                 fragment = dialogFragment;
             } else {
                 fragment = new LoginFragment();
@@ -81,8 +109,7 @@ public void onCreate(Bundle savedInstanceState) {
                         .commit();
             }
         }
-
-        singleFragment = fragment;
+        return fragment;
     }
 
     @Override
@@ -94,6 +121,10 @@ public void onConfigurationChanged(Configuration newConfig) {
         }
     }
 
+    public Fragment getCurrentFragment() {
+        return singleFragment;
+    }
+
     private void handlePassThroughError() {
         Intent requestIntent = getIntent();
 
@@ -101,17 +132,11 @@ private void handlePassThroughError() {
         Bundle errorResults = NativeProtocol.getMethodArgumentsFromIntent(requestIntent);
         FacebookException exception = NativeProtocol.getExceptionFromErrorData(errorResults);
 
-        // Create a result intent that is formed based on the request intent
         Intent resultIntent = NativeProtocol.createProtocolResultIntent(
-                requestIntent,
+                getIntent(),
                 null,
                 exception);
-
         setResult(RESULT_CANCELED, resultIntent);
         finish();
     }
-
-    public Fragment getCurrentFragment() {
-        return singleFragment;
-    }
 }
diff --git a/facebook/src/main/java/com/facebook/FacebookButtonBase.java b/facebook/src/main/java/com/facebook/FacebookButtonBase.java
index fedb3a94f..0192206cd 100644
--- a/facebook/src/main/java/com/facebook/FacebookButtonBase.java
+++ b/facebook/src/main/java/com/facebook/FacebookButtonBase.java
@@ -26,8 +26,6 @@
 import android.content.ContextWrapper;
 import android.content.res.TypedArray;
 import android.graphics.Canvas;
-import android.graphics.Color;
-import android.graphics.Paint;
 import android.graphics.Typeface;
 import android.support.v4.app.Fragment;
 import android.support.v4.content.ContextCompat;
@@ -36,10 +34,7 @@
 import android.view.Gravity;
 import android.view.View;
 import android.widget.Button;
-import android.util.Log;
-import com.facebook.FacebookException;
-import com.facebook.FacebookSdk;
-import com.facebook.R;
+
 import com.facebook.appevents.AppEventsLogger;
 import com.facebook.internal.FragmentWrapper;
 
@@ -297,6 +292,7 @@ private void parseCompoundDrawableAttributes(
         }
     }
 
+    @SuppressWarnings("ResourceType")
     private void parseContentAttributes(
             final Context context,
             final AttributeSet attrs,
@@ -324,6 +320,7 @@ private void parseContentAttributes(
         }
     }
 
+    @SuppressWarnings("ResourceType")
     private void parseTextAttributes(
             final Context context,
             final AttributeSet attrs,
diff --git a/facebook/src/main/java/com/facebook/FacebookCallback.java b/facebook/src/main/java/com/facebook/FacebookCallback.java
index 6a7133eb8..b25092c1d 100644
--- a/facebook/src/main/java/com/facebook/FacebookCallback.java
+++ b/facebook/src/main/java/com/facebook/FacebookCallback.java
@@ -45,7 +45,7 @@
     /**
      * Called when the dialog is canceled.
      * <p/>
-     * Note: {@link #onSuccess(RESULT)} will be called instead if any of the following conditions
+     * Note: {@link #onSuccess(Object)} will be called instead if any of the following conditions
      * are true.
      * <ul>
      * <li>
diff --git a/facebook/src/main/java/com/facebook/FacebookRequestError.java b/facebook/src/main/java/com/facebook/FacebookRequestError.java
index f083445b9..596e2691e 100644
--- a/facebook/src/main/java/com/facebook/FacebookRequestError.java
+++ b/facebook/src/main/java/com/facebook/FacebookRequestError.java
@@ -20,16 +20,18 @@
 
 package com.facebook;
 
+import android.os.Parcel;
+import android.os.Parcelable;
+
 import com.facebook.internal.FacebookRequestErrorClassification;
+import com.facebook.internal.FetchedAppSettings;
+import com.facebook.internal.FetchedAppSettingsManager;
 import com.facebook.internal.Utility;
+
 import org.json.JSONException;
 import org.json.JSONObject;
 
 import java.net.HttpURLConnection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Set;
 
 /**
  * This class represents an error that occurred during a Facebook request.
@@ -39,7 +41,7 @@
  * handling, see <a href="https://developers.facebook.com/docs/reference/api/errors/">
  * https://developers.facebook.com/docs/reference/api/errors/</a>
  */
-public final class FacebookRequestError {
+public final class FacebookRequestError implements Parcelable {
 
     /** Represents an invalid or unknown error code from the server. */
     public static final int INVALID_ERROR_CODE = -1;
@@ -442,14 +444,57 @@ static FacebookRequestError checkResponseAndCreateError(
 
     static synchronized FacebookRequestErrorClassification getErrorClassification() {
         FacebookRequestErrorClassification errorClassification;
-        Utility.FetchedAppSettings appSettings =
-                Utility.getAppSettingsWithoutQuery(FacebookSdk.getApplicationId());
+        FetchedAppSettings appSettings =
+                FetchedAppSettingsManager.getAppSettingsWithoutQuery(FacebookSdk.getApplicationId());
         if (appSettings == null) {
             return FacebookRequestErrorClassification.getDefaultErrorClassification();
         }
         return appSettings.getErrorClassification();
     }
 
+    public void writeToParcel(Parcel out, int flags) {
+        out.writeInt(this.requestStatusCode);
+        out.writeInt(this.errorCode);
+        out.writeInt(this.subErrorCode);
+        out.writeString(this.errorType);
+        out.writeString(this.errorMessage);
+        out.writeString(this.errorUserTitle);
+        out.writeString(this.errorUserMessage);
+    }
+
+    public static final Parcelable.Creator<FacebookRequestError> CREATOR
+            = new Parcelable.Creator<FacebookRequestError>() {
+        public FacebookRequestError createFromParcel(Parcel in) {
+            return new FacebookRequestError(in);
+        }
+
+        public FacebookRequestError[] newArray(int size) {
+            return new FacebookRequestError[size];
+        }
+    };
+
+    private FacebookRequestError(Parcel in) {
+        this(
+            in.readInt(), //requestStatusCode
+            in.readInt(), //errorCode
+            in.readInt(), //subErrorCode
+            in.readString(), //errorType
+            in.readString(), //errorMessage
+            in.readString(), //errorUserTitle
+            in.readString(), //errorUserMessage
+            false, //errorIsTransient
+            null, //requestResultBody
+            null, //requestResult
+            null, //batchRequestResult
+            null, //connection
+            null //exception)
+        );
+    }
+
+    public int describeContents() {
+        return 0;
+    }
+
     /**
      * An enum that represents the Facebook SDK classification for the error that occurred.
      */
diff --git a/facebook/src/main/java/com/facebook/FacebookSdk.java b/facebook/src/main/java/com/facebook/FacebookSdk.java
index a5c42eb2b..977afcd52 100644
--- a/facebook/src/main/java/com/facebook/FacebookSdk.java
+++ b/facebook/src/main/java/com/facebook/FacebookSdk.java
@@ -20,6 +20,7 @@
 
 package com.facebook;
 
+import android.app.Application;
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.content.pm.ApplicationInfo;
@@ -32,13 +33,14 @@
 
 import com.facebook.appevents.AppEventsLogger;
 import com.facebook.internal.AppEventsLoggerUtility;
+import com.facebook.internal.FetchedAppSettingsManager;
 import com.facebook.internal.LockOnGetVariable;
 import com.facebook.internal.BoltsMeasurementEventListener;
 import com.facebook.internal.AttributionIdentifiers;
 import com.facebook.internal.NativeProtocol;
+import com.facebook.internal.ServerProtocol;
 import com.facebook.internal.Utility;
 import com.facebook.internal.Validate;
-import com.facebook.internal.WebDialog;
 
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -62,11 +64,14 @@
     private static final String TAG = FacebookSdk.class.getCanonicalName();
     private static final HashSet<LoggingBehavior> loggingBehaviors =
             new HashSet<LoggingBehavior>(Arrays.asList(LoggingBehavior.DEVELOPER_ERRORS));
-    private static volatile Executor executor;
+    private static final int DEFAULT_CALLBACK_REQUEST_CODE_OFFSET = 0xface;
+
+    private static Executor executor;
     private static volatile String applicationId;
     private static volatile String applicationName;
     private static volatile String appClientToken;
     private static volatile int webDialogTheme;
+    private static volatile Boolean autoLogAppEventsEnabled;
     private static final String FACEBOOK_COM = "facebook.com";
     private static volatile String facebookDomain = FACEBOOK_COM;
     private static AtomicLong onProgressThreshold = new AtomicLong(65536);
@@ -77,8 +82,10 @@
     private static final int DEFAULT_CORE_POOL_SIZE = 5;
     private static final int DEFAULT_MAXIMUM_POOL_SIZE = 128;
     private static final int DEFAULT_KEEP_ALIVE = 1;
-    private static int callbackRequestCodeOffset = 0xface;
+    private static int callbackRequestCodeOffset = DEFAULT_CALLBACK_REQUEST_CODE_OFFSET;
     private static final Object LOCK = new Object();
+    private static final int DEFAULT_THEME = R.style.com_facebook_activity_theme;
+    private static String graphApiVersion = ServerProtocol.getDefaultAPIVersion();
 
     private static final int MAX_REQUEST_CODE_RANGE = 100;
 
@@ -97,7 +104,8 @@ public Thread newThread(Runnable runnable) {
     };
 
     static final String CALLBACK_OFFSET_CHANGED_AFTER_INIT =
-            "The callback request code offset can't be updated once the SDK is initialized.";
+            "The callback request code offset can't be updated once the SDK is initialized. " +
+            "Call FacebookSdk.setCallbackRequestCodeOffset inside your Application.onCreate method";
 
     static final String CALLBACK_OFFSET_NEGATIVE =
             "The callback request code offset can't be negative.";
@@ -123,17 +131,41 @@ public Thread newThread(Runnable runnable) {
      */
     public static final String WEB_DIALOG_THEME = "com.facebook.sdk.WebDialogTheme";
 
+    /**
+     * The key for the auto logging app events in the Android manifest.
+     */
+    public static final String AUTO_LOG_APP_EVENTS_ENABLED_PROPERTY =
+            "com.facebook.sdk.AutoLogAppEventsEnabled";
+
+    /**
+     * The key for the callback off set in the Android manifest.
+     */
+    public static final String CALLBACK_OFFSET_PROPERTY = "com.facebook.sdk.CallbackOffset";
+
     private static Boolean sdkInitialized = false;
 
     /**
-     * This function initializes the Facebook SDK, the behavior of Facebook SDK functions are
-     * undetermined if this function is not called. It should be called as early as possible.
+     * This function initializes the Facebook SDK. This function is called automatically on app
+     * start up if the proper entries are listed in the AndroidManifest, such as the facebook
+     * app id. This method can bee called manually if needed.
+     * The behavior of Facebook SDK functions are undetermined if this function is not called.
+     * It should be called as early as possible.
+     * As part of SDK initialization basic auto logging of app events will occur, this can be
+     * controlled via 'com.facebook.sdk.AutoLogAppEventsEnabled' manifest setting
      * @param applicationContext The application context
      * @param callbackRequestCodeOffset The request code offset that Facebook activities will be
      *                                  called with. Please do not use the range between the
      *                                  value you set and another 100 entries after it in your
      *                                  other requests.
-     */
+     * @Deprecated {@link #sdkInitialize(Context)} and
+     * {@link AppEventsLogger#activateApp(Application)} are called automatically on application
+     * start. Automatic event logging from 'activateApp' can be controlled via the
+     * 'com.facebook.sdk.AutoLogAppEventsEnabled' manifest setting. The callbackRequestCodeOffset
+     * can be set in the AndroidManifest as a meta data entry with the name
+     * {@link #CALLBACK_OFFSET_PROPERTY}.
+     */
+    @Deprecated
+    @SuppressWarnings("deprecation")
     public static synchronized void sdkInitialize(
             Context applicationContext,
             int callbackRequestCodeOffset) {
@@ -141,8 +173,13 @@ public static synchronized void sdkInitialize(
     }
 
     /**
-     * This function initializes the Facebook SDK, the behavior of Facebook SDK functions are
-     * undetermined if this function is not called. It should be called as early as possible.
+     * This function initializes the Facebook SDK. This function is called automatically on app
+     * start up if the proper entries are listed in the AndroidManifest, such as the facebook
+     * app id. This method can bee called manually if needed.
+     * The behavior of Facebook SDK functions are undetermined if this function is not called.
+     * It should be called as early as possible.
+     * As part of SDK initialization basic auto logging of app events will occur, this can be
+     * controlled via 'com.facebook.sdk.AutoLogAppEventsEnabled' manifest setting
      * @param applicationContext The application context
      * @param callbackRequestCodeOffset The request code offset that Facebook activities will be
      *                                  called with. Please do not use the range between the
@@ -150,7 +187,15 @@ public static synchronized void sdkInitialize(
      *                                  other requests.
      * @param callback A callback called when initialize finishes. This will be called even if the
      *                 sdk is already initialized.
-     */
+     * @Deprecated {@link #sdkInitialize(Context)} and
+     * {@link AppEventsLogger#activateApp(Application)} are called automatically on application
+     * start. Automatic event logging from 'activateApp' can be controlled via the
+     * 'com.facebook.sdk.AutoLogAppEventsEnabled' manifest setting. The callbackRequestCodeOffset
+     * can be set in the AndroidManifest as a meta data entry with the name
+     * {@link #CALLBACK_OFFSET_PROPERTY}.
+     */
+    @Deprecated
+    @SuppressWarnings("deprecation")
     public static synchronized void sdkInitialize(
             Context applicationContext,
             int callbackRequestCodeOffset,
@@ -161,28 +206,50 @@ public static synchronized void sdkInitialize(
         if (callbackRequestCodeOffset < 0) {
             throw new FacebookException(CALLBACK_OFFSET_NEGATIVE);
         }
+
         FacebookSdk.callbackRequestCodeOffset = callbackRequestCodeOffset;
         sdkInitialize(applicationContext, callback);
     }
 
     /**
-     * This function initializes the Facebook SDK, the behavior of Facebook SDK functions are
-     * undetermined if this function is not called. It should be called as early as possible.
+     * This function initializes the Facebook SDK. This function is called automatically on app
+     * start up if the proper entries are listed in the AndroidManifest, such as the facebook
+     * app id. This method can bee called manually if needed.
+     * The behavior of Facebook SDK functions are undetermined if this function is not called.
+     * It should be called as early as possible.
+     * As part of SDK initialization basic auto logging of app events will occur, this can be
+     * controlled via 'com.facebook.sdk.AutoLogAppEventsEnabled' manifest setting
      * @param applicationContext The application context
+     * @Deprecated {@link #sdkInitialize(Context)} and
+     * {@link AppEventsLogger#activateApp(Application)} are called automatically on application
+     * start. Automatic event logging from 'activateApp' can be controlled via the
+     * 'com.facebook.sdk.AutoLogAppEventsEnabled' manifest setting.
      */
+    @Deprecated
+    @SuppressWarnings("deprecation")
     public static synchronized void sdkInitialize(Context applicationContext) {
         FacebookSdk.sdkInitialize(applicationContext, null);
     }
 
     /**
-     * This function initializes the Facebook SDK, the behavior of Facebook SDK functions are
-     * undetermined if this function is not called. It should be called as early as possible.
+     * This function initializes the Facebook SDK. This function is called automatically on app
+     * start up if the proper entries are listed in the AndroidManifest, such as the facebook
+     * app id. This method can bee called manually if needed.
+     * The behavior of Facebook SDK functions are undetermined if this function is not called.
+     * It should be called as early as possible.
+     * As part of SDK initialization basic auto logging of app events will occur, this can be
+     * controlled via 'com.facebook.sdk.AutoLogAppEventsEnabled' manifest setting
      * @param applicationContext The application context
      * @param callback A callback called when initialize finishes. This will be called even if the
      *                 sdk is already initialized.
+     * @Deprecated {@link #sdkInitialize(Context)} and
+     * {@link AppEventsLogger#activateApp(Application)} are called automatically on application
+     * start. Automatic event logging from 'activateApp' can be controlled via the
+     * 'com.facebook.sdk.AutoLogAppEventsEnabled' manifest setting.
      */
+    @Deprecated
     public static synchronized void sdkInitialize(
-            Context applicationContext,
+            final Context applicationContext,
             final InitializeCallback callback) {
         if (sdkInitialized) {
             if (callback != null) {
@@ -203,12 +270,19 @@ public static synchronized void sdkInitialize(
         // Make sure we've loaded default settings if we haven't already.
         FacebookSdk.loadDefaultsFromMetadata(FacebookSdk.applicationContext);
 
+        // We should have an application id by now if not throw
+        if (Utility.isNullOrEmpty(applicationId)) {
+            throw new FacebookException("A valid Facebook app id must be set in the " +
+                    "AndroidManifest.xml or set by calling FacebookSdk.setApplicationId " +
+                    "before initializing the sdk.");
+        }
+
         // Set sdkInitialized to true now so the bellow async tasks don't throw not initialized
         // exceptions.
         sdkInitialized = true;
 
         // Load app settings from network so that dialog configs are available
-        Utility.loadAppSettingsAsync(FacebookSdk.applicationContext, applicationId);
+        FetchedAppSettingsManager.loadAppSettingsAsync();
         // Fetch available protocol versions from the apps on the device
         NativeProtocol.updateAllAvailableProtocolVersionsAsync();
 
@@ -222,8 +296,8 @@ public File call() throws Exception {
                     }
                 });
 
-        FutureTask<Void> accessTokenLoadFutureTask =
-                new FutureTask<Void>(new Callable<Void>() {
+        FutureTask<Void> futureTask =
+                new FutureTask<>(new Callable<Void>() {
                     @Override
                     public Void call() throws Exception {
                         AccessTokenManager.getInstance().loadCurrentAccessToken();
@@ -238,10 +312,15 @@ public Void call() throws Exception {
                         if (callback != null) {
                             callback.onInitialized();
                         }
+
+                        // Flush any app events that might have been persisted during last run.
+                        AppEventsLogger.newLogger(
+                                applicationContext.getApplicationContext()).flush();
+
                         return null;
                     }
                 });
-        getExecutor().execute(accessTokenLoadFutureTask);
+        getExecutor().execute(futureTask);
     }
 
     /**
@@ -428,6 +507,29 @@ public static Context getApplicationContext() {
         return applicationContext;
     }
 
+    /**
+     * Sets the Graph API version to use when making Graph requests. This defaults to the latest
+     * Graph API version at the time when the Facebook SDK is shipped.
+     *
+     * @param graphApiVersion the Graph API version, it should be of the form "v2.7"
+     */
+    public static void setGraphApiVersion(String graphApiVersion) {
+        if (!Utility.isNullOrEmpty(graphApiVersion) &&
+                !FacebookSdk.graphApiVersion.equals(graphApiVersion)) {
+            FacebookSdk.graphApiVersion = graphApiVersion;
+        }
+    }
+
+    /**
+     * Returns the Graph API version to use when making Graph requests. This defaults to the latest
+     * Graph API version at the time when the Facebook SDK is shipped.
+     *
+     * @return the Graph API version to use.
+     */
+    public static String getGraphApiVersion() {
+        return graphApiVersion;
+    }
+
     /**
      * This method is public in order to be used by app events, please don't use directly.
      * @param context       The application context.
@@ -621,6 +723,18 @@ static void loadDefaultsFromMetadata(Context context) {
         if (webDialogTheme == 0) {
             setWebDialogTheme(ai.metaData.getInt(WEB_DIALOG_THEME));
         }
+
+        if (callbackRequestCodeOffset == DEFAULT_CALLBACK_REQUEST_CODE_OFFSET) {
+            callbackRequestCodeOffset = ai.metaData.getInt(
+                    CALLBACK_OFFSET_PROPERTY,
+                    DEFAULT_CALLBACK_REQUEST_CODE_OFFSET);
+        }
+
+        if (autoLogAppEventsEnabled == null) {
+            autoLogAppEventsEnabled = ai.metaData.getBoolean(
+                AUTO_LOG_APP_EVENTS_ENABLED_PROPERTY,
+                true);
+        }
     }
 
     /**
@@ -732,7 +846,25 @@ public static int getWebDialogTheme() {
      * @param theme A theme to use
      */
     public static void setWebDialogTheme(int theme) {
-        webDialogTheme = (theme != 0) ? theme : WebDialog.DEFAULT_THEME;
+        webDialogTheme = (theme != 0) ? theme : DEFAULT_THEME;
+    }
+
+    /**
+     * Gets the flag used by {@link com.facebook.appevents.AppEventsLogger}
+     * @return the auto logging events flag for the application
+     */
+    public static boolean getAutoLogAppEventsEnabled() {
+        Validate.sdkInitialized();
+        return autoLogAppEventsEnabled;
+    }
+
+    /**
+     * Sets the auto logging events flag for the application
+     * {@link com.facebook.appevents.AppEventsLogger}
+     * @param flag true or false
+     */
+    public static void setAutoLogAppEventsEnabled(boolean flag) {
+        autoLogAppEventsEnabled = flag;
     }
 
     /**
diff --git a/facebook/src/main/java/com/facebook/FacebookSdkVersion.java b/facebook/src/main/java/com/facebook/FacebookSdkVersion.java
index e07120ccd..a99f50802 100644
--- a/facebook/src/main/java/com/facebook/FacebookSdkVersion.java
+++ b/facebook/src/main/java/com/facebook/FacebookSdkVersion.java
@@ -21,5 +21,5 @@
 package com.facebook;
 
 final class FacebookSdkVersion {
-    public static final String BUILD = "4.10.0";
+    public static final String BUILD = "4.24.0";
 }
diff --git a/facebook/src/main/java/com/facebook/GraphRequest.java b/facebook/src/main/java/com/facebook/GraphRequest.java
index 7552030a7..5368774e7 100644
--- a/facebook/src/main/java/com/facebook/GraphRequest.java
+++ b/facebook/src/main/java/com/facebook/GraphRequest.java
@@ -98,7 +98,7 @@
     private static final String FORMAT_JSON = "json";
     private static final String SDK_PARAM = "sdk";
     private static final String SDK_ANDROID = "android";
-    private static final String ACCESS_TOKEN_PARAM = "access_token";
+    public static final String ACCESS_TOKEN_PARAM = "access_token";
     private static final String BATCH_ENTRY_NAME_PARAM = "name";
     private static final String BATCH_ENTRY_OMIT_RESPONSE_ON_SUCCESS_PARAM =
             "omit_response_on_success";
@@ -257,7 +257,7 @@ public GraphRequest(
         }
 
         if (this.version == null) {
-            this.version = ServerProtocol.getAPIVersion();
+            this.version = FacebookSdk.getGraphApiVersion();
         }
     }
 
@@ -542,6 +542,10 @@ public static GraphRequest newUploadPhotoRequest(
         }
         parameters.putParcelable(PICTURE_PARAM, photoUri);
 
+        if (caption != null && !caption.isEmpty()) {
+            parameters.putString(CAPTION_PARAM, caption);
+        }
+
         return new GraphRequest(accessToken, graphPath, parameters, HttpMethod.POST, callback);
     }
 
@@ -1222,7 +1226,7 @@ public static GraphRequestAsyncTask executeBatchAsync(GraphRequestBatch requests
         Validate.notEmptyAndContainsNoNulls(requests, "requests");
 
         GraphRequestAsyncTask asyncTask = new GraphRequestAsyncTask(requests);
-        asyncTask.executeOnExecutor(FacebookSdk.getExecutor(), null);
+        asyncTask.executeOnExecutor(FacebookSdk.getExecutor());
         return asyncTask;
     }
 
@@ -1331,7 +1335,7 @@ public static GraphRequestAsyncTask executeConnectionAsync(
 
         GraphRequestAsyncTask asyncTask = new GraphRequestAsyncTask(connection, requests);
         requests.setCallbackHandler(callbackHandler);
-        asyncTask.executeOnExecutor(FacebookSdk.getExecutor(), null);
+        asyncTask.executeOnExecutor(FacebookSdk.getExecutor());
         return asyncTask;
     }
 
@@ -1442,7 +1446,7 @@ private void addCommonParameters() {
     }
 
     private String appendParametersToBaseUrl(String baseUrl) {
-        Uri.Builder uriBuilder = new Uri.Builder().encodedPath(baseUrl);
+        Uri.Builder uriBuilder = Uri.parse(baseUrl).buildUpon();
 
         Set<String> keys = this.parameters.keySet();
         for (String key : keys) {
@@ -1471,14 +1475,18 @@ private String appendParametersToBaseUrl(String baseUrl) {
         return uriBuilder.toString();
     }
 
-    final String getUrlForBatchedRequest() {
+    final String getRelativeUrlForBatchedRequest() {
         if (overriddenURL != null) {
             throw new FacebookException("Can't override URL for a batch request");
         }
 
-        String baseUrl = getGraphPathWithVersion();
+        String baseUrl =
+                String.format("%s/%s", ServerProtocol.getGraphUrlBase(), getGraphPathWithVersion());
         addCommonParameters();
-        return appendParametersToBaseUrl(baseUrl);
+        String fullUrl = appendParametersToBaseUrl(baseUrl);
+        Uri uri = Uri.parse(fullUrl);
+        String relativeUrl = String.format("%s?%s", uri.getPath(), uri.getQuery());
+        return relativeUrl;
     }
 
     final String getUrlForSingleRequest() {
@@ -1542,7 +1550,7 @@ private void serializeToBatch(
             batchEntry.put(BATCH_ENTRY_DEPENDS_ON_PARAM, this.batchEntryDependsOn);
         }
 
-        String relativeURL = getUrlForBatchedRequest();
+        String relativeURL = getRelativeUrlForBatchedRequest();
         batchEntry.put(BATCH_RELATIVE_URL_PARAM, relativeURL);
         batchEntry.put(BATCH_METHOD_PARAM, httpMethod);
         if (this.accessToken != null) {
diff --git a/facebook/src/main/java/com/facebook/GraphResponse.java b/facebook/src/main/java/com/facebook/GraphResponse.java
index 9793e03b5..f7de20e11 100644
--- a/facebook/src/main/java/com/facebook/GraphResponse.java
+++ b/facebook/src/main/java/com/facebook/GraphResponse.java
@@ -264,21 +264,11 @@ public String toString() {
                     "Response <Error>: %s",
                     facebookException);
             return constructErrorResponses(requests, connection, facebookException);
-        } catch (JSONException exception) {
-            Logger.log(
-                    LoggingBehavior.REQUESTS,
-                    RESPONSE_LOG_TAG,
-                    "Response <Error>: %s",
-                    exception);
-            return constructErrorResponses(requests, connection, new FacebookException(exception));
-        } catch (IOException exception) {
-            Logger.log(
-                    LoggingBehavior.REQUESTS,
-                    RESPONSE_LOG_TAG,
-                    "Response <Error>: %s",
-                    exception);
-            return constructErrorResponses(requests, connection, new FacebookException(exception));
-        } catch (SecurityException exception) {
+        } catch (Exception exception) {
+            // Note due to bugs various android devices some devices can throw a
+            // SecurityException or NoSuchAlgorithmException. Make sure to handle these
+            // exceptions here.
+
             Logger.log(
                     LoggingBehavior.REQUESTS,
                     RESPONSE_LOG_TAG,
@@ -369,8 +359,7 @@ public String toString() {
         }
 
         if (!(object instanceof JSONArray) || ((JSONArray) object).length() != numRequests) {
-            FacebookException exception = new FacebookException("Unexpected number of results");
-            throw exception;
+            throw new FacebookException("Unexpected number of results");
         }
 
         JSONArray jsonArray = (JSONArray) object;
diff --git a/facebook/src/main/java/com/facebook/LoginStatusCallback.java b/facebook/src/main/java/com/facebook/LoginStatusCallback.java
new file mode 100644
index 000000000..beab053ee
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/LoginStatusCallback.java
@@ -0,0 +1,44 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook;
+
+/**
+ * A callback class for getting the Login Status of a user.
+ */
+public interface LoginStatusCallback {
+
+    /**
+     * Called when an access token is able to be retrieved successfully.
+     * @param accessToken The access token retrieved for the user
+     */
+    void onCompleted(final AccessToken accessToken);
+
+    /**
+     * Called when an access token could not be retrieved.
+     */
+    void onFailure();
+
+    /**
+     * Called when there was an error getting the login status of a user.
+     * @param exception The error that occurred
+     */
+    void onError(final Exception exception);
+}
diff --git a/facebook/src/main/java/com/facebook/Profile.java b/facebook/src/main/java/com/facebook/Profile.java
index 919ba1686..22488c669 100644
--- a/facebook/src/main/java/com/facebook/Profile.java
+++ b/facebook/src/main/java/com/facebook/Profile.java
@@ -21,7 +21,6 @@
 package com.facebook;
 
 import android.net.Uri;
-import android.os.Bundle;
 import android.os.Parcel;
 import android.os.Parcelable;
 import android.support.annotation.Nullable;
diff --git a/facebook/src/main/java/com/facebook/appevents/AccessTokenAppIdPair.java b/facebook/src/main/java/com/facebook/appevents/AccessTokenAppIdPair.java
new file mode 100644
index 000000000..5888b96ed
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/AccessTokenAppIdPair.java
@@ -0,0 +1,87 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import com.facebook.AccessToken;
+import com.facebook.FacebookSdk;
+import com.facebook.internal.Utility;
+
+import java.io.Serializable;
+
+class AccessTokenAppIdPair implements Serializable {
+    private static final long serialVersionUID = 1L;
+    private final String accessTokenString;
+    private final String applicationId;
+
+    public AccessTokenAppIdPair(AccessToken accessToken) {
+        this(accessToken.getToken(), FacebookSdk.getApplicationId());
+    }
+
+    public AccessTokenAppIdPair(String accessTokenString, String applicationId) {
+        this.accessTokenString = Utility.isNullOrEmpty(accessTokenString)
+                ? null
+                : accessTokenString;
+        this.applicationId = applicationId;
+    }
+
+    public String getAccessTokenString() {
+        return accessTokenString;
+    }
+
+    public String getApplicationId() {
+        return applicationId;
+    }
+
+    @Override
+    public int hashCode() {
+        return (accessTokenString == null ? 0 : accessTokenString.hashCode()) ^
+                (applicationId == null ? 0 : applicationId.hashCode());
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (!(o instanceof AccessTokenAppIdPair)) {
+            return false;
+        }
+        AccessTokenAppIdPair p = (AccessTokenAppIdPair) o;
+        return Utility.areObjectsEqual(p.accessTokenString, accessTokenString) &&
+                Utility.areObjectsEqual(p.applicationId, applicationId);
+    }
+
+    static class SerializationProxyV1 implements Serializable {
+        private static final long serialVersionUID = -2488473066578201069L;
+        private final String accessTokenString;
+        private final String appId;
+
+        private SerializationProxyV1(String accessTokenString, String appId) {
+            this.accessTokenString = accessTokenString;
+            this.appId = appId;
+        }
+
+        private Object readResolve() {
+            return new AccessTokenAppIdPair(accessTokenString, appId);
+        }
+    }
+
+    private Object writeReplace() {
+        return new SerializationProxyV1(accessTokenString, applicationId);
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/AnalyticsUserIDStore.java b/facebook/src/main/java/com/facebook/appevents/AnalyticsUserIDStore.java
new file mode 100644
index 000000000..960ab1c76
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/AnalyticsUserIDStore.java
@@ -0,0 +1,113 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import android.content.SharedPreferences;
+import android.preference.PreferenceManager;
+import android.util.Log;
+
+import com.facebook.FacebookSdk;
+import com.facebook.appevents.internal.AppEventUtility;
+
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+
+class AnalyticsUserIDStore {
+    private static final String TAG = AnalyticsUserIDStore.class.getSimpleName();
+    private static final String ANALYTICS_USER_ID_KEY =
+            "com.facebook.appevents.AnalyticsUserIDStore.userID";
+
+    private static ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
+    private static String userID;
+    private static volatile boolean initialized = false;
+
+    public static void initStore() {
+        if (initialized) {
+            return;
+        }
+
+        AppEventsLogger.getAnalyticsExecutor().execute(new Runnable() {
+            @Override
+            public void run() {
+                initAndWait();
+            }
+        });
+    }
+
+    public static void setUserID(final String id) {
+        AppEventUtility.assertIsNotMainThread();
+        if (!initialized) {
+            Log.w(TAG, "initStore should have been called before calling setUserID");
+            initAndWait();
+        }
+
+        AppEventsLogger.getAnalyticsExecutor().execute(new Runnable() {
+            @Override
+            public void run() {
+                lock.writeLock().lock();
+                try {
+                    userID = id;
+                    SharedPreferences sharedPreferences = PreferenceManager
+                            .getDefaultSharedPreferences(
+                                    FacebookSdk.getApplicationContext());
+                    SharedPreferences.Editor editor = sharedPreferences.edit();
+                    editor.putString(ANALYTICS_USER_ID_KEY, userID);
+                    editor.apply();
+                } finally {
+                    lock.writeLock().unlock();
+                }
+            }
+        });
+    }
+
+    public static String getUserID() {
+        if (!initialized) {
+            Log.w(TAG, "initStore should have been called before calling setUserID");
+            initAndWait();
+        }
+
+        lock.readLock().lock();
+        try {
+            return userID;
+        } finally {
+            lock.readLock().unlock();
+        }
+    }
+
+    private static void initAndWait() {
+        if (initialized) {
+            return;
+        }
+
+        lock.writeLock().lock();
+        try {
+            if (initialized) {
+                return;
+            }
+
+            SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(
+                    FacebookSdk.getApplicationContext());
+            userID = sharedPreferences.getString(ANALYTICS_USER_ID_KEY, null);
+            initialized = true;
+        } finally {
+            lock.writeLock().unlock();
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEvent.java b/facebook/src/main/java/com/facebook/appevents/AppEvent.java
new file mode 100644
index 000000000..1b1d70486
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/AppEvent.java
@@ -0,0 +1,292 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+
+import com.facebook.FacebookException;
+import com.facebook.LoggingBehavior;
+import com.facebook.appevents.internal.Constants;
+import com.facebook.internal.Logger;
+import com.facebook.internal.Utility;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.Serializable;
+import java.io.UnsupportedEncodingException;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.util.HashSet;
+import java.util.Locale;
+import java.util.UUID;
+
+class AppEvent implements Serializable {
+    private static final long serialVersionUID = 1L;
+
+    private static final HashSet<String> validatedIdentifiers = new HashSet<String>();
+
+    private final JSONObject jsonObject;
+    private final boolean isImplicit;
+    private final String name;
+    private final String checksum;
+
+    public AppEvent(
+            String contextName,
+            String eventName,
+            Double valueToSum,
+            Bundle parameters,
+            boolean isImplicitlyLogged,
+            @Nullable final UUID currentSessionId
+    ) throws JSONException, FacebookException {
+        jsonObject = getJSONObjectForAppEvent(
+                contextName,
+                eventName,
+                valueToSum,
+                parameters,
+                isImplicitlyLogged,
+                currentSessionId);
+        isImplicit = isImplicitlyLogged;
+        name = eventName;
+        checksum = calculateChecksum();
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    private AppEvent(
+            String jsonString,
+            boolean isImplicit,
+            String checksum) throws JSONException {
+        jsonObject = new JSONObject(jsonString);
+        this.isImplicit = isImplicit;
+        this.name = jsonObject.optString(Constants.EVENT_NAME_EVENT_KEY);
+        this.checksum = checksum;
+    }
+
+    public boolean getIsImplicit() {
+        return isImplicit;
+    }
+
+    public JSONObject getJSONObject() {
+        return jsonObject;
+    }
+
+    public boolean isChecksumValid() {
+        if (this.checksum == null) {
+            // for old events we don't have a checksum
+            return true;
+        }
+
+        return calculateChecksum().equals(checksum);
+    }
+
+    // throw exception if not valid.
+    private static void validateIdentifier(String identifier) throws FacebookException {
+
+        // Identifier should be 40 chars or less, and only have 0-9A-Za-z, underscore, hyphen,
+        // and space (but no hyphen or space in the first position).
+        final String regex = "^[0-9a-zA-Z_]+[0-9a-zA-Z _-]*$";
+
+        final int MAX_IDENTIFIER_LENGTH = 40;
+        if (identifier == null
+                || identifier.length() == 0
+                || identifier.length() > MAX_IDENTIFIER_LENGTH) {
+            if (identifier == null) {
+                identifier = "<None Provided>";
+            }
+            throw new FacebookException(
+                    String.format(
+                            Locale.ROOT,
+                            "Identifier '%s' must be less than %d characters",
+                            identifier,
+                            MAX_IDENTIFIER_LENGTH)
+            );
+        }
+
+        boolean alreadyValidated;
+        synchronized (validatedIdentifiers) {
+            alreadyValidated = validatedIdentifiers.contains(identifier);
+        }
+
+        if (!alreadyValidated) {
+            if (identifier.matches(regex)) {
+                synchronized (validatedIdentifiers) {
+                    validatedIdentifiers.add(identifier);
+                }
+            } else {
+                throw new FacebookException(
+                        String.format(
+                                "Skipping event named '%s' due to illegal name - must be " +
+                                        "under 40 chars and alphanumeric, _, - or space, and " +
+                                        "not start with a space or hyphen.",
+                                identifier
+                        )
+                );
+            }
+        }
+    }
+
+    private static JSONObject getJSONObjectForAppEvent(
+            String contextName,
+            String eventName,
+            Double valueToSum,
+            Bundle parameters,
+            boolean isImplicitlyLogged,
+            @Nullable final UUID currentSessionId
+    ) throws FacebookException, JSONException{
+        validateIdentifier(eventName);
+
+        JSONObject eventObject = new JSONObject();
+
+        eventObject.put(Constants.EVENT_NAME_EVENT_KEY, eventName);
+        eventObject.put(Constants.EVENT_NAME_MD5_EVENT_KEY, md5Checksum(eventName));
+        eventObject.put(Constants.LOG_TIME_APP_EVENT_KEY, System.currentTimeMillis() / 1000);
+        eventObject.put("_ui", contextName);
+        if (currentSessionId != null) {
+            eventObject.put("_session_id", currentSessionId);
+        }
+
+        if (valueToSum != null) {
+            eventObject.put("_valueToSum", valueToSum.doubleValue());
+        }
+
+        if (isImplicitlyLogged) {
+            eventObject.put("_implicitlyLogged", "1");
+        }
+
+        String externalAnalyticsUserId = AppEventsLogger.getUserID();
+        if (externalAnalyticsUserId != null) {
+            eventObject.put("_app_user_id", externalAnalyticsUserId);
+        }
+
+        if (parameters != null) {
+            for (String key : parameters.keySet()) {
+
+                validateIdentifier(key);
+
+                Object value = parameters.get(key);
+                if (!(value instanceof String) && !(value instanceof Number)) {
+                    throw new FacebookException(
+                            String.format(
+                                    "Parameter value '%s' for key '%s' should be a string" +
+                                            " or a numeric type.",
+                                    value,
+                                    key)
+                    );
+                }
+
+                eventObject.put(key, value.toString());
+            }
+        }
+
+        if (!isImplicitlyLogged) {
+            Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
+                    "Created app event '%s'", eventObject.toString());
+        }
+
+        return eventObject;
+    }
+
+    // OLD VERSION DO NOT USE
+    static class SerializationProxyV1 implements Serializable {
+        private static final long serialVersionUID = -2488473066578201069L;
+        private final String jsonString;
+        private final boolean isImplicit;
+
+        private SerializationProxyV1(String jsonString, boolean isImplicit) {
+            this.jsonString = jsonString;
+            this.isImplicit = isImplicit;
+        }
+
+        private Object readResolve() throws JSONException {
+            return new AppEvent(jsonString, isImplicit, null);
+        }
+    }
+
+    static class SerializationProxyV2 implements Serializable {
+        private static final long serialVersionUID = 2016_08_03_001L;
+        private final String jsonString;
+        private final boolean isImplicit;
+        private final String checksum;
+
+        private SerializationProxyV2(String jsonString, boolean isImplicit, String checksum) {
+            this.jsonString = jsonString;
+            this.isImplicit = isImplicit;
+            this.checksum = checksum;
+        }
+
+        private Object readResolve() throws JSONException {
+            return new AppEvent(jsonString, isImplicit, checksum);
+        }
+    }
+
+    private Object writeReplace() {
+        return new SerializationProxyV2(jsonObject.toString(), isImplicit, checksum);
+    }
+
+    @Override
+    public String toString() {
+        return String.format(
+                "\"%s\", implicit: %b, json: %s",
+                jsonObject.optString("_eventName"),
+                isImplicit,
+                jsonObject.toString());
+    }
+
+    private String calculateChecksum() {
+        return md5Checksum(jsonObject.toString());
+    }
+
+    private static String md5Checksum(String toHash )
+    {
+        String hash;
+        try
+        {
+            MessageDigest digest = MessageDigest.getInstance("MD5");
+            byte[] bytes = toHash.getBytes("UTF-8");
+            digest.update(bytes, 0, bytes.length);
+            bytes = digest.digest();
+            hash = bytesToHex( bytes );
+        }
+        catch(NoSuchAlgorithmException e )
+        {
+            Utility.logd("Failed to generate checksum: ", e);
+            return "0";
+        }
+        catch(UnsupportedEncodingException e )
+        {
+            Utility.logd("Failed to generate checksum: ", e);
+            return "1";
+        }
+        return hash;
+    }
+
+    private static String bytesToHex(byte[] bytes) {
+        StringBuffer sb = new StringBuffer();
+        for (byte b : bytes) {
+            sb.append(String.format("%02x", b));
+        }
+        return sb.toString();
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventCollection.java b/facebook/src/main/java/com/facebook/appevents/AppEventCollection.java
new file mode 100644
index 000000000..8e7aa5b46
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/AppEventCollection.java
@@ -0,0 +1,93 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import android.content.Context;
+
+import com.facebook.FacebookSdk;
+import com.facebook.internal.AttributionIdentifiers;
+
+import java.util.HashMap;
+import java.util.Set;
+
+class AppEventCollection {
+    private final HashMap<AccessTokenAppIdPair, SessionEventsState> stateMap;
+
+    public AppEventCollection() {
+        stateMap = new HashMap<>();
+    }
+
+    public synchronized void addPersistedEvents(PersistedEvents persistedEvents) {
+        if (persistedEvents == null) {
+            return;
+        }
+
+        for (AccessTokenAppIdPair accessTokenAppIdPair : persistedEvents.keySet()) {
+            SessionEventsState sessionEventsState = getSessionEventsState(accessTokenAppIdPair);
+
+            for (AppEvent appEvent : persistedEvents.get(accessTokenAppIdPair)) {
+                sessionEventsState.addEvent(appEvent);
+            }
+        }
+    }
+
+    public synchronized void addEvent(
+            AccessTokenAppIdPair accessTokenAppIdPair,
+            AppEvent appEvent) {
+        SessionEventsState eventsState = getSessionEventsState(accessTokenAppIdPair);
+        eventsState.addEvent(appEvent);
+    }
+
+    public synchronized Set<AccessTokenAppIdPair> keySet() {
+        return stateMap.keySet();
+    }
+
+    public synchronized SessionEventsState get(AccessTokenAppIdPair accessTokenAppIdPair) {
+        return stateMap.get(accessTokenAppIdPair);
+    }
+
+    public synchronized int getEventCount() {
+        int count = 0;
+        for (SessionEventsState sessionEventsState : stateMap.values()) {
+            count += sessionEventsState.getAccumulatedEventCount();
+        }
+
+        return count;
+    }
+
+    private synchronized SessionEventsState getSessionEventsState(
+            AccessTokenAppIdPair accessTokenAppId) {
+        SessionEventsState eventsState = stateMap.get(accessTokenAppId);
+        if (eventsState == null) {
+            Context context = FacebookSdk.getApplicationContext();
+
+            // Retrieve attributionId, but we will only send it if attribution is supported for the
+            // app.
+            eventsState = new SessionEventsState(
+                    AttributionIdentifiers.getAttributionIdentifiers(context),
+                    AppEventsLogger.getAnonymousAppDeviceGUID(context));
+        }
+
+        stateMap.put(accessTokenAppId, eventsState);
+
+        return eventsState;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventQueue.java b/facebook/src/main/java/com/facebook/appevents/AppEventQueue.java
new file mode 100644
index 000000000..616270d99
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/AppEventQueue.java
@@ -0,0 +1,318 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v4.content.LocalBroadcastManager;
+import android.util.Log;
+
+import com.facebook.FacebookRequestError;
+import com.facebook.FacebookSdk;
+import com.facebook.GraphRequest;
+import com.facebook.GraphResponse;
+import com.facebook.LoggingBehavior;
+import com.facebook.internal.FetchedAppSettings;
+import com.facebook.internal.FetchedAppSettingsManager;
+import com.facebook.internal.Logger;
+import com.facebook.internal.Utility;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.ScheduledFuture;
+import java.util.concurrent.TimeUnit;
+
+class AppEventQueue {
+    private static final String TAG = AppEventQueue.class.getName();
+
+    private static final int NUM_LOG_EVENTS_TO_TRY_TO_FLUSH_AFTER = 100;
+    private static final int FLUSH_PERIOD_IN_SECONDS = 15;
+
+    private static volatile AppEventCollection appEventCollection = new AppEventCollection();
+    private static final ScheduledExecutorService singleThreadExecutor =
+            Executors.newSingleThreadScheduledExecutor();
+    private static ScheduledFuture scheduledFuture;
+
+    // Only call for the singleThreadExecutor
+    private static final Runnable flushRunnable = new Runnable() {
+        @Override
+        public void run() {
+            scheduledFuture = null;
+
+            if (AppEventsLogger.getFlushBehavior() !=
+                    AppEventsLogger.FlushBehavior.EXPLICIT_ONLY) {
+                flushAndWait(FlushReason.TIMER);
+            }
+        }
+    };
+
+    public static void persistToDisk() {
+        singleThreadExecutor.execute(new Runnable() {
+            @Override
+            public void run() {
+                AppEventStore.persistEvents(appEventCollection);
+                appEventCollection = new AppEventCollection();
+            }
+        });
+    }
+
+    public static void flush(
+            final FlushReason reason) {
+        singleThreadExecutor.execute(new Runnable() {
+            @Override
+            public void run() {
+                flushAndWait(reason);
+            }
+        });
+    }
+
+    public static void add(
+            final AccessTokenAppIdPair accessTokenAppId,
+            final AppEvent appEvent) {
+        singleThreadExecutor.execute(new Runnable() {
+            @Override
+            public void run() {
+                appEventCollection.addEvent(accessTokenAppId, appEvent);
+
+                if (AppEventsLogger.getFlushBehavior() !=
+                        AppEventsLogger.FlushBehavior.EXPLICIT_ONLY
+                        && appEventCollection.getEventCount() >
+                        NUM_LOG_EVENTS_TO_TRY_TO_FLUSH_AFTER) {
+                    flushAndWait(FlushReason.EVENT_THRESHOLD);
+                } else if (scheduledFuture == null) {
+                    scheduledFuture = singleThreadExecutor.schedule(
+                            flushRunnable,
+                            FLUSH_PERIOD_IN_SECONDS,
+                            TimeUnit.SECONDS
+                    );
+                }
+            }
+        });
+    }
+
+    public static Set<AccessTokenAppIdPair> getKeySet() {
+        // This is safe to call outside of the singleThreadExecutor since
+        // the appEventCollection is volatile and the modifying methods within the
+        // class are synchronized.
+        return appEventCollection.keySet();
+    }
+
+    static void flushAndWait(FlushReason reason) {
+        // Read and send any persisted events
+        PersistedEvents result = AppEventStore.readAndClearStore();
+        // Add any of the persisted app events to our list of events to send
+        appEventCollection.addPersistedEvents(result);
+
+        FlushStatistics flushResults;
+
+        try {
+            flushResults = sendEventsToServer(
+                    reason,
+                    appEventCollection);
+        } catch (Exception e) {
+            Log.w(TAG, "Caught unexpected exception while flushing app events: ", e);
+            return;
+        }
+
+        if (flushResults != null) {
+            final Intent intent = new Intent(AppEventsLogger.ACTION_APP_EVENTS_FLUSHED);
+            intent.putExtra(
+                    AppEventsLogger.APP_EVENTS_EXTRA_NUM_EVENTS_FLUSHED,
+                    flushResults.numEvents);
+            intent.putExtra(
+                    AppEventsLogger.APP_EVENTS_EXTRA_FLUSH_RESULT,
+                    flushResults.result);
+            Context context = FacebookSdk.getApplicationContext();
+            LocalBroadcastManager.getInstance(context).sendBroadcast(intent);
+        }
+    }
+
+    private static FlushStatistics sendEventsToServer(
+            FlushReason reason,
+            AppEventCollection appEventCollection) {
+        FlushStatistics flushResults = new FlushStatistics();
+
+        Context context = FacebookSdk.getApplicationContext();
+        boolean limitEventUsage = FacebookSdk.getLimitEventAndDataUsage(context);
+
+        List<GraphRequest> requestsToExecute = new ArrayList<>();
+        for (AccessTokenAppIdPair accessTokenAppId : appEventCollection.keySet()) {
+            GraphRequest request = buildRequestForSession(
+                    accessTokenAppId,
+                    appEventCollection.get(accessTokenAppId),
+                    limitEventUsage,
+                    flushResults);
+            if (request != null) {
+                requestsToExecute.add(request);
+            }
+        }
+
+        if (requestsToExecute.size() > 0) {
+            Logger.log(LoggingBehavior.APP_EVENTS, TAG, "Flushing %d events due to %s.",
+                    flushResults.numEvents,
+                    reason.toString());
+
+            for (GraphRequest request : requestsToExecute) {
+                // Execute the request synchronously. Callbacks will take care of handling errors
+                // and updating our final overall result.
+                request.executeAndWait();
+            }
+            return flushResults;
+        }
+
+        return null;
+    }
+
+    private static GraphRequest buildRequestForSession(
+            final AccessTokenAppIdPair accessTokenAppId,
+            final SessionEventsState appEvents,
+            final boolean limitEventUsage,
+            final FlushStatistics flushState) {
+        String applicationId = accessTokenAppId.getApplicationId();
+
+        FetchedAppSettings fetchedAppSettings =
+                FetchedAppSettingsManager.queryAppSettings(applicationId, false);
+
+        final GraphRequest postRequest = GraphRequest.newPostRequest(
+                null,
+                String.format("%s/activities", applicationId),
+                null,
+                null);
+
+        Bundle requestParameters = postRequest.getParameters();
+        if (requestParameters == null) {
+            requestParameters = new Bundle();
+        }
+        requestParameters.putString("access_token", accessTokenAppId.getAccessTokenString());
+        String pushNotificationsRegistrationId =
+                AppEventsLogger.getPushNotificationsRegistrationId();
+        if (pushNotificationsRegistrationId != null) {
+            requestParameters.putString("device_token", pushNotificationsRegistrationId);
+        }
+
+        postRequest.setParameters(requestParameters);
+
+        boolean supportsImplicitLogging = false;
+
+        if (fetchedAppSettings != null) {
+            supportsImplicitLogging = fetchedAppSettings.supportsImplicitLogging();
+        }
+
+        int numEvents = appEvents.populateRequest(
+                postRequest,
+                FacebookSdk.getApplicationContext(),
+                supportsImplicitLogging,
+                limitEventUsage);
+
+        if (numEvents == 0) {
+            return null;
+        }
+
+        flushState.numEvents += numEvents;
+
+        postRequest.setCallback(new GraphRequest.Callback() {
+            @Override
+            public void onCompleted(GraphResponse response) {
+                handleResponse(
+                        accessTokenAppId,
+                        postRequest,
+                        response,
+                        appEvents,
+                        flushState);
+            }
+        });
+
+        return postRequest;
+    }
+
+    private static void handleResponse(
+            final AccessTokenAppIdPair accessTokenAppId,
+            GraphRequest request,
+            GraphResponse response,
+            final SessionEventsState appEvents,
+            FlushStatistics flushState) {
+        FacebookRequestError error = response.getError();
+        String resultDescription = "Success";
+
+        FlushResult flushResult = FlushResult.SUCCESS;
+
+        if (error != null) {
+            final int NO_CONNECTIVITY_ERROR_CODE = -1;
+            if (error.getErrorCode() == NO_CONNECTIVITY_ERROR_CODE) {
+                resultDescription = "Failed: No Connectivity";
+                flushResult = FlushResult.NO_CONNECTIVITY;
+            } else {
+                resultDescription = String.format("Failed:\n  Response: %s\n  Error %s",
+                        response.toString(),
+                        error.toString());
+                flushResult = FlushResult.SERVER_ERROR;
+            }
+        }
+
+        if (FacebookSdk.isLoggingBehaviorEnabled(LoggingBehavior.APP_EVENTS)) {
+            String eventsJsonString = (String) request.getTag();
+            String prettyPrintedEvents;
+
+            try {
+                JSONArray jsonArray = new JSONArray(eventsJsonString);
+                prettyPrintedEvents = jsonArray.toString(2);
+            } catch (JSONException exc) {
+                prettyPrintedEvents = "<Can't encode events for debug logging>";
+            }
+
+            Logger.log(LoggingBehavior.APP_EVENTS, TAG,
+                    "Flush completed\nParams: %s\n  Result: %s\n  Events JSON: %s",
+                    request.getGraphObject().toString(),
+                    resultDescription,
+                    prettyPrintedEvents);
+        }
+
+        appEvents.clearInFlightAndStats(error != null);
+
+        if (flushResult == FlushResult.NO_CONNECTIVITY) {
+            // We may call this for multiple requests in a batch, which is slightly inefficient
+            // since in principle we could call it once for all failed requests, but the impact is
+            // likely to be minimal. We don't call this for other server errors, because if an event
+            // failed because it was malformed, etc., continually retrying it will cause subsequent
+            // events to not be logged either.
+            FacebookSdk.getExecutor().execute(new Runnable() {
+                @Override
+                public void run() {
+                    AppEventStore.persistEvents(accessTokenAppId, appEvents);
+                }
+            });
+        }
+
+        if (flushResult != FlushResult.SUCCESS) {
+            // We assume that connectivity issues are more significant to report than server issues.
+            if (flushState.result != FlushResult.NO_CONNECTIVITY) {
+                flushState.result = flushResult;
+            }
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventStore.java b/facebook/src/main/java/com/facebook/appevents/AppEventStore.java
new file mode 100644
index 000000000..fb5f45ffe
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/AppEventStore.java
@@ -0,0 +1,164 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import android.content.Context;
+import android.util.Log;
+
+import com.facebook.FacebookSdk;
+import com.facebook.appevents.internal.AppEventUtility;
+import com.facebook.internal.Utility;
+
+import java.io.BufferedInputStream;
+import java.io.BufferedOutputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.io.ObjectStreamClass;
+
+class AppEventStore {
+    private static final String TAG = AppEventStore.class.getName();
+    private static final String PERSISTED_EVENTS_FILENAME = "AppEventsLogger.persistedevents";
+
+    public static synchronized void persistEvents(
+            final AccessTokenAppIdPair accessTokenAppIdPair,
+            final SessionEventsState appEvents) {
+        AppEventUtility.assertIsNotMainThread();
+        PersistedEvents persistedEvents = readAndClearStore();
+
+        if (persistedEvents.containsKey(accessTokenAppIdPair)) {
+            persistedEvents
+                    .get(accessTokenAppIdPair)
+                    .addAll(appEvents.getEventsToPersist());
+        } else {
+            persistedEvents.addEvents(accessTokenAppIdPair, appEvents.getEventsToPersist());
+        }
+
+        saveEventsToDisk(persistedEvents);
+    }
+
+    public static synchronized void persistEvents(
+            final AppEventCollection eventsToPersist) {
+        AppEventUtility.assertIsNotMainThread();
+        PersistedEvents persistedEvents = readAndClearStore();
+        for (AccessTokenAppIdPair accessTokenAppIdPair : eventsToPersist.keySet()) {
+            SessionEventsState sessionEventsState = eventsToPersist.get(
+                    accessTokenAppIdPair);
+            persistedEvents.addEvents(
+                    accessTokenAppIdPair,
+                    sessionEventsState.getEventsToPersist());
+        }
+
+        saveEventsToDisk(persistedEvents);
+    }
+
+    // Only call from singleThreadExecutor
+    public static synchronized PersistedEvents readAndClearStore() {
+        AppEventUtility.assertIsNotMainThread();
+
+        MovedClassObjectInputStream ois = null;
+        PersistedEvents persistedEvents = null;
+        Context context = FacebookSdk.getApplicationContext();
+        try {
+            InputStream is = context.openFileInput(PERSISTED_EVENTS_FILENAME);
+            ois = new MovedClassObjectInputStream(new BufferedInputStream(is));
+
+            persistedEvents = (PersistedEvents) ois.readObject();
+        } catch (FileNotFoundException e) {
+            // Expected if we never persisted any events.
+        } catch (Exception e) {
+            Log.w(TAG, "Got unexpected exception while reading events: ", e);
+        } finally {
+            Utility.closeQuietly(ois);
+
+
+            try {
+                // Note: We delete the store before we store the events; this means we'd
+                // prefer to lose some events in the case of exception rather than
+                // potentially log them twice.
+                // Always delete this file after the above try catch to recover from read
+                // errors.
+                context.getFileStreamPath(PERSISTED_EVENTS_FILENAME).delete();
+            } catch (Exception ex) {
+                Log.w(TAG, "Got unexpected exception when removing events file: ", ex);
+            }
+        }
+
+        if (persistedEvents == null) {
+            persistedEvents = new PersistedEvents();
+        }
+
+        return persistedEvents;
+    }
+
+    // Only call from singleThreadExecutor
+    private static void saveEventsToDisk(
+            PersistedEvents eventsToPersist) {
+        ObjectOutputStream oos = null;
+        Context context = FacebookSdk.getApplicationContext();
+        try {
+            oos = new ObjectOutputStream(
+                    new BufferedOutputStream(
+                            context.openFileOutput(PERSISTED_EVENTS_FILENAME, 0)));
+            oos.writeObject(eventsToPersist);
+        } catch (Exception e) {
+            Log.w(TAG, "Got unexpected exception while persisting events: ", e);
+            try {
+                context.getFileStreamPath(PERSISTED_EVENTS_FILENAME).delete();
+            } catch (Exception innerException) {
+                // ignore
+            }
+        } finally {
+            Utility.closeQuietly(oos);
+        }
+    }
+
+    private static class MovedClassObjectInputStream extends ObjectInputStream {
+        private static final String ACCESS_TOKEN_APP_ID_PAIR_SERIALIZATION_PROXY_V1_CLASS_NAME =
+                "com.facebook.appevents.AppEventsLogger$AccessTokenAppIdPair$SerializationProxyV1";
+        private static final String APP_EVENT_SERIALIZATION_PROXY_V1_CLASS_NAME =
+                "com.facebook.appevents.AppEventsLogger$AppEvent$SerializationProxyV1";
+
+        public MovedClassObjectInputStream(InputStream in) throws IOException {
+            super(in);
+        }
+
+        @Override
+        protected ObjectStreamClass readClassDescriptor()
+                throws IOException, ClassNotFoundException {
+            ObjectStreamClass resultClassDescriptor = super.readClassDescriptor();
+
+            if (resultClassDescriptor.getName().equals(
+                    ACCESS_TOKEN_APP_ID_PAIR_SERIALIZATION_PROXY_V1_CLASS_NAME)) {
+                resultClassDescriptor = ObjectStreamClass.lookup(
+                        com.facebook.appevents.AccessTokenAppIdPair.SerializationProxyV1.class);
+            } else if (resultClassDescriptor.getName().equals(
+                    APP_EVENT_SERIALIZATION_PROXY_V1_CLASS_NAME)) {
+                resultClassDescriptor = ObjectStreamClass.lookup(
+                        com.facebook.appevents.AppEvent.SerializationProxyV1.class);
+            }
+
+            return resultClassDescriptor;
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventsConstants.java b/facebook/src/main/java/com/facebook/appevents/AppEventsConstants.java
index 060b05964..ecc16ce91 100644
--- a/facebook/src/main/java/com/facebook/appevents/AppEventsConstants.java
+++ b/facebook/src/main/java/com/facebook/appevents/AppEventsConstants.java
@@ -57,6 +57,9 @@
     /** Log this event when the user has completed a tutorial in the app. */
     public static final String EVENT_NAME_COMPLETED_TUTORIAL = "fb_mobile_tutorial_completion";
 
+    /** Log this event when the app obtained a push registration token from FCM. */
+    public static final String EVENT_NAME_PUSH_TOKEN_OBTAINED = "fb_mobile_obtain_push_token";
+
     // Ecommerce related
 
     /**
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java b/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java
index 5b9d2aa4a..b6687ef8b 100644
--- a/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java
+++ b/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java
@@ -21,12 +21,14 @@
 package com.facebook.appevents;
 
 import android.app.Activity;
+import android.app.Application;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.os.Bundle;
-import android.support.v4.content.LocalBroadcastManager;
+import android.support.annotation.Nullable;
+import android.telecom.Call;
 import android.util.Log;
 import bolts.AppLinks;
 
@@ -36,9 +38,12 @@
 import com.facebook.FacebookSdk;
 import com.facebook.GraphRequest;
 import com.facebook.GraphResponse;
+import com.facebook.HttpMethod;
 import com.facebook.LoggingBehavior;
-import com.facebook.internal.AppEventsLoggerUtility;
+import com.facebook.appevents.internal.ActivityLifecycleTracker;
 import com.facebook.internal.AttributionIdentifiers;
+import com.facebook.internal.BundleJSONConverter;
+import com.facebook.internal.FetchedAppSettingsManager;
 import com.facebook.internal.Logger;
 import com.facebook.internal.Utility;
 import com.facebook.internal.Validate;
@@ -47,24 +52,19 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.io.BufferedInputStream;
 import java.io.BufferedOutputStream;
 import java.io.FileNotFoundException;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
-import java.io.Serializable;
-import java.io.UnsupportedEncodingException;
 import java.math.BigDecimal;
-import java.util.ArrayList;
 import java.util.Currency;
 import java.util.HashMap;
 import java.util.HashSet;
-import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import java.util.UUID;
-import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.Executor;
 import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 
@@ -166,8 +166,6 @@
     // Constants
     private static final String TAG = AppEventsLogger.class.getCanonicalName();
 
-    private static final int NUM_LOG_EVENTS_TO_TRY_TO_FLUSH_AFTER = 100;
-    private static final int FLUSH_PERIOD_IN_SECONDS = 15;
     private static final int APP_SUPPORTS_ATTRIBUTION_ID_RECHECK_PERIOD_IN_SECONDS = 60 * 60 * 24;
     private static final int FLUSH_APP_SESSION_INFO_IN_SECONDS = 30;
 
@@ -176,80 +174,71 @@
     private static final String SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT =
             "_fbSourceApplicationHasBeenSet";
 
+    private static final String PUSH_PAYLOAD_KEY = "fb_push_payload";
+    private static final String PUSH_PAYLOAD_CAMPAIGN_KEY = "campaign";
+
+    private static final String APP_EVENT_NAME_PUSH_OPENED = "fb_mobile_push_opened";
+    private static final String APP_EVENT_PUSH_PARAMETER_CAMPAIGN = "fb_push_campaign";
+    private static final String APP_EVENT_PUSH_PARAMETER_ACTION = "fb_push_action";
+
     // Instance member variables
     private final String contextName;
     private final AccessTokenAppIdPair accessTokenAppId;
 
-    private static Map<AccessTokenAppIdPair, SessionEventsState> stateMap =
-            new ConcurrentHashMap<AccessTokenAppIdPair, SessionEventsState>();
     private static ScheduledThreadPoolExecutor backgroundExecutor;
     private static FlushBehavior flushBehavior = FlushBehavior.AUTO;
-    private static boolean requestInFlight;
-    private static Context applicationContext;
     private static Object staticLock = new Object();
     private static String anonymousAppDeviceGUID;
     private static String sourceApplication;
     private static boolean isOpenedByApplink;
     private static boolean isActivateAppEventRequested;
+    private static String pushNotificationsRegistrationId;
+    private static String externalAnalyticsUserID;
 
-    private static class AccessTokenAppIdPair implements Serializable {
-        private static final long serialVersionUID = 1L;
-        private final String accessTokenString;
-        private final String applicationId;
-
-        AccessTokenAppIdPair(AccessToken accessToken) {
-            this(accessToken.getToken(), FacebookSdk.getApplicationId());
-        }
-
-        AccessTokenAppIdPair(String accessTokenString, String applicationId) {
-            this.accessTokenString = Utility.isNullOrEmpty(accessTokenString)
-                    ? null
-                    : accessTokenString;
-            this.applicationId = applicationId;
-        }
-
-        String getAccessTokenString() {
-            return accessTokenString;
-        }
+    /**
+     * Notifies the events system that the app has launched and activate and deactivate events
+     * should start being logged automatically. By default this function is called automatically
+     * from sdkInitialize() flow. In case 'com.facebook.sdk.AutoLogAppEventsEnabled' manifest
+     * setting is set to false, it should typically be called from the OnCreate method
+     * of you application.
+     *
+     * @param application The running application
+     */
+    public static void activateApp(Application application) {
+        activateApp(application, null);
+    }
 
-        String getApplicationId() {
-            return applicationId;
+    /**
+     * Notifies the events system that the app has launched and activate and deactivate events
+     * should start being logged automatically. By default this function is called automatically
+     * from sdkInitialize() flow. In case 'com.facebook.sdk.AutoLogAppEventsEnabled' manifest
+     * setting is set to false, it should typically be called from the OnCreate method
+     * of you application.
+     *
+     * Call this if you wish to use a different Application ID then the one specified in the
+     * Facebook SDK.
+     *
+     * @param application The running application
+     * @param applicationId The application id used to log activate/deactivate events.
+     */
+    public static void activateApp(Application application, String applicationId) {
+        if (!FacebookSdk.isInitialized()) {
+            throw new FacebookException("The Facebook sdk must be initialized before calling " +
+                    "activateApp");
         }
 
-        @Override
-        public int hashCode() {
-            return (accessTokenString == null ? 0 : accessTokenString.hashCode()) ^
-                    (applicationId == null ? 0 : applicationId.hashCode());
-        }
+        AnalyticsUserIDStore.initStore();
 
-        @Override
-        public boolean equals(Object o) {
-            if (!(o instanceof AccessTokenAppIdPair)) {
-                return false;
-            }
-            AccessTokenAppIdPair p = (AccessTokenAppIdPair) o;
-            return Utility.areObjectsEqual(p.accessTokenString, accessTokenString) &&
-                    Utility.areObjectsEqual(p.applicationId, applicationId);
+        if (applicationId == null) {
+            applicationId = FacebookSdk.getApplicationId();
         }
 
-        private static class SerializationProxyV1 implements Serializable {
-            private static final long serialVersionUID = -2488473066578201069L;
-            private final String accessTokenString;
-            private final String appId;
-
-            private SerializationProxyV1(String accessTokenString, String appId) {
-                this.accessTokenString = accessTokenString;
-                this.appId = appId;
-            }
-
-            private Object readResolve() {
-                return new AccessTokenAppIdPair(accessTokenString, appId);
-            }
-        }
+        // activateApp supersedes publishInstall in the public API, so we need to explicitly invoke
+        // it, since the server can't reliably infer install state for all conditions of an app
+        // activate.
+        FacebookSdk.publishInstallAsync(application, applicationId);
 
-        private Object writeReplace() {
-            return new SerializationProxyV1(accessTokenString, applicationId);
-        }
+        ActivityLifecycleTracker.startTracking(application, applicationId);
     }
 
     /**
@@ -262,8 +251,17 @@ private Object writeReplace() {
      *
      * @param context Used to access the applicationId and the attributionId for non-authenticated
      *                users.
+     * @deprecated Use {@link AppEventsLogger#activateApp(Application)}
      */
+    @Deprecated
+    @SuppressWarnings("deprecation")
     public static void activateApp(Context context) {
+        if (ActivityLifecycleTracker.isTracking()) {
+            Log.w(TAG, "activateApp events are being logged automatically. " +
+                    "There's no need to call activateApp explicitly, this is safe to remove.");
+            return;
+        }
+
         FacebookSdk.sdkInitialize(context);
         activateApp(context, Utility.getMetadataApplicationId(context));
     }
@@ -275,12 +273,22 @@ public static void activateApp(Context context) {
      *
      * @param context       Used to access the attributionId for non-authenticated users.
      * @param applicationId The specific applicationId to report the activation for.
+     * @deprecated Use {@link AppEventsLogger#activateApp(Application)}
      */
+    @Deprecated
     public static void activateApp(Context context, String applicationId) {
+        if (ActivityLifecycleTracker.isTracking()) {
+            Log.w(TAG, "activateApp events are being logged automatically. " +
+                    "There's no need to call activateApp explicitly, this is safe to remove.");
+            return;
+        }
+
         if (context == null || applicationId == null) {
             throw new IllegalArgumentException("Both context and applicationId must be non-null");
         }
 
+        AnalyticsUserIDStore.initStore();
+
         if ((context instanceof Activity)) {
             setSourceApplication((Activity) context);
         } else {
@@ -317,8 +325,18 @@ public void run() {
      *
      * @param context Used to access the applicationId and the attributionId for non-authenticated
      *                users.
+     * @deprecated When using {@link AppEventsLogger#activateApp(Application)} deactivate app will
+     * be logged automatically.
      */
+    @Deprecated
+    @SuppressWarnings("deprecation")
     public static void deactivateApp(Context context) {
+        if (ActivityLifecycleTracker.isTracking()) {
+            Log.w(TAG, "deactivateApp events are being logged automatically. " +
+                    "There's no need to call deactivateApp, this is safe to remove.");
+            return;
+        }
+
         deactivateApp(context, Utility.getMetadataApplicationId(context));
     }
 
@@ -329,8 +347,17 @@ public static void deactivateApp(Context context) {
      *
      * @param context       Used to access the attributionId for non-authenticated users.
      * @param applicationId The specific applicationId to track session information for.
+     * @deprecated When using {@link AppEventsLogger#activateApp(Application)} deactivate app will
+     * be logged automatically.
      */
+    @Deprecated
     public static void deactivateApp(Context context, String applicationId) {
+        if (ActivityLifecycleTracker.isTracking()) {
+            Log.w(TAG, "deactivateApp events are being logged automatically. " +
+                    "There's no need to call deactivateApp, this is safe to remove.");
+            return;
+        }
+
         if (context == null || applicationId == null) {
             throw new IllegalArgumentException("Both context and applicationId must be non-null");
         }
@@ -349,7 +376,7 @@ public void run() {
 
     private void logAppSessionResumeEvent(long eventTime, String sourceApplicationInfo) {
         PersistedAppSessionInfo.onResume(
-                applicationContext,
+                FacebookSdk.getApplicationContext(),
                 accessTokenAppId,
                 this,
                 eventTime,
@@ -357,7 +384,11 @@ private void logAppSessionResumeEvent(long eventTime, String sourceApplicationIn
     }
 
     private void logAppSessionSuspendEvent(long eventTime) {
-        PersistedAppSessionInfo.onSuspend(applicationContext, accessTokenAppId, this, eventTime);
+        PersistedAppSessionInfo.onSuspend(
+                FacebookSdk.getApplicationContext(),
+                accessTokenAppId,
+                this,
+                eventTime);
     }
 
     /**
@@ -505,7 +536,12 @@ public void logEvent(String eventName, double valueToSum) {
      *                   should be Strings or numeric values.
      */
     public void logEvent(String eventName, Bundle parameters) {
-        logEvent(eventName, null, parameters, false);
+        logEvent(
+            eventName,
+            null,
+            parameters,
+            false,
+            ActivityLifecycleTracker.getCurrentSessionGuid());
     }
 
     /**
@@ -530,7 +566,12 @@ public void logEvent(String eventName, Bundle parameters) {
      *                   should be Strings or numeric values.
      */
     public void logEvent(String eventName, double valueToSum, Bundle parameters) {
-        logEvent(eventName, valueToSum, parameters, false);
+        logEvent(
+            eventName,
+            valueToSum,
+            parameters,
+            false,
+            ActivityLifecycleTracker.getCurrentSessionGuid());
     }
 
     /**
@@ -578,12 +619,51 @@ public void logPurchase(BigDecimal purchaseAmount, Currency currency, Bundle par
         eagerFlush();
     }
 
+    /**
+     * Logs an app event that tracks that the application was open via Push Notification.
+     * @param payload Notification payload received.
+     */
+    public void logPushNotificationOpen(Bundle payload) {
+        logPushNotificationOpen(payload, null);
+    }
+
+    /**
+     * Logs an app event that tracks that the application was open via Push Notification.
+     * @param payload Notification payload received.
+     */
+    public void logPushNotificationOpen(Bundle payload, String action) {
+        String campaignId = null;
+        try {
+            String payloadString = payload.getString(PUSH_PAYLOAD_KEY);
+            if (Utility.isNullOrEmpty(payloadString)) {
+                return; // Ignore the payload if no fb push payload is present.
+            }
+
+            JSONObject facebookPayload = new JSONObject(payloadString);
+            campaignId = facebookPayload.getString(PUSH_PAYLOAD_CAMPAIGN_KEY);
+        } catch (JSONException je) {
+            // ignore
+        }
+        if (campaignId == null) {
+            Logger.log(LoggingBehavior.DEVELOPER_ERRORS, TAG,
+                "Malformed payload specified for logging a push notification open.");
+            return;
+        }
+
+        Bundle parameters = new Bundle();
+        parameters.putString(APP_EVENT_PUSH_PARAMETER_CAMPAIGN, campaignId);
+        if (action != null) {
+            parameters.putString(APP_EVENT_PUSH_PARAMETER_ACTION, action);
+        }
+        logEvent(APP_EVENT_NAME_PUSH_OPENED, parameters);
+    }
+
     /**
      * Explicitly flush any stored events to the server.  Implicit flushes may happen depending on
      * the value of getFlushBehavior.  This method allows for explicit, app invoked flushing.
      */
     public void flush() {
-        flush(FlushReason.EXPLICIT);
+        AppEventQueue.flush(FlushReason.EXPLICIT);
     }
 
     /**
@@ -595,7 +675,7 @@ public void flush() {
      */
     public static void onContextStop() {
         // TODO: (v4) add onContextStop() to samples that use the logger.
-        PersistedEvents.persistEvents(applicationContext, stateMap);
+        AppEventQueue.persistToDisk();
     }
 
     /**
@@ -608,12 +688,133 @@ public boolean isValidForAccessToken(AccessToken accessToken) {
         return accessTokenAppId.equals(other);
     }
 
+    /**
+     * Sets and sends registration id to register the current app for push notifications.
+     * @param registrationId RegistrationId received from FCM.
+     */
+    public static void setPushNotificationsRegistrationId(String registrationId) {
+        synchronized (staticLock) {
+            if (!Utility.stringsEqualOrEmpty(pushNotificationsRegistrationId, registrationId))
+            {
+                pushNotificationsRegistrationId = registrationId;
+
+                AppEventsLogger logger = AppEventsLogger.newLogger(
+                        FacebookSdk.getApplicationContext());
+                // Log implicit push token event and flush logger immediately
+                logger.logEvent(AppEventsConstants.EVENT_NAME_PUSH_TOKEN_OBTAINED);
+                if (AppEventsLogger.getFlushBehavior() !=
+                        AppEventsLogger.FlushBehavior.EXPLICIT_ONLY) {
+                    logger.flush();
+                }
+            }
+        }
+    }
+
+    static String getPushNotificationsRegistrationId() {
+        synchronized (staticLock) {
+            return pushNotificationsRegistrationId;
+        }
+    }
+
+    /**
+     * Sets a user id to associate with all app events. This can be used to associate your own
+     * user id with the app events logged from this instance of an application.
+     *
+     * The user ID will be persisted between application instantces.
+     *
+     * @param userID A User ID
+     */
+    public static void setUserID(final String userID) {
+        AnalyticsUserIDStore.setUserID(userID);
+    }
+
+    /**
+     * Returns the set user id else null.
+     */
+    public static String getUserID() {
+       return AnalyticsUserIDStore.getUserID();
+    }
+
+    /**
+     * Clears the currently set user id.
+     */
+    public static void clearUserID() {
+        AnalyticsUserIDStore.setUserID(null);
+    }
+
+    public static void updateUserProperties(
+            Bundle parameters,
+            GraphRequest.Callback callback) {
+        updateUserProperties(
+                parameters,
+                FacebookSdk.getApplicationId(),
+                callback);
+    }
+
+    public static void updateUserProperties(
+            final Bundle parameters,
+            final String applicationID,
+            final GraphRequest.Callback callback) {
+        final String userID = getUserID();
+        if (userID == null || userID.isEmpty()) {
+            Logger.log(
+                    LoggingBehavior.APP_EVENTS,
+                    TAG,
+                    "AppEventsLogger userID cannot be null or empty");
+            return;
+        }
+
+        getAnalyticsExecutor().execute(new Runnable() {
+            @Override
+            public void run() {
+                Bundle userPropertiesParams = new Bundle();
+                userPropertiesParams.putString("user_unique_id", userID);
+                userPropertiesParams.putBundle("custom_data", parameters);
+                // This call must be run on the background thread
+                AttributionIdentifiers identifiers =
+                        AttributionIdentifiers.getAttributionIdentifiers(
+                            FacebookSdk.getApplicationContext());
+                if (identifiers != null && identifiers.getAndroidAdvertiserId() != null) {
+                    userPropertiesParams.putString(
+                            "advertiser_id",
+                            identifiers.getAndroidAdvertiserId());
+                }
+
+                Bundle data = new Bundle();
+                try {
+                    JSONObject userData = BundleJSONConverter.convertToJSON(userPropertiesParams);
+                    JSONArray dataArray = new JSONArray();
+                    dataArray.put(userData);
+
+                    data.putString(
+                            "data", dataArray.toString());
+                } catch (JSONException ex) {
+                    throw new FacebookException("Failed to construct request", ex);
+                }
+
+                GraphRequest request = new GraphRequest(
+                        AccessToken.getCurrentAccessToken(),
+                        String.format(Locale.US, "%s/user_properties", applicationID),
+                        data,
+                        HttpMethod.POST,
+                        callback);
+                request.setSkipClientToken(true);
+                request.executeAsync();
+            }
+        });
+    }
+
     /**
      * This method is intended only for internal use by the Facebook SDK and other use is
      * unsupported.
      */
     public void logSdkEvent(String eventName, Double valueToSum, Bundle parameters) {
-        logEvent(eventName, valueToSum, parameters, true);
+        logEvent(
+            eventName,
+            valueToSum,
+            parameters,
+            true,
+            ActivityLifecycleTracker.getCurrentSessionGuid());
     }
 
     /**
@@ -629,30 +830,22 @@ public String getApplicationId() {
     // Private implementation
     //
 
-    @SuppressWarnings("UnusedDeclaration")
-    private enum FlushReason {
-        EXPLICIT,
-        TIMER,
-        SESSION_CHANGE,
-        PERSISTED_EVENTS,
-        EVENT_THRESHOLD,
-        EAGER_FLUSHING_EVENT,
-    }
-
-    @SuppressWarnings("UnusedDeclaration")
-    private enum FlushResult {
-        SUCCESS,
-        SERVER_ERROR,
-        NO_CONNECTIVITY,
-        UNKNOWN_ERROR
-    }
-
     /**
      * Constructor is private, newLogger() methods should be used to build an instance.
      */
     private AppEventsLogger(Context context, String applicationId, AccessToken accessToken) {
-        Validate.notNull(context, "context");
-        this.contextName = Utility.getActivityName(context);
+        this(
+                Utility.getActivityName(context),
+                applicationId,
+                accessToken);
+    }
+
+    protected AppEventsLogger(
+            String activityName,
+            String applicationId,
+            AccessToken accessToken) {
+        Validate.sdkInitialized();
+        this.contextName = activityName;
 
         if (accessToken == null) {
             accessToken = AccessToken.getCurrentAccessToken();
@@ -666,18 +859,12 @@ private AppEventsLogger(Context context, String applicationId, AccessToken acces
         } else {
             // If no app ID passed, get it from the manifest:
             if (applicationId == null) {
-                applicationId = Utility.getMetadataApplicationId(context);
+                applicationId = Utility.getMetadataApplicationId(
+                        FacebookSdk.getApplicationContext());
             }
             accessTokenAppId = new AccessTokenAppIdPair(null, applicationId);
         }
 
-        synchronized (staticLock) {
-
-            if (applicationContext == null) {
-                applicationContext = context.getApplicationContext();
-            }
-        }
-
         initializeTimersIfNeeded();
     }
 
@@ -689,33 +876,16 @@ private static void initializeTimersIfNeeded() {
             backgroundExecutor = new ScheduledThreadPoolExecutor(1);
         }
 
-        final Runnable flushRunnable = new Runnable() {
-            @Override
-            public void run() {
-                if (getFlushBehavior() != FlushBehavior.EXPLICIT_ONLY) {
-                    flushAndWait(FlushReason.TIMER);
-                }
-            }
-        };
-
-        backgroundExecutor.scheduleAtFixedRate(
-                flushRunnable,
-                0,
-                FLUSH_PERIOD_IN_SECONDS,
-                TimeUnit.SECONDS
-        );
-
         final Runnable attributionRecheckRunnable = new Runnable() {
             @Override
             public void run() {
-                Set<String> applicationIds = new HashSet<String>();
-                synchronized (staticLock) {
-                    for (AccessTokenAppIdPair accessTokenAppId : stateMap.keySet()) {
-                        applicationIds.add(accessTokenAppId.getApplicationId());
-                    }
+                Set<String> applicationIds = new HashSet<>();
+                for (AccessTokenAppIdPair accessTokenAppId : AppEventQueue.getKeySet()) {
+                    applicationIds.add(accessTokenAppId.getApplicationId());
                 }
+
                 for (String applicationId : applicationIds) {
-                    Utility.queryAppSettings(applicationId, true);
+                    FetchedAppSettingsManager.queryAppSettings(applicationId, true);
                 }
             }
         };
@@ -732,30 +902,37 @@ private void logEvent(
             String eventName,
             Double valueToSum,
             Bundle parameters,
-            boolean isImplicitlyLogged) {
-        AppEvent event = new AppEvent(
-                this.contextName,
-                eventName,
-                valueToSum,
-                parameters,
-                isImplicitlyLogged);
-        logEvent(applicationContext, event, accessTokenAppId);
+            boolean isImplicitlyLogged,
+            @Nullable final UUID currentSessionId) {
+        try {
+            AppEvent event = new AppEvent(
+                    this.contextName,
+                    eventName,
+                    valueToSum,
+                    parameters,
+                    isImplicitlyLogged,
+                    currentSessionId);
+            logEvent(FacebookSdk.getApplicationContext(), event, accessTokenAppId);
+        } catch (JSONException jsonException) {
+            // If any of the above failed, just consider this an illegal event.
+            Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
+                    "JSON encoding for app event failed: '%s'", jsonException.toString());
+
+        } catch (FacebookException e) {
+            // If any of the above failed, just consider this an illegal event.
+            Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
+                    "Invalid app event: %s", e.toString());
+        }
+
     }
 
     private static void logEvent(final Context context,
                                  final AppEvent event,
                                  final AccessTokenAppIdPair accessTokenAppId) {
-        FacebookSdk.getExecutor().execute(new Runnable() {
-            @Override
-            public void run() {
-                SessionEventsState state = getSessionEventsState(context, accessTokenAppId);
-                state.addEvent(event);
-                flushIfNecessary();
-            }
-        });
+        AppEventQueue.add(accessTokenAppId, event);
 
         // Make sure Activated_App is always before other app events
-        if (!event.isImplicit && !isActivateAppEventRequested) {
+        if (!event.getIsImplicit() && !isActivateAppEventRequested) {
             if (event.getName() == AppEventsConstants.EVENT_NAME_ACTIVATED_APP) {
                 isActivateAppEventRequested = true;
             } else {
@@ -770,278 +947,10 @@ public void run() {
 
     static void eagerFlush() {
         if (getFlushBehavior() != FlushBehavior.EXPLICIT_ONLY) {
-            flush(FlushReason.EAGER_FLUSHING_EVENT);
-        }
-    }
-
-    private static void flushIfNecessary() {
-        synchronized (staticLock) {
-            if (getFlushBehavior() != FlushBehavior.EXPLICIT_ONLY) {
-                if (getAccumulatedEventCount() > NUM_LOG_EVENTS_TO_TRY_TO_FLUSH_AFTER) {
-                    flush(FlushReason.EVENT_THRESHOLD);
-                }
-            }
-        }
-    }
-
-    private static int getAccumulatedEventCount() {
-        synchronized (staticLock) {
-
-            int result = 0;
-            for (SessionEventsState state : stateMap.values()) {
-                result += state.getAccumulatedEventCount();
-            }
-            return result;
-        }
-    }
-
-    // Creates a new SessionEventsState if not already in the map.
-    private static SessionEventsState getSessionEventsState(
-            Context context,
-            AccessTokenAppIdPair accessTokenAppId) {
-        // Do this work outside of the lock to prevent deadlocks in implementation of
-        // AdvertisingIdClient.getAdvertisingIdInfo, because that implementation blocks waiting on
-        // the main thread, which may also grab this staticLock.
-        SessionEventsState state = stateMap.get(accessTokenAppId);
-        AttributionIdentifiers attributionIdentifiers = null;
-        if (state == null) {
-            // Retrieve attributionId, but we will only send it if attribution is supported for the
-            // app.
-            attributionIdentifiers = AttributionIdentifiers.getAttributionIdentifiers(context);
-        }
-
-        synchronized (staticLock) {
-            // Check state again while we're locked.
-            state = stateMap.get(accessTokenAppId);
-            if (state == null) {
-                state = new SessionEventsState(
-                        attributionIdentifiers,
-                        context.getPackageName(),
-                        getAnonymousAppDeviceGUID(context));
-                stateMap.put(accessTokenAppId, state);
-            }
-            return state;
-        }
-    }
-
-    private static SessionEventsState getSessionEventsState(AccessTokenAppIdPair accessTokenAppId) {
-        synchronized (staticLock) {
-            return stateMap.get(accessTokenAppId);
+            AppEventQueue.flush(FlushReason.EAGER_FLUSHING_EVENT);
         }
     }
 
-    private static void flush(final FlushReason reason) {
-
-        FacebookSdk.getExecutor().execute(new Runnable() {
-            @Override
-            public void run() {
-                flushAndWait(reason);
-            }
-        });
-    }
-
-    private static void flushAndWait(final FlushReason reason) {
-
-        Set<AccessTokenAppIdPair> keysToFlush;
-        synchronized (staticLock) {
-            if (requestInFlight) {
-                return;
-            }
-            requestInFlight = true;
-            keysToFlush = new HashSet<AccessTokenAppIdPair>(stateMap.keySet());
-        }
-
-        accumulatePersistedEvents();
-
-        FlushStatistics flushResults = null;
-        try {
-            flushResults = buildAndExecuteRequests(reason, keysToFlush);
-        } catch (Exception e) {
-            Utility.logd(TAG, "Caught unexpected exception while flushing: ", e);
-        }
-
-        synchronized (staticLock) {
-            requestInFlight = false;
-        }
-
-        if (flushResults != null) {
-            final Intent intent = new Intent(ACTION_APP_EVENTS_FLUSHED);
-            intent.putExtra(APP_EVENTS_EXTRA_NUM_EVENTS_FLUSHED, flushResults.numEvents);
-            intent.putExtra(APP_EVENTS_EXTRA_FLUSH_RESULT, flushResults.result);
-            LocalBroadcastManager.getInstance(applicationContext).sendBroadcast(intent);
-        }
-    }
-
-    private static FlushStatistics buildAndExecuteRequests(
-            FlushReason reason,
-            Set<AccessTokenAppIdPair> keysToFlush) {
-        FlushStatistics flushResults = new FlushStatistics();
-
-        boolean limitEventUsage = FacebookSdk.getLimitEventAndDataUsage(applicationContext);
-
-        List<GraphRequest> requestsToExecute = new ArrayList<GraphRequest>();
-        for (AccessTokenAppIdPair accessTokenAppId : keysToFlush) {
-            SessionEventsState sessionEventsState = getSessionEventsState(accessTokenAppId);
-            if (sessionEventsState == null) {
-                continue;
-            }
-
-            GraphRequest request = buildRequestForSession(
-                    accessTokenAppId,
-                    sessionEventsState,
-                    limitEventUsage,
-                    flushResults);
-            if (request != null) {
-                requestsToExecute.add(request);
-            }
-        }
-
-        if (requestsToExecute.size() > 0) {
-            Logger.log(LoggingBehavior.APP_EVENTS, TAG, "Flushing %d events due to %s.",
-                    flushResults.numEvents,
-                    reason.toString());
-
-            for (GraphRequest request : requestsToExecute) {
-                // Execute the request synchronously. Callbacks will take care of handling errors
-                // and updating our final overall result.
-                request.executeAndWait();
-            }
-            return flushResults;
-        }
-
-        return null;
-    }
-
-    private static class FlushStatistics {
-        public int numEvents = 0;
-        public FlushResult result = FlushResult.SUCCESS;
-    }
-
-    private static GraphRequest buildRequestForSession(
-            final AccessTokenAppIdPair accessTokenAppId,
-            final SessionEventsState sessionEventsState,
-            final boolean limitEventUsage,
-            final FlushStatistics flushState) {
-        String applicationId = accessTokenAppId.getApplicationId();
-
-        Utility.FetchedAppSettings fetchedAppSettings =
-                Utility.queryAppSettings(applicationId, false);
-
-        final GraphRequest postRequest = GraphRequest.newPostRequest(
-                null,
-                String.format("%s/activities", applicationId),
-                null,
-                null);
-
-        Bundle requestParameters = postRequest.getParameters();
-        if (requestParameters == null) {
-            requestParameters = new Bundle();
-        }
-        requestParameters.putString("access_token", accessTokenAppId.getAccessTokenString());
-        postRequest.setParameters(requestParameters);
-
-        if (fetchedAppSettings == null) {
-            return null;
-        }
-
-        int numEvents = sessionEventsState.populateRequest(
-                postRequest,
-                fetchedAppSettings.supportsImplicitLogging(),
-                limitEventUsage);
-
-        if (numEvents == 0) {
-            return null;
-        }
-
-        flushState.numEvents += numEvents;
-
-        postRequest.setCallback(new GraphRequest.Callback() {
-            @Override
-            public void onCompleted(GraphResponse response) {
-                handleResponse(accessTokenAppId, postRequest, response, sessionEventsState, flushState);
-            }
-        });
-
-        return postRequest;
-    }
-
-    private static void handleResponse(
-            AccessTokenAppIdPair accessTokenAppId,
-            GraphRequest request,
-            GraphResponse response,
-            SessionEventsState sessionEventsState,
-            FlushStatistics flushState) {
-        FacebookRequestError error = response.getError();
-        String resultDescription = "Success";
-
-        FlushResult flushResult = FlushResult.SUCCESS;
-
-        if (error != null) {
-            final int NO_CONNECTIVITY_ERROR_CODE = -1;
-            if (error.getErrorCode() == NO_CONNECTIVITY_ERROR_CODE) {
-                resultDescription = "Failed: No Connectivity";
-                flushResult = FlushResult.NO_CONNECTIVITY;
-            } else {
-                resultDescription = String.format("Failed:\n  Response: %s\n  Error %s",
-                        response.toString(),
-                        error.toString());
-                flushResult = FlushResult.SERVER_ERROR;
-            }
-        }
-
-        if (FacebookSdk.isLoggingBehaviorEnabled(LoggingBehavior.APP_EVENTS)) {
-            String eventsJsonString = (String) request.getTag();
-            String prettyPrintedEvents;
-
-            try {
-                JSONArray jsonArray = new JSONArray(eventsJsonString);
-                prettyPrintedEvents = jsonArray.toString(2);
-            } catch (JSONException exc) {
-                prettyPrintedEvents = "<Can't encode events for debug logging>";
-            }
-
-            Logger.log(LoggingBehavior.APP_EVENTS, TAG,
-                    "Flush completed\nParams: %s\n  Result: %s\n  Events JSON: %s",
-                    request.getGraphObject().toString(),
-                    resultDescription,
-                    prettyPrintedEvents);
-        }
-
-        sessionEventsState.clearInFlightAndStats(error != null);
-
-        if (flushResult == FlushResult.NO_CONNECTIVITY) {
-            // We may call this for multiple requests in a batch, which is slightly inefficient
-            // since in principle we could call it once for all failed requests, but the impact is
-            // likely to be minimal. We don't call this for other server errors, because if an event
-            // failed because it was malformed, etc., continually retrying it will cause subsequent
-            // events to not be logged either.
-            PersistedEvents.persistEvents(applicationContext, accessTokenAppId, sessionEventsState);
-        }
-
-        if (flushResult != FlushResult.SUCCESS) {
-            // We assume that connectivity issues are more significant to report than server issues.
-            if (flushState.result != FlushResult.NO_CONNECTIVITY) {
-                flushState.result = flushResult;
-            }
-        }
-    }
-
-    private static int accumulatePersistedEvents() {
-        PersistedEvents persistedEvents = PersistedEvents.readAndClearStore(applicationContext);
-
-        int result = 0;
-        for (AccessTokenAppIdPair accessTokenAppId : persistedEvents.keySet()) {
-            SessionEventsState sessionEventsState =
-                    getSessionEventsState(applicationContext, accessTokenAppId);
-
-            List<AppEvent> events = persistedEvents.getEvents(accessTokenAppId);
-            sessionEventsState.accumulatePersistedEvents(events);
-            result += events.size();
-        }
-
-        return result;
-    }
-
     /**
      * Invoke this method, rather than throwing an Exception, for situations where user/server input
      * might reasonably cause this to occur, and thus don't want an exception thrown at production
@@ -1123,6 +1032,14 @@ static void resetSourceApplication() {
         isOpenedByApplink = false;
     }
 
+    static Executor getAnalyticsExecutor() {
+        if (backgroundExecutor == null) {
+            initializeTimersIfNeeded();
+        }
+
+        return backgroundExecutor;
+    }
+
     /**
      * Each app/device pair gets an GUID that is sent back with App Events and persisted with this
      * app/device pair.
@@ -1159,307 +1076,10 @@ public static String getAnonymousAppDeviceGUID(Context context) {
     // Deprecated Stuff
     //
 
+    // Since we moved some private classes to internal classes outside the AppEventsLogger class
+    // for backwards compatibility we can override the classDescriptor to resolve to the correct
+    // class
 
-    private static class SessionEventsState {
-        private List<AppEvent> accumulatedEvents = new ArrayList<AppEvent>();
-        private List<AppEvent> inFlightEvents = new ArrayList<AppEvent>();
-        private int numSkippedEventsDueToFullBuffer;
-        private AttributionIdentifiers attributionIdentifiers;
-        private String packageName;
-        private String anonymousAppDeviceGUID;
-
-        public static final String EVENT_COUNT_KEY = "event_count";
-        public static final String ENCODED_EVENTS_KEY = "encoded_events";
-        public static final String NUM_SKIPPED_KEY = "num_skipped";
-
-        private final int MAX_ACCUMULATED_LOG_EVENTS = 1000;
-
-        public SessionEventsState(
-                AttributionIdentifiers identifiers,
-                String packageName,
-                String anonymousGUID) {
-            this.attributionIdentifiers = identifiers;
-            this.packageName = packageName;
-            this.anonymousAppDeviceGUID = anonymousGUID;
-        }
-
-        // Synchronize here and in other methods on this class, because could be coming in from
-        // different AppEventsLoggers on different threads pointing at the same session.
-        public synchronized void addEvent(AppEvent event) {
-            if (accumulatedEvents.size() + inFlightEvents.size() >= MAX_ACCUMULATED_LOG_EVENTS) {
-                numSkippedEventsDueToFullBuffer++;
-            } else {
-                accumulatedEvents.add(event);
-            }
-        }
-
-        public synchronized int getAccumulatedEventCount() {
-            return accumulatedEvents.size();
-        }
-
-        public synchronized void clearInFlightAndStats(boolean moveToAccumulated) {
-            if (moveToAccumulated) {
-                accumulatedEvents.addAll(inFlightEvents);
-            }
-            inFlightEvents.clear();
-            numSkippedEventsDueToFullBuffer = 0;
-        }
-
-        public int populateRequest(GraphRequest request, boolean includeImplicitEvents,
-                                   boolean limitEventUsage) {
-
-            int numSkipped;
-            JSONArray jsonArray;
-            synchronized (this) {
-                numSkipped = numSkippedEventsDueToFullBuffer;
-
-                // move all accumulated events to inFlight.
-                inFlightEvents.addAll(accumulatedEvents);
-                accumulatedEvents.clear();
-
-                jsonArray = new JSONArray();
-                for (AppEvent event : inFlightEvents) {
-                    if (includeImplicitEvents || !event.getIsImplicit()) {
-                        jsonArray.put(event.getJSONObject());
-                    }
-                }
-
-                if (jsonArray.length() == 0) {
-                    return 0;
-                }
-            }
-
-            populateRequest(request, numSkipped, jsonArray, limitEventUsage);
-            return jsonArray.length();
-        }
-
-        public synchronized List<AppEvent> getEventsToPersist() {
-            // We will only persist accumulated events, not ones currently in-flight. This means if
-            // an in-flight request fails, those requests will not be persisted and thus might be
-            // lost if the process terminates while the flush is in progress.
-            List<AppEvent> result = accumulatedEvents;
-            accumulatedEvents = new ArrayList<AppEvent>();
-            return result;
-        }
-
-        public synchronized void accumulatePersistedEvents(List<AppEvent> events) {
-            // We won't skip events due to a full buffer, since we already accumulated them once and
-            // persisted them. But they will count against the buffer size when further events are
-            // accumulated.
-            accumulatedEvents.addAll(events);
-        }
-
-        private void populateRequest(GraphRequest request, int numSkipped, JSONArray events,
-                                     boolean limitEventUsage) {
-            JSONObject publishParams = null;
-            try {
-                publishParams = AppEventsLoggerUtility.getJSONObjectForGraphAPICall(
-                        AppEventsLoggerUtility.GraphAPIActivityType.CUSTOM_APP_EVENTS,
-                        attributionIdentifiers,
-                        anonymousAppDeviceGUID,
-                        limitEventUsage,
-                        applicationContext);
-
-                if (numSkippedEventsDueToFullBuffer > 0) {
-                    publishParams.put("num_skipped_events", numSkipped);
-                }
-            } catch (JSONException e) {
-                // Swallow
-                publishParams = new JSONObject();
-            }
-            request.setGraphObject(publishParams);
-
-            Bundle requestParameters = request.getParameters();
-            if (requestParameters == null) {
-                requestParameters = new Bundle();
-            }
-
-            String jsonString = events.toString();
-            if (jsonString != null) {
-                requestParameters.putByteArray(
-                        "custom_events_file",
-                        getStringAsByteArray(jsonString));
-                request.setTag(jsonString);
-            }
-            request.setParameters(requestParameters);
-        }
-
-        private byte[] getStringAsByteArray(String jsonString) {
-            byte[] jsonUtf8 = null;
-            try {
-                jsonUtf8 = jsonString.getBytes("UTF-8");
-            } catch (UnsupportedEncodingException e) {
-                // shouldn't happen, but just in case:
-                Utility.logd("Encoding exception: ", e);
-            }
-            return jsonUtf8;
-        }
-    }
-
-    static class AppEvent implements Serializable {
-        private static final long serialVersionUID = 1L;
-
-        private JSONObject jsonObject;
-        private boolean isImplicit;
-        private static final HashSet<String> validatedIdentifiers = new HashSet<String>();
-        private String name;
-
-        public AppEvent(
-                String contextName,
-                String eventName,
-                Double valueToSum,
-                Bundle parameters,
-                boolean isImplicitlyLogged
-        ) {
-            try {
-                validateIdentifier(eventName);
-
-                this.name = eventName;
-                isImplicit = isImplicitlyLogged;
-                jsonObject = new JSONObject();
-
-                jsonObject.put("_eventName", eventName);
-                jsonObject.put("_logTime", System.currentTimeMillis() / 1000);
-                jsonObject.put("_ui", contextName);
-
-                if (valueToSum != null) {
-                    jsonObject.put("_valueToSum", valueToSum.doubleValue());
-                }
-
-                if (isImplicit) {
-                    jsonObject.put("_implicitlyLogged", "1");
-                }
-
-                if (parameters != null) {
-                    for (String key : parameters.keySet()) {
-
-                        validateIdentifier(key);
-
-                        Object value = parameters.get(key);
-                        if (!(value instanceof String) && !(value instanceof Number)) {
-                            throw new FacebookException(
-                                    String.format(
-                                            "Parameter value '%s' for key '%s' should be a string" +
-                                                    " or a numeric type.",
-                                            value,
-                                            key)
-                            );
-                        }
-
-                        jsonObject.put(key, value.toString());
-                    }
-                }
-
-                if (!isImplicit) {
-                    Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
-                            "Created app event '%s'", jsonObject.toString());
-                }
-            } catch (JSONException jsonException) {
-
-                // If any of the above failed, just consider this an illegal event.
-                Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
-                        "JSON encoding for app event failed: '%s'", jsonException.toString());
-                jsonObject = null;
-
-            } catch (FacebookException e) {
-                // If any of the above failed, just consider this an illegal event.
-                Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
-                        "Invalid app event name or parameter:", e.toString());
-                jsonObject = null;
-            }
-        }
-
-        public String getName() {
-            return name;
-        }
-
-        private AppEvent(String jsonString, boolean isImplicit) throws JSONException {
-            jsonObject = new JSONObject(jsonString);
-            this.isImplicit = isImplicit;
-        }
-
-        public boolean getIsImplicit() {
-            return isImplicit;
-        }
-
-        public JSONObject getJSONObject() {
-            return jsonObject;
-        }
-
-        // throw exception if not valid.
-        private void validateIdentifier(String identifier) throws FacebookException {
-
-            // Identifier should be 40 chars or less, and only have 0-9A-Za-z, underscore, hyphen,
-            // and space (but no hyphen or space in the first position).
-            final String regex = "^[0-9a-zA-Z_]+[0-9a-zA-Z _-]*$";
-
-            final int MAX_IDENTIFIER_LENGTH = 40;
-            if (identifier == null
-                    || identifier.length() == 0
-                    || identifier.length() > MAX_IDENTIFIER_LENGTH) {
-                if (identifier == null) {
-                    identifier = "<None Provided>";
-                }
-                throw new FacebookException(
-                    String.format(
-                            Locale.ROOT,
-                            "Identifier '%s' must be less than %d characters",
-                            identifier,
-                            MAX_IDENTIFIER_LENGTH)
-                );
-            }
-
-            boolean alreadyValidated = false;
-            synchronized (validatedIdentifiers) {
-                alreadyValidated = validatedIdentifiers.contains(identifier);
-            }
-
-            if (!alreadyValidated) {
-                if (identifier.matches(regex)) {
-                    synchronized (validatedIdentifiers) {
-                        validatedIdentifiers.add(identifier);
-                    }
-                } else {
-                    throw new FacebookException(
-                            String.format(
-                                    "Skipping event named '%s' due to illegal name - must be " +
-                                            "under 40 chars and alphanumeric, _, - or space, and " +
-                                            "not start with a space or hyphen.",
-                                    identifier
-                            )
-                    );
-                }
-            }
-        }
-
-        private static class SerializationProxyV1 implements Serializable {
-            private static final long serialVersionUID = -2488473066578201069L;
-            private final String jsonString;
-            private final boolean isImplicit;
-
-            private SerializationProxyV1(String jsonString, boolean isImplicit) {
-                this.jsonString = jsonString;
-                this.isImplicit = isImplicit;
-            }
-
-            private Object readResolve() throws JSONException {
-                return new AppEvent(jsonString, isImplicit);
-            }
-        }
-
-        private Object writeReplace() {
-            return new SerializationProxyV1(jsonObject.toString(), isImplicit);
-        }
-
-        @Override
-        public String toString() {
-            return String.format(
-                    "\"%s\", implicit: %b, json: %s",
-                    jsonObject.optString("_eventName"),
-                    isImplicit,
-                    jsonObject.toString());
-        }
-    }
 
     static class PersistedAppSessionInfo {
         private static final String PERSISTED_SESSION_INFO_FILENAME =
@@ -1473,7 +1093,8 @@ public String toString() {
         private static final Runnable appSessionInfoFlushRunnable = new Runnable() {
             @Override
             public void run() {
-                PersistedAppSessionInfo.saveAppSessionInformation(applicationContext);
+                PersistedAppSessionInfo.saveAppSessionInformation(
+                        FacebookSdk.getApplicationContext());
             }
         };
 
@@ -1484,9 +1105,8 @@ private static void restoreAppSessionInformation(Context context) {
             synchronized (staticLock) {
                 if (!isLoaded) {
                     try {
-                        ois =
-                                new ObjectInputStream(
-                                        context.openFileInput(PERSISTED_SESSION_INFO_FILENAME));
+                        ois = new ObjectInputStream(
+                            context.openFileInput(PERSISTED_SESSION_INFO_FILENAME));
                         appSessionInfoMap = (HashMap<AccessTokenAppIdPair, FacebookTimeSpentData>)
                                 ois.readObject();
                         Logger.log(
@@ -1495,7 +1115,10 @@ private static void restoreAppSessionInformation(Context context) {
                                 "App session info loaded");
                     } catch (FileNotFoundException fex) {
                     } catch (Exception e) {
-                        Log.d(TAG, "Got unexpected exception: " + e.toString());
+                        Log.w(
+                                TAG,
+                                "Got unexpected exception restoring app session info: "
+                                        + e.toString());
                     } finally {
                         Utility.closeQuietly(ois);
                         context.deleteFile(PERSISTED_SESSION_INFO_FILENAME);
@@ -1533,7 +1156,10 @@ static void saveAppSessionInformation(Context context) {
                                 "AppEvents",
                                 "App session info saved");
                     } catch (Exception e) {
-                        Log.d(TAG, "Got unexpected exception: " + e.toString());
+                        Log.w(
+                                TAG,
+                                "Got unexpected exception while writing app session info: "
+                                        + e.toString());
                     } finally {
                         Utility.closeQuietly(oos);
                     }
@@ -1594,115 +1220,4 @@ private static void onTimeSpentDataUpdate() {
             }
         }
     }
-
-    // Read/write operations are thread-safe/atomic across all instances of PersistedEvents, but
-    // modifications to any individual instance are not thread-safe.
-    static class PersistedEvents {
-        static final String PERSISTED_EVENTS_FILENAME = "AppEventsLogger.persistedevents";
-
-        private Context context;
-        private HashMap<AccessTokenAppIdPair, List<AppEvent>> persistedEvents =
-                new HashMap<AccessTokenAppIdPair, List<AppEvent>>();
-
-        private PersistedEvents(Context context) {
-            this.context = context;
-        }
-
-        public static PersistedEvents readAndClearStore(Context context) {
-            synchronized (staticLock) {
-                PersistedEvents persistedEvents = new PersistedEvents(context);
-
-                persistedEvents.readAndClearStore();
-
-                return persistedEvents;
-            }
-        }
-
-        public static void persistEvents(Context context, AccessTokenAppIdPair accessTokenAppId,
-                                         SessionEventsState eventsToPersist) {
-            Map<AccessTokenAppIdPair, SessionEventsState> map = new HashMap<AccessTokenAppIdPair, SessionEventsState>();
-            map.put(accessTokenAppId, eventsToPersist);
-            persistEvents(context, map);
-        }
-
-        public static void persistEvents(
-                Context context,
-                Map<AccessTokenAppIdPair,
-                        SessionEventsState> eventsToPersist) {
-            synchronized (staticLock) {
-                // Note that we don't track which instance of AppEventsLogger added a particular
-                // event to SessionEventsState; when a particular Context is being destroyed, we'll
-                // persist all accumulated events. More sophisticated tracking could be done to try
-                // to reduce unnecessary persisting of events, but the overall number of events is
-                // not expected to be large.
-                PersistedEvents persistedEvents = readAndClearStore(context);
-
-                for (Map.Entry<AccessTokenAppIdPair, SessionEventsState> entry
-                        : eventsToPersist.entrySet()) {
-                    List<AppEvent> events = entry.getValue().getEventsToPersist();
-                    if (events.size() == 0) {
-                        continue;
-                    }
-
-                    persistedEvents.addEvents(entry.getKey(), events);
-                }
-
-                persistedEvents.write();
-            }
-        }
-
-        public Set<AccessTokenAppIdPair> keySet() {
-            return persistedEvents.keySet();
-        }
-
-        public List<AppEvent> getEvents(AccessTokenAppIdPair accessTokenAppId) {
-            return persistedEvents.get(accessTokenAppId);
-        }
-
-        private void write() {
-            ObjectOutputStream oos = null;
-            try {
-                oos = new ObjectOutputStream(
-                        new BufferedOutputStream(
-                                context.openFileOutput(PERSISTED_EVENTS_FILENAME, 0)));
-                oos.writeObject(persistedEvents);
-            } catch (Exception e) {
-                Log.d(TAG, "Got unexpected exception: " + e.toString());
-            } finally {
-                Utility.closeQuietly(oos);
-            }
-        }
-
-        private void readAndClearStore() {
-            ObjectInputStream ois = null;
-            try {
-                ois = new ObjectInputStream(
-                        new BufferedInputStream(context.openFileInput(PERSISTED_EVENTS_FILENAME)));
-
-                @SuppressWarnings("unchecked")
-                HashMap<AccessTokenAppIdPair, List<AppEvent>> obj =
-                        (HashMap<AccessTokenAppIdPair, List<AppEvent>>) ois.readObject();
-
-                // Note: We delete the store before we store the events; this means we'd prefer to
-                // lose some events in the case of exception rather than potentially log them twice.
-                context.getFileStreamPath(PERSISTED_EVENTS_FILENAME).delete();
-                persistedEvents = obj;
-            } catch (FileNotFoundException e) {
-                // Expected if we never persisted any events.
-            } catch (Exception e) {
-                Log.d(TAG, "Got unexpected exception: " + e.toString());
-            } finally {
-                Utility.closeQuietly(ois);
-            }
-        }
-
-        public void addEvents(
-                AccessTokenAppIdPair accessTokenAppId,
-                List<AppEvent> eventsToPersist) {
-            if (!persistedEvents.containsKey(accessTokenAppId)) {
-                persistedEvents.put(accessTokenAppId, new ArrayList<AppEvent>());
-            }
-            persistedEvents.get(accessTokenAppId).addAll(eventsToPersist);
-        }
-    }
 }
diff --git a/facebook/src/main/java/com/facebook/appevents/FacebookTimeSpentData.java b/facebook/src/main/java/com/facebook/appevents/FacebookTimeSpentData.java
index ad7e40ba9..1d703b632 100644
--- a/facebook/src/main/java/com/facebook/appevents/FacebookTimeSpentData.java
+++ b/facebook/src/main/java/com/facebook/appevents/FacebookTimeSpentData.java
@@ -24,6 +24,7 @@
 import android.text.format.DateUtils;
 
 import com.facebook.LoggingBehavior;
+import com.facebook.appevents.AppEventsConstants;
 import com.facebook.internal.Logger;
 
 import java.util.Locale;
@@ -32,7 +33,7 @@
 class FacebookTimeSpentData implements Serializable {
     // Constants
     private static final long serialVersionUID = 1L;
-    private static final String TAG = AppEventsLogger.class.getCanonicalName();
+    private static final String TAG = FacebookTimeSpentData.class.getCanonicalName();
     private static final long FIRST_TIME_LOAD_RESUME_TIME = -1;
     private static final long INTERRUPTION_THRESHOLD_MILLISECONDS = 1000;
     private static final long NUM_MILLISECONDS_IDLE_TO_BE_NEW_SESSION =
@@ -232,6 +233,9 @@ void onResume(AppEventsLogger logger, long eventTime, String sourceApplicationIn
                     sourceApplicationInfo);
             logger.logEvent(AppEventsConstants.EVENT_NAME_ACTIVATED_APP, eventParams);
             lastActivateEventLoggedTime = now;
+            if (logger.getFlushBehavior() != AppEventsLogger.FlushBehavior.EXPLICIT_ONLY) {
+              logger.flush();
+            }
         }
 
         // If this is an application that's not calling onSuspend yet, log and return. We can't
diff --git a/samples/ShareIt/src/com/example/shareit/ShareItApplication.java b/facebook/src/main/java/com/facebook/appevents/FlushReason.java
similarity index 79%
rename from samples/ShareIt/src/com/example/shareit/ShareItApplication.java
rename to facebook/src/main/java/com/facebook/appevents/FlushReason.java
index b1b29be6a..48e4ed827 100644
--- a/samples/ShareIt/src/com/example/shareit/ShareItApplication.java
+++ b/facebook/src/main/java/com/facebook/appevents/FlushReason.java
@@ -18,16 +18,13 @@
  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  */
 
-package com.example.shareit;
+package com.facebook.appevents;
 
-import android.app.Application;
-
-import com.facebook.FacebookSdk;
-
-public class ShareItApplication extends Application {
-    @Override
-    public void onCreate() {
-        super.onCreate();
-        FacebookSdk.sdkInitialize(getApplicationContext());
-    }
+enum FlushReason {
+    EXPLICIT,
+    TIMER,
+    SESSION_CHANGE,
+    PERSISTED_EVENTS,
+    EVENT_THRESHOLD,
+    EAGER_FLUSHING_EVENT,
 }
diff --git a/facebook/src/main/java/com/facebook/appevents/FlushResult.java b/facebook/src/main/java/com/facebook/appevents/FlushResult.java
new file mode 100644
index 000000000..064dc3190
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/FlushResult.java
@@ -0,0 +1,28 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+public enum FlushResult {
+    SUCCESS,
+    SERVER_ERROR,
+    NO_CONNECTIVITY,
+    UNKNOWN_ERROR
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/FlushStatistics.java b/facebook/src/main/java/com/facebook/appevents/FlushStatistics.java
new file mode 100644
index 000000000..5e8e6efe0
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/FlushStatistics.java
@@ -0,0 +1,26 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+class FlushStatistics {
+    public int numEvents = 0;
+    public FlushResult result = FlushResult.SUCCESS;
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/PersistedEvents.java b/facebook/src/main/java/com/facebook/appevents/PersistedEvents.java
new file mode 100644
index 000000000..df47a7ac8
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/PersistedEvents.java
@@ -0,0 +1,77 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import java.io.Serializable;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Set;
+
+class PersistedEvents implements Serializable {
+    private static final long serialVersionUID = 2016_06_29_001L;
+
+    private HashMap<AccessTokenAppIdPair, List<AppEvent>> events = new HashMap<>();
+
+    public PersistedEvents() {
+    }
+
+    public PersistedEvents(HashMap<AccessTokenAppIdPair, List<AppEvent>> appEventMap) {
+        events.putAll(appEventMap);
+    }
+
+    public Set<AccessTokenAppIdPair> keySet() {
+        return events.keySet();
+    }
+
+    public List<AppEvent> get(AccessTokenAppIdPair accessTokenAppIdPair) {
+        return events.get(accessTokenAppIdPair);
+    }
+
+    public boolean containsKey(AccessTokenAppIdPair accessTokenAppIdPair) {
+        return events.containsKey(accessTokenAppIdPair);
+    }
+
+    public void addEvents(AccessTokenAppIdPair accessTokenAppIdPair, List<AppEvent> appEvents) {
+        if (!events.containsKey(accessTokenAppIdPair)) {
+            events.put(accessTokenAppIdPair, appEvents);
+            return;
+        }
+
+        events.get(accessTokenAppIdPair).addAll(appEvents);
+    }
+
+    static class SerializationProxyV1 implements Serializable {
+        private static final long serialVersionUID = 2016_06_29_001L;;
+        private final HashMap<AccessTokenAppIdPair, List<AppEvent>> proxyEvents;
+
+        private SerializationProxyV1(HashMap<AccessTokenAppIdPair, List<AppEvent>> events) {
+            this.proxyEvents = events;
+        }
+
+        private Object readResolve() {
+            return new PersistedEvents(proxyEvents);
+        }
+    }
+
+    private Object writeReplace() {
+        return new SerializationProxyV1(events);
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/SessionEventsState.java b/facebook/src/main/java/com/facebook/appevents/SessionEventsState.java
new file mode 100644
index 000000000..665ed4306
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/SessionEventsState.java
@@ -0,0 +1,182 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import android.content.Context;
+import android.os.Bundle;
+
+import com.facebook.GraphRequest;
+import com.facebook.internal.AppEventsLoggerUtility;
+import com.facebook.internal.AttributionIdentifiers;
+import com.facebook.internal.Utility;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.UnsupportedEncodingException;
+import java.util.ArrayList;
+import java.util.List;
+
+class SessionEventsState {
+    private List<AppEvent> accumulatedEvents = new ArrayList<AppEvent>();
+    private List<AppEvent> inFlightEvents = new ArrayList<AppEvent>();
+    private int numSkippedEventsDueToFullBuffer;
+    private AttributionIdentifiers attributionIdentifiers;
+    private String anonymousAppDeviceGUID;
+
+    private final int MAX_ACCUMULATED_LOG_EVENTS = 1000;
+
+    public SessionEventsState(
+            AttributionIdentifiers identifiers,
+            String anonymousGUID) {
+        this.attributionIdentifiers = identifiers;
+        this.anonymousAppDeviceGUID = anonymousGUID;
+    }
+
+    // Synchronize here and in other methods on this class, because could be coming in from
+    // different AppEventsLoggers on different threads pointing at the same session.
+    public synchronized void addEvent(AppEvent event) {
+        if (accumulatedEvents.size() + inFlightEvents.size() >= MAX_ACCUMULATED_LOG_EVENTS) {
+            numSkippedEventsDueToFullBuffer++;
+        } else {
+            accumulatedEvents.add(event);
+        }
+    }
+
+    public synchronized int getAccumulatedEventCount() {
+        return accumulatedEvents.size();
+    }
+
+    public synchronized void clearInFlightAndStats(boolean moveToAccumulated) {
+        if (moveToAccumulated) {
+            accumulatedEvents.addAll(inFlightEvents);
+        }
+        inFlightEvents.clear();
+        numSkippedEventsDueToFullBuffer = 0;
+    }
+
+    public int populateRequest(
+            GraphRequest request,
+            Context applicationContext,
+            boolean includeImplicitEvents,
+            boolean limitEventUsage) {
+
+        int numSkipped;
+        JSONArray jsonArray;
+        synchronized (this) {
+            numSkipped = numSkippedEventsDueToFullBuffer;
+
+            // move all accumulated events to inFlight.
+            inFlightEvents.addAll(accumulatedEvents);
+            accumulatedEvents.clear();
+
+            jsonArray = new JSONArray();
+            for (AppEvent event : inFlightEvents) {
+                if (event.isChecksumValid()) {
+                    if (includeImplicitEvents || !event.getIsImplicit()) {
+                        jsonArray.put(event.getJSONObject());
+                    }
+                } else {
+                    Utility.logd("Event with invalid checksum: %s", event.toString());
+                }
+            }
+
+            if (jsonArray.length() == 0) {
+                return 0;
+            }
+        }
+
+        populateRequest(
+                request,
+                applicationContext,
+                numSkipped,
+                jsonArray,
+                limitEventUsage);
+        return jsonArray.length();
+    }
+
+    public synchronized List<AppEvent> getEventsToPersist() {
+        // We will only persist accumulated events, not ones currently in-flight. This means if
+        // an in-flight request fails, those requests will not be persisted and thus might be
+        // lost if the process terminates while the flush is in progress.
+        List<AppEvent> result = accumulatedEvents;
+        accumulatedEvents = new ArrayList<AppEvent>();
+        return result;
+    }
+
+    public synchronized void accumulatePersistedEvents(List<AppEvent> events) {
+        // We won't skip events due to a full buffer, since we already accumulated them once and
+        // persisted them. But they will count against the buffer size when further events are
+        // accumulated.
+        accumulatedEvents.addAll(events);
+    }
+
+    private void populateRequest(
+            GraphRequest request,
+            Context applicationContext,
+            int numSkipped,
+            JSONArray events,
+            boolean limitEventUsage) {
+        JSONObject publishParams = null;
+        try {
+            publishParams = AppEventsLoggerUtility.getJSONObjectForGraphAPICall(
+                    AppEventsLoggerUtility.GraphAPIActivityType.CUSTOM_APP_EVENTS,
+                    attributionIdentifiers,
+                    anonymousAppDeviceGUID,
+                    limitEventUsage,
+                    applicationContext);
+
+            if (numSkippedEventsDueToFullBuffer > 0) {
+                publishParams.put("num_skipped_events", numSkipped);
+            }
+        } catch (JSONException e) {
+            // Swallow
+            publishParams = new JSONObject();
+        }
+        request.setGraphObject(publishParams);
+
+        Bundle requestParameters = request.getParameters();
+        if (requestParameters == null) {
+            requestParameters = new Bundle();
+        }
+
+        String jsonString = events.toString();
+        if (jsonString != null) {
+            requestParameters.putByteArray(
+                    "custom_events_file",
+                    getStringAsByteArray(jsonString));
+            request.setTag(jsonString);
+        }
+        request.setParameters(requestParameters);
+    }
+
+    private byte[] getStringAsByteArray(String jsonString) {
+        byte[] jsonUtf8 = null;
+        try {
+            jsonUtf8 = jsonString.getBytes("UTF-8");
+        } catch (UnsupportedEncodingException e) {
+            // shouldn't happen, but just in case:
+            Utility.logd("Encoding exception: ", e);
+        }
+        return jsonUtf8;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java b/facebook/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java
new file mode 100644
index 000000000..79346538b
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java
@@ -0,0 +1,283 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents.internal;
+
+import android.app.Activity;
+import android.app.Application;
+import android.content.Context;
+import android.os.Bundle;
+import android.util.Log;
+
+import com.facebook.FacebookSdk;
+import com.facebook.appevents.AppEventsLogger;
+import com.facebook.internal.FetchedAppSettings;
+import com.facebook.internal.FetchedAppSettingsManager;
+import com.facebook.internal.Utility;
+
+import java.util.UUID;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
+import java.util.concurrent.ScheduledFuture;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
+
+public class ActivityLifecycleTracker {
+    private static final String TAG = ActivityLifecycleTracker.class.getCanonicalName();
+    private static final String INCORRECT_IMPL_WARNING = "Unexpected activity pause without a " +
+            "matching activity resume. Logging data may be incorrect. Make sure you call " +
+            "activateApp from your Application's onCreate method";
+    private static final long INTERRUPTION_THRESHOLD_MILLISECONDS = 1000;
+    private static final ScheduledExecutorService singleThreadExecutor =
+            Executors.newSingleThreadScheduledExecutor();
+    private static volatile ScheduledFuture currentFuture;
+    private static AtomicInteger foregroundActivityCount = new AtomicInteger(0);
+    // This member should only be changed or updated when executing on the singleThreadExecutor.
+    private static volatile SessionInfo currentSession;
+    private static AtomicBoolean tracking = new AtomicBoolean(false);
+    private static String appId;
+    private static long currentActivityAppearTime;
+
+    public static void startTracking(Application application, final String appId) {
+        if (!tracking.compareAndSet(false, true)) {
+            return;
+        }
+
+        ActivityLifecycleTracker.appId = appId;
+
+        application.registerActivityLifecycleCallbacks(
+                new Application.ActivityLifecycleCallbacks() {
+                    @Override
+                    public void onActivityCreated(
+                            final Activity activity,
+                            Bundle savedInstanceState) {
+                        AppEventUtility.assertIsMainThread();
+                        ActivityLifecycleTracker.onActivityCreated(activity);
+                    }
+
+                    @Override
+                    public void onActivityStarted(Activity activity) {}
+
+                    @Override
+                    public void onActivityResumed(final Activity activity) {
+                        AppEventUtility.assertIsMainThread();
+                        ActivityLifecycleTracker.onActivityResumed(activity);
+                    }
+
+                    @Override
+                    public void onActivityPaused(final Activity activity) {
+                        AppEventUtility.assertIsMainThread();
+                        ActivityLifecycleTracker.onActivityPaused(activity);
+                    }
+
+                    @Override
+                    public void onActivityStopped(Activity activity) {
+                        AppEventsLogger.onContextStop();
+                    }
+
+                    @Override
+                    public void onActivitySaveInstanceState(Activity activity, Bundle outState) {
+                    }
+
+                    @Override
+                    public void onActivityDestroyed(Activity activity) {
+                    }
+                });
+    }
+
+    public static boolean isTracking() {
+        return tracking.get();
+    }
+
+    public static UUID getCurrentSessionGuid() {
+        return currentSession != null ? currentSession.getSessionId() : null;
+    }
+
+    // Public in order to allow unity sdk to correctly log app events
+    public static void onActivityCreated(Activity activity) {
+        final long currentTime = System.currentTimeMillis();
+        final Context applicationContext = activity.getApplicationContext();
+        final String activityName = Utility.getActivityName(activity);
+        final SourceApplicationInfo sourceApplicationInfo =
+                SourceApplicationInfo.Factory.create(activity);
+        Runnable handleActivityCreate = new Runnable() {
+            @Override
+            public void run() {
+                if (currentSession == null) {
+                    SessionInfo lastSession =
+                            SessionInfo.getStoredSessionInfo();
+                    if (lastSession != null) {
+                        SessionLogger.logDeactivateApp(
+                                applicationContext,
+                                activityName,
+                                lastSession,
+                                appId);
+                    }
+
+                    currentSession = new SessionInfo(currentTime, null);
+
+                    currentSession.setSourceApplicationInfo(sourceApplicationInfo);
+                    SessionLogger.logActivateApp(
+                            applicationContext,
+                            activityName,
+                            sourceApplicationInfo,
+                            appId);
+                }
+            }
+        };
+        singleThreadExecutor.execute(handleActivityCreate);
+    }
+
+    // Public in order to allow unity sdk to correctly log app events
+    public static void onActivityResumed(Activity activity) {
+        foregroundActivityCount.incrementAndGet();
+        cancelCurrentTask();
+        final long currentTime = System.currentTimeMillis();
+        ActivityLifecycleTracker.currentActivityAppearTime = currentTime;
+        final Context applicationContext = activity.getApplicationContext();
+        final String activityName = Utility.getActivityName(activity);
+        Runnable handleActivityResume = new Runnable() {
+            @Override
+            public void run() {
+                if (currentSession == null) {
+                    currentSession = new SessionInfo(currentTime, null);
+                    SessionLogger.logActivateApp(
+                            applicationContext,
+                            activityName,
+                            null,
+                            appId);
+                } else if (currentSession.getSessionLastEventTime() != null) {
+                    long suspendTime =
+                            currentTime - currentSession.getSessionLastEventTime();
+                    if (suspendTime > getSessionTimeoutInSeconds() * 1000) {
+                        // We were suspended for a significant amount of time.
+                        // Count this as a new session and log the old session
+                        SessionLogger.logDeactivateApp(
+                                applicationContext,
+                                activityName,
+                                currentSession,
+                                appId);
+                        SessionLogger.logActivateApp(
+                                applicationContext,
+                                activityName,
+                                null,
+                                appId);
+                        currentSession = new SessionInfo(currentTime, null);
+                    } else if (suspendTime > INTERRUPTION_THRESHOLD_MILLISECONDS) {
+                        currentSession.incrementInterruptionCount();
+                    }
+                }
+
+                currentSession.setSessionLastEventTime(currentTime);
+                currentSession.writeSessionToDisk();
+            }
+        };
+
+        singleThreadExecutor.execute(handleActivityResume);
+    }
+
+    private static void onActivityPaused(Activity activity) {
+        int count = foregroundActivityCount.decrementAndGet();
+        if (count < 0) {
+            // Our ref count can be off if a developer doesn't call activate
+            // app from the Application's onCreate method.
+            foregroundActivityCount.set(0);
+
+            Log.w(TAG, INCORRECT_IMPL_WARNING);
+        }
+
+        cancelCurrentTask();
+        final long currentTime = System.currentTimeMillis();
+
+        // Pull out this information now to avoid holding a reference to the activity
+        final Context applicationContext = activity.getApplicationContext();
+        final String activityName = Utility.getActivityName(activity);
+
+        Runnable handleActivityPaused = new Runnable() {
+            @Override
+            public void run() {
+                if (currentSession == null) {
+                    // This can happen if a developer doesn't call activate
+                    // app from the Application's onCreate method
+                    currentSession = new SessionInfo(currentTime, null);
+                }
+
+                currentSession.setSessionLastEventTime(currentTime);
+                if (foregroundActivityCount.get() <= 0) {
+                    // Schedule check to see if we still have 0 foreground
+                    // activities in our set time. This indicates that the app has
+                    // been backgrounded
+                    Runnable task = new Runnable() {
+                        @Override
+                        public void run() {
+                            if (foregroundActivityCount.get() <= 0) {
+                                SessionLogger.logDeactivateApp(
+                                        applicationContext,
+                                        activityName,
+                                        currentSession,
+                                        appId);
+                                SessionInfo.clearSavedSessionFromDisk();
+                                currentSession = null;
+                            }
+
+                            currentFuture = null;
+                        }
+                    };
+                    currentFuture = singleThreadExecutor.schedule(
+                            task,
+                            getSessionTimeoutInSeconds(),
+                            TimeUnit.SECONDS);
+
+                }
+
+                long appearTime = ActivityLifecycleTracker.currentActivityAppearTime;
+                long timeSpentOnActivityInSeconds =  appearTime > 0
+                        ? (currentTime - appearTime) / 1000
+                        : 0;
+                AutomaticAnalyticsLogger.logActivityTimeSpentEvent(
+                        activityName,
+                        timeSpentOnActivityInSeconds
+                );
+
+                currentSession.writeSessionToDisk();
+            }
+        };
+        singleThreadExecutor.execute(handleActivityPaused);
+    }
+
+    private static int getSessionTimeoutInSeconds() {
+        FetchedAppSettings settings =
+                FetchedAppSettingsManager.getAppSettingsWithoutQuery(FacebookSdk.getApplicationId());
+        if (settings == null) {
+            return Constants.getDefaultAppEventsSessionTimeoutInSeconds();
+        }
+
+        return settings.getSessionTimeoutInSeconds();
+    }
+
+    private static void cancelCurrentTask() {
+        if (currentFuture != null) {
+            currentFuture.cancel(false);
+        }
+
+        currentFuture = null;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/AppEventUtility.java b/facebook/src/main/java/com/facebook/appevents/internal/AppEventUtility.java
new file mode 100644
index 000000000..c9455ce57
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/internal/AppEventUtility.java
@@ -0,0 +1,49 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents.internal;
+
+import android.os.Looper;
+import android.support.v4.BuildConfig;
+
+import junit.framework.Assert;
+
+public class AppEventUtility {
+    public static void assertIsNotMainThread() {
+        if (BuildConfig.DEBUG) {
+            Assert.assertFalse(
+                    "Call cannot be made on the main thread",
+                    isMainThread());
+        }
+    }
+
+    public static void assertIsMainThread() {
+        if (BuildConfig.DEBUG) {
+            Assert.assertTrue(
+                    "Call must be made on the main thread",
+                    isMainThread());
+        }
+    }
+
+    private static boolean isMainThread() {
+        return Looper.myLooper() == Looper.getMainLooper();
+    }
+
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/AutomaticAnalyticsLogger.java b/facebook/src/main/java/com/facebook/appevents/internal/AutomaticAnalyticsLogger.java
new file mode 100644
index 000000000..bb9b7f6cb
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/internal/AutomaticAnalyticsLogger.java
@@ -0,0 +1,77 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents.internal;
+
+import android.app.Application;
+import android.content.Context;
+import android.os.Bundle;
+import android.util.Log;
+
+import com.facebook.FacebookSdk;
+import com.facebook.appevents.AppEventsLogger;
+import com.facebook.internal.FetchedAppSettings;
+import com.facebook.internal.FetchedAppSettingsManager;
+import com.facebook.internal.Validate;
+
+/**
+ * com.facebook.appevents.internal is solely for the use of other packages within the
+ * Facebook SDK for Android. Use of any of the classes in this package is
+ * unsupported, and they may be modified or removed without warning at any time.
+ */
+public class AutomaticAnalyticsLogger {
+    // Constants
+    private static final String TAG = AutomaticAnalyticsLogger.class.getCanonicalName();
+
+    public static void logActivateAppEvent() {
+        final Context context = FacebookSdk.getApplicationContext();
+        final String appId = FacebookSdk.getApplicationId();
+        final boolean autoLogAppEvents = FacebookSdk.getAutoLogAppEventsEnabled();
+        Validate.notNull(context, "context");
+        if (autoLogAppEvents) {
+            if (context instanceof Application) {
+                AppEventsLogger.activateApp((Application) context, appId);
+            } else { // Context is probably originated from ContentProvider or Mocked
+                Log.w(
+                    TAG,
+                    "Automatic logging of basic events will not happen, because " +
+                      "FacebookSdk.getApplicationContext() returns object that is not " +
+                      "instance of android.app.Application. Make sure you call " +
+                      "FacebookSdk.sdkInitialize() from Application class and pass " +
+                      "application context.");
+            }
+        }
+    }
+
+    public static void logActivityTimeSpentEvent(String activityName, long timeSpentInSeconds) {
+        final Context context = FacebookSdk.getApplicationContext();
+        final String appId = FacebookSdk.getApplicationId();
+        Validate.notNull(context, "context");
+        final FetchedAppSettings settings = FetchedAppSettingsManager.queryAppSettings(
+                appId, false);
+        if (settings != null && settings.getAutomaticLoggingEnabled() && timeSpentInSeconds > 0) {
+            AppEventsLogger appEventsLogger = AppEventsLogger.newLogger(context);
+            Bundle params = new Bundle(1);
+            params.putCharSequence(Constants.AA_TIME_SPENT_SCREEN_PARAMETER_NAME, activityName);
+            appEventsLogger.logEvent(
+                Constants.AA_TIME_SPENT_EVENT_NAME, timeSpentInSeconds, params);
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/Constants.java b/facebook/src/main/java/com/facebook/appevents/internal/Constants.java
new file mode 100644
index 000000000..ca120fb4b
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/internal/Constants.java
@@ -0,0 +1,35 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents.internal;
+
+public class Constants {
+    public static final String LOG_TIME_APP_EVENT_KEY = "_logTime";
+    public static final String EVENT_NAME_EVENT_KEY = "_eventName";
+    public static final String EVENT_NAME_MD5_EVENT_KEY = "_eventName_md5";
+
+    // The following are for Automatic Analytics events and parameters
+    public static final String AA_TIME_SPENT_EVENT_NAME = "fb_aa_time_spent_on_view";
+    public static final String AA_TIME_SPENT_SCREEN_PARAMETER_NAME = "fb_aa_time_spent_view_name";
+
+    public static int getDefaultAppEventsSessionTimeoutInSeconds() {
+        return 60;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/InternalAppEventsLogger.java b/facebook/src/main/java/com/facebook/appevents/internal/InternalAppEventsLogger.java
new file mode 100644
index 000000000..1ab9d0d67
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/internal/InternalAppEventsLogger.java
@@ -0,0 +1,35 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents.internal;
+
+import com.facebook.AccessToken;
+import com.facebook.appevents.AppEventsLogger;
+
+// This class extends the AppEventsLogger to be able to expose creating an app events logger
+// without passing in a context which is required when using AppEventsLogger.newLogger
+class InternalAppEventsLogger extends AppEventsLogger {
+    InternalAppEventsLogger(
+            String activityName,
+            String applicationId,
+            AccessToken accessToken) {
+        super(activityName, applicationId, accessToken);
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/SessionInfo.java b/facebook/src/main/java/com/facebook/appevents/internal/SessionInfo.java
new file mode 100644
index 000000000..7e6b18792
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/internal/SessionInfo.java
@@ -0,0 +1,162 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents.internal;
+
+import android.content.SharedPreferences;
+import android.preference.PreferenceManager;
+
+import com.facebook.FacebookSdk;
+
+import java.util.UUID;
+
+class SessionInfo {
+    private static final String LAST_SESSION_INFO_START_KEY
+            = "com.facebook.appevents.SessionInfo.sessionStartTime";
+    private static final String LAST_SESSION_INFO_END_KEY
+            = "com.facebook.appevents.SessionInfo.sessionEndTime";
+    private static final String INTERRUPTION_COUNT_KEY
+            = "com.facebook.appevents.SessionInfo.interruptionCount";
+    private static final String SESSION_ID_KEY
+            = "com.facebook.appevents.SessionInfo.sessionId";
+
+    private Long sessionStartTime;
+    private Long sessionLastEventTime;
+    private int interruptionCount;
+    private Long diskRestoreTime;
+    private SourceApplicationInfo sourceApplicationInfo;
+    private UUID sessionId;
+
+    public SessionInfo(Long sessionStartTime, Long sessionLastEventTime) {
+        this(sessionStartTime, sessionLastEventTime, UUID.randomUUID());
+    }
+
+    public SessionInfo(Long sessionStartTime, Long sessionLastEventTime, UUID sessionId) {
+        this.sessionStartTime = sessionStartTime;
+        this.sessionLastEventTime = sessionLastEventTime;
+        this.sessionId = sessionId;
+    }
+
+    /**
+     * Performs disk IO. Do not call from main thread
+     * @return
+     */
+    public static SessionInfo getStoredSessionInfo() {
+        SharedPreferences sharedPreferences =
+            PreferenceManager.getDefaultSharedPreferences(
+                    FacebookSdk.getApplicationContext());
+        
+        long startTime = sharedPreferences.getLong(LAST_SESSION_INFO_START_KEY, 0);
+        long endTime = sharedPreferences.getLong(LAST_SESSION_INFO_END_KEY, 0);
+        String sessionIDStr = sharedPreferences.getString(SESSION_ID_KEY, null);
+
+        if (startTime == 0 || endTime == 0 || sessionIDStr == null) {
+            return null;
+        }
+
+        SessionInfo sessionInfo = new SessionInfo(startTime, endTime);
+        sessionInfo.interruptionCount = sharedPreferences.getInt(INTERRUPTION_COUNT_KEY, 0);
+        sessionInfo.sourceApplicationInfo = SourceApplicationInfo.getStoredSourceApplicatioInfo();
+        sessionInfo.diskRestoreTime = System.currentTimeMillis();
+        sessionInfo.sessionId = UUID.fromString(sessionIDStr);
+        return sessionInfo;
+    }
+
+    public static void clearSavedSessionFromDisk() {
+        SharedPreferences sharedPreferences =
+                PreferenceManager.getDefaultSharedPreferences(
+                        FacebookSdk.getApplicationContext());
+        SharedPreferences.Editor editor = sharedPreferences.edit();
+        editor.remove(LAST_SESSION_INFO_START_KEY);
+        editor.remove(LAST_SESSION_INFO_END_KEY);
+        editor.remove(INTERRUPTION_COUNT_KEY);
+        editor.remove(SESSION_ID_KEY);
+        editor.apply();
+
+        SourceApplicationInfo.clearSavedSourceApplicationInfoFromDisk();
+    }
+
+    public Long getSessionStartTime() {
+        return sessionStartTime;
+    }
+
+    public Long getSessionLastEventTime() {
+        return sessionLastEventTime;
+    }
+
+    public void setSessionStartTime(Long sessionStartTime) {
+        this.sessionStartTime = sessionStartTime;
+    }
+
+    public void setSessionLastEventTime(Long essionLastEventTime) {
+        this.sessionLastEventTime = essionLastEventTime;
+    }
+
+    public int getInterruptionCount() {
+        return interruptionCount;
+    }
+
+    public void incrementInterruptionCount() {
+        interruptionCount++;
+    }
+
+    public long getDiskRestoreTime() {
+        return diskRestoreTime == null ? 0 : diskRestoreTime;
+    }
+
+    public UUID getSessionId() {
+        return sessionId;
+    }
+
+    public long getSessionLength() {
+        if (sessionStartTime == null || sessionLastEventTime == null) {
+            return 0;
+        }
+
+        return sessionLastEventTime - sessionStartTime;
+    }
+
+    public SourceApplicationInfo getSourceApplicationInfo() {
+        return sourceApplicationInfo;
+    }
+
+    public void setSourceApplicationInfo(SourceApplicationInfo sourceApplicationInfo) {
+        this.sourceApplicationInfo = sourceApplicationInfo;
+    }
+
+    /**
+     * Performs disk IO. Do not call from main thread
+     */
+    public void writeSessionToDisk() {
+        SharedPreferences sharedPreferences =
+                PreferenceManager.getDefaultSharedPreferences(
+                        FacebookSdk.getApplicationContext());
+        SharedPreferences.Editor editor = sharedPreferences.edit();
+        editor.putLong(LAST_SESSION_INFO_START_KEY, this.sessionStartTime);
+        editor.putLong(LAST_SESSION_INFO_END_KEY, this.sessionLastEventTime);
+        editor.putInt(INTERRUPTION_COUNT_KEY, this.interruptionCount);
+        editor.putString(SESSION_ID_KEY, this.sessionId.toString());
+        editor.apply();
+
+        if (sourceApplicationInfo != null) {
+            sourceApplicationInfo.writeSourceApplicationInfoToDisk();
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/SessionLogger.java b/facebook/src/main/java/com/facebook/appevents/internal/SessionLogger.java
new file mode 100644
index 000000000..093519f17
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/internal/SessionLogger.java
@@ -0,0 +1,150 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents.internal;
+
+import android.content.Context;
+import android.os.Bundle;
+import android.text.format.DateUtils;
+
+import com.facebook.LoggingBehavior;
+import com.facebook.appevents.AppEventsConstants;
+import com.facebook.appevents.AppEventsLogger;
+import com.facebook.internal.Logger;
+
+import java.util.Locale;
+
+class SessionLogger {
+    private static final String TAG = SessionLogger.class.getCanonicalName();
+
+    private static final long[] INACTIVE_SECONDS_QUANTA =
+        new long[] {
+            5 * DateUtils.MINUTE_IN_MILLIS,
+            15 * DateUtils.MINUTE_IN_MILLIS,
+            30 * DateUtils.MINUTE_IN_MILLIS,
+            1 * DateUtils.HOUR_IN_MILLIS,
+            6 * DateUtils.HOUR_IN_MILLIS,
+            12 * DateUtils.HOUR_IN_MILLIS,
+            1 * DateUtils.DAY_IN_MILLIS,
+            2 * DateUtils.DAY_IN_MILLIS,
+            3 * DateUtils.DAY_IN_MILLIS,
+            7 * DateUtils.DAY_IN_MILLIS,
+            14 * DateUtils.DAY_IN_MILLIS,
+            21 * DateUtils.DAY_IN_MILLIS,
+            28 * DateUtils.DAY_IN_MILLIS,
+            60 * DateUtils.DAY_IN_MILLIS,
+            90 * DateUtils.DAY_IN_MILLIS,
+            120 * DateUtils.DAY_IN_MILLIS,
+            150 * DateUtils.DAY_IN_MILLIS,
+            180 * DateUtils.DAY_IN_MILLIS,
+            365 * DateUtils.DAY_IN_MILLIS,
+        };
+
+    public static void logActivateApp(
+            Context applicationContext,
+            String activityName,
+            SourceApplicationInfo sourceApplicationInfo,
+            String appId
+    ) {
+        String sourAppInfoStr = sourceApplicationInfo != null
+                ? sourceApplicationInfo.toString()
+                : "Unclassified";
+
+        Bundle eventParams = new Bundle();
+        eventParams.putString(
+                AppEventsConstants.EVENT_PARAM_SOURCE_APPLICATION,
+                sourAppInfoStr);
+        AppEventsLogger logger = new InternalAppEventsLogger(
+                activityName,
+                appId,
+                null);
+        logger.logEvent(AppEventsConstants.EVENT_NAME_ACTIVATED_APP, eventParams);
+        if (logger.getFlushBehavior() != AppEventsLogger.FlushBehavior.EXPLICIT_ONLY) {
+          logger.flush();
+        }
+    }
+
+    public static void logDeactivateApp(
+            Context applicationContext,
+            String activityName,
+            SessionInfo sessionInfo,
+            String appId) {
+
+        Long interruptionDurationMillis =
+                sessionInfo.getDiskRestoreTime() - sessionInfo.getSessionLastEventTime();
+        if (interruptionDurationMillis < 0) {
+            interruptionDurationMillis = 0l;
+            logClockSkewEvent();
+        }
+
+        Long sessionLength = sessionInfo.getSessionLength();
+        if (sessionLength < 0) {
+            logClockSkewEvent();
+            sessionLength = 0l;
+        }
+
+        Bundle eventParams = new Bundle();
+        eventParams.putInt(
+                AppEventsConstants.EVENT_NAME_SESSION_INTERRUPTIONS,
+                sessionInfo.getInterruptionCount());
+        eventParams.putString(
+                AppEventsConstants.EVENT_NAME_TIME_BETWEEN_SESSIONS,
+                String.format(
+                        Locale.ROOT,
+                        "session_quanta_%d",
+                        getQuantaIndex(interruptionDurationMillis)));
+        SourceApplicationInfo sourceApplicationInfo = sessionInfo.getSourceApplicationInfo();
+        String sourAppInfoStr = sourceApplicationInfo != null
+                ? sourceApplicationInfo.toString()
+                : "Unclassified";
+        eventParams.putString(
+                AppEventsConstants.EVENT_PARAM_SOURCE_APPLICATION,
+                sourAppInfoStr);
+
+        eventParams.putLong(Constants.LOG_TIME_APP_EVENT_KEY,
+                sessionInfo.getSessionLastEventTime() / 1000);
+
+        new InternalAppEventsLogger(
+                activityName,
+                appId,
+                null)
+                .logEvent(
+                    AppEventsConstants.EVENT_NAME_DEACTIVATED_APP,
+                    (sessionLength / DateUtils.SECOND_IN_MILLIS),
+                    eventParams);
+    }
+
+    private static void logClockSkewEvent() {
+        Logger.log(LoggingBehavior.APP_EVENTS, TAG, "Clock skew detected");
+    }
+
+    private static int getQuantaIndex(long timeBetweenSessions) {
+        int quantaIndex = 0;
+
+        while (
+                quantaIndex < INACTIVE_SECONDS_QUANTA.length &&
+                        INACTIVE_SECONDS_QUANTA[quantaIndex] < timeBetweenSessions
+                ) {
+            ++quantaIndex;
+        }
+
+        return quantaIndex;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/SourceApplicationInfo.java b/facebook/src/main/java/com/facebook/appevents/internal/SourceApplicationInfo.java
new file mode 100644
index 000000000..53679e0d4
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/appevents/internal/SourceApplicationInfo.java
@@ -0,0 +1,148 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents.internal;
+
+import android.app.Activity;
+import android.content.ComponentName;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.preference.PreferenceManager;
+
+import com.facebook.FacebookSdk;
+
+import bolts.AppLinks;
+
+class SourceApplicationInfo {
+    private static final String SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT =
+            "_fbSourceApplicationHasBeenSet";
+    private static final String CALL_APPLICATION_PACKAGE_KEY
+            = "com.facebook.appevents.SourceApplicationInfo.callingApplicationPackage";
+    private static final String OPENED_BY_APP_LINK_KEY
+            = "com.facebook.appevents.SourceApplicationInfo.openedByApplink";
+
+    private String callingApplicationPackage;
+    private boolean openedByApplink;
+
+    private SourceApplicationInfo(String callingApplicationPackage, boolean openedByApplink) {
+        this.callingApplicationPackage = callingApplicationPackage;
+        this.openedByApplink = openedByApplink;
+    }
+
+    public static SourceApplicationInfo getStoredSourceApplicatioInfo() {
+        SharedPreferences sharedPreferences =
+                PreferenceManager.getDefaultSharedPreferences(
+                        FacebookSdk.getApplicationContext());
+
+        if (!sharedPreferences.contains(CALL_APPLICATION_PACKAGE_KEY)) {
+            return null;
+        }
+
+        String callingApplicationPackage = sharedPreferences.getString(
+                CALL_APPLICATION_PACKAGE_KEY,
+                null);
+        boolean openedByApplink = sharedPreferences.getBoolean(OPENED_BY_APP_LINK_KEY, false);
+
+        return new SourceApplicationInfo(callingApplicationPackage, openedByApplink);
+    }
+
+    public static void clearSavedSourceApplicationInfoFromDisk() {
+        SharedPreferences sharedPreferences =
+                PreferenceManager.getDefaultSharedPreferences(
+                        FacebookSdk.getApplicationContext());
+        SharedPreferences.Editor editor = sharedPreferences.edit();
+        editor.remove(CALL_APPLICATION_PACKAGE_KEY);
+        editor.remove(OPENED_BY_APP_LINK_KEY);
+        editor.apply();
+    }
+
+    public String getCallingApplicationPackage() {
+        return callingApplicationPackage;
+    }
+
+    public boolean isOpenedByApplink() {
+        return openedByApplink;
+    }
+
+    @Override
+    public String toString() {
+        String openType = "Unclassified";
+        if (openedByApplink) {
+            openType = "Applink";
+        }
+
+        if (callingApplicationPackage != null) {
+            return openType + "(" + callingApplicationPackage + ")";
+        }
+        return openType;
+    }
+
+    public void writeSourceApplicationInfoToDisk() {
+        SharedPreferences sharedPreferences =
+                PreferenceManager.getDefaultSharedPreferences(
+                        FacebookSdk.getApplicationContext());
+        SharedPreferences.Editor editor = sharedPreferences.edit();
+        editor.putString(CALL_APPLICATION_PACKAGE_KEY, this.callingApplicationPackage);
+        editor.putBoolean(OPENED_BY_APP_LINK_KEY, this.openedByApplink);
+        editor.apply();
+    }
+
+    public static class Factory {
+        public static SourceApplicationInfo create(Activity activity) {
+            boolean openedByApplink = false;
+
+            ComponentName callingApplication = activity.getCallingActivity();
+            if (callingApplication == null) {
+                return null;
+            }
+
+            String callingApplicationPackage = callingApplication.getPackageName();
+            if (callingApplicationPackage.equals(activity.getPackageName())) {
+                // opened by own app.
+                return null;
+            }
+
+            // Tap icon to open an app will still get the old intent if the activity was opened by
+            // an intent before. Introduce an extra field in the intent to force clear the
+            // sourceApplication.
+            Intent openIntent = activity.getIntent();
+            if (openIntent != null
+                && !openIntent.getBooleanExtra(
+                    SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT,
+                    false)) {
+                openIntent.putExtra(SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT, true);
+                Bundle applinkData = AppLinks.getAppLinkData(openIntent);
+                if (applinkData != null) {
+                    openedByApplink = true;
+                    Bundle applinkReferrerData = applinkData.getBundle("referer_app_link");
+                    if (applinkReferrerData != null) {
+                        String applinkReferrerPackage = applinkReferrerData.getString("package");
+                        callingApplicationPackage = applinkReferrerPackage;
+                    }
+                }
+            }
+
+            // Mark this intent has been used to avoid use this intent again and again.
+            openIntent.putExtra(SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT, true);
+            return new SourceApplicationInfo(callingApplicationPackage, openedByApplink);
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/applinks/AppLinkData.java b/facebook/src/main/java/com/facebook/applinks/AppLinkData.java
index 9678779f3..c656c65ce 100644
--- a/facebook/src/main/java/com/facebook/applinks/AppLinkData.java
+++ b/facebook/src/main/java/com/facebook/applinks/AppLinkData.java
@@ -59,6 +59,11 @@
      */
     public static final String ARGUMENTS_REFERER_DATA_KEY = "referer_data";
 
+    /**
+     * Key that should be used to get the "extras" field for this app link.
+     */
+    public static final String ARGUMENTS_EXTRAS_KEY = "extras";
+
     /**
      * Key that should be used to pull out the native class that would have been used if the applink
      * was deferred.
@@ -89,12 +94,15 @@
     private static final String METHOD_ARGS_TARGET_URL_KEY = "target_url";
     private static final String METHOD_ARGS_REF_KEY = "ref";
     private static final String REFERER_DATA_REF_KEY = "fb_ref";
+    private static final String EXTRAS_DEEPLINK_CONTEXT_KEY = "deeplink_context";
+    private static final String PROMOTION_CODE_KEY = "promo_code";
     private static final String TAG = AppLinkData.class.getCanonicalName();
 
     private String ref;
     private Uri targetUri;
     private JSONObject arguments;
     private Bundle argumentBundle;
+    private String promotionCode;
 
     /**
      * Asynchronously fetches app link information that might have been stored for use after
@@ -155,6 +163,9 @@ private static void fetchDeferredAppLinkFromServer(
                     AttributionIdentifiers.getAttributionIdentifiers(context),
                     AppEventsLogger.getAnonymousAppDeviceGUID(context),
                     FacebookSdk.getLimitEventAndDataUsage(context));
+            Utility.setAppEventExtendedDeviceInfoParameters(
+                    deferredApplinkParams,
+                    FacebookSdk.getApplicationContext());
             deferredApplinkParams.put("application_package_name", context.getPackageName());
         } catch (JSONException e) {
             throw new FacebookException("An error occurred while preparing deferred app link", e);
@@ -286,6 +297,21 @@ public static AppLinkData createFromAlApplinkData(Intent intent) {
             appLinkData.ref = refererData.getString(REFERER_DATA_REF_KEY);
         }
 
+        Bundle extras = applinks.getBundle(ARGUMENTS_EXTRAS_KEY);
+        if (extras != null) {
+            String deeplinkContext = extras.getString(EXTRAS_DEEPLINK_CONTEXT_KEY);
+            if (deeplinkContext != null) {
+                try {
+                    JSONObject dlContextJson = new JSONObject(deeplinkContext);
+                    if (dlContextJson.has(PROMOTION_CODE_KEY)) {
+                        appLinkData.promotionCode = dlContextJson.getString(PROMOTION_CODE_KEY);
+                    }
+                } catch (JSONException e) {
+                    Log.d(TAG, "Unable to parse deeplink_context JSON", e);
+                }
+            }
+        }
+
         return appLinkData;
     }
 
@@ -323,6 +349,19 @@ private static AppLinkData createFromJson(String jsonString) {
                             appLinkData.arguments.getString(METHOD_ARGS_TARGET_URL_KEY));
                 }
 
+                if (appLinkData.arguments.has(ARGUMENTS_EXTRAS_KEY)) {
+                    JSONObject extrasData =
+                            appLinkData.arguments.getJSONObject(ARGUMENTS_EXTRAS_KEY);
+                    if (extrasData.has(EXTRAS_DEEPLINK_CONTEXT_KEY)) {
+                        JSONObject deeplink_context =
+                                extrasData.getJSONObject(EXTRAS_DEEPLINK_CONTEXT_KEY);
+                        if (deeplink_context.has(PROMOTION_CODE_KEY)) {
+                            appLinkData.promotionCode =
+                                    deeplink_context.getString(PROMOTION_CODE_KEY);
+                        }
+                    }
+                }
+
                 appLinkData.argumentBundle = toBundle(appLinkData.arguments);
 
                 return appLinkData;
@@ -407,6 +446,14 @@ public String getRef() {
         return ref;
     }
 
+    /**
+     * Returns the promotion code for this App Link.
+     * @return promotion code
+     */
+    public String getPromotionCode() {
+        return promotionCode;
+    }
+
     /**
      * The full set of arguments for this app link. Properties like target uri & ref are typically
      * picked out of this set of arguments.
diff --git a/facebook/src/main/java/com/facebook/applinks/FacebookAppLinkResolver.java b/facebook/src/main/java/com/facebook/applinks/FacebookAppLinkResolver.java
index 807d92f1f..6045c7129 100644
--- a/facebook/src/main/java/com/facebook/applinks/FacebookAppLinkResolver.java
+++ b/facebook/src/main/java/com/facebook/applinks/FacebookAppLinkResolver.java
@@ -28,15 +28,20 @@
 import com.facebook.GraphRequest;
 import com.facebook.GraphResponse;
 
-import bolts.AppLink;
-import bolts.AppLinkResolver;
-import bolts.Continuation;
-import bolts.Task;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.util.*;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+
+import bolts.AppLink;
+import bolts.AppLinkResolver;
+import bolts.Continuation;
+import bolts.Task;
 
 /**
  * Provides an implementation for the {@link AppLinkResolver AppLinkResolver} interface that uses
@@ -93,7 +98,7 @@ public AppLink then(Task<Map<Uri, AppLink>> resolveUrisTask) throws Exception {
         StringBuilder graphRequestFields = new StringBuilder();
 
         for (Uri uri : uris) {
-            AppLink appLink = null;
+            AppLink appLink;
             synchronized (cachedAppLinks) {
                 appLink = cachedAppLinks.get(uri);
             }
@@ -153,7 +158,7 @@ public void onCompleted(GraphResponse response) {
                                 continue;
                             }
 
-                            JSONObject urlData = null;
+                            JSONObject urlData;
                             try {
                                 urlData = responseJson.getJSONObject(uri.toString());
                                 JSONObject appLinkData = urlData.getJSONObject(APP_LINK_KEY);
diff --git a/facebook/src/main/java/com/facebook/devicerequests/internal/DeviceRequestsHelper.java b/facebook/src/main/java/com/facebook/devicerequests/internal/DeviceRequestsHelper.java
new file mode 100644
index 000000000..8c0803f6a
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/devicerequests/internal/DeviceRequestsHelper.java
@@ -0,0 +1,177 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.devicerequests.internal;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.net.nsd.NsdManager;
+import android.net.nsd.NsdServiceInfo;
+import android.os.Build;
+
+import com.facebook.FacebookSdk;
+import com.facebook.internal.FetchedAppSettingsManager;
+import com.facebook.internal.SmartLoginOption;
+import com.facebook.internal.Utility;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.HashMap;
+
+/**
+ * com.facebook.devicerequests.internal is solely for the use of other packages within the
+ * Facebook SDK for Android. Use of any of the classes in this package is
+ * unsupported, and they may be modified or removed without warning at any time.
+ */
+public class DeviceRequestsHelper {
+
+    public static final String DEVICE_INFO_PARAM = "device_info";
+
+    static final String DEVICE_INFO_DEVICE = "device";
+    static final String DEVICE_INFO_MODEL = "model";
+
+    static final String SDK_HEADER = "fbsdk";
+    static final String SDK_FLAVOR = "android";
+
+    static final String SERVICE_TYPE = "_fb._tcp.";
+
+    private static HashMap<String, NsdManager.RegistrationListener> deviceRequestsListeners =
+            new HashMap<>();
+
+    public static String getDeviceInfo() {
+        // Device info
+        // We don't need all the information in Utility.setAppEventExtendedDeviceInfoParameters
+        // We only want the model so we can show it to the user, so they know which device
+        // the login request comes from
+        JSONObject deviceInfo = new JSONObject();
+        try {
+            deviceInfo.put(DEVICE_INFO_DEVICE, Build.DEVICE);
+            deviceInfo.put(DEVICE_INFO_MODEL, Build.MODEL);
+        } catch (JSONException ignored) {
+        }
+
+        return deviceInfo.toString();
+    }
+
+    public static boolean startAdvertisementService(String userCode) {
+        if (isAvailable()) {
+            return startAdvertisementServiceImpl(userCode);
+        }
+
+        return false;
+    }
+
+    /*
+    returns true if smart login is enabled and the android api level is supported.
+     */
+    public static boolean isAvailable() {
+        return (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) &&
+                FetchedAppSettingsManager.getAppSettingsWithoutQuery(FacebookSdk.getApplicationId()).
+                        getSmartLoginOptions().contains(SmartLoginOption.Enabled);
+    }
+
+    public static void cleanUpAdvertisementService(String userCode) {
+        cleanUpAdvertisementServiceImpl(userCode);
+    }
+
+    @TargetApi(16)
+    private static boolean startAdvertisementServiceImpl(final String userCode) {
+        if (deviceRequestsListeners.containsKey(userCode)) {
+            return true;
+        }
+
+        // Dots in the version will mess up the Bonjour DNS record parsing
+        String sdkVersion = FacebookSdk.getSdkVersion().replace('.', '|');
+        // Other SDKs that adopt this feature should use different flavor name
+        // The whole name should not exceed 60 characters
+        final String nsdServiceName = String.format("%s_%s_%s",
+                // static identifier
+                SDK_HEADER,
+                // sdk type and version
+                // client app parses the string based on this version
+                String.format("%s-%s",
+                        SDK_FLAVOR,
+                        sdkVersion
+                ),
+
+                // Additional fields should be added here
+
+                // short code for the login flow
+                userCode
+        );
+
+        NsdServiceInfo nsdLoginAdvertisementService = new NsdServiceInfo();
+        nsdLoginAdvertisementService.setServiceType(SERVICE_TYPE);
+        nsdLoginAdvertisementService.setServiceName(nsdServiceName);
+        nsdLoginAdvertisementService.setPort(80);
+
+        NsdManager nsdManager = (NsdManager)FacebookSdk
+                .getApplicationContext()
+                .getSystemService(Context.NSD_SERVICE);
+
+        NsdManager.RegistrationListener nsdRegistrationListener =
+                new NsdManager.RegistrationListener() {
+                    @Override
+                    public void onServiceRegistered(NsdServiceInfo NsdServiceInfo) {
+                        // Android may have changed the service name in order to resolve a conflict
+                        if (!nsdServiceName.equals(NsdServiceInfo.getServiceName())) {
+                            cleanUpAdvertisementService(userCode);
+                        }
+                    }
+
+                    @Override
+                    public void onServiceUnregistered(NsdServiceInfo serviceInfo) {
+                    }
+
+                    @Override
+                    public void onRegistrationFailed(NsdServiceInfo serviceInfo, int errorCode) {
+                        cleanUpAdvertisementService(userCode);
+                    }
+
+                    @Override
+                    public void onUnregistrationFailed(NsdServiceInfo serviceInfo, int errorCode) {
+                    }
+                };
+
+        deviceRequestsListeners.put(userCode, nsdRegistrationListener);
+
+        nsdManager.registerService(nsdLoginAdvertisementService,
+                NsdManager.PROTOCOL_DNS_SD,
+                nsdRegistrationListener);
+
+        return true;
+    }
+
+    @TargetApi(16)
+    private static void cleanUpAdvertisementServiceImpl(String userCode) {
+        NsdManager.RegistrationListener nsdRegistrationListener =
+                deviceRequestsListeners.get(userCode);
+        if (nsdRegistrationListener != null) {
+            NsdManager nsdManager = (NsdManager)FacebookSdk
+                    .getApplicationContext()
+                    .getSystemService(Context.NSD_SERVICE);
+
+            nsdManager.unregisterService(nsdRegistrationListener);
+
+            deviceRequestsListeners.remove(userCode);
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/internal/AnalyticsEvents.java b/facebook/src/main/java/com/facebook/internal/AnalyticsEvents.java
index 4342b4743..bf23211b2 100644
--- a/facebook/src/main/java/com/facebook/internal/AnalyticsEvents.java
+++ b/facebook/src/main/java/com/facebook/internal/AnalyticsEvents.java
@@ -110,4 +110,9 @@
     public static final String EVENT_SEND_BUTTON_DID_TAP               = "fb_send_button_did_tap";
     public static final String EVENT_LIKE_BUTTON_DID_TAP               = "fb_like_button_did_tap";
     public static final String EVENT_LOGIN_BUTTON_DID_TAP               = "fb_login_button_did_tap";
+
+    public static final String EVENT_DEVICE_SHARE_BUTTON_CREATE = "fb_device_share_button_create";
+    public static final String EVENT_DEVICE_SHARE_BUTTON_DID_TAP= "fb_device_share_button_did_tap";
+
+    public static final String EVENT_SMART_LOGIN_SERVICE = "fb_smart_login_service";
 }
diff --git a/facebook/src/main/java/com/facebook/internal/AttributionIdentifiers.java b/facebook/src/main/java/com/facebook/internal/AttributionIdentifiers.java
index 0e94e9c05..16a0ee55f 100644
--- a/facebook/src/main/java/com/facebook/internal/AttributionIdentifiers.java
+++ b/facebook/src/main/java/com/facebook/internal/AttributionIdentifiers.java
@@ -162,6 +162,13 @@ private static AttributionIdentifiers getAndroidIdViaService(Context context) {
     }
 
     public static AttributionIdentifiers getAttributionIdentifiers(Context context) {
+        if (Looper.myLooper() == Looper.getMainLooper()) {
+            // Calling this method from the main thread might cause this app to freeze.
+            Log.e(
+                AttributionIdentifiers.TAG,
+                "getAttributionIdentifiers should not be called from the main thread");
+        }
+
         if (recentlyFetchedIdentifiers != null &&
             System.currentTimeMillis() - recentlyFetchedIdentifiers.fetchTime <
                     IDENTIFIER_REFRESH_INTERVAL_MILLIS) {
@@ -258,7 +265,9 @@ private static String getInstallerPackageName(Context context) {
         @Override
         public void onServiceConnected(ComponentName name, IBinder service) {
             try {
-                queue.put(service);
+                if (service != null) {
+                    queue.put(service);
+                }
             } catch (InterruptedException e) {
             }
         }
diff --git a/facebook/src/main/java/com/facebook/internal/CallbackManagerImpl.java b/facebook/src/main/java/com/facebook/internal/CallbackManagerImpl.java
index bc88153dc..d6d48272e 100644
--- a/facebook/src/main/java/com/facebook/internal/CallbackManagerImpl.java
+++ b/facebook/src/main/java/com/facebook/internal/CallbackManagerImpl.java
@@ -75,6 +75,10 @@ public void registerCallback(int requestCode, Callback callback) {
         callbacks.put(requestCode, callback);
     }
 
+    public void unregisterCallback(int requestCode) {
+        callbacks.remove(requestCode);
+    }
+
     @Override
     public boolean onActivityResult(int requestCode, int resultCode, Intent data) {
         Callback callback = callbacks.get(requestCode);
@@ -97,6 +101,7 @@ public boolean onActivityResult(int requestCode, int resultCode, Intent data) {
         AppGroupCreate(5),
         AppGroupJoin(6),
         AppInvite(7),
+        DeviceShare(8),
         ;
 
         private final int offset;
diff --git a/facebook/src/main/java/com/facebook/internal/CollectionMapper.java b/facebook/src/main/java/com/facebook/internal/CollectionMapper.java
index 6ab0f110a..191073e35 100644
--- a/facebook/src/main/java/com/facebook/internal/CollectionMapper.java
+++ b/facebook/src/main/java/com/facebook/internal/CollectionMapper.java
@@ -22,7 +22,6 @@
 
 import com.facebook.FacebookException;
 
-import java.util.HashSet;
 import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.List;
diff --git a/facebook/src/main/java/com/facebook/internal/CustomTab.java b/facebook/src/main/java/com/facebook/internal/CustomTab.java
new file mode 100644
index 000000000..91c345222
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/internal/CustomTab.java
@@ -0,0 +1,52 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+
+package com.facebook.internal;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.support.customtabs.CustomTabsIntent;
+
+import com.facebook.FacebookSdk;
+
+public class CustomTab {
+
+    private Uri uri;
+
+    public CustomTab(String action, Bundle parameters) {
+        if (parameters == null) {
+            parameters = new Bundle();
+        }
+        uri = Utility.buildUri(
+                ServerProtocol.getDialogAuthority(),
+                FacebookSdk.getGraphApiVersion() + "/" + ServerProtocol.DIALOG_PATH + action,
+                parameters);
+    }
+
+    public void openCustomTab(Activity activity, String packageName) {
+        CustomTabsIntent customTabsIntent = new CustomTabsIntent.Builder().build();
+        customTabsIntent.intent.setPackage(packageName);
+        customTabsIntent.intent.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);
+        customTabsIntent.launchUrl(activity, uri);
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/internal/DialogPresenter.java b/facebook/src/main/java/com/facebook/internal/DialogPresenter.java
index d2f934bd3..bb8584922 100644
--- a/facebook/src/main/java/com/facebook/internal/DialogPresenter.java
+++ b/facebook/src/main/java/com/facebook/internal/DialogPresenter.java
@@ -25,7 +25,6 @@
 import android.content.Intent;
 import android.net.Uri;
 import android.os.Bundle;
-import android.support.v4.app.Fragment;
 
 import com.facebook.FacebookActivity;
 import com.facebook.FacebookException;
@@ -72,7 +71,7 @@ public static void present(AppCall appCall, FragmentWrapper fragmentWrapper) {
 
     public static boolean canPresentNativeDialogWithFeature(
             DialogFeature feature) {
-        return getProtocolVersionForNativeDialog(feature)
+        return getProtocolVersionForNativeDialog(feature).getProtocolVersion()
                 != NativeProtocol.NO_PROTOCOL_AVAILABLE;
     }
 
@@ -185,7 +184,9 @@ public static void setupAppCallForNativeDialog(
             DialogFeature feature) {
         Context context = FacebookSdk.getApplicationContext();
         String action = feature.getAction();
-        int protocolVersion = getProtocolVersionForNativeDialog(feature);
+        NativeProtocol.ProtocolVersionQueryResult protocolVersionResult =
+                getProtocolVersionForNativeDialog(feature);
+        int protocolVersion = protocolVersionResult.getProtocolVersion();
         if (protocolVersion == NativeProtocol.NO_PROTOCOL_AVAILABLE) {
             throw new FacebookException(
                     "Cannot present this dialog. This likely means that the " +
@@ -208,7 +209,7 @@ public static void setupAppCallForNativeDialog(
                 context,
                 appCall.getCallId().toString(),
                 action,
-                protocolVersion,
+                protocolVersionResult,
                 params);
         if (intent == null) {
             throw new FacebookException(
@@ -224,8 +225,8 @@ private static Uri getDialogWebFallbackUri(DialogFeature feature) {
         String action = feature.getAction();
         String applicationId = FacebookSdk.getApplicationId();
 
-        Utility.DialogFeatureConfig config =
-                Utility.getDialogFeatureConfig(applicationId, action, featureName);
+        FetchedAppSettings.DialogFeatureConfig config =
+                FetchedAppSettings.getDialogFeatureConfig(applicationId, action, featureName);
         Uri fallbackUrl = null;
         if (config != null) {
             fallbackUrl = config.getFallbackUrl();
@@ -234,7 +235,7 @@ private static Uri getDialogWebFallbackUri(DialogFeature feature) {
         return fallbackUrl;
     }
 
-    public static int getProtocolVersionForNativeDialog(
+    public static NativeProtocol.ProtocolVersionQueryResult getProtocolVersionForNativeDialog(
             DialogFeature feature) {
         String applicationId = FacebookSdk.getApplicationId();
         String action = feature.getAction();
@@ -251,8 +252,8 @@ public static int getProtocolVersionForNativeDialog(
             DialogFeature feature) {
         // Return the value from DialogFeatureConfig if available. Otherwise, just
         // default to the min-version
-        Utility.DialogFeatureConfig config =
-                Utility.getDialogFeatureConfig(applicationId, actionName, feature.name());
+        FetchedAppSettings.DialogFeatureConfig config =
+                FetchedAppSettings.getDialogFeatureConfig(applicationId, actionName, feature.name());
         if (config != null) {
             return config.getVersionSpec();
         } else {
diff --git a/facebook/src/main/java/com/facebook/internal/FacebookDialogBase.java b/facebook/src/main/java/com/facebook/internal/FacebookDialogBase.java
index ce06c7ecd..3eabaf47c 100644
--- a/facebook/src/main/java/com/facebook/internal/FacebookDialogBase.java
+++ b/facebook/src/main/java/com/facebook/internal/FacebookDialogBase.java
@@ -21,6 +21,7 @@
 package com.facebook.internal;
 
 import android.app.Activity;
+import android.content.Intent;
 import android.util.Log;
 
 import com.facebook.CallbackManager;
@@ -28,6 +29,7 @@
 import com.facebook.FacebookDialog;
 import com.facebook.FacebookException;
 import com.facebook.FacebookSdk;
+import com.facebook.LoggingBehavior;
 
 import java.util.List;
 
@@ -98,13 +100,13 @@ protected abstract void registerCallbackImpl(
      *
      * @param requestCode the request code to use.
      */
-     protected void setRequestCode(int requestCode) {
-         if (FacebookSdk.isFacebookRequestCode(requestCode)) {
-             throw new IllegalArgumentException("Request code " + requestCode +
-                     " cannot be within the range reserved by the Facebook SDK.");
-         }
-         this.requestCode = requestCode;
-     }
+    protected void setRequestCode(int requestCode) {
+        if (FacebookSdk.isFacebookRequestCode(requestCode)) {
+            throw new IllegalArgumentException("Request code " + requestCode +
+                    " cannot be within the range reserved by the Facebook SDK.");
+        }
+        this.requestCode = requestCode;
+    }
 
     /**
      * Returns the request code used for this dialog.
@@ -115,7 +117,7 @@ public int getRequestCode() {
         return requestCode;
     }
 
-     @Override
+    @Override
     public boolean canShow(CONTENT content) {
         return canShowImpl(content, BASE_AUTOMATIC_MODE);
     }
@@ -128,7 +130,9 @@ protected boolean canShowImpl(CONTENT content, Object mode) {
             if (!anyModeAllowed && !Utility.areObjectsEqual(handler.getMode(), mode)) {
                 continue;
             }
-            if (handler.canShow(content)) {
+            // Calls to canShow() are not best effort like calls to show() are. So let's signal
+            // more explicitly whether the passed in content can be shown or not
+            if (handler.canShow(content, false /*isBestEffort*/)) {
                 return true;
             }
         }
@@ -172,6 +176,29 @@ protected Activity getActivityContext() {
         return null;
     }
 
+    protected void startActivityForResult(Intent intent, int requestCode) {
+        String error = null;
+        if (activity != null) {
+            activity.startActivityForResult(intent, requestCode);
+        } else if (fragmentWrapper != null) {
+            if (fragmentWrapper.getNativeFragment() != null) {
+                fragmentWrapper.getNativeFragment().startActivityForResult(intent, requestCode);
+            } else if (fragmentWrapper.getSupportFragment() != null) {
+                fragmentWrapper.getSupportFragment().startActivityForResult(intent, requestCode);
+            } else {
+                error = "Failed to find Activity or Fragment to startActivityForResult ";
+            }
+        } else {
+            error = "Failed to find Activity or Fragment to startActivityForResult ";
+        }
+        if (error != null) {
+            Logger.log(LoggingBehavior.DEVELOPER_ERRORS,
+                       Log.ERROR,
+                       this.getClass().getName(),
+                       error);
+        }
+    }
+
     private AppCall createAppCallForMode(final CONTENT content, final Object mode) {
         boolean anyModeAllowed = (mode == BASE_AUTOMATIC_MODE);
 
@@ -180,7 +207,7 @@ private AppCall createAppCallForMode(final CONTENT content, final Object mode) {
             if (!anyModeAllowed && !Utility.areObjectsEqual(handler.getMode(), mode)) {
                 continue;
             }
-            if (!handler.canShow(content)) {
+            if (!handler.canShow(content, true /*isBestEffort*/)) {
                 continue;
             }
 
@@ -221,7 +248,18 @@ public Object getMode() {
             return BASE_AUTOMATIC_MODE;
         }
 
-        public abstract boolean canShow(final CONTENT content);
+        /**
+         * Used when we want to signal back to the caller when required and optional features are
+         * not supported by specific Mode Handlers.
+         *
+         * @param content      Content to be checked
+         * @param isBestEffort Passing in true here will prevent signalling failure for optional or
+         *                     best-effort types of features. Passing in false will assume that
+         *                     optional or best-effort features should be treated the same as other
+         *                     features, and their support be enforced accordingly.
+         * @return True if can be shown
+         */
+        public abstract boolean canShow(final CONTENT content, boolean isBestEffort);
 
         public abstract AppCall createAppCall(final CONTENT content);
     }
diff --git a/facebook/src/main/java/com/facebook/internal/FacebookDialogFragment.java b/facebook/src/main/java/com/facebook/internal/FacebookDialogFragment.java
index fad56ee93..57d78ed6e 100644
--- a/facebook/src/main/java/com/facebook/internal/FacebookDialogFragment.java
+++ b/facebook/src/main/java/com/facebook/internal/FacebookDialogFragment.java
@@ -118,11 +118,18 @@ public Dialog onCreateDialog(Bundle savedInstanceState) {
         return dialog;
     }
 
+    @Override
+    public void onResume () {
+        super.onResume();
+        if (this.dialog instanceof WebDialog) {
+            ((WebDialog)this.dialog).resize();
+        }
+    }
+
     @Override
     public void onConfigurationChanged (Configuration newConfig) {
         super.onConfigurationChanged(newConfig);
-
-        if (this.dialog instanceof WebDialog) {
+        if (this.dialog instanceof WebDialog && isResumed()) {
             ((WebDialog)this.dialog).resize();
         }
     }
diff --git a/facebook/src/main/java/com/facebook/internal/FacebookInitProvider.java b/facebook/src/main/java/com/facebook/internal/FacebookInitProvider.java
new file mode 100644
index 000000000..e50f0f3af
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/internal/FacebookInitProvider.java
@@ -0,0 +1,60 @@
+// Copyright 2004-present Facebook. All Rights Reserved.
+
+package com.facebook.internal;
+
+import android.content.ContentProvider;
+import android.content.ContentValues;
+import android.database.Cursor;
+import android.net.Uri;
+import android.util.Log;
+
+import com.facebook.FacebookSdk;
+
+public final class FacebookInitProvider extends ContentProvider {
+    private static final String TAG = FacebookInitProvider.class.getSimpleName();
+
+    @Override
+    @SuppressWarnings("deprecation")
+    public boolean onCreate() {
+        try {
+            FacebookSdk.sdkInitialize(getContext());
+        } catch (Exception ex) {
+            Log.i(TAG, "Failed to auto initialize the Facebook SDK", ex);
+        }
+        return false;
+    }
+
+    @Override
+    public Cursor query(
+            final Uri uri,
+            final String[] projection,
+            final String selection,
+            final String[] selectionArgs,
+            final String sortOrder) {
+        return null;
+    }
+
+    @Override
+    public String getType(final Uri uri) {
+        return null;
+    }
+
+    @Override
+    public Uri insert(final Uri uri, final ContentValues values) {
+        return null;
+    }
+
+    @Override
+    public int delete(final Uri uri, final String selection, final String[] selectionArgs) {
+        return 0;
+    }
+
+    @Override
+    public int update(
+            final Uri uri,
+            final ContentValues values,
+            final String selection,
+            final String[] selectionArgs) {
+        return 0;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/internal/FacebookSignatureValidator.java b/facebook/src/main/java/com/facebook/internal/FacebookSignatureValidator.java
new file mode 100644
index 000000000..ee52d7955
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/internal/FacebookSignatureValidator.java
@@ -0,0 +1,85 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.internal;
+
+import java.util.HashSet;
+
+import android.content.Context;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.Signature;
+import android.os.Build;
+
+/**
+ * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
+ * Android. Use of any of the classes in this package is unsupported, and they may be modified or
+ * removed without warning at any time.
+ */
+public class FacebookSignatureValidator {
+
+  private static final String FBI_HASH = "a4b7452e2ed8f5f191058ca7bbfd26b0d3214bfc";
+  private static final String FBL_HASH = "5e8f16062ea3cd2c4a0d547876baa6f38cabf625";
+  private static final String FBR_HASH = "8a3c4b262d721acd49a4bf97d5213199c86fa2b9";
+
+  private static final HashSet<String> validAppSignatureHashes = buildAppSignatureHashes();
+
+  private static HashSet<String> buildAppSignatureHashes() {
+    HashSet<String> set = new HashSet<String>();
+    set.add(FBR_HASH);
+    set.add(FBI_HASH);
+    set.add(FBL_HASH);
+    return set;
+  }
+
+  public static boolean validateSignature(Context context, String packageName) {
+    String brand = Build.BRAND;
+    int applicationFlags = context.getApplicationInfo().flags;
+    if (brand.startsWith("generic") &&
+        (applicationFlags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {
+      // We are debugging on an emulator, don't validate package signature.
+      return true;
+    }
+
+    PackageInfo packageInfo;
+    try {
+      packageInfo = context.getPackageManager().getPackageInfo(
+          packageName,
+          PackageManager.GET_SIGNATURES);
+    } catch (PackageManager.NameNotFoundException e) {
+      return false;
+    }
+
+    // just in case
+    if (packageInfo.signatures == null || packageInfo.signatures.length <= 0) {
+      return false;
+    }
+
+    for (Signature signature : packageInfo.signatures) {
+      String hashedSignature = Utility.sha1hash(signature.toByteArray());
+      if (!validAppSignatureHashes.contains(hashedSignature)) {
+        return false;
+      }
+    }
+
+    return true;
+  }
+}
diff --git a/facebook/src/main/java/com/facebook/internal/FetchedAppSettings.java b/facebook/src/main/java/com/facebook/internal/FetchedAppSettings.java
new file mode 100644
index 000000000..8b6728f51
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/internal/FetchedAppSettings.java
@@ -0,0 +1,238 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.internal;
+
+import android.net.Uri;
+
+import org.json.JSONArray;
+import org.json.JSONObject;
+
+import java.util.EnumSet;
+import java.util.Map;
+
+/**
+ * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
+ * Android. Use of any of the classes in this package is unsupported, and they may be modified or
+ * removed without warning at any time.
+ */
+public final class FetchedAppSettings {
+    private boolean supportsImplicitLogging;
+    private String nuxContent;
+    private boolean nuxEnabled;
+    private boolean customTabsEnabled;
+    private int sessionTimeoutInSeconds;
+    private EnumSet<SmartLoginOption> smartLoginOptions;
+    private Map<String, Map<String, DialogFeatureConfig>> dialogConfigMap;
+    private boolean automaticLoggingEnabled;
+    private FacebookRequestErrorClassification errorClassification;
+    private String smartLoginBookmarkIconURL;
+    private String smartLoginMenuIconURL;
+
+    public FetchedAppSettings(boolean supportsImplicitLogging,
+                               String nuxContent,
+                               boolean nuxEnabled,
+                               boolean customTabsEnabled,
+                               int sessionTimeoutInSeconds,
+                               EnumSet<SmartLoginOption> smartLoginOptions,
+                               Map<String, Map<String, DialogFeatureConfig>> dialogConfigMap,
+                               boolean automaticLoggingEnabled,
+                               FacebookRequestErrorClassification errorClassification,
+                               String smartLoginBookmarkIconURL,
+                               String smartLoginMenuIconURL
+    ) {
+        this.supportsImplicitLogging = supportsImplicitLogging;
+        this.nuxContent = nuxContent;
+        this.nuxEnabled = nuxEnabled;
+        this.customTabsEnabled = customTabsEnabled;
+        this.dialogConfigMap = dialogConfigMap;
+        this.errorClassification = errorClassification;
+        this.sessionTimeoutInSeconds = sessionTimeoutInSeconds;
+        this.automaticLoggingEnabled = automaticLoggingEnabled;
+        this.smartLoginOptions = smartLoginOptions;
+        this.smartLoginBookmarkIconURL = smartLoginBookmarkIconURL;
+        this.smartLoginMenuIconURL = smartLoginMenuIconURL;
+    }
+
+    public boolean supportsImplicitLogging() {
+        return supportsImplicitLogging;
+    }
+
+    public String getNuxContent() {
+        return nuxContent;
+    }
+
+    public boolean getNuxEnabled() {
+        return nuxEnabled;
+    }
+
+    public boolean getCustomTabsEnabled() {
+        return customTabsEnabled;
+    }
+
+    public int getSessionTimeoutInSeconds() {
+        return sessionTimeoutInSeconds;
+    }
+
+    public boolean getAutomaticLoggingEnabled() {
+        return automaticLoggingEnabled;
+    }
+
+    public EnumSet<SmartLoginOption> getSmartLoginOptions() {
+        return smartLoginOptions;
+    }
+
+    public Map<String, Map<String, DialogFeatureConfig>> getDialogConfigurations() {
+        return dialogConfigMap;
+    }
+
+    public FacebookRequestErrorClassification getErrorClassification() {
+        return errorClassification;
+    }
+
+    public String getSmartLoginBookmarkIconURL() { return smartLoginBookmarkIconURL; }
+    public String getSmartLoginMenuIconURL() { return smartLoginMenuIconURL; }
+
+
+    public static class DialogFeatureConfig {
+        private static final String DIALOG_CONFIG_DIALOG_NAME_FEATURE_NAME_SEPARATOR = "\\|";
+        private static final String DIALOG_CONFIG_NAME_KEY = "name";
+        private static final String DIALOG_CONFIG_VERSIONS_KEY = "versions";
+        private static final String DIALOG_CONFIG_URL_KEY = "url";
+
+        public static DialogFeatureConfig parseDialogConfig(JSONObject dialogConfigJSON) {
+            String dialogNameWithFeature = dialogConfigJSON.optString(DIALOG_CONFIG_NAME_KEY);
+            if (Utility.isNullOrEmpty(dialogNameWithFeature)) {
+                return null;
+            }
+
+            String[] components = dialogNameWithFeature.split(
+                    DIALOG_CONFIG_DIALOG_NAME_FEATURE_NAME_SEPARATOR);
+            if (components.length != 2) {
+                // We expect the format to be dialogName|FeatureName, where both components are
+                // non-empty.
+                return null;
+            }
+
+            String dialogName = components[0];
+            String featureName = components[1];
+            if (Utility.isNullOrEmpty(dialogName) || Utility.isNullOrEmpty(featureName)) {
+                return null;
+            }
+
+            String urlString = dialogConfigJSON.optString(DIALOG_CONFIG_URL_KEY);
+            Uri fallbackUri = null;
+            if (!Utility.isNullOrEmpty(urlString)) {
+                fallbackUri = Uri.parse(urlString);
+            }
+
+            JSONArray versionsJSON = dialogConfigJSON.optJSONArray(DIALOG_CONFIG_VERSIONS_KEY);
+
+            int[] featureVersionSpec = parseVersionSpec(versionsJSON);
+
+            return new DialogFeatureConfig(
+                    dialogName, featureName, fallbackUri, featureVersionSpec);
+        }
+
+        private static int[] parseVersionSpec(JSONArray versionsJSON) {
+            // Null signifies no overrides to the min-version as specified by the SDK.
+            // An empty array would basically turn off the dialog (i.e no supported versions), so
+            // DON'T default to that.
+            int[] versionSpec = null;
+            if (versionsJSON != null) {
+                int numVersions = versionsJSON.length();
+                versionSpec = new int[numVersions];
+                for (int i = 0; i < numVersions; i++) {
+                    // See if the version was stored directly as an Integer
+                    int version = versionsJSON.optInt(i, NativeProtocol.NO_PROTOCOL_AVAILABLE);
+                    if (version == NativeProtocol.NO_PROTOCOL_AVAILABLE) {
+                        // If not, then see if it was stored as a string that can be parsed out.
+                        // If even that fails, then we will leave it as NO_PROTOCOL_AVAILABLE
+                        String versionString = versionsJSON.optString(i);
+                        if (!Utility.isNullOrEmpty(versionString)) {
+                            try {
+                                version = Integer.parseInt(versionString);
+                            } catch (NumberFormatException nfe) {
+                                Utility.logd(Utility.LOG_TAG, nfe);
+                                version = NativeProtocol.NO_PROTOCOL_AVAILABLE;
+                            }
+                        }
+                    }
+
+                    versionSpec[i] = version;
+                }
+            }
+
+            return versionSpec;
+        }
+
+        private String dialogName;
+        private String featureName;
+        private Uri fallbackUrl;
+        private int[] featureVersionSpec;
+
+        private DialogFeatureConfig(
+                String dialogName,
+                String featureName,
+                Uri fallbackUrl,
+                int[] featureVersionSpec) {
+            this.dialogName = dialogName;
+            this.featureName = featureName;
+            this.fallbackUrl = fallbackUrl;
+            this.featureVersionSpec = featureVersionSpec;
+        }
+
+        public String getDialogName() {
+            return dialogName;
+        }
+
+        public String getFeatureName() {
+            return featureName;
+        }
+
+        public Uri getFallbackUrl() {
+            return fallbackUrl;
+        }
+
+        public int[] getVersionSpec() {
+            return featureVersionSpec;
+        }
+    }
+
+    public static DialogFeatureConfig getDialogFeatureConfig(
+            String applicationId,
+            String actionName,
+            String featureName) {
+        if (Utility.isNullOrEmpty(actionName) || Utility.isNullOrEmpty(featureName)) {
+            return null;
+        }
+
+        FetchedAppSettings settings = FetchedAppSettingsManager.
+                getAppSettingsWithoutQuery(applicationId);
+        if (settings != null) {
+            Map<String, DialogFeatureConfig> featureMap =
+                    settings.getDialogConfigurations().get(actionName);
+            if (featureMap != null) {
+                return featureMap.get(featureName);
+            }
+        }
+        return null;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/internal/FetchedAppSettingsManager.java b/facebook/src/main/java/com/facebook/internal/FetchedAppSettingsManager.java
new file mode 100644
index 000000000..901e89b05
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/internal/FetchedAppSettingsManager.java
@@ -0,0 +1,240 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.internal;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.text.TextUtils;
+
+import com.facebook.FacebookSdk;
+import com.facebook.GraphRequest;
+import com.facebook.appevents.internal.AutomaticAnalyticsLogger;
+import com.facebook.appevents.internal.Constants;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.atomic.AtomicBoolean;
+
+/**
+ * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
+ * Android. Use of any of the classes in this package is unsupported, and they may be modified or
+ * removed without warning at any time.
+ */
+public final class FetchedAppSettingsManager {
+    private static final String APP_SETTINGS_PREFS_STORE =
+            "com.facebook.internal.preferences.APP_SETTINGS";
+    private static final String APP_SETTINGS_PREFS_KEY_FORMAT =
+            "com.facebook.internal.APP_SETTINGS.%s";
+    private static final String APP_SETTING_SUPPORTS_IMPLICIT_SDK_LOGGING =
+            "supports_implicit_sdk_logging";
+    private static final String APP_SETTING_NUX_CONTENT = "gdpv4_nux_content";
+    private static final String APP_SETTING_NUX_ENABLED = "gdpv4_nux_enabled";
+    private static final String APP_SETTING_CUSTOM_TABS_ENABLED =
+            "gdpv4_chrome_custom_tabs_enabled";
+    private static final String APP_SETTING_DIALOG_CONFIGS = "android_dialog_configs";
+    private static final String APP_SETTING_ANDROID_SDK_ERROR_CATEGORIES =
+            "android_sdk_error_categories";
+    private static final String APP_SETTING_APP_EVENTS_SESSION_TIMEOUT =
+            "app_events_session_timeout";
+    private static final String APP_SETTING_APP_EVENTS_FEATURE_BITMASK =
+            "app_events_feature_bitmask";
+    private static final int AUTOMATIC_LOGGING_ENABLED_BITMASK_FIELD = 1 << 3;
+    private static final String APP_SETTING_SMART_LOGIN_OPTIONS =
+            "seamless_login";
+    private static final String SMART_LOGIN_BOOKMARK_ICON_URL = "smart_login_bookmark_icon_url";
+    private static final String SMART_LOGIN_MENU_ICON_URL = "smart_login_menu_icon_url";
+
+    private static final String[] APP_SETTING_FIELDS = new String[]{
+            APP_SETTING_SUPPORTS_IMPLICIT_SDK_LOGGING,
+            APP_SETTING_NUX_CONTENT,
+            APP_SETTING_NUX_ENABLED,
+            APP_SETTING_CUSTOM_TABS_ENABLED,
+            APP_SETTING_DIALOG_CONFIGS,
+            APP_SETTING_ANDROID_SDK_ERROR_CATEGORIES,
+            APP_SETTING_APP_EVENTS_SESSION_TIMEOUT,
+            APP_SETTING_APP_EVENTS_FEATURE_BITMASK,
+            APP_SETTING_SMART_LOGIN_OPTIONS,
+            SMART_LOGIN_BOOKMARK_ICON_URL,
+            SMART_LOGIN_MENU_ICON_URL,
+    };
+    private static final String APPLICATION_FIELDS = "fields";
+
+    private static Map<String, FetchedAppSettings> fetchedAppSettings =
+            new ConcurrentHashMap<String, FetchedAppSettings>();
+    private static AtomicBoolean loadingSettings = new AtomicBoolean(false);
+
+    public static void loadAppSettingsAsync() {
+        final Context context = FacebookSdk.getApplicationContext();
+        final String applicationId = FacebookSdk.getApplicationId();
+        boolean canStartLoading = loadingSettings.compareAndSet(false, true);
+        if (Utility.isNullOrEmpty(applicationId) ||
+                fetchedAppSettings.containsKey(applicationId) ||
+                !canStartLoading) {
+            return;
+        }
+
+        final String settingsKey = String.format(APP_SETTINGS_PREFS_KEY_FORMAT, applicationId);
+
+        FacebookSdk.getExecutor().execute(new Runnable() {
+            @Override
+            public void run() {
+                // See if we had a cached copy and use that immediately.
+                SharedPreferences sharedPrefs = context.getSharedPreferences(
+                        APP_SETTINGS_PREFS_STORE,
+                        Context.MODE_PRIVATE);
+                String settingsJSONString = sharedPrefs.getString(settingsKey, null);
+                if (!Utility.isNullOrEmpty(settingsJSONString)) {
+                    JSONObject settingsJSON = null;
+                    try {
+                        settingsJSON = new JSONObject(settingsJSONString);
+                    } catch (JSONException je) {
+                        Utility.logd(Utility.LOG_TAG, je);
+                    }
+                    if (settingsJSON != null) {
+                        parseAppSettingsFromJSON(applicationId, settingsJSON);
+                    }
+                }
+
+                JSONObject resultJSON = getAppSettingsQueryResponse(applicationId);
+                if (resultJSON != null) {
+                    parseAppSettingsFromJSON(applicationId, resultJSON);
+
+                    sharedPrefs.edit()
+                            .putString(settingsKey, resultJSON.toString())
+                            .apply();
+                }
+
+                // Start log activate & deactivate app events, in case autoLogAppEvents flag is set
+                AutomaticAnalyticsLogger.logActivateAppEvent();
+
+                loadingSettings.set(false);
+            }
+        });
+    }
+
+    // This call only gets the app settings if they're already fetched
+    public static FetchedAppSettings getAppSettingsWithoutQuery(final String applicationId) {
+        return applicationId != null ? fetchedAppSettings.get(applicationId) : null;
+    }
+
+    // Note that this method makes a synchronous Graph API call, so should not be called from the
+    // main thread.
+    public static FetchedAppSettings queryAppSettings(
+            final String applicationId,
+            final boolean forceRequery) {
+        // Cache the last app checked results.
+        if (!forceRequery && fetchedAppSettings.containsKey(applicationId)) {
+            return fetchedAppSettings.get(applicationId);
+        }
+
+        JSONObject response = getAppSettingsQueryResponse(applicationId);
+        if (response == null) {
+            return null;
+        }
+
+        return parseAppSettingsFromJSON(applicationId, response);
+    }
+
+    private static FetchedAppSettings parseAppSettingsFromJSON(
+            String applicationId,
+            JSONObject settingsJSON) {
+        JSONArray errorClassificationJSON =
+                settingsJSON.optJSONArray(APP_SETTING_ANDROID_SDK_ERROR_CATEGORIES);
+        FacebookRequestErrorClassification errorClassification =
+                errorClassificationJSON == null
+                        ? FacebookRequestErrorClassification.getDefaultErrorClassification()
+                        : FacebookRequestErrorClassification.createFromJSON(
+                        errorClassificationJSON
+                );
+        int featureBitmask = settingsJSON.optInt(APP_SETTING_APP_EVENTS_FEATURE_BITMASK,0);
+        boolean automaticLoggingEnabled =
+                (featureBitmask & AUTOMATIC_LOGGING_ENABLED_BITMASK_FIELD) != 0;
+        FetchedAppSettings result = new FetchedAppSettings(
+                settingsJSON.optBoolean(APP_SETTING_SUPPORTS_IMPLICIT_SDK_LOGGING, false),
+                settingsJSON.optString(APP_SETTING_NUX_CONTENT, ""),
+                settingsJSON.optBoolean(APP_SETTING_NUX_ENABLED, false),
+                settingsJSON.optBoolean(APP_SETTING_CUSTOM_TABS_ENABLED, false),
+                settingsJSON.optInt(
+                        APP_SETTING_APP_EVENTS_SESSION_TIMEOUT,
+                        Constants.getDefaultAppEventsSessionTimeoutInSeconds()),
+                SmartLoginOption.parseOptions(settingsJSON.optLong(APP_SETTING_SMART_LOGIN_OPTIONS)),
+                parseDialogConfigurations(settingsJSON.optJSONObject(APP_SETTING_DIALOG_CONFIGS)),
+                automaticLoggingEnabled,
+                errorClassification,
+                settingsJSON.optString(SMART_LOGIN_BOOKMARK_ICON_URL),
+                settingsJSON.optString(SMART_LOGIN_MENU_ICON_URL)
+        );
+
+        fetchedAppSettings.put(applicationId, result);
+
+        return result;
+    }
+
+    // Note that this method makes a synchronous Graph API call, so should not be called from the
+    // main thread.
+    private static JSONObject getAppSettingsQueryResponse(String applicationId) {
+        Bundle appSettingsParams = new Bundle();
+        appSettingsParams.putString(APPLICATION_FIELDS, TextUtils.join(",", APP_SETTING_FIELDS));
+
+        GraphRequest request = GraphRequest.newGraphPathRequest(null, applicationId, null);
+        request.setSkipClientToken(true);
+        request.setParameters(appSettingsParams);
+
+        return request.executeAndWait().getJSONObject();
+    }
+
+    private static Map<String, Map<String, FetchedAppSettings.DialogFeatureConfig>> parseDialogConfigurations(
+            JSONObject dialogConfigResponse) {
+        HashMap<String, Map<String, FetchedAppSettings.DialogFeatureConfig>> dialogConfigMap
+                = new HashMap<String, Map<String, FetchedAppSettings.DialogFeatureConfig>>();
+
+        if (dialogConfigResponse != null) {
+            JSONArray dialogConfigData = dialogConfigResponse.optJSONArray("data");
+            if (dialogConfigData != null) {
+                for (int i = 0; i < dialogConfigData.length(); i++) {
+                    FetchedAppSettings.DialogFeatureConfig dialogConfig =
+                            FetchedAppSettings.DialogFeatureConfig.parseDialogConfig(
+                            dialogConfigData.optJSONObject(i));
+                    if (dialogConfig == null) {
+                        continue;
+                    }
+
+                    String dialogName = dialogConfig.getDialogName();
+                    Map<String, FetchedAppSettings.DialogFeatureConfig> featureMap =
+                            dialogConfigMap.get(dialogName);
+                    if (featureMap == null) {
+                        featureMap = new HashMap<String, FetchedAppSettings.DialogFeatureConfig>();
+                        dialogConfigMap.put(dialogName, featureMap);
+                    }
+                    featureMap.put(dialogConfig.getFeatureName(), dialogConfig);
+                }
+            }
+        }
+
+        return dialogConfigMap;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/internal/FileLruCache.java b/facebook/src/main/java/com/facebook/internal/FileLruCache.java
index 72e73d467..fcbc1c501 100644
--- a/facebook/src/main/java/com/facebook/internal/FileLruCache.java
+++ b/facebook/src/main/java/com/facebook/internal/FileLruCache.java
@@ -127,7 +127,7 @@ public InputStream get(String key) throws IOException {
     public InputStream get(String key, String contentTag) throws IOException {
         File file = new File(this.directory, Utility.md5hash(key));
 
-        FileInputStream input = null;
+        FileInputStream input;
         try {
             input = new FileInputStream(file);
         } catch (IOException e) {
@@ -184,7 +184,7 @@ public OutputStream openPutStream(final String key, String contentTag) throws IO
             throw new IOException("Could not create file at " + buffer.getAbsolutePath());
         }
 
-        FileOutputStream file = null;
+        FileOutputStream file;
         try {
             file = new FileOutputStream(buffer);
         } catch (FileNotFoundException e) {
@@ -448,7 +448,7 @@ static JSONObject readHeader(InputStream stream) throws IOException {
             }
 
             String headerString = new String(headerBytes);
-            JSONObject header = null;
+            JSONObject header;
             JSONTokener tokener = new JSONTokener(headerString);
             try {
                 Object parsed = tokener.nextValue();
diff --git a/facebook/src/main/java/com/facebook/internal/GraphUtil.java b/facebook/src/main/java/com/facebook/internal/GraphUtil.java
index 93b4566ed..ea60a38d1 100644
--- a/facebook/src/main/java/com/facebook/internal/GraphUtil.java
+++ b/facebook/src/main/java/com/facebook/internal/GraphUtil.java
@@ -22,17 +22,11 @@
 
 import com.facebook.FacebookException;
 import com.facebook.internal.NativeProtocol;
-import com.facebook.internal.Validate;
+
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.List;
-import java.util.Locale;
-
 /**
  * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
  * Android. Use of any of the classes in this package is unsupported, and they may be modified or
diff --git a/facebook/src/main/java/com/facebook/internal/ImageDownloader.java b/facebook/src/main/java/com/facebook/internal/ImageDownloader.java
index 9309f2beb..14b308920 100644
--- a/facebook/src/main/java/com/facebook/internal/ImageDownloader.java
+++ b/facebook/src/main/java/com/facebook/internal/ImageDownloader.java
@@ -33,8 +33,6 @@
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.net.HttpURLConnection;
-import java.net.URI;
-import java.net.URISyntaxException;
 import java.net.URL;
 import java.util.HashMap;
 import java.util.Map;
diff --git a/facebook/src/main/java/com/facebook/internal/ImageRequest.java b/facebook/src/main/java/com/facebook/internal/ImageRequest.java
index f0dbfbf3e..acbe35ebb 100644
--- a/facebook/src/main/java/com/facebook/internal/ImageRequest.java
+++ b/facebook/src/main/java/com/facebook/internal/ImageRequest.java
@@ -23,8 +23,6 @@
 import android.content.Context;
 import android.net.Uri;
 
-import java.net.URI;
-import java.net.URISyntaxException;
 import java.util.Locale;
 
 /**
diff --git a/facebook/src/main/java/com/facebook/internal/ImageResponseCache.java b/facebook/src/main/java/com/facebook/internal/ImageResponseCache.java
index 847c441d4..5850a0530 100644
--- a/facebook/src/main/java/com/facebook/internal/ImageResponseCache.java
+++ b/facebook/src/main/java/com/facebook/internal/ImageResponseCache.java
@@ -29,9 +29,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.HttpURLConnection;
-import java.net.URI;
-import java.net.URISyntaxException;
-import java.net.URL;
 
 /**
  * com.facebook.internal is solely for the use of other packages within the
@@ -41,7 +38,7 @@
 class ImageResponseCache {
     static final String TAG = ImageResponseCache.class.getSimpleName();
 
-    private volatile static FileLruCache imageCache;
+    private static FileLruCache imageCache;
 
     synchronized static FileLruCache getCache(Context context) throws IOException{
         if (imageCache == null) {
diff --git a/facebook/src/main/java/com/facebook/internal/JsonUtil.java b/facebook/src/main/java/com/facebook/internal/JsonUtil.java
index 021f9a7ef..b009e11b2 100644
--- a/facebook/src/main/java/com/facebook/internal/JsonUtil.java
+++ b/facebook/src/main/java/com/facebook/internal/JsonUtil.java
@@ -34,7 +34,7 @@
 class JsonUtil {
     static void jsonObjectClear(JSONObject jsonObject) {
         @SuppressWarnings("unchecked")
-        Iterator<String> keys = (Iterator<String>) jsonObject.keys();
+        Iterator<String> keys = jsonObject.keys();
         while (keys.hasNext()) {
             keys.next();
             keys.remove();
@@ -43,7 +43,7 @@ static void jsonObjectClear(JSONObject jsonObject) {
 
     static boolean jsonObjectContainsValue(JSONObject jsonObject, Object value) {
         @SuppressWarnings("unchecked")
-        Iterator<String> keys = (Iterator<String>) jsonObject.keys();
+        Iterator<String> keys = jsonObject.keys();
         while (keys.hasNext()) {
             Object thisValue = jsonObject.opt(keys.next());
             if (thisValue != null && thisValue.equals(value)) {
@@ -84,7 +84,7 @@ public Object setValue(Object object) {
         HashSet<Map.Entry<String, Object>> result = new HashSet<Map.Entry<String, Object>>();
 
         @SuppressWarnings("unchecked")
-        Iterator<String> keys = (Iterator<String>) jsonObject.keys();
+        Iterator<String> keys = jsonObject.keys();
         while (keys.hasNext()) {
             String key = keys.next();
             Object value = jsonObject.opt(key);
@@ -98,7 +98,7 @@ public Object setValue(Object object) {
         HashSet<String> result = new HashSet<String>();
 
         @SuppressWarnings("unchecked")
-        Iterator<String> keys = (Iterator<String>) jsonObject.keys();
+        Iterator<String> keys = jsonObject.keys();
         while (keys.hasNext()) {
             result.add(keys.next());
         }
@@ -121,7 +121,7 @@ static void jsonObjectPutAll(JSONObject jsonObject, Map<String, Object> map) {
         ArrayList<Object> result = new ArrayList<Object>();
 
         @SuppressWarnings("unchecked")
-        Iterator<String> keys = (Iterator<String>) jsonObject.keys();
+        Iterator<String> keys = jsonObject.keys();
         while (keys.hasNext()) {
             result.add(jsonObject.opt(keys.next()));
         }
diff --git a/facebook/src/main/java/com/facebook/internal/NativeAppCallAttachmentStore.java b/facebook/src/main/java/com/facebook/internal/NativeAppCallAttachmentStore.java
index 18814f355..e3a44572f 100644
--- a/facebook/src/main/java/com/facebook/internal/NativeAppCallAttachmentStore.java
+++ b/facebook/src/main/java/com/facebook/internal/NativeAppCallAttachmentStore.java
@@ -81,7 +81,7 @@ private static void processAttachmentFile(
             File outputFile) throws IOException {
         FileOutputStream outputStream = new FileOutputStream(outputFile);
         try {
-            InputStream inputStream = null;
+            InputStream inputStream;
             if (!isContentUri) {
                 inputStream = new FileInputStream(imageUri.getPath());
             } else {
diff --git a/facebook/src/main/java/com/facebook/internal/NativeProtocol.java b/facebook/src/main/java/com/facebook/internal/NativeProtocol.java
index fd0dd13eb..f1c01511c 100644
--- a/facebook/src/main/java/com/facebook/internal/NativeProtocol.java
+++ b/facebook/src/main/java/com/facebook/internal/NativeProtocol.java
@@ -23,23 +23,36 @@
 import android.content.ContentResolver;
 import android.content.Context;
 import android.content.Intent;
-import android.content.pm.*;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.ProviderInfo;
+import android.content.pm.ResolveInfo;
+import android.content.pm.Signature;
 import android.database.Cursor;
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
+import android.support.annotation.Nullable;
 import android.text.TextUtils;
+import android.util.Log;
+
 import com.facebook.FacebookException;
 import com.facebook.FacebookOperationCanceledException;
 import com.facebook.FacebookSdk;
 import com.facebook.login.DefaultAudience;
 
-import java.util.*;
-import java.util.concurrent.Callable;
-import java.util.concurrent.Executors;
-import java.util.concurrent.FutureTask;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.TreeSet;
+import java.util.UUID;
 import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.atomic.AtomicInteger;
 
 /**
  * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
@@ -50,6 +63,8 @@
 
     public static final int NO_PROTOCOL_AVAILABLE = -1;
 
+    private static final String TAG = NativeProtocol.class.getName();
+
     private static final String FACEBOOK_PROXY_AUTH_ACTIVITY = "com.facebook.katana.ProxyAuth";
     private static final String FACEBOOK_TOKEN_REFRESH_ACTIVITY =
             "com.facebook.katana.platform.TokenRefreshService";
@@ -58,6 +73,8 @@
     public static final String FACEBOOK_PROXY_AUTH_APP_ID_KEY = "client_id";
     public static final String FACEBOOK_PROXY_AUTH_E2E_KEY = "e2e";
 
+    public static final String FACEBOOK_SDK_VERSION_KEY = "facebook_sdk_version";
+
     // ---------------------------------------------------------------------------------------------
     // Native Protocol updated 2012-11
 
@@ -75,6 +92,8 @@
     public static final int PROTOCOL_VERSION_20141028 = 20141028;
     public static final int PROTOCOL_VERSION_20141107 = 20141107; // Bucketed Result Intents
     public static final int PROTOCOL_VERSION_20141218 = 20141218;
+    public static final int PROTOCOL_VERSION_20160327 = 20160327;
+    public static final int PROTOCOL_VERSION_20170411 = 20170411; // express login
 
     public static final String EXTRA_PROTOCOL_VERSION =
             "com.facebook.platform.protocol.PROTOCOL_VERSION";
@@ -115,6 +134,10 @@
     public static final int MESSAGE_GET_INSTALL_DATA_REPLY      = 0x10005;
     public static final int MESSAGE_GET_LIKE_STATUS_REQUEST     = 0x10006;
     public static final int MESSAGE_GET_LIKE_STATUS_REPLY       = 0x10007;
+    public static final int MESSAGE_GET_AK_SEAMLESS_TOKEN_REQUEST = 0x10008;
+    public static final int MESSAGE_GET_AK_SEAMLESS_TOKEN_REPLY   = 0x10009;
+    public static final int MESSAGE_GET_LOGIN_STATUS_REQUEST   = 0x1000A;
+    public static final int MESSAGE_GET_LOGIN_STATUS_REPLY   = 0x1000B;
 
     // MESSAGE_ERROR_REPLY data keys:
     // See STATUS_*
@@ -163,6 +186,11 @@
     public static final String EXTRA_APPLICATION_NAME =
             "com.facebook.platform.extra.APPLICATION_NAME";
     public static final String EXTRA_USER_ID = "com.facebook.platform.extra.USER_ID";
+    public static final String EXTRA_LOGGER_REF = "com.facebook.platform.extra.LOGGER_REF";
+    public static final String EXTRA_TOAST_DURATION_MS =
+            "com.facebook.platform.extra.EXTRA_TOAST_DURATION_MS";
+    public static final String EXTRA_GRAPH_API_VERSION =
+            "com.facebook.platform.extra.GRAPH_API_VERSION";
 
     // Extras returned by setResult() for ACTION_LOGIN_DIALOG
     public static final String EXTRA_ACCESS_TOKEN = "com.facebook.platform.extra.ACCESS_TOKEN";
@@ -171,9 +199,22 @@
     // EXTRA_PERMISSIONS
 
     public static final String RESULT_ARGS_ACCESS_TOKEN = "access_token";
+    public static final String RESULT_ARGS_SIGNED_REQUEST = "signed request";
     public static final String RESULT_ARGS_EXPIRES_SECONDS_SINCE_EPOCH =
             "expires_seconds_since_epoch";
     public static final String RESULT_ARGS_PERMISSIONS = "permissions";
+    public static final String EXTRA_ARGS_PROFILE = "com.facebook.platform.extra.PROFILE";
+    public static final String EXTRA_ARGS_PROFILE_NAME = "com.facebook.platform.extra.PROFILE_NAME";
+    public static final String EXTRA_ARGS_PROFILE_LAST_NAME =
+            "com.facebook.platform.extra.PROFILE_LAST_NAME";
+    public static final String EXTRA_ARGS_PROFILE_FIRST_NAME =
+            "com.facebook.platform.extra.PROFILE_FIRST_NAME";
+    public static final String EXTRA_ARGS_PROFILE_MIDDLE_NAME =
+            "com.facebook.platform.extra.PROFILE_MIDDLE_NAME";
+    public static final String EXTRA_ARGS_PROFILE_LINK =
+            "com.facebook.platform.extra.PROFILE_LINK";
+    public static final String EXTRA_ARGS_PROFILE_USER_ID =
+            "com.facebook.platform.extra.PROFILE_USER_ID";
 
     // OG objects will have this key to set to true if they should be created as part of OG Action
     // publish
@@ -225,50 +266,10 @@
 
     private static abstract class NativeAppInfo {
         abstract protected String getPackage();
-
-        private static final String FBI_HASH = "a4b7452e2ed8f5f191058ca7bbfd26b0d3214bfc";
-        private static final String FBL_HASH = "5e8f16062ea3cd2c4a0d547876baa6f38cabf625";
-        private static final String FBR_HASH = "8a3c4b262d721acd49a4bf97d5213199c86fa2b9";
-
-        private static final HashSet<String> validAppSignatureHashes = buildAppSignatureHashes();
+        abstract protected String getLoginActivity();
 
         private TreeSet<Integer> availableVersions;
 
-        private static HashSet<String> buildAppSignatureHashes() {
-            HashSet<String> set = new HashSet<String>();
-            set.add(FBR_HASH);
-            set.add(FBI_HASH);
-            set.add(FBL_HASH);
-            return set;
-        }
-
-        public boolean validateSignature(Context context, String packageName) {
-            String brand = Build.BRAND;
-            int applicationFlags = context.getApplicationInfo().flags;
-            if (brand.startsWith("generic") &&
-                    (applicationFlags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {
-                // We are debugging on an emulator, don't validate package signature.
-                return true;
-            }
-
-            PackageInfo packageInfo = null;
-            try {
-                packageInfo = context.getPackageManager().getPackageInfo(packageName,
-                        PackageManager.GET_SIGNATURES);
-            } catch (PackageManager.NameNotFoundException e) {
-                return false;
-            }
-
-            for (Signature signature : packageInfo.signatures) {
-                String hashedSignature = Utility.sha1hash(signature.toByteArray());
-                if (validAppSignatureHashes.contains(hashedSignature)) {
-                    return true;
-                }
-            }
-
-            return false;
-        }
-
         public TreeSet<Integer> getAvailableVersions() {
             if (availableVersions == null) {
                 fetchAvailableVersions(false);
@@ -290,6 +291,11 @@ private synchronized void fetchAvailableVersions(boolean force) {
         protected String getPackage() {
             return KATANA_PACKAGE;
         }
+
+        @Override
+        protected String getLoginActivity() {
+            return FACEBOOK_PROXY_AUTH_ACTIVITY;
+        }
     }
 
     private static class MessengerAppInfo extends NativeAppInfo {
@@ -299,6 +305,11 @@ protected String getPackage() {
         protected String getPackage() {
             return MESSENGER_PACKAGE;
         }
+
+        @Override
+        protected String getLoginActivity() {
+            return null;
+        }
     }
 
     private static class WakizashiAppInfo extends NativeAppInfo {
@@ -308,9 +319,29 @@ protected String getPackage() {
         protected String getPackage() {
             return WAKIZASHI_PACKAGE;
         }
+
+        @Override
+        protected String getLoginActivity() {
+            return FACEBOOK_PROXY_AUTH_ACTIVITY;
+        }
+    }
+
+    private static class FBLiteAppInfo extends NativeAppInfo {
+        static final String FBLITE_PACKAGE = "com.facebook.lite";
+        static final String FACEBOOK_LITE_ACTIVITY =
+                "com.facebook.lite.platform.LoginGDPDialogActivity";
+
+        @Override
+        protected String getPackage() {
+            return FBLITE_PACKAGE;
+        }
+
+        @Override
+        protected String getLoginActivity() {
+            return FACEBOOK_LITE_ACTIVITY;
+        }
     }
 
-    private static final NativeAppInfo FACEBOOK_APP_INFO = new KatanaAppInfo();
     private static List<NativeAppInfo> facebookAppInfoList = buildFacebookAppList();
     private static Map<String, List<NativeAppInfo>> actionToAppInfoMap = buildActionToAppInfoMap();
     private static AtomicBoolean protocolVersionsAsyncUpdating = new AtomicBoolean(false);
@@ -320,7 +351,7 @@ protected String getPackage() {
 
         // Katana needs to be the first thing in the list since it will get selected as the default
         // FACEBOOK_APP_INFO
-        list.add(FACEBOOK_APP_INFO);
+        list.add(new KatanaAppInfo());
         list.add(new WakizashiAppInfo());
 
         return list;
@@ -353,7 +384,9 @@ static Intent validateActivityIntent(Context context, Intent intent, NativeAppIn
             return null;
         }
 
-        if (!appInfo.validateSignature(context, resolveInfo.activityInfo.packageName)) {
+        if (!FacebookSignatureValidator.validateSignature(
+            context,
+            resolveInfo.activityInfo.packageName)) {
             return null;
         }
 
@@ -370,14 +403,16 @@ static Intent validateServiceIntent(Context context, Intent intent, NativeAppInf
             return null;
         }
 
-        if (!appInfo.validateSignature(context, resolveInfo.serviceInfo.packageName)) {
+        if (!FacebookSignatureValidator.validateSignature(
+            context,
+            resolveInfo.serviceInfo.packageName)) {
             return null;
         }
 
         return intent;
     }
 
-    public static Intent createProxyAuthIntent(
+    public static Intent createFacebookLiteIntent(
             Context context,
             String applicationId,
             Collection<String> permissions,
@@ -385,45 +420,96 @@ public static Intent createProxyAuthIntent(
             boolean isRerequest,
             boolean isForPublish,
             DefaultAudience defaultAudience,
-            String clientState) {
-        for (NativeAppInfo appInfo : facebookAppInfoList) {
-            Intent intent = new Intent()
-                    .setClassName(appInfo.getPackage(), FACEBOOK_PROXY_AUTH_ACTIVITY)
-                    .putExtra(FACEBOOK_PROXY_AUTH_APP_ID_KEY, applicationId);
+            String clientState
+    ) {
+        NativeAppInfo appInfo = new FBLiteAppInfo();
+        Intent intent = createNativeAppIntent(
+                appInfo,
+                applicationId,
+                permissions,
+                e2e,
+                isRerequest,
+                isForPublish,
+                defaultAudience,
+                clientState);
+        intent = validateActivityIntent(context, intent, appInfo);
 
-            if (!Utility.isNullOrEmpty(permissions)) {
-                intent.putExtra(
-                        FACEBOOK_PROXY_AUTH_PERMISSIONS_KEY, TextUtils.join(",", permissions));
-            }
-            if (!Utility.isNullOrEmpty(e2e)) {
-                intent.putExtra(FACEBOOK_PROXY_AUTH_E2E_KEY, e2e);
-            }
+        return intent;
+    }
 
-            intent.putExtra(ServerProtocol.DIALOG_PARAM_STATE, clientState);
-            intent.putExtra(
-                    ServerProtocol.DIALOG_PARAM_RESPONSE_TYPE,
-                    ServerProtocol.DIALOG_RESPONSE_TYPE_TOKEN_AND_SIGNED_REQUEST);
+    private static Intent createNativeAppIntent(
+            NativeAppInfo appInfo,
+            String applicationId,
+            Collection<String> permissions,
+            String e2e,
+            boolean isRerequest,
+            boolean isForPublish,
+            DefaultAudience defaultAudience,
+            String clientState
+    ) {
+        String activityName = appInfo.getLoginActivity();
+        // the NativeApp doesn't have a login activity
+        if (activityName == null) {
+            return null;
+        }
+
+        Intent intent = new Intent()
+                .setClassName(appInfo.getPackage(), activityName)
+                .putExtra(FACEBOOK_PROXY_AUTH_APP_ID_KEY, applicationId);
+
+        intent.putExtra(FACEBOOK_SDK_VERSION_KEY, FacebookSdk.getSdkVersion());
+
+        if (!Utility.isNullOrEmpty(permissions)) {
             intent.putExtra(
-                    ServerProtocol.DIALOG_PARAM_RETURN_SCOPES,
-                    ServerProtocol.DIALOG_RETURN_SCOPES_TRUE);
-            if (isForPublish) {
-                intent.putExtra(
-                        ServerProtocol.DIALOG_PARAM_DEFAULT_AUDIENCE,
-                        defaultAudience.getNativeProtocolAudience());
-            }
+                    FACEBOOK_PROXY_AUTH_PERMISSIONS_KEY, TextUtils.join(",", permissions));
+        }
+        if (!Utility.isNullOrEmpty(e2e)) {
+            intent.putExtra(FACEBOOK_PROXY_AUTH_E2E_KEY, e2e);
+        }
 
-            // Override the API Version for Auth
+        intent.putExtra(ServerProtocol.DIALOG_PARAM_STATE, clientState);
+        intent.putExtra(
+                ServerProtocol.DIALOG_PARAM_RESPONSE_TYPE,
+                ServerProtocol.DIALOG_RESPONSE_TYPE_TOKEN_AND_SIGNED_REQUEST);
+        intent.putExtra(
+                ServerProtocol.DIALOG_PARAM_RETURN_SCOPES,
+                ServerProtocol.DIALOG_RETURN_SCOPES_TRUE);
+        if (isForPublish) {
             intent.putExtra(
-                    ServerProtocol.DIALOG_PARAM_LEGACY_OVERRIDE,
-                    ServerProtocol.GRAPH_API_VERSION);
-
-            // Set the re-request auth type for requests
-            if (isRerequest) {
-                intent.putExtra(
-                        ServerProtocol.DIALOG_PARAM_AUTH_TYPE,
-                        ServerProtocol.DIALOG_REREQUEST_AUTH_TYPE);
-            }
+                    ServerProtocol.DIALOG_PARAM_DEFAULT_AUDIENCE,
+                    defaultAudience.getNativeProtocolAudience());
+        }
 
+        // Override the API Version for Auth
+        intent.putExtra(
+                ServerProtocol.DIALOG_PARAM_LEGACY_OVERRIDE,
+                FacebookSdk.getGraphApiVersion());
+
+        intent.putExtra(
+                ServerProtocol.DIALOG_PARAM_AUTH_TYPE,
+                ServerProtocol.DIALOG_REREQUEST_AUTH_TYPE);
+        return intent;
+    }
+
+    public static Intent createProxyAuthIntent(
+            Context context,
+            String applicationId,
+            Collection<String> permissions,
+            String e2e,
+            boolean isRerequest,
+            boolean isForPublish,
+            DefaultAudience defaultAudience,
+            String clientState) {
+        for (NativeAppInfo appInfo : facebookAppInfoList) {
+            Intent intent = createNativeAppIntent(
+                    appInfo,
+                    applicationId,
+                    permissions,
+                    e2e,
+                    isRerequest,
+                    isForPublish,
+                    defaultAudience,
+                    clientState);
             intent = validateActivityIntent(context, intent, appInfo);
 
             if (intent != null) {
@@ -454,6 +540,7 @@ public static final int getLatestKnownVersion() {
     // Note: be sure this stays sorted in descending order; add new versions at the beginning
     private static final List<Integer> KNOWN_PROTOCOL_VERSIONS =
             Arrays.asList(
+                    PROTOCOL_VERSION_20160327,
                     PROTOCOL_VERSION_20141218,
                     PROTOCOL_VERSION_20141107,
                     PROTOCOL_VERSION_20141028,
@@ -464,32 +551,7 @@ public static final int getLatestKnownVersion() {
                     PROTOCOL_VERSION_20131107,
                     PROTOCOL_VERSION_20130618,
                     PROTOCOL_VERSION_20130502,
-                    PROTOCOL_VERSION_20121101
-            );
-
-    private static Intent findActivityIntent(
-            Context context,
-            String activityAction,
-            String internalAction) {
-        List<NativeAppInfo> list = actionToAppInfoMap.get(internalAction);
-        if (list == null) {
-            return null;
-        }
-
-        Intent intent = null;
-        for (NativeAppInfo appInfo : list) {
-            intent = new Intent()
-                    .setAction(activityAction)
-                    .setPackage(appInfo.getPackage())
-                    .addCategory(Intent.CATEGORY_DEFAULT);
-            intent = validateActivityIntent(context, intent, appInfo);
-            if (intent != null) {
-                return intent;
-            }
-        }
-
-        return intent;
-    }
+                    PROTOCOL_VERSION_20121101);
 
     public static boolean isVersionCompatibleWithBucketedIntent(int version) {
         return KNOWN_PROTOCOL_VERSIONS.contains(version) && version >= PROTOCOL_VERSION_20140701;
@@ -503,14 +565,27 @@ public static Intent createPlatformActivityIntent(
             Context context,
             String callId,
             String action,
-            int version,
+            ProtocolVersionQueryResult versionResult,
             Bundle extras) {
-        Intent intent = findActivityIntent(context, INTENT_ACTION_PLATFORM_ACTIVITY, action);
+        if (versionResult == null) {
+            return null;
+        }
+
+        NativeAppInfo appInfo = versionResult.nativeAppInfo;
+        if (appInfo == null) {
+            return null;
+        }
+
+        Intent intent = new Intent()
+                .setAction(INTENT_ACTION_PLATFORM_ACTIVITY)
+                .setPackage(appInfo.getPackage())
+                .addCategory(Intent.CATEGORY_DEFAULT);
+        intent = validateActivityIntent(context, intent, appInfo);
         if (intent == null) {
             return null;
         }
 
-        setupProtocolRequestIntent(intent, callId, action, version, extras);
+        setupProtocolRequestIntent(intent, callId, action, versionResult.protocolVersion, extras);
 
         return intent;
     }
@@ -714,24 +789,24 @@ public static Bundle createBundleForException(FacebookException e) {
     public static int getLatestAvailableProtocolVersionForService(final int minimumVersion) {
         // Services are currently always against the Facebook App
         return getLatestAvailableProtocolVersionForAppInfoList(
-                facebookAppInfoList, new int[]{minimumVersion});
+                facebookAppInfoList, new int[]{minimumVersion}).getProtocolVersion();
     }
 
-    public static int getLatestAvailableProtocolVersionForAction(
+    public static ProtocolVersionQueryResult getLatestAvailableProtocolVersionForAction(
             String action,
             int[] versionSpec) {
         List<NativeAppInfo> appInfoList = actionToAppInfoMap.get(action);
         return getLatestAvailableProtocolVersionForAppInfoList(appInfoList, versionSpec);
     }
 
-    private static int getLatestAvailableProtocolVersionForAppInfoList(
+    private static ProtocolVersionQueryResult getLatestAvailableProtocolVersionForAppInfoList(
             List<NativeAppInfo> appInfoList,
             int[] versionSpec) {
         // Kick off an update
         updateAllAvailableProtocolVersionsAsync();
 
         if (appInfoList == null) {
-            return NO_PROTOCOL_AVAILABLE;
+            return ProtocolVersionQueryResult.createEmpty();
         }
 
         // Could potentially cache the NativeAppInfo to latestProtocolVersion
@@ -743,11 +818,11 @@ private static int getLatestAvailableProtocolVersionForAppInfoList(
                             versionSpec);
 
             if (protocolVersion != NO_PROTOCOL_AVAILABLE) {
-                return protocolVersion;
+                return ProtocolVersionQueryResult.create(appInfo, protocolVersion);
             }
         }
 
-        return NO_PROTOCOL_AVAILABLE;
+        return ProtocolVersionQueryResult.createEmpty();
     }
 
     public static void updateAllAvailableProtocolVersionsAsync() {
@@ -785,9 +860,29 @@ public void run() {
             // logcat saying that the provider was not found.
             PackageManager pm = FacebookSdk.getApplicationContext().getPackageManager();
             String contentProviderName = appInfo.getPackage() + PLATFORM_PROVIDER;
-            ProviderInfo pInfo = pm.resolveContentProvider(contentProviderName, 0);
+            ProviderInfo pInfo = null;
+            try {
+                pInfo = pm.resolveContentProvider(contentProviderName, 0);
+            } catch (RuntimeException e) {
+                // Accessing a dead provider will cause an DeadObjectException in the
+                // package manager. It will be thrown as a Runtime Exception.
+                // This will cause a incorrect indication of if the FB app installed but
+                // it is better then crashing.
+                Log.e(TAG, "Failed to query content resolver.", e);
+            }
             if (pInfo != null) {
-                c = contentResolver.query(uri, projection, null, null, null);
+                try {
+                    c = contentResolver.query(uri, projection, null, null, null);
+                } catch (NullPointerException|SecurityException ex) {
+                    Log.e(TAG, "Failed to query content resolver.");
+                    // Meizu devices running Android 5.0+ have a bug where they can throw a
+                    // NullPointerException when trying resolve a ContentProvider. Additionally,
+                    // rarely some 5.0+ devices have a bug which can rarely cause a
+                    // SecurityException to be thrown. This will cause a incorrect indication
+                    // of if the FB app installed but it is better then crashing.
+                    c = null;
+                }
+
                 if (c != null) {
                     while (c.moveToNext()) {
                         int version = c.getInt(c.getColumnIndex(PLATFORM_PROVIDER_VERSION_COLUMN));
@@ -795,13 +890,13 @@ public void run() {
                     }
                 }
             }
-
-            return allAvailableVersions;
         } finally {
             if (c != null) {
                 c.close();
             }
         }
+
+        return allAvailableVersions;
     }
 
     public static int computeLatestAvailableVersionFromVersionSpec(
@@ -852,4 +947,37 @@ public static int computeLatestAvailableVersionFromVersionSpec(
     private static Uri buildPlatformProviderVersionURI(NativeAppInfo appInfo) {
         return Uri.parse(CONTENT_SCHEME + appInfo.getPackage() + PLATFORM_PROVIDER_VERSIONS);
     }
+
+    public static class ProtocolVersionQueryResult {
+        private NativeAppInfo nativeAppInfo;
+        private int protocolVersion;
+
+        public static ProtocolVersionQueryResult create(
+                NativeAppInfo nativeAppInfo,
+                int protocolVersion) {
+            ProtocolVersionQueryResult result = new ProtocolVersionQueryResult();
+            result.nativeAppInfo = nativeAppInfo;
+            result.protocolVersion = protocolVersion;
+
+            return result;
+        }
+
+        public static ProtocolVersionQueryResult createEmpty() {
+            ProtocolVersionQueryResult result = new ProtocolVersionQueryResult();
+            result.protocolVersion = NO_PROTOCOL_AVAILABLE;
+
+            return result;
+        }
+
+        private ProtocolVersionQueryResult() {
+        }
+
+        public @Nullable NativeAppInfo getAppInfo() {
+            return nativeAppInfo;
+        }
+
+        public int getProtocolVersion() {
+            return protocolVersion;
+        }
+    }
 }
diff --git a/facebook/src/main/java/com/facebook/internal/PlatformServiceClient.java b/facebook/src/main/java/com/facebook/internal/PlatformServiceClient.java
index e3bc3f090..45b7dfab8 100644
--- a/facebook/src/main/java/com/facebook/internal/PlatformServiceClient.java
+++ b/facebook/src/main/java/com/facebook/internal/PlatformServiceClient.java
@@ -142,7 +142,11 @@ protected void handleMessage(Message message) {
             } else {
                 callback(extras);
             }
-            context.unbindService(this);
+            try {
+                context.unbindService(this);
+            } catch (IllegalArgumentException ex) {
+                // Do nothing, the connection was already unbound
+            }
         }
     }
 
diff --git a/facebook/src/main/java/com/facebook/internal/ServerProtocol.java b/facebook/src/main/java/com/facebook/internal/ServerProtocol.java
index 15ae6a657..4688de649 100644
--- a/facebook/src/main/java/com/facebook/internal/ServerProtocol.java
+++ b/facebook/src/main/java/com/facebook/internal/ServerProtocol.java
@@ -54,6 +54,7 @@
     public static final String DIALOG_PARAM_RESPONSE_TYPE = "response_type";
     public static final String DIALOG_PARAM_RETURN_SCOPES = "return_scopes";
     public static final String DIALOG_PARAM_SCOPE = "scope";
+    public static final String DIALOG_PARAM_SSO_DEVICE = "sso";
     public static final String DIALOG_PARAM_DEFAULT_AUDIENCE = "default_audience";
     public static final String DIALOG_PARAM_SDK_VERSION = "sdk";
     public static final String DIALOG_PARAM_STATE = "state";
@@ -75,7 +76,7 @@
     // URL components
     private static final String GRAPH_VIDEO_URL_FORMAT = "https://graph-video.%s";
     private static final String GRAPH_URL_FORMAT = "https://graph.%s";
-    public static final String GRAPH_API_VERSION = "v2.5";
+    private static final String GRAPH_API_VERSION = "v2.9";
 
     public static final Collection<String> errorsProxyAuthDisabled =
             Utility.unmodifiableCollection("service_disabled", "AndroidAuthKillSwitchException");
@@ -95,7 +96,7 @@ public static final String getGraphVideoUrlBase() {
         return String.format(GRAPH_VIDEO_URL_FORMAT, FacebookSdk.getFacebookDomain());
     }
 
-    public static final String getAPIVersion() {
+    public static final String getDefaultAPIVersion() {
         return GRAPH_API_VERSION;
     }
 
diff --git a/facebook/src/main/java/com/facebook/internal/SmartLoginOption.java b/facebook/src/main/java/com/facebook/internal/SmartLoginOption.java
new file mode 100644
index 000000000..4283bda91
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/internal/SmartLoginOption.java
@@ -0,0 +1,49 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+package com.facebook.internal;
+
+import java.util.EnumSet;
+
+public enum SmartLoginOption {
+    None(0),
+    Enabled(1),
+    RequireConfirm(2);
+
+    public static final EnumSet<SmartLoginOption> ALL = EnumSet.allOf(SmartLoginOption.class);
+    public static EnumSet<SmartLoginOption> parseOptions(long bitmask) {
+        EnumSet<SmartLoginOption> result = EnumSet.noneOf(SmartLoginOption.class);
+        for (SmartLoginOption opt : ALL) {
+            if ((bitmask & opt.getValue()) != 0) {
+                result.add(opt);
+            }
+        }
+        return result;
+    }
+
+    private final long mValue;
+
+    SmartLoginOption(long value) {
+        this.mValue= value;
+    }
+
+    public long getValue(){
+        return mValue;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/internal/UrlRedirectCache.java b/facebook/src/main/java/com/facebook/internal/UrlRedirectCache.java
index bf4c5b269..382d31f8e 100644
--- a/facebook/src/main/java/com/facebook/internal/UrlRedirectCache.java
+++ b/facebook/src/main/java/com/facebook/internal/UrlRedirectCache.java
@@ -38,7 +38,7 @@
     static final String TAG = UrlRedirectCache.class.getSimpleName();
     private static final String REDIRECT_CONTENT_TAG = TAG + "_Redirect";
 
-    private volatile static FileLruCache urlRedirectCache;
+    private static FileLruCache urlRedirectCache;
 
     synchronized static FileLruCache getCache() throws IOException{
         if (urlRedirectCache == null) {
diff --git a/facebook/src/main/java/com/facebook/internal/Utility.java b/facebook/src/main/java/com/facebook/internal/Utility.java
index d99696b8a..fcf3fdc82 100644
--- a/facebook/src/main/java/com/facebook/internal/Utility.java
+++ b/facebook/src/main/java/com/facebook/internal/Utility.java
@@ -21,7 +21,6 @@
 package com.facebook.internal;
 
 import android.content.Context;
-import android.content.SharedPreferences;
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
 import android.database.Cursor;
@@ -43,7 +42,6 @@
 
 import com.facebook.AccessToken;
 import com.facebook.FacebookException;
-import com.facebook.FacebookRequestError;
 import com.facebook.FacebookSdk;
 import com.facebook.GraphRequest;
 import com.facebook.GraphResponse;
@@ -54,16 +52,36 @@
 import org.json.JSONObject;
 import org.json.JSONTokener;
 
-import java.io.*;
+import java.io.BufferedInputStream;
+import java.io.Closeable;
+import java.io.File;
+import java.io.FilenameFilter;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.OutputStream;
+import java.io.UnsupportedEncodingException;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
+import java.math.BigInteger;
 import java.net.HttpURLConnection;
 import java.net.URLConnection;
-
 import java.net.URLDecoder;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.Random;
+import java.util.Set;
+import java.util.TimeZone;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.regex.Pattern;
@@ -78,34 +96,10 @@
     private static final String HASH_ALGORITHM_MD5 = "MD5";
     private static final String HASH_ALGORITHM_SHA1 = "SHA-1";
     private static final String URL_SCHEME = "https";
-    private static final String APP_SETTINGS_PREFS_STORE =
-            "com.facebook.internal.preferences.APP_SETTINGS";
-    private static final String APP_SETTINGS_PREFS_KEY_FORMAT =
-            "com.facebook.internal.APP_SETTINGS.%s";
-    private static final String APP_SETTING_SUPPORTS_IMPLICIT_SDK_LOGGING =
-            "supports_implicit_sdk_logging";
-    private static final String APP_SETTING_NUX_CONTENT = "gdpv4_nux_content";
-    private static final String APP_SETTING_NUX_ENABLED = "gdpv4_nux_enabled";
-    private static final String APP_SETTING_DIALOG_CONFIGS = "android_dialog_configs";
-    private static final String APP_SETTING_ANDROID_SDK_ERROR_CATEGORIES =
-            "android_sdk_error_categories";
     private static final String EXTRA_APP_EVENTS_INFO_FORMAT_VERSION = "a2";
-    private static final String DIALOG_CONFIG_DIALOG_NAME_FEATURE_NAME_SEPARATOR = "\\|";
-    private static final String DIALOG_CONFIG_NAME_KEY = "name";
-    private static final String DIALOG_CONFIG_VERSIONS_KEY = "versions";
-    private static final String DIALOG_CONFIG_URL_KEY = "url";
 
     private final static String UTF8 = "UTF-8";
 
-    private static final String[] APP_SETTING_FIELDS = new String[]{
-            APP_SETTING_SUPPORTS_IMPLICIT_SDK_LOGGING,
-            APP_SETTING_NUX_CONTENT,
-            APP_SETTING_NUX_ENABLED,
-            APP_SETTING_DIALOG_CONFIGS,
-            APP_SETTING_ANDROID_SDK_ERROR_CATEGORIES
-    };
-    private static final String APPLICATION_FIELDS = "fields";
-
     // This is the default used by the buffer streams, but they trace a warning if you do not
     // specify.
     public static final int DEFAULT_STREAM_BUFFER_SIZE = 8192;
@@ -117,159 +111,15 @@
 
     private static final int GINGERBREAD_MR1 = 10;
 
-    private static Map<String, FetchedAppSettings> fetchedAppSettings =
-            new ConcurrentHashMap<String, FetchedAppSettings>();
-
-    private static AtomicBoolean loadingSettings = new AtomicBoolean(false);
-
     private static int numCPUCores = 0;
 
     private static long timestampOfLastCheck = -1;
     private static long totalExternalStorageGB = -1;
     private static long availableExternalStorageGB = -1;
-    private static String deviceTimezone = "";
+    private static String deviceTimezoneAbbreviation = "";
+    private static String deviceTimeZoneName = "";
     private static String carrierName = noCarrierConstant;
 
-    public static class FetchedAppSettings {
-        private boolean supportsImplicitLogging;
-        private String nuxContent;
-        private boolean nuxEnabled;
-        private Map<String, Map<String, DialogFeatureConfig>> dialogConfigMap;
-        private FacebookRequestErrorClassification errorClassification;
-
-        private FetchedAppSettings(boolean supportsImplicitLogging,
-                                   String nuxContent,
-                                   boolean nuxEnabled,
-                                   Map<String, Map<String, DialogFeatureConfig>> dialogConfigMap,
-                                   FacebookRequestErrorClassification errorClassification) {
-            this.supportsImplicitLogging = supportsImplicitLogging;
-            this.nuxContent = nuxContent;
-            this.nuxEnabled = nuxEnabled;
-            this.dialogConfigMap = dialogConfigMap;
-            this.errorClassification = errorClassification;
-        }
-
-        public boolean supportsImplicitLogging() {
-            return supportsImplicitLogging;
-        }
-
-        public String getNuxContent() {
-            return nuxContent;
-        }
-
-        public boolean getNuxEnabled() {
-            return nuxEnabled;
-        }
-
-        public Map<String, Map<String, DialogFeatureConfig>> getDialogConfigurations() {
-            return dialogConfigMap;
-        }
-
-        public FacebookRequestErrorClassification getErrorClassification() {
-            return errorClassification;
-        }
-    }
-
-    public static class DialogFeatureConfig {
-        private static DialogFeatureConfig parseDialogConfig(JSONObject dialogConfigJSON) {
-            String dialogNameWithFeature = dialogConfigJSON.optString(DIALOG_CONFIG_NAME_KEY);
-            if (Utility.isNullOrEmpty(dialogNameWithFeature)) {
-                return null;
-            }
-
-            String[] components = dialogNameWithFeature.split(
-                    DIALOG_CONFIG_DIALOG_NAME_FEATURE_NAME_SEPARATOR);
-            if (components.length != 2) {
-                // We expect the format to be dialogName|FeatureName, where both components are
-                // non-empty.
-                return null;
-            }
-
-            String dialogName = components[0];
-            String featureName = components[1];
-            if (isNullOrEmpty(dialogName) || isNullOrEmpty(featureName)) {
-                return null;
-            }
-
-            String urlString = dialogConfigJSON.optString(DIALOG_CONFIG_URL_KEY);
-            Uri fallbackUri = null;
-            if (!Utility.isNullOrEmpty(urlString)) {
-                fallbackUri = Uri.parse(urlString);
-            }
-
-            JSONArray versionsJSON = dialogConfigJSON.optJSONArray(DIALOG_CONFIG_VERSIONS_KEY);
-
-            int[] featureVersionSpec = parseVersionSpec(versionsJSON);
-
-            return new DialogFeatureConfig(
-                    dialogName, featureName, fallbackUri, featureVersionSpec);
-        }
-
-        private static int[] parseVersionSpec(JSONArray versionsJSON) {
-            // Null signifies no overrides to the min-version as specified by the SDK.
-            // An empty array would basically turn off the dialog (i.e no supported versions), so
-            // DON'T default to that.
-            int[] versionSpec = null;
-            if (versionsJSON != null) {
-                int numVersions = versionsJSON.length();
-                versionSpec = new int[numVersions];
-                for (int i = 0; i < numVersions; i++) {
-                    // See if the version was stored directly as an Integer
-                    int version = versionsJSON.optInt(i, NativeProtocol.NO_PROTOCOL_AVAILABLE);
-                    if (version == NativeProtocol.NO_PROTOCOL_AVAILABLE) {
-                        // If not, then see if it was stored as a string that can be parsed out.
-                        // If even that fails, then we will leave it as NO_PROTOCOL_AVAILABLE
-                        String versionString = versionsJSON.optString(i);
-                        if (!isNullOrEmpty(versionString)) {
-                            try {
-                                version = Integer.parseInt(versionString);
-                            } catch (NumberFormatException nfe) {
-                                logd(LOG_TAG, nfe);
-                                version = NativeProtocol.NO_PROTOCOL_AVAILABLE;
-                            }
-                        }
-                    }
-
-                    versionSpec[i] = version;
-                }
-            }
-
-            return versionSpec;
-        }
-
-        private String dialogName;
-        private String featureName;
-        private Uri fallbackUrl;
-        private int[] featureVersionSpec;
-
-        private DialogFeatureConfig(
-                String dialogName,
-                String featureName,
-                Uri fallbackUrl,
-                int[] featureVersionSpec) {
-            this.dialogName = dialogName;
-            this.featureName = featureName;
-            this.fallbackUrl = fallbackUrl;
-            this.featureVersionSpec = featureVersionSpec;
-        }
-
-        public String getDialogName() {
-            return dialogName;
-        }
-
-        public String getFeatureName() {
-            return featureName;
-        }
-
-        public Uri getFallbackUrl() {
-            return fallbackUrl;
-        }
-
-        public int[] getVersionSpec() {
-            return featureVersionSpec;
-        }
-    }
-
     /**
      * Each array represents a set of closed or open Range, like so: [0,10,50,60] - Ranges are
      * {0-9}, {50-59} [20] - Ranges are {20-} [30,40,100] - Ranges are {30-39}, {100-}
@@ -542,9 +392,9 @@ public static boolean putJSONValueInBundle(Bundle bundle, String key, Object val
         } else if (value instanceof String) {
             bundle.putString(key, (String) value);
         } else if (value instanceof JSONArray) {
-            bundle.putString(key, ((JSONArray) value).toString());
+            bundle.putString(key, value.toString());
         } else if (value instanceof JSONObject) {
-            bundle.putString(key, ((JSONObject) value).toString());
+            bundle.putString(key, value.toString());
         } else {
             return false;
         }
@@ -762,160 +612,6 @@ public static boolean hasSameId(JSONObject a, JSONObject b) {
         return idA.equals(idB);
     }
 
-    public static void loadAppSettingsAsync(
-            final Context context,
-            final String applicationId
-    ) {
-        boolean canStartLoading = loadingSettings.compareAndSet(false, true);
-        if (Utility.isNullOrEmpty(applicationId) ||
-                fetchedAppSettings.containsKey(applicationId) ||
-                !canStartLoading) {
-            return;
-        }
-
-        final String settingsKey = String.format(APP_SETTINGS_PREFS_KEY_FORMAT, applicationId);
-
-        FacebookSdk.getExecutor().execute(new Runnable() {
-            @Override
-            public void run() {
-                // See if we had a cached copy and use that immediately.
-                SharedPreferences sharedPrefs = context.getSharedPreferences(
-                        APP_SETTINGS_PREFS_STORE,
-                        Context.MODE_PRIVATE);
-                String settingsJSONString = sharedPrefs.getString(settingsKey, null);
-                if (!isNullOrEmpty(settingsJSONString)) {
-                    JSONObject settingsJSON = null;
-                    try {
-                        settingsJSON = new JSONObject(settingsJSONString);
-                    } catch (JSONException je) {
-                        logd(LOG_TAG, je);
-                    }
-                    if (settingsJSON != null) {
-                        parseAppSettingsFromJSON(applicationId, settingsJSON);
-                    }
-                }
-
-                JSONObject resultJSON = getAppSettingsQueryResponse(applicationId);
-                if (resultJSON != null) {
-                    parseAppSettingsFromJSON(applicationId, resultJSON);
-
-                    sharedPrefs.edit()
-                            .putString(settingsKey, resultJSON.toString())
-                            .apply();
-                }
-
-                loadingSettings.set(false);
-            }
-        });
-    }
-
-    // This call only gets the app settings if they're already fetched
-    public static FetchedAppSettings getAppSettingsWithoutQuery(final String applicationId) {
-        return applicationId != null ? fetchedAppSettings.get(applicationId) : null;
-    }
-
-    // Note that this method makes a synchronous Graph API call, so should not be called from the
-    // main thread.
-    public static FetchedAppSettings queryAppSettings(
-            final String applicationId,
-            final boolean forceRequery) {
-        // Cache the last app checked results.
-        if (!forceRequery && fetchedAppSettings.containsKey(applicationId)) {
-            return fetchedAppSettings.get(applicationId);
-        }
-
-        JSONObject response = getAppSettingsQueryResponse(applicationId);
-        if (response == null) {
-            return null;
-        }
-
-        return parseAppSettingsFromJSON(applicationId, response);
-    }
-
-    private static FetchedAppSettings parseAppSettingsFromJSON(
-            String applicationId,
-            JSONObject settingsJSON) {
-        JSONArray errorClassificationJSON =
-                settingsJSON.optJSONArray(APP_SETTING_ANDROID_SDK_ERROR_CATEGORIES);
-        FacebookRequestErrorClassification errorClassification =
-                errorClassificationJSON == null
-                        ? FacebookRequestErrorClassification.getDefaultErrorClassification()
-                        : FacebookRequestErrorClassification.createFromJSON(
-                        errorClassificationJSON
-                );
-        FetchedAppSettings result = new FetchedAppSettings(
-                settingsJSON.optBoolean(APP_SETTING_SUPPORTS_IMPLICIT_SDK_LOGGING, false),
-                settingsJSON.optString(APP_SETTING_NUX_CONTENT, ""),
-                settingsJSON.optBoolean(APP_SETTING_NUX_ENABLED, false),
-                parseDialogConfigurations(settingsJSON.optJSONObject(APP_SETTING_DIALOG_CONFIGS)),
-                errorClassification
-        );
-
-        fetchedAppSettings.put(applicationId, result);
-
-        return result;
-    }
-
-    // Note that this method makes a synchronous Graph API call, so should not be called from the
-    // main thread.
-    private static JSONObject getAppSettingsQueryResponse(String applicationId) {
-        Bundle appSettingsParams = new Bundle();
-        appSettingsParams.putString(APPLICATION_FIELDS, TextUtils.join(",", APP_SETTING_FIELDS));
-
-        GraphRequest request = GraphRequest.newGraphPathRequest(null, applicationId, null);
-        request.setSkipClientToken(true);
-        request.setParameters(appSettingsParams);
-
-        return request.executeAndWait().getJSONObject();
-    }
-
-    public static DialogFeatureConfig getDialogFeatureConfig(
-            String applicationId,
-            String actionName,
-            String featureName) {
-        if (Utility.isNullOrEmpty(actionName) || Utility.isNullOrEmpty(featureName)) {
-            return null;
-        }
-
-        FetchedAppSettings settings = fetchedAppSettings.get(applicationId);
-        if (settings != null) {
-            Map<String, DialogFeatureConfig> featureMap =
-                    settings.getDialogConfigurations().get(actionName);
-            if (featureMap != null) {
-                return featureMap.get(featureName);
-            }
-        }
-        return null;
-    }
-
-    private static Map<String, Map<String, DialogFeatureConfig>> parseDialogConfigurations(
-            JSONObject dialogConfigResponse) {
-        HashMap<String, Map<String, DialogFeatureConfig>> dialogConfigMap = new HashMap<String, Map<String, DialogFeatureConfig>>();
-
-        if (dialogConfigResponse != null) {
-            JSONArray dialogConfigData = dialogConfigResponse.optJSONArray("data");
-            if (dialogConfigData != null) {
-                for (int i = 0; i < dialogConfigData.length(); i++) {
-                    DialogFeatureConfig dialogConfig = DialogFeatureConfig.parseDialogConfig(
-                            dialogConfigData.optJSONObject(i));
-                    if (dialogConfig == null) {
-                        continue;
-                    }
-
-                    String dialogName = dialogConfig.getDialogName();
-                    Map<String, DialogFeatureConfig> featureMap = dialogConfigMap.get(dialogName);
-                    if (featureMap == null) {
-                        featureMap = new HashMap<String, DialogFeatureConfig>();
-                        dialogConfigMap.put(dialogName, featureMap);
-                    }
-                    featureMap.put(dialogConfig.getFeatureName(), dialogConfig);
-                }
-            }
-        }
-
-        return dialogConfigMap;
-    }
-
     public static String safeGetStringFromResponse(JSONObject response, String propertyName) {
         return response != null ? response.optString(propertyName, "") : "";
     }
@@ -1033,7 +729,7 @@ public static void setAppEventExtendedDeviceInfoParameters(
         extraInfoArray.put(Build.MODEL);
 
         // Locale
-        Locale locale = null;
+        Locale locale;
         try {
             locale = appContext.getResources().getConfiguration().locale;
         } catch (Exception e) {
@@ -1042,7 +738,7 @@ public static void setAppEventExtendedDeviceInfoParameters(
         extraInfoArray.put(locale.getLanguage() + "_" + locale.getCountry());
 
         // Time zone
-        extraInfoArray.put(deviceTimezone);
+        extraInfoArray.put(deviceTimezoneAbbreviation);
 
         // Carrier
         extraInfoArray.put(carrierName);
@@ -1075,6 +771,8 @@ public static void setAppEventExtendedDeviceInfoParameters(
         extraInfoArray.put(totalExternalStorageGB);
         extraInfoArray.put(availableExternalStorageGB);
 
+        extraInfoArray.put(deviceTimeZoneName);
+
         params.put("extinfo", extraInfoArray.toString());
     }
 
@@ -1167,7 +865,8 @@ public static String getUriString(final Uri uri) {
     public static boolean isWebUri(final Uri uri) {
         return (uri != null)
                 && ("http".equalsIgnoreCase(uri.getScheme())
-                || "https".equalsIgnoreCase(uri.getScheme()));
+                || "https".equalsIgnoreCase(uri.getScheme())
+                || "fbstaging".equalsIgnoreCase(uri.getScheme()));
     }
 
     public static boolean isContentUri(final Uri uri) {
@@ -1201,7 +900,7 @@ public static Date getBundleLongAsDate(Bundle bundle, String key, Date dateBase)
             return null;
         }
 
-        long secondsFromBase = Long.MIN_VALUE;
+        long secondsFromBase;
 
         Object secondsObject = bundle.get(key);
         if (secondsObject instanceof Long) {
@@ -1327,7 +1026,6 @@ private static int refreshBestGuessNumberOfCPUCores() {
 
         // Enumerate all available CPU files and try to count the number of CPU cores.
         try {
-            int res = 0;
             File cpuDir = new File("/sys/devices/system/cpu/");
             File[] cpuFiles = cpuDir.listFiles(new FilenameFilter() {
                 @Override
@@ -1365,7 +1063,11 @@ private static void refreshPeriodicExtendedDeviceInfo(Context appContext) {
     private static void refreshTimezone() {
         try {
             TimeZone tz = TimeZone.getDefault();
-            deviceTimezone = tz.getDisplayName(tz.inDaylightTime(new Date()), TimeZone.SHORT);
+            deviceTimezoneAbbreviation = tz.getDisplayName(
+                    tz.inDaylightTime(new Date()),
+                    TimeZone.SHORT
+            );
+            deviceTimeZoneName = tz.getID();
         } catch (Exception e) {
         }
     }
@@ -1479,4 +1181,9 @@ public static PermissionsPair handlePermissionResponse(JSONObject result)
 
         return new PermissionsPair(grantedPermissions, declinedPermissions);
     }
+
+    public static String generateRandomString(int length) {
+        Random r = new Random();
+        return new BigInteger(length * 5, r).toString(32);
+    }
 }
diff --git a/facebook/src/main/java/com/facebook/internal/Validate.java b/facebook/src/main/java/com/facebook/internal/Validate.java
index ce393d9d7..4befe2d2d 100644
--- a/facebook/src/main/java/com/facebook/internal/Validate.java
+++ b/facebook/src/main/java/com/facebook/internal/Validate.java
@@ -23,18 +23,22 @@
 import android.Manifest;
 import android.content.ComponentName;
 import android.content.Context;
+import android.content.Intent;
 import android.content.pm.ActivityInfo;
 import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.net.Uri;
 import android.os.Looper;
 import android.util.Log;
 
+import com.facebook.CustomTabActivity;
 import com.facebook.FacebookActivity;
 import com.facebook.FacebookException;
 import com.facebook.FacebookSdk;
 import com.facebook.FacebookSdkNotInitializedException;
-import com.facebook.LoggingBehavior;
 
 import java.util.Collection;
+import java.util.List;
 
 /**
  * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
@@ -55,6 +59,11 @@
             "com.facebook.FacebookActivity to your AndroidManifest.xml file. See " +
             "https://developers.facebook.com/docs/android/getting-started for more info.";
 
+    private static final String CUSTOM_TAB_REDIRECT_ACTIVITY_NOT_FOUND_REASON =
+            "FacebookActivity is declared incorrectly in the AndroidManifest.xml, please " +
+            "add com.facebook.FacebookActivity to your AndroidManifest.xml file. " +
+            "See https://developers.facebook.com/docs/android/getting-started for more info.";
+
     private static final String CONTENT_PROVIDER_NOT_FOUND_REASON =
             "A ContentProvider for this app was not set up in the AndroidManifest.xml, please " +
             "add %s as a provider to your AndroidManifest.xml file. See " +
@@ -147,6 +156,14 @@ public static String hasAppID() {
         return id;
     }
 
+    public static String hasClientToken() {
+        String token = FacebookSdk.getClientToken();
+        if (token == null) {
+            throw new IllegalStateException("No Client Token found, please set the Client Token.");
+        }
+        return token;
+    }
+
     public static void hasInternetPermissions(Context context) {
         Validate.hasInternetPermissions(context, true);
     }
@@ -163,10 +180,34 @@ public static void hasInternetPermissions(Context context, boolean shouldThrow)
         }
     }
 
+    public static boolean hasWiFiPermission(Context context) {
+        return hasPermission(context, Manifest.permission.ACCESS_WIFI_STATE);
+    }
+
+    public static boolean hasChangeWifiStatePermission(Context context) {
+        return hasPermission(context, Manifest.permission.CHANGE_WIFI_STATE);
+    }
+
+    public static boolean hasLocationPermission(Context context) {
+        return hasPermission(context, Manifest.permission.ACCESS_COARSE_LOCATION)
+                || hasPermission(context, Manifest.permission.ACCESS_FINE_LOCATION);
+    }
+
+    public static boolean hasBluetoothPermission(Context context) {
+        return hasPermission(context, Manifest.permission.BLUETOOTH)
+                && hasPermission(context, Manifest.permission.BLUETOOTH_ADMIN);
+    }
+
+    public static boolean hasPermission(Context context, String permission) {
+        return context.checkCallingOrSelfPermission(permission) ==
+          PackageManager.PERMISSION_GRANTED;
+    }
+
     public static void hasFacebookActivity(Context context) {
         Validate.hasFacebookActivity(context, true);
     }
 
+    @SuppressWarnings("WrongConstant")
     public static void hasFacebookActivity(Context context, boolean shouldThrow) {
         Validate.notNull(context, "context");
         PackageManager pm = context.getPackageManager();
@@ -177,6 +218,7 @@ public static void hasFacebookActivity(Context context, boolean shouldThrow) {
             try {
                 activityInfo = pm.getActivityInfo(componentName, PackageManager.GET_ACTIVITIES);
             } catch (PackageManager.NameNotFoundException e) {
+                // ignore
             }
         }
         if (activityInfo == null) {
@@ -188,6 +230,48 @@ public static void hasFacebookActivity(Context context, boolean shouldThrow) {
         }
     }
 
+    public static void checkCustomTabRedirectActivity(Context context) {
+        Validate.checkCustomTabRedirectActivity(context, true);
+    }
+
+    public static void checkCustomTabRedirectActivity(Context context, boolean shouldThrow) {
+        if (!hasCustomTabRedirectActivity(context)) {
+            if (shouldThrow) {
+                throw new IllegalStateException(CUSTOM_TAB_REDIRECT_ACTIVITY_NOT_FOUND_REASON);
+            } else {
+                Log.w(TAG, CUSTOM_TAB_REDIRECT_ACTIVITY_NOT_FOUND_REASON);
+            }
+        }
+    }
+
+    public static boolean hasCustomTabRedirectActivity(Context context) {
+        Validate.notNull(context, "context");
+        PackageManager pm = context.getPackageManager();
+        List<ResolveInfo> infos = null;
+        if (pm != null) {
+            Intent intent = new Intent();
+            intent.setAction(Intent.ACTION_VIEW);
+            intent.addCategory(Intent.CATEGORY_DEFAULT);
+            intent.addCategory(Intent.CATEGORY_BROWSABLE);
+            intent.setData(Uri.parse("fb" + FacebookSdk.getApplicationId() + "://authorize"));
+            infos = pm.queryIntentActivities(intent, PackageManager.GET_RESOLVED_FILTER);
+        }
+        boolean hasActivity = false;
+        if (infos != null) {
+            for (ResolveInfo info : infos) {
+                ActivityInfo activityInfo = info.activityInfo;
+                if (activityInfo.name.equals(CustomTabActivity.class.getName())) {
+                    hasActivity = true;
+                } else {
+                    // another application is listening for this url scheme, don't open
+                    // Custom Tab for security reasons
+                    return false;
+                }
+            }
+        }
+        return hasActivity;
+    }
+
     public static void hasContentProvider(Context context) {
         Validate.notNull(context, "context");
         String appId = Validate.hasAppID();
diff --git a/facebook/src/main/java/com/facebook/internal/WebDialog.java b/facebook/src/main/java/com/facebook/internal/WebDialog.java
index f92dd8230..03fce8859 100644
--- a/facebook/src/main/java/com/facebook/internal/WebDialog.java
+++ b/facebook/src/main/java/com/facebook/internal/WebDialog.java
@@ -32,19 +32,48 @@
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
 import android.net.http.SslError;
+import android.os.AsyncTask;
 import android.os.Bundle;
 import android.util.DisplayMetrics;
-import android.view.*;
+import android.view.Display;
+import android.view.Gravity;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.Window;
+import android.view.WindowManager;
 import android.webkit.SslErrorHandler;
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.LinearLayout;
-import com.facebook.*;
+
+import com.facebook.AccessToken;
+import com.facebook.FacebookDialogException;
+import com.facebook.FacebookException;
+import com.facebook.FacebookGraphResponseException;
+import com.facebook.FacebookOperationCanceledException;
+import com.facebook.FacebookRequestError;
+import com.facebook.FacebookSdk;
+import com.facebook.FacebookServiceException;
+import com.facebook.GraphRequest;
+import com.facebook.GraphRequestAsyncTask;
+import com.facebook.GraphResponse;
 import com.facebook.R;
+import com.facebook.share.internal.ShareConstants;
+import com.facebook.share.internal.ShareInternalUtility;
+import com.facebook.share.widget.ShareDialog;
+
+import org.json.JSONArray;
+import org.json.JSONObject;
 
+import java.util.Arrays;
+import java.util.List;
 import java.util.Locale;
+import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.concurrent.CountDownLatch;
 
 /**
  * com.facebook.internal is solely for the use of other packages within the Facebook SDK for
@@ -77,8 +106,6 @@
     // translucent border around the webview
     private static final int BACKGROUND_GRAY = 0xCC000000;
 
-    public static final int DEFAULT_THEME = android.R.style.Theme_Translucent_NoTitleBar;
-
     private String url;
     private String expectedRedirectUrl = REDIRECT_URI;
     private OnCompleteListener onCompleteListener;
@@ -86,6 +113,7 @@
     private ProgressDialog spinner;
     private ImageView crossImageView;
     private FrameLayout contentFrameLayout;
+    private UploadStagingResourcesTask uploadTask;
     private boolean listenerCalled = false;
     private boolean isDetached = false;
     private boolean isPageFinished = false;
@@ -154,12 +182,18 @@ public WebDialog(Context context, String action, Bundle parameters, int theme, O
                 ServerProtocol.DIALOG_PARAM_SDK_VERSION,
                 String.format(Locale.ROOT, "android-%s", FacebookSdk.getSdkVersion()));
 
-        Uri uri = Utility.buildUri(
-                ServerProtocol.getDialogAuthority(),
-                ServerProtocol.getAPIVersion() + "/" + ServerProtocol.DIALOG_PATH + action,
-                parameters);
-        this.url = uri.toString();
         onCompleteListener = listener;
+
+        if (action.equals(ShareDialog.WEB_SHARE_DIALOG) &&
+                parameters.containsKey(ShareConstants.WEB_DIALOG_PARAM_MEDIA)) {
+            this.uploadTask = new UploadStagingResourcesTask(action, parameters);
+        } else {
+            Uri uri = Utility.buildUri(
+                    ServerProtocol.getDialogAuthority(),
+                    FacebookSdk.getGraphApiVersion() + "/" + ServerProtocol.DIALOG_PATH + action,
+                    parameters);
+            this.url = uri.toString();
+        }
     }
 
     /**
@@ -205,7 +239,21 @@ public void dismiss() {
     @Override
     protected void onStart() {
         super.onStart();
-        resize();
+        if (uploadTask != null && uploadTask.getStatus() == AsyncTask.Status.PENDING) {
+            uploadTask.execute();
+            spinner.show();
+        } else {
+            resize();
+        }
+    }
+
+    @Override
+    protected void onStop() {
+        if (uploadTask != null) {
+            uploadTask.cancel(true);
+            spinner.dismiss();
+        }
+        super.onStop();
     }
 
     @Override
@@ -252,12 +300,13 @@ public void onCancel(DialogInterface dialogInterface) {
          */
         createCrossImage();
 
-        /* Now we know 'x' drawable width and height,
-         * layout the webview and add it the contentFrameLayout layout
-         */
-        int crossWidth = crossImageView.getDrawable().getIntrinsicWidth();
-
-        setUpWebView(crossWidth / 2 + 1);
+        if (this.url != null) {
+            /* Now we know 'x' drawable width and height,
+            * layout the webview and add it the contentFrameLayout layout
+            */
+            int crossWidth = crossImageView.getDrawable().getIntrinsicWidth();
+            setUpWebView(crossWidth / 2 + 1);
+        }
 
         /* Finally add the 'x' image to the contentFrameLayout layout and
         * add contentFrameLayout to the Dialog view
@@ -350,7 +399,7 @@ protected void sendSuccessToListener(Bundle values) {
     protected void sendErrorToListener(Throwable error) {
         if (onCompleteListener != null && !listenerCalled) {
             listenerCalled = true;
-            FacebookException facebookException = null;
+            FacebookException facebookException;
             if (error instanceof FacebookException) {
                 facebookException = (FacebookException) error;
             } else {
@@ -656,4 +705,125 @@ private void finishInit(Context context, String action, Bundle parameters) {
             }
         }
     }
+
+    private class UploadStagingResourcesTask extends AsyncTask<Void, Void, String[]> {
+        private String action;
+        private Bundle parameters;
+        private Exception[] exceptions;
+
+        UploadStagingResourcesTask(String action, Bundle parameters) {
+            this.action = action;
+            this.parameters = parameters;
+        }
+
+        @Override
+        protected String[] doInBackground(Void... args) {
+            final String[] params =
+                    parameters.getStringArray(ShareConstants.WEB_DIALOG_PARAM_MEDIA);
+            final String[] results = new String[params.length];
+            exceptions = new Exception[params.length];
+
+            final CountDownLatch latch = new CountDownLatch(params.length);
+            final ConcurrentLinkedQueue<GraphRequestAsyncTask> tasks =
+                    new ConcurrentLinkedQueue<>();
+
+            final AccessToken accessToken = AccessToken.getCurrentAccessToken();
+            try {
+                for (int i = 0; i < params.length; i++) {
+                    if (isCancelled()) {
+                        for (AsyncTask task : tasks) {
+                            task.cancel(true);
+                        }
+                        return null;
+                    }
+                    final Uri uri = Uri.parse(params[i]);
+                    final int writeIndex = i;
+                    if (Utility.isWebUri(uri)) {
+                        results[writeIndex] = uri.toString();
+                        latch.countDown();
+                        continue;
+                    }
+                    final GraphRequest.Callback callback = new GraphRequest.Callback() {
+                        @Override
+                        public void onCompleted(GraphResponse response) {
+                            try {
+                                final FacebookRequestError error = response.getError();
+                                if (error != null) {
+                                    String message = error.getErrorMessage();
+                                    if (message == null) {
+                                        message = "Error staging photo.";
+                                    }
+                                    throw new FacebookGraphResponseException(response, message);
+                                }
+                                final JSONObject data = response.getJSONObject();
+                                if (data == null) {
+                                    throw new FacebookException("Error staging photo.");
+                                }
+                                final String stagedImageUri = data.optString("uri");
+                                if (stagedImageUri == null) {
+                                    throw new FacebookException("Error staging photo.");
+                                }
+                                results[writeIndex] = stagedImageUri;
+                            } catch(Exception e) {
+                                exceptions[writeIndex] = e;
+                            }
+                            latch.countDown();
+                        }
+                    };
+
+                    GraphRequestAsyncTask task =
+                            ShareInternalUtility.newUploadStagingResourceWithImageRequest(
+                                    accessToken,
+                                    uri,
+                                    callback).executeAsync();
+                    tasks.add(task);
+                }
+                latch.await();
+            } catch(Exception e) {
+                for (AsyncTask task : tasks) {
+                    task.cancel(true);
+                }
+                return null;
+            }
+
+            return results;
+        }
+
+        @Override
+        protected void onPostExecute(String[] results) {
+            spinner.dismiss();
+
+            for (Exception e : exceptions) {
+                if (e != null) {
+                    sendErrorToListener(e);
+                    return;
+                }
+            }
+
+            if (results == null) {
+                sendErrorToListener(new FacebookException("Failed to stage photos for web dialog"));
+                return;
+            }
+
+            List<String> resultList = Arrays.asList(results);
+            if (resultList.contains(null)) {
+                sendErrorToListener(new FacebookException("Failed to stage photos for web dialog"));
+                return;
+            }
+
+            Utility.putJSONValueInBundle(
+                    parameters,
+                    ShareConstants.WEB_DIALOG_PARAM_MEDIA,
+                    new JSONArray(resultList));
+
+            Uri uri = Utility.buildUri(
+                    ServerProtocol.getDialogAuthority(),
+                    FacebookSdk.getGraphApiVersion() + "/" + ServerProtocol.DIALOG_PATH + action,
+                    parameters);
+
+            WebDialog.this.url = uri.toString();
+            int crossWidth = crossImageView.getDrawable().getIntrinsicWidth();
+            setUpWebView(crossWidth / 2 + 1);
+        }
+    }
 }
diff --git a/facebook/src/main/java/com/facebook/login/CustomTabLoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/CustomTabLoginMethodHandler.java
new file mode 100644
index 000000000..06c5b33c4
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/login/CustomTabLoginMethodHandler.java
@@ -0,0 +1,254 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.login;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.ResolveInfo;
+import android.content.pm.ServiceInfo;
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.Parcel;
+import android.os.Parcelable;
+
+import com.facebook.AccessTokenSource;
+import com.facebook.CustomTabMainActivity;
+import com.facebook.FacebookException;
+import com.facebook.FacebookOperationCanceledException;
+import com.facebook.FacebookRequestError;
+import com.facebook.FacebookSdk;
+import com.facebook.FacebookServiceException;
+import com.facebook.internal.FetchedAppSettings;
+import com.facebook.internal.FetchedAppSettingsManager;
+import com.facebook.internal.ServerProtocol;
+import com.facebook.internal.Utility;
+import com.facebook.internal.Validate;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+public class CustomTabLoginMethodHandler extends WebLoginMethodHandler {
+    private static final int CUSTOM_TAB_REQUEST_CODE = 1;
+    private static final int CHALLENGE_LENGTH = 20;
+    private static final int API_EC_DIALOG_CANCEL = 4201;
+    private static final String CUSTOM_TABS_SERVICE_ACTION =
+            "android.support.customtabs.action.CustomTabsService";
+    private static final String[] CHROME_PACKAGES = {
+            "com.android.chrome",
+            "com.chrome.beta",
+            "com.chrome.dev",
+    };
+
+    private String currentPackage;
+    private String expectedChallenge;
+
+    CustomTabLoginMethodHandler(LoginClient loginClient) {
+        super(loginClient);
+        expectedChallenge = Utility.generateRandomString(CHALLENGE_LENGTH);
+    }
+
+    @Override
+    String getNameForLogging() {
+        return "custom_tab";
+    }
+
+    @Override
+    AccessTokenSource getTokenSource() {
+        return AccessTokenSource.CHROME_CUSTOM_TAB;
+    }
+
+    @Override
+    protected String getSSODevice() {
+        return "chrome_custom_tab";
+    }
+
+    @Override
+    boolean tryAuthorize(final LoginClient.Request request) {
+        if (!isCustomTabsAllowed()) {
+            return false;
+        }
+
+        Bundle parameters = getParameters(request);
+        parameters = addExtraParameters(parameters, request);
+        Activity activity = loginClient.getActivity();
+
+        Intent intent = new Intent(activity, CustomTabMainActivity.class);
+        intent.putExtra(CustomTabMainActivity.EXTRA_PARAMS, parameters);
+        intent.putExtra(CustomTabMainActivity.EXTRA_CHROME_PACKAGE, getChromePackage());
+        loginClient.getFragment().startActivityForResult(intent, CUSTOM_TAB_REQUEST_CODE);
+
+        return true;
+    }
+
+    private boolean isCustomTabsAllowed() {
+        return isCustomTabsEnabled()
+                && getChromePackage() != null
+                && Validate.hasCustomTabRedirectActivity(FacebookSdk.getApplicationContext());
+    }
+
+    private boolean isCustomTabsEnabled() {
+        final String appId = Utility.getMetadataApplicationId(loginClient.getActivity());
+        final FetchedAppSettings settings = FetchedAppSettingsManager.getAppSettingsWithoutQuery(appId);
+        return settings != null && settings.getCustomTabsEnabled();
+    }
+
+    private String getChromePackage() {
+        if (currentPackage != null) {
+            return currentPackage;
+        }
+        Context context = loginClient.getActivity();
+        Intent serviceIntent = new Intent(CUSTOM_TABS_SERVICE_ACTION);
+        List<ResolveInfo> resolveInfos =
+                context.getPackageManager().queryIntentServices(serviceIntent, 0);
+        if (resolveInfos != null) {
+            Set<String> chromePackages = new HashSet<>(Arrays.asList(CHROME_PACKAGES));
+            for (ResolveInfo resolveInfo : resolveInfos) {
+                ServiceInfo serviceInfo = resolveInfo.serviceInfo;
+                if (serviceInfo != null && chromePackages.contains(serviceInfo.packageName)) {
+                    currentPackage = serviceInfo.packageName;
+                    return currentPackage;
+                }
+            }
+        }
+        return null;
+    }
+
+    @Override
+    boolean onActivityResult(int requestCode, int resultCode, Intent data) {
+        if (requestCode != CUSTOM_TAB_REQUEST_CODE) {
+            return super.onActivityResult(requestCode, resultCode, data);
+        }
+        LoginClient.Request request = loginClient.getPendingRequest();
+        if (resultCode == Activity.RESULT_OK) {
+            onCustomTabComplete(data.getStringExtra(CustomTabMainActivity.EXTRA_URL), request);
+            return true;
+        }
+        super.onComplete(request, null, new FacebookOperationCanceledException());
+        return false;
+    }
+
+    private void onCustomTabComplete(String url, LoginClient.Request request) {
+        if (url != null && url.startsWith(CustomTabMainActivity.getRedirectUrl())) {
+            Uri uri = Uri.parse(url);
+            Bundle values = Utility.parseUrlQueryString(uri.getQuery());
+            values.putAll(Utility.parseUrlQueryString(uri.getFragment()));
+
+            if (!validateChallengeParam(values)) {
+                super.onComplete(request, null, new FacebookException("Invalid state parameter"));
+                return;
+            }
+
+            String error = values.getString("error");
+            if (error == null) {
+                error = values.getString("error_type");
+            }
+
+            String errorMessage = values.getString("error_msg");
+            if (errorMessage == null) {
+                errorMessage = values.getString("error_message");
+            }
+            if (errorMessage == null) {
+                errorMessage = values.getString("error_description");
+            }
+            String errorCodeString = values.getString("error_code");
+            int errorCode = FacebookRequestError.INVALID_ERROR_CODE;
+            if (!Utility.isNullOrEmpty(errorCodeString)) {
+                try {
+                    errorCode = Integer.parseInt(errorCodeString);
+                } catch (NumberFormatException ex) {
+                    errorCode = FacebookRequestError.INVALID_ERROR_CODE;
+                }
+            }
+
+            if (Utility.isNullOrEmpty(error) && Utility.isNullOrEmpty(errorMessage)
+                    && errorCode == FacebookRequestError.INVALID_ERROR_CODE) {
+                super.onComplete(request, values, null);
+            } else if (error != null && (error.equals("access_denied") ||
+                    error.equals("OAuthAccessDeniedException"))) {
+                super.onComplete(request, null, new FacebookOperationCanceledException());
+            } else if (errorCode == API_EC_DIALOG_CANCEL) {
+                super.onComplete(request, null, new FacebookOperationCanceledException());
+            } else {
+                FacebookRequestError requestError =
+                        new FacebookRequestError(errorCode, error, errorMessage);
+                super.onComplete(
+                        request,
+                        null,
+                        new FacebookServiceException(requestError, errorMessage));
+            }
+        }
+    }
+
+    @Override
+    protected void putChallengeParam(JSONObject param) throws JSONException {
+        param.put(LoginLogger.EVENT_PARAM_CHALLENGE, expectedChallenge);
+    }
+
+    private boolean validateChallengeParam(Bundle values) {
+        try {
+            String stateString = values.getString(ServerProtocol.DIALOG_PARAM_STATE);
+            if (stateString == null) {
+                return false;
+            }
+            JSONObject state = new JSONObject(stateString);
+            String challenge = state.getString(LoginLogger.EVENT_PARAM_CHALLENGE);
+            return challenge.equals(expectedChallenge);
+        } catch (JSONException e) {
+            return false;
+        }
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    CustomTabLoginMethodHandler(Parcel source) {
+        super(source);
+        expectedChallenge = source.readString();
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        super.writeToParcel(dest, flags);
+        dest.writeString(expectedChallenge);
+    }
+
+    public static final Parcelable.Creator<CustomTabLoginMethodHandler> CREATOR =
+            new Parcelable.Creator() {
+
+                @Override
+                public CustomTabLoginMethodHandler createFromParcel(Parcel source) {
+                    return new CustomTabLoginMethodHandler(source);
+                }
+
+                @Override
+                public CustomTabLoginMethodHandler[] newArray(int size) {
+                    return new CustomTabLoginMethodHandler[size];
+                }
+            };
+}
diff --git a/facebook/src/main/java/com/facebook/login/DeviceAuthDialog.java b/facebook/src/main/java/com/facebook/login/DeviceAuthDialog.java
index c190703d1..545772f76 100644
--- a/facebook/src/main/java/com/facebook/login/DeviceAuthDialog.java
+++ b/facebook/src/main/java/com/facebook/login/DeviceAuthDialog.java
@@ -20,11 +20,16 @@
 
 package com.facebook.login;
 
+import android.app.AlertDialog;
 import android.app.Dialog;
 import android.content.DialogInterface;
+import android.graphics.Bitmap;
+import android.graphics.drawable.BitmapDrawable;
+import android.net.Uri;
 import android.os.Bundle;
 import android.os.Parcel;
 import android.os.Parcelable;
+import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.v4.app.DialogFragment;
 import android.text.Html;
@@ -47,7 +52,17 @@
 import com.facebook.GraphResponse;
 import com.facebook.HttpMethod;
 import com.facebook.R;
+import com.facebook.appevents.AppEventsLogger;
+import com.facebook.devicerequests.internal.DeviceRequestsHelper;
+import com.facebook.internal.AnalyticsEvents;
+import com.facebook.internal.FetchedAppSettings;
+import com.facebook.internal.FetchedAppSettingsManager;
+import com.facebook.internal.ImageDownloader;
+import com.facebook.internal.ImageRequest;
+import com.facebook.internal.ImageResponse;
+import com.facebook.internal.SmartLoginOption;
 import com.facebook.internal.Utility;
+import com.facebook.internal.Validate;
 
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -58,9 +73,15 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 
 public class DeviceAuthDialog extends DialogFragment {
-    private static final String DEVICE_OUATH_ENDPOINT = "oauth/device";
+    private static final String DEVICE_LOGIN_ENDPOINT = "device/login";
+    private static final String DEVICE_LOGIN_STATUS_ENDPOINT = "device/login_status";
     private static final String REQUEST_STATE_KEY = "request_state";
 
+    private static final int LOGIN_ERROR_SUBCODE_EXCESSIVE_POLLING = 1349172;
+    private static final int LOGIN_ERROR_SUBCODE_AUTHORIZATION_DECLINED = 1349173;
+    private static final int LOGIN_ERROR_SUBCODE_AUTHORIZATION_PENDING = 1349174;
+    private static final int LOGIN_ERROR_SUBCODE_CODE_EXPIRED = 1349152;
+
     private ProgressBar progressBar;
     private TextView confirmationCode;
     private DeviceAuthMethodHandler deviceAuthMethodHandler;
@@ -73,6 +94,8 @@
     // Used to tell if we are destroying the fragment because it was dismissed or dismissing the
     // fragment because it is being destroyed.
     private boolean isBeingDestroyed = false;
+    private boolean isRetry = false;
+    private LoginClient.Request mRequest = null;
 
     @Nullable
     @Override
@@ -97,26 +120,13 @@ public View onCreateView(
         return view;
     }
 
+    @NonNull
     @Override
     public Dialog onCreateDialog(Bundle savedInstanceState) {
         dialog = new Dialog(getActivity(), R.style.com_facebook_auth_dialog);
         LayoutInflater inflater = getActivity().getLayoutInflater();
-        View view = inflater.inflate(R.layout.com_facebook_device_auth_dialog_fragment, null);
-        progressBar = (ProgressBar)view.findViewById(R.id.progress_bar);
-        confirmationCode = (TextView)view.findViewById(R.id.confirmation_code);
 
-        Button cancelButton = (Button) view.findViewById(R.id.cancel_button);
-        cancelButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                onCancel();
-            }
-        });
-
-        TextView instructions = (TextView)view.findViewById(
-                R.id.com_facebook_device_auth_instructions);
-        instructions.setText(
-                Html.fromHtml(getString(R.string.com_facebook_device_auth_instructions)));
+        View view = initializeContentView(DeviceRequestsHelper.isAvailable() && !this.isRetry);
 
         dialog.setContentView(view);
         return dialog;
@@ -156,18 +166,31 @@ public void onDestroy() {
     }
 
     public void startLogin(final LoginClient.Request request) {
-        Bundle parameters = new Bundle();
-        parameters.putString("type", "device_code");
-        parameters.putString("client_id", FacebookSdk.getApplicationId());
+        this.mRequest = request;
+        final Bundle parameters = new Bundle();
         parameters.putString("scope", TextUtils.join(",", request.getPermissions()));
+
+        String redirectUriString = request.getDeviceRedirectUriString();
+        if (redirectUriString != null) {
+            parameters.putString("redirect_uri", redirectUriString);
+        }
+
+        String accessToken = Validate.hasAppID()+ "|" + Validate.hasClientToken();
+        parameters.putString(GraphRequest.ACCESS_TOKEN_PARAM, accessToken);
+        parameters.putString(DeviceRequestsHelper.DEVICE_INFO_PARAM,
+                             DeviceRequestsHelper.getDeviceInfo());
+
         GraphRequest graphRequest = new GraphRequest(
                 null,
-                DEVICE_OUATH_ENDPOINT,
+                DEVICE_LOGIN_ENDPOINT,
                 parameters,
                 HttpMethod.POST,
                 new GraphRequest.Callback() {
             @Override
             public void onCompleted(GraphResponse response) {
+                if (isBeingDestroyed) {
+                    return;
+                }
                 if (response.getError() != null) {
                     onError(response.getError().getException());
                     return;
@@ -196,6 +219,13 @@ private void setCurrentRequestState(RequestState currentRequestState) {
         confirmationCode.setVisibility(View.VISIBLE);
         progressBar.setVisibility(View.GONE);
 
+        if (!isRetry) {
+            if (DeviceRequestsHelper.startAdvertisementService(currentRequestState.getUserCode())) {
+                final AppEventsLogger logger = AppEventsLogger.newLogger(getContext());
+                logger.logSdkEvent(AnalyticsEvents.EVENT_SMART_LOGIN_SERVICE, null, null);
+            }
+        }
+
         // If we polled within the last interval schedule a poll else start a poll.
         if (currentRequestState.withinLastRefreshWindow()) {
             schedulePoll();
@@ -204,6 +234,32 @@ private void setCurrentRequestState(RequestState currentRequestState) {
         }
     }
 
+    private View initializeContentView(boolean isSmartLogin) {
+        View view;
+        LayoutInflater inflater = this.getActivity().getLayoutInflater();
+        if (isSmartLogin) {
+            view = inflater.inflate(R.layout.com_facebook_smart_device_dialog_fragment, null);
+        } else {
+            view = inflater.inflate(R.layout.com_facebook_device_auth_dialog_fragment, null);
+        }
+        progressBar = (ProgressBar)view.findViewById(R.id.progress_bar);
+        confirmationCode = (TextView)view.findViewById(R.id.confirmation_code);
+
+        Button cancelButton = (Button) view.findViewById(R.id.cancel_button);
+        cancelButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                onCancel();
+            }
+        });
+
+        TextView instructions = (TextView)view.findViewById(
+                R.id.com_facebook_device_auth_instructions);
+        instructions.setText(
+                Html.fromHtml(getString(R.string.com_facebook_device_auth_instructions)));
+        return view;
+    }
+
     private void poll() {
         currentRequestState.setLastPoll(new Date().getTime());
         currentGraphRequestPoll = getPollRequest().executeAsync();
@@ -223,13 +279,10 @@ public void run() {
 
     private GraphRequest getPollRequest() {
         Bundle parameters = new Bundle();
-        parameters.putString("type", "device_token");
-        parameters.putString("client_id", FacebookSdk.getApplicationId());
         parameters.putString("code", currentRequestState.getRequestCode());
-
         return new GraphRequest(
                 null,
-                DEVICE_OUATH_ENDPOINT,
+                DEVICE_LOGIN_STATUS_ENDPOINT,
                 parameters,
                 HttpMethod.POST,
                 new GraphRequest.Callback() {
@@ -244,19 +297,21 @@ public void onCompleted(GraphResponse response) {
                         if (error != null) {
                             // We need to decide if this is a fatal error by checking the error
                             // message text
-                            String errorMessage = error.getErrorMessage();
-                            if (errorMessage.equals("authorization_pending") ||
-                                    errorMessage.equals("slow_down")) {
-                                // Keep polling. If we got the slow down message just ignore
-                                schedulePoll();
-                                return;
-                            } else if (errorMessage.equals("authorization_declined") ||
-                                    errorMessage.equals("code_expired")) {
-                                onCancel();
-                                return;
+                            switch (error.getSubErrorCode()) {
+                                case LOGIN_ERROR_SUBCODE_AUTHORIZATION_PENDING:
+                                case LOGIN_ERROR_SUBCODE_EXCESSIVE_POLLING: {
+                                    // Keep polling. If we got the slow down message just ignore
+                                    schedulePoll();
+                                } break;
+                                case LOGIN_ERROR_SUBCODE_CODE_EXPIRED:
+                                case LOGIN_ERROR_SUBCODE_AUTHORIZATION_DECLINED: {
+                                    onCancel();
+                                } break;
+                                default: {
+                                    onError(response.getError().getException());
+                                }
+                                break;
                             }
-
-                            onError(response.getError().getException());
                             return;
                         }
 
@@ -270,9 +325,37 @@ public void onCompleted(GraphResponse response) {
                 });
     }
 
+    private void presentConfirmation(final String userId,
+                                     final Utility.PermissionsPair permissions,
+                                     final String accessToken,
+                                     final String name) {
+        final String message = getResources().getString(
+            R.string.com_facebook_smart_login_confirmation_title);
+        final String continueFormat = getResources().getString(
+            R.string.com_facebook_smart_login_confirmation_continue_as);
+        final String cancel = getResources().getString(
+            R.string.com_facebook_smart_login_confirmation_cancel);
+        final String continueText = String.format(continueFormat, name);
+        AlertDialog.Builder builder = new AlertDialog.Builder(getContext());
+        builder.setMessage(message)
+                .setCancelable(true)
+                .setNegativeButton(continueText, new DialogInterface.OnClickListener() {
+                    public void onClick(DialogInterface alertDialog, int which) {
+                        completeLogin(userId, permissions, accessToken);
+                    }
+                })
+                .setPositiveButton(cancel, new DialogInterface.OnClickListener() {
+                    public void onClick(DialogInterface alertDialog, int which) {
+                        View view = initializeContentView(false);
+                        dialog.setContentView(view);
+                        startLogin(mRequest);
+                    }
+                });
+        builder.create().show();
+    }
     private void onSuccess(final String accessToken) {
         Bundle parameters = new Bundle();
-        parameters.putString("fields", "id,permissions");
+        parameters.putString("fields", "id,permissions,name");
         AccessToken temporaryToken = new AccessToken(
                 accessToken,
                 FacebookSdk.getApplicationId(),
@@ -302,35 +385,58 @@ public void onCompleted(GraphResponse response) {
 
                         String userId;
                         Utility.PermissionsPair permissions;
+                        String name;
                         try {
                             JSONObject jsonObject = response.getJSONObject();
                             userId = jsonObject.getString("id");
                             permissions = Utility.handlePermissionResponse(jsonObject);
+                            name = jsonObject.getString("name");
                         } catch (JSONException ex) {
                             onError(new FacebookException(ex));
                             return;
                         }
+                        DeviceRequestsHelper.cleanUpAdvertisementService(
+                                currentRequestState.getUserCode());
+
+                        boolean requireConfirm =
+                                FetchedAppSettingsManager.
+                                getAppSettingsWithoutQuery(FacebookSdk.getApplicationId()).
+                                getSmartLoginOptions().contains(SmartLoginOption.RequireConfirm);
+                        if (requireConfirm && !isRetry) {
+                            isRetry = true;
+                            presentConfirmation(userId, permissions, accessToken, name);
+                            return;
+                        }
 
-                        deviceAuthMethodHandler.onSuccess(
-                                accessToken,
-                                FacebookSdk.getApplicationId(),
-                                userId,
-                                permissions.getGrantedPermissions(),
-                                permissions.getDeclinedPermissions(),
-                                AccessTokenSource.DEVICE_AUTH,
-                                null,
-                                null);
-                        dialog.dismiss();
+                        completeLogin(userId, permissions, accessToken);
                     }
                 });
         request.executeAsync();
     }
 
+    private void completeLogin(String userId,
+                               Utility.PermissionsPair permissions,
+                               String accessToken) {
+        deviceAuthMethodHandler.onSuccess(
+                accessToken,
+                FacebookSdk.getApplicationId(),
+                userId,
+                permissions.getGrantedPermissions(),
+                permissions.getDeclinedPermissions(),
+                AccessTokenSource.DEVICE_AUTH,
+                null,
+                null);
+        dialog.dismiss();
+    }
+
     private void onError(FacebookException ex) {
         if (!completed.compareAndSet(false, true)) {
             return;
         }
 
+        if (currentRequestState != null) {
+            DeviceRequestsHelper.cleanUpAdvertisementService(currentRequestState.getUserCode());
+        }
         deviceAuthMethodHandler.onError(ex);
         dialog.dismiss();
     }
@@ -341,6 +447,10 @@ private void onCancel() {
             return;
         }
 
+        if (currentRequestState != null) {
+            DeviceRequestsHelper.cleanUpAdvertisementService(currentRequestState.getUserCode());
+        }
+
         if (deviceAuthMethodHandler != null) {
             // We are detached and cannot send a cancel message back
             deviceAuthMethodHandler.onCancel();
diff --git a/facebook/src/main/java/com/facebook/login/DeviceAuthMethodHandler.java b/facebook/src/main/java/com/facebook/login/DeviceAuthMethodHandler.java
index 9539525f3..e034b18e8 100644
--- a/facebook/src/main/java/com/facebook/login/DeviceAuthMethodHandler.java
+++ b/facebook/src/main/java/com/facebook/login/DeviceAuthMethodHandler.java
@@ -20,7 +20,6 @@
 
 package com.facebook.login;
 
-import android.app.Dialog;
 import android.os.Parcel;
 import android.os.Parcelable;
 
diff --git a/facebook/src/main/java/com/facebook/login/DeviceLoginManager.java b/facebook/src/main/java/com/facebook/login/DeviceLoginManager.java
new file mode 100644
index 000000000..e96c21746
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/login/DeviceLoginManager.java
@@ -0,0 +1,83 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.login;
+
+import android.net.Uri;
+
+import java.util.Collection;
+
+/**
+ * This class manages device login and permissions for Facebook.
+ */
+public class DeviceLoginManager extends LoginManager {
+    private Uri deviceRedirectUri;
+
+    private static volatile DeviceLoginManager instance;
+
+    /**
+     * Getter for the login manager.
+     * @return The login manager.
+     */
+    public static DeviceLoginManager getInstance() {
+        if (instance == null) {
+            synchronized (DeviceLoginManager.class) {
+                if (instance == null) {
+                    instance = new DeviceLoginManager();
+                }
+            }
+        }
+        return instance;
+    }
+
+    /**
+     * Set uri to redirect the user to after they complete
+     * the device login flow on the external device.
+     * <p/>
+     * The Uri must be configured in your App Settings -> Advanced -> OAuth Redirect URIs.
+     *
+     * @param uri The URI to set.
+     */
+    public void setDeviceRedirectUri(Uri uri) {
+        this.deviceRedirectUri = uri;
+    }
+
+    /**
+     * Get the previously set uri that will be used to redirect the user to
+     * after they complete the device login flow on the external device.
+     * <p/>
+     * The Uri must be configured in your App Settings -> Advanced -> OAuth Redirect URIs.
+     *
+     * @return The current device redirect uri set.
+     */
+    public Uri getDeviceRedirectUri() {
+        return this.deviceRedirectUri;
+    }
+
+    @Override
+    protected LoginClient.Request createLoginRequest(Collection<String> permissions) {
+        LoginClient.Request request = super.createLoginRequest(permissions);
+        Uri redirectUri = getDeviceRedirectUri();
+        if (redirectUri != null) {
+            request.setDeviceRedirectUriString(redirectUri.toString());
+        }
+        return request;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/login/FacebookLiteLoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/FacebookLiteLoginMethodHandler.java
new file mode 100644
index 000000000..4de6dfa9b
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/login/FacebookLiteLoginMethodHandler.java
@@ -0,0 +1,87 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.login;
+
+import android.content.Intent;
+import android.os.Parcel;
+import android.os.Parcelable;
+
+import com.facebook.internal.NativeProtocol;
+import com.facebook.internal.ServerProtocol;
+
+
+class FacebookLiteLoginMethodHandler extends NativeAppLoginMethodHandler {
+
+    FacebookLiteLoginMethodHandler(LoginClient loginClient) {
+        super(loginClient);
+    }
+
+    @Override
+    String getNameForLogging() {
+        return "fb_lite_login";
+    }
+
+    @Override
+    boolean tryAuthorize(LoginClient.Request request) {
+        String e2e = LoginClient.getE2E();
+        Intent intent = NativeProtocol.createFacebookLiteIntent(
+                loginClient.getActivity(),
+                request.getApplicationId(),
+                request.getPermissions(),
+                e2e,
+                request.isRerequest(),
+                request.hasPublishPermission(),
+                request.getDefaultAudience(),
+                getClientState(request.getAuthId()));
+
+        addLoggingExtra(ServerProtocol.DIALOG_PARAM_E2E, e2e);
+
+        return tryIntent(intent, LoginClient.getLoginRequestCode());
+    }
+
+    FacebookLiteLoginMethodHandler(Parcel source) {
+        super(source);
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        super.writeToParcel(dest, flags);
+    }
+
+    public static final Parcelable.Creator<FacebookLiteLoginMethodHandler> CREATOR =
+            new Parcelable.Creator() {
+
+                @Override
+                public FacebookLiteLoginMethodHandler createFromParcel(Parcel source) {
+                    return new FacebookLiteLoginMethodHandler(source);
+                }
+
+                @Override
+                public FacebookLiteLoginMethodHandler[] newArray(int size) {
+                    return new FacebookLiteLoginMethodHandler[size];
+                }
+            };
+}
diff --git a/facebook/src/main/java/com/facebook/login/KatanaProxyLoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/KatanaProxyLoginMethodHandler.java
index 9fb8c5b7d..fee9eac8f 100644
--- a/facebook/src/main/java/com/facebook/login/KatanaProxyLoginMethodHandler.java
+++ b/facebook/src/main/java/com/facebook/login/KatanaProxyLoginMethodHandler.java
@@ -20,22 +20,14 @@
 
 package com.facebook.login;
 
-import android.app.Activity;
-import android.content.ActivityNotFoundException;
 import android.content.Intent;
-import android.os.Bundle;
 import android.os.Parcel;
 import android.os.Parcelable;
 
-import com.facebook.AccessToken;
-import com.facebook.AccessTokenSource;
-import com.facebook.FacebookException;
-import com.facebook.internal.CallbackManagerImpl;
 import com.facebook.internal.NativeProtocol;
 import com.facebook.internal.ServerProtocol;
-import com.facebook.internal.Utility;
 
-class KatanaProxyLoginMethodHandler extends LoginMethodHandler {
+class KatanaProxyLoginMethodHandler extends NativeAppLoginMethodHandler {
 
     KatanaProxyLoginMethodHandler(LoginClient loginClient) {
         super(loginClient);
@@ -64,111 +56,6 @@ boolean tryAuthorize(LoginClient.Request request) {
         return tryIntent(intent, LoginClient.getLoginRequestCode());
     }
 
-    @Override
-    boolean onActivityResult(int requestCode, int resultCode, Intent data) {
-        // Handle stuff
-        LoginClient.Result outcome;
-
-        LoginClient.Request request = loginClient.getPendingRequest();
-
-        if (data == null) {
-            // This happens if the user presses 'Back'.
-            outcome = LoginClient.Result.createCancelResult(request, "Operation canceled");
-        } else if (resultCode == Activity.RESULT_CANCELED) {
-            outcome = handleResultCancel(request, data);
-        } else if (resultCode != Activity.RESULT_OK) {
-            outcome = LoginClient.Result.createErrorResult(request,
-                    "Unexpected resultCode from authorization.", null);
-        } else {
-            outcome = handleResultOk(request, data);
-        }
-
-        if (outcome != null) {
-            loginClient.completeAndValidate(outcome);
-        } else {
-            loginClient.tryNextHandler();
-        }
-        return true;
-    }
-
-    private LoginClient.Result handleResultOk(LoginClient.Request request, Intent data) {
-        Bundle extras = data.getExtras();
-        String error = getError(extras);
-        String errorCode = extras.getString("error_code");
-        String errorMessage = getErrorMessage(extras);
-
-        String e2e = extras.getString(NativeProtocol.FACEBOOK_PROXY_AUTH_E2E_KEY);
-        if (!Utility.isNullOrEmpty(e2e)) {
-            logWebLoginCompleted(e2e);
-        }
-
-        if (error == null && errorCode == null && errorMessage == null) {
-            try {
-                AccessToken token = createAccessTokenFromWebBundle(request.getPermissions(),
-                        extras, AccessTokenSource.FACEBOOK_APPLICATION_WEB,
-                        request.getApplicationId());
-                return LoginClient.Result.createTokenResult(request, token);
-            } catch (FacebookException ex) {
-                return LoginClient.Result.createErrorResult(request, null, ex.getMessage());
-            }
-        } else if (ServerProtocol.errorsProxyAuthDisabled.contains(error)) {
-            return null;
-        } else if (ServerProtocol.errorsUserCanceled.contains(error)) {
-            return LoginClient.Result.createCancelResult(request, null);
-        } else {
-            return LoginClient.Result.createErrorResult(request, error, errorMessage, errorCode);
-        }
-    }
-
-    private LoginClient.Result handleResultCancel(LoginClient.Request request, Intent data) {
-        Bundle extras = data.getExtras();
-        String error = getError(extras);
-        String errorCode = extras.getString("error_code");
-
-        // If the device has lost network, the result will be a cancel with a connection failure
-        // error. We want our consumers to be notified of this as an error so they can tell their
-        // users to "reconnect and try again".
-        if (ServerProtocol.errorConnectionFailure.equals(errorCode)) {
-            String errorMessage = getErrorMessage(extras);
-
-            return LoginClient.Result.createErrorResult(request, error, errorMessage, errorCode);
-        }
-
-        return LoginClient.Result.createCancelResult(request, error);
-    }
-
-    private String getError(Bundle extras) {
-        String error = extras.getString("error");
-        if (error == null) {
-            error = extras.getString("error_type");
-        }
-        return error;
-    }
-
-    private String getErrorMessage(Bundle extras) {
-        String errorMessage = extras.getString("error_message");
-        if (errorMessage == null) {
-            errorMessage = extras.getString("error_description");
-        }
-        return errorMessage;
-    }
-
-    protected boolean tryIntent(Intent intent, int requestCode) {
-        if (intent == null) {
-            return false;
-        }
-
-        try {
-            loginClient.getFragment().startActivityForResult(intent, requestCode);
-        } catch (ActivityNotFoundException e) {
-            // We don't expect this to happen, since we've already validated the intent and bailed
-            // out before now if it couldn't be resolved.
-            return false;
-        }
-
-        return true;
-    }
-
     KatanaProxyLoginMethodHandler(Parcel source) {
         super(source);
     }
diff --git a/facebook/src/main/java/com/facebook/login/LoginBehavior.java b/facebook/src/main/java/com/facebook/login/LoginBehavior.java
index 57b7d589f..45c3cac4b 100644
--- a/facebook/src/main/java/com/facebook/login/LoginBehavior.java
+++ b/facebook/src/main/java/com/facebook/login/LoginBehavior.java
@@ -28,32 +28,60 @@
      * Specifies that login should attempt login in using the Facebook App, and if that
      * does not work fall back to web dialog auth. This is the default behavior.
      */
-    NATIVE_WITH_FALLBACK(true, true, false),
+    NATIVE_WITH_FALLBACK(true, true, true, false, true, true),
 
     /**
      * Specifies that login should only attempt to login using the Facebook App.
      * If the Facebook App cannot be used then the login fails.
      */
-    NATIVE_ONLY(true, false, false),
+    NATIVE_ONLY(true, true, false, false, false, true),
+
+    /**
+     * Specifies that login should only attempt to use Katana Proxy Login.
+     */
+    KATANA_ONLY(false, true, false, false, false, false),
 
     /**
      * Specifies that only the web dialog auth should be used.
      */
-    WEB_ONLY(false, true, false),
+    WEB_ONLY(false, false, true, false, true, false),
 
-    DEVICE_AUTH(false, false, true);
+    /**
+     * Specifies that only the web view dialog auth should be used.
+     */
+    WEB_VIEW_ONLY(false, false, true, false, false, false),
+
+    /**
+     * Specifies that device login authentication flow should be used.
+     * Use it via ({@link com.facebook.login.widget.DeviceLoginButton DeviceLoginButton}
+     * or ({@link com.facebook.login.DeviceLoginManager DeviceLoginManager} to authenticate.
+     */
+    DEVICE_AUTH(false, false, false, true, false, false);
 
+    private final boolean allowsGetTokenAuth;
     private final boolean allowsKatanaAuth;
     private final boolean allowsWebViewAuth;
     private final boolean allowsDeviceAuth;
+    private final boolean allowsCustomTabAuth;
+    private final boolean allowsFacebookLiteAuth;
 
-    private LoginBehavior(
+    LoginBehavior(
+            boolean allowsGetTokenAuth,
             boolean allowsKatanaAuth,
             boolean allowsWebViewAuth,
-            boolean allowsDeviceAuth) {
+            boolean allowsDeviceAuth,
+            boolean allowsCustomTabAuth,
+            boolean allowsFacebookLiteAuth) {
+        this.allowsGetTokenAuth = allowsGetTokenAuth;
         this.allowsKatanaAuth = allowsKatanaAuth;
         this.allowsWebViewAuth = allowsWebViewAuth;
         this.allowsDeviceAuth = allowsDeviceAuth;
+        this.allowsCustomTabAuth = allowsCustomTabAuth;
+        this.allowsFacebookLiteAuth = allowsFacebookLiteAuth;
+    }
+
+    boolean allowsGetTokenAuth() {
+        return allowsGetTokenAuth;
     }
 
     boolean allowsKatanaAuth() {
@@ -67,4 +95,12 @@ boolean allowsWebViewAuth() {
     boolean allowsDeviceAuth() {
         return allowsDeviceAuth;
     }
+
+    boolean allowsCustomTabAuth() {
+        return allowsCustomTabAuth;
+    }
+
+    boolean allowsFacebookLiteAuth() {
+        return allowsFacebookLiteAuth;
+    }
 }
diff --git a/facebook/src/main/java/com/facebook/login/LoginClient.java b/facebook/src/main/java/com/facebook/login/LoginClient.java
index 779460ddb..486b26b9e 100644
--- a/facebook/src/main/java/com/facebook/login/LoginClient.java
+++ b/facebook/src/main/java/com/facebook/login/LoginClient.java
@@ -24,7 +24,6 @@
 import android.app.Activity;
 import android.content.Intent;
 import android.content.pm.PackageManager;
-import android.os.Bundle;
 import android.os.Parcel;
 import android.os.Parcelable;
 import android.support.v4.app.Fragment;
@@ -32,17 +31,13 @@
 import android.text.TextUtils;
 
 import com.facebook.AccessToken;
-import com.facebook.GraphRequest;
-import com.facebook.GraphResponse;
-import com.facebook.appevents.AppEventsConstants;
 import com.facebook.FacebookException;
-import com.facebook.HttpMethod;
 import com.facebook.R;
+import com.facebook.appevents.AppEventsConstants;
 import com.facebook.internal.CallbackManagerImpl;
 import com.facebook.internal.Utility;
 import com.facebook.internal.Validate;
 
-import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
@@ -50,7 +45,6 @@
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.HashSet;
-import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
@@ -153,16 +147,27 @@ public boolean onActivityResult(int requestCode, int resultCode, Intent data) {
         return false;
     }
 
-    private LoginMethodHandler [] getHandlersToTry(Request request) {
+    protected LoginMethodHandler [] getHandlersToTry(Request request) {
         ArrayList<LoginMethodHandler> handlers = new ArrayList<LoginMethodHandler>();
 
         final LoginBehavior behavior = request.getLoginBehavior();
 
-        if (behavior.allowsKatanaAuth()) {
+        if (behavior.allowsGetTokenAuth()) {
             handlers.add(new GetTokenLoginMethodHandler(this));
+        }
+
+        if (behavior.allowsKatanaAuth()) {
             handlers.add(new KatanaProxyLoginMethodHandler(this));
         }
 
+        if (behavior.allowsFacebookLiteAuth()) {
+            handlers.add(new FacebookLiteLoginMethodHandler(this));
+        }
+
+        if (behavior.allowsCustomTabAuth()) {
+            handlers.add(new CustomTabLoginMethodHandler(this));
+        }
+
         if (behavior.allowsWebViewAuth()) {
             handlers.add(new WebViewLoginMethodHandler(this));
         }
@@ -239,9 +244,9 @@ boolean tryCurrentHandler() {
         LoginMethodHandler handler = getCurrentHandler();
         if (handler.needsInternetPermission() && !checkInternetPermission()) {
             addLoggingExtra(
-                LoginLogger.EVENT_EXTRAS_MISSING_INTERNET_PERMISSION,
-                AppEventsConstants.EVENT_PARAM_VALUE_YES,
-                false
+                    LoginLogger.EVENT_EXTRAS_MISSING_INTERNET_PERMISSION,
+                    AppEventsConstants.EVENT_PARAM_VALUE_YES,
+                    false
             );
             return false;
         }
@@ -253,10 +258,12 @@ boolean tryCurrentHandler() {
         } else {
             // We didn't try it, so we don't get any other completion
             // notification -- log that we skipped it.
+            getLogger().logAuthorizationMethodNotTried(pendingRequest.getAuthId(),
+                    handler.getNameForLogging());
             addLoggingExtra(
-                LoginLogger.EVENT_EXTRAS_NOT_TRIED,
+                    LoginLogger.EVENT_EXTRAS_NOT_TRIED,
                     handler.getNameForLogging(),
-                true
+                    true
             );
         }
 
@@ -327,7 +334,7 @@ void validateSameFbidAndFinish(Result pendingResult) {
         AccessToken newToken = pendingResult.token;
 
         try {
-            Result result = null;
+            Result result;
             if (previousToken != null && newToken != null &&
                     previousToken.getUserId().equals(newToken.getUserId())) {
                 result = Result.createTokenResult(pendingRequest, pendingResult.token);
@@ -364,7 +371,7 @@ private static AccessToken createFromTokenWithRefreshedPermissions(
 
     private LoginLogger getLogger() {
         if (loginLogger == null ||
-            !loginLogger.getApplicationId().equals(pendingRequest.getApplicationId())) {
+                !loginLogger.getApplicationId().equals(pendingRequest.getApplicationId())) {
 
             loginLogger = new LoginLogger(getActivity(), pendingRequest.getApplicationId());
         }
@@ -435,6 +442,7 @@ static String getE2E() {
         private final String applicationId;
         private final String authId;
         private boolean isRerequest = false;
+        private String deviceRedirectUriString;
 
         Request(
                 LoginBehavior loginBehavior,
@@ -482,6 +490,14 @@ void setRerequest(boolean isRerequest) {
             this.isRerequest = isRerequest;
         }
 
+        String getDeviceRedirectUriString() {
+            return this.deviceRedirectUriString;
+        }
+
+        void setDeviceRedirectUriString(String deviceRedirectUriString) {
+            this.deviceRedirectUriString = deviceRedirectUriString;
+        }
+
         boolean hasPublishPermission() {
             for (String permission : permissions) {
                 if (LoginManager.isPublishPermission(permission)) {
@@ -501,7 +517,8 @@ private Request(Parcel parcel) {
             this.defaultAudience = enumValue != null ? DefaultAudience.valueOf(enumValue) : null;
             this.applicationId = parcel.readString();
             this.authId = parcel.readString();
-            this.isRerequest = parcel.readByte() != 0 ? true : false;
+            this.isRerequest = parcel.readByte() != 0;
+            this.deviceRedirectUriString = parcel.readString();
         }
 
         @Override
@@ -517,6 +534,7 @@ public void writeToParcel(Parcel dest, int flags) {
             dest.writeString(applicationId);
             dest.writeString(authId);
             dest.writeByte((byte)(isRerequest ? 1 : 0));
+            dest.writeString(deviceRedirectUriString);
         }
 
         public static final Parcelable.Creator<Request> CREATOR = new Parcelable.Creator() {
diff --git a/facebook/src/main/java/com/facebook/login/LoginFragment.java b/facebook/src/main/java/com/facebook/login/LoginFragment.java
index 4a40f85ed..737e3ddc7 100644
--- a/facebook/src/main/java/com/facebook/login/LoginFragment.java
+++ b/facebook/src/main/java/com/facebook/login/LoginFragment.java
@@ -42,6 +42,7 @@
 
 public class LoginFragment extends Fragment {
     static final String RESULT_KEY = "com.facebook.LoginFragment:Result";
+    static final String REQUEST_KEY = "com.facebook.LoginFragment:Request";
     static final String EXTRA_REQUEST = "request";
 
     private static final String TAG = "LoginFragment";
@@ -57,12 +58,11 @@
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-
         if (savedInstanceState != null) {
             loginClient = savedInstanceState.getParcelable(SAVED_LOGIN_CLIENT);
             loginClient.setFragment(this);
         } else {
-            loginClient = new LoginClient(this);
+            loginClient = createLoginClient();
         }
 
         loginClient.setOnCompletedListener(new LoginClient.OnCompletedListener() {
@@ -80,14 +80,15 @@ public void onCompleted(LoginClient.Result outcome) {
         initializeCallingPackage(activity);
         if (activity.getIntent() != null) {
             Intent intent = activity.getIntent();
-            // Set the class loader explicitly to avoid a possible issue where the wrong
-            // class loader is used by android for unmarshalling LoginClient.Request on
-            // Samsung devices
-            intent.setExtrasClassLoader(LoginClient.Request.class.getClassLoader());
-            request = (LoginClient.Request)intent.getParcelableExtra(EXTRA_REQUEST);
+            Bundle bundle = intent.getBundleExtra(REQUEST_KEY);
+            request = bundle.getParcelable(EXTRA_REQUEST);
         }
     }
 
+    protected LoginClient createLoginClient() {
+        return new LoginClient(this);
+    }
+
     @Override
     public void onDestroy() {
         loginClient.cancelCurrentHandler();
diff --git a/facebook/src/main/java/com/facebook/login/LoginLogger.java b/facebook/src/main/java/com/facebook/login/LoginLogger.java
index d0265f971..7b31b014f 100644
--- a/facebook/src/main/java/com/facebook/login/LoginLogger.java
+++ b/facebook/src/main/java/com/facebook/login/LoginLogger.java
@@ -37,9 +37,12 @@
     // Constants for logging login-related data.
     static final String EVENT_NAME_LOGIN_METHOD_START = "fb_mobile_login_method_start";
     static final String EVENT_NAME_LOGIN_METHOD_COMPLETE = "fb_mobile_login_method_complete";
+    static final String EVENT_NAME_LOGIN_METHOD_NOT_TRIED = "fb_mobile_login_method_not_tried";
     static final String EVENT_PARAM_METHOD_RESULT_SKIPPED = "skipped";
     static final String EVENT_NAME_LOGIN_START = "fb_mobile_login_start";
     static final String EVENT_NAME_LOGIN_COMPLETE = "fb_mobile_login_complete";
+    static final String EVENT_NAME_LOGIN_STATUS_START = "fb_mobile_login_status_start";
+    static final String EVENT_NAME_LOGIN_STATUS_COMPLETE = "fb_mobile_login_status_complete";
     // Note: to ensure stability of column mappings across the four different event types, we
     // prepend a column index to each name, and we log all columns with all events, even if they are
     // empty.
@@ -50,6 +53,7 @@
     static final String EVENT_PARAM_ERROR_CODE = "4_error_code";
     static final String EVENT_PARAM_ERROR_MESSAGE = "5_error_message";
     static final String EVENT_PARAM_EXTRAS = "6_extras";
+    static final String EVENT_PARAM_CHALLENGE = "7_challenge";
     static final String EVENT_EXTRAS_TRY_LOGIN_ACTIVITY = "try_login_activity";
     static final String EVENT_EXTRAS_MISSING_INTERNET_PERMISSION = "no_internet_permission";
     static final String EVENT_EXTRAS_NOT_TRIED = "not_tried";
@@ -60,6 +64,7 @@
     static final String EVENT_EXTRAS_DEFAULT_AUDIENCE = "default_audience";
     static final String EVENT_EXTRAS_IS_REAUTHORIZE = "isReauthorize";
     static final String EVENT_EXTRAS_FACEBOOK_VERSION = "facebookVersion";
+    static final String EVENT_EXTRAS_FAILURE = "failure";
 
     static final String FACEBOOK_PACKAGE_NAME = "com.facebook.katana";
 
@@ -141,7 +146,7 @@ public void logCompleteLogin(String loginRequestId, Map<String, String> loggingE
 
         // Combine extras from the request and from the result.
         JSONObject jsonObject = null;
-        if (loggingExtras.isEmpty() == false) {
+        if (!loggingExtras.isEmpty()) {
             jsonObject = new JSONObject(loggingExtras);
         }
         if (resultExtras != null) {
@@ -192,6 +197,41 @@ public void logAuthorizationMethodComplete(String authId, String method, String
         appEventsLogger.logSdkEvent(EVENT_NAME_LOGIN_METHOD_COMPLETE, null, bundle);
     }
 
+    public void logAuthorizationMethodNotTried(String authId, String method) {
+        Bundle bundle = LoginLogger.newAuthorizationLoggingBundle(authId);
+        bundle.putString(EVENT_PARAM_METHOD, method);
+
+        appEventsLogger.logSdkEvent(EVENT_NAME_LOGIN_METHOD_NOT_TRIED, null, bundle);
+    }
+
+    public void logLoginStatusStart(final String loggerRef) {
+        Bundle bundle = LoginLogger.newAuthorizationLoggingBundle(loggerRef);
+        appEventsLogger.logSdkEvent(EVENT_NAME_LOGIN_STATUS_START, null, bundle);
+    }
+
+    public void logLoginStatusSuccess(final String loggerRef) {
+        Bundle bundle = LoginLogger.newAuthorizationLoggingBundle(loggerRef);
+        bundle.putString(
+            EVENT_PARAM_LOGIN_RESULT,
+            LoginClient.Result.Code.SUCCESS.getLoggingValue());
+        appEventsLogger.logSdkEvent(EVENT_NAME_LOGIN_STATUS_COMPLETE, null, bundle);
+    }
+
+    public void logLoginStatusFailure(final String loggerRef) {
+        Bundle bundle = LoginLogger.newAuthorizationLoggingBundle(loggerRef);
+        bundle.putString(EVENT_PARAM_LOGIN_RESULT, EVENT_EXTRAS_FAILURE);
+        appEventsLogger.logSdkEvent(EVENT_NAME_LOGIN_STATUS_COMPLETE, null, bundle);
+    }
+
+    public void logLoginStatusError(final String loggerRef, final Exception exception) {
+        Bundle bundle = LoginLogger.newAuthorizationLoggingBundle(loggerRef);
+        bundle.putString(
+            EVENT_PARAM_LOGIN_RESULT,
+            LoginClient.Result.Code.ERROR.getLoggingValue());
+        bundle.putString(EVENT_PARAM_ERROR_MESSAGE, exception.toString());
+        appEventsLogger.logSdkEvent(EVENT_NAME_LOGIN_STATUS_COMPLETE, null, bundle);
+    }
+
     public void logUnexpectedError(String eventName, String errorMessage) {
         logUnexpectedError(eventName, errorMessage, "");
     }
diff --git a/facebook/src/main/java/com/facebook/login/LoginManager.java b/facebook/src/main/java/com/facebook/login/LoginManager.java
index c883edd5b..db00b44ec 100644
--- a/facebook/src/main/java/com/facebook/login/LoginManager.java
+++ b/facebook/src/main/java/com/facebook/login/LoginManager.java
@@ -24,8 +24,10 @@
 import android.content.ActivityNotFoundException;
 import android.content.Intent;
 import android.content.pm.ResolveInfo;
+import android.net.Uri;
 import android.os.Bundle;
 import android.content.Context;
+import android.support.annotation.Nullable;
 import android.support.v4.app.Fragment;
 
 import com.facebook.AccessToken;
@@ -36,14 +38,19 @@
 import com.facebook.FacebookException;
 import com.facebook.FacebookSdk;
 import com.facebook.GraphResponse;
+import com.facebook.LoginStatusCallback;
 import com.facebook.Profile;
 import com.facebook.internal.CallbackManagerImpl;
 import com.facebook.internal.FragmentWrapper;
+import com.facebook.internal.NativeProtocol;
+import com.facebook.internal.Utility;
 import com.facebook.internal.Validate;
 import com.facebook.appevents.AppEventsConstants;
 
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
+import java.util.Date;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
@@ -165,6 +172,20 @@ public boolean onActivityResult(int resultCode, Intent data) {
         );
     }
 
+    /**
+     * Unregisters a login callback to the given callback manager.
+     * @param callbackManager The callback manager that will encapsulate the callback.
+     */
+    public void unregisterCallback(
+            final CallbackManager callbackManager) {
+        if (!(callbackManager instanceof CallbackManagerImpl)) {
+            throw new FacebookException("Unexpected CallbackManager, " +
+                    "please use the provided Factory.");
+        }
+        ((CallbackManagerImpl) callbackManager).unregisterCallback(
+                CallbackManagerImpl.RequestCodeOffset.Login.toRequestCode());
+    }
+
     boolean onActivityResult(int resultCode, Intent data) {
         return onActivityResult(resultCode, data, null);
     }
@@ -179,7 +200,7 @@ boolean onActivityResult(int resultCode, Intent data, FacebookCallback<LoginResu
         boolean isCanceled = false;
         if (data != null) {
             LoginClient.Result result =
-                    (LoginClient.Result) data.getParcelableExtra(LoginFragment.RESULT_KEY);
+                    data.getParcelableExtra(LoginFragment.RESULT_KEY);
             if (result != null) {
                 originalRequest = result.request;
                 code = result.code;
@@ -262,6 +283,38 @@ public void logOut() {
         Profile.setCurrentProfile(null);
     }
 
+    /**
+     * Retrieves the login status for the user. This will return an access token for the app if
+     * a user is logged into the Facebook for Android app on the same device and that user had
+     * previously logged into the app.
+     * If an access token was retrieved then a toast will be shown telling the user that they have
+     * been logged in.
+     * @param context An Android context
+     * @param responseCallback The callback to be called when the request completes
+     */
+    public void retrieveLoginStatus(
+            final Context context,
+            final LoginStatusCallback responseCallback) {
+        retrieveLoginStatus(context, LoginStatusClient.DEFAULT_TOAST_DURATION_MS, responseCallback);
+    }
+
+    /**
+     * Retrieves the login status for the user. This will return an access token for the app if
+     * a user is logged into the Facebook for Android app on the same device and that user had
+     * previously logged into the app.
+     * If an access token was retrieved then a toast will be shown telling the user that they have
+     * been logged in.
+     * @param context An Android context
+     * @param responseCallback The callback to be called when the request completes
+     * @param toastDurationMs The duration to show the success toast in milliseconds
+     */
+    public void retrieveLoginStatus(
+            final Context context,
+            final long toastDurationMs,
+            final LoginStatusCallback responseCallback) {
+        retrieveLoginStatusImpl(context, responseCallback, toastDurationMs);
+    }
+
     /**
      * Logs the user in with the requested read permissions.
      * @param fragment    The android.support.v4.app.Fragment which is starting the login process.
@@ -403,7 +456,7 @@ static boolean isPublishPermission(String permission) {
         return Collections.unmodifiableSet(set);
     }
 
-    private LoginClient.Request createLoginRequest(Collection<String> permissions) {
+    protected LoginClient.Request createLoginRequest(Collection<String> permissions) {
         LoginClient.Request request = new LoginClient.Request(
                 loginBehavior,
                 Collections.unmodifiableSet(
@@ -517,22 +570,18 @@ private boolean tryFacebookActivity(
     private boolean resolveIntent(Intent intent) {
         ResolveInfo resolveInfo = FacebookSdk.getApplicationContext().getPackageManager()
             .resolveActivity(intent, 0);
-        if (resolveInfo == null) {
-            return false;
-        }
-        return true;
+        return resolveInfo != null;
     }
 
-    private Intent getFacebookActivityIntent(LoginClient.Request request) {
+    protected Intent getFacebookActivityIntent(LoginClient.Request request) {
         Intent intent = new Intent();
         intent.setClass(FacebookSdk.getApplicationContext(), FacebookActivity.class);
         intent.setAction(request.getLoginBehavior().toString());
 
         // Let FacebookActivity populate extras appropriately
-        LoginClient.Request authClientRequest = request;
         Bundle extras = new Bundle();
         extras.putParcelable(LoginFragment.EXTRA_REQUEST, request);
-        intent.putExtras(extras);
+        intent.putExtra(LoginFragment.REQUEST_KEY, extras);
 
         return intent;
     }
@@ -583,6 +632,136 @@ private void finishLogin(
         }
     }
 
+    private void retrieveLoginStatusImpl(
+            final Context context,
+            final LoginStatusCallback responseCallback,
+            final long toastDurationMs) {
+            final String applicationId = FacebookSdk.getApplicationId();
+            final String loggerRef = UUID.randomUUID().toString();
+        final LoginStatusClient client
+                = new LoginStatusClient(
+                        context,
+                        applicationId,
+                        loggerRef,
+                        FacebookSdk.getGraphApiVersion(),
+                        toastDurationMs);
+
+        final LoginLogger logger = new LoginLogger(context, applicationId);
+
+        final LoginStatusClient.CompletedListener callback =
+            new LoginStatusClient.CompletedListener() {
+                @Override
+                public void completed(Bundle result) {
+                    if (result != null) {
+
+                        final String errorType = result.getString(NativeProtocol.STATUS_ERROR_TYPE);
+                        final String errorDescription =
+                                result.getString(NativeProtocol.STATUS_ERROR_DESCRIPTION);
+                        if (errorType != null) {
+                            handleLoginStatusError(
+                                    errorType,
+                                    errorDescription,
+                                    loggerRef,
+                                    logger,
+                                    responseCallback);
+                        } else {
+                            final String token =
+                                    result.getString(NativeProtocol.EXTRA_ACCESS_TOKEN);
+                            final long expires =
+                                    result.getLong(
+                                            NativeProtocol.EXTRA_EXPIRES_SECONDS_SINCE_EPOCH);
+                            final ArrayList<String> permissions =
+                                    result.getStringArrayList(NativeProtocol.EXTRA_PERMISSIONS);
+                            final String signedRequest =
+                                    result.getString(NativeProtocol.RESULT_ARGS_SIGNED_REQUEST);
+                            String userId = null;
+                            if (!Utility.isNullOrEmpty(signedRequest)) {
+                                userId =
+                                    LoginMethodHandler.getUserIDFromSignedRequest(signedRequest);
+                            }
+
+                            if (!Utility.isNullOrEmpty(token) &&
+                                    permissions != null &&
+                                    !permissions.isEmpty() &&
+                                    !Utility.isNullOrEmpty(userId)) {
+                                final AccessToken accessToken = new AccessToken(
+                                        token,
+                                        applicationId,
+                                        userId,
+                                        permissions,
+                                        null,
+                                        null,
+                                        new Date(expires),
+                                        null);
+                                AccessToken.setCurrentAccessToken(accessToken);
+
+                                final Profile profile = getProfileFromBundle(result);
+                                if (profile != null) {
+                                    Profile.setCurrentProfile(profile);
+                                } else {
+                                    Profile.fetchProfileForCurrentAccessToken();
+                                }
+
+                                logger.logLoginStatusSuccess(loggerRef);
+                                responseCallback.onCompleted(accessToken);
+                            } else {
+                                logger.logLoginStatusFailure(loggerRef);
+                                responseCallback.onFailure();
+                            }
+                        }
+                    } else {
+                        logger.logLoginStatusFailure(loggerRef);
+                        responseCallback.onFailure();
+                    }
+                }
+            };
+
+        client.setCompletedListener(callback);
+        logger.logLoginStatusStart(loggerRef);
+        if (!client.start()) {
+            logger.logLoginStatusFailure(loggerRef);
+            responseCallback.onFailure();
+        };
+    }
+
+    @Nullable
+    private static Profile getProfileFromBundle(Bundle result) {
+        final String name = result.getString(NativeProtocol.EXTRA_ARGS_PROFILE_NAME);
+        final String firstName = result.getString(NativeProtocol.EXTRA_ARGS_PROFILE_FIRST_NAME);
+        final String middleName = result.getString(NativeProtocol.EXTRA_ARGS_PROFILE_MIDDLE_NAME);
+        final String lastName = result.getString(NativeProtocol.EXTRA_ARGS_PROFILE_LAST_NAME);
+        final String link = result.getString(NativeProtocol.EXTRA_ARGS_PROFILE_LINK);
+        final String appScopedUserId = result.getString(NativeProtocol.EXTRA_ARGS_PROFILE_USER_ID);
+
+        if (name != null &&
+            firstName != null &&
+            middleName != null &&
+            lastName != null &&
+            link != null &&
+            appScopedUserId != null) {
+
+            return new Profile(
+                    appScopedUserId,
+                    firstName,
+                    middleName,
+                    lastName,
+                    name,
+                    Uri.parse(link));
+        }
+        return null;
+    }
+
+    private static void handleLoginStatusError(
+            final String errorType,
+            final String errorDescription,
+            final String loggerRef,
+            final LoginLogger logger,
+            final LoginStatusCallback responseCallback) {
+        final Exception exception = new FacebookException(errorType + ": " + errorDescription);
+        logger.logLoginStatusError(loggerRef, exception);
+        responseCallback.onError(exception);
+    }
+
     private static class ActivityStartActivityDelegate implements StartActivityDelegate {
         private final Activity activity;
 
@@ -622,7 +801,7 @@ public Activity getActivityContext() {
     }
 
     private static class LoginLoggerHolder {
-        private static volatile LoginLogger logger;
+        private static LoginLogger logger;
 
         private static synchronized LoginLogger getLogger(Context context) {
             context = context != null ? context : FacebookSdk.getApplicationContext();
diff --git a/facebook/src/main/java/com/facebook/login/LoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/LoginMethodHandler.java
index 95ad49009..57ddc6f49 100644
--- a/facebook/src/main/java/com/facebook/login/LoginMethodHandler.java
+++ b/facebook/src/main/java/com/facebook/login/LoginMethodHandler.java
@@ -29,13 +29,11 @@
 
 import com.facebook.AccessToken;
 import com.facebook.AccessTokenSource;
-import com.facebook.FacebookAuthorizationException;
 import com.facebook.FacebookException;
 import com.facebook.appevents.AppEventsLogger;
 import com.facebook.internal.AnalyticsEvents;
 import com.facebook.internal.NativeProtocol;
 import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
 
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -84,11 +82,15 @@ boolean needsInternetPermission() {
     void cancel() {
     }
 
+    void putChallengeParam(JSONObject param) throws JSONException {
+    }
+
     protected String getClientState(String authId) {
         JSONObject param = new JSONObject();
         try {
             param.put(LoginLogger.EVENT_PARAM_AUTH_LOGGER_ID, authId);
             param.put(LoginLogger.EVENT_PARAM_METHOD, getNameForLogging());
+            putChallengeParam(param);
         } catch (JSONException e) {
             Log.w("LoginMethodHandler", "Error creating client state json: " + e.getMessage());
         }
@@ -182,7 +184,7 @@ public static AccessToken createAccessTokenFromWebBundle(
                 new Date());
     }
 
-    private static String getUserIDFromSignedRequest(
+    static String getUserIDFromSignedRequest(
             String signedRequest) throws FacebookException {
         if (signedRequest == null || signedRequest.isEmpty()) {
             throw new FacebookException(
diff --git a/facebook/src/main/java/com/facebook/login/LoginStatusClient.java b/facebook/src/main/java/com/facebook/login/LoginStatusClient.java
new file mode 100644
index 000000000..3d23b0ffa
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/login/LoginStatusClient.java
@@ -0,0 +1,58 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.login;
+
+import android.content.Context;
+import android.os.Bundle;
+
+import com.facebook.internal.NativeProtocol;
+import com.facebook.internal.PlatformServiceClient;
+
+final class LoginStatusClient extends PlatformServiceClient {
+
+    static final long DEFAULT_TOAST_DURATION_MS = 5000L;
+    private final String loggerRef;
+    private final String graphApiVersion;
+    private final long toastDurationMs;
+
+    LoginStatusClient(final Context context,
+                      final String applicationId,
+                      final String loggerRef,
+                      final String graphApiVersion,
+                      final long toastDurationMs) {
+        super(
+                context,
+                NativeProtocol.MESSAGE_GET_LOGIN_STATUS_REQUEST,
+                NativeProtocol.MESSAGE_GET_LOGIN_STATUS_REPLY,
+                NativeProtocol.PROTOCOL_VERSION_20170411,
+                applicationId);
+        this.loggerRef = loggerRef;
+        this.graphApiVersion = graphApiVersion;
+        this.toastDurationMs = toastDurationMs;
+    }
+
+    @Override
+    protected void populateRequestBundle(Bundle data) {
+        data.putString(NativeProtocol.EXTRA_LOGGER_REF, loggerRef);
+        data.putString(NativeProtocol.EXTRA_GRAPH_API_VERSION, graphApiVersion);
+        data.putLong(NativeProtocol.EXTRA_TOAST_DURATION_MS, toastDurationMs);
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/login/NativeAppLoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/NativeAppLoginMethodHandler.java
new file mode 100644
index 000000000..be86941ad
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/login/NativeAppLoginMethodHandler.java
@@ -0,0 +1,152 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.login;
+
+import android.app.Activity;
+import android.content.ActivityNotFoundException;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Parcel;
+
+import com.facebook.AccessToken;
+import com.facebook.AccessTokenSource;
+import com.facebook.FacebookException;
+import com.facebook.internal.NativeProtocol;
+import com.facebook.internal.ServerProtocol;
+import com.facebook.internal.Utility;
+
+abstract class NativeAppLoginMethodHandler extends LoginMethodHandler {
+
+    NativeAppLoginMethodHandler(LoginClient loginClient) {
+        super(loginClient);
+    }
+
+    NativeAppLoginMethodHandler(Parcel source) {
+        super(source);
+    }
+
+    abstract boolean tryAuthorize(LoginClient.Request request);
+
+    @Override
+    boolean onActivityResult(int requestCode, int resultCode, Intent data) {
+        // Handle stuff
+        LoginClient.Result outcome;
+
+        LoginClient.Request request = loginClient.getPendingRequest();
+
+        if (data == null) {
+            // This happens if the user presses 'Back'.
+            outcome = LoginClient.Result.createCancelResult(request, "Operation canceled");
+        } else if (resultCode == Activity.RESULT_CANCELED) {
+            outcome = handleResultCancel(request, data);
+        } else if (resultCode != Activity.RESULT_OK) {
+            outcome = LoginClient.Result.createErrorResult(request,
+                    "Unexpected resultCode from authorization.", null);
+        } else {
+            outcome = handleResultOk(request, data);
+        }
+
+        if (outcome != null) {
+            loginClient.completeAndValidate(outcome);
+        } else {
+            loginClient.tryNextHandler();
+        }
+        return true;
+    }
+
+    private LoginClient.Result handleResultOk(LoginClient.Request request, Intent data) {
+        Bundle extras = data.getExtras();
+        String error = getError(extras);
+        String errorCode = extras.getString("error_code");
+        String errorMessage = getErrorMessage(extras);
+
+        String e2e = extras.getString(NativeProtocol.FACEBOOK_PROXY_AUTH_E2E_KEY);
+        if (!Utility.isNullOrEmpty(e2e)) {
+            logWebLoginCompleted(e2e);
+        }
+
+        if (error == null && errorCode == null && errorMessage == null) {
+            try {
+                AccessToken token = createAccessTokenFromWebBundle(request.getPermissions(),
+                        extras, AccessTokenSource.FACEBOOK_APPLICATION_WEB,
+                        request.getApplicationId());
+                return LoginClient.Result.createTokenResult(request, token);
+            } catch (FacebookException ex) {
+                return LoginClient.Result.createErrorResult(request, null, ex.getMessage());
+            }
+        } else if (ServerProtocol.errorsProxyAuthDisabled.contains(error)) {
+            return null;
+        } else if (ServerProtocol.errorsUserCanceled.contains(error)) {
+            return LoginClient.Result.createCancelResult(request, null);
+        } else {
+            return LoginClient.Result.createErrorResult(request, error, errorMessage, errorCode);
+        }
+    }
+
+    private LoginClient.Result handleResultCancel(LoginClient.Request request, Intent data) {
+        Bundle extras = data.getExtras();
+        String error = getError(extras);
+        String errorCode = extras.getString("error_code");
+
+        // If the device has lost network, the result will be a cancel with a connection failure
+        // error. We want our consumers to be notified of this as an error so they can tell their
+        // users to "reconnect and try again".
+        if (ServerProtocol.errorConnectionFailure.equals(errorCode)) {
+            String errorMessage = getErrorMessage(extras);
+
+            return LoginClient.Result.createErrorResult(request, error, errorMessage, errorCode);
+        }
+
+        return LoginClient.Result.createCancelResult(request, error);
+    }
+
+    private String getError(Bundle extras) {
+        String error = extras.getString("error");
+        if (error == null) {
+            error = extras.getString("error_type");
+        }
+        return error;
+    }
+
+    private String getErrorMessage(Bundle extras) {
+        String errorMessage = extras.getString("error_message");
+        if (errorMessage == null) {
+            errorMessage = extras.getString("error_description");
+        }
+        return errorMessage;
+    }
+
+    protected boolean tryIntent(Intent intent, int requestCode) {
+        if (intent == null) {
+            return false;
+        }
+
+        try {
+            loginClient.getFragment().startActivityForResult(intent, requestCode);
+        } catch (ActivityNotFoundException e) {
+            // We don't expect this to happen, since we've already validated the intent and bailed
+            // out before now if it couldn't be resolved.
+            return false;
+        }
+
+        return true;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/login/WebLoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/WebLoginMethodHandler.java
new file mode 100644
index 000000000..1aa098c76
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/login/WebLoginMethodHandler.java
@@ -0,0 +1,203 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.login;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.os.Parcel;
+import android.text.TextUtils;
+import android.webkit.CookieSyncManager;
+
+import com.facebook.AccessToken;
+import com.facebook.AccessTokenSource;
+import com.facebook.FacebookException;
+import com.facebook.FacebookOperationCanceledException;
+import com.facebook.FacebookRequestError;
+import com.facebook.FacebookSdk;
+import com.facebook.FacebookServiceException;
+import com.facebook.appevents.AppEventsConstants;
+import com.facebook.internal.ServerProtocol;
+import com.facebook.internal.Utility;
+
+import java.util.Locale;
+
+abstract class WebLoginMethodHandler extends LoginMethodHandler {
+    private static final String WEB_VIEW_AUTH_HANDLER_STORE =
+            "com.facebook.login.AuthorizationClient.WebViewAuthHandler.TOKEN_STORE_KEY";
+    private static final String WEB_VIEW_AUTH_HANDLER_TOKEN_KEY = "TOKEN";
+
+    private static final String getRedirectUri() {
+        return "fb" + FacebookSdk.getApplicationId() + "://authorize";
+    }
+
+    private String e2e;
+
+    WebLoginMethodHandler(LoginClient loginClient) {
+        super(loginClient);
+    }
+
+    WebLoginMethodHandler(Parcel source) {
+        super(source);
+    }
+
+    abstract AccessTokenSource getTokenSource();
+
+    protected String getSSODevice() {
+        return null;
+    }
+
+    protected Bundle getParameters(final LoginClient.Request request) {
+        Bundle parameters = new Bundle();
+        if (!Utility.isNullOrEmpty(request.getPermissions())) {
+            String scope = TextUtils.join(",", request.getPermissions());
+            parameters.putString(ServerProtocol.DIALOG_PARAM_SCOPE, scope);
+            addLoggingExtra(ServerProtocol.DIALOG_PARAM_SCOPE, scope);
+        }
+
+        DefaultAudience audience = request.getDefaultAudience();
+        parameters.putString(
+                ServerProtocol.DIALOG_PARAM_DEFAULT_AUDIENCE, audience.getNativeProtocolAudience());
+        parameters.putString(
+                ServerProtocol.DIALOG_PARAM_STATE, getClientState(request.getAuthId()));
+
+        AccessToken previousToken = AccessToken.getCurrentAccessToken();
+        String previousTokenString = previousToken != null ? previousToken.getToken() : null;
+        if (previousTokenString != null
+                && (previousTokenString.equals(loadCookieToken()))) {
+            parameters.putString(
+                    ServerProtocol.DIALOG_PARAM_ACCESS_TOKEN,
+                    previousTokenString);
+            // Don't log the actual access token, just its presence or absence.
+            addLoggingExtra(
+                    ServerProtocol.DIALOG_PARAM_ACCESS_TOKEN,
+                    AppEventsConstants.EVENT_PARAM_VALUE_YES);
+        } else {
+            // The call to clear cookies will create the first instance of CookieSyncManager if
+            // necessary
+            Utility.clearFacebookCookies(loginClient.getActivity());
+            addLoggingExtra(
+                    ServerProtocol.DIALOG_PARAM_ACCESS_TOKEN,
+                    AppEventsConstants.EVENT_PARAM_VALUE_NO);
+        }
+
+        return parameters;
+    }
+
+    protected Bundle addExtraParameters(Bundle parameters, final LoginClient.Request request) {
+        parameters.putString(ServerProtocol.DIALOG_PARAM_REDIRECT_URI, getRedirectUri());
+        parameters.putString(ServerProtocol.DIALOG_PARAM_CLIENT_ID, request.getApplicationId());
+        parameters.putString(ServerProtocol.DIALOG_PARAM_E2E, loginClient.getE2E());
+        parameters.putString(
+                ServerProtocol.DIALOG_PARAM_RESPONSE_TYPE,
+                ServerProtocol.DIALOG_RESPONSE_TYPE_TOKEN_AND_SIGNED_REQUEST);
+        parameters.putString(
+                ServerProtocol.DIALOG_PARAM_RETURN_SCOPES,
+                ServerProtocol.DIALOG_RETURN_SCOPES_TRUE);
+        parameters.putString(
+                ServerProtocol.DIALOG_PARAM_AUTH_TYPE,
+                ServerProtocol.DIALOG_REREQUEST_AUTH_TYPE);
+        if (getSSODevice() != null) {
+            parameters.putString(ServerProtocol.DIALOG_PARAM_SSO_DEVICE, getSSODevice());
+        }
+
+        return parameters;
+    }
+
+    protected void onComplete(LoginClient.Request request, Bundle values, FacebookException error) {
+        LoginClient.Result outcome;
+        e2e = null;
+        if (values != null) {
+            // Actual e2e we got from the dialog should be used for logging.
+            if (values.containsKey(ServerProtocol.DIALOG_PARAM_E2E)) {
+                e2e = values.getString(ServerProtocol.DIALOG_PARAM_E2E);
+            }
+
+            try {
+                AccessToken token = createAccessTokenFromWebBundle(
+                        request.getPermissions(),
+                        values,
+                        getTokenSource(),
+                        request.getApplicationId());
+                outcome = LoginClient.Result.createTokenResult(
+                        loginClient.getPendingRequest(),
+                        token);
+
+                // Ensure any cookies set by the dialog are saved
+                // This is to work around a bug where CookieManager may fail to instantiate if
+                // CookieSyncManager has never been created.
+                CookieSyncManager syncManager =
+                        CookieSyncManager.createInstance(loginClient.getActivity());
+                syncManager.sync();
+                saveCookieToken(token.getToken());
+            } catch (FacebookException ex) {
+                outcome = LoginClient.Result.createErrorResult(
+                        loginClient.getPendingRequest(),
+                        null,
+                        ex.getMessage());
+            }
+        } else {
+            if (error instanceof FacebookOperationCanceledException) {
+                outcome = LoginClient.Result.createCancelResult(loginClient.getPendingRequest(),
+                        "User canceled log in.");
+            } else {
+                // Something went wrong, don't log a completion event since it will skew timing
+                // results.
+                e2e = null;
+
+                String errorCode = null;
+                String errorMessage = error.getMessage();
+                if (error instanceof FacebookServiceException) {
+                    FacebookRequestError requestError =
+                            ((FacebookServiceException)error).getRequestError();
+                    errorCode = String.format(Locale.ROOT, "%d", requestError.getErrorCode());
+                    errorMessage = requestError.toString();
+                }
+                outcome = LoginClient.Result.createErrorResult(loginClient.getPendingRequest(),
+                        null, errorMessage, errorCode);
+            }
+        }
+
+        if (!Utility.isNullOrEmpty(e2e)) {
+            logWebLoginCompleted(e2e);
+        }
+
+        loginClient.completeAndValidate(outcome);
+    }
+
+    private String loadCookieToken() {
+        Context context = loginClient.getActivity();
+        SharedPreferences sharedPreferences = context.getSharedPreferences(
+                WEB_VIEW_AUTH_HANDLER_STORE,
+                Context.MODE_PRIVATE);
+        return sharedPreferences.getString(WEB_VIEW_AUTH_HANDLER_TOKEN_KEY, "");
+    }
+
+    private void saveCookieToken(String token) {
+        Context context = loginClient.getActivity();
+        context.getSharedPreferences(
+                WEB_VIEW_AUTH_HANDLER_STORE,
+                Context.MODE_PRIVATE)
+                .edit()
+                .putString(WEB_VIEW_AUTH_HANDLER_TOKEN_KEY, token)
+                .apply();
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/login/WebViewLoginMethodHandler.java b/facebook/src/main/java/com/facebook/login/WebViewLoginMethodHandler.java
index 772fbf7ed..e83ead459 100644
--- a/facebook/src/main/java/com/facebook/login/WebViewLoginMethodHandler.java
+++ b/facebook/src/main/java/com/facebook/login/WebViewLoginMethodHandler.java
@@ -21,33 +21,18 @@
 package com.facebook.login;
 
 import android.content.Context;
-import android.content.SharedPreferences;
 import android.os.Bundle;
 import android.os.Parcel;
 import android.os.Parcelable;
 import android.support.v4.app.FragmentActivity;
-import android.text.TextUtils;
-import android.webkit.CookieSyncManager;
 
-import com.facebook.AccessToken;
 import com.facebook.AccessTokenSource;
-import com.facebook.FacebookSdk;
-import com.facebook.appevents.AppEventsConstants;
-import com.facebook.internal.FacebookDialogFragment;
 import com.facebook.FacebookException;
-import com.facebook.FacebookOperationCanceledException;
-import com.facebook.FacebookRequestError;
-import com.facebook.FacebookServiceException;
+import com.facebook.internal.FacebookDialogFragment;
 import com.facebook.internal.ServerProtocol;
-import com.facebook.internal.Utility;
 import com.facebook.internal.WebDialog;
 
-import java.util.Locale;
-
-class WebViewLoginMethodHandler extends LoginMethodHandler {
-    private static final String WEB_VIEW_AUTH_HANDLER_STORE =
-            "com.facebook.login.AuthorizationClient.WebViewAuthHandler.TOKEN_STORE_KEY";
-    private static final String WEB_VIEW_AUTH_HANDLER_TOKEN_KEY = "TOKEN";
+class WebViewLoginMethodHandler extends WebLoginMethodHandler {
 
     private WebDialog loginDialog;
     private String e2e;
@@ -61,6 +46,11 @@ String getNameForLogging() {
         return "web_view";
     }
 
+    @Override
+    AccessTokenSource getTokenSource() {
+        return AccessTokenSource.WEB_VIEW;
+    }
+
     @Override
     boolean needsInternetPermission() {
         return true;
@@ -76,36 +66,7 @@ void cancel() {
 
     @Override
     boolean tryAuthorize(final LoginClient.Request request) {
-        Bundle parameters = new Bundle();
-        if (!Utility.isNullOrEmpty(request.getPermissions())) {
-            String scope = TextUtils.join(",", request.getPermissions());
-            parameters.putString(ServerProtocol.DIALOG_PARAM_SCOPE, scope);
-            addLoggingExtra(ServerProtocol.DIALOG_PARAM_SCOPE, scope);
-        }
-
-        DefaultAudience audience = request.getDefaultAudience();
-        parameters.putString(
-                ServerProtocol.DIALOG_PARAM_DEFAULT_AUDIENCE, audience.getNativeProtocolAudience());
-
-        AccessToken previousToken = AccessToken.getCurrentAccessToken();
-        String previousTokenString = previousToken != null ? previousToken.getToken() : null;
-        if (previousTokenString != null
-                && (previousTokenString.equals(loadCookieToken()))) {
-            parameters.putString(
-                    ServerProtocol.DIALOG_PARAM_ACCESS_TOKEN,
-                    previousTokenString);
-            // Don't log the actual access token, just its presence or absence.
-            addLoggingExtra(
-                    ServerProtocol.DIALOG_PARAM_ACCESS_TOKEN,
-                    AppEventsConstants.EVENT_PARAM_VALUE_YES);
-        } else {
-            // The call to clear cookies will create the first instance of CookieSyncManager if
-            // necessary
-            Utility.clearFacebookCookies(loginClient.getActivity());
-            addLoggingExtra(
-                    ServerProtocol.DIALOG_PARAM_ACCESS_TOKEN,
-                    AppEventsConstants.EVENT_PARAM_VALUE_NO);
-        }
+        Bundle parameters = getParameters(request);
 
         WebDialog.OnCompleteListener listener = new WebDialog.OnCompleteListener() {
             @Override
@@ -116,8 +77,6 @@ public void onComplete(Bundle values, FacebookException error) {
 
         e2e = LoginClient.getE2E();
         addLoggingExtra(ServerProtocol.DIALOG_PARAM_E2E, e2e);
-        parameters.putString(
-                ServerProtocol.DIALOG_PARAM_STATE, getClientState(request.getAuthId()));
 
         FragmentActivity fragmentActivity = loginClient.getActivity();
         WebDialog.Builder builder = new AuthDialogBuilder(
@@ -140,81 +99,7 @@ public void onComplete(Bundle values, FacebookException error) {
 
     void onWebDialogComplete(LoginClient.Request request, Bundle values,
             FacebookException error) {
-        LoginClient.Result outcome;
-        if (values != null) {
-            // Actual e2e we got from the dialog should be used for logging.
-            if (values.containsKey(ServerProtocol.DIALOG_PARAM_E2E)) {
-                e2e = values.getString(ServerProtocol.DIALOG_PARAM_E2E);
-            }
-
-            try {
-                AccessToken token = createAccessTokenFromWebBundle(
-                        request.getPermissions(),
-                        values,
-                        AccessTokenSource.WEB_VIEW,
-                        request.getApplicationId());
-                outcome = LoginClient.Result.createTokenResult(
-                        loginClient.getPendingRequest(),
-                        token);
-
-                // Ensure any cookies set by the dialog are saved
-                // This is to work around a bug where CookieManager may fail to instantiate if
-                // CookieSyncManager has never been created.
-                CookieSyncManager syncManager =
-                        CookieSyncManager.createInstance(loginClient.getActivity());
-                syncManager.sync();
-                saveCookieToken(token.getToken());
-            } catch (FacebookException ex) {
-                outcome = LoginClient.Result.createErrorResult(
-                        loginClient.getPendingRequest(),
-                        null,
-                        ex.getMessage());
-            }
-        } else {
-            if (error instanceof FacebookOperationCanceledException) {
-                outcome = LoginClient.Result.createCancelResult(loginClient.getPendingRequest(),
-                        "User canceled log in.");
-            } else {
-                // Something went wrong, don't log a completion event since it will skew timing
-                // results.
-                e2e = null;
-
-                String errorCode = null;
-                String errorMessage = error.getMessage();
-                if (error instanceof FacebookServiceException) {
-                    FacebookRequestError requestError =
-                            ((FacebookServiceException)error).getRequestError();
-                    errorCode = String.format(Locale.ROOT, "%d", requestError.getErrorCode());
-                    errorMessage = requestError.toString();
-                }
-                outcome = LoginClient.Result.createErrorResult(loginClient.getPendingRequest(),
-                        null, errorMessage, errorCode);
-            }
-        }
-
-        if (!Utility.isNullOrEmpty(e2e)) {
-            logWebLoginCompleted(e2e);
-        }
-
-        loginClient.completeAndValidate(outcome);
-    }
-
-    private void saveCookieToken(String token) {
-        Context context = loginClient.getActivity();
-        context.getSharedPreferences(
-                WEB_VIEW_AUTH_HANDLER_STORE,
-                Context.MODE_PRIVATE)
-            .edit()
-            .putString(WEB_VIEW_AUTH_HANDLER_TOKEN_KEY, token)
-            .apply();
-    }
-
-    private String loadCookieToken() {
-        Context context = loginClient.getActivity();
-        SharedPreferences sharedPreferences = context.getSharedPreferences(
-                WEB_VIEW_AUTH_HANDLER_STORE,
-                Context.MODE_PRIVATE);
-        return sharedPreferences.getString(WEB_VIEW_AUTH_HANDLER_TOKEN_KEY, "");
+        super.onComplete(request, values, error);
     }
 
     static class AuthDialogBuilder extends WebDialog.Builder {
@@ -249,13 +134,9 @@ public WebDialog build() {
             parameters.putString(
                     ServerProtocol.DIALOG_PARAM_RETURN_SCOPES,
                     ServerProtocol.DIALOG_RETURN_SCOPES_TRUE);
-
-            // Set the re-request auth type for requests
-            if (isRerequest) {
-                parameters.putString(
+            parameters.putString(
                         ServerProtocol.DIALOG_PARAM_AUTH_TYPE,
                         ServerProtocol.DIALOG_REREQUEST_AUTH_TYPE);
-            }
 
             return new WebDialog(getContext(), OAUTH_DIALOG, parameters, getTheme(), getListener());
         }
diff --git a/facebook/src/main/java/com/facebook/login/widget/DeviceLoginButton.java b/facebook/src/main/java/com/facebook/login/widget/DeviceLoginButton.java
new file mode 100644
index 000000000..9ffb8d896
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/login/widget/DeviceLoginButton.java
@@ -0,0 +1,107 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.login.widget;
+
+import android.content.Context;
+import android.net.Uri;
+import android.util.AttributeSet;
+import android.view.View;
+
+import com.facebook.login.DeviceLoginManager;
+import com.facebook.login.LoginBehavior;
+import com.facebook.login.LoginManager;
+
+/**
+ * A Log In/Log Out button that maintains login state and logs in/out for the app.
+ * <p/>
+ * This control requires the app ID and client token to be specified in the AndroidManifest.xml.
+ */
+public class DeviceLoginButton extends LoginButton {
+
+    private Uri deviceRedirectUri;
+
+    /**
+     * Create the LoginButton by inflating from XML
+     *
+     * @see View#View(Context, AttributeSet)
+     */
+    public DeviceLoginButton(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+    }
+
+    /**
+     * Create the LoginButton by inflating from XML
+     *
+     * @see View#View(Context, AttributeSet)
+     */
+    public DeviceLoginButton(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    /**
+     * Create the LoginButton by inflating from XML and applying a style.
+     *
+     * @see View#View(Context, AttributeSet, int)
+     */
+    public DeviceLoginButton(Context context) {
+        super(context);
+    }
+
+    /**
+     * Set uri to redirect the user to after they complete
+     * the device login flow on the external device.
+     * <p/>
+     * The Uri must be configured in your App Settings -> Advanced -> OAuth Redirect URIs.
+     *
+     * @param uri The URI to set.
+     */
+    public void setDeviceRedirectUri(Uri uri) {
+        this.deviceRedirectUri = uri;
+    }
+
+    /**
+     * Get the previously set uri that will be used to redirect the user to
+     * after they complete the device login flow on the external device.
+     * <p/>
+     * The Uri must be configured in your App Settings -> Advanced -> OAuth Redirect URIs.
+     *
+     * @return The current device redirect uri set.
+     */
+    public Uri getDeviceRedirectUri() {
+        return this.deviceRedirectUri;
+    }
+
+    @Override
+    protected LoginClickListener getNewLoginClickListener() {
+        return new DeviceLoginClickListener();
+    }
+
+    private class DeviceLoginClickListener extends LoginClickListener {
+        @Override
+        protected LoginManager getLoginManager() {
+            DeviceLoginManager manager = DeviceLoginManager.getInstance();
+            manager.setDefaultAudience(getDefaultAudience());
+            manager.setLoginBehavior(LoginBehavior.DEVICE_AUTH);
+            manager.setDeviceRedirectUri(getDeviceRedirectUri());
+            return manager;
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/login/widget/LoginButton.java b/facebook/src/main/java/com/facebook/login/widget/LoginButton.java
index 78e8972ba..bacfa4b60 100644
--- a/facebook/src/main/java/com/facebook/login/widget/LoginButton.java
+++ b/facebook/src/main/java/com/facebook/login/widget/LoginButton.java
@@ -28,15 +28,25 @@
 import android.graphics.Canvas;
 import android.graphics.Paint;
 import android.os.Bundle;
+import android.support.v7.content.res.AppCompatResources;
 import android.util.AttributeSet;
 import android.view.View;
-import com.facebook.*;
+
+import com.facebook.AccessToken;
+import com.facebook.AccessTokenTracker;
+import com.facebook.CallbackManager;
+import com.facebook.FacebookButtonBase;
+import com.facebook.FacebookCallback;
+import com.facebook.FacebookSdk;
+import com.facebook.Profile;
+import com.facebook.R;
 import com.facebook.appevents.AppEventsLogger;
 import com.facebook.internal.AnalyticsEvents;
 import com.facebook.internal.CallbackManagerImpl;
+import com.facebook.internal.FetchedAppSettings;
+import com.facebook.internal.FetchedAppSettingsManager;
 import com.facebook.internal.LoginAuthorizationType;
 import com.facebook.internal.Utility;
-import com.facebook.internal.Utility.FetchedAppSettings;
 import com.facebook.login.DefaultAudience;
 import com.facebook.login.LoginBehavior;
 import com.facebook.login.LoginManager;
@@ -122,7 +132,7 @@ public int getValue() {
 
     static class LoginButtonProperties {
         private DefaultAudience defaultAudience = DefaultAudience.FRIENDS;
-        private List<String> permissions = Collections.<String>emptyList();
+        private List<String> permissions = Collections.emptyList();
         private LoginAuthorizationType authorizationType = null;
         private LoginBehavior loginBehavior = LoginBehavior.NATIVE_WITH_FALLBACK;
 
@@ -404,8 +414,9 @@ public ToolTipMode getToolTipMode() {
 
     /**
      * Sets the amount of time (in milliseconds) that the tool tip will be shown to the user. The
-     * default is {@value ToolTipPopup#DEFAULT_POPUP_DISPLAY_TIME}. Any value that is less than or
-     * equal to zero will cause the tool tip to be displayed indefinitely.
+     * default is {@value com.facebook.login.widget.ToolTipPopup#DEFAULT_POPUP_DISPLAY_TIME}.
+     * Any value that is less than or equal to zero will cause the tool tip to be displayed
+     * indefinitely.
      *
      * @param displayTime The amount of time (in milliseconds) that the tool tip will be displayed
      *                    to the user
@@ -445,6 +456,15 @@ public void registerCallback(
         getLoginManager().registerCallback(callbackManager, callback);
     }
 
+    /**
+     * Unregisters a login callback to the given callback manager.
+     *
+     * @param callbackManager The callback manager that will encapsulate the callback.
+     */
+    public void unregisterCallback(final CallbackManager callbackManager) {
+        getLoginManager().unregisterCallback(callbackManager);
+    }
+
     @Override
     protected void onAttachedToWindow() {
         super.onAttachedToWindow();
@@ -486,7 +506,7 @@ private void checkToolTipSettings() {
                 FacebookSdk.getExecutor().execute(new Runnable() {
                     @Override
                     public void run() {
-                        final FetchedAppSettings settings = Utility.queryAppSettings(appId, false);
+                        final FetchedAppSettings settings = FetchedAppSettingsManager.queryAppSettings(appId, false);
                         getActivity().runOnUiThread(new Runnable() {
                             @Override
                             public void run() {
@@ -546,7 +566,7 @@ protected void configureButton(
             final int defStyleAttr,
             final int defStyleRes) {
         super.configureButton(context, attrs, defStyleAttr, defStyleRes);
-        setInternalOnClickListener(new LoginClickListener());
+        setInternalOnClickListener(getNewLoginClickListener());
 
         parseLoginButtonAttributes(context, attrs, defStyleAttr, defStyleRes);
 
@@ -556,7 +576,7 @@ protected void configureButton(
             setBackgroundColor(getResources().getColor(R.color.com_facebook_blue));
             // hardcoding in edit mode as getResources().getString() doesn't seem to work in
             // IntelliJ
-            loginText = "Log in with Facebook";
+            loginText = "Continue with Facebook";
         } else {
             accessTokenTracker = new AccessTokenTracker() {
                 @Override
@@ -569,6 +589,17 @@ protected void onCurrentAccessTokenChanged(
         }
 
         setButtonText();
+
+        // set vector drawables on the button
+        setCompoundDrawablesWithIntrinsicBounds(
+            AppCompatResources.getDrawable(getContext(), R.drawable.com_facebook_button_login_logo),
+            null,
+            null,
+            null);
+    }
+
+    protected LoginClickListener getNewLoginClickListener() {
+        return new LoginClickListener();
     }
 
     @Override
@@ -611,7 +642,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         int logInWidth;
         int width;
         if (text == null) {
-            text = resources.getString(R.string.com_facebook_loginview_log_in_button_long);
+            text = resources.getString(R.string.com_facebook_loginview_log_in_button_continue);
             logInWidth = measureButtonWidth(text);
             width = resolveSize(logInWidth, widthMeasureSpec);
             if (width < logInWidth) {
@@ -632,11 +663,10 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
 
     private int measureButtonWidth(final String text) {
         int textWidth = measureTextWidth(text);
-        int width = (getCompoundPaddingLeft() +
+        return (getCompoundPaddingLeft() +
                 getCompoundDrawablePadding() +
                 textWidth +
                 getCompoundPaddingRight());
-        return width;
     }
 
     private void setButtonText() {
@@ -650,7 +680,7 @@ private void setButtonText() {
                 setText(loginText);
             } else {
                 String text = resources.getString(
-                        R.string.com_facebook_loginview_log_in_button_long);
+                        R.string.com_facebook_loginview_log_in_button_continue);
                 int width = getWidth();
                 // if the width is 0, we are going to measure size, so use the long text
                 if (width != 0) {
@@ -671,82 +701,28 @@ protected int getDefaultRequestCode() {
         return CallbackManagerImpl.RequestCodeOffset.Login.toRequestCode();
     }
 
-    private class LoginClickListener implements OnClickListener {
+    LoginManager getLoginManager() {
+        if (loginManager == null) {
+            loginManager = LoginManager.getInstance();
+        }
+        return loginManager;
+    }
+
+    void setLoginManager(LoginManager loginManager) {
+        this.loginManager = loginManager;
+    }
 
+    protected class LoginClickListener implements OnClickListener {
         @Override
         public void onClick(View v) {
             callExternalOnClickListener(v);
 
-            Context context = getContext();
-
             AccessToken accessToken = AccessToken.getCurrentAccessToken();
-
             if (accessToken != null) {
                 // Log out
-                if (confirmLogout) {
-                    // Create a confirmation dialog
-                    String logout = getResources().getString(
-                            R.string.com_facebook_loginview_log_out_action);
-                    String cancel = getResources().getString(
-                            R.string.com_facebook_loginview_cancel_action);
-                    String message;
-                    Profile profile = Profile.getCurrentProfile();
-                    if (profile != null && profile.getName() != null) {
-                        message = String.format(
-                                getResources().getString(
-                                        R.string.com_facebook_loginview_logged_in_as),
-                                profile.getName());
-                    } else {
-                        message = getResources().getString(
-                                R.string.com_facebook_loginview_logged_in_using_facebook);
-                    }
-                    AlertDialog.Builder builder = new AlertDialog.Builder(context);
-                    builder.setMessage(message)
-                            .setCancelable(true)
-                            .setPositiveButton(logout, new DialogInterface.OnClickListener() {
-                                public void onClick(DialogInterface dialog, int which) {
-                                    getLoginManager().logOut();
-                                }
-                            })
-                            .setNegativeButton(cancel, null);
-                    builder.create().show();
-                } else {
-                    getLoginManager().logOut();
-                }
+                performLogout(getContext());
             } else {
-                LoginManager loginManager = getLoginManager();
-                loginManager.setDefaultAudience(getDefaultAudience());
-                loginManager.setLoginBehavior(getLoginBehavior());
-
-                if (LoginAuthorizationType.PUBLISH.equals(properties.authorizationType)) {
-                    if (LoginButton.this.getFragment() != null) {
-                        loginManager.logInWithPublishPermissions(
-                                LoginButton.this.getFragment(),
-                                properties.permissions);
-                    } else if (LoginButton.this.getNativeFragment() != null) {
-                        loginManager.logInWithPublishPermissions(
-                                LoginButton.this.getNativeFragment(),
-                                properties.permissions);
-                    } else {
-                        loginManager.logInWithPublishPermissions(
-                                LoginButton.this.getActivity(),
-                                properties.permissions);
-                    }
-                } else {
-                    if (LoginButton.this.getFragment() != null) {
-                        loginManager.logInWithReadPermissions(
-                                LoginButton.this.getFragment(),
-                                properties.permissions);
-                    } else if (LoginButton.this.getNativeFragment() != null) {
-                        loginManager.logInWithReadPermissions(
-                                LoginButton.this.getNativeFragment(),
-                                properties.permissions);
-                    } else {
-                        loginManager.logInWithReadPermissions(
-                                LoginButton.this.getActivity(),
-                                properties.permissions);
-                    }
-                }
+                performLogin();
             }
 
             AppEventsLogger logger = AppEventsLogger.newLogger(getContext());
@@ -756,16 +732,79 @@ public void onClick(DialogInterface dialog, int which) {
 
             logger.logSdkEvent(loginLogoutEventName, null, parameters);
         }
-    }
 
-    LoginManager getLoginManager() {
-        if (loginManager == null) {
-            loginManager = LoginManager.getInstance();
+        protected void performLogin() {
+            final LoginManager loginManager = getLoginManager();
+            if (LoginAuthorizationType.PUBLISH.equals(properties.authorizationType)) {
+                if (LoginButton.this.getFragment() != null) {
+                    loginManager.logInWithPublishPermissions(
+                            LoginButton.this.getFragment(),
+                            properties.permissions);
+                } else if (LoginButton.this.getNativeFragment() != null) {
+                    loginManager.logInWithPublishPermissions(
+                            LoginButton.this.getNativeFragment(),
+                            properties.permissions);
+                } else {
+                    loginManager.logInWithPublishPermissions(
+                            LoginButton.this.getActivity(),
+                            properties.permissions);
+                }
+            } else {
+                if (LoginButton.this.getFragment() != null) {
+                    loginManager.logInWithReadPermissions(
+                            LoginButton.this.getFragment(),
+                            properties.permissions);
+                } else if (LoginButton.this.getNativeFragment() != null) {
+                    loginManager.logInWithReadPermissions(
+                            LoginButton.this.getNativeFragment(),
+                            properties.permissions);
+                } else {
+                    loginManager.logInWithReadPermissions(
+                            LoginButton.this.getActivity(),
+                            properties.permissions);
+                }
+            }
         }
-        return loginManager;
-    }
 
-    void setLoginManager(LoginManager loginManager) {
-        this.loginManager = loginManager;
+        protected void performLogout(Context context) {
+            final LoginManager loginManager = getLoginManager();
+            if (confirmLogout) {
+                // Create a confirmation dialog
+                String logout = getResources().getString(
+                        R.string.com_facebook_loginview_log_out_action);
+                String cancel = getResources().getString(
+                        R.string.com_facebook_loginview_cancel_action);
+                String message;
+                Profile profile = Profile.getCurrentProfile();
+                if (profile != null && profile.getName() != null) {
+                    message = String.format(
+                            getResources().getString(
+                                    R.string.com_facebook_loginview_logged_in_as),
+                            profile.getName());
+                } else {
+                    message = getResources().getString(
+                            R.string.com_facebook_loginview_logged_in_using_facebook);
+                }
+                AlertDialog.Builder builder = new AlertDialog.Builder(context);
+                builder.setMessage(message)
+                        .setCancelable(true)
+                        .setPositiveButton(logout, new DialogInterface.OnClickListener() {
+                            public void onClick(DialogInterface dialog, int which) {
+                                loginManager.logOut();
+                            }
+                        })
+                        .setNegativeButton(cancel, null);
+                builder.create().show();
+            } else {
+                loginManager.logOut();
+            }
+        }
+
+        protected LoginManager getLoginManager() {
+            LoginManager manager = LoginManager.getInstance();
+            manager.setDefaultAudience(getDefaultAudience());
+            manager.setLoginBehavior(getLoginBehavior());
+            return manager;
+        }
     }
 }
diff --git a/facebook/src/main/java/com/facebook/login/widget/ProfilePictureView.java b/facebook/src/main/java/com/facebook/login/widget/ProfilePictureView.java
index b92c39107..d2ca537d8 100644
--- a/facebook/src/main/java/com/facebook/login/widget/ProfilePictureView.java
+++ b/facebook/src/main/java/com/facebook/login/widget/ProfilePictureView.java
@@ -322,7 +322,6 @@ protected Parcelable onSaveInstanceState() {
         instanceState.putString(PROFILE_ID_KEY, profileId);
         instanceState.putInt(PRESET_SIZE_KEY, presetSizeType);
         instanceState.putBoolean(IS_CROPPED_KEY, isCropped);
-        instanceState.putParcelable(BITMAP_KEY, imageContents);
         instanceState.putInt(BITMAP_WIDTH_KEY, queryWidth);
         instanceState.putInt(BITMAP_HEIGHT_KEY, queryHeight);
         instanceState.putBoolean(PENDING_REFRESH_KEY, lastRequest != null);
@@ -348,11 +347,7 @@ protected void onRestoreInstanceState(Parcelable state) {
             queryWidth = instanceState.getInt(BITMAP_WIDTH_KEY);
             queryHeight = instanceState.getInt(BITMAP_HEIGHT_KEY);
 
-            setImageBitmap((Bitmap)instanceState.getParcelable(BITMAP_KEY));
-
-            if (instanceState.getBoolean(PENDING_REFRESH_KEY)) {
-                refreshImage(true);
-            }
+            refreshImage(true);
         }
     }
 
diff --git a/facebook/src/main/java/com/facebook/messenger/MessengerUtils.java b/facebook/src/main/java/com/facebook/messenger/MessengerUtils.java
index af847c14d..a5b63ee24 100644
--- a/facebook/src/main/java/com/facebook/messenger/MessengerUtils.java
+++ b/facebook/src/main/java/com/facebook/messenger/MessengerUtils.java
@@ -31,6 +31,7 @@
 import android.os.Bundle;
 
 import com.facebook.FacebookSdk;
+import com.facebook.internal.FacebookSignatureValidator;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -237,12 +238,7 @@ public static void finishShareToMessenger(
    * @return whether any version of messenger is installed
    */
   public static boolean hasMessengerInstalled(Context context) {
-    try {
-      context.getPackageManager().getPackageInfo(PACKAGE_NAME, 0);
-      return true;
-    } catch (PackageManager.NameNotFoundException e) {
-      return false;
-    }
+    return FacebookSignatureValidator.validateSignature(context, PACKAGE_NAME);
   }
 
   /**
diff --git a/facebook/src/main/java/com/facebook/places/PlaceManager.java b/facebook/src/main/java/com/facebook/places/PlaceManager.java
new file mode 100644
index 000000000..311140acb
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/places/PlaceManager.java
@@ -0,0 +1,510 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.places;
+
+import android.location.Location;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.facebook.AccessToken;
+import com.facebook.FacebookException;
+import com.facebook.GraphRequest;
+import com.facebook.HttpMethod;
+import com.facebook.internal.Utility;
+import com.facebook.places.internal.LocationPackageManager;
+import com.facebook.places.internal.LocationPackageRequestParams;
+import com.facebook.places.internal.ScannerException;
+import com.facebook.places.internal.BluetoothScanResult;
+import com.facebook.places.model.CurrentPlaceFeedbackRequestParams;
+import com.facebook.places.internal.LocationPackage;
+import com.facebook.places.model.PlaceInfoRequestParams;
+import com.facebook.places.model.PlaceSearchRequestParams;
+import com.facebook.places.model.CurrentPlaceRequestParams;
+import com.facebook.places.model.CurrentPlaceRequestParams.ConfidenceLevel;
+import com.facebook.places.internal.WifiScanResult;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.List;
+import java.util.Locale;
+import java.util.Set;
+
+/**
+ * Provides an interface to search and query the Places Graph.
+ * Supports querying the end user's' current place, searching nearby places, and fetching
+ * place information details.
+ */
+public class PlaceManager {
+
+    private static final String SEARCH = "search";
+    private static final String CURRENT_PLACE_RESULTS = "current_place/results";
+    private static final String CURRENT_PLACE_FEEDBACK = "current_place/feedback";
+
+    private static final String PARAM_ACCESS_POINTS = "access_points";
+    private static final String PARAM_ACCURACY = "accuracy";
+    private static final String PARAM_ALTITUDE = "altitude";
+    private static final String PARAM_BLUETOOTH = "bluetooth";
+    private static final String PARAM_CATEGORIES = "categories";
+    private static final String PARAM_CENTER = "center";
+    private static final String PARAM_COORDINATES = "coordinates";
+    private static final String PARAM_CURRENT_CONNECTION = "current_connection";
+    private static final String PARAM_DISTANCE = "distance";
+    private static final String PARAM_ENABLED = "enabled";
+    private static final String PARAM_FIELDS = "fields";
+    private static final String PARAM_FREQUENCY = "frequency";
+    private static final String PARAM_HEADING = "heading";
+    private static final String PARAM_LATITUDE = "latitude";
+    private static final String PARAM_LIMIT = "limit";
+    private static final String PARAM_LONGITUDE = "longitude";
+    private static final String PARAM_MAC_ADDRESS = "mac_address";
+    private static final String PARAM_MIN_CONFIDENCE_LEVEL = "min_confidence_level";
+    private static final String PARAM_PAYLOAD = "payload";
+    private static final String PARAM_PLACE_ID = "place_id";
+    private static final String PARAM_Q = "q";
+    private static final String PARAM_RSSI = "rssi";
+    private static final String PARAM_SCANS = "scans";
+    private static final String PARAM_SIGNAL_STRENGTH = "signal_strength";
+    private static final String PARAM_SPEED = "speed";
+    private static final String PARAM_SSID = "ssid";
+    private static final String PARAM_SUMMARY = "summary";
+    private static final String PARAM_TRACKING = "tracking";
+    private static final String PARAM_TYPE = "type";
+    private static final String PARAM_WAS_HERE = "was_here";
+    private static final String PARAM_WIFI = "wifi";
+
+    /**
+     * Describes an error that occurred while retrieving the current location.
+     */
+    public enum LocationError {
+        /**
+         * The location permissions are denied. The SDK requires permissions
+         * {@code "android.permission.ACCESS_FINE_LOCATION"} or
+         * {@code "android.permission.ACCESS_COARSE_LOCATION"} to retrieve the current location.
+         */
+        LOCATION_PERMISSION_DENIED,
+        /**
+         * The location could not be retrieved because location services are not enabled.
+         */
+        LOCATION_SERVICES_DISABLED,
+        /**
+         * The location could be retrieved within the allotted amount of time.
+         */
+        LOCATION_TIMEOUT,
+        /**
+         * An unknown error occurred.
+         */
+        UNKNOWN_ERROR,
+    }
+
+    /**
+     * Callback invoked when a request has been constructed and is ready to be executed.
+     * To be used with {@link PlaceManager#newCurrentPlaceRequest(CurrentPlaceRequestParams,
+     * OnRequestReadyCallback)} and {@link PlaceManager#newPlaceSearchRequest(
+     * PlaceSearchRequestParams, OnRequestReadyCallback)}.
+     */
+    public interface OnRequestReadyCallback {
+
+        /**
+         * Method invoked when the request can't be generated due to an error retrieving the current
+         * device location.
+         * @param error the error description
+         */
+        void onLocationError(LocationError error);
+
+        /**
+         * Method invoked when the provided {@code GraphRequest} is ready to be executed.
+         * Set a callback on it to handle the response using {@code setCallback}, and then
+         * execute the request.
+         *
+         * @param graphRequest the request that's ready to be executed.
+         */
+        void onRequestReady(GraphRequest graphRequest);
+    }
+
+    private PlaceManager() {
+        // No public constructor required as all methods are static
+    }
+
+    /**
+     * Creates a new place search request centered around the current device location.
+     * The SDK will retrieve the current device location using
+     * {@link android.location.LocationManager}
+     * <p>
+     * With the Places Graph, you can search for millions of places worldwide and retrieve
+     * information like number of checkins, ratings, and addresses all with one request.
+     * <p>
+     * The specified {@link OnRequestReadyCallback} will be invoked once the request has been
+     * generated and is ready to be executed.
+     *
+     * @param requestParams the request parameters. See {@link PlaceSearchRequestParams}
+     * @param callback the {@link OnRequestReadyCallback} invoked when the {@link GraphRequest}
+     *                 has been generated and is ready to be executed
+     */
+    public static void newPlaceSearchRequest(
+            final PlaceSearchRequestParams requestParams,
+            final OnRequestReadyCallback callback) {
+
+        LocationPackageRequestParams.Builder builder = new LocationPackageRequestParams.Builder();
+        builder.setWifiScanEnabled(false);
+        builder.setBluetoothScanEnabled(false);
+
+        LocationPackageManager.requestLocationPackage(
+                builder.build(),
+                new LocationPackageManager.Listener() {
+            @Override
+            public void onLocationPackage(LocationPackage locationPackage) {
+                if (locationPackage.locationError == null) {
+                    GraphRequest graphRequest = newPlaceSearchRequestForLocation(
+                            requestParams,
+                            locationPackage.location);
+                    callback.onRequestReady(graphRequest);
+                } else {
+                    callback.onLocationError(getLocationError(locationPackage.locationError));
+                }
+            }
+        });
+    }
+
+    /**
+     * Creates a new place search request centered around the specified location.
+     * If the location provided is null, the search will be completed globally.
+     * At least a location or a search text must be provided.
+     * <p>
+     * With the Places Graph, you can search for millions of places worldwide and retrieve
+     * information like number of checkins, ratings, and addresses all with one request.
+     * <p>
+     * Returns a new GraphRequest that is configured to perform a place search.
+     *
+     * @param requestParams the request parameters. See {@link PlaceSearchRequestParams}
+     * @param location the {@link Location} around which to search
+     * @return a {@link GraphRequest} that is ready to be executed
+     * @throws FacebookException thrown if neither {@code location} nor {@code searchText}
+     * is specified
+     */
+    public static GraphRequest newPlaceSearchRequestForLocation(
+            PlaceSearchRequestParams requestParams,
+            Location location) {
+
+        String searchText = requestParams.getSearchText();
+        if (location == null && searchText == null) {
+            throw new FacebookException("Either location or searchText must be specified.");
+        }
+        int limit = requestParams.getLimit();
+        Set<String> fields = requestParams.getFields();
+        Set<String> categories = requestParams.getCategories();
+
+        Bundle parameters = new Bundle(7);
+        parameters.putString(PARAM_TYPE, "place");
+
+        if (location != null) {
+            parameters.putString(
+                    PARAM_CENTER,
+                    String.format(
+                            Locale.US,
+                            "%f,%f",
+                            location.getLatitude(),
+                            location.getLongitude()));
+
+            int distance = requestParams.getDistance();
+            if (distance > 0) {
+                parameters.putInt(PARAM_DISTANCE, distance);
+            }
+        }
+        if (limit > 0) {
+            parameters.putInt(PARAM_LIMIT, limit);
+        }
+        if (!Utility.isNullOrEmpty(searchText)) {
+            parameters.putString(PARAM_Q, searchText);
+        }
+        if (categories != null && !categories.isEmpty()) {
+            JSONArray array = new JSONArray();
+            for (String category : categories) {
+                array.put(category);
+            }
+            parameters.putString(PARAM_CATEGORIES, array.toString());
+        }
+        if (fields != null && !fields.isEmpty()) {
+            parameters.putString(PARAM_FIELDS, TextUtils.join(",", fields));
+        }
+
+        return new GraphRequest(
+                AccessToken.getCurrentAccessToken(),
+                SEARCH,
+                parameters,
+                HttpMethod.GET);
+    }
+
+    /**
+     * Creates a new place info request.
+     * <p>
+     * The Places Graph exposes a rich set of information about places.
+     * If the request is authenticated with a user access token,
+     * you can also obtain social information such as the number of friends who have liked and
+     * checked into the PlaceFields. The specific friends are also available if they have
+     * authenticated the app with the user_tagged_places and user_likes permissions.
+     * <p>
+     * Returns a new {@link GraphRequest} that is configured to perform a place info request.
+     *
+     * @param requestParams the request parameters, a {@link PlaceInfoRequestParams#getPlaceId()}
+     *                      must be specified.
+     * @return a {@link GraphRequest} that is ready to be executed
+     * @throws FacebookException thrown if a {@link PlaceInfoRequestParams#getPlaceId()} is not
+     * specified.
+     */
+    public static GraphRequest newPlaceInfoRequest(
+            PlaceInfoRequestParams requestParams) {
+
+        String placeId = requestParams.getPlaceId();
+        if (placeId == null) {
+            throw new FacebookException("placeId must be specified.");
+        }
+
+        Bundle parameters = new Bundle(1);
+
+        Set<String> fields = requestParams.getFields();
+        if (fields != null && !fields.isEmpty()) {
+            parameters.putString(PARAM_FIELDS, TextUtils.join(",", fields));
+        }
+
+        return new GraphRequest(
+                AccessToken.getCurrentAccessToken(),
+                placeId,
+                parameters,
+                HttpMethod.GET);
+    }
+
+    /**
+     * Creates a new current place request.
+     * <p>
+     * The current place request estimates the place where the user is currently located.
+     * The response contains a list of places and their associated confidence levels.
+     * <p>
+     * If a location is not specified in {@link CurrentPlaceRequestParams}, then the SDK
+     * retrieves the current location using {@link android.location.LocationManager}.
+     *
+     * @param requestParams the request parameters. See {@link CurrentPlaceRequestParams}
+     * @param callback a {@link OnRequestReadyCallback} that is invoked when the
+     * {@link GraphRequest} has been created and is ready to be executed.
+     */
+    public static void newCurrentPlaceRequest(
+            final CurrentPlaceRequestParams requestParams,
+            final OnRequestReadyCallback callback) {
+
+        Location location = requestParams.getLocation();
+        CurrentPlaceRequestParams.ScanMode scanMode = requestParams.getScanMode();
+
+        LocationPackageRequestParams.Builder builder =
+                new LocationPackageRequestParams.Builder();
+
+        // Don't scan for a location if one is provided.
+        builder.setLocationScanEnabled(location == null);
+
+        if (scanMode != null && scanMode == CurrentPlaceRequestParams.ScanMode.LOW_LATENCY) {
+            // In low-latency mode, avoid active Wi-Fi scanning which can takes
+            // several seconds.
+            builder.setWifiActiveScanAllowed(false);
+        }
+
+        LocationPackageManager.requestLocationPackage(
+                builder.build(),
+                new LocationPackageManager.Listener() {
+                    @Override
+                    public void onLocationPackage(LocationPackage locationPackage) {
+                        if (locationPackage.locationError != null) {
+                            callback.onLocationError(
+                                    getLocationError(locationPackage.locationError));
+                        } else {
+                            Bundle parameters = getCurrentPlaceParameters(
+                                    requestParams,
+                                    locationPackage);
+
+                            GraphRequest graphRequest = new GraphRequest(
+                                    AccessToken.getCurrentAccessToken(),
+                                    CURRENT_PLACE_RESULTS,
+                                    parameters,
+                                    HttpMethod.GET);
+                            callback.onRequestReady(graphRequest);
+                        }
+                    }
+                });
+    }
+
+    /**
+     * Creates a new current place feedback request.
+     * <p>
+     * This request allows users to provide feedback on the accuracy of the current place
+     * estimate. This information is used to improve the accuracy of our results.
+     * <p>
+     * Returns a new GraphRequest that is configured to perform a current place feedback request.
+     *
+     * @param requestParams the request parameters. See {@link CurrentPlaceFeedbackRequestParams}
+     * @return a {@link GraphRequest} that is ready to be executed
+     * @throws FacebookException thrown if parameters
+     * {@link CurrentPlaceFeedbackRequestParams#getPlaceId()},
+     * {@link CurrentPlaceFeedbackRequestParams#getTracking()}, or
+     * {@link CurrentPlaceFeedbackRequestParams#wasHere()} are missing
+     */
+    public static GraphRequest newCurrentPlaceFeedbackRequest(
+            CurrentPlaceFeedbackRequestParams requestParams) {
+
+        String placeId = requestParams.getPlaceId();
+        String tracking = requestParams.getTracking();
+        Boolean wasHere = requestParams.wasHere();
+
+        if (tracking == null || placeId == null || wasHere == null) {
+            throw new FacebookException("tracking, placeId and wasHere must be specified.");
+        }
+
+        Bundle parameters = new Bundle(3);
+        parameters.putString(PARAM_TRACKING, tracking);
+        parameters.putString(PARAM_PLACE_ID, placeId);
+        parameters.putBoolean(PARAM_WAS_HERE, wasHere);
+
+        return new GraphRequest(
+          AccessToken.getCurrentAccessToken(),
+          CURRENT_PLACE_FEEDBACK,
+          parameters,
+          HttpMethod.POST);
+    }
+
+    private static Bundle getCurrentPlaceParameters(
+            CurrentPlaceRequestParams request,
+            LocationPackage locationPackage) throws FacebookException {
+
+        if (request == null) {
+            throw new FacebookException("Request and location must be specified.");
+        }
+        if (locationPackage == null) {
+            locationPackage = new LocationPackage();
+        }
+        if (locationPackage.location == null) {
+            locationPackage.location = request.getLocation();
+        }
+        if (locationPackage.location == null) {
+            throw new FacebookException("A location must be specified");
+        }
+
+        try {
+            Bundle parameters = new Bundle(6);
+            parameters.putString(PARAM_SUMMARY, PARAM_TRACKING);
+            int limit = request.getLimit();
+            if (limit > 0) {
+                parameters.putInt(PARAM_LIMIT, limit);
+            }
+            Set<String> fields = request.getFields();
+            if (fields != null && !fields.isEmpty()) {
+                parameters.putString(PARAM_FIELDS, TextUtils.join(",", fields));
+            }
+
+            // Coordinates.
+            Location location = locationPackage.location;
+            JSONObject coordinates = new JSONObject();
+            coordinates.put(PARAM_LATITUDE, location.getLatitude());
+            coordinates.put(PARAM_LONGITUDE, location.getLongitude());
+            if (location.hasAccuracy()) {
+                coordinates.put(PARAM_ACCURACY, location.getAccuracy());
+            }
+            if (location.hasAltitude()) {
+                coordinates.put(PARAM_ALTITUDE, location.getAltitude());
+            }
+            if (location.hasBearing()) {
+                coordinates.put(PARAM_HEADING, location.getBearing());
+            }
+            if (location.hasSpeed()) {
+                coordinates.put(PARAM_SPEED, location.getSpeed());
+            }
+            parameters.putString(PARAM_COORDINATES, coordinates.toString());
+
+            // min confidence level
+            ConfidenceLevel minConfidenceLevel = request.getMinConfidenceLevel();
+            if (minConfidenceLevel == ConfidenceLevel.LOW
+                    || minConfidenceLevel == ConfidenceLevel.MEDIUM
+                    || minConfidenceLevel == ConfidenceLevel.HIGH) {
+                String minConfidenceLevelString =
+                        minConfidenceLevel.toString().toLowerCase(Locale.US);
+                parameters.putString(PARAM_MIN_CONFIDENCE_LEVEL, minConfidenceLevelString);
+            }
+
+            if (locationPackage != null) {
+                // wifi
+                JSONObject wifi = new JSONObject();
+                wifi.put(PARAM_ENABLED, locationPackage.isWifiScanningEnabled);
+                WifiScanResult connectedWifi = locationPackage.connectedWifi;
+                if (connectedWifi != null) {
+                    wifi.put(PARAM_CURRENT_CONNECTION, getWifiScanJson(connectedWifi));
+                }
+                List<WifiScanResult> ambientWifi = locationPackage.ambientWifi;
+                if (ambientWifi != null) {
+                    JSONArray array = new JSONArray();
+                    for (WifiScanResult wifiScanResult : ambientWifi) {
+                        array.put(getWifiScanJson(wifiScanResult));
+                    }
+                    wifi.put(PARAM_ACCESS_POINTS, array);
+                }
+                parameters.putString(PARAM_WIFI, wifi.toString());
+
+                // bluetooth
+                JSONObject bluetooth = new JSONObject();
+                bluetooth.put(PARAM_ENABLED, locationPackage.isBluetoothScanningEnabled);
+                List<BluetoothScanResult> bluetoothScanResults =
+                        locationPackage.ambientBluetoothLe;
+                if (bluetoothScanResults != null) {
+                    JSONArray array = new JSONArray();
+                    for (BluetoothScanResult bluetoothScanResult : bluetoothScanResults) {
+                        JSONObject bluetoothData = new JSONObject();
+                        bluetoothData.put(PARAM_PAYLOAD, bluetoothScanResult.payload);
+                        bluetoothData.put(PARAM_RSSI, bluetoothScanResult.rssi);
+                        array.put(bluetoothData);
+                    }
+                    bluetooth.put(PARAM_SCANS, array);
+                }
+                parameters.putString(PARAM_BLUETOOTH, bluetooth.toString());
+            }
+
+            return parameters;
+        } catch (JSONException ex) {
+            throw new FacebookException(ex);
+        }
+    }
+
+    private static JSONObject getWifiScanJson(WifiScanResult wifiScanResult) throws JSONException {
+        JSONObject wifiData = new JSONObject();
+        wifiData.put(PARAM_MAC_ADDRESS, wifiScanResult.bssid);
+        wifiData.put(PARAM_SSID, wifiScanResult.ssid);
+        wifiData.put(PARAM_SIGNAL_STRENGTH, wifiScanResult.rssi);
+        wifiData.put(PARAM_FREQUENCY, wifiScanResult.frequency);
+        return wifiData;
+    }
+
+    private static LocationError getLocationError(ScannerException.Type type) {
+        if (type == ScannerException.Type.PERMISSION_DENIED) {
+            return LocationError.LOCATION_PERMISSION_DENIED;
+        } else if (type == ScannerException.Type.DISABLED) {
+            return LocationError.LOCATION_SERVICES_DISABLED;
+        } else if (type == ScannerException.Type.TIMEOUT) {
+            return LocationError.LOCATION_TIMEOUT;
+        }
+        return LocationError.UNKNOWN_ERROR;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/places/internal/BleScanner.java b/facebook/src/main/java/com/facebook/places/internal/BleScanner.java
new file mode 100644
index 000000000..35ccf597e
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/places/internal/BleScanner.java
@@ -0,0 +1,41 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.places.internal;
+
+import java.util.List;
+
+/**
+ * com.facebook.places.internal is solely for the use of other packages within the
+ * Facebook SDK for Android. Use of any of the classes in this package is
+ * unsupported, and they may be modified or removed without warning at any time.
+ */
+public interface BleScanner {
+
+    void initAndCheckEligibility() throws ScannerException;
+
+    void startScanning() throws ScannerException;
+
+    void stopScanning() throws ScannerException;
+
+    int getErrorCode();
+
+    List<BluetoothScanResult> getScanResults();
+}
diff --git a/facebook/src/main/java/com/facebook/places/internal/BleScannerImpl.java b/facebook/src/main/java/com/facebook/places/internal/BleScannerImpl.java
new file mode 100644
index 000000000..6029d43c4
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/places/internal/BleScannerImpl.java
@@ -0,0 +1,272 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.places.internal;
+
+import android.annotation.TargetApi;
+import android.bluetooth.BluetoothAdapter;
+import android.bluetooth.le.BluetoothLeScanner;
+import android.bluetooth.le.ScanCallback;
+import android.bluetooth.le.ScanRecord;
+import android.bluetooth.le.ScanResult;
+import android.bluetooth.le.ScanSettings;
+import android.content.Context;
+import android.os.Build;
+import android.os.Handler;
+import android.os.Looper;
+import android.util.Log;
+
+import com.facebook.FacebookSdk;
+import com.facebook.internal.Validate;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.List;
+
+/**
+ * com.facebook.places.internal is solely for the use of other packages within the
+ * Facebook SDK for Android. Use of any of the classes in this package is
+ * unsupported, and they may be modified or removed without warning at any time.
+ */
+@TargetApi(21)
+@SuppressWarnings("MissingPermission")
+public class BleScannerImpl implements BleScanner {
+
+    private static final String TAG = "BleScannerImpl";
+
+    private BluetoothAdapter bluetoothAdapter;
+    private BluetoothLeScanner bluetoothLeScanner;
+    private LocationPackageRequestParams params;
+    private int errorCode;
+    private final List<BluetoothScanResult> scanResults = new ArrayList<>();
+    private boolean isScanInProgress;
+    private ScanCallBackImpl scanCallBack;
+    private Context context;
+
+    BleScannerImpl(Context context, LocationPackageRequestParams params) {
+        this.context = context;
+        this.params = params;
+    }
+
+    @Override
+    public synchronized void initAndCheckEligibility() throws ScannerException {
+        if (Build.VERSION.SDK_INT < ScannerFactory.OS_VERSION_LOLLIPOP) {
+            throw new ScannerException(ScannerException.Type.NOT_SUPPORTED);
+        }
+        if (!Validate.hasBluetoothPermission(context)) {
+            throw new ScannerException(ScannerException.Type.PERMISSION_DENIED);
+        }
+        if (!Validate.hasLocationPermission(context)) {
+            throw new ScannerException(ScannerException.Type.PERMISSION_DENIED);
+        }
+        bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
+        if (bluetoothAdapter == null || !bluetoothAdapter.isEnabled()) {
+            throw new ScannerException(ScannerException.Type.DISABLED);
+        }
+        bluetoothLeScanner = bluetoothAdapter.getBluetoothLeScanner();
+        if (bluetoothLeScanner == null) {
+            throw new ScannerException(ScannerException.Type.UNKNOWN_ERROR);
+        }
+    }
+
+    @Override
+    public synchronized void startScanning() throws ScannerException {
+        if (isScanInProgress) {
+            throw new ScannerException(ScannerException.Type.SCAN_ALREADY_IN_PROGRESS);
+        }
+        scanCallBack = new ScanCallBackImpl();
+        isScanInProgress = true;
+        errorCode = 0;
+
+        synchronized (scanResults) {
+            scanResults.clear();
+        }
+
+        if (bluetoothLeScanner == null) {
+            throw new ScannerException(ScannerException.Type.UNKNOWN_ERROR);
+        }
+
+        try {
+            ScanSettings.Builder builder = new ScanSettings.Builder();
+            builder.setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY);
+            builder.setReportDelay(0);
+            bluetoothLeScanner.startScan(null, builder.build(), scanCallBack);
+            isScanInProgress = true;
+        } catch (Exception e) {
+            throw new ScannerException(ScannerException.Type.UNKNOWN_ERROR);
+        }
+    }
+
+    @Override
+    public synchronized void stopScanning() {
+        bluetoothLeScanner.flushPendingScanResults(scanCallBack);
+        bluetoothLeScanner.stopScan(scanCallBack);
+        waitForMainLooper(params.getBluetoothFlushResultsTimeoutMs());
+        isScanInProgress = false;
+    }
+
+    private void waitForMainLooper(long maxWaitTimeoutMs) {
+        try {
+            // wait until all callbacks queued in the MainLooper have been processed.
+            final Object lock = new Object();
+            synchronized (lock) {
+
+                Handler handler = new Handler(Looper.getMainLooper());
+                handler.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        try {
+                            synchronized (lock) {
+                                lock.notify();
+                            }
+                        } catch (Exception e) {
+                            logException("Exception waiting for main looper", e);
+                        }
+                    }
+                });
+
+                lock.wait(maxWaitTimeoutMs);
+            }
+        } catch (Exception e) {
+            logException("Exception waiting for main looper", e);
+        }
+    }
+
+    @Override
+    public synchronized int getErrorCode() {
+        return errorCode;
+    }
+
+    @Override
+    public synchronized List<BluetoothScanResult> getScanResults() {
+        List<BluetoothScanResult> output;
+        synchronized (scanResults) {
+            int maxSanResults = params.getBluetoothMaxScanResults();
+            if (scanResults.size() > maxSanResults) {
+                // Keep the scan results with strongest rssi
+                output = new ArrayList<>(maxSanResults);
+                Comparator<BluetoothScanResult> comparator = new Comparator<BluetoothScanResult>() {
+                    @Override
+                    public int compare(BluetoothScanResult lhs, BluetoothScanResult rhs) {
+                        return rhs.rssi - lhs.rssi;
+                    }
+                };
+                Collections.sort(scanResults, comparator);
+                output.addAll(scanResults.subList(0, maxSanResults));
+            } else {
+                output = new ArrayList<>(scanResults.size());
+                output.addAll(scanResults);
+            }
+        }
+        return output;
+    }
+
+    private class ScanCallBackImpl extends ScanCallback {
+
+        @Override
+        public void onScanFailed(int errorCode) {
+            super.onScanFailed(errorCode);
+            BleScannerImpl.this.errorCode = errorCode;
+        }
+
+        @Override
+        public void onBatchScanResults(List<ScanResult> results) {
+            super.onBatchScanResults(results);
+            try {
+                synchronized (scanResults) {
+                    for (ScanResult result : results) {
+                        BluetoothScanResult bluetoothScanResult = newBluetoothScanResult(result);
+                        if (bluetoothScanResult != null) {
+                            scanResults.add(bluetoothScanResult);
+                        }
+                    }
+                }
+            } catch (Exception e) {
+                logException("Exception in ble scan callback", e);
+            }
+        }
+
+        @Override
+        public void onScanResult(int callbackType, ScanResult result) {
+            super.onScanResult(callbackType, result);
+            try {
+                synchronized (scanResults) {
+                    BluetoothScanResult bluetoothScanResult = newBluetoothScanResult(result);
+                    if (bluetoothScanResult != null) {
+                        scanResults.add(bluetoothScanResult);
+                    }
+                }
+            } catch (Exception e) {
+                logException("Exception in ble scan callback", e);
+            }
+        }
+    }
+
+    private static BluetoothScanResult newBluetoothScanResult(ScanResult scanResult) {
+        ScanRecord scanRecord = scanResult.getScanRecord();
+        String payload = formatPayload(scanRecord.getBytes());
+        int rssi = scanResult.getRssi();
+        BluetoothScanResult bluetoothScanResult = new BluetoothScanResult(payload, rssi);
+        return bluetoothScanResult;
+    }
+
+    private static String formatPayload(byte[] payload) {
+        if (payload == null || payload.length == 0) {
+            return null;
+        }
+        int payloadLength = getPayloadLength(payload);
+        return toHexString(payload, payloadLength);
+    }
+
+    private static int getPayloadLength(byte[] payload) {
+        int offset = 0;
+        while (offset < payload.length) {
+            byte length = payload[offset];
+            if (length == 0) {
+                // the end of the content has been reached
+                return offset;
+            } else if (length < 0) {
+                // unexpected, take the full payload
+                return payload.length;
+            }
+            offset += 1 + length;
+        }
+        return payload.length;
+    }
+
+    private static String toHexString(byte[] bytes, int length) {
+        StringBuffer sb = new StringBuffer();
+        if (length < 0 || length > bytes.length) {
+            length = bytes.length;
+        }
+        for (int i = 0; i < length; i++) {
+            byte b = bytes[i];
+            sb.append(String.format("%02x", b));
+        }
+        return sb.toString();
+    }
+
+    private static void logException(String message, Exception e) {
+        if (FacebookSdk.isDebugEnabled()) {
+            Log.e(TAG, message, e);
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/places/internal/BleScannerLegacy.java b/facebook/src/main/java/com/facebook/places/internal/BleScannerLegacy.java
new file mode 100644
index 000000000..40d104b1b
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/places/internal/BleScannerLegacy.java
@@ -0,0 +1,60 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.places.internal;
+
+import java.util.List;
+
+/**
+ * com.facebook.places.internal is solely for the use of other packages within the
+ * Facebook SDK for Android. Use of any of the classes in this package is
+ * unsupported, and they may be modified or removed without warning at any time.
+ */
+public class BleScannerLegacy implements BleScanner {
+
+    BleScannerLegacy() {
+
+    }
+
+    @Override
+    public void initAndCheckEligibility() throws ScannerException {
+        throw new ScannerException(ScannerException.Type.NOT_SUPPORTED);
+    }
+
+    @Override
+    public void startScanning() throws ScannerException {
+        throw new ScannerException(ScannerException.Type.NOT_SUPPORTED);
+    }
+
+    @Override
+    public void stopScanning() throws ScannerException {
+        throw new ScannerException(ScannerException.Type.NOT_SUPPORTED);
+    }
+
+    @Override
+    public int getErrorCode() {
+        return -1;
+    }
+
+    @Override
+    public List<BluetoothScanResult> getScanResults() {
+        return null;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/places/internal/BluetoothScanResult.java b/facebook/src/main/java/com/facebook/places/internal/BluetoothScanResult.java
new file mode 100644
index 000000000..9c1f3e5c1
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/places/internal/BluetoothScanResult.java
@@ -0,0 +1,56 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.places.internal;
+
+/**
+ * Describes the result of a bluetooth Low Energy scan.
+ */
+public class BluetoothScanResult {
+
+    /**
+     * The payload received from the bluetooth Low Energy device.
+     * This must be the raw bluetooth Low Energy advertisement payload,
+     * as returned by {@code scanRecord.getBytes()} {@link android.bluetooth.le.ScanRecord}
+     * E.g., for an iBeacon: 0201041aff4c00021566622e6d652f40ca9e6f6f71666163653e3a5f06c5
+     */
+    public String payload;
+
+    /**
+     * The received signal strength in dBm. {@link android.bluetooth.le.ScanResult}
+     * E.g., -92
+     */
+    public int rssi;
+
+    /**
+     * Construct a new Bluetooth Low Energy scan result.
+     *
+     * @param payload The payload received from the bluetooth Low Energy device.
+     * This must be the raw bluetooth Low Energy advertisement payload,
+     * as returned by {@code scanRecord.getBytes()} {@link android.bluetooth.le.ScanRecord}
+     * E.g., for an iBeacon: 0201041aff4c00021566622e6d652f40ca9e6f6f71666163653e3a5f06c5
+     * @param rssi The received signal strength in dBm. {@link android.bluetooth.le.ScanResult}
+     * E.g., -92
+     */
+    public BluetoothScanResult(String payload, int rssi) {
+        this.payload = payload;
+        this.rssi = rssi;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/places/internal/LocationPackage.java b/facebook/src/main/java/com/facebook/places/internal/LocationPackage.java
new file mode 100644
index 000000000..2606a5bed
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/places/internal/LocationPackage.java
@@ -0,0 +1,69 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.places.internal;
+
+import android.location.Location;
+
+import java.util.List;
+
+/**
+ * Describes the nearby location sensors.
+ * Use LocationPackageManager to generate an instance. {@link LocationPackageManager}
+ */
+public class LocationPackage {
+
+    /**
+     * The location (latitude/longitude).
+     */
+    public Location location;
+
+    /**
+     * Indicates the error type that occured when fetching the location, or null if there was
+     * no error.
+     */
+    public ScannerException.Type locationError;
+
+    /**
+     * Indicates whether wifi scanning was enabled/possible at the moment of the sensor collection.
+     */
+    public boolean isWifiScanningEnabled;
+
+    /**
+     * Describes the wifi network connected at the moment of the sensor collection.
+     */
+    public WifiScanResult connectedWifi;
+
+    /**
+     * Describes the list of nearby wifi networks at the moment of the sensor collection.
+     */
+    public List<WifiScanResult> ambientWifi;
+
+    /**
+     * Indicates whether bluetooth scanning was enabled at the moment of the sensor collection.
+     */
+    public boolean isBluetoothScanningEnabled;
+
+    /**
+     * Describes the list of nearby bluetooth Low Energy beacons at the moment of the sensor
+     * collection.
+     */
+    public List<BluetoothScanResult> ambientBluetoothLe;
+}
diff --git a/facebook/src/main/java/com/facebook/places/internal/LocationPackageManager.java b/facebook/src/main/java/com/facebook/places/internal/LocationPackageManager.java
new file mode 100644
index 000000000..16dcbfefa
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/places/internal/LocationPackageManager.java
@@ -0,0 +1,235 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.places.internal;
+
+import android.content.Context;
+import android.util.Log;
+
+import com.facebook.FacebookSdk;
+import com.facebook.places.PlaceManager;
+
+import java.util.concurrent.Callable;
+import java.util.concurrent.FutureTask;
+
+/**
+ * com.facebook.places.internal is solely for the use of other packages within the
+ * Facebook SDK for Android. Use of any of the classes in this package is
+ * unsupported, and they may be modified or removed without warning at any time.
+ */
+public class LocationPackageManager {
+
+    private static final String TAG = "LocationPackageManager";
+
+    /**
+     * Specifies the interface to be implemented to receive the location sensor data.
+     */
+    public interface Listener {
+        /**
+         * Invoked when the location sensor data has been collected. The location sensor data can
+         * then be used to increase the accuracy when placing a current place request.
+         * {@link PlaceManager}
+         *
+         * @param locationPackage the nearby wifi and bluetooth beacons that have been collected.
+         */
+        void onLocationPackage(LocationPackage locationPackage);
+    }
+
+    public static void requestLocationPackage(
+            final LocationPackageRequestParams requestParams,
+            final Listener listener) {
+        FacebookSdk.getExecutor().execute(new Runnable() {
+            @Override
+            public void run() {
+                LocationPackage locationPackage = new LocationPackage();
+                try {
+                    // Start scanning tasks
+                    FutureTask<LocationPackage> locationScanTask = null;
+                    FutureTask<LocationPackage> wifiScanTask = null;
+                    FutureTask<LocationPackage> bleScanTask = null;
+
+                    if (requestParams.isLocationScanEnabled()) {
+
+                        LocationScanner locationScanner = ScannerFactory.newLocationScanner(
+                                FacebookSdk.getApplicationContext(),
+                                requestParams);
+
+                        // Check that location services are enabled, and if not, then abort
+                        // sensor scan.
+                        locationScanner.initAndCheckEligibility();
+
+                        locationScanTask = newLocationScanFuture(locationScanner, requestParams);
+                        FacebookSdk.getExecutor().execute(locationScanTask);
+                    }
+
+                    if (requestParams.isWifiScanEnabled()) {
+                        wifiScanTask = newWifiScanFuture(requestParams);
+                        FacebookSdk.getExecutor().execute(wifiScanTask);
+                    }
+                    if (requestParams.isBluetoothScanEnabled()) {
+                        bleScanTask = newBluetoothScanFuture(requestParams);
+                        FacebookSdk.getExecutor().execute(bleScanTask);
+                    }
+
+                    // Handle bluetooth results.
+                    if (bleScanTask != null) {
+                        try {
+                            LocationPackage bleSensorData = bleScanTask.get();
+                            locationPackage.ambientBluetoothLe = bleSensorData.ambientBluetoothLe;
+                            locationPackage.isBluetoothScanningEnabled =
+                                    bleSensorData.isBluetoothScanningEnabled;
+                        } catch (Exception e) {
+                            logException("Exception scanning for bluetooth beacons", e);
+                        }
+                    }
+
+                    // Handle wifi results
+                    if (wifiScanTask != null) {
+                        try {
+                            LocationPackage wifiSensorData = wifiScanTask.get();
+                            locationPackage.isWifiScanningEnabled =
+                                    wifiSensorData.isWifiScanningEnabled;
+                            locationPackage.connectedWifi = wifiSensorData.connectedWifi;
+                            locationPackage.ambientWifi = wifiSensorData.ambientWifi;
+                        } catch (Exception e) {
+                            logException("Exception scanning for wifi access points", e);
+                        }
+                    }
+
+                    // Handle location results
+                    if (locationScanTask != null) {
+                        try {
+                            LocationPackage locationSensorData = locationScanTask.get();
+                            locationPackage.locationError = locationSensorData.locationError;
+                            locationPackage.location = locationSensorData.location;
+                        } catch (Exception e) {
+                            logException("Exception getting location", e);
+                        }
+                    }
+                } catch (ScannerException e) {
+                    logException("Exception scanning for locations", e);
+                    locationPackage.locationError = e.type;
+                } catch (Exception e) {
+                    logException("Exception requesting a location package", e);
+                }
+                listener.onLocationPackage(locationPackage);
+            }
+        });
+    }
+
+    private static FutureTask<LocationPackage> newLocationScanFuture(
+            final LocationScanner locationScanner,
+            final LocationPackageRequestParams requestParams) {
+        return new FutureTask<>(new Callable<LocationPackage>() {
+            @Override
+            public LocationPackage call() throws Exception {
+                LocationPackage locationPackage = new LocationPackage();
+                try {
+                    locationPackage.location = locationScanner.getLocation();
+                } catch (ScannerException e) {
+                    locationPackage.locationError = e.type;
+                    logException("Exception while getting location", e);
+                } catch (Exception e) {
+                    locationPackage.locationError = ScannerException.Type.UNKNOWN_ERROR;
+                }
+                return locationPackage;
+            }
+        });
+    }
+
+    private static FutureTask<LocationPackage> newBluetoothScanFuture(
+            final LocationPackageRequestParams requestParams) {
+        return new FutureTask<>(new Callable<LocationPackage>() {
+            @Override
+            public LocationPackage call() throws Exception {
+                LocationPackage locationPackage = new LocationPackage();
+                try {
+                    Context context = FacebookSdk.getApplicationContext();
+                    BleScanner bleScanner = ScannerFactory.newBleScanner(context, requestParams);
+
+                    bleScanner.initAndCheckEligibility();
+
+                    try {
+                        bleScanner.startScanning();
+                        try {
+                            Thread.sleep(requestParams.getBluetoothScanDurationMs());
+                        } catch (Exception ex) {
+                            // ignore
+                        }
+                    } finally {
+                        bleScanner.stopScanning();
+                    }
+
+                    int errorCode = bleScanner.getErrorCode();
+                    if (errorCode == 0) {
+                        locationPackage.ambientBluetoothLe = bleScanner.getScanResults();
+                        locationPackage.isBluetoothScanningEnabled = true;
+                    } else {
+                        if (FacebookSdk.isDebugEnabled()) {
+                            Log.d(
+                                TAG,
+                                String.format(
+                                    "Bluetooth LE scan failed with error: %d",
+                                    errorCode));
+                        }
+                        locationPackage.isBluetoothScanningEnabled = false;
+                    }
+                } catch (Exception e) {
+                    logException("Exception scanning for bluetooth beacons", e);
+                    locationPackage.isBluetoothScanningEnabled = false;
+                }
+                return locationPackage;
+            }
+        });
+    }
+
+    private static FutureTask<LocationPackage> newWifiScanFuture(
+            final LocationPackageRequestParams requestParams) {
+        return new FutureTask<>(new Callable<LocationPackage>() {
+            @Override
+            public LocationPackage call() throws Exception {
+                LocationPackage locationPackage = new LocationPackage();
+                try {
+                    Context context = FacebookSdk.getApplicationContext();
+                    WifiScanner wifiScanner = ScannerFactory.newWifiScanner(context, requestParams);
+                    wifiScanner.initAndCheckEligibility();
+
+                    locationPackage.connectedWifi = wifiScanner.getConnectedWifi();
+                    locationPackage.isWifiScanningEnabled = wifiScanner.isWifiScanningEnabled();
+
+                    if (locationPackage.isWifiScanningEnabled) {
+                        locationPackage.ambientWifi =
+                                wifiScanner.getWifiScans();
+                    }
+                } catch (Exception e) {
+                    logException("Exception scanning for wifi access points", e);
+                    locationPackage.isWifiScanningEnabled = false;
+                }
+                return locationPackage;
+            }
+        });
+    }
+
+    private static void logException(String message, Throwable throwable) {
+        if (FacebookSdk.isDebugEnabled()) {
+            Log.e(TAG, message, throwable);
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/places/internal/LocationPackageRequestParams.java b/facebook/src/main/java/com/facebook/places/internal/LocationPackageRequestParams.java
new file mode 100644
index 000000000..4ec6f9874
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/places/internal/LocationPackageRequestParams.java
@@ -0,0 +1,246 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.places.internal;
+
+import android.location.LocationManager;
+
+/**
+ * Describes the nearby location sensors.
+ * Use {@link LocationPackageManager} to instantiate an instance.
+ */
+public class LocationPackageRequestParams {
+
+    private static final boolean DEFAULT_LOCATION_ENABLED = true;
+    private static final String[] DEFAULT_LOCATION_PROVIDERS =
+            new String[]{LocationManager.NETWORK_PROVIDER, LocationManager.GPS_PROVIDER};
+    private static final float DEFAULT_LOCATION_MAX_ACCURACY_METERS = 100f;
+    private static final long DEFAULT_LOCATION_REQUEST_TIMEOUT_MS = 30 * 1000;
+    private static final long DEFAULT_LAST_LOCATION_MAX_AGE_MS = 60 * 1000;
+
+    private static final boolean DEFAULT_WIFI_ENABLED = true;
+    private static final long DEFAULT_WIFI_SCAN_MAX_AGE_MS = 30 * 1000;
+    private static final long DEFAULT_WIFI_SCAN_TIMEOUT_MS = 6 * 1000;
+    private static final int DEFAULT_WIFI_MAX_SCAN_RESULTS = 25;
+    private static final boolean DEFAULT_WIFI_ACTIVE_SCAN_ALLOWED = true;
+    private static final boolean DEFAULT_WIFI_ACTIVE_SCAN_FORCED = false;
+
+    private static final boolean DEFAULT_BLUETOOTH_ENABLED = true;
+    private static final long DEFAULT_BLUETOOTH_SCAN_DURATION_MS = 500;
+    private static final int DEFAULT_BLUETOOTH_MAX_SCAN_RESULTS = 25;
+    private static final long DEFAULT_BLUETOOTH_FLUSH_RESULTS_TIMEOUT_MS = 300;
+
+    private boolean isLocationScanEnabled;
+    private final String[] locationProviders;
+    private float locationMaxAccuracyMeters;
+    private long locationRequestTimeoutMs;
+    private long lastLocationMaxAgeMs;
+
+    private boolean isWifiScanEnabled;
+    private long wifiScanMaxAgeMs;
+    private int wifiMaxScanResults;
+    private long wifiScanTimeoutMs;
+    private boolean isWifiActiveScanAllowed;
+    private boolean isWifiActiveScanForced;
+
+    private boolean isBluetoothScanEnabled;
+    private long bluetoothScanDurationMs;
+    private int bluetoothMaxScanResults;
+    private long bluetoothFlushResultsTimeoutMs;
+
+    private LocationPackageRequestParams(Builder b) {
+        isLocationScanEnabled = b.isLocationScanEnabled;
+        locationProviders = b.locationProviders;
+        locationMaxAccuracyMeters = b.locationMaxAccuracyMeters;
+        locationRequestTimeoutMs = b.locationRequestTimeoutMs;
+        lastLocationMaxAgeMs = b.lastLocationMaxAgeMs;
+
+        isWifiScanEnabled = b.isWifiScanEnabled;
+        wifiScanMaxAgeMs = b.wifiScanMaxAgeMs;
+        wifiMaxScanResults = b.wifiMaxScanResults;
+        wifiScanTimeoutMs = b.wifiScanTimeoutMs;
+        isWifiActiveScanAllowed = b.isWifiActiveScanAllowed;
+        isWifiActiveScanForced = b.isWifiActiveScanForced;
+
+        isBluetoothScanEnabled = b.isBluetoothScanEnabled;
+        bluetoothScanDurationMs = b.bluetoothScanDurationMs;
+        bluetoothMaxScanResults = b.bluetoothMaxScanResults;
+        bluetoothFlushResultsTimeoutMs = b.bluetoothFlushResultsTimeoutMs;
+    }
+
+    public boolean isLocationScanEnabled() {
+        return isLocationScanEnabled;
+    }
+
+    public String[] getLocationProviders() {
+        return locationProviders;
+    }
+
+    public float getLocationMaxAccuracyMeters() {
+        return locationMaxAccuracyMeters;
+    }
+
+    public long getLocationRequestTimeoutMs() {
+        return locationRequestTimeoutMs;
+    }
+
+    public long getLastLocationMaxAgeMs() {
+        return lastLocationMaxAgeMs;
+    }
+
+    public boolean isWifiScanEnabled() {
+        return isWifiScanEnabled;
+    }
+
+    public long getWifiScanMaxAgeMs() {
+        return wifiScanMaxAgeMs;
+    }
+
+    public int getWifiMaxScanResults() {
+        return wifiMaxScanResults;
+    }
+
+    public long getWifiScanTimeoutMs() {
+        return wifiScanTimeoutMs;
+    }
+
+    public boolean isWifiActiveScanAllowed() {
+        return isWifiActiveScanAllowed;
+    }
+
+    public boolean isWifiActiveScanForced() {
+        return isWifiActiveScanForced;
+    }
+
+    public boolean isBluetoothScanEnabled() {
+        return isBluetoothScanEnabled;
+    }
+
+    public long getBluetoothScanDurationMs() {
+        return bluetoothScanDurationMs;
+    }
+
+    public long getBluetoothFlushResultsTimeoutMs() {
+        return bluetoothFlushResultsTimeoutMs;
+    }
+
+    public int getBluetoothMaxScanResults() {
+        return bluetoothMaxScanResults;
+    }
+
+    public static class Builder {
+        private boolean isLocationScanEnabled = DEFAULT_LOCATION_ENABLED;
+        private String[] locationProviders = DEFAULT_LOCATION_PROVIDERS;
+        private float locationMaxAccuracyMeters = DEFAULT_LOCATION_MAX_ACCURACY_METERS;
+        private long locationRequestTimeoutMs = DEFAULT_LOCATION_REQUEST_TIMEOUT_MS;
+        private long lastLocationMaxAgeMs = DEFAULT_LAST_LOCATION_MAX_AGE_MS;
+
+        private boolean isWifiScanEnabled = DEFAULT_WIFI_ENABLED;
+        private long wifiScanMaxAgeMs = DEFAULT_WIFI_SCAN_MAX_AGE_MS;
+        private int wifiMaxScanResults = DEFAULT_WIFI_MAX_SCAN_RESULTS;
+        private long wifiScanTimeoutMs = DEFAULT_WIFI_SCAN_TIMEOUT_MS;
+        private boolean isWifiActiveScanAllowed = DEFAULT_WIFI_ACTIVE_SCAN_ALLOWED;
+        private boolean isWifiActiveScanForced = DEFAULT_WIFI_ACTIVE_SCAN_FORCED;
+
+        private boolean isBluetoothScanEnabled = DEFAULT_BLUETOOTH_ENABLED;
+        private long bluetoothScanDurationMs = DEFAULT_BLUETOOTH_SCAN_DURATION_MS;
+        private int bluetoothMaxScanResults = DEFAULT_BLUETOOTH_MAX_SCAN_RESULTS;
+        private long bluetoothFlushResultsTimeoutMs = DEFAULT_BLUETOOTH_FLUSH_RESULTS_TIMEOUT_MS;
+
+        public LocationPackageRequestParams build() {
+            return new LocationPackageRequestParams(this);
+        }
+
+        public Builder setLocationScanEnabled(boolean locationScanEnabled) {
+            isLocationScanEnabled = locationScanEnabled;
+            return this;
+        }
+
+        public Builder setLastLocationMaxAgeMs(long lastLocationMaxAgeMs) {
+            this.lastLocationMaxAgeMs = lastLocationMaxAgeMs;
+            return this;
+        }
+
+        public Builder setLocationProviders(String[] locationProviders) {
+            this.locationProviders = locationProviders;
+            return this;
+        }
+
+        public Builder setLocationMaxAccuracyMeters(float locationMaxAccuracyMeters) {
+            this.locationMaxAccuracyMeters = locationMaxAccuracyMeters;
+            return this;
+        }
+
+        public Builder setLocationRequestTimeoutMs(long locationRequestTimeoutMs) {
+            this.locationRequestTimeoutMs = locationRequestTimeoutMs;
+            return this;
+        }
+
+        public Builder setWifiScanEnabled(boolean wifiScanEnabled) {
+            isWifiScanEnabled = wifiScanEnabled;
+            return this;
+        }
+
+        public Builder setWifiScanMaxAgeMs(long wifiScanMaxAgeMs) {
+            this.wifiScanMaxAgeMs = wifiScanMaxAgeMs;
+            return this;
+        }
+
+        public Builder setWifiMaxScanResults(int wifiMaxScanResults) {
+            this.wifiMaxScanResults = wifiMaxScanResults;
+            return this;
+        }
+
+        public Builder setWifiScanTimeoutMs(long wifiScanTimeoutMs) {
+            this.wifiScanTimeoutMs = wifiScanTimeoutMs;
+            return this;
+        }
+
+        public Builder setWifiActiveScanAllowed(boolean wifiActiveScanAllowed) {
+            isWifiActiveScanAllowed = wifiActiveScanAllowed;
+            return this;
+        }
+
+        public Builder setWifiActiveScanForced(boolean wifiActiveScanForced) {
+            isWifiActiveScanForced = wifiActiveScanForced;
+            return this;
+        }
+
+        public Builder setBluetoothScanEnabled(boolean bluetoothScanEnabled) {
+            isBluetoothScanEnabled = bluetoothScanEnabled;
+            return this;
+        }
+
+        public Builder setBluetoothScanDurationMs(long bluetoothScanDurationMs) {
+            this.bluetoothScanDurationMs = bluetoothScanDurationMs;
+            return this;
+        }
+
+        public Builder setBluetoothMaxScanResults(int bluetoothMaxScanResults) {
+            this.bluetoothMaxScanResults = bluetoothMaxScanResults;
+            return this;
+        }
+
+        public Builder setBluetoothFlushResultsTimeoutMs(long bluetoothFlushResultsTimeoutMs) {
+            this.bluetoothFlushResultsTimeoutMs = bluetoothFlushResultsTimeoutMs;
+            return this;
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/places/internal/LocationScanner.java b/facebook/src/main/java/com/facebook/places/internal/LocationScanner.java
new file mode 100644
index 000000000..398b1cf10
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/places/internal/LocationScanner.java
@@ -0,0 +1,35 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.places.internal;
+
+import android.location.Location;
+
+/**
+ * com.facebook.places.internal is solely for the use of other packages within the
+ * Facebook SDK for Android. Use of any of the classes in this package is
+ * unsupported, and they may be modified or removed without warning at any time.
+ */
+public interface LocationScanner {
+
+    void initAndCheckEligibility() throws ScannerException;
+
+    Location getLocation() throws ScannerException;
+}
diff --git a/facebook/src/main/java/com/facebook/places/internal/LocationScannerImpl.java b/facebook/src/main/java/com/facebook/places/internal/LocationScannerImpl.java
new file mode 100644
index 000000000..54ab607f6
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/places/internal/LocationScannerImpl.java
@@ -0,0 +1,160 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.places.internal;
+
+import android.content.Context;
+import android.location.Location;
+import android.location.LocationListener;
+import android.location.LocationManager;
+import android.os.Bundle;
+import android.os.HandlerThread;
+
+import com.facebook.internal.Validate;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * com.facebook.places.internal is solely for the use of other packages within the
+ * Facebook SDK for Android. Use of any of the classes in this package is
+ * unsupported, and they may be modified or removed without warning at any time.
+ */
+@SuppressWarnings("MissingPermission")
+public class LocationScannerImpl implements LocationScanner, LocationListener {
+
+    private static final long MIN_TIME_BETWEEN_UPDATES = 100L;
+    private static final float MIN_DISTANCE_BETWEEN_UPDATES = 0f;
+
+    private Context context;
+    private LocationManager locationManager;
+    private LocationPackageRequestParams params;
+    private Location freshLocation;
+    private final Object scanLock = new Object();
+    private List<String> enabledProviders;
+
+    public LocationScannerImpl(
+            Context context,
+            LocationPackageRequestParams params) {
+        this.context = context;
+        this.params = params;
+        locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);
+    }
+
+    @Override
+    public void initAndCheckEligibility() throws ScannerException {
+
+        if (!Validate.hasLocationPermission(context)) {
+            throw new ScannerException(ScannerException.Type.PERMISSION_DENIED);
+        }
+
+        enabledProviders = new ArrayList<>(params.getLocationProviders().length);
+        for (String provider : params.getLocationProviders()) {
+            if (locationManager.isProviderEnabled(provider)) {
+                enabledProviders.add(provider);
+            }
+        }
+
+        if (enabledProviders.isEmpty()) {
+            throw new ScannerException(ScannerException.Type.DISABLED);
+        }
+    }
+
+    private Location getLastLocation(String provider) {
+        Location lastLocation = locationManager.getLastKnownLocation(provider);
+        if (lastLocation != null) {
+            long lastLocationTs = lastLocation.getTime();
+            long locationAgeMs = System.currentTimeMillis() - lastLocationTs;
+            if (locationAgeMs < params.getLastLocationMaxAgeMs()) {
+                return lastLocation;
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public Location getLocation() throws ScannerException {
+        for (String provider : enabledProviders) {
+            Location lastLocation = getLastLocation(provider);
+            if (lastLocation != null) {
+                return lastLocation;
+            }
+        }
+        return getFreshLocation();
+    }
+
+    private Location getFreshLocation() throws ScannerException {
+        freshLocation = null;
+        HandlerThread handlerThread = new HandlerThread("LocationScanner");
+        try {
+            handlerThread.start();
+            for (String provider : enabledProviders) {
+                locationManager.requestLocationUpdates(
+                        provider,
+                        MIN_TIME_BETWEEN_UPDATES,
+                        MIN_DISTANCE_BETWEEN_UPDATES,
+                        this,
+                        handlerThread.getLooper());
+            }
+            try {
+                synchronized (scanLock) {
+                    scanLock.wait(params.getLocationRequestTimeoutMs());
+                }
+            } catch (Exception e) {
+                // ignore
+            }
+        } finally {
+            locationManager.removeUpdates(this);
+            handlerThread.quit();
+        }
+
+        if (freshLocation == null) {
+            throw new ScannerException(ScannerException.Type.TIMEOUT);
+        }
+        return freshLocation;
+    }
+
+    @Override
+    public void onLocationChanged(Location location) {
+        if (freshLocation == null) {
+            if (location.getAccuracy() < params.getLocationMaxAccuracyMeters()) {
+                synchronized (scanLock) {
+                    freshLocation = location;
+                     scanLock.notify();
+                }
+            }
+        }
+    }
+
+    @Override
+    public void onStatusChanged(String provider, int status, Bundle extras) {
+        // ignore
+    }
+
+    @Override
+    public void onProviderEnabled(String provider) {
+        // ignore
+    }
+
+    @Override
+    public void onProviderDisabled(String provider) {
+        // ignore
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/places/internal/ScannerException.java b/facebook/src/main/java/com/facebook/places/internal/ScannerException.java
new file mode 100644
index 000000000..402f80243
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/places/internal/ScannerException.java
@@ -0,0 +1,55 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.places.internal;
+
+/**
+ * com.facebook.places.internal is solely for the use of other packages within the
+ * Facebook SDK for Android. Use of any of the classes in this package is
+ * unsupported, and they may be modified or removed without warning at any time.
+ */
+public class ScannerException extends Exception {
+
+    public enum Type {
+        NOT_SUPPORTED,
+        PERMISSION_DENIED,
+        DISABLED,
+        SCAN_ALREADY_IN_PROGRESS,
+        UNKNOWN_ERROR,
+        TIMEOUT,
+    }
+
+    public Type type;
+
+    public ScannerException(Type type) {
+        super("Type: " + type.name());
+        this.type = type;
+    }
+
+    public ScannerException(Type type, String message) {
+        super(message);
+        this.type = type;
+    }
+
+    public ScannerException(Type type, Exception ex) {
+        super("Type: " + type.name(), ex);
+        this.type = type;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/places/internal/ScannerFactory.java b/facebook/src/main/java/com/facebook/places/internal/ScannerFactory.java
new file mode 100644
index 000000000..960812652
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/places/internal/ScannerFactory.java
@@ -0,0 +1,53 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.places.internal;
+
+import android.content.Context;
+import android.os.Build;
+
+/**
+ * com.facebook.places.internal is solely for the use of other packages within the
+ * Facebook SDK for Android. Use of any of the classes in this package is
+ * unsupported, and they may be modified or removed without warning at any time.
+ */
+public class ScannerFactory {
+
+    public static final int OS_VERSION_LOLLIPOP = 21;
+    public static final int OS_VERSION_JELLY_BEAN_MR2 = 18;
+    public static final int OS_VERSION_JELLY_BEAN_MR1 = 17;
+
+    public static BleScanner newBleScanner(Context context, LocationPackageRequestParams params) {
+        if (Build.VERSION.SDK_INT >= OS_VERSION_LOLLIPOP) {
+            return new BleScannerImpl(context, params);
+        }
+        return new BleScannerLegacy();
+    }
+
+    public static WifiScanner newWifiScanner(Context context, LocationPackageRequestParams params) {
+        return new WifiScannerImpl(context, params);
+    }
+
+    public static LocationScanner newLocationScanner(
+            Context context,
+            LocationPackageRequestParams params) {
+        return new LocationScannerImpl(context, params);
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/places/internal/WifiScanResult.java b/facebook/src/main/java/com/facebook/places/internal/WifiScanResult.java
new file mode 100644
index 000000000..cbdaa8033
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/places/internal/WifiScanResult.java
@@ -0,0 +1,71 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.places.internal;
+
+/**
+ * Describes a wifi access point scan result.
+ */
+public class WifiScanResult {
+
+    /**
+     * The name of the wifi access point.
+     */
+    public String ssid;
+
+    /**
+     * The hardware/mac-address of the access point.
+     */
+    public String bssid;
+
+    /**
+     * The detected signal strength in dBm.
+     */
+    public int rssi;
+
+    /**
+     * The frequency in MHz of the channel used by the access point.
+     * {@link android.net.wifi.ScanResult}
+     */
+    public int frequency;
+
+    /**
+     * Constructs a new {@code WifiScanResult}
+     */
+    public WifiScanResult() {
+
+    }
+
+    /**
+     * Constructs a new {@code WifiScanResult}
+     *
+     * @param ssid The name of the wifi access point.
+     * @param bssid The hardware/mac-address of the access point.
+     * @param rssi The detected signal strength in dBm.
+     * @param frequency The frequency in MHz of the channel used by the access point.
+     * {@link android.net.wifi.ScanResult}
+     */
+    public WifiScanResult(String ssid, String bssid, int rssi, int frequency) {
+        this.ssid = ssid;
+        this.bssid = bssid;
+        this.rssi = rssi;
+        this.frequency = frequency;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/places/internal/WifiScanner.java b/facebook/src/main/java/com/facebook/places/internal/WifiScanner.java
new file mode 100644
index 000000000..a6da816f3
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/places/internal/WifiScanner.java
@@ -0,0 +1,39 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.places.internal;
+
+import java.util.List;
+
+/**
+ * com.facebook.places.internal is solely for the use of other packages within the
+ * Facebook SDK for Android. Use of any of the classes in this package is
+ * unsupported, and they may be modified or removed without warning at any time.
+ */
+public interface WifiScanner {
+
+    void initAndCheckEligibility() throws ScannerException;
+
+    WifiScanResult getConnectedWifi() throws ScannerException;
+
+    boolean isWifiScanningEnabled();
+
+    List<WifiScanResult> getWifiScans() throws ScannerException;
+}
diff --git a/facebook/src/main/java/com/facebook/places/internal/WifiScannerImpl.java b/facebook/src/main/java/com/facebook/places/internal/WifiScannerImpl.java
new file mode 100644
index 000000000..3f879c963
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/places/internal/WifiScannerImpl.java
@@ -0,0 +1,261 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.places.internal;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.pm.PackageManager;
+import android.net.wifi.ScanResult;
+import android.net.wifi.SupplicantState;
+import android.net.wifi.WifiInfo;
+import android.net.wifi.WifiManager;
+import android.os.Build;
+import android.os.Bundle;
+import android.os.SystemClock;
+import android.text.TextUtils;
+
+import com.facebook.internal.Validate;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.List;
+import java.util.Set;
+
+/**
+ * com.facebook.places.internal is solely for the use of other packages within the
+ * Facebook SDK for Android. Use of any of the classes in this package is
+ * unsupported, and they may be modified or removed without warning at any time.
+ */
+@SuppressWarnings("MissingPermission")
+public class WifiScannerImpl implements WifiScanner {
+
+    private Context context;
+    private WifiManager wifiManager;
+    private ScanResultBroadcastReceiver broadcastReceiver;
+    private final Object scanLock = new Object();
+    private final LocationPackageRequestParams params;
+
+    WifiScannerImpl(Context context, LocationPackageRequestParams params) {
+        this.context = context;
+        this.params = params;
+    }
+
+    @Override
+    public void initAndCheckEligibility() throws ScannerException {
+
+        if (!context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_WIFI)) {
+            throw new ScannerException(ScannerException.Type.NOT_SUPPORTED);
+        }
+
+        if (!Validate.hasWiFiPermission(context)) {
+            throw new ScannerException(ScannerException.Type.PERMISSION_DENIED);
+        }
+
+        if (wifiManager == null) {
+            wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
+        }
+
+        boolean isWifiScanningAlwaysOn = isWifiScanningAlwaysOn();
+
+        if (!isWifiScanningAlwaysOn && !wifiManager.isWifiEnabled()) {
+            throw new ScannerException(ScannerException.Type.DISABLED);
+        }
+    }
+
+    @Override
+    public WifiScanResult getConnectedWifi() throws ScannerException {
+        try {
+            WifiInfo wifiInfo = wifiManager.getConnectionInfo();
+            if (wifiInfo == null
+                    || TextUtils.isEmpty(wifiInfo.getBSSID())
+                    || wifiInfo.getSupplicantState() != SupplicantState.COMPLETED) {
+                return null;
+            }
+            WifiScanResult wifiScanResult = new WifiScanResult();
+            wifiScanResult.bssid = wifiInfo.getBSSID();
+            wifiScanResult.ssid = wifiInfo.getSSID();
+            wifiScanResult.rssi = wifiInfo.getRssi();
+            if (Build.VERSION.SDK_INT >= ScannerFactory.OS_VERSION_LOLLIPOP) {
+                wifiScanResult.frequency = wifiInfo.getFrequency();
+            }
+            return wifiScanResult;
+        } catch (Exception e) {
+            throw new ScannerException(ScannerException.Type.UNKNOWN_ERROR, e);
+        }
+    }
+
+    @Override
+    public boolean isWifiScanningEnabled() {
+        try {
+            initAndCheckEligibility();
+            if (Validate.hasLocationPermission(context)) {
+                return true;
+            }
+        } catch (ScannerException e) {
+            // ignore
+        }
+        return false;
+    }
+
+    private boolean isWifiScanningAlwaysOn() {
+        if (Build.VERSION.SDK_INT >= ScannerFactory.OS_VERSION_JELLY_BEAN_MR2) {
+            return wifiManager.isScanAlwaysAvailable();
+        }
+        return false;
+    }
+
+    private List<WifiScanResult> getCachedScanResults()
+            throws ScannerException {
+        try {
+            List<ScanResult> scanResults = wifiManager.getScanResults();
+            scanResults = filterWifiScanResultsByMaxAge(scanResults, params.getWifiScanMaxAgeMs());
+            filterResults(scanResults, params.getWifiMaxScanResults());
+            List<WifiScanResult> wifiScanResults = new ArrayList<>(scanResults.size());
+            for (ScanResult scanResult : scanResults) {
+                WifiScanResult wifiScanResult = new WifiScanResult();
+                wifiScanResult.bssid = scanResult.BSSID;
+                wifiScanResult.ssid = scanResult.SSID;
+                wifiScanResult.rssi = scanResult.level;
+                wifiScanResult.frequency = scanResult.frequency;
+                wifiScanResults.add(wifiScanResult);
+            }
+            return wifiScanResults;
+        } catch (Exception e) {
+            throw new ScannerException(ScannerException.Type.UNKNOWN_ERROR, e);
+        }
+    }
+
+    private static void filterResults(List<ScanResult> scanResults, int maxResults) {
+        if (scanResults.size() > maxResults) {
+            Comparator<ScanResult> comparator = new Comparator<ScanResult>() {
+                @Override
+                public int compare(ScanResult lhs, ScanResult rhs) {
+                    return rhs.level - lhs.level;
+                }
+            };
+            Collections.sort(scanResults, comparator);
+            scanResults.subList(maxResults, scanResults.size()).clear();
+        }
+    }
+
+    private static List<ScanResult> filterWifiScanResultsByMaxAge(
+            List<ScanResult> scanResults,
+            long maxAgeMs) {
+        List<ScanResult> filtered = new ArrayList<>();
+        if (scanResults != null) {
+            if (Build.VERSION.SDK_INT < ScannerFactory.OS_VERSION_JELLY_BEAN_MR1) {
+                filtered.addAll(scanResults);
+            } else {
+                long nowSinceBootMs = SystemClock.elapsedRealtime();
+                for (ScanResult result : scanResults) {
+                    long ageMs = nowSinceBootMs - (result.timestamp / 1000);
+                    if (ageMs < 0) {
+                        // Some platform use unix timestmap
+                        ageMs = System.currentTimeMillis() - result.timestamp;
+                    }
+                    if (ageMs < maxAgeMs) {
+                        filtered.add(result);
+                    }
+                }
+            }
+        }
+        return filtered;
+    }
+
+    @Override
+    public synchronized List<WifiScanResult> getWifiScans()
+            throws ScannerException{
+        List<WifiScanResult> wifiScanResults = null;
+        if (!params.isWifiActiveScanForced()) {
+              wifiScanResults = getCachedScanResults();
+        }
+        boolean isListEmpty = wifiScanResults == null || wifiScanResults.isEmpty();
+        if (params.isWifiActiveScanForced() || (params.isWifiActiveScanAllowed() && isListEmpty)) {
+            wifiScanResults = getActiveScanResults();
+        }
+        return wifiScanResults;
+    }
+
+    private List<WifiScanResult> getActiveScanResults()
+            throws ScannerException{
+        List<WifiScanResult> wifiScanResults = null;
+        try {
+            if (Validate.hasChangeWifiStatePermission(context)) {
+                registerBroadcastReceiver();
+                boolean isScanStarted = wifiManager.startScan();
+                if (isScanStarted) {
+                    try {
+                        synchronized (scanLock) {
+                            scanLock.wait(params.getWifiScanTimeoutMs());
+                        }
+                    } catch (InterruptedException e) {
+                        // ignore
+                    }
+                    wifiScanResults = getCachedScanResults();
+                }
+            }
+        } catch (Exception e) {
+            // ignore
+        } finally {
+            unregisterBroadcastReceiver();
+        }
+        return wifiScanResults;
+    }
+
+    private void registerBroadcastReceiver() {
+        if (broadcastReceiver != null) {
+            unregisterBroadcastReceiver();
+        }
+        broadcastReceiver = new ScanResultBroadcastReceiver();
+        IntentFilter intentFilter = new IntentFilter();
+        intentFilter.addAction(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION);
+        context.registerReceiver(broadcastReceiver, intentFilter);
+    }
+
+    private void unregisterBroadcastReceiver() {
+        if (broadcastReceiver != null) {
+            try {
+                context.unregisterReceiver(broadcastReceiver);
+            } catch (Exception e) {
+                // ignore
+            }
+            broadcastReceiver = null;
+        }
+    }
+
+    private class ScanResultBroadcastReceiver extends BroadcastReceiver {
+
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            if (intent != null) {
+                if (WifiManager.SCAN_RESULTS_AVAILABLE_ACTION.equals(intent.getAction())) {
+                    synchronized (scanLock) {
+                       scanLock.notify();
+                    }
+                    unregisterBroadcastReceiver();
+                }
+            }
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/places/model/CurrentPlaceFeedbackRequestParams.java b/facebook/src/main/java/com/facebook/places/model/CurrentPlaceFeedbackRequestParams.java
new file mode 100644
index 000000000..0a4c1f721
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/places/model/CurrentPlaceFeedbackRequestParams.java
@@ -0,0 +1,122 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.places.model;
+
+/**
+ * Describes the parameters used to create a current place feedback request
+ * with {@link com.facebook.places.PlaceManager}
+ */
+public class CurrentPlaceFeedbackRequestParams {
+
+    private final String tracking;
+    private final String placeId;
+    private final Boolean wasHere;
+
+    private CurrentPlaceFeedbackRequestParams(Builder b) {
+        tracking = b.tracking;
+        placeId = b.placeId;
+        wasHere = b.wasHere;
+    }
+
+    /**
+     * Gets the tracking ID. The tracking value is returned in the response
+     * of the current place request {@link com.facebook.places.PlaceManager}
+     *
+     * @return The tracking ID returned by the current place request.
+     */
+    public String getTracking() {
+        return tracking;
+    }
+
+    /**
+     * Gets the place ID associated with the feedback request.
+     * @return The place ID associated with the feedback.
+     */
+    public String getPlaceId() {
+        return placeId;
+    }
+
+    /**
+     * Indicates whether the user was actually located at the place specified by
+     * {@code getPlaceId()}.
+     * Could return null if {@code wasHere} was not set on the {@link Builder}.
+     *
+     * @return {@code true} if the user was at the place specified by getPlaceId(),
+     * {@false} if not,
+     * {@null} if wasHere was not specified on {@link Builder}
+     */
+    public Boolean wasHere() {
+        return wasHere;
+    }
+
+    /**
+     * Describes the builder to create a {@link CurrentPlaceFeedbackRequestParams}
+     */
+    public static class Builder {
+
+        private String tracking;
+        private String placeId;
+        private Boolean wasHere;
+
+        /**
+         * Indicates whether the user was actually located at the place specified by
+         * {@code setPlaceId()}.
+         * @param wasHere {@code true} if the user was at the place specified by
+         * {@code setPlaceId()}
+         * @return the builder
+         */
+        public Builder setWasHere(boolean wasHere) {
+            this.wasHere = wasHere;
+            return this;
+        }
+
+        /**
+         * Sets the place ID for the feedback request.
+         * @param placeId the place ID associated with the feedback.
+         * @return the builder
+         */
+        public Builder setPlaceId(String placeId) {
+            this.placeId = placeId;
+            return this;
+        }
+
+        /**
+         * Sets the tracking ID. The tracking ID value is returned in the response
+         * of the current place request. See {@link com.facebook.places.PlaceManager}
+         * for information on how to place a current place request.
+         *
+         * @param tracking The tracking ID returned by the current place request.
+         * @return The builder
+         */
+        public Builder setTracking(String tracking) {
+            this.tracking = tracking;
+            return this;
+        }
+
+        /**
+         * Returns the {@link CurrentPlaceFeedbackRequestParams}
+         * @return the {@link CurrentPlaceFeedbackRequestParams}
+         */
+        public CurrentPlaceFeedbackRequestParams build() {
+            return new CurrentPlaceFeedbackRequestParams(this);
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/places/model/CurrentPlaceRequestParams.java b/facebook/src/main/java/com/facebook/places/model/CurrentPlaceRequestParams.java
new file mode 100644
index 000000000..fc3aebe1d
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/places/model/CurrentPlaceRequestParams.java
@@ -0,0 +1,203 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.places.model;
+
+import android.location.Location;
+
+import java.util.HashSet;
+import java.util.Set;
+
+/**
+ * Describes the parameters of the current place request.
+ * Use {@link com.facebook.places.PlaceManager} to create a new current place request.
+ */
+public class CurrentPlaceRequestParams {
+
+    /**
+     * Describes the confidence level of the current place response.
+     *
+     * A place with field {@code CONFIDENCE_LEVEL} set to {@code HIGH} indicates that there is a
+     * high likelihood that the user is currently located at that place.
+     */
+    public enum ConfidenceLevel {
+        LOW,
+        MEDIUM,
+        HIGH,
+    };
+
+    /**
+     * Describes the location scanning behavior when creating a new current place request.
+     */
+    public enum ScanMode {
+
+        /**
+         * In high accuracy mode, {@link com.facebook.places.PlaceManager}, scans for
+         * nearby Wi-Fi and Bluetooth Low Energy beacons to maximize the accuracy of the current
+         * place request. High accuracy mode is the default value.
+         */
+        HIGH_ACCURACY,
+
+        /**
+         * In low latency mode, {@link com.facebook.places.PlaceManager}, reduces
+         * nearby Wi-Fi and Bluetooth beacon scanning to a minimum to prioritize
+         * low latency rather than accuracy. Using low latency mode reduces the maximum time
+         * taken to generate the current place request. To minimize latency mode, a
+         * location must be specified on the {@link Builder}.
+         */
+        LOW_LATENCY,
+    }
+
+    private final Location location;
+    private final ScanMode scanMode;
+    private final ConfidenceLevel minConfidenceLevel;
+    private final int limit;
+    private final Set<String> fields = new HashSet<>();
+
+    private CurrentPlaceRequestParams(Builder b) {
+        location = b.location;
+        scanMode = b.scanMode;
+        minConfidenceLevel = b.minConfidenceLevel;
+        limit = b.limit;
+        fields.addAll(b.fields);
+    }
+
+    /**
+     * The current location of the user. If null, the SDK automatically retrieves the current
+     * device location using {@link android.location.LocationManager}
+     *
+     * @return The current device location.
+     */
+    public Location getLocation() {
+        return location;
+    }
+
+    /**
+     * The scan mode used when generating the current place request.
+     * @return The scan mode used when generating the current place request.
+     */
+    public ScanMode getScanMode() {
+        return scanMode;
+    }
+
+    /**
+     * Get the minimum confidence level of places to return.
+     * @return The minimum {@link ConfidenceLevel} of places to return.
+     */
+    public ConfidenceLevel getMinConfidenceLevel() {
+        return minConfidenceLevel;
+    }
+
+    /**
+     * The maximum number of places to be returned.
+     * @return The maximum number of places to be returned.
+     */
+    public int getLimit() {
+        return limit;
+    }
+
+    /**
+     * The fields to be returned in the response.
+     * @return The fields to be returned in the response.
+     */
+    public Set<String> getFields() {
+        return fields;
+    }
+
+    /**
+     * Describes the builder to create a {@link CurrentPlaceRequestParams}
+     */
+    public static class Builder {
+
+        private Location location;
+        private ScanMode scanMode = ScanMode.HIGH_ACCURACY;
+        private ConfidenceLevel minConfidenceLevel;
+        private int limit;
+        private final Set<String> fields = new HashSet<>();
+
+        /**
+         * Sets the current user location. This parameter is optional.
+         * If a location is not provided, the SDK automatically retrieves the current device
+         * location using {@link android.location.LocationManager}.
+         *
+         * @param location The location at which the user is currently located.
+         * @return this builder
+         */
+        public Builder setLocation(Location location) {
+            this.location = location;
+            return this;
+        }
+
+        /**
+         * Sets the scan mode to be used. When creating a current place request, the SDK
+         * scans for nearby Wi-Fi access points and Bluetooth Low Energy beacons. This parameter
+         * determines the behavior of that scan. High accuracy is the default value.
+         * In order to use low latency, you must specify a location on this builder.
+         *
+         * @param scanMode The scan mode used when generating the current place request.
+         * @return this builder
+         */
+        public Builder setScanMode(ScanMode scanMode) {
+            this.scanMode = scanMode;
+            return this;
+        }
+
+        /**
+         * The minimum confidence level of suggestions to return. See {@link ConfidenceLevel}.
+         * @param minConfidenceLevel the minimum confidence level of suggestions to return.
+         * @return this builder
+         */
+        public Builder setMinConfidenceLevel(ConfidenceLevel minConfidenceLevel) {
+            this.minConfidenceLevel = minConfidenceLevel;
+            return this;
+        }
+
+        /**
+         * Sets the maximum number of results to be returned.
+         *
+         * @param limit the maximum number of results to be returned.
+         * @return this builder
+         */
+        public Builder setLimit(int limit) {
+            this.limit = limit;
+            return this;
+        }
+
+        /**
+         * Specifies a field to be added to the response. Refer to {@link PlaceFields} for a list
+         * of known place fields. Refer to the online Places Graph documentation for an up to date
+         * list of fields.
+         * @param field The field to be returned in the response {@link PlaceFields}.
+         * @return this builder
+         */
+        public Builder addField(String field) {
+            fields.add(field);
+            return this;
+        }
+
+        /**
+         * Returns the {@link CurrentPlaceRequestParams}
+         * @return the {@link CurrentPlaceRequestParams}
+         */
+        public CurrentPlaceRequestParams build() {
+            return new CurrentPlaceRequestParams(this);
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/places/model/PlaceFields.java b/facebook/src/main/java/com/facebook/places/model/PlaceFields.java
new file mode 100644
index 000000000..b435b2709
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/places/model/PlaceFields.java
@@ -0,0 +1,210 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.places.model;
+
+/**
+ * Describes the fields available when searching for a place, or when querying a
+ * place's' information with {@link com.facebook.places.PlaceManager}. Refer to
+ * the online Places Graph documentation to get the complete list of supported
+ * place fields.
+ */
+public interface PlaceFields {
+
+    /**
+     * Information about the Place.
+     */
+    String ABOUT = "about";
+
+    /**
+     * AppLinks to the Place on various devices.
+     */
+    String APP_LINKS = "app_links";
+
+    /**
+     * The Place's categories.
+     */
+    String CATEGORY_LIST = "category_list";
+
+    /**
+     * The number of checkins at this Place.
+     */
+    String CHECKINS = "checkins";
+
+    /**
+     * To be used on the current_place request. Indicates the confidence level of the
+     * current place result.
+     */
+    String CONFIDENCE_LEVEL = "confidence_level";
+
+    /**
+     * OpenGraphContext. The social context for this Place, including friends who were at
+     * this place, or who liked to its page. This field requires authentication with a user
+     * token. An error will be thrown if this field is requested using a client token.
+     */
+    String CONTEXT = "context";
+
+    /**
+     * CoverPhoto. Information about the cover image.
+     */
+    String COVER = "cover";
+
+    /**
+     * The description of the Place.
+     */
+    String DESCRIPTION = "description";
+
+    /**
+     * Engagement. The social sentence and like count information for this place.
+     * This is the same information used for the Like button.
+     */
+    String ENGAGEMENT = "engagement";
+
+    /**
+     * Specifies a single range of open hours per day.
+     * Each day can have two different hours ranges.
+     * The keys in the map are in the form of {day}_{number}_{status}.
+     * {day} should be the first 3 characters of the day of the week,
+     * {number} should be either 1 or 2 to allow for the two different hours ranges per day.
+     * {status} should be either open or close, to delineate the start or end of a time range.
+     * An example would be mon_1_open with value 17:00 and mon_1_close with value 21:15
+     * which would represent a single opening range of 5 PM to 9:15 PM on Mondays.
+     */
+    String HOURS = "hours";
+
+    /**
+     * The unique node ID of the place on the graph api.
+     */
+    String ID = "id";
+
+    /**
+     * Indicates whether this place is always open.
+     */
+    String IS_ALWAYS_OPEN = "is_always_open";
+
+    /**
+     * Indicates whether this place is permanently closed.
+     */
+    String IS_PERMANENTLY_CLOSED = "is_permanently_closed";
+
+    /**
+     * Pages with a large number of followers can be manually verified by Facebook as having
+     * an authentic identity. This field indicates whether the page is verified by this process.
+     */
+    String IS_VERIFIED = "is_verified";
+
+    /**
+     * The place's web URL.
+     */
+    String LINK = "link";
+
+    /**
+     * Location information about the Place. E.g., latitude and longitude, and street address.
+     */
+    String LOCATION = "location";
+
+    /**
+     * The categories that this place matched.
+     * To be used on the search request if the categories parameter is specified.
+     */
+    String MATCHED_CATEGORIES = "matched_categories";
+
+    /**
+     * The name of the place.
+     */
+    String NAME = "name";
+
+    /**
+     * Overall page rating based on a rating survey from users, on a scale of 1-5.
+     * This value is normalized, and is not guaranteed to be a strict average of user ratings.
+     */
+    String OVERALL_STAR_RATING = "overall_star_rating";
+
+    /**
+     * PageParking. Parking information about the Place.
+     */
+    String PARKING = "parking";
+
+    /**
+     * The available payment options.
+     */
+    String PAYMENT_OPTIONS = "payment_options";
+
+    /**
+     * The place's phone number.
+     */
+    String PHONE = "phone";
+
+    /**
+     * Profile photos posted by the place's Page.
+     */
+    String PHOTOS_PROFILE = "photos";
+
+    /**
+     * Photos on the place's Page tagged by other Pages.
+     */
+    String PHOTOS_TAGGED = "photos.type(tagged)";
+
+    /**
+     * Photos uploaded by the place's Page.
+     */
+    String PHOTOS_UPLOADED = "photos.type(uploaded)";
+
+    /**
+     * The current profile picture of the place's Page.
+     */
+    String PICTURE = "picture";
+
+    /**
+     * Price range of the business. Applicable to Restaurants or Nightlife.
+     * Can be one of $ (0-10), $$ (10-30), $$$ (30-50), $$$$ (50+), or Unspecified.
+     */
+    String PRICE_RANGE = "price_range";
+
+    /**
+     * Number of ratings for the place.
+     */
+    String RATING_COUNT = "rating_count";
+
+    /**
+     * Restaurant services. Example: delivery, takeout.
+     */
+    String RESTAURANT_SERVICES = "restaurant_services";
+
+    /**
+     * PageRestaurantSpecialties. The restaurant's specialties. Applicable to Restaurants.
+     */
+    String RESTAURANT_SPECIALTIES = "restaurant_specialties";
+
+    /**
+     * The address, in a single line of text.
+     */
+    String SINGLE_LINE_ADDRESS = "single_line_address";
+
+    /**
+     * The URL of the place's website.
+     */
+    String WEBSITE = "website";
+
+    /**
+     * Workflows.
+     */
+    String WORKFLOWS = "workflows";
+}
diff --git a/facebook/src/main/java/com/facebook/places/model/PlaceInfoRequestParams.java b/facebook/src/main/java/com/facebook/places/model/PlaceInfoRequestParams.java
new file mode 100644
index 000000000..bc2816342
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/places/model/PlaceInfoRequestParams.java
@@ -0,0 +1,108 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.places.model;
+
+import java.util.HashSet;
+import java.util.Set;
+
+/**
+ * Describes the parameters used to create a place info request
+ * with {@link com.facebook.places.PlaceManager}.
+ */
+public final class PlaceInfoRequestParams {
+
+    private final String placeId;
+    private final Set<String> fields = new HashSet<>();
+
+    private PlaceInfoRequestParams(Builder b) {
+        placeId = b.placeId;
+        fields.addAll(b.fields);
+    }
+
+    /**
+     * Gets the ID of the place to be queried.
+     * @return the ID of the place to be queried.
+     */
+    public String getPlaceId() {
+        return placeId;
+    }
+
+    /**
+     * Gets the list of fields to be returned in the response.
+     * @return the list of fields to be returned in the response.
+     */
+    public Set<String> getFields() {
+        return fields;
+    }
+
+    /**
+     * Describes the builder to create a {@link PlaceInfoRequestParams}.
+     */
+    public static class Builder {
+
+        private String placeId;
+        private final Set<String> fields = new HashSet<>();
+
+        /**
+         * Sets the ID of the place to be queried.
+         * @param placeId the ID of the place to be queried.
+         * @return the builder.
+         */
+        public Builder setPlaceId(String placeId) {
+            this.placeId = placeId;
+            return this;
+        }
+
+        /**
+         * Add a field to be returned in the response data. See {@link PlaceFields} for a list of
+         * known fields. Refer to the online Places Graph documentation for an up to date list of
+         * fields.
+         * @param field The field to be added to the list of fields to be returned.
+         * @return The builder.
+         */
+        public Builder addField(String field) {
+            fields.add(field);
+            return this;
+        }
+
+        /**
+         * Add a list of fields to be returned in the response data. See {@link PlaceFields}
+         * for a list of known fields. Refer to the online Places Graph documentation for an
+         * up to date list of fields.
+         * @param fields The list of fields to be returned in the response data.
+         * @return The builder.
+         */
+        public Builder addFields(String[] fields) {
+            for (String field : fields) {
+                this.fields.add(field);
+            }
+            return this;
+        }
+
+        /**
+         * Returns the {@link PlaceInfoRequestParams}.
+         * @return the {@link PlaceInfoRequestParams}.
+         */
+        public PlaceInfoRequestParams build() {
+            return new PlaceInfoRequestParams(this);
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/places/model/PlaceSearchRequestParams.java b/facebook/src/main/java/com/facebook/places/model/PlaceSearchRequestParams.java
new file mode 100644
index 000000000..e5c388097
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/places/model/PlaceSearchRequestParams.java
@@ -0,0 +1,171 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.places.model;
+
+import java.util.HashSet;
+import java.util.Set;
+
+/**
+ * Describes the parameters to create a place search request
+ * with {@link com.facebook.places.PlaceManager}.
+ */
+public final class PlaceSearchRequestParams {
+
+    private final int distance;
+    private final int limit;
+    private final String searchText;
+    private final Set<String> categories = new HashSet<>();
+    private final Set<String> fields = new HashSet<>();
+
+    private PlaceSearchRequestParams(Builder b) {
+        distance = b.distance;
+        limit = b.limit;
+        searchText = b.searchText;
+        categories.addAll(b.categories);
+        fields.addAll(b.fields);
+    }
+
+    /**
+     * Gets the maximum distance (in meters) from the location specified.
+     * This can be used only in conjunction with a location.
+     *
+     * @return The maximum distance in meters from the location specified.
+     */
+    public int getDistance() {
+        return distance;
+    }
+
+    /**
+     * Sets the maximum number of results to be returned.
+     *
+     * @return The maximum number of results to return.
+     */
+    public int getLimit() {
+        return limit;
+    }
+
+    /**
+     * Gets the name of the place to search for.
+     *
+     * @@return The name of the place to search for.
+     */
+    public String getSearchText() {
+        return searchText;
+    }
+
+    /**
+     * Gets the categories used to filter the place search results.
+     * @return The categories used to filter the place search results.
+     */
+    public Set<String> getCategories() {
+        return categories;
+    }
+
+    /**
+     * Gets the list of fields to be returned in the response.
+     * @return The list of fields to be returned in the response.
+     */
+    public Set<String> getFields() {
+        return fields;
+    }
+
+    /**
+     * Describes the builder to create a {@link PlaceSearchRequestParams}
+     */
+    public static class Builder {
+
+        private int distance;
+        private int limit;
+        private String searchText;
+        private final Set<String> categories = new HashSet<>();
+        private final Set<String> fields = new HashSet<>();
+
+        /**
+         * Sets the maximum search radius in meters. If {@code PlaceManager.newPlaceSearchRequest()}
+         * is used, then this parameter defines the maximum search radius around the current device
+         * location. If {@code PlaceManager.newPlaceSearchRequestForLocation()} is used, then this
+         * parameter defines the maximum search radius around the specified location.
+         *
+         * @param distance The maximum distance in meters.
+         * @return The builder.
+         */
+        public Builder setDistance(int distance) {
+            this.distance = distance;
+            return this;
+        }
+
+        /**
+         * Sets the maximum number of places to be returned.
+         *
+         * @param limit The maximum number of places to return.
+         * @return The builder.
+         */
+        public Builder setLimit(int limit) {
+            this.limit = limit;
+            return this;
+        }
+
+        /**
+         * Sets the name of the place to search for.
+         * If this parameter is not specified, then you must supply a location,
+         * and the response will contain places that are near the given location.
+         *
+         * @param searchText The name of the place to search for.
+         * @return The builder.
+         */
+        public Builder setSearchText(String searchText) {
+            this.searchText = searchText;
+            return this;
+        }
+
+        /**
+         * Add a place category to restrict the search results. Refer to the online Places Graph
+         * documentation to see the list of supported categories.
+         * @param category The name of the place category to add as a filter.
+         * @return The builder.
+         */
+        public Builder addCategory(String category) {
+            categories.add(category);
+            return this;
+        }
+
+        /**
+         * Add a place information field to the list of fields to be returned.
+         * Refer to {@link PlaceFields} for a list of fields. Refer to the online Places Graph
+         * documentation for the current list of supported fields.
+         *
+         * @param field The field to be returned in the place search response.
+         * @return The builder.
+         */
+        public Builder addField(String field) {
+            fields.add(field);
+            return this;
+        }
+
+        /**
+         * Returns the {@link PlaceSearchRequestParams}.
+         * @return the {@link PlaceSearchRequestParams}.
+         */
+        public PlaceSearchRequestParams build() {
+            return new PlaceSearchRequestParams(this);
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/share/DeviceShareDialog.java b/facebook/src/main/java/com/facebook/share/DeviceShareDialog.java
new file mode 100644
index 000000000..bbf8422e8
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/share/DeviceShareDialog.java
@@ -0,0 +1,141 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+package com.facebook.share;
+
+import android.app.Activity;
+import android.app.Fragment;
+import android.content.Intent;
+
+import com.facebook.FacebookActivity;
+import com.facebook.FacebookCallback;
+import com.facebook.FacebookException;
+import com.facebook.FacebookRequestError;
+import com.facebook.FacebookSdk;
+import com.facebook.internal.AppCall;
+import com.facebook.internal.CallbackManagerImpl;
+import com.facebook.internal.FacebookDialogBase;
+import com.facebook.internal.FragmentWrapper;
+import com.facebook.share.internal.DeviceShareDialogFragment;
+import com.facebook.share.model.ShareContent;
+import com.facebook.share.model.ShareLinkContent;
+import com.facebook.share.model.ShareOpenGraphContent;
+
+import java.util.List;
+
+/*
+ * Provides functionality to share from devices.
+ * See https://developers.facebook.com/docs/android/devices
+ *
+ * Only ShareLinkContent and ShareOpenGraphContent are supported.
+ *
+ * The dialog does not indicate if the person completed a share. Therefore,
+ * the callback will always either invoke onSuccess or onError.
+ *
+ * The dialog can also dismiss itself after the device code has expired.
+ */
+public class DeviceShareDialog
+        extends FacebookDialogBase<ShareContent, DeviceShareDialog.Result> {
+    private static final int DEFAULT_REQUEST_CODE =
+            CallbackManagerImpl.RequestCodeOffset.DeviceShare.toRequestCode();
+    /**
+     * Constructs a new DeviceShareDialog.
+     * @param activity Activity to use to share the provided content
+     */
+    public DeviceShareDialog(final Activity activity) {
+        super(activity, DEFAULT_REQUEST_CODE);
+    }
+    /**
+     * Constructs a new DeviceShareDialog.
+     * @param fragment fragment to use to share the provided content
+     */
+    public DeviceShareDialog(final Fragment fragment) {
+        super(new FragmentWrapper(fragment), DEFAULT_REQUEST_CODE);
+    }
+    /**
+     * Constructs a new DeviceShareDialog.
+     * @param fragment fragment to use to share the provided content
+     */
+    public DeviceShareDialog(final android.support.v4.app.Fragment fragment) {
+        super(new FragmentWrapper(fragment), DEFAULT_REQUEST_CODE);
+    }
+
+    @Override
+    protected boolean canShowImpl(ShareContent content, Object mode) {
+        return (content instanceof ShareLinkContent ||
+                content instanceof ShareOpenGraphContent);
+    }
+
+    @Override
+    protected void showImpl(final ShareContent content, final Object mode) {
+        if (content == null) {
+            throw new FacebookException("Must provide non-null content to share");
+        }
+
+        if (!(content instanceof ShareLinkContent) &&
+            !(content instanceof ShareOpenGraphContent)) {
+            throw new FacebookException(this.getClass().getSimpleName() +
+                    " only supports ShareLinkContent or ShareOpenGraphContent");
+        }
+        Intent intent = new Intent();
+        intent.setClass(FacebookSdk.getApplicationContext(), FacebookActivity.class);
+        intent.setAction(DeviceShareDialogFragment.TAG);
+        intent.putExtra("content", content);
+        startActivityForResult(intent, getRequestCode());
+    }
+
+    @Override
+    protected List<ModeHandler> getOrderedModeHandlers() {
+        return null;
+    }
+
+    @Override
+    protected AppCall createBaseAppCall() {
+       return null;
+    }
+
+    @Override
+    protected void registerCallbackImpl(
+            final CallbackManagerImpl callbackManager,
+            final FacebookCallback<Result> callback) {
+
+        callbackManager.registerCallback(
+                getRequestCode(),
+                new CallbackManagerImpl.Callback() {
+                    @Override
+                    public boolean onActivityResult(int resultCode, Intent data) {
+                        if (data.hasExtra("error")) {
+                            FacebookRequestError error = data.getParcelableExtra("error");
+                            callback.onError(error.getException());
+                            return true;
+                        }
+                        callback.onSuccess(new Result());
+                        return true;
+                    }
+                });
+    }
+
+    /*
+     * Describes the result of a device share.
+     * This class is intentionally empty.
+     */
+    public static class Result {
+
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/share/ShareApi.java b/facebook/src/main/java/com/facebook/share/ShareApi.java
index 2917e345e..7940f63f2 100644
--- a/facebook/src/main/java/com/facebook/share/ShareApi.java
+++ b/facebook/src/main/java/com/facebook/share/ShareApi.java
@@ -350,7 +350,7 @@ public void onCompleted(GraphResponse response) {
         };
         try {
             for (SharePhoto photo : photoContent.getPhotos()) {
-                Bundle params = null;
+                Bundle params;
                 try {
                     params = getSharePhotoCommonParameters(photo, photoContent);
                 } catch (JSONException e) {
diff --git a/facebook/src/main/java/com/facebook/share/internal/DeviceShareDialogFragment.java b/facebook/src/main/java/com/facebook/share/internal/DeviceShareDialogFragment.java
new file mode 100644
index 000000000..9a974f2fc
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/share/internal/DeviceShareDialogFragment.java
@@ -0,0 +1,299 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.share.internal;
+
+import android.app.Activity;
+import android.app.Dialog;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.v4.app.DialogFragment;
+import android.text.Html;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+
+import com.facebook.FacebookRequestError;
+import com.facebook.GraphRequest;
+import com.facebook.GraphResponse;
+import com.facebook.HttpMethod;
+import com.facebook.R;
+import com.facebook.devicerequests.internal.DeviceRequestsHelper;
+import com.facebook.internal.Validate;
+import com.facebook.share.model.ShareContent;
+import com.facebook.share.model.ShareLinkContent;
+import com.facebook.share.model.ShareOpenGraphContent;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.concurrent.ScheduledFuture;
+import java.util.concurrent.ScheduledThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+
+/**
+ * com.facebook.share.internal is solely for the use of other packages within the
+ * Facebook SDK for Android. Use of any of the classes in this package is
+ * unsupported, and they may be modified or removed without warning at any time.
+ */
+public class DeviceShareDialogFragment extends DialogFragment {
+    public static final String TAG = "DeviceShareDialogFragment";
+    private static final String DEVICE_SHARE_ENDPOINT = "device/share";
+    private static final String REQUEST_STATE_KEY = "request_state";
+    private ProgressBar progressBar;
+    private TextView confirmationCode;
+    private Dialog dialog;
+    private volatile RequestState currentRequestState;
+    private volatile ScheduledFuture codeExpiredFuture;
+    private static ScheduledThreadPoolExecutor backgroundExecutor;
+    private ShareContent shareContent;
+
+    @Nullable
+    @Override
+    public View onCreateView(
+            LayoutInflater inflater,
+            ViewGroup container,
+            Bundle savedInstanceState) {
+        View view = super.onCreateView(inflater, container, savedInstanceState);
+        if (savedInstanceState != null) {
+            RequestState requestState = savedInstanceState.getParcelable(REQUEST_STATE_KEY);
+            if (requestState != null) {
+                setCurrentRequestState(requestState);
+            }
+        }
+        return view;
+    }
+
+    @NonNull
+    @Override
+    public Dialog onCreateDialog(Bundle savedInstanceState) {
+        dialog = new Dialog(getActivity(), R.style.com_facebook_auth_dialog);
+        LayoutInflater inflater = getActivity().getLayoutInflater();
+        View view = inflater.inflate(R.layout.com_facebook_device_auth_dialog_fragment, null);
+        progressBar = (ProgressBar)view.findViewById(R.id.progress_bar);
+        confirmationCode = (TextView)view.findViewById(R.id.confirmation_code);
+
+        Button cancelButton = (Button) view.findViewById(R.id.cancel_button);
+        cancelButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                dialog.dismiss();
+            }
+        });
+
+        TextView instructions = (TextView)view.findViewById(
+                R.id.com_facebook_device_auth_instructions);
+        instructions.setText(
+                Html.fromHtml(getString(R.string.com_facebook_device_auth_instructions)));
+
+        dialog.setContentView(view);
+
+        this.startShare();
+        return dialog;
+    }
+
+    @Override
+    public void onDismiss(final DialogInterface dialog) {
+        super.onDismiss(dialog);
+        if (codeExpiredFuture != null) {
+            codeExpiredFuture.cancel(true);
+        }
+        Intent resultIntent = new Intent();
+        finishActivity(Activity.RESULT_OK, resultIntent);
+    }
+
+    @Override
+    public void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+        if (currentRequestState != null) {
+            outState.putParcelable(REQUEST_STATE_KEY, currentRequestState);
+        }
+    }
+
+    private void finishActivity(int resultCode, Intent data) {
+        DeviceRequestsHelper.cleanUpAdvertisementService(currentRequestState.getUserCode());
+
+        if (isAdded()) {
+            Activity activity = getActivity();
+            activity.setResult(resultCode, data);
+            activity.finish();
+        }
+    }
+
+    private void detach() {
+        if (isAdded()) {
+            this.getFragmentManager().beginTransaction().remove(this).commit();
+        }
+    }
+
+    public void setShareContent(ShareContent shareContent) {
+        this.shareContent = shareContent;
+    }
+
+    private Bundle getGraphParametersForShareContent() {
+        ShareContent content = this.shareContent;
+        if (content == null) {
+            return null;
+        }
+        if (content instanceof ShareLinkContent) {
+            return WebDialogParameters.create((ShareLinkContent)content);
+        } else if (content instanceof ShareOpenGraphContent) {
+            return WebDialogParameters.create((ShareOpenGraphContent)content);
+        }
+        return null;
+    }
+
+    private void startShare() {
+        Bundle parameters = getGraphParametersForShareContent();
+        if (parameters == null || parameters.size() == 0) {
+            this.finishActivityWithError(
+                    new FacebookRequestError(0, "", "Failed to get share content"));
+        }
+
+        String accessToken = Validate.hasAppID()+ "|" + Validate.hasClientToken();
+        parameters.putString(GraphRequest.ACCESS_TOKEN_PARAM, accessToken);
+        parameters.putString(DeviceRequestsHelper.DEVICE_INFO_PARAM,
+                             DeviceRequestsHelper.getDeviceInfo());
+
+        GraphRequest graphRequest = new GraphRequest(
+                null,
+                DEVICE_SHARE_ENDPOINT,
+                parameters,
+                HttpMethod.POST,
+                new GraphRequest.Callback() {
+                    @Override
+                    public void onCompleted(GraphResponse response) {
+                        FacebookRequestError error = response.getError();
+                        if (error != null) {
+                            finishActivityWithError(error);
+                            return;
+                        }
+
+                        JSONObject jsonObject = response.getJSONObject();
+                        RequestState requestState = new RequestState();
+                        try {
+                            requestState.setUserCode(jsonObject.getString("user_code"));
+                            requestState.setExpiresIn(jsonObject.getLong("expires_in"));
+                        } catch (JSONException ex) {
+                            finishActivityWithError(
+                                    new FacebookRequestError(0, "", "Malformed server response"));
+                            return;
+                        }
+
+                        setCurrentRequestState(requestState);
+                    }
+                });
+        graphRequest.executeAsync();
+    }
+
+    private void finishActivityWithError(FacebookRequestError error) {
+        // detach so that we don't send a cancellation message back ondismiss.
+        detach();
+        Intent intent = new Intent();
+        intent.putExtra("error", error);
+        finishActivity(Activity.RESULT_OK, intent);
+    }
+
+    private static synchronized ScheduledThreadPoolExecutor getBackgroundExecutor() {
+        if (backgroundExecutor == null) {
+            backgroundExecutor = new ScheduledThreadPoolExecutor(1);
+        }
+        return backgroundExecutor;
+    }
+
+    private void setCurrentRequestState(RequestState currentRequestState) {
+        this.currentRequestState = currentRequestState;
+        confirmationCode.setText(currentRequestState.getUserCode());
+        confirmationCode.setVisibility(View.VISIBLE);
+        progressBar.setVisibility(View.GONE);
+
+        codeExpiredFuture = getBackgroundExecutor().schedule(
+                new Runnable() {
+                    @Override
+                    public void run() {
+                        dialog.dismiss();
+                    }
+                },
+                currentRequestState.getExpiresIn(),
+                TimeUnit.SECONDS);
+    }
+
+    private static class RequestState implements Parcelable {
+        private String userCode;
+        private long expiresIn;
+
+        RequestState() {}
+
+        public String getUserCode() {
+            return userCode;
+        }
+
+        public void setUserCode(String userCode) {
+            this.userCode = userCode;
+        }
+
+        public long getExpiresIn() {
+            return expiresIn;
+        }
+
+        public void setExpiresIn(long expiresIn) {
+            this.expiresIn = expiresIn;
+        }
+
+
+        protected RequestState(Parcel in) {
+            userCode = in.readString();
+            expiresIn = in.readLong();
+        }
+
+        @Override
+        public int describeContents() {
+            return 0;
+        }
+
+        @Override
+        public void writeToParcel(Parcel dest, int flags) {
+            dest.writeString(userCode);
+            dest.writeLong(expiresIn);
+        }
+
+        @SuppressWarnings("unused")
+        public static final Parcelable.Creator<RequestState> CREATOR =
+                new Parcelable.Creator<RequestState>() {
+                    @Override
+                    public RequestState createFromParcel(Parcel in) {
+                        return new RequestState(in);
+                    }
+
+                    @Override
+                    public RequestState[] newArray(int size) {
+                        return new RequestState[size];
+                    }
+                };
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/share/internal/LegacyNativeDialogParameters.java b/facebook/src/main/java/com/facebook/share/internal/LegacyNativeDialogParameters.java
index a00f9e5fc..7b187ac5b 100644
--- a/facebook/src/main/java/com/facebook/share/internal/LegacyNativeDialogParameters.java
+++ b/facebook/src/main/java/com/facebook/share/internal/LegacyNativeDialogParameters.java
@@ -20,7 +20,6 @@
 
 package com.facebook.share.internal;
 
-import android.content.Context;
 import android.os.Bundle;
 
 import com.facebook.FacebookException;
@@ -28,7 +27,6 @@
 import com.facebook.internal.Validate;
 import com.facebook.share.model.ShareContent;
 import com.facebook.share.model.ShareLinkContent;
-import com.facebook.share.model.ShareOpenGraphAction;
 import com.facebook.share.model.ShareOpenGraphContent;
 import com.facebook.share.model.SharePhotoContent;
 import com.facebook.share.model.ShareVideoContent;
diff --git a/facebook/src/main/java/com/facebook/share/internal/LikeActionController.java b/facebook/src/main/java/com/facebook/share/internal/LikeActionController.java
index 04caec8ef..3f0c8fd27 100644
--- a/facebook/src/main/java/com/facebook/share/internal/LikeActionController.java
+++ b/facebook/src/main/java/com/facebook/share/internal/LikeActionController.java
@@ -38,7 +38,6 @@
 import com.facebook.internal.FragmentWrapper;
 import com.facebook.internal.Logger;
 import com.facebook.internal.NativeProtocol;
-import com.facebook.internal.ServerProtocol;
 import com.facebook.internal.Utility;
 import com.facebook.internal.WorkQueue;
 import com.facebook.share.widget.LikeView;
@@ -1677,7 +1676,7 @@ protected void setRequest(GraphRequest request) {
             this.request = request;
             // Make sure that our requests are hitting the latest version of the API known to this
             // sdk.
-            request.setVersion(ServerProtocol.GRAPH_API_VERSION);
+            request.setVersion(FacebookSdk.getGraphApiVersion());
             request.setCallback(new GraphRequest.Callback() {
                 @Override
                 public void onCompleted(GraphResponse response) {
diff --git a/facebook/src/main/java/com/facebook/share/internal/LikeContent.java b/facebook/src/main/java/com/facebook/share/internal/LikeContent.java
index 481c03575..ffd46cbce 100644
--- a/facebook/src/main/java/com/facebook/share/internal/LikeContent.java
+++ b/facebook/src/main/java/com/facebook/share/internal/LikeContent.java
@@ -126,11 +126,5 @@ public Builder readFrom(final LikeContent content) {
                     .setObjectId(content.getObjectId())
                     .setObjectType(content.getObjectType());
         }
-
-        @Override
-        public Builder readFrom(final Parcel parcel) {
-            return this.readFrom((LikeContent) parcel
-                    .readParcelable(LikeContent.class.getClassLoader()));
-        }
     }
 }
diff --git a/facebook/src/main/java/com/facebook/share/internal/LikeDialog.java b/facebook/src/main/java/com/facebook/share/internal/LikeDialog.java
index 59969a758..4aeeb34d6 100644
--- a/facebook/src/main/java/com/facebook/share/internal/LikeDialog.java
+++ b/facebook/src/main/java/com/facebook/share/internal/LikeDialog.java
@@ -22,7 +22,6 @@
 
 import android.app.Activity;
 import android.content.Intent;
-import android.os.Build;
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
 import android.util.Log;
@@ -143,7 +142,7 @@ public boolean onActivityResult(int resultCode, Intent data) {
 
     private class NativeHandler extends ModeHandler {
         @Override
-        public boolean canShow(final LikeContent content) {
+        public boolean canShow(final LikeContent content, boolean isBestEffort) {
             return (content != null) && LikeDialog.canShowNativeDialog();
         }
 
@@ -175,7 +174,7 @@ public Bundle getLegacyParameters() {
 
     private class WebFallbackHandler extends ModeHandler {
         @Override
-        public boolean canShow(final LikeContent content) {
+        public boolean canShow(final LikeContent content, boolean isBestEffort) {
             return (content != null) && LikeDialog.canShowWebFallback();
         }
 
diff --git a/facebook/src/main/java/com/facebook/share/internal/NativeDialogParameters.java b/facebook/src/main/java/com/facebook/share/internal/NativeDialogParameters.java
index 40443c923..3d56d79c8 100644
--- a/facebook/src/main/java/com/facebook/share/internal/NativeDialogParameters.java
+++ b/facebook/src/main/java/com/facebook/share/internal/NativeDialogParameters.java
@@ -20,18 +20,17 @@
 
 package com.facebook.share.internal;
 
-import android.content.Context;
 import android.os.Bundle;
 
 import com.facebook.FacebookException;
 import com.facebook.internal.Utility;
 import com.facebook.internal.Validate;
 import com.facebook.share.model.ShareContent;
+import com.facebook.share.model.ShareHashtag;
 import com.facebook.share.model.ShareLinkContent;
-import com.facebook.share.model.ShareOpenGraphAction;
+import com.facebook.share.model.ShareMediaContent;
 import com.facebook.share.model.ShareOpenGraphContent;
 import com.facebook.share.model.SharePhotoContent;
-import com.facebook.share.model.ShareVideo;
 import com.facebook.share.model.ShareVideoContent;
 
 import org.json.JSONException;
@@ -84,6 +83,13 @@ public static Bundle create(
                         "Unable to create a JSON Object from the provided ShareOpenGraphContent: "
                                 + e.getMessage());
             }
+        } else if (shareContent instanceof ShareMediaContent) {
+            final ShareMediaContent mediaContent = (ShareMediaContent) shareContent;
+            List<Bundle> mediaInfos = ShareInternalUtility.getMediaInfos(
+                    mediaContent,
+                    callId);
+
+            nativeParams = create(mediaContent, mediaInfos, shouldFailOnDataError);
         }
 
         return nativeParams;
@@ -96,6 +102,7 @@ private static Bundle create(ShareLinkContent linkContent, boolean dataErrorsFat
         Utility.putNonEmptyString(
                 params, ShareConstants.DESCRIPTION, linkContent.getContentDescription());
         Utility.putUri(params, ShareConstants.IMAGE_URL, linkContent.getImageUrl());
+        Utility.putNonEmptyString(params, ShareConstants.QUOTE, linkContent.getQuote());
 
         return params;
     }
@@ -125,6 +132,17 @@ private static Bundle create(
         return params;
     }
 
+    private static Bundle create(
+            ShareMediaContent mediaContent,
+            List<Bundle> mediaInfos,
+            boolean dataErrorsFatal) {
+        Bundle params = createBaseParameters(mediaContent, dataErrorsFatal);
+
+        params.putParcelableArrayList(ShareConstants.MEDIA, new ArrayList<>(mediaInfos));
+
+        return params;
+    }
+
     private static Bundle create(
             ShareOpenGraphContent openGraphContent,
             JSONObject openGraphActionJSON,
@@ -165,7 +183,12 @@ private static Bundle createBaseParameters(ShareContent content, boolean dataErr
         if (!Utility.isNullOrEmpty(peopleIds)) {
             params.putStringArrayList(
                     ShareConstants.PEOPLE_IDS,
-                    new ArrayList<String>(peopleIds));
+                    new ArrayList<>(peopleIds));
+        }
+
+        ShareHashtag shareHashtag = content.getShareHashtag();
+        if (shareHashtag != null) {
+            Utility.putNonEmptyString(params, ShareConstants.HASHTAG, shareHashtag.getHashtag());
         }
 
         return params;
diff --git a/facebook/src/main/java/com/facebook/share/internal/OpenGraphJSONUtility.java b/facebook/src/main/java/com/facebook/share/internal/OpenGraphJSONUtility.java
index dfa01941d..787600ca2 100644
--- a/facebook/src/main/java/com/facebook/share/internal/OpenGraphJSONUtility.java
+++ b/facebook/src/main/java/com/facebook/share/internal/OpenGraphJSONUtility.java
@@ -20,9 +20,8 @@
 
 package com.facebook.share.internal;
 
-import android.os.Bundle;
 import android.support.annotation.Nullable;
-import com.facebook.internal.Validate;
+
 import com.facebook.share.model.ShareOpenGraphAction;
 import com.facebook.share.model.ShareOpenGraphObject;
 import com.facebook.share.model.SharePhoto;
diff --git a/facebook/src/main/java/com/facebook/share/internal/ShareConstants.java b/facebook/src/main/java/com/facebook/share/internal/ShareConstants.java
index 803b14dab..550545b96 100644
--- a/facebook/src/main/java/com/facebook/share/internal/ShareConstants.java
+++ b/facebook/src/main/java/com/facebook/share/internal/ShareConstants.java
@@ -26,25 +26,37 @@
  * unsupported, and they may be modified or removed without warning at any time.
  */
 public class ShareConstants {
+
+    // Common Web Params
+    public static final String WEB_DIALOG_PARAM_ACTION_TYPE = "action_type";
+
+    // Game Request Dialog Params
     public static final String WEB_DIALOG_PARAM_DATA = "data";
     public static final String WEB_DIALOG_PARAM_MESSAGE = "message";
     public static final String WEB_DIALOG_PARAM_TO = "to";
     public static final String WEB_DIALOG_PARAM_TITLE = "title";
-    public static final String WEB_DIALOG_PARAM_ACTION_TYPE = "action_type";
     public static final String WEB_DIALOG_PARAM_OBJECT_ID = "object_id";
     public static final String WEB_DIALOG_PARAM_FILTERS = "filters";
     public static final String WEB_DIALOG_PARAM_SUGGESTIONS = "suggestions";
 
+    // Web Share Dialog Params
     public static final String WEB_DIALOG_PARAM_HREF = "href";
     public static final String WEB_DIALOG_PARAM_ACTION_PROPERTIES = "action_properties";
+    public static final String WEB_DIALOG_PARAM_QUOTE = "quote";
+    public static final String WEB_DIALOG_PARAM_HASHTAG = "hashtag";
+    // Images from a SharePhotoContent
+    public static final String WEB_DIALOG_PARAM_MEDIA =   "media";
 
+    // Feed Dialog Params
     public static final String WEB_DIALOG_PARAM_LINK = "link";
     public static final String WEB_DIALOG_PARAM_PICTURE = "picture";
     public static final String WEB_DIALOG_PARAM_NAME = "name";
     public static final String WEB_DIALOG_PARAM_DESCRIPTION = "description";
 
+    // Join App Group Dialog Params
     public static final String WEB_DIALOG_PARAM_ID = "id";
 
+    // Create App Group Dialog Params
     public static final String WEB_DIALOG_PARAM_PRIVACY = "privacy";
 
     public static final String WEB_DIALOG_RESULT_PARAM_POST_ID = "post_id";
@@ -66,6 +78,7 @@
     public static final String PLACE_ID = "PLACE";
     public static final String PEOPLE_IDS = "FRIENDS";
     public static final String CONTENT_URL = "LINK";
+    public static final String HASHTAG = "HASHTAG";
     public static final String IMAGE_URL = "IMAGE";
     public static final String TITLE = "TITLE";
     public static final String DESCRIPTION = "DESCRIPTION";
@@ -73,6 +86,12 @@
     public static final String DATA_FAILURES_FATAL = "DATA_FAILURES_FATAL";
     public static final String PHOTOS = "PHOTOS";
     public static final String VIDEO_URL = "VIDEO";
+    public static final String QUOTE = "QUOTE";
+    public static final String MEDIA = "MEDIA";
+
+    // Multimedia args
+    public static final String MEDIA_TYPE = "type";
+    public static final String MEDIA_URI = "uri";
 
     // Extras supported for ACTION_OGACTIONPUBLISH_DIALOG:
     public static final String LEGACY_ACTION = "com.facebook.platform.extra.ACTION";
@@ -91,6 +110,10 @@
     // Method args supported for ACTION_APPINVITE_DIALOG
     public static final String APPLINK_URL = "app_link_url";
     public static final String PREVIEW_IMAGE_URL = "preview_image_url";
+    public static final String PROMO_CODE = "promo_code";
+    public static final String PROMO_TEXT = "promo_text";
+    public static final String DEEPLINK_CONTEXT = "deeplink_context";
+    public static final String DESTINATION = "destination";
 
     // Extras supported for MESSAGE_GET_LIKE_STATUS_REQUEST:
     public static final String EXTRA_OBJECT_ID = "com.facebook.platform.extra.OBJECT_ID";
@@ -113,6 +136,7 @@
     public static final String RESULT_POST_ID = "postId";
 
     public static final int MAXIMUM_PHOTO_COUNT = 6;
+    public static final int MAXIMUM_MEDIA_COUNT = 6;
     static final String MY_VIDEOS = "me/videos";
 
     // Feed Dialog
diff --git a/facebook/src/main/java/com/facebook/share/internal/ShareContentValidation.java b/facebook/src/main/java/com/facebook/share/internal/ShareContentValidation.java
index 4a03d46fd..728534c7e 100644
--- a/facebook/src/main/java/com/facebook/share/internal/ShareContentValidation.java
+++ b/facebook/src/main/java/com/facebook/share/internal/ShareContentValidation.java
@@ -29,6 +29,8 @@
 import com.facebook.internal.Validate;
 import com.facebook.share.model.ShareContent;
 import com.facebook.share.model.ShareLinkContent;
+import com.facebook.share.model.ShareMedia;
+import com.facebook.share.model.ShareMediaContent;
 import com.facebook.share.model.ShareOpenGraphAction;
 import com.facebook.share.model.ShareOpenGraphContent;
 import com.facebook.share.model.ShareOpenGraphObject;
@@ -104,6 +106,8 @@ private static void validate(ShareContent content, Validator validator)
             validator.validate((ShareVideoContent) content);
         } else if (content instanceof ShareOpenGraphContent) {
             validator.validate((ShareOpenGraphContent) content);
+        } else if (content instanceof ShareMediaContent) {
+            validator.validate((ShareMediaContent) content);
         }
     }
 
@@ -134,7 +138,7 @@ private static void validatePhotoContent(
         }
     }
 
-    private static void validatePhotoForApi(SharePhoto photo, Validator validator) {
+    private static void validatePhoto(SharePhoto photo) {
         if (photo == null) {
             throw new FacebookException("Cannot share a null SharePhoto");
         }
@@ -142,17 +146,21 @@ private static void validatePhotoForApi(SharePhoto photo, Validator validator) {
         Bitmap photoBitmap = photo.getBitmap();
         Uri photoUri = photo.getImageUrl();
 
-        if (photoBitmap == null) {
-            if (photoUri == null) {
-                throw new FacebookException(
-                        "SharePhoto does not have a Bitmap or ImageUrl specified");
-            }
+        if (photoBitmap == null && photoUri == null) {
+            throw new FacebookException("SharePhoto does not have a Bitmap or ImageUrl specified");
+        }
+    }
 
-            if (Utility.isWebUri(photoUri) && !validator.isOpenGraphContent()) {
-                throw new FacebookException(
-                        "Cannot set the ImageUrl of a SharePhoto to the Uri of an image on the " +
-                                "web when sharing SharePhotoContent");
-            }
+    private static void validatePhotoForApi(SharePhoto photo, Validator validator) {
+        validatePhoto(photo);
+
+        Bitmap photoBitmap = photo.getBitmap();
+        Uri photoUri = photo.getImageUrl();
+
+        if (photoBitmap == null && Utility.isWebUri(photoUri) && !validator.isOpenGraphContent()) {
+            throw new FacebookException(
+                    "Cannot set the ImageUrl of a SharePhoto to the Uri of an image on the " +
+                            "web when sharing SharePhotoContent");
         }
     }
 
@@ -165,16 +173,7 @@ private static void validatePhotoForNativeDialog(SharePhoto photo, Validator val
     }
 
     private static void validatePhotoForWebDialog(SharePhoto photo, Validator validator) {
-        if (photo == null) {
-            throw new FacebookException("Cannot share a null SharePhoto");
-        }
-
-        Uri imageUri = photo.getImageUrl();
-        if (imageUri == null || !Utility.isWebUri(imageUri)) {
-            throw new FacebookException(
-                    "SharePhoto must have a non-null imageUrl set to the Uri of an image " +
-                            "on the web");
-        }
+        validatePhoto(photo);
     }
 
     private static void validateVideoContent(
@@ -202,6 +201,37 @@ private static void validateVideo(ShareVideo video, Validator validator) {
         }
     }
 
+    private static void validateMediaContent(ShareMediaContent mediaContent, Validator validator) {
+        List<ShareMedia> media = mediaContent.getMedia();
+        if (media == null || media.isEmpty()) {
+            throw new FacebookException("Must specify at least one medium in ShareMediaContent.");
+        }
+        if (media.size() > ShareConstants.MAXIMUM_MEDIA_COUNT) {
+            throw new FacebookException(
+                    String.format(
+                            Locale.ROOT,
+                            "Cannot add more than %d media.",
+                            ShareConstants.MAXIMUM_MEDIA_COUNT));
+        }
+        for (ShareMedia medium : media) {
+            validator.validate(medium);
+        }
+    }
+
+    public static void validateMedium(ShareMedia medium, Validator validator) {
+        if (medium instanceof SharePhoto) {
+            validator.validate((SharePhoto) medium);
+        } else if (medium instanceof ShareVideo) {
+            validator.validate((ShareVideo) medium);
+        } else {
+            throw new FacebookException(
+                    String.format(
+                            Locale.ROOT,
+                            "Invalid media type: %s",
+                            medium.getClass().getSimpleName()));
+        }
+    }
+
     private static void validateOpenGraphContent(
             ShareOpenGraphContent openGraphContent, Validator validator) {
         validator.validate(openGraphContent.getAction());
@@ -230,7 +260,7 @@ private static void validateOpenGraphAction(
             throw new FacebookException("ShareOpenGraphAction must have a non-empty actionType");
         }
 
-        validator.validate((ShareOpenGraphValueContainer) openGraphAction, false);
+        validator.validate(openGraphAction, false);
     }
 
     private static void validateOpenGraphObject(
@@ -240,7 +270,7 @@ private static void validateOpenGraphObject(
             throw new FacebookException("Cannot share a null ShareOpenGraphObject");
         }
 
-        validator.validate((ShareOpenGraphValueContainer) openGraphObject, true);
+        validator.validate(openGraphObject, true);
     }
 
     private static void validateOpenGraphValueContainer(
@@ -294,13 +324,13 @@ private static void validateOpenGraphValueContainerObject(
 
     private static class WebShareValidator extends Validator {
         @Override
-        public void validate(final SharePhotoContent photoContent) {
-            throw new FacebookException("Cannot share SharePhotoContent via web sharing dialogs");
+        public void validate(final ShareVideoContent videoContent) {
+            throw new FacebookException("Cannot share ShareVideoContent via web sharing dialogs");
         }
 
         @Override
-        public void validate(final ShareVideoContent videoContent) {
-            throw new FacebookException("Cannot share ShareVideoContent via web sharing dialogs");
+        public void validate(ShareMediaContent mediaContent) {
+            throw new FacebookException("Cannot share ShareMediaContent via web sharing dialogs");
         }
 
         @Override
@@ -330,6 +360,19 @@ public void validate(ShareVideoContent videoContent) {
                         "Cannot share video content with referrer URL using the share api");
             }
         }
+
+        @Override
+        public void validate(ShareMediaContent mediaContent) {
+            throw new FacebookException("Cannot share ShareMediaContent using the share api");
+        }
+
+        @Override
+        public void validate(ShareLinkContent linkContent) {
+            if (!Utility.isNullOrEmpty(linkContent.getQuote())) {
+                throw new FacebookException(
+                        "Cannot share link content with quote using the share api");
+            }
+        }
     }
 
     private static class Validator {
@@ -347,6 +390,10 @@ public void validate(final ShareVideoContent videoContent) {
             validateVideoContent(videoContent, this);
         }
 
+        public void validate(final ShareMediaContent mediaContent) {
+            validateMediaContent(mediaContent, this);
+        }
+
         public void validate(final ShareOpenGraphContent openGraphContent) {
             isOpenGraphContent = true;
             validateOpenGraphContent(openGraphContent, this);
@@ -373,6 +420,10 @@ public void validate(final ShareVideo video) {
             validateVideo(video, this);
         }
 
+        public void validate(final ShareMedia medium) {
+            validateMedium(medium, this);
+        }
+
         public boolean isOpenGraphContent() {
             return isOpenGraphContent;
         }
diff --git a/facebook/src/main/java/com/facebook/share/internal/ShareDialogFeature.java b/facebook/src/main/java/com/facebook/share/internal/ShareDialogFeature.java
index 3348cc8b7..b75ede84e 100644
--- a/facebook/src/main/java/com/facebook/share/internal/ShareDialogFeature.java
+++ b/facebook/src/main/java/com/facebook/share/internal/ShareDialogFeature.java
@@ -42,6 +42,18 @@
      * Indicates whether the native Share dialog supports sharing of videos.
      */
     VIDEO(NativeProtocol.PROTOCOL_VERSION_20141028),
+    /**
+     * Indicates whether the native Share dialog supports sharing of multimedia.
+     */
+    MULTIMEDIA(NativeProtocol.PROTOCOL_VERSION_20160327),
+    /**
+     * Indicates whether the native Share dialog supports hashtags
+     */
+    HASHTAG(NativeProtocol.PROTOCOL_VERSION_20160327),
+    /**
+     * Indicates whether the native Share dialog supports quotes
+     */
+    LINK_SHARE_QUOTES(NativeProtocol.PROTOCOL_VERSION_20160327),
     ;
 
     private int minVersion;
diff --git a/facebook/src/main/java/com/facebook/share/internal/ShareFeedContent.java b/facebook/src/main/java/com/facebook/share/internal/ShareFeedContent.java
index 2ae7bf88f..e3f3cdfdd 100644
--- a/facebook/src/main/java/com/facebook/share/internal/ShareFeedContent.java
+++ b/facebook/src/main/java/com/facebook/share/internal/ShareFeedContent.java
@@ -25,9 +25,6 @@
 
 import com.facebook.share.model.ShareContent;
 
-import java.util.HashMap;
-import java.util.Map;
-
 // This class is used specifically for backwards support in unity for various feed parameters
 // Currently this content is only supported if you set the mode to Feed when sharing.
 public class ShareFeedContent
@@ -186,13 +183,5 @@ public Builder readFrom(final ShareFeedContent model) {
                     .setMediaSource(model.getMediaSource())
                     ;
         }
-
-        @Override
-        public Builder readFrom(final Parcel parcel) {
-            return this.readFrom(
-                    (ShareFeedContent) parcel.readParcelable(
-                            ShareFeedContent.class.getClassLoader()));
-        }
-
     }
 }
diff --git a/facebook/src/main/java/com/facebook/share/internal/ShareInternalUtility.java b/facebook/src/main/java/com/facebook/share/internal/ShareInternalUtility.java
index e80748629..c5c8d365f 100644
--- a/facebook/src/main/java/com/facebook/share/internal/ShareInternalUtility.java
+++ b/facebook/src/main/java/com/facebook/share/internal/ShareInternalUtility.java
@@ -49,10 +49,13 @@
 import com.facebook.internal.NativeProtocol;
 import com.facebook.internal.Utility;
 import com.facebook.share.Sharer;
+import com.facebook.share.model.ShareMedia;
+import com.facebook.share.model.ShareMediaContent;
 import com.facebook.share.model.ShareOpenGraphAction;
 import com.facebook.share.model.ShareOpenGraphContent;
 import com.facebook.share.model.SharePhoto;
 import com.facebook.share.model.SharePhotoContent;
+import com.facebook.share.model.ShareVideo;
 import com.facebook.share.model.ShareVideoContent;
 import com.facebook.share.widget.LikeView;
 
@@ -309,6 +312,39 @@ public static String getVideoUrl(final ShareVideoContent videoContent, final UUI
         return attachment.getAttachmentUrl();
     }
 
+    public static List<Bundle> getMediaInfos(
+            final ShareMediaContent mediaContent,
+            final UUID appCallId) {
+        final List<ShareMedia> media;
+        if (mediaContent == null || (media = mediaContent.getMedia()) == null) {
+            return null;
+        }
+
+        final List<NativeAppCallAttachmentStore.Attachment> attachments = new ArrayList<>();
+        List<Bundle> mediaInfos = Utility.map(
+                media,
+                new Utility.Mapper<ShareMedia, Bundle>() {
+                    @Override
+                    public Bundle apply(ShareMedia item) {
+                        NativeAppCallAttachmentStore.Attachment attachment =
+                                getAttachment(appCallId, item);
+                        attachments.add(attachment);
+                        Bundle mediaInfo = new Bundle();
+                        mediaInfo.putString(
+                                ShareConstants.MEDIA_TYPE,
+                                item.getMediaType().name());
+                        mediaInfo.putString(
+                                ShareConstants.MEDIA_URI,
+                                attachment.getAttachmentUrl());
+                        return mediaInfo;
+                    }
+                });
+
+        NativeAppCallAttachmentStore.addAttachments(attachments);
+
+        return mediaInfos;
+    }
+
     public static JSONObject toJSONObjectForCall(
             final UUID callId,
             final ShareOpenGraphContent content)
@@ -365,7 +401,7 @@ public JSONObject toJSONObject(SharePhoto photo) {
             for (String peopleId : content.getPeopleIds()) {
                 peopleIdSet.add(peopleId);
             }
-            actionJSON.put("tags", new ArrayList<>(peopleIdSet));
+            actionJSON.put("tags", new JSONArray(peopleIdSet));
         }
 
         return actionJSON;
@@ -424,7 +460,7 @@ public static JSONObject removeNamespacesFromOGJsonObject(
             JSONArray names = jsonObject.names();
             for (int i = 0; i < names.length(); ++i) {
                 String key = names.getString(i);
-                Object value = null;
+                Object value;
                 value = jsonObject.get(key);
                 if (value instanceof JSONObject) {
                     value = removeNamespacesFromOGJsonObject((JSONObject) value, true);
@@ -477,18 +513,28 @@ public static JSONObject removeNamespacesFromOGJsonObject(
 
     private static NativeAppCallAttachmentStore.Attachment getAttachment(
             UUID callId,
-            SharePhoto photo) {
-        Bitmap bitmap = photo.getBitmap();
-        Uri photoUri = photo.getImageUrl();
+            ShareMedia medium) {
+        Bitmap bitmap = null;
+        Uri uri = null;
+
+        if (medium instanceof SharePhoto) {
+            SharePhoto photo = (SharePhoto)medium;
+            bitmap = photo.getBitmap();
+            uri = photo.getImageUrl();
+        } else if (medium instanceof ShareVideo) {
+            ShareVideo video = (ShareVideo)medium;
+            uri = video.getLocalUrl();
+        }
+
         NativeAppCallAttachmentStore.Attachment attachment = null;
         if (bitmap != null) {
             attachment = NativeAppCallAttachmentStore.createAttachment(
                     callId,
                     bitmap);
-        } else if (photoUri != null) {
+        } else if (uri != null) {
             attachment = NativeAppCallAttachmentStore.createAttachment(
                     callId,
-                    photoUri);
+                    uri);
         }
 
         return attachment;
diff --git a/facebook/src/main/java/com/facebook/share/internal/VideoUploader.java b/facebook/src/main/java/com/facebook/share/internal/VideoUploader.java
index 52a012d9d..48c370a22 100644
--- a/facebook/src/main/java/com/facebook/share/internal/VideoUploader.java
+++ b/facebook/src/main/java/com/facebook/share/internal/VideoUploader.java
@@ -230,7 +230,7 @@ private static synchronized void enqueueRequest(
         int bufferSize = Math.min(8192, chunkSize);
         byte[] buffer = new byte[bufferSize];
 
-        int len = 0;
+        int len;
         while ((len = uploadContext.videoStream.read(buffer)) != -1) {
             byteBufferStream.write(buffer, 0, len);
 
@@ -333,7 +333,7 @@ private UploadContext(
 
         private void initialize()
                 throws FileNotFoundException {
-            ParcelFileDescriptor fileDescriptor = null;
+            ParcelFileDescriptor fileDescriptor;
             try {
                 if (Utility.isFileUri(videoUri)) {
                     fileDescriptor = ParcelFileDescriptor.open(
diff --git a/facebook/src/main/java/com/facebook/share/internal/WebDialogParameters.java b/facebook/src/main/java/com/facebook/share/internal/WebDialogParameters.java
index 4f61bed5b..ca2b5f5d8 100644
--- a/facebook/src/main/java/com/facebook/share/internal/WebDialogParameters.java
+++ b/facebook/src/main/java/com/facebook/share/internal/WebDialogParameters.java
@@ -21,25 +21,22 @@
 package com.facebook.share.internal;
 
 import android.os.Bundle;
-import android.support.annotation.NonNull;
 
 import com.facebook.FacebookException;
 import com.facebook.internal.Utility;
-import com.facebook.internal.WebDialog;
 import com.facebook.share.model.AppGroupCreationContent;
 import com.facebook.share.model.GameRequestContent;
+import com.facebook.share.model.ShareContent;
+import com.facebook.share.model.ShareHashtag;
 import com.facebook.share.model.ShareLinkContent;
 import com.facebook.share.model.ShareOpenGraphContent;
+import com.facebook.share.model.SharePhoto;
+import com.facebook.share.model.SharePhotoContent;
 
-import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.util.Collection;
-import java.util.HashMap;
 import java.util.Locale;
-import java.util.Map;
-import java.util.Set;
 
 /**
  * com.facebook.share.internal is solely for the use of other packages within the
@@ -116,17 +113,22 @@ public static Bundle create(GameRequestContent gameRequestContent) {
     }
 
     public static Bundle create(ShareLinkContent shareLinkContent) {
-        Bundle params = new Bundle();
+        Bundle params = createBaseParameters(shareLinkContent);
         Utility.putUri(
                 params,
                 ShareConstants.WEB_DIALOG_PARAM_HREF,
                 shareLinkContent.getContentUrl());
 
+        Utility.putNonEmptyString(
+                params,
+                ShareConstants.WEB_DIALOG_PARAM_QUOTE,
+                shareLinkContent.getQuote());
+
         return params;
     }
 
     public static Bundle create(ShareOpenGraphContent shareOpenGraphContent) {
-        Bundle params = new Bundle();
+        Bundle params = createBaseParameters(shareOpenGraphContent);
 
         Utility.putNonEmptyString(
                 params,
@@ -149,6 +151,38 @@ public static Bundle create(ShareOpenGraphContent shareOpenGraphContent) {
         return params;
     }
 
+    public static Bundle create(SharePhotoContent sharePhotoContent) {
+        final Bundle params = createBaseParameters(sharePhotoContent);
+
+        final String[] urls = new String[sharePhotoContent.getPhotos().size()];
+        Utility.map(
+                sharePhotoContent.getPhotos(),
+                new Utility.Mapper<SharePhoto, String>() {
+                    @Override
+                    public String apply(SharePhoto item) {
+                        return item.getImageUrl().toString();
+                    }
+                }).toArray(urls);
+
+        params.putStringArray(ShareConstants.WEB_DIALOG_PARAM_MEDIA ,urls);
+
+        return params;
+    }
+
+    public static Bundle createBaseParameters(ShareContent shareContent) {
+        Bundle params = new Bundle();
+
+        ShareHashtag shareHashtag = shareContent.getShareHashtag();
+        if (shareHashtag != null) {
+            Utility.putNonEmptyString(
+                    params,
+                    ShareConstants.WEB_DIALOG_PARAM_HASHTAG,
+                    shareHashtag.getHashtag());
+        }
+
+        return params;
+    }
+
     public static Bundle createForFeed(ShareLinkContent shareLinkContent) {
         Bundle webParams = new Bundle();
 
@@ -172,6 +206,18 @@ public static Bundle createForFeed(ShareLinkContent shareLinkContent) {
                 ShareConstants.WEB_DIALOG_PARAM_PICTURE,
                 Utility.getUriString(shareLinkContent.getImageUrl()));
 
+        Utility.putNonEmptyString(
+                webParams,
+                ShareConstants.WEB_DIALOG_PARAM_QUOTE,
+                shareLinkContent.getQuote());
+
+        ShareHashtag shareHashtag = shareLinkContent.getShareHashtag();
+        if (shareHashtag != null) {
+            Utility.putNonEmptyString(
+                    webParams,
+                    ShareConstants.WEB_DIALOG_PARAM_HASHTAG,
+                    shareLinkContent.getShareHashtag().getHashtag());
+        }
         return webParams;
     }
 
diff --git a/facebook/src/main/java/com/facebook/share/model/AppGroupCreationContent.java b/facebook/src/main/java/com/facebook/share/model/AppGroupCreationContent.java
index a63f5f9dd..d85a06756 100644
--- a/facebook/src/main/java/com/facebook/share/model/AppGroupCreationContent.java
+++ b/facebook/src/main/java/com/facebook/share/model/AppGroupCreationContent.java
@@ -164,12 +164,5 @@ public Builder readFrom(final AppGroupCreationContent content) {
                     .setDescription(content.getDescription())
                     .setAppGroupPrivacy(content.getAppGroupPrivacy());
         }
-
-        @Override
-        public Builder readFrom(final Parcel parcel) {
-            return this.readFrom(
-                    (AppGroupCreationContent) parcel.readParcelable(
-                            AppGroupCreationContent.class.getClassLoader()));
-        }
     }
 }
diff --git a/facebook/src/main/java/com/facebook/share/model/AppInviteContent.java b/facebook/src/main/java/com/facebook/share/model/AppInviteContent.java
index 897fc31f6..c9b690cf5 100644
--- a/facebook/src/main/java/com/facebook/share/model/AppInviteContent.java
+++ b/facebook/src/main/java/com/facebook/share/model/AppInviteContent.java
@@ -21,6 +21,7 @@
 package com.facebook.share.model;
 
 import android.os.Parcel;
+import android.text.TextUtils;
 
 /**
  * Describes the content that will be displayed by the AppInviteDialog
@@ -28,19 +29,36 @@
 public final class AppInviteContent implements ShareModel {
     private final String applinkUrl;
     private final String previewImageUrl;
+    private final String promoCode;
+    private final String promoText;
+    private final Builder.Destination destination;
 
     private AppInviteContent(final Builder builder) {
         this.applinkUrl = builder.applinkUrl;
         this.previewImageUrl = builder.previewImageUrl;
+        this.promoCode = builder.promoCode;
+        this.promoText = builder.promoText;
+        this.destination = builder.destination;
     }
 
     AppInviteContent(final Parcel in) {
         this.applinkUrl = in.readString();
         this.previewImageUrl = in.readString();
+        this.promoText = in.readString();
+        this.promoCode = in.readString();
+
+        String destinationString = in.readString();
+        if (destinationString.length() > 0) {
+            this.destination = Builder.Destination.valueOf(destinationString);
+        }
+        else {
+            this.destination = Builder.Destination.FACEBOOK;
+        }
     }
 
     /**
      * Gets the applink url.
+     * @return The applink url for the invite.
      */
     public String getApplinkUrl() {
         return applinkUrl;
@@ -48,11 +66,40 @@ public String getApplinkUrl() {
 
     /**
      * Gets the preview image url.
+     * @return The preview image url for the invite.
      */
     public String getPreviewImageUrl() {
         return previewImageUrl;
     }
 
+    /**
+     * Gets the promotion code.
+     * @return The promotion code for invite.
+     */
+    public String getPromotionCode() {
+        return promoCode;
+    }
+
+    /**
+     * Gets the promotion text.
+     * @return The promotion text for invite.
+     */
+    public String getPromotionText() {
+        return promoText;
+    }
+
+    /**
+     * Gets the destination for the invite.
+     * @return The destination for the invite.
+     */
+    public Builder.Destination getDestination() {
+        if (destination != null) {
+            return destination;
+        } else {
+            return Builder.Destination.FACEBOOK;
+        }
+    }
+
     public int describeContents() {
         return 0;
     }
@@ -60,6 +107,9 @@ public int describeContents() {
     public void writeToParcel(final Parcel out, final int flags) {
         out.writeString(this.applinkUrl);
         out.writeString(this.previewImageUrl);
+        out.writeString(this.promoText);
+        out.writeString(this.promoCode);
+        out.writeString(this.destination.toString());
     }
 
     @SuppressWarnings("unused")
@@ -81,6 +131,29 @@ public AppInviteContent createFromParcel(final Parcel in) {
             implements ShareModelBuilder<AppInviteContent, Builder> {
         private String applinkUrl;
         private String previewImageUrl;
+        private String promoCode;
+        private String promoText;
+        private Destination destination;
+
+
+        public enum Destination {
+            FACEBOOK ("facebook"),
+            MESSENGER ("messenger");
+
+            private final String name;
+
+            private Destination(String s) {
+                name = s;
+            }
+
+            public boolean equalsName(String otherName) {
+                return (otherName == null) ? false : name.equals(otherName);
+            }
+
+            public String toString() {
+                return this.name;
+            }
+        }
 
         /**
          * Sets the applink url that will be used for deep-linking
@@ -104,6 +177,62 @@ public Builder setPreviewImageUrl(final String previewImageUrl) {
             return this;
         }
 
+        /**
+         * Sets promotion code and promotion text to be shown on sender and receiver flows
+         * for app invites.
+         *
+         * @param promotionText Promotion text to be shown on sender and receiver flows.
+         *                      Promotion text has to be between 1 and 80 characters long.
+         * @param promotionCode Promotion code to be shown on sender and receiver flows.
+         *                      Promotion code is optional and has to be less than 10 characters
+         *                      long. promotionText needs to be specified if promotionCode
+         *                      is provided.
+         * @return the builder
+         */
+        public Builder setPromotionDetails(final String promotionText, final String promotionCode) {
+            if (!TextUtils.isEmpty(promotionText)) {
+                if (promotionText.length() > 80) {
+                    throw new IllegalArgumentException("" +
+                            "Invalid promotion text, promotionText needs to be between" +
+                            "1 and 80 characters long");
+                }
+
+                if (!isAlphanumericWithSpaces(promotionText)) {
+                    throw new IllegalArgumentException("" +
+                            "Invalid promotion text, promotionText can only contain alphanumeric" +
+                            "characters and spaces.");
+                }
+
+                if (!TextUtils.isEmpty(promotionCode)) {
+
+                    if (promotionCode.length() > 10) {
+                        throw new IllegalArgumentException("" +
+                                "Invalid promotion code, promotionCode can be between" +
+                                "1 and 10 characters long");
+                    }
+
+                    if (!isAlphanumericWithSpaces(promotionCode)) {
+                        throw new IllegalArgumentException("" +
+                                "Invalid promotion code, promotionCode can only contain " +
+                                "alphanumeric characters and spaces.");
+                    }
+                }
+            } else if (!TextUtils.isEmpty(promotionCode)) {
+                throw new IllegalArgumentException("promotionCode cannot be specified " +
+                        "without a valid promotionText");
+            }
+
+            this.promoCode = promotionCode;
+            this.promoText = promotionText;
+            return this;
+        }
+
+        public Builder setDestination(Destination destination) {
+            this.destination = destination;
+            return this;
+        }
+
+
         @Override
         public AppInviteContent build() {
             return new AppInviteContent(this);
@@ -117,13 +246,19 @@ public Builder readFrom(final AppInviteContent content) {
             }
             return this
                     .setApplinkUrl(content.getApplinkUrl())
-                    .setPreviewImageUrl(content.getPreviewImageUrl());
+                    .setPreviewImageUrl(content.getPreviewImageUrl())
+                    .setPromotionDetails(content.getPromotionText(), content.getPromotionCode())
+                    .setDestination(content.getDestination());
         }
 
-        @Override
-        public Builder readFrom(final Parcel parcel) {
-            return this.readFrom((AppInviteContent) parcel
-                    .readParcelable(AppInviteContent.class.getClassLoader()));
+        private boolean isAlphanumericWithSpaces(String str) {
+            for (int i=0; i<str.length(); i++) {
+                char c = str.charAt(i);
+                if (!Character.isDigit(c) && !Character.isLetter(c) && !Character.isSpaceChar(c))
+                    return false;
+            }
+
+            return true;
         }
     }
 }
diff --git a/facebook/src/main/java/com/facebook/share/model/GameRequestContent.java b/facebook/src/main/java/com/facebook/share/model/GameRequestContent.java
index 3f1b81c2b..cc4fa0c2b 100644
--- a/facebook/src/main/java/com/facebook/share/model/GameRequestContent.java
+++ b/facebook/src/main/java/com/facebook/share/model/GameRequestContent.java
@@ -23,7 +23,6 @@
 import android.os.Parcel;
 import android.text.TextUtils;
 
-import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 
@@ -303,8 +302,7 @@ public Builder readFrom(final GameRequestContent content) {
                     .setSuggestions(content.getSuggestions());
         }
 
-        @Override
-        public Builder readFrom(final Parcel parcel) {
+        Builder readFrom(final Parcel parcel) {
             return this.readFrom(
                     (GameRequestContent) parcel.readParcelable(
                             GameRequestContent.class.getClassLoader()));
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareContent.java b/facebook/src/main/java/com/facebook/share/model/ShareContent.java
index 20ce2f803..acc3c5b0b 100644
--- a/facebook/src/main/java/com/facebook/share/model/ShareContent.java
+++ b/facebook/src/main/java/com/facebook/share/model/ShareContent.java
@@ -38,6 +38,7 @@
     private final List<String> peopleIds;
     private final String placeId;
     private final String ref;
+    private final ShareHashtag hashtag;
 
     protected ShareContent(final Builder builder) {
         super();
@@ -45,6 +46,7 @@ protected ShareContent(final Builder builder) {
         this.peopleIds = builder.peopleIds;
         this.placeId = builder.placeId;
         this.ref = builder.ref;
+        this.hashtag = builder.hashtag;
     }
 
     protected ShareContent(final Parcel in) {
@@ -52,6 +54,7 @@ protected ShareContent(final Parcel in) {
         this.peopleIds = readUnmodifiableStringList(in);
         this.placeId = in.readString();
         this.ref = in.readString();
+        this.hashtag = new ShareHashtag.Builder().readFrom(in).build();
     }
 
     /**
@@ -102,6 +105,16 @@ public String getRef() {
         return this.ref;
     }
 
+    /**
+     * Gets the ShareHashtag, if one has been set, for this content.
+     *
+     * @return The hashtag
+     */
+    @Nullable
+    public ShareHashtag getShareHashtag() {
+        return this.hashtag;
+    }
+
     public int describeContents() {
         return 0;
     }
@@ -111,6 +124,7 @@ public void writeToParcel(final Parcel out, final int flags) {
         out.writeStringList(this.peopleIds);
         out.writeString(this.placeId);
         out.writeString(this.ref);
+        out.writeParcelable(this.hashtag, 0);
     }
 
     private List<String> readUnmodifiableStringList(final Parcel in) {
@@ -128,6 +142,7 @@ public void writeToParcel(final Parcel out, final int flags) {
         private List<String> peopleIds;
         private String placeId;
         private String ref;
+        private ShareHashtag hashtag;
 
         /**
          * Set the URL for the content being shared.
@@ -174,6 +189,17 @@ public E setRef(@Nullable final String ref) {
             return (E) this;
         }
 
+        /**
+         * Set the ShareHashtag for this content
+         *
+         * @param shareHashtag The hashtag for this content
+         * @return The builder
+         */
+        public E setShareHashtag(@Nullable final ShareHashtag shareHashtag) {
+            this.hashtag = shareHashtag;
+            return (E) this;
+        }
+
         @Override
         public E readFrom(final P content) {
             if (content == null) {
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareHashtag.java b/facebook/src/main/java/com/facebook/share/model/ShareHashtag.java
new file mode 100644
index 000000000..95fdbdc90
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/share/model/ShareHashtag.java
@@ -0,0 +1,113 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.share.model;
+
+import android.os.Parcel;
+
+/**
+ * Describes a hashtag for sharing.
+ *
+ * Use {@link ShareHashtag.Builder} to build instances
+ */
+public class ShareHashtag implements ShareModel {
+
+    private final String hashtag;
+
+    private ShareHashtag(final Builder builder) {
+        this.hashtag = builder.hashtag;
+    }
+
+    ShareHashtag(final Parcel in) {
+        this.hashtag = in.readString();
+    }
+
+    /**
+     * @return Gets the value of the hashtag for this instance
+     */
+    public String getHashtag() {
+        return hashtag;
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeString(hashtag);
+    }
+
+    @SuppressWarnings("unused")
+    public static final Creator<ShareHashtag> CREATOR = new Creator<ShareHashtag>() {
+        public ShareHashtag createFromParcel(final Parcel in) {
+            return new ShareHashtag(in);
+        }
+
+        public ShareHashtag[] newArray(final int size) {
+            return new ShareHashtag[size];
+        }
+    };
+
+    /**
+     * Builder for the {@link com.facebook.share.model.ShareHashtag} class.
+     */
+    public static class Builder implements ShareModelBuilder<ShareHashtag, Builder> {
+
+        private String hashtag;
+
+        /**
+         * Sets the hashtag value for this instance.
+         * @param hashtag
+         * @return the Builder instance
+         */
+        public Builder setHashtag(final String hashtag) {
+            this.hashtag = hashtag;
+            return this;
+        }
+
+        /**
+         * @return Gets the value of the hashtag for this instance
+         */
+        public String getHashtag() {
+            return hashtag;
+        }
+
+        @Override
+        public Builder readFrom(final ShareHashtag model) {
+            if (model == null) {
+                return this;
+            }
+
+            return this.setHashtag(model.getHashtag());
+        }
+
+        Builder readFrom(final Parcel parcel) {
+            return this.readFrom(
+                    (ShareHashtag)parcel.readParcelable(ShareHashtag.class.getClassLoader()));
+        }
+
+        @Override
+        public ShareHashtag build() {
+            return new ShareHashtag(this);
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareLinkContent.java b/facebook/src/main/java/com/facebook/share/model/ShareLinkContent.java
index 1644ff781..d074078d6 100644
--- a/facebook/src/main/java/com/facebook/share/model/ShareLinkContent.java
+++ b/facebook/src/main/java/com/facebook/share/model/ShareLinkContent.java
@@ -23,6 +23,7 @@
 import android.net.Uri;
 import android.os.Parcel;
 import android.support.annotation.Nullable;
+import android.util.Log;
 
 /**
  * Describes link content to be shared.
@@ -33,15 +34,17 @@
  */
 public final class ShareLinkContent
         extends ShareContent<ShareLinkContent, ShareLinkContent.Builder> {
-    private final String contentDescription;
-    private final String contentTitle;
-    private final Uri imageUrl;
+    @Deprecated private final String contentDescription;
+    @Deprecated private final String contentTitle;
+    @Deprecated private final Uri imageUrl;
+    private final String quote;
 
     private ShareLinkContent(final Builder builder) {
         super(builder);
         this.contentDescription = builder.contentDescription;
         this.contentTitle = builder.contentTitle;
         this.imageUrl = builder.imageUrl;
+        this.quote = builder.quote;
     }
 
     ShareLinkContent(final Parcel in) {
@@ -49,35 +52,54 @@ private ShareLinkContent(final Builder builder) {
         this.contentDescription = in.readString();
         this.contentTitle = in.readString();
         this.imageUrl = in.readParcelable(Uri.class.getClassLoader());
+        this.quote = in.readString();
     }
 
     /**
+     * @deprecated As of Graph API 2.9 this field is deprecated and may not function as expected.
+     * For more information, see https://developers.facebook.com/docs/apps/changelog#v2_9_deprecations.
      * The description of the link.  If not specified, this field is automatically populated by
      * information scraped from the link, typically the title of the page.
      * @return The description of the link.
      */
+    @Deprecated
     public String getContentDescription() {
         return this.contentDescription;
     }
 
     /**
+     * @deprecated As of Graph API 2.9 this field is deprecated and may not function as expected.
+     * For more information, see https://developers.facebook.com/docs/apps/changelog#v2_9_deprecations.
      * The title to display for this link.
      * @return The link title.
      */
+    @Deprecated
     @Nullable
     public String getContentTitle() {
         return this.contentTitle;
     }
 
     /**
+     * @deprecated As of Graph API 2.9 this field is deprecated and may not function as expected.
+     * For more information, see https://developers.facebook.com/docs/apps/changelog#v2_9_deprecations.
      * The URL of a picture to attach to this content.
      * @return The network URL of an image.
      */
+    @Deprecated
     @Nullable
     public Uri getImageUrl() {
         return this.imageUrl;
     }
 
+    /**
+     * The quoted text to display for this link.
+     * @return The text quoted from the link.
+     */
+    @Nullable
+    public String getQuote() {
+        return this.quote;
+    }
+
     public int describeContents() {
         return 0;
     }
@@ -87,6 +109,7 @@ public void writeToParcel(final Parcel out, final int flags) {
         out.writeString(this.contentDescription);
         out.writeString(this.contentTitle);
         out.writeParcelable(this.imageUrl, 0);
+        out.writeString(this.quote);
     }
 
     @SuppressWarnings("unused")
@@ -106,38 +129,60 @@ public ShareLinkContent createFromParcel(final Parcel in) {
      */
     public static final class Builder
             extends ShareContent.Builder<ShareLinkContent, Builder> {
-        private String contentDescription;
-        private String contentTitle;
-        private Uri imageUrl;
+        static final String TAG = Builder.class.getSimpleName();
+        @Deprecated private String contentDescription;
+        @Deprecated private String contentTitle;
+        @Deprecated private Uri imageUrl;
+
+        private String quote;
 
         /**
+         * @deprecated As of Graph API 2.9 this field is deprecated and may not function as expected.
          * Set the contentDescription of the link.
+         * For more information, see https://developers.facebook.com/docs/apps/changelog#v2_9_deprecations.
          * @param contentDescription The contentDescription of the link.
          * @return The builder.
          */
+        @Deprecated
         public Builder setContentDescription(
                 @Nullable final String contentDescription) {
-            this.contentDescription = contentDescription;
+            Log.w(TAG, "This method does nothing. ContentDescription is deprecated in Graph API 2.9.");
             return this;
         }
 
         /**
+         * @deprecated As of Graph API 2.9 this field is deprecated and may not function as expected.
+         * For more information, see https://developers.facebook.com/docs/apps/changelog#v2_9_deprecations.
          * Set the contentTitle to display for this link.
          * @param contentTitle The link contentTitle.
          * @return The builder.
          */
+        @Deprecated
         public Builder setContentTitle(@Nullable final String contentTitle) {
-            this.contentTitle = contentTitle;
+            Log.w(TAG, "This method does nothing. ContentTitle is deprecated in Graph API 2.9.");
             return this;
         }
 
         /**
+         * @deprecated As of Graph API 2.9 this field is deprecated and may not function as expected.
+         * For more information, see https://developers.facebook.com/docs/apps/changelog#v2_9_deprecations.
          * Set the URL of a picture to attach to this content.
          * @param imageUrl The network URL of an image.
          * @return The builder.
          */
+        @Deprecated
         public Builder setImageUrl(@Nullable final Uri imageUrl) {
-            this.imageUrl = imageUrl;
+            Log.w(TAG, "This method does nothing. ImageUrl is deprecated in Graph API 2.9.");
+            return this;
+        }
+
+        /**
+         * Set the quote to display for this link.
+         * @param quote The text quoted from the link.
+         * @return The builder.
+         */
+        public Builder setQuote(@Nullable final String quote) {
+            this.quote = quote;
             return this;
         }
 
@@ -156,15 +201,8 @@ public Builder readFrom(final ShareLinkContent model) {
                     .setContentDescription(model.getContentDescription())
                     .setImageUrl(model.getImageUrl())
                     .setContentTitle(model.getContentTitle())
+                    .setQuote(model.getQuote())
                     ;
         }
-
-        @Override
-        public Builder readFrom(final Parcel parcel) {
-            return this.readFrom(
-                    (ShareLinkContent) parcel.readParcelable(
-                            ShareLinkContent.class.getClassLoader()));
-        }
-
     }
 }
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareMedia.java b/facebook/src/main/java/com/facebook/share/model/ShareMedia.java
index fe7c59ba7..96efc6b29 100644
--- a/facebook/src/main/java/com/facebook/share/model/ShareMedia.java
+++ b/facebook/src/main/java/com/facebook/share/model/ShareMedia.java
@@ -22,12 +22,22 @@
 
 import android.os.Bundle;
 import android.os.Parcel;
+import android.os.Parcelable;
+
+import java.util.ArrayList;
+import java.util.List;
 
 /**
  * Base class for shared media (photos, videos, etc).
  */
 public abstract class ShareMedia implements ShareModel {
 
+    public enum Type {
+        PHOTO,
+        VIDEO,
+        ;
+    }
+
     private final Bundle params;
 
     protected ShareMedia(final Builder builder) {
@@ -56,6 +66,8 @@ public void writeToParcel(Parcel dest, int flags) {
         dest.writeBundle(params);
     }
 
+    public abstract Type getMediaType();
+
     /**
      * Builder for the {@link com.facebook.share.model.ShareMedia} class.
      */
@@ -88,5 +100,22 @@ public B readFrom(final M model) {
             }
             return this.setParameters(model.getParameters());
         }
+
+        static void writeListTo(
+                final Parcel out,
+                int parcelFlags,
+                final List<ShareMedia> media) {
+            out.writeParcelableArray((ShareMedia[]) media.toArray(), parcelFlags);
+        }
+
+        static List<ShareMedia> readListFrom(final Parcel in) {
+            Parcelable[] parcelables = in.readParcelableArray(
+                    ShareMedia.class.getClassLoader());
+            List<ShareMedia> shareMedia = new ArrayList<>(parcelables.length);
+            for (Parcelable parcelable : parcelables) {
+                shareMedia.add((ShareMedia) parcelable);
+            }
+            return shareMedia;
+        }
     }
 }
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareMediaContent.java b/facebook/src/main/java/com/facebook/share/model/ShareMediaContent.java
new file mode 100644
index 000000000..3474d1a16
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/share/model/ShareMediaContent.java
@@ -0,0 +1,149 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.share.model;
+
+import android.os.Parcel;
+import android.support.annotation.Nullable;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+
+public final class ShareMediaContent
+        extends ShareContent<ShareMediaContent, ShareMediaContent.Builder> {
+    private final List<ShareMedia> media;
+
+    private ShareMediaContent(final Builder builder) {
+        super(builder);
+        this.media = Collections.unmodifiableList(builder.media);
+    }
+
+    ShareMediaContent(final Parcel in) {
+        super(in);
+        ShareMedia[] shareMedia = (ShareMedia[])in.readParcelableArray(
+                ShareMedia.class.getClassLoader());
+        this.media = Arrays.asList(shareMedia);
+    }
+
+    /**
+     * Media to be shared.
+     *
+     * @return {@link java.util.List} of {@link ShareMedia}s.
+     */
+    @Nullable
+    public List<ShareMedia> getMedia() {
+        return this.media;
+    }
+
+    public int describeContents() {
+        return 0;
+    }
+
+    public void writeToParcel(final Parcel out, final int flags) {
+        super.writeToParcel(out, flags);
+        out.writeParcelableArray((ShareMedia[])this.media.toArray(), flags);
+    }
+
+    @SuppressWarnings("unused")
+    public static final Creator<ShareMediaContent> CREATOR = new Creator<ShareMediaContent>() {
+        public ShareMediaContent createFromParcel(final Parcel in) {
+            return new ShareMediaContent(in);
+        }
+
+        public ShareMediaContent[] newArray(final int size) {
+            return new ShareMediaContent[size];
+        }
+    };
+
+    /**
+     * Builder for the {@link SharePhotoContent} interface.
+     */
+    public static class Builder extends ShareContent.Builder<ShareMediaContent, Builder> {
+        private final List<ShareMedia> media = new ArrayList<>();
+
+        /**
+         * Adds a medium to the content.
+         *
+         * @param medium {@link com.facebook.share.model.ShareMedia} to add.
+         * @return The builder.
+         */
+        public Builder addMedium(@Nullable final ShareMedia medium) {
+            if (medium != null) {
+                ShareMedia mediumToAdd;
+                if (medium instanceof SharePhoto) {
+                    mediumToAdd = new SharePhoto.Builder().readFrom((SharePhoto) medium).build();
+                } else if (medium instanceof ShareVideo) {
+                    mediumToAdd = new ShareVideo.Builder().readFrom((ShareVideo) medium).build();
+                } else {
+                    throw new IllegalArgumentException(
+                            "medium must be either a SharePhoto or ShareVideo");
+                }
+                this.media.add(mediumToAdd);
+            }
+            return this;
+        }
+
+        /**
+         * Adds multiple media to the content.
+         *
+         * @param media {@link java.util.List} of {@link com.facebook.share.model.ShareMedia}
+         *               to add.
+         * @return The builder.
+         */
+        public Builder addMedia(@Nullable final List<ShareMedia> media) {
+            if (media != null) {
+                for (ShareMedia medium : media) {
+                    this.addMedium(medium);
+                }
+            }
+            return this;
+        }
+
+        @Override
+        public ShareMediaContent build() {
+            return new ShareMediaContent(this);
+        }
+
+        @Override
+        public Builder readFrom(final ShareMediaContent model) {
+            if (model == null) {
+                return this;
+            }
+            return super.
+                    readFrom(model)
+                    .addMedia(model.getMedia());
+        }
+
+        /**
+         * Replaces the media for the builder.
+         *
+         * @param media {@link java.util.List} of {@link com.facebook.share.model.ShareMedia}
+         *   to add.
+         * @return The builder.
+         */
+        public Builder setMedia(@Nullable final List<ShareMedia> media) {
+            this.media.clear();
+            this.addMedia(media);
+            return this;
+        }
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareModelBuilder.java b/facebook/src/main/java/com/facebook/share/model/ShareModelBuilder.java
index 794f1d5c2..3500dde49 100644
--- a/facebook/src/main/java/com/facebook/share/model/ShareModelBuilder.java
+++ b/facebook/src/main/java/com/facebook/share/model/ShareModelBuilder.java
@@ -20,8 +20,6 @@
 
 package com.facebook.share.model;
 
-import android.os.Parcel;
-
 import com.facebook.share.ShareBuilder;
 
 /**
@@ -37,12 +35,4 @@
      * @return The builder.
      */
     public E readFrom(P model);
-
-    /**
-     * Reads the values from a parcel into the builder.  The parcel must have packaged an instance
-     * of the ShareModel that came from the same type of builder.
-     * @param parcel The Parcel that contains the ShareModel.
-     * @return The builder.
-     */
-    public E readFrom(Parcel parcel);
 }
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphAction.java b/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphAction.java
index 81f5767ed..683cddd21 100644
--- a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphAction.java
+++ b/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphAction.java
@@ -98,8 +98,7 @@ public Builder readFrom(final ShareOpenGraphAction model) {
                     ;
         }
 
-        @Override
-        public Builder readFrom(final Parcel parcel) {
+        Builder readFrom(final Parcel parcel) {
             return this.readFrom(
                     (ShareOpenGraphAction) parcel.readParcelable(
                             ShareOpenGraphAction.class.getClassLoader()));
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphContent.java b/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphContent.java
index 5806c9c8c..725b1cc82 100644
--- a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphContent.java
+++ b/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphContent.java
@@ -144,12 +144,5 @@ public Builder readFrom(final com.facebook.share.model.ShareOpenGraphContent mod
                     ;
         }
 
-        @Override
-        public Builder readFrom(final Parcel parcel) {
-            return this.readFrom(
-                    (com.facebook.share.model.ShareOpenGraphContent) parcel.readParcelable(
-                            ShareOpenGraphContent.class.getClassLoader()));
-        }
-
     }
 }
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphObject.java b/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphObject.java
index 15c10ab69..368207022 100644
--- a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphObject.java
+++ b/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphObject.java
@@ -70,8 +70,7 @@ public ShareOpenGraphObject build() {
             return new ShareOpenGraphObject(this);
         }
 
-        @Override
-        public Builder readFrom(final Parcel parcel) {
+        Builder readFrom(final Parcel parcel) {
             return this.readFrom(
                     (ShareOpenGraphObject)parcel.readParcelable(
                             ShareOpenGraphObject.class.getClassLoader()));
diff --git a/facebook/src/main/java/com/facebook/share/model/SharePhoto.java b/facebook/src/main/java/com/facebook/share/model/SharePhoto.java
index dcf8a50f5..fdd834ac3 100644
--- a/facebook/src/main/java/com/facebook/share/model/SharePhoto.java
+++ b/facebook/src/main/java/com/facebook/share/model/SharePhoto.java
@@ -23,6 +23,7 @@
 import android.graphics.Bitmap;
 import android.net.Uri;
 import android.os.Parcel;
+import android.os.Parcelable;
 import android.support.annotation.Nullable;
 
 import java.util.ArrayList;
@@ -104,16 +105,24 @@ public void writeToParcel(final Parcel out, final int flags) {
         out.writeString(caption);
     }
 
-    @SuppressWarnings("unused")
-    public static final Creator<SharePhoto> CREATOR = new Creator<SharePhoto>() {
-        public SharePhoto createFromParcel(final Parcel in) {
-            return new SharePhoto(in);
-        }
+    public static final Parcelable.Creator<SharePhoto> CREATOR =
+            new Parcelable.Creator<SharePhoto>() {
 
-        public SharePhoto[] newArray(final int size) {
-            return new SharePhoto[size];
-        }
-    };
+                @Override
+                public SharePhoto createFromParcel(final Parcel source) {
+                    return new SharePhoto(source);
+                }
+
+                @Override
+                public SharePhoto[] newArray(final int size) {
+                    return new SharePhoto[size];
+                }
+            };
+
+    @Override
+    public Type getMediaType() {
+        return Type.PHOTO;
+    }
 
     /**
      * Builder for the {@link com.facebook.share.model.SharePhoto} class.
@@ -196,24 +205,39 @@ public Builder readFrom(final SharePhoto model) {
                     ;
         }
 
-        @Override
-        public Builder readFrom(final Parcel parcel) {
+        Builder readFrom(final Parcel parcel) {
             return this.readFrom(
-                    (SharePhoto)parcel.readParcelable(SharePhoto.class.getClassLoader()));
+                    (SharePhoto) parcel.readParcelable(SharePhoto.class.getClassLoader()));
         }
 
-        public static void writeListTo(final Parcel out, final List<SharePhoto> photos) {
-            final List<SharePhoto> list = new ArrayList<>();
-            for (SharePhoto photo : photos) {
-                list.add(photo);
+        /*
+         * For backwards compatibility with SharePhotoContent.  Prefer ShareMediaContent for new
+         * code.
+         */
+        static void writePhotoListTo(
+                final Parcel out,
+                int parcelFlags,
+                final List<SharePhoto> photos) {
+            ShareMedia[] array = new ShareMedia[photos.size()];
+            for (int i = 0; i < photos.size(); ++i) {
+                array[i] = photos.get(i);
             }
-            out.writeTypedList(list);
+            out.writeParcelableArray(array, parcelFlags);
         }
 
-        public static List<SharePhoto> readListFrom(final Parcel in) {
-            final List<SharePhoto> list = new ArrayList<>();
-            in.readTypedList(list, CREATOR);
-            return list;
+        /*
+         * For backwards compatibility with SharePhotoContent.  Prefer ShareMediaContent for new
+         * code.
+         */
+        static List<SharePhoto> readPhotoListFrom(final Parcel in) {
+            final List<ShareMedia> media = readListFrom(in);
+            final List<SharePhoto> photos = new ArrayList<>();
+            for (ShareMedia medium : media) {
+                if (medium instanceof SharePhoto) {
+                    photos.add((SharePhoto) medium);
+                }
+            }
+            return photos;
         }
     }
 }
diff --git a/facebook/src/main/java/com/facebook/share/model/SharePhotoContent.java b/facebook/src/main/java/com/facebook/share/model/SharePhotoContent.java
index 3cad92e31..8b740bf7b 100644
--- a/facebook/src/main/java/com/facebook/share/model/SharePhotoContent.java
+++ b/facebook/src/main/java/com/facebook/share/model/SharePhotoContent.java
@@ -23,8 +23,6 @@
 import android.os.Parcel;
 import android.support.annotation.Nullable;
 
-import com.facebook.share.internal.ShareConstants;
-
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -45,7 +43,8 @@ private SharePhotoContent(final Builder builder) {
 
     SharePhotoContent(final Parcel in) {
         super(in);
-        this.photos = Collections.unmodifiableList(SharePhoto.Builder.readListFrom(in));
+
+        this.photos = Collections.unmodifiableList(SharePhoto.Builder.readPhotoListFrom(in));
     }
 
     /**
@@ -63,7 +62,7 @@ public int describeContents() {
 
     public void writeToParcel(final Parcel out, final int flags) {
         super.writeToParcel(out, flags);
-        SharePhoto.Builder.writeListTo(out, this.photos);
+        SharePhoto.Builder.writePhotoListTo(out, flags, this.photos);
     }
 
     @SuppressWarnings("unused")
@@ -125,13 +124,6 @@ public Builder readFrom(final SharePhotoContent model) {
                     .addPhotos(model.getPhotos());
         }
 
-        @Override
-        public Builder readFrom(final Parcel parcel) {
-            return this.readFrom(
-                    (SharePhotoContent) parcel.readParcelable(
-                            SharePhotoContent.class.getClassLoader()));
-        }
-
         /**
          * Replaces the photos for the builder.
          * @param photos {@link java.util.List} of {@link com.facebook.share.model.SharePhoto}s to add.
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareVideo.java b/facebook/src/main/java/com/facebook/share/model/ShareVideo.java
index 49fc8caa7..0a919f6f2 100644
--- a/facebook/src/main/java/com/facebook/share/model/ShareVideo.java
+++ b/facebook/src/main/java/com/facebook/share/model/ShareVideo.java
@@ -22,6 +22,7 @@
 
 import android.net.Uri;
 import android.os.Parcel;
+import android.os.Parcelable;
 import android.support.annotation.Nullable;
 
 /**
@@ -60,16 +61,24 @@ public void writeToParcel(final Parcel out, final int flags) {
         out.writeParcelable(this.localUrl, 0);
     }
 
-    @SuppressWarnings("unused")
-    public static final Creator<ShareVideo> CREATOR = new Creator<ShareVideo>() {
-        public ShareVideo createFromParcel(final Parcel in) {
-            return new ShareVideo(in);
-        }
+    public static final Parcelable.Creator<ShareVideo> CREATOR =
+        new Parcelable.Creator<ShareVideo>() {
 
-        public ShareVideo[] newArray(final int size) {
-            return new ShareVideo[size];
-        }
-    };
+            @Override
+            public ShareVideo createFromParcel(final Parcel source) {
+                return new ShareVideo(source);
+            }
+
+            @Override
+            public ShareVideo[] newArray(final int size) {
+                return new ShareVideo[size];
+            }
+        };
+
+    @Override
+    public Type getMediaType() {
+        return Type.VIDEO;
+    }
 
     /**
      * Builder for the {@link com.facebook.share.model.ShareVideo} class.
@@ -101,8 +110,7 @@ public Builder readFrom(final ShareVideo model) {
                     .setLocalUrl(model.getLocalUrl());
         }
 
-        @Override
-        public Builder readFrom(final Parcel parcel) {
+        Builder readFrom(final Parcel parcel) {
             return this.readFrom(
                     (ShareVideo) parcel.readParcelable(ShareVideo.class.getClassLoader()));
         }
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareVideoContent.java b/facebook/src/main/java/com/facebook/share/model/ShareVideoContent.java
index 24b510210..ed82b3fb3 100644
--- a/facebook/src/main/java/com/facebook/share/model/ShareVideoContent.java
+++ b/facebook/src/main/java/com/facebook/share/model/ShareVideoContent.java
@@ -193,12 +193,5 @@ public Builder readFrom(final ShareVideoContent model) {
                     .setVideo(model.getVideo())
                     ;
         }
-
-        @Override
-        public Builder readFrom(final Parcel parcel) {
-            return this.readFrom((ShareVideoContent)parcel.readParcelable(
-                    ShareVideoContent.class.getClassLoader()));
-        }
-
     }
 }
diff --git a/facebook/src/main/java/com/facebook/share/widget/AppInviteDialog.java b/facebook/src/main/java/com/facebook/share/widget/AppInviteDialog.java
index c91d0f876..3266093e0 100644
--- a/facebook/src/main/java/com/facebook/share/widget/AppInviteDialog.java
+++ b/facebook/src/main/java/com/facebook/share/widget/AppInviteDialog.java
@@ -22,9 +22,9 @@
 
 import android.app.Activity;
 import android.content.Intent;
-import android.os.Build;
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
+import android.text.TextUtils;
 import android.util.Log;
 
 import com.facebook.FacebookCallback;
@@ -32,6 +32,9 @@
 import com.facebook.share.internal.*;
 import com.facebook.share.model.AppInviteContent;
 
+import org.json.JSONException;
+import org.json.JSONObject;
+
 import java.util.ArrayList;
 import java.util.List;
 
@@ -215,7 +218,7 @@ protected AppCall createBaseAppCall() {
 
     private class NativeHandler extends ModeHandler {
         @Override
-        public boolean canShow(AppInviteContent content) {
+        public boolean canShow(AppInviteContent content, boolean isBestEffort) {
             return AppInviteDialog.canShowNativeDialog();
         }
 
@@ -248,7 +251,7 @@ public Bundle getLegacyParameters() {
 
     private class WebFallbackHandler extends ModeHandler {
         @Override
-        public boolean canShow(final AppInviteContent content) {
+        public boolean canShow(final AppInviteContent content, boolean isBestEffort) {
             return AppInviteDialog.canShowWebFallback();
         }
 
@@ -271,9 +274,32 @@ private static DialogFeature getFeature() {
 
     private static Bundle createParameters(final AppInviteContent content) {
         Bundle params = new Bundle();
-
         params.putString(ShareConstants.APPLINK_URL, content.getApplinkUrl());
         params.putString(ShareConstants.PREVIEW_IMAGE_URL, content.getPreviewImageUrl());
+        params.putString(
+                ShareConstants.DESTINATION,
+                content.getDestination().toString()
+        );
+
+        String promoCode = content.getPromotionCode();
+        promoCode = promoCode != null ? promoCode : "";
+        String promoText = content.getPromotionText();
+
+        if (!TextUtils.isEmpty(promoText)) {
+            // Encode deeplink context as json array.
+            try {
+                JSONObject deeplinkContent = new JSONObject();
+                deeplinkContent.put(ShareConstants.PROMO_CODE, promoCode);
+                deeplinkContent.put(ShareConstants.PROMO_TEXT, promoText);
+
+                params.putString(ShareConstants.DEEPLINK_CONTEXT, deeplinkContent.toString());
+                params.putString(ShareConstants.PROMO_CODE, promoCode);
+                params.putString(ShareConstants.PROMO_TEXT, promoText);
+            } catch (JSONException e) {
+                Log.e(TAG, "Json Exception in creating deeplink context");
+                // Ignore it since this is optional.
+            }
+        }
 
         return params;
     }
diff --git a/facebook/src/main/java/com/facebook/share/widget/CreateAppGroupDialog.java b/facebook/src/main/java/com/facebook/share/widget/CreateAppGroupDialog.java
index cb81ac534..b5b0e99c4 100644
--- a/facebook/src/main/java/com/facebook/share/widget/CreateAppGroupDialog.java
+++ b/facebook/src/main/java/com/facebook/share/widget/CreateAppGroupDialog.java
@@ -40,8 +40,11 @@
 import java.util.List;
 
 /**
- * A dialog for creating app groups
+ * @deprecated
+ * App and game groups are being deprecated. See
+ * https://developers.facebook.com/docs/games/services/game-groups for more information.
  */
+@Deprecated
 public class CreateAppGroupDialog
         extends FacebookDialogBase<AppGroupCreationContent, CreateAppGroupDialog.Result> {
 
@@ -51,8 +54,11 @@
             CallbackManagerImpl.RequestCodeOffset.AppGroupCreate.toRequestCode();
 
     /**
-     * Helper object for handling the result from a create app group dialog.
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public static final class Result {
         private final String id;
 
@@ -70,21 +76,21 @@ public String getId() {
     }
 
     /**
-     * Indicates whether the create app group dialog can be shown.
-     *
-     * @return true if the dialog can be shown
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public static boolean canShow() {
         return true;
     }
 
     /**
-     * Shows an {@link CreateAppGroupDialog} to create a group with the passed in content, using
-     * the passed in activity. No callback will be invoked.
-     *
-     * @param activity Activity hosting the dialog
-     * @param appGroupCreationContent Content describing the group to be created
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public static void show(
             final Activity activity,
             final AppGroupCreationContent appGroupCreationContent) {
@@ -92,12 +98,11 @@ public static void show(
     }
 
     /**
-     * Shows an {@link CreateAppGroupDialog} to create a group with the passed in content, using
-     * the passed in fragment. No callback will be invoked.
-     *
-     * @param fragment android.support.v4.app.Fragment hosting the dialog
-     * @param appGroupCreationContent Content describing the group to be created
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public static void show(
             final Fragment fragment,
             AppGroupCreationContent appGroupCreationContent) {
@@ -105,12 +110,11 @@ public static void show(
     }
 
     /**
-     * Shows an {@link CreateAppGroupDialog} to create a group with the passed in content, using
-     * the passed in fragment. No callback will be invoked.
-     *
-     * @param fragment android.app.Fragment hosting the dialog
-     * @param appGroupCreationContent Content describing the group to be created
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public static void show(
             final android.app.Fragment fragment,
             AppGroupCreationContent appGroupCreationContent) {
@@ -124,25 +128,31 @@ private static void show(
     }
 
     /**
-     * Constructs a new CreateAppGroupDialog.
-     * @param activity Activity hosting the dialog.
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public CreateAppGroupDialog(final Activity activity) {
         super(activity, DEFAULT_REQUEST_CODE);
     }
 
     /**
-     * Constructs a new CreateAppGroupDialog.
-     * @param fragment android.support.v4.app.Fragment hosting the dialog.
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public CreateAppGroupDialog(final Fragment fragment) {
         this(new FragmentWrapper(fragment));
     }
 
     /**
-     * Constructs a new CreateAppGroupDialog.
-     * @param fragment android.app.Fragment hosting the dialog.
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public CreateAppGroupDialog(final android.app.Fragment fragment) {
         this(new FragmentWrapper(fragment));
     }
@@ -193,7 +203,7 @@ protected AppCall createBaseAppCall() {
 
     private class WebHandler extends ModeHandler {
         @Override
-        public boolean canShow(final AppGroupCreationContent content) {
+        public boolean canShow(final AppGroupCreationContent content, boolean isBestEffort) {
             return true;
         }
 
diff --git a/facebook/src/main/java/com/facebook/share/widget/DeviceShareButton.java b/facebook/src/main/java/com/facebook/share/widget/DeviceShareButton.java
new file mode 100644
index 000000000..67b03ffc7
--- /dev/null
+++ b/facebook/src/main/java/com/facebook/share/widget/DeviceShareButton.java
@@ -0,0 +1,204 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ * <p/>
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ * <p/>
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ * <p/>
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.share.widget;
+
+import android.content.Context;
+import android.util.AttributeSet;
+import android.view.View;
+
+import com.facebook.CallbackManager;
+import com.facebook.FacebookButtonBase;
+import com.facebook.FacebookCallback;
+import com.facebook.FacebookSdk;
+import com.facebook.R;
+import com.facebook.internal.AnalyticsEvents;
+import com.facebook.internal.CallbackManagerImpl;
+import com.facebook.share.DeviceShareDialog;
+import com.facebook.share.model.ShareContent;
+
+/**
+ * A button to share content on Facebook from a device.
+ * Tapping the receiver will invoke the {@link com.facebook.share.DeviceShareDialog} with
+ * the attached shareContent.
+ */
+public final class DeviceShareButton extends FacebookButtonBase {
+    private ShareContent shareContent;
+    private int requestCode = 0;
+    private boolean enabledExplicitlySet = false;
+    private DeviceShareDialog dialog = null;
+
+    /*
+     * Constructs a new DeviceShareButton instance.
+     */
+    public DeviceShareButton(final Context context) {
+        this(context, null, 0);
+    }
+    /*
+     * Constructs a new DeviceShareButton instance.
+     */
+    public DeviceShareButton(final Context context, final AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+    /*
+     * Constructs a new DeviceShareButton instance.
+     */
+    private DeviceShareButton(
+            final Context context,
+            final AttributeSet attrs,
+            final int defStyleAttr) {
+        super(
+                context,
+                attrs,
+                defStyleAttr,
+                0,
+                AnalyticsEvents.EVENT_DEVICE_SHARE_BUTTON_CREATE,
+                AnalyticsEvents.EVENT_DEVICE_SHARE_BUTTON_DID_TAP);
+        requestCode = isInEditMode() ? 0 : getDefaultRequestCode();
+        internalSetEnabled(false);
+    }
+
+    /**
+     * Returns the share content from the button.
+     * @return The share content.
+     */
+    public ShareContent getShareContent() {
+        return this.shareContent;
+    }
+
+    /**
+     * Sets the share content on the button.
+     * @param shareContent The share content.
+     */
+    public void setShareContent(final ShareContent shareContent) {
+        this.shareContent = shareContent;
+        if (!enabledExplicitlySet) {
+            internalSetEnabled(canShare());
+        }
+    }
+
+    @Override
+    public void setEnabled(boolean enabled) {
+        super.setEnabled(enabled);
+        enabledExplicitlySet = true;
+    }
+
+    public int getRequestCode() {
+        return requestCode;
+    }
+
+    /**
+     * Allows registration of a callback for when the share completes. This should be called
+     * in the {@link android.app.Activity#onCreate(android.os.Bundle)} or
+     * {@link android.support.v4.app.Fragment#onCreate(android.os.Bundle)} methods.
+     *
+     * @param callbackManager The {@link com.facebook.CallbackManager} instance that will be
+     *          handling results that are received via
+     *          {@link android.app.Activity#onActivityResult(int, int, android.content.Intent)}
+     * @param callback The callback that should be called to handle dialog completion.
+     */
+    public void registerCallback(
+            final CallbackManager callbackManager,
+            final FacebookCallback<DeviceShareDialog.Result> callback) {
+        getDialog().registerCallback(callbackManager, callback);
+    }
+
+    /**
+     * Allows registration of a callback for when the share completes. This should be called
+     * in the {@link android.app.Activity#onCreate(android.os.Bundle)} or
+     * {@link android.support.v4.app.Fragment#onCreate(android.os.Bundle)} methods.
+     *
+     * @param callbackManager The {@link com.facebook.CallbackManager} instance that will be
+     *          handling results that are received via
+     *          {@link android.app.Activity#onActivityResult(int, int, android.content.Intent)}
+     * @param callback The callback that should be called to handle dialog completion.
+     * @param requestCode  The request code to use, this should be outside of the range of those
+     *                     reserved for the Facebook SDK
+     *                     {@link com.facebook.FacebookSdk#isFacebookRequestCode(int)}.
+     */
+    public void registerCallback(
+            final CallbackManager callbackManager,
+            final FacebookCallback<DeviceShareDialog.Result> callback,
+            final int requestCode) {
+        setRequestCode(requestCode);
+        getDialog().registerCallback(callbackManager, callback, requestCode);
+    }
+
+    @Override
+    protected void configureButton(
+            final Context context,
+            final AttributeSet attrs,
+            final int defStyleAttr,
+            final int defStyleRes) {
+        super.configureButton(context, attrs, defStyleAttr, defStyleRes);
+        setInternalOnClickListener(this.getShareOnClickListener());
+    }
+
+    @Override
+    protected int getDefaultStyleResource() {
+        return R.style.com_facebook_button_share;
+    }
+
+    @Override
+    protected int getDefaultRequestCode() {
+        return CallbackManagerImpl.RequestCodeOffset.Share.toRequestCode();
+    }
+
+    protected OnClickListener getShareOnClickListener() {
+        return new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                callExternalOnClickListener(v);
+                getDialog().show(getShareContent());
+            }
+        };
+    }
+
+    private void internalSetEnabled(boolean enabled) {
+        setEnabled(enabled);
+        enabledExplicitlySet = false;
+    }
+
+    private void setRequestCode(final int requestCode) {
+        if (FacebookSdk.isFacebookRequestCode(requestCode)) {
+            throw new IllegalArgumentException("Request code " + requestCode +
+                    " cannot be within the range reserved by the Facebook SDK.");
+        }
+        this.requestCode = requestCode;
+    }
+
+    private boolean canShare() {
+        return new DeviceShareDialog(getActivity()).canShow(getShareContent());
+    }
+
+    private DeviceShareDialog getDialog() {
+        if (dialog != null) {
+            return dialog;
+        }
+        if (DeviceShareButton.this.getFragment() != null) {
+            dialog = new DeviceShareDialog(DeviceShareButton.this.getFragment());
+        } else if (DeviceShareButton.this.getNativeFragment() != null) {
+            dialog = new DeviceShareDialog(DeviceShareButton.this.getNativeFragment());
+        } else {
+            dialog = new DeviceShareDialog(getActivity());
+        }
+        return dialog;
+    }
+}
diff --git a/facebook/src/main/java/com/facebook/share/widget/GameRequestDialog.java b/facebook/src/main/java/com/facebook/share/widget/GameRequestDialog.java
index b9a80af90..94c06c3c1 100644
--- a/facebook/src/main/java/com/facebook/share/widget/GameRequestDialog.java
+++ b/facebook/src/main/java/com/facebook/share/widget/GameRequestDialog.java
@@ -215,7 +215,7 @@ protected AppCall createBaseAppCall() {
 
     private class WebHandler extends ModeHandler {
         @Override
-        public boolean canShow(final GameRequestContent content) {
+        public boolean canShow(final GameRequestContent content, boolean isBestEffort) {
             return true;
         }
 
diff --git a/facebook/src/main/java/com/facebook/share/widget/JoinAppGroupDialog.java b/facebook/src/main/java/com/facebook/share/widget/JoinAppGroupDialog.java
index 8c48dc0fc..00298627f 100644
--- a/facebook/src/main/java/com/facebook/share/widget/JoinAppGroupDialog.java
+++ b/facebook/src/main/java/com/facebook/share/widget/JoinAppGroupDialog.java
@@ -26,7 +26,6 @@
 import android.support.v4.app.Fragment;
 
 import com.facebook.FacebookCallback;
-import com.facebook.FacebookException;
 import com.facebook.internal.AppCall;
 import com.facebook.internal.CallbackManagerImpl;
 import com.facebook.internal.DialogPresenter;
@@ -40,8 +39,11 @@
 import java.util.List;
 
 /**
- * A dialog for joining app groups
+ * @deprecated
+ * App and game groups are being deprecated. See
+ * https://developers.facebook.com/docs/games/services/game-groups for more information.
  */
+@Deprecated
 public class JoinAppGroupDialog extends FacebookDialogBase<String, JoinAppGroupDialog.Result> {
 
     private static final String JOIN_GAME_GROUP_DIALOG = "game_group_join";
@@ -50,8 +52,11 @@
             CallbackManagerImpl.RequestCodeOffset.AppGroupJoin.toRequestCode();
 
     /**
-     * Helper object for handling the result from a join app group dialog.
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public static final class Result {
         private final Bundle data;
 
@@ -69,21 +74,21 @@ public Bundle getData() {
     }
 
     /**
-     * Indicates whether the join app group dialog can be shown.
-     *
-     * @return true if the dialog can be shown
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public static boolean canShow() {
         return true;
     }
 
     /**
-     * Shows an {@link JoinAppGroupDialog} to join a group with the passed in Id, using
-     * the passed in activity. No callback will be invoked.
-     *
-     * @param activity Activity hosting the dialog
-     * @param groupId Id of the group to join
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public static void show(
             final Activity activity,
             final String groupId) {
@@ -91,12 +96,11 @@ public static void show(
     }
 
     /**
-     * Shows an {@link JoinAppGroupDialog} to join a group with the passed in Id, using
-     * the passed in fragment. No callback will be invoked.
-     *
-     * @param fragment android.support.v4.app.Fragment hosting the dialog
-     * @param groupId Id of the group to join
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public static void show(
             final Fragment fragment,
             final String groupId) {
@@ -104,12 +108,11 @@ public static void show(
     }
 
     /**
-     * Shows an {@link JoinAppGroupDialog} to join a group with the passed in Id, using
-     * the passed in fragment. No callback will be invoked.
-     *
-     * @param fragment android.app.Fragment hosting the dialog
-     * @param groupId Id of the group to join
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public static void show(
             final android.app.Fragment fragment,
             final String groupId) {
@@ -123,25 +126,31 @@ private static void show(
     }
 
     /**
-     * Constructs a JoinAppGroupDialog.
-     * @param activity Activity hosting the dialog.
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public JoinAppGroupDialog(final Activity activity) {
         super(activity, DEFAULT_REQUEST_CODE);
     }
 
     /**
-     * Constructs a JoinAppGroupDialog.
-     * @param fragment android.support.v4.app.Fragment hosting the dialog.
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public JoinAppGroupDialog(final Fragment fragment) {
         this(new FragmentWrapper(fragment));
     }
 
     /**
-     * Constructs a JoinAppGroupDialog.
-     * @param fragment android.app.Fragment hosting the dialog.
+     * @deprecated
+     * App and game groups are being deprecated. See
+     * https://developers.facebook.com/docs/games/services/game-groups for more information.
      */
+    @Deprecated
     public JoinAppGroupDialog(final android.app.Fragment fragment) {
         this(new FragmentWrapper(fragment));
     }
@@ -192,7 +201,7 @@ protected AppCall createBaseAppCall() {
 
     private class WebHandler extends ModeHandler {
         @Override
-        public boolean canShow(final String content) {
+        public boolean canShow(final String content, boolean isBestEffort) {
             return true;
         }
 
diff --git a/facebook/src/main/java/com/facebook/share/widget/MessageDialog.java b/facebook/src/main/java/com/facebook/share/widget/MessageDialog.java
index f6114ab49..03abaabd0 100644
--- a/facebook/src/main/java/com/facebook/share/widget/MessageDialog.java
+++ b/facebook/src/main/java/com/facebook/share/widget/MessageDialog.java
@@ -202,7 +202,7 @@ protected AppCall createBaseAppCall() {
 
     private class NativeHandler extends ModeHandler {
         @Override
-        public boolean canShow(final ShareContent shareContent) {
+        public boolean canShow(final ShareContent shareContent, boolean isBestEffort) {
             return shareContent != null && MessageDialog.canShow(shareContent.getClass());
         }
 
@@ -212,7 +212,6 @@ public AppCall createAppCall(final ShareContent content) {
 
             final AppCall appCall = createBaseAppCall();
             final boolean shouldFailOnDataError = getShouldFailOnDataError();
-            final Activity activity = getActivityContext();
 
             DialogPresenter.setupAppCallForNativeDialog(
                     appCall,
diff --git a/facebook/src/main/java/com/facebook/share/widget/SendButton.java b/facebook/src/main/java/com/facebook/share/widget/SendButton.java
index 068d9ebc6..a85330561 100644
--- a/facebook/src/main/java/com/facebook/share/widget/SendButton.java
+++ b/facebook/src/main/java/com/facebook/share/widget/SendButton.java
@@ -22,7 +22,6 @@
 
 import android.content.Context;
 import android.util.AttributeSet;
-import android.view.View;
 
 import com.facebook.R;
 import com.facebook.internal.AnalyticsEvents;
diff --git a/facebook/src/main/java/com/facebook/share/widget/ShareButton.java b/facebook/src/main/java/com/facebook/share/widget/ShareButton.java
index 2c5835150..810218227 100644
--- a/facebook/src/main/java/com/facebook/share/widget/ShareButton.java
+++ b/facebook/src/main/java/com/facebook/share/widget/ShareButton.java
@@ -22,7 +22,6 @@
 
 import android.content.Context;
 import android.util.AttributeSet;
-import android.view.View;
 
 import com.facebook.R;
 import com.facebook.internal.AnalyticsEvents;
diff --git a/facebook/src/main/java/com/facebook/share/widget/ShareDialog.java b/facebook/src/main/java/com/facebook/share/widget/ShareDialog.java
index 8180c5e8f..0ad84e399 100644
--- a/facebook/src/main/java/com/facebook/share/widget/ShareDialog.java
+++ b/facebook/src/main/java/com/facebook/share/widget/ShareDialog.java
@@ -22,9 +22,12 @@
 
 import android.app.Activity;
 import android.content.Context;
+import android.graphics.Bitmap;
+import android.net.Uri;
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
 
+import com.facebook.AccessToken;
 import com.facebook.FacebookCallback;
 import com.facebook.appevents.AppEventsLogger;
 import com.facebook.internal.AnalyticsEvents;
@@ -34,19 +37,28 @@
 import com.facebook.internal.DialogPresenter;
 import com.facebook.internal.FacebookDialogBase;
 import com.facebook.internal.FragmentWrapper;
-import com.facebook.share.internal.ShareFeedContent;
+import com.facebook.internal.NativeAppCallAttachmentStore;
+import com.facebook.internal.Utility;
 import com.facebook.share.Sharer;
 import com.facebook.share.internal.LegacyNativeDialogParameters;
 import com.facebook.share.internal.NativeDialogParameters;
 import com.facebook.share.internal.OpenGraphActionDialogFeature;
 import com.facebook.share.internal.ShareContentValidation;
 import com.facebook.share.internal.ShareDialogFeature;
+import com.facebook.share.internal.ShareFeedContent;
 import com.facebook.share.internal.ShareInternalUtility;
 import com.facebook.share.internal.WebDialogParameters;
-import com.facebook.share.model.*;
+import com.facebook.share.model.ShareContent;
+import com.facebook.share.model.ShareLinkContent;
+import com.facebook.share.model.ShareMediaContent;
+import com.facebook.share.model.ShareOpenGraphContent;
+import com.facebook.share.model.SharePhoto;
+import com.facebook.share.model.SharePhotoContent;
+import com.facebook.share.model.ShareVideoContent;
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.UUID;
 
 /**
  * Provides functionality to share content via the Facebook Share Dialog
@@ -78,7 +90,7 @@
     }
 
     private static final String FEED_DIALOG = "feed";
-    private static final String WEB_SHARE_DIALOG = "share";
+    public static final String WEB_SHARE_DIALOG = "share";
     private static final String WEB_OG_SHARE_DIALOG = "share_open_graph";
 
     private static final int DEFAULT_REQUEST_CODE =
@@ -157,8 +169,14 @@ private static boolean canShowWebTypeCheck(Class<? extends ShareContent> content
         // The instance method version of this check is more accurate and should be used on
         // ShareDialog instances.
 
+        // SharePhotoContent currently requires the user staging endpoint, so we need a user access
+        // token, so we need to see if we have one
+        final AccessToken accessToken = AccessToken.getCurrentAccessToken();
+        final boolean haveUserAccessToken = accessToken != null && !accessToken.isExpired();
+
         return ShareLinkContent.class.isAssignableFrom(contentType)
-                || ShareOpenGraphContent.class.isAssignableFrom(contentType);
+                || ShareOpenGraphContent.class.isAssignableFrom(contentType)
+                || (SharePhotoContent.class.isAssignableFrom(contentType) && haveUserAccessToken);
     }
 
     /**
@@ -277,8 +295,29 @@ public Object getMode() {
         }
 
         @Override
-        public boolean canShow(final ShareContent content) {
-            return content != null && ShareDialog.canShowNative(content.getClass());
+        public boolean canShow(final ShareContent content, boolean isBestEffort) {
+            if (content == null) {
+                return false;
+            }
+
+            boolean canShowResult = true;
+            if (!isBestEffort) {
+                // The following features are considered best-effort and will not prevent the
+                // native share dialog from being presented, even if the installed version does
+                // not support the feature.
+                // However, to let apps pivot to a different approach or dialog (for example, Web),
+                // we need to be able to signal back when native support is lacking.
+                if (content.getShareHashtag() != null) {
+                    canShowResult = DialogPresenter.canPresentNativeDialogWithFeature(
+                            ShareDialogFeature.HASHTAG);
+                }
+                if ((content instanceof ShareLinkContent) &&
+                        (!Utility.isNullOrEmpty(((ShareLinkContent)content).getQuote()))) {
+                    canShowResult &= DialogPresenter.canPresentNativeDialogWithFeature(
+                            ShareDialogFeature.LINK_SHARE_QUOTES);
+                }
+            }
+            return canShowResult && ShareDialog.canShowNative(content.getClass());
         }
 
         @Override
@@ -322,7 +361,7 @@ public Object getMode() {
         }
 
         @Override
-        public boolean canShow(final ShareContent content) {
+        public boolean canShow(final ShareContent content, boolean isBestEffort) {
             return (content != null) && ShareDialog.canShowWebTypeCheck(content.getClass());
         }
 
@@ -337,6 +376,10 @@ public AppCall createAppCall(final ShareContent content) {
             Bundle params;
             if (content instanceof ShareLinkContent) {
                 params = WebDialogParameters.create((ShareLinkContent)content);
+            } else if (content instanceof SharePhotoContent) {
+                final SharePhotoContent photoContent =
+                        createAndMapAttachments((SharePhotoContent)content, appCall.getCallId());
+                params = WebDialogParameters.create(photoContent);
             } else {
                 params = WebDialogParameters.create((ShareOpenGraphContent)content);
             }
@@ -350,7 +393,8 @@ public AppCall createAppCall(final ShareContent content) {
         }
 
         private String getActionName(ShareContent shareContent) {
-            if (shareContent instanceof ShareLinkContent) {
+            if (shareContent instanceof ShareLinkContent
+                    || shareContent instanceof SharePhotoContent) {
                 return WEB_SHARE_DIALOG;
             } else if (shareContent instanceof ShareOpenGraphContent) {
                 return WEB_OG_SHARE_DIALOG;
@@ -358,6 +402,35 @@ private String getActionName(ShareContent shareContent) {
 
             return null;
         }
+
+        private SharePhotoContent createAndMapAttachments(
+                final SharePhotoContent content,
+                final UUID callId) {
+            final SharePhotoContent.Builder contentBuilder =
+                    new SharePhotoContent.Builder().readFrom(content);
+            final List<SharePhoto> photos = new ArrayList<>();
+            final List<NativeAppCallAttachmentStore.Attachment> attachments = new ArrayList<>();
+            for (int i = 0; i < content.getPhotos().size(); i++) {
+                SharePhoto sharePhoto = content.getPhotos().get(i);
+                final Bitmap photoBitmap = sharePhoto.getBitmap();
+
+                if (photoBitmap != null) {
+                    NativeAppCallAttachmentStore.Attachment attachment =
+                            NativeAppCallAttachmentStore.createAttachment(callId, photoBitmap);
+                    sharePhoto = new SharePhoto.Builder()
+                            .readFrom(sharePhoto)
+                            .setImageUrl(Uri.parse(attachment.getAttachmentUrl()))
+                            .setBitmap(null)
+                            .build();
+                    attachments.add(attachment);
+                }
+
+                photos.add(sharePhoto);
+            }
+            contentBuilder.setPhotos(photos);
+            NativeAppCallAttachmentStore.addAttachments(attachments);
+            return contentBuilder.build();
+        }
     }
 
     private class FeedHandler extends ModeHandler {
@@ -367,7 +440,7 @@ public Object getMode() {
         }
 
         @Override
-        public boolean canShow(final ShareContent content) {
+        public boolean canShow(final ShareContent content, boolean isBestEffort) {
             return (content instanceof ShareLinkContent)
                     || (content instanceof ShareFeedContent);
         }
@@ -405,6 +478,8 @@ private static DialogFeature getFeature(
             return ShareDialogFeature.VIDEO;
         } else if (ShareOpenGraphContent.class.isAssignableFrom(contentType)) {
             return OpenGraphActionDialogFeature.OG_ACTION_DIALOG;
+        } else if (ShareMediaContent.class.isAssignableFrom(contentType)) {
+            return ShareDialogFeature.MULTIMEDIA;
         }
         return null;
     }
diff --git a/facebook/src/main/res/drawable-hdpi/com_facebook_close.png b/facebook/src/main/res/drawable-hdpi/com_facebook_close.png
index d81f040d7..b60be9c27 100644
Binary files a/facebook/src/main/res/drawable-hdpi/com_facebook_close.png and b/facebook/src/main/res/drawable-hdpi/com_facebook_close.png differ
diff --git a/facebook/src/main/res/drawable-hdpi/com_facebook_favicon_white.png b/facebook/src/main/res/drawable-hdpi/com_facebook_favicon_white.png
deleted file mode 100644
index 3042a7bb2..000000000
Binary files a/facebook/src/main/res/drawable-hdpi/com_facebook_favicon_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-mdpi/com_facebook_favicon_white.png b/facebook/src/main/res/drawable-mdpi/com_facebook_favicon_white.png
deleted file mode 100644
index 72fe4b60b..000000000
Binary files a/facebook/src/main/res/drawable-mdpi/com_facebook_favicon_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xhdpi/com_facebook_close.png b/facebook/src/main/res/drawable-xhdpi/com_facebook_close.png
index b603ef892..2597da9fd 100755
Binary files a/facebook/src/main/res/drawable-xhdpi/com_facebook_close.png and b/facebook/src/main/res/drawable-xhdpi/com_facebook_close.png differ
diff --git a/facebook/src/main/res/drawable-xhdpi/com_facebook_favicon_white.png b/facebook/src/main/res/drawable-xhdpi/com_facebook_favicon_white.png
deleted file mode 100644
index ce5c8909f..000000000
Binary files a/facebook/src/main/res/drawable-xhdpi/com_facebook_favicon_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable-xxhdpi/com_facebook_favicon_white.png b/facebook/src/main/res/drawable-xxhdpi/com_facebook_favicon_white.png
deleted file mode 100644
index 82fd70fae..000000000
Binary files a/facebook/src/main/res/drawable-xxhdpi/com_facebook_favicon_white.png and /dev/null differ
diff --git a/facebook/src/main/res/drawable/com_facebook_auth_dialog_background.xml b/facebook/src/main/res/drawable/com_facebook_auth_dialog_background.xml
index 2088e1b1c..77fd0a910 100644
--- a/facebook/src/main/res/drawable/com_facebook_auth_dialog_background.xml
+++ b/facebook/src/main/res/drawable/com_facebook_auth_dialog_background.xml
@@ -20,7 +20,7 @@
 -->
 
 <shape xmlns:android="http://schemas.android.com/apk/res/android">
-    <solid android:color="#f2fafafa" />
+    <solid android:color="@android:color/white" />
     <corners
         android:bottomLeftRadius="@dimen/com_facebook_auth_dialog_corner_radius"
         android:bottomRightRadius="@dimen/com_facebook_auth_dialog_corner_radius"
diff --git a/facebook/src/main/res/drawable/com_facebook_auth_dialog_header_background.xml b/facebook/src/main/res/drawable/com_facebook_auth_dialog_header_background.xml
index 3321bf82c..66cd5cff4 100644
--- a/facebook/src/main/res/drawable/com_facebook_auth_dialog_header_background.xml
+++ b/facebook/src/main/res/drawable/com_facebook_auth_dialog_header_background.xml
@@ -20,7 +20,7 @@
 -->
 
 <shape xmlns:android="http://schemas.android.com/apk/res/android">
-    <solid android:color="@color/com_facebook_blue" />
+    <solid android:color="#fffafafa" />
     <corners
         android:bottomLeftRadius="0dp"
         android:bottomRightRadius="0dp"
diff --git a/facebook/src/main/res/drawable/com_facebook_button_login_background.xml b/facebook/src/main/res/drawable/com_facebook_button_login_background.xml
new file mode 100644
index 000000000..2735fba16
--- /dev/null
+++ b/facebook/src/main/res/drawable/com_facebook_button_login_background.xml
@@ -0,0 +1,58 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_enabled="false" android:state_focused="true">
+        <shape android:shape="rectangle">
+            <corners android:radius="@dimen/com_facebook_button_login_corner_radius" />
+            <solid android:color="@color/com_facebook_button_background_color_focused_disabled" />
+        </shape>
+    </item>
+    <item android:state_enabled="false" android:state_focused="false">
+        <shape android:shape="rectangle">
+            <corners android:radius="@dimen/com_facebook_button_login_corner_radius" />
+            <solid android:color="@color/com_facebook_button_background_color_disabled" />
+        </shape>
+    </item>
+    <item android:state_focused="true">
+        <shape android:shape="rectangle">
+            <corners android:radius="@dimen/com_facebook_button_login_corner_radius" />
+            <solid android:color="@color/com_facebook_button_background_color_focused" />
+            <stroke
+                android:width="1dp"
+                android:color="@color/com_facebook_button_border_color_focused"
+                >
+            </stroke>
+        </shape>
+    </item>
+    <item android:state_pressed="true">
+        <shape android:shape="rectangle">
+            <corners android:radius="@dimen/com_facebook_button_login_corner_radius" />
+            <solid android:color="@color/com_facebook_button_background_color_pressed" />
+        </shape>
+    </item>
+    <item>
+        <shape android:shape="rectangle">
+            <corners android:radius="@dimen/com_facebook_button_login_corner_radius" />
+            <solid android:color="@color/com_facebook_button_login_background_color" />
+        </shape>
+    </item>
+</selector>
diff --git a/facebook/src/main/res/drawable/com_facebook_button_login_logo.xml b/facebook/src/main/res/drawable/com_facebook_button_login_logo.xml
new file mode 100644
index 000000000..4a528aae0
--- /dev/null
+++ b/facebook/src/main/res/drawable/com_facebook_button_login_logo.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<vector
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:height="16dp"
+    android:viewportHeight="22.0"
+    android:viewportWidth="22.0"
+    android:width="16dp"
+    >
+    <path
+        android:fillColor="#FFFFFF"
+        android:pathData="M20,0H2C0.895,0 0,0.896 0,2v18c0,1.105 0.895,2 2,
+            2h9.96v-8.662H9.01V9.962h2.95v-2.49c0,-2.888 1.785,-4.46 4.393,-4.46 1.25,
+            0 2.323,0.09 2.637,0.13v3.02l-1.81,0.002c-1.418,0 -1.693,0.666 -1.693,
+            1.643v2.155h3.383l-0.44,3.376h-2.943V22H20c1.105,0 2,-0.895 2,-2V2c0,
+            -1.104 -0.895,-2 -2,-2"
+    />
+</vector>
diff --git a/facebook/src/main/res/drawable/com_facebook_favicon_blue.xml b/facebook/src/main/res/drawable/com_facebook_favicon_blue.xml
new file mode 100644
index 000000000..2f5ed129a
--- /dev/null
+++ b/facebook/src/main/res/drawable/com_facebook_favicon_blue.xml
@@ -0,0 +1,27 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<vector android:height="14dp"
+    android:viewportHeight="22.0"
+    android:viewportWidth="22.0"
+    android:width="14dp"
+    xmlns:android="http://schemas.android.com/apk/res/android">
+    <path android:fillColor="#3c6399" android:pathData="M20,0H2C0.895,0 0,0.896 0,2v18c0,1.105 0.895,2 2,2h9.96v-8.662H9.01V9.962h2.95v-2.49c0,-2.888 1.785,-4.46 4.393,-4.46 1.25,0 2.323,0.09 2.637,0.13v3.02l-1.81,0.002c-1.418,0 -1.693,0.666 -1.693,1.643v2.155h3.383l-0.44,3.376h-2.943V22H20c1.105,0 2,-0.895 2,-2V2c0,-1.104 -0.895,-2 -2,-2"/>
+</vector>
diff --git a/facebook/src/main/res/layout/com_facebook_device_auth_dialog_fragment.xml b/facebook/src/main/res/layout/com_facebook_device_auth_dialog_fragment.xml
index 6595897e1..3acc823e0 100644
--- a/facebook/src/main/res/layout/com_facebook_device_auth_dialog_fragment.xml
+++ b/facebook/src/main/res/layout/com_facebook_device_auth_dialog_fragment.xml
@@ -20,21 +20,21 @@
 -->
 
 <android.support.v7.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:card_view="http://schemas.android.com/apk/res-auto"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
     android:layout_width="wrap_content"
     android:layout_height="wrap_content"
-    card_view:cardBackgroundColor="@android:color/transparent"
-    card_view:cardElevation="10dp">
+    app:cardBackgroundColor="@android:color/transparent"
+    app:cardElevation="10dp">
 
     <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-        android:layout_width="wrap_content"
+        android:layout_width="300dp"
         android:layout_height="wrap_content"
         android:background="@drawable/com_facebook_auth_dialog_background"
         android:orientation="vertical">
 
         <RelativeLayout
-            android:layout_width="300dp"
-            android:layout_height="wrap_content"
+            android:layout_width="match_parent"
+            android:layout_height="100dp"
             android:background="@drawable/com_facebook_auth_dialog_header_background"
             android:orientation="horizontal">
 
@@ -42,7 +42,7 @@
                 android:layout_width="match_parent"
                 android:layout_height="wrap_content">
 
-                <ImageView
+                <android.support.v7.widget.AppCompatImageView
                     android:layout_width="18dp"
                     android:layout_height="18dp"
                     android:layout_marginBottom="11dp"
@@ -50,55 +50,23 @@
                     android:layout_marginTop="11dp"
                     android:adjustViewBounds="false"
                     android:scaleType="fitXY"
-                    android:src="@drawable/com_facebook_favicon_white" />
+                    app:srcCompat="@drawable/com_facebook_favicon_blue" />
             </FrameLayout>
 
             <TextView
-                android:id="@+id/textView"
+                android:id="@+id/confirmation_code"
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
                 android:layout_centerInParent="true"
-                android:fontFamily="sans-serif-light"
+                android:fontFamily="roboto_condensed"
                 android:gravity="center"
-                android:text="@string/com_facebook_loginview_log_in_button_long"
-                android:textColor="@color/com_facebook_share_button_text_color"
-                android:textSize="13sp"
-                android:typeface="sans" />
-
-        </RelativeLayout>
-
-        <TextView
-            android:id="@+id/com_facebook_device_auth_instructions"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="28dp"
-            android:fontFamily="sans-serif-light"
-            android:gravity="center_horizontal"
-            android:singleLine="false"
-            android:textColor="@color/com_facebook_device_auth_text"
-            android:textSize="14sp"
-            android:typeface="sans" />
-
-        <RelativeLayout
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center_horizontal"
-            android:layout_marginTop="14dp">
-
-            <TextView
-                android:id="@+id/confirmation_code"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_gravity="center_horizontal"
-                android:fontFamily="sans-serif-light"
-                android:textColor="@color/com_facebook_device_auth_text"
-                android:textSize="23sp"
+                android:textColor="@color/com_facebook_blue"
+                android:textSize="30sp"
                 android:typeface="sans"
                 android:visibility="invisible" />
 
             <ProgressBar
                 android:id="@+id/progress_bar"
-                style="@android:style/Widget.Holo.Light.ProgressBar"
                 android:layout_width="wrap_content"
                 android:layout_height="0dp"
                 android:layout_alignBottom="@+id/confirmation_code"
@@ -106,13 +74,28 @@
                 android:layout_centerHorizontal="true"
                 android:layout_centerInParent="true"
                 android:layout_centerVertical="true" />
+
         </RelativeLayout>
 
+        <TextView
+            android:id="@+id/com_facebook_device_auth_instructions"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginEnd="16dp"
+            android:layout_marginStart="16dp"
+            android:layout_marginTop="20dp"
+            android:fontFamily="roboto_condensed"
+            android:gravity="center_horizontal"
+            android:singleLine="false"
+            android:textColor="@color/com_facebook_device_auth_text"
+            android:textSize="12sp"
+            android:typeface="sans" />
+
         <FrameLayout
             android:layout_width="match_parent"
-            android:layout_height="match_parent"
-            android:layout_marginBottom="14dp"
-            android:layout_marginTop="17dp">
+            android:layout_height="wrap_content"
+            android:layout_marginBottom="17dp"
+            android:layout_marginTop="14dp">
 
             <Button
                 android:id="@+id/cancel_button"
@@ -122,7 +105,7 @@
                 android:background="@drawable/com_facebook_auth_dialog_cancel_background"
                 android:clickable="true"
                 android:focusable="true"
-                android:fontFamily="sans-serif-medium"
+                android:fontFamily="roboto_condensed"
                 android:text="@android:string/cancel"
                 android:textAllCaps="true"
                 android:textColor="@color/com_facebook_device_auth_text"
diff --git a/facebook/src/main/res/layout/com_facebook_smart_device_dialog_fragment.xml b/facebook/src/main/res/layout/com_facebook_smart_device_dialog_fragment.xml
new file mode 100644
index 000000000..3dae4019d
--- /dev/null
+++ b/facebook/src/main/res/layout/com_facebook_smart_device_dialog_fragment.xml
@@ -0,0 +1,138 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<android.support.v7.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    app:cardBackgroundColor="@android:color/transparent"
+    app:cardElevation="10dp">
+
+    <LinearLayout
+        android:layout_width="600dp"
+        android:layout_height="wrap_content"
+        android:background="@drawable/com_facebook_auth_dialog_background"
+        android:orientation="vertical"
+        android:gravity="center_horizontal"
+        >
+
+        <RelativeLayout
+            android:layout_width="match_parent"
+            android:layout_height="110dp"
+            android:background="@drawable/com_facebook_auth_dialog_header_background"
+            android:orientation="horizontal">
+
+            <FrameLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content">
+
+                <android.support.v7.widget.AppCompatImageView
+                    android:layout_width="18dp"
+                    android:layout_height="18dp"
+                    android:layout_marginBottom="11dp"
+                    android:layout_marginStart="12dp"
+                    android:layout_marginLeft="12dp"
+                    android:layout_marginTop="11dp"
+                    android:adjustViewBounds="false"
+                    android:scaleType="fitXY"
+                    app:srcCompat="@drawable/com_facebook_favicon_blue" />
+            </FrameLayout>
+
+            <TextView
+                android:id="@+id/confirmation_code"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_centerInParent="true"
+                android:fontFamily="sans-serif-light"
+                android:gravity="center"
+                android:textColor="@color/com_smart_login_code"
+                android:textSize="52sp"
+                android:typeface="sans"
+                android:visibility="invisible" />
+
+            <ProgressBar
+                android:id="@+id/progress_bar"
+                android:layout_width="wrap_content"
+                android:layout_height="0dp"
+                android:layout_alignBottom="@+id/confirmation_code"
+                android:layout_alignTop="@+id/confirmation_code"
+                android:layout_centerHorizontal="true"
+                android:layout_centerInParent="true"
+                android:layout_centerVertical="true" />
+
+        </RelativeLayout>
+
+        <TextView
+            android:id="@+id/com_facebook_smart_instructions_0"
+            style="@style/com_facebook_auth_dialog_instructions_textview"
+            android:layout_marginTop="18dp"
+            android:layout_marginStart="90dp"
+            android:layout_marginEnd="90dp"
+            android:layout_marginLeft="90dp"
+            android:layout_marginRight="90dp"
+            android:text="@string/com_facebook_smart_device_instructions"
+            />
+
+        <TextView
+            android:id="@+id/com_facebook_smart_instructions_or"
+            style="@style/com_facebook_auth_dialog_instructions_textview"
+            android:layout_width="match_parent"
+            android:gravity="center_horizontal"
+            android:textStyle="bold"
+            android:layout_marginTop="12dp"
+            android:layout_marginStart="0dp"
+            android:layout_marginEnd="0dp"
+            android:text="@string/com_facebook_smart_device_instructions_or"
+            />
+
+        <TextView
+            android:id="@+id/com_facebook_device_auth_instructions"
+            style="@style/com_facebook_auth_dialog_instructions_textview"
+            android:layout_marginTop="12dp"
+            />
+
+        <FrameLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginBottom="17dp"
+            android:layout_marginTop="17dp"
+            >
+
+            <Button
+                android:id="@+id/cancel_button"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:minWidth="200dp"
+                android:layout_gravity="center_horizontal"
+                android:background="@drawable/com_facebook_auth_dialog_cancel_background"
+                android:clickable="true"
+                android:focusable="true"
+                android:fontFamily="sans-serif-medium"
+                android:text="@android:string/cancel"
+                android:textAllCaps="true"
+                android:textColor="@color/com_facebook_device_auth_text"
+                android:textSize="18sp"
+                android:textStyle="bold"
+                android:typeface="sans" />
+        </FrameLayout>
+
+    </LinearLayout>
+</android.support.v7.widget.CardView>
diff --git a/facebook/src/main/res/values-af/strings.xml b/facebook/src/main/res/values-af/strings.xml
index 0043107da..32cc26472 100644
--- a/facebook/src/main/res/values-af/strings.xml
+++ b/facebook/src/main/res/values-af/strings.xml
@@ -1,41 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: af_ZA -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Hou van</string>
-    <string name="com_facebook_like_button_liked">Hou van</string>
-    <string name="com_facebook_loginview_log_out_button">Meld af</string>
-    <string name="com_facebook_loginview_log_in_button">Meld aan</string>
-    <string name="com_facebook_loginview_log_in_button_long">Meld met Facebook aan</string>
-    <string name="com_facebook_loginview_logged_in_as">Aangemeld as: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Met Facebook aangemeld</string>
-    <string name="com_facebook_loginview_log_out_action">Meld af</string>
-    <string name="com_facebook_loginview_cancel_action">Kanselleer</string>
-    <string name="com_facebook_loading">Laai tans...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest-fout</string>
-    <string name="com_facebook_internet_permission_error_message">Webaansig-aanmelding benodig INTERNET-toestemming</string>
-    <string name="com_facebook_tooltip_default">Nuut! Jy is in beheer - kies watter inligting jy met toepassings wil deel.</string>
-    <string name="com_facebook_image_download_unknown_error">Onverwagse fout met aflaai van \'n
-        prent.</string>
-    <string name="com_facebook_share_button_text">Deel</string>
-    <string name="com_facebook_send_button_text">Stuur</string>
-    <string name="com_facebook_device_auth_instructions">Besoek %@ op jou slimfoon of rekenaar en voer hierdie kode in:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">Hou van</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">Hou van</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">Teken uit</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">Teken aan</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Meld aan met Facebook</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Gaan voort met Facebook</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">Aangemeld as: %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Aangemeld met Facebook</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">Teken uit</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">Kanselleer</string>
+    <string name="com_facebook_loading" gender="unknown">Laai tans …</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">AndroidManifest-fout</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">WebView-aanmelding vereis INTERNET-toestemming</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">Jy is in beheer – kies watter inligting jy met toepassings wil deel.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">Onvoorsiene fout terwyl die prent afgelaai is.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">Deel</string>
+    <string name="com_facebook_send_button_text" gender="unknown">Stuur</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">Besoek &lt;b&gt;facebook.com/device&lt;/b&gt; en voer die kode wat hierbo gewys word, in.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">Maak die Facebook-toepassing op jou mobiele toestel oop en soek kennisgewings om jou rekening te koppel.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- OF -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">Bevestig aanmelding</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">Gaan voort as %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">Nie jy nie?</string>
 </resources>
diff --git a/facebook/src/main/res/values-ar/strings.xml b/facebook/src/main/res/values-ar/strings.xml
index d21abed0d..3389c2cb7 100644
--- a/facebook/src/main/res/values-ar/strings.xml
+++ b/facebook/src/main/res/values-ar/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ar_AR -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">إعجاب</string>
-    <string name="com_facebook_like_button_liked">أعجبني</string>
-    <string name="com_facebook_loginview_log_out_button">تسجيل الخروج</string>
-    <string name="com_facebook_loginview_log_in_button">تسجيل الدخول</string>
-    <string name="com_facebook_loginview_log_in_button_long">تسجيل الدخول بحساب فيسبوك</string>
-    <string name="com_facebook_loginview_logged_in_as">تم تسجيل الدخول باسم: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">تم تسجيل الدخول بحساب فيسبوك</string>
-    <string name="com_facebook_loginview_log_out_action">تسجيل الخروج</string>
-    <string name="com_facebook_loginview_cancel_action">إلغاء</string>
-    <string name="com_facebook_loading">جارٍ التحميل...</string>
-    <string name="com_facebook_internet_permission_error_title">خطأ AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">يتطلب تسجيل الدخول إلى WebView إذن الاتصال بالإنترنت</string>
-    <string name="com_facebook_tooltip_default">جديد! أنت المتحكم - اختر المعلومات التي تريد مشاركتها مع التطبيقات.</string>
-    <string name="com_facebook_image_download_unknown_error">حدث خطأ غير متوقع أثناء تنزيل صورة.</string>
-    <string name="com_facebook_share_button_text">مشاركة</string>
-    <string name="com_facebook_send_button_text">إرسال</string>
-    <string name="com_facebook_device_auth_instructions">زر %@ على هاتفك الذكي أو الكمبيوتر ثم أدخل هذا الرمز:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">أعجبني</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">أعجبك</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">تسجيل الخروج</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">تسجيل الدخول</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">تسجيل الدخول بحساب فيسبوك</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">متابعة بحساب فيسبوك</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">تم تسجيل الدخول باسم: %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">تم تسجيل الدخول باستخدام حساب فيسبوك</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">تسجيل الخروج</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">إلغاء</string>
+    <string name="com_facebook_loading" gender="unknown">جارٍ التحميل…</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">خطأ AndroidManifest</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">يتطلب تسجيل دخول WebView الحصول إلى إذن INTERNET</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">أنت المتحكم في الأمر - يمكنك اختيار المعلومات التي تود مشاركتها مع التطبيقات.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">حدث خطأ غير متوقع أثناء تنزيل صورة.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">مشاركة</string>
+    <string name="com_facebook_send_button_text" gender="unknown">إرسال</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">تفضل بزيارة &lt;b&gt;facebook.com/device&lt;/b&gt; وإدخال الرمز الموضح أعلاه.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">لربط حسابك، افتح تطبيق فيسبوك على جهازك المحمول وراجع الإشعارات.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- أو -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">تأكيد تسجيل الدخول</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">متابعة باسم %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">لست أنت؟</string>
 </resources>
diff --git a/facebook/src/main/res/values-bn/strings.xml b/facebook/src/main/res/values-bn/strings.xml
index 26a70fc1e..b6537c710 100644
--- a/facebook/src/main/res/values-bn/strings.xml
+++ b/facebook/src/main/res/values-bn/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: bn_IN -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">পছন্দ করুন</string>
-    <string name="com_facebook_like_button_liked">পছন্দ করা হয়েছে</string>
-    <string name="com_facebook_loginview_log_out_button">লগ আউট করুন</string>
-    <string name="com_facebook_loginview_log_in_button">লগ ইন করুন</string>
-    <string name="com_facebook_loginview_log_in_button_long">Facebook -এর সাথে লগ ইন করুন</string>
-    <string name="com_facebook_loginview_logged_in_as">এই হিসাবে লগ ইন করা হয়েছে: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Facebook ব্যবহার করে লগ ইন করা হয়েছে</string>
-    <string name="com_facebook_loginview_log_out_action">লগ আউট করুন</string>
-    <string name="com_facebook_loginview_cancel_action">বাতিল করুন</string>
-    <string name="com_facebook_loading">লোড হচ্ছে...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest ত্রুটি</string>
-    <string name="com_facebook_internet_permission_error_message">WebView লগ ইন করার জন্য INTERNET-এর অনুমতির প্রয়োজন আছে</string>
-    <string name="com_facebook_tooltip_default">নতুন! আপনি নিয়ন্ত্রণে আছেন-অ্যাপসের সাথে আপনি কোন তথ্য ভাগ করতে চাইছেন তা চয়ন করুন৷</string>
-    <string name="com_facebook_image_download_unknown_error">একটি চিত্র ডাউনলোড করার সময়ে অপ্রত্যাশিত ত্রুটি দেখা দিচ্ছে৷</string>
-    <string name="com_facebook_share_button_text">ভাগ করুন</string>
-    <string name="com_facebook_send_button_text">পাঠান</string>
-    <string name="com_facebook_device_auth_instructions">আপনার কম্পিউটার বা স্মার্টফোন থেকে %@ এ যান এবং এই কোডটিকে প্রবেশ করান:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">লাইক</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">পছন্দ করেছে</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">লগ আউট করুন</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">লগ ইন করুন</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Facebook দিয়ে লগইন করুন</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Facebook এর সাথে চালিয়ে যান</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">%1$s হিসাবে লগ ইন করা হয়েছে।</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Facebook ব্যবহার করার মাধ্যমে লগ ইন করা হয়েছে</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">লগ আউট করুন</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">বাতিল করুন</string>
+    <string name="com_facebook_loading" gender="unknown">লোড হচ্ছে…</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">AndroidManifest ত্রুটি</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">WebView লগ ইনের ইন্টারনেটের অনুমতি প্রয়োজন</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">আপনার নিয়ন্ত্রণ রয়েছে - আপনি অ্যাপগুলির সাথে কোন তথ্য শেয়ার করতে চান সেটি বেছে নিন।</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">একটি ছবি ডাউনলোড করার সময় অপ্রত্যাশিত ত্রুটি ঘটেছে৷</string>
+    <string name="com_facebook_share_button_text" gender="unknown">শেয়ার করুন</string>
+    <string name="com_facebook_send_button_text" gender="unknown">পাঠান</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">&lt;b&gt;facebook.com/device&lt;/b&gt; দেখুন এবং উপরে দেখানো কোডটিকে প্রবেশ করান৷</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">আপনার অ্যাকাউন্ট সংযুক্ত করতে, আপনার মোবাইল ডিভাইসে Facebook অ্যাপ খুলুন এবং বিজ্ঞপ্তিগুলির জন্য পরীক্ষা করুন।</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- বা -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">লগ ইন নিশ্চিত করুন</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">%1$s হিসাবে চালিয়ে যান</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">আপনি নন?</string>
 </resources>
diff --git a/facebook/src/main/res/values-cs/strings.xml b/facebook/src/main/res/values-cs/strings.xml
index 45cd6c263..b07e05acc 100644
--- a/facebook/src/main/res/values-cs/strings.xml
+++ b/facebook/src/main/res/values-cs/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: cs_CZ -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">To se mi líbí</string>
-    <string name="com_facebook_like_button_liked">Už se mi to líbí</string>
-    <string name="com_facebook_loginview_log_out_button">Odhlásit</string>
-    <string name="com_facebook_loginview_log_in_button">Přihlásit</string>
-    <string name="com_facebook_loginview_log_in_button_long">Přihlásit se přes Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Přihlášen(a) jako: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Přihlášen(a) přes Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Odhlásit</string>
-    <string name="com_facebook_loginview_cancel_action">Zrušit</string>
-    <string name="com_facebook_loading">Načítání…</string>
-    <string name="com_facebook_internet_permission_error_title">Chyba AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">Webové přihlášení vyžaduje oprávnění použít INTERNET</string>
-    <string name="com_facebook_tooltip_default">Novinka! Je jen na vás, které informace chcete s aplikacemi sdílet.</string>
-    <string name="com_facebook_image_download_unknown_error">Při stahování obrázku došlo k nečekané chybě.</string>
-    <string name="com_facebook_share_button_text">Sdílet</string>
-    <string name="com_facebook_send_button_text">Odeslat</string>
-    <string name="com_facebook_device_auth_instructions">Přejděte ze smartphonu nebo počítače na %@ a zadejte tento kód:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">To se mi líbí</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">To se mi už líbí</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">Odhlásit se</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">Přihlášení</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Přihlásit se přes Facebook</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Pokračovat přes Facebook</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">Přihlášen(a) jako: %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Přihlášení přes Facebook</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">Odhlásit se</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">Zrušit</string>
+    <string name="com_facebook_loading" gender="unknown">Načítání...</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">Chyba AndroidManifest</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">WebView vyžaduje oprávnění pro INTERNET</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">Je to jen na vás – nastavte si, které informace chcete s aplikacemi sdílet.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">Neočekávaná chyba při stahování obrázku.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">Sdílet</string>
+    <string name="com_facebook_send_button_text" gender="unknown">Odeslat</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">Přejděte na &lt;b&gt;facebook.com/device&lt;/b&gt; a zadejte nahoře uvedený kód.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">Pokud chcete připojit svůj účet, spusťte aplikaci Facebook ve svém mobilním zařízení a zkontrolujte upozornění.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- NEBO -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">Potvrďte přihlášení</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">Pokračovat jako %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">Nejste to vy?</string>
 </resources>
diff --git a/facebook/src/main/res/values-da/strings.xml b/facebook/src/main/res/values-da/strings.xml
index 6e12894e4..8f987fe02 100644
--- a/facebook/src/main/res/values-da/strings.xml
+++ b/facebook/src/main/res/values-da/strings.xml
@@ -1,40 +1,29 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: da_DK -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Synes godt om</string>
-    <string name="com_facebook_like_button_liked">Synes godt om</string>
-    <string name="com_facebook_loginview_log_out_button">Log af</string>
-    <string name="com_facebook_loginview_log_in_button">Log på</string>
-    <string name="com_facebook_loginview_log_in_button_long">Log på med Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Logget på som: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Logget på med Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Log af</string>
-    <string name="com_facebook_loginview_cancel_action">Annuller</string>
-    <string name="com_facebook_loading">Indlæser ...</string>
-    <string name="com_facebook_internet_permission_error_title">Fejl i forbindelse med AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">WebView-login kræver tilladelse til INTERNET</string>
-    <string name="com_facebook_tooltip_default">Nyhed! Du har styringen – vælg de oplysninger, som du vil dele med apps.</string>
-    <string name="com_facebook_image_download_unknown_error">Der opstod en uventet fejl under download af et billede.</string>
-    <string name="com_facebook_share_button_text">Del</string>
-    <string name="com_facebook_send_button_text">Send</string>
-    <string name="com_facebook_device_auth_instructions">Gå til %@ på din smartphone eller computer, og indtast denne kode:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">Synes godt om</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">Synes godt om</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">Log af</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">Log på</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Log på med Facebook</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Fortsæt med Facebook</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">Logget på som %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Logget på med Facebook</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">Log af</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">Annuller</string>
+    <string name="com_facebook_loading" gender="unknown">Indlæser …</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">Fejl i AndroidManifest</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">WebView-login kræver INTERNET-tilladelse</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">Du har kontrollen – Vælg, hvilke informationer du vil dele med apps.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">Uventet fejl under download af billede.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">Del</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">Gå til &lt;b&gt;facebook.com/device&lt;/b&gt; og indtast koden, som er vist ovenfor.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">For at tilslutte din konto skal du åbne Facebook-appen på din mobilenhed og se efter, om der er notifikationer.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- ELLER -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">Bekræft login</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">Fortsæt som %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">Ikke dig?</string>
 </resources>
diff --git a/facebook/src/main/res/values-de/strings.xml b/facebook/src/main/res/values-de/strings.xml
index ae0fa73e6..222c68ff9 100644
--- a/facebook/src/main/res/values-de/strings.xml
+++ b/facebook/src/main/res/values-de/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: de_DE -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Gefällt mir</string>
-    <string name="com_facebook_like_button_liked">Gefällt dir</string>
-    <string name="com_facebook_loginview_log_out_button">Abmelden</string>
-    <string name="com_facebook_loginview_log_in_button">Anmelden</string>
-    <string name="com_facebook_loginview_log_in_button_long">Über Facebook anmelden</string>
-    <string name="com_facebook_loginview_logged_in_as">Angemeldet als: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Über Facebook angemeldet</string>
-    <string name="com_facebook_loginview_log_out_action">Abmelden</string>
-    <string name="com_facebook_loginview_cancel_action">Abbrechen</string>
-    <string name="com_facebook_loading">Wird geladen ...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest-Fehler</string>
-    <string name="com_facebook_internet_permission_error_message">Die WebView-Anmeldung erfordert die INTERNET-Berechtigung</string>
-    <string name="com_facebook_tooltip_default">Neu! Es liegt ganz an dir – du kannst dir aussuchen, was du mit Apps teilen möchtest.</string>
-    <string name="com_facebook_image_download_unknown_error">Unerwarteter Fehler beim Herunterladen eines Bildes.</string>
-    <string name="com_facebook_share_button_text">Teilen</string>
-    <string name="com_facebook_send_button_text">Senden</string>
-    <string name="com_facebook_device_auth_instructions">Gehe über dein Smartphone oder deinen Computer zu %@ und gib diesen Code ein:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">Gefällt mir</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">Gefällt dir</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">Abmelden</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">Melde dich an</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Mit Facebook anmelden</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Weiter mit Facebook</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">Angemeldet als: %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Mit Facebook angemeldet</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">Abmelden</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">Abbrechen</string>
+    <string name="com_facebook_loading" gender="unknown">Wird geladen ...</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">AndroidOffensichtlicher Fehler</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">WebView-Anmeldung erfordert INTERNET-Berechtigung</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">Du bestimmst, welche Informationen du mit Apps teilen möchtest.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">Unerwarteter Fehler beim Herunterladen eines Bildes.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">Teilen</string>
+    <string name="com_facebook_send_button_text" gender="unknown">Senden</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">Gehe zu &lt;b&gt;facebook.com/device&lt;/b&gt; und gib den oben angezeigten Code ein.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">Öffne die Facebook-App auf deinem Mobilgerät, um dich mit deinem Konto zu verbinden und nach Benachrichtigungen zu suchen.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- ODER -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">Anmeldung bestätigen</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">Weiter als %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">Das bist du nicht?</string>
 </resources>
diff --git a/facebook/src/main/res/values-el/strings.xml b/facebook/src/main/res/values-el/strings.xml
index b771b4232..b68cf0ab3 100644
--- a/facebook/src/main/res/values-el/strings.xml
+++ b/facebook/src/main/res/values-el/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: el_GR -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Μου αρέσει!</string>
-    <string name="com_facebook_like_button_liked">Σας αρέσει</string>
-    <string name="com_facebook_loginview_log_out_button">Αποσύνδεση</string>
-    <string name="com_facebook_loginview_log_in_button">Σύνδεση</string>
-    <string name="com_facebook_loginview_log_in_button_long">Σύνδεση μέσω Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Έχει γίνει σύνδεση ως: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Έχει γίνει σύνδεση μέσω Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Αποσύνδεση</string>
-    <string name="com_facebook_loginview_cancel_action">Άκυρο</string>
-    <string name="com_facebook_loading">Φόρτωση...</string>
-    <string name="com_facebook_internet_permission_error_title">Σφάλμα AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">Για τη σύνδεση στο WebView απαιτείται σύνδεση INTERNET</string>
-    <string name="com_facebook_tooltip_default">Νέο! Έχετε τον έλεγχο - επιλέξτε ποιες πληροφορίες θέλετε να κοινοποιούνται στις εφαρμογές.</string>
-    <string name="com_facebook_image_download_unknown_error">Προέκυψε μη αναμενόμενο σφάλμα κατά τη λήψη μιας εικόνας.</string>
-    <string name="com_facebook_share_button_text">Κοινοποίηση</string>
-    <string name="com_facebook_send_button_text">Αποστολή</string>
-    <string name="com_facebook_device_auth_instructions">Επισκεφτείτε τον ιστότοπο %@ από το smartphone ή τον υπολογιστή σας και πληκτρολογήστε αυτόν τον κωδικό:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">Μου αρέσει!</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">Σας αρέσει</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">Αποσύνδεση</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">Σύνδεση</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Συνδεθείτε μέσω Facebook</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Συνέχεια με το Facebook</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">Έχετε συνδεθεί ως: %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Έγινε σύνδεση μέσω Facebook</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">Αποσύνδεση</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">Ακύρωση</string>
+    <string name="com_facebook_loading" gender="unknown">Φόρτωση...</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">Σφάλμα AndroidManifest</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">Για σύνδεση στην εφαρμογή WebView απαιτείται άδεια INTERNET</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">Εσείς έχετε τον έλεγχο - επιλέξτε ποιες πληροφορίες θέλετε να κοινοποιείτε στις εφαρμογές.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">Παρουσιάστηκε μη αναμενόμενο σφάλμα κατά τη λήψη μιας εικόνας.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">Κοινοποιήστε</string>
+    <string name="com_facebook_send_button_text" gender="unknown">Αποστολή</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">Πηγαίνετε στη διεύθυνση &lt;b&gt;facebook.com/device&lt;/b&gt; και εισαγάγετε τον παραπάνω κωδικό.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">Για να συνδέσετε το λογαριασμό σας, ανοίξτε την εφαρμογή Facebook στη φορητή συσκευή σας και ελέγξτε για ειδοποιήσεις.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- Ή -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">Επιβεβαίωση σύνδεσης</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">Συνέχεια ως %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">Δεν είστε εσείς;</string>
 </resources>
diff --git a/facebook/src/main/res/values-en-rGB/strings.xml b/facebook/src/main/res/values-en-rGB/strings.xml
new file mode 100644
index 000000000..22bbe4865
--- /dev/null
+++ b/facebook/src/main/res/values-en-rGB/strings.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: en_GB -->
+
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_loading" gender="unknown">Loading…</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">AndroidManifest error</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">WebView login requires Internet permission</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">You\'re in control – choose what information you want to share with apps.</string>
+</resources>
diff --git a/facebook/src/main/res/values-es-rES/strings.xml b/facebook/src/main/res/values-es-rES/strings.xml
index a41aed815..d9faad9f0 100644
--- a/facebook/src/main/res/values-es-rES/strings.xml
+++ b/facebook/src/main/res/values-es-rES/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: es_ES -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Me gusta</string>
-    <string name="com_facebook_like_button_liked">Te gusta</string>
-    <string name="com_facebook_loginview_log_out_button">Salir</string>
-    <string name="com_facebook_loginview_log_in_button">Inicio de sesión</string>
-    <string name="com_facebook_loginview_log_in_button_long">Iniciar sesión con Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Sesión iniciada como: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Sesión iniciada con Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Salir</string>
-    <string name="com_facebook_loginview_cancel_action">Cancelar</string>
-    <string name="com_facebook_loading">Cargando...</string>
-    <string name="com_facebook_internet_permission_error_title">Error de AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">El inicio de sesión de WebView requiere permiso para INTERNET</string>
-    <string name="com_facebook_tooltip_default">Novedad: Tú eres quien controla y elige la información que quieres compartir con las aplicaciones.</string>
-    <string name="com_facebook_image_download_unknown_error">Error inesperado al descargar una imagen.</string>
-    <string name="com_facebook_share_button_text">Compartir</string>
-    <string name="com_facebook_send_button_text">Enviar</string>
-    <string name="com_facebook_device_auth_instructions">Visita %@ en tu smartphone o computadora e ingresa este código:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">Me gusta</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">Te gusta</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">Salir</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">Entrar</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Inicia sesión con Facebook</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Continuar con Facebook</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">Sesión iniciada como: %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Has iniciado sesión con Facebook</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">Salir</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">Cancelar</string>
+    <string name="com_facebook_loading" gender="unknown">Cargando…</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">Error de AndroidManifest</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">El inicio de sesión en WebView requiere permisos de INTERNET</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">Tú decides qué información quieres compartir con las aplicaciones.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">Se ha producido un error inesperado al descargar una imagen.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">Compartir</string>
+    <string name="com_facebook_send_button_text" gender="unknown">Enviar</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">Visita &lt;b&gt;facebook.com/device&lt;/b&gt; e introduce el código que se muestra más arriba.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">Para conectar tu cuenta, abre la aplicación de Facebook en tu dispositivo móvil y comprueba las notificaciones.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- O -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">Confirmar inicio de sesión</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">Continuar como %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">¿No eres tú?</string>
 </resources>
diff --git a/facebook/src/main/res/values-es/strings.xml b/facebook/src/main/res/values-es/strings.xml
index 7dfbf4ab0..e8e001985 100644
--- a/facebook/src/main/res/values-es/strings.xml
+++ b/facebook/src/main/res/values-es/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: es_LA -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Me gusta</string>
-    <string name="com_facebook_like_button_liked">Te gusta</string>
-    <string name="com_facebook_loginview_log_out_button">Salir</string>
-    <string name="com_facebook_loginview_log_in_button">Inicio de sesión</string>
-    <string name="com_facebook_loginview_log_in_button_long">Iniciar sesión con Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Sesión iniciada como: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Sesión iniciada con Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Salir</string>
-    <string name="com_facebook_loginview_cancel_action">Cancelar</string>
-    <string name="com_facebook_loading">Cargando…</string>
-    <string name="com_facebook_internet_permission_error_title">Error AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">El inicio de sesión a la web requiere permiso de conexión a internet</string>
-    <string name="com_facebook_tooltip_default">¡Nuevo! Tú tienes el control: elige qué información quieres compartir con las aplicaciones.</string>
-    <string name="com_facebook_image_download_unknown_error">Se produjo un error inesperado al descargar una imagen.</string>
-    <string name="com_facebook_share_button_text">Compartir</string>
-    <string name="com_facebook_send_button_text">Enviar</string>
-    <string name="com_facebook_device_auth_instructions">Visita %@ en tu smartphone u ordenador e introduce este código:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">Me gusta</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">Te gusta</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">Salir</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">Entrar</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Iniciar sesión con Facebook</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Continuar con Facebook</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">Sesión iniciada como: %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Iniciaste sesión con Facebook</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">Salir</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">Cancelar</string>
+    <string name="com_facebook_loading" gender="unknown">Cargando...</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">Error de AndroidManifest</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">El inicio de sesión de WebView requiere permisos de INTERNET</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">Tú decides qué información quieres compartir con las aplicaciones.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">Se produjo un error inesperado al descargar una imagen.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">Compartir</string>
+    <string name="com_facebook_send_button_text" gender="unknown">Enviar</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">Ve a &lt;b&gt;facebook.com/device&lt;/b&gt; e ingresa el código que se muestra arriba.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">Para conectar tu cuenta, abre la aplicación de Facebook en tu dispositivo móvil y comprueba las notificaciones.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">o</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">Confirmar inicio de sesión</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">Continuar como %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">¿No eres tú?</string>
 </resources>
diff --git a/facebook/src/main/res/values-fi/strings.xml b/facebook/src/main/res/values-fi/strings.xml
index 174a7761f..f2bffab23 100644
--- a/facebook/src/main/res/values-fi/strings.xml
+++ b/facebook/src/main/res/values-fi/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: fi_FI -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Tykkää</string>
-    <string name="com_facebook_like_button_liked">Tykätty</string>
-    <string name="com_facebook_loginview_log_out_button">Kirjaudu ulos</string>
-    <string name="com_facebook_loginview_log_in_button">Kirjaudu sisään</string>
-    <string name="com_facebook_loginview_log_in_button_long">Kirjaudu sisään Facebookin avulla</string>
-    <string name="com_facebook_loginview_logged_in_as">Sisäänkirjautunut nimellä: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Sisäänkirjautunut Facebookin avulla</string>
-    <string name="com_facebook_loginview_log_out_action">Kirjaudu ulos</string>
-    <string name="com_facebook_loginview_cancel_action">Peruuta</string>
-    <string name="com_facebook_loading">Ladataan...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest-virhe</string>
-    <string name="com_facebook_internet_permission_error_message">WebView-kirjautuminen edellyttää INTERNET-käyttöoikeutta</string>
-    <string name="com_facebook_tooltip_default">Uutta! Sinä päätät – valitse, mitä haluat jakaa sovellusten kanssa.</string>
-    <string name="com_facebook_image_download_unknown_error">Odottamaton virhe kuvan palvelimesta lataamisen aikana.</string>
-    <string name="com_facebook_share_button_text">Jaa</string>
-    <string name="com_facebook_send_button_text">Lähetä</string>
-    <string name="com_facebook_device_auth_instructions">Siirry osoitteeseen %@ älypuhelimella tai tietokoneella ja anna seuraava koodi:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">Tykkää</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">Tykätty</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">Kirjaudu ulos</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">Kirjaudu sisään</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Kirjaudu Facebook-tunnuksilla</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Jatka Facebookissa</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">Kirjautunut sisään nimellä %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Kirjauduttu sisään Facebook-tunnuksilla</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">Kirjaudu ulos</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">Peruuta</string>
+    <string name="com_facebook_loading" gender="unknown">Ladataan...</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">AndroidManifest-virhe</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">WebView-sisäänkirjautuminen edellyttää Internet-lupaa</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">Sinä päätät - valitse mitkä tiedot haluat jakaa sovelluksille</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">Kuvaa ladattaessa tapahtui yllättävä virhe.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">Jaa</string>
+    <string name="com_facebook_send_button_text" gender="unknown">Lähetä</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">Siirry osoitteeseen &lt;b&gt;facebook.com/device&lt;/b&gt; ja anna oheinen koodi.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">Liitä tilisi avaamalla Facebook-sovellus matkapuhelimellasi ja tarkistamalla ilmoitukset.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- TAI -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">Vahvista sisäänkirjautuminen</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">Jatka nimellä %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">Etkö ole tämä henkilö?</string>
 </resources>
diff --git a/facebook/src/main/res/values-fr/strings.xml b/facebook/src/main/res/values-fr/strings.xml
index 5247f3cdf..0ff84c220 100644
--- a/facebook/src/main/res/values-fr/strings.xml
+++ b/facebook/src/main/res/values-fr/strings.xml
@@ -1,40 +1,32 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: fr_FR -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">J’aime</string>
-    <string name="com_facebook_like_button_liked">J’aime déjà</string>
-    <string name="com_facebook_loginview_log_out_button">Déconnexion</string>
-    <string name="com_facebook_loginview_log_in_button">Connexion</string>
-    <string name="com_facebook_loginview_log_in_button_long">Connexion avec Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Connexion en tant que : %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Connecté(e) à l’aide de Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Déconnexion</string>
-    <string name="com_facebook_loginview_cancel_action">Annuler</string>
-    <string name="com_facebook_loading">Chargement...</string>
-    <string name="com_facebook_internet_permission_error_title">Erreur AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">La connexion au web nécessite une autorisation d’accéder à INTERNET</string>
-    <string name="com_facebook_tooltip_default">Nouveau ! Choisissez les informations que vous souhaitez partager avec les applications.</string>
-    <string name="com_facebook_image_download_unknown_error">Une erreur inattendue s’est produite au moment de télécharger une image.</string>
-    <string name="com_facebook_share_button_text">Partager</string>
-    <string name="com_facebook_send_button_text">Envoyer</string>
-    <string name="com_facebook_device_auth_instructions">Rendez-vous sur %@ sur votre smartphone ou votre ordinateur et entrez ce code :</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">J’aime</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">J’aime déjà</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">Déconnexion</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">Connectez-vous</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Se connecter avec Facebook</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Continuer avec Facebook</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">Connecté(e) en tant que : %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Connecté(e) avec Facebook</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook_f1gender" gender="female">Connectée avec Facebook</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook_m2gender" gender="male">Connecté avec Facebook</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">Déconnexion</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">Annuler</string>
+    <string name="com_facebook_loading" gender="unknown">Chargement...</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">Erreur AndroidManifest</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">La connexion à WebView nécessite une autorisation INTERNET</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">Vous avez le contrôle - choisissez les informations que vous voulez partager avec les apps.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">Une erreur inattendue s’est produite lors du téléchargement d’une image.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">Publier</string>
+    <string name="com_facebook_send_button_text" gender="unknown">Envoyer</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">Consultez &lt;b&gt;facebook.com/device&lt;/b&gt; et entrez le code affiché ci-dessus.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">Pour associer votre compte, ouvrez l’app Facebook sur votre appareil mobile et vérifiez les notifications.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- OU -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">Confirmer la connexion</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">Continuer en tant que %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">Ce n’est pas vous ?</string>
 </resources>
diff --git a/facebook/src/main/res/values-gu/strings.xml b/facebook/src/main/res/values-gu/strings.xml
index 32550142b..c91af5459 100644
--- a/facebook/src/main/res/values-gu/strings.xml
+++ b/facebook/src/main/res/values-gu/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: gu_IN -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">પસંદ કરો</string>
-    <string name="com_facebook_like_button_liked">પસંદ કર્યું</string>
-    <string name="com_facebook_loginview_log_out_button">લૉગ આઉટ કરો</string>
-    <string name="com_facebook_loginview_log_in_button">લૉગ ઇન કરો</string>
-    <string name="com_facebook_loginview_log_in_button_long">ફેસબુક સાથે લૉગ ઇન કરો</string>
-    <string name="com_facebook_loginview_logged_in_as">આ તરીકે લૉગ ઇન થયાં: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">ફેસબુકનો ઉપયોગ કરીને લૉગ ઇન કરો</string>
-    <string name="com_facebook_loginview_log_out_action">લૉગ આઉટ કરો</string>
-    <string name="com_facebook_loginview_cancel_action">રદ કરો</string>
-    <string name="com_facebook_loading">લોડ કરી રહ્યાં છે...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest ભૂલ</string>
-    <string name="com_facebook_internet_permission_error_message">WebView લૉગિન માટે ઇન્ટરનેટ પરવાગની આવશ્યક છે</string>
-    <string name="com_facebook_tooltip_default">નવું! તમે નિયંત્રણ કરો છો - તમે એપ્લિકેશન્સ સાથે કઈ માહિતી શેર કરવા માંગો છો તે પસંદ કરો.</string>
-    <string name="com_facebook_image_download_unknown_error">છબી ડાઉનલોડ કરતી વખતે અનપેક્ષિત ભૂલ આવી.</string>
-    <string name="com_facebook_share_button_text">શેર કરો</string>
-    <string name="com_facebook_send_button_text">મોકલો</string>
-    <string name="com_facebook_device_auth_instructions">તમારા સ્માર્ટફોન અથવા કમ્પ્યુટર પર %@ ની મુલાકાત લો અને આ કોડ દાખલ કરો:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">પસંદ કરો</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">ગમ્યું</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">લૉગ આઉટ કરો</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">લૉગ ઇન કરો</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Facebook થી લૉગિન કરો</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Facebook સાથે ચાલુ રાખો</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">%1$s: તરીકે લૉગ ઇન છે</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">તમે Facebook નો ઉપયોગ કરીને લોગ ઇન કર્યું છે</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">લૉગ આઉટ કરો</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">રદ કરો</string>
+    <string name="com_facebook_loading" gender="unknown">લોડ થઈ રહ્યું છે…</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">AndroidManifest ભૂલ</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">WebView લૉગિનને ઇન્ટરનેટ પરવાનગીની જરૂર છે</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">તમે નિયંત્રણમાં છો - તમે એપ્લિકેશન્સ સાથે શું માહિતી શેર કરવા માંગો પસંદ કરો.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">છબી ડાઉનલોડ કરતી વખતે એક અનપેક્ષિત ભૂલ આવી.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">શેર કરો</string>
+    <string name="com_facebook_send_button_text" gender="unknown">મોકલો</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">&lt;b&gt;facebook.com/device&lt;/b&amp;gt ની મુલકાત લો; અને ઉપર આપેલો કોડ દાખલ કરો.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">તમારા એકાઉન્ટ સાથે કનેક્ટ કરવા માટે, તમારા મોબાઇલ ઉપકરણ પર Facebook એપ્લિકેશન ખોલો અને સૂચનાઓ માટે તપાસો.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- અથવા -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">લૉગિનની પુષ્ટિ કરો</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">%1$s તરીકે ચાલુ રાખો</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">તમે નથી?</string>
 </resources>
diff --git a/facebook/src/main/res/values-hi/strings.xml b/facebook/src/main/res/values-hi/strings.xml
index 0088a75c6..65b19888c 100644
--- a/facebook/src/main/res/values-hi/strings.xml
+++ b/facebook/src/main/res/values-hi/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: hi_IN -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">पसंद करें</string>
-    <string name="com_facebook_like_button_liked">पसंद किया</string>
-    <string name="com_facebook_loginview_log_out_button">लॉग आउट</string>
-    <string name="com_facebook_loginview_log_in_button">लॉग इन करें</string>
-    <string name="com_facebook_loginview_log_in_button_long">Facebook से लॉग इन करें</string>
-    <string name="com_facebook_loginview_logged_in_as">इस रूप में लॉग इन किया: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Facebook का उपयोग करके लॉग इन किया हुआ है</string>
-    <string name="com_facebook_loginview_log_out_action">लॉग आउट</string>
-    <string name="com_facebook_loginview_cancel_action">रद्द करें</string>
-    <string name="com_facebook_loading">लोड हो रहा है...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest गलती</string>
-    <string name="com_facebook_internet_permission_error_message">WebView लॉग इन के लिए INTERNET अनुमति की आवश्यकता है</string>
-    <string name="com_facebook_tooltip_default">नया! आप नियंत्रण में हैं - चुनें कि आप एप्लिकेशन से कौन-सी जानकारी साझा करना चाहते हैं.</string>
-    <string name="com_facebook_image_download_unknown_error">एक चित्र डाउनलोड करते समय अनपेक्षित गलती हुई.</string>
-    <string name="com_facebook_share_button_text">साझा करें</string>
-    <string name="com_facebook_send_button_text">भेजें</string>
-    <string name="com_facebook_device_auth_instructions">अपने स्मार्टफ़ोन या कंप्यूटर पर %@ पर जाएँ और यह कोड डालें:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">पसंद करें</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">पसंद किया</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">लॉग आउट करें</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">लॉग इन</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Facebook से लॉग इन करें</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Facebook के साथ जारी रखें</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">इस रूप में लॉग इन हैं: %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Facebook का उपयोग करके लॉग इन किया है</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">लॉग आउट करें</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">रद्द करें</string>
+    <string name="com_facebook_loading" gender="unknown">लोड हो रहा है...</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">AndroidManifest गलती</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">WebView लॉग इन के लिए इंटरनेट अनुमति आवश्यक है</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">नियंत्रण आपके पास है - चुनें कि आप एप्लिकेशन के साथ कौन सी जानकारी साझा करना चाहते हैं.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">चित्र डाउनलोड करते समय अनपेक्षित त्रुटि हुई.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">साझा करें</string>
+    <string name="com_facebook_send_button_text" gender="unknown">भेजें</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">&lt;b&gt;facebook.com/device&lt;/b&gt; पर विज़िट करें और ऊपर दिखाया गया कोड डालें.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">अपने खाते से कनेक्ट करने के लिए, अपने मोबाइल डिवाइस पर Facebook एप्लिकेशन खोलें और सूचनाएँ जाँचें.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- या -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">लॉग इन कन्फ़र्म करें</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">%1$s के रूप में जारी रखें</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">आप नहीं हैं?</string>
 </resources>
diff --git a/facebook/src/main/res/values-hr/strings.xml b/facebook/src/main/res/values-hr/strings.xml
index 25d909b28..016cdf947 100644
--- a/facebook/src/main/res/values-hr/strings.xml
+++ b/facebook/src/main/res/values-hr/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: hr_HR -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Sviđa mi se</string>
-    <string name="com_facebook_like_button_liked">Označeno sa "sviđa mi se"</string>
-    <string name="com_facebook_loginview_log_out_button">Odjavi se</string>
-    <string name="com_facebook_loginview_log_in_button">Prijavi se</string>
-    <string name="com_facebook_loginview_log_in_button_long">Prijava putem Facebooka</string>
-    <string name="com_facebook_loginview_logged_in_as">Prijavljen kao: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Prijavljen putem Facebooka</string>
-    <string name="com_facebook_loginview_log_out_action">Odjavi se</string>
-    <string name="com_facebook_loginview_cancel_action">Odustani</string>
-    <string name="com_facebook_loading">Učitavanje u tijeku…</string>
-    <string name="com_facebook_internet_permission_error_title">Pogreška datoteke AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">Za prijavu u aplikaciju WebView potrebna je dozvola INTERNET</string>
-    <string name="com_facebook_tooltip_default">Novo! Vi odlučujete – odaberite koje informacije želite podijeliti u aplikacijama.</string>
-    <string name="com_facebook_image_download_unknown_error">Prilikom preuzimanja slike došlo je do neočekivane pogreške.</string>
-    <string name="com_facebook_share_button_text">Dijeli</string>
-    <string name="com_facebook_send_button_text">Pošalji</string>
-    <string name="com_facebook_device_auth_instructions">Posjetite %@ na pametnom telefonu ili računalu i unesite ovaj kôd:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">Sviđa mi se</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">Označeno sa \"sviđa mi se\"</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">Odjava</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">Prijava</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Prijavi se putem Facebooka</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Nastavak uz Facebook</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">Prijavljeni ste kao: %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Prijavljeni ste putem Facebooka</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">Odjava</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">Odustani</string>
+    <string name="com_facebook_loading" gender="unknown">Učitavanje...</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">Pogreška AndroidManifest</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">Prijava WebView zahtijeva dopuštenje za INTERNET</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">Vi odlučujete – odaberite koje informacije želite podijeliti s aplikacijama.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">Neočekivana pogreška prilikom preuzimanja slike.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">Podijeli</string>
+    <string name="com_facebook_send_button_text" gender="unknown">Pošalji</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">Posjetitw &lt;b&gt;facebook.com/device&lt;/b&gt; i unesite gore prikazani kôd.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">Za povezivanje svog računa otvorite aplikaciju Facebook na mobilnom uređaju i pročitajte obavijesti.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- ILI -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">Potvrdi prijavu</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">Nastavite kao %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">Ovo niste vi?</string>
 </resources>
diff --git a/facebook/src/main/res/values-hu/strings.xml b/facebook/src/main/res/values-hu/strings.xml
index 35b1d0dfc..6dc9c20f2 100644
--- a/facebook/src/main/res/values-hu/strings.xml
+++ b/facebook/src/main/res/values-hu/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: hu_HU -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Tetszik</string>
-    <string name="com_facebook_like_button_liked">Kedveled</string>
-    <string name="com_facebook_loginview_log_out_button">Kijelentkezés</string>
-    <string name="com_facebook_loginview_log_in_button">Bejelentkezés</string>
-    <string name="com_facebook_loginview_log_in_button_long">Bejelentkezés a Facebook használatával</string>
-    <string name="com_facebook_loginview_logged_in_as">Bejelentkezve %1$s néven</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Bejelentkezve a Facebook használatával</string>
-    <string name="com_facebook_loginview_log_out_action">Kijelentkezés</string>
-    <string name="com_facebook_loginview_cancel_action">Törlés</string>
-    <string name="com_facebook_loading">Betöltés...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest-hiba</string>
-    <string name="com_facebook_internet_permission_error_message">A webes bejelentkezéshez szükséges a jogosultság az internet használatára.</string>
-    <string name="com_facebook_tooltip_default">Újdonság! A döntés a kezedben van: kiválaszthatod, hogy milyen adatokat osztasz meg az alkalmazásokkal.</string>
-    <string name="com_facebook_image_download_unknown_error">Váratlan hiba történt egy kép betöltése közben.</string>
-    <string name="com_facebook_share_button_text">Megosztás</string>
-    <string name="com_facebook_send_button_text">Küldés</string>
-    <string name="com_facebook_device_auth_instructions">Keresd fel a(z) %@ oldalt a telefonodról vagy számítógépről, és írd be a következő kódot:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">Tetszik</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">Kedvelt</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">Kijelentkezés</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">Belépés</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Bejelentkezés Facebookkal</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Folytatás a Facebookkal</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">Bejelentkezve %1$s néven</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Bejelentkezve a Facebook használatával</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">Kijelentkezés</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">Mégsem</string>
+    <string name="com_facebook_loading" gender="unknown">Betöltés…</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">AndroidManifest hiba</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">A WebView-bejelentkezéshez „INTERNET” jogosultság szükséges.</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">Te irányítasz – válaszd ki, milyen adatokat szeretnél megosztani az alkalmazásokkal.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">Váratlan hiba történt a kép letöltésekor.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">Megosztás</string>
+    <string name="com_facebook_send_button_text" gender="unknown">Küldés</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">Keresd fel a &lt;b&gt;facebook.com/device&lt;/b&gt; címet, és írd be a fent megjelenített kódot.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">A fiók hozzákapcsolásához nyisd meg a mobilkészülékeden a Facebook alkalmazást, és nézd meg az értesítéseket.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- VAGY -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">Bejelentkezés megerősítése</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">Folytatás mint %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">Nem te vagy az?</string>
 </resources>
diff --git a/facebook/src/main/res/values-id/strings.xml b/facebook/src/main/res/values-id/strings.xml
index ba8d27bcc..895b0f331 100644
--- a/facebook/src/main/res/values-id/strings.xml
+++ b/facebook/src/main/res/values-id/strings.xml
@@ -24,17 +24,22 @@
     <string name="com_facebook_like_button_liked">Disukai</string>
     <string name="com_facebook_loginview_log_out_button">Keluar</string>
     <string name="com_facebook_loginview_log_in_button">Masuk</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Lanjutkan dengan Facebook</string>
     <string name="com_facebook_loginview_log_in_button_long">Masuk menggunakan Facebook</string>
     <string name="com_facebook_loginview_logged_in_as">Masuk sebagai: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Masuk menggunakan Facebook</string>
     <string name="com_facebook_loginview_log_out_action">Keluar</string>
     <string name="com_facebook_loginview_cancel_action">Batal</string>
-    <string name="com_facebook_loading">Memuat...</string>
+    <string name="com_facebook_loading">Memuat&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">Kesalahan AndroidManifest</string>
     <string name="com_facebook_internet_permission_error_message">Masuk WebView memerlukan izin INTERNET</string>
-    <string name="com_facebook_tooltip_default">Baru! Anda memegang kendali - pilih info yang ingin Anda bagikan dengan aplikasi.</string>
+    <string name="com_facebook_tooltip_default">Anda memegang kendali - pilih info yang ingin Anda bagikan dengan aplikasi.</string>
     <string name="com_facebook_image_download_unknown_error">Kesalahan yang tidak diharapkan saat mengunduh gambar.</string>
     <string name="com_facebook_share_button_text">Berbagi</string>
     <string name="com_facebook_send_button_text">Kirim</string>
-    <string name="com_facebook_device_auth_instructions">Buka %@ dari smartphone Anda atau komputer dan masukkan kode ini:</string>
+    <string name="com_facebook_device_auth_instructions">Kunjungi &lt;b&gt;facebook.com/device&lt;/b&gt; dan masukkan kode yang ditampilkan di atas.</string>
+    <string name="com_facebook_smart_device_instructions">Untuk menghubungkan akun Anda, buka aplikasi Facebook di perangkat seluler Anda dan periksa pemberitahuan.</string>
+    <string name="com_facebook_smart_login_confirmation_cancel">Bukan Anda?</string>
+    <string name="com_facebook_smart_login_confirmation_title">Konfirmasikan Masuk</string>
+    <string name="com_facebook_smart_device_instructions_or">- ATAU -</string>
 </resources>
diff --git a/facebook/src/main/res/values-in/strings.xml b/facebook/src/main/res/values-in/strings.xml
new file mode 100644
index 000000000..04ea86a53
--- /dev/null
+++ b/facebook/src/main/res/values-in/strings.xml
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: id_ID -->
+
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">Suka</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">Suka</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">Keluar</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">Masuk</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Masuk dengan Facebook</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Lanjutkan dengan Facebook</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">Masuk sebagai: %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Masuk menggunakan Facebook</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">Keluar</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">Batalkan</string>
+    <string name="com_facebook_loading" gender="unknown">Memuat…</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">Terjadi Kesalahan AndroidManifest</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">Masuk Tampilan Web memerlukan izin INTERNET</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">Anda memegang kendali - pilih info apa yang ingin Anda bagikan dengan aplikasi.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">Kesalahan tak terduga ketika mengunduh gambar.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">Bagikan</string>
+    <string name="com_facebook_send_button_text" gender="unknown">Kirim</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">Kunjungi &lt;b&gt;facebook.com/device&lt;/b&gt; dan masukkan kode yang ditampilkan di bawah ini.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">Untuk menghubungkan akun Anda, buka aplikasi Facebook di perangkat seluler Anda dan lihat pemberitahuan.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- ATAU -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">Konfirmasikan Masuk</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">Lanjutkan sebagai %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">Bukan Anda?</string>
+</resources>
diff --git a/facebook/src/main/res/values-it/strings.xml b/facebook/src/main/res/values-it/strings.xml
index 170fad349..06e864c95 100644
--- a/facebook/src/main/res/values-it/strings.xml
+++ b/facebook/src/main/res/values-it/strings.xml
@@ -1,42 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: it_IT -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Mi piace</string>
-    <string name="com_facebook_like_button_liked">Ti piace</string>
-    <string name="com_facebook_loginview_log_out_button">Esci</string>
-    <string name="com_facebook_loginview_log_in_button">Accedi</string>
-    <string name="com_facebook_loginview_log_in_button_long">Accedi con Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Accesso effettuato come: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Accesso effettuato con Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Esci</string>
-    <string name="com_facebook_loginview_cancel_action">Annulla</string>
-    <string name="com_facebook_loading">Caricamento...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest Error</string>
-    <string name="com_facebook_internet_permission_error_message">L\'accesso tramite Web richiede
-        l\'autorizzazione INTERNET</string>
-    <string name="com_facebook_tooltip_default">Novità! Il controllo è nelle tue mani: scegli quali informazioni condividere con le applicazioni.</string>
-    <string name="com_facebook_image_download_unknown_error">Errore imprevisto durante il
-        caricamento di un\'immagine.</string>
-    <string name="com_facebook_share_button_text">Condividi</string>
-    <string name="com_facebook_send_button_text">Invia</string>
-    <string name="com_facebook_device_auth_instructions">Accedi a %@ nel tuo smartphone o computer e inserisci questo codice:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">Mi piace</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">Ti piace</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">Esci</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">Accedi</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Accedi con Facebook</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Continua con Facebook</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">Accesso effettuato come %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Accesso effettuato tramite Facebook</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">Esci</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">Annulla</string>
+    <string name="com_facebook_loading" gender="unknown">Caricamento in corso...</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">Errore AndroidManifest</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">L\'accesso alla visualizzazione Web richiede le autorizzazioni Internet</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">Il controllo è nelle tue mani: scegli quali informazioni condividere con le app.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">Errore imprevisto durante il download dell\'immagine.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">Condividi</string>
+    <string name="com_facebook_send_button_text" gender="unknown">Invia</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">Visita &lt;b&gt;facebook.com/device&lt;/b&gt; e inserisci il codice mostrato qui sotto.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">Per connettere il tuo account, apri l\'app Facebook dal tuo dispositivo mobile e controlla le notifiche.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- oppure -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">Conferma accesso</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">Continua come %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">Non sei tu?</string>
 </resources>
diff --git a/facebook/src/main/res/values-iw/strings.xml b/facebook/src/main/res/values-iw/strings.xml
new file mode 100644
index 000000000..d1079b628
--- /dev/null
+++ b/facebook/src/main/res/values-iw/strings.xml
@@ -0,0 +1,52 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: he_IL -->
+
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">אהבתי</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">אהבתי</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">התנתק/י</string>
+    <string name="com_facebook_loginview_log_out_button_f1gender" gender="female">התנתקי</string>
+    <string name="com_facebook_loginview_log_out_button_m2gender" gender="male">התנתק</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">התחבר</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">התחברות באמצעות פייסבוק</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">המשך/המשיכי עם פייסבוק</string>
+    <string name="com_facebook_loginview_log_in_button_continue_f1gender" gender="female">המשיכי עם פייסבוק</string>
+    <string name="com_facebook_loginview_log_in_button_continue_m2gender" gender="male">המשך עם פייסבוק</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">מחובר/ת בתור: %1$s</string>
+    <string name="com_facebook_loginview_logged_in_as_f1gender" gender="female">מחוברת בתור: %1$s</string>
+    <string name="com_facebook_loginview_logged_in_as_m2gender" gender="male">מחובר בתור: %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">מחובר/ת כמשתמש בפייסבוק</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook_f1gender" gender="female">מחוברת כמשתמש בפייסבוק</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook_m2gender" gender="male">מחובר כמשתמש בפייסבוק</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">התנתק/י</string>
+    <string name="com_facebook_loginview_log_out_action_f1gender" gender="female">התנתקי</string>
+    <string name="com_facebook_loginview_log_out_action_m2gender" gender="male">התנתק</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">בטל</string>
+    <string name="com_facebook_loading" gender="unknown">טוען...</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">שגיאת AndroidManifest</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">התחברות WebView דורשת הרשאת אינטרנט</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">את/ה בשליטה - בחר/י אילו פרטים ברצונך לשתף עם אפליקציות.</string>
+    <string name="com_facebook_tooltip_default_f1gender" gender="female">את בשליטה - בחרי אילו פרטים ברצונך לשתף עם אפליקציות.</string>
+    <string name="com_facebook_tooltip_default_m2gender" gender="male">אתה בשליטה - בחר אילו פרטים ברצונך לשתף עם אפליקציות.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">שגיאה לא צפויה במהלך הורדת תמונה.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">שתף/שתפי</string>
+    <string name="com_facebook_share_button_text_f1gender" gender="female">שתפי</string>
+    <string name="com_facebook_share_button_text_m2gender" gender="male">שתף</string>
+    <string name="com_facebook_send_button_text" gender="unknown">שלח/י</string>
+    <string name="com_facebook_send_button_text_f1gender" gender="female">שלחי</string>
+    <string name="com_facebook_send_button_text_m2gender" gender="male">שלח</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">יש לבקר בכתובת facebook.com/device&lt;/b&amp;gt ולהזין את הקוד המוצג למעלה</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">כדי לחבר את חשבונך, יש לפתוח את אפליקציית פייסבוק במכשיר הנייד ולבדוק אם יש התראות.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- או -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">אשר/י את ההתחברות</string>
+    <string name="com_facebook_smart_login_confirmation_title_f1gender" gender="female">אשרי את ההתחברות</string>
+    <string name="com_facebook_smart_login_confirmation_title_m2gender" gender="male">אשר את ההתחברות</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">המשך/המשיכי בתור %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as_f1gender" gender="female">המשיכי בתור %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as_m2gender" gender="male">המשך בתור %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">לא את/ה?</string>
+    <string name="com_facebook_smart_login_confirmation_cancel_f1gender" gender="female">לא את?</string>
+    <string name="com_facebook_smart_login_confirmation_cancel_m2gender" gender="male">לא אתה?</string>
+</resources>
diff --git a/facebook/src/main/res/values-ja/strings.xml b/facebook/src/main/res/values-ja/strings.xml
index e9895e50e..c4ff47cc5 100644
--- a/facebook/src/main/res/values-ja/strings.xml
+++ b/facebook/src/main/res/values-ja/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ja_JP -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">いいね！</string>
-    <string name="com_facebook_like_button_liked">いいね！済み</string>
-    <string name="com_facebook_loginview_log_out_button">ログアウト</string>
-    <string name="com_facebook_loginview_log_in_button">ログイン</string>
-    <string name="com_facebook_loginview_log_in_button_long">Facebookでログイン</string>
-    <string name="com_facebook_loginview_logged_in_as">次のユーザーとしてログイン中: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Facebookを使用してログイン中</string>
-    <string name="com_facebook_loginview_log_out_action">ログアウト</string>
-    <string name="com_facebook_loginview_cancel_action">キャンセル</string>
-    <string name="com_facebook_loading">読み込み中...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifestエラー</string>
-    <string name="com_facebook_internet_permission_error_message">WebViewログインにはINTERNET権限が必要です</string>
-    <string name="com_facebook_tooltip_default">新機能！アプリと共有する情報をコントロールできます。</string>
-    <string name="com_facebook_image_download_unknown_error">画像のダウンロード中に予期しないエラーが発生しました。</string>
-    <string name="com_facebook_share_button_text">シェア</string>
-    <string name="com_facebook_send_button_text">送信</string>
-    <string name="com_facebook_device_auth_instructions">スマートフォンまたはコンピュータから%@にアクセスし、次のコードを入力してください。</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">いいね！</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">「いいね！」しました</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">ログアウト</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">ログイン</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Facebookでログイン</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Facebookでログイン</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">%1$sとしてログイン中</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Facebookでログイン中</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">ログアウト</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">キャンセル</string>
+    <string name="com_facebook_loading" gender="unknown">読み込み中です…</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">AndroidManifestエラー</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">WebViewにログインするには、インターネットへのアクセスが必要です</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">アプリと共有する情報をコントロールすることができます。</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">画像のダウンロードで何らかのエラーが発生しました。</string>
+    <string name="com_facebook_share_button_text" gender="unknown">シェアする</string>
+    <string name="com_facebook_send_button_text" gender="unknown">送信</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">&lt;b&gt;facebook.com/device&lt;/b&gt;にアクセスして、上のコードを入力してください。</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">アカウントをリンクするには、モバイル機器でFacebookアプリを開いて、お知らせをご確認ください。</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- または -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">ログインを実行</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">%1$sとしてログイン</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">別のアカウントでログイン</string>
 </resources>
diff --git a/facebook/src/main/res/values-kn/strings.xml b/facebook/src/main/res/values-kn/strings.xml
index e95d4b409..d6ac550b0 100644
--- a/facebook/src/main/res/values-kn/strings.xml
+++ b/facebook/src/main/res/values-kn/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: kn_IN -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">ಇಷ್ಟವಾಗಿದೆ</string>
-    <string name="com_facebook_like_button_liked">ಇಷ್ಟಪಟ್ಟಿದ್ದಾರೆ</string>
-    <string name="com_facebook_loginview_log_out_button">ಲಾಗ್‌ ಔಟ್‌</string>
-    <string name="com_facebook_loginview_log_in_button">ಲಾಗ್‌ ಇನ್‌</string>
-    <string name="com_facebook_loginview_log_in_button_long">Facebook ಮೂಲಕ ಲಾಗ್‌ ಇನ್‌ ಮಾಡಿ</string>
-    <string name="com_facebook_loginview_logged_in_as">ಇದರಂತೆ ಲಾಗಿನ್‌ ಮಾಡಲಾಗಿದೆ: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Facebook ಬಳಸಿಕೊಂಡು ಲಾಗಿನ್‌ ಮಾಡಲಾಗಿದೆ</string>
-    <string name="com_facebook_loginview_log_out_action">ಲಾಗ್‌ ಔಟ್‌</string>
-    <string name="com_facebook_loginview_cancel_action">ರದ್ದುಮಾಡು</string>
-    <string name="com_facebook_loading">ಲೋಡ್‌ ಆಗುತ್ತಿದೆ...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest ದೋಷ</string>
-    <string name="com_facebook_internet_permission_error_message">WebView ಲಾಗಿನ್‌ಗೆ ಇಂಟರ್ನೆಟ್ ಅನುಮತಿಯ ಅಗತ್ಯವಿದೆ</string>
-    <string name="com_facebook_tooltip_default">ಹೊಸ! ನೀವು ನಿಯಂತ್ರಣದಲ್ಲಿರುವಿರಿ - ನೀವು ಅಪ್ಲಿಕೇಶನ್‌ಗಳನ್ನು ಬಳಸಿಕೊಂಡು ಹಂಚಿಕೊಳ್ಳಲು ಬಯಸುವ ವಿಷಯವನ್ನು ಆರಿಸಿ.</string>
-    <string name="com_facebook_image_download_unknown_error">ಚಿತ್ರವನ್ನು ಡೌನ್‌ಲೋಡ್‌ ಮಾಡುವಾಗ ಅನಿರೀಕ್ಷಿತ ದೋಷ ಕಂಡುಬಂದಿದೆ.</string>
-    <string name="com_facebook_share_button_text">ಹಂಚಿಕೊಳ್ಳಿ</string>
-    <string name="com_facebook_send_button_text">ಕಳುಹಿಸಿ</string>
-    <string name="com_facebook_device_auth_instructions">ನಿಮ್ಮ ಸ್ಮಾರ್ಟ್‌ ಫೋನ್‌ ಅಥವಾ ಕಂಪ್ಯೂಟರ್‌ನಲ್ಲಿ %@ ಗೆ ಭೇಟಿ ನೀಡಿ ಮತ್ತು ಈ ಕೋಡ್‌ ಅನ್ನು ನಮೂದಿಸಿ:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">ಇಷ್ಟ</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">ಇಷ್ಟಪಟ್ಟಿದ್ದಾರೆ</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">ಲಾಗ್ ಔಟ್</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">ಲಾಗ್ ಇನ್</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Facebook ನೊಂದಿಗೆ ಲಾಗ್ ಇನ್ ಮಾಡಿ</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Facebook ನೊಂದಿಗೆ ಮುಂದುವರಿಸಿ</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">%1$s ಎಂದು ಲಾಗಿನ್ ಮಾಡಲಾಗಿದೆ</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Facebook ಬಳಸಿ ಲಾಗಿನ್ ಮಾಡಲಾಗಿದೆ</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">ಲಾಗ್ ಔಟ್</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">ರದ್ದುಮಾಡು</string>
+    <string name="com_facebook_loading" gender="unknown">ಲೋಡ್ ಆಗುತ್ತಿದೆ...</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">Android ಮ್ಯಾನಿಫೆಸ್ಟ್ ದೋಷ</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">ವೆಬ್ ವೀಕ್ಷಣೆ ಲಾಗಿನ್‌ಗೆ ಇಂಟರ್ನೆಟ್ ಅನುಮತಿಯ ಅಗತ್ಯವಿದೆ</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">ನೀವು ನಿಯಂತ್ರಣದಲ್ಲಿದ್ದಿರಿ- ಅಪ್ಲಿಕೇಶನ್‌ಗಳೊಂದಿಗೆ ನೀವು ಯಾವ ಮಾಹಿತಿಯನ್ನು ಹಂಚಿಕೊಳ್ಳಬೇಕೆಂದು ಆಯ್ಕೆಮಾಡಿ.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">ಚಿತ್ರವನ್ನು ಡೌನ್‌ಲೋಡ್ ಮಾಡುವಾಗ ಅನಿರೀಕ್ಷಿತ ದೋಷ.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">ಹಂಚಿರಿ</string>
+    <string name="com_facebook_send_button_text" gender="unknown">ಕಳುಹಿಸಿ</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">&lt;b&gt;facebook.com/device&lt;/b&gt; ಗೆ ಭೇಟಿ ನೀಡಿ ಮತ್ತು ಮೇಲೆ ತೋರಿಸಿದ ಕೋಡ್ ಅನ್ನು ನಮೂದಿಸಿ.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">ನಿಮ್ಮ ಖಾತೆಯನ್ನು ಸಂಪರ್ಕಿಸಲು, ನಿಮ್ಮ ಮೊಬೈಲ್ ಸಾಧನದಲ್ಲಿ Facebook ಅಪ್ಲಿಕೇಶನ್ ತೆರೆಯಿರಿ ಮತ್ತು ಅಧಿಸೂಚನೆಗಳಿಗಾಗಿ ಪರಿಶೀಲಿಸಿ.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- ಅಥವಾ -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">ಲಾಗಿನ್ ಖಚಿತಪಡಿಸಿ</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">%1$s ಎಂದು ಮುಂದುವರಿಸಿ</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">ನೀವಲ್ಲವೇ?</string>
 </resources>
diff --git a/facebook/src/main/res/values-ko/strings.xml b/facebook/src/main/res/values-ko/strings.xml
index 293f0239a..1e2b9b85b 100644
--- a/facebook/src/main/res/values-ko/strings.xml
+++ b/facebook/src/main/res/values-ko/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ko_KR -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">좋아요</string>
-    <string name="com_facebook_like_button_liked">좋아요</string>
-    <string name="com_facebook_loginview_log_out_button">로그아웃</string>
-    <string name="com_facebook_loginview_log_in_button">로그인</string>
-    <string name="com_facebook_loginview_log_in_button_long">Facebook으로 로그인</string>
-    <string name="com_facebook_loginview_logged_in_as">로그인할 이름: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Facebook 계정으로 로그인함</string>
-    <string name="com_facebook_loginview_log_out_action">로그아웃</string>
-    <string name="com_facebook_loginview_cancel_action">취소</string>
-    <string name="com_facebook_loading">읽어들이는 중...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest 오류</string>
-    <string name="com_facebook_internet_permission_error_message">WebView에 로그인하려면 인터넷 권한이 필요합니다</string>
-    <string name="com_facebook_tooltip_default">새로운 기능! 이제 앱과 어떤 정보를 공유할지 자유롭게 선택할 수 있습니다.</string>
-    <string name="com_facebook_image_download_unknown_error">이미지를 다운로드하는 중 예기치 않은 오류가 발생했습니다.</string>
-    <string name="com_facebook_share_button_text">공유하기</string>
-    <string name="com_facebook_send_button_text">보내기</string>
-    <string name="com_facebook_device_auth_instructions">스마트폰이나 컴퓨터에서 %@ 주소를 방문하여 다음 코드를 입력하세요.</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">좋아요</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">좋아요</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">로그아웃</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">로그인</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Facebook으로 로그인</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Facebook으로 계속하기</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">로그인 사용자: %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Facebook을 사용하여 로그인함</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">로그아웃</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">취소</string>
+    <string name="com_facebook_loading" gender="unknown">읽어들이는 중...</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">AndroidManifest 오류</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">WebView 로그인에 인터넷 권한이 필요합니다</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">앱과 공유할 정보를 자유롭게 선택할 수 있습니다.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">이미지를 다운로드하는 중 예기치 않은 오류가 발생했습니다.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">공유하기</string>
+    <string name="com_facebook_send_button_text" gender="unknown">보내기</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">&lt;b&gt;facebook.com/device&lt;/b&gt;에 방문하여 위 코드를 입력하세요.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">계정에 연결하려면 모바일 기기에서 Facebook 앱을 열고 알림을 확인하세요.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- 또는 -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">로그인 확인</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">%1$s님으로 계속</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">회원님이 아닌가요?</string>
 </resources>
diff --git a/facebook/src/main/res/values-ml/strings.xml b/facebook/src/main/res/values-ml/strings.xml
index 5a304a369..17c55e1ea 100644
--- a/facebook/src/main/res/values-ml/strings.xml
+++ b/facebook/src/main/res/values-ml/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ml_IN -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">ലൈക്കുചെയ്യുക</string>
-    <string name="com_facebook_like_button_liked">ലൈക്കുചെയ്‌‌തു</string>
-    <string name="com_facebook_loginview_log_out_button">ലോഗ്ഔട്ട് ചെയ്യുക</string>
-    <string name="com_facebook_loginview_log_in_button">ലോഗിൻ ചെയ്യുക</string>
-    <string name="com_facebook_loginview_log_in_button_long">Facebook ഉപയോഗിച്ച് ലോഗിൻ ചെയ്യുക</string>
-    <string name="com_facebook_loginview_logged_in_as">ഇതുപ്രകാരം ലോഗിൻ ചെയ്യുക: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Facebook ഉപയോഗിച്ച് ലോഗിൻ ചെയ്‌തു</string>
-    <string name="com_facebook_loginview_log_out_action">ലോഗ്ഔട്ട് ചെയ്യുക</string>
-    <string name="com_facebook_loginview_cancel_action">റദ്ദാക്കുക</string>
-    <string name="com_facebook_loading">ലോഡുചെയ്യുന്നു...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest പിശക്</string>
-    <string name="com_facebook_internet_permission_error_message">WebView ലോഗിന് ഇന്റർനെറ്റ് അനുമതി ആവശ്യമാണ്</string>
-    <string name="com_facebook_tooltip_default">പുതിയത്! നിങ്ങൾ നിയന്ത്രണത്തിലാണ് - നിങ്ങൾക്ക് ആപ്ലിക്കേഷനുകളുമായി പങ്കിടേണ്ടതുണ്ടെങ്കിൽ തിരഞ്ഞെടുക്കുക.</string>
-    <string name="com_facebook_image_download_unknown_error">ചിത്രം ഡൗൺലോഡുചെയ്യുന്നതിൽ അപ്രതീക്ഷിത പിശക് സംഭവിച്ചു.</string>
-    <string name="com_facebook_share_button_text">പങ്കിടുക</string>
-    <string name="com_facebook_send_button_text">അയയ്‌ക്കുക</string>
-    <string name="com_facebook_device_auth_instructions">നിങ്ങളുടെ സ്‌മാർട്ട്ഫോണിലെ അല്ലെങ്കിൽ കമ്പ്യൂട്ടറിലെ %@ സന്ദർശിച്ച് ഇനിപ്പറയുന്ന കോഡ് നൽകുക:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">ലൈക്കുചെയ്യുക</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">ലൈക്കുചെയ്തു</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">ലോഗൗട്ട് ചെയ്യുക</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">ലോഗിന് ചെയ്യുക</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Facebook ഉപയോഗിച്ച് ലോഗിൻ ചെയ്യുക</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Facebook ഉപയോഗിച്ച് തുടരുക</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">എന്നയാളായി ലോഗ് ഇൻ ചെയ്‌തു: %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Facebook ഉപയോഗിച്ച് ലോഗിൻ ചെയ്‌തു</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">ലോഗൗട്ട് ചെയ്യുക</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">റദ്ദാക്കുക</string>
+    <string name="com_facebook_loading" gender="unknown">ലോഡ് ചെയ്യുന്നു…</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">AndroidManifest പിശക്</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">WebView ലോഗിൻ ചെയ്യാൻ ഇന്റർനെറ്റ് അനുമതി ആവശ്യമാണ്</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">നിങ്ങൾ നിയന്ത്രണത്തിലാണ് - ആപ്പുകൾ ഉപയോഗിച്ച് നിങ്ങൾക്ക് എന്ത് വിവരമാണ് പങ്കിടേണ്ടതെന്ന് തിരഞ്ഞെടുക്കുക.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">ഒരു ചിത്രം ഡൗൺലോഡുചെയ്യുമ്പോൾ അജ്ഞാതമായ പിശക് സംഭവിച്ചു.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">പങ്കിടുക</string>
+    <string name="com_facebook_send_button_text" gender="unknown">അയയ്ക്കുക</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">&lt;b&gt;facebook.com/device&lt;/b&gt; സന്ദർശിച്ച് മുകളിൽ കാണിച്ചിരിക്കുന്ന കോഡ് നൽകുക.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">നിങ്ങളുടെ അക്കൗണ്ട് കണക്‌റ്റ്ചെയ്യാൻ, നിങ്ങളുടെ മൊബൈൽ ഉപകരണത്തിലെ Facebook ആപ്പ് തുറന്ന് അറിയിപ്പുകൾ പരിശോധിക്കുക.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- അല്ലെങ്കിൽ -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">ലോഗിൻ സ്ഥിരീകരിക്കുക</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">%1$s എന്നയാളായി തുടരുക</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">നിങ്ങള്‍ അല്ലേ?</string>
 </resources>
diff --git a/facebook/src/main/res/values-mr/strings.xml b/facebook/src/main/res/values-mr/strings.xml
index 55383f985..d01142746 100644
--- a/facebook/src/main/res/values-mr/strings.xml
+++ b/facebook/src/main/res/values-mr/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: mr_IN -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">आवडले</string>
-    <string name="com_facebook_like_button_liked">आवडलेले</string>
-    <string name="com_facebook_loginview_log_out_button">लॉग आउट करा</string>
-    <string name="com_facebook_loginview_log_in_button">लॉग इन करा</string>
-    <string name="com_facebook_loginview_log_in_button_long">फेसबुकसह लॉग इन करा</string>
-    <string name="com_facebook_loginview_logged_in_as">म्हणून लॉग इन केले: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">फेसबुक वापरून लॉग इन केले</string>
-    <string name="com_facebook_loginview_log_out_action">लॉग आउट करा</string>
-    <string name="com_facebook_loginview_cancel_action">रद्द करा</string>
-    <string name="com_facebook_loading">लोड होत आहे...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest त्रुटी</string>
-    <string name="com_facebook_internet_permission_error_message">वेबदृश्य लॉग इन आवश्यकता इंटरनेट परवानगी</string>
-    <string name="com_facebook_tooltip_default">नवीन! आपण नियंत्रणात आहात - आपण कोणती माहिती अनुप्रयोगांसह शेअर करू इच्छिता ते निवडा.</string>
-    <string name="com_facebook_image_download_unknown_error">प्रतिमा डाउनलोड करताना अनपेक्षित त्रुटी.</string>
-    <string name="com_facebook_share_button_text">सामायिक करा</string>
-    <string name="com_facebook_send_button_text">पाठवा</string>
-    <string name="com_facebook_device_auth_instructions">आपला स्‍मार्ट फोन किंवा संगणकावर %@ ला भेट द्या आणि हा कोड प्रविष्‍ट करा:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">आवडले</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">पसंत केले</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">लॉग आउट करा</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">लॉग इन करा</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Facebook सह लॉग इन करा</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Facebook सह चालू ठेवा</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">%1$s म्हणून लॉग इन केले</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Facebook वापरून लॉग इन केले</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">लॉग आउट करा</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">रद्द करा</string>
+    <string name="com_facebook_loading" gender="unknown">लोड करत आहे…</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">AndroidManifest त्रुटी</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">WebView लॉग इन ला इंटरनेट परवानगीची आवश्यकता आहे</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">तुम्ही नियंत्रणात आहात - तुम्ही अॅपसह कोणती माहिती सामायिक करू इच्छिता ते निवडा.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">प्रतिमा डाउनलोड करत असताना अनपेक्षित त्रुटी आली.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">शेअर करा</string>
+    <string name="com_facebook_send_button_text" gender="unknown">पाठवा</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">&lt;b&gt;facebook.com/device&lt;/b&gt; भेट द्या आणि वरील कोड प्रविष्ट करा.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">तुमचे खाते कनेक्ट करण्यासाठी, तुमच्या मोबाईल उपकरणावर Facebook अॅप उघडा आणि सूचना तपासा.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- किंवा -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">लॉग इन पुष्टी करा</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">%1$s म्हणून चालू ठेवा</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">आपण नाही?</string>
 </resources>
diff --git a/facebook/src/main/res/values-ms/strings.xml b/facebook/src/main/res/values-ms/strings.xml
index 2c5b536f2..203791a31 100644
--- a/facebook/src/main/res/values-ms/strings.xml
+++ b/facebook/src/main/res/values-ms/strings.xml
@@ -1,39 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ms_MY -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Suka</string>
-    <string name="com_facebook_like_button_liked">Disukai</string>
-    <string name="com_facebook_loginview_log_out_button">Log keluar</string>
-    <string name="com_facebook_loginview_log_in_button">Log masuk</string>
-    <string name="com_facebook_loginview_log_in_button_long">Log masuk dengan Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Dilog masuk sebagai: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Dilog masuk menggunakan Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Log keluar</string>
-    <string name="com_facebook_loginview_cancel_action">Batal</string>
-    <string name="com_facebook_loading">Memuatkan...</string>
-    <string name="com_facebook_internet_permission_error_title">Ralat AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">Log masuk WebView memerlukan kebenaran INTERNET</string>
-    <string name="com_facebook_tooltip_default">Baru! Anda yang mengawal - pilih maklumat yang anda ingin kongsi dengan aplikasi.</string>
-    <string name="com_facebook_image_download_unknown_error">Ralat tidak dijangka ketika memuat turun imej.</string>
-    <string name="com_facebook_share_button_text">Kongsi</string>
-    <string name="com_facebook_send_button_text">Hantar</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">Suka</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">Disukai</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">Log keluar</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">Log masuk</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Log masuk dengan Facebook</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Teruskan dengan Facebook</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">Dilog masuk sebagai %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Log masuk menggunakan Facebook</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">Log keluar</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">Batal</string>
+    <string name="com_facebook_loading" gender="unknown">Memuatkan...</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">Ralat AndroidManifest</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">Log masuk WebView memerlukan kebenaran INTERNET</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">Anda berada dalam kawalan - pilih maklumat yang anda mahu berkongsi dengan aplikasi.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">Ralat tidak dijangka semasa memuat turun imej.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">Kongsi</string>
+    <string name="com_facebook_send_button_text" gender="unknown">Hantar</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">Lawati &lt;b&gt;facebook.com/device&lt;/b&gt; dan masukkan kod yang ditunjukkan di atas.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">Untuk menyambungkan akaun anda, buka aplikasi Facebook pada peranti mudah alih anda, dan semak untuk pemberitahuan.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- ATAU -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">Sahkan Log Masuk</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">Teruskan sebagai %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">Bukan anda?</string>
 </resources>
diff --git a/facebook/src/main/res/values-nb/strings.xml b/facebook/src/main/res/values-nb/strings.xml
index e32f25ea7..014e5d823 100644
--- a/facebook/src/main/res/values-nb/strings.xml
+++ b/facebook/src/main/res/values-nb/strings.xml
@@ -1,40 +1,29 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: nb_NO -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Liker</string>
-    <string name="com_facebook_like_button_liked">Likt</string>
-    <string name="com_facebook_loginview_log_out_button">Logg ut</string>
-    <string name="com_facebook_loginview_log_in_button">Logg inn</string>
-    <string name="com_facebook_loginview_log_in_button_long">Logg inn med Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Logget inn som: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Logget inn med Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Logg ut</string>
-    <string name="com_facebook_loginview_cancel_action">Avbryt</string>
-    <string name="com_facebook_loading">Laster inn …</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest-feil</string>
-    <string name="com_facebook_internet_permission_error_message">Webvisning-innlogging krever INTERNETT-tillatelse</string>
-    <string name="com_facebook_tooltip_default">Nyhet! Du bestemmer – velg hvilke opplysninger du vil dele med appene.</string>
-    <string name="com_facebook_image_download_unknown_error">Det oppstod en uventet feil ved nedlasting av et bilde.</string>
-    <string name="com_facebook_share_button_text">Del</string>
-    <string name="com_facebook_send_button_text">Send</string>
-    <string name="com_facebook_device_auth_instructions">Gå til %@ på smarttelefonen eller datamaskinen din, og oppgi denne koden:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">Liker</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">Likt</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">Logg av</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">Logg inn</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Logg inn med Facebook</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Fortsett med Facebook</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">Logget inn som %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Innlogget med Facebook</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">Logg av</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">Avbryt</string>
+    <string name="com_facebook_loading" gender="unknown">Laster inn ...</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">AndroidManifest-feil</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">WebView-innlogging krever INTERNETT-tillatelse</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">Du bestemmer – velg hvilke opplysninger du vil dele med apper.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">Det oppstod en uvented feil under nedlasting av et bilde.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">Del</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">Gå til &lt;b&gt;facebook.com/device&lt;/b&gt; og skriv inn koden som vises over.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">Koble til kontoen din ved å åpne Facebook-appen på mobilenheten din og se etter varsler.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">– ELLER –</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">Bekreft innlogging</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">Fortsett som %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">Ikke deg?</string>
 </resources>
diff --git a/facebook/src/main/res/values-nl/strings.xml b/facebook/src/main/res/values-nl/strings.xml
index 5bd975f03..32ebcc148 100644
--- a/facebook/src/main/res/values-nl/strings.xml
+++ b/facebook/src/main/res/values-nl/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: nl_NL -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Vind ik leuk</string>
-    <string name="com_facebook_like_button_liked">Vind ik leuk</string>
-    <string name="com_facebook_loginview_log_out_button">Afmelden</string>
-    <string name="com_facebook_loginview_log_in_button">Aanmelden</string>
-    <string name="com_facebook_loginview_log_in_button_long">Aanmelden met Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Aangemeld als: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Aangemeld via Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Afmelden</string>
-    <string name="com_facebook_loginview_cancel_action">Annuleren</string>
-    <string name="com_facebook_loading">Laden…</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest Error</string>
-    <string name="com_facebook_internet_permission_error_message">Voor aanmelding via webweergave is de toestemming INTERNET vereist</string>
-    <string name="com_facebook_tooltip_default">Nieuw! Jij hebt de controle. Kies welke informatie je met apps wilt delen.</string>
-    <string name="com_facebook_image_download_unknown_error">Onverwachte fout tijdens het downloaden van een afbeelding.</string>
-    <string name="com_facebook_share_button_text">Delen</string>
-    <string name="com_facebook_send_button_text">Verzenden</string>
-    <string name="com_facebook_device_auth_instructions">Ga op je smartphone of computer naar %@ en voer deze code in:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">Vind ik leuk</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">Vind ik leuk</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">Afmelden</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">Aanmelden</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Aanmelden met Facebook</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Doorgaan met Facebook</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">Aangemeld als: %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Aangemeld via Facebook</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">Afmelden</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">Annuleren</string>
+    <string name="com_facebook_loading" gender="unknown">Laden...</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">AndroidManifest-fout</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">Voor WebView-aanmelding is INTERNET-toestemming vereist</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">Jij hebt de controle: bepaal welke informatie je met apps wilt delen.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">Onverwachte fout bij downloaden van afbeelding.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">Delen</string>
+    <string name="com_facebook_send_button_text" gender="unknown">Verzenden</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">Ga naar &lt;b&gt;facebook.com/device&lt;/b&gt; en voer de bovenstaande code in.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">Als je je account wilt koppelen, open je de Facebook-app op je mobiele apparaat en controleer je je meldingen.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- OF -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">Aanmelding bevestigen</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">Doorgaan als %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">Ben jij dit niet?</string>
 </resources>
diff --git a/facebook/src/main/res/values-pa/strings.xml b/facebook/src/main/res/values-pa/strings.xml
index ed15cdab4..1c52a62c5 100644
--- a/facebook/src/main/res/values-pa/strings.xml
+++ b/facebook/src/main/res/values-pa/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: pa_IN -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">ਪਸੰਦ ਕਰੋ</string>
-    <string name="com_facebook_like_button_liked">ਪਸੰਦ ਕੀਤਾ ਗਿਆ</string>
-    <string name="com_facebook_loginview_log_out_button">ਲੌਗ ਆਉਟ ਕਰੋ</string>
-    <string name="com_facebook_loginview_log_in_button">ਲੌਗ ਇਨ ਕਰੋ</string>
-    <string name="com_facebook_loginview_log_in_button_long">Facebook ਦੇ ਨਾਲ ਲੌਗ ਇਨ ਕਰੋ</string>
-    <string name="com_facebook_loginview_logged_in_as">ਇਸ ਵੱਜੋਂ ਲੌਗ ਇਨ ਕੀਤਾ ਗਿਆ: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Facebook ਦਾ ਉਪਯੋਗ ਕਰਕੇ ਲੌਗ ਇਨ ਕੀਤਾ ਗਿਆ</string>
-    <string name="com_facebook_loginview_log_out_action">ਲੌਗ ਆਉਟ ਕਰੋ</string>
-    <string name="com_facebook_loginview_cancel_action">ਰੱਦ ਕਰੋ</string>
-    <string name="com_facebook_loading">ਲੋਡ ਕਰ ਰਿਹਾ ਹੈ...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest ਤਰੁੱਟੀ</string>
-    <string name="com_facebook_internet_permission_error_message">WebView ਲੌਗ ਨੂੰ ਇੰਟਰਨੈੱਟ ਅਨੁਮਤੀ ਦੀ ਲੋੜ ਹੁੰਦੀ ਹੈ</string>
-    <string name="com_facebook_tooltip_default">ਨਵਾਂ! ਤੁ\ਸੀਂ ਨਿਯੰਤਰਣ ਵਿੱਚ ਹੋ - ਉਹ ਜਾਣਕਾਰੀ ਚੁਣੋ ਜੋ ਤੁਸੀਂ ਐਪਸ ਦੇ ਨਾਲ ਸਾਂਝੀ ਕਰਨੀ ਚਾਹੁੰਦੇ ਹੋ।</string>
-    <string name="com_facebook_image_download_unknown_error">ਕਿਸੇ ਤਸਵੀਰ ਨੂੰ ਡਾਉਨਲੋਡ ਕਰਨ ਵੇਲੇ ਅਗਿਆਤ ਤਰੁੱਟੀ ਹੋ ਗਈ।</string>
-    <string name="com_facebook_share_button_text">ਸਾਂਝਾ ਕਰੋ</string>
-    <string name="com_facebook_send_button_text">ਭੇਜੋ</string>
-    <string name="com_facebook_device_auth_instructions">ਆਪਣੇ ਸਮਾਰਟਫ਼ੋਨ ਜਾਂ ਕੰਪਿਊਟਰ \'ਤੇ %@ ਵਿੱਚ ਜਾਓ ਅਤੇ ਇਸ ਕੋਡ ਨੂੰ ਦਾਖ਼ਲ ਕਰੋ:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">ਪਸੰਦ ਕਰੋ</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">ਪਸੰਦ ਕੀਤਾ</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">ਲੌਗ ਆਉਟ ਕਰੋ</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">ਲਾਗ ਇਨ</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Facebook ਦੇ ਨਾਲ ਲੌਗ ਇਨ ਕਰੋ</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Facebook ਨਾਲ ਜਾਰੀ ਰੱਖੋ</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">ਇਸ ਵੱਜੋਂ ਲੌਗ ਇਨ ਕੀਤਾ ਗਿਆ: %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Facebook ਦੀ ਵਰਤੋਂ ਕਰਦੇ ਹੋਏ ਲੌਗ ਇਨ ਕਰੋ</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">ਲੌਗ ਆਉਟ ਕਰੋ</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">ਰੱਦ ਕਰੋ</string>
+    <string name="com_facebook_loading" gender="unknown">ਲੋਡ ਹੋ ਰਿਹਾ ਹੈ...</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">AndroidManifest ਤਰੁੱਟੀ</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">WebView ਵਿੱਚ ਲੌਗ ਇਨ ਕਰਨ ਲਈ ਇੰਟਰਨੈੱਟ ਦੀ ਇਜਾਜ਼ਤ ਦੀ ਲੋੜ ਹੈ</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">ਤੁਸੀਂ ਨਿਯੰਤਰਣ ਵਿੱਚ ਹੋ - ਇਹ ਚੁਣੋ ਕਿ ਐਪਾਂ ਨਾਲ ਤੁਸੀਂ ਕਿਹੜੀ ਜਾਣਕਾਰੀ ਨੂੰ ਸਾਂਝਾ ਕਰਨਾ ਚਾਹੁੰਦੇ ਹੋ।</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">ਇੱਕ ਚਿੱਤਰ ਡਾਉਨਲੋਡ ਕਰਨ ਦੌਰਾਨ ਅਕਲਪਿਤ ਤਰੁੱਟੀ।</string>
+    <string name="com_facebook_share_button_text" gender="unknown">ਸਾਂਝਾ ਕਰੋ</string>
+    <string name="com_facebook_send_button_text" gender="unknown">ਭੇਜੋ</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">&lt;b&gt;facebook.com/device&lt;/b&gt; \'ਤੇ ਵਿਜਿਟ ਕਰੋ ਅਤੇ ਉੱਪਰ ਦਿੱਤੇ ਕੋਡ ਨੂੰ ਦਾਖ਼ਲ ਕਰੋ।</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">ਆਪਣੇ ਖਾਤੇ ਨੂੰ ਕਨੈਕਟ ਕਰਨ ਲਈ, ਮੋਬਾਈਲ ਡਿਵਾਈਸ \'ਤੇ Facebook ਐਪ ਖੋਲ੍ਹੋ ਅਤੇ ਸੂਚਨਾਵਾਂ ਦੀ ਜਾਂਚ ਕਰੋ।</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- ਜਾਂ -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">ਲੌਗ ਇਨ ਦੀ ਪੁਸ਼ਟੀ ਕਰੋ</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">%1$s ਵਜੋਂ ਜਾਰੀ ਰੱਖੋ</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">ਇਹ ਤੁਸੀਂ ਨਹੀਂ ਹੋ?</string>
 </resources>
diff --git a/facebook/src/main/res/values-pl/strings.xml b/facebook/src/main/res/values-pl/strings.xml
index 5ee1ccbdf..7f09f3e1b 100644
--- a/facebook/src/main/res/values-pl/strings.xml
+++ b/facebook/src/main/res/values-pl/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: pl_PL -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Lubię to!</string>
-    <string name="com_facebook_like_button_liked">Polubione</string>
-    <string name="com_facebook_loginview_log_out_button">Wyloguj się</string>
-    <string name="com_facebook_loginview_log_in_button">Zaloguj się</string>
-    <string name="com_facebook_loginview_log_in_button_long">Zaloguj się przez Facebooka</string>
-    <string name="com_facebook_loginview_logged_in_as">Zalogowano jako: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Zalogowano przez Facebooka</string>
-    <string name="com_facebook_loginview_log_out_action">Wyloguj się</string>
-    <string name="com_facebook_loginview_cancel_action">Anuluj</string>
-    <string name="com_facebook_loading">Ładowanie...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest Error</string>
-    <string name="com_facebook_internet_permission_error_message">Logowanie się do sieci wymaga zezwolenia na dostęp do INTERNETU</string>
-    <string name="com_facebook_tooltip_default">Nowość! Masz pełną kontrolę – określ, jakie informacje chcesz udostępniać aplikacjom.</string>
-    <string name="com_facebook_image_download_unknown_error">Nieoczekiwany błąd podczas pobierania obrazu.</string>
-    <string name="com_facebook_share_button_text">Udostępnij</string>
-    <string name="com_facebook_send_button_text">Wyślij</string>
-    <string name="com_facebook_device_auth_instructions">Przejdź do %@ na smartfonie lub komputerze i wprowadź ten kod:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">Lubię to!</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">Lubisz to</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">Wyloguj się</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">Logowanie się</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Zaloguj się przez Facebooka</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Kontynuuj za pośrednictwem Facebooka</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">Zalogowano jako: %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Zalogowano przy użyciu Facebooka</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">Wyloguj się</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">Anuluj</string>
+    <string name="com_facebook_loading" gender="unknown">Ładowanie…</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">Błąd AndroidManifest</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">Logowanie WebView wymaga uprawnienia INTERNET</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">Zachowujesz kontrolę — wybierz informacje, które chcesz udostępniać w aplikacjach.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">Nieoczekiwany błąd podczas pobierania obrazu.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">Udostępnij</string>
+    <string name="com_facebook_send_button_text" gender="unknown">Wyślij</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">Odwiedź stronę &lt;b&gt;facebook.com/device&lt;/b&gt; i wprowadź powyższy kod.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">Aby połączyć konto, otwórz aplikację Facebook na urządzeniu mobilnym i sprawdź powiadomienia.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- LUB -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">Potwierdź logowanie</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">Kontynuuj jako %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">To nie Ty?</string>
 </resources>
diff --git a/facebook/src/main/res/values-pt-rPT/strings.xml b/facebook/src/main/res/values-pt-rPT/strings.xml
index 99a240396..c4c84ff99 100644
--- a/facebook/src/main/res/values-pt-rPT/strings.xml
+++ b/facebook/src/main/res/values-pt-rPT/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: pt_PT -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Gosto</string>
-    <string name="com_facebook_like_button_liked">Gostei</string>
-    <string name="com_facebook_loginview_log_out_button">Terminar sessão</string>
-    <string name="com_facebook_loginview_log_in_button">Iniciar sessão</string>
-    <string name="com_facebook_loginview_log_in_button_long">Iniciar sessão com o Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Com sessão iniciada como: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Com sessão iniciada através do Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Terminar sessão</string>
-    <string name="com_facebook_loginview_cancel_action">Cancelar</string>
-    <string name="com_facebook_loading">A carregar...</string>
-    <string name="com_facebook_internet_permission_error_title">Erro AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">O início de sessão WebView necessita de permissão para aceder à INTERNET</string>
-    <string name="com_facebook_tooltip_default">Novidade! Tens o controlo: escolhe a informação que pretendes partilhar com as aplicações.</string>
-    <string name="com_facebook_image_download_unknown_error">Ocorreu um erro inesperado ao descarregar uma imagem.</string>
-    <string name="com_facebook_share_button_text">Partilhar</string>
-    <string name="com_facebook_send_button_text">Enviar</string>
-    <string name="com_facebook_device_auth_instructions">Visita %@ no teu smartphone ou computador e insere este código:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">Gosto</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">Gostaste</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">Terminar a sessão</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">Iniciar sessão</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Iniciar sessão com o Facebook</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Continuar com o Facebook</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">Com sessão iniciada como %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Com sessão iniciada com o Facebook</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">Terminar a sessão</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">Cancelar</string>
+    <string name="com_facebook_loading" gender="unknown">A carregar...</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">Erro AndroidManifest</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">O início de sessão WebView requer a permissão INTERNET</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">Tens o controlo. Escolhe as informações que queres partilhar com as apps.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">Ocorreu um erro inesperado ao descarregar uma imagem.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">Partilhar</string>
+    <string name="com_facebook_send_button_text" gender="unknown">Enviar</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">Visita &lt;b&gt;facebook.com/device&lt;/b&gt; e insere o código apresentado abaixo.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">Para associares a tua conta, abre a app Facebook no teu dispositivo móvel e consulta as notificações.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- OU -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">Confirmar início de sessão</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">Continuar como %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">Não és tu?</string>
 </resources>
diff --git a/facebook/src/main/res/values-pt/strings.xml b/facebook/src/main/res/values-pt/strings.xml
index 0c4c4902d..129a4baa7 100644
--- a/facebook/src/main/res/values-pt/strings.xml
+++ b/facebook/src/main/res/values-pt/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: pt_BR -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Curtir</string>
-    <string name="com_facebook_like_button_liked">Curtiu</string>
-    <string name="com_facebook_loginview_log_out_button">Sair</string>
-    <string name="com_facebook_loginview_log_in_button">Entrar</string>
-    <string name="com_facebook_loginview_log_in_button_long">Entrar com o Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Conectado como: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Você entrou usando o Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Sair</string>
-    <string name="com_facebook_loginview_cancel_action">Cancelar</string>
-    <string name="com_facebook_loading">Carregando...</string>
-    <string name="com_facebook_internet_permission_error_title">Erro no AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">A permissão de INTERNET é necessária para fazer o login WebView</string>
-    <string name="com_facebook_tooltip_default">Novidade! Você está no controle - escolha quais informações quer compartilhar com os aplicativos.</string>
-    <string name="com_facebook_image_download_unknown_error">Erro inesperado ao baixar uma imagem.</string>
-    <string name="com_facebook_share_button_text">Compartilhar</string>
-    <string name="com_facebook_send_button_text">Envio</string>
-    <string name="com_facebook_device_auth_instructions">Acesse %@ no seu smartphone ou computador e insira este código:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">Curtir</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">Curtiu</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">Sair</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">Entrar</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Entrar com o Facebook</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Continuar com o Facebook</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">Conectado como: %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Conectado usando o Facebook</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">Sair</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">Cancelar</string>
+    <string name="com_facebook_loading" gender="unknown">Carregando...</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">Erro AndroidManifest</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">O login do WebView exige permissão da INTERNET</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">Você está no controle — escolha quais informações você quer compartilhar com os aplicativos.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">Erro inesperado ao baixar uma imagem.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">Compartilhar</string>
+    <string name="com_facebook_send_button_text" gender="unknown">Enviar</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">Acesse &lt;b&gt;facebook.com/device&lt;/b&gt; e insira o código mostrado acima.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">Para conectar sua conta, abra o aplicativo do Facebook no seu dispositivo móvel e verifique se há notificações.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- OU -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">Confirmar login</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">Continuar como %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">Não é você?</string>
 </resources>
diff --git a/facebook/src/main/res/values-ru/strings.xml b/facebook/src/main/res/values-ru/strings.xml
index 9b979802c..a3a7568a6 100644
--- a/facebook/src/main/res/values-ru/strings.xml
+++ b/facebook/src/main/res/values-ru/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ru_RU -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Нравится</string>
-    <string name="com_facebook_like_button_liked">Понравилось</string>
-    <string name="com_facebook_loginview_log_out_button">Выход</string>
-    <string name="com_facebook_loginview_log_in_button">Вход</string>
-    <string name="com_facebook_loginview_log_in_button_long">Вход через Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Вы вошли как: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Выполнен вход с помощью Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Выход</string>
-    <string name="com_facebook_loginview_cancel_action">Отменить</string>
-    <string name="com_facebook_loading">Загрузка...</string>
-    <string name="com_facebook_internet_permission_error_title">Ошибка AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">Для входа в WebView необходимо разрешение INTERNET</string>
-    <string name="com_facebook_tooltip_default">Новинка! У вас все под контролем — выбирайте, какой информацией вы хотите поделиться с приложениями.</string>
-    <string name="com_facebook_image_download_unknown_error">При загрузке изображения возникла неожиданная ошибка.</string>
-    <string name="com_facebook_share_button_text">Поделиться</string>
-    <string name="com_facebook_send_button_text">Отправить</string>
-    <string name="com_facebook_device_auth_instructions">Откройте «%@» на своем смартфофне или компьютере и введите этот код:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">Нравится</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">Нравится</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">Выйти</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">Войти</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Вход через Facebook</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Продолжить с Facebook</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">Вы вошли как %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Выполнен вход через Facebook</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">Выйти</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">Отмена</string>
+    <string name="com_facebook_loading" gender="unknown">Загрузка...</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">Ошибка AndroidManifest</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">Для входа через WebView необходимо разрешение INTERNET</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">Контроль над данными — выберите, какой информацией вы хотите делиться с приложениями.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">Неожиданная ошибка при скачивании изображения.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">Поделиться</string>
+    <string name="com_facebook_send_button_text" gender="unknown">Отправить</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">Откройте &lt;b&gt;facebook.com/device&lt;/b&gt; и введите код, показанный выше.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">Чтобы привязать ваш аккаунт, откройте приложение Facebook на своем мобильном устройстве и проверьте уведомления.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- ИЛИ -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">Подтвердите вход</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">Продолжить как %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">Не Вы?</string>
 </resources>
diff --git a/facebook/src/main/res/values-sk/strings.xml b/facebook/src/main/res/values-sk/strings.xml
index 1924543a7..3c03ba982 100644
--- a/facebook/src/main/res/values-sk/strings.xml
+++ b/facebook/src/main/res/values-sk/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: sk_SK -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Páči sa mi to</string>
-    <string name="com_facebook_like_button_liked">Páči sa mi to</string>
-    <string name="com_facebook_loginview_log_out_button">Odhlásiť sa</string>
-    <string name="com_facebook_loginview_log_in_button">Prihlásiť sa</string>
-    <string name="com_facebook_loginview_log_in_button_long">Prihlásiť sa cez Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Prihlásený ako: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Prihlásený cez Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Odhlásiť sa</string>
-    <string name="com_facebook_loginview_cancel_action">Zrušiť</string>
-    <string name="com_facebook_loading">Načítava sa...</string>
-    <string name="com_facebook_internet_permission_error_title">Chyba súboru AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">Na prihlásenie sa v rozhraní WebView sa vyžaduje povolenie pre INTERNET</string>
-    <string name="com_facebook_tooltip_default">Novinka! Máte to pod kontrolou: vyberte, ktoré informácie chcete zdieľať s aplikáciami.</string>
-    <string name="com_facebook_image_download_unknown_error">Pri sťahovaní obrázka sa vyskytla neočakávaná chyba.</string>
-    <string name="com_facebook_share_button_text">Zdieľať</string>
-    <string name="com_facebook_send_button_text">Odoslať</string>
-    <string name="com_facebook_device_auth_instructions">Navštívte %@ v smartfóne alebo počítači a zadajte tento kód:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">Páči sa mi to</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">Páčilo sa mi to</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">Odhlásiť sa</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">Prihlásiť sa</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Prihlásiť sa cez Facebook</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Pokračovať s Facebookom</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">Prihlásený/-á ako: %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Prihlásený/-á cez Facebook</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">Odhlásiť sa</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">Zrušiť</string>
+    <string name="com_facebook_loading" gender="unknown">Načítava sa…</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">Chyba AndroidManifest</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">Na prihlásenie cez WebView sa vyžaduje povolenie internetu</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">Máte to pod kontrolou: vy určujete, ktoré informácie chcete zdieľať s aplikáciami.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">Pri sťahovaní obrázka sa vyskytla neočakávaná chyba.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">Zdieľať</string>
+    <string name="com_facebook_send_button_text" gender="unknown">Poslať</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">Navštívte stránku &lt;b&gt;facebook.com/device&lt;/b&gt; a zadajte kód zobrazený vyššie.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">Ak si chcete pripojiť účet, vo svojom mobilnom zariadení otvorte aplikáciu Facebook a pozrite si upozornenia.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- ALEBO -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">Potvrdiť prihlásenie</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">Pokračovať ako %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">Nie ste to vy?</string>
 </resources>
diff --git a/facebook/src/main/res/values-sv/strings.xml b/facebook/src/main/res/values-sv/strings.xml
index 2d83109bf..cf95c35ad 100644
--- a/facebook/src/main/res/values-sv/strings.xml
+++ b/facebook/src/main/res/values-sv/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: sv_SE -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Gilla</string>
-    <string name="com_facebook_like_button_liked">Gillade</string>
-    <string name="com_facebook_loginview_log_out_button">Logga ut</string>
-    <string name="com_facebook_loginview_log_in_button">Logga in</string>
-    <string name="com_facebook_loginview_log_in_button_long">Logga in med Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Inloggad som: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Inloggad med Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Logga ut</string>
-    <string name="com_facebook_loginview_cancel_action">Avbryt</string>
-    <string name="com_facebook_loading">Laddar ...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest-fel</string>
-    <string name="com_facebook_internet_permission_error_message">Webbinloggning kräver internetbehörighet</string>
-    <string name="com_facebook_tooltip_default">Nyhet! Du bestämmer – välj vilken info du vill dela med appar.</string>
-    <string name="com_facebook_image_download_unknown_error">Oväntat fel vid hämtning av en bild.</string>
-    <string name="com_facebook_share_button_text">Dela</string>
-    <string name="com_facebook_send_button_text">Skicka</string>
-    <string name="com_facebook_device_auth_instructions">Besök %@ på din smartphone eller dator och ange den här koden:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">Gilla</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">Gillat</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">Logga ut</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">Logga in</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Logga in med Facebook</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Fortsätt med Facebook</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">Inloggad som: %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Inloggad med Facebook</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">Logga ut</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">Avbryt</string>
+    <string name="com_facebook_loading" gender="unknown">Laddar ...</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">AndroidManifest-fel</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">WebView-inloggning kräver INTERNET-åtkomst</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">Du bestämmer – välj vilken information du vill dela med appar.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">Ett oväntat fel inträffade när en bild skulle laddas ned.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">Dela</string>
+    <string name="com_facebook_send_button_text" gender="unknown">Skicka</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">Gå till &lt;b&gt;facebook.com/device&lt;/b&gt; och skriv in koden som visas ovan.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">Koppla ditt konto genom att öppna Facebook-appen på din mobila enhet och leta efter aviseringar.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- ELLER -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">Bekräfta inloggning</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">Fortsätt som %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">Inte du?</string>
 </resources>
diff --git a/facebook/src/main/res/values-ta/strings.xml b/facebook/src/main/res/values-ta/strings.xml
index e15ba007d..7508b4d25 100644
--- a/facebook/src/main/res/values-ta/strings.xml
+++ b/facebook/src/main/res/values-ta/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: ta_IN -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">விருப்பம்</string>
-    <string name="com_facebook_like_button_liked">விரும்பப்பட்டது</string>
-    <string name="com_facebook_loginview_log_out_button">வெளியேறு</string>
-    <string name="com_facebook_loginview_log_in_button">உள்நுழைவு</string>
-    <string name="com_facebook_loginview_log_in_button_long">Facebook மூலம் உள்நுழையவும்</string>
-    <string name="com_facebook_loginview_logged_in_as">உள்நுழைந்துள்ள கணக்கு: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Facebook மூலம் உள்நுழையப்பட்டுள்ளது</string>
-    <string name="com_facebook_loginview_log_out_action">வெளியேறு</string>
-    <string name="com_facebook_loginview_cancel_action">ரத்துசெய்</string>
-    <string name="com_facebook_loading">ஏற்றுகிறது...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest பிழை</string>
-    <string name="com_facebook_internet_permission_error_message">WebView இல் உள்நுழைய இணைய அனுமதி தேவை</string>
-    <string name="com_facebook_tooltip_default">புதிது! உங்கள் கட்டுப்பாட்டில் இருப்பதால், பயன்பாடுகளுடன் பகிர வேண்டிய தகவலைத் தேர்வுசெய்யவும்.</string>
-    <string name="com_facebook_image_download_unknown_error">படத்தைப் பதிவிறக்கும் போது பிழை ஏற்பட்டது.</string>
-    <string name="com_facebook_share_button_text">பகிர்</string>
-    <string name="com_facebook_send_button_text">அனுப்பு</string>
-    <string name="com_facebook_device_auth_instructions">உங்கள் ஸ்மார்ட்ஃபோன் அல்லது கணினியில் %@ ஐப் பார்வையிட்டு, பின்வரும் குறியீட்டை உள்ளிடவும்:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">பிடித்திருக்கிறது</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">விரும்பியவை</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">வெளியேறு</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">உள்நுழையவும்</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Facebook மூலம் உள்நுழையவும்</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Facebook மூலம் தொடரவும்</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">%1$s ஆக உள்நுழைந்துள்ளீர்கள்</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Facebook ஐப் பயன்படுத்தி உள்நுழைந்துள்ளீர்கள்</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">வெளியேறு</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">ரத்துசெய்</string>
+    <string name="com_facebook_loading" gender="unknown">ஏற்றுகிறது…</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">AndroidManifest பிழை</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">WebView உள்நுழைவுக்கு இணைய அனுமதித் தேவை</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">கட்டுப்பாடு உங்களிடம் உள்ளது. பயன்பாடுகளுடன் நீங்கள் பகிர விரும்பும் தகவல்களைத் தேர்வுசெய்யவும்.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">படத்தைப் பதிவிறக்கும்போது எதிர்பாராத பிழை ஏற்பட்டது.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">பகிர்</string>
+    <string name="com_facebook_send_button_text" gender="unknown">அனுப்பு</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">&lt;b&gt;facebook.com/device&lt;/b&gt; ஐப் பார்வையிட்டு, மேலே காட்டப்பட்ட குறியீட்டை உள்ளிடவும்.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">உங்கள் கணக்கை இணைக்க, உங்கள் மொபைல் சாதனத்தில் Facebook பயன்பாட்டைத் திறந்து, அறிவிப்புகளைப் பார்க்கவும்.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- அல்லது -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">உள்நுழைதலை உறுதிப்படுத்தவும்</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">%1$s ஆகத் தொடர்</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">நீங்கள் அல்ல?</string>
 </resources>
diff --git a/facebook/src/main/res/values-te/strings.xml b/facebook/src/main/res/values-te/strings.xml
index d31dff43f..d8546f72c 100644
--- a/facebook/src/main/res/values-te/strings.xml
+++ b/facebook/src/main/res/values-te/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: te_IN -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">ఇష్టంగా గుర్తు పెట్టు</string>
-    <string name="com_facebook_like_button_liked">ఇష్టంగా గుర్తు పెట్టబడింది</string>
-    <string name="com_facebook_loginview_log_out_button">లాగ్ అవుట్ చేయి</string>
-    <string name="com_facebook_loginview_log_in_button">లాగిన్ చేయి</string>
-    <string name="com_facebook_loginview_log_in_button_long">Facebookతో లాగిన్ చేయి</string>
-    <string name="com_facebook_loginview_logged_in_as">ఇలా లాగిన్ చేసారు: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Facebook ఉపయోగించి లాగిన్ చేసారు</string>
-    <string name="com_facebook_loginview_log_out_action">లాగ్ అవుట్ చేయి</string>
-    <string name="com_facebook_loginview_cancel_action">రద్దు చేయి</string>
-    <string name="com_facebook_loading">లోడ్ చేస్తోంది...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest లోపం</string>
-    <string name="com_facebook_internet_permission_error_message">వెబ్ వీక్షణ లాగిన్‌కు ఇంటర్నెట్ అనుమతి అవసరం</string>
-    <string name="com_facebook_tooltip_default">సరికొత్తది! మీకు నియంత్రణ ఉంది - మీరు అప్లికేషన్‌లతో ఏ సమాచారాన్ని భాగస్వామ్యం చేయాలనుకుంటున్నారో ఎంచుకోండి.</string>
-    <string name="com_facebook_image_download_unknown_error">చిత్రాన్ని డౌన్‌లోడ్ చేస్తున్నప్పుడు ఊహించని లోపం ఏర్పడింది.</string>
-    <string name="com_facebook_share_button_text">భాగస్వామ్యం చేయండి</string>
-    <string name="com_facebook_send_button_text">పంపు</string>
-    <string name="com_facebook_device_auth_instructions">మీ స్మార్ట్‌ఫోన్ లేదా కంప్యూటర్‌లో %@ సందర్శించి, ఈ కోడ్‌ను నమోదు చేయండి:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">ఇష్టం</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">ఇష్టపడ్డారు</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">లాగ్ అవుట్ చేయండి</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">లాగిన్</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Facebookతో లాగిన్ చేయండి</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Facebookతో కొనసాగించు</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">వీరి వలె లాగిన్ చేసారు: %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Facebookని ఉపయోగించి లాగిన్ చేసారు</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">లాగ్ అవుట్ చేయండి</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">రద్దు చేయి</string>
+    <string name="com_facebook_loading" gender="unknown">లోడ్ చేస్తోంది…</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">AndroidManifest లోపం</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">WebView లాగిన్ కోసం ఇంటర్నెట్ అనుమతి అవసరమవుతుంది</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">మీరు నియంత్రణలో ఉన్నారు - మీరు ఏ సమాచారాన్ని అనువర్తనాలతో పంచుకోవాలనుకుంటున్నారో ఎంచుకోండి.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">ఒక చిత్రాన్ని డౌన్‌లోడ్ చేయడంలో అనుకోని లోపం సంభవించింది.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">భాగస్వామ్యం చేయి</string>
+    <string name="com_facebook_send_button_text" gender="unknown">పంపండి</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">&lt;b&gt;facebook.com/device&lt;/b&gt;ని సందర్శించి ఎగువన చూపిన కోడ్‌ను నమోదు చేయండి.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">మీ ఖాతాను అనుసంధానించేందుకు, మీ మొబైల్ పరికరంలో Facebook అనువర్తనాన్ని తెరిచి నోటిఫికేషన్‌లను తనిఖీ చేయండి.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- లేదా -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">లాగిన్‌ను నిర్ధారించండి</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">%1$sగా కొనసాగండి</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">మీరు కాదా?</string>
 </resources>
diff --git a/facebook/src/main/res/values-th/strings.xml b/facebook/src/main/res/values-th/strings.xml
index 3ae8b30fa..d39dedcab 100644
--- a/facebook/src/main/res/values-th/strings.xml
+++ b/facebook/src/main/res/values-th/strings.xml
@@ -1,41 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
-
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">ถูกใจ</string>
-    <string name="com_facebook_like_button_liked">ถูกใจแล้ว</string>
-    <string name="com_facebook_loginview_log_out_button">ออกจากระบบ</string>
-    <string name="com_facebook_loginview_log_in_button">เข้าสู่ระบบ</string>
-    <string name="com_facebook_loginview_log_in_button_long">เข้าสู่ระบบด้วย Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">เข้าสู่ระบบในชื่อ: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">เข้าสู่ระบบโดยใช้ Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">ออกจากระบบ</string>
-    <string name="com_facebook_loginview_cancel_action">ยกเลิก</string>
-    <string name="com_facebook_loading">กำลังโหลด...</string>
-    <string name="com_facebook_internet_permission_error_title">ข้อผิดพลาดของ AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">การเข้าสู่ระบบ WebView จำเป็นต้องได้รับอนุญาตจากอินเทอร์เน็ต</string>
-    <string name="com_facebook_tooltip_default">ใหม่! คุณเป็นฝ่ายควบคุม โปรดเลือกข้อมูลที่คุณต้องการแชร์ด้วยแอพ</string>
-    <string name="com_facebook_image_download_unknown_error">เกิดข้อผิดพลาดที่ไม่คาดคิดขณะดาวน์โหลดรูปภาพ</string>
-    <string name="com_facebook_share_button_text">แชร์</string>
-    <string name="com_facebook_send_button_text">ส่ง</string>
-    <string name="com_facebook_device_auth_instructions">ไปที่ %@ ในสมาร์ทโฟนหรือคอมพิวเตอร์ของคุณ แล้วป้อนรหัสนี้:</string>
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: th_TH -->
 
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">ถูกใจ</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">ถูกใจแล้ว</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">ออกจากระบบ</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">เข้าสู่ระบบ</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">เข้าสู่ระบบด้วย Facebook</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">ดำเนินการต่อด้วย Facebook</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">เข้าสู่ระบบแล้วในชื่อ %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">เข้าสู่ระบบแล้วโดยใช้ Facebook</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">ออกจากระบบ</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">ยกเลิก</string>
+    <string name="com_facebook_loading" gender="unknown">กำลังโหลด...</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">ข้อผิดพลาด AndroidManifest</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">การเข้าสู่ระบบ WebView ต้องได้รับสิทธิ์การอนุญาตอินเทอร์เน็ต</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">คุณควบคุมได้ เลือกว่าคุณต้องการแชร์ข้อมูลใดกับแอพ</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">เกิดข้อผิดพลาดที่ไม่คาดคิดขณะดาวน์โหลดภาพ</string>
+    <string name="com_facebook_share_button_text" gender="unknown">แชร์</string>
+    <string name="com_facebook_send_button_text" gender="unknown">ส่ง</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">ไปที่ &lt;b&gt;facebook.com/device&lt;/b&gt; แล้วป้อนรหัสที่ปรากฏด้านล่าง</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">หากต้องการเชื่อมต่อกับบัญชีผู้ใช้ของคุณ ให้เปิดแอพ Facebook บนอุปกรณ์มือถือของคุณแล้วตรวจสอบการแจ้งเตือน</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- หรือ -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">ยืนยันการเข้าสู่ระบบ</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">ดำเนินการต่อในชื่อ %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">ไม่ใช่คุณใช่ไหม</string>
 </resources>
diff --git a/facebook/src/main/res/values-tl/strings.xml b/facebook/src/main/res/values-tl/strings.xml
index 478329b39..a276ac020 100644
--- a/facebook/src/main/res/values-tl/strings.xml
+++ b/facebook/src/main/res/values-tl/strings.xml
@@ -1,40 +1,29 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: tl_PH -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Gustuhin</string>
-    <string name="com_facebook_like_button_liked">Nagustuhan</string>
-    <string name="com_facebook_loginview_log_out_button">Mag-log out</string>
-    <string name="com_facebook_loginview_log_in_button">Mag-log in</string>
-    <string name="com_facebook_loginview_log_in_button_long">Mag-log in sa pamamagitan ng Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Naka-log in bilang si: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Naka-log in gamit ang Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Mag-log out</string>
-    <string name="com_facebook_loginview_cancel_action">Kanselahin</string>
-    <string name="com_facebook_loading">Naglo-load...</string>
-    <string name="com_facebook_internet_permission_error_title">Error na AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">Ang pag-log in sa Web ay nangangailangan ng pahintulot sa INTERNET</string>
-    <string name="com_facebook_tooltip_default">Bago! Ikaw ang may kontrol - piliin kung anong impormasyon ang gusto mong ibahagi sa mga app.</string>
-    <string name="com_facebook_image_download_unknown_error">Hindi inaasahang error habang dina-download ang imahe.</string>
-    <string name="com_facebook_share_button_text">Ibahagi</string>
-    <string name="com_facebook_send_button_text">Ipadala</string>
-    <string name="com_facebook_device_auth_instructions">Puntahan ang %@ sa iyong smartphone o computer at ilagay ang code na ito:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">Gusto ko ito</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">Nagustuhan</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">Mag-log out</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">Mag-log in</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Mag-log in sa Facebook</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Magpatuloy gamit ang Facebook</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">Mag-log-in bilang: %1$s.</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Naka-log in gamit ang Facebook</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">Mag-log out</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">Kanselahin</string>
+    <string name="com_facebook_loading" gender="unknown">Naglo-load...</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">Ang pag-log in sa WebView ay nangangailangan ng pahintulot sa INTERNET</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">Ikaw ang may kontrol - piliin anong impormasyon ang gusto mong i-share sa mga app.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">Hindi inaasahang error habang dina-download ang larawan.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">I-share</string>
+    <string name="com_facebook_send_button_text" gender="unknown">Ipadala</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">Puntahan ang &lt;b&gt;facebook.com/device&lt;/b&gt; at ilagay ang code na ipinapakita sa itaas.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">Para ikonekta ang iyong account, buksan ang Facebook app sa iyong cellphone at tumingin ng mga notification.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- O -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">I-confirm ang Pag-log in</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">Magpatuloy bilang %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">Hindi ikaw?</string>
 </resources>
diff --git a/facebook/src/main/res/values-tr/strings.xml b/facebook/src/main/res/values-tr/strings.xml
index 2aa1bdce9..c77ce01e4 100644
--- a/facebook/src/main/res/values-tr/strings.xml
+++ b/facebook/src/main/res/values-tr/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: tr_TR -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Beğen</string>
-    <string name="com_facebook_like_button_liked">Beğendin</string>
-    <string name="com_facebook_loginview_log_out_button">Çıkış yap</string>
-    <string name="com_facebook_loginview_log_in_button">Giriş yap</string>
-    <string name="com_facebook_loginview_log_in_button_long">Facebook ile giriş yap</string>
-    <string name="com_facebook_loginview_logged_in_as">Giriş yapan: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Facebook ile giriş yapıldı</string>
-    <string name="com_facebook_loginview_log_out_action">Çıkış yap</string>
-    <string name="com_facebook_loginview_cancel_action">İptal</string>
-    <string name="com_facebook_loading">Yükleniyor...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest Hatası</string>
-    <string name="com_facebook_internet_permission_error_message">WebView girişi için İNTERNET izni gerekir</string>
-    <string name="com_facebook_tooltip_default">Yeni! Kontrol sende. Uygulamalarla paylaşmak istediğin bilgileri seç.</string>
-    <string name="com_facebook_image_download_unknown_error">Görsel indirilirken beklenmeyen hata.</string>
-    <string name="com_facebook_share_button_text">Paylaş</string>
-    <string name="com_facebook_send_button_text">Gönder</string>
-    <string name="com_facebook_device_auth_instructions">Akıllı telefonunda veya bilgisayarında %@ adresine git ve bu kodu gir:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">Beğen</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">Beğendin</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">Çıkış Yap</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">Giriş yap</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Facebook ile Giriş Yap</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Facebook ile Devam Et</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">%1$s olarak giriş yapıldı</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Facebook ile giriş yapıldı</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">Çıkış Yap</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">İptal</string>
+    <string name="com_facebook_loading" gender="unknown">Yükleniyor...</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">AndroidManifest Hatası</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">WebView girişi için İNTERNET izni gerekiyor</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">Kontrol sende - uygulamalarla paylaşmak istediğin bilgileri seç.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">Görüntü indirilirken beklenmedik bir hata oluştu.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">Paylaş</string>
+    <string name="com_facebook_send_button_text" gender="unknown">Gönder</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">&lt;b&gt;facebook.com/device&lt;/b&gt; adresine git ve yukarıda gösterilen kodu gir.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">Hesabını bağlamak için, mobil cihazında Facebook uygulamasını aç ve bildirimleri kontrol et.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- VEYA -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">Girişi Onayla</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">%1$s olarak devam et</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">Siz değil misiniz?</string>
 </resources>
diff --git a/facebook/src/main/res/values-vi/strings.xml b/facebook/src/main/res/values-vi/strings.xml
index 35cedacae..90901c711 100644
--- a/facebook/src/main/res/values-vi/strings.xml
+++ b/facebook/src/main/res/values-vi/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: vi_VN -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">Thích</string>
-    <string name="com_facebook_like_button_liked">Đã thích</string>
-    <string name="com_facebook_loginview_log_out_button">Đăng xuất</string>
-    <string name="com_facebook_loginview_log_in_button">Đăng nhập</string>
-    <string name="com_facebook_loginview_log_in_button_long">Đăng nhập bằng Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Đã đăng nhập với tư cách là: %1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">Đã đăng nhập bằng Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Đăng xuất</string>
-    <string name="com_facebook_loginview_cancel_action">Hủy</string>
-    <string name="com_facebook_loading">Đang tải...</string>
-    <string name="com_facebook_internet_permission_error_title">Lỗi AndroidManifest</string>
-    <string name="com_facebook_internet_permission_error_message">Đăng nhập WebView yêu cầu INTERNET cho phép</string>
-    <string name="com_facebook_tooltip_default">Mới! Bạn đang có quyền kiểm soát - hãy chọn thông tin bạn muốn chia sẻ với các ứng dụng.</string>
-    <string name="com_facebook_image_download_unknown_error">Lỗi bất ngờ khi tải ảnh xuống.</string>
-    <string name="com_facebook_share_button_text">Chia sẻ</string>
-    <string name="com_facebook_send_button_text">Gửi</string>
-    <string name="com_facebook_device_auth_instructions">Truy cập %@ trên điện thoại thông minh hoặc máy tính và nhập mã sau:</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">Thích</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">Đã thích</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">Đăng xuất</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">Đăng nhập</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">Đăng nhập bằng Facebook</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">Tiếp tục với Facebook</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">Đã đăng nhập với tên: %1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">Đã đăng nhập bằng Facebook</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">Đăng xuất</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">Hủy</string>
+    <string name="com_facebook_loading" gender="unknown">Đang tải…</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">Lỗi AndroidManifest</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">Đăng nhập chế độ xem web yêu cầu quyền INTERNET</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">Bạn nắm quyền kiểm soát - chọn thông tin bạn muốn chia sẻ với ứng dụng.</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">Lỗi không mong muốn khi tải hình ảnh xuống.</string>
+    <string name="com_facebook_share_button_text" gender="unknown">Chia sẻ</string>
+    <string name="com_facebook_send_button_text" gender="unknown">Gửi</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">Truy cập &lt;b&gt;facebook.com/device&lt;/b&gt; và nhập mã được hiển thị bên trên.</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">Để kết nối tài khoản của bạn, hãy mở ứng dụng Facebook trên thiết bị di động và kiểm tra thông báo.</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- HOẶC -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">Xác nhận đăng nhập</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">Tiếp tục với tư cách %1$s</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">Không phải bạn?</string>
 </resources>
diff --git a/facebook/src/main/res/values-zh-rCN/strings.xml b/facebook/src/main/res/values-zh-rCN/strings.xml
index 708e677ab..125758e72 100644
--- a/facebook/src/main/res/values-zh-rCN/strings.xml
+++ b/facebook/src/main/res/values-zh-rCN/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: zh_CN -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">赞</string>
-    <string name="com_facebook_like_button_liked">赞了</string>
-    <string name="com_facebook_loginview_log_out_button">退出</string>
-    <string name="com_facebook_loginview_log_in_button">登录</string>
-    <string name="com_facebook_loginview_log_in_button_long">使用 Facebook 登录</string>
-    <string name="com_facebook_loginview_logged_in_as">已以%1$s 身份登录</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">已使用 Facebook 登录</string>
-    <string name="com_facebook_loginview_log_out_action">退出</string>
-    <string name="com_facebook_loginview_cancel_action">取消</string>
-    <string name="com_facebook_loading">正在加载...</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest 错误</string>
-    <string name="com_facebook_internet_permission_error_message">Web 登录需要互联网许可</string>
-    <string name="com_facebook_tooltip_default">新增功能！一切任您掌控 — 选择您想通过应用分享的信息。</string>
-    <string name="com_facebook_image_download_unknown_error">下载图片时出现意外错误。</string>
-    <string name="com_facebook_share_button_text">分享</string>
-    <string name="com_facebook_send_button_text">发送</string>
-    <string name="com_facebook_device_auth_instructions">请用智能手机或电脑访问 %@，然后输入验证码：</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">赞</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">赞了</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">注销</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">登录</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">使用 Facebook 登录</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">前往 Facebook</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">登录身份：%1$s</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">已通过 Facebook 登录</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">注销</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">取消</string>
+    <string name="com_facebook_loading" gender="unknown">正在加载...</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">AndroidManifest 错误</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">WebView 登录需要访问网络</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">应用分享内容由你掌控。</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">下载图片时出现意外错误。</string>
+    <string name="com_facebook_share_button_text" gender="unknown">分享</string>
+    <string name="com_facebook_send_button_text" gender="unknown">发送</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">请访问&lt;b&gt;facebook.com/device&lt;/b&gt;并输入以上验证码。</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">要关联帐户，请在移动设备上打开 Facebook 应用并查看通知。</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- 或 -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">确认登录</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">以%1$s的身份继续</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">不是你？</string>
 </resources>
diff --git a/facebook/src/main/res/values-zh-rHK/strings.xml b/facebook/src/main/res/values-zh-rHK/strings.xml
index 857bbdd69..13d2ecfcf 100644
--- a/facebook/src/main/res/values-zh-rHK/strings.xml
+++ b/facebook/src/main/res/values-zh-rHK/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: zh_HK -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">讚好</string>
-    <string name="com_facebook_like_button_liked">已讚好</string>
-    <string name="com_facebook_loginview_log_out_button">登出</string>
-    <string name="com_facebook_loginview_log_in_button">登入</string>
-    <string name="com_facebook_loginview_log_in_button_long">使用 Facebook 登入</string>
-    <string name="com_facebook_loginview_logged_in_as">以以下身分登入：%1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">使用 Facebook 登入</string>
-    <string name="com_facebook_loginview_log_out_action">登出</string>
-    <string name="com_facebook_loginview_cancel_action">取消</string>
-    <string name="com_facebook_loading">載入中⋯</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest 錯誤</string>
-    <string name="com_facebook_internet_permission_error_message">WebView 登入需有 INTERNET 權限</string>
-    <string name="com_facebook_tooltip_default">最新消息！控制權在您 - 選擇您要與應用程式分享的資訊。</string>
-    <string name="com_facebook_image_download_unknown_error">下載圖像時發生預期外的錯誤。</string>
-    <string name="com_facebook_share_button_text">分享</string>
-    <string name="com_facebook_send_button_text">傳送</string>
-    <string name="com_facebook_device_auth_instructions">在智能手機或電腦前往 %@ 並輸入此代碼：</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">讚好</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">已讚好</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">登出</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">登入</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">使用 Facebook 登入</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">繼續使用 Facebook 帳戶</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">以%1$s身分登入</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">已使用 Facebook 登入</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">登出</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">取消</string>
+    <string name="com_facebook_loading" gender="unknown">載入中......</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">AndroidManifest 錯誤</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">WebView 登入需要網絡使用權限</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">一切由你掌握：自行選擇要分享給應用程式的資訊種類。</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">下載圖像時發生沒有預期的錯誤。</string>
+    <string name="com_facebook_share_button_text" gender="unknown">分享</string>
+    <string name="com_facebook_send_button_text" gender="unknown">送出</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">前往&lt;b&gt;facebook.com/device&lt;/b&amp;gt，並輸入上方顯示的代碼。</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">若要連結帳戶，請在流動裝置上開啟 Facebook 應用程式，然後查看通知。</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- 或 -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">確認登入</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">以%1$s的身分繼續</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">不是你嗎？</string>
 </resources>
diff --git a/facebook/src/main/res/values-zh-rTW/strings.xml b/facebook/src/main/res/values-zh-rTW/strings.xml
index dc798ed98..8f08dc11e 100644
--- a/facebook/src/main/res/values-zh-rTW/strings.xml
+++ b/facebook/src/main/res/values-zh-rTW/strings.xml
@@ -1,40 +1,30 @@
 <?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+<!-- See fburl.com/140690840 for information about i18n on Android -->
+<!-- @generated -->
+<!-- FB Locale: zh_TW -->
 
-    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
-    copy, modify, and distribute this software in source code or binary form for use
-    in connection with the web services and APIs provided by Facebook.
-
-    As with any software that integrates with the Facebook platform, your use of
-    this software is subject to the Facebook Developer Principles and Policies
-    [http://developers.facebook.com/policy/]. This copyright notice shall be
-    included in all copies or substantial portions of the software.
-
-    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
-    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
-    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
-    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
-    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--->
-
-<resources>
-    <string name="com_facebook_like_button_not_liked">讚</string>
-    <string name="com_facebook_like_button_liked">說讚</string>
-    <string name="com_facebook_loginview_log_out_button">登出</string>
-    <string name="com_facebook_loginview_log_in_button">登入</string>
-    <string name="com_facebook_loginview_log_in_button_long">使用 Facebook 登入</string>
-    <string name="com_facebook_loginview_logged_in_as">使用下列身分登入：%1$s</string>
-    <string name="com_facebook_loginview_logged_in_using_facebook">已使用 Facebook 登入</string>
-    <string name="com_facebook_loginview_log_out_action">登出</string>
-    <string name="com_facebook_loginview_cancel_action">取消</string>
-    <string name="com_facebook_loading">正在載入…</string>
-    <string name="com_facebook_internet_permission_error_title">AndroidManifest 錯誤</string>
-    <string name="com_facebook_internet_permission_error_message">WebView 登入需要「網際網路」授權</string>
-    <string name="com_facebook_tooltip_default">新消息！您已成功登入，請選擇要與應用程式分享的資訊。</string>
-    <string name="com_facebook_image_download_unknown_error">下載圖像時發生非預期的錯誤。</string>
-    <string name="com_facebook_share_button_text">分享</string>
-    <string name="com_facebook_send_button_text">傳送</string>
-    <string name="com_facebook_device_auth_instructions">使用您的智慧型手機或電腦前往 %@，然後輸入此代碼：</string>
+<resources exclude-from-buck-resource-map="true">
+    <string name="com_facebook_like_button_not_liked" gender="unknown">讚</string>
+    <string name="com_facebook_like_button_liked" gender="unknown">已說讚</string>
+    <string name="com_facebook_loginview_log_out_button" gender="unknown">登出</string>
+    <string name="com_facebook_loginview_log_in_button" gender="unknown">登入</string>
+    <string name="com_facebook_loginview_log_in_button_long" gender="unknown">使用 Facebook 帳號登入</string>
+    <string name="com_facebook_loginview_log_in_button_continue" gender="unknown">繼續使用 Facebook 帳號</string>
+    <string name="com_facebook_loginview_logged_in_as" gender="unknown">以%1$s身分登入</string>
+    <string name="com_facebook_loginview_logged_in_using_facebook" gender="unknown">已使用 Facebook 登入</string>
+    <string name="com_facebook_loginview_log_out_action" gender="unknown">登出</string>
+    <string name="com_facebook_loginview_cancel_action" gender="unknown">取消</string>
+    <string name="com_facebook_loading" gender="unknown">載入中......</string>
+    <string name="com_facebook_internet_permission_error_title" gender="unknown">AndroidManifest 錯誤</string>
+    <string name="com_facebook_internet_permission_error_message" gender="unknown">WebView 登入需要網路使用權限</string>
+    <string name="com_facebook_tooltip_default" gender="unknown">一切操之在你：自行選擇要分享給應用程式的資訊種類。</string>
+    <string name="com_facebook_image_download_unknown_error" gender="unknown">下載圖像時無預警發生錯誤。</string>
+    <string name="com_facebook_share_button_text" gender="unknown">分享</string>
+    <string name="com_facebook_send_button_text" gender="unknown">送出</string>
+    <string name="com_facebook_device_auth_instructions" gender="unknown">前往&lt;b&gt;facebook.com/device&lt;/b&amp;gt，並輸入上方顯示的代碼。</string>
+    <string name="com_facebook_smart_device_instructions" gender="unknown">若要連結帳號，請在行動裝置上開啟 Facebook 應用程式，然後查看通知。</string>
+    <string name="com_facebook_smart_device_instructions_or" gender="unknown">- 或 -</string>
+    <string name="com_facebook_smart_login_confirmation_title" gender="unknown">確認登入</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as" gender="unknown">以%1$s的身分繼續</string>
+    <string name="com_facebook_smart_login_confirmation_cancel" gender="unknown">不是你？</string>
 </resources>
diff --git a/facebook/src/main/res/values/dimens.xml b/facebook/src/main/res/values/dimens.xml
index 5ae0ed683..0739a3225 100644
--- a/facebook/src/main/res/values/dimens.xml
+++ b/facebook/src/main/res/values/dimens.xml
@@ -25,4 +25,5 @@
     one does not stick out-->
     <dimen name="com_facebook_auth_dialog_corner_radius_oversized">4dp</dimen>
     <dimen name="com_facebook_button_corner_radius">2dp</dimen>
+    <dimen name="com_facebook_button_login_corner_radius">3dp</dimen>
 </resources>
diff --git a/facebook/src/main/res/values/strings.xml b/facebook/src/main/res/values/strings.xml
index 2c7d8a066..af7262eaa 100644
--- a/facebook/src/main/res/values/strings.xml
+++ b/facebook/src/main/res/values/strings.xml
@@ -18,23 +18,28 @@
     IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
     CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 -->
-
-<resources>
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
     <string name="com_facebook_like_button_not_liked">Like</string>
     <string name="com_facebook_like_button_liked">Liked</string>
     <string name="com_facebook_loginview_log_out_button">Log out</string>
     <string name="com_facebook_loginview_log_in_button">Log in</string>
     <string name="com_facebook_loginview_log_in_button_long">Log in with Facebook</string>
-    <string name="com_facebook_loginview_logged_in_as">Logged in as: %1$s</string>
+    <string name="com_facebook_loginview_log_in_button_continue">Continue with Facebook</string>
+    <string name="com_facebook_loginview_logged_in_as">Logged in as: <xliff:g id="user name">%1$s</xliff:g></string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Logged in using Facebook</string>
     <string name="com_facebook_loginview_log_out_action">Log out</string>
     <string name="com_facebook_loginview_cancel_action">Cancel</string>
-    <string name="com_facebook_loading">Loading...</string>
+    <string name="com_facebook_loading">Loading&#8230;</string>
     <string name="com_facebook_internet_permission_error_title">AndroidManifest Error</string>
     <string name="com_facebook_internet_permission_error_message">WebView login requires INTERNET permission</string>
-    <string name="com_facebook_tooltip_default">New! You\'re in control - choose what info you want to share with apps.</string>
+    <string name="com_facebook_tooltip_default">You\'re in control - choose what info you want to share with apps.</string>
     <string name="com_facebook_image_download_unknown_error">Unexpected error while downloading an image.</string>
     <string name="com_facebook_share_button_text">Share</string>
     <string name="com_facebook_send_button_text">Send</string>
-    <string name="com_facebook_device_auth_instructions">Visit &lt;b&gt;facebook.com/device&lt;/b&gt;&lt;br /&gt;on your smartphone or computer&lt;br /&gt;and enter this code</string>
+    <string name="com_facebook_device_auth_instructions">Visit &lt;b&gt;facebook.com/device&lt;/b&gt; and enter the code shown above.</string>
+    <string name="com_facebook_smart_device_instructions">To connect your account, open the Facebook app on your mobile device and check for notifications.</string>
+    <string name="com_facebook_smart_device_instructions_or">- OR -</string>
+    <string name="com_facebook_smart_login_confirmation_title">Confirm Login</string>
+    <string name="com_facebook_smart_login_confirmation_continue_as">Continue as <xliff:g id="user name">%1$s</xliff:g></string>
+    <string name="com_facebook_smart_login_confirmation_cancel">Not you?</string>
 </resources>
diff --git a/facebook/src/main/res/values/styles.xml b/facebook/src/main/res/values/styles.xml
index b7824d208..22e56d9a7 100644
--- a/facebook/src/main/res/values/styles.xml
+++ b/facebook/src/main/res/values/styles.xml
@@ -19,7 +19,9 @@
     CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 -->
 
-<resources xmlns:android="http://schemas.android.com/apk/res/android">
+<resources xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools">
+    <color name="com_smart_login_code">#3C6499</color>
     <color name="com_facebook_blue">#3B5998</color>
     <color name="com_facebook_messenger_blue">#0084ff</color>
 
@@ -51,7 +53,7 @@
 
     <dimen name="com_facebook_tooltip_horizontal_padding">10dp</dimen>
 
-    <color name="com_facebook_device_auth_text">#797E87</color>
+    <color name="com_facebook_device_auth_text">#90949C</color>
 
     <style name="tooltip_bubble_text">
         <item name="android:textColor">@android:color/white</item>
@@ -69,6 +71,7 @@
     <color name="com_facebook_button_background_color_disabled">#bdc1c9</color>
     <color name="com_facebook_button_background_color_pressed">#2f477a</color>
     <color name="com_facebook_button_login_silver_background_color">#f4f6f8</color>
+    <color name="com_facebook_button_login_background_color">#4267b2</color>
     <color name="com_facebook_button_login_silver_background_color_pressed">#e9eaf0</color>
     <color name="com_facebook_button_send_background_color">@color/com_facebook_messenger_blue</color>
     <color name="com_facebook_button_send_background_color_pressed">#006fff</color>
@@ -92,7 +95,11 @@
     </style>
 
     <style name="com_facebook_loginview_default_style" parent="com_facebook_button">
-        <item name="android:drawableLeft">@drawable/com_facebook_button_icon</item>
+        <item name="android:background">@drawable/com_facebook_button_login_background</item>
+        <item name="android:drawablePadding">5dp</item>
+        <item name="android:paddingLeft">6dp</item>
+        <item name="android:paddingRight">6dp</item>
+        <item name="android:textSize">13.0dp</item>
     </style>
 
     <style name="com_facebook_loginview_silver_style" parent="com_facebook_loginview_default_style">
@@ -113,11 +120,28 @@
         <item name="android:text">@string/com_facebook_share_button_text</item>
     </style>
 
-    <style name="com_facebook_auth_dialog" parent="android:style/Theme.Dialog">
+    <style name="com_facebook_auth_dialog" parent="@style/Theme.AppCompat.Dialog">
         <item name="android:windowIsTranslucent">true</item>
         <item name="android:windowBackground">@android:color/transparent</item>
         <item name="android:windowNoTitle">true</item>
         <item name="android:windowIsFloating">true</item>
     </style>
 
+    <style name="com_facebook_auth_dialog_instructions_textview" tools:targetApi="17">
+        <item name="android:layout_width">wrap_content</item>
+        <item name="android:layout_height">wrap_content</item>
+        <item name="android:fontFamily">roboto</item>
+        <item name="android:gravity">center</item>
+        <item name="android:singleLine">false</item>
+        <item name="android:textColor">@color/com_facebook_device_auth_text</item>
+        <item name="android:textSize">16sp</item>
+        <item name="android:typeface">sans</item>
+    </style>
+
+    <style name="com_facebook_activity_theme" parent="@style/Theme.AppCompat.NoActionBar">
+        <item name="android:windowIsTranslucent">true</item>
+        <item name="android:windowBackground">@android:color/transparent</item>
+        <item name="android:windowNoTitle">true</item>
+    </style>
+
 </resources>
diff --git a/facebook/src/test/java/com/facebook/AccessTokenCacheTest.java b/facebook/src/test/java/com/facebook/AccessTokenCacheTest.java
index caf1f87c0..16f2b8200 100644
--- a/facebook/src/test/java/com/facebook/AccessTokenCacheTest.java
+++ b/facebook/src/test/java/com/facebook/AccessTokenCacheTest.java
@@ -33,7 +33,6 @@
 import org.mockito.Mock;
 import org.powermock.api.mockito.PowerMockito;
 import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
 
 import java.util.Arrays;
diff --git a/facebook/src/test/java/com/facebook/AccessTokenManagerTest.java b/facebook/src/test/java/com/facebook/AccessTokenManagerTest.java
index 3ae3d47a6..af1debf1e 100644
--- a/facebook/src/test/java/com/facebook/AccessTokenManagerTest.java
+++ b/facebook/src/test/java/com/facebook/AccessTokenManagerTest.java
@@ -31,18 +31,24 @@
 import org.json.JSONException;
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.Mock;
-import org.powermock.api.mockito.PowerMockito;
 import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
 
 import java.util.Arrays;
 import java.util.Date;
 import java.util.List;
 
-import static org.mockito.Mockito.*;
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+import static org.mockito.Mockito.any;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
 import static org.powermock.api.mockito.PowerMockito.mockStatic;
 import static org.powermock.api.mockito.PowerMockito.when;
 import static org.powermock.api.support.membermodification.MemberMatcher.method;
@@ -139,9 +145,9 @@ public void onReceive(Context context, Intent intent) {
         assertNotNull(intent);
 
         AccessToken oldAccessToken =
-                (AccessToken) intent.getParcelableExtra(AccessTokenManager.EXTRA_OLD_ACCESS_TOKEN);
+                intent.getParcelableExtra(AccessTokenManager.EXTRA_OLD_ACCESS_TOKEN);
         AccessToken newAccessToken =
-                (AccessToken) intent.getParcelableExtra(AccessTokenManager.EXTRA_NEW_ACCESS_TOKEN);
+                intent.getParcelableExtra(AccessTokenManager.EXTRA_NEW_ACCESS_TOKEN);
 
         assertEquals(accessToken.getToken(), oldAccessToken.getToken());
         assertEquals(anotherAccessToken.getToken(), newAccessToken.getToken());
diff --git a/facebook/src/test/java/com/facebook/AccessTokenTest.java b/facebook/src/test/java/com/facebook/AccessTokenTest.java
index 8ec902bbe..48e700916 100644
--- a/facebook/src/test/java/com/facebook/AccessTokenTest.java
+++ b/facebook/src/test/java/com/facebook/AccessTokenTest.java
@@ -30,18 +30,20 @@
 import org.junit.Test;
 import org.powermock.api.mockito.PowerMockito;
 import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
 
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.Date;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
 import static org.powermock.api.support.membermodification.MemberModifier.stub;
 
 @PrepareForTest( {Utility.class})
@@ -186,8 +188,8 @@ public void testFromCacheWithMissingApplicationId() {
         LegacyTokenHelper.putToken(bundle, token);
         // no app id
 
-        FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
         FacebookSdk.setApplicationId(applicationId);
+        FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
 
         AccessToken accessToken = AccessToken.createFromLegacyCache(bundle);
 
@@ -231,7 +233,7 @@ public void testCachePutGet() {
         String userId = "1000";
 
         List<String> normalList = Arrays.asList("", "Another completely random token value");
-        List<String> emptyList = Arrays.asList();
+        List<String> emptyList = Collections.emptyList();
         HashSet<String> normalArrayList = new HashSet<String>(normalList);
         HashSet<String> emptyArrayList = new HashSet<String>();
         @SuppressWarnings("unchecked")
@@ -273,7 +275,7 @@ public void testParceling() throws IOException {
         Set<String> permissions = new HashSet<String>(
                 Arrays.asList("permission_1", "permission_2"));
         Set<String> declinedPermissions = new HashSet<String>(
-                Arrays.asList("permission_3"));
+                Collections.singletonList("permission_3"));
         AccessTokenSource source = AccessTokenSource.WEB_VIEW;
         AccessToken accessToken1 = new AccessToken(
                 token,
diff --git a/facebook/src/test/java/com/facebook/FacebookGraphRequestErrorTest.java b/facebook/src/test/java/com/facebook/FacebookGraphRequestErrorTest.java
index 7877efacd..69cdc47bc 100644
--- a/facebook/src/test/java/com/facebook/FacebookGraphRequestErrorTest.java
+++ b/facebook/src/test/java/com/facebook/FacebookGraphRequestErrorTest.java
@@ -171,6 +171,7 @@
 
     @Before
     public void before() throws Exception {
+        FacebookSdk.setApplicationId("123456789");
         FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
     }
 
diff --git a/facebook/src/test/java/com/facebook/FacebookPowerMockTestCase.java b/facebook/src/test/java/com/facebook/FacebookPowerMockTestCase.java
index fe94ceeaa..6d8b835c8 100644
--- a/facebook/src/test/java/com/facebook/FacebookPowerMockTestCase.java
+++ b/facebook/src/test/java/com/facebook/FacebookPowerMockTestCase.java
@@ -31,7 +31,7 @@
 import org.robolectric.shadows.ShadowLog;
 
 // ShadowLog is used to redirect the android.util.Log calls to System.out
-@Config(shadows = {ShadowLog.class})
+@Config(shadows = {ShadowLog.class}, manifest = Config.NONE)
 @RunWith(RobolectricTestRunner.class)
 @PowerMockIgnore({ "org.mockito.*", "org.robolectric.*", "android.*", "org.json.*" })
 
diff --git a/facebook/src/test/java/com/facebook/FacebookSdkPowerMockTest.java b/facebook/src/test/java/com/facebook/FacebookSdkPowerMockTest.java
index 3893e5c16..ac0fce564 100644
--- a/facebook/src/test/java/com/facebook/FacebookSdkPowerMockTest.java
+++ b/facebook/src/test/java/com/facebook/FacebookSdkPowerMockTest.java
@@ -27,6 +27,7 @@
 import android.os.ConditionVariable;
 
 import com.facebook.internal.CallbackManagerImpl;
+import com.facebook.internal.FetchedAppSettingsManager;
 import com.facebook.internal.ServerProtocol;
 import com.facebook.internal.Utility;
 
@@ -48,14 +49,14 @@
 import static org.powermock.api.support.membermodification.MemberMatcher.method;
 import static org.powermock.api.support.membermodification.MemberModifier.stub;
 
-@PrepareForTest({ FacebookSdk.class, Utility.class })
+@PrepareForTest({ FacebookSdk.class, Utility.class, FetchedAppSettingsManager.class})
 public final class FacebookSdkPowerMockTest extends FacebookPowerMockTestCase {
 
     @Before
     public void before() {
         Whitebox.setInternalState(FacebookSdk.class, "callbackRequestCodeOffset", 0xface);
         Whitebox.setInternalState(FacebookSdk.class, "sdkInitialized", false);
-        stub(method(Utility.class, "loadAppSettingsAsync")).toReturn(null);
+        stub(method(FetchedAppSettingsManager.class, "loadAppSettingsAsync")).toReturn(null);
 
     }
 
@@ -117,6 +118,8 @@ public void testFacebookDomain() {
 
     @Test
     public void testLoadDefaults() throws Exception {
+        // Set to null since the value might have been set by another test
+        FacebookSdk.setApplicationId(null);
         stub(method(FacebookSdk.class, "isInitialized")).toReturn(true);
         FacebookSdk.loadDefaultsFromMetadata(mockContextWithAppIdAndClientToken());
 
@@ -148,15 +151,18 @@ public void testLoadDefaultsDoesNotOverwrite() throws Exception {
         stub(method(FacebookSdk.class, "isInitialized")).toReturn(true);
         FacebookSdk.setApplicationId("hello");
         FacebookSdk.setClientToken("world");
+        FacebookSdk.setAutoLogAppEventsEnabled(false);
 
         FacebookSdk.loadDefaultsFromMetadata(mockContextWithAppIdAndClientToken());
 
         assertEquals("hello", FacebookSdk.getApplicationId());
         assertEquals("world", FacebookSdk.getClientToken());
+        assertEquals(false, FacebookSdk.getAutoLogAppEventsEnabled());
     }
 
     @Test
     public void testRequestCodeOffsetAfterInit() throws Exception {
+        FacebookSdk.setApplicationId("123456789");
         FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
 
         try {
@@ -169,6 +175,7 @@ public void testRequestCodeOffsetAfterInit() throws Exception {
 
     @Test
     public void testRequestCodeOffsetNegative() throws Exception {
+        FacebookSdk.setApplicationId("123456789");
         try {
             // last bit set, so negative
             FacebookSdk.sdkInitialize(RuntimeEnvironment.application, 0xFACEB00C);
@@ -180,12 +187,14 @@ public void testRequestCodeOffsetNegative() throws Exception {
 
     @Test
     public void testRequestCodeOffset() throws Exception {
+        FacebookSdk.setApplicationId("123456789");
         FacebookSdk.sdkInitialize(RuntimeEnvironment.application, 1000);
         assertEquals(1000, FacebookSdk.getCallbackRequestCodeOffset());
     }
 
     @Test
     public void testRequestCodeRange() {
+        FacebookSdk.setApplicationId("123456789");
         FacebookSdk.sdkInitialize(RuntimeEnvironment.application, 1000);
         assertTrue(FacebookSdk.isFacebookRequestCode(1000));
         assertTrue(FacebookSdk.isFacebookRequestCode(1099));
diff --git a/facebook/src/test/java/com/facebook/GraphRequestTest.java b/facebook/src/test/java/com/facebook/GraphRequestTest.java
index 3aca6e1c5..487c75d0c 100644
--- a/facebook/src/test/java/com/facebook/GraphRequestTest.java
+++ b/facebook/src/test/java/com/facebook/GraphRequestTest.java
@@ -25,11 +25,8 @@
 import android.net.Uri;
 import android.os.Bundle;
 
-import com.facebook.internal.GraphUtil;
-import com.facebook.internal.ServerProtocol;
 import com.facebook.share.internal.ShareInternalUtility;
 
-import org.json.JSONException;
 import org.json.JSONObject;
 import org.junit.Before;
 import org.junit.Test;
@@ -210,7 +207,7 @@ public void testSingleGetToHttpRequest() throws Exception {
         assertTrue(connection != null);
 
         assertEquals("GET", connection.getRequestMethod());
-        assertEquals("/" + ServerProtocol.getAPIVersion() + "/TourEiffel",
+        assertEquals("/" + FacebookSdk.getGraphApiVersion() + "/TourEiffel",
             connection.getURL().getPath());
 
         assertTrue(connection.getRequestProperty("User-Agent").startsWith("FBAndroidSDK"));
diff --git a/facebook/src/test/java/com/facebook/LegacyTokenCacheTest.java b/facebook/src/test/java/com/facebook/LegacyTokenCacheTest.java
index c7a80713b..85140317b 100644
--- a/facebook/src/test/java/com/facebook/LegacyTokenCacheTest.java
+++ b/facebook/src/test/java/com/facebook/LegacyTokenCacheTest.java
@@ -71,7 +71,7 @@
     @Override
     public void setUp() {
         super.setUp();
-
+        FacebookSdk.setApplicationId("123456789");
         FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
     }
 
diff --git a/facebook/src/test/java/com/facebook/ProfileCacheTest.java b/facebook/src/test/java/com/facebook/ProfileCacheTest.java
index e77179d7e..6743c1436 100644
--- a/facebook/src/test/java/com/facebook/ProfileCacheTest.java
+++ b/facebook/src/test/java/com/facebook/ProfileCacheTest.java
@@ -32,6 +32,7 @@
 public final class ProfileCacheTest extends FacebookTestCase {
     @Before
     public void before() throws Exception {
+        FacebookSdk.setApplicationId("123456789");
         FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
         RuntimeEnvironment.application.getSharedPreferences(
                 ProfileCache.SHARED_PREFERENCES_NAME,
diff --git a/facebook/src/test/java/com/facebook/ProfileManagerTest.java b/facebook/src/test/java/com/facebook/ProfileManagerTest.java
index 1747f5af4..6fad03570 100644
--- a/facebook/src/test/java/com/facebook/ProfileManagerTest.java
+++ b/facebook/src/test/java/com/facebook/ProfileManagerTest.java
@@ -45,6 +45,7 @@
 
     @Before
     public void before() {
+        FacebookSdk.setApplicationId("123456789");
         FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
     }
 
diff --git a/facebook/src/test/java/com/facebook/ProfileTest.java b/facebook/src/test/java/com/facebook/ProfileTest.java
index 980986d80..3b1eed2a1 100644
--- a/facebook/src/test/java/com/facebook/ProfileTest.java
+++ b/facebook/src/test/java/com/facebook/ProfileTest.java
@@ -135,6 +135,7 @@ public void testParcelSerialization() {
 
     @Test
     public void testGetSetCurrentProfile() {
+        FacebookSdk.setApplicationId("123456789");
         FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
         Profile profile1 = createDefaultProfile();
         Profile.setCurrentProfile(profile1);
diff --git a/facebook/src/test/java/com/facebook/ProfileTrackerTest.java b/facebook/src/test/java/com/facebook/ProfileTrackerTest.java
index 0c8a60890..2d36d2fa0 100644
--- a/facebook/src/test/java/com/facebook/ProfileTrackerTest.java
+++ b/facebook/src/test/java/com/facebook/ProfileTrackerTest.java
@@ -32,6 +32,7 @@
 public class ProfileTrackerTest extends FacebookPowerMockTestCase {
     @Test
     public void testStartStopTrackingAndBroadcast() {
+        FacebookSdk.setApplicationId("123456789");
         FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
         LocalBroadcastManager localBroadcastManager =
                 LocalBroadcastManager.getInstance(RuntimeEnvironment.application);
diff --git a/facebook/src/test/java/com/facebook/ProgressNoopOutputStreamTest.java b/facebook/src/test/java/com/facebook/ProgressNoopOutputStreamTest.java
index 7296683fe..103e7f87b 100644
--- a/facebook/src/test/java/com/facebook/ProgressNoopOutputStreamTest.java
+++ b/facebook/src/test/java/com/facebook/ProgressNoopOutputStreamTest.java
@@ -34,6 +34,7 @@
 
     @Before
     public void before() throws Exception {
+        FacebookSdk.setApplicationId("123456789");
         FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
         stream = new ProgressNoopOutputStream(null);
     }
diff --git a/facebook/src/test/java/com/facebook/ProgressOutputStreamTest.java b/facebook/src/test/java/com/facebook/ProgressOutputStreamTest.java
index dfc408638..e4011b3ef 100644
--- a/facebook/src/test/java/com/facebook/ProgressOutputStreamTest.java
+++ b/facebook/src/test/java/com/facebook/ProgressOutputStreamTest.java
@@ -42,6 +42,7 @@
 
     @Before
     public void before() throws Exception {
+        FacebookSdk.setApplicationId("123456789");
         FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
         r1 = new GraphRequest(null, "4");
         r2 = new GraphRequest(null, "4");
diff --git a/facebook/src/test/java/com/facebook/appevents/AnalyticsUserIDTest.java b/facebook/src/test/java/com/facebook/appevents/AnalyticsUserIDTest.java
new file mode 100644
index 000000000..f56aad65c
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/appevents/AnalyticsUserIDTest.java
@@ -0,0 +1,62 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import com.facebook.FacebookPowerMockTestCase;
+import com.facebook.FacebookSdk;
+
+import org.json.JSONObject;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+import org.robolectric.RuntimeEnvironment;
+
+public class AnalyticsUserIDTest extends FacebookPowerMockTestCase {
+    @Before
+    public void init() {
+        FacebookSdk.setApplicationId("123456789");
+        FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
+        AnalyticsUserIDStore.initStore();
+    }
+
+    @Test
+    public void testUserIDPersistence() throws Exception {
+        String userID = "123456789";
+
+        AppEventsLogger.setUserID(userID);
+        // The userID is saved async so we must wait before checking for the value
+        Thread.sleep(10);
+        Assert.assertEquals(userID, AppEventsLogger.getUserID());
+        AppEventsLogger.clearUserID();
+        Thread.sleep(10);
+        Assert.assertNull(AppEventsLogger.getUserID());
+    }
+
+    @Test
+    public void testUserIDAddedToAppEvent() throws Exception {
+        String userID = "123456789";
+        AppEventsLogger.setUserID(userID);
+        AppEvent appEvent = AppEventTestUtilities.getTestAppEvent();
+        JSONObject jsonObject = appEvent.getJSONObject();
+        Assert.assertEquals(jsonObject.getString("_app_user_id"), userID);
+    }
+
+}
diff --git a/facebook/src/test/java/com/facebook/appevents/AppEventTest.java b/facebook/src/test/java/com/facebook/appevents/AppEventTest.java
new file mode 100644
index 000000000..37fa2d501
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/appevents/AppEventTest.java
@@ -0,0 +1,78 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import com.facebook.FacebookSdk;
+import com.facebook.FacebookTestCase;
+import com.facebook.appevents.internal.Constants;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+import org.robolectric.RuntimeEnvironment;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+
+public class AppEventTest extends FacebookTestCase {
+    @Before
+    public void init() {
+        FacebookSdk.setApplicationId("123456789");
+        FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
+    }
+
+    @Test
+    public void testChecksumOfAppEventName() throws Exception {
+        AppEvent appEvent = AppEventTestUtilities.getTestAppEvent();
+        String eventNameMd5 = appEvent.getJSONObject().getString(Constants.EVENT_NAME_MD5_EVENT_KEY);
+        Assert.assertEquals("e0cf6877da9df873a85a2137fb5d2e26", eventNameMd5);
+    }
+
+    @Test
+    public void testChecksumOfAppEvent() throws Exception {
+        AppEvent appEvent = AppEventTestUtilities.getTestAppEvent();
+        Assert.assertTrue(appEvent.isChecksumValid());
+        appEvent.getJSONObject().put("new_key", "corrupted");
+        Assert.assertFalse(appEvent.isChecksumValid());
+    }
+
+    @Test
+    public void testAppEventSerializedChecksum() throws Exception {
+        AppEvent appEvent1 = AppEventTestUtilities.getTestAppEvent();
+
+        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
+        ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
+        objectOutputStream.writeObject(appEvent1);
+
+        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(
+                byteArrayOutputStream.toByteArray());
+        ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
+
+        AppEvent appEvent2 = (AppEvent)objectInputStream.readObject();
+        Assert.assertTrue(appEvent2.isChecksumValid());
+
+        // A secondary validation ensure that the json string matches the original
+        Assert.assertTrue(
+                appEvent1.getJSONObject().toString().equals(appEvent2.getJSONObject().toString()));
+    }
+}
diff --git a/facebook/src/test/java/com/facebook/appevents/AppEventTestUtilities.java b/facebook/src/test/java/com/facebook/appevents/AppEventTestUtilities.java
new file mode 100644
index 000000000..69414c7a7
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/appevents/AppEventTestUtilities.java
@@ -0,0 +1,42 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import android.os.Bundle;
+
+import java.util.UUID;
+
+public class AppEventTestUtilities {
+    public static AppEvent getTestAppEvent() throws Exception {
+        Bundle customParams = new Bundle();
+        customParams.putString("key1", "value1");
+        customParams.putString("key2", "value2");
+        AppEvent appEvent = new AppEvent(
+                "contextName",
+                "eventName",
+                1.0,
+                customParams,
+                false,
+                UUID.fromString("65565271-1ace-4580-bd13-b2bc6d0df035"));
+        appEvent.isChecksumValid();
+        return appEvent;
+    }
+}
diff --git a/facebook/src/test/java/com/facebook/appevents/AutomaticAnalyticsTest.java b/facebook/src/test/java/com/facebook/appevents/AutomaticAnalyticsTest.java
new file mode 100644
index 000000000..8f0f2e7e5
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/appevents/AutomaticAnalyticsTest.java
@@ -0,0 +1,69 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import com.facebook.internal.FetchedAppSettingsManager;
+import com.facebook.internal.Utility;
+import com.facebook.internal.FetchedAppSettings;
+import com.facebook.FacebookTestCase;
+
+import org.json.JSONObject;
+import static org.junit.Assert.assertEquals;
+import org.junit.Test;
+import org.powermock.reflect.Whitebox;
+
+public class AutomaticAnalyticsTest extends FacebookTestCase {
+
+    @Test
+    public void testAutomaticLoggingEnabledServerConfiguration() throws Exception {
+        JSONObject settingsJSON = new JSONObject();
+        settingsJSON.put("app_events_feature_bitmask", "0");
+        FetchedAppSettings settings = Whitebox.invokeMethod(
+                FetchedAppSettingsManager.class, "parseAppSettingsFromJSON", "123", settingsJSON);
+        assertEquals(settings.getAutomaticLoggingEnabled(),false);
+
+        settingsJSON.put("app_events_feature_bitmask", "7");
+        settings = Whitebox.invokeMethod(
+                FetchedAppSettingsManager.class, "parseAppSettingsFromJSON", "123", settingsJSON);
+        assertEquals(settings.getAutomaticLoggingEnabled(),false);
+
+        settingsJSON.put("app_events_feature_bitmask", "23");
+        settings = Whitebox.invokeMethod(
+                FetchedAppSettingsManager.class, "parseAppSettingsFromJSON", "123", settingsJSON);
+        assertEquals(settings.getAutomaticLoggingEnabled(),false);
+
+        settingsJSON.put("app_events_feature_bitmask", "8");
+        settings = Whitebox.invokeMethod(
+                FetchedAppSettingsManager.class, "parseAppSettingsFromJSON", "123", settingsJSON);
+        assertEquals(settings.getAutomaticLoggingEnabled(),true);
+
+        settingsJSON.put("app_events_feature_bitmask", "9");
+        settings = Whitebox.invokeMethod(
+                FetchedAppSettingsManager.class, "parseAppSettingsFromJSON", "123", settingsJSON);
+        assertEquals(settings.getAutomaticLoggingEnabled(),true);
+
+        JSONObject noBitmaskFieldSettings = new JSONObject();
+        settings = Whitebox.invokeMethod(
+                FetchedAppSettingsManager.class, "parseAppSettingsFromJSON", "123", noBitmaskFieldSettings);
+        assertEquals(settings.getAutomaticLoggingEnabled(),false);
+    }
+
+}
diff --git a/facebook/src/test/java/com/facebook/applinks/AppLinkDataTest.java b/facebook/src/test/java/com/facebook/applinks/AppLinkDataTest.java
index dcb63d8ba..85f30f9ea 100644
--- a/facebook/src/test/java/com/facebook/applinks/AppLinkDataTest.java
+++ b/facebook/src/test/java/com/facebook/applinks/AppLinkDataTest.java
@@ -42,6 +42,10 @@
     private static final String TARGET_URL_KEY = "target_url";
     private static final String USER_AGENT_KEY = "user_agent";
     private static final String USER_AGENT_VALUE = "foobarUserAgent";
+    private static final String EXTRAS_KEY = "extras";
+    private static final String DEEPLINK_CONTEXT_KEY = "deeplink_context";
+    private static final String PROMO_CODE_KEY = "promo_code";
+    private static final String PROMO_CODE = "PROMO1";
 
     private static final String JSON_DATA_REGULAR =
             "{"
@@ -77,6 +81,20 @@
                     + "  }"
                     + "}";
 
+    private static final String JSON_DATA_WITH_DEEPLINK_CONTEXT =
+            "{"
+                    + "\"version\":2,"
+                    + "\"bridge_args\": {\"method\": \"applink\"},"
+                    + "\"method_args\": {"
+                    + "    \"ref\": \"" + FB_REF_VALUE + "\","
+                    + "    \"" + TARGET_URL_KEY + "\": \"" + TARGET_URI_STRING + "\","
+                    + "    \"" + EXTRAS_KEY + "\": {"
+                    + "        \"" + DEEPLINK_CONTEXT_KEY + "\": {"
+                    + "            \"" + PROMO_CODE_KEY + "\": \""+ PROMO_CODE + "\""
+                    + "        }"
+                    + "    }"
+                    + "  }"
+                    + "}";
 
     private static class MockActivityWithAppLinkData extends Activity {
         public Intent getIntent() {
@@ -84,34 +102,29 @@ public Intent getIntent() {
             Intent intent = new Intent(Intent.ACTION_VIEW, targetUri);
             Bundle applinks = new Bundle();
             Bundle refererData = new Bundle();
+            Bundle extras = new Bundle();
+            String deeplinkContext = "{\"" + PROMO_CODE_KEY + "\": \""+ PROMO_CODE + "\"}";
+            extras.putString(DEEPLINK_CONTEXT_KEY, deeplinkContext);
             refererData.putString(FB_REF_KEY, FB_REF_VALUE);
             refererData.putString(EXTRA_ARGS_KEY, EXTRA_ARGS_VALUE);
             applinks.putBundle(REFERER_DATA_KEY, refererData);
             applinks.putString(TARGET_URL_KEY, TARGET_URI_STRING);
             applinks.putString(USER_AGENT_KEY, USER_AGENT_VALUE);
+            applinks.putBundle(EXTRAS_KEY, extras);
             intent.putExtra("al_applink_data", applinks);
             return intent;
         }
     }
 
     private static class MockActivityWithJsonData extends Activity {
-        private boolean useRefererData;
+        private String jsonString;
 
-        public MockActivityWithJsonData(boolean useRefererData) {
-            this.useRefererData = useRefererData;
-        }
-        public Intent getIntent() {
-            Intent intent = new Intent(Intent.ACTION_VIEW);
-            intent.putExtra(AppLinkData.BUNDLE_APPLINK_ARGS_KEY,
-                    useRefererData ? JSON_DATA_WITH_REFERER_DATA : JSON_DATA_REGULAR);
-            return intent;
+        public MockActivityWithJsonData(String jsonString) {
+            this.jsonString = jsonString;
         }
-    }
-
-    private static class MockActivityWithErrorJsonData extends Activity {
         public Intent getIntent() {
             Intent intent = new Intent(Intent.ACTION_VIEW);
-            intent.putExtra(AppLinkData.BUNDLE_APPLINK_ARGS_KEY, JSON_DATA_REGULAR_WITH_NESTED_ARRAY);
+            intent.putExtra(AppLinkData.BUNDLE_APPLINK_ARGS_KEY, jsonString);
             return intent;
         }
     }
@@ -129,11 +142,13 @@ public void testCreateFromAlApplinkData() {
         assertNotNull("referer data not null", refererData);
         assertEquals("ref param in referer data", FB_REF_VALUE, refererData.getString(FB_REF_KEY));
         assertEquals("extra param", EXTRA_ARGS_VALUE, refererData.getString(EXTRA_ARGS_KEY));
+        assertEquals("promo_code", PROMO_CODE, appLinkData.getPromotionCode());
     }
 
     @Test
     public void testCreateFromJson() {
-        AppLinkData appLinkData = AppLinkData.createFromActivity(new MockActivityWithJsonData(false));
+        AppLinkData appLinkData =
+                AppLinkData.createFromActivity(new MockActivityWithJsonData(JSON_DATA_REGULAR));
         assertNotNull("app link data not null", appLinkData);
         assertEquals("ref param", FB_REF_VALUE, appLinkData.getRef());
         assertEquals("target_url", TARGET_URI_STRING, appLinkData.getTargetUri().toString());
@@ -146,13 +161,17 @@ public void testCreateFromJson() {
 
     @Test
     public void testCreateFromJsonWithNestedArray() {
-        AppLinkData appLinkData = AppLinkData.createFromActivity(new MockActivityWithErrorJsonData());
+        AppLinkData appLinkData =
+                AppLinkData.createFromActivity(
+                        new MockActivityWithJsonData(JSON_DATA_REGULAR_WITH_NESTED_ARRAY));
         assertNull(appLinkData);
     }
 
     @Test
     public void testCreateFromJsonWithRefererData() {
-        AppLinkData appLinkData = AppLinkData.createFromActivity(new MockActivityWithJsonData(true));
+        AppLinkData appLinkData =
+                AppLinkData.createFromActivity(
+                        new MockActivityWithJsonData(JSON_DATA_WITH_REFERER_DATA));
         assertNotNull("app link data not null", appLinkData);
         assertEquals("ref param", FB_REF_VALUE, appLinkData.getRef());
         assertEquals("target_url", TARGET_URI_STRING, appLinkData.getTargetUri().toString());
@@ -164,4 +183,21 @@ public void testCreateFromJsonWithRefererData() {
         assertEquals("ref param in referer data", FB_REF_VALUE, refererData.getString(FB_REF_KEY));
         assertEquals("extra param", EXTRA_ARGS_VALUE, refererData.getString(EXTRA_ARGS_KEY));
     }
+
+    @Test
+    public void testCreateFromJsonWithDeeplinkContext() {
+        AppLinkData appLinkData =
+                AppLinkData.createFromActivity(
+                        new MockActivityWithJsonData(JSON_DATA_WITH_DEEPLINK_CONTEXT));
+        assertNotNull("app link data not null", appLinkData);
+        assertEquals("ref param", FB_REF_VALUE, appLinkData.getRef());
+        assertEquals("target_url", TARGET_URI_STRING, appLinkData.getTargetUri().toString());
+        assertEquals("promo_code", PROMO_CODE, appLinkData.getPromotionCode());
+        Bundle args = appLinkData.getArgumentBundle();
+        assertNotNull("app link args not null", args);
+        assertNull("user agent", args.getString(USER_AGENT_KEY));
+        Bundle refererData = appLinkData.getRefererData();
+        assertNull("referer data", refererData);
+    }
+
 }
diff --git a/facebook/src/test/java/com/facebook/internal/CallbackManagerImplPowerMockTest.java b/facebook/src/test/java/com/facebook/internal/CallbackManagerImplPowerMockTest.java
index 27dcb3125..37c044b2e 100644
--- a/facebook/src/test/java/com/facebook/internal/CallbackManagerImplPowerMockTest.java
+++ b/facebook/src/test/java/com/facebook/internal/CallbackManagerImplPowerMockTest.java
@@ -43,6 +43,7 @@
 
     @Before
     public void before() {
+        FacebookSdk.setApplicationId("123456789");
         FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
         // Reset the static state every time so tests don't interfere with each other.
         Whitebox.setInternalState(
diff --git a/facebook/src/test/java/com/facebook/internal/FacebookSignatureValidatorTest.java b/facebook/src/test/java/com/facebook/internal/FacebookSignatureValidatorTest.java
new file mode 100644
index 000000000..ecedfa87c
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/internal/FacebookSignatureValidatorTest.java
@@ -0,0 +1,99 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.internal;
+
+import android.app.Activity;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.Signature;
+
+import com.facebook.FacebookPowerMockTestCase;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+import static org.powermock.api.mockito.PowerMockito.mock;
+import static org.powermock.api.mockito.PowerMockito.mockStatic;
+import static org.powermock.api.mockito.PowerMockito.when;
+
+/**
+ * Tests for {@link com.facebook.internal.FacebookSignatureValidator}.
+ */
+@PrepareForTest({Utility.class})
+public class FacebookSignatureValidatorTest extends FacebookPowerMockTestCase {
+
+  private static final String PACKAGE_NAME = "com.facebook.orca";
+  private static final String APP_HASH = "8a3c4b262d721acd49a4bf97d5213199c86fa2b9";
+
+  private Activity mMockActivity;
+  private PackageManager mMockPackageManager;
+
+  @Before
+  public void setup() {
+    mockStatic(Utility.class);
+    mMockActivity = mock(Activity.class);
+    mMockPackageManager = mock(PackageManager.class);
+    when(mMockActivity.getPackageManager()).thenReturn(mMockPackageManager);
+  }
+
+  @Test
+  public void testInvalidWhenAppNotInstalled() throws Exception {
+    setupPackageManagerForApp(false, false);
+    assertFalse(FacebookSignatureValidator.validateSignature(mMockActivity, PACKAGE_NAME));
+  }
+
+  @Test
+  public void testInvalidWhenInstalledWithIncorrectSignature() throws Exception {
+    setupPackageManagerForApp(true, false);
+    assertFalse(FacebookSignatureValidator.validateSignature(mMockActivity, PACKAGE_NAME));
+  }
+
+  @Test
+  public void testValidWhenInstalledWithCorrectSignature() throws Exception {
+    setupPackageManagerForApp(true, true);
+    assertTrue(FacebookSignatureValidator.validateSignature(mMockActivity, PACKAGE_NAME));
+  }
+
+  /**
+   * Sets up the PackageManager to return what we expect depending on whether app is installed.
+   * @param isInstalled true to simulate that app is installed
+   */
+  private void setupPackageManagerForApp(boolean isInstalled, boolean hasValidSignature)
+      throws Exception {
+    if (isInstalled) {
+      PackageInfo packageInfo = new PackageInfo();
+      when(mMockPackageManager.getPackageInfo(PACKAGE_NAME, PackageManager.GET_SIGNATURES))
+              .thenReturn(packageInfo);
+      Signature signature = mock(Signature.class);
+      packageInfo.signatures = new Signature[]{signature};
+
+      if (hasValidSignature) {
+        when(Utility.sha1hash(signature.toByteArray())).thenReturn(APP_HASH);
+      }
+    } else {
+      when(mMockPackageManager.getPackageInfo(PACKAGE_NAME, PackageManager.GET_SIGNATURES))
+          .thenThrow(new PackageManager.NameNotFoundException());
+    }
+  }
+}
diff --git a/facebook/src/test/java/com/facebook/internal/FileLruCacheTest.java b/facebook/src/test/java/com/facebook/internal/FileLruCacheTest.java
index e4a6e00e2..56fc69a7b 100644
--- a/facebook/src/test/java/com/facebook/internal/FileLruCacheTest.java
+++ b/facebook/src/test/java/com/facebook/internal/FileLruCacheTest.java
@@ -43,6 +43,7 @@
 
     @Before
     public void before() {
+        FacebookSdk.setApplicationId("123456789");
         FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
     }
 
diff --git a/facebook/src/test/java/com/facebook/internal/ShareInternalUtilityTest.java b/facebook/src/test/java/com/facebook/internal/ShareInternalUtilityTest.java
index 78249805b..efa4d443c 100644
--- a/facebook/src/test/java/com/facebook/internal/ShareInternalUtilityTest.java
+++ b/facebook/src/test/java/com/facebook/internal/ShareInternalUtilityTest.java
@@ -35,7 +35,6 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
-import java.util.UUID;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
@@ -93,7 +92,7 @@ public void testJsonSerializationOfOpenGraph() {
             List<String> peopleIds = Utility.jsonArrayToStringList(object.getJSONArray("tags"));
             assertEquals(4, peopleIds.size());
             for (int i = 1; i < 5; ++i) {
-                assertTrue(peopleIds.contains(new Integer(i).toString()));
+                assertTrue(peopleIds.contains(Integer.valueOf(i).toString()));
             }
 
             assertEquals(placeId, object.getString("place"));
diff --git a/facebook/src/test/java/com/facebook/login/CustomTabLoginMethodHandlerTest.java b/facebook/src/test/java/com/facebook/login/CustomTabLoginMethodHandlerTest.java
new file mode 100644
index 000000000..f1be054a3
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/login/CustomTabLoginMethodHandlerTest.java
@@ -0,0 +1,237 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.login;
+
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.content.pm.ServiceInfo;
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentActivity;
+
+import com.facebook.AccessToken;
+import com.facebook.FacebookActivity;
+import com.facebook.FacebookException;
+import com.facebook.FacebookOperationCanceledException;
+import com.facebook.FacebookSdk;
+import com.facebook.TestUtils;
+import com.facebook.internal.FetchedAppSettings;
+import com.facebook.internal.FetchedAppSettingsManager;
+import com.facebook.internal.Utility;
+import com.facebook.internal.Validate;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.mockito.ArgumentCaptor;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Matchers.anyString;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.powermock.api.mockito.PowerMockito.mockStatic;
+import static org.powermock.api.mockito.PowerMockito.when;
+
+@PrepareForTest({
+        LoginClient.class,
+        Validate.class,
+        Utility.class,
+        FacebookSdk.class,
+        AccessToken.class,
+        FetchedAppSettings.class,
+        FetchedAppSettingsManager.class
+})
+public class CustomTabLoginMethodHandlerTest extends LoginHandlerTestCase {
+    private final static String SIGNED_REQUEST_STR = "ggarbage.eyJhbGdvcml0aG0iOiJITUFDSEEyNTYiLCJ"
+            + "jb2RlIjoid2h5bm90IiwiaXNzdWVkX2F0IjoxNDIyNTAyMDkyLCJ1c2VyX2lkIjoiMTIzIn0";
+    private final static String CHROME_PACKAGE = "com.android.chrome";
+    private final static String DEV_PACKAGE = "com.chrome.dev";
+    private final static String BETA_PACKAGE = "com.chrome.beta";
+
+    private CustomTabLoginMethodHandler handler;
+    private LoginClient.Request request;
+
+    @Before
+    public void setUp() {
+        handler = new CustomTabLoginMethodHandler(mockLoginClient);
+        request = createRequest();
+    }
+
+    @Test
+    public void testCustomTabHandlesSuccess() {
+        final Bundle bundle = new Bundle();
+        bundle.putString("access_token", ACCESS_TOKEN);
+        bundle.putString("expires_in", String.format("%d", EXPIRES_IN_DELTA));
+        bundle.putString("code", "Something else");
+        bundle.putString("signed_request", SIGNED_REQUEST_STR);
+        handler.onComplete(request, bundle, null);
+
+        final ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
+                ArgumentCaptor.forClass(LoginClient.Result.class);
+        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
+
+        final LoginClient.Result result = resultArgumentCaptor.getValue();
+        assertNotNull(result);
+        assertEquals(LoginClient.Result.Code.SUCCESS, result.code);
+
+        final AccessToken token = result.token;
+        assertNotNull(token);
+        assertEquals(ACCESS_TOKEN, token.getToken());
+        assertDateDiffersWithinDelta(new Date(), token.getExpires(), EXPIRES_IN_DELTA * 1000, 1000);
+        TestUtils.assertSamePermissions(PERMISSIONS, token.getPermissions());
+    }
+
+    @Test
+    public void testCustomTabHandlesCancel() {
+        handler.onComplete(request, null, new FacebookOperationCanceledException());
+
+        final ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
+                ArgumentCaptor.forClass(LoginClient.Result.class);
+        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
+        final LoginClient.Result result = resultArgumentCaptor.getValue();
+
+        assertNotNull(result);
+        assertEquals(LoginClient.Result.Code.CANCEL, result.code);
+        assertNull(result.token);
+        assertNotNull(result.errorMessage);
+    }
+
+    @Test
+    public void testCustomTabHandlesError() {
+        handler.onComplete(request, null, new FacebookException(ERROR_MESSAGE));
+
+        final ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
+                ArgumentCaptor.forClass(LoginClient.Result.class);
+        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
+        final LoginClient.Result result = resultArgumentCaptor.getValue();
+
+        assertNotNull(result);
+        assertEquals(LoginClient.Result.Code.ERROR, result.code);
+        assertNull(result.token);
+        assertNotNull(result.errorMessage);
+        assertEquals(ERROR_MESSAGE, result.errorMessage);
+    }
+
+    @Test
+    public void testTryAuthorizeNeedsRedirectActivity() {
+        mockTryAuthorize();
+
+        mockChromeCustomTabsSupported(true, CHROME_PACKAGE);
+        mockCustomTabsAllowed(true);
+        mockCustomTabRedirectActivity(true);
+        assertTrue(handler.tryAuthorize(request));
+
+        mockCustomTabsAllowed(false);
+        assertFalse(handler.tryAuthorize(request));
+    }
+
+    @Test
+    public void testTryAuthorizeWithChromePackage() {
+        mockTryAuthorize();
+        mockCustomTabsAllowed(true);
+        mockCustomTabRedirectActivity(true);
+
+        mockChromeCustomTabsSupported(true, CHROME_PACKAGE);
+        assertTrue(handler.tryAuthorize(request));
+    }
+
+    @Test
+    public void testTryAuthorizeWithChromeBetaPackage() {
+        mockTryAuthorize();
+        mockCustomTabsAllowed(true);
+        mockCustomTabRedirectActivity(true);
+
+        mockChromeCustomTabsSupported(true, BETA_PACKAGE);
+        assertTrue(handler.tryAuthorize(request));
+    }
+
+    @Test
+    public void testTryAuthorizeWithChromeDevPackage() {
+        mockTryAuthorize();
+        mockCustomTabsAllowed(true);
+        mockCustomTabRedirectActivity(true);
+
+        mockChromeCustomTabsSupported(true, DEV_PACKAGE);
+        assertTrue(handler.tryAuthorize(request));
+    }
+
+    @Test
+    public void testTryAuthorizeWithoutChromePackage() {
+        mockTryAuthorize();
+        mockCustomTabsAllowed(true);
+        mockCustomTabRedirectActivity(true);
+
+        mockChromeCustomTabsSupported(true, "not.chrome.package");
+        assertFalse(handler.tryAuthorize(request));
+    }
+
+    private void mockTryAuthorize() {
+        mockStatic(FacebookSdk.class);
+        when(FacebookSdk.isInitialized()).thenReturn(true);
+        mockStatic(AccessToken.class);
+        when(AccessToken.getCurrentAccessToken()).thenReturn(null);
+        Fragment fragment = mock(LoginFragment.class);
+        when(mockLoginClient.getFragment()).thenReturn(fragment);
+    }
+
+    private void mockChromeCustomTabsSupported(final boolean supported, final String packageName) {
+        final List<ResolveInfo> resolveInfos = new ArrayList<>();
+        ResolveInfo resolveInfo = new ResolveInfo();
+        ServiceInfo serviceInfo = new ServiceInfo();
+        serviceInfo.packageName = packageName;
+        resolveInfo.serviceInfo = serviceInfo;
+        if (supported) {
+            resolveInfos.add(resolveInfo);
+        }
+        final PackageManager packageManager = mock(PackageManager.class);
+        when(packageManager.queryIntentServices(any(Intent.class), anyInt()))
+                .thenReturn(resolveInfos);
+        activity = mock(FacebookActivity.class);
+        when(mockLoginClient.getActivity()).thenReturn(activity);
+        when(activity.getPackageManager()).thenReturn(packageManager);
+    }
+
+    private void mockCustomTabRedirectActivity(final boolean hasActivity) {
+        mockStatic(Validate.class);
+        when(Validate.hasCustomTabRedirectActivity(any(Context.class))).thenReturn(hasActivity);
+    }
+
+    private void mockCustomTabsAllowed(final boolean allowed) {
+        final FetchedAppSettings settings = mock(FetchedAppSettings.class);
+        when(settings.getCustomTabsEnabled()).thenReturn(allowed);
+        mockStatic(FetchedAppSettingsManager.class);
+        when(FetchedAppSettingsManager.getAppSettingsWithoutQuery(anyString())).thenReturn(settings);
+    }
+
+}
diff --git a/facebook/src/test/java/com/facebook/login/FacebookLiteLoginMethodHandlerTest.java b/facebook/src/test/java/com/facebook/login/FacebookLiteLoginMethodHandlerTest.java
new file mode 100644
index 000000000..0d25ed978
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/login/FacebookLiteLoginMethodHandlerTest.java
@@ -0,0 +1,172 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.login;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+
+import com.facebook.AccessToken;
+import com.facebook.FacebookSdk;
+import com.facebook.TestUtils;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.mockito.ArgumentCaptor;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.robolectric.RuntimeEnvironment;
+
+import java.util.Date;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.powermock.api.mockito.PowerMockito.when;
+
+@PrepareForTest( { LoginClient.class })
+public class FacebookLiteLoginMethodHandlerTest extends LoginHandlerTestCase {
+    private static final String CANCEL_MESSAGE = "Permissions error";
+    private final static String SIGNED_REQUEST_STR = "ggarbage.eyJhbGdvcml0aG0iOiJITUFDSEEyNTYiLCJ"
+            + "jb2RlIjoid2h5bm90IiwiaXNzdWVkX2F0IjoxNDIyNTAyMDkyLCJ1c2VyX2lkIjoiMTIzIn0";
+
+    @Before
+    @Override
+    public void before() throws Exception {
+        super.before();
+        FacebookSdk.setApplicationId("123456789");
+        FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
+    }
+
+    @Test
+    public void testFacebookLiteHandlesSuccess() {
+        Bundle bundle = new Bundle();
+        bundle.putLong("expires_in", EXPIRES_IN_DELTA);
+        bundle.putString("access_token", ACCESS_TOKEN);
+        bundle.putString("signed_request", SIGNED_REQUEST_STR);
+
+        Intent intent = new Intent();
+        intent.putExtras(bundle);
+
+        FacebookLiteLoginMethodHandler handler =
+                new FacebookLiteLoginMethodHandler(mockLoginClient);
+
+        LoginClient.Request request = createRequest();
+        when(mockLoginClient.getPendingRequest()).thenReturn(request);
+
+        handler.tryAuthorize(request);
+        handler.onActivityResult(0, Activity.RESULT_OK, intent);
+
+        ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
+                ArgumentCaptor.forClass(LoginClient.Result.class);
+        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
+
+        LoginClient.Result result = resultArgumentCaptor.getValue();
+
+        assertNotNull(result);
+        assertEquals(LoginClient.Result.Code.SUCCESS, result.code);
+
+        AccessToken token = result.token;
+        assertNotNull(token);
+        assertEquals(ACCESS_TOKEN, token.getToken());
+        assertDateDiffersWithinDelta(new Date(), token.getExpires(), EXPIRES_IN_DELTA * 1000, 1000);
+        TestUtils.assertSamePermissions(PERMISSIONS, token.getPermissions());
+    }
+
+    @Test
+    public void testFacebookLiteHandlesBack() {
+        FacebookLiteLoginMethodHandler handler =
+                new FacebookLiteLoginMethodHandler(mockLoginClient);
+
+        LoginClient.Request request = createRequest();
+        handler.tryAuthorize(request);
+        handler.onActivityResult(0, Activity.RESULT_CANCELED, null);
+
+        ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
+                ArgumentCaptor.forClass(LoginClient.Result.class);
+        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
+
+        LoginClient.Result result = resultArgumentCaptor.getValue();
+
+        assertNotNull(result);
+        assertEquals(LoginClient.Result.Code.CANCEL, result.code);
+
+        assertNull(result.token);
+        assertEquals(result.errorMessage, "Operation canceled");
+    }
+
+    @Test
+    public void testFacebookLiteHandlesCancel() {
+        Bundle bundle = new Bundle();
+        bundle.putString("error", CANCEL_MESSAGE);
+
+        Intent intent = new Intent();
+        intent.putExtras(bundle);
+
+        FacebookLiteLoginMethodHandler handler =
+                new FacebookLiteLoginMethodHandler(mockLoginClient);
+
+        LoginClient.Request request = createRequest();
+        handler.tryAuthorize(request);
+        handler.onActivityResult(0, Activity.RESULT_CANCELED, intent);
+
+        ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
+                ArgumentCaptor.forClass(LoginClient.Result.class);
+        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
+
+        LoginClient.Result result = resultArgumentCaptor.getValue();
+
+        assertNotNull(result);
+    }
+
+    @Test
+    public void testFacebookLiteHandlesErrorMessage() {
+        Bundle bundle = new Bundle();
+        bundle.putString("error", ERROR_MESSAGE);
+
+        Intent intent = new Intent();
+        intent.putExtras(bundle);
+
+        FacebookLiteLoginMethodHandler handler =
+                new FacebookLiteLoginMethodHandler(mockLoginClient);
+
+        LoginClient.Request request = createRequest();
+        handler.tryAuthorize(request);
+        handler.onActivityResult(0, Activity.RESULT_CANCELED, intent);
+
+        ArgumentCaptor<LoginClient.Result> resultArgumentCaptor =
+                ArgumentCaptor.forClass(LoginClient.Result.class);
+        verify(mockLoginClient, times(1)).completeAndValidate(resultArgumentCaptor.capture());
+
+        LoginClient.Result result = resultArgumentCaptor.getValue();
+
+        assertNotNull(result);
+        assertEquals(LoginClient.Result.Code.CANCEL, result.code);
+
+        assertNull(result.token);
+        assertNotNull(result.errorMessage);
+        assertTrue(result.errorMessage.contains(ERROR_MESSAGE));
+    }
+}
diff --git a/facebook/src/test/java/com/facebook/login/KatanaProxyLoginMethodHandlerTest.java b/facebook/src/test/java/com/facebook/login/KatanaProxyLoginMethodHandlerTest.java
index c57831876..7281ffcec 100644
--- a/facebook/src/test/java/com/facebook/login/KatanaProxyLoginMethodHandlerTest.java
+++ b/facebook/src/test/java/com/facebook/login/KatanaProxyLoginMethodHandlerTest.java
@@ -32,7 +32,6 @@
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;
 import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
 
 import java.util.Date;
@@ -56,6 +55,7 @@
     @Override
     public void before() throws Exception {
         super.before();
+        FacebookSdk.setApplicationId("123456789");
         FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
     }
 
diff --git a/facebook/src/test/java/com/facebook/login/LoginClientTest.java b/facebook/src/test/java/com/facebook/login/LoginClientTest.java
index 61076cbb8..e64b937b8 100644
--- a/facebook/src/test/java/com/facebook/login/LoginClientTest.java
+++ b/facebook/src/test/java/com/facebook/login/LoginClientTest.java
@@ -68,6 +68,7 @@ public void before() throws Exception {
 
     @Test
     public void testReauthorizationWithSameFbidSucceeds() throws Exception {
+        FacebookSdk.setApplicationId("123456789");
         FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
         LoginClient.Request request = createRequest(ACCESS_TOKEN);
 
diff --git a/facebook/src/test/java/com/facebook/login/LoginManagerTest.java b/facebook/src/test/java/com/facebook/login/LoginManagerTest.java
index 59f0a7d54..c3b14805e 100644
--- a/facebook/src/test/java/com/facebook/login/LoginManagerTest.java
+++ b/facebook/src/test/java/com/facebook/login/LoginManagerTest.java
@@ -27,6 +27,7 @@
 import android.content.Intent;
 import android.content.pm.PackageManager;
 import android.content.pm.ResolveInfo;
+import android.os.Bundle;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentActivity;
 
@@ -66,6 +67,7 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 import static org.powermock.api.mockito.PowerMockito.*;
 
 @PrepareForTest({ FacebookSdk.class, AccessToken.class, Profile.class})
@@ -98,6 +100,7 @@ public void before() throws Exception {
         when(FacebookSdk.getApplicationContext()).thenReturn(mockApplicationContext);
         when(FacebookSdk.getExecutor()).thenReturn(threadExecutor);
         when(mockFragment.getActivity()).thenReturn(mockFragmentActivity);
+        when(mockActivity.getApplicationContext()).thenReturn(mockApplicationContext);
 
         // We use mocks rather than RobolectricPackageManager because it's simpler to not
         // have to specify Intents. Default to resolving all intents to something.
@@ -264,8 +267,9 @@ public void implTestLogInCreatesPendingRequestWithCorrectValues(
             @Override
             public boolean matches(Object argument) {
                 Intent orig = (Intent)argument;
+                Bundle bundle = orig.getBundleExtra(LoginFragment.REQUEST_KEY);
                 LoginClient.Request request =
-                        (LoginClient.Request)orig.getParcelableExtra(LoginFragment.EXTRA_REQUEST);
+                        (LoginClient.Request)bundle.getParcelable(LoginFragment.EXTRA_REQUEST);
                 assertEquals(MOCK_APP_ID, request.getApplicationId());
                 assertEquals(LoginBehavior.NATIVE_ONLY, request.getLoginBehavior());
                 assertEquals(DefaultAudience.EVERYONE, request.getDefaultAudience());
diff --git a/facebook/src/test/java/com/facebook/messenger/MessengerUtilsTest.java b/facebook/src/test/java/com/facebook/messenger/MessengerUtilsTest.java
index f102ec1a5..70062b2d1 100644
--- a/facebook/src/test/java/com/facebook/messenger/MessengerUtilsTest.java
+++ b/facebook/src/test/java/com/facebook/messenger/MessengerUtilsTest.java
@@ -23,49 +23,55 @@
 import android.app.Activity;
 import android.content.ContentResolver;
 import android.content.Intent;
-import android.content.pm.PackageInfo;
-import android.content.pm.PackageManager;
 import android.database.MatrixCursor;
 import android.net.Uri;
 import android.os.Bundle;
 
+import com.facebook.FacebookPowerMockTestCase;
 import com.facebook.FacebookSdk;
+import com.facebook.internal.FacebookSignatureValidator;
 
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
-import org.robolectric.Robolectric;
+import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 import java.util.Arrays;
 
-import static org.junit.Assert.*;
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.*;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.eq;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 /**
  * Tests for {@link com.facebook.messenger.MessengerUtils}
  */
 @RunWith(RobolectricTestRunner.class)
 @Config(sdk = 18, manifest = Config.NONE)
-public class MessengerUtilsTest {
+@PrepareForTest({FacebookSignatureValidator.class})
+public class MessengerUtilsTest extends FacebookPowerMockTestCase {
 
   private Activity mMockActivity;
-  private PackageManager mMockPackageManager;
   private ContentResolver mMockContentResolver;
 
   @Before
   public void setup() {
     mMockActivity = mock(Activity.class);
-    mMockPackageManager = mock(PackageManager.class);
     mMockContentResolver = mock(ContentResolver.class);
-    when(mMockActivity.getPackageManager()).thenReturn(mMockPackageManager);
     when(mMockActivity.getContentResolver()).thenReturn(mMockContentResolver);
-    FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
     FacebookSdk.setApplicationId("200");
+    FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
+    PowerMockito.mockStatic(FacebookSignatureValidator.class);
   }
 
   @Test
@@ -226,14 +232,9 @@ public void testFinishShareToMessengerWithUnexpectedIntent() throws Exception {
    *
    * @param isInstalled true to simulate that messenger is installed
    */
-  private void setupPackageManagerForMessenger(boolean isInstalled) throws Exception {
-    if (isInstalled) {
-      when(mMockPackageManager.getPackageInfo("com.facebook.orca", 0))
-          .thenReturn(new PackageInfo());
-    } else {
-      when(mMockPackageManager.getPackageInfo("com.facebook.orca", 0))
-          .thenThrow(new PackageManager.NameNotFoundException());
-    }
+  private void setupPackageManagerForMessenger(boolean isInstalled) {
+    when(FacebookSignatureValidator.validateSignature(mMockActivity, "com.facebook.orca"))
+            .thenReturn(isInstalled);
   }
 
   /**
diff --git a/facebook/src/test/java/com/facebook/places/PlaceManagerTest.java b/facebook/src/test/java/com/facebook/places/PlaceManagerTest.java
new file mode 100644
index 000000000..20ea002f6
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/places/PlaceManagerTest.java
@@ -0,0 +1,123 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.places;
+
+import android.location.Location;
+import android.os.Bundle;
+
+import com.facebook.AccessToken;
+import com.facebook.FacebookPowerMockTestCase;
+import com.facebook.GraphRequest;
+import com.facebook.HttpMethod;
+import com.facebook.places.model.CurrentPlaceFeedbackRequestParams;
+import com.facebook.places.model.PlaceInfoRequestParams;
+import com.facebook.places.model.PlaceSearchRequestParams;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.powermock.api.mockito.PowerMockito;
+
+import static org.junit.Assert.assertEquals;
+
+import org.powermock.core.classloader.annotations.PrepareForTest;
+
+import static org.powermock.api.mockito.PowerMockito.mockStatic;
+
+@PrepareForTest({
+        AccessToken.class})
+public class PlaceManagerTest extends FacebookPowerMockTestCase {
+
+    @Before
+    public void setup() {
+        mockStatic(AccessToken.class);
+        PowerMockito.when(AccessToken.getCurrentAccessToken()).thenReturn(null);
+    }
+
+    @Test
+    public void testSearchPlaceForLocationRequest() {
+        PlaceSearchRequestParams.Builder builder = new PlaceSearchRequestParams.Builder();
+        builder.setSearchText("search text");
+        builder.setLimit(5);
+        builder.addCategory("category1");
+        builder.addCategory("category2");
+        builder.addField("field1");
+        builder.addField("field2");
+        builder.setDistance(500);
+
+        PlaceSearchRequestParams params = builder.build();
+        Location location = new Location("dummy");
+        location.setLatitude(1);
+        location.setLongitude(2);
+
+        GraphRequest request =
+                PlaceManager.newPlaceSearchRequestForLocation(params, location);
+
+        assertEquals("search", request.getGraphPath());
+        assertEquals(HttpMethod.GET, request.getHttpMethod());
+
+        Bundle requestParams = request.getParameters();
+
+        assertEquals("search text", requestParams.get("q"));
+        assertEquals(500, requestParams.get("distance"));
+        assertEquals(5, requestParams.get("limit"));
+        assertEquals("1.000000,2.000000", requestParams.get("center"));
+        assertEquals("field1,field2", requestParams.get("fields"));
+        assertEquals("place", requestParams.get("type"));
+        assertEquals("[\"category2\",\"category1\"]", requestParams.get("categories"));
+    }
+
+    @Test
+    public void testPlaceInfoRequest() {
+        PlaceInfoRequestParams.Builder builder = new PlaceInfoRequestParams.Builder();
+        builder.setPlaceId("12345");
+        builder.addField("field1");
+        builder.addFields(new String[]{"field2", "field3"});
+        PlaceInfoRequestParams params = builder.build();
+
+        GraphRequest request = PlaceManager.newPlaceInfoRequest(params);
+
+        assertEquals("12345", request.getGraphPath());
+        assertEquals(HttpMethod.GET, request.getHttpMethod());
+
+        Bundle requestParams = request.getParameters();
+        assertEquals("field1,field3,field2", requestParams.get("fields"));
+    }
+
+    @Test
+    public void testCurrentPlaceFeedbackRequest() {
+        CurrentPlaceFeedbackRequestParams.Builder builder =
+                new CurrentPlaceFeedbackRequestParams.Builder();
+        builder.setPlaceId("12345");
+        builder.setTracking("trackingid");
+        builder.setWasHere(true);
+        CurrentPlaceFeedbackRequestParams params = builder.build();
+
+        GraphRequest request = PlaceManager.newCurrentPlaceFeedbackRequest(params);
+
+        assertEquals("current_place/feedback", request.getGraphPath());
+        assertEquals(HttpMethod.POST, request.getHttpMethod());
+
+        Bundle requestParams = request.getParameters();
+        assertEquals("12345", requestParams.get("place_id"));
+        assertEquals("trackingid", requestParams.get("tracking"));
+        assertEquals(true, requestParams.get("was_here"));
+    }
+}
diff --git a/facebook/src/test/java/com/facebook/places/model/CurrentPlaceFeedbackRequestParamsTest.java b/facebook/src/test/java/com/facebook/places/model/CurrentPlaceFeedbackRequestParamsTest.java
new file mode 100644
index 000000000..c0c4a2711
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/places/model/CurrentPlaceFeedbackRequestParamsTest.java
@@ -0,0 +1,43 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.places.model;
+
+import com.facebook.FacebookTestCase;
+
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+
+public class CurrentPlaceFeedbackRequestParamsTest extends FacebookTestCase {
+    @Test
+    public void testBuilder() {
+        CurrentPlaceFeedbackRequestParams.Builder builder =
+                new CurrentPlaceFeedbackRequestParams.Builder();
+        builder.setPlaceId("place id");
+        builder.setTracking("tracking id");
+        builder.setWasHere(true);
+        CurrentPlaceFeedbackRequestParams params = builder.build();
+
+        assertEquals("place id", params.getPlaceId());
+        assertEquals("tracking id", params.getTracking());
+        assertEquals(true, params.wasHere());
+    }
+}
diff --git a/facebook/src/test/java/com/facebook/places/model/CurrentPlaceRequestParamsTest.java b/facebook/src/test/java/com/facebook/places/model/CurrentPlaceRequestParamsTest.java
new file mode 100644
index 000000000..57d8add12
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/places/model/CurrentPlaceRequestParamsTest.java
@@ -0,0 +1,64 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.places.model;
+
+import android.location.Location;
+
+import com.facebook.FacebookTestCase;
+
+import org.junit.Test;
+
+import java.util.Set;
+
+import static org.junit.Assert.assertEquals;
+
+public class CurrentPlaceRequestParamsTest extends FacebookTestCase {
+    @Test
+    public void testBuilder() {
+        Location location = new Location("dummy");
+        location.setLatitude(1.0);
+        location.setLongitude(2.0);
+
+        CurrentPlaceRequestParams.Builder builder = new CurrentPlaceRequestParams.Builder();
+        builder.setMinConfidenceLevel(CurrentPlaceRequestParams.ConfidenceLevel.MEDIUM);
+        builder.setLimit(22);
+        builder.setScanMode(CurrentPlaceRequestParams.ScanMode.LOW_LATENCY);
+        builder.setLocation(location);
+        builder.addField("field1");
+        builder.addField("field2");
+        CurrentPlaceRequestParams params = builder.build();
+
+        assertEquals(22, params.getLimit());
+        assertEquals(location, params.getLocation());
+        assertEquals(
+                CurrentPlaceRequestParams.ConfidenceLevel.MEDIUM,
+                params.getMinConfidenceLevel());
+        assertEquals(CurrentPlaceRequestParams.ScanMode.LOW_LATENCY, params.getScanMode());
+        assertSetEqual(new String[]{"field1", "field2"}, params.getFields());
+    }
+
+    private void assertSetEqual(String[] expectedValues, Set<String> actualValues) {
+        assertEquals(expectedValues.length, actualValues.size());
+        for (String expectedValue : expectedValues) {
+            assertEquals(true, actualValues.contains(expectedValue));
+        }
+    }
+}
diff --git a/facebook/src/test/java/com/facebook/places/model/PlaceInfoRequestParamsTest.java b/facebook/src/test/java/com/facebook/places/model/PlaceInfoRequestParamsTest.java
new file mode 100644
index 000000000..456da8a8a
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/places/model/PlaceInfoRequestParamsTest.java
@@ -0,0 +1,47 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.places.model;
+
+import com.facebook.FacebookTestCase;
+
+import org.junit.Test;
+
+import java.util.Set;
+
+import static org.junit.Assert.assertEquals;
+
+public class PlaceInfoRequestParamsTest extends FacebookTestCase {
+    @Test
+    public void testBuilder() {
+        PlaceInfoRequestParams.Builder builder = new PlaceInfoRequestParams.Builder();
+        builder.setPlaceId("place id");
+        builder.addFields(new String[]{"field1", "field2"});
+        builder.addField("field3");
+        PlaceInfoRequestParams params = builder.build();
+
+        assertEquals("place id", params.getPlaceId());
+        Set<String> fields  = params.getFields();
+        assertEquals(3, fields.size());
+        assertEquals(true, fields.contains("field1"));
+        assertEquals(true, fields.contains("field2"));
+        assertEquals(true, fields.contains("field3"));
+    }
+}
diff --git a/facebook/src/test/java/com/facebook/places/model/PlaceSearchRequestParamsTest.java b/facebook/src/test/java/com/facebook/places/model/PlaceSearchRequestParamsTest.java
new file mode 100644
index 000000000..2ceae576c
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/places/model/PlaceSearchRequestParamsTest.java
@@ -0,0 +1,57 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.places.model;
+
+import com.facebook.FacebookTestCase;
+
+import org.junit.Test;
+
+import java.util.Set;
+
+import static org.junit.Assert.assertEquals;
+
+public class PlaceSearchRequestParamsTest extends FacebookTestCase {
+    @Test
+    public void testBuilder() {
+        PlaceSearchRequestParams.Builder builder = new PlaceSearchRequestParams.Builder();
+        builder.setDistance(123);
+        builder.setLimit(22);
+        builder.setSearchText("search query");
+        builder.addCategory("category1");
+        builder.addCategory("category2");
+        builder.addField("field1");
+        builder.addField("field2");
+        PlaceSearchRequestParams params = builder.build();
+
+        assertEquals(123, params.getDistance());
+        assertEquals(22, params.getLimit());
+        assertEquals("search query", params.getSearchText());
+        assertSetEqual(new String[]{"category1", "category2"}, params.getCategories());
+        assertSetEqual(new String[]{"field1", "field2"}, params.getFields());
+    }
+
+    private void assertSetEqual(String[] expectedValues, Set<String> actualValues) {
+        assertEquals(expectedValues.length, actualValues.size());
+        for (String expectedValue : expectedValues) {
+            assertEquals(true, actualValues.contains(expectedValue));
+        }
+    }
+}
diff --git a/facebook/src/test/java/com/facebook/share/internal/ShareContentValidationTest.java b/facebook/src/test/java/com/facebook/share/internal/ShareContentValidationTest.java
index 775fd8051..0e80ebf01 100644
--- a/facebook/src/test/java/com/facebook/share/internal/ShareContentValidationTest.java
+++ b/facebook/src/test/java/com/facebook/share/internal/ShareContentValidationTest.java
@@ -161,8 +161,8 @@ public void testItValidatesNullContentForWebShare() {
         ShareContentValidation.validateForWebShare(null);
     }
 
-    @Test(expected = FacebookException.class)
-    public void testItDoesNotAcceptSharePhotoContentByWeb() {
+    @Test
+    public void testItDoesAcceptSharePhotoContentByWeb() {
         SharePhoto sharePhoto = buildSharePhoto("https://facebook.com/awesome.gif");
         SharePhotoContent sharePhotoContent =
                 new SharePhotoContent.Builder().addPhoto(sharePhoto).build();
diff --git a/gradle.properties b/gradle.properties
index 475b38ce6..48ed711a5 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,4 +1,5 @@
 ANDROID_BUILD_MIN_SDK_VERSION=15
-ANDROID_BUILD_TARGET_SDK_VERSION=23
-ANDROID_BUILD_TOOLS_VERSION=23.0.1
-ANDROID_BUILD_SDK_VERSION=23
+ANDROID_BUILD_TARGET_SDK_VERSION=25
+ANDROID_BUILD_TOOLS_VERSION=25.0.3
+ANDROID_BUILD_SDK_VERSION=25
+org.gradle.jvmargs=-Xmx1536M
\ No newline at end of file
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index fd7e590e5..ca78035ef 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 431dd073f..8733a5efc 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Mon Oct 05 14:11:01 PDT 2015
+#Fri Sep 16 14:59:52 PDT 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.6-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.5-all.zip
diff --git a/gradle/wrapper/gradle-wrapper.properties.orig b/gradle/wrapper/gradle-wrapper.properties.orig
new file mode 100644
index 000000000..ebefc9f95
--- /dev/null
+++ b/gradle/wrapper/gradle-wrapper.properties.orig
@@ -0,0 +1,14 @@
+<<<<<<< HEAD
+#Thu May 05 11:41:06 CEST 2016
+=======
+#Fri May 13 11:07:42 PDT 2016
+>>>>>>> upstream/master
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+<<<<<<< HEAD
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-all.zip
+=======
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-bin.zip
+>>>>>>> upstream/master
diff --git a/gradlew b/gradlew
index 91a7e269e..27309d923 100755
--- a/gradlew
+++ b/gradlew
@@ -6,12 +6,30 @@
 ##
 ##############################################################################
 
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
 
 APP_NAME="Gradle"
 APP_BASE_NAME=`basename "$0"`
 
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD="maximum"
 
@@ -30,6 +48,7 @@ die ( ) {
 cygwin=false
 msys=false
 darwin=false
+nonstop=false
 case "`uname`" in
   CYGWIN* )
     cygwin=true
@@ -40,31 +59,11 @@ case "`uname`" in
   MINGW* )
     msys=true
     ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
 esac
 
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-fi
-
-# Attempt to set APP_HOME
-# Resolve links: $0 may be a link
-PRG="$0"
-# Need this for relative symlinks.
-while [ -h "$PRG" ] ; do
-    ls=`ls -ld "$PRG"`
-    link=`expr "$ls" : '.*-> \(.*\)$'`
-    if expr "$link" : '/.*' > /dev/null; then
-        PRG="$link"
-    else
-        PRG=`dirname "$PRG"`"/$link"
-    fi
-done
-SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >&-
-APP_HOME="`pwd -P`"
-cd "$SAVED" >&-
-
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
 # Determine the Java command to use to start the JVM.
@@ -90,7 +89,7 @@ location of your Java installation."
 fi
 
 # Increase the maximum file descriptors if we can.
-if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
     MAX_FD_LIMIT=`ulimit -H -n`
     if [ $? -eq 0 ] ; then
         if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
@@ -114,6 +113,7 @@ fi
 if $cygwin ; then
     APP_HOME=`cygpath --path --mixed "$APP_HOME"`
     CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
 
     # We build the pattern for arguments to be converted via cygpath
     ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
diff --git a/gradlew.bat b/gradlew.bat
index aec99730b..f6d5974e7 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -8,14 +8,14 @@
 @rem Set local scope for the variables with windows NT shell
 if "%OS%"=="Windows_NT" setlocal
 
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
 set DIRNAME=%~dp0
 if "%DIRNAME%" == "" set DIRNAME=.
 set APP_BASE_NAME=%~n0
 set APP_HOME=%DIRNAME%
 
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
 @rem Find java.exe
 if defined JAVA_HOME goto findJavaFromJavaHome
 
@@ -46,7 +46,7 @@ echo location of your Java installation.
 goto fail
 
 :init
-@rem Get command-line arguments, handling Windowz variants
+@rem Get command-line arguments, handling Windows variants
 
 if not "%OS%" == "Windows_NT" goto win9xME_args
 if "%@eval[2+2]" == "4" goto 4NT_args
diff --git a/keystores/BUCK b/keystores/BUCK
deleted file mode 100644
index 15da20e6b..000000000
--- a/keystores/BUCK
+++ /dev/null
@@ -1,8 +0,0 @@
-keystore(
-  name = 'debug',
-  store = 'debug.keystore',
-  properties = 'debug.keystore.properties',
-  visibility = [
-    'PUBLIC',
-  ],
-)
diff --git a/keystores/debug.keystore b/keystores/debug.keystore
deleted file mode 100644
index 364e105ed..000000000
Binary files a/keystores/debug.keystore and /dev/null differ
diff --git a/keystores/debug.keystore.properties b/keystores/debug.keystore.properties
deleted file mode 100644
index 121bfb49f..000000000
--- a/keystores/debug.keystore.properties
+++ /dev/null
@@ -1,4 +0,0 @@
-key.store=debug.keystore
-key.alias=androiddebugkey
-key.store.password=android
-key.alias.password=android
diff --git a/libs/BUCK b/libs/BUCK
deleted file mode 100644
index 9d476d1d5..000000000
--- a/libs/BUCK
+++ /dev/null
@@ -1,15 +0,0 @@
-prebuilt_jar(
-  name = 'android-support-v4',
-  binary_jar = 'android-support-v4.jar',
-  visibility = [
-    'PUBLIC',
-  ],
-)
-
-prebuilt_jar(
-  name = 'bolts',
-  binary_jar = 'bolts-android-1.1.2.jar',
-  visibility = [
-    'PUBLIC',
-  ],
-)
diff --git a/libs/android-support-v4.jar b/libs/android-support-v4.jar
deleted file mode 100644
index c31cede47..000000000
Binary files a/libs/android-support-v4.jar and /dev/null differ
diff --git a/libs/bolts-android-1.1.2.jar b/libs/bolts-android-1.1.2.jar
deleted file mode 100644
index 88a01a30b..000000000
Binary files a/libs/bolts-android-1.1.2.jar and /dev/null differ
diff --git a/plugin/FacebookSDKPlugin/resources/META-INF/plugin.xml b/plugin/FacebookSDKPlugin/resources/META-INF/plugin.xml
new file mode 100644
index 000000000..5ac08bc60
--- /dev/null
+++ b/plugin/FacebookSDKPlugin/resources/META-INF/plugin.xml
@@ -0,0 +1,66 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2017-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<idea-plugin version="2">
+  <id>com.facebook.plugin</id>
+  <name>Facebook SDK Plugin</name>
+  <version>0.1</version>
+  <vendor email="support@facebook.com"
+          url="https://developers.facebook.com/">
+    Facebook SDK
+  </vendor>
+
+  <description>
+    Description of Facebook SDK etc etc.
+  </description>
+
+  <change-notes>
+    Initial experiment version
+  </change-notes>
+
+  <idea-version since-build="141.0"/>
+
+  <depends>com.intellij.modules.lang</depends>
+  <depends>com.intellij.modules.platform</depends>
+  <depends>org.jetbrains.android</depends>
+  <depends>org.jetbrains.plugins.gradle</depends>
+
+  <extensions defaultExtensionNs="com.intellij">
+  </extensions>
+
+  <actions>
+    <group id="FacebookSDK.ToolMenu"
+           class="com.intellij.openapi.actionSystem.DefaultActionGroup"
+           text="Facebook SDK"
+           description="Facebook SDK Actions"
+           popup="true"
+           icon="/icons/facebook-ldpi.png">
+      <add-to-group group-id="ToolsMenu" anchor="last" />
+    </group>
+    <action id="FacebookSDK.InstallAccountKit"
+            class="com.facebook.plugin.actions.AccountKitInstallerAction"
+            text="Install Account Kit"
+            description="Install Account Kit"
+            icon="/icons/accountkit-ldpi.png">
+      <add-to-group group-id="FacebookSDK.ToolMenu" anchor="first" />
+    </action>
+  </actions>
+</idea-plugin>
diff --git a/plugin/FacebookSDKPlugin/resources/icons/accountkit-ldpi.png b/plugin/FacebookSDKPlugin/resources/icons/accountkit-ldpi.png
new file mode 100644
index 000000000..f4d788adf
Binary files /dev/null and b/plugin/FacebookSDKPlugin/resources/icons/accountkit-ldpi.png differ
diff --git a/plugin/FacebookSDKPlugin/resources/icons/facebook-ldpi.png b/plugin/FacebookSDKPlugin/resources/icons/facebook-ldpi.png
new file mode 100644
index 000000000..d1178eff1
Binary files /dev/null and b/plugin/FacebookSDKPlugin/resources/icons/facebook-ldpi.png differ
diff --git a/plugin/FacebookSDKPlugin/resources/values/code.properties b/plugin/FacebookSDKPlugin/resources/values/code.properties
new file mode 100644
index 000000000..99e36bf89
--- /dev/null
+++ b/plugin/FacebookSDKPlugin/resources/values/code.properties
@@ -0,0 +1,82 @@
+importsList = \
+  android.os.Bundle,\
+  android.content.Intent,\
+  com.facebook.accountkit.AccessToken,\
+  com.facebook.accountkit.AccountKit,\
+  com.facebook.accountkit.AccountKitLoginResult,\
+  com.facebook.accountkit.ui.AccountKitActivity,\
+  com.facebook.accountkit.ui.AccountKitConfiguration,\
+  com.facebook.accountkit.ui.LoginType
+
+codeBlockFrameworkRequestField = \
+  private static final int AK_FRAMEWORK_REQUEST_CODE = 42;
+
+codeBlockOnCreateMethod = \
+  @Override protected void onCreate(Bundle savedInstanceState) {\
+    super.onCreate(savedInstanceState);\
+  }
+
+codeBlockOnCreate = \
+  if (AccountKit.getCurrentAccessToken() != null) {\
+    onSuccessfulLogin(AccountKit.getCurrentAccessToken());\
+  }
+
+codeBlockOnActivityResultMethod = \
+  @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) {\
+    super.onActivityResult(requestCode, resultCode, data);\
+  }
+
+codeBlockOnActivityResult = \
+  if (requestCode == AK_FRAMEWORK_REQUEST_CODE) {\
+    final AccountKitLoginResult loginResult = AccountKit.loginResultWithIntent(data);\
+    if (loginResult != null && loginResult.getAccessToken() != null) {\
+      onSuccessfulLogin(loginResult.getAccessToken());\
+    } else {\
+      onUnsuccessfulLogin(loginResult);\
+    }\
+  }
+
+codeBlockOnSuccessfulLogin = \
+  /**\n\
+    * This method is called back when login was successful.\n\
+    * @param accessToken AccountKit AccessToken to use\n\
+    */\n\
+  protected void onSuccessfulLogin(final AccessToken accessToken) {\
+\n    // Do your login logic here!\n\
+  }
+
+codeBlockOnUnsuccessfulLogin = \
+  /**\n\
+    * This method is called back when login failed.\n\
+    * @param loginResult Information about the result of login attempt\n\
+    */\n\
+  protected void onUnsuccessfulLogin(final AccountKitLoginResult loginResult) {\
+\n    // Do your error handing here! For ex:\n\
+    if (loginResult == null || loginResult.wasCancelled()) {\
+\n      // Login was cancelled by user\n\
+    } else if (loginResult.getError() != null) {\
+\n      // There was a login error. Check loginResult.getError()\n\
+    } else {\
+\n      // An unknown error has occurred!\n\
+    }\
+  }
+
+codeBlockDoLogin = \
+  /**\n\
+    * Call this method to initiate a login attempt and pop up AccountKit dialog\n\
+    * @param loginType either LoginType.PHONE for phone login or LoginType.EMAIL for email\n\
+    */\n\
+  protected void doLogin(final LoginType loginType) {\
+    if (AccountKit.getCurrentAccessToken() != null) {\
+      onSuccessfulLogin(AccountKit.getCurrentAccessToken());\
+    }\
+    final AccountKitConfiguration.AccountKitConfigurationBuilder configurationBuilder =\n\
+      new AccountKitConfiguration.AccountKitConfigurationBuilder(\
+        loginType,\
+        AccountKitActivity.ResponseType.TOKEN);\
+    final Intent intent = new Intent(this, AccountKitActivity.class);\
+    intent.putExtra(\
+      AccountKitActivity.ACCOUNT_KIT_ACTIVITY_CONFIGURATION,\
+      configurationBuilder.build());\
+    startActivityForResult(intent, AK_FRAMEWORK_REQUEST_CODE);\
+  }
diff --git a/plugin/FacebookSDKPlugin/resources/values/strings.properties b/plugin/FacebookSDKPlugin/resources/values/strings.properties
new file mode 100644
index 000000000..6cb626345
--- /dev/null
+++ b/plugin/FacebookSDKPlugin/resources/values/strings.properties
@@ -0,0 +1,58 @@
+prereqsText = \
+  <html>\
+  <h2>Prerequisites</h2>\
+  Before you begin integrating Account Kit into your app, make sure you have completed the following prerequisites\
+  <p/>\
+  If you already have a Facebook App configured, you can skip to the next page.\
+  <p/>\
+  <h3>A. Create a Developer Account</h3>\
+  If you don't have a Facebook developer account, create one by going to<br/>\
+  <a href="https://www.facebook.com/login">https://www.facebook.com/login</a>.\
+  <p/>\
+  Your Facebook developer account gives you access to developer tools and allows you to create Facebook apps.\
+  <p/>\
+  <h3>B. Get a Facebook App ID</h3>\
+  Account Kit for Android requires a Facebook app ID. Follow the steps in the Getting Started, or to use Quick Start by going to<br/>\
+  <a href="https://developers.facebook.com/quickstarts">https://developers.facebook.com/quickstarts</a>.\
+  <p/>\
+  <h3>C. Choose Your App Settings</h3>\
+  Choose whether to allow email and SMS login, and choose security settings for your app by going to<br/>\
+  <a href="https://developers.facebook.com/apps">https://developers.facebook.com/apps</a>.\
+  </html>
+
+completedText = \
+  <html>\
+  <h2>All Done</h2>\
+  You're all done! AccountKit has been installed and configured for your project.\
+  <p/>\
+  For more information, tips and tricks, please visit the official documentation at<br/>\
+  <a href="https://developers.facebook.com/docs/accountkit/android">https://developers.facebook.com/docs/accountkit/android</a>\
+  <p/>\
+  You may close the installation wizard now. Or go back and install AccountKit on more modules or activities.\
+  </html>
+
+configureSDKText = \
+  <html>\
+  <h2>Configure the SDK</h2>\
+  Select the module that you would like to install Account Kit SDK on; \
+  this should be the module that contains your login buttons and logic.\
+  </html>
+
+configureParamsText = \
+  <html>\
+  Facebook app ID and name are shown at the top of your application dashboard;<br/>\
+  The client token is found in the Account Kit tab in the App Dashboard.\
+  </html>
+
+configureActivityText = \
+  <html>\
+  <h2>Configure Login Activity</h2>\
+  Select an Activity from your application that will have the AccountKit login buttons.<br/>\
+  This activity will be configured to receive the intent callbacks and have the logic for retrieving the \
+  AccountKit login tokens inside.\
+  </html>
+
+configureActivityDesc = \
+  <html>\
+  Click next to copy the setup and retrieval code to this activity.\
+  </html>
\ No newline at end of file
diff --git a/plugin/FacebookSDKPlugin/src/com/facebook/plugin/actions/AccountKitInstallerAction.java b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/actions/AccountKitInstallerAction.java
new file mode 100644
index 000000000..54baebdb2
--- /dev/null
+++ b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/actions/AccountKitInstallerAction.java
@@ -0,0 +1,38 @@
+/*
+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.plugin.actions;
+
+import com.facebook.plugin.ui.AccountKitInstallerWizard;
+import com.intellij.openapi.actionSystem.AnAction;
+import com.intellij.openapi.actionSystem.AnActionEvent;
+import com.intellij.openapi.actionSystem.PlatformDataKeys;
+import com.intellij.openapi.project.Project;
+
+public class AccountKitInstallerAction extends AnAction {
+
+    @Override
+    public void actionPerformed(final AnActionEvent event) {
+        Project project = event.getData(PlatformDataKeys.PROJECT);
+
+        AccountKitInstallerWizard dialog = new AccountKitInstallerWizard(project);
+        dialog.show();
+    }
+}
diff --git a/plugin/FacebookSDKPlugin/src/com/facebook/plugin/config/AccountKitActivityConfigurator.java b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/config/AccountKitActivityConfigurator.java
new file mode 100644
index 000000000..df898db04
--- /dev/null
+++ b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/config/AccountKitActivityConfigurator.java
@@ -0,0 +1,252 @@
+/*
+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.plugin.config;
+
+import com.intellij.codeInsight.CodeInsightUtilCore;
+import com.intellij.ide.actions.OpenFileAction;
+import com.intellij.openapi.application.Result;
+import com.intellij.openapi.command.WriteCommandAction;
+import com.intellij.openapi.module.Module;
+import com.intellij.openapi.module.ModuleManager;
+import com.intellij.openapi.project.Project;
+import com.intellij.psi.PsiClass;
+import com.intellij.psi.PsiElement;
+import com.intellij.psi.PsiElementFactory;
+import com.intellij.psi.PsiField;
+import com.intellij.psi.PsiFile;
+import com.intellij.psi.PsiImportList;
+import com.intellij.psi.PsiImportStatement;
+import com.intellij.psi.PsiJavaFile;
+import com.intellij.psi.PsiMethod;
+import com.intellij.psi.PsiStatement;
+import com.intellij.psi.codeStyle.CodeStyleManager;
+import org.jetbrains.android.dom.manifest.Activity;
+import org.jetbrains.android.facet.AndroidFacet;
+import org.jetbrains.annotations.NotNull;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Properties;
+
+public class AccountKitActivityConfigurator {
+    private static final String codePropertiesFile = "values/code.properties";
+
+    private final Properties codeProperties;
+    private final String requestCode;
+
+    private PsiElementFactory elementFactory;
+
+    public AccountKitActivityConfigurator(final String requestCode)
+            throws IOException {
+        this.requestCode = requestCode;
+        codeProperties = new Properties();
+
+        InputStream inputStream = getClass().getClassLoader()
+                .getResourceAsStream(codePropertiesFile);
+        if (inputStream != null) {
+            codeProperties.load(inputStream);
+        }
+    }
+
+    public boolean isConfigured(final PsiClass psiClass) {
+        // TODO: add later
+        return false;
+    }
+
+    public void doConfigure(final PsiClass psiClass) {
+        new WriteCommandAction(psiClass.getProject()) {
+            @Override
+            protected void run(@NotNull Result result) {
+                configureClass(psiClass);
+
+                CodeInsightUtilCore.forcePsiPostprocessAndRestoreElement(psiClass);
+            }
+        }.execute();
+
+        OpenFileAction.openFile(
+                psiClass.getContainingFile().getVirtualFile().getPath(),
+                psiClass.getProject());
+    }
+
+    private void configureClass(final PsiClass psiClass) {
+        elementFactory = PsiElementFactory.SERVICE.getInstance(psiClass.getProject());
+
+        PsiFile psiFile = psiClass.getContainingFile();
+        if (!(psiFile instanceof PsiJavaFile)) {
+            return;
+        }
+
+        final PsiImportList importList = ((PsiJavaFile) psiFile).getImportList();
+        for (String packageName : codeProperties.getProperty("importsList").split(",")) {
+            packageName = packageName.trim();
+            if (!importList.getText().contains(packageName)) {
+                PsiImportStatement importStatement =
+                        elementFactory.createImportStatementOnDemand(packageName);
+                for (PsiElement element : importStatement.getChildren()) {
+                    // Sometimes, IntelliJ tries to be "helpful" and imports className.* for us
+                    // We actually don't want this to happen
+                    if (element.getText().equals("*")) {
+                        element.getPrevSibling().delete();
+                        element.delete();
+                    }
+                }
+                importList.add(importStatement);
+            }
+        }
+
+        PsiField frameworkRequestCode = findOrCreateField(
+                psiClass,
+                "AK_FRAMEWORK_REQUEST_CODE",
+                "codeBlockFrameworkRequestField");
+        frameworkRequestCode.setInitializer(
+                elementFactory.createExpressionFromText(requestCode, psiClass));
+
+        PsiMethod onCreateMethod = findOrCreateMethod(
+                psiClass,
+                "onCreate",
+                "codeBlockOnCreateMethod");
+        addStatement(onCreateMethod, "codeBlockOnCreate");
+
+        PsiMethod onActivityResult = findOrCreateMethod(
+                psiClass,
+                "onActivityResult",
+                "codeBlockOnActivityResultMethod");
+        addStatement(onActivityResult, "codeBlockOnActivityResult");
+
+        findOrCreateMethod(psiClass, "onSuccessfulLogin", "codeBlockOnSuccessfulLogin");
+        findOrCreateMethod(psiClass, "onUnsuccessfulLogin", "codeBlockOnUnsuccessfulLogin");
+        findOrCreateMethod(psiClass, "doLogin", "codeBlockDoLogin");
+    }
+
+    private PsiMethod findOrCreateMethod(
+            final PsiClass psiClass,
+            final String methodName,
+            final String methodBodyPropKey) {
+        PsiMethod[] methods = psiClass.findMethodsByName(methodName, false);
+        if (methods.length > 0) {
+            return methods[0];
+        }
+
+        PsiMethod method = elementFactory.createMethodFromText(
+                codeProperties.getProperty(methodBodyPropKey),
+                psiClass);
+
+        PsiMethod[] allMethods = psiClass.getMethods();
+        if (allMethods.length > 0) {
+            psiClass.addAfter(method, allMethods[allMethods.length - 1]);
+        } else {
+            psiClass.addAfter(method, psiClass.getLastChild());
+        }
+
+        CodeStyleManager.getInstance(psiClass.getProject()).reformat(method);
+
+        methods = psiClass.findMethodsByName(methodName, false);
+        if (methods.length > 0) {
+            return methods[0];
+        } else {
+            return method;
+        }
+    }
+
+    private PsiField findOrCreateField(
+            final PsiClass psiClass,
+            final String fieldName,
+            final String fieldBodyPropKey) {
+        PsiField field = psiClass.findFieldByName(fieldName, false);
+        if (field != null) {
+            return field;
+        }
+
+        field = elementFactory.createFieldFromText(
+                codeProperties.getProperty(fieldBodyPropKey),
+                psiClass);
+
+        PsiField[] allFields = psiClass.getAllFields();
+        if (allFields.length > 0) {
+            psiClass.addAfter(field, allFields[allFields.length - 1]);
+        } else {
+            psiClass.addAfter(field, psiClass.getFirstChild());
+        }
+
+        CodeStyleManager.getInstance(psiClass.getProject()).reformat(field);
+        return field;
+    }
+
+    private void addStatement(final PsiMethod method, final String statementPropKey) {
+        PsiStatement statement = elementFactory.createStatementFromText(
+                codeProperties.getProperty(statementPropKey),
+                method);
+        method.getBody().add(statement);
+    }
+
+    public static final class AvailableActivity {
+        private final Module module;
+        private final PsiClass psiClass;
+
+        AvailableActivity(final Module module, final PsiClass psiClass) {
+            this.module = module;
+            this.psiClass = psiClass;
+        }
+
+        public Module getModule() {
+            return module;
+        }
+
+        public PsiClass getPsiClass() {
+            return psiClass;
+        }
+
+        @Override
+        public String toString() {
+            return psiClass.getQualifiedName() + " (" + module.getName() + ")";
+        }
+    }
+
+    public static AvailableActivity[] getActivityClasses(final Project project) {
+        Module[] allModules = ModuleManager.getInstance(project).getModules();
+        List<AvailableActivity> res = new ArrayList<>();
+
+        for (Module module : allModules) {
+            List<Activity> activities;
+            try {
+                activities = AndroidFacet.getInstance(module)
+                        .getManifest()
+                        .getApplication()
+                        .getActivities();
+            } catch (Exception e) {
+                // Module doesn't have a valid Android facet. Skip it
+                continue;
+            }
+
+            for (Activity activity : activities) {
+                if ((activity != null) &&
+                        (activity.getActivityClass() != null) &&
+                        (activity.getActivityClass().getValue() != null)) {
+                    res.add(new AvailableActivity(module, activity.getActivityClass().getValue()));
+                }
+            }
+        }
+
+        return res.toArray(new AvailableActivity[res.size()]);
+    }
+}
diff --git a/plugin/FacebookSDKPlugin/src/com/facebook/plugin/config/AccountKitModuleConfigurator.java b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/config/AccountKitModuleConfigurator.java
new file mode 100644
index 000000000..89d8cc46d
--- /dev/null
+++ b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/config/AccountKitModuleConfigurator.java
@@ -0,0 +1,151 @@
+/*
+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.plugin.config;
+
+import com.facebook.plugin.utils.PsiHelper;
+import com.intellij.openapi.module.Module;
+import com.intellij.openapi.module.ModuleManager;
+import com.intellij.openapi.project.Project;
+import org.jetbrains.plugins.gradle.util.GradleConstants;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class AccountKitModuleConfigurator implements Configurator {
+    private final Configurator[] configurators;
+
+    public AccountKitModuleConfigurator(final String appName,
+                                        final String appId,
+                                        final String clientToken) {
+        this.configurators = createConfigurators(appName, appId, clientToken);
+    }
+
+    @Override
+    public boolean isConfigured(final Module module) {
+        for (Configurator configurator : configurators) {
+            if (!configurator.isConfigured(module)) {
+                return false;
+            }
+        }
+
+        return true;
+    }
+
+    @Override
+    public void doConfigure(final Module module) {
+        for (Configurator configurator : configurators) {
+            configurator.doConfigure(module);
+        }
+    }
+
+    private static Configurator[] createConfigurators(
+            final String appName,
+            final String appId,
+            final String clientToken) {
+
+        return new Configurator[]{
+                new GradleBuildConfigurator(
+                        "jcenter",
+                        "com.facebook.android:account-kit-sdk",
+                        "4.+"),
+                new AndroidManifestConfigurator(
+                        "com.facebook.accountkit.ui.AccountKitActivity")
+                        .addMetadata(
+                                "com.facebook.accountkit.ApplicationName",
+                                "@string/fb_app_name")
+                        .addMetadata(
+                                "com.facebook.sdk.ApplicationId",
+                                "@string/fb_app_id")
+                        .addMetadata(
+                                "com.facebook.accountkit.ClientToken",
+                                "@string/ak_client_token")
+                        .addPermission("android.permission.INTERNET")
+                        .addPermission("android.permission.READ_PHONE_STATE")
+                        .addPermission("android.permission.RECEIVE_SMS")
+                        .addPermission("android.permission.GET_ACCOUNTS"),
+                new AndroidResourcesConfigurator()
+                        .addResourceString("fb_app_id", appId)
+                        .addResourceString("fb_app_name", appName)
+                        .addResourceString("ak_client_token", clientToken)
+        };
+    }
+
+    public enum InstallationType {
+        CannotInstall,
+        AlreadyInstalled,
+        Available
+    }
+
+    public static final class AvailableModule {
+        private final Module module;
+        private final InstallationType installationType;
+
+        AvailableModule(final Module module, final InstallationType installationType) {
+            this.module = module;
+            this.installationType = installationType;
+        }
+
+        public Module getModule() {
+            return module;
+        }
+
+        public InstallationType getInstallationType() {
+            return installationType;
+        }
+
+        @Override
+        public String toString() {
+            String title = module.getName();
+            if (installationType == InstallationType.CannotInstall) {
+                title += " (unavailable)";
+            } else if (installationType == InstallationType.AlreadyInstalled) {
+                title += " (already installed)";
+            }
+
+            return title;
+        }
+    }
+
+    public static AvailableModule[] getModuleAvailabilities(final Project project) {
+        Configurator[] checkConfigurators = createConfigurators("", "", "");
+        Module[] allModules = ModuleManager.getInstance(project).getModules();
+        List<AvailableModule> res = new ArrayList<>();
+
+        for (Module module : allModules) {
+            InstallationType moduleType = InstallationType.CannotInstall;
+
+            if (PsiHelper.findAllFiles(module, GradleConstants.DEFAULT_SCRIPT_NAME).size() > 0) {
+                moduleType = InstallationType.AlreadyInstalled;
+
+                for (Configurator configurator : checkConfigurators) {
+                    if (!configurator.isConfigured(module)) {
+                        moduleType = InstallationType.Available;
+                        break;
+                    }
+                }
+            }
+
+            res.add(new AvailableModule(module, moduleType));
+        }
+
+        return res.toArray(new AvailableModule[res.size()]);
+    }
+}
diff --git a/plugin/FacebookSDKPlugin/src/com/facebook/plugin/config/AndroidManifestConfigurator.java b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/config/AndroidManifestConfigurator.java
new file mode 100644
index 000000000..0d6eb9984
--- /dev/null
+++ b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/config/AndroidManifestConfigurator.java
@@ -0,0 +1,164 @@
+/*
+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.plugin.config;
+
+import com.intellij.codeInsight.CodeInsightUtilCore;
+import com.intellij.ide.actions.OpenFileAction;
+import com.intellij.openapi.application.Result;
+import com.intellij.openapi.command.WriteCommandAction;
+import com.intellij.openapi.module.Module;
+import com.intellij.openapi.ui.Messages;
+import com.intellij.openapi.vfs.WritingAccessProvider;
+import com.intellij.psi.PsiFile;
+import com.intellij.psi.XmlElementFactory;
+import com.intellij.psi.xml.XmlElement;
+import com.intellij.psi.xml.XmlTag;
+import org.jetbrains.android.dom.manifest.Activity;
+import org.jetbrains.android.dom.manifest.Application;
+import org.jetbrains.android.dom.manifest.Manifest;
+import org.jetbrains.android.facet.AndroidFacet;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+
+public class AndroidManifestConfigurator implements Configurator {
+
+    private static final String METADATA_TAG = "<meta-data/>";
+    private static final String PERMISSION_TAG = "<uses-permission/>";
+    private static final String NAME_ATTR = "android:name";
+    private static final String VALUE_ATTR = "android:value";
+
+    private final Map<String, String> metadata;
+    private final List<String> permissions;
+    private final String activityName;
+
+    AndroidManifestConfigurator(final String activityName) {
+        this.activityName = activityName;
+        this.metadata = new LinkedHashMap<>();
+        this.permissions = new ArrayList<>();
+    }
+
+    AndroidManifestConfigurator addMetadata(final String name, final String value) {
+        metadata.put(name, value);
+        return this;
+    }
+
+    AndroidManifestConfigurator addPermission(final String permission) {
+        permissions.add(permission);
+        return this;
+    }
+
+    @Override
+    public boolean isConfigured(final Module module) {
+        final Manifest androidManifest = getAndroidManifest(module);
+        if (androidManifest == null) {
+            return false;
+        }
+
+        if (!androidManifest.getXmlElement().getText().contains(activityName)) {
+            return false;
+        }
+
+        for (String metadataName : metadata.keySet()) {
+            if (!androidManifest.getXmlElement().getText().contains(metadataName)) {
+                return false;
+            }
+        }
+
+        for (String permission : permissions) {
+            if (!androidManifest.getXmlElement().getText().contains(permission)) {
+                return false;
+            }
+        }
+
+        return true;
+    }
+
+    @Override
+    public void doConfigure(final Module module) {
+        final Manifest androidManifest = getAndroidManifest(module);
+        if ((androidManifest == null) ||
+                (androidManifest.getApplication() == null) ||
+                !WritingAccessProvider.isPotentiallyWritable(
+                        androidManifest.getXmlElement().getContainingFile().getVirtualFile(),
+                        null)) {
+            Messages.showErrorDialog(
+                module.getProject(),
+                "Cannot find or modify Android manifest file for module " + module.getName(),
+                "Facebook SDK Plugin");
+            return;
+        }
+
+        final PsiFile manifestFile = androidManifest.getXmlElement().getContainingFile();
+        final Application application = androidManifest.getApplication();
+        final XmlElement applicationTag = application.getXmlElement();
+        final XmlElementFactory elementFactory = XmlElementFactory.getInstance(module.getProject());
+
+        new WriteCommandAction(manifestFile.getProject()) {
+            @Override
+            protected void run(@NotNull Result result) {
+
+                for (String permission : permissions) {
+                    if (!androidManifest.getXmlElement().getText().contains(permission)) {
+                        XmlTag permTag = elementFactory.createTagFromText(PERMISSION_TAG);
+                        permTag.setAttribute(NAME_ATTR, permission);
+                        androidManifest.getXmlElement().addBefore(permTag, applicationTag);
+                    }
+                }
+
+                for (Map.Entry<String, String> metadata : metadata.entrySet()) {
+                    if (!applicationTag.getText().contains(metadata.getKey())) {
+                        XmlTag mdTag = elementFactory.createTagFromText(METADATA_TAG);
+                        mdTag.setAttribute(NAME_ATTR, metadata.getKey());
+                        mdTag.setAttribute(VALUE_ATTR, metadata.getValue());
+                        application.getXmlElement().add(mdTag);
+                    }
+                }
+
+                if (!applicationTag.getText().contains(activityName)) {
+                    final Activity newActivity = application.addActivity();
+                    newActivity.getActivityClass().setStringValue(activityName);
+                }
+
+                CodeInsightUtilCore.forcePsiPostprocessAndRestoreElement(manifestFile);
+            }
+        }.execute();
+
+        OpenFileAction.openFile(manifestFile.getVirtualFile().getPath(), module.getProject());
+    }
+
+    private static Manifest getAndroidManifest(final Module module) {
+        final AndroidFacet facet = AndroidFacet.getInstance(module);
+        if (facet == null) {
+            return null;
+        }
+
+        final Manifest manifest = facet.getManifest();
+        if (manifest == null) {
+            return null;
+        }
+
+        return manifest;
+    }
+}
diff --git a/plugin/FacebookSDKPlugin/src/com/facebook/plugin/config/AndroidResourcesConfigurator.java b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/config/AndroidResourcesConfigurator.java
new file mode 100644
index 000000000..4fd8efd6d
--- /dev/null
+++ b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/config/AndroidResourcesConfigurator.java
@@ -0,0 +1,125 @@
+/*
+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.plugin.config;
+
+import com.android.ide.common.res2.ResourceItem;
+import com.android.resources.ResourceType;
+import com.android.tools.idea.res.LocalResourceRepository;
+import com.android.tools.idea.res.ModuleResourceRepository;
+import com.google.common.collect.ListMultimap;
+import com.intellij.codeInsight.CodeInsightUtilCore;
+import com.intellij.ide.actions.OpenFileAction;
+import com.intellij.openapi.application.Result;
+import com.intellij.openapi.command.WriteCommandAction;
+import com.intellij.openapi.module.Module;
+import com.intellij.psi.PsiFile;
+import com.intellij.psi.XmlElementFactory;
+import com.intellij.psi.xml.XmlTag;
+import org.apache.commons.lang.StringUtils;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+
+public class AndroidResourcesConfigurator implements Configurator {
+
+    private static final String STRING_TAG = "<string/>";
+    private static final String NAME_ATTR = "name";
+
+    private final Map<String, String> resourceStrings = new LinkedHashMap<>();
+
+    AndroidResourcesConfigurator addResourceString(final String name, final String value) {
+        if (!StringUtils.isBlank(name) && !StringUtils.isBlank(value)) {
+            resourceStrings.put(name, value);
+        }
+        return this;
+    }
+
+    @Override
+    public boolean isConfigured(final Module module) {
+        LocalResourceRepository resourceRepository =
+                ModuleResourceRepository.getModuleResources(module, false);
+        if (resourceRepository == null) {
+            return false;
+        }
+
+        for (String resourceName : resourceStrings.keySet()) {
+            List<ResourceItem> resourceItems =
+                    resourceRepository.getResourceItem(ResourceType.STRING, resourceName);
+            if (resourceItems.size() == 0) {
+                return false;
+            }
+        }
+
+        return true;
+    }
+
+    @Override
+    public void doConfigure(final Module module) {
+        LocalResourceRepository resourceRepository =
+                ModuleResourceRepository.getModuleResources(module, true);
+        if (resourceRepository == null) {
+            return;
+        }
+
+        ListMultimap<String, ResourceItem> stringResources =
+                resourceRepository.getItems().get(ResourceType.STRING);
+        if (stringResources.size() == 0) {
+            return;
+        }
+
+        ResourceItem firstStringResource = stringResources.values().iterator().next();
+        XmlTag resourceTag = ModuleResourceRepository.getItemTag(
+                module.getProject(),
+                firstStringResource);
+        PsiFile resourceFile = ModuleResourceRepository.getItemPsiFile(
+                module.getProject(),
+                firstStringResource);
+        final XmlElementFactory elementFactory =
+                XmlElementFactory.getInstance(module.getProject());
+
+        new WriteCommandAction(resourceFile.getProject()) {
+            @Override
+            protected void run(@NotNull Result result) {
+
+                for (String resourceName : resourceStrings.keySet()) {
+                    List<ResourceItem> resourceItems =
+                            resourceRepository.getResourceItem(ResourceType.STRING, resourceName);
+                    if (resourceItems.size() == 0) {
+                        XmlTag newResourceTag = elementFactory.createTagFromText(STRING_TAG);
+                        newResourceTag.setAttribute(NAME_ATTR, resourceName);
+                        newResourceTag.add(elementFactory.createDisplayText(
+                                resourceStrings.get(resourceName)));
+
+                        resourceFile.addAfter(newResourceTag, resourceTag);
+                    }
+                }
+
+                CodeInsightUtilCore.forcePsiPostprocessAndRestoreElement(resourceFile);
+                resourceRepository.invalidateResourceDirs();
+                resourceRepository.sync();
+            }
+        }.execute();
+
+        OpenFileAction.openFile(resourceFile.getVirtualFile().getPath(), module.getProject());
+    }
+}
diff --git a/plugin/FacebookSDKPlugin/src/com/facebook/plugin/config/Configurator.java b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/config/Configurator.java
new file mode 100644
index 000000000..384939767
--- /dev/null
+++ b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/config/Configurator.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.plugin.config;
+
+import com.intellij.openapi.module.Module;
+
+public interface Configurator {
+
+    boolean isConfigured(final Module module);
+
+    void doConfigure(final Module module);
+}
diff --git a/plugin/FacebookSDKPlugin/src/com/facebook/plugin/config/GradleBuildConfigurator.java b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/config/GradleBuildConfigurator.java
new file mode 100644
index 000000000..2b84fa332
--- /dev/null
+++ b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/config/GradleBuildConfigurator.java
@@ -0,0 +1,195 @@
+/*
+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.plugin.config;
+
+import com.intellij.codeInsight.CodeInsightUtilCore;
+import com.intellij.ide.actions.OpenFileAction;
+import com.intellij.openapi.application.Result;
+import com.intellij.openapi.command.WriteCommandAction;
+import com.intellij.openapi.module.Module;
+import com.intellij.openapi.project.Project;
+import com.intellij.openapi.ui.Messages;
+import com.intellij.openapi.vfs.VfsUtil;
+import com.intellij.openapi.vfs.VirtualFile;
+import com.intellij.openapi.vfs.WritingAccessProvider;
+import com.intellij.psi.PsiElement;
+import com.intellij.psi.PsiFile;
+import com.intellij.psi.PsiManager;
+import com.intellij.psi.codeStyle.CodeStyleManager;
+import com.intellij.psi.util.PsiTreeUtil;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.plugins.gradle.util.GradleConstants;
+import org.jetbrains.plugins.groovy.lang.psi.GroovyFile;
+import org.jetbrains.plugins.groovy.lang.psi.GroovyPsiElementFactory;
+import org.jetbrains.plugins.groovy.lang.psi.api.statements.GrStatement;
+import org.jetbrains.plugins.groovy.lang.psi.api.statements.blocks.GrClosableBlock;
+import org.jetbrains.plugins.groovy.lang.psi.api.statements.expressions.GrExpression;
+import org.jetbrains.plugins.groovy.lang.psi.api.statements.expressions.path.GrMethodCallExpression;
+import org.jetbrains.plugins.groovy.lang.psi.api.util.GrStatementOwner;
+
+import java.io.File;
+
+public class GradleBuildConfigurator implements Configurator {
+
+    private static final String BLOCK_REPOSITORIES = "repositories";
+    private static final String BLOCK_DEPENDENCIES = "dependencies";
+    private static final String GRADLE_SCRIPT_NAME = GradleConstants.DEFAULT_SCRIPT_NAME;
+    private static final String FORMAT_REPOSITORY = "{repository}()";
+    private static final String FORMAT_DEPENDENCY = "compile '{library}:{version}'";
+
+    private final String repository;
+    private final String library;
+    private final String version;
+
+    GradleBuildConfigurator(final String repository,
+                                   final String library,
+                                   final String version) {
+        this.repository = repository;
+        this.library = library;
+        this.version = version;
+    }
+
+    @Override
+    public boolean isConfigured(final Module module) {
+        // First, check if the module has the dependency present
+        GroovyFile moduleGradleFile = getBuildGradleFile(module.getProject(), module);
+        if ((moduleGradleFile != null) &&
+                moduleGradleFile.getText().contains(library)) {
+            return true;
+        }
+
+        // If not, it might still be configured at a project level, so check that too
+        GroovyFile projectGradleFile = getBuildGradleFile(module.getProject(), null);
+        return ((projectGradleFile != null) &&
+                projectGradleFile.getText().contains(library));
+    }
+
+    @Override
+    public void doConfigure(final Module module) {
+        final GroovyFile gradleFile = getBuildGradleFile(module.getProject(), module);
+        if ((gradleFile != null) &&
+                WritingAccessProvider.isPotentiallyWritable(gradleFile.getVirtualFile(), null)) {
+
+            new WriteCommandAction(gradleFile.getProject()) {
+                @Override
+                protected void run(@NotNull Result result) {
+
+                    final GrClosableBlock repositoriesBlock =
+                            findOrCreateBlock(gradleFile, BLOCK_REPOSITORIES);
+                    if (!repositoriesBlock.getText().contains(repository)) {
+                        addChildExpression(
+                            repositoriesBlock,
+                            FORMAT_REPOSITORY.replace("{repository}", repository));
+                    }
+
+                    final GrClosableBlock dependenciesBlock =
+                            findOrCreateBlock(gradleFile, BLOCK_DEPENDENCIES);
+                    if (!repositoriesBlock.getText().contains(library)) {
+                        addChildExpression(
+                            dependenciesBlock,
+                            FORMAT_DEPENDENCY.replace("{library}", library)
+                                        .replace("{version}", version));
+                    }
+
+                    CodeInsightUtilCore.forcePsiPostprocessAndRestoreElement(gradleFile);
+                }
+            }.execute();
+
+            OpenFileAction.openFile(gradleFile.getVirtualFile().getPath(), module.getProject());
+        } else {
+            Messages.showErrorDialog(
+                module.getProject(),
+                "Cannot find or modify build.gradle file for module " + module.getName(),
+                "Facebook SDK Plugin");
+        }
+    }
+
+    private static GroovyFile getBuildGradleFile(final Project project, final Module module) {
+        final String basePath = (module == null)
+                ? project.getBasePath()
+                : new File(module.getModuleFilePath()).getParent();
+
+        final VirtualFile file = VfsUtil.findFileByIoFile(
+                new File(basePath + File.separator + GRADLE_SCRIPT_NAME),
+                true);
+        if (file == null) {
+            return null;
+        }
+
+        final PsiFile psiFile = PsiManager.getInstance(project).findFile(file);
+        if (psiFile instanceof GroovyFile) {
+            return (GroovyFile) psiFile;
+        } else {
+            return null;
+        }
+    }
+
+    private static GrClosableBlock getBlockByName(final PsiElement parent, final String name) {
+        final GrMethodCallExpression[] allExpressions =
+                PsiTreeUtil.getChildrenOfType(parent, GrMethodCallExpression.class);
+        if (allExpressions == null) {
+            return null;
+        }
+
+        for (GrMethodCallExpression expression : allExpressions) {
+            final GrExpression invokedExpression = expression.getInvokedExpression();
+
+            if ((expression.getClosureArguments().length > 0) &&
+                    (invokedExpression.getText().equalsIgnoreCase(name))) {
+                return expression.getClosureArguments()[0];
+            }
+        }
+
+        return null;
+    }
+
+    private static GrClosableBlock findOrCreateBlock(
+            final GrStatementOwner parent,
+            final String name) {
+        final GrClosableBlock block = getBlockByName(parent, name);
+        if (block != null) {
+            return block;
+        }
+
+        addChildExpression(parent, name + "{\n}\n");
+
+        return getBlockByName(parent, name);
+    }
+
+    private static GrExpression addChildExpression(
+            final GrStatementOwner parent,
+            final String exprText) {
+        final GroovyPsiElementFactory factory =
+                GroovyPsiElementFactory.getInstance(parent.getProject());
+        final GrExpression child = factory.createExpressionFromText(exprText);
+
+        CodeStyleManager.getInstance(parent.getProject()).reformat(child);
+
+        final GrStatement[] statements = parent.getStatements();
+        if (statements.length > 0) {
+            parent.addAfter(child, statements[statements.length - 1]);
+        } else {
+            parent.addAfter(child, parent.getFirstChild());
+        }
+
+        return child;
+    }
+}
diff --git a/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/AccountKitCompleted.form b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/AccountKitCompleted.form
new file mode 100644
index 000000000..615760e18
--- /dev/null
+++ b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/AccountKitCompleted.form
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<form xmlns="http://www.intellij.com/uidesigner/form/" version="1" bind-to-class="com.facebook.plugin.ui.AccountKitCompletedForm">
+  <grid id="27dc6" binding="mainPanel" layout-manager="GridLayoutManager" row-count="2" column-count="1" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
+    <margin top="0" left="0" bottom="0" right="0"/>
+    <constraints>
+      <xy x="20" y="20" width="1069" height="369"/>
+    </constraints>
+    <properties/>
+    <border type="none"/>
+    <children>
+      <component id="34af8" class="javax.swing.JLabel">
+        <constraints>
+          <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="3" hsize-policy="7" anchor="1" fill="1" indent="0" use-parent-layout="false"/>
+        </constraints>
+        <properties>
+          <horizontalTextPosition value="10"/>
+          <text resource-bundle="values/strings" key="completedText"/>
+          <verticalAlignment value="1"/>
+          <verticalTextPosition value="1"/>
+        </properties>
+      </component>
+      <vspacer id="66a18">
+        <constraints>
+          <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="6" hsize-policy="1" anchor="0" fill="2" indent="0" use-parent-layout="false"/>
+        </constraints>
+      </vspacer>
+    </children>
+  </grid>
+</form>
diff --git a/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/AccountKitCompletedForm.java b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/AccountKitCompletedForm.java
new file mode 100644
index 000000000..a9d223e1a
--- /dev/null
+++ b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/AccountKitCompletedForm.java
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.plugin.ui;
+
+import javax.swing.JComponent;
+import javax.swing.JPanel;
+
+public class AccountKitCompletedForm implements WizardStep {
+    private JPanel mainPanel;
+
+    @Override
+    public JComponent getComponent() {
+        return mainPanel;
+    }
+
+    @Override
+    public void fillForm() {
+        // Nothing to fill
+    }
+
+    @Override
+    public boolean commitForm() {
+        // Nothing to commit
+        return true;
+    }
+}
diff --git a/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/AccountKitInstallActivity.form b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/AccountKitInstallActivity.form
new file mode 100644
index 000000000..4d6951a66
--- /dev/null
+++ b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/AccountKitInstallActivity.form
@@ -0,0 +1,74 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<form xmlns="http://www.intellij.com/uidesigner/form/" version="1" bind-to-class="com.facebook.plugin.ui.AccountKitInstallActivityForm">
+  <grid id="27dc6" binding="mainPanel" layout-manager="GridLayoutManager" row-count="5" column-count="2" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
+    <margin top="0" left="0" bottom="0" right="0"/>
+    <constraints>
+      <xy x="20" y="20" width="1154" height="263"/>
+    </constraints>
+    <properties/>
+    <border type="none"/>
+    <children>
+      <component id="8c970" class="javax.swing.JLabel">
+        <constraints>
+          <grid row="0" column="0" row-span="1" col-span="2" vsize-policy="3" hsize-policy="7" anchor="1" fill="1" indent="0" use-parent-layout="false"/>
+        </constraints>
+        <properties>
+          <horizontalTextPosition value="10"/>
+          <text resource-bundle="values/strings" key="configureActivityText"/>
+          <verticalAlignment value="1"/>
+          <verticalTextPosition value="1"/>
+        </properties>
+      </component>
+      <vspacer id="b1924">
+        <constraints>
+          <grid row="4" column="0" row-span="1" col-span="2" vsize-policy="6" hsize-policy="1" anchor="0" fill="2" indent="0" use-parent-layout="false"/>
+        </constraints>
+      </vspacer>
+      <component id="ad7eb" class="javax.swing.JComboBox" binding="activitySelector">
+        <constraints>
+          <grid row="1" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="2" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
+        </constraints>
+        <properties/>
+      </component>
+      <component id="d2f86" class="javax.swing.JLabel">
+        <constraints>
+          <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
+        </constraints>
+        <properties>
+          <labelFor value="ad7eb"/>
+          <text value="Activity:"/>
+        </properties>
+      </component>
+      <component id="e5a56" class="javax.swing.JLabel">
+        <constraints>
+          <grid row="2" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
+        </constraints>
+        <properties>
+          <text value="Framework Request Code:"/>
+        </properties>
+      </component>
+      <component id="fea2c" class="javax.swing.JTextField" binding="requestCodeField">
+        <constraints>
+          <grid row="2" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="2" anchor="8" fill="0" indent="0" use-parent-layout="false">
+            <preferred-size width="300" height="-1"/>
+          </grid>
+        </constraints>
+        <properties>
+          <columns value="0"/>
+          <text value="42"/>
+        </properties>
+      </component>
+      <component id="ade2c" class="javax.swing.JLabel">
+        <constraints>
+          <grid row="3" column="0" row-span="1" col-span="2" vsize-policy="3" hsize-policy="7" anchor="1" fill="1" indent="0" use-parent-layout="false"/>
+        </constraints>
+        <properties>
+          <horizontalTextPosition value="10"/>
+          <text resource-bundle="values/strings" key="configureActivityDesc"/>
+          <verticalAlignment value="1"/>
+          <verticalTextPosition value="1"/>
+        </properties>
+      </component>
+    </children>
+  </grid>
+</form>
diff --git a/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/AccountKitInstallActivityForm.java b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/AccountKitInstallActivityForm.java
new file mode 100644
index 000000000..16d36550d
--- /dev/null
+++ b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/AccountKitInstallActivityForm.java
@@ -0,0 +1,95 @@
+/*
+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.plugin.ui;
+
+import com.facebook.plugin.config.AccountKitActivityConfigurator;
+import com.intellij.openapi.project.Project;
+import com.intellij.openapi.ui.Messages;
+import org.apache.commons.lang.StringUtils;
+
+import javax.swing.DefaultComboBoxModel;
+import javax.swing.JComboBox;
+import javax.swing.JComponent;
+import javax.swing.JPanel;
+import javax.swing.JTextField;
+
+public class AccountKitInstallActivityForm implements WizardStep {
+    private final Project project;
+
+    private JPanel mainPanel;
+    private JComboBox activitySelector;
+    private JTextField requestCodeField;
+
+    AccountKitInstallActivityForm(final Project project) {
+        this.project = project;
+    }
+
+    @Override
+    public JComponent getComponent() {
+        return mainPanel;
+    }
+
+    @Override
+    public void fillForm() {
+        activitySelector.setModel(new DefaultComboBoxModel<>(
+                AccountKitActivityConfigurator.getActivityClasses(project)));
+    }
+
+    @Override
+    public boolean commitForm() {
+        AccountKitActivityConfigurator.AvailableActivity activity =
+                (AccountKitActivityConfigurator.AvailableActivity
+                        ) activitySelector.getSelectedItem();
+
+        if ((activity == null) || (activity.getPsiClass() == null)) {
+            Messages.showErrorDialog(
+                project,
+                "Please select a valid activity to continue.",
+                "Install Failed");
+            return false;
+        }
+
+        if (StringUtils.isBlank(requestCodeField.getText())) {
+            Messages.showErrorDialog(
+                project,
+                "Request Code cannot be blank.",
+                "Install Failed");
+            return false;
+        }
+
+        AccountKitActivityConfigurator activityConfigurator;
+        try {
+            activityConfigurator = new AccountKitActivityConfigurator(requestCodeField.getText());
+        } catch (Exception e) {
+            Messages.showErrorDialog(
+                project,
+                "Failed to load the activity configurator code.",
+                "Install Failed");
+            return false;
+        }
+
+        if (!activityConfigurator.isConfigured(activity.getPsiClass())) {
+            activityConfigurator.doConfigure(activity.getPsiClass());
+        }
+
+        return true;
+    }
+}
diff --git a/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/AccountKitInstallDependencies.form b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/AccountKitInstallDependencies.form
new file mode 100644
index 000000000..f2d3f0571
--- /dev/null
+++ b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/AccountKitInstallDependencies.form
@@ -0,0 +1,109 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<form xmlns="http://www.intellij.com/uidesigner/form/" version="1" bind-to-class="com.facebook.plugin.ui.AccountKitInstallDependenciesForm">
+  <grid id="27dc6" binding="mainPanel" layout-manager="GridLayoutManager" row-count="7" column-count="2" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
+    <margin top="0" left="0" bottom="0" right="0"/>
+    <constraints>
+      <xy x="20" y="20" width="1154" height="263"/>
+    </constraints>
+    <properties/>
+    <border type="none"/>
+    <children>
+      <component id="8c970" class="javax.swing.JLabel">
+        <constraints>
+          <grid row="0" column="0" row-span="1" col-span="2" vsize-policy="3" hsize-policy="7" anchor="1" fill="1" indent="0" use-parent-layout="false"/>
+        </constraints>
+        <properties>
+          <horizontalTextPosition value="10"/>
+          <text resource-bundle="values/strings" key="configureSDKText"/>
+          <verticalAlignment value="1"/>
+          <verticalTextPosition value="1"/>
+        </properties>
+      </component>
+      <vspacer id="b1924">
+        <constraints>
+          <grid row="6" column="0" row-span="1" col-span="2" vsize-policy="6" hsize-policy="1" anchor="0" fill="2" indent="0" use-parent-layout="false"/>
+        </constraints>
+      </vspacer>
+      <component id="ad7eb" class="javax.swing.JComboBox" binding="moduleSelector">
+        <constraints>
+          <grid row="1" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="2" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
+        </constraints>
+        <properties/>
+      </component>
+      <component id="d2f86" class="javax.swing.JLabel">
+        <constraints>
+          <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
+        </constraints>
+        <properties>
+          <labelFor value="ad7eb"/>
+          <text value="Module:"/>
+        </properties>
+      </component>
+      <component id="e5a56" class="javax.swing.JLabel">
+        <constraints>
+          <grid row="2" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
+        </constraints>
+        <properties>
+          <text value="App Name:"/>
+        </properties>
+      </component>
+      <component id="fea2c" class="javax.swing.JTextField" binding="appNameField">
+        <constraints>
+          <grid row="2" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="2" anchor="8" fill="0" indent="0" use-parent-layout="false">
+            <preferred-size width="300" height="-1"/>
+          </grid>
+        </constraints>
+        <properties>
+          <columns value="0"/>
+        </properties>
+      </component>
+      <component id="4ee59" class="javax.swing.JLabel">
+        <constraints>
+          <grid row="3" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
+        </constraints>
+        <properties>
+          <text value="App Id:"/>
+        </properties>
+      </component>
+      <component id="6b35e" class="javax.swing.JTextField" binding="appIdField">
+        <constraints>
+          <grid row="3" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="2" anchor="8" fill="0" indent="0" use-parent-layout="false">
+            <preferred-size width="300" height="-1"/>
+          </grid>
+        </constraints>
+        <properties>
+          <columns value="0"/>
+        </properties>
+      </component>
+      <component id="a33e6" class="javax.swing.JLabel">
+        <constraints>
+          <grid row="4" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
+        </constraints>
+        <properties>
+          <text value="Client Token:"/>
+        </properties>
+      </component>
+      <component id="f22ed" class="javax.swing.JTextField" binding="clientTokenField">
+        <constraints>
+          <grid row="4" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="2" anchor="8" fill="0" indent="0" use-parent-layout="false">
+            <preferred-size width="300" height="-1"/>
+          </grid>
+        </constraints>
+        <properties>
+          <columns value="0"/>
+        </properties>
+      </component>
+      <component id="ade2c" class="javax.swing.JLabel">
+        <constraints>
+          <grid row="5" column="0" row-span="1" col-span="2" vsize-policy="3" hsize-policy="7" anchor="1" fill="1" indent="0" use-parent-layout="false"/>
+        </constraints>
+        <properties>
+          <horizontalTextPosition value="10"/>
+          <text resource-bundle="values/strings" key="configureParamsText"/>
+          <verticalAlignment value="1"/>
+          <verticalTextPosition value="1"/>
+        </properties>
+      </component>
+    </children>
+  </grid>
+</form>
diff --git a/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/AccountKitInstallDependenciesForm.java b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/AccountKitInstallDependenciesForm.java
new file mode 100644
index 000000000..2a312a350
--- /dev/null
+++ b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/AccountKitInstallDependenciesForm.java
@@ -0,0 +1,134 @@
+/*
+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.plugin.ui;
+
+import com.facebook.plugin.config.AccountKitModuleConfigurator;
+import com.intellij.openapi.project.Project;
+import com.intellij.openapi.ui.Messages;
+import org.apache.commons.lang.StringUtils;
+
+import javax.swing.DefaultComboBoxModel;
+import javax.swing.JComboBox;
+import javax.swing.JComponent;
+import javax.swing.JPanel;
+import javax.swing.JTextField;
+
+public class AccountKitInstallDependenciesForm implements WizardStep {
+    private final Project project;
+
+    private JPanel mainPanel;
+    private JComboBox moduleSelector;
+    private JTextField appNameField;
+    private JTextField appIdField;
+    private JTextField clientTokenField;
+
+    AccountKitInstallDependenciesForm(final Project project) {
+        this.project = project;
+    }
+
+    @Override
+    public JComponent getComponent() {
+        return mainPanel;
+    }
+
+    @Override
+    public void fillForm() {
+        moduleSelector.setModel(new DefaultComboBoxModel<>(
+                AccountKitModuleConfigurator.getModuleAvailabilities(project)));
+    }
+
+    @Override
+    public boolean commitForm() {
+        AccountKitModuleConfigurator.AvailableModule selectedModule =
+                (AccountKitModuleConfigurator.AvailableModule) moduleSelector.getSelectedItem();
+
+        if (selectedModule == null) {
+            Messages.showErrorDialog(
+                project,
+                "Please select a module to continue.",
+                "Install Failed");
+            return false;
+        }
+
+        if (selectedModule.getInstallationType() ==
+                AccountKitModuleConfigurator.InstallationType.CannotInstall) {
+            Messages.showErrorDialog(
+                project,
+                "Cannot install AccountKit on module " +
+                  selectedModule.getModule().getName() +
+                  " because it either is not an Android module " +
+                  "or is not built using Gradle.",
+                "Install Failed");
+            return false;
+        }
+
+        if (selectedModule.getInstallationType() ==
+                AccountKitModuleConfigurator.InstallationType.AlreadyInstalled) {
+            return true;
+        }
+
+        if (StringUtils.isBlank(appNameField.getText())) {
+            Messages.showErrorDialog(
+                project,
+                "App Name cannot be blank.",
+                "Install Failed");
+            return false;
+        }
+
+        if (StringUtils.isBlank(appIdField.getText()) ||
+                !StringUtils.isNumeric(appIdField.getText())) {
+            Messages.showErrorDialog(
+                project,
+                "App Id must be a valid number.",
+                "Install Failed");
+            return false;
+        }
+
+        if (StringUtils.isBlank(clientTokenField.getText())) {
+            Messages.showErrorDialog(
+                project,
+                "Client Token cannot be blank.",
+                "Install Failed");
+            return false;
+        }
+
+        AccountKitModuleConfigurator accountKitModuleConfigurator =
+                new AccountKitModuleConfigurator(
+                        appNameField.getText(),
+                        appIdField.getText(),
+                        clientTokenField.getText());
+
+        if (!accountKitModuleConfigurator.isConfigured(selectedModule.getModule())) {
+            try {
+                accountKitModuleConfigurator.doConfigure(selectedModule.getModule());
+            } catch (Exception e) {
+                Messages.showErrorDialog(
+                    project,
+                    "Something went wrong while installing module " +
+                      selectedModule.getModule().getName() +
+                      ": \n" + e.getMessage(),
+                    "Install Failed");
+            }
+        }
+
+        return true;
+    }
+}
diff --git a/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/AccountKitInstallerWizard.java b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/AccountKitInstallerWizard.java
new file mode 100644
index 000000000..22a5538ef
--- /dev/null
+++ b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/AccountKitInstallerWizard.java
@@ -0,0 +1,133 @@
+/*
+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.plugin.ui;
+
+import com.intellij.openapi.project.Project;
+import com.intellij.openapi.ui.DialogWrapper;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import javax.swing.Action;
+import javax.swing.JComponent;
+import javax.swing.JPanel;
+import java.awt.Dimension;
+import java.awt.GridLayout;
+import java.awt.event.ActionEvent;
+
+public class AccountKitInstallerWizard extends DialogWrapper {
+
+    private static final Dimension defaultMinSize = new Dimension(800, 400);
+    private static final Dimension defaultMaxSize = new Dimension(800, 600);
+
+    private JPanel mainPanel;
+
+    private WizardStep[] wizardSteps;
+    private WizardAction previousAction;
+    private WizardAction nextAction;
+    private int currentStep = 0;
+
+    public AccountKitInstallerWizard(final Project project) {
+        super(project);
+
+        wizardSteps = new WizardStep[]{
+                new AccountKitPrerequisitesForm(),
+                new AccountKitInstallDependenciesForm(project),
+                new AccountKitInstallActivityForm(project),
+                new AccountKitCompletedForm()
+        };
+
+        setTitle("Install AccountKit SDK");
+        init();
+        setStep(0, false);
+    }
+
+    @NotNull
+    @Override
+    protected Action[] createLeftSideActions() {
+        return new Action[]{
+                new DialogWrapperExitAction("Close", CLOSE_EXIT_CODE)
+        };
+    }
+
+    @NotNull
+    @Override
+    protected Action[] createActions() {
+        previousAction = new WizardAction("< Previous", -1);
+        nextAction = new WizardAction("Next >", 1);
+        return new Action[]{
+                previousAction,
+                nextAction
+        };
+    }
+
+    @Nullable
+    @Override
+    protected JComponent createCenterPanel() {
+        mainPanel = new JPanel(true);
+        mainPanel.setMinimumSize(defaultMinSize);
+        mainPanel.setMaximumSize(defaultMaxSize);
+        mainPanel.setLayout(new GridLayout(0, 1));
+        return mainPanel;
+    }
+
+    private void setStep(final int newStep, final boolean shouldCommit) {
+        if ((newStep < 0) || (newStep >= wizardSteps.length) || (mainPanel == null)) {
+            return;
+        }
+
+        if (shouldCommit) {
+            if (!wizardSteps[currentStep].commitForm()) {
+                return;
+            }
+        }
+
+        currentStep = newStep;
+        wizardSteps[newStep].fillForm();
+
+        JComponent centerPanel = wizardSteps[newStep].getComponent();
+        centerPanel.setMinimumSize(defaultMinSize);
+        centerPanel.setMaximumSize(defaultMaxSize);
+        centerPanel.invalidate();
+        centerPanel.updateUI();
+
+        mainPanel.removeAll();
+        mainPanel.add(centerPanel);
+        mainPanel.invalidate();
+        mainPanel.updateUI();
+
+        previousAction.setEnabled(currentStep > 0);
+        nextAction.setEnabled(currentStep < wizardSteps.length - 1);
+    }
+
+    protected final class WizardAction extends DialogWrapperAction {
+        final int delta;
+
+        private WizardAction(@NotNull final String name, final int delta) {
+            super(name);
+            this.delta = delta;
+        }
+
+        @Override
+        protected void doAction(ActionEvent actionEvent) {
+            setStep(currentStep + delta, delta > 0);
+        }
+    }
+}
diff --git a/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/AccountKitPrerequisites.form b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/AccountKitPrerequisites.form
new file mode 100644
index 000000000..93e0bc31a
--- /dev/null
+++ b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/AccountKitPrerequisites.form
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<form xmlns="http://www.intellij.com/uidesigner/form/" version="1" bind-to-class="com.facebook.plugin.ui.AccountKitPrerequisitesForm">
+  <grid id="27dc6" binding="mainPanel" layout-manager="GridLayoutManager" row-count="2" column-count="1" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
+    <margin top="0" left="0" bottom="0" right="0"/>
+    <constraints>
+      <xy x="20" y="20" width="1069" height="369"/>
+    </constraints>
+    <properties/>
+    <border type="none"/>
+    <children>
+      <component id="34af8" class="javax.swing.JLabel">
+        <constraints>
+          <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="3" hsize-policy="7" anchor="1" fill="1" indent="0" use-parent-layout="false"/>
+        </constraints>
+        <properties>
+          <horizontalTextPosition value="10"/>
+          <text resource-bundle="values/strings" key="prereqsText"/>
+          <verticalAlignment value="1"/>
+          <verticalTextPosition value="1"/>
+        </properties>
+      </component>
+      <vspacer id="66a18">
+        <constraints>
+          <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="6" hsize-policy="1" anchor="0" fill="2" indent="0" use-parent-layout="false"/>
+        </constraints>
+      </vspacer>
+    </children>
+  </grid>
+</form>
diff --git a/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/AccountKitPrerequisitesForm.java b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/AccountKitPrerequisitesForm.java
new file mode 100644
index 000000000..b7e9f4e29
--- /dev/null
+++ b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/AccountKitPrerequisitesForm.java
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.plugin.ui;
+
+import javax.swing.JComponent;
+import javax.swing.JPanel;
+
+public class AccountKitPrerequisitesForm implements WizardStep {
+    private JPanel mainPanel;
+
+    @Override
+    public JComponent getComponent() {
+        return mainPanel;
+    }
+
+    @Override
+    public void fillForm() {
+        // Nothing to fill
+    }
+
+    @Override
+    public boolean commitForm() {
+        // Nothing to commit
+        return true;
+    }
+}
diff --git a/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/WizardStep.java b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/WizardStep.java
new file mode 100644
index 000000000..95cf1f482
--- /dev/null
+++ b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/ui/WizardStep.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.plugin.ui;
+
+import javax.swing.JComponent;
+
+public interface WizardStep {
+    JComponent getComponent();
+
+    void fillForm();
+
+    boolean commitForm();
+}
diff --git a/plugin/FacebookSDKPlugin/src/com/facebook/plugin/utils/PsiHelper.java b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/utils/PsiHelper.java
new file mode 100644
index 000000000..e14a32037
--- /dev/null
+++ b/plugin/FacebookSDKPlugin/src/com/facebook/plugin/utils/PsiHelper.java
@@ -0,0 +1,145 @@
+/*
+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.plugin.utils;
+
+import com.intellij.openapi.module.Module;
+import com.intellij.openapi.project.Project;
+import com.intellij.openapi.roots.ProjectFileIndex;
+import com.intellij.openapi.roots.ProjectRootManager;
+import com.intellij.openapi.ui.Messages;
+import com.intellij.openapi.vfs.VirtualFile;
+import com.intellij.psi.PsiElement;
+import com.intellij.psi.PsiFile;
+import com.intellij.psi.search.FilenameIndex;
+import com.intellij.psi.search.GlobalSearchScope;
+import org.apache.commons.lang.StringUtils;
+
+import java.io.FileOutputStream;
+import java.io.PrintStream;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public final class PsiHelper {
+
+    public static Map<Module, PsiFile> findAllFiles(
+            final Project project,
+            final String fileName) {
+        ProjectFileIndex fileIndex = ProjectRootManager.getInstance(project).getFileIndex();
+        String projectFilePath = project.getBasePath();
+
+        PsiFile[] psiFiles = FilenameIndex.getFilesByName(
+                project,
+                fileName,
+                GlobalSearchScope.projectScope(project));
+
+        Map<Module, PsiFile> moduleFiles = new HashMap<>();
+        for (PsiFile psiFile : psiFiles) {
+            try {
+                VirtualFile virtualFile = psiFile.getVirtualFile();
+                Module module = fileIndex.getModuleForFile(virtualFile);
+                String modulePath = module.getModuleFile().getParent().getPath();
+
+                if (!modulePath.equals(projectFilePath)) {
+                    moduleFiles.put(module, psiFile);
+                }
+            } catch (Exception e) {
+                // Swallow
+            }
+        }
+
+        return moduleFiles;
+    }
+
+    public static List<PsiFile> findAllFiles(final Module module, final String fileName) {
+        ProjectFileIndex fileIndex =
+                ProjectRootManager.getInstance(module.getProject()).getFileIndex();
+
+        PsiFile[] psiFiles = FilenameIndex.getFilesByName(
+                module.getProject(),
+                fileName,
+                module.getModuleContentScope());
+
+        List<PsiFile> moduleFiles = new ArrayList<>();
+        for (PsiFile psiFile : psiFiles) {
+            try {
+                VirtualFile virtualFile = psiFile.getVirtualFile();
+                Module fileModule = fileIndex.getModuleForFile(virtualFile);
+
+                if (fileModule == module) {
+                    moduleFiles.add(psiFile);
+                }
+            } catch (Exception e) {
+                // Swallow
+            }
+        }
+
+        return moduleFiles;
+    }
+
+    /**
+     * This class should not be present in the final release.
+     * I'm just using it here for my own sanity because digging down the Psi tree inside
+     * the debugger is really unpleasant
+     */
+    public static class Printer {
+        private static PrintStream out = null;
+        private static final String fileName = "/Users/plj/printedElements";
+
+        public static void printElement(final PsiElement element) {
+            try {
+                if (out == null) {
+                    out = new PrintStream(new FileOutputStream(fileName));
+                }
+                out.println(element.getContainingFile().getName());
+                out.println("===============================================================");
+                printElement(out, "", element);
+                out.println("===============================================================\n\n");
+            } catch (Exception e) {
+                Messages.showErrorDialog(e.toString(), "Error in Printer");
+            }
+        }
+
+        private static void printElement(
+                final PrintStream out,
+                final String indent,
+                final PsiElement element)
+                throws Exception {
+            String contents = element.getText();
+            int i = contents.indexOf('\n');
+            if (i >= 0) {
+                contents = contents.substring(0, i) + "\\n...";
+            }
+
+            out.printf(StringUtils.rightPad(indent + element.getClass().getSimpleName(), 40));
+            out.print(StringUtils.rightPad(element.toString(), 40));
+            out.print("| ");
+            out.print(indent.replace("+", " "));
+            out.print(contents);
+            out.println();
+
+            for (PsiElement child : element.getChildren()) {
+                printElement(out, indent + "+ ", child);
+            }
+        }
+    }
+}
diff --git a/samples/HelloFacebookSample/AndroidManifest.xml b/samples/HelloFacebookSample/AndroidManifest.xml
index 0815e7457..cb9bd5e9d 100644
--- a/samples/HelloFacebookSample/AndroidManifest.xml
+++ b/samples/HelloFacebookSample/AndroidManifest.xml
@@ -20,33 +20,49 @@
 -->
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="com.example.hellofacebook"
-          android:versionCode="1"
-          android:versionName="1.0">
-    <uses-permission android:name="android.permission.INTERNET"/>
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
-    <application android:label="@string/app_name"
-                 android:icon="@drawable/icon"
-                 android:theme="@android:style/Theme.NoTitleBar"
-            >
-        <activity android:name=".HelloFacebookSampleActivity"
-                  android:label="@string/app_name"
-                  android:windowSoftInputMode="adjustResize">
+    package="com.example.hellofacebook"
+    android:versionCode="1"
+    android:versionName="1.0">
+
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+
+    <application
+        android:icon="@drawable/icon"
+        android:label="@string/app_name"
+        android:theme="@android:style/Theme.NoTitleBar">
+        <activity
+            android:name=".HelloFacebookSampleActivity"
+            android:label="@string/app_name"
+            android:windowSoftInputMode="adjustResize">
             <intent-filter>
-                <action android:name="android.intent.action.MAIN"/>
-                <category android:name="android.intent.category.LAUNCHER"/>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LAUNCHER" />
             </intent-filter>
         </activity>
-        <activity android:name="com.facebook.FacebookActivity"
-                  android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
-                  android:theme="@android:style/Theme.Translucent.NoTitleBar"
-                  android:label="@string/app_name" />
-        <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id"/>
-        <meta-data android:name="com.facebook.sdk.ApplicationName"
-                   android:value="@string/facebook_app_name" />
-        <provider android:authorities="com.facebook.app.FacebookContentProvider355198514515820"
-                  android:name="com.facebook.FacebookContentProvider"
-                  android:exported="true"/>
+        <activity
+            android:name="com.facebook.CustomTabActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+
+                <data android:scheme="@string/fb_login_protocol_scheme" />
+            </intent-filter>
+        </activity>
+
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationId"
+            android:value="@string/app_id" />
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationName"
+            android:value="@string/facebook_app_name" />
+
+        <provider
+            android:name="com.facebook.FacebookContentProvider"
+            android:authorities="com.facebook.app.FacebookContentProvider355198514515820"
+            android:exported="true" />
         <receiver android:name="com.example.hellofacebook.HelloFacebookBroadcastReceiver">
             <intent-filter>
                 <action android:name="com.facebook.platform.AppCallResultBroadcast" />
diff --git a/samples/HelloFacebookSample/BUCK b/samples/HelloFacebookSample/BUCK
deleted file mode 100644
index 9796c61d9..000000000
--- a/samples/HelloFacebookSample/BUCK
+++ /dev/null
@@ -1,35 +0,0 @@
-android_resource(
-  name = 'res',
-  res = 'res',
-  package = 'com.example.hellofacebook',
-  deps = [
-    '//facebook:android-sdk',
-  ],
-)
-
-android_library(
-  name = 'lib',
-  srcs = glob(['src/**/*.java']),
-  deps = [
-    ':res',
-    '//facebook:android-sdk',
-    '//libs:android-support-v4',
-  ],
-)
-
-android_binary(
-  name = 'app',
-  manifest = 'AndroidManifest.xml',
-  keystore = '//keystores:debug',
-  package_type = 'debug',
-  deps = [
-    ':lib',
-    '//facebook:android-sdk',
-    '//libs:android-support-v4',
-  ],
-)
-
-project_config(
-  src_target = ':app',
-  src_roots = ['src'],
-)
diff --git a/samples/HelloFacebookSample/build.gradle b/samples/HelloFacebookSample/build.gradle
index 8ba946d53..7d7156e28 100644
--- a/samples/HelloFacebookSample/build.gradle
+++ b/samples/HelloFacebookSample/build.gradle
@@ -9,6 +9,7 @@ android {
     buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
+        applicationId 'com.example.hellofacebook'
         minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
         targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
     }
diff --git a/samples/HelloFacebookSample/res/drawable-hdpi/icon.png b/samples/HelloFacebookSample/res/drawable-hdpi/icon.png
index 0a0d7cc73..c9d6b7c29 100644
Binary files a/samples/HelloFacebookSample/res/drawable-hdpi/icon.png and b/samples/HelloFacebookSample/res/drawable-hdpi/icon.png differ
diff --git a/samples/HelloFacebookSample/res/drawable-mdpi/icon.png b/samples/HelloFacebookSample/res/drawable-mdpi/icon.png
index b4507c0e7..1b1ebfac0 100644
Binary files a/samples/HelloFacebookSample/res/drawable-mdpi/icon.png and b/samples/HelloFacebookSample/res/drawable-mdpi/icon.png differ
diff --git a/samples/HelloFacebookSample/res/drawable-xhdpi/icon.png b/samples/HelloFacebookSample/res/drawable-xhdpi/icon.png
index 6e8424602..6dfcfd003 100644
Binary files a/samples/HelloFacebookSample/res/drawable-xhdpi/icon.png and b/samples/HelloFacebookSample/res/drawable-xhdpi/icon.png differ
diff --git a/samples/HelloFacebookSample/res/drawable/icon.png b/samples/HelloFacebookSample/res/drawable/icon.png
index b4507c0e7..1b1ebfac0 100644
Binary files a/samples/HelloFacebookSample/res/drawable/icon.png and b/samples/HelloFacebookSample/res/drawable/icon.png differ
diff --git a/samples/HelloFacebookSample/res/values/strings.xml b/samples/HelloFacebookSample/res/values/strings.xml
index c199e5873..78b945b31 100644
--- a/samples/HelloFacebookSample/res/values/strings.xml
+++ b/samples/HelloFacebookSample/res/values/strings.xml
@@ -36,5 +36,6 @@
     <string name="no_place_selected">&lt;No place selected&gt;</string>
     <string name="pick_seattle_place">Pick a Seattle Place</string>
     <string name="app_id">355198514515820</string>
+    <string name="fb_login_protocol_scheme">fb355198514515820</string>
     <string name="exception">Exception: %1$s</string>
 </resources>
diff --git a/samples/HelloFacebookSample/src/com/example/hellofacebook/HelloFacebookSampleActivity.java b/samples/HelloFacebookSample/src/com/example/hellofacebook/HelloFacebookSampleActivity.java
index 749c6d59a..ab8001764 100644
--- a/samples/HelloFacebookSample/src/com/example/hellofacebook/HelloFacebookSampleActivity.java
+++ b/samples/HelloFacebookSample/src/com/example/hellofacebook/HelloFacebookSampleActivity.java
@@ -114,7 +114,6 @@ private void showResult(String title, String alertMessage) {
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        FacebookSdk.sdkInitialize(this.getApplicationContext());
 
         callbackManager = CallbackManager.Factory.create();
 
@@ -205,12 +204,6 @@ public void onClick(View view) {
     @Override
     protected void onResume() {
         super.onResume();
-
-        // Call the 'activateApp' method to log an app event for use in analytics and advertising
-        // reporting.  Do so in the onResume methods of the primary Activities that an app may be
-        // launched into.
-        AppEventsLogger.activateApp(this);
-
         updateUI();
     }
 
@@ -227,20 +220,11 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
         callbackManager.onActivityResult(requestCode, resultCode, data);
     }
 
-    @Override
-    public void onPause() {
-        super.onPause();
-
-        // Call the 'deactivateApp' method to log an app event for use in analytics and advertising
-        // reporting.  Do so in the onPause methods of the primary Activities that an app may be
-        // launched into.
-        AppEventsLogger.deactivateApp(this);
-    }
-
     @Override
     protected void onDestroy() {
         super.onDestroy();
         profileTracker.stopTracking();
+        LoginManager.getInstance().unregisterCallback(callbackManager);
     }
 
     private void updateUI() {
diff --git a/samples/Iconicus/AndroidManifest.xml b/samples/Iconicus/AndroidManifest.xml
index 7a6f18198..f82f3e846 100644
--- a/samples/Iconicus/AndroidManifest.xml
+++ b/samples/Iconicus/AndroidManifest.xml
@@ -20,19 +20,17 @@
 -->
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.example.iconicus" >
-
-    <uses-permission android:name="android.permission.INTERNET"/>
-
+    package="com.example.iconicus">
+    <uses-permission android:name="android.permission.INTERNET" />
     <application
         android:allowBackup="true"
         android:icon="@drawable/ic_launcher"
         android:label="@string/app_name"
-        android:theme="@style/AppBaseTheme" >
+        android:theme="@style/AppBaseTheme">
         <activity
             android:name=".MainActivity"
-            android:screenOrientation="portrait"
-            android:label="@string/app_name" >
+            android:label="@string/app_name"
+            android:screenOrientation="portrait">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
 
@@ -40,31 +38,37 @@
             </intent-filter>
             <intent-filter>
                 <data
-                    android:scheme="https"
                     android:host="fb.me"
-                    android:path="/1570399853210604" />
+                    android:path="/1570399853210604"
+                    android:scheme="https" />
                 <category android:name="android.intent.category.DEFAULT" />
                 <category android:name="android.intent.category.BROWSABLE" />
                 <action android:name="android.intent.action.VIEW" />
             </intent-filter>
             <intent-filter>
-                <data android:scheme="iconicus" android:host="game" />
+                <data
+                    android:host="game"
+                    android:scheme="iconicus" />
+
                 <category android:name="android.intent.category.DEFAULT" />
                 <category android:name="android.intent.category.BROWSABLE" />
+
                 <action android:name="android.intent.action.VIEW" />
             </intent-filter>
         </activity>
+        <activity
+            android:name="com.facebook.CustomTabActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
 
-        <activity android:name="com.facebook.FacebookActivity"
-            android:configChanges=
-                "keyboard|keyboardHidden|screenLayout|screenSize|orientation"
-            android:theme="@android:style/Theme.Translucent.NoTitleBar"
-            android:label="@string/app_name" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
 
+                <data android:scheme="@string/fb_login_protocol_scheme" />
+            </intent-filter>
+        </activity>
         <meta-data
             android:name="com.facebook.sdk.ApplicationId"
-            android:value="@string/facebook_app_id"/>
-
+            android:value="@string/facebook_app_id" />
     </application>
-
 </manifest>
diff --git a/samples/Iconicus/BUCK b/samples/Iconicus/BUCK
deleted file mode 100644
index 7d7dfd9fb..000000000
--- a/samples/Iconicus/BUCK
+++ /dev/null
@@ -1,35 +0,0 @@
-android_resource(
-  name = 'res',
-  res = 'res',
-  package = 'com.example.iconicus',
-  deps = [
-    '//facebook:android-sdk',
-  ],
-)
-
-android_library(
-  name = 'lib',
-  srcs = glob(['src/**/*.java']),
-  deps = [
-    ':res',
-    '//facebook:android-sdk',
-    '//libs:android-support-v4',
-  ],
-)
-
-android_binary(
-  name = 'app',
-  manifest = 'AndroidManifest.xml',
-  keystore = '//keystores:debug',
-  package_type = 'debug',
-  deps = [
-    ':lib',
-    '//facebook:android-sdk',
-    '//libs:android-support-v4',
-  ],
-)
-
-project_config(
-  src_target = ':app',
-  src_roots = ['src'],
-)
diff --git a/samples/Iconicus/res/values/strings.xml b/samples/Iconicus/res/values/strings.xml
index e54c9c78d..d61290e2c 100644
--- a/samples/Iconicus/res/values/strings.xml
+++ b/samples/Iconicus/res/values/strings.xml
@@ -25,6 +25,7 @@
     <string name="button_clear_board">Clear Board</string>
     <string name="copy_url">Copy URL</string>
     <string name="facebook_app_id">1567030756880847</string>
+    <string name="fb_login_protocol_scheme">fb1567030756880847</string>
     <string name="share_title">Play this game!</string>
     <string name="share_description">Check out this game of Iconicus that I was playing. Can you finish it?</string>
     <string name="link_copied">The link has been copied to the clipboard.</string>
diff --git a/samples/Iconicus/src/com/example/iconicus/MainActivity.java b/samples/Iconicus/src/com/example/iconicus/MainActivity.java
index 1a2e6e681..b071453c9 100644
--- a/samples/Iconicus/src/com/example/iconicus/MainActivity.java
+++ b/samples/Iconicus/src/com/example/iconicus/MainActivity.java
@@ -44,7 +44,6 @@
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        FacebookSdk.sdkInitialize(this);
         setContentView(R.layout.activity_main);
 
         gameController = new GameController(this, getIntent());
diff --git a/samples/LoginSample/build.gradle b/samples/LoginSample/build.gradle
new file mode 100644
index 000000000..032dc78c8
--- /dev/null
+++ b/samples/LoginSample/build.gradle
@@ -0,0 +1,47 @@
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
+
+    defaultConfig {
+        applicationId "com.facebook.samples.loginsample"
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+        versionCode 1
+        versionName "1.0"
+    }
+
+    buildTypes {
+        debug {
+            minifyEnabled true
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+        release {
+            minifyEnabled true
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+
+    lintOptions {
+        abortOnError false
+    }
+
+    splits {
+        abi {
+            enable true
+            reset()
+            include 'armeabi', 'armeabi-v7a', 'x86'
+            universalApk true
+        }
+    }
+}
+
+dependencies {
+    compile fileTree(dir: 'libs', include: ['*.jar'])
+    compile project(':facebook')
+    compile 'com.android.support:appcompat-v7:24.1.1'
+    compile 'com.facebook.android:account-kit-sdk:4.+'
+    testCompile 'junit:junit:4.12'
+}
+
diff --git a/samples/LoginSample/proguard-rules.pro b/samples/LoginSample/proguard-rules.pro
new file mode 100644
index 000000000..a8376722c
--- /dev/null
+++ b/samples/LoginSample/proguard-rules.pro
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in /Users/abeatte/resources/android_sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/samples/MessengerSendSample/src/main/java/com/facebook/samples/messenger/send/MessengerSendSampleApplication.java b/samples/LoginSample/src/androidTest/java/com/facebook/samples/loginsample/ApplicationTest.java
similarity index 78%
rename from samples/MessengerSendSample/src/main/java/com/facebook/samples/messenger/send/MessengerSendSampleApplication.java
rename to samples/LoginSample/src/androidTest/java/com/facebook/samples/loginsample/ApplicationTest.java
index ce475fdd1..3730d148b 100644
--- a/samples/MessengerSendSample/src/main/java/com/facebook/samples/messenger/send/MessengerSendSampleApplication.java
+++ b/samples/LoginSample/src/androidTest/java/com/facebook/samples/loginsample/ApplicationTest.java
@@ -18,20 +18,16 @@
  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  */
 
-package com.facebook.samples.messenger.send;
+package com.facebook.samples.loginsample;
 
 import android.app.Application;
-
-import com.facebook.FacebookSdk;
+import android.test.ApplicationTestCase;
 
 /**
- * Application object for sample app.
+ * <a href="http://d.android.com/tools/testing/testing_android.html">Testing Fundamentals</a>
  */
-public class MessengerSendSampleApplication extends Application {
-
-  @Override
-  public void onCreate() {
-    super.onCreate();
-    FacebookSdk.sdkInitialize(this);
-  }
+public class ApplicationTest extends ApplicationTestCase<Application> {
+    public ApplicationTest() {
+        super(Application.class);
+    }
 }
diff --git a/samples/LoginSample/src/main/AndroidManifest.xml b/samples/LoginSample/src/main/AndroidManifest.xml
new file mode 100644
index 000000000..b590a02d5
--- /dev/null
+++ b/samples/LoginSample/src/main/AndroidManifest.xml
@@ -0,0 +1,115 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    package="com.facebook.samples.loginsample">
+
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.READ_PHONE_STATE" />
+    <uses-permission android:name="android.permission.RECEIVE_SMS" />
+    <uses-permission android:name="android.permission.GET_ACCOUNTS" />
+
+    <application
+        android:allowBackup="true"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:supportsRtl="true"
+        android:theme="@style/AppTheme">
+
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationId"
+            android:value="@string/facebook_app_id"/>
+
+        <activity android:name=".MainActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+
+        <activity android:label="@string/label_facebook_login"
+            android:name=".facebook.FacebookLoginActivity"/>
+
+        <activity android:name=".facebook.PermissionSelectActivity"/>
+
+        <activity android:label="@string/label_account_kit_login"
+            android:name=".accountkit.AccountKitLoginActivity"/>
+
+        <activity
+            android:name=".accountkit.ErrorActivity"
+            android:label="@string/action_bar_title_hello" />
+
+        <activity
+            android:name=".accountkit.CodeActivity"
+            android:label="@string/action_bar_title_hello" />
+
+        <activity
+            android:name=".accountkit.TokenActivity"
+            android:label="@string/action_bar_title_hello" />
+
+        <!--Account Kit-->
+
+        <activity
+            android:name="com.facebook.CustomTabActivity"
+            android:exported="true">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+                <data android:scheme="@string/fb_login_protocol_scheme" />
+            </intent-filter>
+        </activity>
+
+        <meta-data android:name="com.facebook.accountkit.ApplicationName"
+            android:value="@string/app_name" />
+        <meta-data android:name="com.facebook.sdk.ApplicationId"
+            android:value="@string/facebook_app_id" />
+        <meta-data android:name="com.facebook.accountkit.ClientToken"
+            android:value="@string/ACCOUNT_KIT_CLIENT_TOKEN" />
+
+        <activity
+            android:name="com.facebook.accountkit.ui.AccountKitActivity"
+            android:theme="@style/AppLoginTheme"
+            tools:replace="android:theme">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+                <data android:scheme="@string/ak_login_protocol_scheme" />
+            </intent-filter>
+        </activity>
+
+        <activity android:name="com.facebook.accountkit.ui.AccountKitEmailRedirectActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+
+                <data android:scheme="@string/ak_login_protocol_scheme" />
+            </intent-filter>
+        </activity>
+
+    </application>
+
+</manifest>
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/MainActivity.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/MainActivity.java
new file mode 100644
index 000000000..3fe6ed627
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/MainActivity.java
@@ -0,0 +1,63 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
+import android.view.View;
+import android.widget.Button;
+
+import com.facebook.FacebookSdk;
+import com.facebook.samples.loginsample.accountkit.AccountKitLoginActivity;
+import com.facebook.samples.loginsample.facebook.FacebookLoginActivity;
+
+public class MainActivity extends AppCompatActivity {
+
+    @Override
+    protected void onCreate(final Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+
+        initFacebookLogin();
+        initAccountKitLogin();
+    }
+
+    private void initFacebookLogin() {
+        final Button fbLoginButton = (Button) findViewById(R.id.fb_login_button);
+        fbLoginButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                startActivity(new Intent(MainActivity.this, FacebookLoginActivity.class));
+            }
+        });
+    }
+
+    private void initAccountKitLogin() {
+        final Button akLoginButton = (Button) findViewById(R.id.ak_login_button);
+        akLoginButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                startActivity(new Intent(MainActivity.this, AccountKitLoginActivity.class));
+            }
+        });
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/AccountKitLoginActivity.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/AccountKitLoginActivity.java
new file mode 100644
index 000000000..eb2994572
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/AccountKitLoginActivity.java
@@ -0,0 +1,754 @@
+/*
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+ package com.facebook.samples.loginsample.accountkit;
+
+import android.Manifest;
+import android.annotation.TargetApi;
+import android.app.AlertDialog;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.pm.PackageManager;
+import android.os.Build;
+import android.os.Bundle;
+import android.support.annotation.ColorInt;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.NonNull;
+import android.support.annotation.StyleRes;
+import android.support.v4.content.ContextCompat;
+import android.support.v4.content.LocalBroadcastManager;
+import android.support.v7.app.AppCompatActivity;
+import android.util.SparseArray;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.CompoundButton;
+import android.widget.SeekBar;
+import android.widget.Spinner;
+import android.widget.Switch;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.facebook.accountkit.AccessToken;
+import com.facebook.accountkit.AccountKit;
+import com.facebook.accountkit.AccountKitError;
+import com.facebook.accountkit.AccountKitLoginResult;
+import com.facebook.accountkit.ui.AccountKitActivity;
+import com.facebook.accountkit.ui.AccountKitConfiguration;
+import com.facebook.accountkit.ui.SkinManager;
+import com.facebook.accountkit.ui.ButtonType;
+import com.facebook.accountkit.ui.LoginType;
+import com.facebook.accountkit.ui.TextPosition;
+import com.facebook.accountkit.ui.ThemeUIManager;
+import com.facebook.accountkit.ui.UIManager;
+import com.facebook.samples.loginsample.R;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.UUID;
+
+public class AccountKitLoginActivity extends AppCompatActivity {
+    private static final int FRAMEWORK_REQUEST_CODE = 1;
+
+    private static final @DrawableRes int DEFAULT_SKIN_BACKGROUND_IMAGE = R.drawable.dog;
+    private static final int TINT_SEEKBAR_ADJUSTMENT = 55;
+
+    private Switch advancedUISwitch;
+    private SkinManager.Skin skin;
+    private Switch skinBackgroundImage;
+    private TextView skinBackgroundTintIntensityTitle;
+    private SeekBar skinBackgroundTintIntensity;
+    private Spinner skinTintSpinner;
+    private ButtonType confirmButton;
+    private ButtonType entryButton;
+    private String initialStateParam;
+    private int nextPermissionsRequestCode = 4000;
+    private final SparseArray<OnCompleteListener> permissionsListeners = new SparseArray<>();
+    private @StyleRes int selectedThemeId = -1;
+    private @DrawableRes int selectedBackgroundId = -1;
+    private BroadcastReceiver switchLoginTypeReceiver;
+    private TextPosition textPosition;
+
+    private interface OnCompleteListener {
+        void onComplete();
+    }
+
+    @Override
+    protected void onCreate(final Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.accountkit_activity_main);
+
+        if (AccountKit.getCurrentAccessToken() != null) {
+            showHelloActivity(null);
+        }
+
+        final View skinUIOptionsLayout = setupSkinUIOptions();
+        skinBackgroundTintIntensityTitle =
+                (TextView) skinUIOptionsLayout.findViewById(R.id.tint_intensity_title);
+        skinBackgroundTintIntensity =
+                (SeekBar) skinUIOptionsLayout.findViewById(R.id.tint_intensity_field);
+        skinBackgroundTintIntensity.setOnSeekBarChangeListener(
+                new SeekBar.OnSeekBarChangeListener() {
+                    @Override
+                    public void onProgressChanged(
+                            final SeekBar seekBar,
+                            final int progress,
+                            final boolean fromUser) {
+                        skinBackgroundTintIntensityTitle.setText(getString(
+                                R.string.config_tint_intensity_label,
+                                progress + TINT_SEEKBAR_ADJUSTMENT));
+                    }
+
+                    @Override
+                    public void onStartTrackingTouch(SeekBar seekBar) { /* no op */ }
+
+                    @Override
+                    public void onStopTrackingTouch(SeekBar seekBar) { /* no op */ }
+                });
+        skinBackgroundTintIntensity.setProgress(75 - TINT_SEEKBAR_ADJUSTMENT);
+
+        skinBackgroundImage = (Switch) findViewById(R.id.background_image);
+        skinBackgroundImage.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+            @Override
+            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+                skinUIOptionsLayout.setVisibility(
+                        (isSkinSelected() && getBackgroundImage() >= 0) ?
+                                View.VISIBLE :
+                                View.GONE);
+            }
+        });
+        final Spinner themeSpinner = (Spinner) findViewById(R.id.theme_spinner);
+        if (themeSpinner != null) {
+            final ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(
+                    this,
+                    R.array.theme_options,
+                    android.R.layout.simple_spinner_dropdown_item);
+            themeSpinner.setAdapter(adapter);
+            themeSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
+                @Override
+                public void onItemSelected(
+                        final AdapterView<?> parent,
+                        final View view,
+                        final int position,
+                        final long id) {
+
+                    // init defaults
+                    skin = SkinManager.Skin.NONE;
+                    selectedThemeId = -1;
+                    selectedBackgroundId = -1;
+
+                    switch (position) {
+                        case 0:
+                            skin = SkinManager.Skin.CLASSIC;
+                            advancedUISwitch.setChecked(false);
+                            break;
+                        case 1:
+                            skin = SkinManager.Skin.CONTEMPORARY;
+                            advancedUISwitch.setChecked(false);
+                            break;
+                        case 2:
+                            selectedThemeId = -1;
+                            skin = SkinManager.Skin.TRANSLUCENT;
+                            advancedUISwitch.setChecked(false);
+                            break;
+                        case 3:
+                            selectedThemeId = R.style.AppLoginTheme_Salmon;
+                            break;
+                        case 4:
+                            selectedThemeId = R.style.AppLoginTheme_Yellow;
+                            break;
+                        case 5:
+                            selectedThemeId = R.style.AppLoginTheme_Red;
+                            break;
+                        case 6:
+                            skin = SkinManager.Skin.CLASSIC;
+                            advancedUISwitch.setChecked(false);
+                            selectedBackgroundId = R.drawable.dog;
+                            break;
+                        case 7:
+                            selectedThemeId = R.style.AppLoginTheme_Bicycle;
+                            break;
+                        case 8:
+                            selectedThemeId = R.style.AppLoginTheme_Reverb_A;
+                            advancedUISwitch.setChecked(true);
+                            break;
+                        case 9:
+                            selectedThemeId = R.style.AppLoginTheme_Reverb_B;
+                            advancedUISwitch.setChecked(true);
+                            break;
+                        case 10:
+                            selectedThemeId = R.style.AppLoginTheme_Reverb_C;
+                            advancedUISwitch.setChecked(true);
+                            break;
+                        default:
+                            advancedUISwitch.setChecked(false);
+                            break;
+                    }
+
+                    skinBackgroundImage.setVisibility(isSkinSelected() ? View.VISIBLE : View.GONE);
+                    skinUIOptionsLayout.setVisibility(
+                            (isSkinSelected() && getBackgroundImage() >= 0) ?
+                                    View.VISIBLE :
+                                    View.GONE);
+                }
+
+                @Override
+                public void onNothingSelected(final AdapterView<?> parent) {
+                    selectedThemeId = -1;
+                    selectedBackgroundId = -1;
+                    skin = SkinManager.Skin.NONE;
+                    advancedUISwitch.setChecked(false);
+                    skinUIOptionsLayout.setVisibility(View.GONE);
+                    skinBackgroundImage.setVisibility(View.GONE);
+                }
+            });
+        }
+        setupAdvancedUIOptions();
+    }
+
+    private void setupAdvancedUIOptions() {
+
+        advancedUISwitch = (Switch) findViewById(R.id.advanced_ui_switch);
+
+        final View advancedUIOptionsLayout = findViewById(R.id.advanced_ui_options);
+
+        final List<CharSequence> buttonNames = new ArrayList<>();
+        buttonNames.add("Default");
+        for (ButtonType buttonType : ButtonType.values()) {
+            buttonNames.add(buttonType.name());
+        }
+        final ArrayAdapter<CharSequence> buttonNameAdapter
+                = new ArrayAdapter<>(
+                AccountKitLoginActivity.this,
+                android.R.layout.simple_spinner_dropdown_item,
+                buttonNames);
+
+        advancedUISwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+                if (isChecked) {
+                    if (isSkinSelected()) {
+                        advancedUISwitch.setChecked(false);
+                        Toast.makeText(
+                                AccountKitLoginActivity.this,
+                                R.string.skin_ui_required,
+                                Toast.LENGTH_LONG)
+                                .show();
+                        return;
+                    }
+
+                    advancedUIOptionsLayout.setVisibility(View.VISIBLE);
+
+                    final Spinner entryButtonSpinner =
+                            (Spinner) findViewById(R.id.entry_button_spinner);
+                    if (entryButtonSpinner != null) {
+                        entryButtonSpinner.setAdapter(buttonNameAdapter);
+                        entryButtonSpinner.setOnItemSelectedListener(
+                                new AdapterView.OnItemSelectedListener() {
+                                    @Override
+                                    public void onItemSelected(
+                                            final AdapterView<?> parent,
+                                            final View view,
+                                            final int position,
+                                            final long id) {
+                                        // First position is empty, so anything past that
+                                        if (position > 0) {
+                                            entryButton = ButtonType.valueOf(
+                                                    entryButtonSpinner
+                                                            .getSelectedItem()
+                                                            .toString());
+                                        } else {
+                                            entryButton = null;
+                                        }
+                                    }
+
+                                    @Override
+                                    public void onNothingSelected(final AdapterView<?> parent) {
+                                        entryButton = null;
+                                    }
+                                });
+                    }
+
+                    final Spinner confirmButtonSpinner =
+                            (Spinner) findViewById(R.id.confirm_button_spinner);
+                    if (confirmButtonSpinner != null) {
+                        confirmButtonSpinner.setAdapter(buttonNameAdapter);
+                        confirmButtonSpinner.setOnItemSelectedListener(
+                                new AdapterView.OnItemSelectedListener() {
+                                    @Override
+                                    public void onItemSelected(
+                                            final AdapterView<?> parent,
+                                            final View view,
+                                            final int position,
+                                            final long id) {
+                                        // First position is empty, so anything past
+                                        // that
+                                        if (position > 0) {
+                                            confirmButton = ButtonType.valueOf(
+                                                    confirmButtonSpinner
+                                                            .getSelectedItem()
+                                                            .toString());
+                                        } else {
+                                            confirmButton = null;
+                                        }
+                                    }
+
+                                    @Override
+                                    public void onNothingSelected(
+                                            final AdapterView<?> parent) {
+                                        confirmButton = null;
+                                    }
+                                });
+                    }
+
+                    final Spinner textPositionSpinner =
+                            (Spinner) findViewById(R.id.text_position_spinner);
+                    if (textPositionSpinner != null) {
+                        final List<CharSequence> textPositions = new ArrayList<>();
+                        textPositions.add("Default");
+                        for (TextPosition textPosition : TextPosition.values()) {
+                            textPositions.add(textPosition.name());
+                        }
+                        final ArrayAdapter<CharSequence> textPositionAdapter
+                                = new ArrayAdapter<>(
+                                AccountKitLoginActivity.this,
+                                android.R.layout.simple_spinner_dropdown_item,
+                                textPositions);
+
+                        textPositionSpinner.setAdapter(textPositionAdapter);
+                        textPositionSpinner.setOnItemSelectedListener(
+                                new AdapterView.OnItemSelectedListener() {
+                                    @Override
+                                    public void onItemSelected(
+                                            final AdapterView<?> parent,
+                                            final View view,
+                                            final int position,
+                                            final long id) {
+                                        // First position is empty, so anything past
+                                        // that
+                                        if (position > 0) {
+                                            textPosition = TextPosition.valueOf(
+                                                    textPositionSpinner
+                                                            .getSelectedItem()
+                                                            .toString());
+                                        } else {
+                                            textPosition = null;
+                                        }
+                                    }
+
+                                    @Override
+                                    public void onNothingSelected(
+                                            final AdapterView<?> parent) {
+                                        textPosition = null;
+                                    }
+                                });
+                    }
+                } else if (isReverbThemeSelected()) {
+                    advancedUISwitch.setChecked(true);
+                    Toast.makeText(
+                            AccountKitLoginActivity.this,
+                            R.string.reverb_advanced_ui_required,
+                            Toast.LENGTH_LONG)
+                            .show();
+                } else {
+                    advancedUIOptionsLayout.setVisibility(View.GONE);
+                }
+            }
+        });
+    }
+
+    private View setupSkinUIOptions() {
+        final View skinLayout = findViewById(R.id.skin_ui_options);
+        skinTintSpinner = (Spinner) skinLayout.findViewById(R.id.skin_tint_spinner);
+
+        final List<CharSequence> tints = new ArrayList<>();
+        for (SkinManager.Tint tint : SkinManager.Tint.values()) {
+            tints.add(tint.toString());
+        }
+
+        final ArrayAdapter<CharSequence> skinTintAdapter = new ArrayAdapter<>(
+                AccountKitLoginActivity.this,
+                android.R.layout.simple_spinner_dropdown_item,
+                tints);
+        skinTintSpinner.setAdapter(skinTintAdapter);
+
+        return skinLayout;
+    }
+
+    @Override
+    protected void onDestroy() {
+        LocalBroadcastManager.getInstance(getApplicationContext())
+                .unregisterReceiver(switchLoginTypeReceiver);
+
+        super.onDestroy();
+    }
+
+    public void onLoginEmail(final View view) {
+        onLogin(LoginType.EMAIL);
+    }
+
+    public void onLoginPhone(final View view) {
+        onLogin(LoginType.PHONE);
+    }
+
+    @Override
+    protected void onActivityResult(
+            final int requestCode,
+            final int resultCode,
+            final Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+
+        if (requestCode != FRAMEWORK_REQUEST_CODE) {
+            return;
+        }
+
+        final String toastMessage;
+        final AccountKitLoginResult loginResult = AccountKit.loginResultWithIntent(data);
+        if (loginResult == null || loginResult.wasCancelled()) {
+            toastMessage = "Login Cancelled";
+        } else if (loginResult.getError() != null) {
+            toastMessage = loginResult.getError().getErrorType().getMessage();
+            showErrorActivity(loginResult.getError());
+        } else {
+            final AccessToken accessToken = loginResult.getAccessToken();
+            final String authorizationCode = loginResult.getAuthorizationCode();
+            final long tokenRefreshIntervalInSeconds =
+                    loginResult.getTokenRefreshIntervalInSeconds();
+            if (accessToken != null) {
+                toastMessage = "Success:" + accessToken.getAccountId()
+                        + tokenRefreshIntervalInSeconds;
+                showHelloActivity(loginResult.getFinalAuthorizationState());
+            } else if (authorizationCode != null) {
+                toastMessage = String.format(
+                        "Success:%s...",
+                        authorizationCode.substring(0, 10));
+                showHelloActivity(authorizationCode, loginResult.getFinalAuthorizationState());
+            } else {
+                toastMessage = "Unknown response type";
+            }
+        }
+
+        Toast.makeText(
+                this,
+                toastMessage,
+                Toast.LENGTH_LONG)
+                .show();
+    }
+
+    private AccountKitActivity.ResponseType getResponseType() {
+        final Switch responseTypeSwitch = (Switch) findViewById(R.id.response_type_switch);
+        if (responseTypeSwitch != null && responseTypeSwitch.isChecked()) {
+            return AccountKitActivity.ResponseType.TOKEN;
+        } else {
+            return AccountKitActivity.ResponseType.CODE;
+        }
+    }
+
+    private AccountKitConfiguration.AccountKitConfigurationBuilder createAccountKitConfiguration(
+            final LoginType loginType) {
+        AccountKitConfiguration.AccountKitConfigurationBuilder configurationBuilder
+                = new AccountKitConfiguration.AccountKitConfigurationBuilder(
+                loginType,
+                getResponseType());
+        final Switch stateParamSwitch = (Switch) findViewById(R.id.state_param_switch);
+        final Switch facebookNotificationsSwitch =
+                (Switch) findViewById(R.id.facebook_notification_switch);
+        final Switch voiceCallSwitch =
+                (Switch) findViewById(R.id.voice_call_switch);
+        final Switch useManualWhiteListBlacklist =
+                (Switch) findViewById(R.id.whitelist_blacklist_switch);
+        final Switch readPhoneStateSwitch =
+                (Switch) findViewById(R.id.read_phone_state_switch);
+        final Switch receiveSMS =
+                (Switch) findViewById(R.id.receive_sms_switch);
+
+        final UIManager uiManager;
+        if (advancedUISwitch != null && advancedUISwitch.isChecked()) {
+            if (isReverbThemeSelected()) {
+                if (switchLoginTypeReceiver == null) {
+                    switchLoginTypeReceiver = new BroadcastReceiver() {
+                        @Override
+                        public void onReceive(final Context context, final Intent intent) {
+                            final String loginTypeString
+                                    = intent.getStringExtra(ReverbUIManager.LOGIN_TYPE_EXTRA);
+                            if (loginTypeString == null) {
+                                return;
+                            }
+                            final LoginType loginType = LoginType.valueOf(loginTypeString);
+                            onLogin(loginType);
+                        }
+                    };
+                    LocalBroadcastManager.getInstance(getApplicationContext())
+                            .registerReceiver(
+                                    switchLoginTypeReceiver,
+                                    new IntentFilter(ReverbUIManager.SWITCH_LOGIN_TYPE_EVENT));
+                }
+                uiManager = new ReverbUIManager(
+                        confirmButton,
+                        entryButton,
+                        loginType,
+                        textPosition,
+                        selectedThemeId);
+            } else {
+                uiManager = new AccountKitSampleAdvancedUIManager(
+                        confirmButton,
+                        entryButton,
+                        textPosition,
+                        loginType);
+            }
+        } else if (isSkinSelected()) {
+            final @ColorInt int primaryColor = ContextCompat.getColor(this, R.color.default_color);
+            if (getBackgroundImage() >= 0) {
+                uiManager = new SkinManager(
+                        skin,
+                        primaryColor,
+                        getBackgroundImage(),
+                        getSkinTintOption(),
+                        getSkinBackgroundTintIntensity());
+            } else {
+                uiManager = new SkinManager(skin, primaryColor);
+            }
+        } else {
+            uiManager = new ThemeUIManager(selectedThemeId);
+        }
+
+        configurationBuilder.setUIManager(uiManager);
+
+        if (stateParamSwitch != null && stateParamSwitch.isChecked()) {
+            initialStateParam = UUID.randomUUID().toString();
+            configurationBuilder.setInitialAuthState(initialStateParam);
+        }
+
+        if (facebookNotificationsSwitch != null && !facebookNotificationsSwitch.isChecked()) {
+            configurationBuilder.setFacebookNotificationsEnabled(false);
+        }
+        if (voiceCallSwitch != null && !voiceCallSwitch.isChecked()) {
+            configurationBuilder.setVoiceCallbackNotificationsEnabled(false);
+        }
+
+        if (useManualWhiteListBlacklist != null && useManualWhiteListBlacklist.isChecked()) {
+            final String[] blackList
+                    = getResources().getStringArray(R.array.blacklistedSmsCountryCodes);
+            final String[] whiteList
+                    = getResources().getStringArray(R.array.whitelistedSmsCountryCodes);
+            configurationBuilder.setSMSBlacklist(blackList);
+            configurationBuilder.setSMSWhitelist(whiteList);
+        }
+
+        if (readPhoneStateSwitch != null && !(readPhoneStateSwitch.isChecked())) {
+            configurationBuilder.setReadPhoneStateEnabled(false);
+        }
+
+        if (receiveSMS != null && !receiveSMS.isChecked()) {
+            configurationBuilder.setReceiveSMS(false);
+        }
+
+        return configurationBuilder;
+    }
+
+    private double getSkinBackgroundTintIntensity() {
+        return (double) (skinBackgroundTintIntensity.getProgress() + TINT_SEEKBAR_ADJUSTMENT) / 100;
+    }
+
+    private SkinManager.Tint getSkinTintOption() {
+        return SkinManager.Tint.valueOf((String) skinTintSpinner.getSelectedItem());
+    }
+
+    private @DrawableRes int getBackgroundImage() {
+        @DrawableRes int bgId = selectedBackgroundId;
+        if (bgId < 0) {
+            bgId = DEFAULT_SKIN_BACKGROUND_IMAGE;
+        }
+        return skinBackgroundImage.isChecked() ? bgId : -1;
+    }
+
+    private boolean isReverbThemeSelected() {
+        return selectedThemeId == R.style.AppLoginTheme_Reverb_A
+                || selectedThemeId == R.style.AppLoginTheme_Reverb_B
+                || selectedThemeId == R.style.AppLoginTheme_Reverb_C;
+    }
+
+    private boolean isSkinSelected() {
+        return skin != SkinManager.Skin.NONE;
+    }
+
+    private void onLogin(final LoginType loginType) {
+        final Intent intent = new Intent(this, AccountKitActivity.class);
+        final AccountKitConfiguration.AccountKitConfigurationBuilder configurationBuilder
+                = createAccountKitConfiguration(loginType);
+        final AccountKitConfiguration configuration = configurationBuilder.build();
+        intent.putExtra(
+                AccountKitActivity.ACCOUNT_KIT_ACTIVITY_CONFIGURATION,
+                configuration);
+        OnCompleteListener completeListener = new OnCompleteListener() {
+            @Override
+            public void onComplete() {
+                startActivityForResult(intent, FRAMEWORK_REQUEST_CODE);
+            }
+        };
+        switch (loginType) {
+            case EMAIL:
+                final OnCompleteListener getAccountsCompleteListener = completeListener;
+                completeListener = new OnCompleteListener() {
+                    @Override
+                    public void onComplete() {
+                        requestPermissions(
+                                Manifest.permission.GET_ACCOUNTS,
+                                R.string.permissions_get_accounts_title,
+                                R.string.permissions_get_accounts_message,
+                                getAccountsCompleteListener);
+                    }
+                };
+                break;
+            case PHONE:
+                if (configuration.isReceiveSMSEnabled()) {
+                    final OnCompleteListener receiveSMSCompleteListener = completeListener;
+                    completeListener = new OnCompleteListener() {
+                        @Override
+                        public void onComplete() {
+                            requestPermissions(
+                                    Manifest.permission.RECEIVE_SMS,
+                                    R.string.permissions_receive_sms_title,
+                                    R.string.permissions_receive_sms_message,
+                                    receiveSMSCompleteListener);
+                        }
+                    };
+                }
+                if (configuration.isReadPhoneStateEnabled()) {
+                    final OnCompleteListener readPhoneStateCompleteListener = completeListener;
+                    completeListener = new OnCompleteListener() {
+                        @Override
+                        public void onComplete() {
+                            requestPermissions(
+                                    Manifest.permission.READ_PHONE_STATE,
+                                    R.string.permissions_read_phone_state_title,
+                                    R.string.permissions_read_phone_state_message,
+                                    readPhoneStateCompleteListener);
+                        }
+                    };
+                }
+                break;
+        }
+        completeListener.onComplete();
+    }
+
+    private void showHelloActivity(final String finalState) {
+        final Intent intent = new Intent(this, TokenActivity.class);
+        intent.putExtra(
+                TokenActivity.HELLO_TOKEN_ACTIVITY_INITIAL_STATE_EXTRA,
+                initialStateParam);
+        intent.putExtra(TokenActivity.HELLO_TOKEN_ACTIVITY_FINAL_STATE_EXTRA, finalState);
+        startActivity(intent);
+    }
+
+    private void showHelloActivity(final String code, final String finalState) {
+        final Intent intent = new Intent(this, CodeActivity.class);
+        intent.putExtra(CodeActivity.HELLO_CODE_ACTIVITY_CODE_EXTRA, code);
+        intent.putExtra(
+                CodeActivity.HELLO_CODE_ACTIVITY_INITIAL_STATE_EXTRA,
+                initialStateParam);
+        intent.putExtra(CodeActivity.HELLO_CODE_ACTIVITY_FINAL_STATE_EXTRA, finalState);
+
+        startActivity(intent);
+    }
+
+    private void showErrorActivity(final AccountKitError error) {
+        final Intent intent = new Intent(this, ErrorActivity.class);
+        intent.putExtra(ErrorActivity.HELLO_TOKEN_ACTIVITY_ERROR_EXTRA, error);
+
+        startActivity(intent);
+    }
+
+    private void requestPermissions(
+            final String permission,
+            final int rationaleTitleResourceId,
+            final int rationaleMessageResourceId,
+            final OnCompleteListener listener) {
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
+            if (listener != null) {
+                listener.onComplete();
+            }
+            return;
+        }
+
+        checkRequestPermissions(
+                permission,
+                rationaleTitleResourceId,
+                rationaleMessageResourceId,
+                listener);
+    }
+
+    @TargetApi(23)
+    private void checkRequestPermissions(
+            final String permission,
+            final int rationaleTitleResourceId,
+            final int rationaleMessageResourceId,
+            final OnCompleteListener listener) {
+        if (checkSelfPermission(permission) == PackageManager.PERMISSION_GRANTED) {
+            if (listener != null) {
+                listener.onComplete();
+            }
+            return;
+        }
+
+        final int requestCode = nextPermissionsRequestCode++;
+        permissionsListeners.put(requestCode, listener);
+
+        if (shouldShowRequestPermissionRationale(permission)) {
+            new AlertDialog.Builder(this)
+                    .setTitle(rationaleTitleResourceId)
+                    .setMessage(rationaleMessageResourceId)
+                    .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(final DialogInterface dialog, final int which) {
+                            requestPermissions(new String[] { permission }, requestCode);
+                        }
+                    })
+                    .setNegativeButton(android.R.string.no, new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(final DialogInterface dialog, final int which) {
+                            // ignore and clean up the listener
+                            permissionsListeners.remove(requestCode);
+                        }
+                    })
+                    .setIcon(android.R.drawable.ic_dialog_alert)
+                    .show();
+        } else {
+            requestPermissions(new String[]{ permission }, requestCode);
+        }
+    }
+
+    @TargetApi(23)
+    @Override
+    public void onRequestPermissionsResult(
+            final int requestCode,
+            final @NonNull String[] permissions,
+            final @NonNull int[] grantResults) {
+        final OnCompleteListener permissionsListener = permissionsListeners.get(requestCode);
+        permissionsListeners.remove(requestCode);
+        if (permissionsListener != null
+                && grantResults.length > 0
+                && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+            permissionsListener.onComplete();
+        }
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/AccountKitSampleAdvancedUIManager.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/AccountKitSampleAdvancedUIManager.java
new file mode 100644
index 000000000..13f2a37f4
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/AccountKitSampleAdvancedUIManager.java
@@ -0,0 +1,229 @@
+/*
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Fragment;
+import android.os.Parcel;
+import android.support.annotation.Nullable;
+
+import com.facebook.accountkit.AccountKitError;
+import com.facebook.accountkit.ui.BaseUIManager;
+import com.facebook.accountkit.ui.ButtonType;
+import com.facebook.accountkit.ui.LoginFlowState;
+import com.facebook.accountkit.ui.LoginType;
+import com.facebook.accountkit.ui.TextPosition;
+import com.facebook.samples.loginsample.R;
+
+public class AccountKitSampleAdvancedUIManager extends BaseUIManager {
+    private static final int BODY_HEIGHT = 80;
+    private static final int FOOTER_HEIGHT = 120;
+    private static final int HEADER_HEIGHT = 80;
+
+    private final ButtonType confirmButton;
+    private final ButtonType entryButton;
+    private AccountKitError error;
+    private LoginType loginType;
+    private final TextPosition textPosition;
+
+    @Deprecated
+    public AccountKitSampleAdvancedUIManager(
+            final ButtonType confirmButton,
+            final ButtonType entryButton,
+            final TextPosition textPosition,
+            final LoginType loginType) {
+        super(-1);
+        this.confirmButton = confirmButton;
+        this.entryButton = entryButton;
+        this.textPosition = textPosition;
+        this.loginType = loginType;
+    }
+
+    private AccountKitSampleAdvancedUIManager(final Parcel source) {
+        super(source);
+        this.loginType = LoginType.values()[source.readInt()];
+        String s = source.readString();
+        final ButtonType confirmButton = s == null ? null : ButtonType.valueOf(s);
+        s = source.readString();
+        final ButtonType entryButton = s == null ? null : ButtonType.valueOf(s);
+        s = source.readString();
+        final TextPosition textPosition = s == null ? null : TextPosition.valueOf(s);
+        this.confirmButton = confirmButton;
+        this.entryButton = entryButton;
+        this.textPosition = textPosition;
+    }
+
+    @Override
+    @Nullable
+    public Fragment getBodyFragment(final LoginFlowState state) {
+        return getPlaceholderFragment(state, BODY_HEIGHT, "Body");
+    }
+
+    @Override
+    @Nullable
+    public ButtonType getButtonType(final LoginFlowState state) {
+        switch (state) {
+            case PHONE_NUMBER_INPUT:
+            case EMAIL_INPUT:
+                return entryButton;
+            case CODE_INPUT:
+            case CONFIRM_ACCOUNT_VERIFIED:
+                return confirmButton;
+            default:
+                return null;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Fragment getFooterFragment(final LoginFlowState state) {
+        return getPlaceholderFragment(state, FOOTER_HEIGHT, "Footer");
+    }
+
+    @Override
+    @Nullable
+    public Fragment getHeaderFragment(final LoginFlowState state) {
+        if (state != LoginFlowState.ERROR) {
+            return getPlaceholderFragment(state, HEADER_HEIGHT, "Header");
+        }
+        final String errorMessage = getErrorMessage();
+        if (errorMessage == null) {
+            return PlaceholderFragment.create(HEADER_HEIGHT, R.string.error_message);
+        } else {
+            return PlaceholderFragment.create(HEADER_HEIGHT, errorMessage);
+        }
+    }
+
+    @Override
+    @Nullable
+    public TextPosition getTextPosition(final LoginFlowState state) {
+        return textPosition;
+    }
+
+    @Override
+    public void onError(final AccountKitError error) {
+        this.error = error;
+    }
+
+    private String getErrorMessage() {
+        if (error == null) {
+            return null;
+        }
+
+        final String message = error.getUserFacingMessage();
+        if (message == null) {
+            return null;
+        }
+
+        return message;
+    }
+
+    @Nullable
+    private PlaceholderFragment getPlaceholderFragment(
+            final LoginFlowState state,
+            final int height,
+            final String suffix) {
+        final String prefix;
+        switch (state) {
+            case PHONE_NUMBER_INPUT:
+                prefix = "Custom Phone Number ";
+                break;
+            case EMAIL_INPUT:
+                prefix = "Custom Email ";
+                break;
+            case ACCOUNT_VERIFIED:
+                prefix = "Custom Account Verified ";
+                break;
+            case CONFIRM_ACCOUNT_VERIFIED:
+                prefix = "Custom Confirm Account Verified ";
+                break;
+            case CONFIRM_INSTANT_VERIFICATION_LOGIN:
+                prefix = "Custom Confirm Instant Verification Login ";
+                break;
+            case EMAIL_VERIFY:
+                prefix = "Custom Email Verify ";
+                break;
+            case SENDING_CODE:
+                switch (loginType) {
+                    case EMAIL:
+                        prefix = "Custom Sending Email ";
+                        break;
+                    case PHONE:
+                        prefix = "Custom Sending Code ";
+                        break;
+                    default:
+                        return null;
+                }
+                break;
+            case SENT_CODE:
+                switch (loginType) {
+                    case EMAIL:
+                        prefix = "Custom Sent Email ";
+                        break;
+                    case PHONE:
+                        prefix = "Custom Sent Code ";
+                        break;
+                    default:
+                        return null;
+                }
+                break;
+            case CODE_INPUT:
+                prefix = "Custom Code Input ";
+                break;
+            case VERIFYING_CODE:
+                prefix = "Custom Verifying ";
+                break;
+            case VERIFIED:
+                prefix = "Custom Verified ";
+                break;
+            case RESEND:
+                prefix = "Custom Resend ";
+                break;
+            case ERROR:
+                prefix = "Custom Error ";
+                break;
+            default:
+                return null;
+        }
+        return PlaceholderFragment.create(height, prefix.concat(suffix));
+    }
+
+    @Override
+    public void writeToParcel(final Parcel dest, final int flags) {
+        super.writeToParcel(dest, flags);
+        dest.writeInt(loginType.ordinal());
+        dest.writeString(confirmButton != null ? confirmButton.name() : null);
+        dest.writeString(entryButton != null ? entryButton.name() : null);
+        dest.writeString(textPosition != null ? textPosition.name() : null);
+    }
+
+    public static final Creator<AccountKitSampleAdvancedUIManager> CREATOR
+            = new Creator<AccountKitSampleAdvancedUIManager>() {
+        @Override
+        public AccountKitSampleAdvancedUIManager createFromParcel(final Parcel source) {
+            return new AccountKitSampleAdvancedUIManager(source);
+        }
+
+        @Override
+        public AccountKitSampleAdvancedUIManager[] newArray(final int size) {
+            return new AccountKitSampleAdvancedUIManager[size];
+        }
+    };
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/CodeActivity.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/CodeActivity.java
new file mode 100644
index 000000000..f679d79ff
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/CodeActivity.java
@@ -0,0 +1,88 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.facebook.accountkit.AccountKit;
+import com.facebook.samples.loginsample.R;
+
+public class CodeActivity extends Activity {
+    static final String HELLO_CODE_ACTIVITY_CODE_EXTRA = "HELLO_CODE_ACTIVITY_CODE_EXTRA";
+    static final String HELLO_CODE_ACTIVITY_FINAL_STATE_EXTRA =
+            "HELLO_CODE_ACTIVITY_FINAL_STATE_EXTRA";
+    static final String HELLO_CODE_ACTIVITY_INITIAL_STATE_EXTRA =
+            "HELLO_CODE_ACTIVITY_INITIAL_STATE_EXTRA";
+
+    @Override
+    public void onCreate(final Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_hello_code);
+
+        final String code = getIntent().getStringExtra(HELLO_CODE_ACTIVITY_CODE_EXTRA);
+        final String finalState =
+                getIntent().getStringExtra(HELLO_CODE_ACTIVITY_FINAL_STATE_EXTRA);
+        final String initialState =
+                getIntent().getStringExtra(HELLO_CODE_ACTIVITY_INITIAL_STATE_EXTRA);
+
+        if (code != null) {
+            final TextView codeView = (TextView) findViewById(R.id.code);
+            if (codeView != null) {
+                codeView.setText(code);
+            }
+        }
+
+        if (initialState != null) {
+            final TextView initialStateView = (TextView) findViewById(R.id.initial_state);
+            final TextView initialStateLabelView =
+                    (TextView) findViewById(R.id.initial_state_label);
+            if (initialStateView != null && initialStateLabelView != null) {
+                initialStateView.setText(initialState);
+                initialStateView.setVisibility(View.VISIBLE);
+                initialStateLabelView.setVisibility(View.VISIBLE);
+            }
+        }
+
+        if (finalState != null) {
+            final TextView finalStateView = (TextView) findViewById(R.id.final_state);
+            final TextView finalStateLabelView =
+                    (TextView) findViewById(R.id.final_state_label);
+            if (finalStateView != null && finalStateLabelView != null) {
+                finalStateView.setText(finalState);
+                finalStateView.setVisibility(View.VISIBLE);
+                finalStateLabelView.setVisibility(View.VISIBLE);
+            }
+        }
+
+        final Button signOut = (Button) findViewById(R.id.log_out_button);
+        signOut.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                AccountKit.logOut();
+                finish();
+            }
+        });
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ErrorActivity.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ErrorActivity.java
new file mode 100644
index 000000000..3aefa408c
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ErrorActivity.java
@@ -0,0 +1,63 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.facebook.accountkit.AccountKit;
+import com.facebook.accountkit.AccountKitError;
+import com.facebook.samples.loginsample.R;
+
+public class ErrorActivity extends Activity {
+    static final String HELLO_TOKEN_ACTIVITY_ERROR_EXTRA =
+            "HELLO_TOKEN_ACTIVITY_ERROR_EXTRA";
+
+    @Override
+    public void onCreate(final Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_error);
+
+        final Button signOut = (Button) findViewById(R.id.log_out_button);
+        signOut.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                AccountKit.logOut();
+                finish();
+            }
+        });
+
+        final AccountKitError error =
+                getIntent().getParcelableExtra(HELLO_TOKEN_ACTIVITY_ERROR_EXTRA);
+
+        final TextView errorView = (TextView) findViewById(R.id.error);
+        if (errorView != null) {
+            if (error != null) {
+                errorView.setText(error.toString());
+            } else {
+                errorView.setText(R.string.na);
+            }
+        }
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/InflateFragment.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/InflateFragment.java
new file mode 100644
index 000000000..ffe5a5241
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/InflateFragment.java
@@ -0,0 +1,62 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.annotation.TargetApi;
+import android.app.Activity;
+import android.app.Fragment;
+import android.content.Context;
+import android.os.Bundle;
+import android.util.AttributeSet;
+import com.facebook.samples.loginsample.R;
+
+@SuppressWarnings("All")
+class InflateFragment extends Fragment {
+    @TargetApi(11)
+    @Override
+    public void onInflate(final AttributeSet attrs, final Bundle savedInstanceState) {
+        super.onInflate(attrs, savedInstanceState);
+        handleAttributes(attrs);
+    }
+
+    @TargetApi(21)
+    @Override
+    public void onInflate(
+            final Activity activity,
+            final AttributeSet attrs,
+            final Bundle savedInstanceState) {
+        super.onInflate(activity, attrs, savedInstanceState);
+        handleAttributes(attrs);
+    }
+
+    @TargetApi(23)
+    @Override
+    public void onInflate(
+            final Context context,
+            final AttributeSet attrs,
+            final Bundle savedInstanceState) {
+        super.onInflate(context, attrs, savedInstanceState);
+        handleAttributes(attrs);
+    }
+
+    protected void handleAttributes(final AttributeSet attrs) {
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/PlaceholderFragment.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/PlaceholderFragment.java
new file mode 100644
index 000000000..d15c55865
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/PlaceholderFragment.java
@@ -0,0 +1,105 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Fragment;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.util.TypedValue;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+import com.facebook.samples.loginsample.R;
+
+public class PlaceholderFragment extends Fragment {
+    private static final String HEIGHT_KEY = "height";
+    private static final String TEXT_KEY = "text";
+    private static final String TEXT_RESOURCE_ID_KEY = "textResourceId";
+
+    private View.OnClickListener onClickListener;
+
+    public static PlaceholderFragment create(final int height, final String text) {
+        final PlaceholderFragment fragment = new PlaceholderFragment();
+        final Bundle arguments = new Bundle();
+        arguments.putInt(HEIGHT_KEY, height);
+        arguments.putString(TEXT_KEY, text);
+        fragment.setArguments(arguments);
+        return fragment;
+    }
+
+    public static PlaceholderFragment create(final int height, final int textResourceId) {
+        final PlaceholderFragment fragment = new PlaceholderFragment();
+        final Bundle arguments = new Bundle();
+        arguments.putInt(HEIGHT_KEY, height);
+        arguments.putInt(TEXT_RESOURCE_ID_KEY, textResourceId);
+        fragment.setArguments(arguments);
+        return fragment;
+    }
+
+    public void setOnClickListener(final View.OnClickListener onClickListener) {
+        this.onClickListener = onClickListener;
+        final View view = getView();
+        if (view != null) {
+            view.setOnClickListener(onClickListener);
+        }
+    }
+
+    @Nullable
+    @Override
+    public View onCreateView(
+            final LayoutInflater inflater,
+            final ViewGroup container,
+            @Nullable final Bundle savedInstanceState) {
+        View view = super.onCreateView(inflater, container, savedInstanceState);
+        if (view == null) {
+            view = inflater.inflate(R.layout.fragment_placeholder, container, false);
+        }
+
+        final Bundle arguments = getArguments();
+        if (arguments != null) {
+            final int height = arguments.getInt(HEIGHT_KEY, -1);
+            if (height >= 0) {
+                view.getLayoutParams().height = (int) TypedValue.applyDimension(
+                        TypedValue.COMPLEX_UNIT_DIP,
+                        height,
+                        getResources().getDisplayMetrics());
+            }
+
+            final String text = arguments.getString(TEXT_KEY);
+            final int textResourceId = arguments.getInt(TEXT_RESOURCE_ID_KEY, -1);
+            final TextView textView = (TextView) view.findViewById(R.id.text_view);
+            if (textView != null) {
+                if (text != null) {
+                    textView.setText(text);
+                } else if (textResourceId > 0) {
+                    textView.setText(textResourceId);
+                }
+            }
+        }
+
+        if (onClickListener != null) {
+            view.setOnClickListener(onClickListener);
+        }
+
+        return view;
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbBodyFragment.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbBodyFragment.java
new file mode 100644
index 000000000..b67ba4bfd
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbBodyFragment.java
@@ -0,0 +1,96 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Fragment;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import com.facebook.samples.loginsample.R;
+
+public class ReverbBodyFragment extends Fragment {
+    private static final String ICON_RESOURCE_ID_KEY = "iconResourceId";
+    private static final String SHOW_PROGRESS_SPINNER_KEY = "showProgressSpinner";
+
+    private int iconResourceId = 0;
+    private boolean showProgressSpinner;
+
+    public void setIconResourceId(final int iconResourceId) {
+        this.iconResourceId = iconResourceId;
+        updateIcon(getView());
+    }
+
+    public void setShowProgressSpinner(final boolean showProgressSpinner) {
+        this.showProgressSpinner = showProgressSpinner;
+        updateIcon(getView());
+    }
+
+    public View onCreateView(
+            final LayoutInflater inflater,
+            final ViewGroup container,
+            final Bundle savedInstanceState) {
+        if (savedInstanceState != null) {
+            iconResourceId = savedInstanceState.getInt(ICON_RESOURCE_ID_KEY, iconResourceId);
+            showProgressSpinner = savedInstanceState.getBoolean(
+                    SHOW_PROGRESS_SPINNER_KEY,
+                    showProgressSpinner);
+        }
+
+        View view = super.onCreateView(inflater, container, savedInstanceState);
+        if (view == null) {
+            view = inflater.inflate(R.layout.fragment_reverb_body, container, false);
+        }
+        updateIcon(view);
+        return view;
+    }
+
+    @Override
+    public void onSaveInstanceState(final Bundle outState) {
+        super.onSaveInstanceState(outState);
+
+        outState.putInt(ICON_RESOURCE_ID_KEY, iconResourceId);
+        outState.putBoolean(SHOW_PROGRESS_SPINNER_KEY, showProgressSpinner);
+    }
+
+    private void updateIcon(@Nullable final View view) {
+        if (view == null) {
+            return;
+        }
+
+        final View progressSpinner = view.findViewById(R.id.reverb_progress_spinner);
+        if (progressSpinner != null) {
+            progressSpinner.setVisibility(showProgressSpinner ? View.VISIBLE : View.GONE);
+        }
+
+        final ImageView iconView = (ImageView) view.findViewById(R.id.reverb_icon);
+        if (iconView != null) {
+            if (iconResourceId > 0) {
+                iconView.setImageResource(iconResourceId);
+                iconView.setVisibility(View.VISIBLE);
+            } else {
+                iconView.setVisibility(View.GONE);
+            }
+        }
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbFooterFragment.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbFooterFragment.java
new file mode 100644
index 000000000..e6ea9402b
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbFooterFragment.java
@@ -0,0 +1,175 @@
+/*
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Fragment;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+
+import com.facebook.accountkit.ui.LoginType;
+import com.facebook.samples.loginsample.R;
+
+public class ReverbFooterFragment extends Fragment {
+    private static final String LOGIN_TYPE_KEY = "loginType";
+    private static final String PROGRESS_KEY = "progress";
+    private static final String PROGRESS_TYPE_KEY = "progressType";
+
+    public enum ProgressType {
+        BAR,
+        DOTS,
+    }
+
+    public interface OnSwitchLoginTypeListener {
+        void onSwitchLoginType();
+    }
+
+    private LoginType loginType;
+    private OnSwitchLoginTypeListener onSwitchLoginTypeListener;
+    private int progress = 0;
+    private ProgressType progressType = ProgressType.BAR;
+
+    public void setLoginType(final LoginType loginType) {
+        if (loginType == null) {
+            return;
+        }
+        this.loginType = loginType;
+        updateButtonText(getView());
+    }
+
+    public void setOnSwitchLoginTypeListener(
+            final OnSwitchLoginTypeListener onSwitchLoginTypeListener) {
+        this.onSwitchLoginTypeListener = onSwitchLoginTypeListener;
+        updateSwitchLoginTypeListener(getView());
+    }
+
+    public void setProgress(final int progress) {
+        this.progress = progress;
+        updateProgress(getView());
+    }
+
+    public void setProgressType(final ProgressType progressType) {
+        if (progressType == null) {
+            return;
+        }
+        this.progressType = progressType;
+    }
+
+    public View onCreateView(
+            final LayoutInflater inflater,
+            final ViewGroup container,
+            final Bundle savedInstanceState) {
+        if (savedInstanceState != null) {
+            final String loginTypeString = savedInstanceState.getString(LOGIN_TYPE_KEY);
+            loginType = loginTypeString == null ? loginType : LoginType.valueOf(loginTypeString);
+            progress = savedInstanceState.getInt(PROGRESS_KEY, progress);
+            final String progressTypeString = savedInstanceState.getString(PROGRESS_TYPE_KEY);
+            progressType = progressTypeString == null
+                    ? progressType
+                    : ProgressType.valueOf(progressTypeString);
+        }
+
+        View view = super.onCreateView(inflater, container, savedInstanceState);
+        if (view == null) {
+            final int layoutResourceId;
+            switch (progressType) {
+                case DOTS:
+                    layoutResourceId = R.layout.fragment_reverb_footer_dots;
+                    break;
+                case BAR:
+                default:
+                    layoutResourceId = R.layout.fragment_reverb_footer_bar;
+                    break;
+            }
+            view = inflater.inflate(layoutResourceId, container, false);
+        }
+        updateButtonText(view);
+        updateProgress(view);
+        updateSwitchLoginTypeListener(view);
+        return view;
+    }
+
+    @Override
+    public void onSaveInstanceState(final Bundle outState) {
+        super.onSaveInstanceState(outState);
+
+        outState.putString(LOGIN_TYPE_KEY, loginType == null ? null : loginType.name());
+        outState.putInt(PROGRESS_KEY, progress);
+        outState.putString(PROGRESS_TYPE_KEY, progressType.name());
+    }
+
+    private void updateButtonText(@Nullable final View view) {
+        if (view == null) {
+            return;
+        }
+        final TextView switchLoginTypeButton
+                = (TextView) view.findViewById(R.id.switch_login_type_button);
+        if (switchLoginTypeButton == null) {
+            return;
+        }
+        if (loginType == null) {
+            switchLoginTypeButton.setVisibility(View.GONE);
+            return;
+        }
+        switch (loginType) {
+            case EMAIL:
+                switchLoginTypeButton.setText(R.string.reverb_switch_login_type_phone);
+                break;
+            case PHONE:
+                switchLoginTypeButton.setText(R.string.reverb_switch_login_type_email);
+                break;
+        }
+        switchLoginTypeButton.setVisibility(View.VISIBLE);
+    }
+
+    private void updateProgress(@Nullable final View view) {
+        if (view == null) {
+            return;
+        }
+
+        final ProgressBar progressBar = (ProgressBar) view.findViewById(R.id.reverb_progress_bar);
+        if (progressBar != null) {
+            progressBar.setProgress(progress);
+        }
+    }
+
+    private void updateSwitchLoginTypeListener(@Nullable final View view) {
+        if (view == null || onSwitchLoginTypeListener == null) {
+            return;
+        }
+        final View switchLoginTypeButton = view.findViewById(R.id.switch_login_type_button);
+        if (switchLoginTypeButton == null) {
+            return;
+        }
+        switchLoginTypeButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(final View v) {
+                if (onSwitchLoginTypeListener != null) {
+                    onSwitchLoginTypeListener.onSwitchLoginType();
+                }
+            }
+        });
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbUIManager.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbUIManager.java
new file mode 100644
index 000000000..6c16f42e0
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/ReverbUIManager.java
@@ -0,0 +1,251 @@
+/*
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Activity;
+import android.app.Fragment;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Parcel;
+import android.support.annotation.Nullable;
+import android.support.v4.content.LocalBroadcastManager;
+
+import com.facebook.accountkit.ui.BaseUIManager;
+import com.facebook.accountkit.ui.ButtonType;
+import com.facebook.accountkit.ui.LoginFlowState;
+import com.facebook.accountkit.ui.LoginType;
+import com.facebook.accountkit.ui.TextPosition;
+import com.facebook.samples.loginsample.R;
+
+public class ReverbUIManager extends BaseUIManager {
+    public static final String LOGIN_TYPE_EXTRA = "loginType";
+    public static final String SWITCH_LOGIN_TYPE_EVENT = "switch-login-type";
+
+    private final ButtonType confirmButton;
+    private final ButtonType entryButton;
+    private final LoginType loginType;
+    private final TextPosition textPosition;
+
+    public ReverbUIManager(
+            final ButtonType confirmButton,
+            final ButtonType entryButton,
+            final LoginType loginType,
+            final TextPosition textPosition,
+            final int themeResourceId) {
+        super(themeResourceId);
+        this.confirmButton = confirmButton;
+        this.entryButton = entryButton;
+        this.loginType = loginType;
+        this.textPosition = textPosition;
+    }
+
+    private ReverbUIManager(final Parcel source) {
+        super(source);
+        this.loginType = LoginType.values()[source.readInt()];
+        String s = source.readString();
+        final ButtonType confirmButton = s == null ? null : ButtonType.valueOf(s);
+        s = source.readString();
+        final ButtonType entryButton = s == null ? null : ButtonType.valueOf(s);
+        s = source.readString();
+        final TextPosition textPosition = s == null ? null : TextPosition.valueOf(s);
+        this.confirmButton = confirmButton;
+        this.entryButton = entryButton;
+        this.textPosition = textPosition;
+    }
+
+    @Override
+    @Nullable
+    public Fragment getBodyFragment(final LoginFlowState state) {
+        int iconResourceId = 0;
+        boolean showProgressSpinner = false;
+        switch (state) {
+            case SENDING_CODE:
+                showProgressSpinner = true;
+                break;
+            case SENT_CODE:
+                switch (loginType) {
+                    case EMAIL:
+                        iconResourceId = R.drawable.reverb_email;
+                        break;
+                    case PHONE:
+                        iconResourceId = R.drawable.reverb_progress_complete;
+                        break;
+                }
+                break;
+            case EMAIL_VERIFY:
+                iconResourceId = R.drawable.reverb_email_sent;
+                break;
+            case VERIFYING_CODE:
+            case CONFIRM_INSTANT_VERIFICATION_LOGIN:
+                showProgressSpinner = true;
+                break;
+            case VERIFIED:
+                iconResourceId = R.drawable.reverb_progress_complete;
+                break;
+            case ERROR:
+                iconResourceId = R.drawable.reverb_error;
+                break;
+            case PHONE_NUMBER_INPUT:
+            case EMAIL_INPUT:
+            case CODE_INPUT:
+            case CONFIRM_ACCOUNT_VERIFIED:
+            case RESEND:
+            case NONE:
+            default:
+                return null;
+        }
+        final ReverbBodyFragment fragment = new ReverbBodyFragment();
+        fragment.setIconResourceId(iconResourceId);
+        fragment.setShowProgressSpinner(showProgressSpinner);
+        return fragment;
+    }
+
+    @Override
+    @Nullable
+    public ButtonType getButtonType(final LoginFlowState state) {
+        switch (state) {
+            case PHONE_NUMBER_INPUT:
+            case EMAIL_INPUT:
+                return entryButton;
+            case CODE_INPUT:
+            case CONFIRM_ACCOUNT_VERIFIED:
+                return confirmButton;
+            default:
+                return null;
+        }
+    }
+
+    @Override
+    @Nullable
+    public Fragment getFooterFragment(final LoginFlowState state) {
+        final int progress;
+        switch (state) {
+            case PHONE_NUMBER_INPUT:
+            case EMAIL_INPUT:
+                progress = 1;
+                break;
+            case SENDING_CODE:
+            case SENT_CODE:
+                progress = 2;
+                break;
+            case CODE_INPUT:
+            case EMAIL_VERIFY:
+            case CONFIRM_ACCOUNT_VERIFIED:
+                progress = 3;
+                break;
+            case VERIFYING_CODE:
+            case CONFIRM_INSTANT_VERIFICATION_LOGIN:
+                progress = 4;
+                break;
+            case VERIFIED:
+                progress = 5;
+                break;
+            case RESEND:
+            case ERROR:
+            case NONE:
+            default:
+                return null;
+        }
+        final ReverbFooterFragment fragment = new ReverbFooterFragment();
+        if (progress == 1) {
+            fragment.setLoginType(loginType);
+            fragment.setOnSwitchLoginTypeListener(
+                    new ReverbFooterFragment.OnSwitchLoginTypeListener() {
+                        @Override
+                        public void onSwitchLoginType() {
+                            if (listener == null) {
+                                return;
+                            }
+
+                            listener.onCancel();
+
+                            final Activity activity = fragment.getActivity();
+                            if (activity == null) {
+                                return;
+                            }
+                            final Context applicationContext = activity.getApplicationContext();
+                            final LoginType newLoginType;
+                            switch (loginType) {
+                                case EMAIL:
+                                    newLoginType = LoginType.PHONE;
+                                    break;
+                                case PHONE:
+                                    newLoginType = LoginType.EMAIL;
+                                    break;
+                                default:
+                                    return;
+                            }
+                            LocalBroadcastManager
+                                    .getInstance(applicationContext)
+                                    .sendBroadcast(new Intent(SWITCH_LOGIN_TYPE_EVENT)
+                                            .putExtra(LOGIN_TYPE_EXTRA, newLoginType.name()));
+                        }
+                    });
+        }
+        if (getThemeId() == R.style.AppLoginTheme_Reverb_A) {
+            fragment.setProgressType(ReverbFooterFragment.ProgressType.BAR);
+        } else if (getThemeId() == R.style.AppLoginTheme_Reverb_B
+                || getThemeId() == R.style.AppLoginTheme_Reverb_C) {
+            fragment.setProgressType(ReverbFooterFragment.ProgressType.DOTS);
+        }
+        fragment.setProgress(progress);
+        return fragment;
+    }
+
+    @Override
+    @Nullable
+    public Fragment getHeaderFragment(final LoginFlowState state) {
+        if (state == LoginFlowState.ERROR) {
+            return null;
+        } else {
+            return SpaceFragment.create(
+                    R.styleable.Theme_AccountKitSample_Style_reverb_content_margin_top);
+        }
+    }
+
+    @Override
+    @Nullable
+    public TextPosition getTextPosition(final LoginFlowState state) {
+        return textPosition == null ? TextPosition.ABOVE_BODY : textPosition;
+    }
+
+    @Override
+    public void writeToParcel(final Parcel dest, final int flags) {
+        super.writeToParcel(dest, flags);
+        dest.writeInt(loginType.ordinal());
+        dest.writeString(confirmButton != null ? confirmButton.name() : null);
+        dest.writeString(entryButton != null ? entryButton.name() : null);
+        dest.writeString(textPosition != null ? textPosition.name() : null);
+    }
+
+    public static final Creator<ReverbUIManager> CREATOR
+            = new Creator<ReverbUIManager>() {
+        @Override
+        public ReverbUIManager createFromParcel(final Parcel source) {
+            return new ReverbUIManager(source);
+        }
+
+        @Override
+        public ReverbUIManager[] newArray(final int size) {
+            return new ReverbUIManager[size];
+        }
+    };
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/SpaceFragment.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/SpaceFragment.java
new file mode 100644
index 000000000..9f28c34da
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/SpaceFragment.java
@@ -0,0 +1,93 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Activity;
+import android.content.res.TypedArray;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.util.AttributeSet;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import com.facebook.samples.loginsample.R;
+
+public class SpaceFragment extends InflateFragment {
+
+    private static final String HEIGHT_ATTRIBUTE_KEY = "heightAttribute";
+
+    private AttributeSet attributes;
+
+    public static SpaceFragment create(final int heightAttribute) {
+        final SpaceFragment fragment = new SpaceFragment();
+        final Bundle arguments = new Bundle();
+        arguments.putInt(HEIGHT_ATTRIBUTE_KEY, heightAttribute);
+        fragment.setArguments(arguments);
+        return fragment;
+    }
+
+    @Nullable
+    @Override
+    public View onCreateView(
+            final LayoutInflater inflater,
+            final ViewGroup container,
+            final Bundle savedInstanceState) {
+        View view = super.onCreateView(inflater, container, savedInstanceState);
+        if (view == null) {
+            view = inflater.inflate(R.layout.fragment_space, container, false);
+        }
+        updateHeight(view);
+        return view;
+    }
+
+    @Override
+    protected void handleAttributes(final AttributeSet attrs) {
+        attributes = attrs;
+        updateHeight(getView());
+    }
+
+    private void updateHeight(final View view) {
+        if (view == null) {
+            return;
+        }
+        final Activity activity = getActivity();
+        if (activity == null) {
+            return;
+        }
+
+        final Bundle arguments = getArguments();
+        if (arguments == null) {
+            return;
+        }
+
+        final int heightAttribute = arguments.getInt(HEIGHT_ATTRIBUTE_KEY, -1);
+        if (heightAttribute >= 0) {
+            final TypedArray a = activity.obtainStyledAttributes(
+                    attributes,
+                    R.styleable.Theme_AccountKitSample_Style);
+            final int heightAttributeValue = a.getDimensionPixelSize(heightAttribute, -1);
+            a.recycle();
+            if (heightAttributeValue >= 0) {
+                view.getLayoutParams().height = heightAttributeValue;
+            }
+        }
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/TokenActivity.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/TokenActivity.java
new file mode 100644
index 000000000..908b8a457
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/accountkit/TokenActivity.java
@@ -0,0 +1,107 @@
+/*
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.accountkit;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.TextView;
+
+import com.facebook.accountkit.Account;
+import com.facebook.accountkit.AccountKit;
+import com.facebook.accountkit.AccountKitCallback;
+import com.facebook.accountkit.AccountKitError;
+import com.facebook.accountkit.PhoneNumber;
+import com.facebook.samples.loginsample.R;
+
+public class TokenActivity extends Activity {
+    static final String HELLO_TOKEN_ACTIVITY_FINAL_STATE_EXTRA =
+            "HELLO_TOKEN_ACTIVITY_FINAL_STATE_EXTRA";
+    static final String HELLO_TOKEN_ACTIVITY_INITIAL_STATE_EXTRA =
+            "HELLO_TOKEN_ACTIVITY_INITIAL_STATE_EXTRA";
+
+    @Override
+    public void onCreate(final Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_hello_token);
+
+        final Button signOut = (Button) findViewById(R.id.log_out_button);
+        signOut.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                AccountKit.logOut();
+                finish();
+            }
+        });
+
+        final String finalState =
+                getIntent().getStringExtra(HELLO_TOKEN_ACTIVITY_FINAL_STATE_EXTRA);
+        final String initialState =
+                getIntent().getStringExtra(HELLO_TOKEN_ACTIVITY_INITIAL_STATE_EXTRA);
+
+        if (initialState != null) {
+            final TextView initialStateView = (TextView) findViewById(R.id.initial_state);
+            final TextView initialStateLabelView =
+                    (TextView) findViewById(R.id.initial_state_label);
+            if (initialStateView != null && initialStateLabelView != null) {
+                initialStateView.setText(initialState);
+                initialStateView.setVisibility(View.VISIBLE);
+                initialStateLabelView.setVisibility(View.VISIBLE);
+            }
+        }
+
+        if (finalState != null) {
+            final TextView finalStateView = (TextView) findViewById(R.id.final_state);
+            final TextView finalStateLabelView =
+                    (TextView) findViewById(R.id.final_state_label);
+            if (finalStateView != null && finalStateLabelView != null) {
+                finalStateView.setText(finalState);
+                finalStateView.setVisibility(View.VISIBLE);
+                finalStateLabelView.setVisibility(View.VISIBLE);
+            }
+        }
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+
+        AccountKit.getCurrentAccount(new AccountKitCallback<Account>() {
+            @Override
+            public void onSuccess(final Account account) {
+                final TextView userId = (TextView) findViewById(R.id.user_id);
+                userId.setText(account.getId());
+
+                final TextView phoneNumber = (TextView) findViewById(R.id.user_phone);
+                final PhoneNumber number = account.getPhoneNumber();
+                phoneNumber.setText(number == null ? null : number.toString());
+
+                final TextView email = (TextView) findViewById(R.id.user_email);
+                email.setText(account.getEmail());
+            }
+
+            @Override
+            public void onError(final AccountKitError error) {
+            }
+        });
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/facebook/FacebookLoginActivity.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/facebook/FacebookLoginActivity.java
new file mode 100644
index 000000000..7ba24c86b
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/facebook/FacebookLoginActivity.java
@@ -0,0 +1,226 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.facebook;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
+import android.view.View;
+import android.widget.Button;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.facebook.AccessToken;
+import com.facebook.CallbackManager;
+import com.facebook.FacebookCallback;
+import com.facebook.FacebookException;
+import com.facebook.GraphRequest;
+import com.facebook.GraphResponse;
+import com.facebook.HttpMethod;
+import com.facebook.Profile;
+import com.facebook.ProfileTracker;
+import com.facebook.login.DefaultAudience;
+import com.facebook.login.LoginManager;
+import com.facebook.login.LoginResult;
+import com.facebook.login.widget.LoginButton;
+import com.facebook.login.widget.ProfilePictureView;
+import com.facebook.samples.loginsample.R;
+
+import org.json.JSONException;
+
+public class FacebookLoginActivity extends AppCompatActivity {
+
+    private static final String GRAPH_PATH = "me/permissions";
+    private static final String SUCCESS = "success";
+
+    private static final int PICK_PERMS_REQUEST = 0;
+
+    private CallbackManager callbackManager;
+
+    private ProfilePictureView profilePictureView;
+    private TextView userNameView;
+    private LoginButton fbLoginButton;
+
+    @Override
+    protected void onCreate(final Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_facebook_login);
+
+        callbackManager = CallbackManager.Factory.create();
+
+        fbLoginButton = (LoginButton) findViewById(R.id._fb_login);
+        profilePictureView = (ProfilePictureView) findViewById(R.id.user_pic);
+        profilePictureView.setCropped(true);
+
+        userNameView = (TextView) findViewById(R.id.user_name);
+
+        final Button deAuthButton = (Button) findViewById(R.id.deauth);
+        deAuthButton.setOnClickListener(new View.OnClickListener() {
+            public void onClick(View v) {
+                if (!isLoggedIn()) {
+                    Toast.makeText(
+                            FacebookLoginActivity.this,
+                            R.string.app_not_logged_in,
+                            Toast.LENGTH_LONG).show();
+                    return;
+                }
+                GraphRequest.Callback callback = new GraphRequest.Callback() {
+                    @Override
+                    public void onCompleted(GraphResponse response) {
+                        try {
+                            if(response.getError() != null) {
+                                Toast.makeText(
+                                        FacebookLoginActivity.this,
+                                        getResources().getString(
+                                                R.string.failed_to_deauth,
+                                                response.toString()),
+                                        Toast.LENGTH_LONG
+                                ).show();
+                            }
+                            else if (response.getJSONObject().getBoolean(SUCCESS)) {
+                                LoginManager.getInstance().logOut();
+                                // updateUI();?
+                            }
+                        } catch (JSONException ex) { /* no op */ }
+                    }
+                };
+                GraphRequest request = new GraphRequest(AccessToken.getCurrentAccessToken(),
+                        GRAPH_PATH, new Bundle(), HttpMethod.DELETE, callback);
+                request.executeAsync();
+            }
+        });
+
+        final Button permsButton = (Button) findViewById(R.id.perms);
+        permsButton.setOnClickListener(new View.OnClickListener() {
+            public void onClick(final View v) {
+                Intent selectPermsIntent =
+                        new Intent(FacebookLoginActivity.this, PermissionSelectActivity.class);
+                startActivityForResult(selectPermsIntent, PICK_PERMS_REQUEST);
+            }
+        });
+
+        // Callback registration
+        fbLoginButton.registerCallback(callbackManager, new FacebookCallback<LoginResult>() {
+            @Override
+            public void onSuccess(final LoginResult loginResult) {
+                // App code
+                Toast.makeText(
+                        FacebookLoginActivity.this,
+                        R.string.success,
+                        Toast.LENGTH_LONG).show();
+                updateUI();
+            }
+
+            @Override
+            public void onCancel() {
+                // App code
+                Toast.makeText(
+                        FacebookLoginActivity.this,
+                        R.string.cancel,
+                        Toast.LENGTH_LONG).show();
+            }
+
+            @Override
+            public void onError(final FacebookException exception) {
+                // App code
+                Toast.makeText(
+                        FacebookLoginActivity.this,
+                        R.string.error,
+                        Toast.LENGTH_LONG).show();
+            }
+        });
+
+        new ProfileTracker() {
+            @Override
+            protected void onCurrentProfileChanged(
+                    final Profile oldProfile,
+                    final Profile currentProfile) {
+                updateUI();
+            }
+        };
+    }
+
+    private boolean isLoggedIn() {
+        AccessToken accesstoken = AccessToken.getCurrentAccessToken();
+        return !(accesstoken == null || accesstoken.getPermissions().isEmpty());
+    }
+
+    private void updateUI() {
+        Profile profile = Profile.getCurrentProfile();
+        if (profile != null) {
+            profilePictureView.setProfileId(profile.getId());
+            userNameView
+                    .setText(String.format("%s %s",profile.getFirstName(), profile.getLastName()));
+        } else {
+            profilePictureView.setProfileId(null);
+            userNameView.setText(getString(R.string.welcome));
+        }
+    }
+
+    @Override
+    protected void onActivityResult(
+            final int requestCode,
+            final int resultCode,
+            final Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        if(requestCode == PICK_PERMS_REQUEST) {
+            if(resultCode == RESULT_OK) {
+                String[] readPermsArr = data
+                        .getStringArrayExtra(PermissionSelectActivity.EXTRA_SELECTED_READ_PARAMS);
+                String writePrivacy = data
+                        .getStringExtra(PermissionSelectActivity.EXTRA_SELECTED_WRITE_PRIVACY);
+                String[] publishPermsArr = data
+                        .getStringArrayExtra(
+                                PermissionSelectActivity.EXTRA_SELECTED_PUBLISH_PARAMS);
+
+                fbLoginButton.clearPermissions();
+
+                if (readPermsArr != null) {
+                    if(readPermsArr.length > 0) {
+                        fbLoginButton.setReadPermissions(readPermsArr);
+                    }
+                }
+
+                if ((readPermsArr == null ||
+                        readPermsArr.length == 0) &&
+                        publishPermsArr != null) {
+                    if(publishPermsArr.length > 0) {
+                        fbLoginButton.setPublishPermissions(publishPermsArr);
+                    }
+                }
+                // Set write privacy for the user
+                if ((writePrivacy != null)) {
+                    DefaultAudience audience;
+                    if (DefaultAudience.EVERYONE.toString().equals(writePrivacy)) {
+                        audience = DefaultAudience.EVERYONE;
+                    } else if (DefaultAudience.FRIENDS.toString().equals(writePrivacy)) {
+                        audience = DefaultAudience.FRIENDS;
+                    } else {
+                        audience = DefaultAudience.ONLY_ME;
+                    }
+                    fbLoginButton.setDefaultAudience(audience);
+                }
+            }
+        } else {
+            callbackManager.onActivityResult(requestCode, resultCode, data);
+        }
+    }
+}
diff --git a/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/facebook/PermissionSelectActivity.java b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/facebook/PermissionSelectActivity.java
new file mode 100644
index 000000000..ee7db339c
--- /dev/null
+++ b/samples/LoginSample/src/main/java/com/facebook/samples/loginsample/facebook/PermissionSelectActivity.java
@@ -0,0 +1,120 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample.facebook;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.util.SparseBooleanArray;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.widget.ArrayAdapter;
+import android.widget.Button;
+import android.widget.ListView;
+import com.facebook.login.DefaultAudience;
+import com.facebook.samples.loginsample.R;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.Set;
+
+public class PermissionSelectActivity extends Activity implements OnClickListener{
+
+    public static final String TAG = PermissionSelectActivity.class.getSimpleName();
+
+    public static final String EXTRA_SELECTED_READ_PARAMS = TAG + ".selectedReadPerms";
+    public static final String EXTRA_SELECTED_WRITE_PRIVACY = TAG + ".selectedWritePrivacy";
+    public static final String EXTRA_SELECTED_PUBLISH_PARAMS = TAG + ".selectedPublishPerms";
+
+    // Permissions
+    public static String PUBLISH_ACTIONS = "publish_actions";
+    public static String PUBLISH_CHECKINS = "publish_checkins";
+    public static String ADS_MANAGEMENT = "ads_management";
+    public static String CREATE_EVENT = "create_event";
+    public static String MANAGE_FRIENDLISTS = "manage_friendlists";
+    public static String MANAGE_NOTIFICATIONS = "manage_notifications";
+    public static String MANAGE_PAGES = "manage_pages";
+    public static String RSVP_EVENT = "rsvp_event";
+
+    public static final Set<String> PUBLISH_PERMS_LIST = new HashSet<>(Arrays.asList(
+            PUBLISH_ACTIONS,
+            PUBLISH_CHECKINS,
+            ADS_MANAGEMENT,
+            CREATE_EVENT,
+            MANAGE_FRIENDLISTS,
+            MANAGE_NOTIFICATIONS,
+            MANAGE_PAGES,
+            RSVP_EVENT));
+
+    Button button;
+    ListView listView;
+    ArrayAdapter<String> adapter;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.list_perms_new);
+        listView = (ListView) findViewById(R.id.list);
+        button = (Button) findViewById(R.id.confirm);
+        String[] perms = getResources().getStringArray(R.array.perms_array);
+
+        adapter = new ArrayAdapter<>(this,
+                android.R.layout.simple_list_item_multiple_choice, perms);
+        listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
+        listView.setAdapter(adapter);
+        button.setOnClickListener(this);
+    }
+
+    public void onClick(View v) {
+        SparseBooleanArray checked = listView.getCheckedItemPositions();
+        ArrayList<String> readPerms = new ArrayList<>();
+        String writePri = null;
+        ArrayList<String> publishPerms = new ArrayList<>();
+        for (int i = 0; i < checked.size(); i++) {
+            // Item position in adapter
+            int position = checked.keyAt(i);
+            // Add perm only if checked
+            if (checked.valueAt(i)){
+                String checkedItem = adapter.getItem(position);
+                if (DefaultAudience.EVERYONE.toString().equals(checkedItem)) {
+                    writePri = "EVERYONE";
+                } else if (DefaultAudience.FRIENDS.toString().equals(checkedItem)) {
+                    writePri = "FRIENDS";
+                } else if (DefaultAudience.ONLY_ME.toString().equals(checkedItem)) {
+                    writePri = "ONLY_ME";
+                } else if ((PUBLISH_PERMS_LIST).contains(checkedItem)) {
+                    publishPerms.add(checkedItem);
+                } else
+                    readPerms.add(checkedItem);
+            }
+        }
+
+        String[] readPermsArr = readPerms.toArray(new String[readPerms.size()]);
+        String[] publishPermsArr = publishPerms.toArray(new String[publishPerms.size()]);
+        Intent intent=new Intent();
+        intent.putExtra(EXTRA_SELECTED_READ_PARAMS, readPermsArr);
+        intent.putExtra(EXTRA_SELECTED_WRITE_PRIVACY, writePri);
+        intent.putExtra(EXTRA_SELECTED_PUBLISH_PARAMS, publishPermsArr);
+        setResult(RESULT_OK, intent);
+        finish();
+    }
+}
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/bicycle.jpg b/samples/LoginSample/src/main/res/drawable-hdpi/bicycle.jpg
new file mode 100644
index 000000000..f9793bcec
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/bicycle.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/dog.jpg b/samples/LoginSample/src/main/res/drawable-hdpi/dog.jpg
new file mode 100644
index 000000000..87d1c8011
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/dog.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_arrow_purple.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_arrow_purple.png
new file mode 100644
index 000000000..d257e4801
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_arrow_purple.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_arrow_white.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_arrow_white.png
new file mode 100644
index 000000000..2b5fe5946
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_arrow_white.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_checkmark.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_checkmark.png
new file mode 100644
index 000000000..c03233229
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_checkmark.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_email.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_email.png
new file mode 100644
index 000000000..dc2ffbd70
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_email.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_email_sent.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_email_sent.png
new file mode 100644
index 000000000..fe4a768f2
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_email_sent.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_error.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_error.png
new file mode 100644
index 000000000..b4e8ef844
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_error.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_icon.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_icon.png
new file mode 100644
index 000000000..ae2b9c625
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_icon.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_progress_ring.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_progress_ring.png
new file mode 100644
index 000000000..415b3b283
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_progress_ring.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_rating_bar_selected.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_rating_bar_selected.png
new file mode 100644
index 000000000..3271014a5
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_rating_bar_selected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-hdpi/reverb_rating_bar_unselected.png b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_rating_bar_unselected.png
new file mode 100644
index 000000000..f0dae891a
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-hdpi/reverb_rating_bar_unselected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/bicycle.jpg b/samples/LoginSample/src/main/res/drawable-mdpi/bicycle.jpg
new file mode 100644
index 000000000..aefd987f6
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/bicycle.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/dog.jpg b/samples/LoginSample/src/main/res/drawable-mdpi/dog.jpg
new file mode 100644
index 000000000..3d5437852
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/dog.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_arrow_purple.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_arrow_purple.png
new file mode 100644
index 000000000..7bff78a4c
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_arrow_purple.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_arrow_white.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_arrow_white.png
new file mode 100644
index 000000000..317eb1e35
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_arrow_white.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_checkmark.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_checkmark.png
new file mode 100644
index 000000000..6ec8827b8
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_checkmark.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_email.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_email.png
new file mode 100644
index 000000000..0c1a77a8c
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_email.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_email_sent.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_email_sent.png
new file mode 100644
index 000000000..56ff2acd2
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_email_sent.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_error.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_error.png
new file mode 100644
index 000000000..31ffdbb8d
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_error.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_icon.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_icon.png
new file mode 100644
index 000000000..413dacb18
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_icon.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_progress_ring.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_progress_ring.png
new file mode 100644
index 000000000..1cc00e784
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_progress_ring.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_rating_bar_selected.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_rating_bar_selected.png
new file mode 100644
index 000000000..2fc152447
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_rating_bar_selected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-mdpi/reverb_rating_bar_unselected.png b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_rating_bar_unselected.png
new file mode 100644
index 000000000..128c70666
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-mdpi/reverb_rating_bar_unselected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/bicycle.jpg b/samples/LoginSample/src/main/res/drawable-xhdpi/bicycle.jpg
new file mode 100644
index 000000000..542ad35f1
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/bicycle.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/dog.jpg b/samples/LoginSample/src/main/res/drawable-xhdpi/dog.jpg
new file mode 100644
index 000000000..16170ddf8
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/dog.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_arrow_purple.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_arrow_purple.png
new file mode 100644
index 000000000..ae1e819c9
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_arrow_purple.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_arrow_white.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_arrow_white.png
new file mode 100644
index 000000000..607f8af4e
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_arrow_white.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_checkmark.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_checkmark.png
new file mode 100644
index 000000000..daf155d69
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_checkmark.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_email.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_email.png
new file mode 100644
index 000000000..813db5112
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_email.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_email_sent.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_email_sent.png
new file mode 100644
index 000000000..144c1cbc5
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_email_sent.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_error.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_error.png
new file mode 100644
index 000000000..27c4c9ba7
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_error.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_icon.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_icon.png
new file mode 100644
index 000000000..d3bb03e90
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_icon.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_progress_ring.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_progress_ring.png
new file mode 100644
index 000000000..e76c5152a
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_progress_ring.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_rating_bar_selected.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_rating_bar_selected.png
new file mode 100644
index 000000000..0ebd0c33d
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_rating_bar_selected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_rating_bar_unselected.png b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_rating_bar_unselected.png
new file mode 100644
index 000000000..cae2f159f
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xhdpi/reverb_rating_bar_unselected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/bicycle.jpg b/samples/LoginSample/src/main/res/drawable-xxhdpi/bicycle.jpg
new file mode 100644
index 000000000..a029a356a
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/bicycle.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/dog.jpg b/samples/LoginSample/src/main/res/drawable-xxhdpi/dog.jpg
new file mode 100644
index 000000000..81b3ee646
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/dog.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_arrow_purple.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_arrow_purple.png
new file mode 100644
index 000000000..965439d33
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_arrow_purple.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_arrow_white.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_arrow_white.png
new file mode 100644
index 000000000..d6491c11a
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_arrow_white.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_checkmark.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_checkmark.png
new file mode 100644
index 000000000..7ac4d4328
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_checkmark.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_email.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_email.png
new file mode 100644
index 000000000..d6906ad31
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_email.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_email_sent.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_email_sent.png
new file mode 100644
index 000000000..d634b90d5
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_email_sent.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_error.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_error.png
new file mode 100644
index 000000000..4c5ff33f0
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_error.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_icon.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_icon.png
new file mode 100644
index 000000000..cf2889df9
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_icon.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_progress_ring.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_progress_ring.png
new file mode 100644
index 000000000..cd1af3e94
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_progress_ring.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_rating_bar_selected.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_rating_bar_selected.png
new file mode 100644
index 000000000..498cb9786
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_rating_bar_selected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_rating_bar_unselected.png b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_rating_bar_unselected.png
new file mode 100644
index 000000000..5956cb39b
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxhdpi/reverb_rating_bar_unselected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/bicycle.jpg b/samples/LoginSample/src/main/res/drawable-xxxhdpi/bicycle.jpg
new file mode 100644
index 000000000..5e0c6c8c2
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/bicycle.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/dog.jpg b/samples/LoginSample/src/main/res/drawable-xxxhdpi/dog.jpg
new file mode 100644
index 000000000..8ee6d7166
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/dog.jpg differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_arrow_purple.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_arrow_purple.png
new file mode 100644
index 000000000..415d397ba
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_arrow_purple.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_arrow_white.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_arrow_white.png
new file mode 100644
index 000000000..f68850d93
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_arrow_white.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_checkmark.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_checkmark.png
new file mode 100644
index 000000000..694f511eb
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_checkmark.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_email.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_email.png
new file mode 100644
index 000000000..b76b5c2d9
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_email.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_email_sent.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_email_sent.png
new file mode 100644
index 000000000..6a0559955
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_email_sent.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_error.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_error.png
new file mode 100644
index 000000000..fa6ac722a
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_error.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_icon.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_icon.png
new file mode 100644
index 000000000..c59f539fb
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_icon.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_progress_ring.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_progress_ring.png
new file mode 100644
index 000000000..cce40d2dd
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_progress_ring.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_rating_bar_selected.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_rating_bar_selected.png
new file mode 100644
index 000000000..2db4d892b
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_rating_bar_selected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_rating_bar_unselected.png b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_rating_bar_unselected.png
new file mode 100644
index 000000000..84ff81eb7
Binary files /dev/null and b/samples/LoginSample/src/main/res/drawable-xxxhdpi/reverb_rating_bar_unselected.png differ
diff --git a/samples/LoginSample/src/main/res/drawable/placeholder_background.xml b/samples/LoginSample/src/main/res/drawable/placeholder_background.xml
new file mode 100644
index 000000000..469f62a35
--- /dev/null
+++ b/samples/LoginSample/src/main/res/drawable/placeholder_background.xml
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <item>
+        <shape android:shape="rectangle">
+            <solid android:color="#e02727" />
+        </shape>
+    </item>
+    <item
+        android:bottom="6dp"
+        android:left="6dp"
+        android:right="6dp"
+        android:top="6dp"
+        >
+        <shape android:shape="rectangle">
+            <corners android:radius="6dp" />
+            <stroke
+                android:color="#cccccccc"
+                android:dashGap="4dp"
+                android:dashWidth="8dp"
+                android:width="2dp"
+                />
+        </shape>
+    </item>
+</layer-list>
diff --git a/samples/LoginSample/src/main/res/drawable/reverb_progress_bar.xml b/samples/LoginSample/src/main/res/drawable/reverb_progress_bar.xml
new file mode 100644
index 000000000..f7e0fac75
--- /dev/null
+++ b/samples/LoginSample/src/main/res/drawable/reverb_progress_bar.xml
@@ -0,0 +1,43 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:id="@android:id/background">
+        <shape>
+            <corners android:radius="@dimen/reverb_progress_bar_corner_radius" />
+            <solid android:color="@color/reverb_light" />
+        </shape>
+    </item>
+    <item android:id="@android:id/secondaryProgress">
+        <shape>
+            <corners android:radius="@dimen/reverb_progress_bar_corner_radius" />
+            <solid android:color="@color/reverb_light" />
+        </shape>
+    </item>
+    <item android:id="@android:id/progress">
+        <clip>
+            <shape>
+                <corners android:radius="@dimen/reverb_progress_bar_corner_radius" />
+                <solid android:color="@color/reverb_dark" />
+            </shape>
+        </clip>
+    </item>
+</layer-list>
diff --git a/samples/LoginSample/src/main/res/drawable/reverb_progress_complete.xml b/samples/LoginSample/src/main/res/drawable/reverb_progress_complete.xml
new file mode 100644
index 000000000..06abcd053
--- /dev/null
+++ b/samples/LoginSample/src/main/res/drawable/reverb_progress_complete.xml
@@ -0,0 +1,42 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <item>
+        <shape
+            android:shape="ring"
+            android:innerRadius="37dp"
+            android:thickness="4dp"
+            android:useLevel="false"
+            >
+            <solid
+                android:color="@color/reverb_dark"
+                android:useLevel="false"
+                />
+        </shape>
+    </item>
+    <item>
+        <bitmap
+            android:src="@drawable/reverb_checkmark"
+            android:tint="@color/reverb_dark"
+            />
+    </item>
+</layer-list>
diff --git a/samples/LoginSample/src/main/res/drawable/reverb_progress_rotating_ring.xml b/samples/LoginSample/src/main/res/drawable/reverb_progress_rotating_ring.xml
new file mode 100644
index 000000000..5ae1d9c40
--- /dev/null
+++ b/samples/LoginSample/src/main/res/drawable/reverb_progress_rotating_ring.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<rotate
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:drawable="@drawable/reverb_progress_ring"
+    android:fromDegrees="0"
+    android:pivotX="50%"
+    android:pivotY="50%"
+    android:toDegrees="720"
+    />
diff --git a/samples/LoginSample/src/main/res/drawable/reverb_rating_bar.xml b/samples/LoginSample/src/main/res/drawable/reverb_rating_bar.xml
new file mode 100644
index 000000000..7c66ea0eb
--- /dev/null
+++ b/samples/LoginSample/src/main/res/drawable/reverb_rating_bar.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <!-- RatingBar does not handle ShapeDrawables for the items, so just use images -->
+    <item
+        android:id="@android:id/background"
+        android:drawable="@drawable/reverb_rating_bar_unselected"
+        />
+    <item
+        android:id="@android:id/secondaryProgress"
+        android:drawable="@drawable/reverb_rating_bar_unselected"
+        />
+    <item
+        android:id="@android:id/progress"
+        android:drawable="@drawable/reverb_rating_bar_selected"
+        />
+</layer-list>
diff --git a/samples/LoginSample/src/main/res/layout/accountkit_activity_main.xml b/samples/LoginSample/src/main/res/layout/accountkit_activity_main.xml
new file mode 100644
index 000000000..85d90e742
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/accountkit_activity_main.xml
@@ -0,0 +1,277 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<ScrollView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    >
+    <LinearLayout style="@style/Sample.ScrollContent">
+        <LinearLayout
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:orientation="vertical"
+            android:minWidth="300dp"
+            tools:ignore="UselessParent"
+            >
+            <Switch
+                android:id="@+id/advanced_ui_switch"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:lines="1"
+                android:text="@string/config_advanced_ui_label"
+                android:textColor="@android:color/black"
+                />
+            <Switch
+                android:id="@+id/response_type_switch"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:lines="1"
+                android:checked="true"
+                android:text="@string/config_response_type_label"
+                android:textColor="@android:color/black"
+                />
+            <Switch
+                android:id="@+id/state_param_switch"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:lines="1"
+                android:text="@string/confirm_state_param_label"
+                android:textColor="@android:color/black"
+                />
+            <Switch
+                android:id="@+id/facebook_notification_switch"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:lines="1"
+                android:checked="true"
+                android:text="@string/confirm_facebook_notification_label"
+                android:textColor="@android:color/black"
+                />
+            <Switch
+                android:id="@+id/voice_call_switch"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:lines="1"
+                android:checked="true"
+                android:text="@string/confirm_voice_call_label"
+                android:textColor="@android:color/black"
+                />
+            <Switch
+                android:id="@+id/whitelist_blacklist_switch"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:lines="1"
+                android:text="@string/use_manual_whitelistblacklist_label"
+                android:textColor="@android:color/black"
+                />
+            <Switch
+                android:id="@+id/read_phone_state_switch"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:lines="1"
+                android:checked="true"
+                android:text="@string/read_phone_state_label"
+                android:textColor="@android:color/black"
+                />
+            <Switch
+                android:id="@+id/receive_sms_switch"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:lines="1"
+                android:checked="true"
+                android:text="@string/receive_sms_label"
+                android:textColor="@android:color/black"
+                />
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:gravity="center"
+                android:orientation="horizontal"
+                >
+                <TextView
+                    android:layout_width="0dp"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="1"
+                    android:text="@string/config_theme_label"
+                    android:textColor="@android:color/black"
+                    />
+                <Spinner
+                    android:id="@+id/theme_spinner"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:gravity="end"
+                    android:textAlignment="center"
+                    tools:ignore="UnusedAttribute"
+                    />
+            </LinearLayout>
+            <LinearLayout
+                android:id="@+id/advanced_ui_options"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:gravity="center"
+                android:orientation="vertical"
+                android:visibility="gone"
+                tools:visibility="visible"
+                >
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:gravity="center"
+                    android:orientation="horizontal"
+                    >
+                    <TextView
+                        android:layout_width="0dp"
+                        android:layout_height="wrap_content"
+                        android:layout_weight="1"
+                        android:text="@string/config_entry_button_label"
+                        android:textColor="@android:color/black"
+                        />
+                    <Spinner
+                        android:id="@+id/entry_button_spinner"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:gravity="end"
+                        android:textAlignment="center"
+                        tools:ignore="UnusedAttribute"
+                        />
+                </LinearLayout>
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:gravity="center"
+                    android:orientation="horizontal"
+                    >
+                    <TextView
+                        android:layout_width="0dp"
+                        android:layout_height="wrap_content"
+                        android:layout_weight="1"
+                        android:text="@string/config_confirm_button_label"
+                        android:textColor="@android:color/black"
+                        />
+                    <Spinner
+                        android:id="@+id/confirm_button_spinner"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:gravity="end"
+                        android:textAlignment="center"
+                        tools:ignore="UnusedAttribute"
+                        />
+                </LinearLayout>
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:gravity="center"
+                    android:orientation="horizontal"
+                    >
+                    <TextView
+                        android:layout_width="0dp"
+                        android:layout_height="wrap_content"
+                        android:layout_weight="1"
+                        android:text="@string/config_text_position_label"
+                        android:textColor="@android:color/black"
+                        />
+                    <Spinner
+                        android:id="@+id/text_position_spinner"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:gravity="end"
+                        android:textAlignment="center"
+                        tools:ignore="UnusedAttribute"
+                        />
+                </LinearLayout>
+            </LinearLayout>
+            <Switch
+                android:id="@+id/background_image"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:lines="1"
+                android:checked="true"
+                android:text="@string/config_background_image_label"
+                android:textColor="@android:color/black"
+                />
+            <LinearLayout
+                android:id="@+id/skin_ui_options"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:gravity="center"
+                android:orientation="vertical"
+                android:visibility="gone"
+                tools:visibility="visible"
+                >
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:gravity="center"
+                    android:orientation="horizontal"
+                    >
+                    <TextView
+                        android:layout_width="0dp"
+                        android:layout_height="wrap_content"
+                        android:layout_weight="1"
+                        android:text="@string/config_tint_label"
+                        android:textColor="@android:color/black"
+                        />
+                    <Spinner
+                        android:id="@+id/skin_tint_spinner"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:gravity="end"
+                        android:textAlignment="center"
+                        />
+                </LinearLayout>
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:gravity="center"
+                    android:orientation="horizontal"
+                    >
+                    <TextView
+                        android:id="@+id/tint_intensity_title"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:text="@string/config_tint_intensity_label"
+                        android:textColor="@android:color/black"
+                        />
+                    <SeekBar
+                        android:id="@+id/tint_intensity_field"
+                        android:layout_width="0dp"
+                        android:layout_weight="1"
+                        android:layout_height="wrap_content"
+                        android:max="30"/>
+                </LinearLayout>
+            </LinearLayout>
+            <Button
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:onClick="onLoginPhone"
+                android:text="@string/log_in_phone_button"
+                />
+            <Button
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:onClick="onLoginEmail"
+                android:text="@string/log_in_email_button"
+                />
+        </LinearLayout>
+    </LinearLayout>
+</ScrollView>
diff --git a/samples/LoginSample/src/main/res/layout/activity_error.xml b/samples/LoginSample/src/main/res/layout/activity_error.xml
new file mode 100644
index 000000000..c3711ec54
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/activity_error.xml
@@ -0,0 +1,50 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<ScrollView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    >
+    <LinearLayout style="@style/Sample.ScrollContent">
+        <Button
+            android:id="@+id/log_out_button"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:text="@string/log_out_button"
+            />
+        <TextView
+            android:id="@+id/error_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/error_label"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/error"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/loading_placeholder"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+    </LinearLayout>
+</ScrollView>
diff --git a/samples/LoginSample/src/main/res/layout/activity_facebook_login.xml b/samples/LoginSample/src/main/res/layout/activity_facebook_login.xml
new file mode 100644
index 000000000..d0f1176c1
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/activity_facebook_login.xml
@@ -0,0 +1,85 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:facebook="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    android:gravity="center">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:gravity="center">
+
+        <com.facebook.login.widget.ProfilePictureView
+            android:id="@+id/user_pic"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="10dp"
+            android:layout_marginStart="10dp"
+            android:layout_marginRight="10dp"
+            android:layout_marginEnd="10dp"
+            facebook:com_facebook_preset_size="small" />
+
+        <TextView
+            android:id="@+id/user_name"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/welcome" />
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:gravity="center"
+        android:layout_margin="10dp">
+
+        <Button
+            android:id="@+id/deauth"
+            android:layout_width="182dip"
+            android:layout_height="wrap_content"
+            android:text="@string/de_authorize_app"
+            android:layout_marginRight="5dp"
+            android:layout_marginEnd="5dp"
+            android:textSize="12sp" />
+
+        <Button
+            android:id="@+id/perms"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/permissions"
+            android:layout_marginLeft="5dp"
+            android:layout_marginStart="5dp"
+            android:textSize="12sp" />
+
+    </LinearLayout>
+
+    <com.facebook.login.widget.LoginButton
+        android:id="@+id/_fb_login"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center_horizontal" />
+
+</LinearLayout>
diff --git a/samples/LoginSample/src/main/res/layout/activity_hello_code.xml b/samples/LoginSample/src/main/res/layout/activity_hello_code.xml
new file mode 100644
index 000000000..30b0bf7c4
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/activity_hello_code.xml
@@ -0,0 +1,81 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<ScrollView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    >
+    <LinearLayout style="@style/Sample.ScrollContent">
+        <Button
+            android:id="@+id/log_out_button"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:text="@string/log_out_button"
+            />
+        <TextView
+            android:id="@+id/user_code_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/code_label"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/code"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/loading_placeholder"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/initial_state_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/initial_state_label"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            android:visibility="gone"
+            />
+        <TextView
+            android:id="@+id/initial_state"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:visibility="gone"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/final_state_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/final_state_label"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            android:visibility="gone"
+            />
+        <TextView
+            android:id="@+id/final_state"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:visibility="gone"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+
+    </LinearLayout>
+</ScrollView>
diff --git a/samples/LoginSample/src/main/res/layout/activity_hello_token.xml b/samples/LoginSample/src/main/res/layout/activity_hello_token.xml
new file mode 100644
index 000000000..eea3b554b
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/activity_hello_token.xml
@@ -0,0 +1,108 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<ScrollView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    >
+    <LinearLayout style="@style/Sample.ScrollContent">
+        <Button
+            android:id="@+id/log_out_button"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:text="@string/log_out_button"
+            />
+        <TextView
+            android:id="@+id/user_id_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/user_id_label"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/user_id"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/loading_placeholder"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/user_phone_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/phone_number_label"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/user_phone"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/loading_placeholder"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/user_email_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/email_label"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/user_email"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/loading_placeholder"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/initial_state_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/initial_state_label"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            android:visibility="gone"
+            />
+        <TextView
+            android:id="@+id/initial_state"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:visibility="gone"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+        <TextView
+            android:id="@+id/final_state_label"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/final_state_label"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            android:visibility="gone"
+            />
+        <TextView
+            android:id="@+id/final_state"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:visibility="gone"
+            android:textAppearance="?android:attr/textAppearanceLarge"
+            />
+    </LinearLayout>
+</ScrollView>
diff --git a/samples/LoginSample/src/main/res/layout/activity_main.xml b/samples/LoginSample/src/main/res/layout/activity_main.xml
new file mode 100644
index 000000000..c5828e387
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/activity_main.xml
@@ -0,0 +1,50 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin"
+    android:gravity="center"
+    android:orientation="vertical"
+    tools:context="com.facebook.samples.loginsample.MainActivity">
+
+    <Button
+        android:id="@+id/fb_login_button"
+        android:text="@string/log_in_with_facebook"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_margin="10dp"
+        android:textSize="12sp"/>
+
+    <Button
+        android:id="@+id/ak_login_button"
+        android:text="@string/login_with_account_kit"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_margin="10dp"
+        android:textSize="12sp"/>
+
+</LinearLayout>
diff --git a/samples/LoginSample/src/main/res/layout/fragment_placeholder.xml b/samples/LoginSample/src/main/res/layout/fragment_placeholder.xml
new file mode 100644
index 000000000..3f0e56e02
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/fragment_placeholder.xml
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="100dp"
+    android:background="@drawable/placeholder_background"
+    >
+    <TextView
+        android:id="@+id/text_view"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center"
+        android:textColor="#ffffff"
+        />
+</FrameLayout>
diff --git a/samples/LoginSample/src/main/res/layout/fragment_reverb_action_bar.xml b/samples/LoginSample/src/main/res/layout/fragment_reverb_action_bar.xml
new file mode 100644
index 000000000..080c48105
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/fragment_reverb_action_bar.xml
@@ -0,0 +1,61 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="@dimen/reverb_action_bar_height"
+    android:background="?attr/com_accountkit_header_background_color"
+    android:gravity="center_vertical"
+    android:orientation="horizontal"
+    android:paddingEnd="@dimen/activity_horizontal_margin"
+    android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingStart="@dimen/activity_horizontal_margin"
+    tools:ignore="Overdraw"
+    >
+    <ImageView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:onClick="onBackPressed"
+        android:src="?attr/reverb_back_arrow_src"
+        tools:ignore="ContentDescription,OnClick"
+        />
+    <TextView
+        android:id="@+id/title_view"
+        android:layout_width="0dp"
+        android:layout_height="match_parent"
+        android:layout_weight="1"
+        android:gravity="center_vertical"
+        android:paddingLeft="@dimen/activity_horizontal_margin"
+        android:paddingRight="@dimen/activity_horizontal_margin"
+        android:textAllCaps="?attr/reverb_text_all_caps"
+        android:textColor="?attr/com_accountkit_header_text_color"
+        />
+    <ImageView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:src="@drawable/reverb_icon"
+        android:visibility="?attr/reverb_app_icon_visibility"
+        tools:ignore="ContentDescription"
+        />
+</LinearLayout>
diff --git a/samples/LoginSample/src/main/res/layout/fragment_reverb_body.xml b/samples/LoginSample/src/main/res/layout/fragment_reverb_body.xml
new file mode 100644
index 000000000..1e95eae43
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/fragment_reverb_body.xml
@@ -0,0 +1,50 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="vertical"
+    >
+    <FrameLayout
+        android:id="@+id/reverb_progress_spinner"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:visibility="gone"
+        >
+        <ProgressBar
+            android:layout_width="@dimen/reverb_icon_size"
+            android:layout_height="@dimen/reverb_icon_size"
+            android:layout_gravity="center"
+            android:indeterminateDrawable="@drawable/reverb_progress_rotating_ring"
+            />
+    </FrameLayout>
+    <ImageView
+        android:id="@+id/reverb_icon"
+        android:layout_width="@dimen/reverb_icon_size"
+        android:layout_height="@dimen/reverb_icon_size"
+        android:layout_gravity="center"
+        android:visibility="gone"
+        tools:ignore="ContentDescription"
+        />
+</LinearLayout>
diff --git a/samples/LoginSample/src/main/res/layout/fragment_reverb_footer_bar.xml b/samples/LoginSample/src/main/res/layout/fragment_reverb_footer_bar.xml
new file mode 100644
index 000000000..2809db05b
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/fragment_reverb_footer_bar.xml
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:paddingBottom="@dimen/reverb_progress_bar_padding"
+    android:paddingTop="@dimen/reverb_progress_bar_padding"
+    style="@style/Reverb.Footer"
+    >
+    <include layout="@layout/layout_reverb_switch_login_type" />
+    <ProgressBar
+        android:id="@+id/reverb_progress_bar"
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/reverb_progress_bar_height"
+        android:indeterminateOnly="false"
+        android:max="5"
+        android:progressDrawable="@drawable/reverb_progress_bar"
+        />
+</LinearLayout>
diff --git a/samples/LoginSample/src/main/res/layout/fragment_reverb_footer_dots.xml b/samples/LoginSample/src/main/res/layout/fragment_reverb_footer_dots.xml
new file mode 100644
index 000000000..546cb2530
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/fragment_reverb_footer_dots.xml
@@ -0,0 +1,39 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    style="@style/Reverb.Footer"
+    >
+    <include layout="@layout/layout_reverb_switch_login_type" />
+    <RatingBar
+        android:id="@+id/reverb_progress_bar"
+        android:isIndicator="true"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:maxHeight="@dimen/reverb_rating_bar_height"
+        android:minHeight="@dimen/reverb_rating_bar_height"
+        android:numStars="5"
+        android:progressDrawable="@drawable/reverb_rating_bar"
+        android:rating="1.0"
+        android:stepSize="1.0"
+        />
+</LinearLayout>
diff --git a/samples/LoginSample/src/main/res/layout/fragment_space.xml b/samples/LoginSample/src/main/res/layout/fragment_space.xml
new file mode 100644
index 000000000..5827d721c
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/fragment_space.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="0dp"
+    />
diff --git a/samples/LoginSample/src/main/res/layout/layout_reverb_switch_login_type.xml b/samples/LoginSample/src/main/res/layout/layout_reverb_switch_login_type.xml
new file mode 100644
index 000000000..8b515f11d
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/layout_reverb_switch_login_type.xml
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<TextView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/switch_login_type_button"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:layout_marginTop="@dimen/reverb_footer_margin_top"
+    android:gravity="center"
+    android:padding="@dimen/reverb_padding"
+    android:textColor="?attr/com_accountkit_button_background_color"
+    android:textSize="@dimen/reverb_switch_login_type_text_size"
+    android:textStyle="bold"
+    android:visibility="gone"
+    />
diff --git a/samples/LoginSample/src/main/res/layout/list_perms_new.xml b/samples/LoginSample/src/main/res/layout/list_perms_new.xml
new file mode 100644
index 000000000..2ab9dbc86
--- /dev/null
+++ b/samples/LoginSample/src/main/res/layout/list_perms_new.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent" >
+
+    <Button
+        android:id="@+id/confirm"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        android:text="@android:string/ok" />
+
+    <ListView
+        android:id="@+id/list"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:layout_above="@id/confirm"
+        android:layout_alignParentTop="true"
+        />
+</RelativeLayout>
diff --git a/samples/LoginSample/src/main/res/mipmap-hdpi/ic_launcher.png b/samples/LoginSample/src/main/res/mipmap-hdpi/ic_launcher.png
new file mode 100755
index 000000000..a4a96fed1
Binary files /dev/null and b/samples/LoginSample/src/main/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/samples/LoginSample/src/main/res/mipmap-mdpi/ic_launcher.png b/samples/LoginSample/src/main/res/mipmap-mdpi/ic_launcher.png
new file mode 100755
index 000000000..909d5b7f7
Binary files /dev/null and b/samples/LoginSample/src/main/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/samples/LoginSample/src/main/res/mipmap-xhdpi/ic_launcher.png b/samples/LoginSample/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100755
index 000000000..507873baa
Binary files /dev/null and b/samples/LoginSample/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/samples/LoginSample/src/main/res/mipmap-xxhdpi/ic_launcher.png b/samples/LoginSample/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100755
index 000000000..b2f1081ed
Binary files /dev/null and b/samples/LoginSample/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/samples/LoginSample/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/samples/LoginSample/src/main/res/mipmap-xxxhdpi/ic_launcher.png
new file mode 100755
index 000000000..26a703056
Binary files /dev/null and b/samples/LoginSample/src/main/res/mipmap-xxxhdpi/ic_launcher.png differ
diff --git a/samples/LoginSample/src/main/res/values-v17/styles.xml b/samples/LoginSample/src/main/res/values-v17/styles.xml
new file mode 100644
index 000000000..caabf4282
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values-v17/styles.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <style name="Sample.ScrollContent" parent="Base.Sample.ScrollContent">
+        <item name="android:paddingEnd">@dimen/activity_horizontal_margin</item>
+        <item name="android:paddingStart">@dimen/activity_horizontal_margin</item>
+    </style>
+
+    <style name="Reverb.Footer" parent="Base.Reverb.Footer">
+        <item name="android:layout_marginEnd">@dimen/reverb_content_margin_end</item>
+        <item name="android:layout_marginStart">@dimen/reverb_content_margin_start</item>
+    </style>
+</resources>
diff --git a/samples/LoginSample/src/main/res/values-w820dp/dimens.xml b/samples/LoginSample/src/main/res/values-w820dp/dimens.xml
new file mode 100644
index 000000000..72bb51545
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values-w820dp/dimens.xml
@@ -0,0 +1,26 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <!-- Example customization of dimensions originally defined in res/values/dimens.xml
+         (such as screen margins) for screens with more than 820dp of available width. This
+         would include 7" and 10" devices in landscape (~960dp and ~1280dp respectively). -->
+    <dimen name="activity_horizontal_margin">64dp</dimen>
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/accountkit_colors.xml b/samples/LoginSample/src/main/res/values/accountkit_colors.xml
new file mode 100644
index 000000000..e5510c02d
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/accountkit_colors.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <color name="default_color">#0099E1</color>
+    <color name="reverb_dark">#262261</color>
+    <color name="reverb_light">#e9e8ef</color>
+    <color name="reverb_text">#1d2129</color>
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/accountkit_dimens.xml b/samples/LoginSample/src/main/res/values/accountkit_dimens.xml
new file mode 100644
index 000000000..2d11a897d
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/accountkit_dimens.xml
@@ -0,0 +1,39 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <dimen name="reverb_action_bar_height">50dp</dimen>
+    <dimen name="reverb_content_margin_end">25dp</dimen>
+    <dimen name="reverb_content_margin_start">25dp</dimen>
+    <dimen name="reverb_content_margin_top_large">22dp</dimen>
+    <dimen name="reverb_content_margin_top_small">14dp</dimen>
+    <dimen name="reverb_content_max_width">360dp</dimen>
+    <dimen name="reverb_content_min_height">340dp</dimen>
+    <dimen name="reverb_footer_margin_bottom">12dp</dimen>
+    <dimen name="reverb_footer_margin_top">14dp</dimen>
+    <dimen name="reverb_icon_size">86dp</dimen>
+    <dimen name="reverb_padding">8dp</dimen>
+    <dimen name="reverb_progress_bar_corner_radius">3dp</dimen>
+    <dimen name="reverb_progress_bar_height">14dp</dimen>
+    <dimen name="reverb_progress_bar_padding">10dp</dimen>
+    <dimen name="reverb_rating_bar_height">20dp</dimen>
+    <dimen name="reverb_switch_login_type_text_size">12sp</dimen>
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/accountkit_strings.xml b/samples/LoginSample/src/main/res/values/accountkit_strings.xml
new file mode 100644
index 000000000..26be9b020
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/accountkit_strings.xml
@@ -0,0 +1,97 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <string name="action_bar_title_hello">Hello</string>
+    <string name="code_label">Code</string>
+    <string name="config_advanced_ui_label">Use advanced UI theming</string>
+    <string name="config_confirm_button_label">Confirm button Text</string>
+    <string name="config_entry_button_label">Entry button Text</string>
+    <string name="config_response_type_label">Enable Client Access Token Flow</string>
+    <string name="config_text_position_label">Text Position</string>
+    <string name="config_theme_label">Theme</string>
+    <string name="config_background_image_label">Background image</string>
+    <string name="config_tint_label">Background Image Tint</string>
+    <string name="config_tint_intensity_label">Tint Intensity (%1$d%%)</string>
+    <string name="confirm_facebook_notification_label">Facebook Notifications Fallback</string>
+    <string name="confirm_voice_call_label">Allow Voice Call Fallback</string>
+    <string name="confirm_state_param_label">Is State Param passed?</string>
+    <string name="email_label">Email</string>
+    <string name="error_label">Error</string>
+    <string name="error_message">An error has occurred.</string>
+    <string name="final_state_label">Final State</string>
+    <string name="initial_state_label">Initial State</string>
+    <string name="loading_placeholder">Loading…</string>
+    <string name="log_in_email_button">Log In via Email</string>
+    <string name="log_in_phone_button">Log In via Phone</string>
+    <string name="log_out_button">Log Out</string>
+    <string name="na">NA</string>
+    <string name="permissions_get_accounts_message">
+        Grant permission to read your email address from your device to pre-fill.
+    </string>
+    <string name="permissions_get_accounts_title">Read Email Address</string>
+    <string name="permissions_read_phone_state_message">
+        Grant permission to read your phone number from your device to pre-fill.
+    </string>
+    <string name="permissions_read_phone_state_title">Read Phone Number</string>
+    <string name="permissions_receive_sms_message">
+        Grant permission to read your SMS code from your device to pre-fill.
+    </string>
+    <string name="permissions_receive_sms_title">Read SMS Code</string>
+    <string name="phone_number_label">Phone Number</string>
+    <string name="read_phone_state_label">Read phone number?</string>
+    <string name="receive_sms_label">Receive SMS?</string>
+    <string name="use_manual_whitelistblacklist_label">Use manual whitelist/blacklist</string>
+    <string name="user_id_label">Account ID</string>
+    <string name="reverb_advanced_ui_required">
+        Advanced UI theming is required for Reverb themes. Select a different theme to disable.
+    </string>
+    <string name="skin_ui_required">
+        Advanced UI theming is not allowed for Skin themes. Select a different theme to enable.
+    </string>
+    <string name="reverb_switch_login_type_phone">SIGN IN WITH PHONE</string>
+    <string name="reverb_switch_login_type_email">SIGN IN WITH EMAIL</string>
+    <string name="reverb_title_code_input">Enter your code</string>
+    <string name="reverb_title_email_input">Enter your email address</string>
+    <string name="reverb_title_email_verify">Open the email and confirm your address</string>
+    <string name="reverb_title_error">We\'re sorry, something went wrong.</string>
+    <string name="reverb_title_phone_number_input">Enter your phone number</string>
+    <string name="reverb_title_resend">We\'re sorry. Try these options to continue.</string>
+    <string name="reverb_title_sending_code">Sending your code…</string>
+    <string name="reverb_title_sent_code">Sent!</string>
+    <string name="reverb_title_account_verified">Account verified!</string>
+    <string name="reverb_title_logging_in">Logging in…</string>
+    <string name="reverb_title_verified">Done!</string>
+    <string name="reverb_title_verifying_code">Verifying your code…</string>
+    <string-array name="theme_options">
+        <item>Classic</item>
+        <item>Contemporary</item>
+        <item>Translucent</item>
+        <item>Salmon</item>
+        <item>Yellow</item>
+        <item>Red</item>
+        <item>Dog</item>
+        <item>Bicycle</item>
+        <item>Reverb A</item>
+        <item>Reverb B</item>
+        <item>Reverb C</item>
+    </string-array>
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/accountkit_styles.xml b/samples/LoginSample/src/main/res/values/accountkit_styles.xml
new file mode 100644
index 000000000..6e490e3a8
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/accountkit_styles.xml
@@ -0,0 +1,48 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <style name="Sample.ScrollContent" parent="Base.Sample.ScrollContent" />
+
+    <style name="Base.Sample.ScrollContent" parent="">
+        <item name="android:gravity">center_horizontal</item>
+        <item name="android:layout_height">wrap_content</item>
+        <item name="android:layout_width">match_parent</item>
+        <item name="android:orientation">vertical</item>
+        <item name="android:paddingBottom">@dimen/activity_vertical_margin</item>
+        <item name="android:paddingLeft">@dimen/activity_horizontal_margin</item>
+        <item name="android:paddingRight">@dimen/activity_horizontal_margin</item>
+        <item name="android:paddingTop">@dimen/activity_vertical_margin</item>
+    </style>
+
+    <style name="Reverb.Footer" parent="Base.Reverb.Footer" />
+
+    <style name="Base.Reverb.Footer" parent="">
+        <item name="android:gravity">center_horizontal|bottom</item>
+        <item name="android:layout_height">wrap_content</item>
+        <item name="android:layout_marginBottom">@dimen/reverb_footer_margin_bottom</item>
+        <item name="android:layout_marginLeft">@dimen/reverb_content_margin_start</item>
+        <item name="android:layout_marginRight">@dimen/reverb_content_margin_end</item>
+        <item name="android:layout_marginTop">@dimen/reverb_footer_margin_top</item>
+        <item name="android:layout_width">match_parent</item>
+        <item name="android:orientation">vertical</item>
+    </style>
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/accountkit_themes.xml b/samples/LoginSample/src/main/res/values/accountkit_themes.xml
new file mode 100644
index 000000000..304f3049c
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/accountkit_themes.xml
@@ -0,0 +1,118 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <style name="AppLoginTheme" parent="Theme.AccountKit" />
+    <style name="AppLoginTheme.Salmon" parent="Theme.AccountKit">
+        <item name="com_accountkit_primary_color">@android:color/white</item>
+        <item name="com_accountkit_primary_text_color">#565a5c</item>
+        <item name="com_accountkit_secondary_color">#ffe5e5</item>
+        <item name="com_accountkit_secondary_text_color">
+            ?attr/com_accountkit_primary_text_color
+        </item>
+        <item name="com_accountkit_status_bar_color">@android:color/black</item>
+        <item name="com_accountkit_button_background_color">#ff5a5f</item>
+        <item name="com_accountkit_button_text_color">@android:color/white</item>
+        <item name="com_accountkit_icon_color">#ff5a5f</item>
+        <item name="com_accountkit_toolbar_elevation">8dp</item>
+    </style>
+    <style name="AppLoginTheme.Yellow" parent="Theme.AccountKit.Outline">
+        <item name="com_accountkit_primary_color">#f4bf56</item>
+        <item name="com_accountkit_primary_text_color">@android:color/white</item>
+        <item name="com_accountkit_secondary_text_color">#44566b</item>
+        <item name="com_accountkit_status_bar_color">#ed9d00</item>
+        <item name="com_accountkit_input_accent_color">?attr/com_accountkit_primary_color</item>
+        <item name="com_accountkit_input_border_color">?attr/com_accountkit_primary_color</item>
+    </style>
+    <style name="AppLoginTheme.Red" parent="Theme.AccountKit.Outline">
+        <item name="com_accountkit_primary_color">#333333</item>
+        <item name="com_accountkit_primary_text_color">@android:color/white</item>
+        <item name="com_accountkit_secondary_text_color">#151515</item>
+        <item name="com_accountkit_status_bar_color">@android:color/black</item>
+        <item name="com_accountkit_background_color">#f7f7f7</item>
+        <item name="com_accountkit_button_background_color">#e02727</item>
+        <item name="com_accountkit_button_border_color">
+            ?attr/com_accountkit_button_background_color
+        </item>
+        <item name="com_accountkit_input_border_color">#bbbbbb</item>
+    </style>
+    <style name="AppLoginTheme_Contemporary" parent="Theme.AccountKit">
+        <item name="com_accountkit_primary_color">#ff5a5f</item>
+        <item name="com_accountkit_primary_text_color">#387c1f</item>
+        <item name="com_accountkit_secondary_color">#cc1c2f97</item>
+        <item name="com_accountkit_secondary_text_color">#cc97971c</item>
+        <item name="com_accountkit_background_color">#994e7e24</item>
+        <item name="com_accountkit_input_text_color">?attr/com_accountkit_primary_text_color</item>
+    </style>
+    <style name="AppLoginTheme.Bicycle" parent="Theme.AccountKit.Outline">
+        <item name="com_accountkit_primary_color">#ff5a5f</item>
+        <item name="com_accountkit_primary_text_color">@android:color/white</item>
+        <item name="com_accountkit_secondary_text_color">@android:color/white</item>
+        <item name="com_accountkit_background">@drawable/bicycle</item>
+        <item name="com_accountkit_background_color">#66000000</item>
+        <item name="com_accountkit_input_accent_color">@android:color/white</item>
+        <item name="com_accountkit_input_background_color">#00000000</item>
+        <item name="com_accountkit_input_border_color">@android:color/white</item>
+    </style>
+    <style name="Base.AppLoginTheme.Reverb" parent="AppLoginTheme">
+        <item name="com_accountkit_primary_color">?attr/com_accountkit_secondary_color</item>
+        <item name="com_accountkit_primary_text_color">
+            ?attr/com_accountkit_secondary_text_color
+        </item>
+        <item name="com_accountkit_secondary_color">@color/reverb_light</item>
+        <item name="com_accountkit_secondary_text_color">@color/reverb_text</item>
+        <item name="com_accountkit_status_bar_color">@color/reverb_dark</item>
+        <item name="com_accountkit_button_background_color">@color/reverb_dark</item>
+        <item name="com_accountkit_button_border_color">@color/reverb_dark</item>
+        <item name="com_accountkit_button_text_color">@android:color/white</item>
+        <item name="com_accountkit_content_body_layout_weight">1</item>
+        <item name="com_accountkit_content_bottom_layout_weight">1</item>
+        <item name="com_accountkit_content_footer_layout_weight">0</item>
+        <item name="com_accountkit_content_header_layout_weight">1</item>
+        <item name="com_accountkit_content_text_layout_weight">1</item>
+        <item name="com_accountkit_content_top_layout_weight">1</item>
+        <item name="com_accountkit_content_margin_end">@dimen/reverb_content_margin_end</item>
+        <item name="com_accountkit_content_margin_start">@dimen/reverb_content_margin_start</item>
+        <item name="com_accountkit_content_max_width">@dimen/reverb_content_max_width</item>
+        <item name="com_accountkit_content_min_height">@dimen/reverb_content_min_height</item>
+        <item name="com_accountkit_icon_color">?attr/com_accountkit_status_bar_color</item>
+        <item name="reverb_app_icon_visibility">gone</item>
+        <item name="reverb_back_arrow_src">@drawable/reverb_arrow_purple</item>
+        <item name="reverb_content_margin_top">@dimen/reverb_content_margin_top_small</item>
+        <item name="reverb_text_all_caps">false</item>
+    </style>
+    <style name="AppLoginTheme.Reverb.A" parent="Base.AppLoginTheme.Reverb">
+        <item name="com_accountkit_header_background_color">@android:color/white</item>
+        <item name="com_accountkit_header_text_color">?attr/com_accountkit_status_bar_color</item>
+    </style>
+    <style name="AppLoginTheme.Reverb.B" parent="Base.AppLoginTheme.Reverb">
+        <item name="com_accountkit_header_background_color">#7c7aa0</item>
+        <item name="com_accountkit_header_text_color">@android:color/white</item>
+        <item name="reverb_app_icon_visibility">visible</item>
+        <item name="reverb_back_arrow_src">@drawable/reverb_arrow_white</item>
+        <item name="reverb_content_margin_top">@dimen/reverb_content_margin_top_large</item>
+        <item name="reverb_text_all_caps">true</item>
+    </style>
+    <style name="AppLoginTheme.Reverb.C" parent="AppLoginTheme.Reverb.A">
+        <item name="reverb_app_icon_visibility">visible</item>
+        <item name="reverb_text_all_caps">true</item>
+    </style>
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/attrs.xml b/samples/LoginSample/src/main/res/values/attrs.xml
new file mode 100644
index 000000000..e20fc7ffd
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/attrs.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <declare-styleable name="Theme.AccountKitSample.Style">
+        <attr name="reverb_app_icon_visibility" format="enum">
+            <enum name="visible" value="0" />
+            <enum name="gone" value="2" />
+        </attr>
+        <attr name="reverb_back_arrow_src" format="reference" />
+        <attr name="reverb_content_margin_top" format="dimension" />
+        <attr name="reverb_text_all_caps" format="boolean" />
+    </declare-styleable>
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/blacklisted_phone_country_codes.xml b/samples/LoginSample/src/main/res/values/blacklisted_phone_country_codes.xml
new file mode 100644
index 000000000..3ef4ccaea
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/blacklisted_phone_country_codes.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources xmlns:tools="http://schemas.android.com/tools">
+    <string-array name="blacklistedSmsCountryCodes" tools:ignore="MissingTranslation">
+        <item>ID</item>
+    </string-array>
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/colors.xml b/samples/LoginSample/src/main/res/values/colors.xml
new file mode 100644
index 000000000..a887ffe50
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/colors.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+
+    <color name="colorPrimary">#3F51B5</color>
+    <color name="colorPrimaryDark">#303F9F</color>
+    <color name="colorAccent">#FF4081</color>
+
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/dimens.xml b/samples/LoginSample/src/main/res/values/dimens.xml
new file mode 100644
index 000000000..34e488dbb
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/dimens.xml
@@ -0,0 +1,26 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <!-- Default screen margins, per the Android Design guidelines. -->
+    <dimen name="activity_horizontal_margin">16dp</dimen>
+    <dimen name="activity_vertical_margin">16dp</dimen>
+
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/strings.xml b/samples/LoginSample/src/main/res/values/strings.xml
new file mode 100644
index 000000000..72639e7c0
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/strings.xml
@@ -0,0 +1,85 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+
+    <string name="app_name">Login Sample</string>
+    <string name="facebook_app_id">133094273807591</string>
+    <string name="fb_login_protocol_scheme">fb133094273807591</string>
+    <string name="ACCOUNT_KIT_CLIENT_TOKEN">9d92ebdd3db421ff3ddb041fb8fe60c0</string>
+    <string name="ak_login_protocol_scheme">ak133094273807591</string>
+
+    <string name="login_with_account_kit">Log in with AccountKit</string>
+
+    <string name="welcome">Welcome!</string>
+    <string name="log_in_with_facebook">Log in with Facebook</string>
+    <string name="permissions">Permissions</string>
+    <string name="label_facebook_login">Facebook Login</string>
+    <string name="label_account_kit_login">Account Kit Login</string>
+    <string name="de_authorize_app">De-authorize App</string>
+    <string name="failed_to_deauth">"failed to deauthorize app %1s"</string>
+    <string name="app_not_logged_in">App not logged in</string>
+    <string name="success">SUCCESS</string>
+    <string name="cancel">CANCEL</string>
+    <string name="error">ERROR</string>
+
+    <string-array name="perms_array">
+        // User Data Permissions
+        <item>basic_info</item>
+        <item>public_profile</item>
+        <item>email</item>
+        <item>publish_actions</item>
+        <item>user_about_me</item>
+        <item>user_activities</item>
+        <item>user_birthday</item>
+        <item>user_mobile_phone</item>
+        <item>user_education_history</item>
+        <item>user_friends</item>
+        <item>user_games_activity</item>
+        <item>user_hometown</item>
+        <item>user_interests</item>
+        <item>user_likes</item>
+        <item>user_location</item>
+        <item>user_photos</item>
+        <item>user_posts</item>
+        <item>user_relationship_details</item>
+        <item>user_relationships</item>
+        <item>user_religion_politics</item>
+        <item>user_status</item>
+        <item>user_tagged_places</item>
+        <item>user_videos</item>
+        <item>user_website</item>
+        <item>user_work_history</item>
+
+        // Other Permissions
+        <item>manage_notifications</item>
+        <item>read_custom_friendlists</item>
+        <item>read_insights</item>
+        <item>read_mailbox</item>
+        <item>read_stream</item>
+        <item>read_audience_network_insights</item>
+
+        // Privacy
+        <item>ONLY_ME</item>
+        <item>FRIENDS</item>
+        <item>EVERYONE</item>
+    </string-array>
+
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/styles.xml b/samples/LoginSample/src/main/res/values/styles.xml
new file mode 100644
index 000000000..cbe3e82a6
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/styles.xml
@@ -0,0 +1,31 @@
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <!-- Customize your theme here. -->
+        <item name="colorPrimary">@color/colorPrimary</item>
+        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+        <item name="colorAccent">@color/colorAccent</item>
+    </style>
+
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/themes.xml b/samples/LoginSample/src/main/res/values/themes.xml
new file mode 100644
index 000000000..7c0e3007e
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/themes.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+
+    <style name="AppTheme.NoActionBar">
+        <item name="windowActionBar">false</item>
+        <item name="windowNoTitle">true</item>
+    </style>
+
+</resources>
diff --git a/samples/LoginSample/src/main/res/values/whitelisted_phone_country_codes.xml b/samples/LoginSample/src/main/res/values/whitelisted_phone_country_codes.xml
new file mode 100644
index 000000000..b573a2b9a
--- /dev/null
+++ b/samples/LoginSample/src/main/res/values/whitelisted_phone_country_codes.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+    <string-array name="whitelistedSmsCountryCodes">
+        <item>ID</item>
+        <item>US</item>
+    </string-array>
+</resources>
diff --git a/samples/LoginSample/src/test/java/com/facebook/samples/loginsample/ExampleUnitTest.java b/samples/LoginSample/src/test/java/com/facebook/samples/loginsample/ExampleUnitTest.java
new file mode 100644
index 000000000..b5a7d1ebb
--- /dev/null
+++ b/samples/LoginSample/src/test/java/com/facebook/samples/loginsample/ExampleUnitTest.java
@@ -0,0 +1,35 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.loginsample;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * To work on unit tests, switch the Test Artifact in the Build Variants view.
+ */
+public class ExampleUnitTest {
+    @Test
+    public void addition_isCorrect() throws Exception {
+        assertEquals(4, 2 + 2);
+    }
+}
diff --git a/samples/MessengerSendSample/build.gradle b/samples/MessengerSendSample/build.gradle
index b1a0545e9..756c69332 100644
--- a/samples/MessengerSendSample/build.gradle
+++ b/samples/MessengerSendSample/build.gradle
@@ -28,15 +28,6 @@ android {
         exclude 'META-INF/NOTICE.txt'    
     }
 
-    signingConfigs {
-        debug {
-            storeFile file("../../keystores/debug.keystore")
-            storePassword "android"
-            keyAlias "androiddebugkey"
-            keyPassword "android"
-        }
-    }
-
     splits {
         abi {
             enable true
diff --git a/samples/MessengerSendSample/src/main/AndroidManifest.xml b/samples/MessengerSendSample/src/main/AndroidManifest.xml
index 06e34e0ef..f2aef47fd 100644
--- a/samples/MessengerSendSample/src/main/AndroidManifest.xml
+++ b/samples/MessengerSendSample/src/main/AndroidManifest.xml
@@ -20,43 +20,43 @@
 -->
 
 <manifest xmlns:android='http://schemas.android.com/apk/res/android'
-          package='com.facebook.samples.messenger.send'
-          >
-  <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
-  <uses-permission android:name="android.permission.INTERNET" />
-
-  <application
-      android:name='MessengerSendSampleApplication'
-      android:icon='@null'
-      android:label='@string/app_name'
-      android:theme='@style/Theme.AppCompat.NoActionBar'>
-
-    <meta-data
-        android:name="com.facebook.sdk.ApplicationId"
-        android:value="@string/facebook_app_id"/>
-
-    <activity
-        android:name='.MainActivity'>
-      <intent-filter>
-        <action android:name='android.intent.action.MAIN' />
-        <category android:name='android.intent.category.LAUNCHER' />
-      </intent-filter>
-
-      <!-- Intent filter used for Messenger protocol version 20150311 -->
-      <intent-filter>
-        <action android:name="android.intent.action.PICK" />
-        <category android:name="android.intent.category.DEFAULT"/>
-        <category android:name="com.facebook.orca.category.PLATFORM_THREAD_20150311"/>
-      </intent-filter>
-
-      <!-- Intent filter used for Messenger protocol version 20150314 -->
-      <intent-filter>
-        <action android:name="android.intent.action.PICK" />
-        <category android:name="android.intent.category.DEFAULT"/>
-        <category android:name="com.facebook.orca.category.PLATFORM_THREAD_20150314"/>
-      </intent-filter>
-
-    </activity>
-
-  </application>
+    package='com.facebook.samples.messenger.send'>
+
+    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
+    <uses-permission android:name="android.permission.INTERNET" />
+
+    <application
+        android:icon='@null'
+        android:label='@string/app_name'
+        android:theme='@style/Theme.AppCompat.NoActionBar'>
+
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationId"
+            android:value="@string/facebook_app_id" />
+
+        <activity android:name='.MainActivity'>
+            <intent-filter>
+                <action android:name='android.intent.action.MAIN' />
+                <category android:name='android.intent.category.LAUNCHER' />
+            </intent-filter>
+
+            <!-- Intent filter used for Messenger protocol version 20150311 -->
+            <intent-filter>
+                <action android:name="android.intent.action.PICK" />
+
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="com.facebook.orca.category.PLATFORM_THREAD_20150311" />
+            </intent-filter>
+
+            <!-- Intent filter used for Messenger protocol version 20150314 -->
+            <intent-filter>
+                <action android:name="android.intent.action.PICK" />
+
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="com.facebook.orca.category.PLATFORM_THREAD_20150314" />
+            </intent-filter>
+
+        </activity>
+
+    </application>
 </manifest>
diff --git a/samples/PlacesGraphSample/AndroidManifest.xml b/samples/PlacesGraphSample/AndroidManifest.xml
new file mode 100644
index 000000000..2f75e5a63
--- /dev/null
+++ b/samples/PlacesGraphSample/AndroidManifest.xml
@@ -0,0 +1,92 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.example.places"
+    android:versionCode="1"
+    android:versionName="1.0">
+
+    <!-- The SDK uses the location permissions to retrieve the current device location
+     from the platform. The locations permissions are also used to scan for nearby wifi access
+     points and bluetooth beacons if the corresponding wifi and bluetooth permissions are
+      available -->
+    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
+    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
+
+    <!-- This permission is optional. If present, the SDK will get the currently connected
+     wifi access point to improve the accuracy of the current place request. -->
+    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
+    <!-- This permission is optional. If present, the SDK will scan for nearby wifi access points
+     in order to improve the accuracy of the current place request. -->
+    <uses-permission android:name="android.permission.CHANGE_WIFI_STATE" />
+
+    <!-- These two bluetooth permissions are optional. If present, the SDK will scan nearby
+    Bluetooth Low Energy beacons in order to improve the accuracy of the current place request. -->
+    <uses-permission android:name="android.permission.BLUETOOTH" />
+    <uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
+
+
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.CALL_PHONE" />
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+
+    <application
+        android:icon="@drawable/icon"
+        android:label="@string/app_name"
+        android:theme="@style/AppTheme">
+
+        <!-- This sample app illustrates how to display places on map. Enter your Google Maps Api
+        key below in order to enable the map. -->
+        <meta-data
+            android:name="com.google.android.geo.API_KEY"
+            android:value="@string/google_maps_key" />
+
+        <activity
+            android:name=".MainActivity"
+            android:label="@string/app_name"
+            android:screenOrientation="portrait"
+            android:windowSoftInputMode="stateHidden">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+        <activity
+            android:name="com.facebook.CustomTabActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+
+                <data android:scheme="@string/fb_login_protocol_scheme" />
+            </intent-filter>
+        </activity>
+
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationId"
+            android:value="@string/app_id" />
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationName"
+            android:value="@string/facebook_app_name" />
+
+    </application>
+</manifest>
diff --git a/samples/PlacesGraphSample/build.gradle b/samples/PlacesGraphSample/build.gradle
new file mode 100644
index 000000000..9aa9b166d
--- /dev/null
+++ b/samples/PlacesGraphSample/build.gradle
@@ -0,0 +1,42 @@
+apply plugin: 'com.android.application'
+
+dependencies {
+    compile project(':facebook')
+    compile 'com.android.support:appcompat-v7:24.2.1'
+    compile 'com.android.support:cardview-v7:24.2.1'
+    compile 'com.android.support:design:24.2.1'
+    compile 'com.android.support:recyclerview-v7:24.2.1'
+    compile 'com.google.android.gms:play-services-maps:10.2.0'
+}
+
+android {
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
+
+    defaultConfig {
+        applicationId 'com.example.places'
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+    }
+
+    lintOptions {
+        abortOnError false
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+
+    splits {
+        abi {
+            enable true
+            reset()
+            include 'armeabi', 'armeabi-v7a', 'x86'
+            universalApk true
+        }
+    }
+}
diff --git a/samples/PlacesGraphSample/proguard-project.txt b/samples/PlacesGraphSample/proguard-project.txt
new file mode 100644
index 000000000..f2fe1559a
--- /dev/null
+++ b/samples/PlacesGraphSample/proguard-project.txt
@@ -0,0 +1,20 @@
+# To enable ProGuard in your project, edit project.properties
+# to define the proguard.config property as described in that file.
+#
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in ${sdk.dir}/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the ProGuard
+# include property in project.properties.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/samples/PlacesGraphSample/res/drawable-hdpi/icon.png b/samples/PlacesGraphSample/res/drawable-hdpi/icon.png
new file mode 100644
index 000000000..0a0d7cc73
Binary files /dev/null and b/samples/PlacesGraphSample/res/drawable-hdpi/icon.png differ
diff --git a/samples/PlacesGraphSample/res/drawable-mdpi/icon.png b/samples/PlacesGraphSample/res/drawable-mdpi/icon.png
new file mode 100644
index 000000000..b4507c0e7
Binary files /dev/null and b/samples/PlacesGraphSample/res/drawable-mdpi/icon.png differ
diff --git a/samples/PlacesGraphSample/res/drawable-xhdpi/icon.png b/samples/PlacesGraphSample/res/drawable-xhdpi/icon.png
new file mode 100644
index 000000000..6e8424602
Binary files /dev/null and b/samples/PlacesGraphSample/res/drawable-xhdpi/icon.png differ
diff --git a/samples/PlacesGraphSample/res/drawable/icon.png b/samples/PlacesGraphSample/res/drawable/icon.png
new file mode 100644
index 000000000..b4507c0e7
Binary files /dev/null and b/samples/PlacesGraphSample/res/drawable/icon.png differ
diff --git a/samples/PlacesGraphSample/res/layout/current_place_fragment.xml b/samples/PlacesGraphSample/res/layout/current_place_fragment.xml
new file mode 100644
index 000000000..70a316784
--- /dev/null
+++ b/samples/PlacesGraphSample/res/layout/current_place_fragment.xml
@@ -0,0 +1,52 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <LinearLayout
+        android:id="@+id/current_place_loading_container"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:padding="@dimen/cards_margin"
+        android:orientation="horizontal"
+        android:background="@color/white">
+        <ProgressBar
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content" />
+        <TextView
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_vertical|left"
+            android:layout_margin="@dimen/cardview_padding"
+            android:text="@string/loading"
+            android:textSize="@dimen/body_text_size"/>
+    </LinearLayout>
+
+    <android.support.v7.widget.RecyclerView
+        android:id="@+id/current_place_recyclerview"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:background="@color/white"
+        android:visibility="invisible"/>
+
+</FrameLayout>
diff --git a/samples/PlacesGraphSample/res/layout/current_place_list_item.xml b/samples/PlacesGraphSample/res/layout/current_place_list_item.xml
new file mode 100644
index 000000000..d2c6a2861
--- /dev/null
+++ b/samples/PlacesGraphSample/res/layout/current_place_list_item.xml
@@ -0,0 +1,50 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/place_container"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:layout_gravity="center"
+    android:orientation="vertical"
+    android:clickable="true"
+    android:padding="@dimen/cardview_padding"
+    android:foreground="?attr/selectableItemBackground">
+
+    <TextView
+        android:id="@+id/place_name"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:ellipsize="end"
+        android:maxLines="1"
+        android:textAppearance="@style/TextAppearance.AppCompat.Title"
+        android:textColor="@color/dark_text_color"/>
+
+    <TextView
+        android:id="@+id/place_address"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/place_name"
+        android:ellipsize="end"
+        android:maxLines="1"
+        android:textSize="@dimen/body_text_size" />
+
+</LinearLayout>
diff --git a/samples/PlacesGraphSample/res/layout/login_fragment.xml b/samples/PlacesGraphSample/res/layout/login_fragment.xml
new file mode 100644
index 000000000..0f01f8760
--- /dev/null
+++ b/samples/PlacesGraphSample/res/layout/login_fragment.xml
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:facebook="http://schemas.android.com/apk/res-auto"
+    android:orientation="vertical"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <com.facebook.login.widget.LoginButton
+        android:id="@+id/login_button"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center"
+        facebook:com_facebook_confirm_logout="false"
+        facebook:com_facebook_tooltip_mode="never_display"
+        />
+
+</FrameLayout>
diff --git a/samples/PlacesGraphSample/res/layout/main_activity.xml b/samples/PlacesGraphSample/res/layout/main_activity.xml
new file mode 100644
index 000000000..115c2d605
--- /dev/null
+++ b/samples/PlacesGraphSample/res/layout/main_activity.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<RelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <FrameLayout
+        android:id="@+id/fragment_placeholder"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"/>
+
+</RelativeLayout>
diff --git a/samples/PlacesGraphSample/res/layout/place_info_fragment.xml b/samples/PlacesGraphSample/res/layout/place_info_fragment.xml
new file mode 100644
index 000000000..fdfc5fdb1
--- /dev/null
+++ b/samples/PlacesGraphSample/res/layout/place_info_fragment.xml
@@ -0,0 +1,88 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<android.support.design.widget.CoordinatorLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <android.support.design.widget.AppBarLayout
+        android:id="@+id/place_details_appbarlayout"
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/toolbar_height"
+        android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
+        android:background="@color/primary">
+
+        <android.support.design.widget.CollapsingToolbarLayout
+            android:id="@+id/place_details_toolbarlayout"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            app:layout_scrollFlags="scroll|exitUntilCollapsed"
+            app:contentScrim="@color/primary"
+            app:expandedTitleMarginStart="@dimen/toolbar_margin_start"
+            app:expandedTitleMarginEnd="@dimen/toolbar_margin_end">
+
+            <ImageView
+                android:id="@+id/place_details_cover"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:scaleType="centerCrop"
+                app:layout_collapseMode="parallax" />
+
+            <android.support.v7.widget.Toolbar
+                android:id="@+id/place_details_toolbar"
+                android:layout_height="?attr/actionBarSize"
+                android:layout_width="match_parent"
+                android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
+                app:popupTheme="@style/ThemeOverlay.AppCompat.Light"
+                app:layout_collapseMode="pin"/>
+
+        </android.support.design.widget.CollapsingToolbarLayout>
+
+    </android.support.design.widget.AppBarLayout>
+
+    <android.support.v7.widget.RecyclerView
+        android:id="@+id/place_details_recyclerview"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        app:layout_behavior="@string/appbar_scrolling_view_behavior"
+        android:background="@color/white"/>
+
+    <android.support.design.widget.FloatingActionButton
+        android:id="@+id/place_details_actionbutton"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_margin="@dimen/action_button_margin"
+        android:src="@android:drawable/ic_menu_call"
+        app:borderWidth="0dp"
+        app:layout_anchor="@id/place_details_appbarlayout"
+        app:layout_anchorGravity="bottom|right|end" />
+
+    <ProgressBar
+        android:id="@+id/place_details_progress"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center"
+        android:indeterminate="true"
+        android:visibility="invisible"
+        />
+
+</android.support.design.widget.CoordinatorLayout>
diff --git a/samples/PlacesGraphSample/res/layout/place_info_item.xml b/samples/PlacesGraphSample/res/layout/place_info_item.xml
new file mode 100644
index 000000000..65f66058a
--- /dev/null
+++ b/samples/PlacesGraphSample/res/layout/place_info_item.xml
@@ -0,0 +1,50 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/place_detail_container"
+    android:orientation="vertical"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:paddingLeft="@dimen/cards_margin"
+    android:paddingRight="@dimen/cards_margin"
+    android:paddingTop="@dimen/place_detail_item_margin_vertical"
+    android:paddingBottom="@dimen/place_detail_item_margin_vertical"
+    android:background="?attr/selectableItemBackground" >
+
+    <TextView
+        android:id="@+id/place_detail_title"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="left|top"
+        android:ellipsize="end"
+        android:maxLines="1"
+        android:textColor="@color/primary"/>
+
+    <TextView
+        android:id="@+id/place_detail_text"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_gravity="left|top"
+        android:textSize="@dimen/place_detail_text_size"
+        android:textColor="@color/dark_text_color"/>
+
+</LinearLayout>
diff --git a/samples/PlacesGraphSample/res/layout/place_list_item.xml b/samples/PlacesGraphSample/res/layout/place_list_item.xml
new file mode 100644
index 000000000..e8772a01c
--- /dev/null
+++ b/samples/PlacesGraphSample/res/layout/place_list_item.xml
@@ -0,0 +1,57 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<android.support.v7.widget.CardView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/place_container"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:layout_gravity="center"
+    android:layout_marginBottom="@dimen/cards_margin"
+    android:layout_marginLeft="@dimen/cards_margin"
+    android:layout_marginRight="@dimen/cards_margin"
+    android:foreground="?attr/selectableItemBackground">
+
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_margin="@dimen/cardview_padding">
+
+        <TextView
+            android:id="@+id/place_name"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:ellipsize="end"
+            android:maxLines="1"
+            android:textAppearance="@style/TextAppearance.AppCompat.Title"
+            android:textColor="@color/dark_text_color" />
+
+        <TextView
+            android:id="@+id/place_address"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_below="@+id/place_name"
+            android:ellipsize="end"
+            android:maxLines="1"
+            android:textColor="@color/dark_text_color"
+            android:textSize="@dimen/body_text_size" />
+
+    </RelativeLayout>
+</android.support.v7.widget.CardView>
diff --git a/samples/PlacesGraphSample/res/layout/place_search_fragment.xml b/samples/PlacesGraphSample/res/layout/place_search_fragment.xml
new file mode 100644
index 000000000..41c6a7908
--- /dev/null
+++ b/samples/PlacesGraphSample/res/layout/place_search_fragment.xml
@@ -0,0 +1,119 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<RelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <FrameLayout
+        android:id="@+id/place_search_map_placeholder"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"/>
+
+    <android.support.v7.widget.CardView
+        android:id="@+id/place_search_cardview"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_margin="@dimen/cards_margin">
+        <EditText
+            android:id="@+id/place_search_edittext"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:hint="@string/place_search_hint"
+            android:maxLines="1"
+            android:background="@android:color/transparent"
+            android:inputType="text"
+            android:imeOptions="actionSearch"
+            android:padding="@dimen/cardview_padding"/>
+    </android.support.v7.widget.CardView>
+
+    <android.support.v7.widget.CardView
+        android:id="@+id/current_place_cardview"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_below="@id/place_search_cardview"
+        android:layout_marginLeft="@dimen/cards_margin"
+        android:layout_marginRight="@dimen/cards_margin"
+        android:clickable="true"
+        android:foreground="?attr/selectableItemBackground">
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:padding="@dimen/cardview_padding"
+            android:orientation="vertical">
+            <TextView
+                android:id="@+id/current_place_title"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="@string/add_my_location"
+                android:textAppearance="@style/TextAppearance.AppCompat.Title"
+                android:textColor="@color/dark_text_color"/>
+            <TextView
+                android:id="@+id/current_place_name"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="@dimen/cardview_padding"
+                android:maxLines="1"
+                android:textAppearance="@style/TextAppearance.AppCompat.Title"
+                android:textColor="@color/dark_text_color"
+                android:visibility="gone"/>
+            <TextView
+                android:id="@+id/current_place_address"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:maxLines="1"
+                android:textSize="@dimen/body_text_size"
+                android:visibility="gone"/>
+        </LinearLayout>
+
+    </android.support.v7.widget.CardView>
+
+    <android.support.v7.widget.RecyclerView
+        android:id="@+id/place_search_recyclerview"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_below="@id/current_place_cardview"
+        android:layout_marginTop="@dimen/place_list_margin_top"
+        android:overScrollMode="never"/>
+
+    <android.support.design.widget.FloatingActionButton
+        xmlns:app="http://schemas.android.com/apk/res-auto"
+        android:id="@+id/place_search_toggle_button"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentRight="true"
+        android:layout_margin="@dimen/action_button_margin"
+        android:src="@android:drawable/ic_dialog_map"
+        app:backgroundTint="@color/primary"
+        app:borderWidth="0dp"
+        app:elevation="@dimen/action_button_elevation"
+        app:fabSize="normal"/>
+
+    <ProgressBar
+        android:id="@+id/place_search_progressbar"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_centerInParent="true"
+        android:indeterminate="true"
+        android:visibility="invisible" />
+
+</RelativeLayout>
diff --git a/samples/PlacesGraphSample/res/values/arrays.xml b/samples/PlacesGraphSample/res/values/arrays.xml
new file mode 100644
index 000000000..677a3f609
--- /dev/null
+++ b/samples/PlacesGraphSample/res/values/arrays.xml
@@ -0,0 +1,91 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<resources>
+
+    <string-array name="parking_keys">
+        <item>lot</item>
+        <item>street</item>
+        <item>valet</item>
+    </string-array>
+
+    <string-array name="parking_labels">
+        <item>Lot</item>
+        <item>Street</item>
+        <item>Valet</item>
+    </string-array>
+
+    <string-array name="restaurant_specialties_keys">
+        <item>breakfast</item>
+        <item>coffee</item>
+        <item>dinner</item>
+        <item>drinks</item>
+        <item>lunch</item>
+    </string-array>
+
+    <string-array name="restaurant_specialties_labels">
+        <item>Breakfast</item>
+        <item>Coffee</item>
+        <item>Dinner</item>
+        <item>Drinks</item>
+        <item>Lunch</item>
+    </string-array>
+
+    <string-array name="payment_options_keys">
+        <item>mastercard</item>
+        <item>visa</item>
+        <item>discover</item>
+        <item>amex</item>
+        <item>cash_only</item>
+    </string-array>
+
+    <string-array name="payment_options_labels">
+        <item>Mastercard</item>
+        <item>Visa</item>
+        <item>Discover</item>
+        <item>Amex</item>
+        <item>Cash only</item>
+    </string-array>
+
+    <string-array name="restaurant_services_keys">
+        <item>delivery</item>
+        <item>takeout</item>
+        <item>catering</item>
+        <item>reserve</item>
+        <item>groups</item>
+        <item>kids</item>
+        <item>outdoor</item>
+        <item>waiter</item>
+        <item>walkins</item>
+    </string-array>
+
+    <string-array name="restaurant_services_labels">
+        <item>Delivery</item>
+        <item>Takeout</item>
+        <item>Catering</item>
+        <item>Reservations</item>
+        <item>Groups</item>
+        <item>Kid friendly</item>
+        <item>Outdoor seating</item>
+        <item>Waiter</item>
+        <item>Walkins</item>
+    </string-array>
+
+</resources>
diff --git a/samples/PlacesGraphSample/res/values/colors.xml b/samples/PlacesGraphSample/res/values/colors.xml
new file mode 100644
index 000000000..05c4dd159
--- /dev/null
+++ b/samples/PlacesGraphSample/res/values/colors.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<resources>
+    <color name="primary">#3F51B5</color>
+    <color name="primary_dark">#303F9F</color>
+    <color name="accent">#FF4081</color>
+    <color name="white">#FFFFFF</color>
+    <color name="dark_text_color">#515151</color>
+</resources>
diff --git a/samples/PlacesGraphSample/res/values/dimens.xml b/samples/PlacesGraphSample/res/values/dimens.xml
new file mode 100644
index 000000000..3b0acbaf2
--- /dev/null
+++ b/samples/PlacesGraphSample/res/values/dimens.xml
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+<resources>
+    <dimen name="cards_margin">16dp</dimen>
+    <dimen name="search_resting_elevation">2dp</dimen>
+    <dimen name="search_scrolling_elevation">16dp</dimen>
+    <dimen name="cardview_padding">10dp</dimen>
+    <dimen name="action_button_margin">24dp</dimen>
+    <dimen name="toolbar_margin_start">16dp</dimen>
+    <dimen name="toolbar_margin_end">64dp</dimen>
+    <dimen name="toolbar_height">192dp</dimen>
+    <dimen name="place_list_margin_top">-16dp</dimen>
+    <dimen name="body_text_size">16sp</dimen>
+    <dimen name="current_place_confidence_text_size">12sp</dimen>
+    <dimen name="place_search_list_header_height">32dp</dimen>
+    <dimen name="place_detail_text_size">18sp</dimen>
+    <dimen name="place_detail_item_margin_vertical">5dp</dimen>
+    <dimen name="action_button_elevation">6dp</dimen>
+</resources>
diff --git a/samples/PlacesGraphSample/res/values/strings.xml b/samples/PlacesGraphSample/res/values/strings.xml
new file mode 100644
index 000000000..73deb10b3
--- /dev/null
+++ b/samples/PlacesGraphSample/res/values/strings.xml
@@ -0,0 +1,94 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+
+<resources>
+
+    <!-- Enter your Google Map Api Key here -->
+    <string name="google_maps_key"></string>
+
+    <!-- When using a client token to authenticate, also changes the app_id to your own -->
+    <string name="app_id">1839650616300326</string>
+    <string name="fb_login_protocol_scheme">fb1839650616300326</string>
+
+    <string name="app_name">PlacesGraphSample</string>
+    <string name="facebook_app_name">PlacesGraphAndroidSample</string>
+    <string name="cancelled">Cancelled</string>
+    <string name="permission_not_granted">Unable to perform selected action because permissions were not granted.</string>
+    <string name="ok">OK</string>
+    <string name="yes">Yes</string>
+    <string name="no">No</string>
+    <string name="error">Error</string>
+    <string name="exception">Exception: %1$s</string>
+    <string name="loading">Loading</string>
+    <string name="permission_prompt_location">This sample app requires location access to search for nearby places.</string>
+    <string name="permission_prompt_call_phone">This sample app requires permission to place a phone call.</string>
+    <string name="current_place">Current place</string>
+    <string name="add_my_location">Add my location</string>
+    <string name="place_search_hint">Search for nearby places…</string>
+
+    <string name="location_error_disabled">Location services are disabled. Enable location services to use this application.</string>
+    <string name="location_error_unknown">An error has occurred retrieving the current location.</string>
+
+    <string name="place_info_checkins">%1$d checkins</string>
+    <string name="place_info_is_permanently_closed">Permanently closed</string>
+    <string name="place_info_parking_lot">Parking lot</string>
+    <string name="place_info_parking_street">Street</string>
+    <string name="place_info_parking_valet">Valet</string>
+    <string name="place_info_rating">%1$s stars (%2$d ratings)</string>
+    <string name="place_info_fan_count">%1$d fans</string>
+
+    <string name="place_field_about">About</string>
+    <string name="place_field_address">Address</string>
+    <string name="place_field_app_link">App Link</string>
+    <string name="place_field_categories">Categories</string>
+    <string name="place_field_checkins">Checkins</string>
+    <string name="place_field_description">Description</string>
+    <string name="place_field_engagement">Engagement</string>
+    <string name="place_field_hours">Business hours</string>
+    <string name="place_field_link">Link</string>
+    <string name="place_field_parking">Parking</string>
+    <string name="place_field_payment_options">Payment options</string>
+    <string name="place_field_phone">Phone</string>
+    <string name="place_field_price_range">Price range</string>
+    <string name="place_field_rating">Rating</string>
+    <string name="place_field_rating_count">Rating count</string>
+    <string name="place_field_specialties">Specialties</string>
+    <string name="place_field_services">Services</string>
+    <string name="place_field_website">Website</string>
+
+    <string name="parking_lot">Lot</string>
+    <string name="parking_street">Street</string>
+    <string name="parking_valet">Valet</string>
+
+    <string name="monday">Monday</string>
+    <string name="tuesday">Tuesday</string>
+    <string name="wednesday">Wednesday</string>
+    <string name="thursday">Thursday</string>
+    <string name="friday">Friday</string>
+    <string name="saturday">Saturday</string>
+    <string name="sunday">Sunday</string>
+
+    <string name="place_always_open">This place is open 24H</string>
+    <string name="place_permanently_closed">This place is permanently closed</string>
+
+    <string name="place_app_link">Open this place in Facebook</string>
+
+</resources>
diff --git a/samples/PlacesGraphSample/res/values/styles.xml b/samples/PlacesGraphSample/res/values/styles.xml
new file mode 100644
index 000000000..5b85747b9
--- /dev/null
+++ b/samples/PlacesGraphSample/res/values/styles.xml
@@ -0,0 +1,26 @@
+<resources>
+    <!--
+    Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+
+    You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+    copy, modify, and distribute this software in source code or binary form for use
+    in connection with the web services and APIs provided by Facebook.
+
+    As with any software that integrates with the Facebook platform, your use of
+    this software is subject to the Facebook Developer Principles and Policies
+    [http://developers.facebook.com/policy/]. This copyright notice shall be
+    included in all copies or substantial portions of the software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+-->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar">
+        <item name="colorPrimary">@color/primary</item>
+        <item name="colorPrimaryDark">@color/primary_dark</item>
+        <item name="colorAccent">@color/accent</item>
+    </style>
+</resources>
diff --git a/samples/PlacesGraphSample/src/com/example/places/MainActivity.java b/samples/PlacesGraphSample/src/com/example/places/MainActivity.java
new file mode 100644
index 000000000..983c31d3b
--- /dev/null
+++ b/samples/PlacesGraphSample/src/com/example/places/MainActivity.java
@@ -0,0 +1,282 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.places;
+
+import android.Manifest;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.os.Bundle;
+import android.support.v4.app.ActivityCompat;
+import android.support.v4.app.FragmentTransaction;
+import android.support.v7.app.AlertDialog;
+import android.support.v7.app.AppCompatActivity;
+
+import com.example.places.fragments.PlaceInfoFragment;
+import com.example.places.fragments.PlaceSearchFragment;
+import com.example.places.fragments.LoginFragment;
+import com.example.places.model.Place;
+import com.facebook.AccessToken;
+import com.facebook.FacebookSdk;
+
+/**
+ * This sample application illustrates how to use the Places Graph SDK to:
+ * <ul>
+ *   <li>Retrieve a collection of place candidates along with confidence level estimates, that the
+ * user is at those places.</li>
+ *   <li>Allow the user to provide feedback on the accuracy of the current place estimate.</li>
+ *   <li>Search for nearby places.</li>
+ *   <li>Retrieve detailed place information.</li>
+ *   <li>Retrieve a cover photo associated with a particular place.</li>
+ *   <li>Display places on a map.</li>
+ *</ul>
+ * <p>
+ * {@link PlacesGraphSDKHelper} demonstrates how to create requests with the Places Graph SDK.
+ *
+ * {@link com.example.places.model.Place} and {@link com.example.places.model.PlaceTextUtils}
+ * demonstrates how to parse place information.
+ */
+public class MainActivity extends AppCompatActivity implements LoginFragment.Listener,
+        PlaceSearchFragment.Listener, PlaceInfoFragment.Listener {
+
+    private static final int REQUEST_LOCATION = 0;
+    private static final int REQUEST_CALL_PHONE = 1;
+
+    /**
+     * The Places Graph SDK can be accessed using either a User Access Token or a Client Token.
+     * A User Access Token will require users to login to Facebook, but a Client Token won't.
+     *
+     * This sample app demonstrates how to use both User Access Tokens and Client Tokens.
+     * To use either one, just change the value of {@code authenticationType}
+     * to USER_TOKEN or CLIENT_TOKEN.
+     */
+    private enum AuthenticationType {
+        USER_TOKEN,
+        CLIENT_TOKEN,
+    };
+
+    /**
+     * This variable specifies whether the sample app uses a User Access Token or a Client Token.
+     *
+     * Change it to AuthenticationType.CLIENT_TOKEN to use a Client Token.
+     *
+     * To use a client token, you will also need to: update "app_id" in strings.xml to
+     * the application ID of your app, and then update the CLIENT_TOKEN constant in this class to
+     * the value of your app client token. You can find the client token value on the Developer
+     * Portal page of your app, under the Advanced Settings section.
+     */
+    private final AuthenticationType authenticationType = AuthenticationType.USER_TOKEN;
+
+    /**
+     * To use client token authentication, get your app client token from the developer
+     * portal, and enter it below. The client token is available under your application page in the
+     * Developer Portal, under the Advanced Settings section. Note that you must also change
+     * the app_id to your own Application ID in the file "strings.xml".
+     */
+    private static final String CLIENT_TOKEN = "";
+
+    private Intent callPhoneIntent;
+
+    public void onCreate(Bundle bundle) {
+        super.onCreate(bundle);
+
+        setContentView(R.layout.main_activity);
+
+        /**
+         * You can use the Places Graph SDK with either a User Access Token, or a Client Token.
+         * By default, this code sample is configured to use a User Access Token.
+         */
+        if (authenticationType == AuthenticationType.USER_TOKEN) {
+            AccessToken accessToken = AccessToken.getCurrentAccessToken();
+            if (accessToken == null) {
+                /**
+                 * When a User Access Token is used, and if the token is not present,
+                 * then prompt the user to log into Facebook.
+                 */
+                displayLoginFragment();
+            } else {
+                displayPlaceListFragment();
+            }
+        } else {
+            /**
+             * When a Client Token is used, set the client token to the Facebook SDK class
+             * as illustrated below. Users do not need to log into Facebook. PlaceManager requests
+             * can be placed once the client token has been set.
+             */
+            FacebookSdk.setClientToken(CLIENT_TOKEN);
+            displayPlaceListFragment();
+        }
+    }
+
+    public void onStart() {
+        super.onStart();
+        if (!hasLocationPermission()) {
+            requestLocationPermission();
+        }
+    }
+
+    private void requestLocationPermission() {
+        /*
+         * Prompts the user to grant location permissions. This sample app uses the
+         * device's' location to get the current place from the Place Graph SDK,
+         * and to perform local place searches.
+         */
+        if (ActivityCompat.shouldShowRequestPermissionRationale(
+            this,
+            Manifest.permission.ACCESS_FINE_LOCATION)) {
+
+            AlertDialog.Builder builder = new AlertDialog.Builder(this);
+            builder.setMessage(R.string.permission_prompt_location);
+            builder.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialog, int which) {
+                    ActivityCompat.requestPermissions(
+                            MainActivity.this,
+                            new String[]{Manifest.permission.ACCESS_FINE_LOCATION,
+                                    Manifest.permission.ACCESS_COARSE_LOCATION},
+                            REQUEST_LOCATION);
+                }
+            });
+            builder.create().show();
+        } else {
+            ActivityCompat.requestPermissions(
+                    this,
+                    new String[]{Manifest.permission.ACCESS_FINE_LOCATION,
+                            Manifest.permission.ACCESS_COARSE_LOCATION},
+                    REQUEST_LOCATION);
+        }
+    }
+
+    @Override
+    public void onRequestPermissionsResult(
+            int requestCode,
+            String[] permissions,
+            int[] grantResults) {
+        if (requestCode == REQUEST_CALL_PHONE) {
+            try {
+                if (callPhoneIntent != null) {
+                    startActivity(callPhoneIntent);
+                    callPhoneIntent = null;
+                }
+            } catch (SecurityException e) {
+                callPhoneIntent = null;
+                // ignore
+            }
+        } else {
+            super.onRequestPermissionsResult(requestCode, permissions, grantResults);
+        }
+    }
+
+    @Override
+    public void onLoginComplete() {
+        // Event invoked by the LoginFragment when login completes.
+        displayPlaceListFragment();
+    }
+
+    @Override
+    public void onPlaceSelected(Place place) {
+        // Event invoked by the PlaceSearchFragment when a place is selected.
+        displayPlaceInfoFragment(place);
+    }
+
+    @Override
+    public void onLocationPermissionsError() {
+        // Event invoked by the PlaceSearchFragment when the Places Graph SDK fails to retrieve
+        // the current device location due to missing location permissions.
+        requestLocationPermission();
+    }
+
+    private void displayPlaceListFragment() {
+        PlaceSearchFragment placeListFragment = PlaceSearchFragment.newInstance();
+        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
+        transaction.replace(R.id.fragment_placeholder, placeListFragment);
+        transaction.commit();
+    }
+
+    private void displayLoginFragment() {
+        LoginFragment loginFragment = LoginFragment.newInstance();
+        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
+        transaction.replace(R.id.fragment_placeholder, loginFragment);
+        transaction.commit();
+    }
+
+    private void displayPlaceInfoFragment(Place place) {
+        PlaceInfoFragment placeInfoFragment = PlaceInfoFragment.newInstance();
+        Bundle bundle = new Bundle();
+        bundle.putParcelable(PlaceInfoFragment.EXTRA_PLACE, place);
+        placeInfoFragment.setArguments(bundle);
+        getSupportFragmentManager()
+                .beginTransaction()
+                .add(R.id.fragment_placeholder, placeInfoFragment, "details")
+                .addToBackStack(place.get(Place.NAME))
+                .commit();
+    }
+
+    @Override
+    public void onCallPhone(final Intent intent) {
+        /*
+         * Prompts the user for permission to place a phone call, and then places the call.
+         */
+        if (hasPermission(Manifest.permission.CALL_PHONE)) {
+            startActivity(intent);
+        } else if (ActivityCompat.shouldShowRequestPermissionRationale(
+            this,
+            Manifest.permission.CALL_PHONE)) {
+
+            AlertDialog.Builder builder = new AlertDialog.Builder(this);
+            builder.setMessage(R.string.permission_prompt_call_phone);
+            builder.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialog, int which) {
+                    callPhoneIntent = intent;
+                    ActivityCompat.requestPermissions(
+                            MainActivity.this,
+                            new String[]{Manifest.permission.CALL_PHONE},
+                            REQUEST_CALL_PHONE);
+                }
+            });
+            builder.create().show();
+        } else {
+            callPhoneIntent = intent;
+            ActivityCompat.requestPermissions(
+                    this,
+                    new String[]{Manifest.permission.CALL_PHONE},
+                    REQUEST_CALL_PHONE);
+        }
+    }
+
+    private boolean hasPermission(String permission) {
+        return ActivityCompat.checkSelfPermission(this, permission)
+                == PackageManager.PERMISSION_GRANTED;
+    }
+
+    @Override
+    public boolean hasLocationPermission() {
+        return hasPermission(Manifest.permission.ACCESS_FINE_LOCATION)
+                || hasPermission(Manifest.permission.ACCESS_COARSE_LOCATION);
+    }
+
+    @Override
+    public boolean onSupportNavigateUp() {
+        onBackPressed();
+        return true;
+    }
+}
diff --git a/samples/PlacesGraphSample/src/com/example/places/PlacesGraphSDKHelper.java b/samples/PlacesGraphSample/src/com/example/places/PlacesGraphSDKHelper.java
new file mode 100644
index 000000000..8c2e7bbe4
--- /dev/null
+++ b/samples/PlacesGraphSample/src/com/example/places/PlacesGraphSDKHelper.java
@@ -0,0 +1,492 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.places;
+
+import android.support.annotation.Nullable;
+import android.util.Log;
+
+import com.example.places.model.CurrentPlaceResult;
+import com.example.places.model.Place;
+import com.example.places.utils.BitmapDownloadTask;
+import com.facebook.AccessToken;
+import com.facebook.FacebookRequestError;
+import com.facebook.FacebookSdk;
+import com.facebook.GraphRequest;
+import com.facebook.GraphResponse;
+import com.facebook.places.PlaceManager;
+import com.facebook.places.model.CurrentPlaceFeedbackRequestParams;
+import com.facebook.places.model.CurrentPlaceRequestParams;
+import com.facebook.places.model.PlaceFields;
+import com.facebook.places.model.PlaceInfoRequestParams;
+import com.facebook.places.model.PlaceSearchRequestParams;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * This class illustrates how to use the Places Graph SDK to:
+ * <ul>
+ *   <li>Get the current place.</li>
+ *   <li>Provide feedback on the current place response.</li>
+ *   <li>Search places.</li>
+ *   <li>Fetch detailed place info.</li>
+ *</ul>
+ * This class also illustrates how to parse the responses of the Places Graph SDK.
+ */
+public class PlacesGraphSDKHelper {
+
+    private static final String TAG = "PlacesGraphSDKHelper";
+    private static final String PARAM_DATA = "data";
+
+    /**
+     * These are the place fields that are fetched in the place info request.
+     */
+    private static final String[] PLACE_INFO_REQUEST_FIELDS = new String[]{
+            Place.ID,
+            Place.NAME,
+            Place.DESCRIPTION,
+            Place.CHECKINS,
+            Place.ABOUT,
+            Place.ENGAGEMENT,
+            Place.HOURS,
+            Place.COVER,
+            Place.IS_ALWAYS_OPEN,
+            Place.IS_PERMANENTLY_CLOSED,
+            Place.IS_VERIFIED,
+            Place.LINK,
+            Place.APP_LINKS,
+            Place.OVERALL_STAR_RATING,
+            Place.PARKING,
+            Place.RESTAURANT_SPECIALTIES,
+            Place.WEBSITE,
+            Place.LOCATION,
+            Place.PHONE,
+            Place.PRICE_RANGE,
+            Place.RATING_COUNT,
+            Place.CATEGORY_LIST,
+            Place.RESTAURANT_SERVICES,
+            Place.PAYMENT_OPTIONS,
+            Place.WORKFLOWS,
+            Place.SINGLE_LINE_ADDRESS,
+    };
+
+    /**
+     * Defines the listener invoked when the current place response is received.
+     */
+    public interface CurrentPlaceRequestListener {
+
+        /**
+         * Invoked when the current place response is received.
+         *
+         * @param result This object contains the list of places, and the tracking ID parsed
+         *  from the current place response; or it contains null if the request fails.
+         * @param response The Places Graph response.
+         */
+        void onCurrentPlaceResult(
+                @Nullable CurrentPlaceResult result,
+                GraphResponse response);
+
+        /**
+         * Invoked when the Places Graph SDK fails to retrieve the current location.
+         * @param error Contains a message that explains why retrieving the location failed.
+         */
+        void onLocationError(PlaceManager.LocationError error);
+    }
+
+    /**
+     * Defines the listener invoked when the place search response is received.
+     */
+    public interface PlaceSearchRequestListener {
+
+        /**
+         * Invoked when the place search response has been received.
+         *
+         * @param places The list of places parsed from the response,
+         *               or contains null if the request fails.
+         * @param response The Places Graph response.
+         */
+        void onPlaceSearchResult(@Nullable List<Place> places, GraphResponse response);
+
+        /**
+         * Invoked when the Places Graph SDK fails to retrieve the current location.
+         * @param error Contains the reason why retrieving the location failed.
+         */
+        void onLocationError(PlaceManager.LocationError error);
+    }
+
+    /**
+     * Defines the listener invoked when the place info response is received.
+     */
+    public interface PlaceInfoRequestListener {
+
+        /**
+         * Invoked when the place info response is received.
+         *
+         * @param place The place instance parsed from the response,
+         *              or contains null if the request fails.
+         * @param response The Places Graph response.
+         */
+        void onPlaceInfoResult(@Nullable Place place, GraphResponse response);
+    }
+
+    /**
+     * Creates and executes a place search request.
+     * @param searchQuery The text search term. This can be null to let the Places Graph SDK
+     *                    return nearby places.
+     * @param listener Invoked when the place search response is received,
+     *                 and when the place search request fails.
+     */
+    public static void searchPlace(String searchQuery, PlaceSearchRequestListener listener) {
+
+        // Creates the place search request builder.
+        PlaceSearchRequestParams.Builder builder = new PlaceSearchRequestParams.Builder();
+        // Specifies the text search query. This field is optional. If you don't specify it,
+        // then places of importance within the maximum distance radius will be returned.
+        builder.setSearchText(searchQuery);
+        // The maximum search radius in meters.
+        builder.setDistance(1000);
+        // The maximum number of places to return.
+        builder.setLimit(10);
+        // The place fields to be returned.
+        builder.addField(Place.NAME);
+        builder.addField(Place.LOCATION);
+        builder.addField(Place.PHONE);
+
+        // Creates the callback invoked when the request is ready.
+        OnPlaceSearchRequestReadyCallback onRequestReadyCallback =
+                new OnPlaceSearchRequestReadyCallback(listener);
+
+        // The Places Graph SDK starts retrieving the current device location, and constructs
+        // the GraphRequest. The callback is invoked once the request is ready.
+        PlaceManager.newPlaceSearchRequest(builder.build(), onRequestReadyCallback);
+    }
+
+    private static class OnPlaceSearchRequestReadyCallback
+            implements PlaceManager.OnRequestReadyCallback, GraphRequest.Callback {
+
+        private final WeakReference<PlaceSearchRequestListener> listenerRef;
+
+        OnPlaceSearchRequestReadyCallback(PlaceSearchRequestListener listener) {
+            listenerRef = new WeakReference<>(listener);
+        }
+
+        @Override
+        public void onLocationError(PlaceManager.LocationError error) {
+            // Invoked if the Places Graph SDK fails to retrieve the device location.
+            PlaceSearchRequestListener listener = listenerRef.get();
+            if (listener == null) {
+                Log.d(TAG, "listener is null!");
+            } else {
+                listener.onLocationError(error);
+            }
+        }
+
+        @Override
+        public void onRequestReady(GraphRequest graphRequest) {
+
+            // The place search request is ready to be executed.
+            // The request can be customized here if needed.
+
+            // Sets the callback, and executes the request.
+            graphRequest.setCallback(this);
+            graphRequest.executeAsync();
+        }
+
+        @Override
+        public void onCompleted(GraphResponse response) {
+            // Event invoked when the place search response is received.
+
+            List<Place> places = null;
+
+            FacebookRequestError error = response.getError();
+            if (error == null) {
+                // Parses the place search response.
+                try {
+                    JSONObject jsonObject = response.getJSONObject();
+                    if (jsonObject != null) {
+                        JSONArray jsonArray = jsonObject.optJSONArray(PARAM_DATA);
+                        if (jsonArray != null) {
+                            int length = jsonArray.length();
+                            places = new ArrayList<>(length);
+                            for (int i = 0; i < length; i++) {
+                                places.add(new Place(jsonArray.getJSONObject(i)));
+                            }
+                        }
+                    }
+                } catch (JSONException e) {
+                    Log.e(TAG, "failed to parse place the place search response", e);
+                }
+            } else {
+                // The error object contains more information on the error.
+                Log.d(TAG, "response error: " + error);
+            }
+
+            PlaceSearchRequestListener listener = listenerRef.get();
+            if (listener == null) {
+                Log.d(TAG, "no listener!");
+            } else {
+                listener.onPlaceSearchResult(places, response);
+            }
+        }
+    }
+
+    /**
+     * Creates and executes a current place request.
+     * This request is used to determine the place where the user is currently located.
+     *
+     * @param listener Listener invoked when the current place response is received.
+     */
+    public static void getCurrentPlace(CurrentPlaceRequestListener listener) {
+
+        // Creates the current place request builder.
+        CurrentPlaceRequestParams.Builder builder =
+                new CurrentPlaceRequestParams.Builder();
+
+        // Specifies the minimum confidence level of the results.
+        builder.setMinConfidenceLevel(CurrentPlaceRequestParams.ConfidenceLevel.LOW);
+        // Specifies the maximum number of places returned.
+        builder.setLimit(10);
+        // Specifies the place fields returned.
+        builder.addField(PlaceFields.NAME);
+        builder.addField(PlaceFields.CONFIDENCE_LEVEL);
+        builder.addField(PlaceFields.LOCATION);
+        builder.addField(PlaceFields.PHONE);
+
+        OnCurrentPlaceRequestReadyCallback callback =
+                new OnCurrentPlaceRequestReadyCallback(listener);
+
+        PlaceManager.newCurrentPlaceRequest(builder.build(), callback);
+    }
+
+    private static class OnCurrentPlaceRequestReadyCallback
+            implements PlaceManager.OnRequestReadyCallback, GraphRequest.Callback {
+
+        private final WeakReference<CurrentPlaceRequestListener> listenerRef;
+
+        private OnCurrentPlaceRequestReadyCallback(CurrentPlaceRequestListener listener) {
+            listenerRef = new WeakReference<>(listener);
+        }
+
+        @Override
+        public void onRequestReady(GraphRequest graphRequest) {
+
+            // The current place request is ready. The request can be customized here.
+            // Define the callback that will handle and parse the response,
+            // and then execute the request.
+            graphRequest.setCallback(this);
+            graphRequest.executeAsync();
+        }
+
+        @Override
+        public void onCompleted(GraphResponse response) {
+
+            FacebookRequestError error = response.getError();
+
+            // Parses the current place response. CurrentPlaceResult is used in
+            // the sample app to illustrate how to parse the list of places, and
+            // how to parse the tracking ID from the current place response.
+
+            CurrentPlaceResult result = null;
+            if (error == null) {
+                try {
+                    JSONObject jsonObject = response.getJSONObject();
+                    if (jsonObject != null) {
+                        result = CurrentPlaceResult.fromJson(jsonObject);
+                    }
+                } catch (JSONException e) {
+                    Log.e(TAG, "error while parsing current place response", e);
+                }
+            } else {
+                Log.d(TAG, "response error: " + error);
+            }
+
+            CurrentPlaceRequestListener listener = listenerRef.get();
+            if (listener == null) {
+                Log.d(TAG, "no listener");
+            } else {
+                listener.onCurrentPlaceResult(result, response);
+            }
+        }
+
+        @Override
+        public void onLocationError(PlaceManager.LocationError error) {
+            CurrentPlaceRequestListener listener = listenerRef.get();
+            if (listener == null) {
+                Log.d(TAG, "listener is null!");
+            } else {
+                listener.onLocationError(error);
+            }
+        }
+    }
+
+    /**
+     * Creates and executes a current place feedback request. This request is used to provide
+     * feedback on the accuracy of the current place response.
+     *
+     * @param currentPlaceResult The result of the current place request.
+     * @param place The place where the user is (or isn't') located.
+     * @param wasHere true to indicate that the user is located at the place, and
+     * false to indicate that the user is not located at the place.
+     */
+    public static void provideCurrentPlaceFeedback(
+            final CurrentPlaceResult currentPlaceResult,
+            final Place place,
+            final boolean wasHere) {
+
+        // Creates the builder of the current place feedback request.
+        CurrentPlaceFeedbackRequestParams.Builder builder =
+                new CurrentPlaceFeedbackRequestParams.Builder();
+
+        /**
+         * Sets the tracking ID, which is used as a correlator to the current place response.
+         * The tracking ID is retrieved from the current place response.
+          */
+        builder.setTracking(currentPlaceResult.getTracking());
+
+        // The place at which the user is (or is not) located.
+        String placeId = place.get(Place.ID);
+        builder.setPlaceId(placeId);
+
+        // Indicates if the user is or is not at the place.
+        builder.setWasHere(wasHere);
+
+        GraphRequest request = PlaceManager.newCurrentPlaceFeedbackRequest(builder.build());
+
+        GraphRequest.Callback callback = new GraphRequest.Callback() {
+            @Override
+            public void onCompleted(GraphResponse response) {
+                boolean success = false;
+                FacebookRequestError error = response.getError();
+                if (error == null) {
+                    JSONObject jsonObject = response.getJSONObject();
+                    success = jsonObject.optBoolean("success");
+                } else {
+                    Log.d(TAG, "response error: " + error);
+                }
+                Log.d(
+                        TAG,
+                        "provideCurrentPlaceFeedback: onCompleted: response: success=" + success);
+            }
+        };
+        request.setCallback(callback);
+
+        request.executeAsync();
+    }
+
+    /**
+     * Creates and executes a Place Info request on the Places Graph SDK.
+     *
+     * @param place Specifies the place for retrieving additional fields.
+     * @param listener The listener invoked when the place details have been fetched.
+     */
+    public static void fetchPlaceInfo(Place place, PlaceInfoRequestListener listener) {
+
+        // Creates the builder for the place info request.
+        PlaceInfoRequestParams.Builder builder = new PlaceInfoRequestParams.Builder();
+
+        // Specifies the ID of the place to fetch information about.
+        String placeId = place.get(Place.ID);
+        builder.setPlaceId(placeId);
+        /**
+         * Specifies the fields to be fetched. Note the fields are defined in {@link PlaceFields}
+         * as String constants. Refer to the Places Graph online documentation to see the
+         * complete list of fields.
+         */
+        builder.addFields(PLACE_INFO_REQUEST_FIELDS);
+
+        // Create the place information request.
+        final GraphRequest request = PlaceManager.newPlaceInfoRequest(builder.build());
+
+        // Define the callback that will parse the response.
+        request.setCallback(new OnPlaceInfoResponseCallback(listener));
+        request.executeAsync();
+    }
+
+    /**
+     * Callback used to parse the place information response.
+     */
+    private static class OnPlaceInfoResponseCallback implements GraphRequest.Callback {
+
+        private final WeakReference<PlaceInfoRequestListener> listenerRef;
+
+        private OnPlaceInfoResponseCallback(PlaceInfoRequestListener listener) {
+            listenerRef = new WeakReference<>(listener);
+        }
+
+        @Override
+        public void onCompleted(GraphResponse response) {
+
+            Place place = null;
+
+            // The place object is used in the sample app to parse the JSON response
+            // from the Places Graph.
+            FacebookRequestError error = response.getError();
+            if (error == null) {
+                try {
+                    JSONObject jsonObject = response.getJSONObject();
+                    if (jsonObject != null) {
+                        place = new Place(jsonObject);
+                    }
+                } catch (Exception e) {
+                    Log.e(TAG, "failed to parse place info", e);
+                }
+            } else {
+                Log.d(TAG, "response error: " + error);
+            }
+
+            PlaceInfoRequestListener listener = listenerRef.get();
+            if (listener == null) {
+                Log.d(TAG, "no listener");
+            } else {
+                listener.onPlaceInfoResult(place, response);
+            }
+        }
+    }
+
+    /**
+     * Illustrates how to download the cover photo of a given place.
+     *
+     * @param place Specifies the place associated with the cover photo.
+     *              The place must have a COVER field. See {@link PlaceFields}.
+     * @param listener The listener invoked when the cover photo is downloaded.
+     * @return true if the download is initiated. false if the place does not have a COVER field.
+     */
+    public static boolean downloadPlaceCoverPhoto(
+            Place place,
+            BitmapDownloadTask.Listener listener) {
+        /**
+         * In your applications, use Fresco to download, load, cache, and display images.
+         * https://github.com/facebook/fresco
+         */
+        String coverPhotoUrl = place.getCoverPhotoUrl();
+        if (coverPhotoUrl == null) {
+            return false;
+        }
+        BitmapDownloadTask bitmapDownloadTask = new BitmapDownloadTask(coverPhotoUrl, listener);
+        FacebookSdk.getExecutor().execute(bitmapDownloadTask);
+        return true;
+    }
+}
diff --git a/samples/PlacesGraphSample/src/com/example/places/adapters/PlaceDetailsAdapter.java b/samples/PlacesGraphSample/src/com/example/places/adapters/PlaceDetailsAdapter.java
new file mode 100644
index 000000000..3808161db
--- /dev/null
+++ b/samples/PlacesGraphSample/src/com/example/places/adapters/PlaceDetailsAdapter.java
@@ -0,0 +1,101 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.places.adapters;
+
+import android.content.Context;
+import android.support.v7.widget.RecyclerView;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import com.example.places.R;
+import com.example.places.utils.PlaceFieldData;
+
+import java.util.List;
+
+public class PlaceDetailsAdapter extends
+        RecyclerView.Adapter<PlaceDetailsAdapter.PlaceDetailViewHolder> {
+
+    private List<PlaceFieldData> fields;
+    private Listener listener;
+
+    public interface Listener {
+        void onPlaceFieldSelected(PlaceFieldData placeFieldData);
+    }
+
+    public class PlaceDetailViewHolder extends RecyclerView.ViewHolder
+            implements View.OnClickListener {
+
+        private View container;
+        private TextView title;
+        private TextView text;
+        private PlaceFieldData currentPlaceFieldData;
+
+        public PlaceDetailViewHolder(View itemView) {
+            super(itemView);
+            container = itemView.findViewById(R.id.place_detail_container);
+            title = (TextView) itemView.findViewById(R.id.place_detail_title);
+            text = (TextView) itemView.findViewById(R.id.place_detail_text);
+        }
+
+        void update(PlaceFieldData placeFieldData) {
+            currentPlaceFieldData = placeFieldData;
+            title.setText(placeFieldData.getTitle());
+            text.setText(placeFieldData.getText());
+            if (placeFieldData.isClickable()) {
+                container.setOnClickListener(this);
+            } else {
+                container.setOnClickListener(null);
+            }
+        }
+
+        @Override
+        public void onClick(View v) {
+            listener.onPlaceFieldSelected(currentPlaceFieldData);
+        }
+    }
+
+    public PlaceDetailsAdapter(Listener listener, List<PlaceFieldData> fields) {
+        this.listener = listener;
+        this.fields = fields;
+    }
+
+    @Override
+    public PlaceDetailViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+        Context context = parent.getContext();
+        LayoutInflater inflater = LayoutInflater.from(context);
+        View view = inflater.inflate(R.layout.place_info_item, parent, false);
+        PlaceDetailViewHolder viewHolder = new PlaceDetailViewHolder(view);
+        return viewHolder;
+    }
+
+    @Override
+    public int getItemCount() {
+        return fields.size();
+    }
+
+    @Override
+    public void onBindViewHolder(PlaceDetailViewHolder holder, int position) {
+        PlaceFieldData field = fields.get(position);
+        holder.update(field);
+    }
+}
diff --git a/samples/PlacesGraphSample/src/com/example/places/adapters/PlaceListAdapter.java b/samples/PlacesGraphSample/src/com/example/places/adapters/PlaceListAdapter.java
new file mode 100644
index 000000000..9d6904aa6
--- /dev/null
+++ b/samples/PlacesGraphSample/src/com/example/places/adapters/PlaceListAdapter.java
@@ -0,0 +1,99 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.places.adapters;
+
+import android.content.Context;
+import android.support.v7.widget.CardView;
+import android.support.v7.widget.RecyclerView;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import com.example.places.R;
+import com.example.places.model.Place;
+import com.example.places.model.PlaceTextUtils;
+
+import java.util.List;
+
+public class PlaceListAdapter extends RecyclerView.Adapter<PlaceListAdapter.PlaceViewHolder> {
+
+    private List<Place> places;
+    private Listener listener;
+    private int layoutId;
+
+    public interface Listener {
+        void onPlaceSelected(Place place);
+    }
+
+    public class PlaceViewHolder extends RecyclerView.ViewHolder {
+        private View container;
+        private TextView placeNameTextView;
+        private TextView placeAddressTextView;
+        private Place currentPlace;
+
+        public PlaceViewHolder(View itemView) {
+            super(itemView);
+            container = itemView.findViewById(R.id.place_container);
+            placeNameTextView = (TextView) itemView.findViewById(R.id.place_name);
+            placeAddressTextView =
+                    (TextView) itemView.findViewById(R.id.place_address);
+            container.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    listener.onPlaceSelected(currentPlace);
+                }
+            });
+        }
+
+        void refresh(Place place) {
+            this.currentPlace = place;
+            placeNameTextView.setText(place.get(Place.NAME));
+            placeAddressTextView.setText(PlaceTextUtils.getAddress(place));
+        }
+    }
+
+    public PlaceListAdapter(int laoyutId, List<Place> places, Listener listener) {
+        this.layoutId = laoyutId;
+        this.places = places;
+        this.listener = listener;
+    }
+
+    @Override
+    public PlaceViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+        Context context = parent.getContext();
+        LayoutInflater inflater = LayoutInflater.from(context);
+        View view = inflater.inflate(layoutId, parent, false);
+        PlaceViewHolder viewHolder = new PlaceViewHolder(view);
+        return viewHolder;
+    }
+
+    @Override
+    public void onBindViewHolder(PlaceViewHolder holder, int position) {
+        Place place = places.get(position);
+        holder.refresh(place);
+    }
+
+    @Override
+    public int getItemCount() {
+        return places.size();
+    }
+}
diff --git a/samples/PlacesGraphSample/src/com/example/places/fragments/CurrentPlaceDialogFragment.java b/samples/PlacesGraphSample/src/com/example/places/fragments/CurrentPlaceDialogFragment.java
new file mode 100644
index 000000000..7d1f1dfdb
--- /dev/null
+++ b/samples/PlacesGraphSample/src/com/example/places/fragments/CurrentPlaceDialogFragment.java
@@ -0,0 +1,171 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.places.fragments;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.support.v4.app.DialogFragment;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Toast;
+
+import com.example.places.PlacesGraphSDKHelper;
+import com.example.places.R;
+import com.example.places.adapters.PlaceListAdapter;
+import com.example.places.model.CurrentPlaceResult;
+import com.example.places.model.Place;
+import com.facebook.GraphResponse;
+import com.facebook.places.PlaceManager;
+
+/**
+ * This dialog fragment illustrates how to:
+ * <ul>
+ *   <li>Fetch a collection of current place candidates where the user might be located.</li>
+ *   <li>Display a list of current place candidates.</li>
+ *   <li>Provide feedback about the current place estimate.</li>
+ * </ul>
+ */
+public class CurrentPlaceDialogFragment extends DialogFragment implements
+        PlaceListAdapter.Listener {
+
+    public static final String EXTRA_CURRENT_PLACE = "current_place";
+
+    private RecyclerView recyclerView;
+    private View loadingView;
+    private CurrentPlaceResult currentPlaceResult;
+    private CurrentPlaceRequestListener currentPlaceRequestListener
+            = new CurrentPlaceRequestListener();
+
+    public static CurrentPlaceDialogFragment newInstance() {
+        return new CurrentPlaceDialogFragment();
+    }
+
+    @Override
+    public void onDetach() {
+        super.onDetach();
+        currentPlaceRequestListener = null;
+    }
+
+    public View onCreateView(
+            LayoutInflater inflater,
+            @Nullable ViewGroup container,
+            Bundle savedInstanceState) {
+        getDialog().setTitle(getString(R.string.current_place));
+        return inflater.inflate(R.layout.current_place_fragment, container, false);
+    }
+
+    @Override
+    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
+        super.onViewCreated(view, savedInstanceState);
+
+        recyclerView = (RecyclerView) view.findViewById(R.id.current_place_recyclerview);
+        recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
+        loadingView = view.findViewById(R.id.current_place_loading_container);
+
+        getCurrentPlace();
+    }
+
+    private void getCurrentPlace() {
+        PlacesGraphSDKHelper.getCurrentPlace(currentPlaceRequestListener);
+    }
+
+    @Override
+    public void onPlaceSelected(Place place) {
+
+        // Provides feedback to the Places Graph once the user confirms presence at
+        // a place. This feedback helps Facebook improve the accuracy of current place estimates.
+        PlacesGraphSDKHelper.provideCurrentPlaceFeedback(
+                currentPlaceResult,
+                place,
+                true);
+
+        Intent data = new Intent();
+        data.putExtra(EXTRA_CURRENT_PLACE, place);
+
+        getTargetFragment().onActivityResult(
+                getTargetRequestCode(),
+                Activity.RESULT_OK,
+                data);
+
+        dismiss();
+    }
+
+    private void refreshCurrentPlaceList(CurrentPlaceResult result) {
+        currentPlaceResult = result;
+
+        PlaceListAdapter adapter = new PlaceListAdapter(
+                R.layout.current_place_list_item,
+                result.getPlaces(),
+                this);
+
+        recyclerView.setAdapter(adapter);
+        recyclerView.setVisibility(View.VISIBLE);
+        loadingView.setVisibility(View.GONE);
+    }
+
+    private class CurrentPlaceRequestListener
+            implements PlacesGraphSDKHelper.CurrentPlaceRequestListener {
+
+        @Override
+        public void onCurrentPlaceResult(
+                @Nullable final CurrentPlaceResult result,
+                final GraphResponse response) {
+
+            if (isAdded()) {
+                getActivity().runOnUiThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        if (result == null) {
+                            Toast.makeText(
+                                    getActivity(),
+                                    R.string.error,
+                                    Toast.LENGTH_SHORT).show();
+                            dismiss();
+                        } else {
+                            refreshCurrentPlaceList(result);
+                        }
+                    }
+                });
+            }
+        }
+
+        @Override
+        public void onLocationError(PlaceManager.LocationError error) {
+            if (isAdded()) {
+                getActivity().runOnUiThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        Toast.makeText(
+                                getActivity(),
+                                R.string.location_error_unknown,
+                                Toast.LENGTH_SHORT).show();
+                        dismiss();
+                    }
+                });
+            }
+        }
+    }
+}
diff --git a/samples/PlacesGraphSample/src/com/example/places/fragments/LoginFragment.java b/samples/PlacesGraphSample/src/com/example/places/fragments/LoginFragment.java
new file mode 100644
index 000000000..fc81046e8
--- /dev/null
+++ b/samples/PlacesGraphSample/src/com/example/places/fragments/LoginFragment.java
@@ -0,0 +1,141 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.places.fragments;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.support.v4.app.Fragment;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.example.places.R;
+import com.facebook.CallbackManager;
+import com.facebook.FacebookCallback;
+import com.facebook.FacebookException;
+import com.facebook.login.LoginResult;
+import com.facebook.login.widget.LoginButton;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * This fragment implements login to Facebook. This step is optional when
+ * using the Places Graph SDK.
+ *
+ * The Places Graph SDK supports two types of authentication tokens:
+ * <ul>
+ *     <li>Client Token: these do NOT require users to log in Facebook.
+ * Refer to {@link com.example.places.MainActivity} to see how to use a Client Token.</li>
+ *     <li>User Access Token: these are the tokens obtained when a user logs into Facebook.
+ *     This fragment illustrates how to login to Facebook and get a user token.
+ *     For more information about Facebook login, see the "HelloFacebookSample".</li>
+ * </ul>
+ */
+public class LoginFragment extends Fragment {
+
+    private static final String TAG = "LoginFragment";
+    private static final String PUBLIC_PERMISSION = "public_profile";
+
+    private Listener listener;
+    private CallbackManager callbackManager;
+
+    public interface Listener {
+        void onLoginComplete();
+    }
+
+    public static LoginFragment newInstance() {
+        return new LoginFragment();
+    }
+
+    public void onAttach(Context context) {
+        super.onAttach(context);
+        if (context instanceof Activity) {
+            listener = (Listener) context;
+        }
+    }
+
+    public void onDestroy() {
+        super.onDestroy();
+        listener = null;
+    }
+
+    @Nullable
+    @Override
+    public View onCreateView(
+            LayoutInflater inflater,
+            @Nullable ViewGroup container,
+            Bundle savedInstanceState) {
+        return inflater.inflate(R.layout.login_fragment, container, false);
+    }
+
+    @Override
+    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
+        super.onViewCreated(view, savedInstanceState);
+
+        LoginButton loginButton = (LoginButton) view.findViewById(R.id.login_button);
+        loginButton.setFragment(this);
+        List<String> permissions = new ArrayList<>();
+        permissions.add(PUBLIC_PERMISSION);
+        loginButton.setReadPermissions(permissions);
+        callbackManager = CallbackManager.Factory.create();
+
+        loginButton.registerCallback(
+            callbackManager,
+            new FacebookCallback<LoginResult>() {
+                    @Override
+                    public void onSuccess(LoginResult loginResult) {
+                        listener.onLoginComplete();
+                    }
+
+                    @Override
+                    public void onCancel() {
+                        Log.d(TAG, "onCancel");
+                        showAlert();
+                    }
+
+                    @Override
+                    public void onError(FacebookException exception) {
+                        Log.d(TAG, "onError: " + exception);
+                        showAlert();
+                    }
+                });
+    }
+
+    private void showAlert() {
+        new AlertDialog.Builder(getActivity())
+                .setTitle(R.string.cancelled)
+                .setMessage(R.string.permission_not_granted)
+                .setPositiveButton(R.string.ok, null)
+                .show();
+    }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        callbackManager.onActivityResult(requestCode, resultCode, data);
+    }
+}
diff --git a/samples/PlacesGraphSample/src/com/example/places/fragments/PlaceInfoFragment.java b/samples/PlacesGraphSample/src/com/example/places/fragments/PlaceInfoFragment.java
new file mode 100644
index 000000000..0f2d22b8f
--- /dev/null
+++ b/samples/PlacesGraphSample/src/com/example/places/fragments/PlaceInfoFragment.java
@@ -0,0 +1,268 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.places.fragments;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Bitmap;
+import android.net.Uri;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.support.design.widget.FloatingActionButton;
+import android.support.v4.app.Fragment;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.support.v7.widget.Toolbar;
+import android.telephony.PhoneNumberUtils;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.ProgressBar;
+import android.widget.Toast;
+
+import com.example.places.R;
+import com.example.places.adapters.PlaceDetailsAdapter;
+import com.example.places.PlacesGraphSDKHelper;
+import com.example.places.utils.PlaceFieldData;
+import com.example.places.utils.PlaceFieldDataFactory;
+import com.example.places.model.Place;
+import com.example.places.model.PlaceTextUtils;
+import com.example.places.utils.BitmapDownloadTask;
+import com.facebook.GraphResponse;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * This fragment illustrates how to get detailed place information from the Places Graph SDK.
+ *
+ * Refer to {@link PlacesGraphSDKHelper}, {@link Place}, and {@link PlaceTextUtils} to see how
+ * the place info request is created, and to see how the place info is parsed and displayed.
+ */
+public class PlaceInfoFragment extends Fragment implements
+        PlacesGraphSDKHelper.PlaceInfoRequestListener,
+        PlaceDetailsAdapter.Listener,
+        BitmapDownloadTask.Listener {
+
+    public static final String EXTRA_PLACE = "place";
+
+    /**
+     *
+     * These are the place fields that will be displayed in the recycler view.
+     */
+    private static final String[] PLACE_FIELDS_TO_DISPLAY_IN_RECYCLERVIEW = new String[]{
+            Place.CATEGORY_LIST,
+            Place.ABOUT,
+            Place.LOCATION,
+            Place.PHONE,
+            Place.WEBSITE,
+            Place.HOURS,
+            Place.IS_ALWAYS_OPEN,
+            Place.IS_PERMANENTLY_CLOSED,
+            Place.DESCRIPTION,
+            Place.CHECKINS,
+            Place.OVERALL_STAR_RATING,
+            Place.ENGAGEMENT,
+            Place.RESTAURANT_SPECIALTIES,
+            Place.RESTAURANT_SERVICES,
+            Place.PRICE_RANGE,
+            Place.PAYMENT_OPTIONS,
+            Place.IS_VERIFIED,
+            Place.APP_LINKS,
+            Place.PARKING,
+            Place.LINK,
+    };
+
+    public interface Listener {
+        void onCallPhone(Intent intent);
+    }
+
+    private Listener listener;
+    private Place place;
+    private RecyclerView recyclerView;
+    private ImageView coverView;
+    private Toolbar toolbar;
+    private FloatingActionButton floatingActionButton;
+    private ProgressBar progressBar;
+
+    public static PlaceInfoFragment newInstance() {
+        return new PlaceInfoFragment();
+    }
+
+    public void onAttach(Context context) {
+        super.onAttach(context);
+        if (context instanceof Activity) {
+            listener = (Listener) context;
+        }
+    }
+
+    public void onDestroy() {
+        super.onDestroy();
+        listener = null;
+    }
+
+    public View onCreateView(
+            LayoutInflater inflater,
+            @Nullable ViewGroup container,
+            Bundle savedInstanceState) {
+        if (savedInstanceState == null) {
+            final Bundle args = getArguments();
+            place = args.getParcelable(EXTRA_PLACE);
+        } else {
+            place = savedInstanceState.getParcelable(EXTRA_PLACE);
+        }
+        return inflater.inflate(R.layout.place_info_fragment, container, false);
+    }
+
+    @Override
+    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
+        super.onViewCreated(view, savedInstanceState);
+
+        toolbar = (Toolbar) view.findViewById(R.id.place_details_toolbar);
+        ((AppCompatActivity) getActivity()).setSupportActionBar(toolbar);
+        ((AppCompatActivity) getActivity()).getSupportActionBar().setDisplayHomeAsUpEnabled(true);
+        ((AppCompatActivity) getActivity()).getSupportActionBar().setDisplayShowHomeEnabled(true);
+
+        progressBar = (ProgressBar) view.findViewById(R.id.place_details_progress);
+        coverView = (ImageView) view.findViewById(R.id.place_details_cover);
+        recyclerView = (RecyclerView) view.findViewById(R.id.place_details_recyclerview);
+        recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
+        floatingActionButton =
+                (FloatingActionButton) view.findViewById(R.id.place_details_actionbutton);
+        floatingActionButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                String phoneNumber = place.get(Place.PHONE);
+                if (phoneNumber != null) {
+                    String strippedNumber = PhoneNumberUtils.stripSeparators(phoneNumber);
+                    Intent intent =
+                            new Intent(Intent.ACTION_CALL, Uri.parse("tel:" + strippedNumber));
+                    listener.onCallPhone(intent);
+                }
+            }
+        });
+
+        toolbar.setTitle(place.get(Place.NAME));
+        int actionButtonVisibility = place.has(Place.PHONE) ? View.VISIBLE : View.GONE;
+        floatingActionButton.setVisibility(actionButtonVisibility);
+
+        fetchPlaceInfo();
+    }
+
+    @Override
+    public void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+        outState.putParcelable(EXTRA_PLACE, place);
+    }
+
+    public void onDestroyView() {
+        toolbar = null;
+        coverView = null;
+        recyclerView = null;
+        floatingActionButton = null;
+        super.onDestroyView();
+    }
+
+    private void fetchPlaceInfo() {
+        // Creates and executes a Place Info request on the Places Graph SDK
+        PlacesGraphSDKHelper.fetchPlaceInfo(place, this);
+        progressBar.setVisibility(View.VISIBLE);
+    }
+
+    private void updateList() {
+        List<PlaceFieldData> fields = new ArrayList<>();
+        for (String fieldName : PLACE_FIELDS_TO_DISPLAY_IN_RECYCLERVIEW) {
+            PlaceFieldData fieldData =
+                    PlaceFieldDataFactory.newPlaceField(getActivity(), fieldName, place);
+            if (fieldData != null) {
+                fields.add(fieldData);
+            }
+        }
+        PlaceDetailsAdapter adapter = new PlaceDetailsAdapter(this, fields);
+        recyclerView.setAdapter(adapter);
+    }
+
+    @Override
+    public void onPlaceInfoResult(final Place place, final GraphResponse response) {
+        if (isAdded()) {
+            getActivity().runOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+                    progressBar.setVisibility(View.INVISIBLE);
+                    if (place == null) {
+                        // The response object contains additional information on the error.
+                        Toast.makeText(getActivity(), R.string.error, Toast.LENGTH_SHORT).show();
+                    } else {
+                        // Refresh the UI with the new place information.
+                        PlaceInfoFragment.this.place = place;
+                        updateList();
+                        downloadCoverPhoto();
+                    }
+                }
+            });
+        }
+    }
+
+    private void downloadCoverPhoto() {
+        // Downloads the place cover photo.
+        PlacesGraphSDKHelper.downloadPlaceCoverPhoto(place, PlaceInfoFragment.this);
+    }
+
+    @Override
+    public void onPlaceFieldSelected(PlaceFieldData placeFieldData) {
+        Intent intent = placeFieldData.getActionIntent();
+        if (Intent.ACTION_CALL.equals(intent.getAction())) {
+            listener.onCallPhone(intent);
+        } else {
+            getActivity().startActivity(intent);
+        }
+    }
+
+    @Override
+    public void onBitmapDownloadSuccess(final String url, final Bitmap bitmap) {
+        if (isAdded()) {
+            getActivity().runOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+                    coverView.setImageBitmap(bitmap);
+                }
+            });
+        }
+    }
+
+    @Override
+    public void onBitmapDownloadFailure(final String url) {
+        if (isAdded()) {
+            getActivity().runOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+                    Toast.makeText(
+                            getActivity(),
+                            R.string.error,
+                            Toast.LENGTH_SHORT).show();
+                }
+            });
+        }
+    }
+}
diff --git a/samples/PlacesGraphSample/src/com/example/places/fragments/PlaceSearchFragment.java b/samples/PlacesGraphSample/src/com/example/places/fragments/PlaceSearchFragment.java
new file mode 100644
index 000000000..0e4544f3a
--- /dev/null
+++ b/samples/PlacesGraphSample/src/com/example/places/fragments/PlaceSearchFragment.java
@@ -0,0 +1,404 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.places.fragments;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Rect;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.support.design.widget.FloatingActionButton;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentTransaction;
+import android.support.v4.view.ViewCompat;
+import android.support.v7.widget.CardView;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.view.KeyEvent;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.inputmethod.EditorInfo;
+import android.view.inputmethod.InputMethodManager;
+import android.widget.EditText;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.example.places.R;
+import com.example.places.adapters.PlaceListAdapter;
+import com.example.places.model.Place;
+import com.example.places.PlacesGraphSDKHelper;
+import com.example.places.model.PlaceTextUtils;
+import com.facebook.GraphResponse;
+import com.facebook.places.PlaceManager;
+import com.google.android.gms.maps.CameraUpdate;
+import com.google.android.gms.maps.CameraUpdateFactory;
+import com.google.android.gms.maps.GoogleMap;
+import com.google.android.gms.maps.OnMapReadyCallback;
+import com.google.android.gms.maps.SupportMapFragment;
+import com.google.android.gms.maps.model.LatLng;
+import com.google.android.gms.maps.model.LatLngBounds;
+import com.google.android.gms.maps.model.Marker;
+import com.google.android.gms.maps.model.MarkerOptions;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * This fragment illustrates how to use the Places Graph SDK to:
+ * <ul>
+ *     <li>Search for nearby places.</li>
+ *     <li>Display places on a map.</li>
+ * </ul>
+ */
+public class PlaceSearchFragment extends Fragment implements
+        PlacesGraphSDKHelper.PlaceSearchRequestListener,
+        PlaceListAdapter.Listener,
+        OnMapReadyCallback {
+
+    private static final int SCROLL_DIRECTION_UP = -1;
+    private static final int REQUEST_CODE_GET_CURRENT_PLACE = 1;
+
+    private Listener listener;
+    private ProgressBar progressBar;
+    private RecyclerView recyclerView;
+    private PlaceListAdapter placeListAdapter;
+    private TextView currentPlaceNameTextView;
+    private TextView currentPlaceAddressTextView;
+    private CardView searchCardView;
+    private CardView currentPlaceCardView;
+    private EditText searchEditText;
+    private FloatingActionButton actionButton;
+    private SupportMapFragment mapFragment;
+    private GoogleMap map;
+    private State state = State.LIST;
+
+    private List<Place> placesToDisplay = new ArrayList<>(0);
+
+    public enum State {
+        LIST,
+        MAP
+    };
+
+    public interface Listener {
+        void onPlaceSelected(Place place);
+        void onLocationPermissionsError();
+        boolean hasLocationPermission();
+    }
+
+    public static PlaceSearchFragment newInstance() {
+        return new PlaceSearchFragment();
+    }
+
+    public void onAttach(Context context) {
+        super.onAttach(context);
+        if (context instanceof Activity) {
+            listener = (Listener) context;
+        }
+    }
+
+    @Override
+    public void onDetach() {
+        super.onDetach();
+    }
+
+    public View onCreateView(
+            LayoutInflater inflater,
+            @Nullable ViewGroup container,
+            Bundle savedInstanceState) {
+        return inflater.inflate(R.layout.place_search_fragment, container, false);
+    }
+
+    @Override
+    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
+        super.onViewCreated(view, savedInstanceState);
+
+        progressBar = (ProgressBar) view.findViewById(R.id.place_search_progressbar);
+        recyclerView = (RecyclerView) view.findViewById(R.id.place_search_recyclerview);
+        recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
+
+        actionButton = (FloatingActionButton) view.findViewById(R.id.place_search_toggle_button);
+        actionButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                onActionButtonClicked();
+            }
+        });
+
+        currentPlaceCardView = (CardView) view.findViewById(R.id.current_place_cardview);
+        currentPlaceCardView.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                openCurrentPlaceDialog();
+            }
+        });
+
+        currentPlaceNameTextView = (TextView) view.findViewById(R.id.current_place_name);
+        currentPlaceAddressTextView = (TextView) view.findViewById(R.id.current_place_address);
+        searchCardView = (CardView) view.findViewById(R.id.place_search_cardview);
+        searchEditText = (EditText) view.findViewById(R.id.place_search_edittext);
+        searchEditText.setOnEditorActionListener(new TextView.OnEditorActionListener() {
+            @Override
+            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
+                // When the search soft input key is clicked,
+                // hide soft input and search nearby places
+                if (actionId == EditorInfo.IME_ACTION_SEARCH) {
+                    InputMethodManager imm = (InputMethodManager) getActivity()
+                            .getSystemService(Context.INPUT_METHOD_SERVICE);
+                    imm.hideSoftInputFromWindow(searchEditText.getWindowToken(), 0);
+                    searchPlace(searchEditText.getText().toString());
+                }
+                return true;
+            }
+        });
+
+        RecyclerView.ItemDecoration itemDecoration = new RecyclerView.ItemDecoration() {
+            @Override
+            public void getItemOffsets(
+                    Rect outRect,
+                    View view,
+                    RecyclerView parent,
+                    RecyclerView.State state) {
+                if (parent.getChildAdapterPosition(view) == 0) {
+                    outRect.top = getResources()
+                            .getDimensionPixelOffset(R.dimen.place_search_list_header_height);
+                }
+            }
+        };
+        recyclerView.addItemDecoration(itemDecoration);
+
+        recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {
+            @Override
+            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
+                super.onScrolled(recyclerView, dx, dy);
+                float elevation;
+                if (recyclerView.canScrollVertically(SCROLL_DIRECTION_UP)) {
+                    elevation = getResources().getDimension(R.dimen.search_scrolling_elevation);
+                } else {
+                    elevation = getResources().getDimension(R.dimen.search_resting_elevation);
+                }
+                ViewCompat.setElevation(currentPlaceCardView, elevation);
+                ViewCompat.setElevation(searchCardView, elevation);
+            }
+        });
+    }
+
+    public void onDestroyView() {
+        recyclerView = null;
+        searchEditText = null;
+        searchCardView = null;
+        actionButton = null;
+        progressBar = null;
+        mapFragment = null;
+        map = null;
+        super.onDestroyView();
+    }
+
+    private void setLoading(boolean isLoading) {
+        progressBar.setVisibility(isLoading ? View.VISIBLE : View.INVISIBLE);
+    }
+
+    private void searchPlace(String searchQuery) {
+        setLoading(true);
+        PlacesGraphSDKHelper.searchPlace(searchQuery, this);
+    }
+
+    private void onActionButtonClicked() {
+        toggleMapAndList();
+        // Hide soft input
+        InputMethodManager imm = (InputMethodManager) getActivity()
+                .getSystemService(Context.INPUT_METHOD_SERVICE);
+        imm.hideSoftInputFromWindow(searchEditText.getWindowToken(), 0);
+    }
+
+    private void toggleMapAndList() {
+        state = state == State.MAP ? State.LIST : State.MAP;
+
+        if (state == State.LIST) {
+            if (mapFragment != null) {
+                FragmentTransaction ft = getChildFragmentManager().beginTransaction();
+                ft.hide(mapFragment).commit();
+            }
+            recyclerView.setVisibility(View.VISIBLE);
+            currentPlaceCardView.setVisibility(View.VISIBLE);
+        }
+        if (state == State.MAP) {
+            if (mapFragment == null) {
+                mapFragment = SupportMapFragment.newInstance();
+                FragmentTransaction transaction = getChildFragmentManager().beginTransaction();
+                transaction.replace(R.id.place_search_map_placeholder, mapFragment);
+                transaction.commit();
+                mapFragment.getMapAsync(this);
+            } else {
+                FragmentTransaction ft = getChildFragmentManager().beginTransaction();
+                ft.show(mapFragment).commit();
+            }
+            recyclerView.setVisibility(View.INVISIBLE);
+            currentPlaceCardView.setVisibility(View.INVISIBLE);
+        }
+        displayPlaces(placesToDisplay);
+    }
+
+    private void openCurrentPlaceDialog() {
+
+        CurrentPlaceDialogFragment currentPlaceDialogFragment =
+                CurrentPlaceDialogFragment.newInstance();
+
+        FragmentTransaction transaction = getChildFragmentManager().beginTransaction();
+        Fragment prev = getFragmentManager().findFragmentByTag("dialog");
+        if (prev != null) {
+            transaction.remove(prev);
+        }
+        transaction.addToBackStack(null);
+
+        currentPlaceDialogFragment.setTargetFragment(this, REQUEST_CODE_GET_CURRENT_PLACE);
+        currentPlaceDialogFragment.show(transaction, "dialog");
+    }
+
+    @Override
+    public void onPlaceSearchResult(final List<Place> places, GraphResponse response) {
+        if (isAdded()) {
+            getActivity().runOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+
+                    setLoading(false);
+
+                    if (places == null) {
+                        // The response object does contain more information on the error
+                        Toast.makeText(getActivity(), R.string.error, Toast.LENGTH_SHORT).show();
+                    } else {
+                        placesToDisplay = places;
+                        displayPlaces(placesToDisplay);
+                    }
+                }
+            });
+        }
+    }
+
+    @Override
+    public void onLocationError(final PlaceManager.LocationError error) {
+
+        // This event is invoked when the Places Graph SDK fails to retrieve the device location.
+
+        if (isAdded()) {
+            getActivity().runOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+                    if (error == PlaceManager.LocationError.LOCATION_PERMISSION_DENIED) {
+                        // Trigger the activity to prompt the user for location permissions.
+                        listener.onLocationPermissionsError();
+                    } else if (error == PlaceManager.LocationError.LOCATION_SERVICES_DISABLED) {
+                        String message = getString(R.string.location_error_disabled);
+                        Toast.makeText(getActivity(), message, Toast.LENGTH_SHORT).show();
+                    } else {
+                        String message = getString(R.string.location_error_unknown);
+                        Toast.makeText(getActivity(), message, Toast.LENGTH_SHORT).show();
+                    }
+                }
+            });
+        }
+    }
+
+    private void displayPlaces(List<Place> places) {
+        if (state == State.LIST) {
+            placeListAdapter = new PlaceListAdapter(R.layout.place_list_item, places, this);
+            recyclerView.setAdapter(placeListAdapter);
+            placeListAdapter.notifyDataSetChanged();
+        } else if (state == State.MAP) {
+            displayPlacesOnMap(places);
+        }
+    }
+
+    private void displayPlacesOnMap(List<Place> places) {
+        if (map != null) {
+            map.clear();
+            if (!places.isEmpty()) {
+                LatLngBounds.Builder boundsBuilder = new LatLngBounds.Builder();
+                for (Place place : places) {
+                    // Creates a marker at the place location and with the place name
+                    LatLng position = place.getPosition();
+                    String placeName = place.get(Place.NAME);
+                    if (position != null) {
+                        MarkerOptions markerOptions = new MarkerOptions()
+                                .position(position)
+                                .title(placeName);
+                        Marker marker = map.addMarker(markerOptions);
+                        marker.setTag(place);
+                        boundsBuilder.include(position);
+                    }
+                }
+
+                CameraUpdate cameraUpdate =
+                        CameraUpdateFactory.newLatLngBounds(boundsBuilder.build(), 100);
+                map.moveCamera(cameraUpdate);
+            }
+        }
+    }
+
+    @Override
+    @SuppressWarnings("MissingPermission")
+    public void onMapReady(GoogleMap googleMap) {
+        map = googleMap;
+        map.getUiSettings().setMapToolbarEnabled(false);
+        if (listener.hasLocationPermission()) {
+            map.setMyLocationEnabled(true);
+            map.getUiSettings().setMyLocationButtonEnabled(false);
+        }
+        map.setOnInfoWindowClickListener(new GoogleMap.OnInfoWindowClickListener() {
+            @Override
+            public void onInfoWindowClick(Marker marker) {
+                if (marker.getTag() instanceof Place) {
+                    Place place = (Place) marker.getTag();
+                    listener.onPlaceSelected(place);
+                }
+            }
+        });
+        if (state == State.MAP) {
+            displayPlaces(placesToDisplay);
+        }
+    }
+
+    @Override
+    public void onPlaceSelected(Place place) {
+        listener.onPlaceSelected(place);
+    }
+
+    private void onCurrentPlaceSelected(Place place) {
+        currentPlaceNameTextView.setText(place.get(Place.NAME));
+        currentPlaceNameTextView.setVisibility(View.VISIBLE);
+        currentPlaceAddressTextView.setText(PlaceTextUtils.getAddress(place));
+        currentPlaceAddressTextView.setVisibility(View.VISIBLE);
+    }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        if (requestCode == REQUEST_CODE_GET_CURRENT_PLACE) {
+            if (resultCode == Activity.RESULT_OK) {
+                Place place = (Place) data.getParcelableExtra(
+                        CurrentPlaceDialogFragment.EXTRA_CURRENT_PLACE);
+                onCurrentPlaceSelected(place);
+            }
+        }
+    }
+}
diff --git a/samples/PlacesGraphSample/src/com/example/places/model/AppLink.java b/samples/PlacesGraphSample/src/com/example/places/model/AppLink.java
new file mode 100644
index 000000000..05b74cec9
--- /dev/null
+++ b/samples/PlacesGraphSample/src/com/example/places/model/AppLink.java
@@ -0,0 +1,42 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.places.model;
+
+import android.content.Intent;
+
+public class AppLink {
+
+    private String appName;
+    private Intent intent;
+
+    public AppLink(String appName, Intent intent) {
+        this.appName = appName;
+        this.intent = intent;
+    }
+
+    public String getAppName() {
+        return appName;
+    }
+
+    public Intent getIntent() {
+        return intent;
+    }
+}
diff --git a/samples/PlacesGraphSample/src/com/example/places/model/CurrentPlaceResult.java b/samples/PlacesGraphSample/src/com/example/places/model/CurrentPlaceResult.java
new file mode 100644
index 000000000..ad13b7a78
--- /dev/null
+++ b/samples/PlacesGraphSample/src/com/example/places/model/CurrentPlaceResult.java
@@ -0,0 +1,67 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.places.model;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class CurrentPlaceResult {
+
+    private static final String PARAM_DATA = "data";
+    private static final String PARAM_SUMMARY = "summary";
+    private static final String PARAM_TRACKING = "tracking";
+
+    private List<Place> places;
+    private String tracking;
+
+    public List<Place> getPlaces() {
+        return places;
+    }
+
+    public String getTracking() {
+        return tracking;
+    }
+
+    public static CurrentPlaceResult fromJson(JSONObject json) throws JSONException {
+
+        CurrentPlaceResult response = new CurrentPlaceResult();
+
+        if (json.has(PARAM_DATA)) {
+            JSONArray array = json.getJSONArray(PARAM_DATA);
+            int length = array.length();
+            response.places = new ArrayList<>(length);
+            for (int i=0; i<length; i++) {
+                JSONObject placeJson = array.getJSONObject(i);
+                response.places.add(new Place(placeJson));
+            }
+        }
+        if (json.has(PARAM_SUMMARY)) {
+            JSONObject summaryJson = json.getJSONObject(PARAM_SUMMARY);
+            response.tracking = summaryJson.getString(PARAM_TRACKING);
+        }
+
+        return response;
+    }
+}
diff --git a/samples/PlacesGraphSample/src/com/example/places/model/OpeningHours.java b/samples/PlacesGraphSample/src/com/example/places/model/OpeningHours.java
new file mode 100644
index 000000000..8b51d4dba
--- /dev/null
+++ b/samples/PlacesGraphSample/src/com/example/places/model/OpeningHours.java
@@ -0,0 +1,85 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.places.model;
+
+import android.text.TextUtils;
+import android.util.SparseArray;
+
+import org.json.JSONObject;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class OpeningHours {
+
+    public static final int MONDAY = 0;
+    public static final int TUESDAY = 1;
+    public static final int WEDNESDAY = 2;
+    public static final int THURSDAY = 3;
+    public static final int FRIDAY = 4;
+    public static final int SATURDAY = 5;
+    public static final int SUNDAY = 6;
+
+    private static final String[] DAY_PREFIX =
+            new String[] {"mon", "tue", "wed","thu", "fri", "sat","sun"};
+
+    private final SparseArray<List<String>> openingHours = new SparseArray<>();
+
+    public List<String> getHoursInterval(int day) {
+        return openingHours.get(day);
+    }
+
+    public static OpeningHours parse(Place place) {
+        JSONObject jsonHours = place.getJson(Place.HOURS);
+        if (jsonHours != null) {
+            OpeningHours instance = new OpeningHours();
+            for (int i = MONDAY; i <= SUNDAY; i++) {
+                List<String> hoursIntervals = getOpeningHoursOfADay(jsonHours, DAY_PREFIX[i]);
+                if (hoursIntervals != null) {
+                    instance.openingHours.put(i, hoursIntervals);
+                }
+            }
+            return instance;
+        }
+        return null;
+    }
+
+    private static List<String> getOpeningHoursOfADay(JSONObject jsonHours, String dayPrefix) {
+        List<String> hoursIntervals = null;
+        String open1 = jsonHours.optString(dayPrefix + "_1_open");
+        String close1 = jsonHours.optString(dayPrefix + "_1_close");
+
+        if (!TextUtils.isEmpty(open1) && !TextUtils.isEmpty(close1)) {
+            hoursIntervals = new ArrayList<>(4);
+            hoursIntervals.add(open1);
+            hoursIntervals.add(close1);
+
+            String open2 = jsonHours.optString(dayPrefix + "_2_open");
+            String close2 = jsonHours.optString(dayPrefix + "_2_close");
+
+            if (!TextUtils.isEmpty(open2) && !TextUtils.isEmpty(close2)) {
+                hoursIntervals.add(open2);
+                hoursIntervals.add(close2);
+            }
+        }
+        return hoursIntervals;
+    }
+}
diff --git a/samples/PlacesGraphSample/src/com/example/places/model/Place.java b/samples/PlacesGraphSample/src/com/example/places/model/Place.java
new file mode 100644
index 000000000..2269375a1
--- /dev/null
+++ b/samples/PlacesGraphSample/src/com/example/places/model/Place.java
@@ -0,0 +1,183 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.places.model;
+
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.facebook.places.model.CurrentPlaceRequestParams;
+import com.facebook.places.model.PlaceFields;
+import com.google.android.gms.maps.model.LatLng;
+
+import org.json.JSONArray;
+import org.json.JSONObject;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class Place implements PlaceFields, Parcelable {
+
+    private static final String TAG = Place.class.getSimpleName();
+
+    private JSONObject jsonData;
+
+    public Place(JSONObject jsonData) {
+        this.jsonData = jsonData;
+    }
+
+    public JSONObject getJson() {
+        return jsonData;
+    }
+
+    public String get(String field) {
+        return jsonData.optString(field);
+    }
+
+    public JSONObject getJson(String field) {
+        return jsonData.optJSONObject(field);
+    }
+
+    public JSONArray getJsonArray(String field) {
+        return jsonData.optJSONArray(field);
+    }
+
+    public int getInt(String field) {
+        return jsonData.optInt(field);
+    }
+
+    public boolean getBoolean(String field) {
+        return jsonData.optBoolean(field);
+    }
+
+    public boolean has(String field) {
+        return jsonData.has(field);
+    }
+
+    public LatLng getPosition() {
+        JSONObject location = jsonData.optJSONObject(LOCATION);
+        if (location != null) {
+            if (location.has("latitude") && location.has("longitude")) {
+                double latitude = location.optDouble("latitude");
+                double longitude = location.optDouble("longitude");
+                return new LatLng(latitude, longitude);
+            }
+        }
+        return null;
+    }
+
+    public CurrentPlaceRequestParams.ConfidenceLevel getConfidenceLevel() {
+        if (jsonData.has(CONFIDENCE_LEVEL)) {
+            String confidenceLevel = jsonData.optString(CONFIDENCE_LEVEL);
+            if ("high".equalsIgnoreCase(confidenceLevel)) {
+                return CurrentPlaceRequestParams.ConfidenceLevel.HIGH;
+            } else if ("medium".equalsIgnoreCase(confidenceLevel)) {
+                return CurrentPlaceRequestParams.ConfidenceLevel.MEDIUM;
+            } else if ("low".equalsIgnoreCase(confidenceLevel)) {
+                return CurrentPlaceRequestParams.ConfidenceLevel.LOW;
+            }
+        }
+        return null;
+    }
+
+    public String getCoverPhotoUrl() {
+        JSONObject coverPhotoJson = jsonData.optJSONObject("cover");
+        if (coverPhotoJson != null) {
+            return coverPhotoJson.optString("source");
+        }
+        return null;
+    }
+
+    public Intent getAppLinkIntent(String appName) {
+        List<AppLink> appLinks = getAppLinks();
+        if (appLinks != null) {
+            for (AppLink appLink : appLinks) {
+                if (appName.equals(appLink.getAppName())) {
+                    return appLink.getIntent();
+                }
+            }
+        }
+        return null;
+    }
+
+    public List<AppLink> getAppLinks() {
+        List<AppLink> appLinks = new ArrayList<>();
+        JSONObject appLinkJson = jsonData.optJSONObject(APP_LINKS);
+        if (appLinkJson != null) {
+            JSONArray appArray = appLinkJson.optJSONArray("android");
+            if (appArray != null) {
+                int length = appArray.length();
+                for (int i = 0; i < length; i++) {
+                    JSONObject linkJson = appArray.optJSONObject(i);
+                    if (linkJson != null) {
+                        String appName = linkJson.optString("app_name");
+                        Intent intent = new Intent(Intent.ACTION_VIEW);
+                        String packageName = linkJson.optString("package");
+                        String className = linkJson.optString("class");
+                        if (!TextUtils.isEmpty(packageName) && !TextUtils.isEmpty(className)) {
+                            intent.setClassName(packageName, className);
+                        }
+                        String url = linkJson.optString("url");
+                        if (url != null) {
+                            intent.setData(Uri.parse(url));
+                        }
+                        appLinks.add(new AppLink(appName, intent));
+                    }
+                }
+            }
+        }
+        return appLinks;
+    }
+
+    public OpeningHours getOpeningHours() {
+        return OpeningHours.parse(this);
+    }
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(Parcel dest, int flags) {
+        dest.writeString(jsonData.toString());
+    }
+
+    public static final Parcelable.Creator<Place> CREATOR = new Parcelable.Creator<Place>() {
+
+        public Place createFromParcel(Parcel in) {
+            try {
+                String json = in.readString();
+                return new Place(new JSONObject(json));
+            } catch (Exception e) {
+                Log.e(TAG, "Failed to parse place", e);
+            }
+            return null;
+        }
+
+        public Place[] newArray(int size) {
+            return new Place[size];
+        }
+    };
+}
diff --git a/samples/PlacesGraphSample/src/com/example/places/model/PlaceTextUtils.java b/samples/PlacesGraphSample/src/com/example/places/model/PlaceTextUtils.java
new file mode 100644
index 000000000..5442980ec
--- /dev/null
+++ b/samples/PlacesGraphSample/src/com/example/places/model/PlaceTextUtils.java
@@ -0,0 +1,310 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.places.model;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.text.TextUtils;
+
+import com.example.places.R;
+
+import org.json.JSONArray;
+import org.json.JSONObject;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class PlaceTextUtils {
+
+    private static final int[] DAY_OF_WEEK_STRINGID =  new int[]{
+            R.string.monday,
+            R.string.tuesday,
+            R.string.wednesday,
+            R.string.thursday,
+            R.string.friday,
+            R.string.saturday,
+            R.string.sunday,
+    };
+
+    public static String getFieldName(Context context, String placeField) {
+        Resources resources = context.getResources();
+        if (Place.ABOUT.equals(placeField)) {
+            return resources.getString(R.string.place_field_about);
+        } else if (Place.APP_LINKS.equals(placeField)) {
+            return resources.getString(R.string.place_field_app_link);
+        } else if (Place.CATEGORY_LIST.equals(placeField)) {
+            return resources.getString(R.string.place_field_categories);
+        } else if (Place.CHECKINS.equals(placeField)) {
+            return resources.getString(R.string.place_field_checkins);
+        } else if (Place.DESCRIPTION.equals(placeField)) {
+            return resources.getString(R.string.place_field_description);
+        } else if (Place.ENGAGEMENT.equals(placeField)) {
+            return resources.getString(R.string.place_field_engagement);
+        } else if (Place.HOURS.equals(placeField)) {
+            return resources.getString(R.string.place_field_hours);
+        } else if (Place.LOCATION.equals(placeField)) {
+            return resources.getString(R.string.place_field_address);
+        } else if (Place.LINK.equals(placeField)) {
+            return resources.getString(R.string.place_field_link);
+        } else if (Place.OVERALL_STAR_RATING.equals(placeField)) {
+            return resources.getString(R.string.place_field_rating);
+        } else if (Place.PARKING.equals(placeField)) {
+            return resources.getString(R.string.place_field_parking);
+        } else if (Place.PAYMENT_OPTIONS.equals(placeField)) {
+            return resources.getString(R.string.place_field_payment_options);
+        } else if (Place.PHONE.equals(placeField)) {
+            return resources.getString(R.string.place_field_phone);
+        } else if (Place.PRICE_RANGE.equals(placeField)) {
+            return resources.getString(R.string.place_field_price_range);
+        } else if (Place.RATING_COUNT.equals(placeField)) {
+            return resources.getString(R.string.place_field_rating_count);
+        } else if (Place.RESTAURANT_SPECIALTIES.equals(placeField)) {
+            return resources.getString(R.string.place_field_specialties);
+        } else if (Place.RESTAURANT_SERVICES.equals(placeField)) {
+            return resources.getString(R.string.place_field_services);
+        } else if (Place.WEBSITE.equals(placeField)) {
+            return resources.getString(R.string.place_field_website);
+        }
+        return null;
+    }
+
+    public static String getFieldValue(Context context, Place place, String field) {
+        Resources resources = context.getResources();
+        if (Place.CATEGORY_LIST.equals(field)) {
+            List<String> categories = getCategories(place);
+            return TextUtils.join(", ", categories);
+        } else if (Place.LOCATION.equals(field)) {
+            return getAddress(place);
+        } else if (Place.PHONE.equals(field)) {
+            return place.get(field);
+        } else if (Place.WEBSITE.equals(field)) {
+            return place.get(field);
+        } else if (Place.LINK.equals(field)) {
+            return place.get(field);
+        } else if (Place.HOURS.equals(field)) {
+            return getOpeningHours(context, place);
+        } else if (Place.DESCRIPTION.equals(field)) {
+            return place.get(field);
+        } else if (Place.ABOUT.equals(field)) {
+            return place.get(field);
+        } else if (Place.CHECKINS.equals(field)) {
+            int checkins = place.getInt(field);
+            return resources.getString(R.string.place_info_checkins, checkins);
+        } else if (Place.OVERALL_STAR_RATING.equals(field)) {
+            String rating = place.get(Place.OVERALL_STAR_RATING);
+            int ratingCount = place.getInt(Place.RATING_COUNT);
+            if (!TextUtils.isEmpty(rating) && ratingCount > 0) {
+                return resources.getString(R.string.place_info_rating, rating, ratingCount);
+            }
+        } else if (Place.ENGAGEMENT.equals(field)) {
+            JSONObject jsonObject = place.getJson(Place.ENGAGEMENT);
+            if (jsonObject != null) {
+                return jsonObject.optString("social_sentence");
+            }
+        } else if (Place.RESTAURANT_SPECIALTIES.equals(field)) {
+            List<String> specialties = getRestaurantSpecialties(context, place);
+            if (!specialties.isEmpty()) {
+                return TextUtils.join(", ", specialties);
+            }
+        } else if (Place.PRICE_RANGE.equals(field)) {
+            return place.get(Place.PRICE_RANGE);
+        } else if (Place.IS_ALWAYS_OPEN.equals(field)) {
+            boolean isAlwaysOpen = place.getBoolean(field);
+            if (isAlwaysOpen) {
+                return resources.getString(R.string.place_always_open);
+            }
+        } else if (Place.IS_PERMANENTLY_CLOSED.equals(field)) {
+            boolean isPermanentlyClosed = place.getBoolean(field);
+            if (isPermanentlyClosed) {
+                return resources.getString(R.string.place_permanently_closed);
+            }
+        } else if (Place.APP_LINKS.equals(field)) {
+           if (hasFacebookAppLink(place)) {
+                return resources.getString(R.string.place_app_link);
+            }
+        } else if (Place.PARKING.equals(field)) {
+            List<String> parking = getParking(context, place);
+            if (!parking.isEmpty()) {
+                return TextUtils.join(", ", parking);
+            }
+        } else if (Place.RESTAURANT_SERVICES.equals(field)) {
+            List<String> services = getRestaurantServices(context, place);
+            if (!services.isEmpty()) {
+                return TextUtils.join(", ", services);
+            }
+        } else if (Place.PAYMENT_OPTIONS.equals(field)) {
+            List<String> paymentOptions = getPaymentOptions(context, place);
+            if (!paymentOptions.isEmpty()) {
+                return TextUtils.join(", ", paymentOptions);
+            }
+        }
+        return null;
+    }
+
+    public static String getAddress(Place place) {
+        if (place.has(Place.SINGLE_LINE_ADDRESS)) {
+            return place.get(Place.SINGLE_LINE_ADDRESS);
+        } else if (place.has(Place.LOCATION)) {
+            JSONObject location = place.getJson(Place.LOCATION);
+            List<String> address = new ArrayList<>(5);
+            String street = location.optString("street");
+            if (!TextUtils.isEmpty(street)) {
+                address.add(street);
+            }
+            String city = location.optString("city");
+            if (!TextUtils.isEmpty(city)) {
+                address.add(city);
+            }
+            String state = location.optString("state");
+            if (!TextUtils.isEmpty(state)) {
+                address.add(state);
+            }
+            String country = location.optString("city");
+            if (!TextUtils.isEmpty(country)) {
+                address.add(country);
+            }
+            return TextUtils.join(", ", address);
+        }
+        return null;
+    }
+
+    public static List<String> getCategories(Place place) {
+        JSONObject jsonData = place.getJson();
+        List<String> categories = new ArrayList<>();
+        JSONArray jsonCategories = jsonData.optJSONArray(Place.CATEGORY_LIST);
+        if (jsonCategories != null) {
+            int length = jsonCategories.length();
+            for (int i=0; i<length; i++) {
+                JSONObject jsonCategory = jsonCategories.optJSONObject(i);
+                if (jsonCategory != null) {
+                    String category = jsonCategory.optString("name");
+                    categories.add(category);
+                }
+            }
+        }
+        return categories;
+    }
+
+    public static String getOpeningHours(Context context, Place place) {
+        OpeningHours hours = place.getOpeningHours();
+        if (hours != null) {
+            StringBuilder openingHours = new StringBuilder();
+            for (int day = OpeningHours.MONDAY; day < OpeningHours.SUNDAY; day++) {
+                String hourIntervalText = getOpeningHourText(context.getResources(), hours, day);
+                if (hourIntervalText != null) {
+                    if (openingHours.length() > 0) {
+                        openingHours.append("\n");
+                    }
+                    openingHours.append(hourIntervalText);
+                }
+            }
+            if (openingHours.length() > 0) {
+                return openingHours.toString();
+            }
+        }
+        return null;
+    }
+
+    private static String getOpeningHourText(Resources resources, OpeningHours hours, int day) {
+        List<String> hourInterval = hours.getHoursInterval(day);
+        if (hourInterval != null) {
+            StringBuilder builder = new StringBuilder();
+            if (hourInterval.size() >= 2) {
+                builder.append(hourInterval.get(0));
+                builder.append(' ');
+                builder.append(hourInterval.get(1));
+            }
+            if (hourInterval.size() == 4) {
+                builder.append(", ");
+                builder.append(hourInterval.get(2));
+                builder.append(' ');
+                builder.append(hourInterval.get(3));
+            }
+            if (hourInterval.size() > 0) {
+                builder.append(" - ");
+                builder.append(resources.getString(DAY_OF_WEEK_STRINGID[day]));
+                return builder.toString();
+            }
+        }
+        return null;
+    }
+
+    public static List<String> getPaymentOptions(Context context, Place place) {
+        return extractValidValues(
+                context,
+                place.getJson(Place.PAYMENT_OPTIONS),
+                R.array.payment_options_keys,
+                R.array.payment_options_labels);
+    }
+
+    public static List<String> getParking(Context context, Place place) {
+        return extractValidValues(
+                context,
+                place.getJson(Place.PARKING),
+                R.array.parking_keys,
+                R.array.parking_labels);
+    }
+
+    public static List<String> getRestaurantSpecialties(Context context, Place place) {
+        return extractValidValues(
+                context,
+                place.getJson(Place.RESTAURANT_SPECIALTIES),
+                R.array.restaurant_specialties_keys,
+                R.array.restaurant_specialties_labels);
+    }
+
+    public static List<String> getRestaurantServices(Context context, Place place) {
+        return extractValidValues(
+                context,
+                place.getJson(Place.RESTAURANT_SERVICES),
+                R.array.restaurant_services_keys,
+                R.array.restaurant_services_labels);
+    }
+
+    private static List<String> extractValidValues(
+            Context context,
+            JSONObject jsonObject,
+            int keysId,
+            int labelsId) {
+        List<String> labels = new ArrayList<>();
+        if (jsonObject != null) {
+            String[] keys = context.getResources().getStringArray(keysId);
+            String[] labelArray = context.getResources().getStringArray(labelsId);
+            for (int i=0; i<keys.length; i++) {
+                int value = jsonObject.optInt(keys[i]);
+                if (value == 1) {
+                    labels.add(labelArray[i]);
+                }
+            }
+        }
+        return labels;
+    }
+
+    private static boolean hasFacebookAppLink(Place place) {
+        List<AppLink> appLinks = place.getAppLinks();
+        for (AppLink appLink : appLinks) {
+            if ("Facebook".equals(appLink.getAppName())) {
+                return true;
+            }
+        }
+        return false;
+    }
+}
diff --git a/samples/PlacesGraphSample/src/com/example/places/utils/BitmapDownloadTask.java b/samples/PlacesGraphSample/src/com/example/places/utils/BitmapDownloadTask.java
new file mode 100644
index 000000000..980331846
--- /dev/null
+++ b/samples/PlacesGraphSample/src/com/example/places/utils/BitmapDownloadTask.java
@@ -0,0 +1,71 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.places.utils;
+
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.util.Log;
+
+import java.io.InputStream;
+import java.lang.ref.WeakReference;
+import java.net.HttpURLConnection;
+
+/**
+ * In your applications, use Fresco for image download, caching and display.
+ * https://github.com/facebook/fresco
+ */
+public class BitmapDownloadTask implements Runnable {
+
+    private final String url;
+    private final WeakReference<Listener> listenerWeakReference;
+
+    public interface Listener {
+        void onBitmapDownloadSuccess(String url, Bitmap bitmap);
+        void onBitmapDownloadFailure(String url);
+    }
+
+    public BitmapDownloadTask(String url, Listener listener) {
+        this.url = url;
+        listenerWeakReference = new WeakReference<>(listener);
+    }
+
+    @Override
+    public void run() {
+        try {
+            HttpURLConnection connection =
+                    (HttpURLConnection) new java.net.URL(url).openConnection();
+            connection.setDoInput(true);
+            connection.connect();
+            InputStream input = connection.getInputStream();
+            Bitmap bitmap = BitmapFactory.decodeStream(input);
+            Listener listener = listenerWeakReference.get();
+            if (listener != null) {
+                listener.onBitmapDownloadSuccess(url, bitmap);
+            }
+        } catch (Throwable t) {
+            t.printStackTrace();
+            Listener listener = listenerWeakReference.get();
+            if (listener != null) {
+                listener.onBitmapDownloadFailure(url);
+            }
+        }
+    }
+}
diff --git a/samples/PlacesGraphSample/src/com/example/places/utils/PlaceFieldData.java b/samples/PlacesGraphSample/src/com/example/places/utils/PlaceFieldData.java
new file mode 100644
index 000000000..c58d1eec0
--- /dev/null
+++ b/samples/PlacesGraphSample/src/com/example/places/utils/PlaceFieldData.java
@@ -0,0 +1,94 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.places.utils;
+
+import android.content.Intent;
+import android.net.Uri;
+import android.telephony.PhoneNumberUtils;
+
+import com.example.places.model.Place;
+
+public class PlaceFieldData {
+
+    public enum Type {
+        TEXT,
+        LINK,
+        PHONE,
+        MAP,
+        APP_LINK,
+    }
+
+    private Place place;
+    private String field;
+    private String title;
+    private String text;
+    private Type type;
+
+    public PlaceFieldData(Place place, String field, String title, String text, Type type) {
+        this.place = place;
+        this.field = field;
+        this.title = title;
+        this.text = text;
+        this.type = type;
+    }
+
+    public String getTitle() {
+        return title;
+    }
+
+    public String getText() {
+        return text;
+    }
+
+    public void setTitle(String title) {
+        this.title = title;
+    }
+
+    public void setText(String text) {
+        this.text = text;
+    }
+
+    public boolean isClickable() {
+        return type != Type.TEXT;
+    }
+
+    public Intent getActionIntent() {
+        Intent intent = null;
+        if (type == Type.LINK) {
+            intent = new Intent(Intent.ACTION_VIEW);
+            String url = text;
+            if (!url.startsWith("http")) {
+                url = "http://" + url;
+            }
+            intent.setData(Uri.parse(url));
+        } else if (type == Type.MAP) {
+            intent = new Intent(
+                    android.content.Intent.ACTION_VIEW,
+                    Uri.parse("google.navigation:q=" + text));
+        } else if (type == Type.PHONE) {
+            String number = PhoneNumberUtils.stripSeparators(text);
+            intent = new Intent(Intent.ACTION_CALL, Uri.parse("tel:" + number));
+        } else if (type == Type.APP_LINK) {
+            intent = place.getAppLinkIntent("Facebook");
+        }
+        return intent;
+    }
+}
diff --git a/samples/PlacesGraphSample/src/com/example/places/utils/PlaceFieldDataFactory.java b/samples/PlacesGraphSample/src/com/example/places/utils/PlaceFieldDataFactory.java
new file mode 100644
index 000000000..a7f36d881
--- /dev/null
+++ b/samples/PlacesGraphSample/src/com/example/places/utils/PlaceFieldDataFactory.java
@@ -0,0 +1,70 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.example.places.utils;
+
+import android.content.Context;
+
+import com.example.places.model.Place;
+import com.example.places.model.PlaceTextUtils;
+
+public class PlaceFieldDataFactory {
+
+    public static PlaceFieldData newPlaceField(
+            Context context,
+            String field,
+            Place place) {
+
+        if (!place.has(field)) {
+            return null;
+        }
+
+        String text = PlaceTextUtils.getFieldValue(context, place, field);
+
+        if (text == null) {
+            return null;
+        }
+        PlaceFieldData.Type type = getPlaceFieldType(field);
+        String title = PlaceTextUtils.getFieldName(context, field);
+
+        return new PlaceFieldData(
+                place,
+                field,
+                title,
+                text,
+                type);
+    }
+
+    private static PlaceFieldData.Type getPlaceFieldType(String field) {
+        switch (field) {
+            case Place.LOCATION:
+                return PlaceFieldData.Type.MAP;
+            case Place.APP_LINKS:
+                return PlaceFieldData.Type.APP_LINK;
+            case Place.PHONE:
+                return PlaceFieldData.Type.PHONE;
+            case Place.LINK:
+            case Place.WEBSITE:
+                return PlaceFieldData.Type.LINK;
+            default:
+                return PlaceFieldData.Type.TEXT;
+        }
+    }
+}
diff --git a/samples/RPSSample/AndroidManifest.xml b/samples/RPSSample/AndroidManifest.xml
index c8c42da90..129f0c5da 100644
--- a/samples/RPSSample/AndroidManifest.xml
+++ b/samples/RPSSample/AndroidManifest.xml
@@ -20,39 +20,59 @@
 -->
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="com.example.rps"
-          android:versionCode="1"
-          android:versionName="1.0">
-    <uses-permission android:name="android.permission.INTERNET"/>
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
-    <application android:label="@string/app_name"
-                 android:icon="@drawable/icon"
-                 android:theme="@android:style/Theme.NoTitleBar"
-            >
-        <activity android:name="com.example.rps.MainActivity"
-                  android:label="@string/app_name"
-                  android:screenOrientation="portrait"
-                  android:windowSoftInputMode="adjustResize">
+    package="com.example.rps"
+    android:versionCode="1"
+    android:versionName="1.0">
+
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+
+    <application
+        android:icon="@drawable/icon"
+        android:label="@string/app_name"
+        android:theme="@android:style/Theme.NoTitleBar">
+        <activity
+            android:name="com.example.rps.MainActivity"
+            android:label="@string/app_name"
+            android:screenOrientation="portrait"
+            android:windowSoftInputMode="adjustResize">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
             <intent-filter>
-                <action android:name="android.intent.action.MAIN"/>
-                <category android:name="android.intent.category.LAUNCHER"/>
+                <action android:name="android.intent.action.VIEW" />
+
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+
+                <data
+                    android:host="fb.me"
+                    android:scheme="https" />
             </intent-filter>
+        </activity>
+        <activity
+            android:name="com.facebook.CustomTabActivity">
             <intent-filter>
                 <action android:name="android.intent.action.VIEW" />
+
                 <category android:name="android.intent.category.DEFAULT" />
                 <category android:name="android.intent.category.BROWSABLE" />
-                <data android:host="fb.me" android:scheme="https" />
+
+                <data android:scheme="@string/fb_login_protocol_scheme" />
             </intent-filter>
         </activity>
-        <activity android:name="com.facebook.FacebookActivity"
-                  android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
-                  android:theme="@android:style/Theme.Translucent.NoTitleBar"
-                  android:label="@string/app_name" />
-        <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id"/>
-        <meta-data android:name="com.facebook.sdk.ApplicationName"
-                   android:value="@string/facebook_app_name" />
-        <provider android:authorities="com.facebook.app.FacebookContentProvider157578437735213"
-                  android:name="com.facebook.FacebookContentProvider"
-                  android:exported="true" />
+
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationId"
+            android:value="@string/app_id" />
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationName"
+            android:value="@string/facebook_app_name" />
+
+        <provider
+            android:name="com.facebook.FacebookContentProvider"
+            android:authorities="com.facebook.app.FacebookContentProvider157578437735213"
+            android:exported="true" />
     </application>
 </manifest>
diff --git a/samples/RPSSample/BUCK b/samples/RPSSample/BUCK
deleted file mode 100644
index f2e6f55ec..000000000
--- a/samples/RPSSample/BUCK
+++ /dev/null
@@ -1,35 +0,0 @@
-android_resource(
-  name = 'res',
-  res = 'res',
-  package = 'com.example.rps',
-  deps = [
-    '//facebook:android-sdk',
-  ],
-)
-
-android_library(
-  name = 'lib',
-  srcs = glob(['src/**/*.java']),
-  deps = [
-    ':res',
-    '//facebook:android-sdk',
-    '//libs:android-support-v4',
-  ],
-)
-
-android_binary(
-  name = 'app',
-  manifest = 'AndroidManifest.xml',
-  keystore = '//keystores:debug',
-  package_type = 'debug',
-  deps = [
-    ':lib',
-    '//facebook:android-sdk',
-    '//libs:android-support-v4',
-  ],
-)
-
-project_config(
-  src_target = ':app',
-  src_roots = ['src'],
-)
diff --git a/samples/RPSSample/build.gradle b/samples/RPSSample/build.gradle
index 8ba946d53..d0cc1b80f 100644
--- a/samples/RPSSample/build.gradle
+++ b/samples/RPSSample/build.gradle
@@ -9,6 +9,7 @@ android {
     buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
+        applicationId 'com.example.rps'
         minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
         targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
     }
diff --git a/samples/RPSSample/res/drawable-hdpi/icon.png b/samples/RPSSample/res/drawable-hdpi/icon.png
index 9e70a87f3..e3336f6bf 100644
Binary files a/samples/RPSSample/res/drawable-hdpi/icon.png and b/samples/RPSSample/res/drawable-hdpi/icon.png differ
diff --git a/samples/RPSSample/res/values/strings.xml b/samples/RPSSample/res/values/strings.xml
index 5cb1193a6..51acce981 100644
--- a/samples/RPSSample/res/values/strings.xml
+++ b/samples/RPSSample/res/values/strings.xml
@@ -23,6 +23,7 @@
     <string name="app_name">RPSSample</string>
     <string name="facebook_app_name">Rock Paper Scissors SDK Sample</string>
     <string name="app_id">157578437735213</string>
+    <string name="fb_login_protocol_scheme">fb157578437735213</string>
     <string name="rock">Rock</string>
     <string name="paper">Paper</string>
     <string name="scissors">Scissors</string>
diff --git a/samples/RPSSample/src/com/example/rps/MainActivity.java b/samples/RPSSample/src/com/example/rps/MainActivity.java
index 0c63b0e2f..d87c786e5 100644
--- a/samples/RPSSample/src/com/example/rps/MainActivity.java
+++ b/samples/RPSSample/src/com/example/rps/MainActivity.java
@@ -63,9 +63,6 @@
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-
-        FacebookSdk.sdkInitialize(this.getApplicationContext());
-
         accessTokenTracker = new AccessTokenTracker() {
             @Override
             protected void onCurrentAccessTokenChanged(AccessToken oldAccessToken,
@@ -124,20 +121,12 @@ public void onSuccess(GameRequestDialog.Result result) {
     public void onResume() {
         super.onResume();
         isResumed = true;
-
-        // Call the 'activateApp' method to log an app event for use in analytics and advertising reporting.  Do so in
-        // the onResume methods of the primary Activities that an app may be launched into.
-        AppEventsLogger.activateApp(this);
     }
 
     @Override
     public void onPause() {
         super.onPause();
         isResumed = false;
-
-        // Call the 'deactivateApp' method to log an app event for use in analytics and advertising
-        // reporting.  Do so in the onPause methods of the primary Activities that an app may be launched into.
-        AppEventsLogger.deactivateApp(this);
     }
 
     @Override
diff --git a/samples/RPSSample/src/com/example/rps/RpsFragment.java b/samples/RPSSample/src/com/example/rps/RpsFragment.java
index 7fe141832..2abfa3257 100644
--- a/samples/RPSSample/src/com/example/rps/RpsFragment.java
+++ b/samples/RPSSample/src/com/example/rps/RpsFragment.java
@@ -439,8 +439,8 @@ public void shareUsingMessengerDialog() {
 
     public void presentAppInviteDialog() {
         AppInviteContent content = new AppInviteContent.Builder()
-                .setApplinkUrl("http://hosting-rps.parseapp.com/applink.html")
-                .setPreviewImageUrl("http://hosting-rps.parseapp.com/rps-preview-image.png")
+                .setApplinkUrl("https://d3uu10x6fsg06w.cloudfront.net/hosting-rps/applink.html")
+                .setPreviewImageUrl("https://d3uu10x6fsg06w.cloudfront.net/hosting-rps/rps-preview-image.jpg")
                 .build();
         if (AppInviteDialog.canShow()) {
             appInviteDialog.show(this, content);
diff --git a/samples/Scrumptious/AndroidManifest.xml b/samples/Scrumptious/AndroidManifest.xml
index aff593587..0fc0fdbfc 100644
--- a/samples/Scrumptious/AndroidManifest.xml
+++ b/samples/Scrumptious/AndroidManifest.xml
@@ -50,10 +50,14 @@
             android:name="com.example.scrumptious.PickerActivity"
             android:label="@string/app_name" />
         <activity
-            android:name="com.facebook.FacebookActivity"
-            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
-            android:label="@string/app_name"
-            android:theme="@android:style/Theme.Translucent.NoTitleBar" />
+            android:name="com.facebook.CustomTabActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+                <data android:scheme="@string/fb_login_protocol_scheme" />
+            </intent-filter>
+        </activity>
 
         <meta-data
             android:name="com.facebook.sdk.ApplicationId"
diff --git a/samples/Scrumptious/BUCK b/samples/Scrumptious/BUCK
deleted file mode 100644
index 61f0ab4c0..000000000
--- a/samples/Scrumptious/BUCK
+++ /dev/null
@@ -1,35 +0,0 @@
-android_resource(
-  name = 'res',
-  res = 'res',
-  package = 'com.example.scrumptious',
-  deps = [
-    '//facebook:android-sdk',
-  ],
-)
-
-android_library(
-  name = 'lib',
-  srcs = glob(['src/**/*.java']),
-  deps = [
-    ':res',
-    '//facebook:android-sdk',
-    '//libs:android-support-v4',
-  ],
-)
-
-android_binary(
-  name = 'app',
-  manifest = 'AndroidManifest.xml',
-  keystore = '//keystores:debug',
-  package_type = 'debug',
-  deps = [
-    ':lib',
-    '//facebook:android-sdk',
-    '//libs:android-support-v4',
-  ],
-)
-
-project_config(
-  src_target = ':app',
-  src_roots = ['src'],
-)
diff --git a/samples/Scrumptious/build.gradle b/samples/Scrumptious/build.gradle
index 8ba946d53..b939629a6 100644
--- a/samples/Scrumptious/build.gradle
+++ b/samples/Scrumptious/build.gradle
@@ -9,6 +9,7 @@ android {
     buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
+        applicationId 'com.example.scrumptious'
         minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
         targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
     }
diff --git a/samples/Scrumptious/res/drawable-hdpi/icon.png b/samples/Scrumptious/res/drawable-hdpi/icon.png
index 383503ce9..d5b4ef6cb 100644
Binary files a/samples/Scrumptious/res/drawable-hdpi/icon.png and b/samples/Scrumptious/res/drawable-hdpi/icon.png differ
diff --git a/samples/Scrumptious/res/drawable-mdpi/icon.png b/samples/Scrumptious/res/drawable-mdpi/icon.png
index b14f00b4d..895d70f2e 100644
Binary files a/samples/Scrumptious/res/drawable-mdpi/icon.png and b/samples/Scrumptious/res/drawable-mdpi/icon.png differ
diff --git a/samples/Scrumptious/res/drawable-xhdpi/icon.png b/samples/Scrumptious/res/drawable-xhdpi/icon.png
index c86c5f0f3..7e7a5ce77 100644
Binary files a/samples/Scrumptious/res/drawable-xhdpi/icon.png and b/samples/Scrumptious/res/drawable-xhdpi/icon.png differ
diff --git a/samples/Scrumptious/res/drawable/icon.png b/samples/Scrumptious/res/drawable/icon.png
index 739392fc0..895d70f2e 100644
Binary files a/samples/Scrumptious/res/drawable/icon.png and b/samples/Scrumptious/res/drawable/icon.png differ
diff --git a/samples/Scrumptious/res/values/strings.xml b/samples/Scrumptious/res/values/strings.xml
index b7dd0cb88..080012bbf 100644
--- a/samples/Scrumptious/res/values/strings.xml
+++ b/samples/Scrumptious/res/values/strings.xml
@@ -22,6 +22,7 @@
 <resources>
     <string name="app_name">Scrumptious</string>
     <string name="app_id">233936543368280</string>
+    <string name="fb_login_protocol_scheme">fb233936543368280</string>
     <string name="get_started">To get started, login using Facebook</string>
     <string name="skip_login">continue as a guest</string>
     <string name="action_eating">Pick Meal</string>
@@ -86,14 +87,14 @@
     </string-array>
 
     <string-array name="food_og_urls">
-        <item>https://scrumptious-facebook.parseapp.com/meals/cheeseburger/</item> <!-- Cheeseburger -->
-        <item>https://scrumptious-facebook.parseapp.com/meals/pizza/</item> <!-- Pizza -->
-        <item>https://scrumptious-facebook.parseapp.com/meals/hotdog/</item> <!-- Hotdog -->
-        <item>https://scrumptious-facebook.parseapp.com/meals/italian/</item> <!-- Italian -->
-        <item>https://scrumptious-facebook.parseapp.com/meals/french/</item> <!-- French -->
-        <item>https://scrumptious-facebook.parseapp.com/meals/chinese/</item> <!-- Chinese -->
-        <item>https://scrumptious-facebook.parseapp.com/meals/thai/</item> <!-- Thai -->
-        <item>https://scrumptious-facebook.parseapp.com/meals/indian/</item> <!-- Indian -->
+        <item>https://d3uu10x6fsg06w.cloudfront.net/scrumptious-facebook/cheeseburger.html</item> <!-- Cheeseburger -->
+        <item>https://d3uu10x6fsg06w.cloudfront.net/scrumptious-facebook/pizza.html</item> <!-- Pizza -->
+        <item>https://d3uu10x6fsg06w.cloudfront.net/scrumptious-facebook/hotdog.html</item> <!-- Hotdog -->
+        <item>https://d3uu10x6fsg06w.cloudfront.net/scrumptious-facebook/italian.html</item> <!-- Italian -->
+        <item>https://d3uu10x6fsg06w.cloudfront.net/scrumptious-facebook/french.html</item> <!-- French -->
+        <item>https://d3uu10x6fsg06w.cloudfront.net/scrumptious-facebook/chinese.html</item> <!-- Chinese -->
+        <item>https://d3uu10x6fsg06w.cloudfront.net/scrumptious-facebook/thai.html</item> <!-- Thai -->
+        <item>https://d3uu10x6fsg06w.cloudfront.net/scrumptious-facebook/indian.html</item> <!-- Indian -->
         <item></item>
     </string-array>
 </resources>
diff --git a/samples/Scrumptious/src/com/example/scrumptious/MainActivity.java b/samples/Scrumptious/src/com/example/scrumptious/MainActivity.java
index 2fea256d6..92e833d22 100644
--- a/samples/Scrumptious/src/com/example/scrumptious/MainActivity.java
+++ b/samples/Scrumptious/src/com/example/scrumptious/MainActivity.java
@@ -103,11 +103,6 @@ public void onResume() {
         super.onResume();
         isResumed = true;
 
-        // Call the 'activateApp' method to log an app event for use in analytics and advertising
-        // reporting.  Do so in the onResume methods of the primary Activities that an app may be
-        // launched into.
-        AppEventsLogger.activateApp(this);
-
         if (AccessToken.getCurrentAccessToken() != null) {
             // if the user already logged in, try to show the selection fragment
             showFragment(SELECTION, false);
@@ -125,11 +120,6 @@ public void onResume() {
     public void onPause() {
         super.onPause();
         isResumed = false;
-
-        // Call the 'deactivateApp' method to log an app event for use in analytics and advertising
-        // reporting.  Do so in the onPause methods of the primary Activities that an app may be
-        // launched into.
-        AppEventsLogger.deactivateApp(this);
     }
 
     @Override
diff --git a/samples/Scrumptious/src/com/example/scrumptious/PickerActivity.java b/samples/Scrumptious/src/com/example/scrumptious/PickerActivity.java
index 09dc84ebf..1d8a57bc6 100644
--- a/samples/Scrumptious/src/com/example/scrumptious/PickerActivity.java
+++ b/samples/Scrumptious/src/com/example/scrumptious/PickerActivity.java
@@ -20,17 +20,21 @@
 
 package com.example.scrumptious;
 
+import android.Manifest;
+import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.app.Fragment;
 import android.app.FragmentManager;
 import android.content.Context;
 import android.content.DialogInterface;
+import android.content.pm.PackageManager;
 import android.location.Criteria;
 import android.location.Location;
 import android.location.LocationListener;
 import android.location.LocationManager;
 import android.net.Uri;
+import android.os.Build;
 import android.os.Bundle;
 import android.os.Looper;
 import android.widget.Toast;
@@ -127,6 +131,7 @@ public void onDoneButtonClicked(PickerFragment fragment) {
     }
 
     @Override
+    @SuppressLint("MissingPermission")
     protected void onStart() {
         super.onStart();
         if (FRIEND_PICKER.equals(getIntent().getData())) {
@@ -141,7 +146,7 @@ protected void onStart() {
                 Criteria criteria = new Criteria();
                 LocationManager locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
                 String bestProvider = locationManager.getBestProvider(criteria, false);
-                if (bestProvider != null) {
+                if (bestProvider != null && checkForLocationPermissionsAndRequest()) {
                     location = locationManager.getLastKnownLocation(bestProvider);
                     if (locationManager.isProviderEnabled(bestProvider) && locationListener == null) {
                         locationListener = new LocationListener() {
@@ -185,11 +190,15 @@ public void onProviderDisabled(String s) {
     }
 
     @Override
+    @SuppressLint("MissingPermission")
     protected void onStop() {
         super.onStop();
         if (locationListener != null) {
-            LocationManager locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
-            locationManager.removeUpdates(locationListener);
+            if (hasLocationPermissions()) {
+                LocationManager locationManager =
+                        (LocationManager)getSystemService(Context.LOCATION_SERVICE);
+                locationManager.removeUpdates(locationListener);
+            }
             locationListener = null;
         }
     }
@@ -229,4 +238,36 @@ private void finishActivity() {
         setResult(RESULT_OK, null);
         finish();
     }
+
+    private boolean checkForLocationPermissionsAndRequest() {
+        if (!hasLocationPermissions()) {
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+                requestPermissions(
+                        new String[]{
+                                Manifest.permission.ACCESS_FINE_LOCATION,
+                                Manifest.permission.ACCESS_COARSE_LOCATION
+                        },
+                        0);
+            }
+
+            return false;
+        } else {
+            return true;
+        }
+    }
+
+    private boolean hasLocationPermissions() {
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
+            return true;
+        }
+
+        if (checkSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION)
+                != PackageManager.PERMISSION_GRANTED
+                && checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION)
+                != PackageManager.PERMISSION_GRANTED) {
+            return false;
+        }
+
+        return true;
+    }
 }
diff --git a/samples/Scrumptious/src/com/example/scrumptious/ScrumptiousApplication.java b/samples/Scrumptious/src/com/example/scrumptious/ScrumptiousApplication.java
index 7027b4834..4a775d76f 100644
--- a/samples/Scrumptious/src/com/example/scrumptious/ScrumptiousApplication.java
+++ b/samples/Scrumptious/src/com/example/scrumptious/ScrumptiousApplication.java
@@ -32,13 +32,6 @@
  * Use a custom Application class to pass state data between Activities.
  */
 public class ScrumptiousApplication extends Application {
-
-    @Override
-    public void onCreate() {
-        super.onCreate();
-        FacebookSdk.sdkInitialize(getApplicationContext());
-    }
-
     private List<JSONObject> selectedUsers;
     private JSONObject selectedPlace;
 
diff --git a/samples/ShareIt/AndroidManifest.xml b/samples/ShareIt/AndroidManifest.xml
index a5939b604..2c8f2fbf1 100644
--- a/samples/ShareIt/AndroidManifest.xml
+++ b/samples/ShareIt/AndroidManifest.xml
@@ -25,7 +25,6 @@
     <uses-permission android:name="android.permission.INTERNET" />
 
     <application
-        android:name="com.example.shareit.ShareItApplication"
         android:allowBackup="true"
         android:icon="@drawable/icon"
         android:label="@string/app_name"
@@ -40,10 +39,14 @@
             </intent-filter>
         </activity>
         <activity
-            android:name="com.facebook.FacebookActivity"
-            android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
-            android:label="@string/app_name"
-            android:theme="@android:style/Theme.Translucent.NoTitleBar" />
+            android:name="com.facebook.CustomTabActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+                <data android:scheme="@string/fb_login_protocol_scheme" />
+            </intent-filter>
+        </activity>
 
         <meta-data
             android:name="com.facebook.sdk.ApplicationId"
diff --git a/samples/ShareIt/build.gradle b/samples/ShareIt/build.gradle
index 3288f92db..173deb16d 100644
--- a/samples/ShareIt/build.gradle
+++ b/samples/ShareIt/build.gradle
@@ -17,7 +17,7 @@ android {
     buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
-        applicationId "com.example.shareit"
+        applicationId 'com.example.shareit'
         minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
         targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
     }
diff --git a/samples/ShareIt/res/drawable-hdpi/icon.png b/samples/ShareIt/res/drawable-hdpi/icon.png
index 66186b7d9..ae01da1ea 100644
Binary files a/samples/ShareIt/res/drawable-hdpi/icon.png and b/samples/ShareIt/res/drawable-hdpi/icon.png differ
diff --git a/samples/ShareIt/res/drawable-mdpi/icon.png b/samples/ShareIt/res/drawable-mdpi/icon.png
index 85917270a..50cdca5ee 100644
Binary files a/samples/ShareIt/res/drawable-mdpi/icon.png and b/samples/ShareIt/res/drawable-mdpi/icon.png differ
diff --git a/samples/ShareIt/res/drawable-xhdpi/icon.png b/samples/ShareIt/res/drawable-xhdpi/icon.png
index 73d2a23ed..3775b0c2d 100644
Binary files a/samples/ShareIt/res/drawable-xhdpi/icon.png and b/samples/ShareIt/res/drawable-xhdpi/icon.png differ
diff --git a/samples/ShareIt/res/values/strings.xml b/samples/ShareIt/res/values/strings.xml
index 2ab231f6a..9efc84df2 100644
--- a/samples/ShareIt/res/values/strings.xml
+++ b/samples/ShareIt/res/values/strings.xml
@@ -23,4 +23,5 @@
     <string name="main_page_text">Share It! App</string>
     <string name="likeable_image">Likeable image</string>
     <string name="share_menu_title">Share</string>
+    <string name="fb_login_protocol_scheme">fb620223481391648</string>
 </resources>
diff --git a/samples/ShareIt/src/com/example/shareit/ShareFragment.java b/samples/ShareIt/src/com/example/shareit/ShareFragment.java
index c8be2417d..dc115430a 100644
--- a/samples/ShareIt/src/com/example/shareit/ShareFragment.java
+++ b/samples/ShareIt/src/com/example/shareit/ShareFragment.java
@@ -46,10 +46,13 @@
 
     // The resource to url mapping
     private static final ArrayList<Pair<Integer, String>> IMAGE_IDS =
-            new ArrayList<Pair<Integer, String>>() {{
-                add(new Pair<>(R.drawable.goofy, "http://shareitexampleapp.parseapp.com/goofy/"));
-                add(new Pair<>(R.drawable.liking, "http://shareitexampleapp.parseapp.com/liking/"));
-                add(new Pair<>(R.drawable.viking, "http://shareitexampleapp.parseapp.com/viking/"));
+            new ArrayList<Pair<Integer, String>>() { {
+                add(new Pair<>(R.drawable.goofy,
+                  "https://d3uu10x6fsg06w.cloudfront.net/shareitexampleapp/goofy/index.html"));
+                add(new Pair<>(R.drawable.liking,
+                  "https://d3uu10x6fsg06w.cloudfront.net/shareitexampleapp/liking/index.html"));
+                add(new Pair<>(R.drawable.viking,
+                  "https://d3uu10x6fsg06w.cloudfront.net/shareitexampleapp/viking/index.html"));
             }};
 
     @Override
diff --git a/samples/SwitchUserSample/AndroidManifest.xml b/samples/SwitchUserSample/AndroidManifest.xml
index 7cfc69164..d13d8a46c 100644
--- a/samples/SwitchUserSample/AndroidManifest.xml
+++ b/samples/SwitchUserSample/AndroidManifest.xml
@@ -38,11 +38,23 @@
                 <category android:name="android.intent.category.LAUNCHER" />
             </intent-filter>
         </activity>
-        <activity android:name="com.facebook.FacebookActivity"
-                  android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
-                  android:theme="@android:style/Theme.Translucent.NoTitleBar"
-                  android:label="@string/app_name" />
-        <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id"/>
-        <meta-data android:name="com.facebook.sdk.ApplicationName" android:value="@string/app_name" />
+        <activity
+            android:name="com.facebook.CustomTabActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+
+                <data android:scheme="@string/fb_login_protocol_scheme" />
+            </intent-filter>
+        </activity>
+
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationId"
+            android:value="@string/app_id" />
+        <meta-data
+            android:name="com.facebook.sdk.ApplicationName"
+            android:value="@string/app_name" />
     </application>
 </manifest> 
diff --git a/samples/SwitchUserSample/build.gradle b/samples/SwitchUserSample/build.gradle
index a34022f03..276a86928 100644
--- a/samples/SwitchUserSample/build.gradle
+++ b/samples/SwitchUserSample/build.gradle
@@ -10,6 +10,7 @@ android {
     buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
+        applicationId 'com.example.switchuser'
         minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
         targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
     }
diff --git a/samples/SwitchUserSample/res/drawable-hdpi/icon.png b/samples/SwitchUserSample/res/drawable-hdpi/icon.png
index 8e4f7040c..dd6f7d77e 100644
Binary files a/samples/SwitchUserSample/res/drawable-hdpi/icon.png and b/samples/SwitchUserSample/res/drawable-hdpi/icon.png differ
diff --git a/samples/SwitchUserSample/res/drawable-xhdpi/icon.png b/samples/SwitchUserSample/res/drawable-xhdpi/icon.png
index e49838d03..25270e1a9 100644
Binary files a/samples/SwitchUserSample/res/drawable-xhdpi/icon.png and b/samples/SwitchUserSample/res/drawable-xhdpi/icon.png differ
diff --git a/samples/SwitchUserSample/res/values/strings.xml b/samples/SwitchUserSample/res/values/strings.xml
index 61c1ec908..def6eb3ac 100644
--- a/samples/SwitchUserSample/res/values/strings.xml
+++ b/samples/SwitchUserSample/res/values/strings.xml
@@ -27,4 +27,5 @@
     <string name="menu_item_switch_user">Select User</string>
     <string name="menu_item_clear_slot">Clear this slot</string>
     <string name="app_id">327842977278179</string>
+    <string name="fb_login_protocol_scheme">fb327842977278179</string>
 </resources>
diff --git a/samples/SwitchUserSample/src/com/example/switchuser/MainActivity.java b/samples/SwitchUserSample/src/com/example/switchuser/MainActivity.java
index d7c705266..2a83f33d6 100644
--- a/samples/SwitchUserSample/src/com/example/switchuser/MainActivity.java
+++ b/samples/SwitchUserSample/src/com/example/switchuser/MainActivity.java
@@ -40,7 +40,6 @@
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        FacebookSdk.sdkInitialize(getApplicationContext());
 
         setContentView(R.layout.main);
 
@@ -89,11 +88,6 @@ public boolean onOptionsItemSelected(MenuItem item) {
                 return handleOptionsItemSelected(item);
             }
         });
-
-        // Call the 'activateApp' method to log an app event for use in analytics and advertising
-        // reporting.  Do so in the onResume methods of the primary Activities that an app may be
-        // launched into.
-        AppEventsLogger.activateApp(this);
     }
 
     @Override
@@ -101,11 +95,6 @@ protected void onPause() {
         super.onPause();
 
         profileFragment.setOnOptionsItemSelectedListener(null);
-
-        // Call the 'deactivateApp' method to log an app event for use in analytics and advertising
-        // reporting.  Do so in the onPause methods of the primary Activities that an app may be
-        // launched into.
-        AppEventsLogger.deactivateApp(this);
     }
 
     private void restoreFragments(Bundle savedInstanceState) {
diff --git a/samples/SwitchUserSample/src/com/example/switchuser/ProfileFragment.java b/samples/SwitchUserSample/src/com/example/switchuser/ProfileFragment.java
index cca057952..310e9ebe9 100644
--- a/samples/SwitchUserSample/src/com/example/switchuser/ProfileFragment.java
+++ b/samples/SwitchUserSample/src/com/example/switchuser/ProfileFragment.java
@@ -120,7 +120,7 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
     public void onDestroy() {
         super.onDestroy();
         profileTracker.stopTracking();
-        accessTokenTracker.startTracking();
+        accessTokenTracker.stopTracking();
     }
 
     public void setOnOptionsItemSelectedListener(OnOptionsItemSelectedListener listener) {
diff --git a/samples/SwitchUserSample/src/com/example/switchuser/UserInfoCache.java b/samples/SwitchUserSample/src/com/example/switchuser/UserInfoCache.java
index c65e9fedd..2ac7fdb9a 100644
--- a/samples/SwitchUserSample/src/com/example/switchuser/UserInfoCache.java
+++ b/samples/SwitchUserSample/src/com/example/switchuser/UserInfoCache.java
@@ -42,7 +42,12 @@ public UserInfo get() {
         if(encodedToken == null) {
             return null;
         }
-        return decodeUserInfo(encodedToken);
+        UserInfo info = decodeUserInfo(encodedToken);
+        if (info.getAccessToken().isExpired()) {
+            clear();
+            return null;
+        }
+        return info;
     }
 
     public void put(UserInfo userInfo) {
diff --git a/scripts/build_documentation.sh b/scripts/build_documentation.sh
new file mode 100755
index 000000000..49b58cf04
--- /dev/null
+++ b/scripts/build_documentation.sh
@@ -0,0 +1,82 @@
+#!/bin/sh
+# Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+#
+# You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+# copy, modify, and distribute this software in source code or binary form for use
+# in connection with the web services and APIs provided by Facebook.
+#
+# As with any software that integrates with the Facebook platform, your use of
+# this software is subject to the Facebook Developer Principles and Policies
+# [http://developers.facebook.com/policy/]. This copyright notice shall be
+# included in all copies or substantial portions of the software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+# This script builds the API documentation from source-level comments.
+
+# Utility functions.
+function die() {
+  echo ""
+  echo "FATAL: $*" >&2
+  exit 1
+}
+
+# Make sure javadoc is installed.
+hash javadoc >/dev/null || die 'Javadoc is not installed!'
+
+# The directory containing this script
+# We need to go there and use pwd so these are all absolute paths
+pushd "$(dirname $BASH_SOURCE[0])" > /dev/null
+FB_SDK_SCRIPT=$(pwd)
+popd >/dev/null
+
+# The root directory where the Facebook SDK for android is cloned
+FB_SDK_ROOT=$(dirname "$FB_SDK_SCRIPT")
+
+# Source folders of each kit
+KIT_SRC_FOLDERS=(
+  'facebook'
+  'accountkit/accountkitsdk'
+  'ads/ads'
+)
+
+# Output doc folders for each kit
+KIT_DOC_FOLDERS=(
+  'facebook'
+  'accountkit'
+  'audiencenetwork'
+)
+
+# Path to java source file under each kit folder
+PATH_TO_SRC='src/main/java'
+
+mkdir -p $FB_SDK_ROOT/docs
+
+for (( i = 0; i < ${#KIT_SRC_FOLDERS[@]}; i++ ))
+do
+  KIT_SRC=${KIT_SRC_FOLDERS[$i]}
+  KIT_DOC=${KIT_DOC_FOLDERS[$i]}
+
+  SRC_FOLDER=$FB_SDK_ROOT/$KIT_SRC/$PATH_TO_SRC
+  DOC_FOLDER=$FB_SDK_ROOT/docs/$KIT_DOC
+  LOG_FILE=$FB_SDK_ROOT/docs/$KIT_DOC.log
+
+  # Find all the facebook packages except internal ones
+  # Then use javadoc to generate docs for those packages
+  grep --recursive --no-filename -Po '(?<=package )com\.facebook.*?(?=;)' $SRC_FOLDER | sort | uniq | grep -v internal \
+    | xargs javadoc -quiet -d $DOC_FOLDER -sourcepath $SRC_FOLDER &> $LOG_FILE
+
+  cd $FB_SDK_ROOT/docs
+  zip --quiet --recurse-paths $DOC_FOLDER.zip $KIT_DOC
+
+  echo ""
+  echo "Generated docs in $DOC_FOLDER"
+  echo "... zip as $DOC_FOLDER.zip"
+  echo "... see log file at $LOG_FILE"
+done
+
diff --git a/settings.gradle b/settings.gradle
index df7ac3cfa..187b6f8c7 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -2,9 +2,9 @@
 include ':facebook'
 
 if (file('internal/internal-settings.gradle').exists()) {
-  apply from: 'internal/internal-settings.gradle'
+    apply from: 'internal/internal-settings.gradle'
 }
 
 if (file('local.gradle').exists()) {
-  apply from: 'local.gradle'
+    apply from: 'local.gradle'
 }
