diff --git a/facebook-core/src/main/java/com/facebook/appevents/UserDataStore.java b/facebook-core/src/main/java/com/facebook/appevents/UserDataStore.java
index 6c1741e41..47407cc26 100644
--- a/facebook-core/src/main/java/com/facebook/appevents/UserDataStore.java
+++ b/facebook-core/src/main/java/com/facebook/appevents/UserDataStore.java
@@ -28,6 +28,7 @@
 
 import com.facebook.FacebookSdk;
 import com.facebook.appevents.internal.AppEventUtility;
+import com.facebook.internal.Utility;
 
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -181,7 +182,7 @@ private static void updateHashUserData(final Bundle ud) {
             if (maybeSHA256Hashed(value)) {
                 hashedUserData.put(key, value.toLowerCase());
             } else {
-                final String encryptedValue = encryptData(normalizeData(key, value));
+                final String encryptedValue = Utility.sha256hash(normalizeData(key, value));
                 if (encryptedValue != null) {
                     hashedUserData.put(key, encryptedValue);
                 }
@@ -189,23 +190,6 @@ private static void updateHashUserData(final Bundle ud) {
         }
     }
 
-    @Nullable
-    private static String encryptData(String data) {
-        if (data == null || data.isEmpty()) {
-            return null;
-        }
-
-        MessageDigest md;
-        try {
-            md = MessageDigest.getInstance("SHA-256");
-        } catch (NoSuchAlgorithmException e) {
-            return null;
-        }
-
-        md.update(data.getBytes());
-        return AppEventUtility.bytesToHex(md.digest());
-    }
-
     private static String normalizeData(String type, String data) {
         data = data.trim().toLowerCase();
 
diff --git a/facebook-core/src/main/java/com/facebook/appevents/codeless/CodelessMatcher.java b/facebook-core/src/main/java/com/facebook/appevents/codeless/CodelessMatcher.java
index 83d3967ff..29d039a88 100644
--- a/facebook-core/src/main/java/com/facebook/appevents/codeless/CodelessMatcher.java
+++ b/facebook-core/src/main/java/com/facebook/appevents/codeless/CodelessMatcher.java
@@ -42,6 +42,7 @@
 import com.facebook.internal.FetchedAppSettings;
 import com.facebook.internal.FetchedAppSettingsManager;
 import com.facebook.internal.InternalSettings;
+import com.facebook.internal.Utility;
 
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
@@ -394,8 +395,10 @@ private static boolean isTheSameView(
                     & MatchBitmaskType.TEXT.getValue()) > 0) {
                 String pathText = pathElement.text;
                 String text = ViewHierarchy.getTextOfView(targetView);
+                String hashedText = Utility.coerceValueIfNullOrEmpty(
+                        Utility.sha256hash(text), "");
 
-                if (!pathText.equals(text)) {
+                if (!pathText.equals(text) && !pathText.equals(hashedText)) {
                     return false;
                 }
             }
@@ -405,7 +408,9 @@ private static boolean isTheSameView(
                 String pathDesc = pathElement.description;
                 String targetDesc = targetView.getContentDescription() == null ? "" :
                         String.valueOf(targetView.getContentDescription());
-                if (!pathDesc.equals(targetDesc)) {
+                String hashedDesc = Utility.coerceValueIfNullOrEmpty(
+                        Utility.sha256hash(targetDesc), "");
+                if (!pathDesc.equals(targetDesc) && !pathDesc.equals(hashedDesc)) {
                     return false;
                 }
             }
@@ -414,8 +419,10 @@ private static boolean isTheSameView(
                     & MatchBitmaskType.HINT.getValue()) > 0) {
                 String pathHint = pathElement.hint;
                 String targetHint = ViewHierarchy.getHintOfView(targetView);
+                String hashedHint = Utility.coerceValueIfNullOrEmpty(
+                        Utility.sha256hash(targetHint), "");
 
-                if (!pathHint.equals(targetHint)) {
+                if (!pathHint.equals(targetHint) && !pathHint.equals(hashedHint)) {
                     return false;
                 }
             }
@@ -425,7 +432,9 @@ private static boolean isTheSameView(
                 String tag = pathElement.tag;
                 String targetTag = targetView.getTag() == null ? "" :
                         String.valueOf(targetView.getTag());
-                if (!tag.equals(targetTag)) {
+                String hashedTag = Utility.coerceValueIfNullOrEmpty(
+                        Utility.sha256hash(targetTag), "");
+                if (!tag.equals(targetTag) && !tag.equals(hashedTag)) {
                     return false;
                 }
             }
diff --git a/facebook-core/src/main/java/com/facebook/appevents/codeless/internal/ViewHierarchy.java b/facebook-core/src/main/java/com/facebook/appevents/codeless/internal/ViewHierarchy.java
index 001e00d8a..ffbdf8b95 100644
--- a/facebook-core/src/main/java/com/facebook/appevents/codeless/internal/ViewHierarchy.java
+++ b/facebook-core/src/main/java/com/facebook/appevents/codeless/internal/ViewHierarchy.java
@@ -157,17 +157,21 @@ public static JSONObject setBasicInfoOfView(View view, JSONObject json) {
             json.put(CLASS_TYPE_BITMASK_KEY, getClassTypeBitmask(view));
             json.put(ID_KEY, view.getId());
             if (!SensitiveUserDataUtils.isSensitiveUserData(view)) {
-                json.put(TEXT_KEY, text);
+                json.put(TEXT_KEY,
+                        Utility.coerceValueIfNullOrEmpty(Utility.sha256hash(text), ""));
             } else {
                 json.put(TEXT_KEY, "");
                 json.put(IS_USER_INPUT_KEY, true);
             }
-            json.put(HINT_KEY, hint);
+            json.put(HINT_KEY,
+                    Utility.coerceValueIfNullOrEmpty(Utility.sha256hash(hint), ""));
             if (tag != null) {
-                json.put(TAG_KEY, tag.toString());
+                json.put(TAG_KEY,
+                        Utility.coerceValueIfNullOrEmpty(Utility.sha256hash(tag.toString()), ""));
             }
             if (description != null) {
-                json.put(DESC_KEY, description.toString());
+                json.put(DESC_KEY,
+                        Utility.coerceValueIfNullOrEmpty(Utility.sha256hash(description.toString()), ""));
             }
             JSONObject dimension = getDimensionOfView(view);
             json.put(DIMENSION_KEY, dimension);
diff --git a/facebook-core/src/main/java/com/facebook/internal/Utility.java b/facebook-core/src/main/java/com/facebook/internal/Utility.java
index f2b8eb405..11f90f687 100644
--- a/facebook-core/src/main/java/com/facebook/internal/Utility.java
+++ b/facebook-core/src/main/java/com/facebook/internal/Utility.java
@@ -31,6 +31,7 @@
 import android.os.Parcel;
 import android.os.StatFs;
 import android.provider.OpenableColumns;
+import android.support.annotation.Nullable;
 import android.telephony.TelephonyManager;
 import android.text.TextUtils;
 import android.util.DisplayMetrics;
@@ -95,6 +96,7 @@
     static final String LOG_TAG = "FacebookSDK";
     private static final String HASH_ALGORITHM_MD5 = "MD5";
     private static final String HASH_ALGORITHM_SHA1 = "SHA-1";
+    private static final String HASH_ALGORITHM_SHA256 = "SHA-256";
     private static final String URL_SCHEME = "https";
     private static final String EXTRA_APP_EVENTS_INFO_FORMAT_VERSION = "a2";
 
@@ -277,6 +279,22 @@ public static String sha1hash(byte[] bytes) {
         return hashWithAlgorithm(HASH_ALGORITHM_SHA1, bytes);
     }
 
+    @Nullable
+    public static String sha256hash(@Nullable String key) {
+        if (key == null) {
+            return null;
+        }
+        return hashWithAlgorithm(HASH_ALGORITHM_SHA256, key);
+    }
+
+    @Nullable
+    public static String sha256hash(@Nullable byte[] bytes) {
+        if (bytes == null) {
+            return null;
+        }
+        return hashWithAlgorithm(HASH_ALGORITHM_SHA256, bytes);
+    }
+
     private static String hashWithAlgorithm(String algorithm, String key) {
         return hashWithAlgorithm(algorithm, key.getBytes());
     }
diff --git a/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerTest.java b/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerTest.java
index 86977d088..47bc39bce 100644
--- a/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerTest.java
+++ b/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerTest.java
@@ -55,7 +55,6 @@
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
 import static org.mockito.Matchers.argThat;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
@@ -77,7 +76,6 @@
         InternalAppEventsLogger.class,
         FacebookSdk.class,
         GraphRequest.class,
-        Utility.class,
 })
 public class AppEventsLoggerTest extends FacebookPowerMockTestCase {
 
@@ -89,10 +87,8 @@ public void before() throws Exception {
         when(FacebookSdk.isInitialized()).thenReturn(true);
         when(FacebookSdk.getApplicationContext()).thenReturn(RuntimeEnvironment.application);
         when(FacebookSdk.getExecutor()).thenReturn(mockExecutor);
+        FacebookSdk.setApplicationId("12345");
 
-        // Mock Utility class with empty stub functions, which will be called in
-        // AppEventsLoggerUtility.getJSONObjectForGraphAPICall
-        mockStatic(Utility.class);
         // Stub empty implementations to AppEventQueue to not really flush events
         mockStatic(AppEventQueue.class);
 
@@ -106,6 +102,9 @@ public void before() throws Exception {
         AppEvent mockEvent = mock(AppEvent.class);
         when(mockEvent.getIsImplicit()).thenReturn(true);
         PowerMockito.whenNew(AppEvent.class).withAnyArguments().thenReturn(mockEvent);
+
+        mockStatic(AttributionIdentifiers.class);
+        when(AttributionIdentifiers.getAttributionIdentifiers(any(Context.class))).thenReturn(null);
     }
 
     @Test
@@ -340,7 +339,6 @@ public void testLogPushNotificationOpenWithAction() throws Exception {
 
     @Test
     public void testLogPushNotificationOpenWithoutPayload() throws Exception {
-        when(Utility.isNullOrEmpty(anyString())).thenReturn(true);
         Bundle payload = new Bundle();
         AppEventsLogger.newLogger(FacebookSdk.getApplicationContext()).logPushNotificationOpen(payload);
 
@@ -374,8 +372,6 @@ public void testSetPushNotificationsRegistrationId()  throws Exception {
     public void testPublishInstall() throws Exception {
         GraphRequest mockRequest = mock(GraphRequest.class);
         PowerMockito.whenNew(GraphRequest.class).withAnyArguments().thenReturn(mockRequest);
-        mockStatic(AttributionIdentifiers.class);
-        when(AttributionIdentifiers.getAttributionIdentifiers(any(Context.class))).thenReturn(null);
         String expectedEvent = "MOBILE_APP_INSTALL";
         String expectedUrl = "mockAppID/activities";
         final ArgumentCaptor<JSONObject> captor = ArgumentCaptor.forClass(JSONObject.class);
