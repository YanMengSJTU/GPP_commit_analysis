diff --git a/facebook/src/test/java/com/facebook/GraphRequestTest.java b/facebook/src/test/java/com/facebook/GraphRequestTest.java
index b6114f24b..fab90d515 100644
--- a/facebook/src/test/java/com/facebook/GraphRequestTest.java
+++ b/facebook/src/test/java/com/facebook/GraphRequestTest.java
@@ -39,6 +39,7 @@
 import java.net.HttpURLConnection;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Set;
 
 import static com.facebook.TestUtils.assertEqualContentsWithoutOrder;
 import static org.junit.Assert.*;
@@ -69,6 +70,32 @@ public void before() {
         when(FacebookSdk.getClientToken()).thenReturn("5678");
     }
 
+    @Test
+    public void testAppendParametersToBaseUrl() throws Exception {
+        Bundle parameters = new Bundle();
+        parameters.putString("sample_key", "sample_value");
+        parameters.putString(GraphRequest.ACCESS_TOKEN_PARAM, "test_access_token");
+        GraphRequest singleGetRequest =
+                new GraphRequest(null, "testPath", parameters, HttpMethod.GET, null);
+        GraphRequest singlePostRequest =
+                new GraphRequest(null, "testPath", parameters, HttpMethod.POST, null);
+
+        String urlGet = singleGetRequest.getUrlForSingleRequest();
+        String urlPost = singlePostRequest.getUrlForSingleRequest();
+        String urlBatch = singlePostRequest.getRelativeUrlForBatchedRequest();
+        Set<String> args;
+
+        args = Uri.parse(urlGet).getQueryParameterNames();
+        assertTrue(args.contains("sample_key"));
+
+        args = Uri.parse(urlPost).getQueryParameterNames();
+        assertTrue(args.isEmpty());
+
+        // Batch URL should contain parameters
+        args = Uri.parse(urlBatch).getQueryParameterNames();
+        assertTrue(args.contains("sample_key"));
+    }
+
     @Test
     public void testCreateRequest() {
         GraphRequest request = new GraphRequest();
diff --git a/facebook/src/test/java/com/facebook/appevents/AppEventUtilityTest.java b/facebook/src/test/java/com/facebook/appevents/AppEventUtilityTest.java
new file mode 100644
index 000000000..24cc8e361
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/appevents/AppEventUtilityTest.java
@@ -0,0 +1,61 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import com.facebook.appevents.internal.AppEventUtility;
+
+import org.junit.Test;
+
+import java.util.Locale;
+
+import org.junit.Assert;
+
+public class AppEventUtilityTest {
+  @Test
+  public void testNormalizePrice() {
+    Locale.setDefault(Locale.US);
+    String price = "$1,234.567";
+    Assert.assertEquals(1234.567, AppEventUtility.normalizePrice(price), 0.001);
+
+    price = "price: $1,234.567. Good deal!";
+    Assert.assertEquals(1234.567, AppEventUtility.normalizePrice(price), 0.001);
+
+    price = "price: $1,234.567. Good deal! Add 2 more? ";
+    Assert.assertEquals(1234.567, AppEventUtility.normalizePrice(price), 0.001);
+
+    price = "price: $123 for 2 items";
+    Assert.assertEquals(123, AppEventUtility.normalizePrice(price), 0.001);
+
+    price = "Click to check price!";
+    Assert.assertEquals(0, AppEventUtility.normalizePrice(price), 0.001);
+
+    price = "$-1.23";
+    Assert.assertEquals(-1.23, AppEventUtility.normalizePrice(price), 0.001);
+
+    Locale.setDefault(Locale.FRANCE);
+    price = "$1,234";
+    Assert.assertEquals(1.234, AppEventUtility.normalizePrice(price), 0.001);
+
+    Locale.setDefault(Locale.ITALY);
+    price = "$1.234,567";
+    Assert.assertEquals(1234.567, AppEventUtility.normalizePrice(price), 0.001);
+  }
+}
diff --git a/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerTest.java b/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerTest.java
index 15a4f77fd..3682380c8 100644
--- a/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerTest.java
+++ b/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerTest.java
@@ -51,6 +51,7 @@
 import java.util.Locale;
 import java.util.UUID;
 import java.util.concurrent.Executor;
+import java.util.concurrent.ScheduledThreadPoolExecutor;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
@@ -68,6 +69,7 @@
 import static org.powermock.api.mockito.PowerMockito.verifyNew;
 import static org.powermock.api.mockito.PowerMockito.verifyStatic;
 import static org.powermock.api.mockito.PowerMockito.when;
+import static org.powermock.api.mockito.PowerMockito.whenNew;
 
 @PrepareForTest({
         AppEvent.class,
@@ -76,10 +78,11 @@
         AppEventsLogger.class,
         AppEventsLoggerImpl.class,
         AttributionIdentifiers.class,
-        InternalAppEventsLogger.class,
         FacebookSdk.class,
-        GraphRequest.class,
         FetchedAppGateKeepersManager.class,
+        GraphRequest.class,
+        InternalAppEventsLogger.class,
+        ScheduledThreadPoolExecutor.class,
 })
 public class AppEventsLoggerTest extends FacebookPowerMockTestCase {
 
@@ -95,6 +98,7 @@ public void before() throws Exception {
 
         // Stub empty implementations to AppEventQueue to not really flush events
         mockStatic(AppEventQueue.class);
+        mockStatic(ScheduledThreadPoolExecutor.class);
 
         // Disable AppEventUtility.isMainThread since executor now runs in main thread
         spy(AppEventUtility.class);
@@ -105,7 +109,7 @@ public void before() throws Exception {
 
         AppEvent mockEvent = mock(AppEvent.class);
         when(mockEvent.getIsImplicit()).thenReturn(true);
-        PowerMockito.whenNew(AppEvent.class).withAnyArguments().thenReturn(mockEvent);
+        whenNew(AppEvent.class).withAnyArguments().thenReturn(mockEvent);
 
         mockStatic(AttributionIdentifiers.class);
         when(AttributionIdentifiers.getAttributionIdentifiers(any(Context.class))).thenReturn(null);
@@ -116,6 +120,26 @@ public void before() throws Exception {
                 anyString(), anyString(), anyBoolean())).thenReturn(false);
     }
 
+    @Test
+    public void testAutoLoggerAppEventsEnabled() throws Exception {
+        when(FacebookSdk.getAutoLogAppEventsEnabled()).thenReturn(true);
+
+        whenNew(AppEventsLoggerImpl.class).withAnyArguments().thenReturn(null);
+        AppEventsLogger.initializeLib(null, null);
+
+        verifyNew(AppEventsLoggerImpl.class).withArguments(any(), any(), any());
+    }
+
+    @Test
+    public void testAutoLoggerAppEventsDisabled() throws Exception {
+        when(FacebookSdk.getAutoLogAppEventsEnabled()).thenReturn(false);
+
+        whenNew(AppEventsLoggerImpl.class).withAnyArguments().thenReturn(null);
+        AppEventsLogger.initializeLib(null, null);
+
+        verifyNew(AppEventsLoggerImpl.class, never()).withArguments(any(), any(), any());
+    }
+
     @Test
     public void testSetAndClearUserData() throws JSONException {
         AppEventsLogger.setUserData(
@@ -380,7 +404,7 @@ public void testSetPushNotificationsRegistrationId()  throws Exception {
     @Test
     public void testPublishInstall() throws Exception {
         GraphRequest mockRequest = mock(GraphRequest.class);
-        PowerMockito.whenNew(GraphRequest.class).withAnyArguments().thenReturn(mockRequest);
+        whenNew(GraphRequest.class).withAnyArguments().thenReturn(mockRequest);
         String expectedEvent = "MOBILE_APP_INSTALL";
         String expectedUrl = "mockAppID/activities";
         final ArgumentCaptor<JSONObject> captor = ArgumentCaptor.forClass(JSONObject.class);
diff --git a/facebook/src/test/java/com/facebook/appevents/codeless/CodelessTestBase.java b/facebook/src/test/java/com/facebook/appevents/codeless/CodelessTestBase.java
new file mode 100644
index 000000000..c85113383
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/appevents/codeless/CodelessTestBase.java
@@ -0,0 +1,57 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents.codeless;
+
+import android.app.Activity;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.facebook.FacebookPowerMockTestCase;
+
+import org.junit.Before;
+import org.robolectric.Robolectric;
+
+public class CodelessTestBase extends FacebookPowerMockTestCase {
+
+    LinearLayout root;
+
+    protected Activity activity;
+
+    @Before
+    public void setup() {
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+        root = new LinearLayout(activity);
+
+        activity.setContentView(root);
+
+        TextView outerLabel = new TextView(activity);
+        outerLabel.setText("Outer Label");
+        root.addView(outerLabel);
+
+        LinearLayout inner = new LinearLayout(activity);
+        root.addView(inner);
+
+        TextView innerLabel = new TextView(activity);
+        innerLabel.setText("Inner Label");
+        inner.addView(innerLabel);
+    }
+
+}
diff --git a/facebook/src/test/java/com/facebook/appevents/codeless/SensitiveUserDataUtilsTest.java b/facebook/src/test/java/com/facebook/appevents/codeless/SensitiveUserDataUtilsTest.java
new file mode 100644
index 000000000..9faef7b25
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/appevents/codeless/SensitiveUserDataUtilsTest.java
@@ -0,0 +1,70 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents.codeless;
+
+import android.text.InputType;
+import android.widget.TextView;
+
+import com.facebook.appevents.codeless.internal.SensitiveUserDataUtils;
+
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.Mockito;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+import static org.powermock.api.mockito.PowerMockito.when;
+
+public class SensitiveUserDataUtilsTest extends CodelessTestBase {
+
+    @Mock
+    private TextView textView;
+
+    @Test
+    public void testIsSensitiveUserData() {
+        when(textView.getText()).thenReturn("");
+
+        // input type == Password
+        when(textView.getInputType()).thenReturn(InputType.TYPE_TEXT_VARIATION_PASSWORD);
+        assertTrue(SensitiveUserDataUtils.isSensitiveUserData(textView));
+
+        // input type == Text
+        when(textView.getInputType()).thenReturn(InputType.TYPE_CLASS_TEXT);
+        assertFalse(SensitiveUserDataUtils.isSensitiveUserData(textView));
+
+        // input type == Person Name
+        when(textView.getInputType()).thenReturn(InputType.TYPE_TEXT_VARIATION_PERSON_NAME);
+        assertTrue(SensitiveUserDataUtils.isSensitiveUserData(textView));
+
+        // input type == Postal Address
+        when(textView.getInputType()).thenReturn(InputType.TYPE_TEXT_VARIATION_POSTAL_ADDRESS);
+        assertTrue(SensitiveUserDataUtils.isSensitiveUserData(textView));
+
+        // input type == Phone
+        Mockito.when(textView.getInputType()).thenReturn(InputType.TYPE_CLASS_PHONE);
+        assertTrue(SensitiveUserDataUtils.isSensitiveUserData(textView));
+
+        // Credit Card
+        when(textView.getInputType()).thenReturn(InputType.TYPE_CLASS_TEXT);
+        when(textView.getText()).thenReturn("4030122707427751");
+        assertTrue(SensitiveUserDataUtils.isSensitiveUserData(textView));
+    }
+}
diff --git a/facebook/src/test/java/com/facebook/appevents/codeless/ViewHierarchyTest.java b/facebook/src/test/java/com/facebook/appevents/codeless/ViewHierarchyTest.java
new file mode 100644
index 000000000..31a2e7511
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/appevents/codeless/ViewHierarchyTest.java
@@ -0,0 +1,47 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents.codeless;
+
+import com.facebook.appevents.codeless.internal.ViewHierarchy;
+import com.facebook.internal.Utility;
+
+import org.json.JSONObject;
+import org.junit.Test;
+
+import static org.junit.Assert.assertTrue;
+
+public class ViewHierarchyTest extends CodelessTestBase {
+    @Test
+    public void testGetDictionaryOfView() throws Exception {
+        JSONObject dict = ViewHierarchy.getDictionaryOfView(root);
+
+        String outerText = dict.getJSONArray("childviews").getJSONObject(0).getString("text");
+        assertTrue(outerText.equalsIgnoreCase(Utility.sha256hash("Outer Label")));
+
+        String innerText =
+                dict.getJSONArray("childviews")
+                        .getJSONObject(1)
+                        .getJSONArray("childviews")
+                        .getJSONObject(0)
+                        .getString("text");
+        assertTrue(innerText.equalsIgnoreCase(Utility.sha256hash("Inner Label")));
+    }
+}
diff --git a/facebook/src/test/java/com/facebook/appevents/codeless/ViewTrackerTest.java b/facebook/src/test/java/com/facebook/appevents/codeless/ViewTrackerTest.java
new file mode 100644
index 000000000..1c863c306
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/appevents/codeless/ViewTrackerTest.java
@@ -0,0 +1,59 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents.codeless;
+
+import com.facebook.appevents.codeless.internal.EventBinding;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.junit.Test;
+
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+
+public class ViewTrackerTest extends CodelessTestBase {
+    @Test
+    public void testFindView() throws JSONException {
+        String sample =
+                "{'event_name': 'sample_event',"
+                        + "'method': 'MANUAL', 'event_type': 'CLICK',"
+                        + "'app_version': '1.0', 'path_type': 'absolute',"
+                        + "'path': ["
+                        + "   {'class_name': 'android.widget.LinearLayout'},"
+                        + "   {'class_name': 'android.widget.LinearLayout'},"
+                        + "   {"
+                        + "       'class_name': 'android.widget.TextView',"
+                        + "       'text': 'Inner Label'"
+                        + "   }"
+                        + "]"
+                        + "}";
+        JSONObject json = new JSONObject(sample);
+        EventBinding sampleBinding = EventBinding.getInstanceFromJson(json);
+        assertNotNull(sampleBinding);
+
+        List<CodelessMatcher.MatchedView> matched =
+                CodelessMatcher.ViewMatcher.findViewByPath(
+                        sampleBinding, root, sampleBinding.getViewPath(), 0, -1, "Activity");
+        assertEquals(1, matched.size());
+    }
+}
