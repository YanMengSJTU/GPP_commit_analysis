diff --git a/facebook/src/androidTest/java/com/facebook/AsyncRequestTests.java b/facebook/src/androidTest/java/com/facebook/AsyncRequestTests.java
index da6bc7eaa..0fe815732 100644
--- a/facebook/src/androidTest/java/com/facebook/AsyncRequestTests.java
+++ b/facebook/src/androidTest/java/com/facebook/AsyncRequestTests.java
@@ -27,7 +27,6 @@
 import android.test.suitebuilder.annotation.SmallTest;
 
 import com.facebook.internal.BundleJSONConverter;
-import com.facebook.share.internal.ShareInternalUtility;
 
 import org.json.JSONArray;
 import org.json.JSONObject;
@@ -265,75 +264,7 @@ public void run() {
         waitAndAssertSuccess(1);
     }
 
-    @LargeTest
-    public void testBatchUploadPhoto() {
-        final AccessToken accessToken = getAccessTokenForSharedUserWithPermissions(null,
-                "user_photos", "publish_actions");
-
-        final int image1Size = 120;
-        final int image2Size = 150;
-
-        Bitmap bitmap1 = createTestBitmap(image1Size);
-        Bitmap bitmap2 = createTestBitmap(image2Size);
-
-        Bundle parameters = new Bundle();
-        parameters.putString("fields", "width");
-
-        GraphRequest uploadRequest1 = GraphRequest.newUploadPhotoRequest(
-                accessToken,
-                ShareInternalUtility.MY_PHOTOS,
-                bitmap1,
-                null,
-                null,
-                null);
-        uploadRequest1.setBatchEntryName("uploadRequest1");
-        GraphRequest uploadRequest2 = GraphRequest.newUploadPhotoRequest(
-                accessToken,
-                ShareInternalUtility.MY_PHOTOS,
-                bitmap2,
-                null,
-                null,
-                null);
-        uploadRequest2.setBatchEntryName("uploadRequest2");
-        GraphRequest getRequest1 = new GraphRequest(
-                accessToken,
-                "{result=uploadRequest1:$.id}",
-                parameters,
-                null,
-                new ExpectSuccessCallback() {
-                    @Override
-                    protected void performAsserts(GraphResponse response) {
-                        assertNotNull(response);
-                        JSONObject retrievedPhoto = response.getJSONObject();
-                        assertNotNull(retrievedPhoto);
-                        assertEquals(image1Size, retrievedPhoto.optInt("width"));
-                    }
-                });
-        GraphRequest getRequest2 = new GraphRequest(
-                accessToken,
-                "{result=uploadRequest2:$.id}",
-                parameters,
-                null,
-                new ExpectSuccessCallback() {
-                    @Override
-                    protected void performAsserts(GraphResponse response) {
-                        assertNotNull(response);
-                        JSONObject retrievedPhoto = response.getJSONObject();
-                        assertNotNull(retrievedPhoto);
-                        assertEquals(image2Size, retrievedPhoto.optInt("width"));
-                    }
-                });
 
-        TestGraphRequestAsyncTask task = new TestGraphRequestAsyncTask(
-                uploadRequest1,
-                uploadRequest2,
-                getRequest1,
-                getRequest2);
-        task.executeOnBlockerThread();
-
-        // Wait on 3 signals: getRequest1, getRequest2, and task will all signal.
-        waitAndAssertSuccess(3);
-    }
 
     @MediumTest
     @LargeTest
diff --git a/facebook/src/androidTest/java/com/facebook/BatchRequestTests.java b/facebook/src/androidTest/java/com/facebook/BatchRequestTests.java
index 135225b40..91a60ed04 100644
--- a/facebook/src/androidTest/java/com/facebook/BatchRequestTests.java
+++ b/facebook/src/androidTest/java/com/facebook/BatchRequestTests.java
@@ -24,8 +24,6 @@
 import android.os.Bundle;
 import android.test.suitebuilder.annotation.LargeTest;
 
-import com.facebook.share.internal.ShareInternalUtility;
-
 import org.json.JSONObject;
 
 import java.io.IOException;
@@ -293,65 +291,6 @@ public void testMixedSuccessAndFailure() {
         }
     }
 
-    @LargeTest
-    public void testBatchUploadPhoto() {
-        final AccessToken accessToken = getAccessTokenForSharedUserWithPermissions(null,
-                "user_photos", "publish_actions");
-
-        final int image1Size = 120;
-        final int image2Size = 150;
-
-        Bitmap bitmap1 = createTestBitmap(image1Size);
-        Bitmap bitmap2 = createTestBitmap(image2Size);
-
-        Bundle parameters = new Bundle();
-        parameters.putString("fields", "width");
-
-        GraphRequest uploadRequest1 = GraphRequest.newUploadPhotoRequest(
-                accessToken,
-                ShareInternalUtility.MY_PHOTOS,
-                bitmap1,
-                null,
-                null,
-                null);
-        uploadRequest1.setBatchEntryName("uploadRequest1");
-        GraphRequest uploadRequest2 = GraphRequest.newUploadPhotoRequest(
-                accessToken,
-                ShareInternalUtility.MY_PHOTOS,
-                bitmap2,
-                null,
-                null,
-                null);
-        uploadRequest2.setBatchEntryName("uploadRequest2");
-        GraphRequest getRequest1 = new GraphRequest(
-                accessToken,
-                "{result=uploadRequest1:$.id}",
-                parameters,
-                null);
-        GraphRequest getRequest2 = new GraphRequest(
-                accessToken,
-                "{result=uploadRequest2:$.id}",
-                parameters,
-                null);
-
-        List<GraphResponse> responses = GraphRequest.executeBatchAndWait(
-                uploadRequest1,
-                uploadRequest2,
-                getRequest1,
-                getRequest2);
-        assertNotNull(responses);
-        assertEquals(4, responses.size());
-        assertNoErrors(responses);
-
-        JSONObject retrievedPhoto1 = responses.get(2).getJSONObject();
-        JSONObject retrievedPhoto2 = responses.get(3).getJSONObject();
-        assertNotNull(retrievedPhoto1);
-        assertNotNull(retrievedPhoto2);
-
-        assertEquals(image1Size, retrievedPhoto1.optInt("width"));
-        assertEquals(image2Size, retrievedPhoto2.optInt("width"));
-    }
-
     @LargeTest
     public void testCallbacksAreCalled() {
         setBatchApplicationIdForTestApp();
diff --git a/facebook/src/androidTest/java/com/facebook/FacebookActivityTests.java b/facebook/src/androidTest/java/com/facebook/FacebookActivityTests.java
index 1090c968a..049a4e8c5 100644
--- a/facebook/src/androidTest/java/com/facebook/FacebookActivityTests.java
+++ b/facebook/src/androidTest/java/com/facebook/FacebookActivityTests.java
@@ -27,8 +27,6 @@
 import android.test.suitebuilder.annotation.MediumTest;
 import android.test.suitebuilder.annotation.SmallTest;
 
-import com.facebook.applinks.FacebookAppLinkResolver;
-
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
diff --git a/facebook/src/androidTest/java/com/facebook/FacebookAppLinkResolverTests.java b/facebook/src/androidTest/java/com/facebook/FacebookAppLinkResolverTests.java
deleted file mode 100644
index 3042f889d..000000000
--- a/facebook/src/androidTest/java/com/facebook/FacebookAppLinkResolverTests.java
+++ /dev/null
@@ -1,211 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook;
-
-import android.net.Uri;
-import android.os.Handler;
-
-import com.facebook.applinks.FacebookAppLinkResolver;
-
-import bolts.AppLink;
-import bolts.Continuation;
-import bolts.Task;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class FacebookAppLinkResolverTests extends FacebookTestCase {
-    private Task resolveTask;
-
-    public void testSingleUrl() {
-        String testUrlString = "https://fb.me/732873156764191";
-        Uri testUrl = Uri.parse(testUrlString);
-        Uri testWebUri = Uri.parse("http://www.facebook.com/");
-        ArrayList<AppLink.Target> testTargets = new ArrayList<AppLink.Target>();
-        testTargets.add(new AppLink.Target(
-                "com.myapp",
-                null,
-                Uri.parse("myapp://3"),
-                "my app"));
-        testTargets.add(new AppLink.Target(
-                "com.myapp-test",
-                null,
-                Uri.parse("myapp-test://4"),
-                "my test app"));
-        try {
-            executeResolverOnBlockerThread(new FacebookAppLinkResolver(), testUrl);
-
-            getTestBlocker().waitForSignals(1);
-
-            assertNotNull(resolveTask);
-
-            Task<AppLink> singleUrlResolveTask = (Task<AppLink>)resolveTask;
-
-            assertTrue(singleUrlResolveTask.isCompleted() &&
-                    !singleUrlResolveTask.isCancelled() &&
-                    !singleUrlResolveTask.isFaulted());
-
-            AppLink appLink = singleUrlResolveTask.getResult();
-
-            assertEquals(appLink.getSourceUrl(), testUrl);
-            assertEquals(appLink.getWebUrl(), testWebUri);
-            assertTrue(targetListsAreEqual(appLink.getTargets(), testTargets));
-        } catch (Exception e) {
-            // Forcing the test to fail with details
-            assertNull(e);
-        }
-    }
-
-    public void testUrlWithNoAppLinkData() {
-        String testNoAppLinkUrlString = "https://fb.me/732873156764191_no_app_link";
-        Uri testNoAppLinkUrl = Uri.parse(testNoAppLinkUrlString);
-        try {
-            executeResolverOnBlockerThread(new FacebookAppLinkResolver(), testNoAppLinkUrl);
-
-            getTestBlocker().waitForSignals(1);
-
-            assertNotNull(resolveTask);
-
-            Task<AppLink> singleUrlResolveTask = (Task<AppLink>)resolveTask;
-
-            assertTrue(singleUrlResolveTask.isCompleted() &&
-                    !singleUrlResolveTask.isCancelled() &&
-                    !singleUrlResolveTask.isFaulted());
-
-            AppLink appLink = singleUrlResolveTask.getResult();
-            assertNull(appLink);
-        } catch (Exception e) {
-            // Forcing the test to fail with details
-            assertNull(e);
-        }
-    }
-
-    public void testCachedAppLinkData() {
-        String testUrlString = "https://fb.me/732873156764191";
-        Uri testUrl = Uri.parse(testUrlString);
-        Uri testWebUri = Uri.parse("http://www.facebook.com/");
-        ArrayList<AppLink.Target> testTargets = new ArrayList<AppLink.Target>();
-        testTargets.add(new AppLink.Target(
-                "com.myapp",
-                null,
-                Uri.parse("myapp://3"),
-                "my app"));
-        testTargets.add(new AppLink.Target(
-                "com.myapp-test",
-                null,
-                Uri.parse("myapp-test://4"),
-                "my test app"));
-
-        try {
-            FacebookAppLinkResolver resolver = new FacebookAppLinkResolver();
-
-            // This will prefetch the app link
-            executeResolverOnBlockerThread(resolver, testUrl);
-            getTestBlocker().waitForSignals(1);
-            assertNotNull(resolveTask);
-
-            // Now let's fetch it again. This should complete the task synchronously.
-            Task<AppLink> cachedUrlResolveTask = resolver.getAppLinkFromUrlInBackground(testUrl);
-
-            assertTrue(cachedUrlResolveTask.isCompleted() &&
-                    !cachedUrlResolveTask.isCancelled() &&
-                    !cachedUrlResolveTask.isFaulted());
-
-            AppLink appLink = cachedUrlResolveTask.getResult();
-
-            assertEquals(appLink.getSourceUrl(), testUrl);
-            assertEquals(appLink.getWebUrl(), testWebUri);
-            assertTrue(targetListsAreEqual(appLink.getTargets(), testTargets));
-        } catch (Exception e) {
-            // Forcing the test to fail with details
-            assertNull(e);
-        }
-    }
-
-    public void executeResolverOnBlockerThread(final FacebookAppLinkResolver resolver, final Uri testUrl) {
-        final TestBlocker blocker = getTestBlocker();
-        Runnable runnable = new Runnable() {
-            public void run() {
-                try {
-                    resolveTask = resolver.getAppLinkFromUrlInBackground(testUrl);
-                    resolveTask.continueWith(new Continuation() {
-                        @Override
-                        public Object then(Task task) throws Exception {
-                            // Once the task is complete, unblock the test thread, so it can inspect for errors/results.
-                            blocker.signal();
-                            return null;
-                        }
-                    });
-                } catch (Exception e) {
-                    // Get back to the test case if there was an uncaught exception
-                    blocker.signal();
-                }
-            }
-        };
-
-        Handler handler = new Handler(blocker.getLooper());
-        handler.post(runnable);
-    }
-
-    private static boolean targetListsAreEqual(List<AppLink.Target> list1, List<AppLink.Target> list2) {
-        if (list1 == null) {
-            return list2 == null;
-        } else if (list2 == null || list1.size() != list2.size()) {
-            return false;
-        }
-
-        ArrayList<AppLink.Target> list2Copy = new ArrayList<AppLink.Target>(list2);
-
-        for(int i = 0; i < list1.size(); i++) {
-            int j;
-            for (j = 0; j < list2Copy.size(); j++) {
-                if (targetsAreEqual(list1.get(i), list2Copy.get(j))) {
-                    break;
-                }
-            }
-
-            if (j < list2Copy.size()) {
-                // Found a match. Remove from the copy to make sure the same target isn't matched twice.
-                list2Copy.remove(j);
-            } else {
-                // Match not found
-                return false;
-            }
-        }
-        return true;
-    }
-
-    private static boolean targetsAreEqual(AppLink.Target target1, AppLink.Target target2) {
-        boolean isEqual =
-                objectsAreEqual(target1.getPackageName(), target2.getPackageName()) &&
-                objectsAreEqual(target1.getClassName(), target2.getClassName()) &&
-                objectsAreEqual(target1.getAppName(), target2.getAppName()) &&
-                objectsAreEqual(target1.getUrl(), target2.getUrl()) ;
-
-        return isEqual;
-    }
-
-    private static boolean objectsAreEqual(Object s1, Object s2) {
-        return s1 == null
-                ? s2 == null
-                : s1.equals(s2);
-    }
-}
diff --git a/facebook/src/androidTest/java/com/facebook/RequestTests.java b/facebook/src/androidTest/java/com/facebook/RequestTests.java
index 61f0c5547..0f731f71c 100644
--- a/facebook/src/androidTest/java/com/facebook/RequestTests.java
+++ b/facebook/src/androidTest/java/com/facebook/RequestTests.java
@@ -27,16 +27,6 @@
 import android.test.suitebuilder.annotation.LargeTest;
 
 import com.facebook.internal.GraphUtil;
-import com.facebook.share.ShareApi;
-import com.facebook.share.Sharer;
-import com.facebook.share.internal.ShareInternalUtility;
-import com.facebook.share.model.ShareOpenGraphAction;
-import com.facebook.share.model.ShareOpenGraphContent;
-import com.facebook.share.model.ShareOpenGraphObject;
-import com.facebook.share.model.SharePhoto;
-import com.facebook.share.model.SharePhotoContent;
-import com.facebook.share.model.ShareVideo;
-import com.facebook.share.model.ShareVideoContent;
 
 import org.json.JSONArray;
 import org.json.JSONException;
@@ -101,23 +91,7 @@ public void testExecuteSingleGet() {
         assertEquals("Paris", graphPlace.optJSONObject("location").optString("city"));
     }
 
-    @LargeTest
-    public void testBuildsUploadPhotoHttpURLConnection() throws Exception {
-        Bitmap image = createTestBitmap(128);
 
-        GraphRequest request = GraphRequest.newUploadPhotoRequest(
-                AccessToken.getCurrentAccessToken(),
-                ShareInternalUtility.MY_PHOTOS,
-                image,
-                "Test photo messsage",
-                null,
-                null);
-        HttpURLConnection connection = GraphRequest.toHttpConnection(request);
-
-        assertTrue(connection != null);
-        assertNotSame("gzip", connection.getRequestProperty("Content-Encoding"));
-        assertNotSame("application/x-www-form-urlencoded", connection.getRequestProperty("Content-Type"));
-    }
 
     @LargeTest
     public void testExecuteSingleGetUsingHttpURLConnection() throws IOException {
@@ -303,120 +277,7 @@ public void testExecutePlaceRequestWithLocationAndSearchText() {
         assertNotNull(response.getRawResponse());
     }
 
-    @LargeTest
-    public void testShareOpenGraphContent() throws Exception {
-        ShareOpenGraphObject ogObject = new ShareOpenGraphObject.Builder()
-                .putString("og:title", "a title")
-                .putString("og:type", TEST_OG_OBJECT_TYPE)
-                .putString("og:description", "a description")
-                .build();
-
-        ShareOpenGraphAction ogAction = new ShareOpenGraphAction.Builder()
-                .setActionType(TEST_OG_ACTION_TYPE)
-                .putObject("test", ogObject)
-                .build();
-
-        ShareOpenGraphContent content = new ShareOpenGraphContent.Builder()
-                .setAction(ogAction)
-                .setPreviewPropertyName("test")
-                .build();
-
-        final ShareApi shareApi = new ShareApi(content);
-        final AtomicReference<String> actionId = new AtomicReference<>(null);
-
-        getActivity().runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                shareApi.share(new FacebookCallback<Sharer.Result>() {
-                    @Override
-                    public void onSuccess(Sharer.Result result) {
-                        actionId.set(result.getPostId());
-                        notifyShareFinished();
-                    }
-
-                    @Override
-                    public void onCancel() {
-                        notifyShareFinished();
-                    }
-
-                    @Override
-                    public void onError(FacebookException error) {
-                        notifyShareFinished();
-                    }
-
-                    private void notifyShareFinished() {
-                        synchronized (shareApi) {
-                            shareApi.notifyAll();
-                        }
-                    }
-                });
-            }
-        });
-
-        synchronized (shareApi) {
-            shareApi.wait(REQUEST_TIMEOUT_MILLIS);
-        }
-        assertNotNull(actionId.get());
-    }
-
-    @LargeTest
-    public void testShareOpenGraphContentWithBadType() throws Exception {
-        ShareOpenGraphObject ogObject = new ShareOpenGraphObject.Builder()
-                .putString("og:title", "a title")
-                .putString("og:type", TEST_OG_OBJECT_TYPE)
-                .putString("og:description", "a description")
-                .build();
-
-        ShareOpenGraphAction ogAction = new ShareOpenGraphAction.Builder()
-                .setActionType(TEST_OG_ACTION_TYPE+"bad")
-                .putObject("test", ogObject)
-                .build();
-
-        ShareOpenGraphContent content = new ShareOpenGraphContent.Builder()
-                .setAction(ogAction)
-                .setPreviewPropertyName("test")
-                .build();
-
-        final ShareApi shareApi = new ShareApi(content);
-        final AtomicReference<String> actionId = new AtomicReference<>(null);
-        final AtomicBoolean errorOccurred = new AtomicBoolean(false);
-
-        getActivity().runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                shareApi.share(new FacebookCallback<Sharer.Result>() {
-                    @Override
-                    public void onSuccess(Sharer.Result result) {
-                        actionId.set(result.getPostId());
-                        notifyShareFinished();
-                    }
-
-                    @Override
-                    public void onCancel() {
-                        notifyShareFinished();
-                    }
-
-                    @Override
-                    public void onError(FacebookException error) {
-                        errorOccurred.set(true);
-                        notifyShareFinished();
-                    }
-
-                    private void notifyShareFinished() {
-                        synchronized (shareApi) {
-                            shareApi.notifyAll();
-                        }
-                    }
-                });
-            }
-        });
 
-        synchronized (shareApi) {
-            shareApi.wait(REQUEST_TIMEOUT_MILLIS);
-        }
-        assertNull(actionId.get());
-        assertTrue(errorOccurred.get());
-    }
 
     private String executePostOpenGraphRequest() {
         JSONObject data = new JSONObject();
@@ -463,66 +324,7 @@ public void testExecutePostOpenGraphRequest() {
         executePostOpenGraphRequest();
     }
 
-    @LargeTest
-    public void testCreateOpenGraphObjectWithBadImageType() throws InterruptedException {
-        //only image urls are accepted for createOpenGraphObject
-        Bitmap image = createTestBitmap(128);
-        SharePhoto photo = new SharePhoto.Builder()
-                .setBitmap(image)
-                .setUserGenerated(true)
-                .build();
-        ShareOpenGraphObject ogObject = new ShareOpenGraphObject.Builder()
-                .putString("og:title", "a title")
-                .putString("og:type", TEST_OG_OBJECT_TYPE)
-                .putString("og:description", "a description")
-                .putPhoto("og:image", photo)
-                .build();
 
-        try {
-            GraphRequest request = GraphRequest.createOpenGraphObject(ogObject);
-            GraphResponse response = request.executeAndWait();
-            //should fail because do not accept images without imageurl
-            fail();
-        }
-        catch (Exception e){
-            if(!(e instanceof FacebookException
-                    && e.getMessage().equals("Unable to attach images"))){
-                fail();
-            }
-        }
-    }
-
-    @LargeTest
-    public void testCreateOpenGraphObject() throws InterruptedException {
-        Uri testImage = Uri.parse("http://i.imgur.com/Diyvl7q.jpg");
-        SharePhoto photo = new SharePhoto.Builder()
-                .setImageUrl(testImage)
-                .setUserGenerated(true)
-                .build();
-        ShareOpenGraphObject ogObject = new ShareOpenGraphObject.Builder()
-                .putString("og:title", "a title")
-                .putString("og:type", TEST_OG_OBJECT_TYPE)
-                .putString("og:description", "a description")
-                .putPhoto("og:image", photo)
-                .build();
-
-        try {
-            GraphRequest request = GraphRequest.createOpenGraphObject(ogObject);
-            GraphResponse response = request.executeAndWait();
-
-            assertNotNull(response);
-            assertNull(response.getError());
-
-            JSONObject graphResult = response.getJSONObject();
-
-            assertNotNull(graphResult);
-            assertNotNull(graphResult.optString("id"));
-            assertNotNull(response.getRawResponse());
-        }
-        catch (Exception e){
-            fail();
-        }
-    }
 
     @LargeTest
     public void testDeleteObjectRequest() {
@@ -578,265 +380,7 @@ public void testUpdateOpenGraphObjectRequest() throws JSONException {
         assertNotNull(response.getRawResponse());
     }
 
-    @LargeTest
-    public void testExecuteUploadPhoto() {
-        Bitmap image = createTestBitmap(128);
 
-        GraphRequest request = GraphRequest.newUploadPhotoRequest(
-                AccessToken.getCurrentAccessToken(),
-                ShareInternalUtility.MY_PHOTOS,
-                image,
-                "Test photo message",
-                null,
-                null);
-        GraphResponse response = request.executeAndWait();
-        assertNotNull(response);
-
-        assertNull(response.getError());
-
-        JSONObject result = response.getJSONObject();
-        assertNotNull(result);
-        assertNotNull(response.getRawResponse());
-    }
-
-    @LargeTest
-    public void testExecuteUploadPhotoViaFile() throws IOException {
-        File outputFile = null;
-        FileOutputStream outStream = null;
-
-        try {
-            Bitmap image = createTestBitmap(128);
-
-            File outputDir = getActivity().getCacheDir(); // context being the Activity pointer
-            outputFile = File.createTempFile("prefix", "extension", outputDir);
-
-            outStream = new FileOutputStream(outputFile);
-            image.compress(Bitmap.CompressFormat.PNG, 100, outStream);
-            outStream.close();
-            outStream = null;
-
-            GraphRequest request = GraphRequest.newUploadPhotoRequest(
-                    AccessToken.getCurrentAccessToken(),
-                    ShareInternalUtility.MY_PHOTOS,
-                    outputFile,
-                    "Test photo message",
-                    null,
-                    null);
-            GraphResponse response = request.executeAndWait();
-            assertNotNull(response);
-
-            assertNull(response.getError());
-
-            JSONObject result = response.getJSONObject();
-            assertNotNull(result);
-            assertNotNull(response.getRawResponse());
-        } finally {
-            if (outStream != null) {
-                outStream.close();
-            }
-            if (outputFile != null) {
-                outputFile.delete();
-            }
-        }
-    }
-
-    @LargeTest
-    public void testExecuteUploadPhotoToAlbum() throws InterruptedException, JSONException {
-        // first create an album
-        Bundle params = new Bundle();
-        params.putString("name", "Foo");
-        GraphRequest request =
-                new GraphRequest(
-                        AccessToken.getCurrentAccessToken(),
-                        "me/albums",
-                        params,
-                        HttpMethod.POST);
-
-        GraphResponse response = request.executeAndWait();
-        JSONObject jsonResponse = response.getJSONObject();
-        assertNotNull(jsonResponse);
-        String albumId = jsonResponse.optString("id");
-        assertNotNull(albumId);
-
-        // upload an image to the album
-        Bitmap image = createTestBitmap(128);
-        SharePhoto photo = new SharePhoto.Builder()
-                .setBitmap(image)
-                .setUserGenerated(true)
-                .build();
-        SharePhotoContent content = new SharePhotoContent.Builder().addPhoto(photo).build();
-        final ShareApi shareApi = new ShareApi(content);
-        shareApi.setGraphNode(albumId);
-        final AtomicReference<String> imageId = new AtomicReference<>(null);
-        getActivity().runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                shareApi.share(new FacebookCallback<Sharer.Result>() {
-                    @Override
-                    public void onSuccess(Sharer.Result result) {
-                        imageId.set(result.getPostId());
-                        notifyShareFinished();
-                    }
-
-                    @Override
-                    public void onCancel() {
-                        notifyShareFinished();
-                    }
-
-                    @Override
-                    public void onError(FacebookException error) {
-                        notifyShareFinished();
-                    }
-
-                    private void notifyShareFinished() {
-                        synchronized (shareApi) {
-                            shareApi.notifyAll();
-                        }
-                    }
-                });
-            }
-        });
-
-        synchronized (shareApi) {
-            shareApi.wait(REQUEST_TIMEOUT_MILLIS);
-        }
-        assertNotNull(imageId.get());
-
-        // now check to see if the image is in the album
-        GraphRequest listRequest =
-                new GraphRequest(AccessToken.getCurrentAccessToken(), albumId + "/photos");
-
-        GraphResponse listResponse = listRequest.executeAndWait();
-        JSONObject listObject = listResponse.getJSONObject();
-        assertNotNull(listObject);
-        JSONArray jsonList = listObject.optJSONArray("data");
-        assertNotNull(jsonList);
-
-        boolean found = false;
-        for (int i = 0; i < jsonList.length(); i++) {
-            JSONObject imageObject = jsonList.getJSONObject(i);
-            if (imageId.get().equals(imageObject.optString("id"))) {
-                found = true;
-            }
-        }
-        assertTrue(found);
-    }
-
-    @LargeTest
-    public void testUploadVideoFile() throws IOException, URISyntaxException {
-        File tempFile = null;
-        try {
-            tempFile = createTempFileFromAsset("DarkScreen.mov");
-            ShareVideo video = new ShareVideo.Builder()
-                    .setLocalUrl(Uri.fromFile(tempFile))
-                    .build();
-            ShareVideoContent content = new ShareVideoContent.Builder().setVideo(video).build();
-            final ShareApi shareApi = new ShareApi(content);
-            final AtomicReference<String> videoId = new AtomicReference<>(null);
-            getActivity().runOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-                    shareApi.share(new FacebookCallback<Sharer.Result>() {
-                        @Override
-                        public void onSuccess(Sharer.Result result) {
-                            videoId.set(result.getPostId());
-                            notifyShareFinished();
-                        }
-
-                        @Override
-                        public void onCancel() {
-                            notifyShareFinished();
-                        }
-
-                        @Override
-                        public void onError(FacebookException error) {
-                            notifyShareFinished();
-                        }
-
-                        private void notifyShareFinished() {
-                            synchronized (shareApi) {
-                                shareApi.notifyAll();
-                            }
-                        }
-                    });
-                }
-            });
-
-            synchronized (shareApi) {
-                shareApi.wait(REQUEST_TIMEOUT_MILLIS);
-            }
-            assertNotNull(videoId.get());
-        } catch (Exception ex) {
-            fail();
-        } finally {
-            if (tempFile != null) {
-                tempFile.delete();
-            }
-        }
-    }
-
-    @LargeTest
-    public void testUploadVideoFileToUserId() throws IOException, URISyntaxException {
-        File tempFile = null;
-        try {
-            GraphRequest meRequest =
-                    GraphRequest.newMeRequest(AccessToken.getCurrentAccessToken(), null);
-            GraphResponse meResponse = meRequest.executeAndWait();
-            JSONObject meJson = meResponse.getJSONObject();
-            assertNotNull(meJson);
-
-            String userId = meJson.optString("id");
-            assertNotNull(userId);
-
-            tempFile = createTempFileFromAsset("DarkScreen.mov");
-            ShareVideo video = new ShareVideo.Builder()
-                    .setLocalUrl(Uri.fromFile(tempFile))
-                    .build();
-            ShareVideoContent content = new ShareVideoContent.Builder().setVideo(video).build();
-            final ShareApi shareApi = new ShareApi(content);
-            shareApi.setGraphNode(userId);
-            final AtomicReference<String> videoId = new AtomicReference<>(null);
-            getActivity().runOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-                    shareApi.share(new FacebookCallback<Sharer.Result>() {
-                        @Override
-                        public void onSuccess(Sharer.Result result) {
-                            videoId.set(result.getPostId());
-                            notifyShareFinished();
-                        }
-
-                        @Override
-                        public void onCancel() {
-                            notifyShareFinished();
-                        }
-
-                        @Override
-                        public void onError(FacebookException error) {
-                            notifyShareFinished();
-                        }
-
-                        private void notifyShareFinished() {
-                            synchronized (shareApi) {
-                                shareApi.notifyAll();
-                            }
-                        }
-                    });
-                }
-            });
-
-            synchronized (shareApi) {
-                shareApi.wait(REQUEST_TIMEOUT_MILLIS);
-            }
-            assertNotNull(videoId.get());
-        } catch (Exception ex) {
-            fail();
-        } finally {
-            if (tempFile != null) {
-                tempFile.delete();
-            }
-        }
-    }
 
     @LargeTest
     public void testPostStatusUpdate() {
@@ -867,66 +411,7 @@ public void onCompleted(GraphResponse response) {
         assertTrue(calledBack.size() == 1);
     }
 
-    @LargeTest
-    public void testOnProgressCallbackIsCalled() {
-        Bitmap image = Bitmap.createBitmap(128, 128, Bitmap.Config.ALPHA_8);
-
-        GraphRequest request = GraphRequest.newUploadPhotoRequest(
-                null,
-                ShareInternalUtility.MY_PHOTOS,
-                image,
-                null,
-                null,
-                null);
-        assertTrue(request != null);
-
-        final ArrayList<Boolean> calledBack = new ArrayList<Boolean>();
-        request.setCallback(new GraphRequest.OnProgressCallback() {
-            @Override
-            public void onCompleted(GraphResponse response) {
-            }
-
-            @Override
-            public void onProgress(long current, long max) {
-                calledBack.add(true);
-            }
-        });
-
-        GraphResponse response = request.executeAndWait();
-        assertNotNull(response);
-        assertFalse(calledBack.isEmpty());
-    }
-
-    @LargeTest
-    public void testLastOnProgressCallbackIsCalledOnce() {
-        Bitmap image = Bitmap.createBitmap(128, 128, Bitmap.Config.ALPHA_8);
 
-        GraphRequest request = GraphRequest.newUploadPhotoRequest(
-                null,
-                ShareInternalUtility.MY_PHOTOS,
-                image,
-                null,
-                null,
-                null);
-        assertTrue(request != null);
-
-        final ArrayList<Boolean> calledBack = new ArrayList<Boolean>();
-        request.setCallback(new GraphRequest.OnProgressCallback() {
-            @Override
-            public void onCompleted(GraphResponse response) {
-            }
-
-            @Override
-            public void onProgress(long current, long max) {
-                if (current == max) calledBack.add(true);
-                else if (current > max) calledBack.clear();
-            }
-        });
-
-        GraphResponse response = request.executeAndWait();
-        assertNotNull(response);
-        assertEquals(1, calledBack.size());
-    }
 
     @LargeTest
     public void testBatchTimeoutIsApplied() {
diff --git a/facebook/src/androidTest/java/com/facebook/widget/FacebookDialogTests.java b/facebook/src/androidTest/java/com/facebook/widget/FacebookDialogTests.java
index 7b972739a..a7c3d8f1a 100644
--- a/facebook/src/androidTest/java/com/facebook/widget/FacebookDialogTests.java
+++ b/facebook/src/androidTest/java/com/facebook/widget/FacebookDialogTests.java
@@ -21,9 +21,6 @@
 package com.facebook.widget;
 
 import com.facebook.FacebookTestCase;
-import com.facebook.share.model.ShareOpenGraphContent;
-import com.facebook.share.model.ShareOpenGraphAction;
-import com.facebook.share.widget.ShareDialog;
 
 public class FacebookDialogTests extends FacebookTestCase {
 
diff --git a/facebook/src/main/java/com/facebook/FacebookActivity.java b/facebook/src/main/java/com/facebook/FacebookActivity.java
index 5440724e1..98de9a4a8 100644
--- a/facebook/src/main/java/com/facebook/FacebookActivity.java
+++ b/facebook/src/main/java/com/facebook/FacebookActivity.java
@@ -34,9 +34,6 @@
 import com.facebook.internal.Utility;
 import com.facebook.login.LoginFragment;
 import com.facebook.login.LoginManager;
-import com.facebook.share.DeviceShareDialog;
-import com.facebook.share.internal.DeviceShareDialogFragment;
-import com.facebook.share.model.ShareContent;
 
 /**
  * This Activity is a necessary part of the overall Facebook SDK,
@@ -98,12 +95,6 @@ public void onCreate(Bundle savedInstanceState) {
                 dialogFragment.setRetainInstance(true);
                 dialogFragment.show(manager, FRAGMENT_TAG);
 
-                fragment = dialogFragment;
-            } else if (DeviceShareDialogFragment.TAG.equals(intent.getAction())) {
-                DeviceShareDialogFragment dialogFragment = new DeviceShareDialogFragment();
-                dialogFragment.setRetainInstance(true);
-                dialogFragment.setShareContent((ShareContent) intent.getParcelableExtra("content"));
-                dialogFragment.show(manager, FRAGMENT_TAG);
                 fragment = dialogFragment;
             } else {
                 fragment = new LoginFragment();
diff --git a/facebook/src/main/java/com/facebook/GraphRequest.java b/facebook/src/main/java/com/facebook/GraphRequest.java
index d0f0e64e1..796c447ec 100644
--- a/facebook/src/main/java/com/facebook/GraphRequest.java
+++ b/facebook/src/main/java/com/facebook/GraphRequest.java
@@ -30,9 +30,6 @@
 import android.util.Pair;
 
 import com.facebook.internal.*;
-import com.facebook.share.internal.OpenGraphJSONUtility;
-import com.facebook.share.model.ShareOpenGraphObject;
-import com.facebook.share.model.SharePhoto;
 
 import org.json.JSONArray;
 import org.json.JSONException;
@@ -1822,64 +1819,7 @@ private static void processGraphObject(
         }
     }
 
-    /**
-     * Create an User Owned Open Graph object
-     *
-     * Use this method to create an open graph object, which can then be posted utilizing the same
-     * GraphRequest methods as other GraphRequests.
-     *
-     * @param openGraphObject The open graph object to create. Only SharePhotos with the imageUrl
-     *                        set are accepted through this helper method.
-     * @return GraphRequest for creating the given openGraphObject
-     * @throws FacebookException thrown in the case of a JSONException or in the case of invalid
-     *                           format for SharePhoto (missing imageUrl)
-     */
 
-    public static GraphRequest createOpenGraphObject(final ShareOpenGraphObject openGraphObject)
-            throws FacebookException {
-        String type = openGraphObject.getString("type");
-        if (type == null) {
-            type = openGraphObject.getString("og:type");
-        }
-
-        if (type == null) {
-            throw new FacebookException("Open graph object type cannot be null");
-        }
-        try {
-            JSONObject stagedObject = (JSONObject) OpenGraphJSONUtility.toJSONValue(
-                    openGraphObject,
-                    new OpenGraphJSONUtility.PhotoJSONProcessor() {
-                        @Override
-                        public JSONObject toJSONObject(SharePhoto photo) {
-                            Uri photoUri = photo.getImageUrl();
-                            JSONObject photoJSONObject = new JSONObject();
-                            try {
-                                photoJSONObject.put(
-                                        NativeProtocol.IMAGE_URL_KEY, photoUri.toString());
-                            } catch (Exception e) {
-                                throw new FacebookException("Unable to attach images", e);
-                            }
-                            return photoJSONObject;
-                        }
-                    });
-            String ogType = type;
-            Bundle parameters = new Bundle();
-            parameters.putString("object", stagedObject.toString());
-
-            String graphPath = String.format(
-                    Locale.ROOT, GRAPH_PATH_FORMAT,
-                    ME,
-                    "objects/" + ogType);
-            return new GraphRequest(
-                    AccessToken.getCurrentAccessToken(),
-                    graphPath,
-                    parameters,
-                    HttpMethod.POST);
-        }
-        catch(JSONException e){
-            throw new FacebookException(e.getMessage());
-        }
-    }
 
     private static void processGraphObjectProperty(
             String key,
diff --git a/facebook/src/main/java/com/facebook/appevents/AccessTokenAppIdPair.java b/facebook/src/main/java/com/facebook/appevents/AccessTokenAppIdPair.java
deleted file mode 100644
index 5888b96ed..000000000
--- a/facebook/src/main/java/com/facebook/appevents/AccessTokenAppIdPair.java
+++ /dev/null
@@ -1,87 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents;
-
-import com.facebook.AccessToken;
-import com.facebook.FacebookSdk;
-import com.facebook.internal.Utility;
-
-import java.io.Serializable;
-
-class AccessTokenAppIdPair implements Serializable {
-    private static final long serialVersionUID = 1L;
-    private final String accessTokenString;
-    private final String applicationId;
-
-    public AccessTokenAppIdPair(AccessToken accessToken) {
-        this(accessToken.getToken(), FacebookSdk.getApplicationId());
-    }
-
-    public AccessTokenAppIdPair(String accessTokenString, String applicationId) {
-        this.accessTokenString = Utility.isNullOrEmpty(accessTokenString)
-                ? null
-                : accessTokenString;
-        this.applicationId = applicationId;
-    }
-
-    public String getAccessTokenString() {
-        return accessTokenString;
-    }
-
-    public String getApplicationId() {
-        return applicationId;
-    }
-
-    @Override
-    public int hashCode() {
-        return (accessTokenString == null ? 0 : accessTokenString.hashCode()) ^
-                (applicationId == null ? 0 : applicationId.hashCode());
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (!(o instanceof AccessTokenAppIdPair)) {
-            return false;
-        }
-        AccessTokenAppIdPair p = (AccessTokenAppIdPair) o;
-        return Utility.areObjectsEqual(p.accessTokenString, accessTokenString) &&
-                Utility.areObjectsEqual(p.applicationId, applicationId);
-    }
-
-    static class SerializationProxyV1 implements Serializable {
-        private static final long serialVersionUID = -2488473066578201069L;
-        private final String accessTokenString;
-        private final String appId;
-
-        private SerializationProxyV1(String accessTokenString, String appId) {
-            this.accessTokenString = accessTokenString;
-            this.appId = appId;
-        }
-
-        private Object readResolve() {
-            return new AccessTokenAppIdPair(accessTokenString, appId);
-        }
-    }
-
-    private Object writeReplace() {
-        return new SerializationProxyV1(accessTokenString, applicationId);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEvent.java b/facebook/src/main/java/com/facebook/appevents/AppEvent.java
deleted file mode 100644
index a2d9d4c0d..000000000
--- a/facebook/src/main/java/com/facebook/appevents/AppEvent.java
+++ /dev/null
@@ -1,206 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents;
-
-import android.os.Bundle;
-import android.support.annotation.Nullable;
-
-import com.facebook.FacebookException;
-import com.facebook.LoggingBehavior;
-import com.facebook.appevents.internal.Constants;
-import com.facebook.internal.Logger;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.Serializable;
-import java.util.HashSet;
-import java.util.Locale;
-import java.util.UUID;
-
-class AppEvent implements Serializable {
-    private static final long serialVersionUID = 1L;
-
-    private JSONObject jsonObject;
-    private boolean isImplicit;
-    private static final HashSet<String> validatedIdentifiers = new HashSet<String>();
-    private String name;
-
-    public AppEvent(
-            String contextName,
-            String eventName,
-            Double valueToSum,
-            Bundle parameters,
-            boolean isImplicitlyLogged,
-            @Nullable final UUID currentSessionId
-    ) {
-        try {
-            validateIdentifier(eventName);
-
-            this.name = eventName;
-            isImplicit = isImplicitlyLogged;
-            jsonObject = new JSONObject();
-
-            jsonObject.put("_eventName", eventName);
-            jsonObject.put(Constants.LOG_TIME_APP_EVENT_KEY, System.currentTimeMillis() / 1000);
-            jsonObject.put("_ui", contextName);
-            if (currentSessionId != null) {
-                jsonObject.put("_session_id", currentSessionId);
-            }
-
-            if (valueToSum != null) {
-                jsonObject.put("_valueToSum", valueToSum.doubleValue());
-            }
-
-            if (isImplicit) {
-                jsonObject.put("_implicitlyLogged", "1");
-            }
-
-            if (parameters != null) {
-                for (String key : parameters.keySet()) {
-
-                    validateIdentifier(key);
-
-                    Object value = parameters.get(key);
-                    if (!(value instanceof String) && !(value instanceof Number)) {
-                        throw new FacebookException(
-                                String.format(
-                                        "Parameter value '%s' for key '%s' should be a string" +
-                                                " or a numeric type.",
-                                        value,
-                                        key)
-                        );
-                    }
-
-                    jsonObject.put(key, value.toString());
-                }
-            }
-
-            if (!isImplicit) {
-                Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
-                        "Created app event '%s'", jsonObject.toString());
-            }
-        } catch (JSONException jsonException) {
-
-            // If any of the above failed, just consider this an illegal event.
-            Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
-                    "JSON encoding for app event failed: '%s'", jsonException.toString());
-            jsonObject = null;
-
-        } catch (FacebookException e) {
-            // If any of the above failed, just consider this an illegal event.
-            Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
-                    "Invalid app event name or parameter:", e.toString());
-            jsonObject = null;
-        }
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    private AppEvent(String jsonString, boolean isImplicit) throws JSONException {
-        jsonObject = new JSONObject(jsonString);
-        this.isImplicit = isImplicit;
-    }
-
-    public boolean getIsImplicit() {
-        return isImplicit;
-    }
-
-    public JSONObject getJSONObject() {
-        return jsonObject;
-    }
-
-    // throw exception if not valid.
-    private void validateIdentifier(String identifier) throws FacebookException {
-
-        // Identifier should be 40 chars or less, and only have 0-9A-Za-z, underscore, hyphen,
-        // and space (but no hyphen or space in the first position).
-        final String regex = "^[0-9a-zA-Z_]+[0-9a-zA-Z _-]*$";
-
-        final int MAX_IDENTIFIER_LENGTH = 40;
-        if (identifier == null
-                || identifier.length() == 0
-                || identifier.length() > MAX_IDENTIFIER_LENGTH) {
-            if (identifier == null) {
-                identifier = "<None Provided>";
-            }
-            throw new FacebookException(
-                    String.format(
-                            Locale.ROOT,
-                            "Identifier '%s' must be less than %d characters",
-                            identifier,
-                            MAX_IDENTIFIER_LENGTH)
-            );
-        }
-
-        boolean alreadyValidated = false;
-        synchronized (validatedIdentifiers) {
-            alreadyValidated = validatedIdentifiers.contains(identifier);
-        }
-
-        if (!alreadyValidated) {
-            if (identifier.matches(regex)) {
-                synchronized (validatedIdentifiers) {
-                    validatedIdentifiers.add(identifier);
-                }
-            } else {
-                throw new FacebookException(
-                        String.format(
-                                "Skipping event named '%s' due to illegal name - must be " +
-                                        "under 40 chars and alphanumeric, _, - or space, and " +
-                                        "not start with a space or hyphen.",
-                                identifier
-                        )
-                );
-            }
-        }
-    }
-
-    static class SerializationProxyV1 implements Serializable {
-        private static final long serialVersionUID = -2488473066578201069L;
-        private final String jsonString;
-        private final boolean isImplicit;
-
-        private SerializationProxyV1(String jsonString, boolean isImplicit) {
-            this.jsonString = jsonString;
-            this.isImplicit = isImplicit;
-        }
-
-        private Object readResolve() throws JSONException {
-            return new AppEvent(jsonString, isImplicit);
-        }
-    }
-
-    private Object writeReplace() {
-        return new SerializationProxyV1(jsonObject.toString(), isImplicit);
-    }
-
-    @Override
-    public String toString() {
-        return String.format(
-                "\"%s\", implicit: %b, json: %s",
-                jsonObject.optString("_eventName"),
-                isImplicit,
-                jsonObject.toString());
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventCollection.java b/facebook/src/main/java/com/facebook/appevents/AppEventCollection.java
deleted file mode 100644
index 8e7aa5b46..000000000
--- a/facebook/src/main/java/com/facebook/appevents/AppEventCollection.java
+++ /dev/null
@@ -1,93 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents;
-
-import android.content.Context;
-
-import com.facebook.FacebookSdk;
-import com.facebook.internal.AttributionIdentifiers;
-
-import java.util.HashMap;
-import java.util.Set;
-
-class AppEventCollection {
-    private final HashMap<AccessTokenAppIdPair, SessionEventsState> stateMap;
-
-    public AppEventCollection() {
-        stateMap = new HashMap<>();
-    }
-
-    public synchronized void addPersistedEvents(PersistedEvents persistedEvents) {
-        if (persistedEvents == null) {
-            return;
-        }
-
-        for (AccessTokenAppIdPair accessTokenAppIdPair : persistedEvents.keySet()) {
-            SessionEventsState sessionEventsState = getSessionEventsState(accessTokenAppIdPair);
-
-            for (AppEvent appEvent : persistedEvents.get(accessTokenAppIdPair)) {
-                sessionEventsState.addEvent(appEvent);
-            }
-        }
-    }
-
-    public synchronized void addEvent(
-            AccessTokenAppIdPair accessTokenAppIdPair,
-            AppEvent appEvent) {
-        SessionEventsState eventsState = getSessionEventsState(accessTokenAppIdPair);
-        eventsState.addEvent(appEvent);
-    }
-
-    public synchronized Set<AccessTokenAppIdPair> keySet() {
-        return stateMap.keySet();
-    }
-
-    public synchronized SessionEventsState get(AccessTokenAppIdPair accessTokenAppIdPair) {
-        return stateMap.get(accessTokenAppIdPair);
-    }
-
-    public synchronized int getEventCount() {
-        int count = 0;
-        for (SessionEventsState sessionEventsState : stateMap.values()) {
-            count += sessionEventsState.getAccumulatedEventCount();
-        }
-
-        return count;
-    }
-
-    private synchronized SessionEventsState getSessionEventsState(
-            AccessTokenAppIdPair accessTokenAppId) {
-        SessionEventsState eventsState = stateMap.get(accessTokenAppId);
-        if (eventsState == null) {
-            Context context = FacebookSdk.getApplicationContext();
-
-            // Retrieve attributionId, but we will only send it if attribution is supported for the
-            // app.
-            eventsState = new SessionEventsState(
-                    AttributionIdentifiers.getAttributionIdentifiers(context),
-                    AppEventsLogger.getAnonymousAppDeviceGUID(context));
-        }
-
-        stateMap.put(accessTokenAppId, eventsState);
-
-        return eventsState;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventQueue.java b/facebook/src/main/java/com/facebook/appevents/AppEventQueue.java
deleted file mode 100644
index 690611996..000000000
--- a/facebook/src/main/java/com/facebook/appevents/AppEventQueue.java
+++ /dev/null
@@ -1,315 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents;
-
-import android.content.Context;
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.content.LocalBroadcastManager;
-import android.util.Log;
-
-import com.facebook.FacebookRequestError;
-import com.facebook.FacebookSdk;
-import com.facebook.GraphRequest;
-import com.facebook.GraphResponse;
-import com.facebook.LoggingBehavior;
-import com.facebook.internal.Logger;
-import com.facebook.internal.Utility;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-import java.util.concurrent.Executors;
-import java.util.concurrent.ScheduledExecutorService;
-import java.util.concurrent.ScheduledFuture;
-import java.util.concurrent.TimeUnit;
-
-class AppEventQueue {
-    private static final String TAG = AppEventQueue.class.getName();
-
-    private static final int NUM_LOG_EVENTS_TO_TRY_TO_FLUSH_AFTER = 100;
-    private static final int FLUSH_PERIOD_IN_SECONDS = 15;
-
-    private static volatile AppEventCollection appEventCollection = new AppEventCollection();
-    private static final ScheduledExecutorService singleThreadExecutor =
-            Executors.newSingleThreadScheduledExecutor();
-    private static ScheduledFuture scheduledFuture;
-
-    // Only call for the singleThreadExecutor
-    private static final Runnable flushRunnable = new Runnable() {
-        @Override
-        public void run() {
-            scheduledFuture = null;
-
-            if (AppEventsLogger.getFlushBehavior() !=
-                    AppEventsLogger.FlushBehavior.EXPLICIT_ONLY) {
-                flushAndWait(FlushReason.TIMER);
-            }
-        }
-    };
-
-    public static void persistToDisk() {
-        singleThreadExecutor.execute(new Runnable() {
-            @Override
-            public void run() {
-                AppEventStore.persistEvents(appEventCollection);
-                appEventCollection = new AppEventCollection();
-            }
-        });
-    }
-
-    public static void flush(
-            final FlushReason reason) {
-        singleThreadExecutor.execute(new Runnable() {
-            @Override
-            public void run() {
-                flushAndWait(reason);
-            }
-        });
-    }
-
-    public static void add(
-            final AccessTokenAppIdPair accessTokenAppId,
-            final AppEvent appEvent) {
-        singleThreadExecutor.execute(new Runnable() {
-            @Override
-            public void run() {
-                appEventCollection.addEvent(accessTokenAppId, appEvent);
-
-                if (AppEventsLogger.getFlushBehavior() !=
-                        AppEventsLogger.FlushBehavior.EXPLICIT_ONLY
-                        && appEventCollection.getEventCount() >
-                        NUM_LOG_EVENTS_TO_TRY_TO_FLUSH_AFTER) {
-                    flushAndWait(FlushReason.EVENT_THRESHOLD);
-                } else if (scheduledFuture == null) {
-                    scheduledFuture = singleThreadExecutor.schedule(
-                            flushRunnable,
-                            FLUSH_PERIOD_IN_SECONDS,
-                            TimeUnit.SECONDS
-                    );
-                }
-            }
-        });
-    }
-
-    public static Set<AccessTokenAppIdPair> getKeySet() {
-        // This is safe to call outside of the singleThreadExecutor since
-        // the appEventCollection is volatile and the modifying methods within the
-        // class are synchronized.
-        return appEventCollection.keySet();
-    }
-
-    static void flushAndWait(FlushReason reason) {
-        // Read and send any persisted events
-        PersistedEvents result = AppEventStore.readAndClearStore();
-        // Add any of the persisted app events to our list of events to send
-        appEventCollection.addPersistedEvents(result);
-
-        FlushStatistics flushResults;
-
-        try {
-            flushResults = sendEventsToServer(
-                    reason,
-                    appEventCollection);
-        } catch (Exception e) {
-            Log.w(TAG, "Caught unexpected exception while flushing app events: ", e);
-            return;
-        }
-
-        if (flushResults != null) {
-            final Intent intent = new Intent(AppEventsLogger.ACTION_APP_EVENTS_FLUSHED);
-            intent.putExtra(
-                    AppEventsLogger.APP_EVENTS_EXTRA_NUM_EVENTS_FLUSHED,
-                    flushResults.numEvents);
-            intent.putExtra(
-                    AppEventsLogger.APP_EVENTS_EXTRA_FLUSH_RESULT,
-                    flushResults.result);
-            Context context = FacebookSdk.getApplicationContext();
-            LocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-        }
-    }
-
-    private static FlushStatistics sendEventsToServer(
-            FlushReason reason,
-            AppEventCollection appEventCollection) {
-        FlushStatistics flushResults = new FlushStatistics();
-
-        Context context = FacebookSdk.getApplicationContext();
-        boolean limitEventUsage = FacebookSdk.getLimitEventAndDataUsage(context);
-
-        List<GraphRequest> requestsToExecute = new ArrayList<>();
-        for (AccessTokenAppIdPair accessTokenAppId : appEventCollection.keySet()) {
-            GraphRequest request = buildRequestForSession(
-                    accessTokenAppId,
-                    appEventCollection.get(accessTokenAppId),
-                    limitEventUsage,
-                    flushResults);
-            if (request != null) {
-                requestsToExecute.add(request);
-            }
-        }
-
-        if (requestsToExecute.size() > 0) {
-            Logger.log(LoggingBehavior.APP_EVENTS, TAG, "Flushing %d events due to %s.",
-                    flushResults.numEvents,
-                    reason.toString());
-
-            for (GraphRequest request : requestsToExecute) {
-                // Execute the request synchronously. Callbacks will take care of handling errors
-                // and updating our final overall result.
-                request.executeAndWait();
-            }
-            return flushResults;
-        }
-
-        return null;
-    }
-
-    private static GraphRequest buildRequestForSession(
-            final AccessTokenAppIdPair accessTokenAppId,
-            final SessionEventsState appEvents,
-            final boolean limitEventUsage,
-            final FlushStatistics flushState) {
-        String applicationId = accessTokenAppId.getApplicationId();
-
-        Utility.FetchedAppSettings fetchedAppSettings =
-                Utility.queryAppSettings(applicationId, false);
-
-        final GraphRequest postRequest = GraphRequest.newPostRequest(
-                null,
-                String.format("%s/activities", applicationId),
-                null,
-                null);
-
-        Bundle requestParameters = postRequest.getParameters();
-        if (requestParameters == null) {
-            requestParameters = new Bundle();
-        }
-        requestParameters.putString("access_token", accessTokenAppId.getAccessTokenString());
-        String pushNotificationsRegistrationId =
-                AppEventsLogger.getPushNotificationsRegistrationId();
-        if (pushNotificationsRegistrationId != null) {
-            requestParameters.putString("device_token", pushNotificationsRegistrationId);
-        }
-
-        postRequest.setParameters(requestParameters);
-
-        if (fetchedAppSettings == null) {
-            return null;
-        }
-
-        int numEvents = appEvents.populateRequest(
-                postRequest,
-                FacebookSdk.getApplicationContext(),
-                fetchedAppSettings.supportsImplicitLogging(),
-                limitEventUsage);
-
-        if (numEvents == 0) {
-            return null;
-        }
-
-        flushState.numEvents += numEvents;
-
-        postRequest.setCallback(new GraphRequest.Callback() {
-            @Override
-            public void onCompleted(GraphResponse response) {
-                handleResponse(
-                        accessTokenAppId,
-                        postRequest,
-                        response,
-                        appEvents,
-                        flushState);
-            }
-        });
-
-        return postRequest;
-    }
-
-    private static void handleResponse(
-            final AccessTokenAppIdPair accessTokenAppId,
-            GraphRequest request,
-            GraphResponse response,
-            final SessionEventsState appEvents,
-            FlushStatistics flushState) {
-        FacebookRequestError error = response.getError();
-        String resultDescription = "Success";
-
-        FlushResult flushResult = FlushResult.SUCCESS;
-
-        if (error != null) {
-            final int NO_CONNECTIVITY_ERROR_CODE = -1;
-            if (error.getErrorCode() == NO_CONNECTIVITY_ERROR_CODE) {
-                resultDescription = "Failed: No Connectivity";
-                flushResult = FlushResult.NO_CONNECTIVITY;
-            } else {
-                resultDescription = String.format("Failed:\n  Response: %s\n  Error %s",
-                        response.toString(),
-                        error.toString());
-                flushResult = FlushResult.SERVER_ERROR;
-            }
-        }
-
-        if (FacebookSdk.isLoggingBehaviorEnabled(LoggingBehavior.APP_EVENTS)) {
-            String eventsJsonString = (String) request.getTag();
-            String prettyPrintedEvents;
-
-            try {
-                JSONArray jsonArray = new JSONArray(eventsJsonString);
-                prettyPrintedEvents = jsonArray.toString(2);
-            } catch (JSONException exc) {
-                prettyPrintedEvents = "<Can't encode events for debug logging>";
-            }
-
-            Logger.log(LoggingBehavior.APP_EVENTS, TAG,
-                    "Flush completed\nParams: %s\n  Result: %s\n  Events JSON: %s",
-                    request.getGraphObject().toString(),
-                    resultDescription,
-                    prettyPrintedEvents);
-        }
-
-        appEvents.clearInFlightAndStats(error != null);
-
-        if (flushResult == FlushResult.NO_CONNECTIVITY) {
-            // We may call this for multiple requests in a batch, which is slightly inefficient
-            // since in principle we could call it once for all failed requests, but the impact is
-            // likely to be minimal. We don't call this for other server errors, because if an event
-            // failed because it was malformed, etc., continually retrying it will cause subsequent
-            // events to not be logged either.
-            FacebookSdk.getExecutor().execute(new Runnable() {
-                @Override
-                public void run() {
-                    AppEventStore.persistEvents(accessTokenAppId, appEvents);
-                }
-            });
-        }
-
-        if (flushResult != FlushResult.SUCCESS) {
-            // We assume that connectivity issues are more significant to report than server issues.
-            if (flushState.result != FlushResult.NO_CONNECTIVITY) {
-                flushState.result = flushResult;
-            }
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventStore.java b/facebook/src/main/java/com/facebook/appevents/AppEventStore.java
deleted file mode 100644
index d687efa1c..000000000
--- a/facebook/src/main/java/com/facebook/appevents/AppEventStore.java
+++ /dev/null
@@ -1,173 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents;
-
-import android.content.Context;
-import android.os.Looper;
-import android.util.Log;
-
-import com.facebook.BuildConfig;
-import com.facebook.FacebookSdk;
-import com.facebook.internal.Utility;
-
-import junit.framework.Assert;
-
-import java.io.BufferedInputStream;
-import java.io.BufferedOutputStream;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
-import java.io.ObjectStreamClass;
-import java.util.HashMap;
-import java.util.List;
-
-class AppEventStore {
-    private static final String TAG = AppEventStore.class.getName();
-    private static final String PERSISTED_EVENTS_FILENAME = "AppEventsLogger.persistedevents";
-
-    public static synchronized void persistEvents(
-            final AccessTokenAppIdPair accessTokenAppIdPair,
-            final SessionEventsState appEvents) {
-        assertIsNotMainThread();
-        PersistedEvents persistedEvents = readAndClearStore();
-
-        if (persistedEvents.containsKey(accessTokenAppIdPair)) {
-            persistedEvents
-                    .get(accessTokenAppIdPair)
-                    .addAll(appEvents.getEventsToPersist());
-        } else {
-            persistedEvents.addEvents(accessTokenAppIdPair, appEvents.getEventsToPersist());
-        }
-
-        saveEventsToDisk(persistedEvents);
-    }
-
-    public static synchronized void persistEvents(
-            final AppEventCollection eventsToPersist) {
-        assertIsNotMainThread();
-        PersistedEvents persistedEvents = readAndClearStore();
-        for (AccessTokenAppIdPair accessTokenAppIdPair : eventsToPersist.keySet()) {
-            SessionEventsState sessionEventsState = eventsToPersist.get(
-                    accessTokenAppIdPair);
-            persistedEvents.addEvents(
-                    accessTokenAppIdPair,
-                    sessionEventsState.getEventsToPersist());
-        }
-
-        saveEventsToDisk(persistedEvents);
-    }
-
-    // Only call from singleThreadExecutor
-    public static synchronized PersistedEvents readAndClearStore() {
-        assertIsNotMainThread();
-
-        MovedClassObjectInputStream ois = null;
-        PersistedEvents persistedEvents = null;
-        Context context = FacebookSdk.getApplicationContext();
-        try {
-            InputStream is = context.openFileInput(PERSISTED_EVENTS_FILENAME);
-            ois = new MovedClassObjectInputStream(new BufferedInputStream(is));
-
-            persistedEvents = (PersistedEvents) ois.readObject();
-        } catch (FileNotFoundException e) {
-            // Expected if we never persisted any events.
-        } catch (Exception e) {
-            Log.w(TAG, "Got unexpected exception while reading events: ", e);
-        } finally {
-            Utility.closeQuietly(ois);
-
-
-            try {
-                // Note: We delete the store before we store the events; this means we'd
-                // prefer to lose some events in the case of exception rather than
-                // potentially log them twice.
-                // Always delete this file after the above try catch to recover from read
-                // errors.
-                context.getFileStreamPath(PERSISTED_EVENTS_FILENAME).delete();
-            } catch (Exception ex) {
-                Log.w(TAG, "Got unexpected exception when removing events file: ", ex);
-            }
-        }
-
-        if (persistedEvents == null) {
-            persistedEvents = new PersistedEvents();
-        }
-
-        return persistedEvents;
-    }
-
-    // Only call from singleThreadExecutor
-    private static void saveEventsToDisk(
-            PersistedEvents eventsToPersist) {
-        ObjectOutputStream oos = null;
-        try {
-            Context context = FacebookSdk.getApplicationContext();
-            oos = new ObjectOutputStream(
-                    new BufferedOutputStream(
-                            context.openFileOutput(PERSISTED_EVENTS_FILENAME, 0)));
-            oos.writeObject(eventsToPersist);
-        } catch (Exception e) {
-            Log.w(TAG, "Got unexpected exception while persisting events: ", e);
-        } finally {
-            Utility.closeQuietly(oos);
-        }
-    }
-
-    private static void assertIsNotMainThread() {
-        if (BuildConfig.DEBUG){
-            boolean isMainThread = Looper.myLooper() == Looper.getMainLooper();
-            Assert.assertFalse(
-                    "Call cannot be made on the main thread",
-                    isMainThread);
-        }
-    }
-
-    private static class MovedClassObjectInputStream extends ObjectInputStream {
-        private static final String ACCESS_TOKEN_APP_ID_PAIR_SERIALIZATION_PROXY_V1_CLASS_NAME =
-                "com.facebook.appevents.AppEventsLogger$AccessTokenAppIdPair$SerializationProxyV1";
-        private static final String APP_EVENT_SERIALIZATION_PROXY_V1_CLASS_NAME =
-                "com.facebook.appevents.AppEventsLogger$AppEvent$SerializationProxyV1";
-
-        public MovedClassObjectInputStream(InputStream in) throws IOException {
-            super(in);
-        }
-
-        @Override
-        protected ObjectStreamClass readClassDescriptor()
-                throws IOException, ClassNotFoundException {
-            ObjectStreamClass resultClassDescriptor = super.readClassDescriptor();
-
-            if (resultClassDescriptor.getName().equals(
-                    ACCESS_TOKEN_APP_ID_PAIR_SERIALIZATION_PROXY_V1_CLASS_NAME)) {
-                resultClassDescriptor = ObjectStreamClass.lookup(
-                        com.facebook.appevents.AccessTokenAppIdPair.SerializationProxyV1.class);
-            } else if (resultClassDescriptor.getName().equals(
-                    APP_EVENT_SERIALIZATION_PROXY_V1_CLASS_NAME)) {
-                resultClassDescriptor = ObjectStreamClass.lookup(
-                        com.facebook.appevents.AppEvent.SerializationProxyV1.class);
-            }
-
-            return resultClassDescriptor;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventsConstants.java b/facebook/src/main/java/com/facebook/appevents/AppEventsConstants.java
index 060b05964..40d41f54a 100644
--- a/facebook/src/main/java/com/facebook/appevents/AppEventsConstants.java
+++ b/facebook/src/main/java/com/facebook/appevents/AppEventsConstants.java
@@ -80,15 +80,6 @@
     /** Log this event when the user has entered their payment info. */
     public static final String EVENT_NAME_ADDED_PAYMENT_INFO = "fb_mobile_add_payment_info";
 
-    /**
-     *  @deprecated Use {@link
-     *  AppEventsLogger#logPurchase(java.math.BigDecimal, java.util.Currency)} instead.
-     *  Log this event when the user has completed a purchase. The {@link
-     *  AppEventsLogger#logPurchase(java.math.BigDecimal, java.util.Currency)} method is a shortcut
-     *  for logging this event.
-     */
-    @Deprecated
-    public static final String EVENT_NAME_PURCHASED = "fb_mobile_purchase";
 
     // Gaming related
 
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java b/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java
index 35e8fc945..160aff964 100644
--- a/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java
+++ b/facebook/src/main/java/com/facebook/appevents/AppEventsLogger.java
@@ -20,61 +20,25 @@
 
 package com.facebook.appevents;
 
-import android.app.Activity;
+
 import android.app.Application;
-import android.content.ComponentName;
+
 import android.content.Context;
-import android.content.Intent;
+
 import android.content.SharedPreferences;
 import android.os.Bundle;
 import android.support.annotation.Nullable;
-import android.support.v4.content.LocalBroadcastManager;
-import android.util.Log;
-import bolts.AppLinks;
+
 
 import com.facebook.AccessToken;
 import com.facebook.FacebookException;
-import com.facebook.FacebookRequestError;
 import com.facebook.FacebookSdk;
-import com.facebook.GraphRequest;
-import com.facebook.GraphResponse;
-import com.facebook.LoggingBehavior;
-import com.facebook.appevents.internal.ActivityLifecycleTracker;
-import com.facebook.appevents.AppEventsConstants;
-import com.facebook.appevents.internal.Constants;
-import com.facebook.internal.AppEventsLoggerUtility;
-import com.facebook.internal.AttributionIdentifiers;
-import com.facebook.internal.Logger;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
 
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
+import com.facebook.internal.Utility;
 
-import java.io.BufferedInputStream;
-import java.io.BufferedOutputStream;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
-import java.io.ObjectStreamClass;
-import java.io.Serializable;
-import java.io.UnsupportedEncodingException;
-import java.math.BigDecimal;
-import java.util.ArrayList;
-import java.util.Currency;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Set;
 import java.util.UUID;
-import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ScheduledThreadPoolExecutor;
-import java.util.concurrent.TimeUnit;
+
 
 
 /**
@@ -189,10 +153,6 @@
     private static final String APP_EVENT_PUSH_PARAMETER_CAMPAIGN = "fb_push_campaign";
     private static final String APP_EVENT_PUSH_PARAMETER_ACTION = "fb_push_action";
 
-    // Instance member variables
-    private final String contextName;
-    private final AccessTokenAppIdPair accessTokenAppId;
-
     private static ScheduledThreadPoolExecutor backgroundExecutor;
     private static FlushBehavior flushBehavior = FlushBehavior.AUTO;
     private static Object staticLock = new Object();
@@ -230,165 +190,8 @@ public static void activateApp(Application application, String applicationId) {
                     "activateApp");
         }
 
-        if (applicationId == null) {
-            applicationId = FacebookSdk.getApplicationId();
-        }
-
-        // activateApp supersedes publishInstall in the public API, so we need to explicitly invoke
-        // it, since the server can't reliably infer install state for all conditions of an app
-        // activate.
-        FacebookSdk.publishInstallAsync(application, applicationId);
-
-        ActivityLifecycleTracker.startTracking(application, applicationId);
-    }
-
-    /**
-     * Notifies the events system that the app has launched & logs an activatedApp event.  Should be
-     * called whenever your app becomes active, typically in the onResume() method of each
-     * long-running Activity of your app.
-     * <p/>
-     * Use this method if your application ID is stored in application metadata, otherwise see
-     * {@link AppEventsLogger#activateApp(android.content.Context, String)}.
-     *
-     * @param context Used to access the applicationId and the attributionId for non-authenticated
-     *                users.
-     * @deprecated Use {@link AppEventsLogger#activateApp(Application)}
-     */
-    @Deprecated
-    @SuppressWarnings("deprecation")
-    public static void activateApp(Context context) {
-        if (ActivityLifecycleTracker.isTracking()) {
-            Log.w(TAG, "activateApp events are being logged automatically. " +
-                    "There's no need to call activateApp explicitly, this is safe to remove.");
-            return;
-        }
-
-        FacebookSdk.sdkInitialize(context);
-        activateApp(context, Utility.getMetadataApplicationId(context));
-    }
-
-    /**
-     * Notifies the events system that the app has launched & logs an activatedApp event.  Should be
-     * called whenever your app becomes active, typically in the onResume() method of each
-     * long-running Activity of your app.
-     *
-     * @param context       Used to access the attributionId for non-authenticated users.
-     * @param applicationId The specific applicationId to report the activation for.
-     * @deprecated Use {@link AppEventsLogger#activateApp(Application)}
-     */
-    @Deprecated
-    public static void activateApp(Context context, String applicationId) {
-        if (ActivityLifecycleTracker.isTracking()) {
-            Log.w(TAG, "activateApp events are being logged automatically. " +
-                    "There's no need to call activateApp explicitly, this is safe to remove.");
-            return;
-        }
-
-        if (context == null || applicationId == null) {
-            throw new IllegalArgumentException("Both context and applicationId must be non-null");
-        }
-
-        if ((context instanceof Activity)) {
-            setSourceApplication((Activity) context);
-        } else {
-          // If context is not an Activity, we cannot get intent nor calling activity.
-          resetSourceApplication();
-          Log.d(AppEventsLogger.class.getName(),
-              "To set source application the context of activateApp must be an instance of" +
-                      " Activity");
-        }
-
-        // activateApp supersedes publishInstall in the public API, so we need to explicitly invoke
-        // it, since the server can't reliably infer install state for all conditions of an app
-        // activate.
-        FacebookSdk.publishInstallAsync(context, applicationId);
-
-        final AppEventsLogger logger = new AppEventsLogger(context, applicationId, null);
-        final long eventTime = System.currentTimeMillis();
-        final String sourceApplicationInfo = getSourceApplication();
-        backgroundExecutor.execute(new Runnable() {
-            @Override
-            public void run() {
-                logger.logAppSessionResumeEvent(eventTime, sourceApplicationInfo);
-            }
-        });
-    }
-
-    /**
-     * Notifies the events system that the app has been deactivated (put in the background) and
-     * tracks the application session information. Should be called whenever your app becomes
-     * inactive, typically in the onPause() method of each long-running Activity of your app.
-     *
-     * Use this method if your application ID is stored in application metadata, otherwise see
-     * {@link AppEventsLogger#deactivateApp(android.content.Context, String)}.
-     *
-     * @param context Used to access the applicationId and the attributionId for non-authenticated
-     *                users.
-     * @deprecated When using {@link AppEventsLogger#activateApp(Application)} deactivate app will
-     * be logged automatically.
-     */
-    @Deprecated
-    @SuppressWarnings("deprecation")
-    public static void deactivateApp(Context context) {
-        if (ActivityLifecycleTracker.isTracking()) {
-            Log.w(TAG, "deactivateApp events are being logged automatically. " +
-                    "There's no need to call deactivateApp, this is safe to remove.");
-            return;
-        }
-
-        deactivateApp(context, Utility.getMetadataApplicationId(context));
-    }
-
-    /**
-     * Notifies the events system that the app has been deactivated (put in the background) and
-     * tracks the application session information. Should be called whenever your app becomes
-     * inactive, typically in the onPause() method of each long-running Activity of your app.
-     *
-     * @param context       Used to access the attributionId for non-authenticated users.
-     * @param applicationId The specific applicationId to track session information for.
-     * @deprecated When using {@link AppEventsLogger#activateApp(Application)} deactivate app will
-     * be logged automatically.
-     */
-    @Deprecated
-    public static void deactivateApp(Context context, String applicationId) {
-        if (ActivityLifecycleTracker.isTracking()) {
-            Log.w(TAG, "deactivateApp events are being logged automatically. " +
-                    "There's no need to call deactivateApp, this is safe to remove.");
-            return;
-        }
-
-        if (context == null || applicationId == null) {
-            throw new IllegalArgumentException("Both context and applicationId must be non-null");
-        }
-
-        resetSourceApplication();
-
-        final AppEventsLogger logger = new AppEventsLogger(context, applicationId, null);
-        final long eventTime = System.currentTimeMillis();
-        backgroundExecutor.execute(new Runnable() {
-            @Override
-            public void run() {
-                logger.logAppSessionSuspendEvent(eventTime);
-            }
-        });
-    }
-
-    private void logAppSessionResumeEvent(long eventTime, String sourceApplicationInfo) {
-        PersistedAppSessionInfo.onResume(
-                FacebookSdk.getApplicationContext(),
-                accessTokenAppId,
-                this,
-                eventTime,
-                sourceApplicationInfo);
     }
 
-    private void logAppSessionSuspendEvent(long eventTime) {
-        PersistedAppSessionInfo.onSuspend(
-                FacebookSdk.getApplicationContext(),
-                accessTokenAppId,
-                this,
-                eventTime);
-    }
 
     /**
      * Build an AppEventsLogger instance to log events through.  The Facebook app that these events
@@ -455,11 +258,6 @@ public static AppEventsLogger newLogger(Context context, String applicationId) {
      */
     public static final String ACTION_APP_EVENTS_FLUSHED = "com.facebook.sdk.APP_EVENTS_FLUSHED";
 
-    public static final String APP_EVENTS_EXTRA_NUM_EVENTS_FLUSHED =
-            "com.facebook.sdk.APP_EVENTS_NUM_EVENTS_FLUSHED";
-    public static final String APP_EVENTS_EXTRA_FLUSH_RESULT =
-            "com.facebook.sdk.APP_EVENTS_FLUSH_RESULT";
-
     /**
      * Access the behavior that AppEventsLogger uses to determine when to flush logged events to the
      * server. This setting applies to all instances of AppEventsLogger.
@@ -488,7 +286,7 @@ public static void setFlushBehavior(FlushBehavior flushBehavior) {
      * Log an app event with the specified name.
      *
      * @param eventName eventName used to denote the event.  Choose amongst the EVENT_NAME_*
-     *                  constants in {@link AppEventsConstants} when possible.  Or create your own
+     *                  constants in when possible.  Or create your own
      *                  if none of the EVENT_NAME_* constants are applicable. Event names should be
      *                  40 characters or less, alphanumeric, and can include spaces, underscores or
      *                  hyphens, but must not have a space or hyphen as the first character.  Any
@@ -498,29 +296,12 @@ public void logEvent(String eventName) {
         logEvent(eventName, null);
     }
 
-    /**
-     * Log an app event with the specified name and the supplied value.
-     *
-     * @param eventName  eventName used to denote the event.  Choose amongst the EVENT_NAME_*
-     *                   constants in {@link AppEventsConstants} when possible.  Or create your own
-     *                   if none of the EVENT_NAME_* constants are applicable. Event names should be
-     *                   40 characters or less, alphanumeric, and can include spaces, underscores or
-     *                   hyphens, but must not have a space or hyphen as the first character.  Any
-     *                   given app should have no more than 1000 distinct event names. * @param
-     *                   eventName
-     * @param valueToSum a value to associate with the event which will be summed up in Insights for
-     *                   across all instances of the event, so that average values can be
-     *                   determined, etc.
-     */
-    public void logEvent(String eventName, double valueToSum) {
-        logEvent(eventName, valueToSum, null);
-    }
 
     /**
      * Log an app event with the specified name and set of parameters.
      *
      * @param eventName  eventName used to denote the event.  Choose amongst the EVENT_NAME_*
-     *                   constants in {@link AppEventsConstants} when possible.  Or create your own
+     *                   constants in when possible.  Or create your own
      *                   if none of the EVENT_NAME_* constants are applicable. Event names should be
      *                   40 characters or less, alphanumeric, and can include spaces, underscores or
      *                   hyphens, but must not have a space or hyphen as the first character.  Any
@@ -535,126 +316,7 @@ public void logEvent(String eventName, double valueToSum) {
      *                   should be Strings or numeric values.
      */
     public void logEvent(String eventName, Bundle parameters) {
-        logEvent(
-            eventName,
-            null,
-            parameters,
-            false,
-            ActivityLifecycleTracker.getCurrentSessionGuid());
-    }
 
-    /**
-     * Log an app event with the specified name, supplied value, and set of parameters.
-     *
-     * @param eventName  eventName used to denote the event.  Choose amongst the EVENT_NAME_*
-     *                   constants in {@link AppEventsConstants} when possible.  Or create your own
-     *                   if none of the EVENT_NAME_* constants are applicable. Event names should be
-     *                   40 characters or less, alphanumeric, and can include spaces, underscores or
-     *                   hyphens, but must not have a space or hyphen as the first character.  Any
-     *                   given app should have no more than 1000 distinct event names.
-     * @param valueToSum a value to associate with the event which will be summed up in Insights for
-     *                   across all instances of the event, so that average values can be
-     *                   determined, etc.
-     * @param parameters A Bundle of parameters to log with the event.  Insights will allow looking
-     *                   at the logs of these events via different parameter values.  You can log on
-     *                   the order of 25 parameters with each distinct eventName.  It's advisable to
-     *                   limit the number of unique values provided for each parameter in the
-     *                   thousands.  As an example, don't attempt to provide a unique
-     *                   parameter value for each unique user in your app.  You won't get meaningful
-     *                   aggregate reporting on so many parameter values.  The values in the bundles
-     *                   should be Strings or numeric values.
-     */
-    public void logEvent(String eventName, double valueToSum, Bundle parameters) {
-        logEvent(
-            eventName,
-            valueToSum,
-            parameters,
-            false,
-            ActivityLifecycleTracker.getCurrentSessionGuid());
-    }
-
-    /**
-     * Logs a purchase event with Facebook, in the specified amount and with the specified
-     * currency.
-     *
-     * @param purchaseAmount Amount of purchase, in the currency specified by the 'currency'
-     *                       parameter. This value will be rounded to the thousandths place (e.g.,
-     *                       12.34567 becomes 12.346).
-     * @param currency       Currency used to specify the amount.
-     */
-    public void logPurchase(BigDecimal purchaseAmount, Currency currency) {
-        logPurchase(purchaseAmount, currency, null);
-    }
-
-    /**
-     * Logs a purchase event with Facebook, in the specified amount and with the specified currency.
-     * Additional detail about the purchase can be passed in through the parameters bundle.
-     *
-     * @param purchaseAmount Amount of purchase, in the currency specified by the 'currency'
-     *                       parameter. This value will be rounded to the thousandths place (e.g.,
-     *                       12.34567 becomes 12.346).
-     * @param currency       Currency used to specify the amount.
-     * @param parameters     Arbitrary additional information for describing this event. This should
-     *                       have no more than 24 entries, and keys should be mostly consistent from
-     *                       one purchase event to the next.
-     */
-    @SuppressWarnings("deprecation")
-    public void logPurchase(BigDecimal purchaseAmount, Currency currency, Bundle parameters) {
-
-        if (purchaseAmount == null) {
-            notifyDeveloperError("purchaseAmount cannot be null");
-            return;
-        } else if (currency == null) {
-            notifyDeveloperError("currency cannot be null");
-            return;
-        }
-
-        if (parameters == null) {
-            parameters = new Bundle();
-        }
-        parameters.putString(AppEventsConstants.EVENT_PARAM_CURRENCY, currency.getCurrencyCode());
-
-        logEvent(AppEventsConstants.EVENT_NAME_PURCHASED, purchaseAmount.doubleValue(), parameters);
-        eagerFlush();
-    }
-
-    /**
-     * Logs an app event that tracks that the application was open via Push Notification.
-     * @param payload Notification payload received.
-     */
-    public void logPushNotificationOpen(Bundle payload) {
-        logPushNotificationOpen(payload, null);
-    }
-
-    /**
-     * Logs an app event that tracks that the application was open via Push Notification.
-     * @param payload Notification payload received.
-     */
-    public void logPushNotificationOpen(Bundle payload, String action) {
-        String campaignId = null;
-        try {
-            String payloadString = payload.getString(PUSH_PAYLOAD_KEY);
-            if (Utility.isNullOrEmpty(payloadString)) {
-                return; // Ignore the payload if no fb push payload is present.
-            }
-
-            JSONObject facebookPayload = new JSONObject(payloadString);
-            campaignId = facebookPayload.getString(PUSH_PAYLOAD_CAMPAIGN_KEY);
-        } catch (JSONException je) {
-            // ignore
-        }
-        if (campaignId == null) {
-            Logger.log(LoggingBehavior.DEVELOPER_ERRORS, TAG,
-                "Malformed payload specified for logging a push notification open.");
-            return;
-        }
-
-        Bundle parameters = new Bundle();
-        parameters.putString(APP_EVENT_PUSH_PARAMETER_CAMPAIGN, campaignId);
-        if (action != null) {
-            parameters.putString(APP_EVENT_PUSH_PARAMETER_ACTION, action);
-        }
-        logEvent(APP_EVENT_NAME_PUSH_OPENED, parameters);
     }
 
     /**
@@ -662,68 +324,20 @@ public void logPushNotificationOpen(Bundle payload, String action) {
      * the value of getFlushBehavior.  This method allows for explicit, app invoked flushing.
      */
     public void flush() {
-        AppEventQueue.flush(FlushReason.EXPLICIT);
-    }
 
-    /**
-     * Call this when the consuming Activity/Fragment receives an onStop() callback in order to
-     * persist any outstanding events to disk so they may be flushed at a later time. The next
-     * flush (explicit or not) will check for any outstanding events and if present, include them
-     * in that flush. Note that this call may trigger an I/O operation on the calling thread.
-     * Explicit use of this method is necessary.
-     */
-    public static void onContextStop() {
-        // TODO: (v4) add onContextStop() to samples that use the logger.
-        AppEventQueue.persistToDisk();
     }
 
-    /**
-     * Determines if the logger is valid for the given access token.
-     * @param accessToken The access token to check.
-     * @return True if the access token is valid for this logger.
-     */
-    public boolean isValidForAccessToken(AccessToken accessToken) {
-        AccessTokenAppIdPair other = new AccessTokenAppIdPair(accessToken);
-        return accessTokenAppId.equals(other);
-    }
 
-    /**
-     * Sets a registration id to register the current app installation for push notifications.
-     * @param registrationId RegistrationId received from GCM.
-     */
-    public static void setPushNotificationsRegistrationId(String registrationId) {
-        synchronized (staticLock) {
-            pushNotificationsRegistrationId = registrationId;
-        }
-    }
-
-    static String getPushNotificationsRegistrationId() {
-        synchronized (staticLock) {
-            return pushNotificationsRegistrationId;
-        }
-    }
     /**
      * This method is intended only for internal use by the Facebook SDK and other use is
      * unsupported.
      */
     public void logSdkEvent(String eventName, Double valueToSum, Bundle parameters) {
-        logEvent(
-            eventName,
-            valueToSum,
-            parameters,
-            true,
-            ActivityLifecycleTracker.getCurrentSessionGuid());
-    }
 
-    /**
-     * Returns the app ID this logger was configured to log to.
-     *
-     * @return the Facebook app ID
-     */
-    public String getApplicationId() {
-        return accessTokenAppId.getApplicationId();
     }
 
+
+
     //
     // Private implementation
     //
@@ -742,59 +356,9 @@ protected AppEventsLogger(
             String activityName,
             String applicationId,
             AccessToken accessToken) {
-        Validate.sdkInitialized();
-        this.contextName = activityName;
-
-        if (accessToken == null) {
-            accessToken = AccessToken.getCurrentAccessToken();
-        }
-
-        // If we have a session and the appId passed is null or matches the session's app ID:
-        if (accessToken != null &&
-                (applicationId == null || applicationId.equals(accessToken.getApplicationId()))
-                ) {
-            accessTokenAppId = new AccessTokenAppIdPair(accessToken);
-        } else {
-            // If no app ID passed, get it from the manifest:
-            if (applicationId == null) {
-                applicationId = Utility.getMetadataApplicationId(
-                        FacebookSdk.getApplicationContext());
-            }
-            accessTokenAppId = new AccessTokenAppIdPair(null, applicationId);
-        }
 
-        initializeTimersIfNeeded();
     }
 
-    private static void initializeTimersIfNeeded() {
-        synchronized (staticLock) {
-            if (backgroundExecutor != null) {
-                return;
-            }
-            backgroundExecutor = new ScheduledThreadPoolExecutor(1);
-        }
-
-        final Runnable attributionRecheckRunnable = new Runnable() {
-            @Override
-            public void run() {
-                Set<String> applicationIds = new HashSet<>();
-                for (AccessTokenAppIdPair accessTokenAppId : AppEventQueue.getKeySet()) {
-                    applicationIds.add(accessTokenAppId.getApplicationId());
-                }
-
-                for (String applicationId : applicationIds) {
-                    Utility.queryAppSettings(applicationId, true);
-                }
-            }
-        };
-
-        backgroundExecutor.scheduleAtFixedRate(
-                attributionRecheckRunnable,
-                0,
-                APP_SUPPORTS_ATTRIBUTION_ID_RECHECK_PERIOD_IN_SECONDS,
-                TimeUnit.SECONDS
-        );
-    }
 
     private void logEvent(
             String eventName,
@@ -802,120 +366,7 @@ private void logEvent(
             Bundle parameters,
             boolean isImplicitlyLogged,
             @Nullable final UUID currentSessionId) {
-        AppEvent event = new AppEvent(
-                this.contextName,
-                eventName,
-                valueToSum,
-                parameters,
-                isImplicitlyLogged,
-                currentSessionId);
-        logEvent(FacebookSdk.getApplicationContext(), event, accessTokenAppId);
-    }
-
-    private static void logEvent(final Context context,
-                                 final AppEvent event,
-                                 final AccessTokenAppIdPair accessTokenAppId) {
-        AppEventQueue.add(accessTokenAppId, event);
-
-        // Make sure Activated_App is always before other app events
-        if (!event.getIsImplicit() && !isActivateAppEventRequested) {
-            if (event.getName() == AppEventsConstants.EVENT_NAME_ACTIVATED_APP) {
-                isActivateAppEventRequested = true;
-            } else {
-                Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
-                        "Warning: Please call AppEventsLogger.activateApp(...)" +
-                                "from the long-lived activity's onResume() method" +
-                                "before logging other app events."
-                );
-            }
-        }
-    }
-
-    static void eagerFlush() {
-        if (getFlushBehavior() != FlushBehavior.EXPLICIT_ONLY) {
-            AppEventQueue.flush(FlushReason.EAGER_FLUSHING_EVENT);
-        }
-    }
 
-    /**
-     * Invoke this method, rather than throwing an Exception, for situations where user/server input
-     * might reasonably cause this to occur, and thus don't want an exception thrown at production
-     * time, but do want logging notification.
-     */
-    private static void notifyDeveloperError(String message) {
-        Logger.log(LoggingBehavior.DEVELOPER_ERRORS, "AppEvents", message);
-    }
-
-    /**
-     * Source Application setters and getters
-     */
-    private static void setSourceApplication(Activity activity) {
-
-        ComponentName callingApplication = activity.getCallingActivity();
-        if (callingApplication != null) {
-            String callingApplicationPackage = callingApplication.getPackageName();
-            if (callingApplicationPackage.equals(activity.getPackageName())) {
-                // open by own app.
-                resetSourceApplication();
-                return;
-            }
-            sourceApplication = callingApplicationPackage;
-        }
-
-        // Tap icon to open an app will still get the old intent if the activity was opened by an
-        // intent before. Introduce an extra field in the intent to force clear the
-        // sourceApplication.
-        Intent openIntent = activity.getIntent();
-        if (openIntent == null ||
-                openIntent.getBooleanExtra(SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT, false)) {
-            resetSourceApplication();
-            return;
-        }
-
-        Bundle applinkData = AppLinks.getAppLinkData(openIntent);
-
-        if (applinkData == null) {
-            resetSourceApplication();
-            return;
-        }
-
-        isOpenedByApplink = true;
-
-        Bundle applinkReferrerData = applinkData.getBundle("referer_app_link");
-
-        if (applinkReferrerData == null) {
-            sourceApplication = null;
-            return;
-        }
-
-        String applinkReferrerPackage = applinkReferrerData.getString("package");
-        sourceApplication = applinkReferrerPackage;
-
-        // Mark this intent has been used to avoid use this intent again and again.
-        openIntent.putExtra(SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT, true);
-
-        return;
-    }
-
-    static void setSourceApplication(String applicationPackage, boolean openByAppLink) {
-        sourceApplication = applicationPackage;
-        isOpenedByApplink = openByAppLink;
-    }
-
-    static String getSourceApplication() {
-        String openType = "Unclassified";
-        if (isOpenedByApplink) {
-            openType = "Applink";
-        }
-        if (sourceApplication != null) {
-            return openType + "(" + sourceApplication + ")";
-        }
-        return openType;
-    }
-
-    static void resetSourceApplication() {
-        sourceApplication = null;
-        isOpenedByApplink = false;
     }
 
     /**
@@ -950,152 +401,4 @@ public static String getAnonymousAppDeviceGUID(Context context) {
         return anonymousAppDeviceGUID;
     }
 
-    //
-    // Deprecated Stuff
-    //
-
-    // Since we moved some private classes to internal classes outside the AppEventsLogger class
-    // for backwards compatibility we can override the classDescriptor to resolve to the correct
-    // class
-
-
-    static class PersistedAppSessionInfo {
-        private static final String PERSISTED_SESSION_INFO_FILENAME =
-                "AppEventsLogger.persistedsessioninfo";
-
-        private static final Object staticLock = new Object();
-        private static boolean hasChanges = false;
-        private static boolean isLoaded = false;
-        private static Map<AccessTokenAppIdPair, FacebookTimeSpentData> appSessionInfoMap;
-
-        private static final Runnable appSessionInfoFlushRunnable = new Runnable() {
-            @Override
-            public void run() {
-                PersistedAppSessionInfo.saveAppSessionInformation(
-                        FacebookSdk.getApplicationContext());
-            }
-        };
-
-        @SuppressWarnings("unchecked")
-        private static void restoreAppSessionInformation(Context context) {
-            ObjectInputStream ois = null;
-
-            synchronized (staticLock) {
-                if (!isLoaded) {
-                    try {
-                        ois = new ObjectInputStream(
-                            context.openFileInput(PERSISTED_SESSION_INFO_FILENAME));
-                        appSessionInfoMap = (HashMap<AccessTokenAppIdPair, FacebookTimeSpentData>)
-                                ois.readObject();
-                        Logger.log(
-                                LoggingBehavior.APP_EVENTS,
-                                "AppEvents",
-                                "App session info loaded");
-                    } catch (FileNotFoundException fex) {
-                    } catch (Exception e) {
-                        Log.w(
-                                TAG,
-                                "Got unexpected exception restoring app session info: "
-                                        + e.toString());
-                    } finally {
-                        Utility.closeQuietly(ois);
-                        context.deleteFile(PERSISTED_SESSION_INFO_FILENAME);
-                        if (appSessionInfoMap == null) {
-                            appSessionInfoMap =
-                                    new HashMap<AccessTokenAppIdPair, FacebookTimeSpentData>();
-                        }
-                        // Regardless of the outcome of the load, the session information cache
-                        // is always deleted. Therefore, always treat the session information cache
-                        // as loaded
-                        isLoaded = true;
-                        hasChanges = false;
-                    }
-                }
-            }
-        }
-
-        static void saveAppSessionInformation(Context context) {
-            ObjectOutputStream oos = null;
-
-            synchronized (staticLock) {
-                if (hasChanges) {
-                    try {
-                        oos = new ObjectOutputStream(
-                                new BufferedOutputStream(
-                                        context.openFileOutput(
-                                                PERSISTED_SESSION_INFO_FILENAME,
-                                                Context.MODE_PRIVATE)
-                                )
-                        );
-                        oos.writeObject(appSessionInfoMap);
-                        hasChanges = false;
-                        Logger.log(
-                                LoggingBehavior.APP_EVENTS,
-                                "AppEvents",
-                                "App session info saved");
-                    } catch (Exception e) {
-                        Log.w(
-                                TAG,
-                                "Got unexpected exception while writing app session info: "
-                                        + e.toString());
-                    } finally {
-                        Utility.closeQuietly(oos);
-                    }
-                }
-            }
-        }
-
-        static void onResume(
-                Context context,
-                AccessTokenAppIdPair accessTokenAppId,
-                AppEventsLogger logger,
-                long eventTime,
-                String sourceApplicationInfo
-        ) {
-            synchronized (staticLock) {
-                FacebookTimeSpentData timeSpentData = getTimeSpentData(context, accessTokenAppId);
-                timeSpentData.onResume(logger, eventTime, sourceApplicationInfo);
-                onTimeSpentDataUpdate();
-            }
-        }
-
-        static void onSuspend(
-                Context context,
-                AccessTokenAppIdPair accessTokenAppId,
-                AppEventsLogger logger,
-                long eventTime
-        ) {
-            synchronized (staticLock) {
-                FacebookTimeSpentData timeSpentData = getTimeSpentData(context, accessTokenAppId);
-                timeSpentData.onSuspend(logger, eventTime);
-                onTimeSpentDataUpdate();
-            }
-        }
-
-        private static FacebookTimeSpentData getTimeSpentData(
-                Context context,
-                AccessTokenAppIdPair accessTokenAppId
-        ) {
-            restoreAppSessionInformation(context);
-            FacebookTimeSpentData result = null;
-
-            result = appSessionInfoMap.get(accessTokenAppId);
-            if (result == null) {
-                result = new FacebookTimeSpentData();
-                appSessionInfoMap.put(accessTokenAppId, result);
-            }
-
-            return result;
-        }
-
-        private static void onTimeSpentDataUpdate() {
-            if (!hasChanges) {
-                hasChanges = true;
-                backgroundExecutor.schedule(
-                        appSessionInfoFlushRunnable,
-                        FLUSH_APP_SESSION_INFO_IN_SECONDS,
-                        TimeUnit.SECONDS);
-            }
-        }
-    }
 }
diff --git a/facebook/src/main/java/com/facebook/appevents/FacebookTimeSpentData.java b/facebook/src/main/java/com/facebook/appevents/FacebookTimeSpentData.java
deleted file mode 100644
index 4dd7cc254..000000000
--- a/facebook/src/main/java/com/facebook/appevents/FacebookTimeSpentData.java
+++ /dev/null
@@ -1,327 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents;
-
-import android.os.Bundle;
-import android.text.format.DateUtils;
-
-import com.facebook.LoggingBehavior;
-import com.facebook.appevents.AppEventsConstants;
-import com.facebook.internal.Logger;
-
-import java.util.Locale;
-import java.io.Serializable;
-
-class FacebookTimeSpentData implements Serializable {
-    // Constants
-    private static final long serialVersionUID = 1L;
-    private static final String TAG = FacebookTimeSpentData.class.getCanonicalName();
-    private static final long FIRST_TIME_LOAD_RESUME_TIME = -1;
-    private static final long INTERRUPTION_THRESHOLD_MILLISECONDS = 1000;
-    private static final long NUM_MILLISECONDS_IDLE_TO_BE_NEW_SESSION =
-            60 * DateUtils.SECOND_IN_MILLIS;
-    private static final long APP_ACTIVATE_SUPPRESSION_PERIOD_IN_MILLISECONDS =
-            5 * DateUtils.MINUTE_IN_MILLIS;
-
-    // Should be kept in sync with the iOS sdk
-    private static final long[] INACTIVE_SECONDS_QUANTA =
-        new long[] {
-            5 * DateUtils.MINUTE_IN_MILLIS,
-            15 * DateUtils.MINUTE_IN_MILLIS,
-            30 * DateUtils.MINUTE_IN_MILLIS,
-            1 * DateUtils.HOUR_IN_MILLIS,
-            6 * DateUtils.HOUR_IN_MILLIS,
-            12 * DateUtils.HOUR_IN_MILLIS,
-            1 * DateUtils.DAY_IN_MILLIS,
-            2 * DateUtils.DAY_IN_MILLIS,
-            3 * DateUtils.DAY_IN_MILLIS,
-            7 * DateUtils.DAY_IN_MILLIS,
-            14 * DateUtils.DAY_IN_MILLIS,
-            21 * DateUtils.DAY_IN_MILLIS,
-            28 * DateUtils.DAY_IN_MILLIS,
-            60 * DateUtils.DAY_IN_MILLIS,
-            90 * DateUtils.DAY_IN_MILLIS,
-            120 * DateUtils.DAY_IN_MILLIS,
-            150 * DateUtils.DAY_IN_MILLIS,
-            180 * DateUtils.DAY_IN_MILLIS,
-            365 * DateUtils.DAY_IN_MILLIS,
-        };
-
-    private boolean isWarmLaunch;
-    private boolean isAppActive;
-    private long lastActivateEventLoggedTime;
-
-    // Member data that's persisted to disk
-    private long lastResumeTime;
-    private long lastSuspendTime;
-    private long millisecondsSpentInSession;
-    private int interruptionCount;
-    private String firstOpenSourceApplication;
-
-    /**
-     * Serialization proxy for the FacebookTimeSpentData class. This is version 1 of
-     * serialization. Future serializations may differ in format. This
-     * class should not be modified. If serializations formats change,
-     * create a new class SerializationProxyVx.
-     */
-    private static class SerializationProxyV1 implements Serializable {
-        private static final long serialVersionUID = 6L;
-
-        private final long lastResumeTime;
-        private final long lastSuspendTime;
-        private final long millisecondsSpentInSession;
-        private final int interruptionCount;
-
-        SerializationProxyV1(
-            long lastResumeTime,
-            long lastSuspendTime,
-            long millisecondsSpentInSession,
-            int interruptionCount
-        ) {
-            this.lastResumeTime = lastResumeTime;
-            this.lastSuspendTime = lastSuspendTime;
-            this.millisecondsSpentInSession = millisecondsSpentInSession;
-            this.interruptionCount = interruptionCount;
-        }
-
-        private Object readResolve() {
-            return new FacebookTimeSpentData(
-                lastResumeTime,
-                lastSuspendTime,
-                millisecondsSpentInSession,
-                interruptionCount);
-        }
-    }
-
-
-    /**
-     * Constructor to be used for V1 serialization only, DO NOT CHANGE.
-     */
-    private FacebookTimeSpentData(
-            long lastResumeTime,
-            long lastSuspendTime,
-            long millisecondsSpentInSession,
-            int interruptionCount
-
-    ) {
-        resetSession();
-        this.lastResumeTime = lastResumeTime;
-        this.lastSuspendTime = lastSuspendTime;
-        this.millisecondsSpentInSession = millisecondsSpentInSession;
-        this.interruptionCount = interruptionCount;
-    }
-
-    /**
-     * Serialization proxy for the FacebookTimeSpentData class. This is version 2 of
-     * serialization. Future serializations may differ in format. This
-     * class should not be modified. If serializations formats change,
-     * create a new class SerializationProxyVx.
-     */
-    private static class SerializationProxyV2 implements Serializable {
-        private static final long serialVersionUID = 6L;
-
-        private final long lastResumeTime;
-        private final long lastSuspendTime;
-        private final long millisecondsSpentInSession;
-        private final int interruptionCount;
-        private final String firstOpenSourceApplication;
-
-        SerializationProxyV2(
-                long lastResumeTime,
-                long lastSuspendTime,
-                long millisecondsSpentInSession,
-                int interruptionCount,
-                String firstOpenSourceApplication
-
-        ) {
-            this.lastResumeTime = lastResumeTime;
-            this.lastSuspendTime = lastSuspendTime;
-            this.millisecondsSpentInSession = millisecondsSpentInSession;
-            this.interruptionCount = interruptionCount;
-            this.firstOpenSourceApplication = firstOpenSourceApplication;
-        }
-
-        private Object readResolve() {
-            return new FacebookTimeSpentData(
-                    lastResumeTime,
-                    lastSuspendTime,
-                    millisecondsSpentInSession,
-                    interruptionCount,
-                    firstOpenSourceApplication);
-        }
-    }
-
-    FacebookTimeSpentData() {
-        resetSession();
-    }
-
-    /**
-     * Constructor to be used for V2 serialization only, DO NOT CHANGE.
-     */
-    private FacebookTimeSpentData(
-        long lastResumeTime,
-        long lastSuspendTime,
-        long millisecondsSpentInSession,
-        int interruptionCount,
-        String firstOpenSourceApplication
-    ) {
-        resetSession();
-        this.lastResumeTime = lastResumeTime;
-        this.lastSuspendTime = lastSuspendTime;
-        this.millisecondsSpentInSession = millisecondsSpentInSession;
-        this.interruptionCount = interruptionCount;
-        this.firstOpenSourceApplication = firstOpenSourceApplication;
-    }
-
-    private Object writeReplace() {
-        return new SerializationProxyV2(
-                lastResumeTime,
-                lastSuspendTime,
-                millisecondsSpentInSession,
-                interruptionCount,
-                firstOpenSourceApplication
-        );
-    }
-
-    void onSuspend(AppEventsLogger logger, long eventTime) {
-        if (!isAppActive) {
-            Logger.log(LoggingBehavior.APP_EVENTS, TAG, "Suspend for inactive app");
-            return;
-        }
-
-        long now = eventTime;
-        long delta = (now - lastResumeTime);
-        if (delta < 0) {
-            Logger.log(LoggingBehavior.APP_EVENTS, TAG, "Clock skew detected");
-            delta = 0;
-        }
-        millisecondsSpentInSession += delta;
-        lastSuspendTime = now;
-        isAppActive = false;
-    }
-
-    void onResume(AppEventsLogger logger, long eventTime, String sourceApplicationInfo) {
-        long now = eventTime;
-
-        // Retain old behavior for activated app event - log the event if the event hasn't
-        // been logged in the previous suppression interval or this is a cold launch.
-        // If this is a cold launch, always log the event. Otherwise, use the last
-        // event log time to determine if the app activate should be suppressed or not.
-        if (isColdLaunch() || ((now - lastActivateEventLoggedTime) >
-                APP_ACTIVATE_SUPPRESSION_PERIOD_IN_MILLISECONDS)) {
-            Bundle eventParams = new Bundle();
-            eventParams.putString(
-                    AppEventsConstants.EVENT_PARAM_SOURCE_APPLICATION,
-                    sourceApplicationInfo);
-            logger.logEvent(AppEventsConstants.EVENT_NAME_ACTIVATED_APP, eventParams);
-            lastActivateEventLoggedTime = now;
-        }
-
-        // If this is an application that's not calling onSuspend yet, log and return. We can't
-        // track time spent for this application as there are no calls to onSuspend.
-        if (isAppActive) {
-          Logger.log(LoggingBehavior.APP_EVENTS, TAG, "Resume for active app");
-          return;
-        }
-
-        long interruptionDurationMillis = wasSuspendedEver() ? now - lastSuspendTime : 0;
-        if (interruptionDurationMillis < 0) {
-          Logger.log(LoggingBehavior.APP_EVENTS, TAG, "Clock skew detected");
-          interruptionDurationMillis = 0;
-        }
-
-        // If interruption duration is > new session threshold, then log old session
-        // event and start a new session.
-        if (interruptionDurationMillis > NUM_MILLISECONDS_IDLE_TO_BE_NEW_SESSION) {
-            logAppDeactivatedEvent(logger, interruptionDurationMillis);
-        } else {
-            // We're not logging this resume event - check to see if this should count
-            // as an interruption
-            if (interruptionDurationMillis > INTERRUPTION_THRESHOLD_MILLISECONDS) {
-                interruptionCount++;
-            }
-        }
-
-        // Set source application only for the first resume of the timespent session.
-        if (interruptionCount == 0) {
-            firstOpenSourceApplication = sourceApplicationInfo;
-        }
-
-        lastResumeTime = now;
-        isAppActive = true;
-    }
-
-    private void logAppDeactivatedEvent(AppEventsLogger logger,
-                                        long interruptionDurationMillis) {
-        // Log the old session information and clear the data
-        Bundle eventParams = new Bundle();
-        eventParams.putInt(
-                AppEventsConstants.EVENT_NAME_SESSION_INTERRUPTIONS,
-                interruptionCount);
-        eventParams.putString(
-                AppEventsConstants.EVENT_NAME_TIME_BETWEEN_SESSIONS,
-                String.format(
-                        Locale.ROOT,
-                        "session_quanta_%d",
-                        getQuantaIndex(interruptionDurationMillis)));
-        eventParams.putString(
-                AppEventsConstants.EVENT_PARAM_SOURCE_APPLICATION,
-                firstOpenSourceApplication);
-        logger.logEvent(
-                AppEventsConstants.EVENT_NAME_DEACTIVATED_APP,
-                (millisecondsSpentInSession/DateUtils.SECOND_IN_MILLIS),
-                eventParams);
-        resetSession();
-    }
-
-    private static int getQuantaIndex(long timeBetweenSessions) {
-        int quantaIndex = 0;
-
-        while (
-            quantaIndex < INACTIVE_SECONDS_QUANTA.length &&
-            INACTIVE_SECONDS_QUANTA[quantaIndex] < timeBetweenSessions
-        ) {
-            ++quantaIndex;
-        }
-
-        return quantaIndex;
-    }
-
-    private void resetSession() {
-        isAppActive = false;
-        lastResumeTime = FIRST_TIME_LOAD_RESUME_TIME;
-        lastSuspendTime = FIRST_TIME_LOAD_RESUME_TIME;
-        interruptionCount = 0;
-        millisecondsSpentInSession = 0;
-    }
-
-    private boolean wasSuspendedEver() {
-        return lastSuspendTime != FIRST_TIME_LOAD_RESUME_TIME;
-    }
-
-    private boolean isColdLaunch() {
-        // On the very first call in the process lifecycle, this will always
-        // return true. After that, it will always return false.
-        boolean result = !isWarmLaunch;
-        isWarmLaunch = true;
-        return result;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/FlushReason.java b/facebook/src/main/java/com/facebook/appevents/FlushReason.java
deleted file mode 100644
index 48e4ed827..000000000
--- a/facebook/src/main/java/com/facebook/appevents/FlushReason.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents;
-
-enum FlushReason {
-    EXPLICIT,
-    TIMER,
-    SESSION_CHANGE,
-    PERSISTED_EVENTS,
-    EVENT_THRESHOLD,
-    EAGER_FLUSHING_EVENT,
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/FlushResult.java b/facebook/src/main/java/com/facebook/appevents/FlushResult.java
deleted file mode 100644
index 064dc3190..000000000
--- a/facebook/src/main/java/com/facebook/appevents/FlushResult.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents;
-
-public enum FlushResult {
-    SUCCESS,
-    SERVER_ERROR,
-    NO_CONNECTIVITY,
-    UNKNOWN_ERROR
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/FlushStatistics.java b/facebook/src/main/java/com/facebook/appevents/FlushStatistics.java
deleted file mode 100644
index 5e8e6efe0..000000000
--- a/facebook/src/main/java/com/facebook/appevents/FlushStatistics.java
+++ /dev/null
@@ -1,26 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents;
-
-class FlushStatistics {
-    public int numEvents = 0;
-    public FlushResult result = FlushResult.SUCCESS;
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/PersistedEvents.java b/facebook/src/main/java/com/facebook/appevents/PersistedEvents.java
deleted file mode 100644
index df47a7ac8..000000000
--- a/facebook/src/main/java/com/facebook/appevents/PersistedEvents.java
+++ /dev/null
@@ -1,77 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents;
-
-import java.io.Serializable;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Set;
-
-class PersistedEvents implements Serializable {
-    private static final long serialVersionUID = 2016_06_29_001L;
-
-    private HashMap<AccessTokenAppIdPair, List<AppEvent>> events = new HashMap<>();
-
-    public PersistedEvents() {
-    }
-
-    public PersistedEvents(HashMap<AccessTokenAppIdPair, List<AppEvent>> appEventMap) {
-        events.putAll(appEventMap);
-    }
-
-    public Set<AccessTokenAppIdPair> keySet() {
-        return events.keySet();
-    }
-
-    public List<AppEvent> get(AccessTokenAppIdPair accessTokenAppIdPair) {
-        return events.get(accessTokenAppIdPair);
-    }
-
-    public boolean containsKey(AccessTokenAppIdPair accessTokenAppIdPair) {
-        return events.containsKey(accessTokenAppIdPair);
-    }
-
-    public void addEvents(AccessTokenAppIdPair accessTokenAppIdPair, List<AppEvent> appEvents) {
-        if (!events.containsKey(accessTokenAppIdPair)) {
-            events.put(accessTokenAppIdPair, appEvents);
-            return;
-        }
-
-        events.get(accessTokenAppIdPair).addAll(appEvents);
-    }
-
-    static class SerializationProxyV1 implements Serializable {
-        private static final long serialVersionUID = 2016_06_29_001L;;
-        private final HashMap<AccessTokenAppIdPair, List<AppEvent>> proxyEvents;
-
-        private SerializationProxyV1(HashMap<AccessTokenAppIdPair, List<AppEvent>> events) {
-            this.proxyEvents = events;
-        }
-
-        private Object readResolve() {
-            return new PersistedEvents(proxyEvents);
-        }
-    }
-
-    private Object writeReplace() {
-        return new SerializationProxyV1(events);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/SessionEventsState.java b/facebook/src/main/java/com/facebook/appevents/SessionEventsState.java
deleted file mode 100644
index cf1890073..000000000
--- a/facebook/src/main/java/com/facebook/appevents/SessionEventsState.java
+++ /dev/null
@@ -1,178 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents;
-
-import android.content.Context;
-import android.os.Bundle;
-
-import com.facebook.GraphRequest;
-import com.facebook.internal.AppEventsLoggerUtility;
-import com.facebook.internal.AttributionIdentifiers;
-import com.facebook.internal.Utility;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.UnsupportedEncodingException;
-import java.util.ArrayList;
-import java.util.List;
-
-class SessionEventsState {
-    private List<AppEvent> accumulatedEvents = new ArrayList<AppEvent>();
-    private List<AppEvent> inFlightEvents = new ArrayList<AppEvent>();
-    private int numSkippedEventsDueToFullBuffer;
-    private AttributionIdentifiers attributionIdentifiers;
-    private String anonymousAppDeviceGUID;
-
-    private final int MAX_ACCUMULATED_LOG_EVENTS = 1000;
-
-    public SessionEventsState(
-            AttributionIdentifiers identifiers,
-            String anonymousGUID) {
-        this.attributionIdentifiers = identifiers;
-        this.anonymousAppDeviceGUID = anonymousGUID;
-    }
-
-    // Synchronize here and in other methods on this class, because could be coming in from
-    // different AppEventsLoggers on different threads pointing at the same session.
-    public synchronized void addEvent(AppEvent event) {
-        if (accumulatedEvents.size() + inFlightEvents.size() >= MAX_ACCUMULATED_LOG_EVENTS) {
-            numSkippedEventsDueToFullBuffer++;
-        } else {
-            accumulatedEvents.add(event);
-        }
-    }
-
-    public synchronized int getAccumulatedEventCount() {
-        return accumulatedEvents.size();
-    }
-
-    public synchronized void clearInFlightAndStats(boolean moveToAccumulated) {
-        if (moveToAccumulated) {
-            accumulatedEvents.addAll(inFlightEvents);
-        }
-        inFlightEvents.clear();
-        numSkippedEventsDueToFullBuffer = 0;
-    }
-
-    public int populateRequest(
-            GraphRequest request,
-            Context applicationContext,
-            boolean includeImplicitEvents,
-            boolean limitEventUsage) {
-
-        int numSkipped;
-        JSONArray jsonArray;
-        synchronized (this) {
-            numSkipped = numSkippedEventsDueToFullBuffer;
-
-            // move all accumulated events to inFlight.
-            inFlightEvents.addAll(accumulatedEvents);
-            accumulatedEvents.clear();
-
-            jsonArray = new JSONArray();
-            for (AppEvent event : inFlightEvents) {
-                if (includeImplicitEvents || !event.getIsImplicit()) {
-                    jsonArray.put(event.getJSONObject());
-                }
-            }
-
-            if (jsonArray.length() == 0) {
-                return 0;
-            }
-        }
-
-        populateRequest(
-                request,
-                applicationContext,
-                numSkipped,
-                jsonArray,
-                limitEventUsage);
-        return jsonArray.length();
-    }
-
-    public synchronized List<AppEvent> getEventsToPersist() {
-        // We will only persist accumulated events, not ones currently in-flight. This means if
-        // an in-flight request fails, those requests will not be persisted and thus might be
-        // lost if the process terminates while the flush is in progress.
-        List<AppEvent> result = accumulatedEvents;
-        accumulatedEvents = new ArrayList<AppEvent>();
-        return result;
-    }
-
-    public synchronized void accumulatePersistedEvents(List<AppEvent> events) {
-        // We won't skip events due to a full buffer, since we already accumulated them once and
-        // persisted them. But they will count against the buffer size when further events are
-        // accumulated.
-        accumulatedEvents.addAll(events);
-    }
-
-    private void populateRequest(
-            GraphRequest request,
-            Context applicationContext,
-            int numSkipped,
-            JSONArray events,
-            boolean limitEventUsage) {
-        JSONObject publishParams = null;
-        try {
-            publishParams = AppEventsLoggerUtility.getJSONObjectForGraphAPICall(
-                    AppEventsLoggerUtility.GraphAPIActivityType.CUSTOM_APP_EVENTS,
-                    attributionIdentifiers,
-                    anonymousAppDeviceGUID,
-                    limitEventUsage,
-                    applicationContext);
-
-            if (numSkippedEventsDueToFullBuffer > 0) {
-                publishParams.put("num_skipped_events", numSkipped);
-            }
-        } catch (JSONException e) {
-            // Swallow
-            publishParams = new JSONObject();
-        }
-        request.setGraphObject(publishParams);
-
-        Bundle requestParameters = request.getParameters();
-        if (requestParameters == null) {
-            requestParameters = new Bundle();
-        }
-
-        String jsonString = events.toString();
-        if (jsonString != null) {
-            requestParameters.putByteArray(
-                    "custom_events_file",
-                    getStringAsByteArray(jsonString));
-            request.setTag(jsonString);
-        }
-        request.setParameters(requestParameters);
-    }
-
-    private byte[] getStringAsByteArray(String jsonString) {
-        byte[] jsonUtf8 = null;
-        try {
-            jsonUtf8 = jsonString.getBytes("UTF-8");
-        } catch (UnsupportedEncodingException e) {
-            // shouldn't happen, but just in case:
-            Utility.logd("Encoding exception: ", e);
-        }
-        return jsonUtf8;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java b/facebook/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java
deleted file mode 100644
index a7a2e74b5..000000000
--- a/facebook/src/main/java/com/facebook/appevents/internal/ActivityLifecycleTracker.java
+++ /dev/null
@@ -1,284 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents.internal;
-
-import android.app.Activity;
-import android.app.Application;
-import android.content.Context;
-import android.os.Bundle;
-import android.os.Looper;
-import android.util.Log;
-
-import com.facebook.BuildConfig;
-import com.facebook.FacebookSdk;
-import com.facebook.appevents.AppEventsLogger;
-import com.facebook.internal.Utility;
-
-import junit.framework.Assert;
-
-import java.util.UUID;
-import java.util.concurrent.Executors;
-import java.util.concurrent.ScheduledExecutorService;
-import java.util.concurrent.ScheduledFuture;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.atomic.AtomicInteger;
-
-public class ActivityLifecycleTracker {
-    private static final String TAG = ActivityLifecycleTracker.class.getCanonicalName();
-    private static final String INCORRECT_IMPL_WARNING = "Unexpected activity pause without a " +
-            "matching activity resume. Logging data may be incorrect. Make sure you call " +
-            "activateApp from your Application's onCreate method";
-    private static final long INTERRUPTION_THRESHOLD_MILLISECONDS = 1000;
-    private static final ScheduledExecutorService singleThreadExecutor =
-            Executors.newSingleThreadScheduledExecutor();
-    private static volatile ScheduledFuture currentFuture;
-    private static AtomicInteger foregroundActivityCount = new AtomicInteger(0);
-    // This member should only be changed or updated when executing on the singleThreadExecutor.
-    private static volatile SessionInfo currentSession;
-    private static AtomicBoolean tracking = new AtomicBoolean(false);
-    private static String appId;
-
-    public static void startTracking(Application application, final String appId) {
-        if (!tracking.compareAndSet(false, true)) {
-            return;
-        }
-
-        ActivityLifecycleTracker.appId = appId;
-
-        application.registerActivityLifecycleCallbacks(
-                new Application.ActivityLifecycleCallbacks() {
-                    @Override
-                    public void onActivityCreated(
-                            final Activity activity,
-                            Bundle savedInstanceState) {
-                        assertIsMainThread();
-                        ActivityLifecycleTracker.onActivityCreated(activity);
-                    }
-
-                    @Override
-                    public void onActivityStarted(Activity activity) {}
-
-                    @Override
-                    public void onActivityResumed(final Activity activity) {
-                        assertIsMainThread();
-                        ActivityLifecycleTracker.onActivityResumed(activity);
-                    }
-
-                    @Override
-                    public void onActivityPaused(final Activity activity) {
-                        assertIsMainThread();
-                        ActivityLifecycleTracker.onActivityPaused(activity);
-                    }
-
-                    @Override
-                    public void onActivityStopped(Activity activity) {
-                        AppEventsLogger.onContextStop();
-                    }
-
-                    @Override
-                    public void onActivitySaveInstanceState(Activity activity, Bundle outState) {
-                    }
-
-                    @Override
-                    public void onActivityDestroyed(Activity activity) {
-                    }
-                });
-    }
-
-    public static boolean isTracking() {
-        return tracking.get();
-    }
-
-    public static UUID getCurrentSessionGuid() {
-        return currentSession != null ? currentSession.getSessionId() : null;
-    }
-
-    // Public in order to allow unity sdk to correctly log app events
-    public static void onActivityCreated(final Activity activity) {
-        final long currentTime = System.currentTimeMillis();
-        Runnable handleActivityCreate = new Runnable() {
-            @Override
-            public void run() {
-                if (currentSession == null) {
-                    Context applicationContext = activity.getApplicationContext();
-                    String activityName = Utility.getActivityName(activity);
-
-                    SessionInfo lastSession =
-                            SessionInfo.getStoredSessionInfo();
-                    if (lastSession != null) {
-                        SessionLogger.logDeactivateApp(
-                                applicationContext,
-                                activityName,
-                                lastSession,
-                                appId);
-                    }
-
-                    currentSession = new SessionInfo(currentTime, null);
-                    SourceApplicationInfo sourceApplicationInfo =
-                            SourceApplicationInfo.Factory.create(activity);
-                    currentSession.setSourceApplicationInfo(sourceApplicationInfo);
-                    SessionLogger.logActivateApp(
-                            applicationContext,
-                            activityName,
-                            sourceApplicationInfo,
-                            appId);
-                }
-            }
-        };
-        singleThreadExecutor.execute(handleActivityCreate);
-    }
-
-    // Public in order to allow unity sdk to correctly log app events
-    public static void onActivityResumed(final Activity activity) {
-        foregroundActivityCount.incrementAndGet();
-        cancelCurrentTask();
-        final long currentTime = System.currentTimeMillis();
-        Runnable handleActivityResume = new Runnable() {
-            @Override
-            public void run() {
-                Context applicationContext = activity.getApplicationContext();
-                String activityName = Utility.getActivityName(activity);
-
-                if (currentSession == null) {
-                    currentSession = new SessionInfo(currentTime, null);
-                    SessionLogger.logActivateApp(
-                            applicationContext,
-                            activityName,
-                            null,
-                            appId);
-                } else if (currentSession.getSessionLastEventTime() != null) {
-                    long suspendTime =
-                            currentTime - currentSession.getSessionLastEventTime();
-                    if (suspendTime > getSessionTimeoutInSeconds() * 1000) {
-                        // We were suspended for a significant amount of time.
-                        // Count this as a new session and log the old session
-                        SessionLogger.logDeactivateApp(
-                                applicationContext,
-                                activityName,
-                                currentSession,
-                                appId);
-                        SessionLogger.logActivateApp(
-                                applicationContext,
-                                activityName,
-                                null,
-                                appId);
-                        currentSession = new SessionInfo(currentTime, null);
-                    } else if (suspendTime > INTERRUPTION_THRESHOLD_MILLISECONDS) {
-                        currentSession.incrementInterruptionCount();
-                    }
-                }
-
-                currentSession.setSessionLastEventTime(currentTime);
-                currentSession.writeSessionToDisk();
-            }
-        };
-
-        singleThreadExecutor.execute(handleActivityResume);
-    }
-
-    private static void onActivityPaused(Activity activity) {
-        int count = foregroundActivityCount.decrementAndGet();
-        if (count < 0) {
-            // Our ref count can be off if a developer doesn't call activate
-            // app from the Application's onCreate method.
-            foregroundActivityCount.set(0);
-
-            Log.w(TAG, INCORRECT_IMPL_WARNING);
-        }
-
-        cancelCurrentTask();
-        final long currentTime = System.currentTimeMillis();
-
-        // Pull out this information now to avoid holding a reference to the activity
-        final Context applicationContext = activity.getApplicationContext();
-        final String activityName = Utility.getActivityName(activity);
-
-        Runnable handleActivityPaused = new Runnable() {
-            @Override
-            public void run() {
-                if (currentSession == null) {
-                    // This can happen if a developer doesn't call activate
-                    // app from the Application's onCreate method
-                    currentSession = new SessionInfo(currentTime, null);
-                }
-
-                currentSession.setSessionLastEventTime(currentTime);
-                if (foregroundActivityCount.get() <= 0) {
-                    // Schedule check to see if we still have 0 foreground
-                    // activities in our set time. This indicates that the app has
-                    // been backgrounded
-                    Runnable task = new Runnable() {
-                        @Override
-                        public void run() {
-                            if (foregroundActivityCount.get() <= 0) {
-                                SessionLogger.logDeactivateApp(
-                                        applicationContext,
-                                        activityName,
-                                        currentSession,
-                                        appId);
-                                SessionInfo.clearSavedSessionFromDisk();
-                                currentSession = null;
-                            }
-
-                            currentFuture = null;
-                        }
-                    };
-                    currentFuture = singleThreadExecutor.schedule(
-                            task,
-                            getSessionTimeoutInSeconds(),
-                            TimeUnit.SECONDS);
-
-                }
-
-                currentSession.writeSessionToDisk();
-            }
-        };
-        singleThreadExecutor.execute(handleActivityPaused);
-    }
-
-    private static int getSessionTimeoutInSeconds() {
-        Utility.FetchedAppSettings settings =
-                Utility.getAppSettingsWithoutQuery(FacebookSdk.getApplicationId());
-        if (settings == null) {
-            return Constants.getDefaultAppEventsSessionTimeoutInSeconds();
-        }
-
-        return settings.getSessionTimeoutInSeconds();
-    }
-
-    private static void cancelCurrentTask() {
-        if (currentFuture != null) {
-            currentFuture.cancel(false);
-        }
-
-        currentFuture = null;
-    }
-
-    private static void assertIsMainThread() {
-        if (BuildConfig.DEBUG){
-            boolean isMainThread = Looper.myLooper() == Looper.getMainLooper();
-            Assert.assertTrue(
-                    "Activity Lifecycle Callback not running on main thread",
-                    isMainThread);
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/InternalAppEventsLogger.java b/facebook/src/main/java/com/facebook/appevents/internal/InternalAppEventsLogger.java
deleted file mode 100644
index 1ab9d0d67..000000000
--- a/facebook/src/main/java/com/facebook/appevents/internal/InternalAppEventsLogger.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents.internal;
-
-import com.facebook.AccessToken;
-import com.facebook.appevents.AppEventsLogger;
-
-// This class extends the AppEventsLogger to be able to expose creating an app events logger
-// without passing in a context which is required when using AppEventsLogger.newLogger
-class InternalAppEventsLogger extends AppEventsLogger {
-    InternalAppEventsLogger(
-            String activityName,
-            String applicationId,
-            AccessToken accessToken) {
-        super(activityName, applicationId, accessToken);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/SessionInfo.java b/facebook/src/main/java/com/facebook/appevents/internal/SessionInfo.java
deleted file mode 100644
index 7e6b18792..000000000
--- a/facebook/src/main/java/com/facebook/appevents/internal/SessionInfo.java
+++ /dev/null
@@ -1,162 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents.internal;
-
-import android.content.SharedPreferences;
-import android.preference.PreferenceManager;
-
-import com.facebook.FacebookSdk;
-
-import java.util.UUID;
-
-class SessionInfo {
-    private static final String LAST_SESSION_INFO_START_KEY
-            = "com.facebook.appevents.SessionInfo.sessionStartTime";
-    private static final String LAST_SESSION_INFO_END_KEY
-            = "com.facebook.appevents.SessionInfo.sessionEndTime";
-    private static final String INTERRUPTION_COUNT_KEY
-            = "com.facebook.appevents.SessionInfo.interruptionCount";
-    private static final String SESSION_ID_KEY
-            = "com.facebook.appevents.SessionInfo.sessionId";
-
-    private Long sessionStartTime;
-    private Long sessionLastEventTime;
-    private int interruptionCount;
-    private Long diskRestoreTime;
-    private SourceApplicationInfo sourceApplicationInfo;
-    private UUID sessionId;
-
-    public SessionInfo(Long sessionStartTime, Long sessionLastEventTime) {
-        this(sessionStartTime, sessionLastEventTime, UUID.randomUUID());
-    }
-
-    public SessionInfo(Long sessionStartTime, Long sessionLastEventTime, UUID sessionId) {
-        this.sessionStartTime = sessionStartTime;
-        this.sessionLastEventTime = sessionLastEventTime;
-        this.sessionId = sessionId;
-    }
-
-    /**
-     * Performs disk IO. Do not call from main thread
-     * @return
-     */
-    public static SessionInfo getStoredSessionInfo() {
-        SharedPreferences sharedPreferences =
-            PreferenceManager.getDefaultSharedPreferences(
-                    FacebookSdk.getApplicationContext());
-        
-        long startTime = sharedPreferences.getLong(LAST_SESSION_INFO_START_KEY, 0);
-        long endTime = sharedPreferences.getLong(LAST_SESSION_INFO_END_KEY, 0);
-        String sessionIDStr = sharedPreferences.getString(SESSION_ID_KEY, null);
-
-        if (startTime == 0 || endTime == 0 || sessionIDStr == null) {
-            return null;
-        }
-
-        SessionInfo sessionInfo = new SessionInfo(startTime, endTime);
-        sessionInfo.interruptionCount = sharedPreferences.getInt(INTERRUPTION_COUNT_KEY, 0);
-        sessionInfo.sourceApplicationInfo = SourceApplicationInfo.getStoredSourceApplicatioInfo();
-        sessionInfo.diskRestoreTime = System.currentTimeMillis();
-        sessionInfo.sessionId = UUID.fromString(sessionIDStr);
-        return sessionInfo;
-    }
-
-    public static void clearSavedSessionFromDisk() {
-        SharedPreferences sharedPreferences =
-                PreferenceManager.getDefaultSharedPreferences(
-                        FacebookSdk.getApplicationContext());
-        SharedPreferences.Editor editor = sharedPreferences.edit();
-        editor.remove(LAST_SESSION_INFO_START_KEY);
-        editor.remove(LAST_SESSION_INFO_END_KEY);
-        editor.remove(INTERRUPTION_COUNT_KEY);
-        editor.remove(SESSION_ID_KEY);
-        editor.apply();
-
-        SourceApplicationInfo.clearSavedSourceApplicationInfoFromDisk();
-    }
-
-    public Long getSessionStartTime() {
-        return sessionStartTime;
-    }
-
-    public Long getSessionLastEventTime() {
-        return sessionLastEventTime;
-    }
-
-    public void setSessionStartTime(Long sessionStartTime) {
-        this.sessionStartTime = sessionStartTime;
-    }
-
-    public void setSessionLastEventTime(Long essionLastEventTime) {
-        this.sessionLastEventTime = essionLastEventTime;
-    }
-
-    public int getInterruptionCount() {
-        return interruptionCount;
-    }
-
-    public void incrementInterruptionCount() {
-        interruptionCount++;
-    }
-
-    public long getDiskRestoreTime() {
-        return diskRestoreTime == null ? 0 : diskRestoreTime;
-    }
-
-    public UUID getSessionId() {
-        return sessionId;
-    }
-
-    public long getSessionLength() {
-        if (sessionStartTime == null || sessionLastEventTime == null) {
-            return 0;
-        }
-
-        return sessionLastEventTime - sessionStartTime;
-    }
-
-    public SourceApplicationInfo getSourceApplicationInfo() {
-        return sourceApplicationInfo;
-    }
-
-    public void setSourceApplicationInfo(SourceApplicationInfo sourceApplicationInfo) {
-        this.sourceApplicationInfo = sourceApplicationInfo;
-    }
-
-    /**
-     * Performs disk IO. Do not call from main thread
-     */
-    public void writeSessionToDisk() {
-        SharedPreferences sharedPreferences =
-                PreferenceManager.getDefaultSharedPreferences(
-                        FacebookSdk.getApplicationContext());
-        SharedPreferences.Editor editor = sharedPreferences.edit();
-        editor.putLong(LAST_SESSION_INFO_START_KEY, this.sessionStartTime);
-        editor.putLong(LAST_SESSION_INFO_END_KEY, this.sessionLastEventTime);
-        editor.putInt(INTERRUPTION_COUNT_KEY, this.interruptionCount);
-        editor.putString(SESSION_ID_KEY, this.sessionId.toString());
-        editor.apply();
-
-        if (sourceApplicationInfo != null) {
-            sourceApplicationInfo.writeSourceApplicationInfoToDisk();
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/SessionLogger.java b/facebook/src/main/java/com/facebook/appevents/internal/SessionLogger.java
deleted file mode 100644
index 8b88f5527..000000000
--- a/facebook/src/main/java/com/facebook/appevents/internal/SessionLogger.java
+++ /dev/null
@@ -1,150 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents.internal;
-
-import android.app.Activity;
-import android.content.Context;
-import android.os.Bundle;
-import android.text.format.DateUtils;
-
-import com.facebook.FacebookSdk;
-import com.facebook.LoggingBehavior;
-import com.facebook.appevents.AppEventsConstants;
-import com.facebook.appevents.AppEventsLogger;
-import com.facebook.internal.Logger;
-import com.facebook.internal.Utility;
-
-import java.util.Locale;
-
-class SessionLogger {
-    private static final String TAG = SessionLogger.class.getCanonicalName();
-
-    private static final long[] INACTIVE_SECONDS_QUANTA =
-        new long[] {
-            5 * DateUtils.MINUTE_IN_MILLIS,
-            15 * DateUtils.MINUTE_IN_MILLIS,
-            30 * DateUtils.MINUTE_IN_MILLIS,
-            1 * DateUtils.HOUR_IN_MILLIS,
-            6 * DateUtils.HOUR_IN_MILLIS,
-            12 * DateUtils.HOUR_IN_MILLIS,
-            1 * DateUtils.DAY_IN_MILLIS,
-            2 * DateUtils.DAY_IN_MILLIS,
-            3 * DateUtils.DAY_IN_MILLIS,
-            7 * DateUtils.DAY_IN_MILLIS,
-            14 * DateUtils.DAY_IN_MILLIS,
-            21 * DateUtils.DAY_IN_MILLIS,
-            28 * DateUtils.DAY_IN_MILLIS,
-            60 * DateUtils.DAY_IN_MILLIS,
-            90 * DateUtils.DAY_IN_MILLIS,
-            120 * DateUtils.DAY_IN_MILLIS,
-            150 * DateUtils.DAY_IN_MILLIS,
-            180 * DateUtils.DAY_IN_MILLIS,
-            365 * DateUtils.DAY_IN_MILLIS,
-        };
-
-    public static void logActivateApp(
-            Context applicationContext,
-            String activityName,
-            SourceApplicationInfo sourceApplicationInfo,
-            String appId
-    ) {
-        String sourAppInfoStr = sourceApplicationInfo != null
-                ? sourceApplicationInfo.toString()
-                : "Unclassified";
-
-        Bundle eventParams = new Bundle();
-        eventParams.putString(
-                AppEventsConstants.EVENT_PARAM_SOURCE_APPLICATION,
-                sourAppInfoStr);
-        new InternalAppEventsLogger(
-                activityName,
-                appId,
-                null)
-                .logEvent(AppEventsConstants.EVENT_NAME_ACTIVATED_APP, eventParams);
-    }
-
-    public static void logDeactivateApp(
-            Context applicationContext,
-            String activityName,
-            SessionInfo sessionInfo,
-            String appId) {
-
-        Long interruptionDurationMillis =
-                sessionInfo.getDiskRestoreTime() - sessionInfo.getSessionLastEventTime();
-        if (interruptionDurationMillis < 0) {
-            interruptionDurationMillis = 0l;
-            logClockSkewEvent();
-        }
-
-        Long sessionLength = sessionInfo.getSessionLength();
-        if (sessionLength < 0) {
-            logClockSkewEvent();
-            sessionLength = 0l;
-        }
-
-        Bundle eventParams = new Bundle();
-        eventParams.putInt(
-                AppEventsConstants.EVENT_NAME_SESSION_INTERRUPTIONS,
-                sessionInfo.getInterruptionCount());
-        eventParams.putString(
-                AppEventsConstants.EVENT_NAME_TIME_BETWEEN_SESSIONS,
-                String.format(
-                        Locale.ROOT,
-                        "session_quanta_%d",
-                        getQuantaIndex(interruptionDurationMillis)));
-        SourceApplicationInfo sourceApplicationInfo = sessionInfo.getSourceApplicationInfo();
-        String sourAppInfoStr = sourceApplicationInfo != null
-                ? sourceApplicationInfo.toString()
-                : "Unclassified";
-        eventParams.putString(
-                AppEventsConstants.EVENT_PARAM_SOURCE_APPLICATION,
-                sourAppInfoStr);
-
-        eventParams.putLong(Constants.LOG_TIME_APP_EVENT_KEY,
-                sessionInfo.getSessionLastEventTime() / 1000);
-
-        new InternalAppEventsLogger(
-                activityName,
-                appId,
-                null)
-                .logEvent(
-                    AppEventsConstants.EVENT_NAME_DEACTIVATED_APP,
-                    (sessionLength / DateUtils.SECOND_IN_MILLIS),
-                    eventParams);
-    }
-
-    private static void logClockSkewEvent() {
-        Logger.log(LoggingBehavior.APP_EVENTS, TAG, "Clock skew detected");
-    }
-
-    private static int getQuantaIndex(long timeBetweenSessions) {
-        int quantaIndex = 0;
-
-        while (
-                quantaIndex < INACTIVE_SECONDS_QUANTA.length &&
-                        INACTIVE_SECONDS_QUANTA[quantaIndex] < timeBetweenSessions
-                ) {
-            ++quantaIndex;
-        }
-
-        return quantaIndex;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/SourceApplicationInfo.java b/facebook/src/main/java/com/facebook/appevents/internal/SourceApplicationInfo.java
deleted file mode 100644
index 53679e0d4..000000000
--- a/facebook/src/main/java/com/facebook/appevents/internal/SourceApplicationInfo.java
+++ /dev/null
@@ -1,148 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.appevents.internal;
-
-import android.app.Activity;
-import android.content.ComponentName;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.os.Bundle;
-import android.preference.PreferenceManager;
-
-import com.facebook.FacebookSdk;
-
-import bolts.AppLinks;
-
-class SourceApplicationInfo {
-    private static final String SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT =
-            "_fbSourceApplicationHasBeenSet";
-    private static final String CALL_APPLICATION_PACKAGE_KEY
-            = "com.facebook.appevents.SourceApplicationInfo.callingApplicationPackage";
-    private static final String OPENED_BY_APP_LINK_KEY
-            = "com.facebook.appevents.SourceApplicationInfo.openedByApplink";
-
-    private String callingApplicationPackage;
-    private boolean openedByApplink;
-
-    private SourceApplicationInfo(String callingApplicationPackage, boolean openedByApplink) {
-        this.callingApplicationPackage = callingApplicationPackage;
-        this.openedByApplink = openedByApplink;
-    }
-
-    public static SourceApplicationInfo getStoredSourceApplicatioInfo() {
-        SharedPreferences sharedPreferences =
-                PreferenceManager.getDefaultSharedPreferences(
-                        FacebookSdk.getApplicationContext());
-
-        if (!sharedPreferences.contains(CALL_APPLICATION_PACKAGE_KEY)) {
-            return null;
-        }
-
-        String callingApplicationPackage = sharedPreferences.getString(
-                CALL_APPLICATION_PACKAGE_KEY,
-                null);
-        boolean openedByApplink = sharedPreferences.getBoolean(OPENED_BY_APP_LINK_KEY, false);
-
-        return new SourceApplicationInfo(callingApplicationPackage, openedByApplink);
-    }
-
-    public static void clearSavedSourceApplicationInfoFromDisk() {
-        SharedPreferences sharedPreferences =
-                PreferenceManager.getDefaultSharedPreferences(
-                        FacebookSdk.getApplicationContext());
-        SharedPreferences.Editor editor = sharedPreferences.edit();
-        editor.remove(CALL_APPLICATION_PACKAGE_KEY);
-        editor.remove(OPENED_BY_APP_LINK_KEY);
-        editor.apply();
-    }
-
-    public String getCallingApplicationPackage() {
-        return callingApplicationPackage;
-    }
-
-    public boolean isOpenedByApplink() {
-        return openedByApplink;
-    }
-
-    @Override
-    public String toString() {
-        String openType = "Unclassified";
-        if (openedByApplink) {
-            openType = "Applink";
-        }
-
-        if (callingApplicationPackage != null) {
-            return openType + "(" + callingApplicationPackage + ")";
-        }
-        return openType;
-    }
-
-    public void writeSourceApplicationInfoToDisk() {
-        SharedPreferences sharedPreferences =
-                PreferenceManager.getDefaultSharedPreferences(
-                        FacebookSdk.getApplicationContext());
-        SharedPreferences.Editor editor = sharedPreferences.edit();
-        editor.putString(CALL_APPLICATION_PACKAGE_KEY, this.callingApplicationPackage);
-        editor.putBoolean(OPENED_BY_APP_LINK_KEY, this.openedByApplink);
-        editor.apply();
-    }
-
-    public static class Factory {
-        public static SourceApplicationInfo create(Activity activity) {
-            boolean openedByApplink = false;
-
-            ComponentName callingApplication = activity.getCallingActivity();
-            if (callingApplication == null) {
-                return null;
-            }
-
-            String callingApplicationPackage = callingApplication.getPackageName();
-            if (callingApplicationPackage.equals(activity.getPackageName())) {
-                // opened by own app.
-                return null;
-            }
-
-            // Tap icon to open an app will still get the old intent if the activity was opened by
-            // an intent before. Introduce an extra field in the intent to force clear the
-            // sourceApplication.
-            Intent openIntent = activity.getIntent();
-            if (openIntent != null
-                && !openIntent.getBooleanExtra(
-                    SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT,
-                    false)) {
-                openIntent.putExtra(SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT, true);
-                Bundle applinkData = AppLinks.getAppLinkData(openIntent);
-                if (applinkData != null) {
-                    openedByApplink = true;
-                    Bundle applinkReferrerData = applinkData.getBundle("referer_app_link");
-                    if (applinkReferrerData != null) {
-                        String applinkReferrerPackage = applinkReferrerData.getString("package");
-                        callingApplicationPackage = applinkReferrerPackage;
-                    }
-                }
-            }
-
-            // Mark this intent has been used to avoid use this intent again and again.
-            openIntent.putExtra(SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT, true);
-            return new SourceApplicationInfo(callingApplicationPackage, openedByApplink);
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/applinks/AppLinkData.java b/facebook/src/main/java/com/facebook/applinks/AppLinkData.java
deleted file mode 100644
index 13b016860..000000000
--- a/facebook/src/main/java/com/facebook/applinks/AppLinkData.java
+++ /dev/null
@@ -1,488 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.applinks;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Bundle;
-import android.text.TextUtils;
-import android.util.Log;
-
-import com.facebook.FacebookException;
-import com.facebook.FacebookSdk;
-import com.facebook.GraphRequest;
-import com.facebook.GraphResponse;
-import com.facebook.appevents.AppEventsLogger;
-import com.facebook.internal.AttributionIdentifiers;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.Iterator;
-
-/**
- * Class to encapsulate an app link, and provide methods for constructing the data from various
- * sources
- */
-public class AppLinkData {
-
-    /**
-     * Key that should be used to pull out the UTC Unix tap-time from the arguments for this app
-     * link.
-     */
-    public static final String ARGUMENTS_TAPTIME_KEY = "com.facebook.platform.APPLINK_TAP_TIME_UTC";
-    /**
-     * Key that should be used to get the "referer_data" field for this app link.
-     */
-    public static final String ARGUMENTS_REFERER_DATA_KEY = "referer_data";
-
-    /**
-     * Key that should be used to get the "extras" field for this app link.
-     */
-    public static final String ARGUMENTS_EXTRAS_KEY = "extras";
-
-    /**
-     * Key that should be used to pull out the native class that would have been used if the applink
-     * was deferred.
-     */
-    public static final String ARGUMENTS_NATIVE_CLASS_KEY =
-            "com.facebook.platform.APPLINK_NATIVE_CLASS";
-
-    /**
-     * Key that should be used to pull out the native url that would have been used if the applink
-     * was deferred.
-     */
-    public static final String ARGUMENTS_NATIVE_URL = "com.facebook.platform.APPLINK_NATIVE_URL";
-
-    static final String BUNDLE_APPLINK_ARGS_KEY = "com.facebook.platform.APPLINK_ARGS";
-    private static final String BUNDLE_AL_APPLINK_DATA_KEY = "al_applink_data";
-    private static final String APPLINK_BRIDGE_ARGS_KEY = "bridge_args";
-    private static final String APPLINK_METHOD_ARGS_KEY = "method_args";
-    private static final String APPLINK_VERSION_KEY = "version";
-    private static final String BRIDGE_ARGS_METHOD_KEY = "method";
-    private static final String DEFERRED_APP_LINK_EVENT = "DEFERRED_APP_LINK";
-    private static final String DEFERRED_APP_LINK_PATH = "%s/activities";
-
-    private static final String DEFERRED_APP_LINK_ARGS_FIELD = "applink_args";
-    private static final String DEFERRED_APP_LINK_CLASS_FIELD = "applink_class";
-    private static final String DEFERRED_APP_LINK_CLICK_TIME_FIELD = "click_time";
-    private static final String DEFERRED_APP_LINK_URL_FIELD = "applink_url";
-
-    private static final String METHOD_ARGS_TARGET_URL_KEY = "target_url";
-    private static final String METHOD_ARGS_REF_KEY = "ref";
-    private static final String REFERER_DATA_REF_KEY = "fb_ref";
-    private static final String EXTRAS_DEEPLINK_CONTEXT_KEY = "deeplink_context";
-    private static final String PROMOTION_CODE_KEY = "promo_code";
-    private static final String TAG = AppLinkData.class.getCanonicalName();
-
-    private String ref;
-    private Uri targetUri;
-    private JSONObject arguments;
-    private Bundle argumentBundle;
-    private String promotionCode;
-
-    /**
-     * Asynchronously fetches app link information that might have been stored for use after
-     * installation of the app
-     *
-     * @param context           The context
-     * @param completionHandler CompletionHandler to be notified with the AppLinkData object or null
-     *                          if none is available.  Must not be null.
-     */
-    public static void fetchDeferredAppLinkData(
-            Context context,
-            CompletionHandler completionHandler) {
-        fetchDeferredAppLinkData(context, null, completionHandler);
-    }
-
-    /**
-     * Asynchronously fetches app link information that might have been stored for use after
-     * installation of the app
-     *
-     * @param context           The context
-     * @param applicationId     Facebook application Id. If null, it is taken from the manifest
-     * @param completionHandler CompletionHandler to be notified with the AppLinkData object or null
-     *                          if none is available.  Must not be null.
-     */
-    public static void fetchDeferredAppLinkData(
-            Context context,
-            String applicationId,
-            final CompletionHandler completionHandler) {
-        Validate.notNull(context, "context");
-        Validate.notNull(completionHandler, "completionHandler");
-
-        if (applicationId == null) {
-            applicationId = Utility.getMetadataApplicationId(context);
-        }
-
-        Validate.notNull(applicationId, "applicationId");
-
-        final Context applicationContext = context.getApplicationContext();
-        final String applicationIdCopy = applicationId;
-        FacebookSdk.getExecutor().execute(new Runnable() {
-            @Override
-            public void run() {
-                fetchDeferredAppLinkFromServer(
-                        applicationContext, applicationIdCopy, completionHandler);
-            }
-        });
-    }
-
-    private static void fetchDeferredAppLinkFromServer(
-            Context context,
-            String applicationId,
-            final CompletionHandler completionHandler) {
-
-        JSONObject deferredApplinkParams = new JSONObject();
-        try {
-            deferredApplinkParams.put("event", DEFERRED_APP_LINK_EVENT);
-            Utility.setAppEventAttributionParameters(deferredApplinkParams,
-                    AttributionIdentifiers.getAttributionIdentifiers(context),
-                    AppEventsLogger.getAnonymousAppDeviceGUID(context),
-                    FacebookSdk.getLimitEventAndDataUsage(context));
-            deferredApplinkParams.put("application_package_name", context.getPackageName());
-        } catch (JSONException e) {
-            throw new FacebookException("An error occurred while preparing deferred app link", e);
-        }
-
-        String deferredApplinkUrlPath = String.format(DEFERRED_APP_LINK_PATH, applicationId);
-        AppLinkData appLinkData = null;
-
-        try {
-            GraphRequest deferredApplinkRequest = GraphRequest.newPostRequest(
-                    null, deferredApplinkUrlPath, deferredApplinkParams, null);
-            GraphResponse deferredApplinkResponse = deferredApplinkRequest.executeAndWait();
-            JSONObject jsonResponse = deferredApplinkResponse.getJSONObject();
-            if (jsonResponse != null) {
-                final String appLinkArgsJsonString =
-                        jsonResponse.optString(DEFERRED_APP_LINK_ARGS_FIELD);
-                final long tapTimeUtc =
-                        jsonResponse.optLong(DEFERRED_APP_LINK_CLICK_TIME_FIELD, -1);
-                final String appLinkClassName =
-                        jsonResponse.optString(DEFERRED_APP_LINK_CLASS_FIELD);
-                final String appLinkUrl = jsonResponse.optString(DEFERRED_APP_LINK_URL_FIELD);
-
-                if (!TextUtils.isEmpty(appLinkArgsJsonString)) {
-                    appLinkData = createFromJson(appLinkArgsJsonString);
-
-                    if (tapTimeUtc != -1) {
-                        try {
-                            if (appLinkData.arguments != null) {
-                                appLinkData.arguments.put(ARGUMENTS_TAPTIME_KEY, tapTimeUtc);
-                            }
-                            if (appLinkData.argumentBundle != null) {
-                                appLinkData.argumentBundle.putString(
-                                        ARGUMENTS_TAPTIME_KEY, Long.toString(tapTimeUtc));
-                            }
-                        } catch (JSONException e) {
-                            Log.d(TAG, "Unable to put tap time in AppLinkData.arguments");
-                        }
-                    }
-
-                    if (appLinkClassName != null) {
-                        try {
-                            if (appLinkData.arguments != null) {
-                                appLinkData.arguments.put(
-                                        ARGUMENTS_NATIVE_CLASS_KEY, appLinkClassName);
-                            }
-                            if (appLinkData.argumentBundle != null) {
-                                appLinkData.argumentBundle.putString(
-                                        ARGUMENTS_NATIVE_CLASS_KEY, appLinkClassName);
-                            }
-                        } catch (JSONException e) {
-                            Log.d(TAG, "Unable to put tap time in AppLinkData.arguments");
-                        }
-                    }
-
-                    if (appLinkUrl != null) {
-                        try {
-                            if (appLinkData.arguments != null) {
-                                appLinkData.arguments.put(ARGUMENTS_NATIVE_URL, appLinkUrl);
-                            }
-                            if (appLinkData.argumentBundle != null) {
-                                appLinkData.argumentBundle.putString(
-                                        ARGUMENTS_NATIVE_URL, appLinkUrl);
-                            }
-                        } catch (JSONException e) {
-                            Log.d(TAG, "Unable to put tap time in AppLinkData.arguments");
-                        }
-                    }
-                }
-            }
-        } catch (Exception e) {
-            Utility.logd(TAG, "Unable to fetch deferred applink from server");
-        }
-
-        completionHandler.onDeferredAppLinkDataFetched(appLinkData);
-    }
-
-    /**
-     * Parses out any app link data from the Intent of the Activity passed in.
-     * @param activity Activity that was started because of an app link
-     * @return AppLinkData if found. null if not.
-     */
-    public static AppLinkData createFromActivity(Activity activity) {
-        Validate.notNull(activity, "activity");
-        Intent intent = activity.getIntent();
-        if (intent == null) {
-            return null;
-        }
-
-        AppLinkData appLinkData = createFromAlApplinkData(intent);
-        if (appLinkData == null) {
-            String appLinkArgsJsonString = intent.getStringExtra(BUNDLE_APPLINK_ARGS_KEY);
-            appLinkData = createFromJson(appLinkArgsJsonString);
-        }
-        if (appLinkData == null) {
-            // Try regular app linking
-            appLinkData = createFromUri(intent.getData());
-        }
-
-        return appLinkData;
-    }
-
-    /**
-     * Parses out any app link data from the Intent passed in.
-     * @param intent Intent from the Activity that started because of an app link
-     * @return AppLinkData if found. null if not.
-     */
-    public static AppLinkData createFromAlApplinkData(Intent intent) {
-        if (intent == null) {
-            return null;
-        }
-
-        Bundle applinks = intent.getBundleExtra(BUNDLE_AL_APPLINK_DATA_KEY);
-        if (applinks == null) {
-            return null;
-        }
-
-        AppLinkData appLinkData = new AppLinkData();
-        appLinkData.targetUri = intent.getData();
-        if (appLinkData.targetUri == null) {
-            String targetUriString = applinks.getString(METHOD_ARGS_TARGET_URL_KEY);
-            if (targetUriString != null) {
-                appLinkData.targetUri = Uri.parse(targetUriString);
-            }
-        }
-        appLinkData.argumentBundle = applinks;
-        appLinkData.arguments = null;
-        Bundle refererData = applinks.getBundle(ARGUMENTS_REFERER_DATA_KEY);
-        if (refererData != null) {
-            appLinkData.ref = refererData.getString(REFERER_DATA_REF_KEY);
-        }
-
-        Bundle extras = applinks.getBundle(ARGUMENTS_EXTRAS_KEY);
-        if (extras != null) {
-            String deeplinkContext = extras.getString(EXTRAS_DEEPLINK_CONTEXT_KEY);
-            if (deeplinkContext != null) {
-                try {
-                    JSONObject dlContextJson = new JSONObject(deeplinkContext);
-                    if (dlContextJson.has(PROMOTION_CODE_KEY)) {
-                        appLinkData.promotionCode = dlContextJson.getString(PROMOTION_CODE_KEY);
-                    }
-                } catch (JSONException e) {
-                    Log.d(TAG, "Unable to parse deeplink_context JSON", e);
-                }
-            }
-        }
-
-        return appLinkData;
-    }
-
-    private static AppLinkData createFromJson(String jsonString) {
-        if (jsonString  == null) {
-            return null;
-        }
-
-        try {
-            // Any missing or malformed data will result in a JSONException
-            JSONObject appLinkArgsJson = new JSONObject(jsonString);
-            String version = appLinkArgsJson.getString(APPLINK_VERSION_KEY);
-
-            JSONObject bridgeArgs = appLinkArgsJson.getJSONObject(APPLINK_BRIDGE_ARGS_KEY);
-            String method = bridgeArgs.getString(BRIDGE_ARGS_METHOD_KEY);
-            if (method.equals("applink") && version.equals("2")) {
-                // We have a new deep link
-                AppLinkData appLinkData = new AppLinkData();
-
-                appLinkData.arguments = appLinkArgsJson.getJSONObject(APPLINK_METHOD_ARGS_KEY);
-                // first look for the "ref" key in the top level args
-                if (appLinkData.arguments.has(METHOD_ARGS_REF_KEY)) {
-                    appLinkData.ref = appLinkData.arguments.getString(METHOD_ARGS_REF_KEY);
-                } else if (appLinkData.arguments.has(ARGUMENTS_REFERER_DATA_KEY)) {
-                    // if it's not in the top level args, it could be in the "referer_data" blob
-                    JSONObject refererData = appLinkData.arguments.getJSONObject(
-                            ARGUMENTS_REFERER_DATA_KEY);
-                    if (refererData.has(REFERER_DATA_REF_KEY)) {
-                        appLinkData.ref = refererData.getString(REFERER_DATA_REF_KEY);
-                    }
-                }
-
-                if (appLinkData.arguments.has(METHOD_ARGS_TARGET_URL_KEY)) {
-                    appLinkData.targetUri = Uri.parse(
-                            appLinkData.arguments.getString(METHOD_ARGS_TARGET_URL_KEY));
-                }
-
-                if (appLinkData.arguments.has(ARGUMENTS_EXTRAS_KEY)) {
-                    JSONObject extrasData =
-                            appLinkData.arguments.getJSONObject(ARGUMENTS_EXTRAS_KEY);
-                    if (extrasData.has(EXTRAS_DEEPLINK_CONTEXT_KEY)) {
-                        JSONObject deeplink_context =
-                                extrasData.getJSONObject(EXTRAS_DEEPLINK_CONTEXT_KEY);
-                        if (deeplink_context.has(PROMOTION_CODE_KEY)) {
-                            appLinkData.promotionCode =
-                                    deeplink_context.getString(PROMOTION_CODE_KEY);
-                        }
-                    }
-                }
-
-                appLinkData.argumentBundle = toBundle(appLinkData.arguments);
-
-                return appLinkData;
-            }
-        } catch (JSONException e) {
-            Log.d(TAG, "Unable to parse AppLink JSON", e);
-        } catch (FacebookException e) {
-            Log.d(TAG, "Unable to parse AppLink JSON", e);
-        }
-
-        return null;
-    }
-
-    private static AppLinkData createFromUri(Uri appLinkDataUri) {
-        if (appLinkDataUri == null) {
-            return null;
-        }
-
-        AppLinkData appLinkData = new AppLinkData();
-        appLinkData.targetUri = appLinkDataUri;
-        return appLinkData;
-    }
-
-    private static Bundle toBundle(JSONObject node) throws JSONException {
-        Bundle bundle = new Bundle();
-        @SuppressWarnings("unchecked")
-        Iterator<String> fields = node.keys();
-        while (fields.hasNext()) {
-            String key = fields.next();
-            Object value;
-            value = node.get(key);
-
-            if (value instanceof JSONObject) {
-                bundle.putBundle(key, toBundle((JSONObject) value));
-            } else if (value instanceof JSONArray) {
-                JSONArray valueArr = (JSONArray) value;
-                if (valueArr.length() == 0) {
-                    bundle.putStringArray(key, new String[0]);
-                } else {
-                    Object firstNode = valueArr.get(0);
-                    if (firstNode instanceof JSONObject) {
-                        Bundle[] bundles = new Bundle[valueArr.length()];
-                        for (int i = 0; i < valueArr.length(); i++) {
-                            bundles[i] = toBundle(valueArr.getJSONObject(i));
-                        }
-                        bundle.putParcelableArray(key, bundles);
-                    } else if (firstNode instanceof JSONArray) {
-                        // we don't support nested arrays
-                        throw new FacebookException("Nested arrays are not supported.");
-                    } else { // just use the string value
-                        String[] arrValues = new String[valueArr.length()];
-                        for (int i = 0; i < valueArr.length(); i++) {
-                            arrValues[i] = valueArr.get(i).toString();
-                        }
-                        bundle.putStringArray(key, arrValues);
-                    }
-                }
-            } else {
-                bundle.putString(key, value.toString());
-            }
-        }
-        return bundle;
-    }
-
-
-    private AppLinkData() {
-    }
-
-    /**
-     * Returns the target uri for this App Link.
-     * @return target uri
-     */
-    public Uri getTargetUri() {
-        return targetUri;
-    }
-
-    /**
-     * Returns the ref for this App Link.
-     * @return ref
-     */
-    public String getRef() {
-        return ref;
-    }
-
-    /**
-     * Returns the promotion code for this App Link.
-     * @return promotion code
-     */
-    public String getPromotionCode() {
-        return promotionCode;
-    }
-
-    /**
-     * The full set of arguments for this app link. Properties like target uri & ref are typically
-     * picked out of this set of arguments.
-     * @return App link related arguments as a bundle.
-     */
-    public Bundle getArgumentBundle() {
-        return argumentBundle;
-    }
-
-    /**
-     * The referer data associated with the app link. This will contain Facebook specific
-     * information like fb_access_token, fb_expires_in, and fb_ref.
-     *
-     * @return the referer data.
-     */
-    public Bundle getRefererData() {
-        if (argumentBundle != null) {
-            return argumentBundle.getBundle(ARGUMENTS_REFERER_DATA_KEY);
-        }
-        return null;
-    }
-
-    /**
-     * Interface to asynchronously receive AppLinkData after it has been fetched.
-     */
-    public interface CompletionHandler {
-        /**
-         * This method is called when deferred app link data has been fetched. If no app link data
-         * was found, this method is called with null
-         *
-         * @param appLinkData The app link data that was fetched. Null if none was found.
-         */
-        void onDeferredAppLinkDataFetched(AppLinkData appLinkData);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/applinks/FacebookAppLinkResolver.java b/facebook/src/main/java/com/facebook/applinks/FacebookAppLinkResolver.java
deleted file mode 100644
index 807d92f1f..000000000
--- a/facebook/src/main/java/com/facebook/applinks/FacebookAppLinkResolver.java
+++ /dev/null
@@ -1,262 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.applinks;
-
-import android.net.Uri;
-import android.os.Bundle;
-
-import com.facebook.AccessToken;
-import com.facebook.FacebookRequestError;
-import com.facebook.GraphRequest;
-import com.facebook.GraphResponse;
-
-import bolts.AppLink;
-import bolts.AppLinkResolver;
-import bolts.Continuation;
-import bolts.Task;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.*;
-
-/**
- * Provides an implementation for the {@link AppLinkResolver AppLinkResolver} interface that uses
- * the Facebook App Link index to resolve App Links given a URL. It also provides an additional
- * helper method that can resolve multiple App Links in a single call.
- */
-public class FacebookAppLinkResolver implements AppLinkResolver {
-
-    private static final String APP_LINK_KEY = "app_links";
-    private static final String APP_LINK_ANDROID_TARGET_KEY = "android";
-    private static final String APP_LINK_WEB_TARGET_KEY = "web";
-    private static final String APP_LINK_TARGET_PACKAGE_KEY = "package";
-    private static final String APP_LINK_TARGET_CLASS_KEY = "class";
-    private static final String APP_LINK_TARGET_APP_NAME_KEY = "app_name";
-    private static final String APP_LINK_TARGET_URL_KEY = "url";
-    private static final String APP_LINK_TARGET_SHOULD_FALLBACK_KEY = "should_fallback";
-
-    private final HashMap<Uri, AppLink> cachedAppLinks = new HashMap<Uri, AppLink>();
-
-    /**
-     * Asynchronously resolves App Link data for the passed in Uri
-     *
-     * @param uri Uri to be resolved into an App Link
-     * @return A Task that, when successful, will return an AppLink for the passed in Uri. This may
-     * be null if no App Link data was found for this Uri. In the case of general server errors, the
-     * task will be completed with the corresponding error.
-     */
-    public Task<AppLink> getAppLinkFromUrlInBackground(final Uri uri) {
-        ArrayList<Uri> uris = new ArrayList<Uri>();
-        uris.add(uri);
-
-        Task<Map<Uri, AppLink>> resolveTask = getAppLinkFromUrlsInBackground(uris);
-
-        return resolveTask.onSuccess(new Continuation<Map<Uri, AppLink>, AppLink>() {
-            @Override
-            public AppLink then(Task<Map<Uri, AppLink>> resolveUrisTask) throws Exception {
-                return resolveUrisTask.getResult().get(uri);
-            }
-        });
-    }
-
-    /**
-     * Asynchronously resolves App Link data for multiple URLs
-     *
-     * @param uris A list of Uri objects to resolve into App Links
-     * @return A Task that, when successful, will return a Map of Uri->AppLink for each Uri that was
-     * successfully resolved into an App Link. Uris that could not be resolved into App Links will
-     * not be present in the Map. In the case of general server errors, the task will be completed
-     * with the corresponding error.
-     */
-    public Task<Map<Uri, AppLink>> getAppLinkFromUrlsInBackground(List<Uri> uris) {
-        final Map<Uri, AppLink> appLinkResults = new HashMap<Uri, AppLink>();
-        final HashSet<Uri> urisToRequest = new HashSet<Uri>();
-        StringBuilder graphRequestFields = new StringBuilder();
-
-        for (Uri uri : uris) {
-            AppLink appLink = null;
-            synchronized (cachedAppLinks) {
-                appLink = cachedAppLinks.get(uri);
-            }
-
-            if (appLink != null) {
-                appLinkResults.put(uri, appLink);
-            } else {
-                if (!urisToRequest.isEmpty()) {
-                    graphRequestFields.append(',');
-                }
-                graphRequestFields.append(uri.toString());
-                urisToRequest.add(uri);
-            }
-        }
-
-        if (urisToRequest.isEmpty()) {
-            return Task.forResult(appLinkResults);
-        }
-
-        final Task<Map<Uri, AppLink>>.TaskCompletionSource taskCompletionSource = Task.create();
-
-        Bundle appLinkRequestParameters = new Bundle();
-
-        appLinkRequestParameters.putString("ids", graphRequestFields.toString());
-        appLinkRequestParameters.putString(
-                "fields",
-                String.format(
-                        "%s.fields(%s,%s)",
-                        APP_LINK_KEY,
-                        APP_LINK_ANDROID_TARGET_KEY,
-                        APP_LINK_WEB_TARGET_KEY));
-        GraphRequest appLinkRequest = new GraphRequest(
-                // We will use the current access token if we have one else we will use the client
-                // token
-                AccessToken.getCurrentAccessToken(), /* Access Token */
-                "", /* Graph path */
-                appLinkRequestParameters, /* Query parameters */
-                null, /* HttpMethod */
-                new GraphRequest.Callback() { /* Callback */
-                    @Override
-                    public void onCompleted(GraphResponse response) {
-                        FacebookRequestError error = response.getError();
-                        if (error != null) {
-                            taskCompletionSource.setError(error.getException());
-                            return;
-                        }
-
-                        JSONObject responseJson = response.getJSONObject();
-                        if (responseJson == null) {
-                            taskCompletionSource.setResult(appLinkResults);
-                            return;
-                        }
-
-                        for (Uri uri : urisToRequest) {
-                            String uriString = uri.toString();
-                            if (!responseJson.has(uriString)) {
-                                continue;
-                            }
-
-                            JSONObject urlData = null;
-                            try {
-                                urlData = responseJson.getJSONObject(uri.toString());
-                                JSONObject appLinkData = urlData.getJSONObject(APP_LINK_KEY);
-
-                                JSONArray rawTargets =
-                                        appLinkData.getJSONArray(APP_LINK_ANDROID_TARGET_KEY);
-
-                                int targetsCount = rawTargets.length();
-                                List<AppLink.Target> targets = new ArrayList<AppLink.Target>(targetsCount);
-
-                                for (int i = 0; i < targetsCount; i++) {
-                                    AppLink.Target target =
-                                            getAndroidTargetFromJson(rawTargets.getJSONObject(i));
-                                    if (target != null) {
-                                        targets.add(target);
-                                    }
-                                }
-
-                                Uri webFallbackUrl = getWebFallbackUriFromJson(uri, appLinkData);
-                                AppLink appLink = new AppLink(uri, targets, webFallbackUrl);
-
-                                appLinkResults.put(uri, appLink);
-                                synchronized (cachedAppLinks) {
-                                    cachedAppLinks.put(uri, appLink);
-                                }
-                            } catch (JSONException e) {
-                                // The data for this uri was missing or badly formed.
-                                continue;
-                            }
-                        }
-
-                        taskCompletionSource.setResult(appLinkResults);
-                    }
-                });
-
-        appLinkRequest.executeAsync();
-
-        return taskCompletionSource.getTask();
-    }
-
-    private static AppLink.Target getAndroidTargetFromJson(JSONObject targetJson) {
-        String packageName = tryGetStringFromJson(targetJson, APP_LINK_TARGET_PACKAGE_KEY, null);
-        if (packageName == null) {
-            // Package name is mandatory for each Android target
-            return null;
-        }
-        String className = tryGetStringFromJson(targetJson, APP_LINK_TARGET_CLASS_KEY, null);
-        String appName = tryGetStringFromJson(targetJson, APP_LINK_TARGET_APP_NAME_KEY, null);
-        String targetUrlString = tryGetStringFromJson(targetJson, APP_LINK_TARGET_URL_KEY, null);
-        Uri targetUri = null;
-        if (targetUrlString != null) {
-            targetUri = Uri.parse(targetUrlString);
-        }
-
-        return new AppLink.Target(packageName, className, targetUri, appName);
-    }
-
-    private static Uri getWebFallbackUriFromJson(Uri sourceUrl, JSONObject urlData) {
-        // Try and get a web target. This is best effort. Any failures results in null being
-        // returned.
-        try {
-            JSONObject webTarget = urlData.getJSONObject(APP_LINK_WEB_TARGET_KEY);
-            boolean shouldFallback = tryGetBooleanFromJson(
-                    webTarget, APP_LINK_TARGET_SHOULD_FALLBACK_KEY, true);
-            if (!shouldFallback) {
-                // Don't use a fallback url
-                return null;
-            }
-
-            String webTargetUrlString =
-                    tryGetStringFromJson(webTarget, APP_LINK_TARGET_URL_KEY, null);
-            Uri webUri = null;
-            if (webTargetUrlString != null) {
-                webUri = Uri.parse(webTargetUrlString);
-            }
-
-            // If we weren't able to parse a url from the web target, use the source url
-            return webUri != null ? webUri: sourceUrl;
-        } catch (JSONException e) {
-            // If we were missing a web target, just use the source as the web url
-            return sourceUrl;
-        }
-    }
-
-    private static String tryGetStringFromJson(
-            JSONObject json,
-            String propertyName,
-            String defaultValue) {
-        try {
-            return json.getString(propertyName);
-        } catch(JSONException e) {
-            return defaultValue;
-        }
-    }
-
-    private static boolean tryGetBooleanFromJson(
-            JSONObject json,
-            String propertyName,
-            boolean defaultValue) {
-        try {
-            return json.getBoolean(propertyName);
-        } catch (JSONException e) {
-            return defaultValue;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/internal/Utility.java b/facebook/src/main/java/com/facebook/internal/Utility.java
index 074ca876e..8fe26c930 100644
--- a/facebook/src/main/java/com/facebook/internal/Utility.java
+++ b/facebook/src/main/java/com/facebook/internal/Utility.java
@@ -47,7 +47,6 @@
 import com.facebook.GraphRequest;
 import com.facebook.GraphResponse;
 import com.facebook.HttpMethod;
-import com.facebook.appevents.AppEventsConstants;
 import com.facebook.appevents.internal.Constants;
 
 import org.json.JSONArray;
diff --git a/facebook/src/main/java/com/facebook/login/LoginClient.java b/facebook/src/main/java/com/facebook/login/LoginClient.java
index d7ecf3a55..c2ad05340 100644
--- a/facebook/src/main/java/com/facebook/login/LoginClient.java
+++ b/facebook/src/main/java/com/facebook/login/LoginClient.java
@@ -24,8 +24,6 @@
 import android.app.Activity;
 import android.content.Intent;
 import android.content.pm.PackageManager;
-import android.net.Uri;
-import android.os.Bundle;
 import android.os.Parcel;
 import android.os.Parcelable;
 import android.support.v4.app.Fragment;
@@ -33,17 +31,13 @@
 import android.text.TextUtils;
 
 import com.facebook.AccessToken;
-import com.facebook.GraphRequest;
-import com.facebook.GraphResponse;
-import com.facebook.appevents.AppEventsConstants;
 import com.facebook.FacebookException;
-import com.facebook.HttpMethod;
 import com.facebook.R;
+import com.facebook.appevents.AppEventsConstants;
 import com.facebook.internal.CallbackManagerImpl;
 import com.facebook.internal.Utility;
 import com.facebook.internal.Validate;
 
-import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
@@ -51,7 +45,6 @@
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.HashSet;
-import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
diff --git a/facebook/src/main/java/com/facebook/login/LoginManager.java b/facebook/src/main/java/com/facebook/login/LoginManager.java
index 688549dff..dbdcd12f9 100644
--- a/facebook/src/main/java/com/facebook/login/LoginManager.java
+++ b/facebook/src/main/java/com/facebook/login/LoginManager.java
@@ -41,7 +41,6 @@
 import com.facebook.internal.CallbackManagerImpl;
 import com.facebook.internal.FragmentWrapper;
 import com.facebook.internal.Validate;
-import com.facebook.appevents.AppEventsConstants;
 
 import java.util.Collection;
 import java.util.Collections;
@@ -477,20 +476,6 @@ private void logCompleteLogin(
                     LoginLogger.EVENT_NAME_LOGIN_COMPLETE,
                     "Unexpected call to logCompleteLogin with null pendingAuthorizationRequest."
             );
-        } else {
-            HashMap<String, String> pendingLoggingExtras = new HashMap<>();
-            pendingLoggingExtras.put(
-                    LoginLogger.EVENT_EXTRAS_TRY_LOGIN_ACTIVITY,
-                    wasLoginActivityTried ?
-                            AppEventsConstants.EVENT_PARAM_VALUE_YES :
-                            AppEventsConstants.EVENT_PARAM_VALUE_NO
-            );
-            loginLogger.logCompleteLogin(
-                    request.getAuthId(),
-                    pendingLoggingExtras,
-                    result,
-                    resultExtras,
-                    exception);
         }
     }
 
diff --git a/facebook/src/main/java/com/facebook/messenger/MessengerThreadParams.java b/facebook/src/main/java/com/facebook/messenger/MessengerThreadParams.java
deleted file mode 100644
index dcc1ff52a..000000000
--- a/facebook/src/main/java/com/facebook/messenger/MessengerThreadParams.java
+++ /dev/null
@@ -1,86 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.messenger;
-
-import java.util.List;
-
-/**
- * Parameters describing the Intent that Messenger sent to the app. Returned by
- * {@link MessengerUtils#getMessengerThreadParamsForIntent}.
- */
-public class MessengerThreadParams {
-
-  /**
-   * The origin of the flow that user originated from.
-   */
-  public enum Origin {
-    /**
-     * The user clicked on a reply link in Messenger to a particular message.
-     */
-    REPLY_FLOW,
-
-    /**
-     * The user clicked an app shortcut in Messenger.
-     */
-    COMPOSE_FLOW,
-
-    /**
-     * The user came from a flow that was not known at the time this code was written.
-     */
-    UNKNOWN
-  }
-
-  /**
-   * The origin of the flow that the user originated from.
-   */
-  public final Origin origin;
-
-  /**
-   * A token representing the thread the user originated from. This is an opaque value that is not
-   * meant for the app to consume. It exists to complete the flow back to Messenger.
-   */
-  public final String threadToken;
-
-  /**
-   * Metadata that originated from content the app originally set when it sent the request to
-   * Messenger.
-   */
-  public final String metadata;
-
-  /**
-   * The list of participants in the thread represented as App-scoped User IDs. This may not
-   * always be set and will only ever be set for apps that include Facebook login. When set, it
-   * will only include the participants in the thread that have logged into the app. See
-   * <a href="https://developers.facebook.com/docs/apps/upgrading">docs</a> for more info.
-   */
-  public final List<String> participants;
-
-  public MessengerThreadParams(
-      Origin origin,
-      String threadToken,
-      String metadata,
-      List<String> participants) {
-    this.threadToken = threadToken;
-    this.metadata = metadata;
-    this.participants = participants;
-    this.origin = origin;
-  }
-}
diff --git a/facebook/src/main/java/com/facebook/messenger/MessengerUtils.java b/facebook/src/main/java/com/facebook/messenger/MessengerUtils.java
deleted file mode 100644
index af847c14d..000000000
--- a/facebook/src/main/java/com/facebook/messenger/MessengerUtils.java
+++ /dev/null
@@ -1,296 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.messenger;
-
-import android.app.Activity;
-import android.content.ActivityNotFoundException;
-import android.content.ContentResolver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.database.Cursor;
-import android.net.Uri;
-import android.os.Bundle;
-
-import com.facebook.FacebookSdk;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-
-import bolts.AppLinks;
-
-/**
- * Utilities for Messenger Content Platform.
- * <p>
- *   Applications should specify the app id in their manifest or call
- *   {@link com.facebook.FacebookSdk#setApplicationId(String)} } in
- *   their application startup path. For specifying in the manifest, add a meta tag in your
- *   &lt;application&gt; tag.
- *
- *   <pre>
- *    &lt;meta-data android:name="com.facebook.sdk.ApplicationId" android:value="YOUR_APP_ID"/&gt;
- *   </pre>
- *
- * </p>
- *
- * <p>
- *   When sharing to Messenger, apps should call the {@link #shareToMessenger} method. For example,
- *
- *   <pre>
- *     ShareToMessengerParams params = ShareToMessengerParams.newBuilder(uri, "image/*")
- *         .setMetaData(metaData)
- *         .build();
- *     MessengerUtils.shareToMessenger(this, REQUEST_CODE_SHARE_TO_MESSENGER, params);
- *   </pre>
- *
- *   To handle receiving a composer shortcut or reply intent from Messenger, apps should
- *   put the following intent filter in their manifest for the activity that receives the intent:
- *
- *   <pre>
- *           &lt;intent-filter&gt;
- *             &lt;action android:name="android.intent.action.PICK" /&gt;
- *             &lt;category android:name="android.intent.category.DEFAULT"/&gt;
- *             &lt;category android:name="com.facebook.orca.category.PLATFORM_THREAD_20150311"/&gt;
- *           &lt;/intent-filter&gt;
- *   </pre>
- *
- *   When handling the intent, then call {@link #getMessengerThreadParamsForIntent} to receive
- *   the parameters for messenger. When the user has clicked the Send button to send the content
- *   to Messenger, then call {@link #finishShareToMessenger} to return the data back to Messenger.
- * </p>
- */
-public class MessengerUtils {
-
-  private static final String TAG = "MessengerUtils";
-
-  public static final String PACKAGE_NAME = "com.facebook.orca";
-
-  public static final String EXTRA_PROTOCOL_VERSION = "com.facebook.orca.extra.PROTOCOL_VERSION";
-  public static final String EXTRA_APP_ID = "com.facebook.orca.extra.APPLICATION_ID";
-  public static final String EXTRA_REPLY_TOKEN_KEY = "com.facebook.orca.extra.REPLY_TOKEN";
-  public static final String EXTRA_THREAD_TOKEN_KEY = "com.facebook.orca.extra.THREAD_TOKEN";
-  public static final String EXTRA_METADATA = "com.facebook.orca.extra.METADATA";
-  public static final String EXTRA_EXTERNAL_URI = "com.facebook.orca.extra.EXTERNAL_URI";
-  public static final String EXTRA_PARTICIPANTS = "com.facebook.orca.extra.PARTICIPANTS";
-  public static final String EXTRA_IS_REPLY = "com.facebook.orca.extra.IS_REPLY";
-  public static final String EXTRA_IS_COMPOSE = "com.facebook.orca.extra.IS_COMPOSE";
-  public static final int PROTOCOL_VERSION_20150314 = 20150314;
-
-  public static final String ORCA_THREAD_CATEGORY_20150314 =
-      "com.facebook.orca.category.PLATFORM_THREAD_20150314";
-
-  /**
-   * Starts an intent to share a piece of media on Messenger using the messenger content platform.
-   *
-   * @param activity the activity sharing the content
-   * @param requestCode a unique request code for {@link Activity#startActivityForResult}
-   * @param shareToMessengerParams parameters for what to share
-   */
-  public static void shareToMessenger(
-      Activity activity,
-      int requestCode,
-      ShareToMessengerParams shareToMessengerParams) {
-    if (!MessengerUtils.hasMessengerInstalled(activity)) {
-      MessengerUtils.openMessengerInPlayStore(activity);
-      return;
-    }
-
-    Set<Integer> allAvailableVersions = getAllAvailableProtocolVersions(activity);
-    if (allAvailableVersions.contains(PROTOCOL_VERSION_20150314)) {
-      shareToMessenger20150314(activity, requestCode, shareToMessengerParams);
-    } else {
-      // TODO -- should we show a upgrade dialog?
-      MessengerUtils.openMessengerInPlayStore(activity);
-    }
-  }
-
-  private static void shareToMessenger20150314(
-      Activity activity,
-      int requestCode,
-      ShareToMessengerParams shareToMessengerParams) {
-    try {
-      Intent shareIntent = new Intent(Intent.ACTION_SEND);
-      shareIntent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
-      shareIntent.setPackage(PACKAGE_NAME);
-      shareIntent.putExtra(Intent.EXTRA_STREAM, shareToMessengerParams.uri);
-      shareIntent.setType(shareToMessengerParams.mimeType);
-      String appId = FacebookSdk.getApplicationId();
-      if (appId != null) {
-        shareIntent.putExtra(EXTRA_PROTOCOL_VERSION, PROTOCOL_VERSION_20150314);
-        shareIntent.putExtra(EXTRA_APP_ID, appId);
-        shareIntent.putExtra(EXTRA_METADATA, shareToMessengerParams.metaData);
-        shareIntent.putExtra(EXTRA_EXTERNAL_URI, shareToMessengerParams.externalUri);
-      }
-
-      activity.startActivityForResult(shareIntent, requestCode);
-    } catch (ActivityNotFoundException e) {
-      Intent openMessenger = activity.getPackageManager().getLaunchIntentForPackage(PACKAGE_NAME);
-      activity.startActivity(openMessenger);
-    }
-  }
-
-  /**
-   * When handling an {@code Intent} from Messenger, call this to parse the parameters of the
-   * intent.
-   *
-   * @param intent the intent of the activity
-   * @return a {@link MessengerThreadParams} or null if this intent wasn't recognized as a request
-   *     from Messenger to share.
-   */
-  public static MessengerThreadParams getMessengerThreadParamsForIntent(Intent intent) {
-    Set<String> categories = intent.getCategories();
-    if (categories == null) {
-      return null;
-    }
-    if (categories.contains(ORCA_THREAD_CATEGORY_20150314)) {
-      Bundle appLinkExtras = AppLinks.getAppLinkExtras(intent);
-      String threadToken = appLinkExtras.getString(EXTRA_THREAD_TOKEN_KEY);
-      String metadata = appLinkExtras.getString(EXTRA_METADATA);
-      String participants = appLinkExtras.getString(EXTRA_PARTICIPANTS);
-      boolean isReply = appLinkExtras.getBoolean(EXTRA_IS_REPLY);
-      boolean isCompose = appLinkExtras.getBoolean(EXTRA_IS_COMPOSE);
-      MessengerThreadParams.Origin origin = MessengerThreadParams.Origin.UNKNOWN;
-      if (isReply) {
-        origin = MessengerThreadParams.Origin.REPLY_FLOW;
-      } else if (isCompose) {
-        origin = MessengerThreadParams.Origin.COMPOSE_FLOW;
-      }
-
-      return new MessengerThreadParams(
-          origin,
-          threadToken,
-          metadata,
-          parseParticipants(participants));
-    } else {
-      return null;
-    }
-  }
-
-  /**
-   * Finishes the activity and returns the media item the user picked to Messenger.
-   *
-   * @param activity the activity that received the original intent from Messenger
-   * @param shareToMessengerParams parameters for what to share
-   */
-  public static void finishShareToMessenger(
-      Activity activity,
-      ShareToMessengerParams shareToMessengerParams) {
-    Intent originalIntent = activity.getIntent();
-    Set<String> categories = originalIntent.getCategories();
-    if (categories == null) {
-      // This shouldn't happen.
-      activity.setResult(Activity.RESULT_CANCELED, null);
-      activity.finish();
-      return;
-    }
-
-    if (categories.contains(ORCA_THREAD_CATEGORY_20150314)) {
-      Bundle appLinkExtras = AppLinks.getAppLinkExtras(originalIntent);
-
-      Intent resultIntent = new Intent();
-      if (categories.contains(ORCA_THREAD_CATEGORY_20150314)) {
-        resultIntent.putExtra(EXTRA_PROTOCOL_VERSION, MessengerUtils.PROTOCOL_VERSION_20150314);
-        String threadToken = appLinkExtras.getString(MessengerUtils.EXTRA_THREAD_TOKEN_KEY);
-        resultIntent.putExtra(EXTRA_THREAD_TOKEN_KEY, threadToken);
-      } else {
-        throw new RuntimeException(); // Can't happen.
-      }
-      resultIntent.setDataAndType(shareToMessengerParams.uri, shareToMessengerParams.mimeType);
-      resultIntent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
-      resultIntent.putExtra(EXTRA_APP_ID, FacebookSdk.getApplicationId());
-      resultIntent.putExtra(EXTRA_METADATA, shareToMessengerParams.metaData);
-      resultIntent.putExtra(EXTRA_EXTERNAL_URI, shareToMessengerParams.externalUri);
-      activity.setResult(Activity.RESULT_OK, resultIntent);
-      activity.finish();
-    } else {
-      // This shouldn't happen.
-      activity.setResult(Activity.RESULT_CANCELED, null);
-      activity.finish();
-    }
-  }
-
-  /**
-   * Checks whether any version of messenger is installed.
-   *
-   * @param context an android context
-   * @return whether any version of messenger is installed
-   */
-  public static boolean hasMessengerInstalled(Context context) {
-    try {
-      context.getPackageManager().getPackageInfo(PACKAGE_NAME, 0);
-      return true;
-    } catch (PackageManager.NameNotFoundException e) {
-      return false;
-    }
-  }
-
-  /**
-   * Opens the play store to install Messenger.
-   *
-   * @param context an android context.
-   */
-  public static void openMessengerInPlayStore(Context context) {
-    try {
-      startViewUri(context, "market://details?id=" + PACKAGE_NAME);
-    } catch (ActivityNotFoundException anfe) {
-      startViewUri(context, "http://play.google.com/store/apps/details?id=" + PACKAGE_NAME);
-    }
-  }
-
-  private static Set<Integer> getAllAvailableProtocolVersions(Context context) {
-    ContentResolver contentResolver = context.getContentResolver();
-    Set<Integer> allAvailableVersions = new HashSet<Integer>();
-    Uri uri = Uri.parse("content://com.facebook.orca.provider.MessengerPlatformProvider/versions");
-    String [] projection = new String[]{ "version" };
-    Cursor c = contentResolver.query(uri, projection, null, null, null);
-    if (c != null) {
-      try {
-        int versionColumnIndex = c.getColumnIndex("version");
-        while (c.moveToNext()) {
-          int version = c.getInt(versionColumnIndex);
-          allAvailableVersions.add(version);
-        }
-      } finally {
-        c.close();
-      }
-    }
-    return allAvailableVersions;
-  }
-
-  private static void startViewUri(Context context, String uri) {
-    context.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(uri)));
-  }
-
-  private static List<String> parseParticipants(String s) {
-    if (s == null || s.length() == 0) {
-      return Collections.emptyList();
-    }
-    String[] parts = s.split(",");
-    List<String> ret = new ArrayList<String>();
-    for (String part : parts) {
-      ret.add(part.trim());
-    }
-    return ret;
-  }
-}
diff --git a/facebook/src/main/java/com/facebook/messenger/ShareToMessengerParams.java b/facebook/src/main/java/com/facebook/messenger/ShareToMessengerParams.java
deleted file mode 100644
index 9bb413384..000000000
--- a/facebook/src/main/java/com/facebook/messenger/ShareToMessengerParams.java
+++ /dev/null
@@ -1,130 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.messenger;
-
-import android.net.Uri;
-
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Set;
-
-/**
- * Parameters used by {@link MessengerUtils} for sending the media to Messenger to share.
- * See <a href="https://developers.facebook.com/docs/messenger/android">developer docs</a> for
- * more info.
- */
-public class ShareToMessengerParams {
-
-  public static final Set<String> VALID_URI_SCHEMES;
-  public static final Set<String> VALID_MIME_TYPES;
-  public static final Set<String> VALID_EXTERNAL_URI_SCHEMES;
-
-  static {
-    Set<String> validMimeTypes = new HashSet<String>();
-    validMimeTypes.add("image/*");
-    validMimeTypes.add("image/jpeg");
-    validMimeTypes.add("image/png");
-    validMimeTypes.add("image/gif");
-    validMimeTypes.add("image/webp");
-    validMimeTypes.add("video/*");
-    validMimeTypes.add("video/mp4");
-    validMimeTypes.add("audio/*");
-    validMimeTypes.add("audio/mpeg");
-    VALID_MIME_TYPES = Collections.unmodifiableSet(validMimeTypes);
-
-    Set<String> validUriSchemes = new HashSet<String>();
-    validUriSchemes.add("content");
-    validUriSchemes.add("android.resource");
-    validUriSchemes.add("file");
-    VALID_URI_SCHEMES = Collections.unmodifiableSet(validUriSchemes);
-
-    Set<String> validExternalUriSchemes = new HashSet<String>();
-    validExternalUriSchemes.add("http");
-    validExternalUriSchemes.add("https");
-    VALID_EXTERNAL_URI_SCHEMES = Collections.unmodifiableSet(validExternalUriSchemes);
-  }
-
-  /**
-   * The URI of the local image, video, or audio clip to send to messenger. Must be
-   * a file://, content://, or res:// URI.
-   */
-  public final Uri uri;
-
-  /**
-   * The mime type of the content. See {@link #VALID_MIME_TYPES} for what mime types are supported.
-   */
-  public final String mimeType;
-
-  /**
-   * The metadata to attach to the content to shared. See
-   * <a href="https://developers.facebook.com/docs/messenger/android">developer docs</a> for more
-   * info.
-   */
-  public final String metaData;
-
-  /**
-   * An external URI that Messenger can use to download the content on Facebook's servers
-   * instead of requiring the Messenger application to upload the content. The content returned by
-   * the this URI must be exactly the same as the content specified by {@link #uri}. If the
-   * content is different, Messenger may fail to send the content. See
-   * <a href="https://developers.facebook.com/docs/messenger/android">developer docs</a> for more
-   * info.
-   */
-  public final Uri externalUri;
-
-  ShareToMessengerParams(ShareToMessengerParamsBuilder builder) {
-    uri = builder.getUri();
-    mimeType = builder.getMimeType();
-    metaData = builder.getMetaData();
-    externalUri = builder.getExternalUri();
-
-    if (uri == null) {
-      throw new NullPointerException("Must provide non-null uri");
-    }
-    if (mimeType == null) {
-      throw new NullPointerException("Must provide mimeType");
-    }
-    if (!VALID_URI_SCHEMES.contains(uri.getScheme())) {
-      throw new IllegalArgumentException("Unsupported URI scheme: " + uri.getScheme());
-    }
-    if (!VALID_MIME_TYPES.contains(mimeType)) {
-      throw new IllegalArgumentException("Unsupported mime-type: " + mimeType);
-    }
-    if (externalUri != null) {
-      if (!VALID_EXTERNAL_URI_SCHEMES.contains(externalUri.getScheme())) {
-        throw new IllegalArgumentException("Unsupported external uri scheme: " +
-            externalUri.getScheme());
-      }
-    }
-  }
-
-  /**
-   * Creates a new builder for creating a {@link ShareToMessengerParams} instance
-   *
-   * @param uri the uri of the local content. Must be a file://, content://, or res:// URI.
-   * @param mimeType the mime-type of the content. See {@link #VALID_MIME_TYPES} for what mime
-   *                 types are supported.
-   * @return the builder instance
-   */
-  public static ShareToMessengerParamsBuilder newBuilder(Uri uri, String mimeType) {
-    return new ShareToMessengerParamsBuilder(uri, mimeType);
-  }
-}
diff --git a/facebook/src/main/java/com/facebook/messenger/ShareToMessengerParamsBuilder.java b/facebook/src/main/java/com/facebook/messenger/ShareToMessengerParamsBuilder.java
deleted file mode 100644
index ad42d6c28..000000000
--- a/facebook/src/main/java/com/facebook/messenger/ShareToMessengerParamsBuilder.java
+++ /dev/null
@@ -1,122 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.messenger;
-
-import android.net.Uri;
-
-/**
- * Builder for {@link ShareToMessengerParams}.
- */
-public class ShareToMessengerParamsBuilder {
-
-  private final Uri mUri;
-  private final String mMimeType;
-  private String mMetaData;
-  private Uri mExternalUri;
-
-  ShareToMessengerParamsBuilder(Uri uri, String mimeType) {
-    mUri = uri;
-    mMimeType = mimeType;
-  }
-
-  /**
-   * Gets the URI of the local image, video, or audio clip to send to messenger. Must be
-   * a file://, content://, or res:// URI.
-   *
-   * @return the uri
-   */
-  public Uri getUri() {
-    return mUri;
-  }
-
-  /**
-   * Gets the mime type of the content. See {@link ShareToMessengerParams#VALID_MIME_TYPES} for
-   * what mime types are supported.
-   *
-   * @return the mime type
-   */
-  public String getMimeType() {
-    return mMimeType;
-  }
-
-  /**
-   * Sets the metadata to attach to the content to shared. See
-   * <a href="https://developers.facebook.com/docs/messenger/android">developer docs</a> for more
-   * info.
-   *
-   * @param metaData the metadata to attach to the message
-   * @return this builder
-   */
-  public ShareToMessengerParamsBuilder setMetaData(String metaData) {
-    mMetaData = metaData;
-    return this;
-  }
-
-  /**
-   * Gets the metadata to attach to the content to shared. See
-   * <a href="https://developers.facebook.com/docs/messenger/android">developer docs</a> for more
-   * info.
-   *
-   * @return the metadata to attach to the message
-   */
-  public String getMetaData() {
-    return mMetaData;
-  }
-
-  /**
-   * Sets an external URI that Messenger can use to download the content on Facebook's servers
-   * instead of requiring the Messenger application to upload the content. The content returned by
-   * the this URI must be exactly the same as the content specified by {@link #getUri()}. If the
-   * content is different, Messenger may fail to send the content. See
-   * <a href="https://developers.facebook.com/docs/messenger/android">developer docs</a> for more
-   * info.
-   *
-   * @param externalUri the external uri to set
-   * @return this builder
-   */
-  public ShareToMessengerParamsBuilder setExternalUri(Uri externalUri) {
-    mExternalUri = externalUri;
-    return this;
-  }
-
-  /**
-   * Gets an external URI that Messenger can use to download the content on Facebook's servers
-   * instead of requiring the Messenger application to upload the content. The content returned by
-   * the this URI must be exactly the same as the content specified by {@link #getUri()}. If the
-   * content is different, Messenger may fail to send the content. See
-   * <a href="https://developers.facebook.com/docs/messenger/android">developer docs</a> for more
-   * info.
-   *
-   * @return the external URI
-   */
-  public Uri getExternalUri() {
-    return mExternalUri;
-  }
-
-  /**
-   * Builds the parameter object.
-   *
-   * @return the parameter object
-   */
-  public ShareToMessengerParams build() {
-    return new ShareToMessengerParams(this);
-  }
-}
diff --git a/facebook/src/main/java/com/facebook/share/DeviceShareDialog.java b/facebook/src/main/java/com/facebook/share/DeviceShareDialog.java
deleted file mode 100644
index c9c017124..000000000
--- a/facebook/src/main/java/com/facebook/share/DeviceShareDialog.java
+++ /dev/null
@@ -1,143 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-package com.facebook.share;
-
-import android.app.Activity;
-import android.app.Fragment;
-import android.content.Intent;
-import android.os.Bundle;
-
-import com.facebook.FacebookActivity;
-import com.facebook.FacebookCallback;
-import com.facebook.FacebookException;
-import com.facebook.FacebookRequestError;
-import com.facebook.FacebookSdk;
-import com.facebook.internal.AppCall;
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.internal.FacebookDialogBase;
-import com.facebook.internal.FragmentWrapper;
-import com.facebook.share.internal.DeviceShareDialogFragment;
-import com.facebook.share.model.ShareContent;
-import com.facebook.share.model.ShareLinkContent;
-import com.facebook.share.model.ShareOpenGraphContent;
-
-import java.util.List;
-
-/*
- * Provides functionality to share from devices.
- * See https://developers.facebook.com/docs/android/devices
- *
- * Only ShareLinkContent and ShareOpenGraphContent are supported.
- *
- * The dialog does not indicate if the person completed a share. Therefore,
- * the callback will always either invoke onSuccess or onError.
- *
- * The dialog can also dismiss itself after the device code has expired.
- */
-public class DeviceShareDialog
-        extends FacebookDialogBase<ShareContent, DeviceShareDialog.Result> {
-    private static final int DEFAULT_REQUEST_CODE =
-            CallbackManagerImpl.RequestCodeOffset.DeviceShare.toRequestCode();
-    /**
-     * Constructs a new DeviceShareDialog.
-     * @param activity Activity to use to share the provided content
-     */
-    public DeviceShareDialog(final Activity activity) {
-        super(activity, DEFAULT_REQUEST_CODE);
-    }
-    /**
-     * Constructs a new DeviceShareDialog.
-     * @param fragment fragment to use to share the provided content
-     */
-    public DeviceShareDialog(final Fragment fragment) {
-        super(new FragmentWrapper(fragment), DEFAULT_REQUEST_CODE);
-    }
-    /**
-     * Constructs a new DeviceShareDialog.
-     * @param fragment fragment to use to share the provided content
-     */
-    public DeviceShareDialog(final android.support.v4.app.Fragment fragment) {
-        super(new FragmentWrapper(fragment), DEFAULT_REQUEST_CODE);
-    }
-
-    @Override
-    protected boolean canShowImpl(ShareContent content, Object mode) {
-        return (content instanceof ShareLinkContent ||
-                content instanceof ShareOpenGraphContent);
-    }
-
-    @Override
-    protected void showImpl(final ShareContent content, final Object mode) {
-        if (content == null) {
-            throw new FacebookException("Must provide non-null content to share");
-        }
-
-        if (!(content instanceof ShareLinkContent) &&
-            !(content instanceof ShareOpenGraphContent)) {
-            throw new FacebookException(this.getClass().getSimpleName() +
-                    " only supports ShareLinkContent or ShareOpenGraphContent");
-        }
-        Intent intent = new Intent();
-        intent.setClass(FacebookSdk.getApplicationContext(), FacebookActivity.class);
-        intent.setAction(DeviceShareDialogFragment.TAG);
-        intent.putExtra("content", content);
-        startActivityForResult(intent, getRequestCode());
-    }
-
-    @Override
-    protected List<ModeHandler> getOrderedModeHandlers() {
-        return null;
-    }
-
-    @Override
-    protected AppCall createBaseAppCall() {
-       return null;
-    }
-
-    @Override
-    protected void registerCallbackImpl(
-            final CallbackManagerImpl callbackManager,
-            final FacebookCallback<Result> callback) {
-
-        callbackManager.registerCallback(
-                getRequestCode(),
-                new CallbackManagerImpl.Callback() {
-                    @Override
-                    public boolean onActivityResult(int resultCode, Intent data) {
-                        Bundle extras = data.getExtras();
-                        if (data.hasExtra("error")) {
-                            FacebookRequestError error = data.getParcelableExtra("error");
-                            callback.onError(error.getException());
-                            return true;
-                        }
-                        callback.onSuccess(new Result());
-                        return true;
-                    }
-                });
-    }
-
-    /*
-     * Describes the result of a device share.
-     * This class is intentionally empty.
-     */
-    public static class Result {
-
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/ShareApi.java b/facebook/src/main/java/com/facebook/share/ShareApi.java
deleted file mode 100644
index 2917e345e..000000000
--- a/facebook/src/main/java/com/facebook/share/ShareApi.java
+++ /dev/null
@@ -1,745 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share;
-
-import android.graphics.Bitmap;
-import android.net.Uri;
-import android.os.Bundle;
-import android.text.TextUtils;
-import android.util.Log;
-
-import com.facebook.AccessToken;
-import com.facebook.FacebookCallback;
-import com.facebook.FacebookException;
-import com.facebook.FacebookGraphResponseException;
-import com.facebook.FacebookRequestError;
-import com.facebook.GraphRequest;
-import com.facebook.GraphResponse;
-import com.facebook.HttpMethod;
-import com.facebook.internal.CollectionMapper;
-import com.facebook.internal.Mutable;
-import com.facebook.internal.Utility;
-import com.facebook.share.internal.ShareContentValidation;
-import com.facebook.share.internal.ShareInternalUtility;
-import com.facebook.share.internal.VideoUploader;
-import com.facebook.share.model.*;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.FileNotFoundException;
-import java.io.UnsupportedEncodingException;
-import java.net.URLEncoder;
-import java.util.*;
-
-/**
- * Provides an interface for sharing through the graph API. Using this class requires an access
- * token in AccessToken.currentAccessToken that has been granted the "publish_actions" permission.
- */
-public final class ShareApi {
-    private static final String TAG = "ShareApi";
-    private static final String DEFAULT_GRAPH_NODE = "me";
-    private static final String PHOTOS_EDGE = "photos";
-    private static final String GRAPH_PATH_FORMAT = "%s/%s";
-    private static final String DEFAULT_CHARSET = "UTF-8";
-
-    private String message;
-    private String graphNode;
-    private final ShareContent shareContent;
-
-    /**
-     * Convenience method to share a piece of content.
-     *
-     * @param shareContent the content to share.
-     * @param callback     the callback to call once the share is complete.
-     */
-    public static void share(
-            final ShareContent shareContent,
-            final FacebookCallback<Sharer.Result> callback) {
-        new ShareApi(shareContent)
-                .share(callback);
-    }
-
-    /**
-     * Constructs a new instance.
-     *
-     * @param shareContent the content to share.
-     */
-    public ShareApi(final ShareContent shareContent) {
-        this.shareContent = shareContent;
-        this.graphNode = DEFAULT_GRAPH_NODE;
-    }
-
-    /**
-     * Returns the message the person has provided through the custom dialog that will accompany the
-     * share content.
-     * @return the message.
-     */
-    public String getMessage() {
-        return this.message;
-    }
-
-    /**
-     * Sets the message the person has provided through the custom dialog that will accompany the
-     * share content.
-     * @param message the message.
-     */
-    public void setMessage(final String message) {
-        this.message = message;
-    }
-
-    /**
-     * Returns the graph node to share to.
-     * @return the graph node.
-     */
-    public String getGraphNode() {
-        return this.graphNode;
-    }
-
-    /**
-     * Sets the graph node to share to (this can be a user id, event id, page id, group id, album
-     * id, etc).
-     * @param graphNode the graph node to share to.
-     */
-    public void setGraphNode(final String graphNode) {
-        this.graphNode = graphNode;
-    }
-
-    /**
-     * Returns the content to be shared.
-     *
-     * @return the content to be shared.
-     */
-    public ShareContent getShareContent() {
-        return this.shareContent;
-    }
-
-    /**
-     * Returns true if the content can be shared. Warns if the access token is missing the
-     * publish_actions permission. Doesn't fail when this permission is missing, because the app
-     * could have been granted that permission in another installation.
-     *
-     * @return true if the content can be shared.
-     */
-    public boolean canShare() {
-        if (this.getShareContent() == null) {
-            return false;
-        }
-        final AccessToken accessToken = AccessToken.getCurrentAccessToken();
-        if (accessToken == null) {
-            return false;
-        }
-        final Set<String> permissions = accessToken.getPermissions();
-        if (permissions == null || !permissions.contains("publish_actions")) {
-            Log.w(TAG, "The publish_actions permissions are missing, the share will fail unless" +
-                    " this app was authorized to publish in another installation.");
-        }
-
-        return true;
-    }
-
-    /**
-     * Share the content.
-     *
-     * @param callback the callback to call once the share is complete.
-     */
-    public void share(FacebookCallback<Sharer.Result> callback) {
-        if (!this.canShare()) {
-            ShareInternalUtility.invokeCallbackWithError(
-                    callback, "Insufficient permissions for sharing content via Api.");
-            return;
-        }
-        final ShareContent shareContent = this.getShareContent();
-
-        // Validate the share content
-        try {
-            ShareContentValidation.validateForApiShare(shareContent);
-        } catch (FacebookException ex) {
-            ShareInternalUtility.invokeCallbackWithException(callback, ex);
-            return;
-        }
-
-        if (shareContent instanceof ShareLinkContent) {
-            this.shareLinkContent((ShareLinkContent) shareContent, callback);
-        } else if (shareContent instanceof SharePhotoContent) {
-            this.sharePhotoContent((SharePhotoContent) shareContent, callback);
-        } else if (shareContent instanceof ShareVideoContent) {
-            this.shareVideoContent((ShareVideoContent) shareContent, callback);
-        } else if (shareContent instanceof ShareOpenGraphContent) {
-            this.shareOpenGraphContent((ShareOpenGraphContent) shareContent, callback);
-        }
-    }
-
-    // Get the graph path, pathAfterGraphNode must be properly URL encoded
-    private String getGraphPath(final String pathAfterGraphNode) {
-        try {
-            return String.format(
-                    Locale.ROOT, GRAPH_PATH_FORMAT,
-                    URLEncoder.encode(getGraphNode(), DEFAULT_CHARSET),
-                    pathAfterGraphNode);
-        } catch (UnsupportedEncodingException e) {
-            return null;
-        }
-    }
-
-    private void addCommonParameters(final Bundle bundle, ShareContent shareContent) {
-        final List<String> peopleIds = shareContent.getPeopleIds();
-        if (!Utility.isNullOrEmpty(peopleIds)) {
-            bundle.putString("tags", TextUtils.join(", ", peopleIds));
-        }
-
-        if (!Utility.isNullOrEmpty(shareContent.getPlaceId())) {
-            bundle.putString("place", shareContent.getPlaceId());
-        }
-
-        if (!Utility.isNullOrEmpty(shareContent.getRef())) {
-            bundle.putString("ref", shareContent.getRef());
-        }
-    }
-
-    private void shareOpenGraphContent(final ShareOpenGraphContent openGraphContent,
-                                       final FacebookCallback<Sharer.Result> callback) {
-        // In order to create a new Open Graph action using a custom object that does not already
-        // exist (objectID or URL), you must first send a request to post the object and then
-        // another to post the action.  If a local image is supplied with the object or action, that
-        // must be staged first and then referenced by the staging URL that is returned by that
-        // request.
-        final GraphRequest.Callback requestCallback = new GraphRequest.Callback() {
-            @Override
-            public void onCompleted(GraphResponse response) {
-                final JSONObject data = response.getJSONObject();
-                final String postId = (data == null ? null : data.optString("id"));
-                ShareInternalUtility.invokeCallbackWithResults(callback, postId, response);
-            }
-        };
-        final ShareOpenGraphAction action = openGraphContent.getAction();
-        final Bundle parameters = action.getBundle();
-        this.addCommonParameters(parameters, openGraphContent);
-        if (!Utility.isNullOrEmpty(this.getMessage())) {
-            parameters.putString("message", this.getMessage());
-        }
-
-        final CollectionMapper.OnMapperCompleteListener stageCallback = new CollectionMapper
-                .OnMapperCompleteListener() {
-            @Override
-            public void onComplete() {
-                try {
-                    handleImagesOnAction(parameters);
-
-                    new GraphRequest(
-                            AccessToken.getCurrentAccessToken(),
-                            getGraphPath(
-                                    URLEncoder.encode(action.getActionType(), DEFAULT_CHARSET)),
-                            parameters,
-                            HttpMethod.POST,
-                            requestCallback).executeAsync();
-                } catch (final UnsupportedEncodingException ex) {
-                    ShareInternalUtility.invokeCallbackWithException(callback, ex);
-                }
-            }
-
-            @Override
-            public void onError(FacebookException exception) {
-                ShareInternalUtility.invokeCallbackWithException(callback, exception);
-            }
-        };
-        this.stageOpenGraphAction(parameters, stageCallback);
-    }
-
-    private static void handleImagesOnAction(Bundle parameters) {
-        // In general, graph objects are passed by reference (ID/URL). But if this is an OG Action,
-        // we need to pass the entire values of the contents of the 'image' property, as they
-        // contain important metadata beyond just a URL.
-        String imageStr = parameters.getString("image");
-        if (imageStr != null) {
-            try {
-                // Check to see if this is an json array. Will throw if not
-                JSONArray images = new JSONArray(imageStr);
-                for (int i = 0; i < images.length(); ++i) {
-                    JSONObject jsonImage = images.optJSONObject(i);
-                    if(jsonImage != null) {
-                        putImageInBundleWithArrayFormat(parameters, i, jsonImage);
-                    } else {
-                        // If we don't have jsonImage we probably just have a url
-                        String url = images.getString(i);
-                        parameters.putString(String.format(Locale.ROOT, "image[%d][url]", i), url);
-                    }
-                }
-                parameters.remove("image");
-                return;
-            } catch (JSONException ex) {
-                // We couldn't parse the string as an array
-            }
-
-            // If the image is not in an array it might just be an single photo
-            try {
-                JSONObject image = new JSONObject(imageStr);
-                putImageInBundleWithArrayFormat(parameters, 0, image);
-                parameters.remove("image");
-            } catch (JSONException exception) {
-                // The image was not in array format or a json object and can be safely passed
-                // without modification
-            }
-        }
-    }
-
-    private static void putImageInBundleWithArrayFormat(
-            Bundle parameters,
-            int index,
-            JSONObject image) throws JSONException{
-        Iterator<String> keys = image.keys();
-        while (keys.hasNext()) {
-            String property = keys.next();
-            String key = String.format(Locale.ROOT, "image[%d][%s]", index, property);
-            parameters.putString(key, image.get(property).toString());
-        }
-    }
-
-    private void sharePhotoContent(final SharePhotoContent photoContent,
-                                   final FacebookCallback<Sharer.Result> callback) {
-        final Mutable<Integer> requestCount = new Mutable<Integer>(0);
-        final AccessToken accessToken = AccessToken.getCurrentAccessToken();
-        final ArrayList<GraphRequest> requests = new ArrayList<GraphRequest>();
-        final ArrayList<JSONObject> results = new ArrayList<JSONObject>();
-        final ArrayList<GraphResponse> errorResponses = new ArrayList<GraphResponse>();
-        final GraphRequest.Callback requestCallback = new GraphRequest.Callback() {
-            @Override
-            public void onCompleted(GraphResponse response) {
-                final JSONObject result = response.getJSONObject();
-                if (result != null) {
-                    results.add(result);
-                }
-                if (response.getError() != null) {
-                    errorResponses.add(response);
-                }
-                requestCount.value -= 1;
-                if (requestCount.value == 0) {
-                    if (!errorResponses.isEmpty()) {
-                        ShareInternalUtility.invokeCallbackWithResults(
-                                callback,
-                                null,
-                                errorResponses.get(0));
-                    } else if (!results.isEmpty()) {
-                        final String postId = results.get(0).optString("id");
-                        ShareInternalUtility.invokeCallbackWithResults(
-                                callback,
-                                postId,
-                                response);
-                    }
-                }
-            }
-        };
-        try {
-            for (SharePhoto photo : photoContent.getPhotos()) {
-                Bundle params = null;
-                try {
-                    params = getSharePhotoCommonParameters(photo, photoContent);
-                } catch (JSONException e) {
-                    ShareInternalUtility.invokeCallbackWithException(callback, e);
-                    return;
-                }
-                final Bitmap bitmap = photo.getBitmap();
-                final Uri photoUri = photo.getImageUrl();
-                String caption = photo.getCaption();
-                if (caption == null) {
-                    caption = this.getMessage();
-                }
-                if (bitmap != null) {
-                    requests.add(GraphRequest.newUploadPhotoRequest(
-                            accessToken,
-                            getGraphPath(PHOTOS_EDGE),
-                            bitmap,
-                            caption,
-                            params,
-                            requestCallback));
-                } else if (photoUri != null) {
-                    requests.add(GraphRequest.newUploadPhotoRequest(
-                            accessToken,
-                            getGraphPath(PHOTOS_EDGE),
-                            photoUri,
-                            caption,
-                            params,
-                            requestCallback));
-                }
-            }
-            requestCount.value += requests.size();
-            for (GraphRequest request : requests) {
-                request.executeAsync();
-            }
-        } catch (final FileNotFoundException ex) {
-            ShareInternalUtility.invokeCallbackWithException(callback, ex);
-        }
-    }
-
-    private void shareLinkContent(final ShareLinkContent linkContent,
-                                  final FacebookCallback<Sharer.Result> callback) {
-        final GraphRequest.Callback requestCallback = new GraphRequest.Callback() {
-            @Override
-            public void onCompleted(GraphResponse response) {
-                final JSONObject data = response.getJSONObject();
-                final String postId = (data == null ? null : data.optString("id"));
-                ShareInternalUtility.invokeCallbackWithResults(callback, postId, response);
-            }
-        };
-        final Bundle parameters = new Bundle();
-        this.addCommonParameters(parameters, linkContent);
-        parameters.putString("message", this.getMessage());
-        parameters.putString("link", Utility.getUriString(linkContent.getContentUrl()));
-        parameters.putString("picture", Utility.getUriString(linkContent.getImageUrl()));
-        parameters.putString("name", linkContent.getContentTitle());
-        parameters.putString("description", linkContent.getContentDescription());
-        parameters.putString("ref", linkContent.getRef());
-        new GraphRequest(
-                AccessToken.getCurrentAccessToken(),
-                getGraphPath("feed"),
-                parameters,
-                HttpMethod.POST,
-                requestCallback).executeAsync();
-    }
-
-    private void shareVideoContent(final ShareVideoContent videoContent,
-                                   final FacebookCallback<Sharer.Result> callback) {
-        try {
-            VideoUploader.uploadAsync(videoContent, getGraphNode(), callback);
-        } catch (final FileNotFoundException ex) {
-            ShareInternalUtility.invokeCallbackWithException(callback, ex);
-        }
-    }
-
-    private Bundle getSharePhotoCommonParameters(SharePhoto photo, SharePhotoContent photoContent)
-            throws JSONException{
-        Bundle params = photo.getParameters();
-        if (!params.containsKey("place")
-                && !Utility.isNullOrEmpty(photoContent.getPlaceId())) {
-            params.putString("place", photoContent.getPlaceId());
-        }
-        if (!params.containsKey("tags")
-                && !Utility.isNullOrEmpty(photoContent.getPeopleIds())) {
-            final List<String> peopleIds = photoContent.getPeopleIds();
-            if (!Utility.isNullOrEmpty(peopleIds)) {
-                JSONArray tags = new JSONArray();
-                for (String id : peopleIds) {
-                    JSONObject tag = new JSONObject();
-                    tag.put("tag_uid", id);
-                    tags.put(tag);
-                }
-                params.putString("tags", tags.toString());
-            }
-        }
-        if (!params.containsKey("ref")
-                && !Utility.isNullOrEmpty(photoContent.getRef())) {
-            params.putString("ref", photoContent.getRef());
-        }
-        return params;
-    }
-
-    private void stageArrayList(final ArrayList arrayList,
-                                       final CollectionMapper.OnMapValueCompleteListener
-                                               onArrayListStagedListener) {
-        final JSONArray stagedObject = new JSONArray();
-        final CollectionMapper.Collection<Integer> collection = new CollectionMapper
-                .Collection<Integer>() {
-            @Override
-            public Iterator<Integer> keyIterator() {
-                final int size = arrayList.size();
-                final Mutable<Integer> current = new Mutable<Integer>(0);
-                return new Iterator<Integer>() {
-                    @Override
-                    public boolean hasNext() {
-                        return current.value < size;
-                    }
-
-                    @Override
-                    public Integer next() {
-                        return current.value++;
-                    }
-
-                    @Override
-                    public void remove() {
-                    }
-                };
-            }
-
-            @Override
-            public Object get(Integer key) {
-                return arrayList.get(key);
-            }
-
-            @Override
-            public void set(Integer key,
-                            Object value,
-                            CollectionMapper.OnErrorListener onErrorListener) {
-                try {
-                    stagedObject.put(key, value);
-                } catch (final JSONException ex) {
-                    String message = ex.getLocalizedMessage();
-                    if (message == null) {
-                        message = "Error staging object.";
-                    }
-                    onErrorListener.onError(new FacebookException(message));
-                }
-            }
-        };
-        final CollectionMapper.OnMapperCompleteListener onStagedArrayMapperCompleteListener =
-                new CollectionMapper.OnMapperCompleteListener() {
-                    @Override
-                    public void onComplete() {
-                        onArrayListStagedListener.onComplete(stagedObject);
-                    }
-
-                    @Override
-                    public void onError(FacebookException exception) {
-                        onArrayListStagedListener.onError(exception);
-                    }
-                };
-        stageCollectionValues(collection, onStagedArrayMapperCompleteListener);
-    }
-
-    private <T> void stageCollectionValues(final CollectionMapper.Collection<T> collection,
-                                                  final CollectionMapper.OnMapperCompleteListener
-                                                          onCollectionValuesStagedListener) {
-        final CollectionMapper.ValueMapper valueMapper = new CollectionMapper.ValueMapper() {
-            @Override
-            public void mapValue(Object value,
-                                 CollectionMapper.OnMapValueCompleteListener
-                                         onMapValueCompleteListener) {
-                if (value instanceof ArrayList) {
-                    stageArrayList((ArrayList) value, onMapValueCompleteListener);
-                } else if (value instanceof ShareOpenGraphObject) {
-                    stageOpenGraphObject(
-                            (ShareOpenGraphObject) value,
-                            onMapValueCompleteListener);
-                } else if (value instanceof SharePhoto) {
-                    stagePhoto((SharePhoto) value, onMapValueCompleteListener);
-                } else {
-                    onMapValueCompleteListener.onComplete(value);
-                }
-            }
-        };
-        CollectionMapper.iterate(collection, valueMapper, onCollectionValuesStagedListener);
-    }
-
-    private void stageOpenGraphAction(final Bundle parameters,
-                                             final CollectionMapper.OnMapperCompleteListener
-                                                     onOpenGraphActionStagedListener) {
-        final CollectionMapper.Collection<String> collection = new CollectionMapper
-                .Collection<String>() {
-            @Override
-            public Iterator<String> keyIterator() {
-                return parameters.keySet().iterator();
-            }
-
-            @Override
-            public Object get(String key) {
-                return parameters.get(key);
-            }
-
-            @Override
-            public void set(String key,
-                            Object value,
-                            CollectionMapper.OnErrorListener onErrorListener) {
-                if (!Utility.putJSONValueInBundle(parameters, key, value)) {
-                    onErrorListener.onError(
-                            new FacebookException("Unexpected value: " + value.toString()));
-                }
-            }
-        };
-        stageCollectionValues(collection, onOpenGraphActionStagedListener);
-    }
-
-    private void stageOpenGraphObject(final ShareOpenGraphObject object,
-                                             final CollectionMapper.OnMapValueCompleteListener
-                                                     onOpenGraphObjectStagedListener) {
-        String type = object.getString("type");
-        if (type == null) {
-            type = object.getString("og:type");
-        }
-
-        if (type == null) {
-            onOpenGraphObjectStagedListener.onError(
-                    new FacebookException("Open Graph objects must contain a type value."));
-            return;
-        }
-        final JSONObject stagedObject = new JSONObject();
-        final CollectionMapper.Collection<String> collection = new CollectionMapper
-                .Collection<String>() {
-            @Override
-            public Iterator<String> keyIterator() {
-                return object.keySet().iterator();
-            }
-
-            @Override
-            public Object get(String key) {
-                return object.get(key);
-            }
-
-            @Override
-            public void set(String key,
-                            Object value,
-                            CollectionMapper.OnErrorListener onErrorListener) {
-                try {
-                    stagedObject.put(key, value);
-                } catch (final JSONException ex) {
-                    String message = ex.getLocalizedMessage();
-                    if (message == null) {
-                        message = "Error staging object.";
-                    }
-                    onErrorListener.onError(new FacebookException(message));
-                }
-            }
-        };
-        final GraphRequest.Callback requestCallback = new GraphRequest.Callback() {
-            @Override
-            public void onCompleted(GraphResponse response) {
-                final FacebookRequestError error = response.getError();
-                if (error != null) {
-                    String message = error.getErrorMessage();
-                    if (message == null) {
-                        message = "Error staging Open Graph object.";
-                    }
-                    onOpenGraphObjectStagedListener.onError(
-                            new FacebookGraphResponseException(response, message));
-                    return;
-                }
-                final JSONObject data = response.getJSONObject();
-                if (data == null) {
-                    onOpenGraphObjectStagedListener.onError(
-                            new FacebookGraphResponseException(response,
-                                    "Error staging Open Graph object."));
-                    return;
-                }
-                final String stagedObjectId = data.optString("id");
-                if (stagedObjectId == null) {
-                    onOpenGraphObjectStagedListener.onError(
-                            new FacebookGraphResponseException(response,
-                                    "Error staging Open Graph object."));
-                    return;
-                }
-                onOpenGraphObjectStagedListener.onComplete(stagedObjectId);
-            }
-        };
-        final String ogType = type;
-        final CollectionMapper.OnMapperCompleteListener onMapperCompleteListener =
-                new CollectionMapper.OnMapperCompleteListener() {
-                    @Override
-                    public void onComplete() {
-                        final String objectString = stagedObject.toString();
-                        final Bundle parameters = new Bundle();
-                        parameters.putString("object", objectString);
-                        try {
-                            new GraphRequest(
-                                    AccessToken.getCurrentAccessToken(),
-                                    getGraphPath(
-                                            "objects/" +
-                                                    URLEncoder.encode(ogType, DEFAULT_CHARSET)),
-                                    parameters,
-                                    HttpMethod.POST,
-                                    requestCallback).executeAsync();
-                        } catch (final UnsupportedEncodingException ex) {
-                            String message = ex.getLocalizedMessage();
-                            if (message == null) {
-                                message = "Error staging Open Graph object.";
-                            }
-                            onOpenGraphObjectStagedListener.onError(new FacebookException(message));
-                        }
-                    }
-
-                    @Override
-                    public void onError(FacebookException exception) {
-                        onOpenGraphObjectStagedListener.onError(exception);
-                    }
-                };
-        stageCollectionValues(collection, onMapperCompleteListener);
-    }
-
-    private void stagePhoto(final SharePhoto photo,
-                                   final CollectionMapper.OnMapValueCompleteListener
-                                           onPhotoStagedListener) {
-        final Bitmap bitmap = photo.getBitmap();
-        final Uri imageUrl = photo.getImageUrl();
-        if ((bitmap != null) || (imageUrl != null)) {
-            final GraphRequest.Callback requestCallback = new GraphRequest.Callback() {
-                @Override
-                public void onCompleted(GraphResponse response) {
-                    final FacebookRequestError error = response.getError();
-                    if (error != null) {
-                        String message = error.getErrorMessage();
-                        if (message == null) {
-                            message = "Error staging photo.";
-                        }
-                        onPhotoStagedListener.onError(
-                                new FacebookGraphResponseException(response, message));
-                        return;
-                    }
-                    final JSONObject data = response.getJSONObject();
-                    if (data == null) {
-                        onPhotoStagedListener.onError(
-                                new FacebookException("Error staging photo."));
-                        return;
-                    }
-                    final String stagedImageUri = data.optString("uri");
-                    if (stagedImageUri == null) {
-                        onPhotoStagedListener.onError(
-                                new FacebookException("Error staging photo."));
-                        return;
-                    }
-
-                    final JSONObject stagedObject = new JSONObject();
-                    try {
-                        stagedObject.put("url", stagedImageUri);
-                        stagedObject.put("user_generated", photo.getUserGenerated());
-                    } catch (final JSONException ex) {
-                        String message = ex.getLocalizedMessage();
-                        if (message == null) {
-                            message = "Error staging photo.";
-                        }
-                        onPhotoStagedListener.onError(new FacebookException(message));
-                        return;
-                    }
-                    onPhotoStagedListener.onComplete(stagedObject);
-                }
-            };
-            if (bitmap != null) {
-                ShareInternalUtility.newUploadStagingResourceWithImageRequest(
-                        AccessToken.getCurrentAccessToken(),
-                        bitmap,
-                        requestCallback).executeAsync();
-            } else {
-                try {
-                    ShareInternalUtility.newUploadStagingResourceWithImageRequest(
-                            AccessToken.getCurrentAccessToken(),
-                            imageUrl,
-                            requestCallback).executeAsync();
-                } catch (final FileNotFoundException ex) {
-                    String message = ex.getLocalizedMessage();
-                    if (message == null) {
-                        message = "Error staging photo.";
-                    }
-                    onPhotoStagedListener.onError(new FacebookException(message));
-                }
-            }
-        } else {
-            onPhotoStagedListener.onError(
-                    new FacebookException("Photos must have an imageURL or bitmap."));
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/ShareBuilder.java b/facebook/src/main/java/com/facebook/share/ShareBuilder.java
deleted file mode 100644
index 53df49f3a..000000000
--- a/facebook/src/main/java/com/facebook/share/ShareBuilder.java
+++ /dev/null
@@ -1,34 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share;
-
-/**
- * Interface for builders related to sharing.
- * @param <P> The class of the object to be built.
- * @param <E> The concrete builder class.
- */
-public interface ShareBuilder<P, E extends ShareBuilder> {
-    /**
-     * Builds the object.
-     * @return The built object.
-     */
-    public P build();
-}
diff --git a/facebook/src/main/java/com/facebook/share/Sharer.java b/facebook/src/main/java/com/facebook/share/Sharer.java
deleted file mode 100644
index 1f22d52a4..000000000
--- a/facebook/src/main/java/com/facebook/share/Sharer.java
+++ /dev/null
@@ -1,68 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share;
-
-/**
- * The common interface for components that initiate sharing.
- * @see com.facebook.share.widget.ShareDialog
- * @see com.facebook.share.widget.MessageDialog
- */
-public interface Sharer {
-    /**
-     * Specifies whether the sharer should fail if it finds an error with the share content.
-     * If false, the share dialog will still be displayed without the data that was mis-configured.
-     * For example, an invalid placeID specified on the shareContent would produce a data error.
-     * @return A Boolean value.
-     */
-    public boolean getShouldFailOnDataError();
-
-    /**
-     * Specifies whether the sharer should fail if it finds an error with the share content.
-     * If false, the share dialog will still be displayed without the data that was mis-configured.
-     * For example, an invalid placeID specified on the shareContent would produce a data error.
-     *
-     * @param shouldFailOnDataError whether the dialog should fail if it finds an error.
-     */
-    public void setShouldFailOnDataError(boolean shouldFailOnDataError);
-
-    /**
-     * Helper object for handling the result from a share dialog or share operation
-     */
-    public static class Result {
-        final String postId;
-
-        /**
-         * Constructor.
-         * @param postId the resulting post id.
-         */
-        public Result(String postId) {
-            this.postId = postId;
-        }
-
-        /**
-         * Returns the post id, if available.
-         * @return the post id.
-         */
-        public String getPostId() {
-            return postId;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/AppInviteDialogFeature.java b/facebook/src/main/java/com/facebook/share/internal/AppInviteDialogFeature.java
deleted file mode 100644
index b6d224742..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/AppInviteDialogFeature.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import com.facebook.internal.DialogFeature;
-import com.facebook.internal.NativeProtocol;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public enum AppInviteDialogFeature implements DialogFeature {
-
-    // This matches a value in a sitevar. DO NOT CHANGE
-    APP_INVITES_DIALOG(NativeProtocol.PROTOCOL_VERSION_20140701);
-
-    private int minVersion;
-
-    AppInviteDialogFeature(int minVersion) {
-        this.minVersion = minVersion;
-    }
-
-    public String getAction() {
-        return NativeProtocol.ACTION_APPINVITE_DIALOG;
-    }
-
-    public int getMinVersion() {
-        return minVersion;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/DeviceShareDialogFragment.java b/facebook/src/main/java/com/facebook/share/internal/DeviceShareDialogFragment.java
deleted file mode 100644
index ba25eed17..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/DeviceShareDialogFragment.java
+++ /dev/null
@@ -1,295 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.app.Activity;
-import android.app.Dialog;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.os.Bundle;
-import android.os.Parcel;
-import android.os.Parcelable;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.v4.app.DialogFragment;
-import android.text.Html;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.Button;
-import android.widget.ProgressBar;
-import android.widget.TextView;
-
-import com.facebook.FacebookRequestError;
-import com.facebook.GraphRequest;
-import com.facebook.GraphResponse;
-import com.facebook.HttpMethod;
-import com.facebook.R;
-import com.facebook.internal.Validate;
-import com.facebook.share.model.ShareContent;
-import com.facebook.share.model.ShareLinkContent;
-import com.facebook.share.model.ShareOpenGraphContent;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.concurrent.ScheduledFuture;
-import java.util.concurrent.ScheduledThreadPoolExecutor;
-import java.util.concurrent.TimeUnit;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public class DeviceShareDialogFragment extends DialogFragment {
-    public static final String TAG = "DeviceShareDialogFragment";
-    private static final String DEVICE_SHARE_ENDPOINT = "device/share";
-    private static final String REQUEST_STATE_KEY = "request_state";
-    private ProgressBar progressBar;
-    private TextView confirmationCode;
-    private Dialog dialog;
-    private volatile RequestState currentRequestState;
-    private volatile ScheduledFuture codeExpiredFuture;
-    private static ScheduledThreadPoolExecutor backgroundExecutor;
-    private ShareContent shareContent;
-
-    @Nullable
-    @Override
-    public View onCreateView(
-            LayoutInflater inflater,
-            ViewGroup container,
-            Bundle savedInstanceState) {
-        View view = super.onCreateView(inflater, container, savedInstanceState);
-        if (savedInstanceState != null) {
-            RequestState requestState = savedInstanceState.getParcelable(REQUEST_STATE_KEY);
-            if (requestState != null) {
-                setCurrentRequestState(requestState);
-            }
-        }
-        return view;
-    }
-
-    @NonNull
-    @Override
-    public Dialog onCreateDialog(Bundle savedInstanceState) {
-        dialog = new Dialog(getActivity(), R.style.com_facebook_auth_dialog);
-        LayoutInflater inflater = getActivity().getLayoutInflater();
-        View view = inflater.inflate(R.layout.com_facebook_device_auth_dialog_fragment, null);
-        progressBar = (ProgressBar)view.findViewById(R.id.progress_bar);
-        confirmationCode = (TextView)view.findViewById(R.id.confirmation_code);
-
-        Button cancelButton = (Button) view.findViewById(R.id.cancel_button);
-        cancelButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                dialog.dismiss();
-            }
-        });
-
-        TextView instructions = (TextView)view.findViewById(
-                R.id.com_facebook_device_auth_instructions);
-        instructions.setText(
-                Html.fromHtml(getString(R.string.com_facebook_device_auth_instructions)));
-
-        TextView title = (TextView)view.findViewById(
-                R.id.com_facebook_device_dialog_title);
-        title.setText(getString(R.string.com_facebook_share_button_text));
-        dialog.setContentView(view);
-
-        this.startShare();
-        return dialog;
-    }
-
-    @Override
-    public void onDismiss(final DialogInterface dialog) {
-        super.onDismiss(dialog);
-        if (codeExpiredFuture != null) {
-            codeExpiredFuture.cancel(true);
-        }
-        Intent resultIntent = new Intent();
-        finishActivity(Activity.RESULT_OK, resultIntent);
-    }
-
-    @Override
-    public void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-        if (currentRequestState != null) {
-            outState.putParcelable(REQUEST_STATE_KEY, currentRequestState);
-        }
-    }
-
-    private void finishActivity(int resultCode, Intent data) {
-        if (isAdded()) {
-            Activity activity = getActivity();
-            activity.setResult(resultCode, data);
-            activity.finish();
-        }
-    }
-
-    private void detach() {
-        if (isAdded()) {
-            this.getFragmentManager().beginTransaction().remove(this).commit();
-        }
-    }
-
-    public void setShareContent(ShareContent shareContent) {
-        this.shareContent = shareContent;
-    }
-
-    private Bundle getGraphParametersForShareContent() {
-        ShareContent content = this.shareContent;
-        if (content == null) {
-            return null;
-        }
-        if (content instanceof ShareLinkContent) {
-            return WebDialogParameters.create((ShareLinkContent)content);
-        } else if (content instanceof ShareOpenGraphContent) {
-            return WebDialogParameters.create((ShareOpenGraphContent)content);
-        }
-        return null;
-    }
-
-    private void startShare() {
-        Bundle parameters = getGraphParametersForShareContent();
-        if (parameters == null || parameters.size() == 0) {
-            this.finishActivityWithError(
-                    new FacebookRequestError(0, "", "Failed to get share content"));
-        }
-        String accessToken = Validate.hasAppID()+ "|" + Validate.hasClientToken();
-        parameters.putString(GraphRequest.ACCESS_TOKEN_PARAM, accessToken);
-        GraphRequest graphRequest = new GraphRequest(
-                null,
-                DEVICE_SHARE_ENDPOINT,
-                parameters,
-                HttpMethod.POST,
-                new GraphRequest.Callback() {
-                    @Override
-                    public void onCompleted(GraphResponse response) {
-                        FacebookRequestError error = response.getError();
-                        if (error != null) {
-                            finishActivityWithError(error);
-                            return;
-                        }
-
-                        JSONObject jsonObject = response.getJSONObject();
-                        RequestState requestState = new RequestState();
-                        try {
-                            requestState.setUserCode(jsonObject.getString("user_code"));
-                            requestState.setExpiresIn(jsonObject.getLong("expires_in"));
-                        } catch (JSONException ex) {
-                            finishActivityWithError(
-                                    new FacebookRequestError(0, "", "Malformed server response"));
-                            return;
-                        }
-
-                        setCurrentRequestState(requestState);
-                    }
-                });
-        graphRequest.executeAsync();
-    }
-
-    private void finishActivityWithError(FacebookRequestError error) {
-        // detach so that we don't send a cancellation message back ondismiss.
-        detach();
-        Intent intent = new Intent();
-        intent.putExtra("error", error);
-        finishActivity(Activity.RESULT_OK, intent);
-    }
-
-    private static synchronized ScheduledThreadPoolExecutor getBackgroundExecutor() {
-        if (backgroundExecutor == null) {
-            backgroundExecutor = new ScheduledThreadPoolExecutor(1);
-        }
-        return backgroundExecutor;
-    }
-
-    private void setCurrentRequestState(RequestState currentRequestState) {
-        this.currentRequestState = currentRequestState;
-        confirmationCode.setText(currentRequestState.getUserCode());
-        confirmationCode.setVisibility(View.VISIBLE);
-        progressBar.setVisibility(View.GONE);
-
-        codeExpiredFuture = getBackgroundExecutor().schedule(
-                new Runnable() {
-                    @Override
-                    public void run() {
-                        dialog.dismiss();
-                    }
-                },
-                currentRequestState.getExpiresIn(),
-                TimeUnit.SECONDS);
-    }
-
-    private static class RequestState implements Parcelable {
-        private String userCode;
-        private long expiresIn;
-
-        RequestState() {}
-
-        public String getUserCode() {
-            return userCode;
-        }
-
-        public void setUserCode(String userCode) {
-            this.userCode = userCode;
-        }
-
-        public long getExpiresIn() {
-            return expiresIn;
-        }
-
-        public void setExpiresIn(long expiresIn) {
-            this.expiresIn = expiresIn;
-        }
-
-
-        protected RequestState(Parcel in) {
-            userCode = in.readString();
-            expiresIn = in.readLong();
-        }
-
-        @Override
-        public int describeContents() {
-            return 0;
-        }
-
-        @Override
-        public void writeToParcel(Parcel dest, int flags) {
-            dest.writeString(userCode);
-            dest.writeLong(expiresIn);
-        }
-
-        @SuppressWarnings("unused")
-        public static final Parcelable.Creator<RequestState> CREATOR =
-                new Parcelable.Creator<RequestState>() {
-                    @Override
-                    public RequestState createFromParcel(Parcel in) {
-                        return new RequestState(in);
-                    }
-
-                    @Override
-                    public RequestState[] newArray(int size) {
-                        return new RequestState[size];
-                    }
-                };
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/GameRequestValidation.java b/facebook/src/main/java/com/facebook/share/internal/GameRequestValidation.java
deleted file mode 100644
index 4ff10df2c..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/GameRequestValidation.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import com.facebook.internal.Validate;
-import com.facebook.share.model.GameRequestContent;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- *
- * Validates GameRequestContent before it is shown by GameRequestDialog
- */
-public class GameRequestValidation {
-
-    public static void validate(GameRequestContent content) {
-        Validate.notNull(content.getMessage(), "message");
-        if (content.getObjectId() != null ^
-                (content.getActionType() == GameRequestContent.ActionType.ASKFOR
-                || content.getActionType() == GameRequestContent.ActionType.SEND)) {
-            throw new IllegalArgumentException(
-                    "Object id should be provided if and only if action type is send or askfor");
-        }
-
-        // parameters recipients, filters, suggestions are mutually exclusive
-        int mutex = 0;
-        if (content.getRecipients() != null) {
-            mutex++;
-        }
-        if (content.getSuggestions() != null) {
-            mutex++;
-        }
-        if (content.getFilters() != null) {
-            mutex++;
-        }
-        if (mutex > 1) {
-            throw new IllegalArgumentException(
-                    "Parameters to, filters and suggestions are mutually exclusive");
-        }
-    }
-
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/LegacyNativeDialogParameters.java b/facebook/src/main/java/com/facebook/share/internal/LegacyNativeDialogParameters.java
deleted file mode 100644
index a00f9e5fc..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/LegacyNativeDialogParameters.java
+++ /dev/null
@@ -1,157 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.content.Context;
-import android.os.Bundle;
-
-import com.facebook.FacebookException;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
-import com.facebook.share.model.ShareContent;
-import com.facebook.share.model.ShareLinkContent;
-import com.facebook.share.model.ShareOpenGraphAction;
-import com.facebook.share.model.ShareOpenGraphContent;
-import com.facebook.share.model.SharePhotoContent;
-import com.facebook.share.model.ShareVideoContent;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.UUID;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public class LegacyNativeDialogParameters {
-
-    public static Bundle create(
-            UUID callId,
-            ShareContent shareContent,
-            boolean shouldFailOnDataError) {
-        Validate.notNull(shareContent, "shareContent");
-        Validate.notNull(callId, "callId");
-
-        Bundle nativeParams = null;
-        if (shareContent instanceof ShareLinkContent) {
-            final ShareLinkContent linkContent = (ShareLinkContent)shareContent;
-            nativeParams = create(linkContent, shouldFailOnDataError);
-        } else if (shareContent instanceof SharePhotoContent) {
-            final SharePhotoContent photoContent = (SharePhotoContent)shareContent;
-            List<String> photoUrls = ShareInternalUtility.getPhotoUrls(
-                    photoContent,
-                    callId);
-
-            nativeParams = create(photoContent, photoUrls, shouldFailOnDataError);
-        } else if (shareContent instanceof ShareVideoContent) {
-            final ShareVideoContent videoContent = (ShareVideoContent)shareContent;
-            nativeParams = create(videoContent, shouldFailOnDataError);
-        } else if (shareContent instanceof ShareOpenGraphContent) {
-            final ShareOpenGraphContent openGraphContent = (ShareOpenGraphContent) shareContent;
-            try {
-                JSONObject openGraphActionJSON = ShareInternalUtility.toJSONObjectForCall(
-                        callId, openGraphContent);
-
-                nativeParams = create(openGraphContent, openGraphActionJSON, shouldFailOnDataError);
-            } catch (final JSONException e) {
-                throw new FacebookException(
-                        "Unable to create a JSON Object from the provided ShareOpenGraphContent: "
-                                + e.getMessage());
-            }
-        }
-
-        return nativeParams;
-    }
-
-    private static Bundle create(ShareLinkContent linkContent, boolean dataErrorsFatal) {
-        Bundle params = createBaseParameters(linkContent, dataErrorsFatal);
-
-        Utility.putNonEmptyString(
-                params, ShareConstants.LEGACY_TITLE, linkContent.getContentTitle());
-        Utility.putNonEmptyString(
-                params, ShareConstants.LEGACY_DESCRIPTION, linkContent.getContentDescription());
-        Utility.putUri(params, ShareConstants.LEGACY_IMAGE, linkContent.getImageUrl());
-
-        return params;
-    }
-
-    private static Bundle create(
-            SharePhotoContent photoContent,
-            List<String> imageUrls,
-            boolean dataErrorsFatal) {
-        Bundle params = createBaseParameters(photoContent, dataErrorsFatal);
-
-        params.putStringArrayList(ShareConstants.LEGACY_PHOTOS, new ArrayList<>(imageUrls));
-
-        return params;
-    }
-
-    private static Bundle create(ShareVideoContent videoContent, boolean dataErrorsFatal) {
-        // Not supported
-        return null;
-    }
-
-    private static Bundle create(
-            ShareOpenGraphContent openGraphContent,
-            JSONObject openGraphActionJSON,
-            boolean dataErrorsFatal) {
-        Bundle params = createBaseParameters(openGraphContent, dataErrorsFatal);
-
-        Utility.putNonEmptyString(
-                params,
-                ShareConstants.LEGACY_PREVIEW_PROPERTY_NAME,
-                openGraphContent.getPreviewPropertyName());
-        Utility.putNonEmptyString(
-                params,
-                ShareConstants.LEGACY_ACTION_TYPE,
-                openGraphContent.getAction().getActionType());
-
-        Utility.putNonEmptyString(
-                params,
-                ShareConstants.LEGACY_ACTION,
-                openGraphActionJSON.toString());
-
-        return params;
-    }
-
-    private static Bundle createBaseParameters(ShareContent content, boolean dataErrorsFatal) {
-        Bundle params = new Bundle();
-
-        Utility.putUri(params, ShareConstants.LEGACY_LINK, content.getContentUrl());
-        Utility.putNonEmptyString(params, ShareConstants.LEGACY_PLACE_TAG, content.getPlaceId());
-        Utility.putNonEmptyString(params, ShareConstants.LEGACY_REF, content.getRef());
-
-        params.putBoolean(ShareConstants.LEGACY_DATA_FAILURES_FATAL, dataErrorsFatal);
-
-        List<String> peopleIds = content.getPeopleIds();
-        if (!Utility.isNullOrEmpty(peopleIds)) {
-            params.putStringArrayList(
-                    ShareConstants.LEGACY_FRIEND_TAGS,
-                    new ArrayList<>(peopleIds));
-        }
-
-        return params;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/LikeActionController.java b/facebook/src/main/java/com/facebook/share/internal/LikeActionController.java
deleted file mode 100644
index 04caec8ef..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/LikeActionController.java
+++ /dev/null
@@ -1,1772 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.app.Activity;
-import android.content.*;
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.Looper;
-import android.support.v4.content.LocalBroadcastManager;
-import android.util.Log;
-
-import com.facebook.*;
-import com.facebook.appevents.AppEventsLogger;
-import com.facebook.internal.AnalyticsEvents;
-import com.facebook.internal.AppCall;
-import com.facebook.internal.BundleJSONConverter;
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.internal.FileLruCache;
-import com.facebook.internal.FragmentWrapper;
-import com.facebook.internal.Logger;
-import com.facebook.internal.NativeProtocol;
-import com.facebook.internal.ServerProtocol;
-import com.facebook.internal.Utility;
-import com.facebook.internal.WorkQueue;
-import com.facebook.share.widget.LikeView;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.util.ArrayList;
-import java.util.Locale;
-import java.util.concurrent.ConcurrentHashMap;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- */
-public class LikeActionController {
-
-    public static final String ACTION_LIKE_ACTION_CONTROLLER_UPDATED =
-            "com.facebook.sdk.LikeActionController.UPDATED";
-    public static final String ACTION_LIKE_ACTION_CONTROLLER_DID_ERROR =
-            "com.facebook.sdk.LikeActionController.DID_ERROR";
-    public static final String ACTION_LIKE_ACTION_CONTROLLER_DID_RESET =
-            "com.facebook.sdk.LikeActionController.DID_RESET";
-
-    public static final String ACTION_OBJECT_ID_KEY =
-            "com.facebook.sdk.LikeActionController.OBJECT_ID";
-
-    public static final String ERROR_INVALID_OBJECT_ID = "Invalid Object Id";
-    public static final String ERROR_PUBLISH_ERROR = "Unable to publish the like/unlike action";
-
-    private static final String TAG = LikeActionController.class.getSimpleName();
-
-    private static final int LIKE_ACTION_CONTROLLER_VERSION = 3;
-    private static final int MAX_CACHE_SIZE = 128;
-    // MAX_OBJECT_SUFFIX basically accommodates for 1000 access token changes before the async
-    // disk-cache-clear finishes. The value is reasonably arbitrary.
-    private static final int MAX_OBJECT_SUFFIX = 1000;
-
-    private static final String LIKE_ACTION_CONTROLLER_STORE =
-            "com.facebook.LikeActionController.CONTROLLER_STORE_KEY";
-    private static final String LIKE_ACTION_CONTROLLER_STORE_PENDING_OBJECT_ID_KEY =
-            "PENDING_CONTROLLER_KEY";
-    private static final String LIKE_ACTION_CONTROLLER_STORE_OBJECT_SUFFIX_KEY = "OBJECT_SUFFIX";
-
-    private static final String JSON_INT_VERSION_KEY =
-            "com.facebook.share.internal.LikeActionController.version";
-    private static final String JSON_STRING_OBJECT_ID_KEY = "object_id";
-    private static final String JSON_INT_OBJECT_TYPE_KEY = "object_type";
-    private static final String JSON_STRING_LIKE_COUNT_WITH_LIKE_KEY =
-            "like_count_string_with_like";
-    private static final String JSON_STRING_LIKE_COUNT_WITHOUT_LIKE_KEY =
-            "like_count_string_without_like";
-    private static final String JSON_STRING_SOCIAL_SENTENCE_WITH_LIKE_KEY =
-            "social_sentence_with_like";
-    private static final String JSON_STRING_SOCIAL_SENTENCE_WITHOUT_LIKE_KEY =
-            "social_sentence_without_like";
-    private static final String JSON_BOOL_IS_OBJECT_LIKED_KEY = "is_object_liked";
-    private static final String JSON_STRING_UNLIKE_TOKEN_KEY = "unlike_token";
-    private static final String JSON_BUNDLE_FACEBOOK_DIALOG_ANALYTICS_BUNDLE =
-            "facebook_dialog_analytics_bundle";
-
-    private static final String LIKE_DIALOG_RESPONSE_OBJECT_IS_LIKED_KEY = "object_is_liked";
-    private static final String LIKE_DIALOG_RESPONSE_LIKE_COUNT_STRING_KEY = "like_count_string";
-    private static final String LIKE_DIALOG_RESPONSE_SOCIAL_SENTENCE_KEY = "social_sentence";
-    private static final String LIKE_DIALOG_RESPONSE_UNLIKE_TOKEN_KEY = "unlike_token";
-
-    private static final int ERROR_CODE_OBJECT_ALREADY_LIKED = 3501;
-
-    private static FileLruCache controllerDiskCache;
-    private static final ConcurrentHashMap<String, LikeActionController> cache =
-            new ConcurrentHashMap<>();
-
-    // This MUST be 1 for proper synchronization
-    private static WorkQueue mruCacheWorkQueue = new WorkQueue(1);
-    // This MUST be 1 for proper synchronization
-    private static WorkQueue diskIOWorkQueue = new WorkQueue(1);
-
-    private static Handler handler;
-    private static String objectIdForPendingController;
-    private static boolean isInitialized;
-    private static volatile int objectSuffix;
-    private static AccessTokenTracker accessTokenTracker;
-
-    private String objectId;
-    private LikeView.ObjectType objectType;
-    private boolean isObjectLiked;
-    private String likeCountStringWithLike;
-    private String likeCountStringWithoutLike;
-    private String socialSentenceWithLike;
-    private String socialSentenceWithoutLike;
-    private String unlikeToken;
-
-    private String verifiedObjectId;
-    private boolean objectIsPage;
-    private boolean isObjectLikedOnServer;
-
-    private boolean isPendingLikeOrUnlike;
-
-    private Bundle facebookDialogAnalyticsBundle;
-
-    private AppEventsLogger appEventsLogger;
-
-    /**
-     * Called from CallbackManager to process any pending likes that had resulted in the Like
-     * dialog being displayed
-     *
-     * @param requestCode From the originating call to onActivityResult
-     * @param resultCode  From the originating call to onActivityResult
-     * @param data        From the originating call to onActivityResult
-     * @return Indication of whether the Intent was handled
-     */
-    public static boolean handleOnActivityResult(final int requestCode,
-                                                 final int resultCode,
-                                                 final Intent data) {
-        // See if we were waiting on a Like dialog completion.
-        if (Utility.isNullOrEmpty(objectIdForPendingController)) {
-            Context appContext = FacebookSdk.getApplicationContext();
-            SharedPreferences sharedPreferences = appContext.getSharedPreferences(
-                    LIKE_ACTION_CONTROLLER_STORE,
-                    Context.MODE_PRIVATE);
-
-            objectIdForPendingController = sharedPreferences.getString(
-                    LIKE_ACTION_CONTROLLER_STORE_PENDING_OBJECT_ID_KEY,
-                    null);
-        }
-
-        if (Utility.isNullOrEmpty(objectIdForPendingController)) {
-            // Doesn't look like we were waiting on a Like dialog completion
-            return false;
-        }
-
-        getControllerForObjectId(
-                objectIdForPendingController,
-                LikeView.ObjectType.UNKNOWN,
-                new CreationCallback() {
-                    @Override
-                    public void onComplete(
-                            LikeActionController likeActionController,
-                            FacebookException error) {
-                        if (error == null) {
-                            likeActionController.onActivityResult(
-                                    requestCode,
-                                    resultCode,
-                                    data);
-                        } else {
-                            Utility.logd(TAG, error);
-                        }
-                    }
-                });
-
-        return true;
-    }
-
-    /**
-     * Called by the LikeView when an object-id is set on it.
-     *
-     * @param objectId Object Id
-     * @param callback Callback to be invoked when the LikeActionController has been created.
-     */
-    public static void getControllerForObjectId(
-            String objectId,
-            LikeView.ObjectType objectType,
-            CreationCallback callback) {
-        if (!isInitialized) {
-            performFirstInitialize();
-        }
-
-        LikeActionController controllerForObject = getControllerFromInMemoryCache(objectId);
-        if (controllerForObject != null) {
-            // Direct object-cache hit
-            verifyControllerAndInvokeCallback(controllerForObject, objectType, callback);
-        } else {
-            diskIOWorkQueue.addActiveWorkItem(
-                    new CreateLikeActionControllerWorkItem(objectId, objectType, callback));
-        }
-    }
-
-    private static void verifyControllerAndInvokeCallback(
-            LikeActionController likeActionController,
-            LikeView.ObjectType objectType,
-            CreationCallback callback) {
-        LikeView.ObjectType bestObjectType = ShareInternalUtility.getMostSpecificObjectType(
-                objectType,
-                likeActionController.objectType);
-        FacebookException error = null;
-        if (bestObjectType == null) {
-            // Looks like the existing controller has an object_type for this object_id that is
-            // not compatible with the requested object type.
-            error = new FacebookException(
-                    "Object with id:\"%s\" is already marked as type:\"%s\". " +
-                            "Cannot change the type to:\"%s\"",
-                    likeActionController.objectId,
-                    likeActionController.objectType.toString(),
-                    objectType.toString());
-            likeActionController = null;
-        } else {
-            likeActionController.objectType = bestObjectType;
-        }
-
-        invokeCallbackWithController(callback, likeActionController, error);
-    }
-
-    /**
-     * NOTE: This MUST be called ONLY via the CreateLikeActionControllerWorkItem class to ensure
-     * that it happens on the right thread, at the right time.
-     */
-    private static void createControllerForObjectIdAndType(
-            String objectId,
-            LikeView.ObjectType objectType,
-            CreationCallback callback) {
-        // Check again to see if the controller was created before attempting to deserialize/create
-        // one. Need to check this in the case where multiple LikeViews are looking for a controller
-        // for the same object and all got queued up to create one. We only want the first one to go
-        // through with the creation, and the rest should get the same instance from the
-        // object-cache.
-        LikeActionController controllerForObject = getControllerFromInMemoryCache(objectId);
-        if (controllerForObject != null) {
-            // Direct object-cache hit
-            verifyControllerAndInvokeCallback(controllerForObject, objectType, callback);
-            return;
-        }
-
-        // Try deserialize from disk
-        controllerForObject = deserializeFromDiskSynchronously(objectId);
-
-        if (controllerForObject == null) {
-            controllerForObject = new LikeActionController(objectId, objectType);
-            serializeToDiskAsync(controllerForObject);
-        }
-
-        // Update object-cache.
-        putControllerInMemoryCache(objectId, controllerForObject);
-
-        // Refresh the controller on the Main thread.
-        final LikeActionController controllerToRefresh = controllerForObject;
-        handler.post(new Runnable() {
-            @Override
-            public void run() {
-                controllerToRefresh.refreshStatusAsync();
-            }
-        });
-
-        invokeCallbackWithController(callback, controllerToRefresh, null);
-    }
-
-    private synchronized static void performFirstInitialize() {
-        if (isInitialized) {
-            return;
-        }
-
-        handler = new Handler(Looper.getMainLooper());
-
-        Context appContext = FacebookSdk.getApplicationContext();
-        SharedPreferences sharedPreferences = appContext.getSharedPreferences(
-                LIKE_ACTION_CONTROLLER_STORE,
-                Context.MODE_PRIVATE);
-
-        objectSuffix = sharedPreferences.getInt(LIKE_ACTION_CONTROLLER_STORE_OBJECT_SUFFIX_KEY, 1);
-        controllerDiskCache = new FileLruCache(TAG, new FileLruCache.Limits());
-
-        registerAccessTokenTracker();
-
-        CallbackManagerImpl.registerStaticCallback(
-                CallbackManagerImpl.RequestCodeOffset.Like.toRequestCode(),
-                new CallbackManagerImpl.Callback() {
-                    @Override
-                    public boolean onActivityResult(int resultCode, Intent data) {
-                        return handleOnActivityResult(
-                                CallbackManagerImpl.RequestCodeOffset.Like.toRequestCode(),
-                                resultCode,
-                                data);
-                    }
-                });
-
-        isInitialized = true;
-    }
-
-    private static void invokeCallbackWithController(
-            final CreationCallback callback,
-            final LikeActionController controller,
-            final FacebookException error) {
-        if (callback == null) {
-            return;
-        }
-
-        handler.post(new Runnable() {
-            @Override
-            public void run() {
-                callback.onComplete(controller, error);
-            }
-        });
-    }
-
-    //
-    // In-memory mru-caching code
-    //
-
-    private static void registerAccessTokenTracker() {
-        accessTokenTracker = new AccessTokenTracker() {
-            @Override
-            protected void onCurrentAccessTokenChanged(
-                    AccessToken oldAccessToken,
-                    AccessToken currentAccessToken) {
-                Context appContext = FacebookSdk.getApplicationContext();
-                if (currentAccessToken == null) {
-                    // Bump up the objectSuffix so that we don't have a filename collision between a
-                    // cache-clear and and a cache-read/write.
-                    //
-                    // NOTE: We know that onReceive() was called on the main thread. This means that
-                    // even this code is running on the main thread, and therefore, there aren't
-                    // synchronization issues with incrementing the objectSuffix and clearing the
-                    // caches here.
-                    objectSuffix = (objectSuffix + 1) % MAX_OBJECT_SUFFIX;
-                    appContext.getSharedPreferences(
-                            LIKE_ACTION_CONTROLLER_STORE,
-                            Context.MODE_PRIVATE)
-                            .edit()
-                            .putInt(LIKE_ACTION_CONTROLLER_STORE_OBJECT_SUFFIX_KEY, objectSuffix)
-                            .apply();
-
-                    // Only clearing the actual caches. The MRU index will self-clean with usage.
-                    // Clearing the caches is necessary to prevent leaking like-state across
-                    // users.
-                    cache.clear();
-                    controllerDiskCache.clearCache();
-                }
-                broadcastAction(null, ACTION_LIKE_ACTION_CONTROLLER_DID_RESET);
-            }
-        };
-    }
-
-    private static void putControllerInMemoryCache(
-            String objectId,
-            LikeActionController controllerForObject) {
-        String cacheKey = getCacheKeyForObjectId(objectId);
-        // Move this object to the front. Also trim cache if necessary
-        mruCacheWorkQueue.addActiveWorkItem(new MRUCacheWorkItem(cacheKey, true));
-
-        cache.put(cacheKey, controllerForObject);
-    }
-
-    private static LikeActionController getControllerFromInMemoryCache(String objectId) {
-        String cacheKey = getCacheKeyForObjectId(objectId);
-
-        LikeActionController controller = cache.get(cacheKey);
-        if (controller != null) {
-            // Move this object to the front
-            mruCacheWorkQueue.addActiveWorkItem(new MRUCacheWorkItem(cacheKey, false));
-        }
-
-        return controller;
-    }
-
-    //
-    // Disk caching code
-    //
-
-    private static void serializeToDiskAsync(LikeActionController controller) {
-        String controllerJson = serializeToJson(controller);
-        String cacheKey = getCacheKeyForObjectId(controller.objectId);
-
-        if (!Utility.isNullOrEmpty(controllerJson) && !Utility.isNullOrEmpty(cacheKey)) {
-            diskIOWorkQueue.addActiveWorkItem(
-                    new SerializeToDiskWorkItem(cacheKey, controllerJson));
-        }
-    }
-
-    /**
-     * NOTE: This MUST be called ONLY via the SerializeToDiskWorkItem class to ensure that it
-     * happens on the right thread, at the right time.
-     */
-    private static void serializeToDiskSynchronously(String cacheKey, String controllerJson) {
-        OutputStream outputStream = null;
-        try {
-            outputStream = controllerDiskCache.openPutStream(cacheKey);
-            outputStream.write(controllerJson.getBytes());
-        } catch (IOException e) {
-            Log.e(TAG, "Unable to serialize controller to disk", e);
-        } finally {
-            if (outputStream != null) {
-                Utility.closeQuietly(outputStream);
-            }
-        }
-    }
-
-    /**
-     * NOTE: This MUST be called ONLY via the CreateLikeActionControllerWorkItem class to ensure
-     * that it happens on the right thread, at the right time.
-     */
-    private static LikeActionController deserializeFromDiskSynchronously(String objectId) {
-        LikeActionController controller = null;
-
-        InputStream inputStream = null;
-        try {
-            String cacheKey = getCacheKeyForObjectId(objectId);
-            inputStream = controllerDiskCache.get(cacheKey);
-            if (inputStream != null) {
-                String controllerJsonString = Utility.readStreamToString(inputStream);
-                if (!Utility.isNullOrEmpty(controllerJsonString)) {
-                    controller = deserializeFromJson(controllerJsonString);
-                }
-            }
-        } catch (IOException e) {
-            Log.e(TAG, "Unable to deserialize controller from disk", e);
-            controller = null;
-        } finally {
-            if (inputStream != null) {
-                Utility.closeQuietly(inputStream);
-            }
-        }
-
-        return controller;
-    }
-
-    private static LikeActionController deserializeFromJson(String controllerJsonString) {
-        LikeActionController controller;
-
-        try {
-            JSONObject controllerJson = new JSONObject(controllerJsonString);
-            int version = controllerJson.optInt(JSON_INT_VERSION_KEY, -1);
-            if (version != LIKE_ACTION_CONTROLLER_VERSION) {
-                // Don't attempt to deserialize a controller that might be serialized differently
-                // than expected.
-                return null;
-            }
-
-            String objectId = controllerJson.getString(JSON_STRING_OBJECT_ID_KEY);
-            int objectTypeInt = controllerJson.optInt(
-                    JSON_INT_OBJECT_TYPE_KEY,
-                    LikeView.ObjectType.UNKNOWN.getValue());
-
-            controller = new LikeActionController(
-                    objectId,
-                    LikeView.ObjectType.fromInt(objectTypeInt));
-
-            // Make sure to default to null and not empty string, to keep the logic elsewhere
-            // functioning properly.
-            controller.likeCountStringWithLike =
-                    controllerJson.optString(JSON_STRING_LIKE_COUNT_WITH_LIKE_KEY, null);
-            controller.likeCountStringWithoutLike =
-                    controllerJson.optString(JSON_STRING_LIKE_COUNT_WITHOUT_LIKE_KEY, null);
-            controller.socialSentenceWithLike =
-                    controllerJson.optString(JSON_STRING_SOCIAL_SENTENCE_WITH_LIKE_KEY, null);
-            controller.socialSentenceWithoutLike =
-                    controllerJson.optString(JSON_STRING_SOCIAL_SENTENCE_WITHOUT_LIKE_KEY, null);
-            controller.isObjectLiked = controllerJson.optBoolean(JSON_BOOL_IS_OBJECT_LIKED_KEY);
-            controller.unlikeToken = controllerJson.optString(JSON_STRING_UNLIKE_TOKEN_KEY, null);
-
-            JSONObject analyticsJSON = controllerJson.optJSONObject(
-                    JSON_BUNDLE_FACEBOOK_DIALOG_ANALYTICS_BUNDLE);
-            if (analyticsJSON != null) {
-                controller.facebookDialogAnalyticsBundle =
-                        BundleJSONConverter.convertToBundle(analyticsJSON);
-            }
-        } catch (JSONException e) {
-            Log.e(TAG, "Unable to deserialize controller from JSON", e);
-            controller = null;
-        }
-
-        return controller;
-    }
-
-    private static String serializeToJson(LikeActionController controller) {
-        JSONObject controllerJson = new JSONObject();
-        try {
-            controllerJson.put(JSON_INT_VERSION_KEY, LIKE_ACTION_CONTROLLER_VERSION);
-            controllerJson.put(JSON_STRING_OBJECT_ID_KEY, controller.objectId);
-            controllerJson.put(JSON_INT_OBJECT_TYPE_KEY, controller.objectType.getValue());
-            controllerJson.put(
-                    JSON_STRING_LIKE_COUNT_WITH_LIKE_KEY,
-                    controller.likeCountStringWithLike);
-            controllerJson.put(
-                    JSON_STRING_LIKE_COUNT_WITHOUT_LIKE_KEY,
-                    controller.likeCountStringWithoutLike);
-            controllerJson.put(
-                    JSON_STRING_SOCIAL_SENTENCE_WITH_LIKE_KEY,
-                    controller.socialSentenceWithLike);
-            controllerJson.put(
-                    JSON_STRING_SOCIAL_SENTENCE_WITHOUT_LIKE_KEY,
-                    controller.socialSentenceWithoutLike);
-            controllerJson.put(JSON_BOOL_IS_OBJECT_LIKED_KEY, controller.isObjectLiked);
-            controllerJson.put(JSON_STRING_UNLIKE_TOKEN_KEY, controller.unlikeToken);
-            if (controller.facebookDialogAnalyticsBundle != null) {
-                JSONObject analyticsJSON =
-                        BundleJSONConverter.convertToJSON(
-                                controller.facebookDialogAnalyticsBundle);
-                if (analyticsJSON != null) {
-                    controllerJson.put(
-                            JSON_BUNDLE_FACEBOOK_DIALOG_ANALYTICS_BUNDLE,
-                            analyticsJSON);
-                }
-            }
-        } catch (JSONException e) {
-            Log.e(TAG, "Unable to serialize controller to JSON", e);
-            return null;
-        }
-
-        return controllerJson.toString();
-    }
-
-    private static String getCacheKeyForObjectId(String objectId) {
-        String accessTokenPortion = null;
-        AccessToken accessToken = AccessToken.getCurrentAccessToken();
-        if (accessToken != null) {
-            accessTokenPortion = accessToken.getToken();
-        }
-        if (accessTokenPortion != null) {
-            // Cache-key collisions are not something to worry about here, since we only store state
-            // for one access token. Even in the case where the previous access tokens serialized
-            // files have not been deleted yet, the objectSuffix will be different due to the access
-            // token change, thus making the key different.
-            accessTokenPortion = Utility.md5hash(accessTokenPortion);
-        }
-        return String.format(
-                Locale.ROOT,
-                "%s|%s|com.fb.sdk.like|%d",
-                objectId,
-                Utility.coerceValueIfNullOrEmpty(accessTokenPortion, ""),
-                objectSuffix);
-    }
-
-    //
-    // Broadcast handling code
-    //
-
-    private static void broadcastAction(
-            LikeActionController controller,
-            String action) {
-        broadcastAction(controller, action, null);
-    }
-
-    private static void broadcastAction(
-            LikeActionController controller,
-            String action,
-            Bundle data) {
-        Intent broadcastIntent = new Intent(action);
-        if (controller != null) {
-            if (data == null) {
-                data = new Bundle();
-            }
-
-            data.putString(ACTION_OBJECT_ID_KEY, controller.getObjectId());
-        }
-
-        if (data != null) {
-            broadcastIntent.putExtras(data);
-        }
-        LocalBroadcastManager.getInstance(FacebookSdk.getApplicationContext())
-                .sendBroadcast(broadcastIntent);
-    }
-
-    /**
-     * Constructor
-     */
-    private LikeActionController(String objectId, LikeView.ObjectType objectType) {
-        this.objectId = objectId;
-        this.objectType = objectType;
-    }
-
-    /**
-     * Gets the the associated object id
-     *
-     * @return object id
-     */
-    public String getObjectId() {
-        return objectId;
-    }
-
-    /**
-     * Gets the String representation of the like-count for the associated object
-     *
-     * @return String representation of the like-count for the associated object
-     */
-    public String getLikeCountString() {
-        return isObjectLiked ? likeCountStringWithLike : likeCountStringWithoutLike;
-    }
-
-    /**
-     * Gets the String representation of the like-count for the associated object
-     *
-     * @return String representation of the like-count for the associated object
-     */
-    public String getSocialSentence() {
-        return isObjectLiked ? socialSentenceWithLike : socialSentenceWithoutLike;
-    }
-
-    /**
-     * Indicates whether the associated object is liked
-     *
-     * @return Indication of whether the associated object is liked
-     */
-    public boolean isObjectLiked() {
-        return isObjectLiked;
-    }
-
-    /**
-     * Indicates whether the LikeView should enable itself.
-     *
-     * @return Indication of whether the LikeView should enable itself.
-     */
-    public boolean shouldEnableView() {
-        if (LikeDialog.canShowNativeDialog() || LikeDialog.canShowWebFallback()) {
-            return true;
-        }
-        if (objectIsPage || (objectType == LikeView.ObjectType.PAGE)) {
-            // If we can't use the dialogs, then we can't like Pages.
-            // Before any requests are made to the server, we have to rely on the object type set
-            // by the app. If we have permissions to make requests, we will know the real type after
-            // the first request.
-            return false;
-        }
-
-        // See if we have publish permissions.
-        // NOTE: This will NOT be accurate if the app has the type set as UNKNOWN, and the
-        // underlying object is a page.
-        AccessToken token = AccessToken.getCurrentAccessToken();
-        return token != null
-                && token.getPermissions() != null
-                && token.getPermissions().contains("publish_actions");
-    }
-
-    /**
-     * Entry-point to the code that performs the like/unlike action.
-     */
-    public void toggleLike(
-            Activity activity,
-            FragmentWrapper fragment,
-            Bundle analyticsParameters) {
-        boolean shouldLikeObject = !this.isObjectLiked;
-
-        if (canUseOGPublish()) {
-            // Update UI Like state optimistically
-            updateLikeState(shouldLikeObject);
-            if (isPendingLikeOrUnlike) {
-                // If the user toggled the button quickly, and there is still a publish underway,
-                // don't fire off another request. Also log this behavior.
-
-                getAppEventsLogger().logSdkEvent(
-                        AnalyticsEvents.EVENT_LIKE_VIEW_DID_UNDO_QUICKLY,
-                        null,
-                        analyticsParameters);
-            } else if (!publishLikeOrUnlikeAsync(shouldLikeObject, analyticsParameters)) {
-                // We were not able to send a graph request to unlike or like the object
-                // Undo the optimistic state-update and show the dialog instead
-                updateLikeState(!shouldLikeObject);
-                presentLikeDialog(activity, fragment, analyticsParameters);
-            }
-        } else {
-            presentLikeDialog(activity, fragment, analyticsParameters);
-        }
-    }
-
-    private AppEventsLogger getAppEventsLogger() {
-        if (appEventsLogger == null) {
-            appEventsLogger = AppEventsLogger.newLogger(FacebookSdk.getApplicationContext());
-        }
-        return appEventsLogger;
-    }
-
-    private boolean publishLikeOrUnlikeAsync(
-            boolean shouldLikeObject,
-            Bundle analyticsParameters) {
-        boolean requested = false;
-        if (canUseOGPublish()) {
-            if (shouldLikeObject) {
-                requested = true;
-                publishLikeAsync(analyticsParameters);
-            } else if (!Utility.isNullOrEmpty(this.unlikeToken)) {
-                requested = true;
-                publishUnlikeAsync(analyticsParameters);
-            }
-        }
-
-        return requested;
-    }
-
-    /**
-     * Only to be called after an OG-publish was attempted and something went wrong. The Button
-     * state is reverted and an error is returned to the LikeViews
-     */
-    private void publishDidError(boolean oldLikeState) {
-        updateLikeState(oldLikeState);
-
-        Bundle errorBundle = new Bundle();
-        errorBundle.putString(
-                NativeProtocol.STATUS_ERROR_DESCRIPTION,
-                ERROR_PUBLISH_ERROR);
-
-        broadcastAction(
-                LikeActionController.this,
-                ACTION_LIKE_ACTION_CONTROLLER_DID_ERROR,
-                errorBundle);
-    }
-
-    private void updateLikeState(boolean isObjectLiked) {
-        updateState(isObjectLiked,
-                this.likeCountStringWithLike,
-                this.likeCountStringWithoutLike,
-                this.socialSentenceWithLike,
-                this.socialSentenceWithoutLike,
-                this.unlikeToken);
-    }
-
-    private void updateState(boolean isObjectLiked,
-                             String likeCountStringWithLike,
-                             String likeCountStringWithoutLike,
-                             String socialSentenceWithLike,
-                             String socialSentenceWithoutLike,
-                             String unlikeToken) {
-        // Normalize all empty strings to null, so that we don't have any problems with comparison.
-        likeCountStringWithLike = Utility.coerceValueIfNullOrEmpty(likeCountStringWithLike, null);
-        likeCountStringWithoutLike =
-                Utility.coerceValueIfNullOrEmpty(likeCountStringWithoutLike, null);
-        socialSentenceWithLike = Utility.coerceValueIfNullOrEmpty(socialSentenceWithLike, null);
-        socialSentenceWithoutLike =
-                Utility.coerceValueIfNullOrEmpty(socialSentenceWithoutLike, null);
-        unlikeToken = Utility.coerceValueIfNullOrEmpty(unlikeToken, null);
-
-        boolean stateChanged = isObjectLiked != this.isObjectLiked ||
-                !Utility.areObjectsEqual(
-                        likeCountStringWithLike,
-                        this.likeCountStringWithLike) ||
-                !Utility.areObjectsEqual(
-                        likeCountStringWithoutLike,
-                        this.likeCountStringWithoutLike) ||
-                !Utility.areObjectsEqual(socialSentenceWithLike, this.socialSentenceWithLike) ||
-                !Utility.areObjectsEqual(
-                        socialSentenceWithoutLike,
-                        this.socialSentenceWithoutLike) ||
-                !Utility.areObjectsEqual(unlikeToken, this.unlikeToken);
-
-        if (!stateChanged) {
-            return;
-        }
-
-        this.isObjectLiked = isObjectLiked;
-        this.likeCountStringWithLike = likeCountStringWithLike;
-        this.likeCountStringWithoutLike = likeCountStringWithoutLike;
-        this.socialSentenceWithLike = socialSentenceWithLike;
-        this.socialSentenceWithoutLike = socialSentenceWithoutLike;
-        this.unlikeToken = unlikeToken;
-
-        serializeToDiskAsync(this);
-
-        broadcastAction(this, ACTION_LIKE_ACTION_CONTROLLER_UPDATED);
-    }
-
-    private void presentLikeDialog(
-            final Activity activity,
-            final FragmentWrapper fragmentWrapper,
-            final Bundle analyticsParameters) {
-        String analyticsEvent = null;
-
-        if (LikeDialog.canShowNativeDialog()) {
-            analyticsEvent = AnalyticsEvents.EVENT_LIKE_VIEW_DID_PRESENT_DIALOG;
-        } else if (LikeDialog.canShowWebFallback()) {
-            analyticsEvent = AnalyticsEvents.EVENT_LIKE_VIEW_DID_PRESENT_FALLBACK;
-        } else {
-            // We will get here if the user tapped the button when dialogs cannot be shown.
-            logAppEventForError("present_dialog", analyticsParameters);
-            Utility.logd(TAG, "Cannot show the Like Dialog on this device.");
-
-            // If we got to this point, we should ask the views to check if they should now
-            // be disabled.
-            broadcastAction(null, ACTION_LIKE_ACTION_CONTROLLER_UPDATED);
-        }
-
-        // Using the value of analyticsEvent to see if we can show any version of the dialog.
-        // Written this way just to prevent extra lines of code.
-        if (analyticsEvent != null) {
-            String objectTypeString = (this.objectType != null)
-                    ? this.objectType.toString()
-                    : LikeView.ObjectType.UNKNOWN.toString();
-            LikeContent likeContent = new LikeContent.Builder()
-                    .setObjectId(this.objectId)
-                    .setObjectType(objectTypeString)
-                    .build();
-
-            if (fragmentWrapper != null) {
-                new LikeDialog(fragmentWrapper).show(likeContent);
-            } else {
-                new LikeDialog(activity).show(likeContent);
-            }
-
-            saveState(analyticsParameters);
-
-            getAppEventsLogger().logSdkEvent(
-                    AnalyticsEvents.EVENT_LIKE_VIEW_DID_PRESENT_DIALOG,
-                    null,
-                    analyticsParameters);
-        }
-    }
-
-    private void onActivityResult(
-            int requestCode,
-            int resultCode,
-            Intent data) {
-        // Look for results
-        ShareInternalUtility.handleActivityResult(
-                requestCode,
-                resultCode,
-                data,
-                getResultProcessor(facebookDialogAnalyticsBundle));
-
-        // The handlers from above will run synchronously. So by the time we get here, it should be
-        // safe to stop tracking this call and also serialize the controller to disk
-        clearState();
-    }
-
-    private ResultProcessor getResultProcessor(final Bundle analyticsParameters) {
-        return new ResultProcessor(null) {
-            @Override
-            public void onSuccess(AppCall appCall, Bundle data) {
-                if (data == null || !data.containsKey(LIKE_DIALOG_RESPONSE_OBJECT_IS_LIKED_KEY)) {
-                    // This is an empty result that we can't handle.
-                    return;
-                }
-
-                boolean isObjectLiked = data.getBoolean(LIKE_DIALOG_RESPONSE_OBJECT_IS_LIKED_KEY);
-
-                // Default to known/cached state, if properties are missing.
-                String likeCountStringWithLike =
-                        LikeActionController.this.likeCountStringWithLike;
-                String likeCountStringWithoutLike =
-                        LikeActionController.this.likeCountStringWithoutLike;
-                if (data.containsKey(LIKE_DIALOG_RESPONSE_LIKE_COUNT_STRING_KEY)) {
-                    likeCountStringWithLike =
-                            data.getString(LIKE_DIALOG_RESPONSE_LIKE_COUNT_STRING_KEY);
-                    likeCountStringWithoutLike = likeCountStringWithLike;
-                }
-
-                String socialSentenceWithLike = LikeActionController.this.socialSentenceWithLike;
-                String socialSentenceWithoutWithoutLike =
-                        LikeActionController.this.socialSentenceWithoutLike;
-                if (data.containsKey(LIKE_DIALOG_RESPONSE_SOCIAL_SENTENCE_KEY)) {
-                    socialSentenceWithLike = data.getString(
-                            LIKE_DIALOG_RESPONSE_SOCIAL_SENTENCE_KEY);
-                    socialSentenceWithoutWithoutLike = socialSentenceWithLike;
-                }
-
-                String unlikeToken = data.containsKey(LIKE_DIALOG_RESPONSE_OBJECT_IS_LIKED_KEY)
-                        ? data.getString(LIKE_DIALOG_RESPONSE_UNLIKE_TOKEN_KEY)
-                        : LikeActionController.this.unlikeToken;
-
-                Bundle logParams =
-                        (analyticsParameters == null) ? new Bundle() : analyticsParameters;
-                logParams.putString(
-                        AnalyticsEvents.PARAMETER_CALL_ID,
-                        appCall.getCallId().toString());
-                getAppEventsLogger().logSdkEvent(
-                        AnalyticsEvents.EVENT_LIKE_VIEW_DIALOG_DID_SUCCEED,
-                        null,
-                        logParams);
-
-                updateState(
-                        isObjectLiked,
-                        likeCountStringWithLike,
-                        likeCountStringWithoutLike,
-                        socialSentenceWithLike,
-                        socialSentenceWithoutWithoutLike,
-                        unlikeToken);
-            }
-
-            @Override
-            public void onError(AppCall appCall, FacebookException error) {
-                Logger.log(
-                        LoggingBehavior.REQUESTS,
-                        TAG,
-                        "Like Dialog failed with error : %s",
-                        error);
-
-                Bundle logParams = analyticsParameters == null ? new Bundle() : analyticsParameters;
-                logParams.putString(
-                        AnalyticsEvents.PARAMETER_CALL_ID,
-                        appCall.getCallId().toString());
-
-                // Log the error and AppEvent
-                logAppEventForError("present_dialog", logParams);
-
-                broadcastAction(
-                        LikeActionController.this,
-                        ACTION_LIKE_ACTION_CONTROLLER_DID_ERROR,
-                        NativeProtocol.createBundleForException(error));
-            }
-
-            @Override
-            public void onCancel(AppCall appCall) {
-                onError(appCall, new FacebookOperationCanceledException());
-            }
-        };
-    }
-
-    private void saveState(Bundle analyticsParameters) {
-        // Save off the call id for processing the response
-        storeObjectIdForPendingController(objectId);
-
-        // Store off the analytics parameters as well, for completion-logging
-        facebookDialogAnalyticsBundle = analyticsParameters;
-
-        // Serialize to disk, in case we get terminated while waiting for the dialog to complete
-        serializeToDiskAsync(this);
-    }
-
-    private void clearState() {
-        facebookDialogAnalyticsBundle = null;
-
-        storeObjectIdForPendingController(null);
-    }
-
-    private static void storeObjectIdForPendingController(String objectId) {
-        objectIdForPendingController = objectId;
-        Context appContext = FacebookSdk.getApplicationContext();
-
-        appContext.getSharedPreferences(LIKE_ACTION_CONTROLLER_STORE, Context.MODE_PRIVATE)
-                .edit()
-                .putString(
-                        LIKE_ACTION_CONTROLLER_STORE_PENDING_OBJECT_ID_KEY,
-                        objectIdForPendingController)
-                .apply();
-    }
-
-    private boolean canUseOGPublish() {
-        AccessToken accessToken = AccessToken.getCurrentAccessToken();
-        // Verify that the object isn't a Page, that we have permissions and that, if we're
-        // unliking, then we have an unlike token.
-        return !objectIsPage &&
-                verifiedObjectId != null &&
-                accessToken != null &&
-                accessToken.getPermissions() != null &&
-                accessToken.getPermissions().contains("publish_actions");
-    }
-
-    private void publishLikeAsync(final Bundle analyticsParameters) {
-        isPendingLikeOrUnlike = true;
-
-        fetchVerifiedObjectId(new RequestCompletionCallback() {
-            @Override
-            public void onComplete() {
-                if (Utility.isNullOrEmpty(verifiedObjectId)) {
-                    // Could not get a verified id
-                    Bundle errorBundle = new Bundle();
-                    errorBundle.putString(
-                            NativeProtocol.STATUS_ERROR_DESCRIPTION,
-                            ERROR_INVALID_OBJECT_ID);
-
-                    broadcastAction(
-                            LikeActionController.this,
-                            ACTION_LIKE_ACTION_CONTROLLER_DID_ERROR,
-                            errorBundle);
-                    return;
-                }
-
-                // Perform the Like.
-                GraphRequestBatch requestBatch = new GraphRequestBatch();
-                final PublishLikeRequestWrapper likeRequest =
-                        new PublishLikeRequestWrapper(verifiedObjectId, objectType);
-                likeRequest.addToBatch(requestBatch);
-                requestBatch.addCallback(new GraphRequestBatch.Callback() {
-                    @Override
-                    public void onBatchCompleted(GraphRequestBatch batch) {
-                        isPendingLikeOrUnlike = false;
-
-                        if (likeRequest.getError() != null) {
-                            // We already updated the UI to show button in the Liked state. Since
-                            // this failed, let's revert back to the Unliked state and broadcast
-                            // an error
-                            publishDidError(false);
-                        } else {
-                            unlikeToken =
-                                    Utility.coerceValueIfNullOrEmpty(likeRequest.unlikeToken, null);
-                            isObjectLikedOnServer = true;
-
-                            getAppEventsLogger().logSdkEvent(
-                                    AnalyticsEvents.EVENT_LIKE_VIEW_DID_LIKE,
-                                    null,
-                                    analyticsParameters);
-
-                            // See if the user toggled the button back while this request was
-                            // completing
-                            publishAgainIfNeeded(analyticsParameters);
-                        }
-                    }
-                });
-
-                requestBatch.executeAsync();
-            }
-        });
-    }
-
-    private void publishUnlikeAsync(final Bundle analyticsParameters) {
-        isPendingLikeOrUnlike = true;
-
-        // Perform the Unlike.
-        GraphRequestBatch requestBatch = new GraphRequestBatch();
-        final PublishUnlikeRequestWrapper unlikeRequest =
-                new PublishUnlikeRequestWrapper(unlikeToken);
-        unlikeRequest.addToBatch(requestBatch);
-        requestBatch.addCallback(new GraphRequestBatch.Callback() {
-            @Override
-            public void onBatchCompleted(GraphRequestBatch batch) {
-                isPendingLikeOrUnlike = false;
-
-                if (unlikeRequest.getError() != null) {
-                    // We already updated the UI to show button in the Unliked state. Since this
-                    // failed, let's revert back to the Liked state and broadcast an error.
-                    publishDidError(true);
-                } else {
-                    unlikeToken = null;
-                    isObjectLikedOnServer = false;
-
-                    getAppEventsLogger().logSdkEvent(
-                            AnalyticsEvents.EVENT_LIKE_VIEW_DID_UNLIKE,
-                            null,
-                            analyticsParameters);
-
-                    // See if the user toggled the button back while this request was
-                    // completing
-                    publishAgainIfNeeded(analyticsParameters);
-                }
-            }
-        });
-
-        requestBatch.executeAsync();
-    }
-
-    private void refreshStatusAsync() {
-        AccessToken accessToken = AccessToken.getCurrentAccessToken();
-        if (accessToken == null) {
-            // Only when we know that there is no active access token should we attempt getting like
-            // state from the service. Otherwise, use the access token to make sure we get the
-            // correct like state.
-            refreshStatusViaService();
-            return;
-        }
-
-        fetchVerifiedObjectId(new RequestCompletionCallback() {
-            @Override
-            public void onComplete() {
-                final LikeRequestWrapper likeRequestWrapper;
-                switch (objectType) {
-                    case PAGE:
-                        likeRequestWrapper = new GetPageLikesRequestWrapper(verifiedObjectId);
-                        break;
-                    default:
-                        likeRequestWrapper =
-                                new GetOGObjectLikesRequestWrapper(verifiedObjectId, objectType);
-                        break;
-                }
-                final GetEngagementRequestWrapper engagementRequest =
-                        new GetEngagementRequestWrapper(verifiedObjectId, objectType);
-
-                GraphRequestBatch requestBatch = new GraphRequestBatch();
-                likeRequestWrapper.addToBatch(requestBatch);
-                engagementRequest.addToBatch(requestBatch);
-
-                requestBatch.addCallback(new GraphRequestBatch.Callback() {
-                    @Override
-                    public void onBatchCompleted(GraphRequestBatch batch) {
-                        if (likeRequestWrapper.getError() != null ||
-                                engagementRequest.getError() != null) {
-                            // Refreshing is best-effort. If the refresh fails, don't lose old
-                            // state.
-                            Logger.log(
-                                    LoggingBehavior.REQUESTS,
-                                    TAG,
-                                    "Unable to refresh like state for id: '%s'", objectId);
-                            return;
-                        }
-
-                        updateState(
-                                likeRequestWrapper.isObjectLiked(),
-                                engagementRequest.likeCountStringWithLike,
-                                engagementRequest.likeCountStringWithoutLike,
-                                engagementRequest.socialSentenceStringWithLike,
-                                engagementRequest.socialSentenceStringWithoutLike,
-                                likeRequestWrapper.getUnlikeToken());
-                    }
-                });
-
-                requestBatch.executeAsync();
-            }
-        });
-    }
-
-    private void refreshStatusViaService() {
-        LikeStatusClient likeStatusClient = new LikeStatusClient(
-                FacebookSdk.getApplicationContext(),
-                FacebookSdk.getApplicationId(),
-                objectId);
-        if (!likeStatusClient.start()) {
-            return;
-        }
-
-        LikeStatusClient.CompletedListener callback = new LikeStatusClient.CompletedListener() {
-            @Override
-            public void completed(Bundle result) {
-                // Don't lose old state if the service response is incomplete.
-                if (result == null || !result.containsKey(ShareConstants.EXTRA_OBJECT_IS_LIKED)) {
-                    return;
-                }
-
-                boolean objectIsLiked = result.getBoolean(ShareConstants.EXTRA_OBJECT_IS_LIKED);
-
-                String likeCountWithLike =
-                        result.containsKey(ShareConstants.EXTRA_LIKE_COUNT_STRING_WITH_LIKE)
-                                ? result.getString(ShareConstants.EXTRA_LIKE_COUNT_STRING_WITH_LIKE)
-                                : LikeActionController.this.likeCountStringWithLike;
-
-                String likeCountWithoutLike =
-                        result.containsKey(ShareConstants.EXTRA_LIKE_COUNT_STRING_WITHOUT_LIKE)
-                                ? result.getString(
-                                ShareConstants.EXTRA_LIKE_COUNT_STRING_WITHOUT_LIKE)
-                                : LikeActionController.this.likeCountStringWithoutLike;
-
-                String socialSentenceWithLike =
-                        result.containsKey(ShareConstants.EXTRA_SOCIAL_SENTENCE_WITH_LIKE)
-                                ? result.getString(ShareConstants.EXTRA_SOCIAL_SENTENCE_WITH_LIKE)
-                                : LikeActionController.this.socialSentenceWithLike;
-
-                String socialSentenceWithoutLike =
-                        result.containsKey(ShareConstants.EXTRA_SOCIAL_SENTENCE_WITHOUT_LIKE)
-                                ? result.getString(
-                                ShareConstants.EXTRA_SOCIAL_SENTENCE_WITHOUT_LIKE)
-                                : LikeActionController.this.socialSentenceWithoutLike;
-
-                String unlikeToken =
-                        result.containsKey(ShareConstants.EXTRA_UNLIKE_TOKEN)
-                                ? result.getString(ShareConstants.EXTRA_UNLIKE_TOKEN)
-                                : LikeActionController.this.unlikeToken;
-
-                updateState(
-                        objectIsLiked,
-                        likeCountWithLike,
-                        likeCountWithoutLike,
-                        socialSentenceWithLike,
-                        socialSentenceWithoutLike,
-                        unlikeToken);
-            }
-        };
-
-        likeStatusClient.setCompletedListener(callback);
-    }
-
-    private void publishAgainIfNeeded(final Bundle analyticsParameters) {
-        if (isObjectLiked != isObjectLikedOnServer &&
-                !publishLikeOrUnlikeAsync(isObjectLiked, analyticsParameters)) {
-            // Unable to re-publish the new desired state. Signal that there is an error and
-            // revert the like state back.
-            publishDidError(!isObjectLiked);
-        }
-    }
-
-    private void fetchVerifiedObjectId(final RequestCompletionCallback completionHandler) {
-        if (!Utility.isNullOrEmpty(verifiedObjectId)) {
-            if (completionHandler != null) {
-                completionHandler.onComplete();
-            }
-
-            return;
-        }
-
-        final GetOGObjectIdRequestWrapper objectIdRequest =
-                new GetOGObjectIdRequestWrapper(objectId, objectType);
-        final GetPageIdRequestWrapper pageIdRequest =
-                new GetPageIdRequestWrapper(objectId, objectType);
-
-        GraphRequestBatch requestBatch = new GraphRequestBatch();
-        objectIdRequest.addToBatch(requestBatch);
-        pageIdRequest.addToBatch(requestBatch);
-
-        requestBatch.addCallback(new GraphRequestBatch.Callback() {
-            @Override
-            public void onBatchCompleted(GraphRequestBatch batch) {
-                verifiedObjectId = objectIdRequest.verifiedObjectId;
-                if (Utility.isNullOrEmpty(verifiedObjectId)) {
-                    verifiedObjectId = pageIdRequest.verifiedObjectId;
-                    objectIsPage = pageIdRequest.objectIsPage;
-                }
-
-                if (Utility.isNullOrEmpty(verifiedObjectId)) {
-                    Logger.log(LoggingBehavior.DEVELOPER_ERRORS,
-                            TAG,
-                            "Unable to verify the FB id for '%s'. Verify that it is a valid FB" +
-                                    " object or page",
-                            objectId);
-                    logAppEventForError("get_verified_id",
-                            pageIdRequest.getError() != null
-                                    ? pageIdRequest.getError()
-                                    : objectIdRequest.getError());
-                }
-
-                if (completionHandler != null) {
-                    completionHandler.onComplete();
-                }
-            }
-        });
-
-        requestBatch.executeAsync();
-    }
-
-    private void logAppEventForError(String action, Bundle parameters) {
-        Bundle logParams = new Bundle(parameters);
-        logParams.putString(AnalyticsEvents.PARAMETER_LIKE_VIEW_OBJECT_ID, objectId);
-        logParams.putString(AnalyticsEvents.PARAMETER_LIKE_VIEW_OBJECT_TYPE, objectType.toString());
-        logParams.putString(AnalyticsEvents.PARAMETER_LIKE_VIEW_CURRENT_ACTION, action);
-
-        getAppEventsLogger().logSdkEvent(AnalyticsEvents.EVENT_LIKE_VIEW_ERROR, null, logParams);
-    }
-
-    private void logAppEventForError(String action, FacebookRequestError error) {
-        Bundle logParams = new Bundle();
-        if (error != null) {
-            JSONObject requestResult = error.getRequestResult();
-            if (requestResult != null) {
-                logParams.putString(
-                        AnalyticsEvents.PARAMETER_LIKE_VIEW_ERROR_JSON,
-                        requestResult.toString());
-            }
-        }
-        logAppEventForError(action, logParams);
-    }
-
-    //
-    // Interfaces
-    //
-
-    /**
-     * Used by the call to getControllerForObjectId()
-     */
-    public interface CreationCallback {
-        public void onComplete(
-                LikeActionController likeActionController,
-                FacebookException error);
-    }
-
-    /**
-     * Used by all the request wrappers
-     */
-    private interface RequestCompletionCallback {
-        void onComplete();
-    }
-
-    //
-    // Inner classes
-    //
-
-    private class GetOGObjectIdRequestWrapper extends AbstractRequestWrapper {
-        String verifiedObjectId;
-
-        GetOGObjectIdRequestWrapper(String objectId, LikeView.ObjectType objectType) {
-            super(objectId, objectType);
-
-            Bundle objectIdRequestParams = new Bundle();
-            objectIdRequestParams.putString("fields", "og_object.fields(id)");
-            objectIdRequestParams.putString("ids", objectId);
-
-            setRequest(new GraphRequest(
-                    AccessToken.getCurrentAccessToken(),
-                    "",
-                    objectIdRequestParams,
-                    HttpMethod.GET));
-        }
-
-        @Override
-        protected void processError(FacebookRequestError error) {
-            // If this object Id is for a Page, an error will be received for this request
-            // We will then rely on the other request to come through.
-            if (error.getErrorMessage().contains("og_object")) {
-                this.error = null;
-            } else {
-                Logger.log(LoggingBehavior.REQUESTS,
-                        TAG,
-                        "Error getting the FB id for object '%s' with type '%s' : %s",
-                        objectId,
-                        objectType,
-                        error);
-            }
-        }
-
-        @Override
-        protected void processSuccess(GraphResponse response) {
-            JSONObject results = Utility.tryGetJSONObjectFromResponse(
-                    response.getJSONObject(),
-                    objectId);
-            if (results != null) {
-                // See if we can get the OG object Id out
-                JSONObject ogObject = results.optJSONObject("og_object");
-                if (ogObject != null) {
-                    verifiedObjectId = ogObject.optString("id");
-                }
-            }
-        }
-    }
-
-    private class GetPageIdRequestWrapper extends AbstractRequestWrapper {
-        String verifiedObjectId;
-        boolean objectIsPage;
-
-        GetPageIdRequestWrapper(String objectId, LikeView.ObjectType objectType) {
-            super(objectId, objectType);
-
-            Bundle pageIdRequestParams = new Bundle();
-            pageIdRequestParams.putString("fields", "id");
-            pageIdRequestParams.putString("ids", objectId);
-
-            setRequest(new GraphRequest(
-                    AccessToken.getCurrentAccessToken(),
-                    "",
-                    pageIdRequestParams,
-                    HttpMethod.GET));
-        }
-
-        @Override
-        protected void processSuccess(GraphResponse response) {
-            JSONObject results = Utility.tryGetJSONObjectFromResponse(
-                    response.getJSONObject(),
-                    objectId);
-            if (results != null) {
-                verifiedObjectId = results.optString("id");
-                objectIsPage = !Utility.isNullOrEmpty(verifiedObjectId);
-            }
-        }
-
-        @Override
-        protected void processError(FacebookRequestError error) {
-            Logger.log(LoggingBehavior.REQUESTS,
-                    TAG,
-                    "Error getting the FB id for object '%s' with type '%s' : %s",
-                    objectId,
-                    objectType,
-                    error);
-        }
-    }
-
-    private class PublishLikeRequestWrapper extends AbstractRequestWrapper {
-        String unlikeToken;
-
-        PublishLikeRequestWrapper(String objectId, LikeView.ObjectType objectType) {
-            super(objectId, objectType);
-
-            Bundle likeRequestParams = new Bundle();
-            likeRequestParams.putString("object", objectId);
-
-            setRequest(new GraphRequest(
-                    AccessToken.getCurrentAccessToken(),
-                    "me/og.likes",
-                    likeRequestParams,
-                    HttpMethod.POST));
-        }
-
-        @Override
-        protected void processSuccess(GraphResponse response) {
-            unlikeToken = Utility.safeGetStringFromResponse(response.getJSONObject(), "id");
-        }
-
-        @Override
-        protected void processError(FacebookRequestError error) {
-            int errorCode = error.getErrorCode();
-            if (errorCode == ERROR_CODE_OBJECT_ALREADY_LIKED) {
-                // This isn't an error for us. Client was just out of sync with server
-                // This will prevent us from showing the dialog for this.
-
-                // However, there is no unliketoken. So a subsequent unlike WILL show the dialog
-                this.error = null;
-            } else {
-                Logger.log(LoggingBehavior.REQUESTS,
-                        TAG,
-                        "Error liking object '%s' with type '%s' : %s",
-                        objectId,
-                        objectType,
-                        error);
-                logAppEventForError("publish_like", error);
-            }
-        }
-    }
-
-    private class PublishUnlikeRequestWrapper extends AbstractRequestWrapper {
-        private String unlikeToken;
-
-        PublishUnlikeRequestWrapper(String unlikeToken) {
-            super(null, null);
-
-            this.unlikeToken = unlikeToken;
-
-            setRequest(new GraphRequest(
-                    AccessToken.getCurrentAccessToken(),
-                    unlikeToken,
-                    null,
-                    HttpMethod.DELETE));
-        }
-
-        @Override
-        protected void processSuccess(GraphResponse response) {
-        }
-
-        @Override
-        protected void processError(FacebookRequestError error) {
-            Logger.log(LoggingBehavior.REQUESTS,
-                    TAG,
-                    "Error unliking object with unlike token '%s' : %s", unlikeToken, error);
-            logAppEventForError("publish_unlike", error);
-        }
-    }
-
-    private interface LikeRequestWrapper extends RequestWrapper {
-        boolean isObjectLiked();
-        String getUnlikeToken();
-    }
-
-    private class GetPageLikesRequestWrapper
-            extends AbstractRequestWrapper
-            implements LikeRequestWrapper {
-        private boolean objectIsLiked = LikeActionController.this.isObjectLiked;
-        private String pageId;
-
-        GetPageLikesRequestWrapper(String pageId) {
-            super(pageId, LikeView.ObjectType.PAGE);
-            this.pageId = pageId;
-
-            Bundle requestParams = new Bundle();
-            requestParams.putString("fields", "id");
-
-            setRequest(new GraphRequest(
-                    AccessToken.getCurrentAccessToken(),
-                    "me/likes/" + pageId,
-                    requestParams,
-                    HttpMethod.GET));
-        }
-
-        @Override
-        protected void processSuccess(GraphResponse response) {
-            JSONArray dataSet = Utility.tryGetJSONArrayFromResponse(
-                    response.getJSONObject(),
-                    "data");
-            if (dataSet != null && dataSet.length() > 0) {
-                objectIsLiked = true;
-            }
-        }
-
-        @Override
-        protected void processError(FacebookRequestError error) {
-            Logger.log(LoggingBehavior.REQUESTS,
-                    TAG,
-                    "Error fetching like status for page id '%s': %s",
-                    this.pageId,
-                    error);
-            logAppEventForError("get_page_like", error);
-        }
-
-
-        @Override
-        public boolean isObjectLiked() {
-            return this.objectIsLiked;
-        }
-
-        @Override
-        public String getUnlikeToken() {
-            return null;
-        }
-    }
-
-    private class GetOGObjectLikesRequestWrapper
-            extends AbstractRequestWrapper
-            implements LikeRequestWrapper {
-        // Initialize the like status to what we currently have. This way, empty/error responses
-        // don't end up clearing out the state.
-        private boolean objectIsLiked = LikeActionController.this.isObjectLiked;
-        private String unlikeToken;
-        private final String objectId;
-        private final LikeView.ObjectType objectType;
-
-        GetOGObjectLikesRequestWrapper(String objectId, LikeView.ObjectType objectType) {
-            super(objectId, objectType);
-            this.objectId = objectId;
-            this.objectType = objectType;
-
-            Bundle requestParams = new Bundle();
-            requestParams.putString("fields", "id,application");
-            requestParams.putString("object", this.objectId);
-
-            setRequest(new GraphRequest(
-                    AccessToken.getCurrentAccessToken(),
-                    "me/og.likes",
-                    requestParams,
-                    HttpMethod.GET));
-        }
-
-        @Override
-        protected void processSuccess(GraphResponse response) {
-            JSONArray dataSet = Utility.tryGetJSONArrayFromResponse(
-                    response.getJSONObject(),
-                    "data");
-            if (dataSet != null) {
-                for (int i = 0; i < dataSet.length(); i++) {
-                    JSONObject data = dataSet.optJSONObject(i);
-                    if (data != null) {
-                        objectIsLiked = true;
-                        JSONObject appData = data.optJSONObject("application");
-                        AccessToken accessToken = AccessToken.getCurrentAccessToken();
-                        if (appData != null &&
-                                accessToken != null &&
-                                Utility.areObjectsEqual(
-                                        accessToken.getApplicationId(),
-                                        appData.optString("id"))) {
-                            unlikeToken = data.optString("id");
-                        }
-                    }
-                }
-            }
-        }
-
-        @Override
-        protected void processError(FacebookRequestError error) {
-            Logger.log(LoggingBehavior.REQUESTS,
-                    TAG,
-                    "Error fetching like status for object '%s' with type '%s' : %s",
-                    this.objectId,
-                    this.objectType,
-                    error);
-            logAppEventForError("get_og_object_like", error);
-        }
-
-        @Override
-        public boolean isObjectLiked() {
-            return this.objectIsLiked;
-        }
-
-        @Override
-        public String getUnlikeToken() {
-            return this.unlikeToken;
-        }
-    }
-
-    private class GetEngagementRequestWrapper extends AbstractRequestWrapper {
-        // Initialize the like status to what we currently have. This way, empty/error responses
-        // don't end up clearing out the state.
-        String likeCountStringWithLike = LikeActionController.this.likeCountStringWithLike;
-        String likeCountStringWithoutLike = LikeActionController.this.likeCountStringWithoutLike;
-        String socialSentenceStringWithLike = LikeActionController.this.socialSentenceWithLike;
-        String socialSentenceStringWithoutLike =
-                LikeActionController.this.socialSentenceWithoutLike;
-
-        GetEngagementRequestWrapper(String objectId, LikeView.ObjectType objectType) {
-            super(objectId, objectType);
-
-            Bundle requestParams = new Bundle();
-            requestParams.putString(
-                    "fields",
-                    "engagement.fields(" +
-                            "count_string_with_like," +
-                            "count_string_without_like," +
-                            "social_sentence_with_like," +
-                            "social_sentence_without_like)");
-
-            // Ensure that the social sentence returned is localized
-            requestParams.putString("locale", Locale.getDefault().toString());
-
-            setRequest(new GraphRequest(
-                    AccessToken.getCurrentAccessToken(),
-                    objectId,
-                    requestParams,
-                    HttpMethod.GET));
-        }
-
-        @Override
-        protected void processSuccess(GraphResponse response) {
-            JSONObject engagementResults = Utility.tryGetJSONObjectFromResponse(
-                    response.getJSONObject(),
-                    "engagement");
-            if (engagementResults != null) {
-                // Missing properties in the response should default to cached like status
-                likeCountStringWithLike =
-                        engagementResults.optString(
-                                "count_string_with_like",
-                                likeCountStringWithLike);
-
-                likeCountStringWithoutLike =
-                        engagementResults.optString(
-                                "count_string_without_like",
-                                likeCountStringWithoutLike);
-
-                socialSentenceStringWithLike =
-                        engagementResults.optString(
-                                "social_sentence_with_like",
-                                socialSentenceStringWithLike);
-
-                socialSentenceStringWithoutLike =
-                        engagementResults.optString(
-                                "social_sentence_without_like",
-                                socialSentenceStringWithoutLike);
-            }
-        }
-
-        @Override
-        protected void processError(FacebookRequestError error) {
-            Logger.log(LoggingBehavior.REQUESTS,
-                    TAG,
-                    "Error fetching engagement for object '%s' with type '%s' : %s",
-                    objectId,
-                    objectType,
-                    error);
-            logAppEventForError("get_engagement", error);
-        }
-    }
-
-    private interface RequestWrapper {
-        FacebookRequestError getError();
-        void addToBatch(GraphRequestBatch batch);
-    }
-
-    private abstract class AbstractRequestWrapper implements RequestWrapper{
-        private GraphRequest request;
-        protected String objectId;
-        protected LikeView.ObjectType objectType;
-        protected FacebookRequestError error;
-
-        protected AbstractRequestWrapper(String objectId, LikeView.ObjectType objectType) {
-            this.objectId = objectId;
-            this.objectType = objectType;
-        }
-
-        public void addToBatch(GraphRequestBatch batch) {
-            batch.add(request);
-        }
-
-        public FacebookRequestError getError() {
-            return this.error;
-        }
-
-        protected void setRequest(GraphRequest request) {
-            this.request = request;
-            // Make sure that our requests are hitting the latest version of the API known to this
-            // sdk.
-            request.setVersion(ServerProtocol.GRAPH_API_VERSION);
-            request.setCallback(new GraphRequest.Callback() {
-                @Override
-                public void onCompleted(GraphResponse response) {
-                    error = response.getError();
-                    if (error != null) {
-                        processError(error);
-                    } else {
-                        processSuccess(response);
-                    }
-                }
-            });
-        }
-
-        protected void processError(FacebookRequestError error) {
-            Logger.log(LoggingBehavior.REQUESTS,
-                    TAG,
-                    "Error running request for object '%s' with type '%s' : %s",
-                    this.objectId,
-                    this.objectType,
-                    error);
-        }
-
-        protected abstract void processSuccess(GraphResponse response);
-    }
-
-    // Performs cache re-ordering/trimming to keep most-recently-used items up front
-    // ** NOTE ** It is expected that only _ONE_ MRUCacheWorkItem is ever running. This is enforced
-    // by setting the concurrency of the WorkQueue to 1. Changing the concurrency will most likely
-    // lead to errors.
-    private static class MRUCacheWorkItem implements Runnable {
-        private static ArrayList<String> mruCachedItems = new ArrayList<String>();
-        private String cacheItem;
-        private boolean shouldTrim;
-
-        MRUCacheWorkItem(String cacheItem, boolean shouldTrim) {
-            this.cacheItem = cacheItem;
-            this.shouldTrim = shouldTrim;
-        }
-
-        @Override
-        public void run() {
-            if (cacheItem != null) {
-                mruCachedItems.remove(cacheItem);
-                mruCachedItems.add(0, cacheItem);
-            }
-            if (shouldTrim && mruCachedItems.size() >= MAX_CACHE_SIZE) {
-                int targetSize = MAX_CACHE_SIZE / 2; // Optimize for fewer trim-passes.
-                while (targetSize < mruCachedItems.size()) {
-                    String cacheKey = mruCachedItems.remove(mruCachedItems.size() - 1);
-
-                    // Here is where we actually remove from the cache of LikeActionControllers.
-                    cache.remove(cacheKey);
-                }
-            }
-        }
-    }
-
-    private static class SerializeToDiskWorkItem implements Runnable {
-        private String cacheKey;
-        private String controllerJson;
-
-        SerializeToDiskWorkItem(String cacheKey, String controllerJson) {
-            this.cacheKey = cacheKey;
-            this.controllerJson = controllerJson;
-        }
-
-        @Override
-        public void run() {
-            serializeToDiskSynchronously(cacheKey, controllerJson);
-        }
-    }
-
-    private static class CreateLikeActionControllerWorkItem implements Runnable {
-        private String objectId;
-        private LikeView.ObjectType objectType;
-        private CreationCallback callback;
-
-        CreateLikeActionControllerWorkItem(
-                String objectId,
-                LikeView.ObjectType objectType,
-                CreationCallback callback) {
-            this.objectId = objectId;
-            this.objectType = objectType;
-            this.callback = callback;
-        }
-
-        @Override
-        public void run() {
-            createControllerForObjectIdAndType(objectId, objectType, callback);
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/LikeBoxCountView.java b/facebook/src/main/java/com/facebook/share/internal/LikeBoxCountView.java
deleted file mode 100644
index 23cf68ffe..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/LikeBoxCountView.java
+++ /dev/null
@@ -1,229 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.content.Context;
-import android.graphics.*;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.ViewGroup;
-import android.widget.FrameLayout;
-import android.widget.TextView;
-import com.facebook.R;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- */
-public class LikeBoxCountView extends FrameLayout {
-
-    public enum LikeBoxCountViewCaretPosition {
-        LEFT,
-        TOP,
-        RIGHT,
-        BOTTOM
-    }
-
-    private TextView likeCountLabel;
-    private LikeBoxCountViewCaretPosition caretPosition = LikeBoxCountViewCaretPosition.LEFT;
-
-    private float caretHeight;
-    private float caretWidth;
-    private float borderRadius;
-    private Paint borderPaint;
-    private int textPadding;
-    private int additionalTextPadding;
-
-    /**
-     * Constructor
-     *
-     * @param context Context for this View
-     */
-    public LikeBoxCountView(Context context) {
-        super(context);
-        initialize(context);
-    }
-
-    /**
-     * Sets the text for this view
-     * @param text
-     */
-    public void setText(String text) {
-        likeCountLabel.setText(text);
-    }
-
-    /**
-     * Sets the caret's position. This will trigger a layout of the view.
-     * @param caretPosition
-     */
-    public void setCaretPosition(LikeBoxCountViewCaretPosition caretPosition) {
-        this.caretPosition = caretPosition;
-
-        // Since the presence of a caret will move that edge closer to the text, let's add
-        // some padding (equal to caretHeight) in that same direction
-        switch (caretPosition) {
-            case LEFT:
-                setAdditionalTextPadding(additionalTextPadding, 0, 0, 0);
-                break;
-            case TOP:
-                setAdditionalTextPadding(0, additionalTextPadding, 0, 0);
-                break;
-            case RIGHT:
-                setAdditionalTextPadding(0, 0, additionalTextPadding, 0);
-                break;
-            case BOTTOM:
-                setAdditionalTextPadding(0, 0, 0, additionalTextPadding);
-                break;
-        }
-
-    }
-
-    @Override
-    protected void onDraw(Canvas canvas) {
-        super.onDraw(canvas);
-
-        int top = getPaddingTop(), left = getPaddingLeft();
-        int right = getWidth() - getPaddingRight(), bottom = getHeight() - getPaddingBottom();
-
-        switch (caretPosition) {
-            case BOTTOM:
-                bottom -= caretHeight;
-                break;
-            case LEFT:
-                left += caretHeight;
-                break;
-            case TOP:
-                top += caretHeight;
-                break;
-            case RIGHT:
-                right -= caretHeight;
-                break;
-        }
-
-        drawBorder(canvas, left, top, right, bottom);
-    }
-
-    private void initialize(Context context) {
-        setWillNotDraw(false); // Required for the onDraw() method to be called on a FrameLayout
-        caretHeight = getResources().getDimension(R.dimen.com_facebook_likeboxcountview_caret_height);
-        caretWidth = getResources().getDimension(R.dimen.com_facebook_likeboxcountview_caret_width);
-        borderRadius = getResources().getDimension(R.dimen.com_facebook_likeboxcountview_border_radius);
-
-        borderPaint = new Paint();
-        borderPaint.setColor(
-                getResources().getColor(R.color.com_facebook_likeboxcountview_border_color));
-        borderPaint.setStrokeWidth(getResources().getDimension(R.dimen.com_facebook_likeboxcountview_border_width));
-        borderPaint.setStyle(Paint.Style.STROKE);
-
-        initializeLikeCountLabel(context);
-
-        addView(likeCountLabel);
-
-        setCaretPosition(this.caretPosition);
-    }
-
-    private void initializeLikeCountLabel(Context context) {
-        likeCountLabel = new TextView(context);
-        LayoutParams likeCountLabelLayoutParams = new LayoutParams(
-                ViewGroup.LayoutParams.MATCH_PARENT,
-                ViewGroup.LayoutParams.MATCH_PARENT);
-        likeCountLabel.setLayoutParams(likeCountLabelLayoutParams);
-        likeCountLabel.setGravity(Gravity.CENTER);
-        likeCountLabel.setTextSize(
-                TypedValue.COMPLEX_UNIT_PX,
-                getResources().getDimension(R.dimen.com_facebook_likeboxcountview_text_size));
-        likeCountLabel.setTextColor(
-                getResources().getColor(R.color.com_facebook_likeboxcountview_text_color));
-        textPadding = getResources().getDimensionPixelSize(R.dimen.com_facebook_likeboxcountview_text_padding);
-
-        // Calculate the additional text padding that will be applied in the direction of the caret.
-        additionalTextPadding = getResources().getDimensionPixelSize(R.dimen.com_facebook_likeboxcountview_caret_height);
-    }
-
-    private void setAdditionalTextPadding(int left, int top, int right, int bottom) {
-        likeCountLabel.setPadding(
-                textPadding + left,
-                textPadding + top,
-                textPadding + right,
-                textPadding + bottom);
-    }
-
-    private void drawBorder(Canvas canvas, float left, float top, float right, float bottom) {
-        Path borderPath = new Path();
-
-        float ovalSize = 2.0f * borderRadius;
-
-        // Top left corner
-        borderPath.addArc(new RectF(left, top, left + ovalSize, top + ovalSize), -180, 90);
-
-        // Top caret
-        if (caretPosition == LikeBoxCountViewCaretPosition.TOP) {
-            borderPath.lineTo(left + (right - left - caretWidth) / 2, top);
-            borderPath.lineTo(left + (right - left) / 2, top - caretHeight);
-            borderPath.lineTo(left + (right - left + caretWidth) / 2, top);
-        }
-
-        // Move to top right corner
-        borderPath.lineTo(right - borderRadius, top);
-
-        // Top right corner
-        borderPath.addArc(new RectF(right - ovalSize, top, right, top + ovalSize), -90, 90);
-
-        // Right caret
-        if (caretPosition == LikeBoxCountViewCaretPosition.RIGHT) {
-            borderPath.lineTo(right, top + (bottom - top - caretWidth) / 2);
-            borderPath.lineTo(right + caretHeight, top + (bottom - top) / 2);
-            borderPath.lineTo(right, top + (bottom - top + caretWidth) / 2);
-        }
-
-        // Move to bottom right corner
-        borderPath.lineTo(right, bottom - borderRadius);
-
-        // Bottom right corner
-        borderPath.addArc(new RectF(right - ovalSize, bottom - ovalSize, right, bottom), 0, 90);
-
-        // Bottom caret
-        if (caretPosition == LikeBoxCountViewCaretPosition.BOTTOM) {
-            borderPath.lineTo(left + (right - left + caretWidth) / 2, bottom);
-            borderPath.lineTo(left + (right - left) / 2, bottom + caretHeight);
-            borderPath.lineTo(left + (right - left - caretWidth) / 2, bottom);
-        }
-
-        // Move to bottom left corner
-        borderPath.lineTo(left + borderRadius, bottom);
-
-        // Bottom left corner
-        borderPath.addArc(new RectF(left, bottom - ovalSize, left + ovalSize, bottom), 90, 90);
-
-        // Left caret
-        if (caretPosition == LikeBoxCountViewCaretPosition.LEFT) {
-            borderPath.lineTo(left, top + (bottom - top + caretWidth) / 2);
-            borderPath.lineTo(left - caretHeight, top + (bottom - top) / 2);
-            borderPath.lineTo(left, top + (bottom - top - caretWidth) / 2);
-        }
-
-        // Move back to the beginning
-        borderPath.lineTo(left, top + borderRadius);
-
-        canvas.drawPath(borderPath, borderPaint);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/LikeButton.java b/facebook/src/main/java/com/facebook/share/internal/LikeButton.java
deleted file mode 100644
index 3a4a0c5ca..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/LikeButton.java
+++ /dev/null
@@ -1,79 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.content.Context;
-import android.util.AttributeSet;
-import com.facebook.FacebookButtonBase;
-import com.facebook.R;
-import com.facebook.internal.AnalyticsEvents;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- */
-public class LikeButton extends FacebookButtonBase {
-    public LikeButton(Context context, boolean isLiked) {
-        super(context, null, 0, 0, AnalyticsEvents.EVENT_LIKE_BUTTON_CREATE,
-                                   AnalyticsEvents.EVENT_LIKE_BUTTON_DID_TAP);
-        this.setSelected(isLiked);
-    }
-
-    @Override
-    public void setSelected(boolean selected) {
-        super.setSelected(selected);
-        updateForLikeStatus();
-    }
-
-    @Override
-    protected void configureButton(
-            Context context,
-            AttributeSet attrs,
-            int defStyleAttr,
-            int defStyleRes) {
-        super.configureButton(context, attrs, defStyleAttr, defStyleRes);
-        updateForLikeStatus();
-    }
-
-    @Override
-    protected int getDefaultRequestCode() {
-        return 0;
-    }
-
-    @Override
-    protected int getDefaultStyleResource() {
-        return R.style.com_facebook_button_like;
-    }
-
-    private void updateForLikeStatus() {
-        // the compound drawables don't support selectors, so we need to update for the status
-        if (isSelected()) {
-            this.setCompoundDrawablesWithIntrinsicBounds(
-                    R.drawable.com_facebook_button_like_icon_selected, 0, 0, 0);
-            this.setText(getResources().getString(R.string.com_facebook_like_button_liked));
-        } else {
-            this.setCompoundDrawablesWithIntrinsicBounds(
-                    R.drawable.com_facebook_button_icon, 0, 0, 0);
-            this.setText(getResources().getString(R.string.com_facebook_like_button_not_liked));
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/LikeContent.java b/facebook/src/main/java/com/facebook/share/internal/LikeContent.java
deleted file mode 100644
index ffd46cbce..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/LikeContent.java
+++ /dev/null
@@ -1,130 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.os.Parcel;
-
-import com.facebook.share.model.ShareModel;
-import com.facebook.share.model.ShareModelBuilder;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- *
- * Represents content that is set on a LikeView to allow users to like and unlike it.
- */
-public class LikeContent implements ShareModel {
-
-    private final String objectId;
-    private final String objectType;
-
-    private LikeContent(final Builder builder) {
-        this.objectId = builder.objectId;
-        this.objectType = builder.objectType;
-    }
-
-    LikeContent(final Parcel in) {
-        this.objectId = in.readString();
-        this.objectType = in.readString();
-    }
-
-    /**
-     * Gets the object Id for the LikeView.
-     *
-     * @return the object Id
-     */
-    public String getObjectId() {
-        return objectId;
-    }
-
-    /**
-     * Gets the type of the object for the LikeView.
-     *
-     * @return the type of the object
-     */
-    public String getObjectType() {
-        return objectType;
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        out.writeString(this.objectId);
-        out.writeString(this.objectType);
-    }
-
-    @SuppressWarnings("unused")
-    public static final Creator<LikeContent> CREATOR =
-            new Creator<LikeContent>() {
-                public LikeContent createFromParcel(final Parcel in) {
-                    return new LikeContent(in);
-                }
-
-                public LikeContent[] newArray(final int size) {
-                    return new LikeContent[size];
-                }
-            };
-
-    /**
-     * Builder class for a concrete instance of AppInviteContent
-     */
-    public static class Builder
-            implements ShareModelBuilder<LikeContent, Builder> {
-        private String objectId;
-        private String objectType;
-
-        /**
-         * Sets the object Id for the LikeView
-         * @param objectId the object Id
-         */
-        public Builder setObjectId(final String objectId) {
-            this.objectId = objectId;
-            return this;
-        }
-
-        /**
-         * Sets the type of the object for the LikeView
-         * @param objectType the type of the object
-         */
-        public Builder setObjectType(final String objectType) {
-            this.objectType = objectType;
-            return this;
-        }
-
-        @Override
-        public LikeContent build() {
-            return new LikeContent(this);
-        }
-
-        @Override
-        public Builder readFrom(final LikeContent content) {
-            if (content == null) {
-                return this;
-            }
-            return this
-                    .setObjectId(content.getObjectId())
-                    .setObjectType(content.getObjectType());
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/LikeDialog.java b/facebook/src/main/java/com/facebook/share/internal/LikeDialog.java
deleted file mode 100644
index 4aeeb34d6..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/LikeDialog.java
+++ /dev/null
@@ -1,206 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.util.Log;
-
-import com.facebook.FacebookCallback;
-import com.facebook.internal.FacebookDialogBase;
-import com.facebook.internal.AppCall;
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.internal.DialogFeature;
-import com.facebook.internal.DialogPresenter;
-import com.facebook.internal.FragmentWrapper;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public class LikeDialog extends FacebookDialogBase<LikeContent, LikeDialog.Result> {
-
-    private static final String TAG = "LikeDialog";
-
-    private static final int DEFAULT_REQUEST_CODE =
-            CallbackManagerImpl.RequestCodeOffset.Like.toRequestCode();
-
-    public static final class Result {
-        private final Bundle bundle;
-
-        /**
-         * Constructor
-         *
-         * @param bundle the results bundle
-         */
-        public Result(Bundle bundle) {
-            this.bundle = bundle;
-        }
-
-        /**
-         * Returns the results data as a Bundle.
-         *
-         * @return the results bundle
-         */
-        public Bundle getData() {
-            return bundle;
-        }
-    }
-
-    // Public for internal use
-    public static boolean canShowNativeDialog() {
-        return DialogPresenter.canPresentNativeDialogWithFeature(getFeature());
-    }
-
-    // Public for internal use
-    public static boolean canShowWebFallback() {
-        return DialogPresenter.canPresentWebFallbackDialogWithFeature(getFeature());
-    }
-
-    public LikeDialog(Activity activity) {
-        super(activity, DEFAULT_REQUEST_CODE);
-    }
-
-    public LikeDialog(Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-    }
-
-    public LikeDialog(android.app.Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-    }
-
-    public LikeDialog(FragmentWrapper fragmentWrapper) {
-        super(fragmentWrapper, DEFAULT_REQUEST_CODE);
-    }
-
-    @Override
-    protected AppCall createBaseAppCall() {
-        return new AppCall(getRequestCode());
-    }
-
-    @Override
-    protected List<ModeHandler> getOrderedModeHandlers() {
-        ArrayList<ModeHandler> handlers = new ArrayList<>();
-        handlers.add(new NativeHandler());
-        handlers.add(new WebFallbackHandler());
-
-        return handlers;
-    }
-
-    @Override
-    protected void registerCallbackImpl (
-            final CallbackManagerImpl callbackManager,
-            final FacebookCallback<Result> callback) {
-        final ResultProcessor resultProcessor = (callback == null)
-                ? null
-                : new ResultProcessor(callback) {
-            @Override
-            public void onSuccess(AppCall appCall, Bundle results) {
-                callback.onSuccess(new Result(results));
-            }
-        };
-
-        CallbackManagerImpl.Callback callbackManagerCallback = new CallbackManagerImpl.Callback() {
-            @Override
-            public boolean onActivityResult(int resultCode, Intent data) {
-                return ShareInternalUtility.handleActivityResult(
-                        getRequestCode(),
-                        resultCode,
-                        data,
-                        resultProcessor);
-            }
-        };
-
-        callbackManager.registerCallback(
-                getRequestCode(),
-                callbackManagerCallback);
-    }
-
-    private class NativeHandler extends ModeHandler {
-        @Override
-        public boolean canShow(final LikeContent content, boolean isBestEffort) {
-            return (content != null) && LikeDialog.canShowNativeDialog();
-        }
-
-        @Override
-        public AppCall createAppCall(final LikeContent content) {
-            final AppCall appCall = createBaseAppCall();
-
-            DialogPresenter.setupAppCallForNativeDialog(
-                    appCall,
-                    new DialogPresenter.ParameterProvider() {
-                        @Override
-                        public Bundle getParameters() {
-                            return createParameters(content);
-                        }
-
-                        @Override
-                        public Bundle getLegacyParameters() {
-                            // Like is not supported with legacy fb4a devices. Should never get here
-                            Log.e(TAG, "Attempting to present the Like Dialog with an outdated " +
-                                    "Facebook app on the device");
-                            return new Bundle();
-                        }
-                    },
-                    getFeature());
-
-            return appCall;
-        }
-    }
-
-    private class WebFallbackHandler extends ModeHandler {
-        @Override
-        public boolean canShow(final LikeContent content, boolean isBestEffort) {
-            return (content != null) && LikeDialog.canShowWebFallback();
-        }
-
-        @Override
-        public AppCall createAppCall(final LikeContent content) {
-            final AppCall appCall = createBaseAppCall();
-
-            DialogPresenter.setupAppCallForWebFallbackDialog(
-                    appCall,
-                    createParameters(content),
-                    getFeature());
-
-            return appCall;
-        }
-    }
-
-    private static DialogFeature getFeature() {
-        return LikeDialogFeature.LIKE_DIALOG;
-    }
-
-    private static Bundle createParameters(final LikeContent likeContent) {
-        Bundle params = new Bundle();
-
-        params.putString(ShareConstants.OBJECT_ID, likeContent.getObjectId());
-        params.putString(ShareConstants.OBJECT_TYPE, likeContent.getObjectType());
-
-        return params;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/LikeDialogFeature.java b/facebook/src/main/java/com/facebook/share/internal/LikeDialogFeature.java
deleted file mode 100644
index 3ab0c9150..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/LikeDialogFeature.java
+++ /dev/null
@@ -1,49 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import com.facebook.internal.DialogFeature;
-import com.facebook.internal.NativeProtocol;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public enum LikeDialogFeature implements DialogFeature {
-
-    // This matches a value in a sitevar. DO NOT CHANGE
-    LIKE_DIALOG(NativeProtocol.PROTOCOL_VERSION_20140701);
-
-    private int minVersion;
-
-    LikeDialogFeature(int minVersion) {
-        this.minVersion = minVersion;
-    }
-
-    public String getAction() {
-        return NativeProtocol.ACTION_LIKE_DIALOG;
-    }
-
-    public int getMinVersion() {
-        return minVersion;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/LikeStatusClient.java b/facebook/src/main/java/com/facebook/share/internal/LikeStatusClient.java
deleted file mode 100644
index f890db8a5..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/LikeStatusClient.java
+++ /dev/null
@@ -1,58 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-
-import android.content.Context;
-import android.os.Bundle;
-
-import com.facebook.internal.NativeProtocol;
-import com.facebook.internal.PlatformServiceClient;
-import com.facebook.share.internal.ShareConstants;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the Facebook SDK for
- * Android. Use of any of the classes in this package is unsupported, and they may be modified or
- * removed without warning at any time.
- *
- * This class executes service calls to fetch like-state of objects from the Facebook Application,
- * if available.
- */
-final class LikeStatusClient extends PlatformServiceClient {
-    private String objectId;
-
-    LikeStatusClient(Context context, String applicationId, String objectId) {
-        super(context,
-                NativeProtocol.MESSAGE_GET_LIKE_STATUS_REQUEST,
-                NativeProtocol.MESSAGE_GET_LIKE_STATUS_REPLY,
-                NativeProtocol.PROTOCOL_VERSION_20141001,
-                applicationId);
-
-        this.objectId = objectId;
-    }
-
-    @Override
-    protected void populateRequestBundle(Bundle data) {
-        // Only thing we need to pass in is the object id.
-        data.putString(ShareConstants.EXTRA_OBJECT_ID, objectId);
-    }
-}
-
diff --git a/facebook/src/main/java/com/facebook/share/internal/MessageDialogFeature.java b/facebook/src/main/java/com/facebook/share/internal/MessageDialogFeature.java
deleted file mode 100644
index 40199d8b0..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/MessageDialogFeature.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import com.facebook.internal.DialogFeature;
-import com.facebook.internal.NativeProtocol;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public enum MessageDialogFeature implements DialogFeature {
-    /**
-     * Indicates whether the native Message dialog itself is supported by the installed version of
-     * the Facebook Messenger application.
-     */
-    MESSAGE_DIALOG(NativeProtocol.PROTOCOL_VERSION_20140204),
-    /**
-     * Indicates whether the native Message dialog supports sharing of photo images.
-     */
-    PHOTOS(NativeProtocol.PROTOCOL_VERSION_20140324),
-    /**
-     * Indicates whether the native Message dialog supports sharing of videos.
-     */
-    VIDEO(NativeProtocol.PROTOCOL_VERSION_20141218),
-    ;
-
-    private int minVersion;
-
-    MessageDialogFeature(int minVersion) {
-        this.minVersion = minVersion;
-    }
-
-    /**
-     * This method is for internal use only.
-     */
-    public String getAction() {
-        return NativeProtocol.ACTION_MESSAGE_DIALOG;
-    }
-
-    /**
-     * This method is for internal use only.
-     */
-    public int getMinVersion() {
-        return minVersion;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/NativeDialogParameters.java b/facebook/src/main/java/com/facebook/share/internal/NativeDialogParameters.java
deleted file mode 100644
index 3d56d79c8..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/NativeDialogParameters.java
+++ /dev/null
@@ -1,196 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.os.Bundle;
-
-import com.facebook.FacebookException;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
-import com.facebook.share.model.ShareContent;
-import com.facebook.share.model.ShareHashtag;
-import com.facebook.share.model.ShareLinkContent;
-import com.facebook.share.model.ShareMediaContent;
-import com.facebook.share.model.ShareOpenGraphContent;
-import com.facebook.share.model.SharePhotoContent;
-import com.facebook.share.model.ShareVideoContent;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.UUID;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public class NativeDialogParameters {
-
-    public static Bundle create(
-            UUID callId,
-            ShareContent shareContent,
-            boolean shouldFailOnDataError) {
-        Validate.notNull(shareContent, "shareContent");
-        Validate.notNull(callId, "callId");
-
-        Bundle nativeParams = null;
-        if (shareContent instanceof ShareLinkContent) {
-            final ShareLinkContent linkContent = (ShareLinkContent) shareContent;
-            nativeParams = create(linkContent, shouldFailOnDataError);
-        } else if (shareContent instanceof SharePhotoContent) {
-            final SharePhotoContent photoContent = (SharePhotoContent) shareContent;
-            List<String> photoUrls = ShareInternalUtility.getPhotoUrls(
-                    photoContent,
-                    callId);
-
-            nativeParams = create(photoContent, photoUrls, shouldFailOnDataError);
-        } else if (shareContent instanceof ShareVideoContent) {
-            final ShareVideoContent videoContent = (ShareVideoContent) shareContent;
-            String videoUrl = ShareInternalUtility.getVideoUrl(videoContent, callId);
-
-            nativeParams = create(videoContent, videoUrl, shouldFailOnDataError);
-        } else if (shareContent instanceof ShareOpenGraphContent) {
-            final ShareOpenGraphContent openGraphContent = (ShareOpenGraphContent) shareContent;
-            try {
-                JSONObject openGraphActionJSON = ShareInternalUtility.toJSONObjectForCall(
-                        callId, openGraphContent);
-                openGraphActionJSON = ShareInternalUtility.removeNamespacesFromOGJsonObject(
-                        openGraphActionJSON, false);
-                nativeParams = create(openGraphContent, openGraphActionJSON, shouldFailOnDataError);
-            } catch (final JSONException e) {
-                throw new FacebookException(
-                        "Unable to create a JSON Object from the provided ShareOpenGraphContent: "
-                                + e.getMessage());
-            }
-        } else if (shareContent instanceof ShareMediaContent) {
-            final ShareMediaContent mediaContent = (ShareMediaContent) shareContent;
-            List<Bundle> mediaInfos = ShareInternalUtility.getMediaInfos(
-                    mediaContent,
-                    callId);
-
-            nativeParams = create(mediaContent, mediaInfos, shouldFailOnDataError);
-        }
-
-        return nativeParams;
-    }
-
-    private static Bundle create(ShareLinkContent linkContent, boolean dataErrorsFatal) {
-        Bundle params = createBaseParameters(linkContent, dataErrorsFatal);
-
-        Utility.putNonEmptyString(params, ShareConstants.TITLE, linkContent.getContentTitle());
-        Utility.putNonEmptyString(
-                params, ShareConstants.DESCRIPTION, linkContent.getContentDescription());
-        Utility.putUri(params, ShareConstants.IMAGE_URL, linkContent.getImageUrl());
-        Utility.putNonEmptyString(params, ShareConstants.QUOTE, linkContent.getQuote());
-
-        return params;
-    }
-
-    private static Bundle create(
-            SharePhotoContent photoContent,
-            List<String> imageUrls,
-            boolean dataErrorsFatal) {
-        Bundle params = createBaseParameters(photoContent, dataErrorsFatal);
-
-        params.putStringArrayList(ShareConstants.PHOTOS, new ArrayList<>(imageUrls));
-
-        return params;
-    }
-
-    private static Bundle create(
-            ShareVideoContent videoContent,
-            String videoUrl,
-            boolean dataErrorsFatal) {
-        Bundle params = createBaseParameters(videoContent, dataErrorsFatal);
-
-        Utility.putNonEmptyString(params, ShareConstants.TITLE, videoContent.getContentTitle());
-        Utility.putNonEmptyString(
-                params, ShareConstants.DESCRIPTION, videoContent.getContentDescription());
-        Utility.putNonEmptyString(params, ShareConstants.VIDEO_URL, videoUrl);
-
-        return params;
-    }
-
-    private static Bundle create(
-            ShareMediaContent mediaContent,
-            List<Bundle> mediaInfos,
-            boolean dataErrorsFatal) {
-        Bundle params = createBaseParameters(mediaContent, dataErrorsFatal);
-
-        params.putParcelableArrayList(ShareConstants.MEDIA, new ArrayList<>(mediaInfos));
-
-        return params;
-    }
-
-    private static Bundle create(
-            ShareOpenGraphContent openGraphContent,
-            JSONObject openGraphActionJSON,
-            boolean dataErrorsFatal) {
-        Bundle params = createBaseParameters(openGraphContent, dataErrorsFatal);
-
-        // Strip namespace from preview property name
-        String previewProperty = ShareInternalUtility.getFieldNameAndNamespaceFromFullName(
-                openGraphContent.getPreviewPropertyName()).second;
-
-        Utility.putNonEmptyString(
-                params,
-                ShareConstants.PREVIEW_PROPERTY_NAME,
-                previewProperty);
-        Utility.putNonEmptyString(
-                params,
-                ShareConstants.ACTION_TYPE,
-                openGraphContent.getAction().getActionType());
-
-        Utility.putNonEmptyString(
-                params,
-                ShareConstants.ACTION,
-                openGraphActionJSON.toString());
-
-        return params;
-    }
-
-    private static Bundle createBaseParameters(ShareContent content, boolean dataErrorsFatal) {
-        Bundle params = new Bundle();
-
-        Utility.putUri(params, ShareConstants.CONTENT_URL, content.getContentUrl());
-        Utility.putNonEmptyString(params, ShareConstants.PLACE_ID, content.getPlaceId());
-        Utility.putNonEmptyString(params, ShareConstants.REF, content.getRef());
-
-        params.putBoolean(ShareConstants.DATA_FAILURES_FATAL, dataErrorsFatal);
-
-        List<String> peopleIds = content.getPeopleIds();
-        if (!Utility.isNullOrEmpty(peopleIds)) {
-            params.putStringArrayList(
-                    ShareConstants.PEOPLE_IDS,
-                    new ArrayList<>(peopleIds));
-        }
-
-        ShareHashtag shareHashtag = content.getShareHashtag();
-        if (shareHashtag != null) {
-            Utility.putNonEmptyString(params, ShareConstants.HASHTAG, shareHashtag.getHashtag());
-        }
-
-        return params;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/OpenGraphActionDialogFeature.java b/facebook/src/main/java/com/facebook/share/internal/OpenGraphActionDialogFeature.java
deleted file mode 100644
index 5eefbcebe..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/OpenGraphActionDialogFeature.java
+++ /dev/null
@@ -1,57 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import com.facebook.internal.DialogFeature;
-import com.facebook.internal.NativeProtocol;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public enum OpenGraphActionDialogFeature implements DialogFeature {
-    /**
-     * Indicates whether the native Open Graph action dialog itself is supported by the installed
-     * version of the Facebook application.
-     */
-    OG_ACTION_DIALOG(NativeProtocol.PROTOCOL_VERSION_20130618);
-
-    private int minVersion;
-
-    OpenGraphActionDialogFeature(int minVersion) {
-        this.minVersion = minVersion;
-    }
-
-    /**
-     * This method is for internal use only.
-     */
-    public String getAction() {
-        return NativeProtocol.ACTION_OGACTIONPUBLISH_DIALOG;
-    }
-
-    /**
-     * This method is for internal use only.
-     */
-    public int getMinVersion() {
-        return minVersion;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/OpenGraphJSONUtility.java b/facebook/src/main/java/com/facebook/share/internal/OpenGraphJSONUtility.java
deleted file mode 100644
index dfa01941d..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/OpenGraphJSONUtility.java
+++ /dev/null
@@ -1,121 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.os.Bundle;
-import android.support.annotation.Nullable;
-import com.facebook.internal.Validate;
-import com.facebook.share.model.ShareOpenGraphAction;
-import com.facebook.share.model.ShareOpenGraphObject;
-import com.facebook.share.model.SharePhoto;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.*;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- *
- * Utility methods for JSON representation of Open Graph models.
- */
-public final class OpenGraphJSONUtility {
-    /**
-     * Converts an action to a JSONObject.
-     *
-     * NOTE: All images are removed from the JSON representation and must be added to the builder
-     * separately.
-     *
-     * @param action {@link com.facebook.share.model.ShareOpenGraphAction} to be converted.
-     * @return {@link org.json.JSONObject} representing the action.
-     * @throws JSONException
-     */
-    public static JSONObject toJSONObject(
-            final ShareOpenGraphAction action,
-            final PhotoJSONProcessor photoJSONProcessor) throws JSONException {
-        final JSONObject result = new JSONObject();
-        final Set<String> keys = action.keySet();
-        for (String key : keys) {
-            result.put(key, toJSONValue(action.get(key), photoJSONProcessor));
-        }
-        return result;
-    }
-
-    private static JSONObject toJSONObject(
-            final ShareOpenGraphObject object,
-            final PhotoJSONProcessor photoJSONProcessor) throws JSONException {
-        final JSONObject result = new JSONObject();
-        final Set<String> keys = object.keySet();
-        for (String key : keys) {
-            result.put(key, toJSONValue(object.get(key), photoJSONProcessor));
-        }
-        return result;
-    }
-
-    private static JSONArray toJSONArray(
-            final List list,
-            final PhotoJSONProcessor photoJSONProcessor) throws JSONException {
-        final JSONArray result = new JSONArray();
-        for (Object item : list) {
-            result.put(toJSONValue(item, photoJSONProcessor));
-        }
-        return result;
-    }
-
-    public static Object toJSONValue(
-            @Nullable final Object object,
-            final PhotoJSONProcessor photoJSONProcessor) throws JSONException {
-        if (object == null) {
-            return JSONObject.NULL;
-        }
-        if ((object instanceof String) ||
-                (object instanceof Boolean) ||
-                (object instanceof Double) ||
-                (object instanceof Float) ||
-                (object instanceof Integer) ||
-                (object instanceof Long)) {
-            return object;
-        }
-        if (object instanceof SharePhoto) {
-            if (photoJSONProcessor != null) {
-                return photoJSONProcessor.toJSONObject((SharePhoto) object);
-            }
-            return null;
-        }
-        if (object instanceof ShareOpenGraphObject) {
-            return toJSONObject((ShareOpenGraphObject) object, photoJSONProcessor);
-        }
-        if (object instanceof List) {
-            return toJSONArray((List) object, photoJSONProcessor);
-        }
-        throw new IllegalArgumentException(
-                "Invalid object found for JSON serialization: " +object.toString());
-    }
-
-    private OpenGraphJSONUtility() {}
-
-    public interface PhotoJSONProcessor {
-        public JSONObject toJSONObject(SharePhoto photo);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/OpenGraphMessageDialogFeature.java b/facebook/src/main/java/com/facebook/share/internal/OpenGraphMessageDialogFeature.java
deleted file mode 100644
index b064b7e77..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/OpenGraphMessageDialogFeature.java
+++ /dev/null
@@ -1,57 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import com.facebook.internal.DialogFeature;
-import com.facebook.internal.NativeProtocol;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public enum OpenGraphMessageDialogFeature implements DialogFeature {
-    /**
-     * Indicates whether the native Open Graph Message dialog itself is supported by the installed
-     * version of the Facebook Messenger application.
-     */
-    OG_MESSAGE_DIALOG(NativeProtocol.PROTOCOL_VERSION_20140204);
-
-    private int minVersion;
-
-    OpenGraphMessageDialogFeature(int minVersion) {
-        this.minVersion = minVersion;
-    }
-
-    /**
-     * This method is for internal use only.
-     */
-    public String getAction() {
-        return NativeProtocol.ACTION_OGMESSAGEPUBLISH_DIALOG;
-    }
-
-    /**
-     * This method is for internal use only.
-     */
-    public int getMinVersion() {
-        return minVersion;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/ResultProcessor.java b/facebook/src/main/java/com/facebook/share/internal/ResultProcessor.java
deleted file mode 100644
index 0633d99da..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/ResultProcessor.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.os.Bundle;
-
-import com.facebook.FacebookCallback;
-import com.facebook.FacebookException;
-import com.facebook.internal.AppCall;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- *
- * Callback class to allow derivations of FacebookDialogBase to do custom operations
- */
-public abstract class ResultProcessor {
-    private FacebookCallback appCallback;
-
-    public ResultProcessor(FacebookCallback callback) {
-        this.appCallback = callback;
-    }
-
-    public abstract void onSuccess(AppCall appCall, Bundle results);
-
-    /**
-     * Override this if anything needs to be done on cancellation (e.g. Logging)
-     */
-    public void onCancel(AppCall appCall) {
-        if (appCallback != null) {
-            appCallback.onCancel();
-        }
-    }
-
-    /**
-     * Override this if anything needs to be done on error (e.g. Logging)
-     */
-    public void onError(AppCall appCall, FacebookException error) {
-        if (appCallback != null) {
-            appCallback.onError(error);
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/ShareConstants.java b/facebook/src/main/java/com/facebook/share/internal/ShareConstants.java
deleted file mode 100644
index c5f3f44b7..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/ShareConstants.java
+++ /dev/null
@@ -1,147 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public class ShareConstants {
-
-    // Common Web Params
-    public static final String WEB_DIALOG_PARAM_ACTION_TYPE = "action_type";
-
-    // Game Request Dialog Params
-    public static final String WEB_DIALOG_PARAM_DATA = "data";
-    public static final String WEB_DIALOG_PARAM_MESSAGE = "message";
-    public static final String WEB_DIALOG_PARAM_TO = "to";
-    public static final String WEB_DIALOG_PARAM_TITLE = "title";
-    public static final String WEB_DIALOG_PARAM_OBJECT_ID = "object_id";
-    public static final String WEB_DIALOG_PARAM_FILTERS = "filters";
-    public static final String WEB_DIALOG_PARAM_SUGGESTIONS = "suggestions";
-
-    // Web Share Dialog Params
-    public static final String WEB_DIALOG_PARAM_HREF = "href";
-    public static final String WEB_DIALOG_PARAM_ACTION_PROPERTIES = "action_properties";
-    public static final String WEB_DIALOG_PARAM_QUOTE = "quote";
-    public static final String WEB_DIALOG_PARAM_HASHTAG = "hashtag";
-
-    // Feed Dialog Params
-    public static final String WEB_DIALOG_PARAM_LINK = "link";
-    public static final String WEB_DIALOG_PARAM_PICTURE = "picture";
-    public static final String WEB_DIALOG_PARAM_NAME = "name";
-    public static final String WEB_DIALOG_PARAM_DESCRIPTION = "description";
-
-    // Join App Group Dialog Params
-    public static final String WEB_DIALOG_PARAM_ID = "id";
-
-    // Create App Group Dialog Params
-    public static final String WEB_DIALOG_PARAM_PRIVACY = "privacy";
-
-    public static final String WEB_DIALOG_RESULT_PARAM_POST_ID = "post_id";
-    public static final String WEB_DIALOG_RESULT_PARAM_REQUEST_ID = "request";
-    public static final String WEB_DIALOG_RESULT_PARAM_TO_ARRAY_MEMBER = "to[%d]";
-
-    // Extras supported for ACTION_FEED_DIALOG:
-    public static final String LEGACY_PLACE_TAG = "com.facebook.platform.extra.PLACE";
-    public static final String LEGACY_FRIEND_TAGS = "com.facebook.platform.extra.FRIENDS";
-    public static final String LEGACY_LINK = "com.facebook.platform.extra.LINK";
-    public static final String LEGACY_IMAGE = "com.facebook.platform.extra.IMAGE";
-    public static final String LEGACY_TITLE = "com.facebook.platform.extra.TITLE";
-    public static final String LEGACY_DESCRIPTION = "com.facebook.platform.extra.DESCRIPTION";
-    public static final String LEGACY_REF = "com.facebook.platform.extra.REF";
-    public static final String LEGACY_DATA_FAILURES_FATAL =
-            "com.facebook.platform.extra.DATA_FAILURES_FATAL";
-    public static final String LEGACY_PHOTOS = "com.facebook.platform.extra.PHOTOS";
-
-    public static final String PLACE_ID = "PLACE";
-    public static final String PEOPLE_IDS = "FRIENDS";
-    public static final String CONTENT_URL = "LINK";
-    public static final String HASHTAG = "HASHTAG";
-    public static final String IMAGE_URL = "IMAGE";
-    public static final String TITLE = "TITLE";
-    public static final String DESCRIPTION = "DESCRIPTION";
-    public static final String REF = "REF";
-    public static final String DATA_FAILURES_FATAL = "DATA_FAILURES_FATAL";
-    public static final String PHOTOS = "PHOTOS";
-    public static final String VIDEO_URL = "VIDEO";
-    public static final String QUOTE = "QUOTE";
-    public static final String MEDIA = "MEDIA";
-
-    // Multimedia args
-    public static final String MEDIA_TYPE = "type";
-    public static final String MEDIA_URI = "uri";
-
-    // Extras supported for ACTION_OGACTIONPUBLISH_DIALOG:
-    public static final String LEGACY_ACTION = "com.facebook.platform.extra.ACTION";
-    public static final String LEGACY_ACTION_TYPE = "com.facebook.platform.extra.ACTION_TYPE";
-    public static final String LEGACY_PREVIEW_PROPERTY_NAME =
-            "com.facebook.platform.extra.PREVIEW_PROPERTY_NAME";
-
-    public static final String ACTION = "ACTION";
-    public static final String ACTION_TYPE = "ACTION_TYPE";
-    public static final String PREVIEW_PROPERTY_NAME = "PREVIEW_PROPERTY_NAME";
-
-    // Method args supported for ACTION_LIKE_DIALOG
-    public static final String OBJECT_ID = "object_id";
-    public static final String OBJECT_TYPE = "object_type";
-
-    // Method args supported for ACTION_APPINVITE_DIALOG
-    public static final String APPLINK_URL = "app_link_url";
-    public static final String PREVIEW_IMAGE_URL = "preview_image_url";
-    public static final String PROMO_CODE = "promo_code";
-    public static final String PROMO_TEXT = "promo_text";
-    public static final String DEEPLINK_CONTEXT = "deeplink_context";
-
-    // Extras supported for MESSAGE_GET_LIKE_STATUS_REQUEST:
-    public static final String EXTRA_OBJECT_ID = "com.facebook.platform.extra.OBJECT_ID";
-
-    // Extras supported in MESSAGE_GET_LIKE_STATUS_REPLY:
-    public static final String EXTRA_OBJECT_IS_LIKED =
-            "com.facebook.platform.extra.OBJECT_IS_LIKED";
-    public static final String EXTRA_LIKE_COUNT_STRING_WITH_LIKE =
-            "com.facebook.platform.extra.LIKE_COUNT_STRING_WITH_LIKE";
-    public static final String EXTRA_LIKE_COUNT_STRING_WITHOUT_LIKE =
-            "com.facebook.platform.extra.LIKE_COUNT_STRING_WITHOUT_LIKE";
-    public static final String EXTRA_SOCIAL_SENTENCE_WITH_LIKE =
-            "com.facebook.platform.extra.SOCIAL_SENTENCE_WITH_LIKE";
-    public static final String EXTRA_SOCIAL_SENTENCE_WITHOUT_LIKE =
-            "com.facebook.platform.extra.SOCIAL_SENTENCE_WITHOUT_LIKE";
-    public static final String EXTRA_UNLIKE_TOKEN = "com.facebook.platform.extra.UNLIKE_TOKEN";
-
-    // Result keys from Native sharing dialogs
-    public static final String EXTRA_RESULT_POST_ID = "com.facebook.platform.extra.POST_ID";
-    public static final String RESULT_POST_ID = "postId";
-
-    public static final int MAXIMUM_PHOTO_COUNT = 6;
-    public static final int MAXIMUM_MEDIA_COUNT = 6;
-    static final String MY_VIDEOS = "me/videos";
-
-    // Feed Dialog
-    public static final String FEED_TO_PARAM = "to";
-    public static final String FEED_LINK_PARAM = "link";
-    public static final String FEED_PICTURE_PARAM = "picture";
-    public static final String FEED_SOURCE_PARAM = "source";
-    public static final String FEED_NAME_PARAM = "name";
-    public static final String FEED_CAPTION_PARAM = "caption";
-    public static final String FEED_DESCRIPTION_PARAM = "description";
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/ShareContentValidation.java b/facebook/src/main/java/com/facebook/share/internal/ShareContentValidation.java
deleted file mode 100644
index ef0dbc864..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/ShareContentValidation.java
+++ /dev/null
@@ -1,441 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.graphics.Bitmap;
-import android.net.Uri;
-
-import com.facebook.FacebookException;
-import com.facebook.FacebookSdk;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
-import com.facebook.share.model.ShareContent;
-import com.facebook.share.model.ShareLinkContent;
-import com.facebook.share.model.ShareMedia;
-import com.facebook.share.model.ShareMediaContent;
-import com.facebook.share.model.ShareOpenGraphAction;
-import com.facebook.share.model.ShareOpenGraphContent;
-import com.facebook.share.model.ShareOpenGraphObject;
-import com.facebook.share.model.ShareOpenGraphValueContainer;
-import com.facebook.share.model.SharePhoto;
-import com.facebook.share.model.SharePhotoContent;
-import com.facebook.share.model.ShareVideo;
-import com.facebook.share.model.ShareVideoContent;
-
-import java.util.List;
-import java.util.Locale;
-import java.util.Set;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public class ShareContentValidation {
-
-    private static Validator WebShareValidator;
-    private static Validator DefaultValidator;
-    private static Validator ApiValidator;
-
-    public static void validateForMessage(ShareContent content) {
-        validate(content, getDefaultValidator());
-    }
-
-    public static void validateForNativeShare(ShareContent content) {
-        validate(content, getDefaultValidator());
-    }
-
-    public static void validateForWebShare(ShareContent content) {
-        validate(content, getWebShareValidator());
-    }
-
-    public static void validateForApiShare(ShareContent content) {
-        validate(content, getApiValidator());
-    }
-
-    private static Validator getDefaultValidator() {
-        if (DefaultValidator == null) {
-            DefaultValidator = new Validator();
-        }
-        return DefaultValidator;
-    }
-
-    private static Validator getApiValidator() {
-        if (ApiValidator == null) {
-            ApiValidator = new ApiValidator();
-        }
-        return ApiValidator;
-    }
-
-    private static Validator getWebShareValidator() {
-        if (WebShareValidator == null) {
-            WebShareValidator = new WebShareValidator();
-        }
-        return WebShareValidator;
-    }
-
-    private static void validate(ShareContent content, Validator validator)
-            throws FacebookException {
-        if (content == null) {
-            throw new FacebookException("Must provide non-null content to share");
-        }
-
-        if (content instanceof ShareLinkContent) {
-            validator.validate((ShareLinkContent) content);
-        } else if (content instanceof SharePhotoContent) {
-            validator.validate((SharePhotoContent) content);
-        } else if (content instanceof ShareVideoContent) {
-            validator.validate((ShareVideoContent) content);
-        } else if (content instanceof ShareOpenGraphContent) {
-            validator.validate((ShareOpenGraphContent) content);
-        } else if (content instanceof ShareMediaContent) {
-            validator.validate((ShareMediaContent) content);
-        }
-    }
-
-    private static void validateLinkContent(
-            ShareLinkContent linkContent, Validator validator) {
-        Uri imageUrl = linkContent.getImageUrl();
-        if (imageUrl != null && !Utility.isWebUri(imageUrl)) {
-            throw new FacebookException("Image Url must be an http:// or https:// url");
-        }
-    }
-
-    private static void validatePhotoContent(
-            SharePhotoContent photoContent, Validator validator) {
-        List<SharePhoto> photos = photoContent.getPhotos();
-        if (photos == null || photos.isEmpty()) {
-            throw new FacebookException("Must specify at least one Photo in SharePhotoContent.");
-        }
-        if (photos.size() > ShareConstants.MAXIMUM_PHOTO_COUNT) {
-            throw new FacebookException(
-                    String.format(
-                            Locale.ROOT,
-                            "Cannot add more than %d photos.",
-                            ShareConstants.MAXIMUM_PHOTO_COUNT));
-        }
-
-        for (SharePhoto photo : photos) {
-            validator.validate(photo);
-        }
-    }
-
-    private static void validatePhotoForApi(SharePhoto photo, Validator validator) {
-        if (photo == null) {
-            throw new FacebookException("Cannot share a null SharePhoto");
-        }
-
-        Bitmap photoBitmap = photo.getBitmap();
-        Uri photoUri = photo.getImageUrl();
-
-        if (photoBitmap == null) {
-            if (photoUri == null) {
-                throw new FacebookException(
-                        "SharePhoto does not have a Bitmap or ImageUrl specified");
-            }
-
-            if (Utility.isWebUri(photoUri) && !validator.isOpenGraphContent()) {
-                throw new FacebookException(
-                        "Cannot set the ImageUrl of a SharePhoto to the Uri of an image on the " +
-                                "web when sharing SharePhotoContent");
-            }
-        }
-    }
-
-    private static void validatePhotoForNativeDialog(SharePhoto photo, Validator validator) {
-        validatePhotoForApi(photo, validator);
-
-        if (photo.getBitmap() != null || !Utility.isWebUri(photo.getImageUrl())) {
-            Validate.hasContentProvider(FacebookSdk.getApplicationContext());
-        }
-    }
-
-    private static void validatePhotoForWebDialog(SharePhoto photo, Validator validator) {
-        if (photo == null) {
-            throw new FacebookException("Cannot share a null SharePhoto");
-        }
-
-        Uri imageUri = photo.getImageUrl();
-        if (imageUri == null || !Utility.isWebUri(imageUri)) {
-            throw new FacebookException(
-                    "SharePhoto must have a non-null imageUrl set to the Uri of an image " +
-                            "on the web");
-        }
-    }
-
-    private static void validateVideoContent(
-            ShareVideoContent videoContent, Validator validator) {
-        validator.validate(videoContent.getVideo());
-
-        SharePhoto previewPhoto = videoContent.getPreviewPhoto();
-        if (previewPhoto != null) {
-            validator.validate(previewPhoto);
-        }
-    }
-
-    private static void validateVideo(ShareVideo video, Validator validator) {
-        if (video == null) {
-            throw new FacebookException("Cannot share a null ShareVideo");
-        }
-
-        Uri localUri = video.getLocalUrl();
-        if (localUri == null) {
-            throw new FacebookException("ShareVideo does not have a LocalUrl specified");
-        }
-
-        if (!Utility.isContentUri(localUri) && !Utility.isFileUri(localUri)) {
-            throw new FacebookException("ShareVideo must reference a video that is on the device");
-        }
-    }
-
-    private static void validateMediaContent(ShareMediaContent mediaContent, Validator validator) {
-        List<ShareMedia> media = mediaContent.getMedia();
-        if (media == null || media.isEmpty()) {
-            throw new FacebookException("Must specify at least one medium in ShareMediaContent.");
-        }
-        if (media.size() > ShareConstants.MAXIMUM_MEDIA_COUNT) {
-            throw new FacebookException(
-                    String.format(
-                            Locale.ROOT,
-                            "Cannot add more than %d media.",
-                            ShareConstants.MAXIMUM_MEDIA_COUNT));
-        }
-        for (ShareMedia medium : media) {
-            validator.validate(medium);
-        }
-    }
-
-    public static void validateMedium(ShareMedia medium, Validator validator) {
-        if (medium instanceof SharePhoto) {
-            validator.validate((SharePhoto) medium);
-        } else if (medium instanceof ShareVideo) {
-            validator.validate((ShareVideo) medium);
-        } else {
-            throw new FacebookException(
-                    String.format(
-                            Locale.ROOT,
-                            "Invalid media type: %s",
-                            medium.getClass().getSimpleName()));
-        }
-    }
-
-    private static void validateOpenGraphContent(
-            ShareOpenGraphContent openGraphContent, Validator validator) {
-        validator.validate(openGraphContent.getAction());
-
-        String previewPropertyName = openGraphContent.getPreviewPropertyName();
-        if (Utility.isNullOrEmpty(previewPropertyName)) {
-            throw new FacebookException("Must specify a previewPropertyName.");
-        }
-
-        if (openGraphContent.getAction().get(previewPropertyName) == null) {
-            throw new FacebookException(
-                    "Property \"" + previewPropertyName + "\" was not found on the action. " +
-                            "The name of the preview property must match the name of an " +
-                            "action property.");
-        }
-    }
-
-    private static void validateOpenGraphAction(
-            ShareOpenGraphAction openGraphAction,
-            Validator validator) {
-        if (openGraphAction == null) {
-            throw new FacebookException("Must specify a non-null ShareOpenGraphAction");
-        }
-
-        if (Utility.isNullOrEmpty(openGraphAction.getActionType())) {
-            throw new FacebookException("ShareOpenGraphAction must have a non-empty actionType");
-        }
-
-        validator.validate((ShareOpenGraphValueContainer) openGraphAction, false);
-    }
-
-    private static void validateOpenGraphObject(
-            ShareOpenGraphObject openGraphObject,
-            Validator validator) {
-        if (openGraphObject == null) {
-            throw new FacebookException("Cannot share a null ShareOpenGraphObject");
-        }
-
-        validator.validate((ShareOpenGraphValueContainer) openGraphObject, true);
-    }
-
-    private static void validateOpenGraphValueContainer(
-            ShareOpenGraphValueContainer valueContainer,
-            Validator validator,
-            boolean requireNamespace) {
-        Set<String> keySet = valueContainer.keySet();
-        for (String key : keySet) {
-            validateOpenGraphKey(key, requireNamespace);
-            Object o = valueContainer.get(key);
-            if (o instanceof List) {
-                List list = (List) o;
-                for (Object objectInList : list) {
-                    if (objectInList == null) {
-                        throw new FacebookException(
-                                "Cannot put null objects in Lists in " +
-                                        "ShareOpenGraphObjects and ShareOpenGraphActions");
-                    }
-                    validateOpenGraphValueContainerObject(objectInList, validator);
-                }
-            } else {
-                validateOpenGraphValueContainerObject(o, validator);
-            }
-        }
-    }
-
-    private static void validateOpenGraphKey(String key, boolean requireNamespace) {
-        if (!requireNamespace) {
-            return;
-        }
-
-        String[] components = key.split(":");
-        if (components.length < 2) {
-            throw new FacebookException("Open Graph keys must be namespaced: %s", key);
-        }
-        for (String component : components) {
-            if (component.isEmpty()) {
-                throw new FacebookException("Invalid key found in Open Graph dictionary: %s", key);
-            }
-        }
-    }
-
-    private static void validateOpenGraphValueContainerObject(
-            Object o, Validator validator) {
-        if (o instanceof ShareOpenGraphObject) {
-            validator.validate((ShareOpenGraphObject) o);
-        } else if (o instanceof SharePhoto) {
-            validator.validate((SharePhoto) o);
-        }
-    }
-
-    private static class WebShareValidator extends Validator {
-        @Override
-        public void validate(final SharePhotoContent photoContent) {
-            throw new FacebookException("Cannot share SharePhotoContent via web sharing dialogs");
-        }
-
-        @Override
-        public void validate(final ShareVideoContent videoContent) {
-            throw new FacebookException("Cannot share ShareVideoContent via web sharing dialogs");
-        }
-
-        @Override
-        public void validate(ShareMediaContent mediaContent) {
-            throw new FacebookException("Cannot share ShareMediaContent via web sharing dialogs");
-        }
-
-        @Override
-        public void validate(final SharePhoto photo) {
-            validatePhotoForWebDialog(photo, this);
-        }
-    }
-
-    private static class ApiValidator extends Validator {
-        @Override
-        public void validate(final SharePhoto photo) {
-            validatePhotoForApi(photo, this);
-        }
-
-        @Override
-        public void validate(ShareVideoContent videoContent) {
-            if (!Utility.isNullOrEmpty(videoContent.getPlaceId())) {
-                throw new FacebookException(
-                        "Cannot share video content with place IDs using the share api");
-            }
-            if (!Utility.isNullOrEmpty(videoContent.getPeopleIds())) {
-                throw new FacebookException(
-                        "Cannot share video content with people IDs using the share api");
-            }
-            if (!Utility.isNullOrEmpty(videoContent.getRef())) {
-                throw new FacebookException(
-                        "Cannot share video content with referrer URL using the share api");
-            }
-        }
-
-        @Override
-        public void validate(ShareMediaContent mediaContent) {
-            throw new FacebookException("Cannot share ShareMediaContent using the share api");
-        }
-
-        @Override
-        public void validate(ShareLinkContent linkContent) {
-            if (!Utility.isNullOrEmpty(linkContent.getQuote())) {
-                throw new FacebookException(
-                        "Cannot share link content with quote using the share api");
-            }
-        }
-    }
-
-    private static class Validator {
-        private boolean isOpenGraphContent = false;
-
-        public void validate(final ShareLinkContent linkContent) {
-            validateLinkContent(linkContent, this);
-        }
-
-        public void validate(final SharePhotoContent photoContent) {
-            validatePhotoContent(photoContent, this);
-        }
-
-        public void validate(final ShareVideoContent videoContent) {
-            validateVideoContent(videoContent, this);
-        }
-
-        public void validate(final ShareMediaContent mediaContent) {
-            validateMediaContent(mediaContent, this);
-        }
-
-        public void validate(final ShareOpenGraphContent openGraphContent) {
-            isOpenGraphContent = true;
-            validateOpenGraphContent(openGraphContent, this);
-        }
-
-        public void validate(final ShareOpenGraphAction openGraphAction) {
-            validateOpenGraphAction(openGraphAction, this);
-        }
-
-        public void validate(final ShareOpenGraphObject openGraphObject) {
-            validateOpenGraphObject(openGraphObject, this);
-        }
-
-        public void validate(final ShareOpenGraphValueContainer openGraphValueContainer,
-                             boolean requireNamespace) {
-            validateOpenGraphValueContainer(openGraphValueContainer, this, requireNamespace);
-        }
-
-        public void validate(final SharePhoto photo) {
-            validatePhotoForNativeDialog(photo, this);
-        }
-
-        public void validate(final ShareVideo video) {
-            validateVideo(video, this);
-        }
-
-        public void validate(final ShareMedia medium) {
-            validateMedium(medium, this);
-        }
-
-        public boolean isOpenGraphContent() {
-            return isOpenGraphContent;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/ShareDialogFeature.java b/facebook/src/main/java/com/facebook/share/internal/ShareDialogFeature.java
deleted file mode 100644
index b75ede84e..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/ShareDialogFeature.java
+++ /dev/null
@@ -1,78 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import com.facebook.internal.DialogFeature;
-import com.facebook.internal.NativeProtocol;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public enum ShareDialogFeature implements DialogFeature {
-    /**
-     * Indicates whether the native Share dialog itself is supported by the installed version of the
-     * Facebook application.
-     */
-    SHARE_DIALOG(NativeProtocol.PROTOCOL_VERSION_20130618),
-    /**
-     * Indicates whether the native Share dialog supports sharing of photo images.
-     */
-    PHOTOS(NativeProtocol.PROTOCOL_VERSION_20140204),
-    /**
-     * Indicates whether the native Share dialog supports sharing of videos.
-     */
-    VIDEO(NativeProtocol.PROTOCOL_VERSION_20141028),
-    /**
-     * Indicates whether the native Share dialog supports sharing of multimedia.
-     */
-    MULTIMEDIA(NativeProtocol.PROTOCOL_VERSION_20160327),
-    /**
-     * Indicates whether the native Share dialog supports hashtags
-     */
-    HASHTAG(NativeProtocol.PROTOCOL_VERSION_20160327),
-    /**
-     * Indicates whether the native Share dialog supports quotes
-     */
-    LINK_SHARE_QUOTES(NativeProtocol.PROTOCOL_VERSION_20160327),
-    ;
-
-    private int minVersion;
-
-    ShareDialogFeature(int minVersion) {
-        this.minVersion = minVersion;
-    }
-
-    /**
-     * This method is for internal use only.
-     */
-    public String getAction() {
-        return NativeProtocol.ACTION_FEED_DIALOG;
-    }
-
-    /**
-     * This method is for internal use only.
-     */
-    public int getMinVersion() {
-        return minVersion;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/ShareFeedContent.java b/facebook/src/main/java/com/facebook/share/internal/ShareFeedContent.java
deleted file mode 100644
index 295ca4047..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/ShareFeedContent.java
+++ /dev/null
@@ -1,190 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.os.Parcel;
-import android.os.Parcelable;
-
-import com.facebook.share.model.ShareContent;
-
-import java.util.HashMap;
-import java.util.Map;
-
-// This class is used specifically for backwards support in unity for various feed parameters
-// Currently this content is only supported if you set the mode to Feed when sharing.
-public class ShareFeedContent
-        extends ShareContent<ShareFeedContent, ShareFeedContent.Builder> {
-    private final String toId;
-    private final String link;
-    private final String linkName;
-    private final String linkCaption;
-    private final String linkDescription;
-    private final String picture;
-    private final String mediaSource;
-
-    private ShareFeedContent(final Builder builder) {
-        super(builder);
-        this.toId = builder.toId;
-        this.link = builder.link;
-        this.linkName = builder.linkName;
-        this.linkCaption = builder.linkCaption;
-        this.linkDescription = builder.linkDescription;
-        this.picture = builder.picture;
-        this.mediaSource = builder.mediaSource;
-    }
-
-    ShareFeedContent(final Parcel in) {
-        super(in);
-        this.toId = in.readString();
-        this.link = in.readString();
-        this.linkName = in.readString();
-        this.linkCaption = in.readString();
-        this.linkDescription = in.readString();
-        this.picture = in.readString();
-        this.mediaSource = in.readString();
-    }
-
-    public String getToId() {
-        return toId;
-    }
-
-    public String getLink() {
-        return link;
-    }
-
-    public String getLinkName() {
-        return linkName;
-    }
-
-    public String getLinkCaption() {
-        return linkCaption;
-    }
-
-    public String getLinkDescription() {
-        return linkDescription;
-    }
-
-    public String getPicture() {
-        return picture;
-    }
-
-    public String getMediaSource() {
-        return mediaSource;
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        super.writeToParcel(out, flags);
-        out.writeString(this.toId);
-        out.writeString(this.link);
-        out.writeString(this.linkName);
-        out.writeString(this.linkCaption);
-        out.writeString(this.linkDescription);
-        out.writeString(this.picture);
-        out.writeString(this.mediaSource);
-    }
-
-    @SuppressWarnings("unused")
-    public static final Parcelable.Creator<ShareFeedContent> CREATOR =
-            new Parcelable.Creator<ShareFeedContent>() {
-                public ShareFeedContent createFromParcel(final Parcel in) {
-                    return new ShareFeedContent(in);
-                }
-
-                public ShareFeedContent[] newArray(final int size) {
-                    return new ShareFeedContent[size];
-                }
-            };
-
-    /**
-     * Builder for the {@link ShareFeedContent} interface.
-     */
-    public static final class Builder
-            extends ShareContent.Builder<ShareFeedContent, Builder> {
-        private String toId;
-        private String link;
-        private String linkName;
-        private String linkCaption;
-        private String linkDescription;
-        private String picture;
-        private String mediaSource;
-
-        public ShareFeedContent.Builder setToId(String toId) {
-            this.toId = toId;
-            return this;
-        }
-
-        public ShareFeedContent.Builder setLink(String link) {
-            this.link = link;
-            return this;
-        }
-
-        public ShareFeedContent.Builder setLinkName(String linkName) {
-            this.linkName = linkName;
-            return this;
-        }
-
-        public ShareFeedContent.Builder setLinkCaption(String linkCaption) {
-            this.linkCaption = linkCaption;
-            return this;
-        }
-
-        public ShareFeedContent.Builder setLinkDescription(String linkDescription) {
-            this.linkDescription = linkDescription;
-            return this;
-        }
-
-        public ShareFeedContent.Builder setPicture(String picture) {
-            this.picture = picture;
-            return this;
-        }
-
-        public ShareFeedContent.Builder setMediaSource(String mediaSource) {
-            this.mediaSource = mediaSource;
-            return this;
-        }
-
-        @Override
-        public ShareFeedContent build() {
-            return new ShareFeedContent(this);
-        }
-
-        @Override
-        public Builder readFrom(final ShareFeedContent model) {
-            if (model == null) {
-                return this;
-            }
-            return super
-                    .readFrom(model)
-                    .setToId(model.getToId())
-                    .setLink(model.getLink())
-                    .setLinkName(model.getLinkName())
-                    .setLinkCaption(model.getLinkCaption())
-                    .setLinkDescription(model.getLinkDescription())
-                    .setPicture(model.getPicture())
-                    .setMediaSource(model.getMediaSource())
-                    ;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/ShareInternalUtility.java b/facebook/src/main/java/com/facebook/share/internal/ShareInternalUtility.java
deleted file mode 100644
index 4e8305eb2..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/ShareInternalUtility.java
+++ /dev/null
@@ -1,720 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.content.Context;
-import android.content.Intent;
-import android.graphics.Bitmap;
-import android.net.Uri;
-import android.os.Bundle;
-import android.os.ParcelFileDescriptor;
-import android.support.annotation.Nullable;
-import android.util.Pair;
-
-import com.facebook.AccessToken;
-import com.facebook.CallbackManager;
-import com.facebook.FacebookCallback;
-import com.facebook.FacebookException;
-import com.facebook.FacebookGraphResponseException;
-import com.facebook.FacebookOperationCanceledException;
-import com.facebook.FacebookRequestError;
-import com.facebook.FacebookSdk;
-import com.facebook.GraphRequest;
-import com.facebook.GraphRequest.Callback;
-import com.facebook.GraphResponse;
-import com.facebook.HttpMethod;
-import com.facebook.appevents.AppEventsLogger;
-import com.facebook.internal.AnalyticsEvents;
-import com.facebook.internal.AppCall;
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.internal.NativeAppCallAttachmentStore;
-import com.facebook.internal.NativeProtocol;
-import com.facebook.internal.Utility;
-import com.facebook.share.Sharer;
-import com.facebook.share.model.ShareMedia;
-import com.facebook.share.model.ShareMediaContent;
-import com.facebook.share.model.ShareOpenGraphAction;
-import com.facebook.share.model.ShareOpenGraphContent;
-import com.facebook.share.model.SharePhoto;
-import com.facebook.share.model.SharePhotoContent;
-import com.facebook.share.model.ShareVideo;
-import com.facebook.share.model.ShareVideoContent;
-import com.facebook.share.widget.LikeView;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-import java.util.UUID;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public final class ShareInternalUtility {
-    public static final String MY_PHOTOS = "me/photos";
-    private static final String MY_STAGING_RESOURCES = "me/staging_resources";
-
-    // Parameter names/values
-    private static final String STAGING_PARAM = "file";
-
-    public static void invokeCallbackWithException(
-            FacebookCallback<Sharer.Result> callback,
-            final Exception exception) {
-        if (exception instanceof FacebookException) {
-            invokeOnErrorCallback(callback, (FacebookException) exception);
-            return;
-        }
-        invokeCallbackWithError(
-                callback,
-                "Error preparing share content: " + exception.getLocalizedMessage());
-    }
-
-    public static void invokeCallbackWithError(
-            FacebookCallback<Sharer.Result> callback,
-            String error) {
-        invokeOnErrorCallback(callback, error);
-    }
-
-    public static void invokeCallbackWithResults(
-            FacebookCallback<Sharer.Result> callback,
-            final String postId,
-            final GraphResponse graphResponse) {
-        FacebookRequestError requestError = graphResponse.getError();
-        if (requestError != null) {
-            String errorMessage = requestError.getErrorMessage();
-            if (Utility.isNullOrEmpty(errorMessage)) {
-                errorMessage = "Unexpected error sharing.";
-            }
-            invokeOnErrorCallback(callback, graphResponse, errorMessage);
-        } else {
-            invokeOnSuccessCallback(callback, postId);
-        }
-    }
-
-    /**
-     * Returns the gesture with which the user completed the native dialog. This is only returned
-     * if the user has previously authorized the calling app with basic permissions.
-     *
-     * @param result the bundle passed back to onActivityResult
-     * @return "post" or "cancel" as the completion gesture
-     */
-    public static String getNativeDialogCompletionGesture(Bundle result) {
-        if (result.containsKey(NativeProtocol.RESULT_ARGS_DIALOG_COMPLETION_GESTURE_KEY)) {
-            return result.getString(NativeProtocol.RESULT_ARGS_DIALOG_COMPLETION_GESTURE_KEY);
-        }
-        return result.getString(NativeProtocol.EXTRA_DIALOG_COMPLETION_GESTURE_KEY);
-    }
-
-    /**
-     * Returns the id of the published post. This is only returned if the user has previously
-     * given the app publish permissions.
-     *
-     * @param result the bundle passed back to onActivityResult
-     * @return the id of the published post
-     */
-    public static String getShareDialogPostId(Bundle result) {
-        if (result.containsKey(ShareConstants.RESULT_POST_ID)) {
-            return result.getString(ShareConstants.RESULT_POST_ID);
-        }
-        if (result.containsKey(ShareConstants.EXTRA_RESULT_POST_ID)) {
-            return result.getString(ShareConstants.EXTRA_RESULT_POST_ID);
-        }
-        return result.getString(ShareConstants.WEB_DIALOG_RESULT_PARAM_POST_ID);
-    }
-
-    public static boolean handleActivityResult(
-            int requestCode,
-            int resultCode,
-            Intent data,
-            ResultProcessor resultProcessor) {
-        AppCall appCall = getAppCallFromActivityResult(requestCode, resultCode, data);
-        if (appCall == null) {
-            return false;
-        }
-
-        NativeAppCallAttachmentStore.cleanupAttachmentsForCall(appCall.getCallId());
-        if (resultProcessor == null) {
-            return true;
-        }
-
-        FacebookException exception = NativeProtocol.getExceptionFromErrorData(
-                NativeProtocol.getErrorDataFromResultIntent(data));
-        if (exception != null) {
-            if (exception instanceof FacebookOperationCanceledException) {
-                resultProcessor.onCancel(appCall);
-            } else {
-                resultProcessor.onError(appCall, exception);
-            }
-        } else {
-            // If here, we did not find an error in the result.
-            Bundle results = NativeProtocol.getSuccessResultsFromIntent(data);
-            resultProcessor.onSuccess(appCall, results);
-        }
-
-        return true;
-    }
-
-    // Custom handling for Share so that we can log results
-    public static ResultProcessor getShareResultProcessor(
-            final FacebookCallback<Sharer.Result> callback) {
-        return new ResultProcessor(callback) {
-            @Override
-            public void onSuccess(AppCall appCall, Bundle results) {
-                if (results != null) {
-                    final String gesture = getNativeDialogCompletionGesture(results);
-                    if (gesture == null || "post".equalsIgnoreCase(gesture)) {
-                        String postId = getShareDialogPostId(results);
-                        invokeOnSuccessCallback(callback, postId);
-                    } else if ("cancel".equalsIgnoreCase(gesture)) {
-                        invokeOnCancelCallback(callback);
-                    } else {
-                        invokeOnErrorCallback(
-                                callback,
-                                new FacebookException(NativeProtocol.ERROR_UNKNOWN_ERROR));
-                    }
-                }
-            }
-
-            @Override
-            public void onCancel(AppCall appCall) {
-                invokeOnCancelCallback(callback);
-            }
-
-            @Override
-            public void onError(AppCall appCall, FacebookException error) {
-                invokeOnErrorCallback(callback, error);
-            }
-        };
-    }
-
-    private static AppCall getAppCallFromActivityResult(int requestCode,
-                                                        int resultCode,
-                                                        Intent data) {
-        UUID callId = NativeProtocol.getCallIdFromIntent(data);
-        if (callId == null) {
-            return null;
-        }
-
-        return AppCall.finishPendingCall(callId, requestCode);
-    }
-
-    public static void registerStaticShareCallback(
-            final int requestCode) {
-        CallbackManagerImpl.registerStaticCallback(
-                requestCode,
-                new CallbackManagerImpl.Callback() {
-                    @Override
-                    public boolean onActivityResult(int resultCode, Intent data) {
-                        return handleActivityResult(
-                                requestCode,
-                                resultCode,
-                                data,
-                                getShareResultProcessor(null));
-                    }
-                }
-        );
-    }
-
-    public static void registerSharerCallback(
-            final int requestCode,
-            final CallbackManager callbackManager,
-            final FacebookCallback<Sharer.Result> callback) {
-        if (!(callbackManager instanceof CallbackManagerImpl)) {
-            throw new FacebookException("Unexpected CallbackManager, " +
-                    "please use the provided Factory.");
-        }
-
-        ((CallbackManagerImpl) callbackManager).registerCallback(
-                requestCode,
-                new CallbackManagerImpl.Callback() {
-                    @Override
-                    public boolean onActivityResult(int resultCode, Intent data) {
-                        return handleActivityResult(
-                                requestCode,
-                                resultCode,
-                                data,
-                                getShareResultProcessor(callback));
-                    }
-                });
-    }
-
-    public static List<String> getPhotoUrls(
-            final SharePhotoContent photoContent,
-            final UUID appCallId) {
-        List<SharePhoto> photos;
-        if (photoContent == null || (photos = photoContent.getPhotos()) == null) {
-            return null;
-        }
-
-        List<NativeAppCallAttachmentStore.Attachment> attachments = Utility.map(
-                photos,
-                new Utility.Mapper<SharePhoto, NativeAppCallAttachmentStore.Attachment>() {
-                    @Override
-                    public NativeAppCallAttachmentStore.Attachment apply(SharePhoto item) {
-                        return getAttachment(appCallId, item);
-                    }
-                });
-
-        List<String> attachmentUrls = Utility.map(
-                attachments,
-                new Utility.Mapper<NativeAppCallAttachmentStore.Attachment, String>() {
-                    @Override
-                    public String apply(NativeAppCallAttachmentStore.Attachment item) {
-                        return item.getAttachmentUrl();
-                    }
-                });
-
-        NativeAppCallAttachmentStore.addAttachments(attachments);
-
-        return attachmentUrls;
-    }
-
-    public static String getVideoUrl(final ShareVideoContent videoContent, final UUID appCallId) {
-        if (videoContent == null || videoContent.getVideo() == null) {
-            return null;
-        }
-
-        NativeAppCallAttachmentStore.Attachment attachment =
-                NativeAppCallAttachmentStore.createAttachment(
-                        appCallId,
-                        videoContent.getVideo().getLocalUrl());
-
-        ArrayList<NativeAppCallAttachmentStore.Attachment> attachments = new ArrayList<>(1);
-        attachments.add(attachment);
-        NativeAppCallAttachmentStore.addAttachments(attachments);
-
-        return attachment.getAttachmentUrl();
-    }
-
-    public static List<Bundle> getMediaInfos(
-            final ShareMediaContent mediaContent,
-            final UUID appCallId) {
-        final List<ShareMedia> media;
-        if (mediaContent == null || (media = mediaContent.getMedia()) == null) {
-            return null;
-        }
-
-        final List<NativeAppCallAttachmentStore.Attachment> attachments = new ArrayList<>();
-        List<Bundle> mediaInfos = Utility.map(
-                media,
-                new Utility.Mapper<ShareMedia, Bundle>() {
-                    @Override
-                    public Bundle apply(ShareMedia item) {
-                        NativeAppCallAttachmentStore.Attachment attachment =
-                                getAttachment(appCallId, item);
-                        attachments.add(attachment);
-                        Bundle mediaInfo = new Bundle();
-                        mediaInfo.putString(
-                                ShareConstants.MEDIA_TYPE,
-                                item.getMediaType().name());
-                        mediaInfo.putString(
-                                ShareConstants.MEDIA_URI,
-                                attachment.getAttachmentUrl());
-                        return mediaInfo;
-                    }
-                });
-
-        NativeAppCallAttachmentStore.addAttachments(attachments);
-
-        return mediaInfos;
-    }
-
-    public static JSONObject toJSONObjectForCall(
-            final UUID callId,
-            final ShareOpenGraphContent content)
-            throws JSONException {
-        final ShareOpenGraphAction action = content.getAction();
-        final ArrayList<NativeAppCallAttachmentStore.Attachment> attachments = new ArrayList<>();
-        JSONObject actionJSON = OpenGraphJSONUtility.toJSONObject(
-                action,
-                new OpenGraphJSONUtility.PhotoJSONProcessor() {
-                    @Override
-                    public JSONObject toJSONObject(SharePhoto photo) {
-                        NativeAppCallAttachmentStore.Attachment attachment = getAttachment(
-                                callId,
-                                photo);
-
-                        if (attachment == null) {
-                            return null;
-                        }
-
-                        attachments.add(attachment);
-
-                        JSONObject photoJSONObject = new JSONObject();
-                        try {
-                            photoJSONObject.put(
-                                    NativeProtocol.IMAGE_URL_KEY, attachment.getAttachmentUrl());
-                            if (photo.getUserGenerated()) {
-                                photoJSONObject.put(NativeProtocol.IMAGE_USER_GENERATED_KEY, true);
-                            }
-                        } catch (JSONException e) {
-                            throw new FacebookException("Unable to attach images", e);
-                        }
-                        return photoJSONObject;
-                    }
-                });
-
-        NativeAppCallAttachmentStore.addAttachments(attachments);
-        // People and place tags must be moved from the share content to the open graph action
-        if (content.getPlaceId() != null) {
-            String placeTag = actionJSON.optString("place");
-
-            // Only if the place tag is already empty or null replace with the id from the
-            // share content
-            if (Utility.isNullOrEmpty(placeTag)) {
-                actionJSON.put("place", content.getPlaceId());
-            }
-        }
-
-        if (content.getPeopleIds() != null) {
-            JSONArray peopleTags = actionJSON.optJSONArray("tags");
-            Set<String> peopleIdSet = peopleTags == null
-                    ? new HashSet<String>()
-                    : Utility.jsonArrayToSet(peopleTags);
-
-            for (String peopleId : content.getPeopleIds()) {
-                peopleIdSet.add(peopleId);
-            }
-            actionJSON.put("tags", new ArrayList<>(peopleIdSet));
-        }
-
-        return actionJSON;
-    }
-
-    public static JSONObject toJSONObjectForWeb(
-            final ShareOpenGraphContent shareOpenGraphContent)
-            throws JSONException {
-        ShareOpenGraphAction action = shareOpenGraphContent.getAction();
-
-        return OpenGraphJSONUtility.toJSONObject(
-                action,
-                new OpenGraphJSONUtility.PhotoJSONProcessor() {
-                    @Override
-                    public JSONObject toJSONObject(SharePhoto photo) {
-                        Uri photoUri = photo.getImageUrl();
-                        JSONObject photoJSONObject = new JSONObject();
-                        try {
-                            photoJSONObject.put(
-                                    NativeProtocol.IMAGE_URL_KEY, photoUri.toString());
-                        } catch (JSONException e) {
-                            throw new FacebookException("Unable to attach images", e);
-                        }
-                        return photoJSONObject;
-                    }
-                });
-    }
-
-    public static JSONArray removeNamespacesFromOGJsonArray(
-            JSONArray jsonArray,
-            boolean requireNamespace) throws JSONException {
-        JSONArray newArray = new JSONArray();
-        for (int i = 0; i < jsonArray.length(); ++i) {
-            Object value = jsonArray.get(i);
-            if (value instanceof JSONArray) {
-                value = removeNamespacesFromOGJsonArray((JSONArray) value, requireNamespace);
-            } else if (value instanceof JSONObject) {
-                value = removeNamespacesFromOGJsonObject((JSONObject) value, requireNamespace);
-            }
-            newArray.put(value);
-        }
-
-        return newArray;
-    }
-
-    public static JSONObject removeNamespacesFromOGJsonObject(
-            JSONObject jsonObject,
-            boolean requireNamespace) {
-        if (jsonObject == null) {
-            return null;
-        }
-
-        try {
-            JSONObject newJsonObject = new JSONObject();
-            JSONObject data = new JSONObject();
-            JSONArray names = jsonObject.names();
-            for (int i = 0; i < names.length(); ++i) {
-                String key = names.getString(i);
-                Object value = null;
-                value = jsonObject.get(key);
-                if (value instanceof JSONObject) {
-                    value = removeNamespacesFromOGJsonObject((JSONObject) value, true);
-                } else if (value instanceof JSONArray) {
-                    value = removeNamespacesFromOGJsonArray((JSONArray) value, true);
-                }
-
-                Pair<String, String> fieldNameAndNamespace = getFieldNameAndNamespaceFromFullName(
-                        key);
-                String namespace = fieldNameAndNamespace.first;
-                String fieldName = fieldNameAndNamespace.second;
-
-                if (requireNamespace) {
-                    if (namespace != null && namespace.equals("fbsdk")) {
-                        newJsonObject.put(key, value);
-                    } else if (namespace == null || namespace.equals("og")) {
-                        newJsonObject.put(fieldName, value);
-                    } else {
-                        data.put(fieldName, value);
-                    }
-                } else if (namespace != null && namespace.equals("fb")) {
-                    newJsonObject.put(key, value);
-                } else {
-                    newJsonObject.put(fieldName, value);
-                }
-            }
-
-            if (data.length() > 0) {
-                newJsonObject.put("data", data);
-            }
-
-            return newJsonObject;
-        } catch (JSONException e) {
-            throw new FacebookException("Failed to create json object from share content");
-        }
-    }
-
-    public static Pair<String, String> getFieldNameAndNamespaceFromFullName(String fullName) {
-        String namespace = null;
-        String fieldName;
-        int index = fullName.indexOf(':');
-        if (index != -1 && fullName.length() > index + 1) {
-            namespace = fullName.substring(0, index);
-            fieldName = fullName.substring(index + 1);
-        } else {
-            fieldName = fullName;
-        }
-        return new Pair<>(namespace, fieldName);
-    }
-
-    private static NativeAppCallAttachmentStore.Attachment getAttachment(
-            UUID callId,
-            ShareMedia medium) {
-        Bitmap bitmap = null;
-        Uri uri = null;
-
-        if (medium instanceof SharePhoto) {
-            SharePhoto photo = (SharePhoto)medium;
-            bitmap = photo.getBitmap();
-            uri = photo.getImageUrl();
-        } else if (medium instanceof ShareVideo) {
-            ShareVideo video = (ShareVideo)medium;
-            uri = video.getLocalUrl();
-        }
-
-        NativeAppCallAttachmentStore.Attachment attachment = null;
-        if (bitmap != null) {
-            attachment = NativeAppCallAttachmentStore.createAttachment(
-                    callId,
-                    bitmap);
-        } else if (uri != null) {
-            attachment = NativeAppCallAttachmentStore.createAttachment(
-                    callId,
-                    uri);
-        }
-
-        return attachment;
-    }
-
-    static void invokeOnCancelCallback(FacebookCallback<Sharer.Result> callback) {
-        logShareResult(AnalyticsEvents.PARAMETER_SHARE_OUTCOME_CANCELLED, null);
-        if (callback != null) {
-            callback.onCancel();
-        }
-    }
-
-    static void invokeOnSuccessCallback(
-            FacebookCallback<Sharer.Result> callback,
-            String postId) {
-        logShareResult(AnalyticsEvents.PARAMETER_SHARE_OUTCOME_SUCCEEDED, null);
-        if (callback != null) {
-            callback.onSuccess(new Sharer.Result(postId));
-        }
-    }
-
-    static void invokeOnErrorCallback(
-            FacebookCallback<Sharer.Result> callback,
-            GraphResponse response,
-            String message) {
-        logShareResult(AnalyticsEvents.PARAMETER_SHARE_OUTCOME_ERROR, message);
-        if (callback != null) {
-            callback.onError(new FacebookGraphResponseException(response, message));
-        }
-    }
-
-
-    static void invokeOnErrorCallback(
-            FacebookCallback<Sharer.Result> callback,
-            String message) {
-        logShareResult(AnalyticsEvents.PARAMETER_SHARE_OUTCOME_ERROR, message);
-        if (callback != null) {
-            callback.onError(new FacebookException(message));
-        }
-    }
-
-    static void invokeOnErrorCallback(
-            FacebookCallback<Sharer.Result> callback,
-            FacebookException ex) {
-        logShareResult(AnalyticsEvents.PARAMETER_SHARE_OUTCOME_ERROR, ex.getMessage());
-        if (callback != null) {
-            callback.onError(ex);
-        }
-    }
-
-    private static void logShareResult(String shareOutcome, String errorMessage) {
-        Context context = FacebookSdk.getApplicationContext();
-        AppEventsLogger logger = AppEventsLogger.newLogger(context);
-        Bundle parameters = new Bundle();
-        parameters.putString(
-                AnalyticsEvents.PARAMETER_SHARE_OUTCOME,
-                shareOutcome
-        );
-
-        if (errorMessage != null) {
-            parameters.putString(AnalyticsEvents.PARAMETER_SHARE_ERROR_MESSAGE, errorMessage);
-        }
-        logger.logSdkEvent(AnalyticsEvents.EVENT_SHARE_RESULT, null, parameters);
-    }
-
-    /**
-     * Creates a new Request configured to upload an image to create a staging resource. Staging
-     * resources allow you to post binary data such as images, in preparation for a post of an Open
-     * Graph object or action which references the image. The URI returned when uploading a staging
-     * resource may be passed as the image property for an Open Graph object or action.
-     *
-     * @param accessToken the access token to use, or null
-     * @param image       the image to upload
-     * @param callback    a callback that will be called when the request is completed to handle
-     *                    success or error conditions
-     * @return a Request that is ready to execute
-     */
-    public static GraphRequest newUploadStagingResourceWithImageRequest(
-            AccessToken accessToken,
-            Bitmap image,
-            Callback callback) {
-        Bundle parameters = new Bundle(1);
-        parameters.putParcelable(STAGING_PARAM, image);
-
-        return new GraphRequest(
-                accessToken,
-                MY_STAGING_RESOURCES,
-                parameters,
-                HttpMethod.POST,
-                callback);
-    }
-
-    /**
-     * Creates a new Request configured to upload an image to create a staging resource. Staging
-     * resources allow you to post binary data such as images, in preparation for a post of an Open
-     * Graph object or action which references the image. The URI returned when uploading a staging
-     * resource may be passed as the image property for an Open Graph object or action.
-     *
-     * @param accessToken the access token to use, or null
-     * @param file        the file containing the image to upload
-     * @param callback    a callback that will be called when the request is completed to handle
-     *                    success or error conditions
-     * @return a Request that is ready to execute
-     * @throws FileNotFoundException
-     */
-    public static GraphRequest newUploadStagingResourceWithImageRequest(
-            AccessToken accessToken,
-            File file,
-            Callback callback
-    ) throws FileNotFoundException {
-        ParcelFileDescriptor descriptor =
-                ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_ONLY);
-        GraphRequest.ParcelableResourceWithMimeType<ParcelFileDescriptor> resourceWithMimeType =
-                new GraphRequest.ParcelableResourceWithMimeType<>(descriptor, "image/png");
-        Bundle parameters = new Bundle(1);
-        parameters.putParcelable(STAGING_PARAM, resourceWithMimeType);
-
-        return new GraphRequest(
-                accessToken,
-                MY_STAGING_RESOURCES,
-                parameters,
-                HttpMethod.POST,
-                callback);
-    }
-
-    /**
-     * Creates a new Request configured to upload an image to create a staging resource. Staging
-     * resources allow you to post binary data such as images, in preparation for a post of an Open
-     * Graph object or action which references the image. The URI returned when uploading a staging
-     * resource may be passed as the image property for an Open Graph object or action.
-     *
-     * @param accessToken the access token to use, or null
-     * @param imageUri    the file:// or content:// Uri pointing to the image to upload
-     * @param callback    a callback that will be called when the request is completed to handle
-     *                    success or error conditions
-     * @return a Request that is ready to execute
-     * @throws FileNotFoundException
-     */
-    public static GraphRequest newUploadStagingResourceWithImageRequest(
-            AccessToken accessToken,
-            Uri imageUri,
-            Callback callback
-    ) throws FileNotFoundException {
-        if (Utility.isFileUri(imageUri)) {
-            return newUploadStagingResourceWithImageRequest(
-                    accessToken,
-                    new File(imageUri.getPath()),
-                    callback);
-        } else if (!Utility.isContentUri(imageUri)) {
-            throw new FacebookException("The image Uri must be either a file:// or content:// Uri");
-        }
-
-        GraphRequest.ParcelableResourceWithMimeType<Uri> resourceWithMimeType =
-                new GraphRequest.ParcelableResourceWithMimeType<>(imageUri, "image/png");
-        Bundle parameters = new Bundle(1);
-        parameters.putParcelable(STAGING_PARAM, resourceWithMimeType);
-
-        return new GraphRequest(
-                accessToken,
-                MY_STAGING_RESOURCES,
-                parameters,
-                HttpMethod.POST,
-                callback);
-    }
-
-    @Nullable
-    public static LikeView.ObjectType getMostSpecificObjectType(
-            LikeView.ObjectType objectType1,
-            LikeView.ObjectType objectType2) {
-        if (objectType1 == objectType2) {
-            return objectType1;
-        }
-
-        if (objectType1 == LikeView.ObjectType.UNKNOWN) {
-            return objectType2;
-        } else if (objectType2 == LikeView.ObjectType.UNKNOWN) {
-            return objectType1;
-        } else {
-            // We can't have a PAGE and an OPEN_GRAPH type be compatible.
-            return null;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/VideoUploader.java b/facebook/src/main/java/com/facebook/share/internal/VideoUploader.java
deleted file mode 100644
index 52a012d9d..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/VideoUploader.java
+++ /dev/null
@@ -1,643 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.net.Uri;
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.Looper;
-import android.os.ParcelFileDescriptor;
-import android.text.TextUtils;
-import android.util.Log;
-
-import com.facebook.AccessToken;
-import com.facebook.AccessTokenTracker;
-import com.facebook.FacebookCallback;
-import com.facebook.FacebookException;
-import com.facebook.FacebookGraphResponseException;
-import com.facebook.FacebookRequestError;
-import com.facebook.FacebookSdk;
-import com.facebook.GraphRequest;
-import com.facebook.GraphResponse;
-import com.facebook.HttpMethod;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
-import com.facebook.internal.WorkQueue;
-import com.facebook.share.Sharer;
-import com.facebook.share.model.ShareVideo;
-import com.facebook.share.model.ShareVideoContent;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.ByteArrayOutputStream;
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.HashSet;
-import java.util.Locale;
-import java.util.Set;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public class VideoUploader {
-
-    private static final String TAG = "VideoUploader";
-
-    private static final String PARAM_UPLOAD_PHASE = "upload_phase";
-    private static final String PARAM_VALUE_UPLOAD_START_PHASE = "start";
-    private static final String PARAM_VALUE_UPLOAD_TRANSFER_PHASE = "transfer";
-    private static final String PARAM_VALUE_UPLOAD_FINISH_PHASE = "finish";
-
-    private static final String PARAM_TITLE = "title";
-    private static final String PARAM_DESCRIPTION = "description";
-    private static final String PARAM_REF = "ref";
-    private static final String PARAM_FILE_SIZE = "file_size";
-    private static final String PARAM_SESSION_ID = "upload_session_id";
-    private static final String PARAM_VIDEO_ID = "video_id";
-    private static final String PARAM_START_OFFSET = "start_offset";
-    private static final String PARAM_END_OFFSET = "end_offset";
-    private static final String PARAM_VIDEO_FILE_CHUNK = "video_file_chunk";
-
-    private static final String ERROR_UPLOAD = "Video upload failed";
-    private static final String ERROR_BAD_SERVER_RESPONSE = "Unexpected error in server response";
-
-    private static final int UPLOAD_QUEUE_MAX_CONCURRENT = WorkQueue.DEFAULT_MAX_CONCURRENT;
-    private static final int MAX_RETRIES_PER_PHASE = 2;
-    private static final int RETRY_DELAY_UNIT_MS = 5000;
-    private static final int RETRY_DELAY_BACK_OFF_FACTOR = 3;
-
-    private static boolean initialized;
-
-    private static Handler handler;
-    private static WorkQueue uploadQueue = new WorkQueue(UPLOAD_QUEUE_MAX_CONCURRENT);
-
-    private static Set<UploadContext> pendingUploads = new HashSet<>();
-
-    private static AccessTokenTracker accessTokenTracker;
-
-    public static synchronized void uploadAsync(
-            ShareVideoContent videoContent,
-            FacebookCallback<Sharer.Result> callback)
-            throws FileNotFoundException {
-        uploadAsync(videoContent, "me", callback);
-    }
-
-    public static synchronized void uploadAsync(
-            ShareVideoContent videoContent,
-            String graphNode,
-            FacebookCallback<Sharer.Result> callback)
-            throws FileNotFoundException {
-        if (!initialized) {
-            registerAccessTokenTracker();
-            initialized = true;
-        }
-
-        Validate.notNull(videoContent, "videoContent");
-        Validate.notNull(graphNode, "graphNode");
-        ShareVideo video = videoContent.getVideo();
-        Validate.notNull(video, "videoContent.video");
-        Uri videoUri = video.getLocalUrl();
-        Validate.notNull(videoUri, "videoContent.video.localUrl");
-
-        UploadContext uploadContext = new UploadContext(videoContent, graphNode, callback);
-        uploadContext.initialize();
-
-        pendingUploads.add(uploadContext);
-
-        enqueueUploadStart(
-                uploadContext,
-                0);
-    }
-
-    private static synchronized void cancelAllRequests() {
-        for (UploadContext uploadContext : pendingUploads) {
-            uploadContext.isCanceled = true;
-        }
-    }
-
-    private static synchronized void removePendingUpload(
-            UploadContext uploadContext) {
-        pendingUploads.remove(uploadContext);
-    }
-
-    private static synchronized Handler getHandler() {
-        if (handler == null) {
-            handler = new Handler(Looper.getMainLooper());
-        }
-        return handler;
-    }
-
-    private static void issueResponse(
-            final UploadContext uploadContext,
-            final FacebookException error,
-            final String videoId) {
-        // Remove the UploadContext synchronously
-        // Once the UploadContext is removed, this is the only reference to it.
-        removePendingUpload(uploadContext);
-
-        Utility.closeQuietly(uploadContext.videoStream);
-
-        if (uploadContext.callback != null) {
-            if (error != null) {
-                ShareInternalUtility.invokeOnErrorCallback(uploadContext.callback, error);
-            } else if (uploadContext.isCanceled) {
-                ShareInternalUtility.invokeOnCancelCallback(uploadContext.callback);
-            } else {
-                ShareInternalUtility.invokeOnSuccessCallback(uploadContext.callback, videoId);
-            }
-        }
-    }
-
-    private static void enqueueUploadStart(UploadContext uploadContext, int completedRetries) {
-        enqueueRequest(
-                uploadContext,
-                new StartUploadWorkItem(
-                        uploadContext,
-                        completedRetries));
-    }
-
-    private static void enqueueUploadChunk(
-            UploadContext uploadContext,
-            String chunkStart,
-            String chunkEnd,
-            int completedRetries) {
-        enqueueRequest(
-                uploadContext,
-                new TransferChunkWorkItem(
-                        uploadContext,
-                        chunkStart,
-                        chunkEnd,
-                        completedRetries));
-    }
-
-    private static void enqueueUploadFinish(UploadContext uploadContext, int completedRetries) {
-        enqueueRequest(
-                uploadContext,
-                new FinishUploadWorkItem(
-                        uploadContext,
-                        completedRetries));
-    }
-
-    private static synchronized void enqueueRequest(
-            UploadContext uploadContext,
-            Runnable workItem) {
-        uploadContext.workItem = uploadQueue.addActiveWorkItem(workItem);
-    }
-
-    private static byte[] getChunk(
-            UploadContext uploadContext,
-            String chunkStart,
-            String chunkEnd)
-            throws IOException {
-        if (!Utility.areObjectsEqual(chunkStart, uploadContext.chunkStart)) {
-            // Something went wrong in the book-keeping here.
-            logError(
-                    null,
-                    "Error reading video chunk. Expected chunk '%s'. Requested chunk '%s'.",
-                    uploadContext.chunkStart,
-                    chunkStart);
-            return null;
-        }
-
-        long chunkStartLong = Long.parseLong(chunkStart);
-        long chunkEndLong = Long.parseLong(chunkEnd);
-        int chunkSize = (int) (chunkEndLong - chunkStartLong);
-
-        ByteArrayOutputStream byteBufferStream = new ByteArrayOutputStream();
-        int bufferSize = Math.min(8192, chunkSize);
-        byte[] buffer = new byte[bufferSize];
-
-        int len = 0;
-        while ((len = uploadContext.videoStream.read(buffer)) != -1) {
-            byteBufferStream.write(buffer, 0, len);
-
-            chunkSize -= len;
-            if (chunkSize == 0) {
-                // Done!
-                break;
-            } else if (chunkSize < 0) {
-                // This should not happen. Signal an error.
-                logError(
-                        null,
-                        "Error reading video chunk. Expected buffer length - '%d'. Actual - '%d'.",
-                        chunkSize + len,
-                        len);
-                return null;
-            }
-        }
-
-        uploadContext.chunkStart = chunkEnd;
-
-        return byteBufferStream.toByteArray();
-    }
-
-    private static void registerAccessTokenTracker() {
-        accessTokenTracker = new AccessTokenTracker() {
-            @Override
-            protected void onCurrentAccessTokenChanged(
-                    AccessToken oldAccessToken,
-                    AccessToken currentAccessToken) {
-                if (oldAccessToken == null) {
-                    // If we never had an access token, then there would be no pending uploads.
-                    return;
-                }
-
-                if (currentAccessToken == null ||
-                        !Utility.areObjectsEqual(
-                                currentAccessToken.getUserId(),
-                                oldAccessToken.getUserId())) {
-                    // Cancel any pending uploads since the user changed.
-                    cancelAllRequests();
-                }
-            }
-        };
-    }
-
-    private static void logError(
-            Exception e,
-            String format,
-            Object... args) {
-        Log.e(TAG, String.format(Locale.ROOT, format, args), e);
-    }
-
-    private static class UploadContext {
-        public final Uri videoUri;
-        public final String title;
-        public final String description;
-        public final String ref;
-        public final String graphNode;
-
-        public final AccessToken accessToken;
-
-        public final FacebookCallback<Sharer.Result> callback;
-
-        public String sessionId;
-        public String videoId;
-        public InputStream videoStream;
-        public long videoSize;
-        public String chunkStart = "0";
-        public boolean isCanceled;
-        public WorkQueue.WorkItem workItem;
-        public Bundle params;
-
-        private UploadContext(
-                ShareVideoContent videoContent,
-                String graphNode,
-                FacebookCallback<Sharer.Result> callback) {
-            // Store off the access token right away so that under no circumstances will we
-            // end up with different tokens between phases. We will rely on the access token tracker
-            // to cancel pending uploads.
-            this.accessToken = AccessToken.getCurrentAccessToken();
-            this.videoUri = videoContent.getVideo().getLocalUrl();
-            this.title = videoContent.getContentTitle();
-            this.description = videoContent.getContentDescription();
-            this.ref = videoContent.getRef();
-            this.graphNode = graphNode;
-            this.callback = callback;
-            this.params = videoContent.getVideo().getParameters();
-            if (!Utility.isNullOrEmpty(videoContent.getPeopleIds())) {
-                this.params.putString("tags", TextUtils.join(", ", videoContent.getPeopleIds()));
-            }
-
-            if (!Utility.isNullOrEmpty(videoContent.getPlaceId())) {
-                this.params.putString("place", videoContent.getPlaceId());
-            }
-
-            if (!Utility.isNullOrEmpty(videoContent.getRef())) {
-                this.params.putString("ref", videoContent.getRef());
-            }
-        }
-
-        private void initialize()
-                throws FileNotFoundException {
-            ParcelFileDescriptor fileDescriptor = null;
-            try {
-                if (Utility.isFileUri(videoUri)) {
-                    fileDescriptor = ParcelFileDescriptor.open(
-                            new File(videoUri.getPath()),
-                            ParcelFileDescriptor.MODE_READ_ONLY);
-                    videoSize = fileDescriptor.getStatSize();
-                    videoStream = new ParcelFileDescriptor.AutoCloseInputStream(fileDescriptor);
-                } else if (Utility.isContentUri(videoUri)) {
-                    videoSize = Utility.getContentSize(videoUri);
-                    videoStream = FacebookSdk
-                            .getApplicationContext()
-                            .getContentResolver()
-                            .openInputStream(videoUri);
-                } else {
-                    throw new FacebookException("Uri must be a content:// or file:// uri");
-                }
-            } catch (FileNotFoundException e) {
-                Utility.closeQuietly(videoStream);
-
-                throw e;
-            }
-        }
-    }
-
-    private static class StartUploadWorkItem extends UploadWorkItemBase {
-        static final Set<Integer> transientErrorCodes = new HashSet<Integer>() {{
-            add(6000);
-        }};
-
-        public StartUploadWorkItem(UploadContext uploadContext, int completedRetries) {
-            super(uploadContext, completedRetries);
-        }
-
-        @Override
-        public Bundle getParameters() {
-            Bundle parameters = new Bundle();
-            parameters.putString(PARAM_UPLOAD_PHASE, PARAM_VALUE_UPLOAD_START_PHASE);
-            parameters.putLong(PARAM_FILE_SIZE, uploadContext.videoSize);
-
-            return parameters;
-        }
-
-        @Override
-        protected void handleSuccess(JSONObject jsonObject)
-                throws JSONException {
-            uploadContext.sessionId = jsonObject.getString(PARAM_SESSION_ID);
-            uploadContext.videoId = jsonObject.getString(PARAM_VIDEO_ID);
-            String startOffset = jsonObject.getString(PARAM_START_OFFSET);
-            String endOffset = jsonObject.getString(PARAM_END_OFFSET);
-
-            enqueueUploadChunk(
-                    uploadContext,
-                    startOffset,
-                    endOffset,
-                    0);
-        }
-
-        @Override
-        protected void handleError(FacebookException error) {
-            logError(error, "Error starting video upload");
-            endUploadWithFailure(error);
-        }
-
-        @Override
-        protected Set<Integer> getTransientErrorCodes() {
-            return transientErrorCodes;
-        }
-
-        @Override
-        protected void enqueueRetry(int retriesCompleted) {
-            enqueueUploadStart(uploadContext, retriesCompleted);
-        }
-    }
-
-    private static class TransferChunkWorkItem extends UploadWorkItemBase {
-        static final Set<Integer> transientErrorCodes = new HashSet<Integer>() {{
-            add(1363019);
-            add(1363021);
-            add(1363030);
-            add(1363033);
-            add(1363041);
-        }};
-
-        private String chunkStart;
-        private String chunkEnd;
-
-        public TransferChunkWorkItem(
-                UploadContext uploadContext,
-                String chunkStart,
-                String chunkEnd,
-                int completedRetries) {
-            super(uploadContext, completedRetries);
-            this.chunkStart = chunkStart;
-            this.chunkEnd = chunkEnd;
-        }
-
-        @Override
-        public Bundle getParameters()
-                throws IOException {
-            Bundle parameters = new Bundle();
-            parameters.putString(PARAM_UPLOAD_PHASE, PARAM_VALUE_UPLOAD_TRANSFER_PHASE);
-            parameters.putString(PARAM_SESSION_ID, uploadContext.sessionId);
-            parameters.putString(PARAM_START_OFFSET, chunkStart);
-
-            byte[] chunk = getChunk(uploadContext, chunkStart, chunkEnd);
-            if (chunk != null) {
-                parameters.putByteArray(PARAM_VIDEO_FILE_CHUNK, chunk);
-            } else {
-                throw new FacebookException("Error reading video");
-            }
-
-            return parameters;
-        }
-
-        @Override
-        protected void handleSuccess(JSONObject jsonObject)
-                throws JSONException {
-            String startOffset = jsonObject.getString(PARAM_START_OFFSET);
-            String endOffset = jsonObject.getString(PARAM_END_OFFSET);
-
-            if (Utility.areObjectsEqual(startOffset, endOffset)) {
-                enqueueUploadFinish(
-                        uploadContext,
-                        0);
-            } else {
-                enqueueUploadChunk(
-                        uploadContext,
-                        startOffset,
-                        endOffset,
-                        0);
-            }
-        }
-
-        @Override
-        protected void handleError(FacebookException error) {
-            logError(error, "Error uploading video '%s'", uploadContext.videoId);
-            endUploadWithFailure(error);
-        }
-
-        @Override
-        protected Set<Integer> getTransientErrorCodes() {
-            return transientErrorCodes;
-        }
-
-        @Override
-        protected void enqueueRetry(int retriesCompleted) {
-            enqueueUploadChunk(uploadContext, chunkStart, chunkEnd, retriesCompleted);
-        }
-    }
-
-    private static class FinishUploadWorkItem extends UploadWorkItemBase {
-        static final Set<Integer> transientErrorCodes = new HashSet<Integer>() {{
-            add(1363011);
-        }};
-
-        public FinishUploadWorkItem(UploadContext uploadContext, int completedRetries) {
-            super(uploadContext, completedRetries);
-        }
-
-        @Override
-        public Bundle getParameters() {
-            Bundle parameters = new Bundle();
-            if (uploadContext.params != null) {
-                parameters.putAll(uploadContext.params);
-            }
-            parameters.putString(PARAM_UPLOAD_PHASE, PARAM_VALUE_UPLOAD_FINISH_PHASE);
-            parameters.putString(PARAM_SESSION_ID, uploadContext.sessionId);
-            Utility.putNonEmptyString(parameters, PARAM_TITLE, uploadContext.title);
-            Utility.putNonEmptyString(parameters, PARAM_DESCRIPTION, uploadContext.description);
-            Utility.putNonEmptyString(parameters, PARAM_REF, uploadContext.ref);
-
-            return parameters;
-        }
-
-        @Override
-        protected void handleSuccess(JSONObject jsonObject)
-                throws JSONException {
-            if (jsonObject.getBoolean("success")) {
-                issueResponseOnMainThread(null, uploadContext.videoId);
-            } else {
-                handleError(new FacebookException(ERROR_BAD_SERVER_RESPONSE));
-            }
-        }
-
-        @Override
-        protected void handleError(FacebookException error) {
-            logError(error, "Video '%s' failed to finish uploading", uploadContext.videoId);
-            endUploadWithFailure(error);
-        }
-
-        @Override
-        protected Set<Integer> getTransientErrorCodes() {
-            return transientErrorCodes;
-        }
-
-        @Override
-        protected void enqueueRetry(int retriesCompleted) {
-            enqueueUploadFinish(uploadContext, retriesCompleted);
-        }
-    }
-
-    private static abstract class UploadWorkItemBase implements Runnable {
-        protected UploadContext uploadContext;
-        protected int completedRetries;
-
-        protected UploadWorkItemBase(
-                UploadContext uploadContext,
-                int completedRetries) {
-            this.uploadContext = uploadContext;
-            this.completedRetries = completedRetries;
-        }
-
-        @Override
-        public void run() {
-            if (!uploadContext.isCanceled) {
-                try {
-                    executeGraphRequestSynchronously(getParameters());
-                } catch (FacebookException fe) {
-                    endUploadWithFailure(fe);
-                } catch (Exception e) {
-                    endUploadWithFailure(new FacebookException(ERROR_UPLOAD, e));
-                }
-            } else {
-                // No specific failure here.
-                endUploadWithFailure(null);
-            }
-        }
-
-        protected void executeGraphRequestSynchronously(Bundle parameters) {
-            GraphRequest request = new GraphRequest(
-                    uploadContext.accessToken,
-                    String.format(Locale.ROOT, "%s/videos", uploadContext.graphNode),
-                    parameters,
-                    HttpMethod.POST,
-                    null);
-            GraphResponse response = request.executeAndWait();
-
-            if (response != null) {
-                FacebookRequestError error = response.getError();
-                JSONObject responseJSON = response.getJSONObject();
-                if (error != null) {
-                    if (!attemptRetry(error.getSubErrorCode())) {
-                        handleError(new FacebookGraphResponseException(response, ERROR_UPLOAD));
-                    }
-                } else if (responseJSON != null) {
-                    try {
-                        handleSuccess(responseJSON);
-                    } catch (JSONException e) {
-                        endUploadWithFailure(new FacebookException(ERROR_BAD_SERVER_RESPONSE, e));
-                    }
-                } else {
-                    handleError(new FacebookException(ERROR_BAD_SERVER_RESPONSE));
-                }
-            } else {
-                handleError(new FacebookException(ERROR_BAD_SERVER_RESPONSE));
-            }
-        }
-
-        private boolean attemptRetry(int errorCode) {
-            if (completedRetries < MAX_RETRIES_PER_PHASE &&
-                    getTransientErrorCodes().contains(errorCode)) {
-                int delay = RETRY_DELAY_UNIT_MS * (int) Math.pow(
-                        RETRY_DELAY_BACK_OFF_FACTOR, completedRetries);
-
-                // Enqueuing the retry from the main thread which should be a lightweight
-                // action with no I/O.
-                getHandler().postDelayed(new Runnable() {
-                    @Override
-                    public void run() {
-                        enqueueRetry(completedRetries + 1);
-                    }
-                }, delay);
-
-                return true;
-            } else {
-                return false;
-            }
-        }
-
-        protected void endUploadWithFailure(FacebookException error) {
-            issueResponseOnMainThread(error, null);
-        }
-
-        protected void issueResponseOnMainThread(
-                final FacebookException error,
-                final String videoId) {
-            getHandler().post(new Runnable() {
-                @Override
-                public void run() {
-                    issueResponse(uploadContext, error, videoId);
-                }
-            });
-        }
-
-        protected abstract Bundle getParameters()
-                throws Exception;
-
-        protected abstract void handleSuccess(JSONObject jsonObject)
-                throws JSONException;
-
-        protected abstract void handleError(FacebookException error);
-
-        protected abstract Set<Integer> getTransientErrorCodes();
-
-        protected abstract void enqueueRetry(int retriesCompleted);
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/internal/WebDialogParameters.java b/facebook/src/main/java/com/facebook/share/internal/WebDialogParameters.java
deleted file mode 100644
index 68d7774b6..000000000
--- a/facebook/src/main/java/com/facebook/share/internal/WebDialogParameters.java
+++ /dev/null
@@ -1,251 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import android.os.Bundle;
-import android.support.annotation.NonNull;
-
-import com.facebook.FacebookException;
-import com.facebook.internal.Utility;
-import com.facebook.internal.WebDialog;
-import com.facebook.share.model.AppGroupCreationContent;
-import com.facebook.share.model.GameRequestContent;
-import com.facebook.share.model.ShareContent;
-import com.facebook.share.model.ShareHashtag;
-import com.facebook.share.model.ShareLinkContent;
-import com.facebook.share.model.ShareOpenGraphContent;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Set;
-
-/**
- * com.facebook.share.internal is solely for the use of other packages within the
- * Facebook SDK for Android. Use of any of the classes in this package is
- * unsupported, and they may be modified or removed without warning at any time.
- */
-public class WebDialogParameters {
-
-    public static Bundle create(AppGroupCreationContent appGroupCreationContent) {
-        Bundle webParams = new Bundle();
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.WEB_DIALOG_PARAM_NAME,
-                appGroupCreationContent.getName());
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.WEB_DIALOG_PARAM_DESCRIPTION,
-                appGroupCreationContent.getDescription());
-
-        AppGroupCreationContent.AppGroupPrivacy privacy =
-                appGroupCreationContent.getAppGroupPrivacy();
-        if (privacy != null) {
-            Utility.putNonEmptyString(
-                    webParams,
-                    ShareConstants.WEB_DIALOG_PARAM_PRIVACY,
-                    privacy.toString().toLowerCase(Locale.ENGLISH));
-        }
-
-        return webParams;
-    }
-
-    public static Bundle create(GameRequestContent gameRequestContent) {
-        Bundle webParams = new Bundle();
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.WEB_DIALOG_PARAM_MESSAGE,
-                gameRequestContent.getMessage());
-        Utility.putCommaSeparatedStringList(
-                webParams,
-                ShareConstants.WEB_DIALOG_PARAM_TO,
-                gameRequestContent.getRecipients());
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.WEB_DIALOG_PARAM_TITLE,
-                gameRequestContent.getTitle());
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.WEB_DIALOG_PARAM_DATA,
-                gameRequestContent.getData());
-        if (gameRequestContent.getActionType() != null) {
-            Utility.putNonEmptyString(
-                    webParams,
-                    ShareConstants.WEB_DIALOG_PARAM_ACTION_TYPE,
-                    gameRequestContent.getActionType().toString().toLowerCase(Locale.ENGLISH));
-        }
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.WEB_DIALOG_PARAM_OBJECT_ID,
-                gameRequestContent.getObjectId());
-        if (gameRequestContent.getFilters() != null) {
-            Utility.putNonEmptyString(
-                    webParams,
-                    ShareConstants.WEB_DIALOG_PARAM_FILTERS,
-                    gameRequestContent.getFilters().toString().toLowerCase(Locale.ENGLISH));
-        }
-        Utility.putCommaSeparatedStringList(
-                webParams,
-                ShareConstants.WEB_DIALOG_PARAM_SUGGESTIONS,
-                gameRequestContent.getSuggestions());
-        return webParams;
-    }
-
-    public static Bundle create(ShareLinkContent shareLinkContent) {
-        Bundle params = createBaseParameters(shareLinkContent);
-        Utility.putUri(
-                params,
-                ShareConstants.WEB_DIALOG_PARAM_HREF,
-                shareLinkContent.getContentUrl());
-
-        Utility.putNonEmptyString(
-                params,
-                ShareConstants.WEB_DIALOG_PARAM_QUOTE,
-                shareLinkContent.getQuote());
-
-        return params;
-    }
-
-    public static Bundle create(ShareOpenGraphContent shareOpenGraphContent) {
-        Bundle params = createBaseParameters(shareOpenGraphContent);
-
-        Utility.putNonEmptyString(
-                params,
-                ShareConstants.WEB_DIALOG_PARAM_ACTION_TYPE,
-                shareOpenGraphContent.getAction().getActionType());
-
-        try {
-            JSONObject ogJSON = ShareInternalUtility.toJSONObjectForWeb(shareOpenGraphContent);
-            ogJSON = ShareInternalUtility.removeNamespacesFromOGJsonObject(ogJSON, false);
-            if (ogJSON != null) {
-                Utility.putNonEmptyString(
-                        params,
-                        ShareConstants.WEB_DIALOG_PARAM_ACTION_PROPERTIES,
-                        ogJSON.toString());
-            }
-        } catch (JSONException e) {
-            throw new FacebookException("Unable to serialize the ShareOpenGraphContent to JSON", e);
-        }
-
-        return params;
-    }
-
-    public static Bundle createBaseParameters(ShareContent shareContent) {
-        Bundle params = new Bundle();
-
-        ShareHashtag shareHashtag = shareContent.getShareHashtag();
-        if (shareHashtag != null) {
-            Utility.putNonEmptyString(
-                    params,
-                    ShareConstants.WEB_DIALOG_PARAM_HASHTAG,
-                    shareHashtag.getHashtag());
-        }
-
-        return params;
-    }
-
-    public static Bundle createForFeed(ShareLinkContent shareLinkContent) {
-        Bundle webParams = new Bundle();
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.WEB_DIALOG_PARAM_NAME,
-                shareLinkContent.getContentTitle());
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.WEB_DIALOG_PARAM_DESCRIPTION,
-                shareLinkContent.getContentDescription());
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.WEB_DIALOG_PARAM_LINK,
-                Utility.getUriString(shareLinkContent.getContentUrl()));
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.WEB_DIALOG_PARAM_PICTURE,
-                Utility.getUriString(shareLinkContent.getImageUrl()));
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.WEB_DIALOG_PARAM_QUOTE,
-                shareLinkContent.getQuote());
-
-        ShareHashtag shareHashtag = shareLinkContent.getShareHashtag();
-        if (shareHashtag != null) {
-            Utility.putNonEmptyString(
-                    webParams,
-                    ShareConstants.WEB_DIALOG_PARAM_HASHTAG,
-                    shareLinkContent.getShareHashtag().getHashtag());
-        }
-        return webParams;
-    }
-
-    public static Bundle createForFeed(ShareFeedContent shareFeedContent) {
-        Bundle webParams = new Bundle();
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.FEED_TO_PARAM,
-                shareFeedContent.getToId());
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.FEED_LINK_PARAM,
-                shareFeedContent.getLink());
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.FEED_PICTURE_PARAM,
-                shareFeedContent.getPicture());
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.FEED_SOURCE_PARAM,
-                shareFeedContent.getMediaSource());
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.FEED_NAME_PARAM,
-                shareFeedContent.getLinkName());
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.FEED_CAPTION_PARAM,
-                shareFeedContent.getLinkCaption());
-
-        Utility.putNonEmptyString(
-                webParams,
-                ShareConstants.FEED_DESCRIPTION_PARAM,
-                shareFeedContent.getLinkDescription());
-
-        return webParams;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/AppGroupCreationContent.java b/facebook/src/main/java/com/facebook/share/model/AppGroupCreationContent.java
deleted file mode 100644
index d85a06756..000000000
--- a/facebook/src/main/java/com/facebook/share/model/AppGroupCreationContent.java
+++ /dev/null
@@ -1,168 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Parcel;
-
-/**
- * Describes the content that will be displayed by the AppGroupCreationDialog
- */
-public final class AppGroupCreationContent implements ShareModel {
-    private final String name;
-    private final String description;
-    private AppGroupPrivacy privacy;
-
-    private AppGroupCreationContent(final Builder builder) {
-        this.name = builder.name;
-        this.description = builder.description;
-        this.privacy = builder.privacy;
-    }
-
-    AppGroupCreationContent(final Parcel in) {
-        this.name = in.readString();
-        this.description = in.readString();
-        this.privacy = (AppGroupPrivacy) in.readSerializable();
-    }
-
-    /**
-     * Gets the name of the group that will be created.
-     *
-     * @return name of the group
-     */
-    public String getName() {
-        return this.name;
-    }
-
-    /**
-     * Gets the description of the group that will be created.
-     *
-     * @return the description
-     */
-    public String getDescription() {
-        return this.description;
-    }
-
-    /**
-     * Gets the privacy for the group that will be created
-     *
-     * @return the privacy of the group
-     */
-    public AppGroupPrivacy getAppGroupPrivacy() {
-        return this.privacy;
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        out.writeString(this.name);
-        out.writeString(this.description);
-        out.writeSerializable(this.privacy);
-    }
-
-    @SuppressWarnings("unused")
-    public static final Creator<AppGroupCreationContent> CREATOR =
-            new Creator<AppGroupCreationContent>() {
-                public AppGroupCreationContent createFromParcel(final Parcel in) {
-                    return new AppGroupCreationContent(in);
-                }
-
-                public AppGroupCreationContent[] newArray(final int size) {
-                    return new AppGroupCreationContent[size];
-                }
-            };
-
-    /**
-     * Specifies the privacy of a group.
-     */
-    public enum AppGroupPrivacy {
-        /**
-         * Anyone can see the group, who's in it and what members post.
-         */
-        Open,
-
-        /**
-         * Anyone can see the group and who's in it, but only members can see posts.
-         */
-        Closed,
-    }
-
-    /**
-     * Builder class for a concrete instance of AppGroupCreationContent
-     */
-    public static class Builder
-            implements ShareModelBuilder<AppGroupCreationContent, Builder> {
-        private String name;
-        private String description;
-        private AppGroupPrivacy privacy;
-
-        /**
-         * Sets the name of the group that will be created.
-         *
-         * @param name name of the group
-         * @return the builder
-         */
-        public Builder setName(final String name) {
-            this.name = name;
-            return this;
-        }
-
-        /**
-         * Sets the description of the group that will be created.
-         *
-         * @param description the description
-         * @return the builder
-         */
-        public Builder setDescription(final String description) {
-            this.description = description;
-            return this;
-        }
-
-        /**
-         * Sets the privacy for the group that will be created
-         *
-         * @param privacy privacy of the group
-         * @return the builder
-         */
-        public Builder setAppGroupPrivacy(final AppGroupPrivacy privacy) {
-            this.privacy = privacy;
-            return this;
-        }
-
-        @Override
-        public AppGroupCreationContent build() {
-            return new AppGroupCreationContent(this);
-        }
-
-
-        @Override
-        public Builder readFrom(final AppGroupCreationContent content) {
-            if (content == null) {
-                return this;
-            }
-            return this
-                    .setName(content.getName())
-                    .setDescription(content.getDescription())
-                    .setAppGroupPrivacy(content.getAppGroupPrivacy());
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/AppInviteContent.java b/facebook/src/main/java/com/facebook/share/model/AppInviteContent.java
deleted file mode 100644
index 00bd93361..000000000
--- a/facebook/src/main/java/com/facebook/share/model/AppInviteContent.java
+++ /dev/null
@@ -1,213 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Parcel;
-import android.text.TextUtils;
-
-/**
- * Describes the content that will be displayed by the AppInviteDialog
- */
-public final class AppInviteContent implements ShareModel {
-    private final String applinkUrl;
-    private final String previewImageUrl;
-    private final String promoCode;
-    private final String promoText;
-
-    private AppInviteContent(final Builder builder) {
-        this.applinkUrl = builder.applinkUrl;
-        this.previewImageUrl = builder.previewImageUrl;
-        this.promoCode = builder.promoCode;
-        this.promoText = builder.promoText;
-    }
-
-    AppInviteContent(final Parcel in) {
-        this.applinkUrl = in.readString();
-        this.previewImageUrl = in.readString();
-        this.promoText = in.readString();
-        this.promoCode = in.readString();
-    }
-
-    /**
-     * Gets the applink url.
-     * @return The applink url for the invite.
-     */
-    public String getApplinkUrl() {
-        return applinkUrl;
-    }
-
-    /**
-     * Gets the preview image url.
-     * @return The preview image url for the invite.
-     */
-    public String getPreviewImageUrl() {
-        return previewImageUrl;
-    }
-
-    /**
-     * Gets the promotion code.
-     * @return The promotion code for invite.
-     */
-    public String getPromotionCode() {
-        return promoCode;
-    }
-
-    /**
-     * Gets the promotion text.
-     * @return The promotion text for invite.
-     */
-    public String getPromotionText() {
-        return promoText;
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        out.writeString(this.applinkUrl);
-        out.writeString(this.previewImageUrl);
-        out.writeString(this.promoText);
-        out.writeString(this.promoCode);
-    }
-
-    @SuppressWarnings("unused")
-    public static final Creator<AppInviteContent> CREATOR =
-        new Creator<AppInviteContent>() {
-            public AppInviteContent createFromParcel(final Parcel in) {
-                return new AppInviteContent(in);
-            }
-
-            public AppInviteContent[] newArray(final int size) {
-                return new AppInviteContent[size];
-            }
-        };
-
-    /**
-     * Builder class for a concrete instance of AppInviteContent
-     */
-    public static class Builder
-            implements ShareModelBuilder<AppInviteContent, Builder> {
-        private String applinkUrl;
-        private String previewImageUrl;
-        private String promoCode;
-        private String promoText;
-
-        /**
-         * Sets the applink url that will be used for deep-linking
-         *
-         * @param applinkUrl the applink url
-         * @return the builder
-         */
-        public Builder setApplinkUrl(final String applinkUrl) {
-            this.applinkUrl = applinkUrl;
-            return this;
-        }
-
-        /**
-         * Sets the preview image url for this invite. See guidelines for correct dimensions.
-         *
-         * @param previewImageUrl url of the image that is going to be used as a preview for invite
-         * @return the builder
-         */
-        public Builder setPreviewImageUrl(final String previewImageUrl) {
-            this.previewImageUrl = previewImageUrl;
-            return this;
-        }
-
-        /**
-         * Sets promotion code and promotion text to be shown on sender and receiver flows
-         * for app invites.
-         *
-         * @param promotionText Promotion text to be shown on sender and receiver flows.
-         *                      Promotion text has to be between 1 and 80 characters long.
-         * @param promotionCode Promotion code to be shown on sender and receiver flows.
-         *                      Promotion code is optional and has to be less than 10 characters
-         *                      long. promotionText needs to be specified if promotionCode
-         *                      is provided.
-         * @return the builder
-         */
-        public Builder setPromotionDetails(final String promotionText, final String promotionCode) {
-            if (!TextUtils.isEmpty(promotionText)) {
-                if (promotionText.length() > 80) {
-                    throw new IllegalArgumentException("" +
-                            "Invalid promotion text, promotionText needs to be between" +
-                            "1 and 80 characters long");
-                }
-
-                if (!isAlphanumericWithSpaces(promotionText)) {
-                    throw new IllegalArgumentException("" +
-                            "Invalid promotion text, promotionText can only contain alphanumeric" +
-                            "characters and spaces.");
-                }
-
-                if (!TextUtils.isEmpty(promotionCode)) {
-
-                    if (promotionCode.length() > 10) {
-                        throw new IllegalArgumentException("" +
-                                "Invalid promotion code, promotionCode can be between" +
-                                "1 and 10 characters long");
-                    }
-
-                    if (!isAlphanumericWithSpaces(promotionCode)) {
-                        throw new IllegalArgumentException("" +
-                                "Invalid promotion code, promotionCode can only contain " +
-                                "alphanumeric characters and spaces.");
-                    }
-                }
-            } else if (!TextUtils.isEmpty(promotionCode)) {
-                throw new IllegalArgumentException("promotionCode cannot be specified " +
-                        "without a valid promotionText");
-            }
-
-            this.promoCode = promotionCode;
-            this.promoText = promotionText;
-            return this;
-        }
-
-        @Override
-        public AppInviteContent build() {
-            return new AppInviteContent(this);
-        }
-
-
-        @Override
-        public Builder readFrom(final AppInviteContent content) {
-            if (content == null) {
-                return this;
-            }
-            return this
-                    .setApplinkUrl(content.getApplinkUrl())
-                    .setPreviewImageUrl(content.getPreviewImageUrl())
-                    .setPromotionDetails(content.getPromotionText(), content.getPromotionCode());
-        }
-
-        private boolean isAlphanumericWithSpaces(String str) {
-            for (int i=0; i<str.length(); i++) {
-                char c = str.charAt(i);
-                if (!Character.isDigit(c) && !Character.isLetter(c) && !Character.isSpaceChar(c))
-                    return false;
-            }
-
-            return true;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/GameRequestContent.java b/facebook/src/main/java/com/facebook/share/model/GameRequestContent.java
deleted file mode 100644
index d9d185471..000000000
--- a/facebook/src/main/java/com/facebook/share/model/GameRequestContent.java
+++ /dev/null
@@ -1,312 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Parcel;
-import android.text.TextUtils;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-/**
- * Describes the content that will be displayed by the GameRequestDialog
- */
-public final class GameRequestContent implements ShareModel {
-    public enum ActionType {
-        SEND,
-        ASKFOR,
-        TURN,
-    }
-
-    public enum Filters {
-        APP_USERS,
-        APP_NON_USERS,
-    }
-
-    private final String message;
-    private final List<String> recipients;
-    private final String title;
-    private final String data;
-
-    private final ActionType actionType;
-    private final String objectId;
-    private final Filters filters;
-    private final List<String> suggestions;
-
-    private GameRequestContent(final Builder builder) {
-        this.message = builder.message;
-        this.recipients = builder.recipients;
-        this.title = builder.title;
-        this.data = builder.data;
-        this.actionType = builder.actionType;
-        this.objectId = builder.objectId;
-        this.filters = builder.filters;
-        this.suggestions = builder.suggestions;
-    }
-
-    GameRequestContent(final Parcel in) {
-        this.message = in.readString();
-        this.recipients = in.createStringArrayList();
-        this.title = in.readString();
-        this.data = in.readString();
-        this.actionType = (ActionType) in.readSerializable();
-        this.objectId = in.readString();
-        this.filters = (Filters) in.readSerializable();
-        this.suggestions = in.createStringArrayList();
-        in.readStringList(this.suggestions);
-    }
-
-    /**
-     * Gets the message that users receiving the request will see.
-     */
-    public String getMessage() {
-        return message;
-    }
-
-    /**
-     * Gets the user IDs or user names the request will be sent to.
-     *
-     * @deprecated Replaced by {@link #getRecipients()}
-     * */
-    public String getTo() {
-        return this.getRecipients() != null ? TextUtils.join(",", this.getRecipients()) : null;
-    }
-
-    /**
-     * Gets the user IDs or user names the request will be sent to.
-     */
-    public List<String> getRecipients() {
-        return recipients;
-    }
-
-    /**
-     * Gets the optional title for the dialog
-     */
-    public String getTitle() {
-        return title;
-    }
-
-    /**
-     * Gets optional data which can be used for tracking
-     */
-    public String getData() {
-        return data;
-    }
-
-    /**
-     * Gets the action type
-     */
-    public ActionType getActionType() {
-        return this.actionType;
-    }
-
-    /**
-     * Gets the open graph id of the object that action type will be performed on
-     */
-    public String getObjectId() {
-        return this.objectId;
-    }
-
-    /**
-     * Get the filters
-     */
-    public Filters getFilters() {
-        return this.filters;
-    }
-
-    /**
-     * Gets a list of suggested user ids
-     */
-    public List<String> getSuggestions() {
-        return this.suggestions;
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        out.writeString(this.message);
-        out.writeStringList(this.recipients);
-        out.writeString(this.title);
-        out.writeString(this.data);
-        out.writeSerializable(this.actionType);
-        out.writeString(this.objectId);
-        out.writeSerializable(this.filters);
-        out.writeStringList(this.suggestions);
-    }
-
-    @SuppressWarnings("unused")
-    public static final Creator<GameRequestContent> CREATOR =
-            new Creator<GameRequestContent>() {
-                public GameRequestContent createFromParcel(final Parcel in) {
-                    return new GameRequestContent(in);
-                }
-
-                public GameRequestContent[] newArray(final int size) {
-                    return new GameRequestContent[size];
-                }
-            };
-
-    /**
-     * Builder class for a concrete instance of GameRequestContent
-     */
-    public static class Builder
-            implements ShareModelBuilder<GameRequestContent, Builder> {
-        private String message;
-        private List<String> recipients;
-        private String data;
-        private String title;
-        private ActionType actionType;
-        private String objectId;
-        private Filters filters;
-        private List<String> suggestions;
-
-        /**
-         * Sets the message users receiving the request will see. The maximum length
-         * is 60 characters.
-         *
-         * @param message the message
-         * @return the builder
-         */
-        public Builder setMessage(final String message) {
-            this.message = message;
-            return this;
-        }
-
-        /**
-         * Sets the user ID or user name the request will be sent to. If this is not
-         * specified, a friend selector will be displayed and the user can select up
-         * to 50 friends.
-         *
-         * @deprecated Replaced by {@link #setRecipients(List)}
-         * @param to the id or user name to send the request to
-         * @return the builder
-         */
-        public Builder setTo(final String to) {
-            if (to != null) {
-                String[] recipientsArray = to.split(",");
-                this.recipients = Arrays.asList(recipientsArray);
-            }
-
-            return this;
-        }
-
-        /**
-         * An array of user IDs, usernames or invite tokens of people to send request.
-         * If this is not specified, a friend selector will be displayed and the user
-         * can select up to 50 friends.
-         *
-         * This is equivalent to the "to" parameter when using the web game request dialog.
-         *
-         * @param recipients the list of user ids to send the request to
-         * @return the builder
-         */
-        public Builder setRecipients(List<String> recipients) {
-            this.recipients = recipients;
-            return this;
-        }
-
-        /**
-         * Sets optional data which can be used for tracking; maximum length is 255
-         * characters.
-         *
-         * @param data the data
-         * @return the builder
-         */
-        public Builder setData(final String data) {
-            this.data = data;
-            return this;
-        }
-
-        /**
-         * Sets an optional title for the dialog; maximum length is 50 characters.
-         *
-         * @param title the title
-         * @return the builder
-         */
-        public Builder setTitle(final String title) {
-            this.title = title;
-            return this;
-        }
-
-        /**
-         * Sets the action type for this request
-         */
-        public Builder setActionType(ActionType actionType) {
-            this.actionType = actionType;
-            return this;
-        }
-
-        /**
-         * Sets the open graph id of the object that action type will be performed on
-         * Only valid (and required) for ActionTypes SEND, ASKFOR
-         */
-        public Builder setObjectId(String objectId) {
-            this.objectId = objectId;
-            return this;
-        }
-
-        /**
-         * Sets the filters for everybody/app users/non app users
-         */
-        public Builder setFilters(Filters filters) {
-            this.filters = filters;
-            return this;
-        }
-
-        /**
-         * Sets a list of user ids suggested as request receivers
-         */
-        public Builder setSuggestions(List<String> suggestions) {
-            this.suggestions = suggestions;
-            return this;
-        }
-
-        @Override
-        public GameRequestContent build() {
-            return new GameRequestContent(this);
-        }
-
-        @Override
-        public Builder readFrom(final GameRequestContent content) {
-            if (content == null) {
-                return this;
-            }
-            return this
-                    .setMessage(content.getMessage())
-                    .setRecipients(content.getRecipients())
-                    .setTitle(content.getTitle())
-                    .setData(content.getData())
-                    .setActionType(content.getActionType())
-                    .setObjectId(content.getObjectId())
-                    .setFilters(content.getFilters())
-                    .setSuggestions(content.getSuggestions());
-        }
-
-        Builder readFrom(final Parcel parcel) {
-            return this.readFrom(
-                    (GameRequestContent) parcel.readParcelable(
-                            GameRequestContent.class.getClassLoader()));
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareContent.java b/facebook/src/main/java/com/facebook/share/model/ShareContent.java
deleted file mode 100644
index acc3c5b0b..000000000
--- a/facebook/src/main/java/com/facebook/share/model/ShareContent.java
+++ /dev/null
@@ -1,215 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.net.Uri;
-import android.os.Parcel;
-import android.support.annotation.Nullable;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
-/**
- * Provides the base class for content to be shared. Contains all common methods for
- * the different types of content.
- */
-public abstract class ShareContent<P extends ShareContent, E extends ShareContent.Builder>
-        implements ShareModel {
-    private final Uri contentUrl;
-    private final List<String> peopleIds;
-    private final String placeId;
-    private final String ref;
-    private final ShareHashtag hashtag;
-
-    protected ShareContent(final Builder builder) {
-        super();
-        this.contentUrl = builder.contentUrl;
-        this.peopleIds = builder.peopleIds;
-        this.placeId = builder.placeId;
-        this.ref = builder.ref;
-        this.hashtag = builder.hashtag;
-    }
-
-    protected ShareContent(final Parcel in) {
-        this.contentUrl = in.readParcelable(Uri.class.getClassLoader());
-        this.peopleIds = readUnmodifiableStringList(in);
-        this.placeId = in.readString();
-        this.ref = in.readString();
-        this.hashtag = new ShareHashtag.Builder().readFrom(in).build();
-    }
-
-    /**
-     * URL for the content being shared.  This URL will be checked for app link meta tags for
-     * linking in platform specific ways.
-     * <p/>
-     * See documentation for <a href="https://developers.facebook.com/docs/applinks/">App Links</a>.
-     *
-     * @return {@link android.net.Uri} representation of the content link.
-     */
-    @Nullable
-    public Uri getContentUrl() {
-        return this.contentUrl;
-    }
-
-    /**
-     * List of Ids for taggable people to tag with this content.
-     * <p/>
-     * See documentation for
-     * <a href="https://developers.facebook.com/docs/graph-api/reference/user/taggable_friends">
-     * Taggable Friends</a>.
-     *
-     * @return {@link java.util.List} of Ids for people to tag.
-     */
-    @Nullable
-    public List<String> getPeopleIds() {
-        return this.peopleIds;
-    }
-
-    /**
-     * The Id for a place to tag with this content.
-     *
-     * @return The Id for the place to tag.
-     */
-    @Nullable
-    public String getPlaceId() {
-        return this.placeId;
-    }
-
-    /**
-     * A value to be added to the referrer URL when a person follows a link from this shared
-     * content on feed.
-     *
-     * @return The ref for the content.
-     */
-    @Nullable
-    public String getRef() {
-        return this.ref;
-    }
-
-    /**
-     * Gets the ShareHashtag, if one has been set, for this content.
-     *
-     * @return The hashtag
-     */
-    @Nullable
-    public ShareHashtag getShareHashtag() {
-        return this.hashtag;
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        out.writeParcelable(this.contentUrl, 0);
-        out.writeStringList(this.peopleIds);
-        out.writeString(this.placeId);
-        out.writeString(this.ref);
-        out.writeParcelable(this.hashtag, 0);
-    }
-
-    private List<String> readUnmodifiableStringList(final Parcel in) {
-        final List<String> list = new ArrayList<String>();
-        in.readStringList(list);
-        return (list.size() == 0 ? null : Collections.unmodifiableList(list));
-    }
-
-    /**
-     * Abstract builder for {@link com.facebook.share.model.ShareContent}
-     */
-    public abstract static class Builder<P extends ShareContent, E extends Builder>
-            implements ShareModelBuilder<P, E> {
-        private Uri contentUrl;
-        private List<String> peopleIds;
-        private String placeId;
-        private String ref;
-        private ShareHashtag hashtag;
-
-        /**
-         * Set the URL for the content being shared.
-         *
-         * @param contentUrl {@link android.net.Uri} representation of the content link.
-         * @return The builder.
-         */
-        public E setContentUrl(@Nullable final Uri contentUrl) {
-            this.contentUrl = contentUrl;
-            return (E) this;
-        }
-
-        /**
-         * Set the list of Ids for taggable people to tag with this content.
-         *
-         * @param peopleIds {@link java.util.List} of Ids for people to tag.
-         * @return The builder.
-         */
-        public E setPeopleIds(@Nullable final List<String> peopleIds) {
-            this.peopleIds = (peopleIds == null ? null : Collections.unmodifiableList(peopleIds));
-            return (E) this;
-        }
-
-        /**
-         * Set the Id for a place to tag with this content.
-         *
-         * @param placeId The Id for the place to tag.
-         * @return The builder.
-         */
-        public E setPlaceId(@Nullable final String placeId) {
-            this.placeId = placeId;
-            return (E) this;
-        }
-
-        /**
-         * Set the value to be added to the referrer URL when a person follows a link from this
-         * shared content on feed.
-         *
-         * @param ref The ref for the content.
-         * @return The builder.
-         */
-        public E setRef(@Nullable final String ref) {
-            this.ref = ref;
-            return (E) this;
-        }
-
-        /**
-         * Set the ShareHashtag for this content
-         *
-         * @param shareHashtag The hashtag for this content
-         * @return The builder
-         */
-        public E setShareHashtag(@Nullable final ShareHashtag shareHashtag) {
-            this.hashtag = shareHashtag;
-            return (E) this;
-        }
-
-        @Override
-        public E readFrom(final P content) {
-            if (content == null) {
-                return (E) this;
-            }
-            return (E) this
-                    .setContentUrl(content.getContentUrl())
-                    .setPeopleIds(content.getPeopleIds())
-                    .setPlaceId(content.getPlaceId())
-                    .setRef(content.getRef());
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareHashtag.java b/facebook/src/main/java/com/facebook/share/model/ShareHashtag.java
deleted file mode 100644
index 95fdbdc90..000000000
--- a/facebook/src/main/java/com/facebook/share/model/ShareHashtag.java
+++ /dev/null
@@ -1,113 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Parcel;
-
-/**
- * Describes a hashtag for sharing.
- *
- * Use {@link ShareHashtag.Builder} to build instances
- */
-public class ShareHashtag implements ShareModel {
-
-    private final String hashtag;
-
-    private ShareHashtag(final Builder builder) {
-        this.hashtag = builder.hashtag;
-    }
-
-    ShareHashtag(final Parcel in) {
-        this.hashtag = in.readString();
-    }
-
-    /**
-     * @return Gets the value of the hashtag for this instance
-     */
-    public String getHashtag() {
-        return hashtag;
-    }
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel dest, int flags) {
-        dest.writeString(hashtag);
-    }
-
-    @SuppressWarnings("unused")
-    public static final Creator<ShareHashtag> CREATOR = new Creator<ShareHashtag>() {
-        public ShareHashtag createFromParcel(final Parcel in) {
-            return new ShareHashtag(in);
-        }
-
-        public ShareHashtag[] newArray(final int size) {
-            return new ShareHashtag[size];
-        }
-    };
-
-    /**
-     * Builder for the {@link com.facebook.share.model.ShareHashtag} class.
-     */
-    public static class Builder implements ShareModelBuilder<ShareHashtag, Builder> {
-
-        private String hashtag;
-
-        /**
-         * Sets the hashtag value for this instance.
-         * @param hashtag
-         * @return the Builder instance
-         */
-        public Builder setHashtag(final String hashtag) {
-            this.hashtag = hashtag;
-            return this;
-        }
-
-        /**
-         * @return Gets the value of the hashtag for this instance
-         */
-        public String getHashtag() {
-            return hashtag;
-        }
-
-        @Override
-        public Builder readFrom(final ShareHashtag model) {
-            if (model == null) {
-                return this;
-            }
-
-            return this.setHashtag(model.getHashtag());
-        }
-
-        Builder readFrom(final Parcel parcel) {
-            return this.readFrom(
-                    (ShareHashtag)parcel.readParcelable(ShareHashtag.class.getClassLoader()));
-        }
-
-        @Override
-        public ShareHashtag build() {
-            return new ShareHashtag(this);
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareLinkContent.java b/facebook/src/main/java/com/facebook/share/model/ShareLinkContent.java
deleted file mode 100644
index f95134a75..000000000
--- a/facebook/src/main/java/com/facebook/share/model/ShareLinkContent.java
+++ /dev/null
@@ -1,187 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.net.Uri;
-import android.os.Parcel;
-import android.support.annotation.Nullable;
-
-/**
- * Describes link content to be shared.
- *
- * Use {@link ShareLinkContent.Builder} to build instances.
- *
- * See documentation for <a href="https://developers.facebook.com/docs/sharing/best-practices">best practices</a>.
- */
-public final class ShareLinkContent
-        extends ShareContent<ShareLinkContent, ShareLinkContent.Builder> {
-    private final String contentDescription;
-    private final String contentTitle;
-    private final Uri imageUrl;
-    private final String quote;
-
-    private ShareLinkContent(final Builder builder) {
-        super(builder);
-        this.contentDescription = builder.contentDescription;
-        this.contentTitle = builder.contentTitle;
-        this.imageUrl = builder.imageUrl;
-        this.quote = builder.quote;
-    }
-
-    ShareLinkContent(final Parcel in) {
-        super(in);
-        this.contentDescription = in.readString();
-        this.contentTitle = in.readString();
-        this.imageUrl = in.readParcelable(Uri.class.getClassLoader());
-        this.quote = in.readString();
-    }
-
-    /**
-     * The description of the link.  If not specified, this field is automatically populated by
-     * information scraped from the link, typically the title of the page.
-     * @return The description of the link.
-     */
-    public String getContentDescription() {
-        return this.contentDescription;
-    }
-
-    /**
-     * The title to display for this link.
-     * @return The link title.
-     */
-    @Nullable
-    public String getContentTitle() {
-        return this.contentTitle;
-    }
-
-    /**
-     * The URL of a picture to attach to this content.
-     * @return The network URL of an image.
-     */
-    @Nullable
-    public Uri getImageUrl() {
-        return this.imageUrl;
-    }
-
-    /**
-     * The quoted text to display for this link.
-     * @return The text quoted from the link.
-     */
-    @Nullable
-    public String getQuote() {
-        return this.quote;
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        super.writeToParcel(out, flags);
-        out.writeString(this.contentDescription);
-        out.writeString(this.contentTitle);
-        out.writeParcelable(this.imageUrl, 0);
-        out.writeString(this.quote);
-    }
-
-    @SuppressWarnings("unused")
-    public static final Creator<ShareLinkContent> CREATOR =
-            new Creator<ShareLinkContent>() {
-        public ShareLinkContent createFromParcel(final Parcel in) {
-            return new ShareLinkContent(in);
-        }
-
-        public ShareLinkContent[] newArray(final int size) {
-            return new ShareLinkContent[size];
-        }
-    };
-
-    /**
-     * Builder for the {@link ShareLinkContent} interface.
-     */
-    public static final class Builder
-            extends ShareContent.Builder<ShareLinkContent, Builder> {
-        private String contentDescription;
-        private String contentTitle;
-        private Uri imageUrl;
-        private String quote;
-
-        /**
-         * Set the contentDescription of the link.
-         * @param contentDescription The contentDescription of the link.
-         * @return The builder.
-         */
-        public Builder setContentDescription(
-                @Nullable final String contentDescription) {
-            this.contentDescription = contentDescription;
-            return this;
-        }
-
-        /**
-         * Set the contentTitle to display for this link.
-         * @param contentTitle The link contentTitle.
-         * @return The builder.
-         */
-        public Builder setContentTitle(@Nullable final String contentTitle) {
-            this.contentTitle = contentTitle;
-            return this;
-        }
-
-        /**
-         * Set the URL of a picture to attach to this content.
-         * @param imageUrl The network URL of an image.
-         * @return The builder.
-         */
-        public Builder setImageUrl(@Nullable final Uri imageUrl) {
-            this.imageUrl = imageUrl;
-            return this;
-        }
-
-        /**
-         * Set the quote to display for this link.
-         * @param quote The text quoted from the link.
-         * @return The builder.
-         */
-        public Builder setQuote(@Nullable final String quote) {
-            this.quote = quote;
-            return this;
-        }
-
-        @Override
-        public ShareLinkContent build() {
-            return new ShareLinkContent(this);
-        }
-
-        @Override
-        public Builder readFrom(final ShareLinkContent model) {
-            if (model == null) {
-                return this;
-            }
-            return super
-                    .readFrom(model)
-                    .setContentDescription(model.getContentDescription())
-                    .setImageUrl(model.getImageUrl())
-                    .setContentTitle(model.getContentTitle())
-                    .setQuote(model.getQuote())
-                    ;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareMedia.java b/facebook/src/main/java/com/facebook/share/model/ShareMedia.java
deleted file mode 100644
index f1be45be7..000000000
--- a/facebook/src/main/java/com/facebook/share/model/ShareMedia.java
+++ /dev/null
@@ -1,123 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Bundle;
-import android.os.Parcel;
-import android.os.ParcelFormatException;
-import android.os.Parcelable;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-/**
- * Base class for shared media (photos, videos, etc).
- */
-public abstract class ShareMedia implements ShareModel {
-
-    public enum Type {
-        PHOTO,
-        VIDEO,
-        ;
-    }
-
-    private final Bundle params;
-
-    protected ShareMedia(final Builder builder) {
-        this.params = new Bundle(builder.params);
-    }
-
-    ShareMedia(final Parcel in) {
-        this.params = in.readBundle();
-    }
-
-    /**
-     * @deprecated This method is deprecated. Use GraphRequest directly to set parameters.
-     */
-    @Deprecated
-    public Bundle getParameters() {
-        return new Bundle(params);
-    }
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel dest, int flags) {
-        dest.writeBundle(params);
-    }
-
-    public abstract Type getMediaType();
-
-    /**
-     * Builder for the {@link com.facebook.share.model.ShareMedia} class.
-     */
-    public static abstract class Builder<M extends ShareMedia, B extends Builder>
-            implements ShareModelBuilder<M, B> {
-        private Bundle params = new Bundle();
-
-        /**
-         * @deprecated This method is deprecated. Use GraphRequest directly to set parameters.
-         */
-        @Deprecated
-        public B setParameter(final String key, final String value) {
-            params.putString(key, value);
-            return (B) this;
-        }
-
-        /**
-         * @deprecated This method is deprecated. Use GraphRequest directly to set parameters.
-         */
-        @Deprecated
-        public B setParameters(final Bundle parameters) {
-            params.putAll(parameters);
-            return (B) this;
-        }
-
-        @Override
-        public B readFrom(final M model) {
-            if (model == null) {
-                return (B) this;
-            }
-            return this.setParameters(model.getParameters());
-        }
-
-        static void writeListTo(
-                final Parcel out,
-                int parcelFlags,
-                final List<ShareMedia> media) {
-            out.writeParcelableArray((ShareMedia[]) media.toArray(), parcelFlags);
-        }
-
-        static List<ShareMedia> readListFrom(final Parcel in) {
-            Parcelable[] parcelables = in.readParcelableArray(
-                    ShareMedia.class.getClassLoader());
-            List<ShareMedia> shareMedia = new ArrayList<>(parcelables.length);
-            for (Parcelable parcelable : parcelables) {
-                shareMedia.add((ShareMedia) parcelable);
-            }
-            return shareMedia;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareMediaContent.java b/facebook/src/main/java/com/facebook/share/model/ShareMediaContent.java
deleted file mode 100644
index 3474d1a16..000000000
--- a/facebook/src/main/java/com/facebook/share/model/ShareMediaContent.java
+++ /dev/null
@@ -1,149 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Parcel;
-import android.support.annotation.Nullable;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-
-public final class ShareMediaContent
-        extends ShareContent<ShareMediaContent, ShareMediaContent.Builder> {
-    private final List<ShareMedia> media;
-
-    private ShareMediaContent(final Builder builder) {
-        super(builder);
-        this.media = Collections.unmodifiableList(builder.media);
-    }
-
-    ShareMediaContent(final Parcel in) {
-        super(in);
-        ShareMedia[] shareMedia = (ShareMedia[])in.readParcelableArray(
-                ShareMedia.class.getClassLoader());
-        this.media = Arrays.asList(shareMedia);
-    }
-
-    /**
-     * Media to be shared.
-     *
-     * @return {@link java.util.List} of {@link ShareMedia}s.
-     */
-    @Nullable
-    public List<ShareMedia> getMedia() {
-        return this.media;
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        super.writeToParcel(out, flags);
-        out.writeParcelableArray((ShareMedia[])this.media.toArray(), flags);
-    }
-
-    @SuppressWarnings("unused")
-    public static final Creator<ShareMediaContent> CREATOR = new Creator<ShareMediaContent>() {
-        public ShareMediaContent createFromParcel(final Parcel in) {
-            return new ShareMediaContent(in);
-        }
-
-        public ShareMediaContent[] newArray(final int size) {
-            return new ShareMediaContent[size];
-        }
-    };
-
-    /**
-     * Builder for the {@link SharePhotoContent} interface.
-     */
-    public static class Builder extends ShareContent.Builder<ShareMediaContent, Builder> {
-        private final List<ShareMedia> media = new ArrayList<>();
-
-        /**
-         * Adds a medium to the content.
-         *
-         * @param medium {@link com.facebook.share.model.ShareMedia} to add.
-         * @return The builder.
-         */
-        public Builder addMedium(@Nullable final ShareMedia medium) {
-            if (medium != null) {
-                ShareMedia mediumToAdd;
-                if (medium instanceof SharePhoto) {
-                    mediumToAdd = new SharePhoto.Builder().readFrom((SharePhoto) medium).build();
-                } else if (medium instanceof ShareVideo) {
-                    mediumToAdd = new ShareVideo.Builder().readFrom((ShareVideo) medium).build();
-                } else {
-                    throw new IllegalArgumentException(
-                            "medium must be either a SharePhoto or ShareVideo");
-                }
-                this.media.add(mediumToAdd);
-            }
-            return this;
-        }
-
-        /**
-         * Adds multiple media to the content.
-         *
-         * @param media {@link java.util.List} of {@link com.facebook.share.model.ShareMedia}
-         *               to add.
-         * @return The builder.
-         */
-        public Builder addMedia(@Nullable final List<ShareMedia> media) {
-            if (media != null) {
-                for (ShareMedia medium : media) {
-                    this.addMedium(medium);
-                }
-            }
-            return this;
-        }
-
-        @Override
-        public ShareMediaContent build() {
-            return new ShareMediaContent(this);
-        }
-
-        @Override
-        public Builder readFrom(final ShareMediaContent model) {
-            if (model == null) {
-                return this;
-            }
-            return super.
-                    readFrom(model)
-                    .addMedia(model.getMedia());
-        }
-
-        /**
-         * Replaces the media for the builder.
-         *
-         * @param media {@link java.util.List} of {@link com.facebook.share.model.ShareMedia}
-         *   to add.
-         * @return The builder.
-         */
-        public Builder setMedia(@Nullable final List<ShareMedia> media) {
-            this.media.clear();
-            this.addMedia(media);
-            return this;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareModel.java b/facebook/src/main/java/com/facebook/share/model/ShareModel.java
deleted file mode 100644
index 31bf11911..000000000
--- a/facebook/src/main/java/com/facebook/share/model/ShareModel.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Parcelable;
-
-/**
- * Base interface for share models.
- */
-public interface ShareModel extends Parcelable {
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareModelBuilder.java b/facebook/src/main/java/com/facebook/share/model/ShareModelBuilder.java
deleted file mode 100644
index 4e8fe2968..000000000
--- a/facebook/src/main/java/com/facebook/share/model/ShareModelBuilder.java
+++ /dev/null
@@ -1,40 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Parcel;
-
-import com.facebook.share.ShareBuilder;
-
-/**
- * Interface for builders related to sharing.
- * @param <P> The model protocol to be built.
- * @param <E> The concrete builder class.
- */
-public interface ShareModelBuilder<P extends ShareModel, E extends ShareModelBuilder>
-        extends ShareBuilder<P, E> {
-    /**
-     * Reads the values from a ShareModel into the builder.
-     * @param model The source ShareModel
-     * @return The builder.
-     */
-    public E readFrom(P model);
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphAction.java b/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphAction.java
deleted file mode 100644
index 683cddd21..000000000
--- a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphAction.java
+++ /dev/null
@@ -1,107 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Parcel;
-import android.support.annotation.Nullable;
-
-/**
- * Describes an Open Graph action
- * <p/>
- * Use {@link ShareOpenGraphAction.Builder} to create instances
- * <p/>
- * See the documentation for
- * <a href="https://developers.facebook.com/docs/opengraph/actions/">Open Graph Actions</a>.
- */
-public final class ShareOpenGraphAction
-        extends ShareOpenGraphValueContainer<ShareOpenGraphAction, ShareOpenGraphAction.Builder> {
-
-    private ShareOpenGraphAction(final Builder builder) {
-        super(builder);
-    }
-
-    ShareOpenGraphAction(final Parcel in) {
-        super(in);
-    }
-
-    /**
-     * The type for the action.
-     *
-     * @return The type for the action.
-     */
-    @Nullable
-    public String getActionType() {
-        return this.getString(Builder.ACTION_TYPE_KEY);
-    }
-
-    @SuppressWarnings("unused")
-    public static final Creator<ShareOpenGraphAction> CREATOR =
-            new Creator<ShareOpenGraphAction>() {
-                public ShareOpenGraphAction createFromParcel(final Parcel in) {
-                    return new ShareOpenGraphAction(in);
-                }
-
-                public ShareOpenGraphAction[] newArray(final int size) {
-                    return new ShareOpenGraphAction[size];
-                }
-            };
-
-    /**
-     * Builder for the {@link com.facebook.share.model.ShareOpenGraphAction} interface.
-     */
-    public static final class Builder
-            extends ShareOpenGraphValueContainer.Builder<ShareOpenGraphAction, Builder> {
-        private static final String ACTION_TYPE_KEY = "og:type";
-
-        /**
-         * Sets the type for the action.
-         *
-         * @param actionType The type for the action.
-         * @return The builder.
-         */
-        public Builder setActionType(final String actionType) {
-            this.putString(ACTION_TYPE_KEY, actionType);
-            return this;
-        }
-
-        @Override
-        public ShareOpenGraphAction build() {
-            return new ShareOpenGraphAction(this);
-        }
-
-        @Override
-        public Builder readFrom(final ShareOpenGraphAction model) {
-            if (model == null) {
-                return this;
-            }
-            return super
-                    .readFrom(model)
-                    .setActionType(model.getActionType())
-                    ;
-        }
-
-        Builder readFrom(final Parcel parcel) {
-            return this.readFrom(
-                    (ShareOpenGraphAction) parcel.readParcelable(
-                            ShareOpenGraphAction.class.getClassLoader()));
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphContent.java b/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphContent.java
deleted file mode 100644
index 725b1cc82..000000000
--- a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphContent.java
+++ /dev/null
@@ -1,148 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Parcel;
-import android.support.annotation.Nullable;
-
-/**
- * Describes Open Graph content that is to be shared
- * <p/>
- * Use {@link ShareOpenGraphContent.Builder} to create instances
- * <p/>
- * See the documentation for <a href="https://developers.facebook.com/docs/opengraph">Open Graph</a>
- * and for <a href="https://developers.facebook.com/docs/sharing/best-practices">best practices</a>.
- */
-public final class ShareOpenGraphContent
-        extends ShareContent<ShareOpenGraphContent, ShareOpenGraphContent.Builder> {
-    private final ShareOpenGraphAction action;
-    private final String previewPropertyName;
-
-    private ShareOpenGraphContent(final Builder builder) {
-        super(builder);
-        this.action = builder.action;
-        this.previewPropertyName = builder.previewPropertyName;
-    }
-
-    ShareOpenGraphContent(final Parcel in) {
-        super(in);
-        this.action = new ShareOpenGraphAction.Builder().readFrom(in).build();
-        this.previewPropertyName = in.readString();
-    }
-
-    /**
-     * The Open Graph Action for the content.
-     *
-     * @return {@link ShareOpenGraphAction}
-     */
-    @Nullable
-    public ShareOpenGraphAction getAction() {
-        return this.action;
-    }
-
-    /**
-     * The property name for the primary {@link com.facebook.share.model.ShareOpenGraphObject}
-     * in the action.
-     *
-     * @return The property name for the preview object.
-     */
-    @Nullable
-    public String getPreviewPropertyName() {
-        return this.previewPropertyName;
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        super.writeToParcel(out, flags);
-        out.writeParcelable(this.action, 0);
-        out.writeString(this.previewPropertyName);
-    }
-
-    @SuppressWarnings("unused")
-    public static final Creator<ShareOpenGraphContent> CREATOR =
-            new Creator<ShareOpenGraphContent>() {
-                public ShareOpenGraphContent createFromParcel(final Parcel in) {
-                    return new ShareOpenGraphContent(in);
-                }
-
-                public ShareOpenGraphContent[] newArray(final int size) {
-                    return new ShareOpenGraphContent[size];
-                }
-            };
-
-    /**
-     * Builder for the {@link com.facebook.share.model.ShareOpenGraphContent} interface.
-     */
-    public static final class Builder
-            extends ShareContent.Builder<com.facebook.share.model.ShareOpenGraphContent, Builder> {
-        private ShareOpenGraphAction action;
-        private String previewPropertyName;
-
-        /**
-         * Sets the Open Graph Action for the content.
-         *
-         * @param action {@link com.facebook.share.model.ShareOpenGraphAction}
-         * @return The builder.
-         */
-        public Builder setAction(@Nullable final ShareOpenGraphAction action) {
-            this.action =
-                    (action == null
-                            ? null
-                            : new ShareOpenGraphAction.Builder()
-                            .readFrom(action).build());
-            return this;
-        }
-
-        /**
-         * Sets the property name for the primary
-         * {@link com.facebook.share.model.ShareOpenGraphObject} in the action.
-         *
-         * @param previewPropertyName The property name for the preview object.
-         * @return The builder.
-         */
-        public Builder setPreviewPropertyName(
-                @Nullable final String previewPropertyName) {
-            this.previewPropertyName = previewPropertyName;
-            return this;
-        }
-
-        @Override
-        public com.facebook.share.model.ShareOpenGraphContent build() {
-            return new ShareOpenGraphContent(this);
-        }
-
-        @Override
-        public Builder readFrom(final com.facebook.share.model.ShareOpenGraphContent model) {
-            if (model == null) {
-                return this;
-            }
-            return super
-                    .readFrom(model)
-                    .setAction(model.getAction())
-                    .setPreviewPropertyName(model.getPreviewPropertyName())
-                    ;
-        }
-
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphObject.java b/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphObject.java
deleted file mode 100644
index 368207022..000000000
--- a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphObject.java
+++ /dev/null
@@ -1,79 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Parcel;
-
-import com.facebook.internal.NativeProtocol;
-
-/**
- * Describes an Open Graph Object to be created.
- * <p/>
- * Use {@link ShareOpenGraphObject.Builder} to create instances
- * <p/>
- * See the documentation for
- * <a href="https://developers.facebook.com/docs/opengraph/objects/">Open Graph Objects</a>.
- */
-public final class ShareOpenGraphObject extends
-        ShareOpenGraphValueContainer<ShareOpenGraphObject, ShareOpenGraphObject.Builder> {
-
-    private ShareOpenGraphObject(final Builder builder) {
-        super(builder);
-    }
-
-    ShareOpenGraphObject(final Parcel in) {
-        super(in);
-    }
-
-    @SuppressWarnings("unused")
-    public static final Creator<ShareOpenGraphObject> CREATOR =
-            new Creator<ShareOpenGraphObject>() {
-        public ShareOpenGraphObject createFromParcel(final Parcel in) {
-            return new ShareOpenGraphObject(in);
-        }
-
-        public ShareOpenGraphObject[] newArray(final int size) {
-            return new ShareOpenGraphObject[size];
-        }
-    };
-
-    /**
-     * Builder for the {@link com.facebook.share.model.ShareOpenGraphObject} interface.
-     */
-    public static final class Builder
-            extends ShareOpenGraphValueContainer.Builder<ShareOpenGraphObject, Builder> {
-        public Builder() {
-            super();
-            this.putBoolean(NativeProtocol.OPEN_GRAPH_CREATE_OBJECT_KEY, true);
-        }
-
-        @Override
-        public ShareOpenGraphObject build() {
-            return new ShareOpenGraphObject(this);
-        }
-
-        Builder readFrom(final Parcel parcel) {
-            return this.readFrom(
-                    (ShareOpenGraphObject)parcel.readParcelable(
-                            ShareOpenGraphObject.class.getClassLoader()));
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphValueContainer.java b/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphValueContainer.java
deleted file mode 100644
index 789a47b78..000000000
--- a/facebook/src/main/java/com/facebook/share/model/ShareOpenGraphValueContainer.java
+++ /dev/null
@@ -1,418 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Bundle;
-import android.os.Parcel;
-import android.os.Parcelable;
-import android.support.annotation.Nullable;
-
-import java.util.ArrayList;
-import java.util.Set;
-
-/**
- * Provides an abstract class to contain Open Graph values.
- *
- * Use {@link ShareOpenGraphValueContainer.Builder} to create instances
- */
-public abstract class ShareOpenGraphValueContainer
-        <P extends ShareOpenGraphValueContainer, E extends ShareOpenGraphValueContainer.Builder>
-        implements ShareModel {
-    private final Bundle bundle;
-
-    protected ShareOpenGraphValueContainer(
-            final Builder<P, E> builder) {
-        super();
-        this.bundle = (Bundle)builder.bundle.clone();
-    }
-
-    ShareOpenGraphValueContainer(final Parcel in) {
-        this.bundle = in.readBundle(Builder.class.getClassLoader());
-    }
-
-    /**
-     * Gets a value out of the object.
-     * @param key The key for the value.
-     * @return The boolean value.
-     */
-    @Nullable
-    public Object get(String key) {
-        return this.bundle.get(key);
-    }
-
-    /**
-     * Gets a boolean value out of the object.
-     * @param key The key for the value.
-     * @param defaultValue The value to return if no value is found for the specified key.
-     * @return The boolean value.
-     */
-    public boolean getBoolean(final String key, final boolean defaultValue) {
-        return this.bundle.getBoolean(key, defaultValue);
-    }
-
-    /**
-     * Gets an array of boolean values out of the object.
-     * @param key The key for the value.
-     * @return The boolean values.
-     */
-    @Nullable
-    public boolean[] getBooleanArray(final String key) {
-        return this.bundle.getBooleanArray(key);
-    }
-
-    /**
-     * Gets a double value out of the object.
-     * @param key The key for the value.
-     * @param defaultValue The value to return if no value is found for the specified key.
-     * @return The double value.
-     */
-    public double getDouble(final String key, final double defaultValue) {
-        return this.bundle.getDouble(key, defaultValue);
-    }
-
-    /**
-     * Gets an array of double values out of the object.
-     * @param key The key for the value.
-     * @return The double values.
-     */
-    @Nullable
-    public double[] getDoubleArray(final String key) {
-        return this.bundle.getDoubleArray(key);
-    }
-
-    /**
-     * Gets an int value out of the object.
-     * @param key The key for the value.
-     * @param defaultValue The value to return if no value is found for the specified key.
-     * @return The int value.
-     */
-    public int getInt(final String key, final int defaultValue) {
-        return this.bundle.getInt(key, defaultValue);
-    }
-
-    /**
-     * Gets an array of int values out of the object.
-     * @param key The key for the value.
-     * @return The int values.
-     */
-    @Nullable
-    public int[] getIntArray(final String key) {
-        return this.bundle.getIntArray(key);
-    }
-
-    /**
-     * Gets an long value out of the object.
-     * @param key The key for the value.
-     * @param defaultValue The value to return if no value is found for the specified key.
-     * @return The long value.
-     */
-    public long getLong(final String key, final long defaultValue) {
-        return this.bundle.getLong(key, defaultValue);
-    }
-
-    /**
-     * Gets an array of long values out of the object.
-     * @param key The key for the value.
-     * @return The long values.
-     */
-    @Nullable
-    public long[] getLongArray(final String key) {
-        return this.bundle.getLongArray(key);
-    }
-
-    /**
-     * Gets an object value out of the object.
-     * @param key The key for the value.
-     * @return The object value.
-     */
-    public ShareOpenGraphObject getObject(final String key) {
-        final Object value = this.bundle.get(key);
-        return (value instanceof ShareOpenGraphObject ? (ShareOpenGraphObject)value : null);
-    }
-
-    /**
-     * Gets an array of object values out of the object.
-     * @param key The key for the value.
-     * @return The object values.
-     */
-    @Nullable
-    public ArrayList<ShareOpenGraphObject> getObjectArrayList(final String key) {
-        final ArrayList<Parcelable> items = this.bundle.getParcelableArrayList(key);
-        if (items == null) {
-            return null;
-        }
-        final ArrayList<ShareOpenGraphObject> list = new ArrayList<ShareOpenGraphObject>();
-        for (Parcelable item : items) {
-            if (item instanceof ShareOpenGraphObject) {
-                list.add((ShareOpenGraphObject)item);
-            }
-        }
-        return list;
-    }
-
-    /**
-     * Gets a photo value out of the object.
-     * @param key The key for the value.
-     * @return The photo value.
-     */
-    @Nullable
-    public SharePhoto getPhoto(final String key) {
-        final Object value = this.bundle.getParcelable(key);
-        return (value instanceof SharePhoto ? (SharePhoto)value : null);
-    }
-
-    /**
-     * Gets an array of photo values out of the object.
-     * @param key The key for the value.
-     * @return The photo values.
-     */
-    @Nullable
-    public ArrayList<SharePhoto> getPhotoArrayList(final String key) {
-        final ArrayList<Parcelable> items = this.bundle.getParcelableArrayList(key);
-        if (items == null) {
-            return null;
-        }
-        final ArrayList<SharePhoto> list = new ArrayList<SharePhoto>();
-        for (Parcelable item : items) {
-            if (item instanceof SharePhoto) {
-                list.add((SharePhoto)item);
-            }
-        }
-        return list;
-    }
-
-    /**
-     * Gets a string value out of the object.
-     * @param key The key for the value.
-     * @return The string value.
-     */
-    @Nullable
-    public String getString(final String key) {
-        return this.bundle.getString(key);
-    }
-
-    /**
-     * Gets an array of string values out of the object.
-     * @param key The key for the value.
-     * @return The string values.
-     */
-    @Nullable
-    public ArrayList<String> getStringArrayList(final String key) {
-        return this.bundle.getStringArrayList(key);
-    }
-
-    /**
-     * Returns the values in the container packaged in a bundle.
-     * @return A bundle with the values.
-     */
-    public Bundle getBundle() {
-        return (Bundle)this.bundle.clone();
-    }
-
-    /**
-     * Returns a set of the keys contained in this object.
-     * @return A set of the keys.
-     */
-    public Set<String> keySet() {
-        return this.bundle.keySet();
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        out.writeBundle(this.bundle);
-    }
-
-    /**
-     * Abstract builder for the {@link com.facebook.share.model.ShareOpenGraphValueContainer} class.
-     */
-    public abstract static class Builder
-            <P extends ShareOpenGraphValueContainer, E extends Builder>
-            implements ShareModelBuilder<P, E> {
-        private Bundle bundle = new Bundle();
-
-        /**
-         * Sets a boolean value in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putBoolean(final String key, final boolean value) {
-            this.bundle.putBoolean(key, value);
-            return (E)this;
-        }
-
-        /**
-         * Sets an array of boolean values in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putBooleanArray(final String key, @Nullable final boolean[] value) {
-            this.bundle.putBooleanArray(key, value);
-            return (E)this;
-        }
-
-        /**
-         * Sets a double value in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putDouble(final String key, final double value) {
-            this.bundle.putDouble(key, value);
-            return (E)this;
-        }
-
-        /**
-         * Sets an array of double values in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putDoubleArray(final String key, @Nullable final double[] value) {
-            this.bundle.putDoubleArray(key, value);
-            return (E)this;
-        }
-
-        /**
-         * Sets an int value in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putInt(final String key, final int value) {
-            this.bundle.putInt(key, value);
-            return (E)this;
-        }
-
-        /**
-         * Sets an array of int values in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putIntArray(final String key, @Nullable final int[] value) {
-            this.bundle.putIntArray(key, value);
-            return (E)this;
-        }
-
-        /**
-         * Sets a long value in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putLong(final String key, final long value) {
-            this.bundle.putLong(key, value);
-            return (E)this;
-        }
-
-        /**
-         * Sets an array of long values in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putLongArray(final String key, @Nullable final long[] value) {
-            this.bundle.putLongArray(key, value);
-            return (E)this;
-        }
-
-        /**
-         * Sets an object value in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putObject(final String key, @Nullable final ShareOpenGraphObject value) {
-            this.bundle.putParcelable(key, value);
-            return (E)this;
-        }
-
-        /**
-         * Sets an array of object values in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putObjectArrayList(
-                final String key,
-                @Nullable final ArrayList<ShareOpenGraphObject> value) {
-            this.bundle.putParcelableArrayList(key, value);
-            return (E)this;
-        }
-
-        /**
-         * Sets a photo value in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putPhoto(final String key, @Nullable final SharePhoto value) {
-            this.bundle.putParcelable(key, value);
-            return (E)this;
-        }
-
-        /**
-         * Sets an array of photo values in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putPhotoArrayList(final String key, @Nullable final ArrayList<SharePhoto> value) {
-            this.bundle.putParcelableArrayList(key, value);
-            return (E) this;
-        }
-
-        /**
-         * Sets a string value in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putString(final String key, @Nullable final String value) {
-            this.bundle.putString(key, value);
-            return (E) this;
-        }
-
-        /**
-         * Sets an array of string values in the object.
-         * @param key The key for the value.
-         * @param value The value.
-         * @return The builder.
-         */
-        public E putStringArrayList(final String key, @Nullable final ArrayList<String> value) {
-            this.bundle.putStringArrayList(key, value);
-            return (E) this;
-        }
-
-        @Override
-        public E readFrom(final P model) {
-            if (model != null) {
-                this.bundle.putAll(model.getBundle());
-            }
-            return (E)this;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/SharePhoto.java b/facebook/src/main/java/com/facebook/share/model/SharePhoto.java
deleted file mode 100644
index fdd834ac3..000000000
--- a/facebook/src/main/java/com/facebook/share/model/SharePhoto.java
+++ /dev/null
@@ -1,243 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.graphics.Bitmap;
-import android.net.Uri;
-import android.os.Parcel;
-import android.os.Parcelable;
-import android.support.annotation.Nullable;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Describes a photo for sharing.
- *
- * Use {@link SharePhoto.Builder} to build instances
- */
-public final class SharePhoto extends ShareMedia {
-    private final Bitmap bitmap;
-    private final Uri imageUrl;
-    private final boolean userGenerated;
-    private final String caption;
-
-    private SharePhoto(final Builder builder) {
-        super(builder);
-        this.bitmap = builder.bitmap;
-        this.imageUrl = builder.imageUrl;
-        this.userGenerated = builder.userGenerated;
-        this.caption = builder.caption;
-    }
-
-    SharePhoto(final Parcel in) {
-        super(in);
-        this.bitmap = in.readParcelable(Bitmap.class.getClassLoader());
-        this.imageUrl = in.readParcelable(Uri.class.getClassLoader());
-        this.userGenerated = (in.readByte() != 0);
-        this.caption = in.readString();
-    }
-
-    /**
-     * If the photo is resident in memory, this method supplies the data.
-     * @return {@link android.graphics.Bitmap} representation of the photo.
-     */
-    @Nullable
-    public Bitmap getBitmap() {
-        return this.bitmap;
-    }
-
-    /**
-     * The URL to the photo.
-     * @return {@link android.net.Uri} that points to a network location or the location of the
-     * photo on disk.
-     */
-    @Nullable
-    public Uri getImageUrl() {
-        return this.imageUrl;
-    }
-
-    /**
-     * Specifies whether the photo represented by this object was generated by the user or by the
-     * application.
-     * @return Indication of whether the photo is user-generated.
-     */
-    public boolean getUserGenerated() {
-        return this.userGenerated;
-    }
-
-    /**
-     * Gets the user generated caption. Note that the 'caption' must come from the user, as
-     * pre-filled content is forbidden by the Platform Policies (2.3).
-     * @return The user generated caption.
-     */
-    public String getCaption() {
-        return this.caption;
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        super.writeToParcel(out, flags);
-        out.writeParcelable(this.bitmap, 0);
-        out.writeParcelable(this.imageUrl, 0);
-        out.writeByte((byte)(this.userGenerated ? 1 : 0));
-        out.writeString(caption);
-    }
-
-    public static final Parcelable.Creator<SharePhoto> CREATOR =
-            new Parcelable.Creator<SharePhoto>() {
-
-                @Override
-                public SharePhoto createFromParcel(final Parcel source) {
-                    return new SharePhoto(source);
-                }
-
-                @Override
-                public SharePhoto[] newArray(final int size) {
-                    return new SharePhoto[size];
-                }
-            };
-
-    @Override
-    public Type getMediaType() {
-        return Type.PHOTO;
-    }
-
-    /**
-     * Builder for the {@link com.facebook.share.model.SharePhoto} class.
-     */
-    public static final class Builder extends ShareMedia.Builder<SharePhoto, Builder> {
-        private Bitmap bitmap;
-        private Uri imageUrl;
-        private boolean userGenerated;
-        private String caption;
-
-        /**
-         * Sets the bitmap representation of the photo.
-         * @param bitmap {@link android.graphics.Bitmap} representation of the photo.
-         * @return The builder.
-         */
-        public Builder setBitmap(@Nullable final Bitmap bitmap) {
-            this.bitmap = bitmap;
-            return this;
-        }
-
-        /**
-         * Sets the URL to the photo.
-         * @param imageUrl {@link android.net.Uri} that points to a network location or the location
-         *                                        of the photo on disk.
-         * @return The builder.
-         */
-        public Builder setImageUrl(@Nullable final Uri imageUrl) {
-            this.imageUrl = imageUrl;
-            return this;
-        }
-
-        /**
-         * Sets whether the photo represented by this object was generated by the user or by the
-         * application.
-         * @param userGenerated Indication of whether the photo is user-generated.
-         * @return The builder.
-         */
-        public Builder setUserGenerated(final boolean userGenerated) {
-            this.userGenerated = userGenerated;
-            return this;
-        }
-
-        /**
-         * Sets the user generated caption for the photo. Note that the 'caption' must come from
-         * the user, as pre-filled content is forbidden by the Platform Policies (2.3).
-         *
-         * @param caption {@link java.lang.String} of a {@link com.facebook.share.model.SharePhoto}
-         * @return The builder.
-         */
-        public Builder setCaption(@Nullable final String caption) {
-            this.caption = caption;
-            return this;
-        }
-
-        // Accessor that is present only for ShareVideoContent(Parcel) to use
-        Uri getImageUrl() {
-            return imageUrl;
-        }
-
-        // Accessor that is present only for ShareVideoContent(Parcel) to use
-        Bitmap getBitmap() {
-            return bitmap;
-        }
-
-        @Override
-        public SharePhoto build() {
-            return new SharePhoto(this);
-        }
-
-        @Override
-        public Builder readFrom(final SharePhoto model) {
-            if (model == null) {
-                return this;
-            }
-            return super.readFrom(model)
-                    .setBitmap(model.getBitmap())
-                    .setImageUrl(model.getImageUrl())
-                    .setUserGenerated(model.getUserGenerated())
-                    .setCaption(model.getCaption())
-                    ;
-        }
-
-        Builder readFrom(final Parcel parcel) {
-            return this.readFrom(
-                    (SharePhoto) parcel.readParcelable(SharePhoto.class.getClassLoader()));
-        }
-
-        /*
-         * For backwards compatibility with SharePhotoContent.  Prefer ShareMediaContent for new
-         * code.
-         */
-        static void writePhotoListTo(
-                final Parcel out,
-                int parcelFlags,
-                final List<SharePhoto> photos) {
-            ShareMedia[] array = new ShareMedia[photos.size()];
-            for (int i = 0; i < photos.size(); ++i) {
-                array[i] = photos.get(i);
-            }
-            out.writeParcelableArray(array, parcelFlags);
-        }
-
-        /*
-         * For backwards compatibility with SharePhotoContent.  Prefer ShareMediaContent for new
-         * code.
-         */
-        static List<SharePhoto> readPhotoListFrom(final Parcel in) {
-            final List<ShareMedia> media = readListFrom(in);
-            final List<SharePhoto> photos = new ArrayList<>();
-            for (ShareMedia medium : media) {
-                if (medium instanceof SharePhoto) {
-                    photos.add((SharePhoto) medium);
-                }
-            }
-            return photos;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/SharePhotoContent.java b/facebook/src/main/java/com/facebook/share/model/SharePhotoContent.java
deleted file mode 100644
index fccbc67de..000000000
--- a/facebook/src/main/java/com/facebook/share/model/SharePhotoContent.java
+++ /dev/null
@@ -1,140 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Parcel;
-import android.support.annotation.Nullable;
-
-import com.facebook.share.internal.ShareConstants;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
-/**
- * Describes photo content to be shared.
- *
- * Use {@link SharePhotoContent.Builder} to create instances
- */
-public final class SharePhotoContent
-        extends ShareContent<SharePhotoContent, SharePhotoContent.Builder> {
-    private final List<SharePhoto> photos;
-
-    private SharePhotoContent(final Builder builder) {
-        super(builder);
-        this.photos = Collections.unmodifiableList(builder.photos);
-    }
-
-    SharePhotoContent(final Parcel in) {
-        super(in);
-
-        this.photos = Collections.unmodifiableList(SharePhoto.Builder.readPhotoListFrom(in));
-    }
-
-    /**
-     * Photos to be shared.
-     * @return {@link java.util.List} of {@link SharePhoto}s.
-     */
-    @Nullable
-    public List<SharePhoto> getPhotos() {
-        return this.photos;
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        super.writeToParcel(out, flags);
-        SharePhoto.Builder.writePhotoListTo(out, flags, this.photos);
-    }
-
-    @SuppressWarnings("unused")
-    public static final Creator<SharePhotoContent> CREATOR = new Creator<SharePhotoContent>() {
-        public SharePhotoContent createFromParcel(final Parcel in) {
-            return new SharePhotoContent(in);
-        }
-
-        public SharePhotoContent[] newArray(final int size) {
-            return new SharePhotoContent[size];
-        }
-    };
-
-    /**
-     * Builder for the {@link SharePhotoContent} interface.
-     */
-    public static class Builder extends ShareContent.Builder<SharePhotoContent, Builder> {
-        private final List<SharePhoto> photos = new ArrayList<SharePhoto>();
-
-        /**
-         * Adds a photo to the content.
-         * @param photo {@link com.facebook.share.model.SharePhoto} to add.
-         * @return The builder.
-         */
-        public Builder addPhoto(@Nullable final SharePhoto photo) {
-            if (photo != null) {
-                this.photos.add(new SharePhoto.Builder().readFrom(photo).build());
-            }
-            return this;
-        }
-
-        /**
-         * Adds multiple photos to the content.
-         * @param photos {@link java.util.List} of {@link com.facebook.share.model.SharePhoto}s
-         *                                      to add.
-         * @return The builder.
-         */
-        public Builder addPhotos(@Nullable final List<SharePhoto> photos) {
-            if (photos != null) {
-                for (SharePhoto photo : photos) {
-                    this.addPhoto(photo);
-                }
-            }
-            return this;
-        }
-
-        @Override
-        public SharePhotoContent build() {
-            return new SharePhotoContent(this);
-        }
-
-        @Override
-        public Builder readFrom(final SharePhotoContent model) {
-            if (model == null) {
-                return this;
-            }
-            return super.
-                    readFrom(model)
-                    .addPhotos(model.getPhotos());
-        }
-
-        /**
-         * Replaces the photos for the builder.
-         * @param photos {@link java.util.List} of {@link com.facebook.share.model.SharePhoto}s to add.
-         * @return The builder.
-         */
-        public Builder setPhotos(@Nullable final List<SharePhoto> photos) {
-            this.photos.clear();
-            this.addPhotos(photos);
-            return this;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareVideo.java b/facebook/src/main/java/com/facebook/share/model/ShareVideo.java
deleted file mode 100644
index 0a919f6f2..000000000
--- a/facebook/src/main/java/com/facebook/share/model/ShareVideo.java
+++ /dev/null
@@ -1,118 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.net.Uri;
-import android.os.Parcel;
-import android.os.Parcelable;
-import android.support.annotation.Nullable;
-
-/**
- * Describes a video for sharing.
- *
- * Use {@link ShareVideo.Builder} to create instances
- */
-public final class ShareVideo extends ShareMedia {
-    private final Uri localUrl;
-
-    private ShareVideo(final Builder builder) {
-        super(builder);
-        this.localUrl = builder.localUrl;
-    }
-
-    ShareVideo(final Parcel in) {
-        super(in);
-        this.localUrl = in.readParcelable(Uri.class.getClassLoader());
-    }
-
-    /**
-     * This method supplies the URL to locate the video.
-     * @return {@link android.net.Uri} that points to the location of the video on disk.
-     */
-    @Nullable
-    public Uri getLocalUrl() {
-        return this.localUrl;
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        super.writeToParcel(out, flags);
-        out.writeParcelable(this.localUrl, 0);
-    }
-
-    public static final Parcelable.Creator<ShareVideo> CREATOR =
-        new Parcelable.Creator<ShareVideo>() {
-
-            @Override
-            public ShareVideo createFromParcel(final Parcel source) {
-                return new ShareVideo(source);
-            }
-
-            @Override
-            public ShareVideo[] newArray(final int size) {
-                return new ShareVideo[size];
-            }
-        };
-
-    @Override
-    public Type getMediaType() {
-        return Type.VIDEO;
-    }
-
-    /**
-     * Builder for the {@link com.facebook.share.model.ShareVideo} class.
-     */
-    public static final class Builder extends ShareMedia.Builder<ShareVideo, Builder> {
-        private Uri localUrl;
-
-        /**
-         * Sets the URL to locate the video.
-         * @param localUrl {@link android.net.Uri} that points to the location of the video on disk.
-         * @return The builder.
-         */
-        public Builder setLocalUrl(@Nullable final Uri localUrl) {
-            this.localUrl = localUrl;
-            return this;
-        }
-
-        @Override
-        public ShareVideo build() {
-            return new ShareVideo(this);
-        }
-
-        @Override
-        public Builder readFrom(final ShareVideo model) {
-            if (model == null) {
-                return this;
-            }
-            return super.readFrom(model)
-                    .setLocalUrl(model.getLocalUrl());
-        }
-
-        Builder readFrom(final Parcel parcel) {
-            return this.readFrom(
-                    (ShareVideo) parcel.readParcelable(ShareVideo.class.getClassLoader()));
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/model/ShareVideoContent.java b/facebook/src/main/java/com/facebook/share/model/ShareVideoContent.java
deleted file mode 100644
index ed82b3fb3..000000000
--- a/facebook/src/main/java/com/facebook/share/model/ShareVideoContent.java
+++ /dev/null
@@ -1,197 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.os.Parcel;
-import android.support.annotation.Nullable;
-
-/**
- * Provides the interface for video content to be shared.
- *
- * A general use builder is available in
- * {@link ShareVideoContent.Builder}.
- */
-public final class ShareVideoContent
-        extends ShareContent<ShareVideoContent, ShareVideoContent.Builder>
-        implements ShareModel {
-    private final String contentDescription;
-    private final String contentTitle;
-    private final SharePhoto previewPhoto;
-    private final ShareVideo video;
-
-    private ShareVideoContent(final Builder builder) {
-        super(builder);
-
-        this.contentDescription = builder.contentDescription;
-        this.contentTitle = builder.contentTitle;
-        this.previewPhoto = builder.previewPhoto;
-        this.video = builder.video;
-    }
-
-    ShareVideoContent(final Parcel in) {
-        super(in);
-        this.contentDescription = in.readString();
-        this.contentTitle = in.readString();
-        SharePhoto.Builder previewPhotoBuilder = new SharePhoto.Builder().readFrom(in);
-        if (previewPhotoBuilder.getImageUrl() != null || previewPhotoBuilder.getBitmap() != null) {
-            this.previewPhoto = previewPhotoBuilder.build();
-        } else {
-            this.previewPhoto = null;
-        }
-        this.video = new ShareVideo.Builder().readFrom(in).build();
-    }
-
-    /**
-     * The description of the video.
-     * @return The description of the video.
-     */
-    @Nullable
-    public String getContentDescription() {
-        return this.contentDescription;
-    }
-
-    /**
-     * The title to display for this video.
-     * @return The video title.
-     */
-    @Nullable
-    public String getContentTitle() {
-        return this.contentTitle;
-    }
-
-    /**
-     * Photo to be used as a preview for the video.
-     * @return Preview {@link SharePhoto} for the content.
-     */
-    @Nullable
-    public SharePhoto getPreviewPhoto() {
-        return this.previewPhoto;
-    }
-
-    /**
-     * Video to be shared.
-     * @return {@link ShareVideo}
-     */
-    @Nullable
-    public ShareVideo getVideo() {
-        return this.video;
-    }
-
-    public int describeContents() {
-        return 0;
-    }
-
-    public void writeToParcel(final Parcel out, final int flags) {
-        super.writeToParcel(out, flags);
-        out.writeString(this.contentDescription);
-        out.writeString(this.contentTitle);
-        out.writeParcelable(this.previewPhoto, 0);
-        out.writeParcelable(this.video, 0);
-    }
-
-    @SuppressWarnings("unused")
-    public static final Creator<ShareVideoContent> CREATOR = new Creator<ShareVideoContent>() {
-        public ShareVideoContent createFromParcel(final Parcel in) {
-            return new ShareVideoContent(in);
-        }
-
-        public ShareVideoContent[] newArray(final int size) {
-            return new ShareVideoContent[size];
-        }
-    };
-
-    /**
-     * Builder for the {@link com.facebook.share.model.ShareVideoContent} interface.
-     */
-    public static final class Builder extends ShareContent.Builder<ShareVideoContent, Builder> {
-        private String contentDescription;
-        private String contentTitle;
-        private SharePhoto previewPhoto;
-        private ShareVideo video;
-
-        /**
-         * Sets the description of the video.
-         * @param contentDescription The description of the video.
-         * @return The builder.
-         */
-        public Builder setContentDescription(
-                @Nullable final String contentDescription) {
-            this.contentDescription = contentDescription;
-            return this;
-        }
-
-        /**
-         * Sets the title to display for this video.
-         * @param contentTitle The video title.
-         * @return The builder.
-         */
-        public Builder setContentTitle(@Nullable final String contentTitle) {
-            this.contentTitle = contentTitle;
-            return this;
-        }
-
-        /**
-         * Sets the photo to be used as a preview for the video.
-         * @param previewPhoto Preview {@link com.facebook.share.model.SharePhoto} for the content.
-         * @return The builder.
-         */
-        public Builder setPreviewPhoto(@Nullable final SharePhoto previewPhoto) {
-            this.previewPhoto = (
-                    previewPhoto == null ?
-                    null :
-                    new SharePhoto.Builder().readFrom(previewPhoto).build());
-            return this;
-        }
-
-        /**
-         * Sets the video to be shared.
-         * @param video {@link com.facebook.share.model.ShareVideo}
-         * @return The builder.
-         */
-        public Builder setVideo(@Nullable final ShareVideo video) {
-            if (video == null) {
-                return this;
-            }
-
-            this.video = new ShareVideo.Builder().readFrom(video).build();
-            return this;
-        }
-
-        @Override
-        public ShareVideoContent build() {
-            return new ShareVideoContent(this);
-        }
-
-        @Override
-        public Builder readFrom(final ShareVideoContent model) {
-            if (model == null) {
-                return this;
-            }
-            return super
-                    .readFrom(model)
-                    .setContentDescription(model.getContentDescription())
-                    .setContentTitle(model.getContentTitle())
-                    .setPreviewPhoto(model.getPreviewPhoto())
-                    .setVideo(model.getVideo())
-                    ;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/widget/AppInviteDialog.java b/facebook/src/main/java/com/facebook/share/widget/AppInviteDialog.java
deleted file mode 100644
index f8065c351..000000000
--- a/facebook/src/main/java/com/facebook/share/widget/AppInviteDialog.java
+++ /dev/null
@@ -1,303 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.widget;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.text.TextUtils;
-import android.util.Log;
-
-import com.facebook.FacebookCallback;
-import com.facebook.internal.*;
-import com.facebook.share.internal.*;
-import com.facebook.share.model.AppInviteContent;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * A dialog for inviting users.
- */
-public class AppInviteDialog
-        extends FacebookDialogBase<AppInviteContent, AppInviteDialog.Result> {
-
-    /**
-     * Helper object for handling the result from an app invites dialog.
-     */
-    public static final class Result {
-        private final Bundle bundle;
-
-        /**
-         * Constructor
-         *
-         * @param bundle the results bundle
-         */
-        public Result(Bundle bundle) {
-            this.bundle = bundle;
-        }
-
-        /**
-         * Returns the results data as a Bundle.
-         *
-         * @return the results bundle
-         */
-        public Bundle getData() {
-            return bundle;
-        }
-    }
-
-    private static final String TAG = "AppInviteDialog";
-
-    private static final int DEFAULT_REQUEST_CODE =
-            CallbackManagerImpl.RequestCodeOffset.AppInvite.toRequestCode();
-
-    /**
-     * Indicates whether the app invite dialog can be shown.
-     *
-     * @return true if the dialog can be shown
-     */
-    public static boolean canShow() {
-        return canShowNativeDialog() || canShowWebFallback();
-    }
-
-    /**
-     * Helper to show the provided {@link com.facebook.share.model.AppInviteContent} using
-     * the provided Activity. No callback will be invoked.
-     *
-     * @param activity          Activity to use to share the provided content
-     * @param appInviteContent Content of the app invite to send
-     */
-    public static void show(
-            final Activity activity,
-            final AppInviteContent appInviteContent) {
-        new AppInviteDialog(activity)
-                .show(appInviteContent);
-    }
-
-    /**
-     * Helper to show the provided {@link com.facebook.share.model.AppInviteContent} using
-     * the provided Fragment. No callback will be invoked.
-     *
-     * @param fragment          android.support.v4.app.Fragment to use to share the provided content
-     * @param appInviteContent Content of the app invite to send
-     */
-    public static void show(
-            final Fragment fragment,
-            final AppInviteContent appInviteContent) {
-        show(new FragmentWrapper(fragment), appInviteContent);
-    }
-
-    /**
-     * Helper to show the provided {@link com.facebook.share.model.AppInviteContent} using
-     * the provided Fragment. No callback will be invoked.
-     *
-     * @param fragment          android.app.Fragment to use to share the provided content
-     * @param appInviteContent Content of the app invite to send
-     */
-    public static void show(
-            final android.app.Fragment fragment,
-            final AppInviteContent appInviteContent) {
-        show(new FragmentWrapper(fragment), appInviteContent);
-    }
-
-    private static void show(
-            final FragmentWrapper fragmentWrapper,
-            final AppInviteContent appInviteContent) {
-        new AppInviteDialog(fragmentWrapper)
-                .show(appInviteContent);
-    }
-
-    private static boolean canShowNativeDialog() {
-        return DialogPresenter.canPresentNativeDialogWithFeature(getFeature());
-    }
-
-    private static boolean canShowWebFallback() {
-        return DialogPresenter.canPresentWebFallbackDialogWithFeature(getFeature());
-    }
-
-    /**
-     * Constructs a new AppInviteDialog.
-     *
-     * @param activity Activity to use to share the provided content.
-     */
-    public AppInviteDialog(final Activity activity) {
-        super(activity, DEFAULT_REQUEST_CODE);
-    }
-
-    /**
-     * Constructs a new AppInviteDialog.
-     *
-     * @param fragment android.support.v4.app.Fragment to use to share the provided content.
-     */
-    public AppInviteDialog(final Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-    }
-
-    /**
-     * Constructs a new AppInviteDialog.
-     *
-     * @param fragment android.app.Fragment to use to share the provided content.
-     */
-    public AppInviteDialog(final android.app.Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-    }
-
-    private AppInviteDialog(final FragmentWrapper fragment) {
-        super(fragment, DEFAULT_REQUEST_CODE);
-    }
-
-    protected void registerCallbackImpl(
-            final CallbackManagerImpl callbackManager,
-            final FacebookCallback<Result> callback) {
-        final ResultProcessor resultProcessor = (callback == null)
-                ? null
-                : new ResultProcessor(callback) {
-            @Override
-            public void onSuccess(AppCall appCall, Bundle results) {
-                String gesture = ShareInternalUtility.getNativeDialogCompletionGesture(results);
-                if ("cancel".equalsIgnoreCase(gesture)) {
-                    callback.onCancel();
-                } else {
-                    callback.onSuccess(new Result(results));
-                }
-            }
-        };
-
-        CallbackManagerImpl.Callback callbackManagerCallback = new CallbackManagerImpl.Callback() {
-            @Override
-            public boolean onActivityResult(int resultCode, Intent data) {
-                return ShareInternalUtility.handleActivityResult(
-                        getRequestCode(),
-                        resultCode,
-                        data,
-                        resultProcessor);
-            }
-        };
-
-        callbackManager.registerCallback(
-                getRequestCode(),
-                callbackManagerCallback);
-    }
-
-    @Override
-    protected AppCall createBaseAppCall() {
-        return new AppCall(getRequestCode());
-    }
-
-    @Override
-    protected List<ModeHandler> getOrderedModeHandlers() {
-        ArrayList<ModeHandler> handlers = new ArrayList<>();
-        handlers.add(new NativeHandler());
-        handlers.add(new WebFallbackHandler());
-
-        return handlers;
-    }
-
-    private class NativeHandler extends ModeHandler {
-        @Override
-        public boolean canShow(AppInviteContent content, boolean isBestEffort) {
-            return AppInviteDialog.canShowNativeDialog();
-        }
-
-        @Override
-        public AppCall createAppCall(final AppInviteContent content) {
-            final AppCall appCall = createBaseAppCall();
-
-            DialogPresenter.setupAppCallForNativeDialog(
-                    appCall,
-                    new DialogPresenter.ParameterProvider() {
-                        @Override
-                        public Bundle getParameters() {
-                            return createParameters(content);
-                        }
-
-                        @Override
-                        public Bundle getLegacyParameters() {
-                            // App Invites are not supported with legacy fb4a devices.
-                            // We should never get here
-                            Log.e(TAG, "Attempting to present the AppInviteDialog with " +
-                                    "an outdated Facebook app on the device");
-                            return new Bundle();
-                        }
-                    },
-                    getFeature());
-
-            return appCall;
-        }
-    }
-
-    private class WebFallbackHandler extends ModeHandler {
-        @Override
-        public boolean canShow(final AppInviteContent content, boolean isBestEffort) {
-            return AppInviteDialog.canShowWebFallback();
-        }
-
-        @Override
-        public AppCall createAppCall(final AppInviteContent content) {
-            final AppCall appCall = createBaseAppCall();
-
-            DialogPresenter.setupAppCallForWebFallbackDialog(
-                    appCall,
-                    createParameters(content),
-                    getFeature());
-
-            return appCall;
-        }
-    }
-
-    private static DialogFeature getFeature() {
-        return AppInviteDialogFeature.APP_INVITES_DIALOG;
-    }
-
-    private static Bundle createParameters(final AppInviteContent content) {
-        Bundle params = new Bundle();
-        params.putString(ShareConstants.APPLINK_URL, content.getApplinkUrl());
-        params.putString(ShareConstants.PREVIEW_IMAGE_URL, content.getPreviewImageUrl());
-
-        String promoCode = content.getPromotionCode();
-        promoCode = promoCode != null ? promoCode : "";
-        String promoText = content.getPromotionText();
-
-        if (!TextUtils.isEmpty(promoText)) {
-            // Encode deeplink context as json array.
-            try {
-                JSONObject deeplinkContent = new JSONObject();
-                deeplinkContent.put(ShareConstants.PROMO_CODE, promoCode);
-                deeplinkContent.put(ShareConstants.PROMO_TEXT, promoText);
-
-                params.putString(ShareConstants.DEEPLINK_CONTEXT, deeplinkContent.toString());
-                params.putString(ShareConstants.PROMO_CODE, promoCode);
-                params.putString(ShareConstants.PROMO_TEXT, promoText);
-            } catch (JSONException e) {
-                Log.e(TAG, "Json Exception in creating deeplink context");
-                // Ignore it since this is optional.
-            }
-        }
-
-        return params;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/widget/CreateAppGroupDialog.java b/facebook/src/main/java/com/facebook/share/widget/CreateAppGroupDialog.java
deleted file mode 100644
index 020dbdce6..000000000
--- a/facebook/src/main/java/com/facebook/share/widget/CreateAppGroupDialog.java
+++ /dev/null
@@ -1,211 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.widget;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-
-import com.facebook.FacebookCallback;
-import com.facebook.internal.AppCall;
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.internal.DialogPresenter;
-import com.facebook.internal.FacebookDialogBase;
-import com.facebook.internal.FragmentWrapper;
-import com.facebook.share.internal.ResultProcessor;
-import com.facebook.share.internal.ShareInternalUtility;
-import com.facebook.share.internal.WebDialogParameters;
-import com.facebook.share.model.AppGroupCreationContent;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * A dialog for creating app groups
- */
-public class CreateAppGroupDialog
-        extends FacebookDialogBase<AppGroupCreationContent, CreateAppGroupDialog.Result> {
-
-    private static final String GAME_GROUP_CREATION_DIALOG = "game_group_create";
-
-    private static final int DEFAULT_REQUEST_CODE =
-            CallbackManagerImpl.RequestCodeOffset.AppGroupCreate.toRequestCode();
-
-    /**
-     * Helper object for handling the result from a create app group dialog.
-     */
-    public static final class Result {
-        private final String id;
-
-        private Result(String id) {
-            this.id = id;
-        }
-
-        /**
-         * Get the ID of the created group.
-         * @return the id of the group.
-         */
-        public String getId() {
-            return id;
-        }
-    }
-
-    /**
-     * Indicates whether the create app group dialog can be shown.
-     *
-     * @return true if the dialog can be shown
-     */
-    public static boolean canShow() {
-        return true;
-    }
-
-    /**
-     * Shows an {@link CreateAppGroupDialog} to create a group with the passed in content, using
-     * the passed in activity. No callback will be invoked.
-     *
-     * @param activity Activity hosting the dialog
-     * @param appGroupCreationContent Content describing the group to be created
-     */
-    public static void show(
-            final Activity activity,
-            final AppGroupCreationContent appGroupCreationContent) {
-        new CreateAppGroupDialog(activity).show(appGroupCreationContent);
-    }
-
-    /**
-     * Shows an {@link CreateAppGroupDialog} to create a group with the passed in content, using
-     * the passed in fragment. No callback will be invoked.
-     *
-     * @param fragment android.support.v4.app.Fragment hosting the dialog
-     * @param appGroupCreationContent Content describing the group to be created
-     */
-    public static void show(
-            final Fragment fragment,
-            AppGroupCreationContent appGroupCreationContent) {
-        show(new FragmentWrapper(fragment), appGroupCreationContent);
-    }
-
-    /**
-     * Shows an {@link CreateAppGroupDialog} to create a group with the passed in content, using
-     * the passed in fragment. No callback will be invoked.
-     *
-     * @param fragment android.app.Fragment hosting the dialog
-     * @param appGroupCreationContent Content describing the group to be created
-     */
-    public static void show(
-            final android.app.Fragment fragment,
-            AppGroupCreationContent appGroupCreationContent) {
-        show(new FragmentWrapper(fragment), appGroupCreationContent);
-    }
-
-    private static void show(
-            final FragmentWrapper fragmentWrapper,
-            AppGroupCreationContent appGroupCreationContent) {
-        new CreateAppGroupDialog(fragmentWrapper).show(appGroupCreationContent);
-    }
-
-    /**
-     * Constructs a new CreateAppGroupDialog.
-     * @param activity Activity hosting the dialog.
-     */
-    public CreateAppGroupDialog(final Activity activity) {
-        super(activity, DEFAULT_REQUEST_CODE);
-    }
-
-    /**
-     * Constructs a new CreateAppGroupDialog.
-     * @param fragment android.support.v4.app.Fragment hosting the dialog.
-     */
-    public CreateAppGroupDialog(final Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-    }
-
-    /**
-     * Constructs a new CreateAppGroupDialog.
-     * @param fragment android.app.Fragment hosting the dialog.
-     */
-    public CreateAppGroupDialog(final android.app.Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-    }
-
-    private CreateAppGroupDialog(final FragmentWrapper fragmentWrapper) {
-        super(fragmentWrapper, DEFAULT_REQUEST_CODE);
-    }
-
-    @Override
-    protected void registerCallbackImpl(
-            final CallbackManagerImpl callbackManager,
-            final FacebookCallback<Result> callback) {
-        final ResultProcessor resultProcessor = (callback == null)
-                ? null
-                : new ResultProcessor(callback) {
-            @Override
-            public void onSuccess(AppCall appCall, Bundle results) {
-                callback.onSuccess(new Result(results.getString("id")));
-            }
-        };
-
-        CallbackManagerImpl.Callback callbackManagerCallback = new CallbackManagerImpl.Callback() {
-            @Override
-            public boolean onActivityResult(int resultCode, Intent data) {
-                return ShareInternalUtility.handleActivityResult(
-                        getRequestCode(),
-                        resultCode,
-                        data,
-                        resultProcessor);
-            }
-        };
-
-        callbackManager.registerCallback(getRequestCode(), callbackManagerCallback);
-    }
-
-    @Override
-    protected AppCall createBaseAppCall() {
-        return new AppCall(getRequestCode());
-    }
-
-    @Override
-    protected List<ModeHandler> getOrderedModeHandlers() {
-        ArrayList<ModeHandler> handlers = new ArrayList<>();
-        handlers.add(new WebHandler());
-
-        return handlers;
-    }
-
-    private class WebHandler extends ModeHandler {
-        @Override
-        public boolean canShow(final AppGroupCreationContent content, boolean isBestEffort) {
-            return true;
-        }
-
-        @Override
-        public AppCall createAppCall(final AppGroupCreationContent content) {
-            AppCall appCall = createBaseAppCall();
-            DialogPresenter.setupAppCallForWebDialog(
-                    appCall,
-                    GAME_GROUP_CREATION_DIALOG,
-                    WebDialogParameters.create(content));
-
-            return appCall;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/widget/DeviceShareButton.java b/facebook/src/main/java/com/facebook/share/widget/DeviceShareButton.java
deleted file mode 100644
index 67b03ffc7..000000000
--- a/facebook/src/main/java/com/facebook/share/widget/DeviceShareButton.java
+++ /dev/null
@@ -1,204 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- * <p/>
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- * <p/>
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- * <p/>
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.widget;
-
-import android.content.Context;
-import android.util.AttributeSet;
-import android.view.View;
-
-import com.facebook.CallbackManager;
-import com.facebook.FacebookButtonBase;
-import com.facebook.FacebookCallback;
-import com.facebook.FacebookSdk;
-import com.facebook.R;
-import com.facebook.internal.AnalyticsEvents;
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.share.DeviceShareDialog;
-import com.facebook.share.model.ShareContent;
-
-/**
- * A button to share content on Facebook from a device.
- * Tapping the receiver will invoke the {@link com.facebook.share.DeviceShareDialog} with
- * the attached shareContent.
- */
-public final class DeviceShareButton extends FacebookButtonBase {
-    private ShareContent shareContent;
-    private int requestCode = 0;
-    private boolean enabledExplicitlySet = false;
-    private DeviceShareDialog dialog = null;
-
-    /*
-     * Constructs a new DeviceShareButton instance.
-     */
-    public DeviceShareButton(final Context context) {
-        this(context, null, 0);
-    }
-    /*
-     * Constructs a new DeviceShareButton instance.
-     */
-    public DeviceShareButton(final Context context, final AttributeSet attrs) {
-        this(context, attrs, 0);
-    }
-    /*
-     * Constructs a new DeviceShareButton instance.
-     */
-    private DeviceShareButton(
-            final Context context,
-            final AttributeSet attrs,
-            final int defStyleAttr) {
-        super(
-                context,
-                attrs,
-                defStyleAttr,
-                0,
-                AnalyticsEvents.EVENT_DEVICE_SHARE_BUTTON_CREATE,
-                AnalyticsEvents.EVENT_DEVICE_SHARE_BUTTON_DID_TAP);
-        requestCode = isInEditMode() ? 0 : getDefaultRequestCode();
-        internalSetEnabled(false);
-    }
-
-    /**
-     * Returns the share content from the button.
-     * @return The share content.
-     */
-    public ShareContent getShareContent() {
-        return this.shareContent;
-    }
-
-    /**
-     * Sets the share content on the button.
-     * @param shareContent The share content.
-     */
-    public void setShareContent(final ShareContent shareContent) {
-        this.shareContent = shareContent;
-        if (!enabledExplicitlySet) {
-            internalSetEnabled(canShare());
-        }
-    }
-
-    @Override
-    public void setEnabled(boolean enabled) {
-        super.setEnabled(enabled);
-        enabledExplicitlySet = true;
-    }
-
-    public int getRequestCode() {
-        return requestCode;
-    }
-
-    /**
-     * Allows registration of a callback for when the share completes. This should be called
-     * in the {@link android.app.Activity#onCreate(android.os.Bundle)} or
-     * {@link android.support.v4.app.Fragment#onCreate(android.os.Bundle)} methods.
-     *
-     * @param callbackManager The {@link com.facebook.CallbackManager} instance that will be
-     *          handling results that are received via
-     *          {@link android.app.Activity#onActivityResult(int, int, android.content.Intent)}
-     * @param callback The callback that should be called to handle dialog completion.
-     */
-    public void registerCallback(
-            final CallbackManager callbackManager,
-            final FacebookCallback<DeviceShareDialog.Result> callback) {
-        getDialog().registerCallback(callbackManager, callback);
-    }
-
-    /**
-     * Allows registration of a callback for when the share completes. This should be called
-     * in the {@link android.app.Activity#onCreate(android.os.Bundle)} or
-     * {@link android.support.v4.app.Fragment#onCreate(android.os.Bundle)} methods.
-     *
-     * @param callbackManager The {@link com.facebook.CallbackManager} instance that will be
-     *          handling results that are received via
-     *          {@link android.app.Activity#onActivityResult(int, int, android.content.Intent)}
-     * @param callback The callback that should be called to handle dialog completion.
-     * @param requestCode  The request code to use, this should be outside of the range of those
-     *                     reserved for the Facebook SDK
-     *                     {@link com.facebook.FacebookSdk#isFacebookRequestCode(int)}.
-     */
-    public void registerCallback(
-            final CallbackManager callbackManager,
-            final FacebookCallback<DeviceShareDialog.Result> callback,
-            final int requestCode) {
-        setRequestCode(requestCode);
-        getDialog().registerCallback(callbackManager, callback, requestCode);
-    }
-
-    @Override
-    protected void configureButton(
-            final Context context,
-            final AttributeSet attrs,
-            final int defStyleAttr,
-            final int defStyleRes) {
-        super.configureButton(context, attrs, defStyleAttr, defStyleRes);
-        setInternalOnClickListener(this.getShareOnClickListener());
-    }
-
-    @Override
-    protected int getDefaultStyleResource() {
-        return R.style.com_facebook_button_share;
-    }
-
-    @Override
-    protected int getDefaultRequestCode() {
-        return CallbackManagerImpl.RequestCodeOffset.Share.toRequestCode();
-    }
-
-    protected OnClickListener getShareOnClickListener() {
-        return new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                callExternalOnClickListener(v);
-                getDialog().show(getShareContent());
-            }
-        };
-    }
-
-    private void internalSetEnabled(boolean enabled) {
-        setEnabled(enabled);
-        enabledExplicitlySet = false;
-    }
-
-    private void setRequestCode(final int requestCode) {
-        if (FacebookSdk.isFacebookRequestCode(requestCode)) {
-            throw new IllegalArgumentException("Request code " + requestCode +
-                    " cannot be within the range reserved by the Facebook SDK.");
-        }
-        this.requestCode = requestCode;
-    }
-
-    private boolean canShare() {
-        return new DeviceShareDialog(getActivity()).canShow(getShareContent());
-    }
-
-    private DeviceShareDialog getDialog() {
-        if (dialog != null) {
-            return dialog;
-        }
-        if (DeviceShareButton.this.getFragment() != null) {
-            dialog = new DeviceShareDialog(DeviceShareButton.this.getFragment());
-        } else if (DeviceShareButton.this.getNativeFragment() != null) {
-            dialog = new DeviceShareDialog(DeviceShareButton.this.getNativeFragment());
-        } else {
-            dialog = new DeviceShareDialog(getActivity());
-        }
-        return dialog;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/widget/GameRequestDialog.java b/facebook/src/main/java/com/facebook/share/widget/GameRequestDialog.java
deleted file mode 100644
index 94c06c3c1..000000000
--- a/facebook/src/main/java/com/facebook/share/widget/GameRequestDialog.java
+++ /dev/null
@@ -1,235 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.widget;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-
-import com.facebook.FacebookCallback;
-import com.facebook.internal.FacebookDialogBase;
-import com.facebook.internal.AppCall;
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.internal.DialogPresenter;
-import com.facebook.internal.FragmentWrapper;
-import com.facebook.share.internal.GameRequestValidation;
-import com.facebook.share.internal.ResultProcessor;
-import com.facebook.share.internal.ShareConstants;
-import com.facebook.share.internal.ShareInternalUtility;
-import com.facebook.share.internal.WebDialogParameters;
-import com.facebook.share.model.GameRequestContent;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Provides functionality to send requests in games.
- * see https://developers.facebook.com/docs/games/requests
- */
-public class GameRequestDialog
-        extends FacebookDialogBase<GameRequestContent, GameRequestDialog.Result> {
-
-    /**
-     * Helper object for handling the result from a requests dialog
-     */
-    public static final class Result {
-        String requestId;
-        List<String> to;
-
-        private Result(Bundle results) {
-            this.requestId = results.getString(ShareConstants.WEB_DIALOG_RESULT_PARAM_REQUEST_ID);
-            this.to = new ArrayList<String>();
-            while (results.containsKey(String.format(
-                    ShareConstants.WEB_DIALOG_RESULT_PARAM_TO_ARRAY_MEMBER, this.to.size()))) {
-                this.to.add(results.getString(String.format(
-                        ShareConstants.WEB_DIALOG_RESULT_PARAM_TO_ARRAY_MEMBER, this.to.size())));
-            }
-        }
-
-        /**
-         * Returns the request ID.
-         * @return the request ID.
-         */
-        public String getRequestId() {
-            return requestId;
-        }
-
-        /**
-         * Returns request recipients.
-         * @return request recipients
-         */
-        public List<String> getRequestRecipients() {
-            return to;
-        }
-    }
-
-    // The actual value of the string is different since that is what the web dialog is actually
-    // called on the server.
-    private static final String GAME_REQUEST_DIALOG = "apprequests";
-
-    private static final int DEFAULT_REQUEST_CODE =
-            CallbackManagerImpl.RequestCodeOffset.GameRequest.toRequestCode();
-
-    /**
-     * Indicates whether the game request dialog can be shown.
-     *
-     * @return true if the dialog can be shown
-     */
-    public static boolean canShow() {
-        return true;
-    }
-
-    /**
-     * Shows a {@link GameRequestDialog} to send a request, using
-     * the passed in activity. No callback will be invoked.
-     *
-     * @param activity Activity hosting the dialog.
-     * @param gameRequestContent Content of the request.
-     */
-    public static void show(final Activity activity, final GameRequestContent gameRequestContent) {
-        new GameRequestDialog(activity).show(gameRequestContent);
-    }
-
-    /**
-     * Shows a {@link GameRequestDialog} to send a request, using
-     * the passed in activity. No callback will be invoked.
-     *
-     * @param fragment android.support.v4.app.Fragment hosting the dialog.
-     * @param gameRequestContent Content of the request.
-     */
-    public static void show(
-            final Fragment fragment,
-            final GameRequestContent gameRequestContent) {
-        show(new FragmentWrapper(fragment), gameRequestContent);
-    }
-
-    /**
-     * Shows a {@link GameRequestDialog} to send a request, using
-     * the passed in activity. No callback will be invoked.
-     *
-     * @param fragment android.app.Fragment hosting the dialog.
-     * @param gameRequestContent Content of the request.
-     */
-    public static void show(
-            final android.app.Fragment fragment,
-            final GameRequestContent gameRequestContent) {
-        show(new FragmentWrapper(fragment), gameRequestContent);
-    }
-
-    private static void show(
-            final FragmentWrapper fragmentWrapper,
-            final GameRequestContent gameRequestContent) {
-        new GameRequestDialog(fragmentWrapper).show(gameRequestContent);
-    }
-
-    /**
-     * Constructs a new RequestDialog.
-     * @param activity Activity hosting the dialog.
-     */
-    public GameRequestDialog(Activity activity) {
-        super(activity, DEFAULT_REQUEST_CODE);
-    }
-
-    /**
-     * Constructs a new RequestDialog.
-     * @param fragment android.support.v4.app.Fragment hosting the dialog.
-     */
-    public GameRequestDialog(Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-    }
-
-    /**
-     * Constructs a new RequestDialog.
-     * @param fragment android.app.Fragment hosting the dialog.
-     */
-    public GameRequestDialog(android.app.Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-    }
-
-    private GameRequestDialog(FragmentWrapper fragmentWrapper) {
-        super(fragmentWrapper, DEFAULT_REQUEST_CODE);
-    }
-
-    @Override
-    protected void registerCallbackImpl(
-            final CallbackManagerImpl callbackManager,
-            final FacebookCallback<Result> callback) {
-        final ResultProcessor resultProcessor = (callback == null)
-                ? null
-                : new ResultProcessor(callback) {
-            @Override
-            public void onSuccess(AppCall appCall, Bundle results) {
-                if (results != null) {
-                    callback.onSuccess(new Result(results));
-                } else {
-                    onCancel(appCall);
-                }
-            }
-        };
-
-       callbackManager.registerCallback(
-                getRequestCode(),
-                new CallbackManagerImpl.Callback() {
-                    @Override
-                    public boolean onActivityResult(int resultCode, Intent data) {
-                        return ShareInternalUtility.handleActivityResult(
-                                getRequestCode(),
-                                resultCode,
-                                data,
-                                resultProcessor);
-                    }
-                });
-    }
-
-    @Override
-    protected AppCall createBaseAppCall() {
-        return new AppCall(getRequestCode());
-    }
-
-    @Override
-    protected List<ModeHandler> getOrderedModeHandlers() {
-        ArrayList<ModeHandler> handlers = new ArrayList<>();
-        handlers.add(new WebHandler());
-
-        return handlers;
-    }
-
-    private class WebHandler extends ModeHandler {
-        @Override
-        public boolean canShow(final GameRequestContent content, boolean isBestEffort) {
-            return true;
-        }
-
-        @Override
-        public AppCall createAppCall(final GameRequestContent content) {
-            GameRequestValidation.validate(content);
-            AppCall appCall = createBaseAppCall();
-            DialogPresenter.setupAppCallForWebDialog(
-                    appCall,
-                    GAME_REQUEST_DIALOG,
-                    WebDialogParameters.create(content));
-
-            return appCall;
-        }
-
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/widget/JoinAppGroupDialog.java b/facebook/src/main/java/com/facebook/share/widget/JoinAppGroupDialog.java
deleted file mode 100644
index a373da9b5..000000000
--- a/facebook/src/main/java/com/facebook/share/widget/JoinAppGroupDialog.java
+++ /dev/null
@@ -1,212 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.widget;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-
-import com.facebook.FacebookCallback;
-import com.facebook.internal.AppCall;
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.internal.DialogPresenter;
-import com.facebook.internal.FacebookDialogBase;
-import com.facebook.internal.FragmentWrapper;
-import com.facebook.share.internal.ResultProcessor;
-import com.facebook.share.internal.ShareConstants;
-import com.facebook.share.internal.ShareInternalUtility;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * A dialog for joining app groups
- */
-public class JoinAppGroupDialog extends FacebookDialogBase<String, JoinAppGroupDialog.Result> {
-
-    private static final String JOIN_GAME_GROUP_DIALOG = "game_group_join";
-
-    private static final int DEFAULT_REQUEST_CODE =
-            CallbackManagerImpl.RequestCodeOffset.AppGroupJoin.toRequestCode();
-
-    /**
-     * Helper object for handling the result from a join app group dialog.
-     */
-    public static final class Result {
-        private final Bundle data;
-
-        private Result(Bundle bundle) {
-            this.data = bundle;
-        }
-
-        /**
-         * Returns the result data from the dialog;
-         * @return the result data.
-         */
-        public Bundle getData() {
-            return data;
-        }
-    }
-
-    /**
-     * Indicates whether the join app group dialog can be shown.
-     *
-     * @return true if the dialog can be shown
-     */
-    public static boolean canShow() {
-        return true;
-    }
-
-    /**
-     * Shows an {@link JoinAppGroupDialog} to join a group with the passed in Id, using
-     * the passed in activity. No callback will be invoked.
-     *
-     * @param activity Activity hosting the dialog
-     * @param groupId Id of the group to join
-     */
-    public static void show(
-            final Activity activity,
-            final String groupId) {
-        new JoinAppGroupDialog(activity).show(groupId);
-    }
-
-    /**
-     * Shows an {@link JoinAppGroupDialog} to join a group with the passed in Id, using
-     * the passed in fragment. No callback will be invoked.
-     *
-     * @param fragment android.support.v4.app.Fragment hosting the dialog
-     * @param groupId Id of the group to join
-     */
-    public static void show(
-            final Fragment fragment,
-            final String groupId) {
-        show(new FragmentWrapper(fragment), groupId);
-    }
-
-    /**
-     * Shows an {@link JoinAppGroupDialog} to join a group with the passed in Id, using
-     * the passed in fragment. No callback will be invoked.
-     *
-     * @param fragment android.app.Fragment hosting the dialog
-     * @param groupId Id of the group to join
-     */
-    public static void show(
-            final android.app.Fragment fragment,
-            final String groupId) {
-        show(new FragmentWrapper(fragment), groupId);
-    }
-
-    private static void show(
-            final FragmentWrapper fragmentWrapper,
-            final String groupId) {
-        new JoinAppGroupDialog(fragmentWrapper).show(groupId);
-    }
-
-    /**
-     * Constructs a JoinAppGroupDialog.
-     * @param activity Activity hosting the dialog.
-     */
-    public JoinAppGroupDialog(final Activity activity) {
-        super(activity, DEFAULT_REQUEST_CODE);
-    }
-
-    /**
-     * Constructs a JoinAppGroupDialog.
-     * @param fragment android.support.v4.app.Fragment hosting the dialog.
-     */
-    public JoinAppGroupDialog(final Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-    }
-
-    /**
-     * Constructs a JoinAppGroupDialog.
-     * @param fragment android.app.Fragment hosting the dialog.
-     */
-    public JoinAppGroupDialog(final android.app.Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-    }
-
-    private JoinAppGroupDialog(final FragmentWrapper fragmentWrapper) {
-        super(fragmentWrapper, DEFAULT_REQUEST_CODE);
-    }
-
-    @Override
-    protected void registerCallbackImpl (
-            final CallbackManagerImpl callbackManager,
-            final FacebookCallback<Result> callback) {
-        final ResultProcessor resultProcessor = (callback == null)
-                ? null
-                : new ResultProcessor(callback) {
-            @Override
-            public void onSuccess(AppCall appCall, Bundle results) {
-                callback.onSuccess(new Result(results));
-            }
-        };
-
-        CallbackManagerImpl.Callback callbackManagerCallback = new CallbackManagerImpl.Callback() {
-            @Override
-            public boolean onActivityResult(int resultCode, Intent data) {
-                return ShareInternalUtility.handleActivityResult(
-                        getRequestCode(),
-                        resultCode,
-                        data,
-                        resultProcessor);
-            }
-        };
-
-        callbackManager.registerCallback(getRequestCode(), callbackManagerCallback);
-    }
-
-    @Override
-    protected AppCall createBaseAppCall() {
-        return new AppCall(getRequestCode());
-    }
-
-    @Override
-    protected List<ModeHandler> getOrderedModeHandlers() {
-        ArrayList<ModeHandler> handlers = new ArrayList<>();
-        handlers.add(new WebHandler());
-
-        return handlers;
-    }
-
-    private class WebHandler extends ModeHandler {
-        @Override
-        public boolean canShow(final String content, boolean isBestEffort) {
-            return true;
-        }
-
-        @Override
-        public AppCall createAppCall(final String content) {
-            AppCall appCall = createBaseAppCall();
-            Bundle params = new Bundle();
-            params.putString(ShareConstants.WEB_DIALOG_PARAM_ID, content);
-
-            DialogPresenter.setupAppCallForWebDialog(
-                    appCall,
-                    JOIN_GAME_GROUP_DIALOG,
-                    params);
-
-            return appCall;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/widget/LikeView.java b/facebook/src/main/java/com/facebook/share/widget/LikeView.java
deleted file mode 100644
index b23d39ebb..000000000
--- a/facebook/src/main/java/com/facebook/share/widget/LikeView.java
+++ /dev/null
@@ -1,861 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.widget;
-
-import android.app.Activity;
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.ContextWrapper;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.content.res.TypedArray;
-import android.graphics.Color;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.support.v4.content.LocalBroadcastManager;
-import android.util.AttributeSet;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.View;
-import android.widget.FrameLayout;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-
-import com.facebook.FacebookException;
-import com.facebook.R;
-import com.facebook.internal.*;
-import com.facebook.share.internal.LikeActionController;
-import com.facebook.share.internal.LikeBoxCountView;
-import com.facebook.share.internal.LikeButton;
-
-/**
- * This class provides the UI for displaying the Facebook Like button and its associated components.
- */
-public class LikeView extends FrameLayout {
-
-    // ***
-    // Keep all the enum values in sync with attrs.xml
-    // ***
-
-    /**
-     * Encapsulates the valid values for the facebook:object_type attribute for a LikeView
-     */
-    public enum ObjectType {
-        /**
-         * This is the default value
-         */
-        UNKNOWN("unknown", 0),
-
-        /**
-         * Indicates that the object id set on this LikeView is an Open Graph object
-         */
-        OPEN_GRAPH("open_graph", 1),
-
-        /**
-         * Indicates that the object id set on this LikeView is a Page.
-         */
-        PAGE("page", 2);
-
-        public static ObjectType DEFAULT = UNKNOWN;
-
-        public static ObjectType fromInt(int enumValue) {
-            for (ObjectType objectType : values()) {
-                if (objectType.getValue() == enumValue) {
-                    return objectType;
-                }
-            }
-
-            return null;
-        }
-
-        private String stringValue;
-        private int intValue;
-        private ObjectType(String stringValue, int value) {
-            this.stringValue = stringValue;
-            this.intValue = value;
-        }
-
-        @Override
-        public String toString() {
-            return stringValue;
-        }
-
-        public int getValue() {
-            return intValue;
-        }
-    }
-
-    /**
-     * Encapsulates the valid values for the facebook:style attribute for a LikeView
-     */
-    public enum Style {
-        /**
-         * Setting the attribute to this value will display the button and a sentence near it that
-         * describes the social sentence for the associated object.
-         * <p/>
-         * This is the default value
-         */
-        STANDARD("standard", 0),
-
-        /**
-         * Setting the attribute to this value will display the button by itself, with no other
-         * components
-         */
-        BUTTON("button", 1),
-
-        /**
-         * Setting the attribute to this value will display the button and a box near it with the
-         * number of likes for the associated object
-         */
-        BOX_COUNT("box_count", 2);
-
-        static Style DEFAULT = STANDARD;
-
-        static Style fromInt(int enumValue) {
-            for (Style style : values()) {
-                if (style.getValue() == enumValue) {
-                    return style;
-                }
-            }
-
-            return null;
-        }
-
-        private String stringValue;
-        private int intValue;
-        private Style(String stringValue, int value) {
-            this.stringValue = stringValue;
-            this.intValue = value;
-        }
-
-        @Override
-        public String toString() {
-            return stringValue;
-        }
-
-        private int getValue() {
-            return intValue;
-        }
-    }
-
-    /**
-     * Encapsulates the valid values for the facebook:horizontal_alignment attribute for a LikeView.
-     */
-    public enum HorizontalAlignment {
-        /**
-         * Setting the attribute to this value will center the button and auxiliary view in the
-         * parent view.
-         * <p/>
-         * This is the default value
-         */
-        CENTER("center", 0),
-
-        /**
-         * Setting the attribute to this value will left-justify the button and auxiliary view in
-         * the parent view.
-         */
-        LEFT("left", 1),
-
-        /**
-         * Setting the attribute to this value will right-justify the button and auxiliary view in
-         * the parent view. If the facebook:auxiliary_view_position is set to INLINE, then the
-         * auxiliary view will be on the left of the button
-         */
-        RIGHT("right", 2);
-
-        static HorizontalAlignment DEFAULT = CENTER;
-
-        static HorizontalAlignment fromInt(int enumValue) {
-            for (HorizontalAlignment horizontalAlignment : values()) {
-                if (horizontalAlignment.getValue() == enumValue) {
-                    return horizontalAlignment;
-                }
-            }
-
-            return null;
-        }
-
-        private String stringValue;
-        private int intValue;
-        private HorizontalAlignment(String stringValue, int value) {
-            this.stringValue = stringValue;
-            this.intValue = value;
-        }
-
-        @Override
-        public String toString() {
-            return stringValue;
-        }
-
-        private int getValue() {
-            return intValue;
-        }
-    }
-
-    /**
-     * Encapsulates the valid values for the facebook:auxiliary_view_position attribute for a
-     * LikeView.
-     */
-    public enum AuxiliaryViewPosition {
-        /**
-         * Setting the attribute to this value will put the social-sentence or box-count below the
-         * like button. If the facebook:style is set to BUTTON, then this has no effect.
-         * <p/>
-         * This is the default value
-         */
-        BOTTOM("bottom", 0),
-
-        /**
-         * Setting the attribute to this value will put the social-sentence or box-count inline with
-         * the like button. The auxiliary view will be to the left of the button if the
-         * facebook:horizontal_alignment is set to RIGHT. In all other cases, it will be to the
-         * right of the button. If the facebook:style is set to BUTTON, then this has no effect.
-         */
-        INLINE("inline", 1),
-
-        /**
-         * Setting the attribute to this value will put the social-sentence or box-count above the
-         * like button. If the facebook:style is set to BUTTON, then this has no effect.
-         */
-        TOP("top", 2);
-
-        static AuxiliaryViewPosition DEFAULT = BOTTOM;
-
-        static AuxiliaryViewPosition fromInt(int enumValue) {
-            for (AuxiliaryViewPosition auxViewPosition : values()) {
-                if (auxViewPosition.getValue() == enumValue) {
-                    return auxViewPosition;
-                }
-            }
-
-            return null;
-        }
-
-        private String stringValue;
-        private int intValue;
-        private AuxiliaryViewPosition(String stringValue, int value) {
-            this.stringValue = stringValue;
-            this.intValue = value;
-        }
-
-        @Override
-        public String toString() {
-            return stringValue;
-        }
-
-        private int getValue() {
-            return intValue;
-        }
-    }
-
-    private static final int NO_FOREGROUND_COLOR = -1;
-
-    private String objectId;
-    private ObjectType objectType;
-    private LinearLayout containerView;
-    private LikeButton likeButton;
-    private LikeBoxCountView likeBoxCountView;
-    private TextView socialSentenceView;
-    private LikeActionController likeActionController;
-    private OnErrorListener onErrorListener;
-    private BroadcastReceiver broadcastReceiver;
-    private LikeActionControllerCreationCallback creationCallback;
-
-    private Style likeViewStyle = Style.DEFAULT;
-    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.DEFAULT;
-    private AuxiliaryViewPosition auxiliaryViewPosition = AuxiliaryViewPosition.DEFAULT;
-    private int foregroundColor = NO_FOREGROUND_COLOR;
-
-    private int edgePadding;
-    private int internalPadding;
-
-    private FragmentWrapper parentFragment;
-
-    private boolean explicitlyDisabled;
-
-    /**
-     * Constructor
-     *
-     * @param context Context for this View
-     */
-    public LikeView(Context context) {
-        super(context);
-        initialize(context);
-    }
-
-    /**
-     * Constructor
-     *
-     * @param context Context for this View
-     * @param attrs   AttributeSet for this View.
-     */
-    public LikeView(Context context, AttributeSet attrs) {
-        super(context, attrs);
-        parseAttributes(attrs);
-        initialize(context);
-    }
-
-    /**
-     * Sets the associated object ID for this LikeView. Can be changed during runtime.
-     * @param objectId The object ID, this can be a URL or a Facebook ID.
-     */
-    public void setObjectIdAndType(String objectId, ObjectType objectType) {
-        objectId = Utility.coerceValueIfNullOrEmpty(objectId, null);
-        objectType = objectType != null ? objectType : ObjectType.DEFAULT;
-
-        if (!Utility.areObjectsEqual(objectId, this.objectId) || (objectType != this.objectType)) {
-            setObjectIdAndTypeForced(objectId, objectType);
-
-            updateLikeStateAndLayout();
-        }
-    }
-
-    /**
-     * Sets the facebook:style for this LikeView. Can be changed during runtime.
-     *
-     * @param likeViewStyle Should be either LikeView.STANDARD, LikeView.BUTTON or
-     *                      LikeView.BOX_COUNT
-     */
-    public void setLikeViewStyle(Style likeViewStyle) {
-        likeViewStyle = likeViewStyle != null ? likeViewStyle : Style.DEFAULT;
-        if (this.likeViewStyle != likeViewStyle) {
-            this.likeViewStyle = likeViewStyle;
-
-            updateLayout();
-        }
-    }
-
-    /**
-     * Sets the facebook:auxiliary_view_position for this LikeView. Can be changed during runtime.
-     *
-     * @param auxiliaryViewPosition Should be either LikeView.TOP, LikeView.INLINE or
-     *                              LikeView.BOTTOM
-     */
-    public void setAuxiliaryViewPosition(AuxiliaryViewPosition auxiliaryViewPosition) {
-        auxiliaryViewPosition = auxiliaryViewPosition != null
-                ? auxiliaryViewPosition : AuxiliaryViewPosition.DEFAULT;
-        if (this.auxiliaryViewPosition != auxiliaryViewPosition) {
-            this.auxiliaryViewPosition = auxiliaryViewPosition;
-
-            updateLayout();
-        }
-    }
-
-    /**
-     * Sets the facebook:horizontal_alignment for this LikeView. Can be changed during runtime.
-     *
-     * @param horizontalAlignment Should be either LikeView.LEFT, LikeView.CENTER or LikeView.RIGHT
-     */
-    public void setHorizontalAlignment(HorizontalAlignment horizontalAlignment) {
-        horizontalAlignment = horizontalAlignment != null
-                ? horizontalAlignment : HorizontalAlignment.DEFAULT;
-        if (this.horizontalAlignment != horizontalAlignment) {
-            this.horizontalAlignment = horizontalAlignment;
-
-            updateLayout();
-        }
-    }
-
-    /**
-     * Sets the facebook:foreground_color for this LikeView. Can be changed during runtime. The
-     * color is only used for the social sentence text.
-     *
-     * @param foregroundColor And valid android.graphics.Color value.
-     */
-    public void setForegroundColor(int foregroundColor) {
-        if (this.foregroundColor != foregroundColor) {
-            socialSentenceView.setTextColor(foregroundColor);
-        }
-    }
-
-    /**
-     * Sets an OnErrorListener for this instance of LikeView to call into when
-     * certain exceptions occur.
-     *
-     * @param onErrorListener The listener object to set
-     */
-    public void setOnErrorListener(OnErrorListener onErrorListener) {
-        this.onErrorListener = onErrorListener;
-    }
-
-    /**
-     * Returns the current OnErrorListener for this instance of LikeView.
-     *
-     * @return The OnErrorListener
-     */
-    public OnErrorListener getOnErrorListener() {
-        return onErrorListener;
-    }
-
-    /**
-     * Sets the parent Fragment which is hosting this LikeView. This allows the LikeView to be
-     * embedded inside a Fragment, and will allow the fragment to receive the
-     * {@link Fragment#onActivityResult(int, int, android.content.Intent) onActivityResult}
-     * call rather than the Activity, upon completion of Likes from this view.
-     *
-     * @param fragment android.support.v4.app.Fragment that is hosting the LikeView.
-     */
-    public void setFragment(Fragment fragment) {
-        this.parentFragment = new FragmentWrapper(fragment);
-    }
-
-    /**
-     * Sets the parent Fragment which is hosting this LikeView. This allows the LikeView to be
-     * embedded inside a Fragment, and will allow the fragment to receive the
-     * {@link Fragment#onActivityResult(int, int, android.content.Intent) onActivityResult}
-     * call rather than the Activity, upon completion of Likes from this view.
-     *
-     * @param fragment android.app.Fragment that is hosting the LikeView.
-     */
-    public void setFragment(android.app.Fragment fragment) {
-        this.parentFragment = new FragmentWrapper(fragment);
-    }
-
-    @Override
-    public void setEnabled(boolean enabled) {
-        explicitlyDisabled = !enabled;
-
-        updateLikeStateAndLayout();
-    }
-
-    @Override
-    protected void onDetachedFromWindow() {
-        // Disassociate from the object
-        setObjectIdAndType(null, ObjectType.UNKNOWN);
-
-        super.onDetachedFromWindow();
-    }
-
-    private void parseAttributes(AttributeSet attrs) {
-        if (attrs == null || getContext() == null) {
-            return;
-        }
-
-        TypedArray a = getContext().obtainStyledAttributes(
-                attrs, R.styleable.com_facebook_like_view);
-        if (a == null) {
-            return;
-        }
-
-        objectId = Utility.coerceValueIfNullOrEmpty(
-                a.getString(R.styleable.com_facebook_like_view_com_facebook_object_id), null);
-        objectType = ObjectType.fromInt(
-                a.getInt(R.styleable.com_facebook_like_view_com_facebook_object_type,
-                        ObjectType.DEFAULT.getValue()));
-        likeViewStyle = Style.fromInt(
-                a.getInt(R.styleable.com_facebook_like_view_com_facebook_style,
-                        Style.DEFAULT.getValue()));
-        if (likeViewStyle == null) {
-            throw new IllegalArgumentException("Unsupported value for LikeView 'style'");
-        }
-
-        auxiliaryViewPosition = AuxiliaryViewPosition.fromInt(
-                a.getInt(R.styleable.com_facebook_like_view_com_facebook_auxiliary_view_position,
-                        AuxiliaryViewPosition.DEFAULT.getValue()));
-        if (auxiliaryViewPosition == null) {
-            throw new IllegalArgumentException(
-                    "Unsupported value for LikeView 'auxiliary_view_position'");
-        }
-
-        horizontalAlignment = HorizontalAlignment.fromInt(
-                a.getInt(R.styleable.com_facebook_like_view_com_facebook_horizontal_alignment,
-                        HorizontalAlignment.DEFAULT.getValue()));
-        if (horizontalAlignment == null) {
-            throw new IllegalArgumentException(
-                    "Unsupported value for LikeView 'horizontal_alignment'");
-        }
-
-        foregroundColor = a.getColor(
-                R.styleable.com_facebook_like_view_com_facebook_foreground_color, NO_FOREGROUND_COLOR);
-
-        a.recycle();
-    }
-
-    // If attributes were present, parseAttributes MUST be called before initialize() to ensure
-    // proper behavior
-    private void initialize(Context context) {
-        edgePadding = getResources().getDimensionPixelSize(R.dimen.com_facebook_likeview_edge_padding);
-        internalPadding = getResources().getDimensionPixelSize(R.dimen.com_facebook_likeview_internal_padding);
-        if (foregroundColor == NO_FOREGROUND_COLOR) {
-            foregroundColor = getResources().getColor(R.color.com_facebook_likeview_text_color);
-        }
-
-        setBackgroundColor(Color.TRANSPARENT);
-
-        containerView = new LinearLayout(context);
-        LayoutParams containerViewLayoutParams = new LayoutParams(
-                LayoutParams.WRAP_CONTENT,
-                LayoutParams.WRAP_CONTENT);
-        containerView.setLayoutParams(containerViewLayoutParams);
-
-        initializeLikeButton(context);
-        initializeSocialSentenceView(context);
-        initializeLikeCountView(context);
-
-        containerView.addView(likeButton);
-        containerView.addView(socialSentenceView);
-        containerView.addView(likeBoxCountView);
-
-        addView(containerView);
-
-        setObjectIdAndTypeForced(this.objectId, this.objectType);
-        updateLikeStateAndLayout();
-    }
-
-    private void initializeLikeButton(Context context) {
-        likeButton = new LikeButton(
-                context,
-                likeActionController != null && likeActionController.isObjectLiked());
-        likeButton.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                toggleLike();
-            }
-        });
-
-        LinearLayout.LayoutParams buttonLayout = new LinearLayout.LayoutParams(
-                LayoutParams.WRAP_CONTENT,
-                LayoutParams.WRAP_CONTENT);
-
-        likeButton.setLayoutParams(buttonLayout);
-    }
-
-    private void initializeSocialSentenceView(Context context) {
-        socialSentenceView = new TextView(context);
-        socialSentenceView.setTextSize(
-                TypedValue.COMPLEX_UNIT_PX,
-                getResources().getDimension(R.dimen.com_facebook_likeview_text_size));
-        socialSentenceView.setMaxLines(2);
-        socialSentenceView.setTextColor(foregroundColor);
-        socialSentenceView.setGravity(Gravity.CENTER);
-
-        LinearLayout.LayoutParams socialSentenceViewLayout = new LinearLayout.LayoutParams(
-                LayoutParams.WRAP_CONTENT,
-                LayoutParams.MATCH_PARENT);
-        socialSentenceView.setLayoutParams(socialSentenceViewLayout);
-    }
-
-    private void initializeLikeCountView(Context context) {
-        likeBoxCountView = new LikeBoxCountView(context);
-
-        LinearLayout.LayoutParams likeCountViewLayout = new LinearLayout.LayoutParams(
-                LayoutParams.MATCH_PARENT,
-                LayoutParams.MATCH_PARENT);
-        likeBoxCountView.setLayoutParams(likeCountViewLayout);
-    }
-
-    private void toggleLike() {
-        if (likeActionController != null) {
-            Activity activity = null;
-            if (parentFragment == null) {
-                activity = getActivity();
-            }
-
-            likeActionController.toggleLike(
-                    activity,
-                    parentFragment,
-                    getAnalyticsParameters());
-        }
-    }
-
-    private Activity getActivity() {
-        Context context = getContext();
-        while (!(context instanceof Activity) && context instanceof ContextWrapper) {
-            context = ((ContextWrapper) context).getBaseContext();
-        }
-
-        if (context instanceof Activity) {
-            return (Activity) context;
-        }
-        throw new FacebookException("Unable to get Activity.");
-    }
-
-    private Bundle getAnalyticsParameters() {
-        Bundle params = new Bundle();
-        params.putString(AnalyticsEvents.PARAMETER_LIKE_VIEW_STYLE, likeViewStyle.toString());
-        params.putString(
-                AnalyticsEvents.PARAMETER_LIKE_VIEW_AUXILIARY_POSITION,
-                auxiliaryViewPosition.toString());
-        params.putString(
-                AnalyticsEvents.PARAMETER_LIKE_VIEW_HORIZONTAL_ALIGNMENT,
-                horizontalAlignment.toString());
-        params.putString(
-                AnalyticsEvents.PARAMETER_LIKE_VIEW_OBJECT_ID,
-                Utility.coerceValueIfNullOrEmpty(objectId, ""));
-        params.putString(
-                AnalyticsEvents.PARAMETER_LIKE_VIEW_OBJECT_TYPE,
-                objectType.toString());
-
-        return params;
-    }
-
-    private void setObjectIdAndTypeForced(String newObjectId, ObjectType newObjectType) {
-        tearDownObjectAssociations();
-
-        objectId = newObjectId;
-        objectType = newObjectType;
-
-        if (Utility.isNullOrEmpty(newObjectId)) {
-            return;
-        }
-
-        creationCallback = new LikeActionControllerCreationCallback();
-        if (!isInEditMode()) {
-            LikeActionController.getControllerForObjectId(
-                    newObjectId,
-                    newObjectType,
-                    creationCallback);
-        }
-    }
-
-    private void associateWithLikeActionController(LikeActionController likeActionController) {
-        this.likeActionController = likeActionController;
-
-        this.broadcastReceiver = new LikeControllerBroadcastReceiver();
-        LocalBroadcastManager localBroadcastManager =
-                LocalBroadcastManager.getInstance(getContext());
-
-        // add the broadcast receiver
-        IntentFilter filter = new IntentFilter();
-        filter.addAction(LikeActionController.ACTION_LIKE_ACTION_CONTROLLER_UPDATED);
-        filter.addAction(LikeActionController.ACTION_LIKE_ACTION_CONTROLLER_DID_ERROR);
-        filter.addAction(LikeActionController.ACTION_LIKE_ACTION_CONTROLLER_DID_RESET);
-
-        localBroadcastManager.registerReceiver(broadcastReceiver, filter);
-    }
-
-    private void tearDownObjectAssociations() {
-        if (broadcastReceiver != null) {
-            LocalBroadcastManager localBroadcastManager =
-                    LocalBroadcastManager.getInstance(getContext());
-            localBroadcastManager.unregisterReceiver(broadcastReceiver);
-
-            broadcastReceiver = null;
-        }
-
-        // If we were already waiting on a controller to be given back, make sure we aren't waiting
-        // anymore. Otherwise when that controller is given back to the callback, it will go and
-        // register a broadcast receiver for it.
-        if (creationCallback != null) {
-            creationCallback.cancel();
-
-            creationCallback = null;
-        }
-
-        likeActionController = null;
-    }
-
-    private void updateLikeStateAndLayout() {
-        boolean enabled = !explicitlyDisabled;
-
-        if (likeActionController == null) {
-            likeButton.setSelected(false);
-            socialSentenceView.setText(null);
-            likeBoxCountView.setText(null);
-        } else {
-            likeButton.setSelected(likeActionController.isObjectLiked());
-            socialSentenceView.setText(likeActionController.getSocialSentence());
-            likeBoxCountView.setText(likeActionController.getLikeCountString());
-
-            enabled &= likeActionController.shouldEnableView();
-        }
-
-        super.setEnabled(enabled);
-        likeButton.setEnabled(enabled);
-
-        updateLayout();
-    }
-
-    private void updateLayout() {
-        // Make sure the container is horizontally aligned according to specifications.
-        LayoutParams containerViewLayoutParams = (LayoutParams)containerView.getLayoutParams();
-        LinearLayout.LayoutParams buttonLayoutParams =
-                (LinearLayout.LayoutParams)likeButton.getLayoutParams();
-        int viewGravity =
-                horizontalAlignment == HorizontalAlignment.LEFT ? Gravity.LEFT :
-                        horizontalAlignment == HorizontalAlignment.CENTER
-                                ? Gravity.CENTER_HORIZONTAL : Gravity.RIGHT;
-
-        containerViewLayoutParams.gravity = viewGravity | Gravity.TOP;
-        buttonLayoutParams.gravity = viewGravity;
-
-        // Choose the right auxiliary view to make visible.
-        socialSentenceView.setVisibility(GONE);
-        likeBoxCountView.setVisibility(GONE);
-
-        View auxView;
-        if (likeViewStyle == Style.STANDARD &&
-                likeActionController != null &&
-                !Utility.isNullOrEmpty(likeActionController.getSocialSentence())) {
-            auxView = socialSentenceView;
-        } else if (likeViewStyle == Style.BOX_COUNT &&
-                likeActionController != null &&
-                !Utility.isNullOrEmpty(likeActionController.getLikeCountString())) {
-            updateBoxCountCaretPosition();
-            auxView = likeBoxCountView;
-        } else {
-            // No more work to be done.
-            return;
-        }
-        auxView.setVisibility(VISIBLE);
-
-        // Now position the auxiliary view properly
-        LinearLayout.LayoutParams auxViewLayoutParams =
-                (LinearLayout.LayoutParams)auxView.getLayoutParams();
-        auxViewLayoutParams.gravity = viewGravity;
-
-        containerView.setOrientation(
-                auxiliaryViewPosition == AuxiliaryViewPosition.INLINE ?
-                        LinearLayout.HORIZONTAL :
-                        LinearLayout.VERTICAL);
-
-        if (auxiliaryViewPosition == AuxiliaryViewPosition.TOP ||
-                (auxiliaryViewPosition == AuxiliaryViewPosition.INLINE &&
-                        horizontalAlignment == HorizontalAlignment.RIGHT)) {
-            // Button comes after the auxiliary view. Make sure it is at the end
-            containerView.removeView(likeButton);
-            containerView.addView(likeButton);
-        } else {
-            // In all other cases, the button comes first
-            containerView.removeView(auxView);
-            containerView.addView(auxView);
-        }
-
-        switch (auxiliaryViewPosition) {
-            case TOP:
-                auxView.setPadding(edgePadding, edgePadding, edgePadding, internalPadding);
-                break;
-            case BOTTOM:
-                auxView.setPadding(edgePadding, internalPadding, edgePadding, edgePadding);
-                break;
-            case INLINE:
-                if (horizontalAlignment == HorizontalAlignment.RIGHT) {
-                    auxView.setPadding(edgePadding, edgePadding, internalPadding, edgePadding);
-                } else {
-                    auxView.setPadding(internalPadding, edgePadding, edgePadding, edgePadding);
-                }
-                break;
-        }
-    }
-
-    private void updateBoxCountCaretPosition() {
-        switch (auxiliaryViewPosition) {
-            case TOP:
-                likeBoxCountView.setCaretPosition(
-                        LikeBoxCountView.LikeBoxCountViewCaretPosition.BOTTOM);
-                break;
-            case BOTTOM:
-                likeBoxCountView.setCaretPosition(
-                        LikeBoxCountView.LikeBoxCountViewCaretPosition.TOP);
-                break;
-            case INLINE:
-                likeBoxCountView.setCaretPosition(
-                        horizontalAlignment == HorizontalAlignment.RIGHT ?
-                                LikeBoxCountView.LikeBoxCountViewCaretPosition.RIGHT :
-                                LikeBoxCountView.LikeBoxCountViewCaretPosition.LEFT);
-                break;
-        }
-    }
-
-    /**
-     * Callback interface that will be called when a network or other error is encountered
-     * while logging in.
-     */
-    public interface OnErrorListener {
-        /**
-         * Called when the share action encounters an error.
-         * @param error The error that occurred
-         */
-        public void onError(FacebookException error);
-    }
-
-    private class LikeControllerBroadcastReceiver extends BroadcastReceiver {
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            String intentAction = intent.getAction();
-            Bundle extras = intent.getExtras();
-            boolean shouldRespond = true;
-            if (extras != null) {
-                // See if an Id was set in the broadcast Intent. If it was, treat it as a filter.
-                String broadcastObjectId = extras.getString(
-                        LikeActionController.ACTION_OBJECT_ID_KEY);
-                shouldRespond = Utility.isNullOrEmpty(broadcastObjectId) ||
-                        Utility.areObjectsEqual(objectId, broadcastObjectId);
-            }
-
-            if (!shouldRespond) {
-                return;
-            }
-
-            if (LikeActionController.ACTION_LIKE_ACTION_CONTROLLER_UPDATED.equals(intentAction)) {
-                updateLikeStateAndLayout();
-            } else if (LikeActionController.ACTION_LIKE_ACTION_CONTROLLER_DID_ERROR.equals(
-                    intentAction)) {
-                if (onErrorListener != null) {
-                    onErrorListener.onError(NativeProtocol.getExceptionFromErrorData(extras));
-                }
-            } else if (LikeActionController.ACTION_LIKE_ACTION_CONTROLLER_DID_RESET.equals(
-                    intentAction)) {
-                // This will recreate the controller and associated objects
-                setObjectIdAndTypeForced(objectId, objectType);
-                updateLikeStateAndLayout();
-            }
-        }
-    }
-
-    private class LikeActionControllerCreationCallback
-            implements LikeActionController.CreationCallback {
-        private boolean isCancelled;
-
-        public void cancel() {
-            isCancelled = true;
-        }
-
-        @Override
-        public void onComplete(
-                LikeActionController likeActionController,
-                FacebookException error) {
-            if (isCancelled) {
-                return;
-            }
-
-            if (likeActionController != null) {
-                if (!likeActionController.shouldEnableView()) {
-                    error = new FacebookException(
-                            "Cannot use LikeView. The device may not be supported.");
-                }
-
-                // Always associate with the controller, so it can get updates if the view gets
-                // enabled again.
-                associateWithLikeActionController(likeActionController);
-                updateLikeStateAndLayout();
-            }
-
-            if (error != null) {
-                if (onErrorListener != null) {
-                    onErrorListener.onError(error);
-                }
-            }
-
-            LikeView.this.creationCallback = null;
-        }
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/widget/MessageDialog.java b/facebook/src/main/java/com/facebook/share/widget/MessageDialog.java
deleted file mode 100644
index 01fb16943..000000000
--- a/facebook/src/main/java/com/facebook/share/widget/MessageDialog.java
+++ /dev/null
@@ -1,255 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.widget;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-
-import com.facebook.FacebookCallback;
-import com.facebook.internal.FacebookDialogBase;
-import com.facebook.internal.AppCall;
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.internal.DialogFeature;
-import com.facebook.internal.DialogPresenter;
-import com.facebook.internal.FragmentWrapper;
-import com.facebook.share.Sharer;
-import com.facebook.share.internal.LegacyNativeDialogParameters;
-import com.facebook.share.internal.MessageDialogFeature;
-import com.facebook.share.internal.NativeDialogParameters;
-import com.facebook.share.internal.OpenGraphMessageDialogFeature;
-import com.facebook.share.internal.ShareContentValidation;
-import com.facebook.share.internal.ShareInternalUtility;
-import com.facebook.share.model.*;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Provides functionality to send content via the Facebook Message Dialog
- */
-public final class MessageDialog
-        extends FacebookDialogBase<ShareContent, Sharer.Result>
-        implements Sharer {
-
-    private static final int DEFAULT_REQUEST_CODE =
-            CallbackManagerImpl.RequestCodeOffset.Message.toRequestCode();
-
-    private boolean shouldFailOnDataError = false;
-
-    /**
-     * Helper to show the provided {@link com.facebook.share.model.ShareContent} using the provided
-     * Activity. No callback will be invoked.
-     *
-     * @param activity Activity to use to send the provided content
-     * @param shareContent Content to send
-     */
-    public static void show(
-            final Activity activity,
-            final ShareContent shareContent) {
-        new MessageDialog(activity).show(shareContent);
-    }
-
-    /**
-     * Helper to show the provided {@link com.facebook.share.model.ShareContent} using the provided
-     * Fragment. No callback will be invoked.
-     *
-     * @param fragment android.support.v4.app.Fragment to use to send the provided content
-     * @param shareContent Content to send
-     */
-    public static void show(
-            final Fragment fragment,
-            final ShareContent shareContent) {
-        show(new FragmentWrapper(fragment), shareContent);
-    }
-
-    /**
-     * Helper to show the provided {@link com.facebook.share.model.ShareContent} using the provided
-     * Fragment. No callback will be invoked.
-     *
-     * @param fragment android.app.Fragment to use to send the provided content
-     * @param shareContent Content to send
-     */
-    public static void show(
-            final android.app.Fragment fragment,
-            final ShareContent shareContent) {
-        show(new FragmentWrapper(fragment), shareContent);
-    }
-
-    private static void show(
-            final FragmentWrapper fragmentWrapper,
-            final ShareContent shareContent) {
-        new MessageDialog(fragmentWrapper).show(shareContent);
-    }
-
-    /**
-     * Indicates whether it is possible to show the dialog for
-     * {@link com.facebook.share.model.ShareContent} of the specified type.
-     *
-     * @param contentType Class of the intended {@link com.facebook.share.model.ShareContent} to
-     *                    send.
-     * @return True if the specified content type can be shown via the dialog
-     */
-    public static boolean canShow(Class<? extends ShareContent> contentType) {
-        DialogFeature feature = getFeature(contentType);
-
-        return feature != null && DialogPresenter.canPresentNativeDialogWithFeature(feature);
-    }
-
-    /**
-     * Constructs a MessageDialog.
-     * @param activity Activity to use to send the provided content.
-     */
-    public MessageDialog(Activity activity) {
-        super(activity, DEFAULT_REQUEST_CODE);
-
-        ShareInternalUtility.registerStaticShareCallback(DEFAULT_REQUEST_CODE);
-    }
-
-    /**
-     * Constructs a MessageDialog.
-     * @param fragment android.support.v4.app.Fragment to use to send the provided content.
-     */
-    public MessageDialog(Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-
-    }
-
-    /**
-     * Constructs a MessageDialog.
-     * @param fragment android.app.Fragment to use to send the provided content.
-     */
-    public MessageDialog(android.app.Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-    }
-
-    private MessageDialog(FragmentWrapper fragmentWrapper) {
-        super(fragmentWrapper, DEFAULT_REQUEST_CODE);
-
-        ShareInternalUtility.registerStaticShareCallback(DEFAULT_REQUEST_CODE);
-    }
-
-    // for SendButton use only
-    MessageDialog(Activity activity, int requestCode) {
-        super(activity, requestCode);
-
-        ShareInternalUtility.registerStaticShareCallback(requestCode);
-    }
-
-    // for SendButton use only
-    MessageDialog(Fragment fragment, int requestCode) {
-        this(new FragmentWrapper(fragment), requestCode);
-
-    }
-
-    MessageDialog(android.app.Fragment fragment, int requestCode) {
-        this(new FragmentWrapper(fragment), requestCode);
-    }
-
-    private MessageDialog(FragmentWrapper fragmentWrapper, int requestCode) {
-        super(fragmentWrapper, requestCode);
-
-        ShareInternalUtility.registerStaticShareCallback(requestCode);
-    }
-
-    @Override
-    protected void registerCallbackImpl(
-            final CallbackManagerImpl callbackManager,
-            final FacebookCallback<Result> callback) {
-        ShareInternalUtility.registerSharerCallback(getRequestCode(), callbackManager, callback);
-    }
-
-    @Override
-    public boolean getShouldFailOnDataError() {
-        return this.shouldFailOnDataError;
-    }
-
-    @Override
-    public void setShouldFailOnDataError(boolean shouldFailOnDataError) {
-        this.shouldFailOnDataError = shouldFailOnDataError;
-    }
-
-    @Override
-    protected AppCall createBaseAppCall() {
-        return new AppCall(getRequestCode());
-    }
-
-    @Override
-    protected List<ModeHandler> getOrderedModeHandlers() {
-        ArrayList<ModeHandler> handlers = new ArrayList<>();
-        handlers.add(new NativeHandler());
-
-        return handlers;
-    }
-
-    private class NativeHandler extends ModeHandler {
-        @Override
-        public boolean canShow(final ShareContent shareContent, boolean isBestEffort) {
-            return shareContent != null && MessageDialog.canShow(shareContent.getClass());
-        }
-
-        @Override
-        public AppCall createAppCall(final ShareContent content) {
-            ShareContentValidation.validateForMessage(content);
-
-            final AppCall appCall = createBaseAppCall();
-            final boolean shouldFailOnDataError = getShouldFailOnDataError();
-            final Activity activity = getActivityContext();
-
-            DialogPresenter.setupAppCallForNativeDialog(
-                    appCall,
-                    new DialogPresenter.ParameterProvider() {
-                        @Override
-                        public Bundle getParameters() {
-                            return NativeDialogParameters.create(
-                                    appCall.getCallId(),
-                                    content,
-                                    shouldFailOnDataError);
-                        }
-
-                        @Override
-                        public Bundle getLegacyParameters() {
-                            return LegacyNativeDialogParameters.create(
-                                    appCall.getCallId(),
-                                    content,
-                                    shouldFailOnDataError);
-                        }
-                    },
-                    getFeature(content.getClass()));
-
-            return appCall;
-        }
-    }
-
-    private static DialogFeature getFeature(
-            Class<? extends ShareContent> contentType) {
-        if (ShareLinkContent.class.isAssignableFrom(contentType)) {
-            return MessageDialogFeature.MESSAGE_DIALOG;
-        } else if (SharePhotoContent.class.isAssignableFrom(contentType)) {
-            return MessageDialogFeature.PHOTOS;
-        } else if (ShareVideoContent.class.isAssignableFrom(contentType)) {
-            return MessageDialogFeature.VIDEO;
-        } else if (ShareOpenGraphContent.class.isAssignableFrom(contentType)) {
-            return OpenGraphMessageDialogFeature.OG_MESSAGE_DIALOG;
-        }
-        return null;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/widget/SendButton.java b/facebook/src/main/java/com/facebook/share/widget/SendButton.java
deleted file mode 100644
index 068d9ebc6..000000000
--- a/facebook/src/main/java/com/facebook/share/widget/SendButton.java
+++ /dev/null
@@ -1,80 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.widget;
-
-import android.content.Context;
-import android.util.AttributeSet;
-import android.view.View;
-
-import com.facebook.R;
-import com.facebook.internal.AnalyticsEvents;
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.internal.FacebookDialogBase;
-import com.facebook.share.Sharer;
-import com.facebook.share.model.ShareContent;
-
-/**
- * A button to share content through Messenger.
- * Tapping the receiver will invoke the {@link com.facebook.share.widget.MessageDialog} with the attached shareContent.
- */
-public final class SendButton extends ShareButtonBase {
-    public SendButton(final Context context) {
-        super(context, null, 0, AnalyticsEvents.EVENT_SEND_BUTTON_CREATE,
-                                AnalyticsEvents.EVENT_SEND_BUTTON_DID_TAP);
-    }
-
-    public SendButton(final Context context, final AttributeSet attrs) {
-        super(context, attrs, 0, AnalyticsEvents.EVENT_SEND_BUTTON_CREATE,
-                                 AnalyticsEvents.EVENT_SEND_BUTTON_DID_TAP);
-    }
-
-    public SendButton(final Context context, final AttributeSet attrs, final int defStyleAttr) {
-        super(
-                context,
-                attrs,
-                defStyleAttr,
-                AnalyticsEvents.EVENT_SEND_BUTTON_CREATE,
-                AnalyticsEvents.EVENT_SEND_BUTTON_DID_TAP);
-    }
-
-    @Override
-    protected int getDefaultStyleResource() {
-        return R.style.com_facebook_button_send;
-    }
-
-    @Override
-    protected int getDefaultRequestCode() {
-        return CallbackManagerImpl.RequestCodeOffset.Message.toRequestCode();
-    }
-
-    @Override
-    protected FacebookDialogBase<ShareContent, Sharer.Result> getDialog() {
-        final MessageDialog dialog;
-        if (SendButton.this.getFragment() != null) {
-            dialog = new MessageDialog(SendButton.this.getFragment(), getRequestCode());
-        } else if (SendButton.this.getNativeFragment() != null) {
-            dialog = new MessageDialog(SendButton.this.getNativeFragment(), getRequestCode());
-        } else {
-            dialog = new MessageDialog(getActivity(), getRequestCode());
-        }
-        return dialog;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/widget/ShareButton.java b/facebook/src/main/java/com/facebook/share/widget/ShareButton.java
deleted file mode 100644
index 2c5835150..000000000
--- a/facebook/src/main/java/com/facebook/share/widget/ShareButton.java
+++ /dev/null
@@ -1,81 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.widget;
-
-import android.content.Context;
-import android.util.AttributeSet;
-import android.view.View;
-
-import com.facebook.R;
-import com.facebook.internal.AnalyticsEvents;
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.internal.FacebookDialogBase;
-import com.facebook.share.Sharer;
-import com.facebook.share.model.ShareContent;
-
-/**
- * A button to share content on Facebook.
- * Tapping the receiver will invoke the {@link com.facebook.share.widget.ShareDialog} with the attached shareContent.
- */
-public final class ShareButton extends ShareButtonBase {
-
-    public ShareButton(final Context context) {
-        super(context, null, 0, AnalyticsEvents.EVENT_SHARE_BUTTON_CREATE,
-                                AnalyticsEvents.EVENT_SHARE_BUTTON_DID_TAP);
-    }
-
-    public ShareButton(final Context context, final AttributeSet attrs) {
-        super(context, attrs, 0, AnalyticsEvents.EVENT_SHARE_BUTTON_CREATE,
-                                 AnalyticsEvents.EVENT_SHARE_BUTTON_DID_TAP);
-    }
-
-    public ShareButton(final Context context, final AttributeSet attrs, final int defStyleAttr) {
-        super(
-                context,
-                attrs,
-                defStyleAttr,
-                AnalyticsEvents.EVENT_SHARE_BUTTON_CREATE,
-                AnalyticsEvents.EVENT_SHARE_BUTTON_DID_TAP);
-    }
-
-    @Override
-    protected int getDefaultStyleResource() {
-        return R.style.com_facebook_button_share;
-    }
-
-    @Override
-    protected int getDefaultRequestCode() {
-        return CallbackManagerImpl.RequestCodeOffset.Share.toRequestCode();
-    }
-
-    @Override
-    protected FacebookDialogBase<ShareContent, Sharer.Result> getDialog() {
-        final ShareDialog dialog;
-        if (ShareButton.this.getFragment() != null) {
-            dialog = new ShareDialog(ShareButton.this.getFragment(), getRequestCode());
-        } else if (ShareButton.this.getNativeFragment() != null) {
-            dialog = new ShareDialog(ShareButton.this.getNativeFragment(), getRequestCode());
-        } else {
-            dialog = new ShareDialog(getActivity(), getRequestCode());
-        }
-        return dialog;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/widget/ShareButtonBase.java b/facebook/src/main/java/com/facebook/share/widget/ShareButtonBase.java
deleted file mode 100644
index 910bf04d5..000000000
--- a/facebook/src/main/java/com/facebook/share/widget/ShareButtonBase.java
+++ /dev/null
@@ -1,179 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.widget;
-
-import android.content.Context;
-import android.util.AttributeSet;
-import android.view.View;
-
-import com.facebook.CallbackManager;
-import com.facebook.FacebookButtonBase;
-import com.facebook.FacebookCallback;
-import com.facebook.FacebookSdk;
-import com.facebook.internal.FacebookDialogBase;
-import com.facebook.share.Sharer;
-import com.facebook.share.internal.ShareInternalUtility;
-import com.facebook.share.model.ShareContent;
-
-/**
- * A base class for sharing buttons.
- */
-public abstract class ShareButtonBase extends FacebookButtonBase {
-    private ShareContent shareContent;
-    private int requestCode = 0;
-    private boolean enabledExplicitlySet = false;
-
-    protected ShareButtonBase(
-            final Context context,
-            final AttributeSet attrs,
-            final int defStyleAttr,
-            final String analyticsButtonCreatedEventName,
-            final String analyticsButtonTappedEventName) {
-        super(
-                context,
-                attrs,
-                defStyleAttr,
-                0,
-                analyticsButtonCreatedEventName,
-                analyticsButtonTappedEventName);
-        requestCode = isInEditMode() ? 0 : getDefaultRequestCode();
-        internalSetEnabled(false);
-    }
-
-    /**
-     * Returns the share content from the button.
-     * @return The share content.
-     */
-    public ShareContent getShareContent() {
-        return this.shareContent;
-    }
-
-    /**
-     * Sets the share content on the button.
-     * @param shareContent The share content.
-     */
-    public void setShareContent(final ShareContent shareContent) {
-        this.shareContent = shareContent;
-        if (!enabledExplicitlySet) {
-            internalSetEnabled(canShare());
-        }
-    }
-
-    @Override
-    public void setEnabled(boolean enabled) {
-        super.setEnabled(enabled);
-        enabledExplicitlySet = true;
-    }
-
-    /**
-     * Returns the request code used for this Button.
-     *
-     * @return the request code.
-     */
-    @Override
-    public int getRequestCode() {
-        return requestCode;
-    }
-
-    /**
-     * Set the request code for the startActivityForResult call. The requestCode should be
-     * outside of the range of those reserved for the Facebook SDK
-     * {@link com.facebook.FacebookSdk#isFacebookRequestCode(int)}. This method should also be
-     * called prior to registering any callbacks.
-     *
-     * @param requestCode the request code to use.
-     */
-    protected void setRequestCode(final int requestCode) {
-        if (FacebookSdk.isFacebookRequestCode(requestCode)) {
-            throw new IllegalArgumentException("Request code " + requestCode +
-                    " cannot be within the range reserved by the Facebook SDK.");
-        }
-        this.requestCode = requestCode;
-    }
-
-    /**
-     * Allows registration of a callback for when the share completes. This should be called
-     * in the {@link android.app.Activity#onCreate(android.os.Bundle)} or
-     * {@link android.support.v4.app.Fragment#onCreate(android.os.Bundle)} methods.
-     *
-     * @param callbackManager The {@link com.facebook.CallbackManager} instance that will be
-     *                        handling results that are received via
-     *                        {@link android.app.Activity#onActivityResult(int, int, android.content.Intent)}
-     * @param callback The callback that should be called to handle dialog completion.
-     */
-    public void registerCallback(
-            final CallbackManager callbackManager,
-            final FacebookCallback<Sharer.Result> callback) {
-        ShareInternalUtility.registerSharerCallback(getRequestCode(), callbackManager, callback);
-    }
-
-    /**
-     * Allows registration of a callback for when the share completes. This should be called
-     * in the {@link android.app.Activity#onCreate(android.os.Bundle)} or
-     * {@link android.support.v4.app.Fragment#onCreate(android.os.Bundle)} methods.
-     *
-     * @param callbackManager The {@link com.facebook.CallbackManager} instance that will be
-     *                        handling results that are received via
-     *                        {@link android.app.Activity#onActivityResult(int, int, android.content.Intent)}
-     * @param callback The callback that should be called to handle dialog completion.
-     * @param requestCode  The request code to use, this should be outside of the range of those
-     *                     reserved for the Facebook SDK
-     *                     {@link com.facebook.FacebookSdk#isFacebookRequestCode(int)}.
-     */
-    public void registerCallback(
-            final CallbackManager callbackManager,
-            final FacebookCallback<Sharer.Result> callback,
-            final int requestCode) {
-        setRequestCode(requestCode);
-        registerCallback(callbackManager, callback);
-    }
-
-    @Override
-    protected void configureButton(
-            final Context context,
-            final AttributeSet attrs,
-            final int defStyleAttr,
-            final int defStyleRes) {
-        super.configureButton(context, attrs, defStyleAttr, defStyleRes);
-        setInternalOnClickListener(this.getShareOnClickListener());
-    }
-
-    protected boolean canShare() {
-        return getDialog().canShow(getShareContent());
-    }
-
-    protected OnClickListener getShareOnClickListener()  {
-        return new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                callExternalOnClickListener(v);
-                getDialog().show(getShareContent());
-            }
-        };
-    }
-
-    abstract protected FacebookDialogBase<ShareContent, Sharer.Result> getDialog();
-
-    private void internalSetEnabled(boolean enabled) {
-        setEnabled(enabled);
-        enabledExplicitlySet = false;
-    }
-}
diff --git a/facebook/src/main/java/com/facebook/share/widget/ShareDialog.java b/facebook/src/main/java/com/facebook/share/widget/ShareDialog.java
deleted file mode 100644
index a5ef533ab..000000000
--- a/facebook/src/main/java/com/facebook/share/widget/ShareDialog.java
+++ /dev/null
@@ -1,484 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.widget;
-
-import android.app.Activity;
-import android.app.Dialog;
-import android.content.Context;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-
-import com.facebook.FacebookCallback;
-import com.facebook.appevents.AppEventsLogger;
-import com.facebook.internal.AnalyticsEvents;
-import com.facebook.internal.AppCall;
-import com.facebook.internal.CallbackManagerImpl;
-import com.facebook.internal.DialogFeature;
-import com.facebook.internal.DialogPresenter;
-import com.facebook.internal.FacebookDialogBase;
-import com.facebook.internal.FragmentWrapper;
-import com.facebook.internal.Utility;
-import com.facebook.share.internal.ShareFeedContent;
-import com.facebook.share.Sharer;
-import com.facebook.share.internal.LegacyNativeDialogParameters;
-import com.facebook.share.internal.NativeDialogParameters;
-import com.facebook.share.internal.OpenGraphActionDialogFeature;
-import com.facebook.share.internal.ShareContentValidation;
-import com.facebook.share.internal.ShareDialogFeature;
-import com.facebook.share.internal.ShareInternalUtility;
-import com.facebook.share.internal.WebDialogParameters;
-import com.facebook.share.model.*;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Provides functionality to share content via the Facebook Share Dialog
- */
-public final class ShareDialog
-        extends FacebookDialogBase<ShareContent, Sharer.Result>
-        implements Sharer {
-
-    /**
-     * The mode for the share dialog.
-     */
-    public enum Mode {
-        /**
-         * The mode is determined automatically.
-         */
-        AUTOMATIC,
-        /**
-         * The native dialog is used.
-         */
-        NATIVE,
-        /**
-         * The web dialog is used.
-         */
-        WEB,
-        /**
-         * The feed dialog is used.
-         */
-        FEED
-    }
-
-    private static final String FEED_DIALOG = "feed";
-    private static final String WEB_SHARE_DIALOG = "share";
-    private static final String WEB_OG_SHARE_DIALOG = "share_open_graph";
-
-    private static final int DEFAULT_REQUEST_CODE =
-            CallbackManagerImpl.RequestCodeOffset.Share.toRequestCode();
-
-    private  boolean shouldFailOnDataError = false;
-    // Keep track of Mode overrides for logging purposes.
-    private boolean isAutomaticMode = true;
-
-    /**
-     * Helper to show the provided {@link com.facebook.share.model.ShareContent} using the provided
-     * Activity. No callback will be invoked.
-     *
-     * @param activity Activity to use to share the provided content
-     * @param shareContent Content to share
-     */
-    public static void show(
-            final Activity activity,
-            final ShareContent shareContent) {
-        new ShareDialog(activity).show(shareContent);
-    }
-
-    /**
-     * Helper to show the provided {@link com.facebook.share.model.ShareContent} using the provided
-     * Fragment. No callback will be invoked.
-     *
-     * @param fragment android.support.v4.app.Fragment to use to share the provided content
-     * @param shareContent Content to share
-     */
-    public static void show(
-            final Fragment fragment,
-            final ShareContent shareContent) {
-        show(new FragmentWrapper(fragment), shareContent);
-    }
-
-    /**
-     * Helper to show the provided {@link com.facebook.share.model.ShareContent} using the provided
-     * Fragment. No callback will be invoked.
-     *
-     * @param fragment android.app.Fragment to use to share the provided content
-     * @param shareContent Content to share
-     */
-    public static void show(
-            final android.app.Fragment fragment,
-            final ShareContent shareContent) {
-        show(new FragmentWrapper(fragment), shareContent);
-    }
-
-    private static void show(
-            final FragmentWrapper fragmentWrapper,
-            final ShareContent shareContent) {
-        new ShareDialog(fragmentWrapper).show(shareContent);
-    }
-
-    /**
-     * Indicates whether it is possible to show the dialog for
-     * {@link com.facebook.share.model.ShareContent} of the specified type.
-     *
-     * @param contentType Class of the intended {@link com.facebook.share.model.ShareContent} to
-     *                    share.
-     * @return True if the specified content type can be shown via the dialog
-     */
-    public static boolean canShow(Class<? extends ShareContent> contentType) {
-        return canShowWebTypeCheck(contentType) || canShowNative(contentType);
-    }
-
-    private static boolean canShowNative(Class<? extends ShareContent> contentType) {
-        DialogFeature feature = getFeature(contentType);
-
-        return feature != null && DialogPresenter.canPresentNativeDialogWithFeature(feature);
-    }
-
-    private static boolean canShowWebTypeCheck(Class<? extends ShareContent> contentType) {
-        // If we don't have an instance of a ShareContent, then all we can do is check whether
-        // this is a ShareLinkContent, which can be shared if configured properly.
-        // The instance method version of this check is more accurate and should be used on
-        // ShareDialog instances.
-
-        return ShareLinkContent.class.isAssignableFrom(contentType)
-                || ShareOpenGraphContent.class.isAssignableFrom(contentType);
-    }
-
-    /**
-     * Constructs a new ShareDialog.
-     * @param activity Activity to use to share the provided content.
-     */
-    public ShareDialog(Activity activity) {
-        super(activity, DEFAULT_REQUEST_CODE);
-
-        ShareInternalUtility.registerStaticShareCallback(DEFAULT_REQUEST_CODE);
-    }
-
-    /**
-     * Constructs a new ShareDialog.
-     * @param fragment android.support.v4.app.Fragment to use to share the provided content.
-     */
-    public ShareDialog(Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-
-    }
-
-    /**
-     * Constructs a new ShareDialog.
-     * @param fragment android.app.Fragment to use to share the provided content.
-     */
-    public ShareDialog(android.app.Fragment fragment) {
-        this(new FragmentWrapper(fragment));
-    }
-
-    private ShareDialog(FragmentWrapper fragmentWrapper) {
-        super(fragmentWrapper, DEFAULT_REQUEST_CODE);
-
-        ShareInternalUtility.registerStaticShareCallback(DEFAULT_REQUEST_CODE);
-    }
-
-    // for ShareDialog use only
-    ShareDialog(Activity activity, int requestCode) {
-        super(activity, requestCode);
-
-        ShareInternalUtility.registerStaticShareCallback(requestCode);
-    }
-
-    // for ShareDialog use only
-    ShareDialog(Fragment fragment, int requestCode) {
-        this(new FragmentWrapper(fragment), requestCode);
-
-    }
-
-    ShareDialog(android.app.Fragment fragment, int requestCode) {
-        this(new FragmentWrapper(fragment), requestCode);
-    }
-
-    private ShareDialog(FragmentWrapper fragmentWrapper, int requestCode) {
-        super(fragmentWrapper, requestCode);
-
-        ShareInternalUtility.registerStaticShareCallback(requestCode);
-    }
-
-    @Override
-    protected void registerCallbackImpl(
-            final CallbackManagerImpl callbackManager,
-            final FacebookCallback<Result> callback) {
-        ShareInternalUtility.registerSharerCallback(
-                getRequestCode(), callbackManager, callback);
-    }
-
-    @Override
-    public boolean getShouldFailOnDataError() {
-        return this.shouldFailOnDataError;
-    }
-
-    @Override
-    public void setShouldFailOnDataError(boolean shouldFailOnDataError) {
-        this.shouldFailOnDataError = shouldFailOnDataError;
-    }
-
-    /**
-     * Call this to check if the Share Dialog can be shown in a specific mode.
-     *
-     * @param mode Mode of the Share Dialog
-     * @return True if the dialog can be shown in the passed in Mode
-     */
-    public boolean canShow(ShareContent content, Mode mode) {
-        return canShowImpl(content, (mode == Mode.AUTOMATIC) ? BASE_AUTOMATIC_MODE : mode);
-    }
-
-    /**
-     * Call this to show the Share Dialog in a specific mode
-     * @param mode Mode of the Share Dialog
-     */
-    public void show(ShareContent content, Mode mode) {
-        isAutomaticMode = (mode == Mode.AUTOMATIC);
-
-        showImpl(content, isAutomaticMode ? BASE_AUTOMATIC_MODE : mode);
-    }
-
-    @Override
-    protected AppCall createBaseAppCall() {
-        return new AppCall(getRequestCode());
-    }
-
-    @Override
-    protected List<ModeHandler> getOrderedModeHandlers() {
-        ArrayList<ModeHandler> handlers = new ArrayList<>();
-        handlers.add(new NativeHandler());
-        handlers.add(new FeedHandler()); // Feed takes precedence for link-shares for Mode.AUTOMATIC
-        handlers.add(new WebShareHandler());
-
-        return handlers;
-    }
-
-    private class NativeHandler extends ModeHandler {
-        @Override
-        public Object getMode() {
-            return Mode.NATIVE;
-        }
-
-        @Override
-        public boolean canShow(final ShareContent content, boolean isBestEffort) {
-            if (content == null) {
-                return false;
-            }
-
-            boolean canShowResult = true;
-            if (!isBestEffort) {
-                // The following features are considered best-effort and will not prevent the
-                // native share dialog from being presented, even if the installed version does
-                // not support the feature.
-                // However, to let apps pivot to a different approach or dialog (for example, Web),
-                // we need to be able to signal back when native support is lacking.
-                if (content.getShareHashtag() != null) {
-                    canShowResult = DialogPresenter.canPresentNativeDialogWithFeature(
-                            ShareDialogFeature.HASHTAG);
-                }
-                if ((content instanceof ShareLinkContent) &&
-                        (!Utility.isNullOrEmpty(((ShareLinkContent)content).getQuote()))) {
-                    canShowResult &= DialogPresenter.canPresentNativeDialogWithFeature(
-                            ShareDialogFeature.LINK_SHARE_QUOTES);
-                }
-            }
-            return canShowResult && ShareDialog.canShowNative(content.getClass());
-        }
-
-        @Override
-        public AppCall createAppCall(final ShareContent content) {
-            logDialogShare(getActivityContext(), content, Mode.NATIVE);
-
-            ShareContentValidation.validateForNativeShare(content);
-
-            final AppCall appCall = createBaseAppCall();
-            final boolean shouldFailOnDataError = getShouldFailOnDataError();
-
-            DialogPresenter.setupAppCallForNativeDialog(
-                    appCall,
-                    new DialogPresenter.ParameterProvider() {
-                        @Override
-                        public Bundle getParameters() {
-                            return NativeDialogParameters.create(
-                                    appCall.getCallId(),
-                                    content,
-                                    shouldFailOnDataError);
-                        }
-
-                        @Override
-                        public Bundle getLegacyParameters() {
-                            return LegacyNativeDialogParameters.create(
-                                    appCall.getCallId(),
-                                    content,
-                                    shouldFailOnDataError);
-                        }
-                    },
-                    getFeature(content.getClass()));
-
-            return appCall;
-        }
-    }
-
-    private class WebShareHandler extends ModeHandler {
-        @Override
-        public Object getMode() {
-            return Mode.WEB;
-        }
-
-        @Override
-        public boolean canShow(final ShareContent content, boolean isBestEffort) {
-            return (content != null) && ShareDialog.canShowWebTypeCheck(content.getClass());
-        }
-
-        @Override
-        public AppCall createAppCall(final ShareContent content) {
-            logDialogShare(getActivityContext(), content, Mode.WEB);
-
-            final AppCall appCall = createBaseAppCall();
-
-            ShareContentValidation.validateForWebShare(content);
-
-            Bundle params;
-            if (content instanceof ShareLinkContent) {
-                params = WebDialogParameters.create((ShareLinkContent)content);
-            } else {
-                params = WebDialogParameters.create((ShareOpenGraphContent)content);
-            }
-
-            DialogPresenter.setupAppCallForWebDialog(
-                    appCall,
-                    getActionName(content),
-                    params);
-
-            return appCall;
-        }
-
-        private String getActionName(ShareContent shareContent) {
-            if (shareContent instanceof ShareLinkContent) {
-                return WEB_SHARE_DIALOG;
-            } else if (shareContent instanceof ShareOpenGraphContent) {
-                return WEB_OG_SHARE_DIALOG;
-            }
-
-            return null;
-        }
-    }
-
-    private class FeedHandler extends ModeHandler {
-        @Override
-        public Object getMode() {
-            return Mode.FEED;
-        }
-
-        @Override
-        public boolean canShow(final ShareContent content, boolean isBestEffort) {
-            return (content instanceof ShareLinkContent)
-                    || (content instanceof ShareFeedContent);
-        }
-
-        @Override
-        public AppCall createAppCall(final ShareContent content) {
-            logDialogShare(getActivityContext(), content, Mode.FEED);
-            AppCall appCall = createBaseAppCall();
-            Bundle params;
-            if (content instanceof ShareLinkContent) {
-                ShareLinkContent linkContent = (ShareLinkContent)content;
-                ShareContentValidation.validateForWebShare(linkContent);
-                params = WebDialogParameters.createForFeed(linkContent);
-            } else {
-                ShareFeedContent feedContent = (ShareFeedContent)content;
-                params = WebDialogParameters.createForFeed(feedContent);
-            }
-
-            DialogPresenter.setupAppCallForWebDialog(
-                    appCall,
-                    FEED_DIALOG,
-                    params);
-
-            return appCall;
-        }
-    }
-
-    private static DialogFeature getFeature(
-            Class<? extends ShareContent> contentType) {
-        if (ShareLinkContent.class.isAssignableFrom(contentType)) {
-            return ShareDialogFeature.SHARE_DIALOG;
-        } else if (SharePhotoContent.class.isAssignableFrom(contentType)) {
-            return ShareDialogFeature.PHOTOS;
-        } else if (ShareVideoContent.class.isAssignableFrom(contentType)) {
-            return ShareDialogFeature.VIDEO;
-        } else if (ShareOpenGraphContent.class.isAssignableFrom(contentType)) {
-            return OpenGraphActionDialogFeature.OG_ACTION_DIALOG;
-        } else if (ShareMediaContent.class.isAssignableFrom(contentType)) {
-            return ShareDialogFeature.MULTIMEDIA;
-        }
-        return null;
-    }
-
-    private void logDialogShare(Context context, ShareContent content, Mode mode) {
-        String displayType;
-        if (isAutomaticMode) {
-            mode = Mode.AUTOMATIC;
-        }
-
-        switch (mode) {
-            case AUTOMATIC:
-                displayType = AnalyticsEvents.PARAMETER_SHARE_DIALOG_SHOW_AUTOMATIC;
-                break;
-            case WEB:
-                displayType = AnalyticsEvents.PARAMETER_SHARE_DIALOG_SHOW_WEB;
-                break;
-            case NATIVE:
-                displayType = AnalyticsEvents.PARAMETER_SHARE_DIALOG_SHOW_NATIVE;
-                break;
-            default:
-                displayType = AnalyticsEvents.PARAMETER_SHARE_DIALOG_SHOW_UNKNOWN;
-                break;
-        }
-
-        String contentType;
-        DialogFeature dialogFeature = getFeature(content.getClass());
-        if (dialogFeature == ShareDialogFeature.SHARE_DIALOG) {
-            contentType = AnalyticsEvents.PARAMETER_SHARE_DIALOG_CONTENT_STATUS;
-        } else if (dialogFeature == ShareDialogFeature.PHOTOS) {
-            contentType = AnalyticsEvents.PARAMETER_SHARE_DIALOG_CONTENT_PHOTO;
-        } else if (dialogFeature == ShareDialogFeature.VIDEO) {
-            contentType = AnalyticsEvents.PARAMETER_SHARE_DIALOG_CONTENT_VIDEO;
-        } else if (dialogFeature == OpenGraphActionDialogFeature.OG_ACTION_DIALOG) {
-            contentType = AnalyticsEvents.PARAMETER_SHARE_DIALOG_CONTENT_OPENGRAPH;
-        } else {
-            contentType = AnalyticsEvents.PARAMETER_SHARE_DIALOG_CONTENT_UNKNOWN;
-        }
-
-        AppEventsLogger logger = AppEventsLogger.newLogger(context);
-        Bundle parameters = new Bundle();
-        parameters.putString(
-                AnalyticsEvents.PARAMETER_SHARE_DIALOG_SHOW,
-                displayType
-        );
-        parameters.putString(
-                AnalyticsEvents.PARAMETER_SHARE_DIALOG_CONTENT_TYPE,
-                contentType
-        );
-        logger.logSdkEvent(AnalyticsEvents.EVENT_SHARE_DIALOG_SHOW, null, parameters);
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/GraphRequestTest.java b/facebook/src/test/java/com/facebook/GraphRequestTest.java
index 3aca6e1c5..6847d8847 100644
--- a/facebook/src/test/java/com/facebook/GraphRequestTest.java
+++ b/facebook/src/test/java/com/facebook/GraphRequestTest.java
@@ -27,7 +27,6 @@
 
 import com.facebook.internal.GraphUtil;
 import com.facebook.internal.ServerProtocol;
-import com.facebook.share.internal.ShareInternalUtility;
 
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -85,27 +84,6 @@ public void testCreateMyFriendsRequest() {
         assertEquals("me/friends", request.getGraphPath());
     }
 
-    @Test
-    public void testCreateUploadPhotoRequest() {
-        Bitmap image = Bitmap.createBitmap(128, 128, Bitmap.Config.ALPHA_8);
-
-        GraphRequest request =
-                GraphRequest.newUploadPhotoRequest(
-                        null,
-                        ShareInternalUtility.MY_PHOTOS,
-                        image,
-                        null,
-                        null,
-                        null);
-        assertTrue(request != null);
-
-        Bundle parameters = request.getParameters();
-        assertTrue(parameters != null);
-
-        assertTrue(parameters.containsKey("picture"));
-        assertEquals(image, parameters.getParcelable("picture"));
-        assertEquals("me/photos", request.getGraphPath());
-    }
 
     @Test
     public void testCreatePlacesSearchRequestWithLocation() {
diff --git a/facebook/src/test/java/com/facebook/applinks/AppLinkDataTest.java b/facebook/src/test/java/com/facebook/applinks/AppLinkDataTest.java
deleted file mode 100644
index 85f30f9ea..000000000
--- a/facebook/src/test/java/com/facebook/applinks/AppLinkDataTest.java
+++ /dev/null
@@ -1,203 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.applinks;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Bundle;
-
-import com.facebook.FacebookTestCase;
-import com.facebook.applinks.AppLinkData;
-
-import org.junit.Test;
-
-import static org.junit.Assert.*;
-
-public class AppLinkDataTest extends FacebookTestCase {
-    private static final String TARGET_URI_STRING = "http://test.app/foo";
-    private static final String FB_REF_KEY = "fb_ref";
-    private static final String FB_REF_VALUE = "foobar";
-    private static final String REFERER_DATA_KEY = "referer_data";
-    private static final String EXTRA_ARGS_KEY = "extra_args";
-    private static final String EXTRA_ARGS_VALUE = "extra_value";
-    private static final String TARGET_URL_KEY = "target_url";
-    private static final String USER_AGENT_KEY = "user_agent";
-    private static final String USER_AGENT_VALUE = "foobarUserAgent";
-    private static final String EXTRAS_KEY = "extras";
-    private static final String DEEPLINK_CONTEXT_KEY = "deeplink_context";
-    private static final String PROMO_CODE_KEY = "promo_code";
-    private static final String PROMO_CODE = "PROMO1";
-
-    private static final String JSON_DATA_REGULAR =
-            "{"
-                    + "\"version\":2,"
-                    + "\"bridge_args\": {\"method\": \"applink\"},"
-                    + "\"method_args\": {"
-                    + "    \"ref\": \"" + FB_REF_VALUE + "\","
-                    + "    \"" + TARGET_URL_KEY + "\": \"" + TARGET_URI_STRING + "\""
-                    + "  }"
-                    + "}";
-
-    private static final String JSON_DATA_REGULAR_WITH_NESTED_ARRAY =
-            "{"
-                    + "\"version\":2,"
-                    + "\"bridge_args\": {\"method\": \"applink\"},"
-                    + "\"method_args\": {"
-                    + "    \"ref\": \"" + FB_REF_VALUE + "\","
-                    + "    \"" + TARGET_URL_KEY + "\": \"" + TARGET_URI_STRING + "\","
-                    + "    \"other\": [ [1, 2], [3, 4] ]"
-                    + "  }"
-                    + "}";
-
-    private static final String JSON_DATA_WITH_REFERER_DATA =
-            "{"
-                    + "\"version\":2,"
-                    + "\"bridge_args\": {\"method\": \"applink\"},"
-                    + "\"method_args\": {"
-                    + "    \"referer_data\" : {"
-                    + "      \"" + FB_REF_KEY + "\": \"" + FB_REF_VALUE + "\","
-                    + "      \"" + EXTRA_ARGS_KEY + "\": \"" + EXTRA_ARGS_VALUE + "\""
-                    + "    },"
-                    + "    \"" + TARGET_URL_KEY + "\": \"" + TARGET_URI_STRING + "\""
-                    + "  }"
-                    + "}";
-
-    private static final String JSON_DATA_WITH_DEEPLINK_CONTEXT =
-            "{"
-                    + "\"version\":2,"
-                    + "\"bridge_args\": {\"method\": \"applink\"},"
-                    + "\"method_args\": {"
-                    + "    \"ref\": \"" + FB_REF_VALUE + "\","
-                    + "    \"" + TARGET_URL_KEY + "\": \"" + TARGET_URI_STRING + "\","
-                    + "    \"" + EXTRAS_KEY + "\": {"
-                    + "        \"" + DEEPLINK_CONTEXT_KEY + "\": {"
-                    + "            \"" + PROMO_CODE_KEY + "\": \""+ PROMO_CODE + "\""
-                    + "        }"
-                    + "    }"
-                    + "  }"
-                    + "}";
-
-    private static class MockActivityWithAppLinkData extends Activity {
-        public Intent getIntent() {
-            Uri targetUri = Uri.parse(TARGET_URI_STRING);
-            Intent intent = new Intent(Intent.ACTION_VIEW, targetUri);
-            Bundle applinks = new Bundle();
-            Bundle refererData = new Bundle();
-            Bundle extras = new Bundle();
-            String deeplinkContext = "{\"" + PROMO_CODE_KEY + "\": \""+ PROMO_CODE + "\"}";
-            extras.putString(DEEPLINK_CONTEXT_KEY, deeplinkContext);
-            refererData.putString(FB_REF_KEY, FB_REF_VALUE);
-            refererData.putString(EXTRA_ARGS_KEY, EXTRA_ARGS_VALUE);
-            applinks.putBundle(REFERER_DATA_KEY, refererData);
-            applinks.putString(TARGET_URL_KEY, TARGET_URI_STRING);
-            applinks.putString(USER_AGENT_KEY, USER_AGENT_VALUE);
-            applinks.putBundle(EXTRAS_KEY, extras);
-            intent.putExtra("al_applink_data", applinks);
-            return intent;
-        }
-    }
-
-    private static class MockActivityWithJsonData extends Activity {
-        private String jsonString;
-
-        public MockActivityWithJsonData(String jsonString) {
-            this.jsonString = jsonString;
-        }
-        public Intent getIntent() {
-            Intent intent = new Intent(Intent.ACTION_VIEW);
-            intent.putExtra(AppLinkData.BUNDLE_APPLINK_ARGS_KEY, jsonString);
-            return intent;
-        }
-    }
-
-    @Test
-    public void testCreateFromAlApplinkData() {
-        AppLinkData appLinkData = AppLinkData.createFromActivity(new MockActivityWithAppLinkData());
-        assertNotNull("app link data not null", appLinkData);
-        assertEquals("ref param", FB_REF_VALUE, appLinkData.getRef());
-        assertEquals("target_url", TARGET_URI_STRING, appLinkData.getTargetUri().toString());
-        Bundle args = appLinkData.getArgumentBundle();
-        assertNotNull("app link args not null", args);
-        assertEquals("user agent", USER_AGENT_VALUE, args.getString(USER_AGENT_KEY));
-        Bundle refererData = appLinkData.getRefererData();
-        assertNotNull("referer data not null", refererData);
-        assertEquals("ref param in referer data", FB_REF_VALUE, refererData.getString(FB_REF_KEY));
-        assertEquals("extra param", EXTRA_ARGS_VALUE, refererData.getString(EXTRA_ARGS_KEY));
-        assertEquals("promo_code", PROMO_CODE, appLinkData.getPromotionCode());
-    }
-
-    @Test
-    public void testCreateFromJson() {
-        AppLinkData appLinkData =
-                AppLinkData.createFromActivity(new MockActivityWithJsonData(JSON_DATA_REGULAR));
-        assertNotNull("app link data not null", appLinkData);
-        assertEquals("ref param", FB_REF_VALUE, appLinkData.getRef());
-        assertEquals("target_url", TARGET_URI_STRING, appLinkData.getTargetUri().toString());
-        Bundle args = appLinkData.getArgumentBundle();
-        assertNotNull("app link args not null", args);
-        assertNull("user agent", args.getString(USER_AGENT_KEY));
-        Bundle refererData = appLinkData.getRefererData();
-        assertNull("referer data", refererData);
-    }
-
-    @Test
-    public void testCreateFromJsonWithNestedArray() {
-        AppLinkData appLinkData =
-                AppLinkData.createFromActivity(
-                        new MockActivityWithJsonData(JSON_DATA_REGULAR_WITH_NESTED_ARRAY));
-        assertNull(appLinkData);
-    }
-
-    @Test
-    public void testCreateFromJsonWithRefererData() {
-        AppLinkData appLinkData =
-                AppLinkData.createFromActivity(
-                        new MockActivityWithJsonData(JSON_DATA_WITH_REFERER_DATA));
-        assertNotNull("app link data not null", appLinkData);
-        assertEquals("ref param", FB_REF_VALUE, appLinkData.getRef());
-        assertEquals("target_url", TARGET_URI_STRING, appLinkData.getTargetUri().toString());
-        Bundle args = appLinkData.getArgumentBundle();
-        assertNotNull("app link args not null", args);
-        assertNull("user agent", args.getString(USER_AGENT_KEY));
-        Bundle refererData = appLinkData.getRefererData();
-        assertNotNull("referer data", refererData);
-        assertEquals("ref param in referer data", FB_REF_VALUE, refererData.getString(FB_REF_KEY));
-        assertEquals("extra param", EXTRA_ARGS_VALUE, refererData.getString(EXTRA_ARGS_KEY));
-    }
-
-    @Test
-    public void testCreateFromJsonWithDeeplinkContext() {
-        AppLinkData appLinkData =
-                AppLinkData.createFromActivity(
-                        new MockActivityWithJsonData(JSON_DATA_WITH_DEEPLINK_CONTEXT));
-        assertNotNull("app link data not null", appLinkData);
-        assertEquals("ref param", FB_REF_VALUE, appLinkData.getRef());
-        assertEquals("target_url", TARGET_URI_STRING, appLinkData.getTargetUri().toString());
-        assertEquals("promo_code", PROMO_CODE, appLinkData.getPromotionCode());
-        Bundle args = appLinkData.getArgumentBundle();
-        assertNotNull("app link args not null", args);
-        assertNull("user agent", args.getString(USER_AGENT_KEY));
-        Bundle refererData = appLinkData.getRefererData();
-        assertNull("referer data", refererData);
-    }
-
-}
diff --git a/facebook/src/test/java/com/facebook/internal/ShareInternalUtilityTest.java b/facebook/src/test/java/com/facebook/internal/ShareInternalUtilityTest.java
deleted file mode 100644
index 78249805b..000000000
--- a/facebook/src/test/java/com/facebook/internal/ShareInternalUtilityTest.java
+++ /dev/null
@@ -1,251 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-
-package com.facebook.internal;
-
-import com.facebook.FacebookTestCase;
-import com.facebook.share.internal.ShareInternalUtility;
-import com.facebook.share.model.ShareOpenGraphAction;
-import com.facebook.share.model.ShareOpenGraphContent;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Locale;
-import java.util.UUID;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
-public class ShareInternalUtilityTest extends FacebookTestCase {
-
-    @Test
-    public void testRemoveNamespaceFromNullOGJsonObject() {
-        assertNull(ShareInternalUtility.removeNamespacesFromOGJsonObject(null, false));
-    }
-
-    @Test
-    public void testRemoveNamespaceFromComplexOGJsonObject() {
-        try {
-            JSONObject testObject = getJsonOGActionTestObject();
-            testObject = ShareInternalUtility.removeNamespacesFromOGJsonObject(testObject, false);
-            JSONObject expectedResult = getJsonOGActionTestObjectWithoutNamespace();
-            if(!simpleJsonObjComparer(testObject, expectedResult)){
-                fail(String.format(
-                        Locale.ROOT,
-                        "Actual: %s\nExpected: %s",
-                        testObject.toString(),
-                        expectedResult.toString()));
-            }
-        } catch (JSONException ex) {
-            // Fail
-            assertNotNull(ex);
-        }
-    }
-
-    @Test
-    public void testJsonSerializationOfOpenGraph() {
-        String placeId = "1";
-        ShareOpenGraphContent content = new ShareOpenGraphContent.Builder()
-                .setAction(
-                        new ShareOpenGraphAction.Builder()
-                                .putStringArrayList("tags", new ArrayList<String>() {{
-                                    add("2");
-                                    add("4");
-                                }})
-                                .build()
-                ).setPeopleIds(new ArrayList<String>() {{
-                    add("1");
-                    add("1");
-                    add("2");
-                    add("3");
-                }}).setPlaceId(placeId)
-                .build();
-
-        try {
-            JSONObject object = ShareInternalUtility.toJSONObjectForCall(null, content);
-            List<String> peopleIds = Utility.jsonArrayToStringList(object.getJSONArray("tags"));
-            assertEquals(4, peopleIds.size());
-            for (int i = 1; i < 5; ++i) {
-                assertTrue(peopleIds.contains(new Integer(i).toString()));
-            }
-
-            assertEquals(placeId, object.getString("place"));
-        } catch (JSONException ex) {
-            // Fail
-            assertNotNull(ex);
-            return;
-        }
-    }
-
-    @Test
-    public void testJsonSerializationOfOpenGraphExistingPlace() {
-        ShareOpenGraphContent content = new ShareOpenGraphContent.Builder()
-                .setAction(
-                        new ShareOpenGraphAction.Builder()
-                                .putString("place", "1")
-                                .build()
-                ).setPlaceId("2")
-                .build();
-
-        try {
-            JSONObject object = ShareInternalUtility.toJSONObjectForCall(null, content);
-            assertEquals("1", object.getString("place"));
-        } catch (JSONException ex) {
-            // Fail
-            assertNotNull(ex);
-            return;
-        }
-    }
-
-    private static JSONObject getJsonOGActionTestObject() throws JSONException {
-        JSONObject testAction = new JSONObject();
-        testAction.put("og:field", 1);
-        testAction.put("namespaced:custom:field", 3);
-
-        JSONObject testOGContent = getJsonOGContentTestObject();
-        testAction.put("namespaced:content", testOGContent);
-        testAction.put("array", getJsonOGArrayTestObject());
-
-        return testAction;
-    }
-
-    private static JSONObject getJsonOGActionTestObjectWithoutNamespace() throws JSONException {
-        JSONObject testAction = new JSONObject();
-        testAction.put("field", 1);
-        testAction.put("custom:field", 3);
-
-        JSONObject testOGContent = getJsonOGContentTestObjectWithoutNamespace();
-        testAction.put("content", testOGContent);
-        testAction.put("array", getJsonOGArrayTestObjectWithoutNamespace());
-
-        return testAction;
-    }
-
-    private static JSONArray getJsonOGArrayTestObject() throws JSONException {
-        JSONArray testArray = new JSONArray();
-        testArray.put(10);
-        testArray.put(getJsonOGContentTestObject());
-        return testArray;
-    }
-
-    private static JSONArray getJsonOGArrayTestObjectWithoutNamespace() throws JSONException {
-        JSONArray testArray = new JSONArray();
-        testArray.put(10);
-        testArray.put(getJsonOGContentTestObjectWithoutNamespace());
-        return testArray;
-    }
-
-    private static JSONObject getJsonOGContentTestObject() throws JSONException {
-        JSONObject testOGContent = new JSONObject();
-        testOGContent.put("fbsdk:create", true);
-        testOGContent.put("namespaced:field", 4);
-        testOGContent.put("og:field", 5);
-        testOGContent.put("custom:namespaced:field", 6);
-
-        JSONObject innerContent = new JSONObject();
-        innerContent.put("namespaced:field", 7);
-        innerContent.put("og:field", 8);
-        testOGContent.put("namespaced:innerContent", innerContent);
-        return testOGContent;
-    }
-
-    private static JSONObject getJsonOGContentTestObjectWithoutNamespace() throws JSONException {
-        JSONObject testOGContent = new JSONObject();
-        testOGContent.put("fbsdk:create", true);
-        testOGContent.put("field", 5);
-
-        JSONObject innerContent = new JSONObject();
-        innerContent.put("field", 8);
-        JSONObject innerData = new JSONObject();
-        innerData.put("field", 7);
-        innerContent.put("data", innerData);
-
-        JSONObject data = new JSONObject();
-        data.put("field", 4);
-        data.put("namespaced:field", 6);
-        data.put("innerContent", innerContent);
-
-        testOGContent.put("data", data);
-        return testOGContent;
-    }
-
-    private boolean simpleJsonObjComparer(JSONObject obj1, JSONObject obj2) {
-        if (obj1.names().length() != obj2.names().length()) {
-            return false;
-        }
-
-        Iterator<String> keys = obj1.keys();
-        while (keys.hasNext()) {
-            try {
-                String key = keys.next();
-                Object value1 = obj1.get(key);
-                Object value2 = obj2.get(key);
-                if (!jsonObjectValueComparer(value1, value2)){
-                    return false;
-                }
-            } catch (Exception ex) {
-                return false;
-            }
-        }
-
-        return true;
-    }
-
-    private boolean simpleJsonArrayComparer(JSONArray array1, JSONArray array2)
-            throws JSONException{
-        if(array1.length() != array2.length()) {
-            return  false;
-        }
-
-        for(int i = 0; i < array1.length(); ++i) {
-            if (!jsonObjectValueComparer(array1.get(i), array2.get(i))){
-                return false;
-            }
-        }
-        return true;
-    }
-
-    private boolean jsonObjectValueComparer(Object value1, Object value2)
-    throws JSONException{
-        if (value1 instanceof JSONObject) {
-            if (!simpleJsonObjComparer((JSONObject) value1, (JSONObject) value2)) {
-                return false;
-            }
-        } else if (value1 instanceof JSONArray) {
-            if (!simpleJsonArrayComparer((JSONArray) value1, (JSONArray) value2)) {
-                return false;
-            }
-        } else if (value1 != value2) {
-            return false;
-        }
-
-        return true;
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/messenger/MessengerUtilsTest.java b/facebook/src/test/java/com/facebook/messenger/MessengerUtilsTest.java
deleted file mode 100644
index f102ec1a5..000000000
--- a/facebook/src/test/java/com/facebook/messenger/MessengerUtilsTest.java
+++ /dev/null
@@ -1,274 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.messenger;
-
-import android.app.Activity;
-import android.content.ContentResolver;
-import android.content.Intent;
-import android.content.pm.PackageInfo;
-import android.content.pm.PackageManager;
-import android.database.MatrixCursor;
-import android.net.Uri;
-import android.os.Bundle;
-
-import com.facebook.FacebookSdk;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
-import org.robolectric.annotation.Config;
-
-import java.util.Arrays;
-
-import static org.junit.Assert.*;
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.*;
-
-/**
- * Tests for {@link com.facebook.messenger.MessengerUtils}
- */
-@RunWith(RobolectricTestRunner.class)
-@Config(sdk = 18, manifest = Config.NONE)
-public class MessengerUtilsTest {
-
-  private Activity mMockActivity;
-  private PackageManager mMockPackageManager;
-  private ContentResolver mMockContentResolver;
-
-  @Before
-  public void setup() {
-    mMockActivity = mock(Activity.class);
-    mMockPackageManager = mock(PackageManager.class);
-    mMockContentResolver = mock(ContentResolver.class);
-    when(mMockActivity.getPackageManager()).thenReturn(mMockPackageManager);
-    when(mMockActivity.getContentResolver()).thenReturn(mMockContentResolver);
-    FacebookSdk.sdkInitialize(RuntimeEnvironment.application);
-    FacebookSdk.setApplicationId("200");
-  }
-
-  @Test
-  public void testMessengerIsInstalled() throws Exception {
-    setupPackageManagerForMessenger(true);
-    assertTrue(MessengerUtils.hasMessengerInstalled(mMockActivity));
-  }
-
-  @Test
-  public void testMessengerNotInstalled() throws Exception {
-    setupPackageManagerForMessenger(false);
-    assertFalse(MessengerUtils.hasMessengerInstalled(mMockActivity));
-  }
-
-  @Test
-  public void testShareToMessengerWith20150314Protocol() throws Exception {
-    setupPackageManagerForMessenger(true);
-    setupContentResolverForProtocolVersions(20150314);
-
-
-    Uri uri = Uri.parse("file:///foo.jpeg");
-    Uri externalUri = Uri.parse("http://example.com/foo.jpeg");
-    ShareToMessengerParams params = ShareToMessengerParams
-        .newBuilder(uri, "image/jpeg")
-        .setMetaData("{}")
-        .setExternalUri(externalUri)
-        .build();
-    MessengerUtils.shareToMessenger(mMockActivity, 1, params);
-
-    // Expect it to have launched messenger with the right intent.
-    ArgumentCaptor<Intent> intentArgumentCaptor = ArgumentCaptor.forClass(Intent.class);
-    verify(mMockActivity).startActivityForResult(
-        intentArgumentCaptor.capture(),
-        eq(1));
-    Intent intent = intentArgumentCaptor.getValue();
-    assertEquals(Intent.ACTION_SEND, intent.getAction());
-    assertEquals(Intent.FLAG_GRANT_READ_URI_PERMISSION, intent.getFlags());
-    assertEquals("com.facebook.orca", intent.getPackage());
-    assertEquals(uri, intent.getParcelableExtra(Intent.EXTRA_STREAM));
-    assertEquals("image/jpeg", intent.getType());
-    assertEquals("200", intent.getStringExtra("com.facebook.orca.extra.APPLICATION_ID"));
-    assertEquals(20150314, intent.getIntExtra("com.facebook.orca.extra.PROTOCOL_VERSION", -1));
-    assertEquals("{}", intent.getStringExtra("com.facebook.orca.extra.METADATA"));
-    assertEquals(externalUri, intent.getParcelableExtra("com.facebook.orca.extra.EXTERNAL_URI"));
-  }
-
-  @Test
-  public void testShareToMessengerWithNoProtocol() throws Exception {
-    setupPackageManagerForMessenger(true);
-    setupContentResolverForProtocolVersions(/* empty */);
-
-    Uri uri = Uri.parse("file:///foo.jpeg");
-    Uri externalUri = Uri.parse("http://example.com/foo.jpeg");
-    ShareToMessengerParams params = ShareToMessengerParams
-        .newBuilder(uri, "image/jpeg")
-        .setMetaData("{}")
-        .setExternalUri(externalUri)
-        .build();
-    MessengerUtils.shareToMessenger(mMockActivity, 1, params);
-
-
-    // Expect it to have gone to the play store.
-    ArgumentCaptor<Intent> intentArgumentCaptor = ArgumentCaptor.forClass(Intent.class);
-    verify(mMockActivity).startActivity(intentArgumentCaptor.capture());
-    Intent intent = intentArgumentCaptor.getValue();
-    assertEquals(Intent.ACTION_VIEW, intent.getAction());
-    assertEquals(Uri.parse("market://details?id=com.facebook.orca"), intent.getData());
-  }
-
-  @Test
-  public void testGetMessengerThreadParamsForIntentWith20150314Protocol() throws Exception {
-    // Simulate an intent that Messenger would send.
-    Intent intent = new Intent();
-    intent.addCategory("com.facebook.orca.category.PLATFORM_THREAD_20150314");
-    Bundle extrasBundle = setupIntentWithAppLinkExtrasBundle(intent);
-    extrasBundle.putString("com.facebook.orca.extra.THREAD_TOKEN", "thread_token");
-    extrasBundle.putString("com.facebook.orca.extra.METADATA", "{}");
-    extrasBundle.putString("com.facebook.orca.extra.PARTICIPANTS", "100,400,500");
-    extrasBundle.putBoolean("com.facebook.orca.extra.IS_REPLY", true);
-
-    // Check the parsing logic.
-    MessengerThreadParams params = MessengerUtils.getMessengerThreadParamsForIntent(intent);
-    assertEquals(MessengerThreadParams.Origin.REPLY_FLOW, params.origin);
-    assertEquals("thread_token", params.threadToken);
-    assertEquals("{}", params.metadata);
-    assertEquals(Arrays.asList("100", "400", "500"), params.participants);
-  }
-
-  @Test
-  public void testGetMessengerThreadParamsForIntentWithUnrecognizedIntent() throws Exception {
-    // Simulate an intent that Messenger would send.
-    Intent intent = new Intent();
-    assertNull(MessengerUtils.getMessengerThreadParamsForIntent(intent));
-  }
-
-  @Test
-  public void testFinishShareToMessengerWith20150314Protocol() throws Exception {
-    // Simulate an intent that Messenger would send.
-    Intent originalIntent = new Intent();
-    originalIntent.addCategory("com.facebook.orca.category.PLATFORM_THREAD_20150314");
-    Bundle extrasBundle = setupIntentWithAppLinkExtrasBundle(originalIntent);
-    extrasBundle.putString("com.facebook.orca.extra.THREAD_TOKEN", "thread_token");
-    extrasBundle.putString("com.facebook.orca.extra.METADATA", "{}");
-    extrasBundle.putString("com.facebook.orca.extra.PARTICIPANTS", "100,400,500");
-    when(mMockActivity.getIntent()).thenReturn(originalIntent);
-
-    // Setup the data the app will send back to messenger.
-    Uri uri = Uri.parse("file:///foo.jpeg");
-    Uri externalUri = Uri.parse("http://example.com/foo.jpeg");
-    ShareToMessengerParams params = ShareToMessengerParams
-        .newBuilder(uri, "image/jpeg")
-        .setMetaData("{}")
-        .setExternalUri(externalUri)
-        .build();
-
-    // Call finishShareToMessenger and verify the results.
-    MessengerUtils.finishShareToMessenger(mMockActivity, params);
-    ArgumentCaptor<Intent> intentArgumentCaptor = ArgumentCaptor.forClass(Intent.class);
-    verify(mMockActivity).setResult(eq(Activity.RESULT_OK), intentArgumentCaptor.capture());
-    verify(mMockActivity).finish();
-
-    Intent intent = intentArgumentCaptor.getValue();
-    assertNotNull(intent);
-    assertEquals(Intent.FLAG_GRANT_READ_URI_PERMISSION, intent.getFlags());
-    assertEquals(20150314, intent.getIntExtra("com.facebook.orca.extra.PROTOCOL_VERSION", -1));
-    assertEquals("thread_token", intent.getStringExtra("com.facebook.orca.extra.THREAD_TOKEN"));
-    assertEquals(uri, intent.getData());
-    assertEquals("image/jpeg", intent.getType());
-    assertEquals("200", intent.getStringExtra("com.facebook.orca.extra.APPLICATION_ID"));
-    assertEquals("{}", intent.getStringExtra("com.facebook.orca.extra.METADATA"));
-    assertEquals(externalUri, intent.getParcelableExtra("com.facebook.orca.extra.EXTERNAL_URI"));
-  }
-
-  @Test
-  public void testFinishShareToMessengerWithUnexpectedIntent() throws Exception {
-    // Simulate an intent that Messenger would send.
-    Intent originalIntent = new Intent();
-    when(mMockActivity.getIntent()).thenReturn(originalIntent);
-
-    // Setup the data the app will send back to messenger.
-    Uri uri = Uri.parse("file:///foo.jpeg");
-    Uri externalUri = Uri.parse("http://example.com/foo.jpeg");
-    ShareToMessengerParams params = ShareToMessengerParams
-        .newBuilder(uri, "image/jpeg")
-        .setMetaData("{}")
-        .setExternalUri(externalUri)
-        .build();
-
-    // Call finishShareToMessenger and verify the results.
-    MessengerUtils.finishShareToMessenger(mMockActivity, params);
-    verify(mMockActivity).setResult(Activity.RESULT_CANCELED, null);
-    verify(mMockActivity).finish();
-  }
-
-  /**
-   * Sets up the PackageManager to return what we expect depending on whether messenger is
-   * installed.
-   *
-   * @param isInstalled true to simulate that messenger is installed
-   */
-  private void setupPackageManagerForMessenger(boolean isInstalled) throws Exception {
-    if (isInstalled) {
-      when(mMockPackageManager.getPackageInfo("com.facebook.orca", 0))
-          .thenReturn(new PackageInfo());
-    } else {
-      when(mMockPackageManager.getPackageInfo("com.facebook.orca", 0))
-          .thenThrow(new PackageManager.NameNotFoundException());
-    }
-  }
-
-  /**
-   * Sets up the Messenger content resolver to reply that it supports the specified versions.
-   *
-   * @param versions the versions that it should support
-   */
-  private void setupContentResolverForProtocolVersions(int... versions) {
-    MatrixCursor matrixCursor = new MatrixCursor(new String[]{"version"});
-    for (int version : versions) {
-      matrixCursor.addRow(new Object[]{version});
-    }
-
-    when(mMockContentResolver.query(
-        Uri.parse("content://com.facebook.orca.provider.MessengerPlatformProvider/versions"),
-        new String[]{"version"},
-        null,
-        null,
-        null))
-        .thenReturn(matrixCursor);
-  }
-
-  /**
-   * Adds the structure to the Intent to look like an app link and returns the Extras section
-   * which is where the messenger parameters go.
-   *
-   * @param intent the intent to add to
-   * @return the extras Bundle
-   */
-  private Bundle setupIntentWithAppLinkExtrasBundle(Intent intent) {
-    Bundle appLinksDataBundle = new Bundle();
-    intent.putExtra("al_applink_data", appLinksDataBundle);
-    Bundle extrasBundle = new Bundle();
-    appLinksDataBundle.putBundle("extras", extrasBundle);
-    return extrasBundle;
-  }
-
-}
diff --git a/facebook/src/test/java/com/facebook/share/internal/ShareContentValidationTest.java b/facebook/src/test/java/com/facebook/share/internal/ShareContentValidationTest.java
deleted file mode 100644
index 775fd8051..000000000
--- a/facebook/src/test/java/com/facebook/share/internal/ShareContentValidationTest.java
+++ /dev/null
@@ -1,268 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-package com.facebook.share.internal;
-
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.net.Uri;
-
-import com.facebook.FacebookException;
-import com.facebook.FacebookPowerMockTestCase;
-import com.facebook.FacebookSdk;
-import com.facebook.internal.Validate;
-import com.facebook.share.model.ShareLinkContent;
-import com.facebook.share.model.ShareOpenGraphAction;
-import com.facebook.share.model.ShareOpenGraphContent;
-import com.facebook.share.model.SharePhoto;
-import com.facebook.share.model.SharePhotoContent;
-import com.facebook.share.model.ShareVideo;
-import com.facebook.share.model.ShareVideoContent;
-
-import org.junit.Test;
-import org.mockito.Mockito;
-import org.powermock.api.mockito.PowerMockito;
-import org.powermock.core.classloader.annotations.PrepareForTest;
-import org.robolectric.RuntimeEnvironment;
-
-import static org.powermock.api.mockito.PowerMockito.doNothing;
-
-
-/**
- * Tests for {@link ShareContentValidation}
- */
-@PrepareForTest(Validate.class)
-public class ShareContentValidationTest extends FacebookPowerMockTestCase {
-
-    // Share by Message
-    @Test(expected = FacebookException.class)
-    public void testItValidatesNullForMessage() {
-        ShareContentValidation.validateForMessage(null);
-    }
-
-    // -LinkContent
-    @Test(expected = FacebookException.class)
-    public void testItValidatesNoHttpForShareLinkContentMessage() {
-        Uri imageUri = Uri.parse("ftp://facebook.com/awesome-content.gif");
-        ShareLinkContent linkContent = buildShareLinkContent(imageUri);
-
-        ShareContentValidation.validateForMessage(linkContent);
-    }
-
-    // -PhotoContent
-    @Test(expected = FacebookException.class)
-    public void testItValidatesNullImageForPhotoShareByMessage() {
-        SharePhotoContent.Builder spcBuilder = new SharePhotoContent.Builder();
-        SharePhoto sharePhoto = new SharePhoto.Builder().setImageUrl(null).setBitmap(null)
-                .build();
-        SharePhotoContent sharePhotoContent = spcBuilder.addPhoto(sharePhoto).build();
-
-        ShareContentValidation.validateForMessage(sharePhotoContent);
-    }
-
-    @Test(expected = FacebookException.class)
-    public void testItValidatesEmptyListOfPhotoForPhotoShareByMessage() {
-        SharePhotoContent sharePhoto = new SharePhotoContent.Builder().build();
-
-        ShareContentValidation.validateForMessage(sharePhoto);
-    }
-
-    @Test(expected = FacebookException.class)
-    public void testItValidatesMaxSizeOfPhotoShareByMessage() {
-        SharePhotoContent sharePhotoContent =
-                new SharePhotoContent.Builder()
-                        .addPhoto(buildSharePhoto("https://facebook.com/awesome-1.gif"))
-                        .addPhoto(buildSharePhoto("https://facebook.com/awesome-2.gif"))
-                        .addPhoto(buildSharePhoto("https://facebook.com/awesome-3.gif"))
-                        .addPhoto(buildSharePhoto("https://facebook.com/awesome-4.gif"))
-                        .addPhoto(buildSharePhoto("https://facebook.com/awesome-5.gif"))
-                        .addPhoto(buildSharePhoto("https://facebook.com/awesome-6.gif"))
-                        .addPhoto(buildSharePhoto("https://facebook.com/awesome-7.gif"))
-                        .build();
-
-        ShareContentValidation.validateForMessage(sharePhotoContent);
-    }
-
-    // -ShareVideoContent
-    @Test(expected = FacebookException.class)
-    public void testItValidatesEmptyPreviewPhotoForShareVideoContentByMessage() {
-        ShareVideoContent sharePhoto = new ShareVideoContent.Builder()
-                .setPreviewPhoto(null).build();
-
-        ShareContentValidation.validateForMessage(sharePhoto);
-    }
-
-    // -ShareOpenGraphContent
-    @Test(expected = FacebookException.class)
-    public void testItValidatesShareOpenGraphWithNoActionByMessage() {
-        ShareOpenGraphContent shareOpenGraphContent =
-                new ShareOpenGraphContent.Builder().setAction(null).build();
-
-        ShareContentValidation.validateForMessage(shareOpenGraphContent);
-    }
-
-    @Test(expected = FacebookException.class)
-    public void testItValidateShareOpenGraphWithNoTypeByMessage() {
-        ShareOpenGraphAction shareOpenGraphAction
-                = new ShareOpenGraphAction.Builder().setActionType(null).build();
-
-        ShareOpenGraphContent shareOpenGraphContent =
-                new ShareOpenGraphContent.Builder()
-                        .setAction(shareOpenGraphAction).build();
-
-        ShareContentValidation.validateForMessage(shareOpenGraphContent);
-    }
-
-    @Test(expected = FacebookException.class)
-    public void testItValidatesShareOpenGraphWithPreviewPropertyNameByMessage() {
-        ShareOpenGraphAction shareOpenGraphAction
-                = new ShareOpenGraphAction.Builder().setActionType("foo").build();
-
-        ShareOpenGraphContent shareOpenGraphContent =
-                new ShareOpenGraphContent.Builder()
-                        .setAction(shareOpenGraphAction).build();
-
-        ShareContentValidation.validateForMessage(shareOpenGraphContent);
-    }
-
-    // Share by Native (Is the same as Message)
-    @Test(expected = FacebookException.class)
-    public void testItValidatesNullContentForNativeShare() {
-        ShareContentValidation.validateForNativeShare(null);
-    }
-
-    @Test(expected = FacebookException.class)
-    public void testItValidatesNotHttpForShareLinkContentByNative() {
-        Uri imageUri = Uri.parse("ftp://facebook.com/awesome-content.gif");
-        ShareLinkContent linkContent = buildShareLinkContent(imageUri);
-
-        ShareContentValidation.validateForNativeShare(linkContent);
-    }
-
-    // Share by Web
-    @Test(expected = FacebookException.class)
-    public void testItValidatesNullContentForWebShare() {
-        ShareContentValidation.validateForWebShare(null);
-    }
-
-    @Test(expected = FacebookException.class)
-    public void testItDoesNotAcceptSharePhotoContentByWeb() {
-        SharePhoto sharePhoto = buildSharePhoto("https://facebook.com/awesome.gif");
-        SharePhotoContent sharePhotoContent =
-                new SharePhotoContent.Builder().addPhoto(sharePhoto).build();
-
-        ShareContentValidation.validateForWebShare(sharePhotoContent);
-    }
-
-    @Test(expected = FacebookException.class)
-    public void testItDoesNotAcceptShareVideoContentByWeb() {
-        SharePhoto previewPhoto = buildSharePhoto("https://facebook.com/awesome.gif");
-        ShareVideoContent shareVideoContent =
-                new ShareVideoContent.Builder().setPreviewPhoto(previewPhoto).build();
-
-        ShareContentValidation.validateForWebShare(shareVideoContent);
-    }
-
-    // Share by Api
-    @Test(expected = FacebookException.class)
-    public void testItValidatesNullContentForApiShare() {
-        ShareContentValidation.validateForApiShare(null);
-    }
-
-    @Test(expected = FacebookException.class)
-    public void testItValidatesNullImageForSharePhotoContentByApi() {
-        SharePhotoContent.Builder spcBuilder = new SharePhotoContent.Builder();
-        SharePhoto sharePhoto = new SharePhoto.Builder().setImageUrl(null)
-                .build();
-        SharePhotoContent sharePhotoContent = spcBuilder.addPhoto(sharePhoto).build();
-
-        ShareContentValidation.validateForApiShare(sharePhotoContent);
-    }
-
-    // Valid Share Contents
-    @Test
-    public void testItAcceptNullImageForShareLinkContent() {
-        ShareLinkContent nullImageContent = buildShareLinkContent(null);
-
-        ShareContentValidation.validateForApiShare(nullImageContent);
-        ShareContentValidation.validateForMessage(nullImageContent);
-        ShareContentValidation.validateForNativeShare(nullImageContent);
-        ShareContentValidation.validateForWebShare(nullImageContent);
-    }
-
-    @Test
-    public void testItAcceptsHttpForShareLinkContent() {
-        Uri imageUri = Uri.parse("http://facebook.com/awesome-content.gif");
-        ShareLinkContent linkContent = buildShareLinkContent(imageUri);
-
-        ShareContentValidation.validateForApiShare(linkContent);
-        ShareContentValidation.validateForMessage(linkContent);
-        ShareContentValidation.validateForNativeShare(linkContent);
-        ShareContentValidation.validateForWebShare(linkContent);
-    }
-
-    @Test
-    public void testItAcceptsHttpsForShareLinkContent() {
-        Uri imageUri = Uri.parse("https://facebook.com/awesome-content.gif");
-        ShareLinkContent linkContent = buildShareLinkContent(imageUri);
-
-        ShareContentValidation.validateForApiShare(linkContent);
-        ShareContentValidation.validateForMessage(linkContent);
-        ShareContentValidation.validateForNativeShare(linkContent);
-        ShareContentValidation.validateForWebShare(linkContent);
-    }
-
-    @Test
-    public void testItAcceptsShareOpenGraphContent() {
-        String actionKey = "foo";
-        String actionValue = "fooValue";
-        ShareOpenGraphAction shareOpenGraphAction =
-                new ShareOpenGraphAction.Builder()
-                        .putString(actionKey, actionValue)
-                        .setActionType(actionKey)
-                        .build();
-
-        ShareOpenGraphContent shareOpenGraphContent =
-                new ShareOpenGraphContent.Builder()
-                        .setPreviewPropertyName(actionKey)
-                        .setAction(shareOpenGraphAction).build();
-
-        ShareContentValidation.validateForMessage(shareOpenGraphContent);
-        ShareContentValidation.validateForNativeShare(shareOpenGraphContent);
-        ShareContentValidation.validateForApiShare(shareOpenGraphContent);
-        ShareContentValidation.validateForWebShare(shareOpenGraphContent);
-    }
-
-    private ShareLinkContent buildShareLinkContent(Uri imageLink) {
-        ShareLinkContent.Builder builder = new ShareLinkContent.Builder();
-        return builder.setImageUrl(imageLink)
-                .setContentDescription("Some description")
-                .setContentTitle("some title").build();
-    }
-
-    private SharePhoto buildSharePhoto(String url) {
-        return new SharePhoto.Builder()
-                .setImageUrl(Uri.parse(url))
-                .build();
-    }
-
-    private Bitmap createStubBitmap() {
-        return Bitmap.createBitmap(10,10, Bitmap.Config.ARGB_8888);
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/share/internal/ShareOpenGraphUtilityTest.java b/facebook/src/test/java/com/facebook/share/internal/ShareOpenGraphUtilityTest.java
deleted file mode 100644
index 7c2a7a05c..000000000
--- a/facebook/src/test/java/com/facebook/share/internal/ShareOpenGraphUtilityTest.java
+++ /dev/null
@@ -1,89 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.internal;
-
-import com.facebook.FacebookTestCase;
-import com.facebook.TestUtils;
-import com.facebook.share.model.ShareOpenGraphAction;
-import com.facebook.share.model.ShareOpenGraphObject;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-import org.junit.Test;
-import org.robolectric.shadows.ShadowApplication;
-
-import java.io.IOException;
-import java.util.ArrayList;
-
-public class ShareOpenGraphUtilityTest extends FacebookTestCase {
-    private static final String TYPE_KEY = "type";
-
-    @Test
-    public void testToJSONObject() throws IOException, JSONException {
-        final JSONObject actual = OpenGraphJSONUtility.toJSONObject(this.getAction(), null);
-        final JSONObject expected = this.getActionJSONObject();
-        TestUtils.assertEquals(expected, actual);
-    }
-
-    private static <E> ArrayList<E> createArrayList(E... params) {
-        final ArrayList<E> list = new ArrayList<E>();
-        for (E item : params) {
-            list.add(item);
-        }
-        return list;
-    }
-
-    private ShareOpenGraphAction getAction() {
-        return new ShareOpenGraphAction.Builder()
-                .putString(TYPE_KEY, "myActionType")
-                .putObject(
-                        "myObject",
-                        new ShareOpenGraphObject.Builder()
-                                .putString("myString", "value")
-                                .putInt("myInt", 42)
-                                .putBoolean("myBoolean", true)
-                                .putStringArrayList(
-                                        "myStringArray",
-                                        createArrayList(
-                                                "string1",
-                                                "string2",
-                                                "string3")
-                                )
-                                .putObject(
-                                        "myObject",
-                                        new ShareOpenGraphObject.Builder()
-                                                .putDouble("myPi", 3.14)
-                                                .build()
-                                )
-                                .build()).build();
-    }
-
-    private JSONObject getActionJSONObject() throws IOException, JSONException {
-        return new JSONObject(this.getActionJSONString());
-    }
-
-    private String getActionJSONString() throws IOException {
-        return TestUtils.getAssetFileStringContents(
-                ShadowApplication.getInstance().getApplicationContext(),
-                "ShareOpenGraphUtilityTests_actionJSON.json"
-        );
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/share/model/ShareLinkContentBuilderTest.java b/facebook/src/test/java/com/facebook/share/model/ShareLinkContentBuilderTest.java
deleted file mode 100644
index 23bfd895f..000000000
--- a/facebook/src/test/java/com/facebook/share/model/ShareLinkContentBuilderTest.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import com.facebook.FacebookTestCase;
-import com.facebook.TestUtils;
-
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-
-public class ShareLinkContentBuilderTest extends FacebookTestCase {
-    @Test
-    public void testVideoBuilder() {
-        final ShareLinkContent content = ShareModelTestUtility.getLinkContentBuilder().build();
-        assertEquals(
-                ShareModelTestUtility.STATUS_CONTENT_DESCRIPTION,
-                content.getContentDescription());
-        assertEquals(
-                ShareModelTestUtility.STATUS_CONTENT_IMAGE_URL,
-                content.getImageUrl());
-        assertEquals(
-                ShareModelTestUtility.STATUS_CONTENT_TITLE,
-                content.getContentTitle());
-        ShareModelTestUtility.assertEquals(content, TestUtils.parcelAndUnparcel(content));
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/share/model/ShareModelTestUtility.java b/facebook/src/test/java/com/facebook/share/model/ShareModelTestUtility.java
deleted file mode 100644
index 4fd059002..000000000
--- a/facebook/src/test/java/com/facebook/share/model/ShareModelTestUtility.java
+++ /dev/null
@@ -1,299 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import android.graphics.Bitmap;
-import android.net.Uri;
-import android.os.Environment;
-
-import junit.framework.Assert;
-
-import java.util.*;
-
-public class ShareModelTestUtility {
-    public static final String OPEN_GRAPH_ACTION_TYPE = "myActionType";
-    public static final boolean OPEN_GRAPH_BOOLEAN_VALUE = true;
-    public static final String OPEN_GRAPH_BOOLEAN_VALUE_KEY = "OPEN_GRAPH_BOOLEAN_VALUE";
-    public static final boolean[] OPEN_GRAPH_BOOLEAN_ARRAY = { true, false };
-    public static final String OPEN_GRAPH_BOOLEAN_ARRAY_KEY = "OPEN_GRAPH_BOOLEAN_ARRAY";
-    public static final ShareOpenGraphAction OPEN_GRAPH_CONTENT_ACTION =
-            getOpenGraphActionBuilder().build();
-    public static final String OPEN_GRAPH_CONTENT_PREVIEW_PROPERTY_NAME = "myActionProperty";
-    public static final String OPEN_GRAPH_CONTENT_PREVIEW_PROPERTY_VALUE = "myActionPropertyValue";
-    public static final double OPEN_GRAPH_DOUBLE_VALUE = Double.MAX_VALUE;
-    public static final String OPEN_GRAPH_DOUBLE_VALUE_KEY = "OPEN_GRAPH_DOUBLE_VALUE";
-    public static final double[] OPEN_GRAPH_DOUBLE_ARRAY =
-            { Double.MIN_VALUE, -7, 0, 42, Double.MAX_VALUE };
-    public static final String OPEN_GRAPH_DOUBLE_ARRAY_KEY = "OPEN_GRAPH_DOUBLE_ARRAY";
-    public static final int OPEN_GRAPH_INT_VALUE = 42;
-    public static final String OPEN_GRAPH_INT_VALUE_KEY = "OPEN_GRAPH_INT_VALUE";
-    public static final int[] OPEN_GRAPH_INT_ARRAY =
-            { Integer.MIN_VALUE, -7, 0, 42, Integer.MAX_VALUE };
-    public static final String OPEN_GRAPH_INT_ARRAY_KEY = "OPEN_GRAPH_INT_ARRAY";
-    public static final long OPEN_GRAPH_LONG_VALUE = Long.MAX_VALUE;
-    public static final String OPEN_GRAPH_LONG_VALUE_KEY = "OPEN_GRAPH_LONG_VALUE";
-    public static final long[] OPEN_GRAPH_LONG_ARRAY =
-            { Long.MIN_VALUE, -7, 0, 42, Long.MAX_VALUE };
-    public static final String OPEN_GRAPH_LONG_ARRAY_KEY = "OPEN_GRAPH_LONG_ARRAY";
-    public static final String OPEN_GRAPH_STRING = "this is a string";
-    public static final String OPEN_GRAPH_STRING_KEY = "OPEN_GRAPH_STRING";
-    public static final ArrayList<String> OPEN_GRAPH_STRING_ARRAY_LIST = new ArrayList<String>() {{
-        add("string1");
-        add("string2");
-        add("string3");
-    }};
-    public static final String OPEN_GRAPH_STRING_ARRAY_LIST_KEY = "OPEN_GRAPH_STRING_ARRAY_LIST";
-    public static final String OPEN_GRAPH_UNUSED_KEY = "unused";
-    public static final Bitmap PHOTO_BITMAP = Bitmap.createBitmap(10, 10, Bitmap.Config.ALPHA_8);
-    public static final ArrayList<SharePhoto> PHOTO_CONTENT_PHOTOS = new ArrayList<SharePhoto>() {{
-        add(getPhotoBuilder(PhotoBuilderType.LOCAL_URL).build());
-    }};
-    public static final boolean PHOTO_USER_GENERATED = true;
-    public static final String STATUS_CONTENT_DESCRIPTION = "this is a description";
-    public static final Uri STATUS_CONTENT_IMAGE_URL = Uri.parse(
-            "http://www.facebook.com/image/url");
-    public static final String STATUS_CONTENT_TITLE = "this is a title";
-    public static final SharePhoto VIDEO_CONTENT_PREVIEW_PHOTO = getPhotoBuilder(
-            PhotoBuilderType.LOCAL_URL).build();
-    public static final ShareVideo VIDEO_CONTENT_VIDEO = getVideoBuilder().build();
-
-    public enum PhotoBuilderType {
-        BITMAP,
-        LOCAL_URL,
-    }
-
-    public static Uri getTestPhotoImageUrl() {
-        return Uri.parse("file://" +
-                        Environment.getExternalStorageDirectory().getPath() +
-                        "crazy-cat-photo.jpg");
-    }
-
-    public static Uri getTestVideoLocalUrl() {
-        return Uri.parse("file://" +
-                Environment.getExternalStorageDirectory().getPath() +
-                "crazy-cat-video.mp4");
-    }
-
-    public static ShareOpenGraphAction.Builder getOpenGraphActionBuilder() {
-        return prepareOpenGraphValueContainerBuilder(
-                new ShareOpenGraphAction.Builder())
-                .setActionType(OPEN_GRAPH_ACTION_TYPE)
-                .putString(
-                        OPEN_GRAPH_CONTENT_PREVIEW_PROPERTY_NAME,
-                        OPEN_GRAPH_CONTENT_PREVIEW_PROPERTY_VALUE);
-    }
-
-    public static ShareOpenGraphContent.Builder getOpenGraphContentBuilder() {
-        return new ShareOpenGraphContent.Builder()
-                .setAction(OPEN_GRAPH_CONTENT_ACTION)
-                .setPreviewPropertyName(OPEN_GRAPH_CONTENT_PREVIEW_PROPERTY_NAME)
-                ;
-    }
-
-    public static ShareOpenGraphObject.Builder getOpenGraphObjectBuilder() {
-        return prepareOpenGraphValueContainerBuilder(new ShareOpenGraphObject.Builder());
-    }
-
-    public static SharePhoto.Builder getPhotoBuilder(final PhotoBuilderType type) {
-        final SharePhoto.Builder builder = new SharePhoto.Builder().setUserGenerated(
-                PHOTO_USER_GENERATED);
-        switch (type) {
-            case BITMAP:
-                builder.setBitmap(PHOTO_BITMAP);
-                break;
-            case LOCAL_URL:
-                builder.setImageUrl(getTestPhotoImageUrl());
-                break;
-        }
-        return builder;
-    }
-
-    public static SharePhotoContent.Builder getPhotoContentBuilder() {
-        return new SharePhotoContent.Builder().addPhotos(PHOTO_CONTENT_PHOTOS);
-    }
-
-    public static ShareLinkContent.Builder getLinkContentBuilder() {
-        return new ShareLinkContent.Builder()
-                .setContentDescription(STATUS_CONTENT_DESCRIPTION)
-                .setImageUrl(STATUS_CONTENT_IMAGE_URL)
-                .setContentTitle(STATUS_CONTENT_TITLE)
-                ;
-    }
-
-    public static ShareVideo.Builder getVideoBuilder() {
-        return new ShareVideo.Builder().setLocalUrl(getTestVideoLocalUrl());
-    }
-
-    public static ShareVideoContent.Builder getVideoContentBuilder() {
-        return new ShareVideoContent.Builder()
-                .setPreviewPhoto(VIDEO_CONTENT_PREVIEW_PHOTO)
-                .setVideo(VIDEO_CONTENT_VIDEO)
-                ;
-    }
-
-    private static <E extends ShareOpenGraphValueContainer.Builder> E
-    prepareOpenGraphValueContainerBuilder(
-            final E builder
-    ) {
-        return (E)builder
-                .putBoolean(OPEN_GRAPH_BOOLEAN_VALUE_KEY, OPEN_GRAPH_BOOLEAN_VALUE)
-                .putBooleanArray(OPEN_GRAPH_BOOLEAN_ARRAY_KEY, OPEN_GRAPH_BOOLEAN_ARRAY)
-                .putDouble(OPEN_GRAPH_DOUBLE_VALUE_KEY, OPEN_GRAPH_DOUBLE_VALUE)
-                .putDoubleArray(OPEN_GRAPH_DOUBLE_ARRAY_KEY, OPEN_GRAPH_DOUBLE_ARRAY)
-                .putInt(OPEN_GRAPH_INT_VALUE_KEY, OPEN_GRAPH_INT_VALUE)
-                .putIntArray(OPEN_GRAPH_INT_ARRAY_KEY, OPEN_GRAPH_INT_ARRAY)
-                .putLong(OPEN_GRAPH_LONG_VALUE_KEY, OPEN_GRAPH_LONG_VALUE)
-                .putLongArray(OPEN_GRAPH_LONG_ARRAY_KEY, OPEN_GRAPH_LONG_ARRAY)
-                .putString(OPEN_GRAPH_STRING_KEY, OPEN_GRAPH_STRING)
-                .putStringArrayList(OPEN_GRAPH_STRING_ARRAY_LIST_KEY, OPEN_GRAPH_STRING_ARRAY_LIST)
-                ;
-    }
-
-    public static <E> void assertEquals(final E a, final E b) {
-        if (a == null) {
-            // if a is null, b should be null
-            Assert.assertNull(b);
-        } else if ((a instanceof boolean[]) && (b instanceof boolean[])) {
-            // check for arrays of all of the primitive types, then arrays of Object, and route
-            // those through Arrays equals
-            Assert.assertTrue(Arrays.equals((boolean[]) a, (boolean[]) b));
-        } else if ((a instanceof byte[]) && (b instanceof byte[])) {
-            Assert.assertTrue(Arrays.equals((byte[])a, (byte[])b));
-        } else if ((a instanceof char[]) && (b instanceof char[])) {
-            Assert.assertTrue(Arrays.equals((char[])a, (char[])b));
-        } else if ((a instanceof double[]) && (b instanceof double[])) {
-            Assert.assertTrue(Arrays.equals((double[])a, (double[])b));
-        } else if ((a instanceof float[]) && (b instanceof float[])) {
-            Assert.assertTrue(Arrays.equals((float[])a, (float[])b));
-        } else if ((a instanceof int[]) && (b instanceof int[])) {
-            Assert.assertTrue(Arrays.equals((int[])a, (int[])b));
-        } else if ((a instanceof long[]) && (b instanceof long[])) {
-            Assert.assertTrue(Arrays.equals((long[])a, (long[])b));
-        } else if ((a instanceof short[]) && (b instanceof short[])) {
-            Assert.assertTrue(Arrays.equals((short[])a, (short[])b));
-        } else if ((a instanceof Object[]) && (b instanceof Object[])) {
-            Assert.assertTrue(Arrays.deepEquals((Object[])a, (Object[])b));
-        } else if ((a instanceof List) && (b instanceof List)) {
-            // check for Lists
-            assertEquals((List)a, (List)b);
-        } else if ((a instanceof ShareModel) && (b instanceof ShareModel)) {
-            // check for ShareModels
-            assertEquals((ShareModel)a, (ShareModel)b);
-        } else {
-            // now use Object.equals
-            Assert.assertTrue(a.equals(b));
-        }
-    }
-
-    public static void assertEquals(final List a, final List b) {
-        final int size = a.size();
-        Assert.assertEquals(size, b.size());
-        for (int i = 0; i < size; ++i) {
-            assertEquals(a.get(i), b.get(i));
-        }
-    }
-
-    public static <E extends ShareModel> void assertEquals(final E a, final E b) {
-        if ((a instanceof ShareOpenGraphAction) && (b instanceof ShareOpenGraphAction)) {
-            assertEquals((ShareOpenGraphAction)a, (ShareOpenGraphAction)b);
-        } else if ((a instanceof ShareOpenGraphObject) && (b instanceof ShareOpenGraphObject)) {
-            assertEquals((ShareOpenGraphObject) a, (ShareOpenGraphObject) b);
-        } else if ((a instanceof ShareOpenGraphContent) && (b instanceof ShareOpenGraphContent)) {
-            assertEquals((ShareOpenGraphContent)a, (ShareOpenGraphContent)b);
-        } else if ((a instanceof SharePhoto) && (b instanceof SharePhoto)) {
-            assertEquals((SharePhoto)a, (SharePhoto)b);
-        } else if ((a instanceof SharePhotoContent) && (b instanceof SharePhotoContent)) {
-            assertEquals((SharePhotoContent)a, (SharePhotoContent)b);
-        } else if ((a instanceof ShareLinkContent) && (b instanceof ShareLinkContent)) {
-            assertEquals((ShareLinkContent)a, (ShareLinkContent)b);
-        } else if ((a instanceof ShareVideo) && (b instanceof ShareVideo)) {
-            assertEquals((ShareVideo)a, (ShareVideo)b);
-        } else if ((a instanceof ShareVideoContent) && (b instanceof ShareVideoContent)) {
-            assertEquals((ShareVideoContent)a, (ShareVideoContent)b);
-        } else {
-            Assert.fail(a.getClass().toString() + " models do not have an equality test");
-        }
-    }
-
-    public static void assertEquals(final ShareOpenGraphAction a, final ShareOpenGraphAction b) {
-        Assert.assertEquals(a.getActionType(), b.getActionType());
-        assertOpenGraphValueContainerEquals(a, b);
-    }
-
-    public static void assertEquals(final ShareOpenGraphContent a, final ShareOpenGraphContent b) {
-        assertEquals(a.getAction(), b.getAction());
-        Assert.assertEquals(a.getPreviewPropertyName(), b.getPreviewPropertyName());
-        assertContentEquals(a, b);
-    }
-
-    public static void assertEquals(final ShareOpenGraphObject a, final ShareOpenGraphObject b) {
-        assertOpenGraphValueContainerEquals(a, b);
-    }
-
-    public static void assertEquals(final SharePhoto a, final SharePhoto b) {
-        Assert.assertEquals(a.getBitmap(), b.getBitmap());
-        Assert.assertEquals(a.getImageUrl(), b.getImageUrl());
-        Assert.assertEquals(a.getUserGenerated(), b.getUserGenerated());
-    }
-
-    public static void assertEquals(final SharePhotoContent a, final SharePhotoContent b) {
-        assertEquals(a.getPhotos(), b.getPhotos());
-        assertContentEquals(a, b);
-    }
-
-    public static void assertEquals(final ShareLinkContent a, final ShareLinkContent b) {
-        Assert.assertEquals(a.getContentDescription(), b.getContentDescription());
-        Assert.assertEquals(a.getImageUrl(), b.getImageUrl());
-        Assert.assertEquals(a.getContentTitle(), b.getContentTitle());
-        assertContentEquals(a, b);
-    }
-
-    public static void assertEquals(final ShareVideo a, final ShareVideo b) {
-        Assert.assertEquals(a.getLocalUrl(), b.getLocalUrl());
-    }
-
-    public static void assertEquals(final ShareVideoContent a, final ShareVideoContent b) {
-        assertEquals(a.getPreviewPhoto(), b.getPreviewPhoto());
-        assertEquals(a.getVideo(), b.getVideo());
-        assertContentEquals(a, b);
-    }
-
-    private static void assertContentEquals(final ShareContent a, final ShareContent b) {
-        Assert.assertEquals(a.getContentUrl(), b.getContentUrl());
-        Assert.assertEquals(a.getPeopleIds(), b.getPeopleIds());
-        Assert.assertEquals(a.getPlaceId(), b.getPlaceId());
-        Assert.assertEquals(a.getRef(), b.getRef());
-    }
-
-    private static void assertOpenGraphValueContainerEquals(
-            final ShareOpenGraphValueContainer a,
-            final ShareOpenGraphValueContainer b
-    ) {
-        final HashSet<String> keySet = new HashSet<String>();
-        keySet.addAll(a.keySet());
-        keySet.addAll(b.keySet());
-        for (String key : keySet) {
-            assertEquals(a.get(key), b.get(key));
-        }
-    }
-
-    private ShareModelTestUtility() {}
-}
diff --git a/facebook/src/test/java/com/facebook/share/model/ShareOpenGraphActionBuilderTest.java b/facebook/src/test/java/com/facebook/share/model/ShareOpenGraphActionBuilderTest.java
deleted file mode 100644
index cfba6e541..000000000
--- a/facebook/src/test/java/com/facebook/share/model/ShareOpenGraphActionBuilderTest.java
+++ /dev/null
@@ -1,98 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import com.facebook.FacebookTestCase;
-import com.facebook.TestUtils;
-
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-public class ShareOpenGraphActionBuilderTest extends FacebookTestCase {
-    @Test
-    public void testVideoBuilder() {
-        final ShareOpenGraphAction action =
-                ShareModelTestUtility.getOpenGraphActionBuilder().build();
-        assertEquals(ShareModelTestUtility.OPEN_GRAPH_ACTION_TYPE, action.getActionType());
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_VALUE,
-                action.getBoolean(
-                        ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_VALUE_KEY,
-                        !ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_VALUE));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_VALUE,
-                action.getBoolean(
-                        ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY,
-                        ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_VALUE));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_ARRAY,
-                action.getBooleanArray(ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_ARRAY_KEY));
-        assertNull(action.getBooleanArray(ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_DOUBLE_VALUE,
-                action.getDouble(ShareModelTestUtility.OPEN_GRAPH_DOUBLE_VALUE_KEY, 0),
-                TestUtils.DOUBLE_EQUALS_DELTA);
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_DOUBLE_VALUE,
-                action.getDouble(
-                        ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY,
-                        ShareModelTestUtility.OPEN_GRAPH_DOUBLE_VALUE),
-                TestUtils.DOUBLE_EQUALS_DELTA);
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_DOUBLE_ARRAY,
-                action.getDoubleArray(ShareModelTestUtility.OPEN_GRAPH_DOUBLE_ARRAY_KEY));
-        assertNull(action.getDoubleArray(ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_INT_VALUE,
-                action.getInt(ShareModelTestUtility.OPEN_GRAPH_INT_VALUE_KEY, 0));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_INT_VALUE,
-                action.getInt(ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY,
-                        ShareModelTestUtility.OPEN_GRAPH_INT_VALUE));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_INT_ARRAY,
-                action.getIntArray(ShareModelTestUtility.OPEN_GRAPH_INT_ARRAY_KEY));
-        assertNull(action.getIntArray(ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_LONG_VALUE,
-                action.getLong(ShareModelTestUtility.OPEN_GRAPH_LONG_VALUE_KEY, 0));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_LONG_VALUE,
-                action.getLong(
-                        ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY,
-                        ShareModelTestUtility.OPEN_GRAPH_LONG_VALUE));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_LONG_ARRAY,
-                action.getLongArray(ShareModelTestUtility.OPEN_GRAPH_LONG_ARRAY_KEY));
-        assertNull(action.getLongArray(ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_STRING,
-                action.getString(ShareModelTestUtility.OPEN_GRAPH_STRING_KEY));
-        assertNull(action.getString(ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_STRING_ARRAY_LIST,
-                action.getStringArrayList(ShareModelTestUtility.OPEN_GRAPH_STRING_ARRAY_LIST_KEY));
-        assertNull(action.getStringArrayList(ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY));
-        ShareModelTestUtility.assertEquals(action, TestUtils.parcelAndUnparcel(action));
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/share/model/ShareOpenGraphContentBuilderTest.java b/facebook/src/test/java/com/facebook/share/model/ShareOpenGraphContentBuilderTest.java
deleted file mode 100644
index a1a0bd163..000000000
--- a/facebook/src/test/java/com/facebook/share/model/ShareOpenGraphContentBuilderTest.java
+++ /dev/null
@@ -1,43 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import com.facebook.FacebookTestCase;
-import com.facebook.TestUtils;
-
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-
-public class ShareOpenGraphContentBuilderTest extends FacebookTestCase {
-    @Test
-    public void testOpenGraphBuilder() {
-        final ShareOpenGraphContent content =
-                ShareModelTestUtility.getOpenGraphContentBuilder().build();
-        ShareModelTestUtility.assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_CONTENT_ACTION,
-                content.getAction());
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_CONTENT_PREVIEW_PROPERTY_NAME,
-                content.getPreviewPropertyName());
-        ShareModelTestUtility.assertEquals(content, TestUtils.parcelAndUnparcel(content));
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/share/model/ShareOpenGraphObjectBuilderTest.java b/facebook/src/test/java/com/facebook/share/model/ShareOpenGraphObjectBuilderTest.java
deleted file mode 100644
index 0643ddf51..000000000
--- a/facebook/src/test/java/com/facebook/share/model/ShareOpenGraphObjectBuilderTest.java
+++ /dev/null
@@ -1,98 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import com.facebook.FacebookTestCase;
-import com.facebook.TestUtils;
-
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-
-public class ShareOpenGraphObjectBuilderTest extends FacebookTestCase {
-    @Test
-    public void testVideoBuilder() {
-        final ShareOpenGraphObject object =
-                ShareModelTestUtility.getOpenGraphObjectBuilder().build();
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_VALUE,
-                object.getBoolean(
-                        ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_VALUE_KEY,
-                        !ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_VALUE));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_VALUE,
-                object.getBoolean(
-                        ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY,
-                        ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_VALUE));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_ARRAY,
-                object.getBooleanArray(ShareModelTestUtility.OPEN_GRAPH_BOOLEAN_ARRAY_KEY));
-        assertNull(object.getBooleanArray(ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_DOUBLE_VALUE,
-                object.getDouble(ShareModelTestUtility.OPEN_GRAPH_DOUBLE_VALUE_KEY, 0),
-                TestUtils.DOUBLE_EQUALS_DELTA);
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_DOUBLE_VALUE,
-                object.getDouble(
-                        ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY,
-                        ShareModelTestUtility.OPEN_GRAPH_DOUBLE_VALUE),
-                TestUtils.DOUBLE_EQUALS_DELTA);
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_DOUBLE_ARRAY,
-                object.getDoubleArray(ShareModelTestUtility.OPEN_GRAPH_DOUBLE_ARRAY_KEY));
-        assertNull(object.getDoubleArray(ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_INT_VALUE,
-                object.getInt(ShareModelTestUtility.OPEN_GRAPH_INT_VALUE_KEY, 0));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_INT_VALUE,
-                object.getInt(
-                        ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY,
-                        ShareModelTestUtility.OPEN_GRAPH_INT_VALUE));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_INT_ARRAY,
-                object.getIntArray(ShareModelTestUtility.OPEN_GRAPH_INT_ARRAY_KEY));
-        assertNull(object.getIntArray(ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_LONG_VALUE,
-                object.getLong(ShareModelTestUtility.OPEN_GRAPH_LONG_VALUE_KEY, 0));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_LONG_VALUE,
-                object.getLong(
-                        ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY,
-                        ShareModelTestUtility.OPEN_GRAPH_LONG_VALUE));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_LONG_ARRAY,
-                object.getLongArray(ShareModelTestUtility.OPEN_GRAPH_LONG_ARRAY_KEY));
-        assertNull(object.getLongArray(ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_STRING,
-                object.getString(ShareModelTestUtility.OPEN_GRAPH_STRING_KEY));
-        assertNull(object.getString(ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY));
-        assertEquals(
-                ShareModelTestUtility.OPEN_GRAPH_STRING_ARRAY_LIST,
-                object.getStringArrayList(ShareModelTestUtility.OPEN_GRAPH_STRING_ARRAY_LIST_KEY));
-        assertNull(object.getStringArrayList(ShareModelTestUtility.OPEN_GRAPH_UNUSED_KEY));
-        ShareModelTestUtility.assertEquals(object, TestUtils.parcelAndUnparcel(object));
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/share/model/SharePhotoBuilderTest.java b/facebook/src/test/java/com/facebook/share/model/SharePhotoBuilderTest.java
deleted file mode 100644
index c6b9e53c5..000000000
--- a/facebook/src/test/java/com/facebook/share/model/SharePhotoBuilderTest.java
+++ /dev/null
@@ -1,40 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import com.facebook.FacebookTestCase;
-import com.facebook.TestUtils;
-
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-
-public class SharePhotoBuilderTest extends FacebookTestCase {
-    @Test
-    public void testPhotoBuilder() {
-        final SharePhoto photo = ShareModelTestUtility
-                .getPhotoBuilder(ShareModelTestUtility.PhotoBuilderType.LOCAL_URL)
-                .build();
-        assertEquals(ShareModelTestUtility.getTestPhotoImageUrl(), photo.getImageUrl());
-        assertEquals(ShareModelTestUtility.PHOTO_USER_GENERATED, photo.getUserGenerated());
-        ShareModelTestUtility.assertEquals(photo, TestUtils.parcelAndUnparcel(photo));
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/share/model/SharePhotoContentBuilderTest.java b/facebook/src/test/java/com/facebook/share/model/SharePhotoContentBuilderTest.java
deleted file mode 100644
index 6d327c2a6..000000000
--- a/facebook/src/test/java/com/facebook/share/model/SharePhotoContentBuilderTest.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import com.facebook.FacebookTestCase;
-import com.facebook.TestUtils;
-
-import org.junit.Test;
-
-public class SharePhotoContentBuilderTest extends FacebookTestCase {
-    @Test
-    public void testPhotoBuilder() {
-        final SharePhotoContent content = ShareModelTestUtility.getPhotoContentBuilder().build();
-        ShareModelTestUtility.assertEquals(
-                ShareModelTestUtility.PHOTO_CONTENT_PHOTOS,
-                content.getPhotos());
-        ShareModelTestUtility.assertEquals(content, TestUtils.parcelAndUnparcel(content));
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/share/model/ShareVideoBuilderTest.java b/facebook/src/test/java/com/facebook/share/model/ShareVideoBuilderTest.java
deleted file mode 100644
index 38ede93a4..000000000
--- a/facebook/src/test/java/com/facebook/share/model/ShareVideoBuilderTest.java
+++ /dev/null
@@ -1,37 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import com.facebook.FacebookTestCase;
-import com.facebook.TestUtils;
-
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-
-public class ShareVideoBuilderTest extends FacebookTestCase {
-    @Test
-    public void testVideoBuilder() {
-        final ShareVideo video = ShareModelTestUtility.getVideoBuilder().build();
-        assertEquals(ShareModelTestUtility.getTestVideoLocalUrl(), video.getLocalUrl());
-        ShareModelTestUtility.assertEquals(video, TestUtils.parcelAndUnparcel(video));
-    }
-}
diff --git a/facebook/src/test/java/com/facebook/share/model/ShareVideoContentBuilderTest.java b/facebook/src/test/java/com/facebook/share/model/ShareVideoContentBuilderTest.java
deleted file mode 100644
index 0d859b153..000000000
--- a/facebook/src/test/java/com/facebook/share/model/ShareVideoContentBuilderTest.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/**
- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
- *
- * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
- * copy, modify, and distribute this software in source code or binary form for use
- * in connection with the web services and APIs provided by Facebook.
- *
- * As with any software that integrates with the Facebook platform, your use of
- * this software is subject to the Facebook Developer Principles and Policies
- * [http://developers.facebook.com/policy/]. This copyright notice shall be
- * included in all copies or substantial portions of the software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
- * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
- * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
- * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
- * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-package com.facebook.share.model;
-
-import com.facebook.FacebookTestCase;
-import com.facebook.TestUtils;
-
-import org.junit.Test;
-
-public class ShareVideoContentBuilderTest extends FacebookTestCase {
-    @Test
-    public void testVideoBuilder() {
-        final ShareVideoContent content = ShareModelTestUtility.getVideoContentBuilder().build();
-        ShareModelTestUtility.assertEquals(
-                ShareModelTestUtility.VIDEO_CONTENT_PREVIEW_PHOTO,
-                content.getPreviewPhoto());
-        ShareModelTestUtility.assertEquals(
-                ShareModelTestUtility.VIDEO_CONTENT_VIDEO,
-                content.getVideo());
-        ShareModelTestUtility.assertEquals(
-                content,
-                TestUtils.parcelAndUnparcel(content));
-    }
-}
