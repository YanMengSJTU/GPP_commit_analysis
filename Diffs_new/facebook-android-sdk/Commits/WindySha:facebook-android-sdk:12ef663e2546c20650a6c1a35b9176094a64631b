diff --git a/CHANGELOG.md b/CHANGELOG.md
index c5cbb7e1d..29852d287 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -7,6 +7,9 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0
 
 ## [Unreleased]
 
+### Changed
+- Log Subscribe/StartTrial events going through GooglePlay store, which was logged as fb_mobile_purchase
+
 ## [4.41.0] - 2019-03-08
 
 ### Removed
diff --git a/facebook-core/src/main/java/com/facebook/appevents/internal/AutomaticAnalyticsLogger.java b/facebook-core/src/main/java/com/facebook/appevents/internal/AutomaticAnalyticsLogger.java
index 6e17ce29c..9b0bf104c 100644
--- a/facebook-core/src/main/java/com/facebook/appevents/internal/AutomaticAnalyticsLogger.java
+++ b/facebook-core/src/main/java/com/facebook/appevents/internal/AutomaticAnalyticsLogger.java
@@ -27,6 +27,7 @@
 import android.util.Log;
 
 import com.facebook.FacebookSdk;
+import com.facebook.appevents.AppEventsConstants;
 import com.facebook.appevents.AppEventsLogger;
 import com.facebook.appevents.InternalAppEventsLogger;
 import com.facebook.internal.FetchedAppSettings;
@@ -107,7 +108,7 @@ public static void logPurchaseInapp(
     }
 
     /**
-     * Log subscription related events: new, cancel, restore, heartbeat, expire
+     * Log subscription related events: subscribe, start trial, cancel, restore, heartbeat, expire
      */
     public static void logPurchaseSubs(
             SubscriptionType subsType,
@@ -120,6 +121,12 @@ public static void logPurchaseSubs(
 
         String eventName;
         switch (subsType) {
+            case SUBSCRIBE:
+                eventName = AppEventsConstants.EVENT_NAME_SUBSCRIBE;
+                break;
+            case START_TRIAL:
+                eventName = AppEventsConstants.EVENT_NAME_START_TRIAL;
+                break;
             case RESTORE:
                 eventName = "SubscriptionRestore";
                 break;
@@ -132,8 +139,6 @@ public static void logPurchaseSubs(
             case EXPIRE:
                 eventName = "SubscriptionExpire";
                 break;
-            case NEW:
-                logPurchaseInapp(purchase, skuDetails);
             default:
                 return;
         }
diff --git a/facebook-core/src/main/java/com/facebook/appevents/internal/InAppPurchaseEventManager.java b/facebook-core/src/main/java/com/facebook/appevents/internal/InAppPurchaseEventManager.java
index c5c57c3ae..d18cbef98 100644
--- a/facebook-core/src/main/java/com/facebook/appevents/internal/InAppPurchaseEventManager.java
+++ b/facebook-core/src/main/java/com/facebook/appevents/internal/InAppPurchaseEventManager.java
@@ -59,7 +59,7 @@
     private static final String INAPP = "inapp";
 
     // Purchase setting
-    private static final int PURCHASE_EXPIRE_TIME_SEC = 12 * 60 * 60; // 12 h
+    private static final int PURCHASE_EXPIRE_TIME_SEC = 24 * 60 * 60; // 24 h
     private static final int PURCHASE_STOP_QUERY_TIME_SEC = 20 * 60; // 20 min
     private static final int MAX_QUERY_PURCHASE_NUM = 30;
 
@@ -116,6 +116,16 @@ public static Object asInterface(Context context, IBinder service) {
                 AS_INTERFACE, null, args);
     }
 
+    @Nullable
+    private static String getSkuDetail(
+            Context context, String sku,
+            Object inAppBillingObj, boolean isSubscription) {
+        ArrayList<String> skuList = new ArrayList<>();
+        skuList.add(sku);
+        return getSkuDetails(
+                context, skuList, inAppBillingObj, isSubscription).get(sku);
+    }
+
     public static Map<String, String> getSkuDetails(
             Context context, ArrayList<String> skuList,
             Object inAppBillingObj, boolean isSubscription) {
@@ -274,7 +284,7 @@ private static Boolean isBillingSupported(Context context,
                 getPurchases(context, inAppBillingObj, SUBSCRIPTION);
 
         for (String purchase : purchases) {
-            SubscriptionType subsType = getSubsType(purchase);
+            SubscriptionType subsType = getSubsType(context, purchase, inAppBillingObj);
             if (subsType != SubscriptionType.DUPLICATED && subsType != SubscriptionType.UNKNOWN) {
                 purchaseMap.put(purchase, subsType);
             }
@@ -285,7 +295,14 @@ private static Boolean isBillingSupported(Context context,
 
     /**
      * Get subscription type
-     * New: when subscription is never logged and the start time is within PURCHASE_EXPIRE_TIME_SEC
+     * Subscribe:
+     *  1. when subscription is never logged
+     *  2. The start time is within PURCHASE_EXPIRE_TIME_SEC
+     *  3. No free trial period
+     * StartTrial:
+     *  1. when subscription is never logged
+     *  2. The start time is within PURCHASE_EXPIRE_TIME_SEC
+     *  3. has free trial period
      * Restore: when subscription is restored after cancellation
      * Cancel: when subscription is canceled
      * Heartbeat: when subscription is checked available regularly
@@ -293,7 +310,8 @@ private static Boolean isBillingSupported(Context context,
      *             and the subscription is recently logged
      *
      * */
-    private static SubscriptionType getSubsType(String purchase) {
+    private static SubscriptionType getSubsType(Context context,
+                                                String purchase, Object inAppBillingObj) {
         try {
             SubscriptionType subsType = null;
             long nowSec = System.currentTimeMillis() / 1000L;
@@ -305,12 +323,25 @@ private static SubscriptionType getSubsType(String purchase) {
             JSONObject oldPurchaseJson = oldPurchase.isEmpty()
                     ? new JSONObject() : new JSONObject(oldPurchase);
 
-            // New or heartbeat
+            // First time see this purchase token
+            // Within PURCHASE_EXPIRE_TIME_SEC: Subscribe/StartTrial; otherwise: heartbeat
             if (!oldPurchaseJson.optString("purchaseToken")
                     .equals(purchaseJson.get("purchaseToken"))) {
                 long purchaseTimeMillis = purchaseJson.getLong("purchaseTime");
-                subsType = (nowSec - purchaseTimeMillis / 1000L < PURCHASE_EXPIRE_TIME_SEC)
-                        ? SubscriptionType.NEW : SubscriptionType.HEARTBEAT;
+                if (nowSec - purchaseTimeMillis / 1000L < PURCHASE_EXPIRE_TIME_SEC) {
+                    String skuDetail = InAppPurchaseEventManager.getSkuDetail(
+                            context, sku, inAppBillingObj, true);
+                    if (skuDetail != null) {
+                        JSONObject skuDetailsJSON = new JSONObject(skuDetail);
+                        String freeTrialPeriod = skuDetailsJSON.optString("freeTrialPeriod");
+                        subsType = (freeTrialPeriod == null || freeTrialPeriod.isEmpty()) ?
+                                SubscriptionType.SUBSCRIBE : SubscriptionType.START_TRIAL;
+                    }
+                }
+
+                if (subsType == null) {
+                    subsType = SubscriptionType.HEARTBEAT;
+                }
             }
 
             // Restore or Cancel
diff --git a/facebook-core/src/main/java/com/facebook/appevents/internal/SubscriptionType.java b/facebook-core/src/main/java/com/facebook/appevents/internal/SubscriptionType.java
index ba7c7ac8e..263e694b8 100644
--- a/facebook-core/src/main/java/com/facebook/appevents/internal/SubscriptionType.java
+++ b/facebook-core/src/main/java/com/facebook/appevents/internal/SubscriptionType.java
@@ -22,5 +22,5 @@
 
 
 public enum SubscriptionType {
-    NEW, HEARTBEAT, EXPIRE, CANCEL, RESTORE, DUPLICATED, UNKNOWN
+    SUBSCRIBE, START_TRIAL, HEARTBEAT, EXPIRE, CANCEL, RESTORE, DUPLICATED, UNKNOWN
 }
