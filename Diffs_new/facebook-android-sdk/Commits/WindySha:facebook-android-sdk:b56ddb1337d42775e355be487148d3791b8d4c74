diff --git a/facebook-core/src/main/java/com/facebook/appevents/internal/AutomaticAnalyticsLogger.java b/facebook-core/src/main/java/com/facebook/appevents/internal/AutomaticAnalyticsLogger.java
index 60ebc95b1..002e530c2 100644
--- a/facebook-core/src/main/java/com/facebook/appevents/internal/AutomaticAnalyticsLogger.java
+++ b/facebook-core/src/main/java/com/facebook/appevents/internal/AutomaticAnalyticsLogger.java
@@ -39,7 +39,11 @@
 import org.json.JSONObject;
 
 import java.math.BigDecimal;
+import java.util.ArrayList;
 import java.util.Currency;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
 
 /**
  * com.facebook.appevents.internal is solely for the use of other packages within the
@@ -112,9 +116,10 @@ public static void logPurchaseInapp(
      * Log subscription related events: subscribe, start trial, cancel, restore, heartbeat, expire
      */
     public static void logPurchaseSubs(
-            SubscriptionType subsType,
-            String purchase,
-            String skuDetails
+            final SubscriptionType subsType,
+            final String purchase,
+            final String skuDetails,
+            Map<String, String> extraParameter
     ) {
         if (!isImplicitPurchaseLoggingEnabled()){
             return;
@@ -159,7 +164,7 @@ public static void logPurchaseSubs(
         }
 
         PurchaseLoggingParameters loggingParameters =
-                getPurchaseLoggingParameters(purchase, skuDetails);
+                getPurchaseLoggingParameters(purchase, skuDetails, extraParameter);
 
         if (loggingParameters != null) {
             internalAppEventsLogger.logEventImplicitly(
@@ -183,6 +188,12 @@ public static boolean isImplicitPurchaseLoggingEnabled() {
     @Nullable
     private static PurchaseLoggingParameters getPurchaseLoggingParameters(
             String purchase, String skuDetails) {
+        return getPurchaseLoggingParameters(purchase, skuDetails, new HashMap<String, String>());
+    }
+
+    @Nullable
+    private static PurchaseLoggingParameters getPurchaseLoggingParameters(
+            String purchase, String skuDetails, Map<String, String> extraParameter) {
 
         try {
             JSONObject purchaseJSON = new JSONObject(purchase);
@@ -236,6 +247,10 @@ private static PurchaseLoggingParameters getPurchaseLoggingParameters(
                 }
             }
 
+            for (String key : extraParameter.keySet()) {
+                params.putCharSequence(key, extraParameter.get(key));
+            }
+
             return new PurchaseLoggingParameters(
                     new BigDecimal(skuDetailsJSON.getLong("price_amount_micros") / 1000000.0),
                     Currency.getInstance(skuDetailsJSON.getString("price_currency_code")),
diff --git a/facebook-core/src/main/java/com/facebook/appevents/internal/InAppPurchaseActivityLifecycleTracker.java b/facebook-core/src/main/java/com/facebook/appevents/internal/InAppPurchaseActivityLifecycleTracker.java
index 643051a4d..e868dabb0 100644
--- a/facebook-core/src/main/java/com/facebook/appevents/internal/InAppPurchaseActivityLifecycleTracker.java
+++ b/facebook-core/src/main/java/com/facebook/appevents/internal/InAppPurchaseActivityLifecycleTracker.java
@@ -37,6 +37,7 @@
 
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicBoolean;
 
@@ -122,12 +123,24 @@ public void run() {
 
                         Map<String, SubscriptionType> purchasesSubs = InAppPurchaseEventManager
                                 .getPurchasesSubs(context, inAppBillingObj);
+                        logPurchaseSubs(context, purchasesSubs, new HashMap<String, String>());
+
+                        List<Integer> errorCode = new ArrayList<>();
+                        purchasesSubs.clear();
                         ArrayList<String> purchasesSubsExpire = InAppPurchaseEventManager
-                                .getPurchasesSubsExpire(context, inAppBillingObj);
+                                .getPurchasesSubsExpire(context, inAppBillingObj, errorCode);
                         for (String purchase : purchasesSubsExpire) {
                             purchasesSubs.put(purchase, SubscriptionType.EXPIRE);
                         }
-                        logPurchaseSubs(context, purchasesSubs);
+                        Map<String, String> extraParameters = new HashMap<>();
+                        if (!errorCode.isEmpty()) {
+                            StringBuilder sb = new StringBuilder();
+                            for (int code : errorCode) {
+                                sb.append(code).append(',');
+                            }
+                            extraParameters.put("error_code", sb.toString());
+                        }
+                        logPurchaseSubs(context, purchasesSubs, extraParameters);
                     }
                 });
             }
@@ -212,7 +225,9 @@ private static void logPurchaseInapp(final Context context, ArrayList<String> pu
 
     private static void logPurchaseSubs(
             final Context context,
-            final Map<String, SubscriptionType> purchasesSubsTypeMap) {
+            final Map<String, SubscriptionType> purchasesSubsTypeMap,
+            Map<String, String> extraParameter
+    ) {
         if (purchasesSubsTypeMap.isEmpty()) {
             return;
         }
@@ -237,7 +252,7 @@ private static void logPurchaseSubs(
             String purchase = skuPurchaseMap.get(sku);
             String skuDetail = skuDetailsMap.get(sku);
             SubscriptionType subsType = purchasesSubsTypeMap.get(purchase);
-            AutomaticAnalyticsLogger.logPurchaseSubs(subsType, purchase, skuDetail);
+            AutomaticAnalyticsLogger.logPurchaseSubs(subsType, purchase, skuDetail, extraParameter);
         }
     }
 }
diff --git a/facebook-core/src/main/java/com/facebook/appevents/internal/InAppPurchaseEventManager.java b/facebook-core/src/main/java/com/facebook/appevents/internal/InAppPurchaseEventManager.java
index 7df21c400..0bbb17f54 100644
--- a/facebook-core/src/main/java/com/facebook/appevents/internal/InAppPurchaseEventManager.java
+++ b/facebook-core/src/main/java/com/facebook/appevents/internal/InAppPurchaseEventManager.java
@@ -37,6 +37,7 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
@@ -109,6 +110,15 @@
                     PURCHASE_SUBS_STORE,
                     Context.MODE_PRIVATE);
 
+    private static final int ERROR_BILLING_NOT_SUPPORTED = 0;
+    private static final int ERROR_CLASS_OBJ_NULL = 1;
+    private static final int ERROR_METHOD_OBJ_NULL = 2;
+    private static final int ERROR_OBJ_NULL = 3;
+    private static final int ERROR_ILLEGAL_ACCESS = 4;
+    private static final int ERROR_ILLEGAL_TARGET = 5;
+    private static final int ERROR_EXCEEDING_QUERY_NUM = 6;
+    private static final int ERROR_INVOKE_METHOD_RETURN_NULL = 7;
+
     @Nullable
     static Object asInterface(Context context, IBinder service) {
         Object[] args = new Object[] {service};
@@ -231,7 +241,7 @@ private static Boolean isBillingSupported(Context context,
     }
 
     static ArrayList<String> getPurchasesSubsExpire(
-            Context context, Object inAppBillingObj) {
+            Context context, Object inAppBillingObj, List<Integer> errorCode) {
         ArrayList<String> expirePurchases = new ArrayList<>();
 
         Map<String,?> keys = purchaseSubsSharedPrefs.getAll();
@@ -240,7 +250,7 @@ private static Boolean isBillingSupported(Context context,
         }
 
         ArrayList<String> currPurchases =
-                getPurchases(context, inAppBillingObj, SUBSCRIPTION);
+                getPurchases(context, inAppBillingObj, SUBSCRIPTION, errorCode);
         Set<String> currSkuSet = new HashSet<>();
         for (String purchase : currPurchases) {
             try {
@@ -384,6 +394,13 @@ private static SubscriptionType getSubsType(Context context,
     private static ArrayList<String> getPurchases(Context context,
                                                   Object inAppBillingObj,
                                                   String type) {
+        return getPurchases(context, inAppBillingObj, type, new ArrayList<Integer>());
+    }
+
+    private static ArrayList<String> getPurchases(Context context,
+                                                  Object inAppBillingObj,
+                                                  String type,
+                                                  List<Integer> errorCode) {
 
         ArrayList<String> purchases = new ArrayList<>();
 
@@ -399,7 +416,7 @@ private static SubscriptionType getSubsType(Context context,
             do {
                 Object[] args = new Object[] {3, PACKAGE_NAME, type, continuationToken};
                 Object result = invokeMethod(context, IN_APP_BILLING_SERVICE,
-                        GET_PURCHASES, inAppBillingObj, args);
+                        GET_PURCHASES, inAppBillingObj, args, errorCode);
 
                 continuationToken = null;
 
@@ -417,9 +434,17 @@ private static SubscriptionType getSubsType(Context context,
                             break;
                         }
                     }
+                } else {
+                    errorCode.add(ERROR_INVOKE_METHOD_RETURN_NULL);
                 }
             } while (queriedPurchaseNum < MAX_QUERY_PURCHASE_NUM
                     && continuationToken != null);
+
+            if (queriedPurchaseNum >= MAX_QUERY_PURCHASE_NUM) {
+                errorCode.add(ERROR_EXCEEDING_QUERY_NUM);
+            }
+        } else {
+            errorCode.add(ERROR_BILLING_NOT_SUPPORTED);
         }
 
         return purchases;
@@ -602,32 +627,37 @@ private static Method getMethod(Class<?> classObj, String methodName) {
     @Nullable
     private static Object invokeMethod(Context context, String className,
                                        String methodName, Object obj, Object[] args) {
+        return invokeMethod(context, className, methodName, obj, args, new ArrayList<Integer>());
+    }
+
+    @Nullable
+    private static Object invokeMethod(Context context, String className,
+                                       String methodName, Object obj, Object[] args, List<Integer> errorCode) {
         Class<?> classObj = getClass(context, className);
         if (classObj == null) {
+            errorCode.add(ERROR_CLASS_OBJ_NULL);
             return null;
         }
 
         Method methodObj = getMethod(classObj, methodName);
         if (methodObj == null) {
+            errorCode.add(ERROR_METHOD_OBJ_NULL);
             return null;
         }
 
         if (obj != null) {
             obj = classObj.cast(obj);
+        } else {
+            errorCode.add(ERROR_OBJ_NULL);
+            return null;
         }
 
         try {
             return methodObj.invoke(obj, args);
         } catch (IllegalAccessException e) {
-            Log.e(TAG,
-                    "Illegal access to method "
-                            + classObj.getName() + "." + methodObj.getName(),
-                    e);
+            errorCode.add(ERROR_ILLEGAL_ACCESS);
         } catch (InvocationTargetException e) {
-            Log.e(TAG,
-                    "Invocation target exception in "
-                            + classObj.getName() + "." + methodObj.getName(),
-                    e);
+            errorCode.add(ERROR_ILLEGAL_TARGET);
         }
 
         return null;
