diff --git a/facebook-core/src/main/java/com/facebook/appevents/AppEventsLoggerImpl.java b/facebook-core/src/main/java/com/facebook/appevents/AppEventsLoggerImpl.java
index 18eb7852e..676fed0ae 100644
--- a/facebook-core/src/main/java/com/facebook/appevents/AppEventsLoggerImpl.java
+++ b/facebook-core/src/main/java/com/facebook/appevents/AppEventsLoggerImpl.java
@@ -20,18 +20,14 @@
 
 package com.facebook.appevents;
 
-import android.app.Activity;
 import android.app.Application;
-import android.content.ComponentName;
 import android.content.Context;
-import android.content.Intent;
 import android.content.SharedPreferences;
 import android.os.Build;
 import android.os.Bundle;
 import android.support.annotation.Nullable;
 import android.util.Log;
 import android.webkit.WebView;
-import bolts.AppLinks;
 
 import com.facebook.appevents.AppEventsLogger.FlushBehavior;
 import com.facebook.appevents.AppEventsLogger.ProductAvailability;
@@ -70,7 +66,6 @@
 
 class AppEventsLoggerImpl {
 
-
     // Constants
     private static final String TAG = AppEventsLoggerImpl.class.getCanonicalName();
 
@@ -91,7 +86,7 @@
 
     private static ScheduledThreadPoolExecutor backgroundExecutor;
     private static FlushBehavior flushBehavior = FlushBehavior.AUTO;
-    private static Object staticLock = new Object();
+    private static final Object staticLock = new Object();
     private static String anonymousAppDeviceGUID;
     private static boolean isActivateAppEventRequested;
     private static String pushNotificationsRegistrationId;
diff --git a/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerImplTest.java b/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerImplTest.java
new file mode 100644
index 000000000..a3ec9ed8d
--- /dev/null
+++ b/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerImplTest.java
@@ -0,0 +1,362 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.appevents;
+
+import android.content.Context;
+import android.os.Bundle;
+import android.util.Log;
+
+import com.facebook.FacebookPowerMockTestCase;
+import com.facebook.FacebookSdk;
+import com.facebook.GraphRequest;
+import com.facebook.HttpMethod;
+import com.facebook.appevents.internal.AppEventUtility;
+import com.facebook.appevents.internal.AutomaticAnalyticsLogger;
+import com.facebook.appevents.internal.Constants;
+import com.facebook.internal.AttributionIdentifiers;
+import com.facebook.internal.FetchedAppGateKeepersManager;
+
+import org.json.JSONObject;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Matchers;
+import org.mockito.Mock;
+import org.mockito.Mockito;
+import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.reflect.Whitebox;
+import org.robolectric.RuntimeEnvironment;
+
+import java.math.BigDecimal;
+import java.util.Currency;
+import java.util.Locale;
+import java.util.UUID;
+import java.util.concurrent.Executor;
+
+@PrepareForTest({
+        AppEvent.class,
+        AppEventQueue.class,
+        AppEventUtility.class,
+        AppEventsLoggerImpl.class,
+        AttributionIdentifiers.class,
+        AutomaticAnalyticsLogger.class,
+        FacebookSdk.class,
+        FetchedAppGateKeepersManager.class,
+        GraphRequest.class,
+})
+public class AppEventsLoggerImplTest extends FacebookPowerMockTestCase {
+
+    private final String TAG = AppEventsLoggerImplTest.class.getCanonicalName();
+
+    private final Executor mockExecutor = new FacebookSerialExecutor();
+
+    private final String mockAppID = "12345";
+
+    @Mock
+    private AppEventsLoggerImpl logger;
+
+    @Mock
+    private AppEvent mockEvent;
+
+    @Before
+    @Override
+    public void setUp() {
+        super.setUp();
+        PowerMockito.spy(FacebookSdk.class);
+        Whitebox.setInternalState(FacebookSdk.class, "sdkInitialized", true);
+        Whitebox.setInternalState(FacebookSdk.class, "applicationId", mockAppID);
+        Whitebox.setInternalState(
+                FacebookSdk.class, "applicationContext", RuntimeEnvironment.application);
+        Whitebox.setInternalState(FacebookSdk.class, "executor", mockExecutor);
+
+        // Stub empty implementations to AppEventQueue to not really flush events
+        PowerMockito.mockStatic(AppEventQueue.class);
+
+        // Disable Gatekeeper
+        PowerMockito.mockStatic(FetchedAppGateKeepersManager.class);
+        PowerMockito.when(FetchedAppGateKeepersManager.getGateKeeperForKey(
+                Matchers.anyString(), Matchers.anyString(), Matchers.anyBoolean()
+        )).thenReturn(false);
+
+        PowerMockito.mockStatic(AttributionIdentifiers.class);
+        PowerMockito.when(AttributionIdentifiers.getAttributionIdentifiers(Matchers.any(Context.class))).thenReturn(null);
+
+        try {
+            PowerMockito.whenNew(AppEventsLoggerImpl.class).withAnyArguments().thenReturn(logger);
+            PowerMockito.mockStatic(AutomaticAnalyticsLogger.class);
+            PowerMockito.doReturn(true).when(
+                    AutomaticAnalyticsLogger.class, "isImplicitPurchaseLoggingEnabled");
+
+            // Disable AppEventUtility.isMainThread since executor now runs in main thread
+            PowerMockito.spy(AppEventUtility.class);
+            PowerMockito.doReturn(false).when(AppEventUtility.class, "isMainThread");
+            PowerMockito.when(mockEvent.getIsImplicit()).thenReturn(true);
+            PowerMockito.whenNew(AppEvent.class).withAnyArguments().thenReturn(mockEvent);
+        } catch (Exception e) {
+            Log.e(TAG, "Fail to set up AppEventsLoggerImplTest: " + e.getMessage());
+        }
+    }
+
+    @Test
+    public void testSetFlushBehavior() {
+        AppEventsLogger.setFlushBehavior(AppEventsLogger.FlushBehavior.AUTO);
+        Assert.assertEquals(AppEventsLogger.FlushBehavior.AUTO, AppEventsLogger.getFlushBehavior());
+
+        AppEventsLogger.setFlushBehavior(AppEventsLogger.FlushBehavior.EXPLICIT_ONLY);
+        Assert.assertEquals(
+                AppEventsLogger.FlushBehavior.EXPLICIT_ONLY, AppEventsLogger.getFlushBehavior());
+    }
+
+    @Test
+    public void testLogEvent() throws Exception {
+        logger.logEvent("fb_mock_event");
+        PowerMockito.verifyNew(AppEvent.class).withArguments(
+                Matchers.anyString(),
+                Matchers.eq("fb_mock_event"),
+                Matchers.anyDouble(),
+                Matchers.any(Bundle.class),
+                Matchers.anyBoolean(),
+                Matchers.anyBoolean(),
+                Matchers.any(UUID.class));
+    }
+
+    @Test
+    public void testLogPurchase() throws Exception {
+        logger.logPurchase(new BigDecimal(1.0), Currency.getInstance(Locale.US));
+        Bundle parameters = new Bundle();
+        parameters.putString(
+                AppEventsConstants.EVENT_PARAM_CURRENCY,
+                Currency.getInstance(Locale.US).getCurrencyCode());
+
+        PowerMockito.verifyNew(AppEvent.class).withArguments(
+                Matchers.anyString(),
+                Matchers.eq(AppEventsConstants.EVENT_NAME_PURCHASED),
+                Matchers.eq(1.0),
+                Matchers.argThat(new AppEventTestUtilities.BundleMatcher(parameters)),
+                Matchers.anyBoolean(),
+                Matchers.anyBoolean(),
+                Matchers.any(UUID.class));
+    }
+
+    @Test
+    public void testLogProductItemWithGtinMpnBrand() throws Exception {
+        logger.logProductItem(
+                "F40CEE4E-471E-45DB-8541-1526043F4B21",
+                AppEventsLogger.ProductAvailability.IN_STOCK,
+                AppEventsLogger.ProductCondition.NEW,
+                "description",
+                "https://www.sample.com",
+                "https://www.sample.com",
+                "title",
+                new BigDecimal(1.0),
+                Currency.getInstance(Locale.US),
+                "BLUE MOUNTAIN",
+                "BLUE MOUNTAIN",
+                "PHILZ",
+                null);
+        Bundle parameters = new Bundle();
+        parameters.putString(
+                Constants.EVENT_PARAM_PRODUCT_ITEM_ID,
+                "F40CEE4E-471E-45DB-8541-1526043F4B21");
+        parameters.putString(
+                Constants.EVENT_PARAM_PRODUCT_AVAILABILITY,
+                AppEventsLogger.ProductAvailability.IN_STOCK.name());
+        parameters.putString(
+                Constants.EVENT_PARAM_PRODUCT_CONDITION,
+                AppEventsLogger.ProductCondition.NEW.name());
+        parameters.putString(Constants.EVENT_PARAM_PRODUCT_DESCRIPTION, "description");
+        parameters.putString(Constants.EVENT_PARAM_PRODUCT_IMAGE_LINK, "https://www.sample.com");
+        parameters.putString(Constants.EVENT_PARAM_PRODUCT_LINK, "https://www.sample.com");
+        parameters.putString(Constants.EVENT_PARAM_PRODUCT_TITLE, "title");
+        parameters.putString(Constants.EVENT_PARAM_PRODUCT_PRICE_AMOUNT,
+                (new BigDecimal(1.0)).setScale(3, BigDecimal.ROUND_HALF_UP).toString());
+        parameters.putString(
+                Constants.EVENT_PARAM_PRODUCT_PRICE_CURRENCY,
+                Currency.getInstance(Locale.US).getCurrencyCode());
+        parameters.putString(Constants.EVENT_PARAM_PRODUCT_GTIN, "BLUE MOUNTAIN");
+        parameters.putString(Constants.EVENT_PARAM_PRODUCT_MPN, "BLUE MOUNTAIN");
+        parameters.putString(Constants.EVENT_PARAM_PRODUCT_BRAND, "PHILZ");
+
+        PowerMockito.verifyNew(AppEvent.class).withArguments(
+                Matchers.anyString(),
+                Matchers.eq(AppEventsConstants.EVENT_NAME_PRODUCT_CATALOG_UPDATE),
+                Matchers.anyDouble(),
+                Matchers.argThat(new AppEventTestUtilities.BundleMatcher(parameters)),
+                Matchers.anyBoolean(),
+                Matchers.anyBoolean(),
+                Matchers.any(UUID.class));
+    }
+
+    @Test
+    public void testLogProductItemWithoutGtinMpnBrand() throws Exception {
+        logger.logProductItem(
+                "F40CEE4E-471E-45DB-8541-1526043F4B21",
+                AppEventsLogger.ProductAvailability.IN_STOCK,
+                AppEventsLogger.ProductCondition.NEW,
+                "description",
+                "https://www.sample.com",
+                "https://www.sample.com",
+                "title",
+                new BigDecimal(1.0),
+                Currency.getInstance(Locale.US),
+                null,
+                null,
+                null,
+                null);
+        Bundle parameters = new Bundle();
+        parameters.putString(
+                Constants.EVENT_PARAM_PRODUCT_ITEM_ID,
+                "F40CEE4E-471E-45DB-8541-1526043F4B21");
+        parameters.putString(
+                Constants.EVENT_PARAM_PRODUCT_AVAILABILITY,
+                AppEventsLogger.ProductAvailability.IN_STOCK.name());
+        parameters.putString(
+                Constants.EVENT_PARAM_PRODUCT_CONDITION,
+                AppEventsLogger.ProductCondition.NEW.name());
+        parameters.putString(Constants.EVENT_PARAM_PRODUCT_DESCRIPTION, "description");
+        parameters.putString(Constants.EVENT_PARAM_PRODUCT_IMAGE_LINK, "https://www.sample.com");
+        parameters.putString(Constants.EVENT_PARAM_PRODUCT_LINK, "https://www.sample.com");
+        parameters.putString(Constants.EVENT_PARAM_PRODUCT_TITLE, "title");
+        parameters.putString(Constants.EVENT_PARAM_PRODUCT_PRICE_AMOUNT,
+                (new BigDecimal(1.0)).setScale(3, BigDecimal.ROUND_HALF_UP).toString());
+        parameters.putString(
+                Constants.EVENT_PARAM_PRODUCT_PRICE_CURRENCY,
+                Currency.getInstance(Locale.US).getCurrencyCode());
+
+        PowerMockito.verifyNew(AppEvent.class, Mockito.never()).withArguments(
+                Matchers.anyString(),
+                Matchers.eq(AppEventsConstants.EVENT_NAME_PRODUCT_CATALOG_UPDATE),
+                Matchers.anyDouble(),
+                Matchers.argThat(new AppEventTestUtilities.BundleMatcher(parameters)),
+                Matchers.anyBoolean(),
+                Matchers.anyBoolean(),
+                Matchers.any(UUID.class));
+    }
+
+    @Test
+    public void testLogPushNotificationOpen() throws Exception {
+        Bundle payload = new Bundle();
+        payload.putString("fb_push_payload", "{\"campaign\" : \"testCampaign\"}");
+        logger.logPushNotificationOpen(payload, null);
+        Bundle parameters = new Bundle();
+        parameters.putString("fb_push_campaign", "testCampaign");
+
+        PowerMockito.verifyNew(AppEvent.class).withArguments(
+                Matchers.anyString(),
+                Matchers.eq("fb_mobile_push_opened"),
+                Matchers.anyDouble(),
+                Matchers.argThat(new AppEventTestUtilities.BundleMatcher(parameters)),
+                Matchers.anyBoolean(),
+                Matchers.anyBoolean(),
+                Matchers.any(UUID.class));
+    }
+
+    @Test
+    public void testLogPushNotificationOpenWithoutCampaign() throws Exception {
+        Bundle payload = new Bundle();
+        payload.putString("fb_push_payload", "{}");
+        logger.logPushNotificationOpen(payload, null);
+
+        PowerMockito.verifyNew(AppEvent.class, Mockito.never()).withArguments(
+                Matchers.anyString(),
+                Matchers.anyString(),
+                Matchers.anyDouble(),
+                Matchers.any(Bundle.class),
+                Matchers.anyBoolean(),
+                Matchers.anyBoolean(),
+                Matchers.any(UUID.class));
+    }
+
+    @Test
+    public void testLogPushNotificationOpenWithAction() throws Exception {
+        Bundle payload = new Bundle();
+        payload.putString("fb_push_payload", "{\"campaign\" : \"testCampaign\"}");
+        logger.logPushNotificationOpen(payload, "testAction");
+        Bundle parameters = new Bundle();
+        parameters.putString("fb_push_campaign", "testCampaign");
+        parameters.putString("fb_push_action", "testAction");
+
+        PowerMockito.verifyNew(AppEvent.class).withArguments(
+                Matchers.anyString(),
+                Matchers.eq("fb_mobile_push_opened"),
+                Matchers.anyDouble(),
+                Matchers.argThat(new AppEventTestUtilities.BundleMatcher(parameters)),
+                Matchers.anyBoolean(),
+                Matchers.anyBoolean(),
+                Matchers.any(UUID.class));
+    }
+
+    @Test
+    public void testLogPushNotificationOpenWithoutPayload() throws Exception {
+        Bundle payload = new Bundle();
+        logger.logPushNotificationOpen(payload, null);
+
+        PowerMockito.verifyNew(AppEvent.class, Mockito.never()).withArguments(
+                Matchers.anyString(),
+                Matchers.anyString(),
+                Matchers.anyDouble(),
+                Matchers.any(Bundle.class),
+                Matchers.anyBoolean(),
+                Matchers.anyBoolean(),
+                Matchers.any(UUID.class));
+    }
+
+    @Test
+    public void testPublishInstall() throws Exception {
+        GraphRequest mockRequest = PowerMockito.mock(GraphRequest.class);
+        PowerMockito.whenNew(GraphRequest.class).withAnyArguments().thenReturn(mockRequest);
+        String expectedEvent = "MOBILE_APP_INSTALL";
+        String expectedUrl = mockAppID + "/activities";
+        final ArgumentCaptor<JSONObject> captor = ArgumentCaptor.forClass(JSONObject.class);
+
+        FacebookSdk.publishInstallAsync(
+                FacebookSdk.getApplicationContext(), FacebookSdk.getApplicationId());
+
+        PowerMockito.verifyNew(GraphRequest.class).withArguments(
+                Matchers.isNull(),
+                Matchers.eq(expectedUrl),
+                Matchers.isNull(),
+                Matchers.eq(HttpMethod.POST),
+                Matchers.isNull()
+        );
+        Mockito.verify(mockRequest).setGraphObject(captor.capture());
+        Assert.assertEquals(expectedEvent, captor.getValue().getString("event"));
+    }
+
+    @Test
+    public void testSetPushNotificationsRegistrationId() throws Exception {
+        String mockNotificationId = "123";
+        AppEventsLogger.setPushNotificationsRegistrationId(mockNotificationId);
+
+        PowerMockito.verifyNew(AppEvent.class).withArguments(
+                Matchers.anyString(),
+                Matchers.eq(AppEventsConstants.EVENT_NAME_PUSH_TOKEN_OBTAINED),
+                Matchers.anyDouble(),
+                Matchers.any(Bundle.class),
+                Matchers.anyBoolean(),
+                Matchers.anyBoolean(),
+                Matchers.any(UUID.class));
+        Assert.assertEquals(
+                mockNotificationId, InternalAppEventsLogger.getPushNotificationsRegistrationId());
+    }
+}
diff --git a/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerTest.java b/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerTest.java
index 3682380c8..a8dc3dfbc 100644
--- a/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerTest.java
+++ b/facebook/src/test/java/com/facebook/appevents/AppEventsLoggerTest.java
@@ -20,124 +20,183 @@
 
 package com.facebook.appevents;
 
+import android.app.Application;
 import android.content.Context;
 import android.os.Bundle;
+import android.util.Log;
 
 import com.facebook.FacebookPowerMockTestCase;
 import com.facebook.FacebookSdk;
-import com.facebook.GraphRequest;
-import com.facebook.HttpMethod;
 import com.facebook.TestUtils;
-import com.facebook.appevents.internal.ActivityLifecycleTracker;
 import com.facebook.appevents.internal.AppEventUtility;
 import com.facebook.appevents.internal.AppEventsLoggerUtility;
-import com.facebook.appevents.internal.Constants;
-import com.facebook.internal.AttributionIdentifiers;
-import com.facebook.internal.FetchedAppGateKeepersManager;
-import com.facebook.internal.Utility;
 
 import org.json.JSONException;
 import org.json.JSONObject;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.ArgumentCaptor;
 import org.mockito.Matchers;
+import org.mockito.Mockito;
 import org.powermock.api.mockito.PowerMockito;
 import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.reflect.Whitebox;
 import org.robolectric.RuntimeEnvironment;
 
 import java.math.BigDecimal;
 import java.util.Currency;
 import java.util.Locale;
-import java.util.UUID;
 import java.util.concurrent.Executor;
 import java.util.concurrent.ScheduledThreadPoolExecutor;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyBoolean;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-import static org.powermock.api.mockito.PowerMockito.doReturn;
-import static org.powermock.api.mockito.PowerMockito.mock;
-import static org.powermock.api.mockito.PowerMockito.mockStatic;
-import static org.powermock.api.mockito.PowerMockito.spy;
-import static org.powermock.api.mockito.PowerMockito.verifyNew;
-import static org.powermock.api.mockito.PowerMockito.verifyStatic;
-import static org.powermock.api.mockito.PowerMockito.when;
-import static org.powermock.api.mockito.PowerMockito.whenNew;
-
 @PrepareForTest({
-        AppEvent.class,
-        AppEventQueue.class,
         AppEventUtility.class,
         AppEventsLogger.class,
         AppEventsLoggerImpl.class,
-        AttributionIdentifiers.class,
-        FacebookSdk.class,
-        FetchedAppGateKeepersManager.class,
-        GraphRequest.class,
-        InternalAppEventsLogger.class,
-        ScheduledThreadPoolExecutor.class,
+        FacebookSdk.class
 })
 public class AppEventsLoggerTest extends FacebookPowerMockTestCase {
 
+    private final String TAG = AppEventsLoggerTest.class.getCanonicalName();
+
     private final Executor mockExecutor = new FacebookSerialExecutor();
 
+    private final String mockAppID = "fb_mock_id";
+
+    private AppEventsLoggerImpl logger;
+
     @Before
-    public void before() throws Exception {
-        spy(FacebookSdk.class);
-        when(FacebookSdk.isInitialized()).thenReturn(true);
-        when(FacebookSdk.getApplicationContext()).thenReturn(RuntimeEnvironment.application);
-        when(FacebookSdk.getExecutor()).thenReturn(mockExecutor);
-        FacebookSdk.setApplicationId("12345");
-
-        // Stub empty implementations to AppEventQueue to not really flush events
-        mockStatic(AppEventQueue.class);
-        mockStatic(ScheduledThreadPoolExecutor.class);
-
-        // Disable AppEventUtility.isMainThread since executor now runs in main thread
-        spy(AppEventUtility.class);
-        doReturn(false).when(AppEventUtility.class, "isMainThread");
-        mockStatic(InternalAppEventsLogger.class);
-        spy(InternalAppEventsLogger.class);
-        doReturn(mockExecutor).when(InternalAppEventsLogger.class, "getAnalyticsExecutor");
-
-        AppEvent mockEvent = mock(AppEvent.class);
-        when(mockEvent.getIsImplicit()).thenReturn(true);
-        whenNew(AppEvent.class).withAnyArguments().thenReturn(mockEvent);
-
-        mockStatic(AttributionIdentifiers.class);
-        when(AttributionIdentifiers.getAttributionIdentifiers(any(Context.class))).thenReturn(null);
-
-        // Disable Gatekeeper
-        mockStatic(FetchedAppGateKeepersManager.class);
-        when(FetchedAppGateKeepersManager.getGateKeeperForKey(
-                anyString(), anyString(), anyBoolean())).thenReturn(false);
+    @Override
+    public void setUp() {
+        super.setUp();
+        PowerMockito.spy(FacebookSdk.class);
+        Whitebox.setInternalState(FacebookSdk.class, "sdkInitialized", true);
+        Whitebox.setInternalState(FacebookSdk.class, "applicationId", mockAppID);
+        Whitebox.setInternalState(
+                FacebookSdk.class, "applicationContext", RuntimeEnvironment.application);
+        Whitebox.setInternalState(FacebookSdk.class, "executor", mockExecutor);
+
+        try {
+            logger = PowerMockito.mock(AppEventsLoggerImpl.class);
+            PowerMockito.whenNew(AppEventsLoggerImpl.class).withAnyArguments().thenReturn(logger);
+            // Disable AppEventUtility.isMainThread since executor now runs in main thread
+            PowerMockito.spy(AppEventUtility.class);
+            PowerMockito.doReturn(false).when(AppEventUtility.class, "isMainThread");
+            PowerMockito.spy(AppEventsLoggerImpl.class);
+            PowerMockito.doReturn(mockExecutor).when(
+                    AppEventsLoggerImpl.class, "getAnalyticsExecutor");
+        } catch (Exception e) {
+            Log.e(TAG, "Fail to set up AppEventsLoggerTest: " + e.getMessage());
+        }
     }
 
     @Test
-    public void testAutoLoggerAppEventsEnabled() throws Exception {
-        when(FacebookSdk.getAutoLogAppEventsEnabled()).thenReturn(true);
+    public void testAppEventsLoggerLogFunctions() throws Exception {
+        final String mockEventName = "fb_mock_event";
+        final Bundle mockPayload = new Bundle();
+        final String mockAction = "fb_mock_action";
+        final BigDecimal mockVal = new BigDecimal(1.0);
+        final Currency mockCurrency = Currency.getInstance(Locale.US);
+
+        AppEventsLogger.newLogger(RuntimeEnvironment.application).logEvent(mockEventName);
+        Mockito.verify(logger, Mockito.times(1)).logEvent(mockEventName);
+
+        AppEventsLogger.newLogger(RuntimeEnvironment.application).logEvent(mockEventName, 1);
+        Mockito.verify(logger, Mockito.times(1)).logEvent(mockEventName, 1);
+
+        AppEventsLogger.newLogger(RuntimeEnvironment.application).logEvent(mockEventName, null);
+        Mockito.verify(logger, Mockito.times(1)).logEvent(mockEventName, null);
+
+        AppEventsLogger.newLogger(RuntimeEnvironment.application).logEvent(mockEventName, 1, null);
+        Mockito.verify(logger, Mockito.times(1)).logEvent(mockEventName, 1, null);
+
+        AppEventsLogger.newLogger(RuntimeEnvironment.application).logPushNotificationOpen(mockPayload);
+        Mockito.verify(logger, Mockito.times(1)).logPushNotificationOpen(
+                Matchers.argThat(new AppEventTestUtilities.BundleMatcher(mockPayload)),
+                Matchers.isNull(String.class)
+        );
+
+        AppEventsLogger.newLogger(RuntimeEnvironment.application).logPushNotificationOpen(
+                mockPayload, mockAction);
+        Mockito.verify(logger, Mockito.times(1)).logPushNotificationOpen(
+                Matchers.argThat(new AppEventTestUtilities.BundleMatcher(mockPayload)),
+                Matchers.eq(mockAction)
+        );
+
+        AppEventsLogger.newLogger(RuntimeEnvironment.application).logProductItem(
+                "F40CEE4E-471E-45DB-8541-1526043F4B21",
+                AppEventsLogger.ProductAvailability.IN_STOCK,
+                AppEventsLogger.ProductCondition.NEW,
+                "description",
+                "https://www.sample.com",
+                "https://www.link.com",
+                "title",
+                mockVal,
+                mockCurrency,
+                "GTIN",
+                "MPN",
+                "BRAND",
+                mockPayload);
+        Mockito.verify(logger, Mockito.times(1)).logProductItem(
+                Matchers.eq("F40CEE4E-471E-45DB-8541-1526043F4B21"),
+                Matchers.eq(AppEventsLogger.ProductAvailability.IN_STOCK),
+                Matchers.eq(AppEventsLogger.ProductCondition.NEW),
+                Matchers.eq("description"),
+                Matchers.eq("https://www.sample.com"),
+                Matchers.eq("https://www.link.com"),
+                Matchers.eq("title"),
+                Matchers.eq(mockVal),
+                Matchers.eq(mockCurrency),
+                Matchers.eq("GTIN"),
+                Matchers.eq("MPN"),
+                Matchers.eq("BRAND"),
+                Matchers.argThat(new AppEventTestUtilities.BundleMatcher(mockPayload))
+        );
 
-        whenNew(AppEventsLoggerImpl.class).withAnyArguments().thenReturn(null);
-        AppEventsLogger.initializeLib(null, null);
+        AppEventsLogger.newLogger(RuntimeEnvironment.application).logPurchase(
+                mockVal, mockCurrency);
+        Mockito.verify(logger, Mockito.times(1)).logPurchase(
+                Matchers.eq(mockVal), Matchers.eq(mockCurrency));
+
+        AppEventsLogger.newLogger(RuntimeEnvironment.application).logPurchase(
+                mockVal, mockCurrency, mockPayload);
+        Mockito.verify(logger, Mockito.times(1)).logPurchase(
+                Matchers.eq(mockVal),
+                Matchers.eq(mockCurrency),
+                Matchers.argThat(new AppEventTestUtilities.BundleMatcher(mockPayload)));
+    }
 
-        verifyNew(AppEventsLoggerImpl.class).withArguments(any(), any(), any());
+    @Test
+    public void testAutoLoggerAppEventsEnabled() throws Exception {
+        Whitebox.setInternalState(
+                AppEventsLoggerImpl.class,
+                "backgroundExecutor",
+                PowerMockito.mock(ScheduledThreadPoolExecutor.class));
+        PowerMockito.doReturn(true).when(
+                FacebookSdk.class, "getAutoLogAppEventsEnabled");
+
+        AppEventsLogger.initializeLib(FacebookSdk.getApplicationContext(), mockAppID);
+
+        PowerMockito.verifyNew(AppEventsLoggerImpl.class).withArguments(
+                Matchers.any(),
+                Matchers.eq(mockAppID),
+                Matchers.any());
     }
 
     @Test
     public void testAutoLoggerAppEventsDisabled() throws Exception {
-        when(FacebookSdk.getAutoLogAppEventsEnabled()).thenReturn(false);
-
-        whenNew(AppEventsLoggerImpl.class).withAnyArguments().thenReturn(null);
-        AppEventsLogger.initializeLib(null, null);
-
-        verifyNew(AppEventsLoggerImpl.class, never()).withArguments(any(), any(), any());
+        Whitebox.setInternalState(
+                AppEventsLoggerImpl.class,
+                "backgroundExecutor",
+                PowerMockito.mock(ScheduledThreadPoolExecutor.class));
+        PowerMockito.doReturn(false).when(FacebookSdk.class, "getAutoLogAppEventsEnabled");
+
+        AppEventsLogger.initializeLib(FacebookSdk.getApplicationContext(), mockAppID);
+
+        PowerMockito.verifyNew(AppEventsLoggerImpl.class, Mockito.never()).withArguments(
+                Matchers.any(),
+                Matchers.any(),
+                Matchers.any());
     }
 
     @Test
@@ -149,25 +208,16 @@ public void testSetAndClearUserData() throws JSONException {
         TestUtils.assertEquals(expectedUserData, actualUserData);
 
         AppEventsLogger.clearUserData();
-        assertTrue(AppEventsLogger.getUserData().isEmpty());
+        Assert.assertTrue(AppEventsLogger.getUserData().isEmpty());
     }
 
     @Test
     public void testSetAndClearUserID() {
         String userID = "12345678";
         AppEventsLogger.setUserID(userID);
-        assertEquals(AppEventsLogger.getUserID(), userID);
+        Assert.assertEquals(AppEventsLogger.getUserID(), userID);
         AppEventsLogger.clearUserID();
-        assertNull(AppEventsLogger.getUserID());
-    }
-
-    @Test
-    public void testSetFlushBehavior() {
-        AppEventsLogger.setFlushBehavior(AppEventsLogger.FlushBehavior.AUTO);
-        assertEquals(AppEventsLogger.FlushBehavior.AUTO, AppEventsLogger.getFlushBehavior());
-
-        AppEventsLogger.setFlushBehavior(AppEventsLogger.FlushBehavior.EXPLICIT_ONLY);
-        assertEquals(AppEventsLogger.FlushBehavior.EXPLICIT_ONLY, AppEventsLogger.getFlushBehavior());
+        Assert.assertNull(AppEventsLogger.getUserID());
     }
 
     @Test
@@ -180,246 +230,32 @@ public void testUserIDAddedToAppEvent() throws Exception {
                 "123",
                 true,
                 FacebookSdk.getApplicationContext());
-        assertEquals(jsonObject.getString("app_user_id"), userID);
+        Assert.assertEquals(jsonObject.getString("app_user_id"), userID);
     }
 
     @Test
-    public void testActivateApp() {
-        AppEventsLogger.activateApp(RuntimeEnvironment.application);
-        mockStatic(ActivityLifecycleTracker.class);
-        verifyStatic();
-    }
-
-    @Test
-    public void testLogEvent() throws Exception {
-        AppEventsLogger.newLogger(FacebookSdk.getApplicationContext()).logEvent("fb_mock_event");
-        verifyNew(AppEvent.class).withArguments(
-                Matchers.anyString(),
-                Matchers.eq("fb_mock_event"),
-                Matchers.anyDouble(),
-                Matchers.any(Bundle.class),
-                Matchers.anyBoolean(),
-                Matchers.anyBoolean(),
-                Matchers.any(UUID.class));
-    }
-
-    @Test
-    public void testLogPurchase() throws Exception {
-        AppEventsLogger.newLogger(FacebookSdk.getApplicationContext()).logPurchase(
-                new BigDecimal(1.0), Currency.getInstance(Locale.US));
-        Bundle parameters = new Bundle();
-        parameters.putString(
-                AppEventsConstants.EVENT_PARAM_CURRENCY,
-                Currency.getInstance(Locale.US).getCurrencyCode());
-
-        verifyNew(AppEvent.class).withArguments(
-                Matchers.anyString(),
-                Matchers.eq(AppEventsConstants.EVENT_NAME_PURCHASED),
-                Matchers.eq(1.0),
-                argThat(new AppEventTestUtilities.BundleMatcher(parameters)),
-                Matchers.anyBoolean(),
-                Matchers.anyBoolean(),
-                Matchers.any(UUID.class));
-    }
-
-    @Test
-    public void testLogProductItemWithGtinMpnBrand() throws Exception {
-        AppEventsLogger.newLogger(FacebookSdk.getApplicationContext()).logProductItem(
-                "F40CEE4E-471E-45DB-8541-1526043F4B21",
-                AppEventsLogger.ProductAvailability.IN_STOCK,
-                AppEventsLogger.ProductCondition.NEW,
-                "description",
-                "https://www.sample.com",
-                "https://www.sample.com",
-                "title",
-                new BigDecimal(1.0),
-                Currency.getInstance(Locale.US),
-                "BLUE MOUNTAIN",
-                "BLUE MOUNTAIN",
-                "PHILZ",
-                null);
-        Bundle parameters = new Bundle();
-        parameters.putString(
-                Constants.EVENT_PARAM_PRODUCT_ITEM_ID,
-                "F40CEE4E-471E-45DB-8541-1526043F4B21");
-        parameters.putString(
-                Constants.EVENT_PARAM_PRODUCT_AVAILABILITY,
-                AppEventsLogger.ProductAvailability.IN_STOCK.name());
-        parameters.putString(
-                Constants.EVENT_PARAM_PRODUCT_CONDITION,
-                AppEventsLogger.ProductCondition.NEW.name());
-        parameters.putString(Constants.EVENT_PARAM_PRODUCT_DESCRIPTION, "description");
-        parameters.putString(Constants.EVENT_PARAM_PRODUCT_IMAGE_LINK, "https://www.sample.com");
-        parameters.putString(Constants.EVENT_PARAM_PRODUCT_LINK, "https://www.sample.com");
-        parameters.putString(Constants.EVENT_PARAM_PRODUCT_TITLE, "title");
-        parameters.putString(Constants.EVENT_PARAM_PRODUCT_PRICE_AMOUNT,
-                (new BigDecimal(1.0)).setScale(3, BigDecimal.ROUND_HALF_UP).toString());
-        parameters.putString(
-                Constants.EVENT_PARAM_PRODUCT_PRICE_CURRENCY,
-                Currency.getInstance(Locale.US).getCurrencyCode());
-        parameters.putString(Constants.EVENT_PARAM_PRODUCT_GTIN, "BLUE MOUNTAIN");
-        parameters.putString(Constants.EVENT_PARAM_PRODUCT_MPN, "BLUE MOUNTAIN");
-        parameters.putString(Constants.EVENT_PARAM_PRODUCT_BRAND, "PHILZ");
-
-        verifyNew(AppEvent.class).withArguments(
-                Matchers.anyString(),
-                Matchers.eq(AppEventsConstants.EVENT_NAME_PRODUCT_CATALOG_UPDATE),
-                Matchers.anyDouble(),
-                argThat(new AppEventTestUtilities.BundleMatcher(parameters)),
-                Matchers.anyBoolean(),
-                Matchers.anyBoolean(),
-                Matchers.any(UUID.class));
-    }
-
-    @Test
-    public void testLogProductItemWithoutGtinMpnBrand() throws Exception {
-        AppEventsLogger.newLogger(FacebookSdk.getApplicationContext()).logProductItem(
-                "F40CEE4E-471E-45DB-8541-1526043F4B21",
-                AppEventsLogger.ProductAvailability.IN_STOCK,
-                AppEventsLogger.ProductCondition.NEW,
-                "description",
-                "https://www.sample.com",
-                "https://www.sample.com",
-                "title",
-                new BigDecimal(1.0),
-                Currency.getInstance(Locale.US),
-                null,
-                null,
-                null,
-                null);
-        Bundle parameters = new Bundle();
-        parameters.putString(
-                Constants.EVENT_PARAM_PRODUCT_ITEM_ID,
-                "F40CEE4E-471E-45DB-8541-1526043F4B21");
-        parameters.putString(
-                Constants.EVENT_PARAM_PRODUCT_AVAILABILITY,
-                AppEventsLogger.ProductAvailability.IN_STOCK.name());
-        parameters.putString(
-                Constants.EVENT_PARAM_PRODUCT_CONDITION,
-                AppEventsLogger.ProductCondition.NEW.name());
-        parameters.putString(Constants.EVENT_PARAM_PRODUCT_DESCRIPTION, "description");
-        parameters.putString(Constants.EVENT_PARAM_PRODUCT_IMAGE_LINK, "https://www.sample.com");
-        parameters.putString(Constants.EVENT_PARAM_PRODUCT_LINK, "https://www.sample.com");
-        parameters.putString(Constants.EVENT_PARAM_PRODUCT_TITLE, "title");
-        parameters.putString(Constants.EVENT_PARAM_PRODUCT_PRICE_AMOUNT,
-                (new BigDecimal(1.0)).setScale(3, BigDecimal.ROUND_HALF_UP).toString());
-        parameters.putString(
-                Constants.EVENT_PARAM_PRODUCT_PRICE_CURRENCY,
-                Currency.getInstance(Locale.US).getCurrencyCode());
-
-        verifyNew(AppEvent.class, never()).withArguments(
-                Matchers.anyString(),
-                Matchers.eq(AppEventsConstants.EVENT_NAME_PRODUCT_CATALOG_UPDATE),
-                Matchers.anyDouble(),
-                argThat(new AppEventTestUtilities.BundleMatcher(parameters)),
-                Matchers.anyBoolean(),
-                Matchers.anyBoolean(),
-                Matchers.any(UUID.class));
-    }
-
-    @Test
-    public void testLogPushNotificationOpen() throws Exception {
-        Bundle payload = new Bundle();
-        payload.putString("fb_push_payload", "{\"campaign\" : \"testCampaign\"}");
-        AppEventsLogger.newLogger(FacebookSdk.getApplicationContext()).logPushNotificationOpen(payload);
-        Bundle parameters = new Bundle();
-        parameters.putString("fb_push_campaign", "testCampaign");
-
-        verifyNew(AppEvent.class).withArguments(
-                Matchers.anyString(),
-                Matchers.eq("fb_mobile_push_opened"),
-                Matchers.anyDouble(),
-                argThat(new AppEventTestUtilities.BundleMatcher(parameters)),
-                Matchers.anyBoolean(),
-                Matchers.anyBoolean(),
-                Matchers.any(UUID.class));
-    }
-
-    @Test
-    public void testLogPushNotificationOpenWithoutCampaign() throws Exception {
-        Bundle payload = new Bundle();
-        payload.putString("fb_push_payload", "{}");
-        AppEventsLogger.newLogger(FacebookSdk.getApplicationContext()).logPushNotificationOpen(payload);
-
-        verifyNew(AppEvent.class, never()).withArguments(
-                Matchers.anyString(),
-                Matchers.anyString(),
-                Matchers.anyDouble(),
-                Matchers.any(Bundle.class),
-                Matchers.anyBoolean(),
-                Matchers.anyBoolean(),
-                Matchers.any(UUID.class));
-    }
-
-    @Test
-    public void testLogPushNotificationOpenWithAction() throws Exception {
-        Bundle payload = new Bundle();
-        payload.putString("fb_push_payload", "{\"campaign\" : \"testCampaign\"}");
-        AppEventsLogger.newLogger(FacebookSdk.getApplicationContext()).logPushNotificationOpen(payload, "testAction");
-        Bundle parameters = new Bundle();
-        parameters.putString("fb_push_campaign", "testCampaign");
-        parameters.putString("fb_push_action", "testAction");
-
-        verifyNew(AppEvent.class).withArguments(
-                Matchers.anyString(),
-                Matchers.eq("fb_mobile_push_opened"),
-                Matchers.anyDouble(),
-                argThat(new AppEventTestUtilities.BundleMatcher(parameters)),
-                Matchers.anyBoolean(),
-                Matchers.anyBoolean(),
-                Matchers.any(UUID.class));
-    }
-
-    @Test
-    public void testLogPushNotificationOpenWithoutPayload() throws Exception {
-        Bundle payload = new Bundle();
-        AppEventsLogger.newLogger(FacebookSdk.getApplicationContext()).logPushNotificationOpen(payload);
-
-        verifyNew(AppEvent.class, never()).withArguments(
-                Matchers.anyString(),
-                Matchers.anyString(),
-                Matchers.anyDouble(),
-                Matchers.any(Bundle.class),
-                Matchers.anyBoolean(),
-                Matchers.anyBoolean(),
-                Matchers.any(UUID.class));
+    public void testActivateApp() throws Exception {
+        Application mockApplication = PowerMockito.mock(Application.class);
+        PowerMockito.doCallRealMethod().when(
+                FacebookSdk.class,
+                "publishInstallAsync",
+                Matchers.any(Context.class), Matchers.anyString()
+        );
+        AppEventsLogger.activateApp(mockApplication);
+        Mockito.verify(mockApplication, Mockito.times(1)).registerActivityLifecycleCallbacks(
+                Matchers.any(Application.ActivityLifecycleCallbacks.class)
+        );
     }
 
     @Test
-    public void testSetPushNotificationsRegistrationId()  throws Exception {
+    public void testSetPushNotificationsRegistrationId() throws Exception {
         String mockNotificationId = "123";
-        AppEventsLogger.setPushNotificationsRegistrationId(mockNotificationId);
-
-        verifyNew(AppEvent.class).withArguments(
-                Matchers.anyString(),
-                Matchers.eq(AppEventsConstants.EVENT_NAME_PUSH_TOKEN_OBTAINED),
-                Matchers.anyDouble(),
-                Matchers.any(Bundle.class),
-                Matchers.anyBoolean(),
-                Matchers.anyBoolean(),
-                Matchers.any(UUID.class));
-        assertEquals(mockNotificationId, InternalAppEventsLogger.getPushNotificationsRegistrationId());
-    }
-
-    @Test
-    public void testPublishInstall() throws Exception {
-        GraphRequest mockRequest = mock(GraphRequest.class);
-        whenNew(GraphRequest.class).withAnyArguments().thenReturn(mockRequest);
-        String expectedEvent = "MOBILE_APP_INSTALL";
-        String expectedUrl = "mockAppID/activities";
-        final ArgumentCaptor<JSONObject> captor = ArgumentCaptor.forClass(JSONObject.class);
-
-        FacebookSdk.publishInstallAsync(FacebookSdk.getApplicationContext(), "mockAppID");
-
-        verifyNew(GraphRequest.class).withArguments(
-                Matchers.isNull(),
-                Matchers.eq(expectedUrl),
-                Matchers.isNull(),
-                Matchers.eq(HttpMethod.POST),
-                Matchers.isNull()
+        PowerMockito.doCallRealMethod().when(
+                AppEventsLoggerImpl.class,
+                "setPushNotificationsRegistrationId",
+                mockNotificationId
         );
-        verify(mockRequest).setGraphObject(captor.capture());
-        assertEquals(expectedEvent, captor.getValue().getString("event"));
+        AppEventsLogger.setPushNotificationsRegistrationId(mockNotificationId);
     }
 
 }
diff --git a/facebook/src/test/java/com/facebook/appevents/codeless/CodelessTestBase.java b/facebook/src/test/java/com/facebook/appevents/codeless/CodelessTestBase.java
index c85113383..279a5e73d 100644
--- a/facebook/src/test/java/com/facebook/appevents/codeless/CodelessTestBase.java
+++ b/facebook/src/test/java/com/facebook/appevents/codeless/CodelessTestBase.java
@@ -36,7 +36,9 @@
     protected Activity activity;
 
     @Before
-    public void setup() {
+    @Override
+    public void setUp() {
+        super.setUp();
         activity = Robolectric.buildActivity(Activity.class).create().get();
         root = new LinearLayout(activity);
 
