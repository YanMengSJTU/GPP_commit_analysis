diff --git a/facebook/AndroidManifest.xml b/facebook/AndroidManifest.xml
index 2f9284fb0..2929063e9 100644
--- a/facebook/AndroidManifest.xml
+++ b/facebook/AndroidManifest.xml
@@ -16,7 +16,7 @@
 -->
 
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-      package="com.facebook.android">
+      package="com.explodingbarrel.fast">
     <application/>
     <uses-sdk android:minSdkVersion="8" />
 </manifest>
diff --git a/facebook/build.sh b/facebook/build.sh
index 005863027..c3c9367fd 100755
--- a/facebook/build.sh
+++ b/facebook/build.sh
@@ -3,3 +3,4 @@
 ant debug
 cp -f bin/classes.jar ~/Fast/Assets/Plugins/Android/android_facebook_sdk.jar
 cp -f libs/android-support-v4.jar ~/Fast/Assets/Plugins/Android/android-support-v4.jar
+cp -rf res/ ~/Fast/Assets/Plugins/Android/res/
diff --git a/facebook/src/com/explodingbarrel/FacebookIAPMainActivity.java b/facebook/src/com/explodingbarrel/FacebookIAPMainActivity.java
index c56fdb5a9..d2472bc83 100644
--- a/facebook/src/com/explodingbarrel/FacebookIAPMainActivity.java
+++ b/facebook/src/com/explodingbarrel/FacebookIAPMainActivity.java
@@ -10,9 +10,13 @@
 
 import com.unity3d.player.*;
 import com.facebook.*;
+import com.facebook.widget.WebDialog;
 
 import java.util.Arrays;
 import java.util.List;
+import java.util.Iterator;
+
+import org.json.JSONObject;
 
 
 public class FacebookIAPMainActivity extends com.explodingbarrel.iap.MainActivity
@@ -24,25 +28,19 @@
     protected void onActivityResult(int requestCode, int resultCode, Intent data)
     {
         super.onActivityResult( requestCode, resultCode, data );
-    }
-    
-    private Session.StatusCallback SessionStateCallback = new Session.StatusCallback()
-    {
-        @Override
-        public void call(Session session, SessionState state, Exception exception)
+        Session session = Session.getActiveSession();
+        if( session != null )
         {
-            onSessionStateChange( session, state, exception );
+            session.onActivityResult(this, requestCode, resultCode, data);
         }
-    };
+    }
+    
+   
 
     private String AppId;
     private Session CurrentSession = null;
 
-    private String MessageHandlerName;
-    private String AuthorizeSuccessMessage;
-    private String AuthorizeFailedMessage;
-
-    boolean Init( String appId, String messageHandler, String authorizeSuccess, String authorizeFail )
+    boolean FacebookInit( String appId )
     {
         Log.d(TAG, "Facebook Init : appId = " + appId );
 
@@ -50,13 +48,10 @@ boolean Init( String appId, String messageHandler, String authorizeSuccess, Stri
         
         if( this.CurrentSession == null )
         {
-            this.MessageHandlerName = messageHandler;
-            this.AuthorizeSuccessMessage = authorizeSuccess;
-            this.AuthorizeFailedMessage = authorizeFail;
-
             this.CurrentSession = new Session.Builder( this ).setApplicationId( appId ).build();
             if( this.CurrentSession != null )
             {
+                Session.setActiveSession( this.CurrentSession );
                 initialized = true;
                 Log.d(TAG, "Facebook Init : Success" );
             }
@@ -73,7 +68,59 @@ boolean Init( String appId, String messageHandler, String authorizeSuccess, Stri
         return initialized;
     }
     
-    boolean Login( String scope, boolean allowUI )
+    private class OpenForReadSessionStateCallback implements Session.StatusCallback
+    {
+        private String MessageHandler;
+        private String SuccessMsg;
+        private String FailMsg;
+    
+        public OpenForReadSessionStateCallback( String messageHandler, String successMsg, String failMsg )
+        {
+            this.MessageHandler = messageHandler;
+            this.SuccessMsg = successMsg;
+            this.FailMsg = failMsg;
+        }
+    
+        @Override
+        public void call(Session session, SessionState state, Exception exception)
+        {
+            Log.d(TAG, "Facebook onSessionStateChange : session = " + session + " state = " + state + " exception = " + exception);
+            switch( state )
+            {
+                case OPENED:
+                {
+                    String accessToken = session.getAccessToken();
+                    UnityPlayer.UnitySendMessage( this.MessageHandler, this.SuccessMsg, accessToken );
+                    Log.d(TAG, "Facebook onSessionStateChange: OPENED accessToken = " + accessToken );
+                    break;
+                }
+                case CLOSED_LOGIN_FAILED:
+                {
+                    String error = "Unknown error";
+                    if( exception != null )
+                    {
+                        error = exception.getMessage();
+                    }
+                    Log.d(TAG, "Facebook onSessionStateChange: CLOSED_LOGIN_FAILED exception = " + error );
+                    UnityPlayer.UnitySendMessage( this.MessageHandler, this.FailMsg, "true" );
+                    break;
+                }
+                
+                case CLOSED:
+                {
+                    UnityPlayer.UnitySendMessage( this.MessageHandler, this.FailMsg, "false" );
+                    break;
+                }
+                
+                default:
+                {
+                    break;
+                }
+            }
+        }
+    };
+
+    boolean FacebookLogin( String scope, boolean allowUI, String messageHandler, String authorizeSuccess, String authorizeFail )
     {
         Log.d( TAG, "Facebook Login : scope = " + scope + " allowUI = " + allowUI );
 
@@ -86,10 +133,10 @@ boolean Login( String scope, boolean allowUI )
             {
                 List<String> permissions = Arrays.asList( scope.split( "," ) );
                 openRequest.setPermissions( permissions );
-                openRequest.setCallback( this.SessionStateCallback );
+                openRequest.setCallback( new OpenForReadSessionStateCallback( messageHandler, authorizeSuccess, authorizeFail ) );
                 this.CurrentSession.openForRead( openRequest );
                 success = true;
-                Log.d(TAG, "Facebook Login : Success" );
+                Log.d(TAG, "Facebook Login : Attempt valid - Pending" );
             }
             else
             {
@@ -98,45 +145,129 @@ boolean Login( String scope, boolean allowUI )
         }
         else
         {
-            Log.d(TAG, "Facebook Login : Failed - CurrentSession does not exist. Call Init before Login" );
+            Log.d(TAG, "Facebook Login : Failed - CurrentSession does not exist. Call FacebookInit before FacebookLogin" );
         }
 
         return success;
     }
 
-    void Logout()
+    boolean FacebookLogout()
     {
+        Log.d( TAG, "Facebook Logout" );
+
+        boolean success = false;
+
         if( this.CurrentSession != null )
         {
             this.CurrentSession.close();
+            Log.d( TAG, "Facebook Logout : Success" );
+            success = true;
+        }
+        else
+        {
+            Log.d(TAG, "Facebook Logout : Failed - CurrentSession does not exist. Call FacebookInit before FacebookLogout" );
         }
+
+        return success;
     }
 
-    void onSessionStateChange(Session session, SessionState state, Exception exception)
+    boolean FacebookUI( final String action, final String params, final String messageHandler, final String successMsg, final String failMsg )
     {
-        if( session == this.CurrentSession )
+        Log.d(TAG, "Facebook UI : action = " + action + " params = " + params );
+
+        boolean success = false;
+
+        if( this.CurrentSession != null )
         {
-            Log.d(TAG, "Facebook onSessionStateChange : state = " + state );
-            switch( state )
+            this.runOnUiThread( new Runnable()
             {
-                case OPENED:
-                {
-                    String accessToken = session.getAccessToken();
-                    UnityPlayer.UnitySendMessage( this.MessageHandlerName, this.AuthorizeSuccessMessage, accessToken );
-                    Log.d(TAG, "Facebook OPENED : accessToken = " + accessToken );
-                    break;
-                }
-                case CLOSED:
-                case CLOSED_LOGIN_FAILED:
+                public void run()
                 {
-                    UnityPlayer.UnitySendMessage( this.MessageHandlerName, this.AuthorizeFailedMessage, "0" );
-                    break;
+                    Bundle parameters = ConvertJSONToBundle( params );
+                    if( action.equalsIgnoreCase( "feed" ) )
+                    {
+                        FeedDialogCompletionListener listener = new FeedDialogCompletionListener( messageHandler, successMsg, failMsg );
+                        WebDialog feedDialog = new WebDialog.FeedDialogBuilder( FacebookIAPMainActivity.this, CurrentSession, parameters ).setOnCompleteListener( listener ).build();
+                        if( feedDialog != null )
+                        {
+                            feedDialog.show();
+                            Log.d(TAG, "Facebook UI : Pending" );
+                        }
+                        else
+                        {
+                            Log.d(TAG, "Facebook UI : Failed - Couldn't crate WebDialog using WebDialog.FeedDialogBuilder" );
+                        }
+                    }
+                    else
+                    {
+                        Log.d(TAG, "Facebook UI : Failed - Unknown action '" + action + "'" );
+                    }
                 }
-                default:
+            } );
+            success = true;
+        }
+        else
+        {
+            Log.d(TAG, "Facebook UI : Failed - CurrentSession does not exist. Call FacebookInit and FacebookLogin before FacebookUI" );
+        }
+
+        return success;
+    }
+
+    private class FeedDialogCompletionListener implements WebDialog.OnCompleteListener
+    {
+        private String MessageHandler;
+        private String SuccessMsg;
+        private String FailMsg;
+    
+        public FeedDialogCompletionListener( String messageHandler, String successMsg, String failMsg )
+        {
+            this.MessageHandler = messageHandler;
+            this.SuccessMsg = successMsg;
+            this.FailMsg = failMsg;
+        }
+    
+        @Override
+        public void onComplete(Bundle values, FacebookException error)
+        {
+            if( error == null )
+            {
+                UnityPlayer.UnitySendMessage( this.MessageHandler, this.SuccessMsg, values.toString() );
+                Log.d(TAG, "Facebook UI : Success - values = " + values );
+            }
+            else
+            {
+                UnityPlayer.UnitySendMessage( this.MessageHandler, this.FailMsg, error.getMessage() );
+                Log.d(TAG, "Facebook UI : Failed - values = " + values + " error = " + error.getMessage() );
+            }
+        }
+    };
+
+    Bundle ConvertJSONToBundle( String json )
+    {
+        Bundle bundle = new Bundle();
+
+        try
+        {
+            JSONObject jsonObj = new JSONObject( json );
+            if( jsonObj != null )
+            {
+                Iterator it = jsonObj.keys();
+                while( it.hasNext() == true )
                 {
-                    break;
+                    String key = (String)it.next();
+                    Object value = jsonObj.get( key );
+                    if( value instanceof String )
+                    {
+                        bundle.putString( key, (String) value );
+                    }
                 }
             }
         }
+        catch (org.json.JSONException ex)
+        {
+        }
+
+        return bundle;
     }
- }
+}
