diff --git a/Bolts/src/bolts/AppLinkNavigation.java b/Bolts/src/bolts/AppLinkNavigation.java
index d8eacf4..3e4c359 100644
--- a/Bolts/src/bolts/AppLinkNavigation.java
+++ b/Bolts/src/bolts/AppLinkNavigation.java
@@ -22,7 +22,9 @@
 import org.json.JSONObject;
 
 import java.net.URL;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
 /**
  * Represents a pending request to navigate to an App Link. Most developers will simply use
@@ -31,8 +33,14 @@
  * by creating AppLinkNavigations themselves.
  */
 public class AppLinkNavigation {
+
+  public static final String APP_LINK_NAVIGATE_OUT_EVENT_NAME = "al_nav_out";
+
   private static final String KEY_NAME_USER_AGENT = "user_agent";
   private static final String KEY_NAME_VERSION = "version";
+  private static final String KEY_NAME_REFERER_APP_LINK = "referer_app_link";
+  private static final String KEY_NAME_REFERER_APP_LINK_APP_NAME = "app_name";
+  private static final String KEY_NAME_REFERER_APP_LINK_PACKAGE = "package";
   private static final String VERSION = "1.0";
 
   private static AppLinkResolver defaultResolver;
@@ -45,15 +53,28 @@
     /**
      * Indicates that the navigation failed and no app was opened.
      */
-    FAILED,
+    FAILED("failed", false),
     /**
      * Indicates that the navigation succeeded by opening the URL in the browser.
      */
-    WEB,
+    WEB("web", true),
     /**
      * Indicates that the navigation succeeded by opening the URL in an app on the device.
      */
-    APP,
+    APP("app", true);
+
+    private String code;
+    private boolean succeeded;
+    public String getCode() {
+      return code;
+    }
+    public boolean isSucceeded() {
+      return succeeded;
+    }
+    NavigationResult(String code, boolean success) {
+      this.code = code;
+      this.succeeded = success;
+    }
   }
 
   private final AppLink appLink;
@@ -114,12 +135,19 @@ public Bundle getExtras() {
   /**
    * Creates a bundle containing the final, constructed App Link data to be used in navigation.
    */
-  private Bundle buildAppLinkDataForNavigation() {
+  private Bundle buildAppLinkDataForNavigation(Context context) {
     Bundle data = new Bundle();
+    Bundle refererAppLinkData = new Bundle();
+    String refererAppName = context.getString(context.getApplicationInfo().labelRes);
+    String refererAppPackage = context.getPackageName();
+    refererAppLinkData.putString(KEY_NAME_REFERER_APP_LINK_APP_NAME, refererAppName);
+    refererAppLinkData.putString(KEY_NAME_REFERER_APP_LINK_PACKAGE, refererAppPackage);
+
     data.putAll(getAppLinkData());
     data.putString(AppLinks.KEY_NAME_TARGET, getAppLink().getSourceUrl().toString());
     data.putString(KEY_NAME_VERSION, VERSION);
     data.putString(KEY_NAME_USER_AGENT, "Bolts Android " + Bolts.VERSION);
+    data.putBundle(KEY_NAME_REFERER_APP_LINK, refererAppLinkData);
     data.putBundle(AppLinks.KEY_NAME_EXTRAS, getExtras());
     return data;
   }
@@ -232,8 +260,7 @@ private JSONObject getJSONForBundle(Bundle bundle) throws JSONException {
    */
   public NavigationResult navigate(Context context) {
     PackageManager pm = context.getPackageManager();
-
-    Bundle finalAppLinkData = buildAppLinkDataForNavigation();
+    Bundle finalAppLinkData = buildAppLinkDataForNavigation(context);
 
     Intent eligibleTargetIntent = null;
     for (AppLink.Target target : getAppLink().getTargets()) {
@@ -256,31 +283,49 @@ public NavigationResult navigate(Context context) {
       }
     }
 
+    Intent outIntent = null;
+    NavigationResult result = NavigationResult.FAILED;
     if (eligibleTargetIntent != null) {
-      context.startActivity(eligibleTargetIntent);
-      return NavigationResult.APP;
-    }
-
-    // Fall back to the web if it's available
-    Uri webUrl = getAppLink().getWebUrl();
-    if (webUrl != null) {
-      JSONObject appLinkDataJson;
-      try {
-        appLinkDataJson = getJSONForBundle(finalAppLinkData);
-      } catch (JSONException e) {
-        throw new RuntimeException(e);
+      outIntent = eligibleTargetIntent;
+      result = NavigationResult.APP;
+    } else {
+      // Fall back to the web if it's available
+      Uri webUrl = getAppLink().getWebUrl();
+      if (webUrl != null) {
+        JSONObject appLinkDataJson;
+        try {
+          appLinkDataJson = getJSONForBundle(finalAppLinkData);
+        } catch (JSONException e) {
+          sendAppLinkNavigateEventBroadcast(context, eligibleTargetIntent, NavigationResult.FAILED, e);
+          throw new RuntimeException(e);
+        }
+        webUrl = webUrl.buildUpon()
+            .appendQueryParameter(AppLinks.KEY_NAME_APPLINK_DATA, appLinkDataJson.toString())
+            .build();
+        outIntent = new Intent(Intent.ACTION_VIEW, webUrl);
+        result = NavigationResult.WEB;
       }
-      webUrl = webUrl.buildUpon()
-              .appendQueryParameter(AppLinks.KEY_NAME_APPLINK_DATA, appLinkDataJson.toString())
-              .build();
-      Intent launchBrowserIntent = new Intent(Intent.ACTION_VIEW, webUrl);
-      context.startActivity(launchBrowserIntent);
-      return NavigationResult.WEB;
     }
 
-    return NavigationResult.FAILED;
+    sendAppLinkNavigateEventBroadcast(context, outIntent, result, null);
+    if (outIntent != null) {
+      context.startActivity(outIntent);
+    }
+    return result;
   }
 
+  private void sendAppLinkNavigateEventBroadcast(Context context, Intent intent, NavigationResult type, JSONException e) {
+    Map<String, String> extraLoggingData = new HashMap<String, String>();
+    if (e != null) {
+      extraLoggingData.put("error", e.getLocalizedMessage());
+    }
+
+    extraLoggingData.put("success", type.isSucceeded() ? "1" : "0");
+    extraLoggingData.put("type", type.getCode());
+
+    MeasurementEvent.sendEventBroadcast(context, APP_LINK_NAVIGATE_OUT_EVENT_NAME, intent, extraLoggingData);
+}
+
   /**
    * Sets the default resolver to be used for App Link resolution. Setting this to null will cause
    * the {@link #navigateInBackground(android.content.Context, android.net.Uri)} methods to use the
diff --git a/Bolts/src/bolts/AppLinks.java b/Bolts/src/bolts/AppLinks.java
index 6e4eada..8a2fdde 100644
--- a/Bolts/src/bolts/AppLinks.java
+++ b/Bolts/src/bolts/AppLinks.java
@@ -9,6 +9,7 @@
  */
 package bolts;
 
+import android.content.Context;
 import android.content.Intent;
 import android.net.Uri;
 import android.os.Bundle;
@@ -18,6 +19,9 @@
  * data.
  */
 public final class AppLinks {
+  /* event name for broadcast sent when handle incoming applink intent */
+  public static final String APP_LINK_NAVIGATE_IN_EVENT_NAME = "al_nav_in";
+
   static final String KEY_NAME_APPLINK_DATA = "al_applink_data";
   static final String KEY_NAME_EXTRAS = "extras";
   static final String KEY_NAME_TARGET = "target_url";
@@ -66,4 +70,25 @@ public static Uri getTargetUrl(Intent intent) {
     }
     return intent.getData();
   }
+
+  /**
+   * Gets the target URL for an intent. If the intent is from an App Link, this will be the App Link target.
+   * Otherwise, it return null; For app link intent, this function will broadcast APP_LINK_NAVIGATE_IN_EVENT_NAME event.
+   *
+   * @param context the context this function is called within.
+   * @param intent the incoming intent.
+   * @return the target URL for the intent if applink intent; null otherwise.
+   */
+  public static Uri getTargetUrlFromInboundIntent(Context context, Intent intent) {
+    Bundle appLinkData = getAppLinkData(intent);
+    if (appLinkData != null) {
+      String targetString = appLinkData.getString(KEY_NAME_TARGET);
+      if (targetString != null) {
+        MeasurementEvent.sendEventBroadcast(context, APP_LINK_NAVIGATE_IN_EVENT_NAME, intent, null);
+        return Uri.parse(targetString);
+      }
+    }
+    return null;
+  }
+
 }
diff --git a/Bolts/src/bolts/MeasurementEvent.java b/Bolts/src/bolts/MeasurementEvent.java
new file mode 100644
index 0000000..8d993a5
--- /dev/null
+++ b/Bolts/src/bolts/MeasurementEvent.java
@@ -0,0 +1,129 @@
+/*
+ *  Copyright (c) 2014, Facebook, Inc.
+ *  All rights reserved.
+ *
+ *  This source code is licensed under the BSD-style license found in the
+ *  LICENSE file in the root directory of this source tree. An additional grant
+ *  of patent rights can be found in the PATENTS file in the same directory.
+ *
+ */
+
+package bolts;
+
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+
+import java.util.Arrays;
+import java.util.Collection;
+import android.net.Uri;
+import android.os.Bundle;
+import android.support.v4.content.LocalBroadcastManager;
+import android.util.Log;
+import org.json.*;
+
+import java.util.ArrayList;
+import java.util.Map;
+
+public class MeasurementEvent {
+  public static final String MEASUREMENT_EVENT_NOTIFICATION_NAME = "com.parse.bolts.measurement_event";
+  public static final String MEASUREMENT_EVENT_NAME_KEY = "event_name";
+  public static final String MEASUREMENT_EVENT_ARGS_KEY = "event_args";
+
+  private static final String MEASUREMENT_EVENT_SENT_TAGS_KEY = "bolts_events_sent";
+
+  public static void sendEventBroadcast(
+      Context context,
+      String name,
+      Intent appLinkIntent,
+      Map<String, String> extraLoggingData
+  ) {
+
+    Bundle logData = new Bundle();
+    if (appLinkIntent != null) {
+      ComponentName resolvedActivity = appLinkIntent.resolveActivity(context.getPackageManager());
+      if (resolvedActivity != null) {
+        logData.putString("class", resolvedActivity.getShortClassName());
+        logData.putString("package", resolvedActivity.getPackageName());
+      }
+
+      if (appLinkIntent.getData() != null) {
+        logData.putString("outputURL", appLinkIntent.getData().toString());
+      }
+
+      if (appLinkIntent.getScheme() != null) {
+        logData.putString("outputURLScheme", appLinkIntent.getScheme());
+      }
+
+      Bundle applinkData = AppLinks.getAppLinkData(appLinkIntent);
+      if (applinkData != null) {
+        Uri targetURI = AppLinks.getTargetUrl(appLinkIntent);
+        logData.putString("targetURLHost", targetURI.getHost());
+        for (String key : applinkData.keySet()) {
+          Object o = applinkData.get(key);
+          if (o instanceof Bundle) {
+            for (String subKey : ((Bundle) o).keySet()) {
+              String logValue = objectToJSONString(((Bundle) o).get(subKey));
+              logData.putString(key + "/" + subKey, logValue);
+            }
+          } else {
+            String logValue = objectToJSONString(o);
+            logData.putString(key, logValue);
+          }
+        }
+      }
+    }
+
+    if (extraLoggingData != null) {
+      for (String key : extraLoggingData.keySet()) {
+        logData.putString(key, extraLoggingData.get(key));
+      }
+    }
+    MeasurementEvent event = new MeasurementEvent(context, name, logData);
+    event.sendBroadcast();
+  }
+
+  private Context appContext;
+  private String name;
+  private Bundle args;
+
+  private MeasurementEvent(Context context, String eventName, Bundle eventArgs) {
+    appContext = context.getApplicationContext();
+    name = eventName;
+    args = eventArgs;
+  }
+
+  private void sendBroadcast() {
+    if (name == null) {
+      Log.d(getClass().getName(), "Event name is required");
+    }
+    LocalBroadcastManager manager = LocalBroadcastManager.getInstance(appContext);
+    Intent event = new Intent(MEASUREMENT_EVENT_NOTIFICATION_NAME);
+    event.putExtra(MEASUREMENT_EVENT_NAME_KEY, name);
+    event.putExtra(MEASUREMENT_EVENT_ARGS_KEY, args);
+    manager.sendBroadcast(event);
+  }
+
+  private static String objectToJSONString(Object o) {
+    if (o == null) {
+      return null;
+    }
+    if (o instanceof JSONArray || o instanceof JSONObject) {
+      return o.toString();
+    }
+
+    try {
+      if (o instanceof Collection) {
+        return new JSONArray((Collection) o).toString();
+      } else if (o.getClass().isArray()) {
+        return new JSONArray(Arrays.asList(o)).toString();
+      }
+      if (o instanceof Map) {
+        return new JSONObject((Map) o).toString();
+      }
+      return o.toString();
+    } catch (Exception ignored) {
+    }
+    return null;
+  }
+}
