diff --git a/Bolts/src/bolts/Task.java b/Bolts/src/bolts/Task.java
index 444123d..8d70717 100644
--- a/Bolts/src/bolts/Task.java
+++ b/Bolts/src/bolts/Task.java
@@ -14,7 +14,6 @@
 import java.util.List;
 import java.util.concurrent.Callable;
 import java.util.concurrent.Executor;
-import java.util.concurrent.ExecutorService;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 
@@ -156,7 +155,7 @@ public void waitForCompletion() throws InterruptedException {
     }
 
     /**
-     * Turns a Task<T> into a Task<Void>, dropping any result.
+     * Turns a {@code Task<T>} into a {@code Task<Void>}, dropping any result.
      */
     public Task<Void> makeVoid() {
         return this.continueWithTask(new Continuation<TResult, Task<Void>>() {
@@ -495,7 +494,7 @@ private void runContinuations() {
 
     /**
      * Allows safe orchestration of a task's completion, preventing the consumer from prematurely
-     * completing the task. Essentially, it represents the producer side of a Task<TResult>, providing
+     * completing the task. Essentially, it represents the producer side of a {@link Task}, providing
      * access to the consumer side through the getTask() method while isolating the Task's completion
      * mechanisms from the consumer.
      */
