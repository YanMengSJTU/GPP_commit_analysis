diff --git a/Bolts/build.gradle b/Bolts/build.gradle
index 3b70ec1..055d35a 100644
--- a/Bolts/build.gradle
+++ b/Bolts/build.gradle
@@ -1,123 +1,6 @@
-apply plugin: 'com.android.library'
+apply plugin: 'java'
 
 group = 'com.parse.bolts'
 version = '1.1.5-SNAPSHOT'
-
-android {
-    compileSdkVersion rootProject.ext.compileSdkVersion
-    buildToolsVersion rootProject.ext.buildToolsVersion
-
-    defaultConfig {
-        minSdkVersion rootProject.ext.minSdkVersion
-        targetSdkVersion rootProject.ext.targetSdkVersion
-        versionCode 1
-        versionName project.version
-    }
-
-    sourceSets {
-        main {
-            manifest.srcFile 'AndroidManifest.xml'
-            java.srcDirs = ['src']
-        }
-    }
-}
-
-android.libraryVariants.all { variant ->
-    def name = variant.buildType.name
-    def task = project.tasks.create(name: "jar${name.capitalize()}", type: Jar) {
-        dependsOn variant.javaCompile
-        from variant.javaCompile.destinationDir
-
-        manifest {
-            attributes(
-                    "Bundle-Name": 'bolts-android',
-                    "Bundle-Version": project.version
-            )
-        }
-
-        exclude '**/R.class'
-        exclude '**/R\$*.class'
-        exclude '**/Manifest.class'
-        exclude '**/Manifest\$*.class'
-        exclude '**/BuildConfig.class'
-    }
-
-    if (name.equals(com.android.builder.core.BuilderConstants.RELEASE)) {
-        artifacts.add('archives', task);
-    }
-}
-
-apply plugin: 'maven'
-apply plugin: 'signing'
-
-def isSnapshot = version.endsWith('-SNAPSHOT')
-def ossrhUsername = hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
-def ossrhPassword = hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
-
-uploadArchives {
-    repositories.mavenDeployer {
-        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
-
-        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
-            authentication(userName: ossrhUsername, password: ossrhPassword)
-        }
-
-        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
-            authentication(userName: ossrhUsername, password: ossrhPassword)
-        }
-
-        pom.project {
-            name 'Bolts-Android'
-            artifactId = 'bolts-android'
-            packaging 'jar'
-            description 'Bolts is a collection of low-level libraries designed to make developing mobile apps easier.'
-            url 'https://github.com/BoltsFramework/Bolts-Android'
-
-            scm {
-                connection 'scm:git@github.com:BoltsFramework/Bolts-Android.git'
-                developerConnection 'scm:git@github.com:BoltsFramework/Bolts-Android.git'
-                url 'https://github.com/BoltsFramework/Bolts-Android'
-            }
-
-            licenses {
-                license {
-                    name 'BSD 2-Clause License'
-                    url 'https://github.com/BoltsFramework/Bolts-Android/blob/master/LICENSE'
-                    distribution 'repo'
-                }
-            }
-
-            developers {
-                developer {
-                    id 'parse'
-                    name 'Parse'
-                }
-            }
-        }
-    }
-}
-
-signing {
-    required { !isSnapshot && gradle.taskGraph.hasTask("uploadArchives") }
-    sign configurations.archives
-}
-
-task androidJavadocs(type: Javadoc) {
-    source = android.sourceSets.main.java.srcDirs
-    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
-}
-
-task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
-    classifier = 'javadoc'
-    from androidJavadocs.destinationDir
-}
-
-task androidSourcesJar(type: Jar) {
-    classifier = 'sources'
-    from android.sourceSets.main.java.sourceFiles
-}
-
-artifacts {
-    archives androidSourcesJar
-    archives androidJavadocsJar
-}
+sourceSets.main.java.srcDirs = ['src']
+sourceCompatibility = 1.6
diff --git a/Bolts/src/bolts/AndroidExecutors.java b/Bolts/src/bolts/AndroidExecutors.java
deleted file mode 100644
index 1a4e107..0000000
--- a/Bolts/src/bolts/AndroidExecutors.java
+++ /dev/null
@@ -1,134 +0,0 @@
-/*
- *  Copyright (c) 2014, Facebook, Inc.
- *  All rights reserved.
- *
- *  This source code is licensed under the BSD-style license found in the
- *  LICENSE file in the root directory of this source tree. An additional grant
- *  of patent rights can be found in the PATENTS file in the same directory.
- *
- */
-package bolts;
-
-import android.annotation.SuppressLint;
-import android.os.Build;
-import android.os.Handler;
-import android.os.Looper;
-
-import java.util.concurrent.Executor;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.LinkedBlockingQueue;
-import java.util.concurrent.ThreadFactory;
-import java.util.concurrent.ThreadPoolExecutor;
-import java.util.concurrent.TimeUnit;
-
-/**
- * This was created because the helper methods in {@link java.util.concurrent.Executors} do not work
- * as people would normally expect.
- * <p/>
- * Normally, you would think that a cached thread pool would create new threads when necessary,
- * queue them when the pool is full, and kill threads when they've been inactive for a certain
- * period of time. This is not how {@link java.util.concurrent.Executors#newCachedThreadPool()}
- * works.
- * <p/>
- * Instead, {@link java.util.concurrent.Executors#newCachedThreadPool()} executes all tasks on
- * a new or cached thread immediately because corePoolSize is 0, SynchronousQueue is a queue with
- * size 0 and maxPoolSize is Integer.MAX_VALUE. This is dangerous because it can create an unchecked
- * amount of threads.
- */
-final class AndroidExecutors {
-
-    private static final AndroidExecutors INSTANCE = new AndroidExecutors();
-
-    private final Executor uiThread;
-
-    private AndroidExecutors() {
-        uiThread = new UIThreadExecutor();
-    }
-
-    /**
-     * Nexus 5: Quad-Core
-     * Moto X: Dual-Core
-     * <p/>
-     * AsyncTask:
-     * CORE_POOL_SIZE = CPU_COUNT + 1
-     * MAX_POOL_SIZE = CPU_COUNT * 2 + 1
-     * <p/>
-     * https://github.com/android/platform_frameworks_base/commit/719c44e03b97e850a46136ba336d729f5fbd1f47
-     */
-    private static final int CPU_COUNT = Runtime.getRuntime().availableProcessors();
-    /* package */ static final int CORE_POOL_SIZE = CPU_COUNT + 1;
-    /* package */ static final int MAX_POOL_SIZE = CPU_COUNT * 2 + 1;
-    /* package */ static final long KEEP_ALIVE_TIME = 1L;
-
-    /**
-     * Creates a proper Cached Thread Pool. Tasks will reuse cached threads if available
-     * or create new threads until the core pool is full. tasks will then be queued. If an
-     * task cannot be queued, a new thread will be created unless this would exceed max pool
-     * size, then the task will be rejected. Threads will time out after 1 second.
-     * <p/>
-     * Core thread timeout is only available on android-9+.
-     *
-     * @return the newly created thread pool
-     */
-    public static ExecutorService newCachedThreadPool() {
-        ThreadPoolExecutor executor = new ThreadPoolExecutor(CORE_POOL_SIZE, MAX_POOL_SIZE, KEEP_ALIVE_TIME, TimeUnit.SECONDS,
-                new LinkedBlockingQueue<Runnable>());
-
-        allowCoreThreadTimeout(executor, true);
-
-        return executor;
-    }
-
-    /**
-     * Creates a proper Cached Thread Pool. Tasks will reuse cached threads if available
-     * or create new threads until the core pool is full. tasks will then be queued. If an
-     * task cannot be queued, a new thread will be created unless this would exceed max pool
-     * size, then the task will be rejected. Threads will time out after 1 second.
-     * <p/>
-     * Core thread timeout is only available on android-9+.
-     *
-     * @param threadFactory the factory to use when creating new threads
-     * @return the newly created thread pool
-     */
-    public static ExecutorService newCachedThreadPool(ThreadFactory threadFactory) {
-        ThreadPoolExecutor executor = new ThreadPoolExecutor(CORE_POOL_SIZE, MAX_POOL_SIZE, KEEP_ALIVE_TIME, TimeUnit.SECONDS,
-                new LinkedBlockingQueue<Runnable>(), threadFactory);
-
-        allowCoreThreadTimeout(executor, true);
-
-        return executor;
-    }
-
-    /**
-     * Compatibility helper function for
-     * {@link java.util.concurrent.ThreadPoolExecutor#allowCoreThreadTimeOut(boolean)}
-     * <p/>
-     * Only available on android-9+.
-     *
-     * @param executor the {@link java.util.concurrent.ThreadPoolExecutor}
-     * @param value    true if should time out, else false
-     */
-    @SuppressLint("NewApi")
-    public static void allowCoreThreadTimeout(ThreadPoolExecutor executor, boolean value) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {
-            executor.allowCoreThreadTimeOut(value);
-        }
-    }
-
-    /**
-     * An {@link java.util.concurrent.Executor} that executes tasks on the UI thread.
-     */
-    public static Executor uiThread() {
-        return INSTANCE.uiThread;
-    }
-
-    /**
-     * An {@link java.util.concurrent.Executor} that runs tasks on the UI thread.
-     */
-    private static class UIThreadExecutor implements Executor {
-        @Override
-        public void execute(Runnable command) {
-            new Handler(Looper.getMainLooper()).post(command);
-        }
-    }
-}
diff --git a/Bolts/src/bolts/BoltsExecutors.java b/Bolts/src/bolts/BoltsExecutors.java
index ef2ba8b..4509b1a 100644
--- a/Bolts/src/bolts/BoltsExecutors.java
+++ b/Bolts/src/bolts/BoltsExecutors.java
@@ -1,8 +1,8 @@
 package bolts;
 
-import java.util.Locale;
 import java.util.concurrent.Executor;
 import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
 
 /**
  * Collection of {@link Executor}s to use in conjunction with {@link Task}.
@@ -11,19 +11,11 @@
 
     private static final BoltsExecutors INSTANCE = new BoltsExecutors();
 
-    private static boolean isAndroidRuntime() {
-        String javaRuntimeName = System.getProperty("java.runtime.name");
-        if (javaRuntimeName == null) {
-            return false;
-        }
-        return javaRuntimeName.toLowerCase(Locale.US).contains("android");
-    }
-
     private final ExecutorService background;
     private final Executor immediate;
 
     private BoltsExecutors() {
-        background = !isAndroidRuntime() ? java.util.concurrent.Executors.newCachedThreadPool() : AndroidExecutors.newCachedThreadPool();
+        background = Executors.newCachedThreadPool();
         immediate = new ImmediateExecutor();
     }
 
diff --git a/Bolts/src/bolts/Task.java b/Bolts/src/bolts/Task.java
index 8d70717..c8aa9d9 100644
--- a/Bolts/src/bolts/Task.java
+++ b/Bolts/src/bolts/Task.java
@@ -35,11 +35,6 @@
      */
     private static final Executor IMMEDIATE_EXECUTOR = BoltsExecutors.immediate();
 
-    /**
-     * An {@link java.util.concurrent.Executor} that executes tasks on the UI thread.
-     */
-    public static final Executor UI_THREAD_EXECUTOR = AndroidExecutors.uiThread();
-
     private final Object lock = new Object();
     private boolean complete;
     private boolean cancelled;
