diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000000..0dde613da5
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,2 @@
+aws-android-sdk-kinesis/FileRecordStoreTest/KinesisRecorder/KinesisRecords
+aws-android-sdk-kinesis/FileRecordStoreTest/KinesisRecorder/KinesisRecords.tmp
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/receiver/NetworkInfoReceiver.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/receiver/NetworkInfoReceiver.java
index e5c1750f7a..2cc6582f38 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/receiver/NetworkInfoReceiver.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/receiver/NetworkInfoReceiver.java
@@ -61,8 +61,22 @@ public void setConnectionCheckType(Type connectionCheckType) {
         this.connectionCheckType = connectionCheckType;
     }
 
-    public boolean isNetworkConnected() {
-        return connectionCheckType.isConnected(connectivityManager);
+    public Type getConnectionCheckType() {
+        return this.connectionCheckType;
+    }
+
+    public boolean isNetworkConnected(String file) {
+        int networkType = -2;
+        if (connectivityManager != null) {
+            NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();
+            if (activeNetworkInfo != null) {
+                networkType = activeNetworkInfo.getType();
+            }
+        }
+
+        boolean connected = connectionCheckType.isConnected(connectivityManager);
+        Log.i(TAG, String.format("isNetworkConnected=%b, file=%s, checkType=%s, activeNetworkType=%d, ", connected, file, connectionCheckType, networkType));
+        return connected;
     }
 
     public enum Type {
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
index 23251e4fc6..fb75d838d3 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
@@ -193,7 +193,7 @@ public void handleMessage(Message msg) {
      */
     void checkTransfers() {
         // scan database for previously unfinished transfers
-        if (shouldScan && networkInfoReceiver.isNetworkConnected() && s3 != null) {
+        if (shouldScan && networkInfoReceiver.isNetworkConnected(null) && s3 != null) {
             loadTransfersFromDB();
             shouldScan = false;
         }
@@ -241,6 +241,7 @@ void execCommand(Intent intent) {
                 TransferRecord transfer = dbUtil.getTransferById(id);
                 if (transfer != null) {
                     updater.addTransfer(transfer);
+                    Log.i(TAG, "execCommand ADD: starting upload of " + transfer.file + " with networkReceiver of type " + networkInfoReceiver.getConnectionCheckType());
                     transfer.start(s3, dbUtil, updater, networkInfoReceiver);
                 } else {
                     Log.e(TAG, "Can't find transfer: " + id);
@@ -265,6 +266,7 @@ void execCommand(Intent intent) {
                 }
             }
             if (transfer != null) {
+                Log.i(TAG, "execCommand RESUME: starting upload of " + transfer.file + " with networkReceiver of type " + networkInfoReceiver.getConnectionCheckType());
                 transfer.start(s3, dbUtil, updater, networkInfoReceiver);
             }
         } else if (INTENT_ACTION_TRANSFER_CANCEL.equals(action)) {
@@ -342,6 +344,7 @@ void loadTransfersFromDB() {
                     if (updater.getTransfer(id) == null) {
                         TransferRecord transfer = new TransferRecord(id);
                         transfer.updateFromDB(c);
+                        Log.i(TAG, "loadTransfersFromDB 1: starting upload of " + transfer.file + " with networkReceiver of type " + networkInfoReceiver.getConnectionCheckType());
                         if (transfer.start(s3, dbUtil, updater, networkInfoReceiver)) {
                             updater.addTransfer(transfer);
                             count++;
@@ -349,6 +352,7 @@ void loadTransfersFromDB() {
                     } else {
                         TransferRecord transfer = updater.getTransfer(id);
                         if (!transfer.isRunning()) {
+                            Log.i(TAG, "loadTransfersFromDB 2: starting upload of " + transfer.file + " with networkReceiver of type " + networkInfoReceiver.getConnectionCheckType());
                             transfer.start(s3, dbUtil, updater, networkInfoReceiver);
                         }
                     }
@@ -392,7 +396,7 @@ protected void dump(FileDescriptor fd, PrintWriter writer, String[] args) {
         }
 
         writer.printf("start id: %d\n", startId);
-        writer.printf("network status: %s\n", networkInfoReceiver.isNetworkConnected());
+        writer.printf("network status: %s\n", networkInfoReceiver.isNetworkConnected(null));
         writer.printf("lastActiveTime: %s, shouldScan: %s\n", new Date(lastActiveTime), shouldScan);
         Map<Integer, TransferRecord> transfers = updater.getTransfers();
         writer.printf("# of active transfers: %d\n", transfers.size());
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java
index fd1b6d3797..c0c22a4332 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java
@@ -54,7 +54,7 @@ public UploadTask(TransferRecord uploadInfo, AmazonS3 s3, TransferDBUtil dbUtil,
      */
     @Override
     public Boolean call() throws Exception {
-        if (!networkInfo.isNetworkConnected()) {
+        if (!networkInfo.isNetworkConnected(upload.file)) {
             updater.updateState(upload.id, TransferState.WAITING_FOR_NETWORK);
             return false;
         }
@@ -155,7 +155,7 @@ private Boolean uploadMultipartAndWaitForCompletion() throws ExecutionException
                     Log.d(TAG, "Transfer " + upload.id + " is interrupted by user");
                     return false;
                 } else if (e.getCause() != null && e.getCause() instanceof IOException
-                        && !networkInfo.isNetworkConnected()) {
+                        && !networkInfo.isNetworkConnected(this.upload.file)) {
                     Log.d(TAG, "Transfer " + upload.id + " waits for network");
                     updater.updateState(upload.id, TransferState.WAITING_FOR_NETWORK);
                 }
@@ -202,7 +202,7 @@ private Boolean uploadSinglePartAndWaitForCompletion() {
                 Log.d(TAG, "Transfer " + upload.id + " is interrupted by user");
                 return false;
             } else if (e.getCause() != null && e.getCause() instanceof IOException
-                    && !networkInfo.isNetworkConnected()) {
+                    && !networkInfo.isNetworkConnected(this.upload.file)) {
                 Log.d(TAG, "Transfer " + upload.id + " waits for network");
                 updater.updateState(upload.id, TransferState.WAITING_FOR_NETWORK);
             }
