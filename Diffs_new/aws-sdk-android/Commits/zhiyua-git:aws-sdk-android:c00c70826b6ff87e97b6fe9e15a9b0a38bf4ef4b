diff --git a/aws-android-sdk-kinesisvideo/build.gradle b/aws-android-sdk-kinesisvideo/build.gradle
index 80f7134feb..57e55d02ba 100644
--- a/aws-android-sdk-kinesisvideo/build.gradle
+++ b/aws-android-sdk-kinesisvideo/build.gradle
@@ -39,6 +39,7 @@ dependencies {
     implementation "com.android.support:support-annotations:24.2.0"
     //noinspection DuplicatePlatformClasses
     implementation "org.apache.httpcomponents:httpclient:4.5.3"
+    implementation "org.apache.httpcomponents:httpasyncclient:4.1.4"
     androidTestImplementation project(":aws-android-sdk-testutils")
     androidTestImplementation 'junit:junit:4.12'
 }
diff --git a/aws-android-sdk-kinesisvideo/pom.xml b/aws-android-sdk-kinesisvideo/pom.xml
index cfd9871a64..f441b51a62 100644
--- a/aws-android-sdk-kinesisvideo/pom.xml
+++ b/aws-android-sdk-kinesisvideo/pom.xml
@@ -63,6 +63,13 @@
       <artifactId>httpclient</artifactId>
       <version>4.5.3</version>
     </dependency>
+
+    <dependency>
+      <groupId>org.apache.httpcomponents</groupId>
+      <artifactId>httpasyncclient</artifactId>
+      <version>4.1.4</version>
+    </dependency>
+
   </dependencies>
 
   <build>
diff --git a/aws-android-sdk-kinesisvideo/src/androidTest/java/com/amazonaws/services/kinesisvideo/KinesisVideoFrameTest.java b/aws-android-sdk-kinesisvideo/src/androidTest/java/com/amazonaws/services/kinesisvideo/KinesisVideoFrameTest.java
deleted file mode 100644
index 72ac0db670..0000000000
--- a/aws-android-sdk-kinesisvideo/src/androidTest/java/com/amazonaws/services/kinesisvideo/KinesisVideoFrameTest.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package com.amazonaws.services.kinesisvideo;
-
-import com.amazonaws.kinesisvideo.producer.KinesisVideoFrame;
-
-import org.junit.Test;
-
-import java.nio.ByteBuffer;
-
-import android.support.test.runner.AndroidJUnit4;
-
-import static com.amazonaws.kinesisvideo.producer.FrameFlags.FRAME_FLAG_NONE;
-import static junit.framework.Assert.assertEquals;
-
-@RunWith(AndroidJUnit4.class)
-public class KinesisVideoFrameTest {
-    @Test
-    public void testTrailingZeroRemoved() {
-        byte[] rawData = new byte[] {1, 2, 3, 0, 0, 0, 0, 0};
-        KinesisVideoFrame frame = new KinesisVideoFrame(0, FRAME_FLAG_NONE, 0,
-                0, 1, ByteBuffer.wrap(rawData));
-        assertEquals(3, frame.getSize());
-        byte[] actualDataPassed = new byte[frame.getSize()];
-        frame.getData().get(actualDataPassed);
-        for (int i = 0; i < actualDataPassed.length; i++) {
-            assertEquals(rawData[i], actualDataPassed[i]);
-        }
-    }
-}
diff --git a/aws-android-sdk-kinesisvideo/src/main/AndroidManifest.xml b/aws-android-sdk-kinesisvideo/src/main/AndroidManifest.xml
index 32a552a6b8..138e352929 100644
--- a/aws-android-sdk-kinesisvideo/src/main/AndroidManifest.xml
+++ b/aws-android-sdk-kinesisvideo/src/main/AndroidManifest.xml
@@ -7,5 +7,5 @@
     <uses-permission android:name="android.permission.INTERNET"/>
     <application>
     </application>
-<uses-sdk android:minSdkVersion="21" android:targetSdkVersion="25" /></manifest>
+</manifest>
 
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/ack/AckEventData.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/ack/AckEventData.java
index 16f2ff53f9..e71e2b728d 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/ack/AckEventData.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/ack/AckEventData.java
@@ -15,6 +15,23 @@
  * limitations under the License.
  */
 
+/**
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
 package com.amazonaws.kinesisvideo.ack;
 
 public class AckEventData {
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/AbstractKinesisVideoCredentialsProvider.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/AbstractKinesisVideoCredentialsProvider.java
index 4b64569cb0..45e483cf97 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/AbstractKinesisVideoCredentialsProvider.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/AbstractKinesisVideoCredentialsProvider.java
@@ -15,6 +15,23 @@
  * limitations under the License.
  */
 
+/**
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
 package com.amazonaws.kinesisvideo.auth;
 
 import com.amazonaws.kinesisvideo.common.exception.KinesisVideoException;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/DefaultAuthCallbacks.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/DefaultAuthCallbacks.java
index fd32d5e2cb..f83666704e 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/DefaultAuthCallbacks.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/DefaultAuthCallbacks.java
@@ -15,6 +15,23 @@
  * limitations under the License.
  */
 
+/**
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
 package com.amazonaws.kinesisvideo.auth;
 
 import com.amazonaws.kinesisvideo.common.exception.KinesisVideoException;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/EmptyCredentialsProvider.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/EmptyCredentialsProvider.java
index 7e0dc1b249..183d56b3b2 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/EmptyCredentialsProvider.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/EmptyCredentialsProvider.java
@@ -15,6 +15,23 @@
  * limitations under the License.
  */
 
+/**
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
 package com.amazonaws.kinesisvideo.auth;
 
 import com.amazonaws.kinesisvideo.common.exception.KinesisVideoException;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/KinesisVideoCredentials.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/KinesisVideoCredentials.java
index 45a60c7e77..202e60b62a 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/KinesisVideoCredentials.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/KinesisVideoCredentials.java
@@ -15,6 +15,23 @@
  * limitations under the License.
  */
 
+/**
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
 package com.amazonaws.kinesisvideo.auth;
 
 //import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/KinesisVideoCredentialsProvider.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/KinesisVideoCredentialsProvider.java
index f3f5c6e826..af2ab1117b 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/KinesisVideoCredentialsProvider.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/KinesisVideoCredentialsProvider.java
@@ -15,6 +15,23 @@
  * limitations under the License.
  */
 
+/**
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
 package com.amazonaws.kinesisvideo.auth;
 
 import android.support.annotation.Nullable;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/StaticCredentialsProvider.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/StaticCredentialsProvider.java
index 6620ab0622..6798e2e69a 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/StaticCredentialsProvider.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/auth/StaticCredentialsProvider.java
@@ -15,6 +15,23 @@
  * limitations under the License.
  */
 
+/**
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
 package com.amazonaws.kinesisvideo.auth;
 
 import com.amazonaws.kinesisvideo.common.exception.KinesisVideoException;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/GetInletMediaClient.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/GetInletMediaClient.java
index 9427d78bbe..424c93f6c5 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/GetInletMediaClient.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/GetInletMediaClient.java
@@ -15,6 +15,23 @@
  * limitations under the License.
  */
 
+/**
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
 package com.amazonaws.kinesisvideo.client;
 
 import android.support.annotation.NonNull;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/KinesisVideoClient.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/KinesisVideoClient.java
index 4c3398b0e7..39feb6fbc9 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/KinesisVideoClient.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/KinesisVideoClient.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.client;
@@ -36,11 +36,16 @@
 public interface KinesisVideoClient {
     /**
      * Returns whether the client has been initialized
+     *
+     * @return true if initialized. false otherwise.
      */
     boolean isInitialized();
 
     /**
      * Initializes the client object.
+     *
+     * @param deviceInfo Device info for which the client needs to be initialized.
+     * @throws KinesisVideoException if unable to initialize KinesisVideoClient.
      */
     void initialize(@NonNull final DeviceInfo deviceInfo)
             throws KinesisVideoException;
@@ -57,28 +62,42 @@ void initialize(@NonNull final DeviceInfo deviceInfo)
     /**
      * Register a media source. The media source will be binding to kinesis video producer stream
      * to send out data from media source.
+     * Sync call to create the stream and bind to media source.
      *
      * @param mediaSource media source binding to kinesis video producer stream
-     * @throws KinesisVideoException
+     * @throws KinesisVideoException if unable to register media source.
      */
     void registerMediaSource(final MediaSource mediaSource) throws KinesisVideoException;
 
     /**
      * Un-Register a media source. The media source will stop binding to kinesis video producer stream
      * and it cannot send data via producer stream afterwards until register again.
+     * Sync call and could be block for 15 seconds if error happens when stopping stream.
      *
      * @param mediaSource media source to stop binding to kinesis video producer stream
-     * @throws KinesisVideoException
+     * @throws KinesisVideoException if unable to unregister media source.
      */
     void unregisterMediaSource(final MediaSource mediaSource) throws KinesisVideoException;
 
     /**
      * Start all registered media sources
+     *
+     * @throws KinesisVideoException if unable to start all media sources.
      */
     void startAllMediaSources() throws KinesisVideoException;
 
+    /**
+     * Free a media source. Async call to clean up resources if error happens.
+     *
+     * @param mediaSource media source binding to kinesis video producer stream to be freed
+     * @throws KinesisVideoException if unable to free media source.
+     */
+    void freeMediaSource(@NonNull final MediaSource mediaSource) throws KinesisVideoException;
+
     /**
      * Stop all registered media sources
+     *
+     * @throws KinesisVideoException if unable to stop all media sources.
      */
     void stopAllMediaSources() throws KinesisVideoException;
 
@@ -87,6 +106,7 @@ void initialize(@NonNull final DeviceInfo deviceInfo)
      * the media source type, create the instance, and ensure that it is configured with working
      * parameters
      *
+     * @param streamName Stream name for the media source
      * @param mediaSourceConfiguration, configuration to create specific media source
      * @return configured and working media source
      * @throws UnsupportedConfigurationException is thrown when the configuration is not supported,
@@ -101,6 +121,8 @@ MediaSource createMediaSource(
 
     /**
      * Stops the media sources and frees/releases the underlying objects
+     *
+     * @throws KinesisVideoException if unable to free resources.
      */
     void free() throws KinesisVideoException;
 }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/KinesisVideoClientConfiguration.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/KinesisVideoClientConfiguration.java
index 77c99d9ab6..bf18ae1a25 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/KinesisVideoClientConfiguration.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/KinesisVideoClientConfiguration.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.client;
@@ -128,4 +128,4 @@ public KinesisVideoClientConfiguration build() {
             return new KinesisVideoClientConfiguration(this);
         }
     }
-}
+}
\ No newline at end of file
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/KinesisVideoClientConfigurationDefaults.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/KinesisVideoClientConfigurationDefaults.java
index 4b5e9ad7d2..cd68dfa80d 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/KinesisVideoClientConfigurationDefaults.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/KinesisVideoClientConfigurationDefaults.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.client;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/PutMediaClient.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/PutMediaClient.java
index 329d2479bc..9b76b7952b 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/PutMediaClient.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/PutMediaClient.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.client;
@@ -294,7 +294,10 @@ public Builder logUsedBandwidth(final boolean logBandwidth) {
         /**
          * Allows writing the stream data into a localc file in addition to sending it to back-end.
          * <p>
-         * Useful for debugging
+         * @param fileOutputPath Output file path
+         * @return Builder object
+         *
+         * NOTE: Useful for debugging
          */
         public Builder fileOutputPath(final String fileOutputPath) {
             mFileOutputPath = fileOutputPath;
@@ -314,9 +317,9 @@ public Builder log(final Log log) {
         /**
          * Add additional unsigned header. For testing use only.
          *
-         * @param name
-         * @param value
-         * @return
+         * @param name Header key
+         * @param value Header value
+         * @return Builder object.
          */
         public Builder unsignedHeader(final String name, final String value) {
             if (unsignedHeaders == null) {
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/StreamingReadAsyncClient.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/StreamingReadAsyncClient.java
new file mode 100644
index 0000000000..540dc18a43
--- /dev/null
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/StreamingReadAsyncClient.java
@@ -0,0 +1,138 @@
+/**
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.kinesisvideo.client;
+
+import java.io.IOException;
+import java.net.URI;
+import org.apache.http.HttpResponse;
+import org.apache.http.concurrent.FutureCallback;
+import org.apache.http.entity.ContentType;
+import org.apache.http.nio.protocol.HttpAsyncResponseConsumer;
+import com.amazonaws.kinesisvideo.http.HttpMethodName;
+import com.amazonaws.kinesisvideo.http.KinesisVideoApacheHttpAsyncClient;
+import com.amazonaws.kinesisvideo.signing.KinesisVideoSigner;
+
+/**
+ * Async Client which wraps around Apache Http Async client which takes care
+ * of massaging the request to be made using the apache client
+ */
+public final class StreamingReadAsyncClient {
+    private static final String CONTENT_TYPE_HEADER_KEY = "Content-Type";
+    private URI uri;
+    private KinesisVideoSigner signer;
+    private String inputInJson;
+    private Integer connectionTimeoutInMillis;
+    private Integer readTimeoutInMillis;
+    private HttpAsyncResponseConsumer<HttpResponse> httpAsyncResponseConsumer;
+    private FutureCallback<HttpResponse> futureCallback;
+    private KinesisVideoApacheHttpAsyncClient asyncClient;
+
+    private StreamingReadAsyncClient(final URI uri, final KinesisVideoSigner signer, final String inputInJson, final Integer connectionTimeoutInMillis, final Integer readTimeoutInMillis, final HttpAsyncResponseConsumer<HttpResponse> httpAsyncResponseConsumer, final FutureCallback<HttpResponse> futureCallback) {
+        this.uri = uri;
+        this.signer = signer;
+        this.inputInJson = inputInJson;
+        this.connectionTimeoutInMillis = connectionTimeoutInMillis;
+        this.readTimeoutInMillis = readTimeoutInMillis;
+        this.httpAsyncResponseConsumer = httpAsyncResponseConsumer;
+        this.futureCallback = futureCallback;
+        this.asyncClient = getHttpClient();
+    }
+
+    public void execute() {
+        asyncClient.executeRequest();
+    }
+
+    public void close() throws IOException {
+        asyncClient.close();
+    }
+
+    private KinesisVideoApacheHttpAsyncClient getHttpClient() {
+        KinesisVideoApacheHttpAsyncClient.Builder clientBuilder = KinesisVideoApacheHttpAsyncClient.builder().withUri(uri).withContentType(ContentType.APPLICATION_JSON).withMethod(HttpMethodName.POST).withContentInJson(inputInJson).withHeader(CONTENT_TYPE_HEADER_KEY, ContentType.APPLICATION_JSON.getMimeType()).withFutureCallback(futureCallback).withHttpAsyncResponseConsumer(httpAsyncResponseConsumer);
+        if (connectionTimeoutInMillis != null) {
+            clientBuilder = clientBuilder.withConnectionTimeoutInMillis(connectionTimeoutInMillis.intValue());
+        }
+        if (readTimeoutInMillis != null) {
+            clientBuilder = clientBuilder.withSocketTimeoutInMillis(readTimeoutInMillis.intValue());
+        }
+        final KinesisVideoApacheHttpAsyncClient client = clientBuilder.build();
+        signer.sign(client);
+        return client;
+    }
+
+
+    public static class StreamingReadAsyncClientBuilder {
+        private URI uri;
+        private KinesisVideoSigner signer;
+        private String inputInJson;
+        private Integer connectionTimeoutInMillis;
+        private Integer readTimeoutInMillis;
+        private HttpAsyncResponseConsumer<HttpResponse> httpAsyncResponseConsumer;
+        private FutureCallback<HttpResponse> futureCallback;
+
+        StreamingReadAsyncClientBuilder() {
+        }
+
+        public StreamingReadAsyncClientBuilder uri(final URI uri) {
+            this.uri = uri;
+            return this;
+        }
+
+        public StreamingReadAsyncClientBuilder signer(final KinesisVideoSigner signer) {
+            this.signer = signer;
+            return this;
+        }
+
+        public StreamingReadAsyncClientBuilder inputInJson(final String inputInJson) {
+            this.inputInJson = inputInJson;
+            return this;
+        }
+
+        public StreamingReadAsyncClientBuilder connectionTimeoutInMillis(final Integer connectionTimeoutInMillis) {
+            this.connectionTimeoutInMillis = connectionTimeoutInMillis;
+            return this;
+        }
+
+        public StreamingReadAsyncClientBuilder readTimeoutInMillis(final Integer readTimeoutInMillis) {
+            this.readTimeoutInMillis = readTimeoutInMillis;
+            return this;
+        }
+
+        public StreamingReadAsyncClientBuilder httpAsyncResponseConsumer(final HttpAsyncResponseConsumer<HttpResponse> httpAsyncResponseConsumer) {
+            this.httpAsyncResponseConsumer = httpAsyncResponseConsumer;
+            return this;
+        }
+
+        public StreamingReadAsyncClientBuilder futureCallback(final FutureCallback<HttpResponse> futureCallback) {
+            this.futureCallback = futureCallback;
+            return this;
+        }
+
+        public StreamingReadAsyncClient build() {
+            return new StreamingReadAsyncClient(uri, signer, inputInJson, connectionTimeoutInMillis, readTimeoutInMillis, httpAsyncResponseConsumer, futureCallback);
+        }
+
+        @Override
+        public String toString() {
+            return "StreamingReadAsyncClient.StreamingReadAsyncClientBuilder(uri=" + this.uri + ", signer=" + this.signer + ", inputInJson=" + this.inputInJson + ", connectionTimeoutInMillis=" + this.connectionTimeoutInMillis + ", readTimeoutInMillis=" + this.readTimeoutInMillis + ", httpAsyncResponseConsumer=" + this.httpAsyncResponseConsumer + ", futureCallback=" + this.futureCallback + ")";
+        }
+    }
+
+    public static StreamingReadAsyncClientBuilder builder() {
+        return new StreamingReadAsyncClientBuilder();
+    }
+}
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/StreamingReadClient.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/StreamingReadClient.java
index 811247fd78..fe06475ef2 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/StreamingReadClient.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/StreamingReadClient.java
@@ -1,91 +1,36 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.client;
 
 import java.net.URI;
-
 import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.entity.ContentType;
-
 import com.amazonaws.kinesisvideo.http.KinesisVideoApacheHttpClient;
 import com.amazonaws.kinesisvideo.http.HttpMethodName;
 import com.amazonaws.kinesisvideo.signing.KinesisVideoSigner;
 
 public class StreamingReadClient {
-
     private static final String CONTENT_TYPE_HEADER_KEY = "Content-Type";
-    
     private URI mUri;
     private KinesisVideoSigner mSigner;
     private String mInputInJson;
     private Integer mConnectionTimeoutInMillis;
     private Integer mReadTimeoutInMillis;
-    
-        StreamingReadClient(StreamingReadClientBuilder builder) {
-            this.mUri = builder.mUri;
-            this.mSigner = builder.mSigner;
-            this.mInputInJson = builder.mInputInJson;
-            this.mConnectionTimeoutInMillis = builder.mConnectionTimeoutInMillis;
-            this.mReadTimeoutInMillis = builder.mReadTimeoutInMillis;
-        }
-        
-        public static StreamingReadClientBuilder builder() {
-            return new StreamingReadClientBuilder();
-        }
-        
-        public static class StreamingReadClientBuilder {
-            private URI mUri;
-            private KinesisVideoSigner mSigner;
-            private String mInputInJson;
-            private Integer mConnectionTimeoutInMillis;
-            private Integer mReadTimeoutInMillis;
-            
-            StreamingReadClientBuilder() { }
-    
-            public StreamingReadClientBuilder uri(URI uri) {
-                this.mUri = uri;
-                return this;
-            }
-    
-            public StreamingReadClientBuilder signer(KinesisVideoSigner signer) {
-                this.mSigner = signer;
-                return this;
-            }
-    
-            public StreamingReadClientBuilder inputInJson(String inputInJson) {
-                this.mInputInJson = inputInJson;
-                return this;
-            }
-    
-            public StreamingReadClientBuilder connectionTimeoutInMillis(Integer connectionTimeoutInMillis) {
-                this.mConnectionTimeoutInMillis = connectionTimeoutInMillis;
-                return this;
-            }
-    
-            public StreamingReadClientBuilder readTimeoutInMillis(Integer readTimeoutInMillis) {
-                this.mReadTimeoutInMillis = readTimeoutInMillis;
-                return this;
-            }
-            
-            public StreamingReadClient build() {
-                return new StreamingReadClient(this);
-            }
-        }
 
     public CloseableHttpResponse execute() {
         final KinesisVideoApacheHttpClient client = getHttpClient();
@@ -93,14 +38,7 @@ public CloseableHttpResponse execute() {
     }
 
     private KinesisVideoApacheHttpClient getHttpClient() {
-        KinesisVideoApacheHttpClient.Builder clientBuilder =
-                KinesisVideoApacheHttpClient.builder()
-                        .withUri(mUri)
-                        .withContentType(ContentType.APPLICATION_JSON)
-                        .withMethod(HttpMethodName.POST)
-                        .withContentInJson(mInputInJson)
-                        .withHeader(CONTENT_TYPE_HEADER_KEY, ContentType.APPLICATION_JSON.getMimeType());
-
+        KinesisVideoApacheHttpClient.Builder clientBuilder = KinesisVideoApacheHttpClient.builder().withUri(mUri).withContentType(ContentType.APPLICATION_JSON).withMethod(HttpMethodName.POST).withContentInJson(mInputInJson).withHeader(CONTENT_TYPE_HEADER_KEY, ContentType.APPLICATION_JSON.getMimeType());
         if (mConnectionTimeoutInMillis != null) {
             clientBuilder = clientBuilder.withConnectionTimeoutInMillis(mConnectionTimeoutInMillis.intValue());
         }
@@ -112,73 +50,61 @@ private KinesisVideoApacheHttpClient getHttpClient() {
         return client;
     }
 
-    /**
-     * @return the uri
-     */
-    public URI getUri() {
-        return mUri;
-    }
-
-    /**
-     * @param uri the uri to set
-     */
-    public void setUri(URI uri) {
+    StreamingReadClient(final URI uri, final KinesisVideoSigner signer, final String inputInJson, final Integer connectionTimeoutInMillis, final Integer readTimeoutInMillis) {
         this.mUri = uri;
+        this.mSigner = signer;
+        this.mInputInJson = inputInJson;
+        this.mConnectionTimeoutInMillis = connectionTimeoutInMillis;
+        this.mReadTimeoutInMillis = readTimeoutInMillis;
     }
 
-    /**
-     * @return the signer
-     */
-    public KinesisVideoSigner getSigner() {
-        return mSigner;
-    }
 
-    /**
-     * @param signer the signer to set
-     */
-    public void setSigner(KinesisVideoSigner signer) {
-        this.mSigner = signer;
-    }
+    public static class StreamingReadClientBuilder {
+        private URI uri;
+        private KinesisVideoSigner signer;
+        private String inputInJson;
+        private Integer connectionTimeoutInMillis;
+        private Integer readTimeoutInMillis;
 
-    /**
-     * @return the inputInJson
-     */
-    public String getInputInJson() {
-        return mInputInJson;
-    }
+        StreamingReadClientBuilder() {
+        }
 
-    /**
-     * @param inputInJson the inputInJson to set
-     */
-    public void setInputInJson(String inputInJson) {
-        this.mInputInJson = inputInJson;
-    }
+        public StreamingReadClientBuilder uri(final URI uri) {
+            this.uri = uri;
+            return this;
+        }
 
-    /**
-     * @return the connectionTimeoutInMillis
-     */
-    public Integer getConnectionTimeoutInMillis() {
-        return mConnectionTimeoutInMillis;
-    }
+        public StreamingReadClientBuilder signer(final KinesisVideoSigner signer) {
+            this.signer = signer;
+            return this;
+        }
 
-    /**
-     * @param connectionTimeoutInMillis the connectionTimeoutInMillis to set
-     */
-    public void setConnectionTimeoutInMillis(Integer connectionTimeoutInMillis) {
-        this.mConnectionTimeoutInMillis = connectionTimeoutInMillis;
-    }
+        public StreamingReadClientBuilder inputInJson(final String inputInJson) {
+            this.inputInJson = inputInJson;
+            return this;
+        }
 
-    /**
-     * @return the readTimeoutInMillis
-     */
-    public Integer getReadTimeoutInMillis() {
-        return mReadTimeoutInMillis;
+        public StreamingReadClientBuilder connectionTimeoutInMillis(final Integer connectionTimeoutInMillis) {
+            this.connectionTimeoutInMillis = connectionTimeoutInMillis;
+            return this;
+        }
+
+        public StreamingReadClientBuilder readTimeoutInMillis(final Integer readTimeoutInMillis) {
+            this.readTimeoutInMillis = readTimeoutInMillis;
+            return this;
+        }
+
+        public StreamingReadClient build() {
+            return new StreamingReadClient(uri, signer, inputInJson, connectionTimeoutInMillis, readTimeoutInMillis);
+        }
+
+        @Override
+        public String toString() {
+            return "StreamingReadClient.StreamingReadClientBuilder(uri=" + this.uri + ", signer=" + this.signer + ", inputInJson=" + this.inputInJson + ", connectionTimeoutInMillis=" + this.connectionTimeoutInMillis + ", readTimeoutInMillis=" + this.readTimeoutInMillis + ")";
+        }
     }
 
-    /**
-     * @param readTimeoutInMillis the readTimeoutInMillis to set
-     */
-    public void setReadTimeoutInMillis(Integer readTimeoutInMillis) {
-        this.mReadTimeoutInMillis = readTimeoutInMillis;
+    public static StreamingReadClientBuilder builder() {
+        return new StreamingReadClientBuilder();
     }
 }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/AudioMediaSourceConfiguration.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/AudioMediaSourceConfiguration.java
new file mode 100644
index 0000000000..d4dacb18ac
--- /dev/null
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/AudioMediaSourceConfiguration.java
@@ -0,0 +1,260 @@
+/**
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.kinesisvideo.client.mediasource;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.amazonaws.kinesisvideo.internal.client.mediasource.MediaSourceConfiguration;
+import com.amazonaws.kinesisvideo.producer.StreamInfo;
+
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.AUDIO_TRACK_ID;
+//import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+
+
+/**
+ * AudioMediaSourceConfiguration defines common configuration properties for audio media source
+ */
+//@SuppressFBWarnings({"EI_EXPOSE_REP", "URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
+public class AudioMediaSourceConfiguration implements MediaSourceConfiguration {
+
+    private static final String MEDIA_SOURCE_DESCRIPTION = "Configuration for an audio media source";
+    public static final String MEDIA_SOURCE_TYPE = "AbstractAudioMediaSource";
+
+    public static class Builder implements MediaSourceConfiguration.Builder<AudioMediaSourceConfiguration> {
+
+        private String  mMimeType;
+        private String mOutputFileName;
+        private int mEncodingBitrate;
+        private boolean mIsEncoderHardwareAccelerated;
+        private byte[] mCodecPrivateData;
+        private long mFrameTimescale;
+        private boolean mIsAbsoluteTimecode;
+        private int mRetentionPeriodInHours;
+        private int mSampleRate;
+        private int mSamplesPerFrame;
+        private int mFramesPerBuffer;
+        private int mTrackId = AUDIO_TRACK_ID;
+
+        public Builder withEncodingMimeType(final String mimeType) {
+            mMimeType = mimeType;
+            return this;
+        }
+
+        public Builder withRetentionPeriodInHours(final int retentionPeriodInHours) {
+            mRetentionPeriodInHours = retentionPeriodInHours;
+            return this;
+        }
+
+        public Builder withSampleRate(final int sampleRate) {
+            mSampleRate = sampleRate;
+            return this;
+        }
+
+        public Builder withSamplesPerFrame(final int samplesPerFrame) {
+            mSamplesPerFrame = samplesPerFrame;
+            return this;
+        }
+
+        public Builder withFramesPerBuffer(final int framesPerBuffer) {
+            mFramesPerBuffer = framesPerBuffer;
+            return this;
+        }
+
+        public Builder withFileOutput(final String outputFileName) {
+            mOutputFileName = outputFileName;
+            return this;
+        }
+
+        public Builder withEncodingBitRate(final int bitrate) {
+            mEncodingBitrate = bitrate;
+            return this;
+        }
+
+        public Builder withIsEncoderHardwareAccelerated(final boolean isAccelerated) {
+            mIsEncoderHardwareAccelerated = isAccelerated;
+            return this;
+        }
+
+        public Builder withCodecPrivateData(final byte[] privateData) {
+            mCodecPrivateData = privateData;
+            return this;
+        }
+
+        public Builder withFrameTimeScale(final long timescale) {
+            mFrameTimescale = timescale;
+            return this;
+        }
+
+        public Builder withIsAbsoluteTimecode(final boolean isAbsoluteTimecode) {
+            mIsAbsoluteTimecode = isAbsoluteTimecode;
+            return this;
+        }
+
+        public String getMimeType() {
+            return mMimeType;
+        }
+
+        public int getRetentionPeriodInHours() {
+            return mRetentionPeriodInHours;
+        }
+
+        public int getSampleRate() {
+            return mSampleRate;
+        }
+
+        public int getSamplesPerFrame() {
+            return mSamplesPerFrame;
+        }
+
+        public int getFramesPerBuffer() {
+            return mFramesPerBuffer;
+        }
+
+        public String getOutputFileName() {
+            return mOutputFileName;
+        }
+
+        public int getEncodingBitrate() {
+            return mEncodingBitrate;
+        }
+
+        public boolean isEncoderHardwareAccelerated() {
+            return mIsEncoderHardwareAccelerated;
+        }
+
+        public byte[] getCodecPrivateData() {
+            return mCodecPrivateData;
+        }
+
+        public long getFrameTimescale() {
+            return mFrameTimescale;
+        }
+
+        public Builder withTrackId(final int trackId) {
+            mTrackId = trackId;
+            return this;
+        }
+
+        @Override
+        public AudioMediaSourceConfiguration build() {
+            return new AudioMediaSourceConfiguration(this);
+        }
+    }
+
+    private final Builder mBuilder;
+
+    public AudioMediaSourceConfiguration(final Builder builder) {
+        mBuilder = builder;
+    }
+
+    @Override
+    public String getMediaSourceType() {
+        return MEDIA_SOURCE_TYPE;
+    }
+
+    @Override
+    public String getMediaSourceDescription() {
+        return MEDIA_SOURCE_DESCRIPTION;
+    }
+
+    public static AudioMediaSourceConfiguration.Builder builder() {
+        return new AudioMediaSourceConfiguration.Builder();
+    }
+
+    /**
+     * Gets the output file name.
+     */
+    public String getOutputFileName() {
+        return mBuilder.mOutputFileName;
+    }
+
+    /**
+     * Gets the sample rate of the audio source.
+     */
+    public int getSampleRate() {
+        return mBuilder.mSampleRate;
+    }
+
+    /**
+     * Gets the AAC aac samples per frame
+     */
+    public int getSamplesPerFrame() {
+        return mBuilder.mSamplesPerFrame;
+    }
+
+    /**
+     * Gets the AAC frames per buffer
+     */
+    public int getFramesPerBuffer() {
+        return mBuilder.mFramesPerBuffer;
+    }
+
+    /**
+     * Gets the retention period in hours
+     */
+    public int getRetentionPeriodInHours() {
+        return mBuilder.mRetentionPeriodInHours;
+    }
+
+    /**
+     * Gets the encoding bitrate.
+     */
+    public int getBitRate() {
+        return mBuilder.mEncodingBitrate;
+    }
+
+    /**
+     * Gets the encoder mime type.
+     */
+    @NonNull
+    public String getEncoderMimeType() {
+        return mBuilder.mMimeType;
+    }
+
+    /**
+     * Gets the codec private data.
+     */
+    @Nullable
+    public byte[] getCodecPrivateData() {
+        return mBuilder.mCodecPrivateData;
+    }
+
+    /**
+     * Gets the timescale
+     */
+    public long getTimeScale() {
+        return mBuilder.mFrameTimescale;
+    }
+
+    /**
+     * Get if timecode is absolute or not
+     * @return
+     */
+    public boolean getIsAbsoluteTimecode() {
+        return mBuilder.mIsAbsoluteTimecode;
+    }
+
+    /**
+     * Get track id of audio track
+     * @return track id
+     */
+    public int getTrackId() {
+        return mBuilder.mTrackId;
+    }
+}
\ No newline at end of file
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/CameraMediaSourceConfiguration.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/CameraMediaSourceConfiguration.java
index f0cd635bd6..e4912f15a7 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/CameraMediaSourceConfiguration.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/CameraMediaSourceConfiguration.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.client.mediasource;
@@ -23,6 +23,8 @@
 import com.amazonaws.kinesisvideo.internal.client.mediasource.MediaSourceConfiguration;
 import com.amazonaws.kinesisvideo.producer.StreamInfo;
 
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.VIDEO_TRACK_ID;
+
 //import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 
 /**
@@ -52,6 +54,7 @@
         private StreamInfo.NalAdaptationFlags mNalAdaptationFlags;
         private boolean mIsAbsoluteTimecode;
         private int mRetentionPeriodInHours;
+        private int mTrackId = VIDEO_TRACK_ID;
 
         public Builder withEncodingMimeType(final String mimeType) {
             mMimeType = mimeType;
@@ -133,6 +136,11 @@ public Builder withIsAbsoluteTimecode(final boolean isAbsoluteTimecode) {
             return this;
         }
 
+        public Builder withTrackId(final int trackId) {
+            mTrackId = trackId;
+            return this;
+        }
+
         public String getMimeType() {
             return mMimeType;
         }
@@ -215,12 +223,14 @@ public String getMediaSourceDescription() {
         return MEDIA_SOURCE_DESCRIPTION;
     }
 
-    public static CameraMediaSourceConfiguration.Builder builder() {
-        return new CameraMediaSourceConfiguration.Builder();
+    public static Builder builder() {
+        return new Builder();
     }
 
     /**
      * Returns the ID of the camera
+     *
+     * @return ID of the camera
      */
     public String getCameraId() {
         return mBuilder.mCameraId;
@@ -228,6 +238,8 @@ public String getCameraId() {
 
     /**
      * Gets the camera facing front or back.
+     *
+     * @return camera facing front or back.
      */
     public int getCameraFacing() {
         return mBuilder.mCameraFacing;
@@ -235,6 +247,8 @@ public int getCameraFacing() {
 
     /**
      * Gets the orientation of the camera in degrees.
+     *
+     * @return orientation of the camera in degrees.
      */
     public int getCameraOrientation() {
         return mBuilder.mCameraOrientation;
@@ -242,6 +256,8 @@ public int getCameraOrientation() {
 
     /**
      * Gets the horizontal resolution.
+     *
+     * @return horizontal resolution
      */
     public int getHorizontalResolution() {
         return mBuilder.mHorizontalResolution;
@@ -249,6 +265,8 @@ public int getHorizontalResolution() {
 
     /**
      * Gets the vertical resolution.
+     *
+     * @return vertical resolution
      */
     public int getVerticalResolution() {
         return mBuilder.mVerticalResolution;
@@ -256,6 +274,8 @@ public int getVerticalResolution() {
 
     /**
      * Gets the output file name.
+     *
+     * @return Output file name
      */
     public String getOutputFileName() {
         return mBuilder.mOutputFileName;
@@ -263,6 +283,8 @@ public String getOutputFileName() {
 
     /**
      * Gets the frame rate of the camera.
+     *
+     * @return Frame rate
      */
     public int getFrameRate() {
         return mBuilder.mFrameRate;
@@ -270,6 +292,8 @@ public int getFrameRate() {
 
     /**
      * Gets the retention period in hours
+     *
+     * @return Retention period in hours
      */
     public int getRetentionPeriodInHours() {
         return mBuilder.mRetentionPeriodInHours;
@@ -277,6 +301,9 @@ public int getRetentionPeriodInHours() {
 
     /**
      * Gets the encoding bitrate.
+     *
+     * @return bit rate.
+     *
      */
     public int getBitRate() {
         return mBuilder.mEncodingBitrate;
@@ -284,6 +311,8 @@ public int getBitRate() {
 
     /**
      * Gets the encoder mime type.
+     *
+     * @return encoder mime type
      */
     @NonNull
     public String getEncoderMimeType() {
@@ -292,6 +321,8 @@ public String getEncoderMimeType() {
 
     /**
      * Gets the GOP (group-of-pictures) duration in milliseconds.
+     *
+     * @return GOP duration
      */
     public int getGopDurationMillis() {
         return mBuilder.mGopDurationMillis;
@@ -299,6 +330,8 @@ public int getGopDurationMillis() {
 
     /**
      * Whether the encoder is hardware accelerated.
+     *
+     * @return true if encoder is hardware accelerated. false otherwise
      */
     public boolean isEndcoderHardwareAccelerated() {
         return mBuilder.mIsEncoderHardwareAccelerated;
@@ -306,6 +339,8 @@ public boolean isEndcoderHardwareAccelerated() {
 
     /**
      * Gets the codec private data.
+     *
+     * @return Codec private data
      */
     @Nullable
     public byte[] getCodecPrivateData() {
@@ -314,6 +349,8 @@ public boolean isEndcoderHardwareAccelerated() {
 
     /**
      * Gets the timescale
+     *
+     * @return timescale
      */
     public long getTimeScale() {
         return mBuilder.mFrameTimescale;
@@ -321,6 +358,8 @@ public long getTimeScale() {
 
     /**
      * Get the Nal Adaption Flag
+     *
+     * @return NAL Adaption flag
      */
     public StreamInfo.NalAdaptationFlags getNalAdaptationFlags() {
         return mBuilder.mNalAdaptationFlags;
@@ -328,9 +367,17 @@ public long getTimeScale() {
 
     /**
      * Get if timecode is absolute or not
-     * @return
+     * @return true if absolute. false otherwise.
      */
     public boolean getIsAbsoluteTimecode() {
         return mBuilder.mIsAbsoluteTimecode;
     }
+
+    /**
+     * Get track id of video track
+     * @return track id
+     */
+    public int getTrackId() {
+        return mBuilder.mTrackId;
+    }
 }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/MediaSourceState.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/MediaSourceState.java
index 8c20335889..b12e5e52af 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/MediaSourceState.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/MediaSourceState.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.client.mediasource;
@@ -25,12 +25,12 @@
  * Later, if we need, we could add more state transitions to mimic lower-level encoders/hardware states for
  * more granularity if we need.
  *
- * Initialized -> Ready (allocate the buffers and configure the source)
- * Ready -> Running (start streaming)
- * Running -> Ready (pause stream. Doesn't de-allocate the buffers)
- * Running -> Stopped (stop the stream)
- * Ready -> Stopped (stop the stream)
- * Stopped -> NULL (need to re-initialize)
+ * Initialized - Ready (allocate the buffers and configure the source)
+ * Ready - Running (start streaming)
+ * Running - Ready (pause stream. Doesn't de-allocate the buffers)
+ * Running - Stopped (stop the stream)
+ * Ready - Stopped (stop the stream)
+ * Stopped - NULL (need to re-initialize)
  *
  *
  */
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/UnknownMediaSourceException.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/UnknownMediaSourceException.java
index a6afd60528..4ad507763b 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/UnknownMediaSourceException.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/UnknownMediaSourceException.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.client.mediasource;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/UnsupportedConfigurationException.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/UnsupportedConfigurationException.java
index 5e4a28f30c..bfc696fecc 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/UnsupportedConfigurationException.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/client/mediasource/UnsupportedConfigurationException.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.client.mediasource;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/exception/KinesisVideoException.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/exception/KinesisVideoException.java
index b2e2a4f6ed..9de0a3e684 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/exception/KinesisVideoException.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/exception/KinesisVideoException.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.common.exception;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/function/Consumer.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/function/Consumer.java
index 85529c1a55..47b7f97d3c 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/function/Consumer.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/function/Consumer.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.common.function;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/logging/Log.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/logging/Log.java
index ba09d9def0..9b1d99a476 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/logging/Log.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/logging/Log.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.common.logging;
@@ -376,4 +376,4 @@ private void addHexString(final byte[] bytes) {
             mStringBuilder.append(Integer.toHexString(unsignedByte));
         }
     }
-}
+}
\ No newline at end of file
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/logging/LogLevel.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/logging/LogLevel.java
index 5813e7ea76..0bdd02b84d 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/logging/LogLevel.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/logging/LogLevel.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.common.logging;
@@ -73,4 +73,4 @@ public static LogLevel fromInt(final int logLevel) {
     public int getLogLevel() {
         return mLogLevel;
     }
-}
+}
\ No newline at end of file
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/logging/OutputChannel.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/logging/OutputChannel.java
index 944ca5b988..ac37a190dd 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/logging/OutputChannel.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/logging/OutputChannel.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.common.logging;
@@ -35,4 +35,4 @@
      *         The actual message to log
      */
     void print(int level, final @NonNull String tag, final @NonNull String message);
-}
+}
\ No newline at end of file
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/preconditions/Preconditions.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/preconditions/Preconditions.java
index 96219a2f8b..1ec03e82f8 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/preconditions/Preconditions.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/common/preconditions/Preconditions.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.common.preconditions;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/config/ClientConfiguration.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/config/ClientConfiguration.java
index ae64fd0065..26a9031e0e 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/config/ClientConfiguration.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/config/ClientConfiguration.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.config;
@@ -28,33 +28,19 @@
     private URI streamUri;
     private Integer connectionTimeoutInMillis;
     private Integer readTimeoutInMillis;
-    
-    /* (non-Javadoc)
-     * @see java.lang.Object#toString()
-     */
-    @Override
-    public String toString() {
-        return "ClientConfiguration [region=" + region + ", serviceName=" + serviceName + ", apiName=" + apiName
-                + ", materialSet=" + materialSet + ", streamName=" + streamName + ", streamUri=" + streamUri
-                + ", connectionTimeoutInMillis=" + connectionTimeoutInMillis + ", readTimeoutInMillis="
-                + readTimeoutInMillis + "super=" + super.toString() + "]";
-    }
 
-    ClientConfiguration(ClientConfigurationBuilder builder) {
-        this.region = builder.region;
-        this.serviceName = builder.serviceName;
-        this.apiName = builder.apiName;
-        this.materialSet = builder.materialSet;
-        this.streamName = builder.streamName;
-        this.streamUri = builder.streamUri;
-        this.connectionTimeoutInMillis = builder.connectionTimeoutInMillis;
-        this.readTimeoutInMillis = builder.readTimeoutInMillis;
-    }
-    
-    public static ClientConfigurationBuilder builder() {
-        return new ClientConfigurationBuilder();
+    ClientConfiguration(final String region, final String serviceName, final String apiName, final String materialSet, final String streamName, final URI streamUri, final Integer connectionTimeoutInMillis, final Integer readTimeoutInMillis) {
+        this.region = region;
+        this.serviceName = serviceName;
+        this.apiName = apiName;
+        this.materialSet = materialSet;
+        this.streamName = streamName;
+        this.streamUri = streamUri;
+        this.connectionTimeoutInMillis = connectionTimeoutInMillis;
+        this.readTimeoutInMillis = readTimeoutInMillis;
     }
-    
+
+
     public static class ClientConfigurationBuilder {
         private String region;
         private String serviceName;
@@ -64,100 +50,98 @@ public static ClientConfigurationBuilder builder() {
         private URI streamUri;
         private Integer connectionTimeoutInMillis;
         private Integer readTimeoutInMillis;
-        
-        ClientConfigurationBuilder() { }
-        
-        public ClientConfigurationBuilder region(String region) {
+
+        ClientConfigurationBuilder() {
+        }
+
+        public ClientConfigurationBuilder region(final String region) {
             this.region = region;
             return this;
         }
-        
-        public ClientConfigurationBuilder serviceName(String serviceName) {
+
+        public ClientConfigurationBuilder serviceName(final String serviceName) {
             this.serviceName = serviceName;
             return this;
         }
-        
-        public ClientConfigurationBuilder apiName(String apiName) {
+
+        public ClientConfigurationBuilder apiName(final String apiName) {
             this.apiName = apiName;
             return this;
         }
-        
-        public ClientConfigurationBuilder materialSet(String materialSet) {
+
+        public ClientConfigurationBuilder materialSet(final String materialSet) {
             this.materialSet = materialSet;
             return this;
         }
-        
-        public ClientConfigurationBuilder streamName(String streamName) {
+
+        public ClientConfigurationBuilder streamName(final String streamName) {
             this.streamName = streamName;
             return this;
         }
-        
-        public ClientConfigurationBuilder streamUri(URI streamUri) {
+
+        public ClientConfigurationBuilder streamUri(final URI streamUri) {
             this.streamUri = streamUri;
             return this;
         }
-        
-        public ClientConfigurationBuilder connectionTimeoutInMillis(Integer connectionTimeoutInMillis) {
+
+        public ClientConfigurationBuilder connectionTimeoutInMillis(final Integer connectionTimeoutInMillis) {
             this.connectionTimeoutInMillis = connectionTimeoutInMillis;
             return this;
         }
-        
-        public ClientConfigurationBuilder readTimeoutInMillis(Integer readTimeoutInMillis) {
+
+        public ClientConfigurationBuilder readTimeoutInMillis(final Integer readTimeoutInMillis) {
             this.readTimeoutInMillis = readTimeoutInMillis;
             return this;
         }
-        
+
         public ClientConfiguration build() {
-            return new ClientConfiguration(this);
+            return new ClientConfiguration(region, serviceName, apiName, materialSet, streamName, streamUri, connectionTimeoutInMillis, readTimeoutInMillis);
+        }
+
+        @Override
+        public String toString() {
+            return "ClientConfiguration.ClientConfigurationBuilder(region=" + this.region + ", serviceName=" + this.serviceName + ", apiName=" + this.apiName + ", materialSet=" + this.materialSet + ", streamName=" + this.streamName + ", streamUri=" + this.streamUri + ", connectionTimeoutInMillis=" + this.connectionTimeoutInMillis + ", readTimeoutInMillis=" + this.readTimeoutInMillis + ")";
         }
     }
-    
-    /**
-     * @return the region
-     */
+
+    public static ClientConfigurationBuilder builder() {
+        return new ClientConfigurationBuilder();
+    }
+
     public String getRegion() {
-        return region;
+        return this.region;
     }
-    /**
-     * @return the serviceName
-     */
+
     public String getServiceName() {
-        return serviceName;
+        return this.serviceName;
     }
-    /**
-     * @return the apiName
-     */
+
     public String getApiName() {
-        return apiName;
+        return this.apiName;
     }
-    /**
-     * @return the materialSet
-     */
+
     public String getMaterialSet() {
-        return materialSet;
+        return this.materialSet;
     }
-    /**
-     * @return the streamName
-     */
+
     public String getStreamName() {
-        return streamName;
+        return this.streamName;
     }
-    /**
-     * @return the streamUri
-     */
+
     public URI getStreamUri() {
-        return streamUri;
+        return this.streamUri;
     }
-    /**
-     * @return the connectionTimeoutInMillis
-     */
+
     public Integer getConnectionTimeoutInMillis() {
-        return connectionTimeoutInMillis;
+        return this.connectionTimeoutInMillis;
     }
-    /**
-     * @return the readTimeoutInMillis
-     */
+
     public Integer getReadTimeoutInMillis() {
-        return readTimeoutInMillis;
+        return this.readTimeoutInMillis;
+    }
+
+    @Override
+    public String toString() {
+        return "ClientConfiguration(region=" + this.getRegion() + ", serviceName=" + this.getServiceName() + ", apiName=" + this.getApiName() + ", materialSet=" + this.getMaterialSet() + ", streamName=" + this.getStreamName() + ", streamUri=" + this.getStreamUri() + ", connectionTimeoutInMillis=" + this.getConnectionTimeoutInMillis() + ", readTimeoutInMillis=" + this.getReadTimeoutInMillis() + ")";
     }
 }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/encoding/ChunkDecoder.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/encoding/ChunkDecoder.java
index 2216d80409..5ff92d189e 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/encoding/ChunkDecoder.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/encoding/ChunkDecoder.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.encoding;
@@ -110,7 +110,7 @@ private static String readInputStream(final InputStream inputStream, final byte[
         do {
             result = inputStream.read(buffer, offset++, 1);
         } while (result > -1 && arrayIndexOf(buffer, 0, offset, delimiter) == -1);
-        return new String(buffer, 0 , offset, StandardCharsets.UTF_8);
+        return new String(buffer, 0, offset, StandardCharsets.UTF_8);
     }
 
     public static int arrayIndexOf(final byte[] haystack, final int tail, final int head, final byte[] needle) {
@@ -182,12 +182,21 @@ private static String parseTextBody(final BufferedReader reader) {
     public static Integer decodeAckInResponseBody(final InputStream inputStream,
                                                   final Consumer<String> ackTimestampConsumer) {
         final BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.US_ASCII));
+
+        try {
+            skipResponseHeaders(reader);
+            return parseResponseBodyAndDecodeAck(reader, ackTimestampConsumer);
+        } catch (final Throwable e) {
+            throw new RuntimeException("Exception while decoding Ack in response ! ", e);
+        }
+    }
+
+    public static Integer parseResponseBodyAndDecodeAck(final BufferedReader reader,
+            final Consumer<String> ackTimestampConsumer) {
         String line;
         int chunkSize;
         int numBytesRead, offset, ackCount = 0;
-
         try {
-            skipResponseHeaders(reader);
             line = skipEmptyLines(reader);
 
             // Parse chunk data
@@ -220,7 +229,6 @@ public static Integer decodeAckInResponseBody(final InputStream inputStream,
         } catch (final Throwable e) {
             throw new RuntimeException("Exception while decoding Ack in response ! ", e);
         }
-
         return ackCount;
     }
 
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/encoding/ChunkEncoder.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/encoding/ChunkEncoder.java
index 0438629cdb..16efec1a89 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/encoding/ChunkEncoder.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/encoding/ChunkEncoder.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.encoding;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/HttpClient.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/HttpClient.java
index c574061ac4..30ecf72f1b 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/HttpClient.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/HttpClient.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.http;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/HttpClientBase.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/HttpClientBase.java
new file mode 100644
index 0000000000..fcd8e6e3ce
--- /dev/null
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/HttpClientBase.java
@@ -0,0 +1,132 @@
+/**
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.kinesisvideo.http;
+
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.URI;
+import java.nio.charset.StandardCharsets;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.http.entity.ContentType;
+
+public abstract class HttpClientBase implements HttpClient {
+    
+    private static final String HOST_HEADER = "Host";
+    private static final int DEFAULT_CONNECTION_TIMEOUT_IN_MILLIS = 10000; //magic number
+    private static final int DEFAULT_SOCKET_TIMEOUT_IN_MILLIS = 10000; //magic number
+
+    protected final BuilderBase<? extends BuilderBase> mBuilder;
+    
+    public HttpClientBase(final BuilderBase<? extends BuilderBase> builder) {
+        this.mBuilder = builder;
+    }
+    
+    /**
+     * This method is intended for testing use only.
+     *
+     * @param key header key
+     * @param value header value
+     */
+    public void addHeaderUnsafe(final String key, final String value) {
+        mBuilder.withHeader(key, value);
+    }
+
+    @Override
+    public HttpMethodName getMethod() {
+        return mBuilder.mMethod;
+    }
+
+    @Override
+    public URI getUri() {
+        return mBuilder.mUri;
+    }
+
+    @Override
+    public Map<String, String> getHeaders() {
+        return mBuilder.mHeaders;
+    }
+
+    @Override
+    public InputStream getContent() {
+        return new ByteArrayInputStream(mBuilder.mContentInJson.getBytes(StandardCharsets.US_ASCII));
+    }
+
+    @Override
+    public void close() throws IOException {
+        this.closeClient();
+    }
+
+    public abstract void closeClient() throws IOException;
+    
+    public abstract static class BuilderBase<T> {
+        protected final Map<String, String> mHeaders;
+        protected URI mUri;
+        protected HttpMethodName mMethod;
+        protected int mConnectionTimeoutInMillis;
+        protected int mSocketTimeoutInMillis;
+        protected ContentType mContentType;
+        protected String mContentInJson;
+        
+        public abstract T builderType();
+
+        public BuilderBase() {
+            mHeaders = new HashMap<String, String>();
+            mConnectionTimeoutInMillis = DEFAULT_CONNECTION_TIMEOUT_IN_MILLIS;
+            mSocketTimeoutInMillis = DEFAULT_SOCKET_TIMEOUT_IN_MILLIS;
+        }
+
+        public T withUri(final URI uri) {
+            mUri = uri;
+            mHeaders.put(HOST_HEADER, uri.getHost());
+            return builderType();
+        }
+
+        public T withMethod(final HttpMethodName method) {
+            mMethod = method;
+            return builderType();
+        }
+
+        public T withHeader(final String key, final String value) {
+            mHeaders.put(key, value);
+            return builderType();
+        }
+
+        public T withConnectionTimeoutInMillis(final int connectionTimeoutInMillis) {
+            mConnectionTimeoutInMillis = connectionTimeoutInMillis;
+            return builderType();
+        }
+
+        public T withSocketTimeoutInMillis(final int socketTimeoutInMillis) {
+            mSocketTimeoutInMillis = socketTimeoutInMillis;
+            return builderType();
+        }
+
+        public T withContentType(final ContentType contentType) {
+            mContentType = contentType;
+            return builderType();
+        }
+
+        public T withContentInJson(final String contentInJson) {
+            mContentInJson = contentInJson;
+            return builderType();
+        }
+    } 
+}
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/HttpMethodName.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/HttpMethodName.java
index 84b1f46425..4d9ff35acb 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/HttpMethodName.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/HttpMethodName.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.http;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/KinesisVideoApacheHttpAsyncClient.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/KinesisVideoApacheHttpAsyncClient.java
new file mode 100644
index 0000000000..d91eb0e578
--- /dev/null
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/KinesisVideoApacheHttpAsyncClient.java
@@ -0,0 +1,128 @@
+/**
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.kinesisvideo.http;
+
+import static com.amazonaws.kinesisvideo.common.preconditions.Preconditions.checkNotNull;
+
+import java.io.IOException;
+import java.security.KeyManagementException;
+import java.security.KeyStoreException;
+import java.security.NoSuchAlgorithmException;
+import java.util.Map;
+
+import org.apache.http.HttpEntity;
+import org.apache.http.HttpResponse;
+import org.apache.http.client.config.RequestConfig;
+import org.apache.http.client.methods.HttpPost;
+import org.apache.http.concurrent.FutureCallback;
+import org.apache.http.conn.ssl.NoopHostnameVerifier;
+import org.apache.http.entity.StringEntity;
+import org.apache.http.impl.nio.client.CloseableHttpAsyncClient;
+import org.apache.http.impl.nio.client.HttpAsyncClientBuilder;
+import org.apache.http.nio.client.methods.HttpAsyncMethods;
+import org.apache.http.nio.conn.ssl.SSLIOSessionStrategy;
+import org.apache.http.nio.protocol.HttpAsyncRequestProducer;
+import org.apache.http.nio.protocol.HttpAsyncResponseConsumer;
+import org.apache.http.ssl.SSLContextBuilder;
+
+/**
+ * Http Async Client which uses Apache HttpAsyncClient internally to make
+ * the http request and invoke callbacks when there is data ready to consume.
+ */
+public final class KinesisVideoApacheHttpAsyncClient extends HttpClientBase {
+    
+    private final CloseableHttpAsyncClient mHttpClient;
+
+    private KinesisVideoApacheHttpAsyncClient(final BuilderBase<Builder> builder) {
+        super(builder);
+        this.mHttpClient = buildHttpAsyncClient();
+        this.mHttpClient.start();
+    }
+
+    public static Builder builder() {
+        return new Builder();
+    }
+
+    public void executeRequest() {
+        final HttpPost request = new HttpPost(mBuilder.mUri);
+        for (Map.Entry<String, String> entry : mBuilder.mHeaders.entrySet()) {
+            request.addHeader(entry.getKey(), entry.getValue());
+        }
+        final HttpEntity entity = new StringEntity(mBuilder.mContentInJson, mBuilder.mContentType);
+        request.setEntity(entity);
+        final HttpAsyncRequestProducer requestProducer = HttpAsyncMethods.create(request);
+        this.mHttpClient.execute(requestProducer, ((Builder) mBuilder).mHttpAsyncResponseConsumer,
+                ((Builder) mBuilder).mFutureCallback);
+    }
+
+    private CloseableHttpAsyncClient buildHttpAsyncClient() {
+        final SSLContextBuilder builder = new SSLContextBuilder();
+        try {
+            builder.loadTrustMaterial(new TrustAllStrategy());
+            final SSLIOSessionStrategy sslSessionStrategy = new SSLIOSessionStrategy(builder.build(),
+                    new String[] {"TLSv1.2"},
+                    null,
+                    new NoopHostnameVerifier());
+            return HttpAsyncClientBuilder.create()
+                    .setSSLStrategy(sslSessionStrategy)
+                    .setDefaultRequestConfig(RequestConfig.custom()
+                            .setConnectTimeout(mBuilder.mConnectionTimeoutInMillis)
+                            .setSocketTimeout(mBuilder.mSocketTimeoutInMillis)
+                            .build())
+                    .build();
+        } catch (final KeyManagementException e) {
+            throw new RuntimeException("Exception while building Apache http client", e);
+        } catch (final NoSuchAlgorithmException e) {
+            throw new RuntimeException("Exception while building Apache http client", e);
+        } catch (final KeyStoreException e) {
+            throw new RuntimeException("Exception while building Apache http client", e);
+        }
+    }
+    
+    public static final class Builder extends BuilderBase<Builder> {
+        
+        private HttpAsyncResponseConsumer<HttpResponse> mHttpAsyncResponseConsumer;
+        private FutureCallback<HttpResponse> mFutureCallback;
+        
+        public Builder withHttpAsyncResponseConsumer(final HttpAsyncResponseConsumer<HttpResponse> 
+                          httpAsyncResponseConsumer) {
+            mHttpAsyncResponseConsumer = httpAsyncResponseConsumer;
+            return this;
+        }
+        
+        public Builder withFutureCallback(final FutureCallback<HttpResponse> futureCallback) {
+            mFutureCallback = futureCallback;
+            return this;
+        }
+
+        public KinesisVideoApacheHttpAsyncClient build() {
+            checkNotNull(mUri);
+            return new KinesisVideoApacheHttpAsyncClient(this);
+        }
+
+        @Override
+        public Builder builderType() {
+            return this;
+        }
+    }
+
+    @Override
+    public void closeClient() throws IOException {
+        this.mHttpClient.close();
+    }
+}
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/KinesisVideoApacheHttpClient.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/KinesisVideoApacheHttpClient.java
index 2b6eca5acb..bc6cc5b105 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/KinesisVideoApacheHttpClient.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/KinesisVideoApacheHttpClient.java
@@ -1,68 +1,52 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.http;
 
+import static com.amazonaws.kinesisvideo.common.preconditions.Preconditions.checkNotNull;
+
+import java.io.IOException;
+import java.security.KeyManagementException;
+import java.security.KeyStoreException;
+import java.security.NoSuchAlgorithmException;
+import java.util.Map;
+
 import org.apache.http.HttpEntity;
 import org.apache.http.client.config.RequestConfig;
 import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpPost;
 import org.apache.http.config.SocketConfig;
+import org.apache.http.conn.ssl.NoopHostnameVerifier;
 import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
-import org.apache.http.conn.ssl.TrustStrategy;
-import org.apache.http.entity.ContentType;
 import org.apache.http.entity.StringEntity;
 import org.apache.http.impl.client.CloseableHttpClient;
 import org.apache.http.impl.client.HttpClients;
 import org.apache.http.ssl.SSLContextBuilder;
 
-import javax.net.ssl.HostnameVerifier;
-import javax.net.ssl.SSLSession;
-
-import static com.amazonaws.kinesisvideo.common.preconditions.Preconditions.checkNotNull;
-
-import java.io.ByteArrayInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.UnsupportedEncodingException;
-import java.net.URI;
-import java.nio.charset.StandardCharsets;
-import java.security.KeyManagementException;
-import java.security.KeyStoreException;
-import java.security.NoSuchAlgorithmException;
-import java.security.cert.CertificateException;
-import java.security.cert.X509Certificate;
-import java.util.HashMap;
-import java.util.Map;
-
 /**
  * Http Client which uses Apache HttpClient internally to make
  * the http request and get the response.
  */
-public final class KinesisVideoApacheHttpClient implements HttpClient {
-    private static final String HOST_HEADER = "Host";
-    private static final int DEFAULT_CONNECTION_TIMEOUT_IN_MILLIS = 10000; //magic number
-    private static final int DEFAULT_SOCKET_TIMEOUT_IN_MILLIS = 10000; //magic number
+public final class KinesisVideoApacheHttpClient extends HttpClientBase {
 
-    private final Builder mBuilder;
     private final CloseableHttpClient mHttpClient;
 
-    private KinesisVideoApacheHttpClient(final Builder builder) {
-        this.mBuilder = builder;
+    private KinesisVideoApacheHttpClient(final BuilderBase<Builder> builder) {
+        super(builder);
         this.mHttpClient = buildHttpClient();
     }
 
@@ -76,9 +60,9 @@ public CloseableHttpResponse executeRequest() {
         for (Map.Entry<String, String> entry : mBuilder.mHeaders.entrySet()) {
             request.addHeader(entry.getKey(), entry.getValue());
         }
+        final HttpEntity entity = new StringEntity(mBuilder.mContentInJson, mBuilder.mContentType);
+        request.setEntity(entity);
         try {
-            final HttpEntity entity = new StringEntity(mBuilder.mContentInJson, mBuilder.mContentType.getCharset().toString());
-            request.setEntity(entity);
             return this.mHttpClient.execute(request);
         } catch (final IOException e) {
             throw new RuntimeException("Exception while doing a POST on the URI " + mBuilder.mUri, e);
@@ -92,7 +76,7 @@ private CloseableHttpClient buildHttpClient() {
             final SSLConnectionSocketFactory sslSocketFactory = new SSLConnectionSocketFactory(builder.build(),
                     new String[] {"TLSv1.2"}, // TLS protocol, use 1.2 only
                     null, // TLS ciphers, use default
-                    new NoOpHostNameVerifier());
+                    new NoopHostnameVerifier());
             return HttpClients.custom()
                     .setSSLSocketFactory(sslSocketFactory)
                     .setDefaultRequestConfig(RequestConfig.custom()
@@ -111,111 +95,21 @@ private CloseableHttpClient buildHttpClient() {
         }
     }
 
-    /**
-     * This method is intended for testing use only.
-     *
-     * @param key header key
-     * @param value header value
-     */
-    public void addHeaderUnsafe(final String key, final String value) {
-        mBuilder.withHeader(key, value);
-    }
-
-    @Override
-    public HttpMethodName getMethod() {
-        return mBuilder.mMethod;
-    }
-
-    @Override
-    public URI getUri() {
-        return mBuilder.mUri;
-    }
-
-    @Override
-    public Map<String, String> getHeaders() {
-        return mBuilder.mHeaders;
-    }
-
     @Override
-    public InputStream getContent() {
-        return new ByteArrayInputStream(mBuilder.mContentInJson.getBytes(StandardCharsets.US_ASCII));
-    }
-
-    @Override
-    public void close() throws IOException {
+    public void closeClient() throws IOException {
         this.mHttpClient.close();
     }
-
-    public static final class Builder {
-        private final Map<String, String> mHeaders;
-        private URI mUri;
-        private HttpMethodName mMethod;
-        private int mConnectionTimeoutInMillis;
-        private int mSocketTimeoutInMillis;
-        private ContentType mContentType;
-        private String mContentInJson;
-
-        private Builder() {
-            mHeaders = new HashMap<String, String>();
-            mConnectionTimeoutInMillis = DEFAULT_CONNECTION_TIMEOUT_IN_MILLIS;
-            mSocketTimeoutInMillis = DEFAULT_SOCKET_TIMEOUT_IN_MILLIS;
-        }
-
-        public Builder withUri(final URI uri) {
-            mUri = uri;
-            mHeaders.put(HOST_HEADER, uri.getHost());
-            return this;
-        }
-
-        public Builder withMethod(final HttpMethodName method) {
-            mMethod = method;
-            return this;
-        }
-
-        public Builder withHeader(final String key, final String value) {
-            mHeaders.put(key, value);
-            return this;
-        }
-
-        public Builder withConnectionTimeoutInMillis(final int connectionTimeoutInMillis) {
-            mConnectionTimeoutInMillis = connectionTimeoutInMillis;
-            return this;
-        }
-
-        public Builder withSocketTimeoutInMillis(final int socketTimeoutInMillis) {
-            mSocketTimeoutInMillis = socketTimeoutInMillis;
-            return this;
-        }
-
-        public Builder withContentType(final ContentType contentType) {
-            mContentType = contentType;
-            return this;
-        }
-
-        public Builder withContentInJson(final String contentInJson) {
-            mContentInJson = contentInJson;
-            return this;
-        }
-
+    
+    public static final class Builder extends BuilderBase<Builder> {
+        
         public KinesisVideoApacheHttpClient build() {
             checkNotNull(mUri);
             return new KinesisVideoApacheHttpClient(this);
         }
-    }
-
-    private static class TrustAllStrategy implements TrustStrategy {
 
         @Override
-        public boolean isTrusted(final X509Certificate[] chain, final String authType) throws CertificateException {
-            //Trust all certificates
-            return true;
-        }
-    }
-
-    private static class NoOpHostNameVerifier implements HostnameVerifier {
-        @Override
-        public boolean verify(String hostname, SSLSession session) {
-            return true;
+        public Builder builderType() {
+            return this;
         }
     }
 }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/ParallelSimpleHttpClient.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/ParallelSimpleHttpClient.java
index 3bfd909e17..d00271a14a 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/ParallelSimpleHttpClient.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/ParallelSimpleHttpClient.java
@@ -1,24 +1,27 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.http;
 
-import static com.amazonaws.kinesisvideo.common.preconditions.Preconditions.checkNotNull;
+import com.amazonaws.kinesisvideo.common.function.Consumer;
+import com.amazonaws.kinesisvideo.common.logging.Log;
+import com.amazonaws.kinesisvideo.socket.SocketFactory;
 
+import static com.amazonaws.kinesisvideo.common.preconditions.Preconditions.checkNotNull;
 import java.io.BufferedWriter;
 import java.io.IOException;
 import java.io.InputStream;
@@ -33,102 +36,25 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 
-import com.amazonaws.kinesisvideo.common.function.Consumer;
-import com.amazonaws.kinesisvideo.common.logging.Log;
-import com.amazonaws.kinesisvideo.socket.SocketFactory;
-
-import android.support.annotation.NonNull;
-
 public final class ParallelSimpleHttpClient implements HttpClient {
     private static final String SPACE = " ";
     private static final String CLRF = "\r\n";
     private static final String HTTP_1_1 = "HTTP/1.1";
     private static final String HEADER_FORMAT = "%s: %s";
     private static final String HOST_HEADER = "Host";
-    private final Log log;
-
     private static final Consumer<OutputStream> NO_OP_SENDER = new Consumer<OutputStream>() {
         @Override
         public void accept(final OutputStream outputStream) {
             // no op;
         }
     };
-
     private static final Consumer<Exception> NO_OP_COMPLETION = new Consumer<Exception>() {
         @Override
-        public void accept(Exception object) {
+        public void accept(final Exception object) {
             // No op;
         }
     };
-
-    public static final class Builder {
-        private final Map<String, String> mHeaders;
-        private URI mUri;
-        private HttpMethodName mMethod;
-        private Consumer<OutputStream> mSender;
-        private Consumer<InputStream> mReceiver;
-        private Integer mTimeout;
-        private Consumer<Exception> mCompletion;
-        // TODO: Set to correct output channel
-        private Log mLog = new Log(Log.SYSTEM_OUT);
-
-        private Builder() {
-            mHeaders = new HashMap<String, String>();
-            mSender = NO_OP_SENDER;
-            mCompletion = NO_OP_COMPLETION;
-        }
-
-        public Builder uri(final URI uri) {
-            mUri = uri;
-            mHeaders.put(HOST_HEADER, uri.getHost());
-            return this;
-        }
-
-        public Builder method(final HttpMethodName method) {
-            mMethod = method;
-            return this;
-        }
-
-        public Builder header(final String key, final String value) {
-            mHeaders.put(key, value);
-            return this;
-        }
-
-        public Builder completionCallback(final Consumer<Exception> completion) {
-            // Make sure we don't override the default no-op
-            if (completion != null) {
-                mCompletion = completion;
-            }
-
-            return this;
-        }
-
-        public Builder setSenderCallback(final Consumer<OutputStream> sender) {
-            mSender = sender;
-            return this;
-        }
-
-        public Builder setReceiverCallback(final Consumer<InputStream> receiver) {
-            mReceiver = receiver;
-            return this;
-        }
-
-        public Builder setTimeout(final Integer timeout) {
-            mTimeout = timeout;
-            return this;
-        }
-
-        public Builder log(@NonNull final Log log) {
-            mLog = log;
-            return this;
-        }
-
-        public ParallelSimpleHttpClient build() {
-            checkNotNull(mUri);
-            return new ParallelSimpleHttpClient(this);
-        }
-    }
-
+    private final Log log;
     private final Builder mBuilder;
     private Socket mSocket;
     private InputStream mInputStream;
@@ -137,8 +63,8 @@ public ParallelSimpleHttpClient build() {
     private ExecutorService responseReceiver;
 
     private ParallelSimpleHttpClient(final Builder builder) {
-            mBuilder = builder;
-            log = mBuilder.mLog;
+        mBuilder = builder;
+        log = mBuilder.mLog;
     }
 
     public static Builder builder() {
@@ -182,28 +108,15 @@ private void startCommunication() throws Exception {
 
     private void sendInitRequest() throws Exception {
         final Writer outputWriter = new BufferedWriter(new OutputStreamWriter(mOutputStream, Charset.defaultCharset()));
-        final String initRequest = new StringBuilder()
-                .append(getHttpRequestString())
-                .append(getHeadersString())
-                .append(CLRF)
-                .toString();
-
+        final String initRequest = new StringBuilder().append(getHttpRequestString()).append(getHeadersString()).append(CLRF).toString();
         log.debug("Request: " + initRequest);
-
         outputWriter.write(initRequest);
         outputWriter.flush();
     }
 
     private String getHttpRequestString() {
         final StringBuilder httpRequest = new StringBuilder();
-        return httpRequest
-                .append(mBuilder.mMethod)
-                .append(SPACE)
-                .append(mBuilder.mUri.getPath())
-                .append(SPACE)
-                .append(HTTP_1_1)
-                .append(CLRF)
-                .toString();
+        return httpRequest.append(mBuilder.mMethod).append(SPACE).append(mBuilder.mUri.getPath()).append(SPACE).append(HTTP_1_1).append(CLRF).toString();
     }
 
     @Override
@@ -233,7 +146,6 @@ private String getHeadersString() {
             builder.append(headerString);
             builder.append(CLRF);
         }
-
         final String allHeaders = builder.toString();
         return allHeaders.isEmpty() ? CLRF : allHeaders;
     }
@@ -241,52 +153,51 @@ private String getHeadersString() {
     private void sendPayloadInBackground() {
         if (mBuilder.mSender != null) {
             payloadSender = Executors.newFixedThreadPool(1);
-            payloadSender.execute(
-                    new Runnable() {
-                        @Override
-                        public void run() {
-                            Exception storedException = null;
-                            try {
-                                // This is needed to get the thread Id.
-                                log.debug("Start sending data.");
-                                mBuilder.mSender.accept(mOutputStream);
-                                log.debug("End sending data. Sent all data, close.");
-                            } catch (final Exception e) {
-                                log.exception(e, "Exception thrown on sending thread");
-                                storedException = e;
-                            } finally {
-                                if (storedException != null) {
-                                    mBuilder.mCompletion.accept(storedException);
-                                }
-                                payloadSender.shutdownNow();
-                            }
+            payloadSender.execute(new Runnable() {
+                @Override
+                public void run() {
+                    Exception storedException = null;
+                    try {
+                        // This is needed to get the thread Id.
+                        log.debug("Start sending data.");
+                        mBuilder.mSender.accept(mOutputStream);
+                        log.debug("End sending data. Sent all data, close.");
+                    } catch (final Exception e) {
+                        log.exception(e, "Exception thrown on sending thread");
+                        storedException = e;
+                    } finally {
+                        //Only call completion if there is an exception, otherwise sender will call completion
+                        if (storedException != null) {
+                            mBuilder.mCompletion.accept(storedException);
                         }
-                    });
+                        payloadSender.shutdownNow();
+                    }
+                }
+            });
         }
     }
 
     private void receiveResponseInBackground() {
         if (mBuilder.mReceiver != null) {
             responseReceiver = Executors.newFixedThreadPool(1);
-            responseReceiver.execute(
-                    new Runnable() {
-                        @Override
-                        public void run() {
-                            Exception storedException = null;
-                            try {
-                                log.debug("Starting receiving data");
-                                mBuilder.mReceiver.accept(mInputStream);
-                                log.debug("Received all data, close");
-                            } catch (final Exception e) {
-                                log.exception(e, "Exception thrown on receiving thread");
-                                storedException = e;
-                            } finally {
-                                mBuilder.mCompletion.accept(storedException);
-                                responseReceiver.shutdownNow();
-                                closeSocket();
-                            }
-                        }
-                    });
+            responseReceiver.execute(new Runnable() {
+                @Override
+                public void run() {
+                    Exception storedException = null;
+                    try {
+                        log.debug("Starting receiving data");
+                        mBuilder.mReceiver.accept(mInputStream);
+                        log.debug("Received all data, close");
+                    } catch (final Exception e) {
+                        log.exception(e, "Exception thrown on receiving thread");
+                        storedException = e;
+                    } finally {
+                        mBuilder.mCompletion.accept(storedException);
+                        responseReceiver.shutdownNow();
+                        closeSocket();
+                    }
+                }
+            });
         }
     }
 
@@ -310,4 +221,75 @@ public void close() throws IOException {
         closeSocket();
         mBuilder.mCompletion.accept(null);
     }
+
+
+    public static final class Builder {
+        private final Map<String, String> mHeaders;
+        private URI mUri;
+        private HttpMethodName mMethod;
+        private Consumer<OutputStream> mSender;
+        private Consumer<InputStream> mReceiver;
+        private Integer mTimeout;
+        private Consumer<Exception> mCompletion;
+        // TODO: Set to correct output channel
+        private Log mLog = new Log(Log.SYSTEM_OUT);
+
+        private Builder() {
+            mHeaders = new HashMap<String, String>();
+            mSender = NO_OP_SENDER;
+            mCompletion = NO_OP_COMPLETION;
+        }
+
+        public Builder uri(final URI uri) {
+            mUri = uri;
+            mHeaders.put(HOST_HEADER, uri.getHost());
+            return this;
+        }
+
+        public Builder method(final HttpMethodName method) {
+            mMethod = method;
+            return this;
+        }
+
+        public Builder header(final String key, final String value) {
+            mHeaders.put(key, value);
+            return this;
+        }
+
+        public Builder completionCallback(final Consumer<Exception> completion) {
+            // Make sure we don't override the default no-op
+            if (completion != null) {
+                mCompletion = completion;
+            }
+            return this;
+        }
+
+        public Builder setSenderCallback(final Consumer<OutputStream> sender) {
+            mSender = sender;
+            return this;
+        }
+
+        public Builder setReceiverCallback(final Consumer<InputStream> receiver) {
+            mReceiver = receiver;
+            return this;
+        }
+
+        public Builder setTimeout(final Integer timeout) {
+            mTimeout = timeout;
+            return this;
+        }
+
+        public Builder log( final Log log) {
+            if (log == null) {
+                throw new NullPointerException("log");
+            }
+            mLog = log;
+            return this;
+        }
+
+        public ParallelSimpleHttpClient build() {
+            checkNotNull(mUri);
+            return new ParallelSimpleHttpClient(this);
+        }
+    }
 }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/TrustAllStrategy.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/TrustAllStrategy.java
new file mode 100644
index 0000000000..b192633a33
--- /dev/null
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/http/TrustAllStrategy.java
@@ -0,0 +1,32 @@
+/**
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.kinesisvideo.http;
+
+import java.security.cert.CertificateException;
+import java.security.cert.X509Certificate;
+
+import org.apache.http.conn.ssl.TrustStrategy;
+
+public class TrustAllStrategy implements TrustStrategy {
+
+    @Override
+    public boolean isTrusted(final X509Certificate[] chain, final String authType) throws CertificateException {
+        //Trust all certificates
+        return true;
+    }
+}
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/client/AbstractKinesisVideoClient.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/client/AbstractKinesisVideoClient.java
index 6dc1f1c451..e64bafc7fb 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/client/AbstractKinesisVideoClient.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/client/AbstractKinesisVideoClient.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.internal.client;
@@ -94,6 +94,18 @@ public void startAllMediaSources() throws KinesisVideoException {
         }
     }
 
+    /**
+     * Free media source's binding producer stream
+     *
+     * @param mediaSource media source binding to kinesis video producer stream to be freed
+     * @throws KinesisVideoException if unable to free media source.
+     */
+    @Override
+    public void freeMediaSource(@NonNull final MediaSource mediaSource) throws KinesisVideoException {
+        mMediaSources.remove(mediaSource);
+        mediaSource.stop();
+    }
+
     /**
      * Pauses the processing
      */
@@ -158,5 +170,6 @@ public void registerMediaSource(@NonNull final MediaSource mediaSource) throws K
     @Override
     public void unregisterMediaSource(@NonNull final MediaSource mediaSource) throws KinesisVideoException {
         mMediaSources.remove(mediaSource);
+        mediaSource.stop();
     }
 }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/client/NativeKinesisVideoClient.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/client/NativeKinesisVideoClient.java
index 89c981990f..5352f72a0b 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/client/NativeKinesisVideoClient.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/client/NativeKinesisVideoClient.java
@@ -1,24 +1,24 @@
-
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.internal.client;
 
 import static com.amazonaws.kinesisvideo.common.preconditions.Preconditions.checkNotNull;
+import static com.amazonaws.kinesisvideo.internal.producer.ReadResult.INVALID_UPLOAD_HANDLE_VALUE;
 
 import java.util.Collections;
 import java.util.HashMap;
@@ -155,27 +155,48 @@ public void registerMediaSource(@NonNull final MediaSource mediaSource) throws K
     @Override
     public void unregisterMediaSource(@NonNull final MediaSource mediaSource) throws KinesisVideoException {
         Preconditions.checkNotNull(mediaSource);
+        mediaSource.stop();
         super.unregisterMediaSource(mediaSource);
 
-        final KinesisVideoProducerStream producerStream = mMediaSourceToStreamMap.get(mediaSource);
-
-        // The following call will not block for the stopped event
-        producerStream.stopStream();
+        final KinesisVideoProducerStream producerStream = mMediaSourceToStreamMap.remove(mediaSource);
+        try {
+            // The following call will blocked till the stopped event completes
+            producerStream.stopStreamSync();
+        } finally {
+            kinesisVideoProducer.freeStream(producerStream);
+            mServiceCallbacks.removeStream(producerStream);
+        }
+    }
 
-        kinesisVideoProducer.freeStream(producerStream);
-        mServiceCallbacks.removeStream(producerStream);
+    @Override
+    public void freeMediaSource(@NonNull final MediaSource mediaSource) throws KinesisVideoException {
+        Preconditions.checkNotNull(mediaSource);
+        super.freeMediaSource(mediaSource);
+
+        final KinesisVideoProducerStream producerStream = mMediaSourceToStreamMap.remove(mediaSource);
+        try {
+            // The following call will not blocked during the stopped event
+            producerStream.streamClosed(INVALID_UPLOAD_HANDLE_VALUE);
+        } finally {
+            kinesisVideoProducer.freeStream(producerStream);
+            mServiceCallbacks.removeStream(producerStream);
+        }
     }
 
     @Override
     public void stopAllMediaSources() throws KinesisVideoException {
         super.stopAllMediaSources();
-        for (final MediaSource mediaSource : mMediaSources) {
-            final KinesisVideoProducerStream producerStream = mMediaSourceToStreamMap.get(mediaSource);
-            try {
-                producerStream.stopStreamSync();
-            } catch (final KinesisVideoException e) {
-                mLog.exception(e, "Failed to stop media source %s due to Exception ", mediaSource);
+        try {
+            for (final MediaSource mediaSource : mMediaSources) {
+                final KinesisVideoProducerStream producerStream = mMediaSourceToStreamMap.get(mediaSource);
+                try {
+                    producerStream.stopStreamSync();
+                } catch (final KinesisVideoException e) {
+                    mLog.exception(e, "Failed to stop media source %s due to Exception ", mediaSource);
+                }
             }
+        } finally {
+            mMediaSourceToStreamMap.clear();
         }
     }
 
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/client/mediasource/MediaSource.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/client/mediasource/MediaSource.java
index ff20dc69f8..719e4214aa 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/client/mediasource/MediaSource.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/client/mediasource/MediaSource.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.internal.client.mediasource;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/client/mediasource/MediaSourceConfiguration.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/client/mediasource/MediaSourceConfiguration.java
index ad1a7f020f..4131752716 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/client/mediasource/MediaSourceConfiguration.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/client/mediasource/MediaSourceConfiguration.java
@@ -1,3 +1,20 @@
+/**
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
 package com.amazonaws.kinesisvideo.internal.client.mediasource;
 
 /**
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/client/mediasource/MediaSourceSink.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/client/mediasource/MediaSourceSink.java
index 7cfe9f2e26..cfcb4c204a 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/client/mediasource/MediaSourceSink.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/client/mediasource/MediaSourceSink.java
@@ -1,3 +1,20 @@
+/**
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
 package com.amazonaws.kinesisvideo.internal.client.mediasource;
 
 import com.amazonaws.kinesisvideo.common.exception.KinesisVideoException;
@@ -20,6 +37,8 @@
 
     void onCodecPrivateData(final @Nullable byte[] codecPrivateData) throws KinesisVideoException;
 
+    void onCodecPrivateData(final @Nullable byte[] codecPrivateData, final int trackId) throws KinesisVideoException;
+
     void onFragmentMetadata(final @NonNull String metadataName, final @NonNull String metadataValue, final boolean persistent)
             throws KinesisVideoException;
 
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/DefaultOnStreamDataAvailable.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/DefaultOnStreamDataAvailable.java
new file mode 100644
index 0000000000..701fb97107
--- /dev/null
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/DefaultOnStreamDataAvailable.java
@@ -0,0 +1,58 @@
+/**
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.kinesisvideo.internal.mediasource;
+
+import com.amazonaws.kinesisvideo.common.exception.KinesisVideoException;
+import com.amazonaws.kinesisvideo.internal.client.mediasource.MediaSourceSink;
+import com.amazonaws.kinesisvideo.producer.KinesisVideoFrame;
+
+import java.nio.ByteBuffer;
+
+public class DefaultOnStreamDataAvailable implements OnStreamDataAvailable {
+    final MediaSourceSink mediaSourceSink;
+
+    public DefaultOnStreamDataAvailable(final MediaSourceSink mediaSourceSink) {
+        this.mediaSourceSink = mediaSourceSink;
+    }
+
+    @Override
+    public void onFrameDataAvailable(ByteBuffer frame) throws KinesisVideoException {
+        // no-ops
+    }
+
+    @Override
+    public void onFrameDataAvailable(final KinesisVideoFrame frame) throws KinesisVideoException {
+        // ignore frame of size 0
+        if (frame.getSize() == 0) {
+            throw new KinesisVideoException("Empty frame is provided in frame data available.");
+        }
+
+        mediaSourceSink.onFrame(frame);
+    }
+
+    @Override
+    public void onFragmentMetadataAvailable(final String metadataName, final String metadataValue,
+                                            final boolean persistent) throws KinesisVideoException {
+        mediaSourceSink.onFragmentMetadata(metadataName, metadataValue, persistent);
+    }
+
+    @Override
+    public void onCodecPrivateData(byte[] codecPrivateData, int trackId) throws KinesisVideoException {
+        mediaSourceSink.onCodecPrivateData(codecPrivateData, trackId);
+    }
+}
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/OnStreamDataAvailable.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/OnStreamDataAvailable.java
index 5f26d43e39..be293b1f4e 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/OnStreamDataAvailable.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/OnStreamDataAvailable.java
@@ -1,11 +1,31 @@
-package com.amazonaws.kinesisvideo.internal.mediasource;
+/**
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
 
-import java.nio.ByteBuffer;
+package com.amazonaws.kinesisvideo.internal.mediasource;
 
 import com.amazonaws.kinesisvideo.common.exception.KinesisVideoException;
+import com.amazonaws.kinesisvideo.producer.KinesisVideoFrame;
+
+import java.nio.ByteBuffer;
 
 public interface OnStreamDataAvailable {
-    void onFrameDataAvailable(final ByteBuffer data) throws KinesisVideoException;
-    void onFragmentMetadataAvailable(final String metadataName, final String metadataValue, final boolean persistent)
-            throws KinesisVideoException;
+    void onFrameDataAvailable(final ByteBuffer frame) throws KinesisVideoException;
+    void onFrameDataAvailable(final KinesisVideoFrame frame) throws KinesisVideoException;
+    void onFragmentMetadataAvailable(final String metadataName, final String metadataValue,
+                                     final boolean persistent) throws KinesisVideoException;
+    void onCodecPrivateData(final byte[] codecPrivateData, int trackId) throws KinesisVideoException;
 }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/ProducerStreamSink.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/ProducerStreamSink.java
index 96980d4363..0306bb4604 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/ProducerStreamSink.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/ProducerStreamSink.java
@@ -1,23 +1,24 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.internal.mediasource;
 
 import static com.amazonaws.kinesisvideo.common.preconditions.Preconditions.checkNotNull;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.DEFAULT_TRACK_ID;
 
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -53,8 +54,13 @@ public void onFrame(@NonNull final KinesisVideoFrame kinesisVideoFrame) throws K
     }
 
     @Override
-    public void onCodecPrivateData(@Nullable final byte[] bytes) throws KinesisVideoException {
-        producerStream.streamFormatChanged(bytes);
+    public void onCodecPrivateData(@Nullable final byte[] codecPrivateData) throws KinesisVideoException {
+        onCodecPrivateData(codecPrivateData, DEFAULT_TRACK_ID);
+    }
+
+    @Override
+    public void onCodecPrivateData(@Nullable final byte[] bytes, int trackId) throws KinesisVideoException {
+        producerStream.streamFormatChanged(bytes, trackId);
     }
 
     @Override
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/bytes/BytesGenerator.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/bytes/BytesGenerator.java
index 9c07e6c465..6701454863 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/bytes/BytesGenerator.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/bytes/BytesGenerator.java
@@ -1,24 +1,25 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.internal.mediasource.bytes;
 
 import com.amazonaws.kinesisvideo.common.exception.KinesisVideoException;
 import com.amazonaws.kinesisvideo.internal.mediasource.OnStreamDataAvailable;
+import com.amazonaws.kinesisvideo.producer.KinesisVideoFrame;
 import com.amazonaws.kinesisvideo.stream.throttling.DiscreteTimePeriodsThrottler;
 
 import java.nio.ByteBuffer;
@@ -26,12 +27,18 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 
-import com.amazonaws.logging.Log;
-import com.amazonaws.logging.LogFactory;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+import static com.amazonaws.kinesisvideo.producer.FrameFlags.FRAME_FLAG_KEY_FRAME;
+import static com.amazonaws.kinesisvideo.producer.FrameFlags.FRAME_FLAG_NONE;
+import static com.amazonaws.kinesisvideo.producer.Time.HUNDREDS_OF_NANOS_IN_A_MILLISECOND;
 
 public class BytesGenerator {
     private static final int DISCRETENESS_10HZ = 10;
     private static final int MAX_FRAME_SIZE_BYTES_1024 = 1024;
+    private static final int KEY_FRAME_EVERY_60_FRAMES = 60;
+    private static final long DEFAULT_FRAME_DURATION_33MS = 33L;
 
     private OnStreamDataAvailable streamDataAvailable;
 
@@ -92,7 +99,7 @@ private void generateBytesAndNotifyListener() throws KinesisVideoException {
 
             if (streamDataAvailable != null) {
                 streamDataAvailable
-                        .onFrameDataAvailable(ByteBuffer.wrap(framesData[frameCounter % framesData.length]));
+                        .onFrameDataAvailable(createKinesisVideoFrame());
             }
 
             frameCounter++;
@@ -101,6 +108,27 @@ private void generateBytesAndNotifyListener() throws KinesisVideoException {
         }
     }
 
+    private KinesisVideoFrame createKinesisVideoFrame() {
+        final long currentTimeMs = System.currentTimeMillis();
+        final long decodingTs = currentTimeMs * HUNDREDS_OF_NANOS_IN_A_MILLISECOND;
+        final long presentationTs = currentTimeMs * HUNDREDS_OF_NANOS_IN_A_MILLISECOND;
+
+        final long frameDuration = DEFAULT_FRAME_DURATION_33MS * HUNDREDS_OF_NANOS_IN_A_MILLISECOND / 2;
+
+        final int flags = isKeyFrame() ? FRAME_FLAG_KEY_FRAME : FRAME_FLAG_NONE;
+
+        return new KinesisVideoFrame(frameCounter,
+                flags,
+                decodingTs,
+                presentationTs,
+                frameDuration,
+                ByteBuffer.wrap(framesData[frameCounter % framesData.length]));
+    }
+
+    private boolean isKeyFrame() {
+        return frameCounter % KEY_FRAME_EVERY_60_FRAMES == 0;
+    }
+
     private void fillArrayWithDigitsOfFramesCounter() {
         final String counterString = String.valueOf(frameCounter) + "|";
         final byte[] counterBytes = counterString.getBytes(StandardCharsets.US_ASCII);
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/bytes/BytesMediaSource.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/bytes/BytesMediaSource.java
index 2d5ab721ef..f8d023fae6 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/bytes/BytesMediaSource.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/bytes/BytesMediaSource.java
@@ -1,27 +1,24 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.internal.mediasource.bytes;
 
-import static com.amazonaws.kinesisvideo.producer.FrameFlags.FRAME_FLAG_KEY_FRAME;
-import static com.amazonaws.kinesisvideo.producer.FrameFlags.FRAME_FLAG_NONE;
 import static com.amazonaws.kinesisvideo.producer.StreamInfo.NalAdaptationFlags.NAL_ADAPTATION_FLAG_NONE;
 import static com.amazonaws.kinesisvideo.producer.Time.HUNDREDS_OF_NANOS_IN_AN_HOUR;
-import static com.amazonaws.kinesisvideo.producer.Time.HUNDREDS_OF_NANOS_IN_A_MILLISECOND;
 import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.ABSOLUTE_TIMECODES;
 import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.DEFAULT_BITRATE;
 import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.DEFAULT_BUFFER_DURATION;
@@ -40,8 +37,6 @@
 import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.USE_FRAME_TIMECODES;
 import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.VERSION_ZERO;
 
-import java.nio.ByteBuffer;
-
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
@@ -51,16 +46,13 @@
 import com.amazonaws.kinesisvideo.client.mediasource.MediaSourceState;
 import com.amazonaws.kinesisvideo.common.exception.KinesisVideoException;
 import com.amazonaws.kinesisvideo.common.preconditions.Preconditions;
-import com.amazonaws.kinesisvideo.internal.mediasource.OnStreamDataAvailable;
-import com.amazonaws.kinesisvideo.producer.KinesisVideoFrame;
+import com.amazonaws.kinesisvideo.internal.mediasource.DefaultOnStreamDataAvailable;
 import com.amazonaws.kinesisvideo.producer.StreamCallbacks;
 import com.amazonaws.kinesisvideo.producer.StreamInfo;
 import com.amazonaws.kinesisvideo.producer.Tag;
 
 public class BytesMediaSource implements MediaSource {
     private static final String TAG = "BytesMediaSource";
-    private static final int KEY_FRAME_EVERY_60_FRAMES = 60;
-    private static final long DEFAULT_FRAME_DURATION_33MS = 33L;
 
     private final String streamName;
 
@@ -68,8 +60,6 @@
     private MediaSourceState mediaSourceState;
     private MediaSourceSink mediaSourceSink;
     private BytesGenerator bytesGenerator;
-    private int frameIndex;
-    private long lastTimestampMillis;
 
     public BytesMediaSource(final @NonNull String streamName) {
         this.streamName = streamName;
@@ -95,7 +85,7 @@ public StreamInfo getStreamInfo() {
                 configuration.getRetentionPeriodInHours() * HUNDREDS_OF_NANOS_IN_AN_HOUR,
                 NOT_ADAPTIVE,
                 MAX_LATENCY_ZERO,
-                DEFAULT_GOP_DURATION * HUNDREDS_OF_NANOS_IN_A_MILLISECOND,
+                DEFAULT_GOP_DURATION,
                 KEYFRAME_FRAGMENTATION,
                 USE_FRAME_TIMECODES,
                 ABSOLUTE_TIMECODES,
@@ -137,67 +127,10 @@ public void configure(final MediaSourceConfiguration configuration) {
     public void start() throws KinesisVideoException {
         mediaSourceState = MediaSourceState.RUNNING;
         bytesGenerator = new BytesGenerator(configuration.getFps());
-        bytesGenerator.onStreamDataAvailable(createDataAvailableCallback());
+        bytesGenerator.onStreamDataAvailable(new DefaultOnStreamDataAvailable(mediaSourceSink));
         bytesGenerator.start();
     }
 
-    private OnStreamDataAvailable createDataAvailableCallback() {
-        return new OnStreamDataAvailable() {
-            @Override
-            public void onFrameDataAvailable(final ByteBuffer data) {
-                final long currentTimeMs = System.currentTimeMillis();
-                final long decodingTs = currentTimeMs * HUNDREDS_OF_NANOS_IN_A_MILLISECOND;
-                final long presentationTs = currentTimeMs * HUNDREDS_OF_NANOS_IN_A_MILLISECOND;
-                final long msSinceLastFrame = currentTimeMs - lastTimestampMillis;
-                final long frameDuration = lastTimestampMillis == 0
-                        ? DEFAULT_FRAME_DURATION_33MS * HUNDREDS_OF_NANOS_IN_A_MILLISECOND
-                        : msSinceLastFrame * HUNDREDS_OF_NANOS_IN_A_MILLISECOND / 2;
-
-                final int flags = isKeyFrame()
-                        ? FRAME_FLAG_KEY_FRAME
-                        : FRAME_FLAG_NONE;
-
-
-                final KinesisVideoFrame frame = new KinesisVideoFrame(
-                        frameIndex++,
-                        flags,
-                        decodingTs,
-                        presentationTs,
-                        frameDuration,
-                        data);
-
-                // ignore frame of size 0 or duration of 0
-                if (frame.getSize() == 0 || frameDuration == 0) {
-                    return;
-                }
-
-                lastTimestampMillis = currentTimeMs;
-                submitFrameOnUIThread(frame);
-            }
-
-            @Override
-            public void onFragmentMetadataAvailable(final String metadataName, final String metadataValue, final boolean persistent) {
-                try {
-                    mediaSourceSink.onFragmentMetadata(metadataName, metadataValue, persistent);
-                } catch (final KinesisVideoException e) {
-                    // TODO: log/throw
-                }
-            }
-        };
-    }
-
-    private boolean isKeyFrame() {
-        return frameIndex % KEY_FRAME_EVERY_60_FRAMES == 0;
-    }
-
-    private void submitFrameOnUIThread(final KinesisVideoFrame frame) {
-        try {
-            mediaSourceSink.onFrame(frame);
-        } catch (final KinesisVideoException e) {
-            // TODO: log/throw
-        }
-    }
-
     @Override
     public void stop() throws KinesisVideoException {
         if (bytesGenerator != null) {
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/bytes/BytesMediaSourceConfiguration.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/bytes/BytesMediaSourceConfiguration.java
index decf41f049..91c7238a61 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/bytes/BytesMediaSourceConfiguration.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/bytes/BytesMediaSourceConfiguration.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.internal.mediasource.bytes;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/multitrack/MultiTrackFrameSource.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/multitrack/MultiTrackFrameSource.java
new file mode 100644
index 0000000000..89f997aec8
--- /dev/null
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/multitrack/MultiTrackFrameSource.java
@@ -0,0 +1,140 @@
+/**
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.kinesisvideo.internal.mediasource.multitrack;
+
+import com.amazonaws.kinesisvideo.common.exception.KinesisVideoException;
+import com.amazonaws.kinesisvideo.internal.mediasource.OnStreamDataAvailable;
+import com.amazonaws.kinesisvideo.producer.KinesisVideoFrame;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+import java.nio.ByteBuffer;
+import java.nio.charset.StandardCharsets;
+import java.time.Duration;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+
+import static com.amazonaws.kinesisvideo.producer.FrameFlags.FRAME_FLAG_KEY_FRAME;
+import static com.amazonaws.kinesisvideo.producer.FrameFlags.FRAME_FLAG_NONE;
+import static com.amazonaws.kinesisvideo.producer.Time.HUNDREDS_OF_NANOS_IN_A_MILLISECOND;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.FRAME_DURATION_0_MS;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.FRAME_RATE_25;
+
+public class MultiTrackFrameSource {
+    private static final int MAX_FRAME_SIZE_BYTES_1024 = 1024;
+
+    private OnStreamDataAvailable streamDataAvailable;
+    private final int fps;
+
+    private final ExecutorService executor = Executors.newFixedThreadPool(1);
+    private final byte[][] framesData = new byte[][]{
+            new byte[MAX_FRAME_SIZE_BYTES_1024],
+            new byte[MAX_FRAME_SIZE_BYTES_1024],
+            new byte[MAX_FRAME_SIZE_BYTES_1024],
+            new byte[MAX_FRAME_SIZE_BYTES_1024],
+            new byte[MAX_FRAME_SIZE_BYTES_1024],
+            new byte[MAX_FRAME_SIZE_BYTES_1024]
+    };
+
+    private final Log log = LogFactory.getLog(MultiTrackFrameSource.class);
+    private volatile boolean isRunning;
+    private int frameCounter;
+
+    public MultiTrackFrameSource(final MultiTrackMediaSourceConfiguration configuration) {
+        frameCounter = 0;
+        this.fps = configuration.getFps();
+    }
+
+    public void onStreamDataAvailable(final OnStreamDataAvailable streamDataAvailable) {
+        this.streamDataAvailable = streamDataAvailable;
+    }
+
+    public synchronized void start() {
+        if (isRunning) {
+            throw new IllegalStateException("should stop previous generator before starting the new one");
+        }
+
+        isRunning = true;
+
+        startGeneratorInBackground();
+    }
+
+    public synchronized void stop() {
+        isRunning = false;
+    }
+
+    private void startGeneratorInBackground() {
+        executor.execute(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    generateBytesAndNotifyListener();
+                } catch (final KinesisVideoException e) {
+                    log.error("Failed to keep generating frames with Exception", e);
+                }
+            }
+        });
+    }
+
+    private void generateBytesAndNotifyListener() throws KinesisVideoException {
+        while (isRunning) {
+            fillArrayWithDigitsOfFramesCounter();
+
+            if (streamDataAvailable != null) {
+                streamDataAvailable
+                        .onFrameDataAvailable(createKinesisVideoFrame());
+            }
+
+            frameCounter++;
+
+            try {
+                Thread.sleep(Duration.ofSeconds(1L).toMillis() / fps);
+            } catch (final InterruptedException e) {
+                log.error("Frame interval wait interrupted by Exception ", e);
+            }
+        }
+    }
+
+    private KinesisVideoFrame createKinesisVideoFrame() {
+        final long currentTimeMs = System.currentTimeMillis();
+        final long decodingTs = currentTimeMs * HUNDREDS_OF_NANOS_IN_A_MILLISECOND;
+        final long presentationTs = currentTimeMs * HUNDREDS_OF_NANOS_IN_A_MILLISECOND;
+        final int flags = isKeyFrame() ? FRAME_FLAG_KEY_FRAME : FRAME_FLAG_NONE;
+
+        return new KinesisVideoFrame(frameCounter,
+                flags,
+                decodingTs,
+                presentationTs,
+                FRAME_DURATION_0_MS,
+                ByteBuffer.wrap(framesData[frameCounter % framesData.length]));
+    }
+
+    private boolean isKeyFrame() {
+        return frameCounter % FRAME_RATE_25 == 0;
+    }
+
+    private void fillArrayWithDigitsOfFramesCounter() {
+        final String counterString = String.valueOf(frameCounter) + "|";
+        final byte[] counterBytes = counterString.getBytes(StandardCharsets.US_ASCII);
+        final byte[] frameData = this.framesData[frameCounter % this.framesData.length];
+
+        for (int i = 0; i < frameData.length; i++) {
+            frameData[i] = counterBytes[i % counterBytes.length];
+        }
+    }
+}
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/multitrack/MultiTrackMediaSource.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/multitrack/MultiTrackMediaSource.java
new file mode 100644
index 0000000000..59a75e7216
--- /dev/null
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/multitrack/MultiTrackMediaSource.java
@@ -0,0 +1,149 @@
+/**
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.kinesisvideo.internal.mediasource.multitrack;
+
+import com.amazonaws.kinesisvideo.client.mediasource.MediaSourceState;
+import com.amazonaws.kinesisvideo.common.exception.KinesisVideoException;
+import com.amazonaws.kinesisvideo.common.preconditions.Preconditions;
+import com.amazonaws.kinesisvideo.internal.client.mediasource.MediaSource;
+import com.amazonaws.kinesisvideo.internal.client.mediasource.MediaSourceConfiguration;
+import com.amazonaws.kinesisvideo.internal.client.mediasource.MediaSourceSink;
+import com.amazonaws.kinesisvideo.internal.mediasource.DefaultOnStreamDataAvailable;
+import com.amazonaws.kinesisvideo.producer.StreamCallbacks;
+import com.amazonaws.kinesisvideo.producer.StreamInfo;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import static com.amazonaws.kinesisvideo.producer.Time.HUNDREDS_OF_NANOS_IN_AN_HOUR;
+
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.DEFAULT_BITRATE;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.DEFAULT_GOP_DURATION;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.KEYFRAME_FRAGMENTATION;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.NOT_ADAPTIVE;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.NO_KMS_KEY_ID;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.RECALCULATE_METRICS;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.RECOVER_ON_FAILURE;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.REQUEST_FRAGMENT_ACKS;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.USE_FRAME_TIMECODES;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.VERSION_ZERO;
+
+public class MultiTrackMediaSource implements MediaSource {
+    private final String streamName;
+
+    private MediaSourceState mediaSourceState;
+    private MediaSourceSink mediaSourceSink;
+    private MultiTrackFrameSource frameSource;
+    private MultiTrackMediaSourceConfiguration configuration;
+
+    public MultiTrackMediaSource(final @NonNull String streamName) {
+        this.streamName = streamName;
+    }
+
+    @Override
+    public MediaSourceState getMediaSourceState() {
+        return  mediaSourceState;
+    }
+
+    @Override
+    public MediaSourceConfiguration getConfiguration() {
+        return configuration;
+    }
+
+    @Override
+    public StreamInfo getStreamInfo() throws KinesisVideoException {
+        return new StreamInfo(VERSION_ZERO,
+                streamName,
+                StreamInfo.StreamingType.STREAMING_TYPE_REALTIME,
+                configuration.getContentType(),
+                NO_KMS_KEY_ID,
+                configuration.getRetentionPeriodInHours() * HUNDREDS_OF_NANOS_IN_AN_HOUR,
+                NOT_ADAPTIVE,
+                configuration.getLatencyPressure(),
+                DEFAULT_GOP_DURATION,
+                KEYFRAME_FRAGMENTATION,
+                USE_FRAME_TIMECODES,
+                configuration.isAbsoluteTimecode(),
+                REQUEST_FRAGMENT_ACKS,
+                RECOVER_ON_FAILURE,
+                DEFAULT_BITRATE,
+                configuration.getFps(),
+                configuration.getBufferDuration(),
+                configuration.getReplayDuration(),
+                configuration.getStalenessDuration(),
+                configuration.getTimecodeScale(),
+                RECALCULATE_METRICS,
+                null,
+                configuration.getNalAdaptationFlag(),
+                null,
+                configuration.getTrackInfoList());
+    }
+
+    @Override
+    public void initialize(@NonNull final MediaSourceSink mediaSourceSink) throws KinesisVideoException {
+        this.mediaSourceSink = mediaSourceSink;
+    }
+
+    @Override
+    public void configure(final MediaSourceConfiguration configuration) {
+        Preconditions.checkState(this.configuration == null);
+
+        if (!(configuration instanceof MultiTrackMediaSourceConfiguration)) {
+            throw new IllegalArgumentException("can only use MultiTrackMediaSourceConfiguration");
+        }
+
+        this.configuration = (MultiTrackMediaSourceConfiguration) configuration;
+    }
+
+    @Override
+    public void start() throws KinesisVideoException {
+        frameSource = new MultiTrackFrameSource(configuration);
+        frameSource.onStreamDataAvailable(new DefaultOnStreamDataAvailable(mediaSourceSink));
+        frameSource.start();
+    }
+
+    @Override
+    public void stop() throws KinesisVideoException {
+        if (frameSource != null) {
+            frameSource.stop();
+        }
+        mediaSourceSink.getProducerStream().stopStreamSync();
+
+        mediaSourceState = MediaSourceState.STOPPED;
+    }
+
+    @Override
+    public boolean isStopped() {
+        return mediaSourceState == MediaSourceState.STOPPED;
+    }
+
+    @Override
+    public void free() throws KinesisVideoException {
+    }
+
+    @Override
+    public MediaSourceSink getMediaSourceSink() {
+        return mediaSourceSink;
+    }
+
+    @Nullable
+    @Override
+    public StreamCallbacks getStreamCallbacks() {
+        return null;
+    }
+}
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/multitrack/MultiTrackMediaSourceConfiguration.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/multitrack/MultiTrackMediaSourceConfiguration.java
new file mode 100644
index 0000000000..7f216134a5
--- /dev/null
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/mediasource/multitrack/MultiTrackMediaSourceConfiguration.java
@@ -0,0 +1,175 @@
+/**
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.kinesisvideo.internal.mediasource.multitrack;
+
+import com.amazonaws.kinesisvideo.internal.client.mediasource.MediaSourceConfiguration;
+import com.amazonaws.kinesisvideo.producer.StreamInfo;
+import com.amazonaws.kinesisvideo.producer.TrackInfo;
+//import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+
+import static com.amazonaws.kinesisvideo.producer.StreamInfo.NalAdaptationFlags.NAL_ADAPTATION_FLAG_NONE;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.ABSOLUTE_TIMECODES;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.DEFAULT_BUFFER_DURATION;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.DEFAULT_REPLAY_DURATION;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.DEFAULT_STALENESS_DURATION;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.DEFAULT_TIMESCALE;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.FRAME_RATE_25;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.MAX_LATENCY_ZERO;
+
+//@SuppressFBWarnings("EI_EXPOSE_REP")
+public class MultiTrackMediaSourceConfiguration implements MediaSourceConfiguration {
+    private static final String MEDIA_SOURCE_TYPE = "MultiTrackMediaSource";
+    private static final String MEDIA_SOURCE_DESCRIPTION = "Media Source accepts multi-track data. ";
+
+    public static class Builder<T extends Builder<T>>
+            implements MediaSourceConfiguration.Builder<MultiTrackMediaSourceConfiguration> {
+
+        protected int fps = FRAME_RATE_25;
+        protected long retentionPeriodInHours;
+        protected long latencyPressure = MAX_LATENCY_ZERO;
+        protected long stalenessDuration = DEFAULT_STALENESS_DURATION;
+        protected long bufferDuration = DEFAULT_BUFFER_DURATION;
+        protected long replayDuration = DEFAULT_REPLAY_DURATION;
+        protected long timecodeScale = DEFAULT_TIMESCALE;
+        protected String contentType = null;
+        protected TrackInfo[] trackInfoList;
+        protected boolean absoluteTimecode = ABSOLUTE_TIMECODES;
+
+        private StreamInfo.NalAdaptationFlags nalAdaptationFlag = NAL_ADAPTATION_FLAG_NONE;
+
+        public T withAbsoluteTimecode(final boolean absoluteTimecode) {
+            this.absoluteTimecode = absoluteTimecode;
+            return (T) this;
+        }
+
+        public T withFps(final int fps) {
+            this.fps = fps;
+            return (T) this;
+        }
+
+        public T withContentType(final String contentType) {
+            this.contentType = contentType;
+            return (T) this;
+        }
+
+        public T withRetentionPeriodInHours(final long retentionPeriodInHours) {
+            this.retentionPeriodInHours = retentionPeriodInHours;
+            return (T) this;
+        }
+
+        public T withLatencyPressure(final long latencyPressure) {
+            this.latencyPressure = latencyPressure;
+            return (T) this;
+        }
+
+        public T withStalenessDuration(final long stalenessDuration) {
+            this.stalenessDuration = stalenessDuration;
+            return (T) this;
+        }
+
+        public T withReplayDuration(final long replayDuration) {
+            this.replayDuration = replayDuration;
+            return (T) this;
+        }
+
+        public T withBufferDuration(final long bufferDuration) {
+            this.bufferDuration = bufferDuration;
+            return (T) this;
+        }
+
+        public T withTimecodeScale(final long timecodeScale) {
+            this.timecodeScale = timecodeScale;
+            return (T) this;
+        }
+
+        public T withTrackInfoList(final TrackInfo[] trackInfoList) {
+            this.trackInfoList = trackInfoList;
+            return (T) this;
+        }
+
+        public T withNalAdaptationFlag(final StreamInfo.NalAdaptationFlags nalAdaptationFlag) {
+            this.nalAdaptationFlag = nalAdaptationFlag;
+            return (T) this;
+        }
+
+        @Override
+        public MultiTrackMediaSourceConfiguration build() {
+            return new MultiTrackMediaSourceConfiguration(this);
+        }
+    }
+
+    private final Builder mBuilder;
+
+    protected MultiTrackMediaSourceConfiguration(final Builder builder) {
+        mBuilder = builder;
+    }
+
+    public int getFps() {
+        return mBuilder.fps;
+    }
+
+    public long getRetentionPeriodInHours() {
+        return mBuilder.retentionPeriodInHours;
+    }
+
+    public String getContentType() {
+        return mBuilder.contentType;
+    }
+
+    public long getLatencyPressure() {
+        return mBuilder.latencyPressure;
+    }
+
+    public long getStalenessDuration() {
+        return mBuilder.stalenessDuration;
+    }
+
+    public long getBufferDuration() {
+        return mBuilder.bufferDuration;
+    }
+
+    public long getReplayDuration() {
+        return mBuilder.replayDuration;
+    }
+
+    public long getTimecodeScale() {
+        return mBuilder.timecodeScale;
+    }
+
+    public StreamInfo.NalAdaptationFlags getNalAdaptationFlag() {
+        return mBuilder.nalAdaptationFlag;
+    }
+
+    public TrackInfo[] getTrackInfoList() {
+        return mBuilder.trackInfoList;
+    }
+
+    public boolean isAbsoluteTimecode() {
+        return mBuilder.absoluteTimecode;
+    }
+
+    @Override
+    public String getMediaSourceType() {
+        return MEDIA_SOURCE_TYPE;
+    }
+
+    @Override
+    public String getMediaSourceDescription() {
+        return MEDIA_SOURCE_DESCRIPTION;
+    }
+}
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/KinesisVideoMetrics.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/KinesisVideoMetrics.java
index 1cf04696b9..e131e2570d 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/KinesisVideoMetrics.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/KinesisVideoMetrics.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.internal.producer;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/KinesisVideoProducer.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/KinesisVideoProducer.java
index ff8316310b..093607eec7 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/KinesisVideoProducer.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/KinesisVideoProducer.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.internal.producer;
@@ -87,7 +87,7 @@
      */
     @NonNull
     KinesisVideoProducerStream createStream(final @NonNull StreamInfo streamInfo,
-                                      final @Nullable StreamCallbacks streamCallbacks) throws ProducerException;
+                                            final @Nullable StreamCallbacks streamCallbacks) throws ProducerException;
 
     /**
      * Creates Kinesis Video stream synchronously
@@ -99,7 +99,7 @@ KinesisVideoProducerStream createStream(final @NonNull StreamInfo streamInfo,
      */
     @NonNull
     KinesisVideoProducerStream createStreamSync(final @NonNull StreamInfo streamInfo,
-                                          final @Nullable StreamCallbacks streamCallbacks) throws ProducerException;
+                                                final @Nullable StreamCallbacks streamCallbacks) throws ProducerException;
 
     /**
      * Frees the specified stream
@@ -121,58 +121,69 @@ KinesisVideoProducerStream createStreamSync(final @NonNull StreamInfo streamInfo
     /**
      * DescribeStream result event
      *
-     * @param customData        Custom data that should be passed to the engine
+     * @param stream            Stream object for the result event callback
+     * @param streamHandle      Stream handle returned by PIC
      * @param streamDescription Stream description object
      * @param httpStatusCode    HTTP status code
      * @throws ProducerException
      */
-    void describeStreamResult(final long customData,
+    void describeStreamResult(final KinesisVideoProducerStream stream,
+                              final long streamHandle,
                               final @Nullable StreamDescription streamDescription,
                               int httpStatusCode) throws ProducerException;
 
     /**
      * GetStreamingEndpoint result event
      *
-     * @param customData     Custom data that should be passed to the engine
+     * @param stream         Stream object for the result event callback
+     * @param streamHandle   Stream handle returned by PIC
      * @param endpoint       Streaming endpoint if successful
      * @param httpStatusCode HTTP status code
      * @throws ProducerException
      */
-    void getStreamingEndpointResult(final long customData, final @Nullable String endpoint,
+    void getStreamingEndpointResult(final KinesisVideoProducerStream stream,
+                                    final long streamHandle,
+                                    final @Nullable String endpoint,
                                     int httpStatusCode)
             throws ProducerException;
 
     /**
      * GetStreamingToken result event
      *
-     * @param customData     Custom data that should be passed to the engine
+     * @param stream         Stream object for the result event callback
+     * @param streamHandle   Stream handle returned by PIC
      * @param token          Streaming token if successful
      * @param expiration     Streaming token expiration in absolute time in 100ns
      * @param httpStatusCode HTTP status code
      * @throws ProducerException
      */
-    void getStreamingTokenResult(final long customData, final @Nullable byte[] token, long expiration, int httpStatusCode)
+    void getStreamingTokenResult(final KinesisVideoProducerStream stream,
+                                 final long streamHandle,
+                                 final @Nullable byte[] token, long expiration,
+                                 int httpStatusCode)
             throws ProducerException;
 
     /**
      * PutStream result event
      *
-     * @param customData         Custom data that should be passed to the engine
-     * @param clientStreamHandle A stream handle identifier from the client side
+     * @param stream             Stream object for the result event callback
+     * @param uploadHandle       A stream upload handle identifier from the client side
      * @param httpStatusCode     HTTP status code
      * @throws ProducerException
      */
-    void putStreamResult(final long customData, long clientStreamHandle, int httpStatusCode)
+    void putStreamResult(final KinesisVideoProducerStream stream, long uploadHandle, int httpStatusCode)
             throws ProducerException;
 
     /**
      * TagResource result event
      *
-     * @param customData     Custom data that should be passed to the engine
+     * @param stream         Stream object for the result event callback
+     * @param streamHandle   Stream handle returned by PIC
      * @param httpStatusCode HTTP status code
      * @throws ProducerException
      */
-    void tagResourceResult(final long customData, int httpStatusCode)
+    void tagResourceResult(final KinesisVideoProducerStream stream,
+                           final long streamHandle, int httpStatusCode)
             throws ProducerException;
 
     /**
@@ -201,4 +212,4 @@ void deviceCertToTokenResult(final long customData, final @Nullable byte[] token
     @NonNull
     KinesisVideoMetrics getMetrics()
             throws ProducerException;
-}
+}
\ No newline at end of file
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/KinesisVideoProducerStream.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/KinesisVideoProducerStream.java
index 5316f17e2d..d5cd44ef4a 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/KinesisVideoProducerStream.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/KinesisVideoProducerStream.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.internal.producer;
@@ -62,17 +62,15 @@
     /**
      * Get stream data from the buffer.
      *
-     * @param fillBuffer
-     *         The buffer to fill
-     * @param offset
-     *         The start of the buffer
-     * @param length
-     *         The number of bytes to fill
-     * @param readResult
-     *         The result of the read
+     * @param uploadHandle Client stream upload handle.
+     * @param fillBuffer The buffer to fill
+     * @param offset The start of the buffer
+     * @param length The number of bytes to fill
+     * @param readResult The result of the read
      * @throws ProducerException
      */
-    void getStreamData(final @NonNull byte[] fillBuffer, int offset, int length, @NonNull final ReadResult readResult)
+    void getStreamData(final long uploadHandle, final @NonNull byte[] fillBuffer, int offset, int length,
+                       @NonNull final ReadResult readResult)
             throws ProducerException;
 
     /**
@@ -108,7 +106,7 @@ void getStreamData(final @NonNull byte[] fillBuffer, int offset, int length, @No
      * NOTE: CPD is @Nullable - specifying a null will remove the CPD.
      * NOTE: currently, only Codec Private Data is supported while not streaming.
      */
-    void streamFormatChanged(final @Nullable byte[] codecPrivateData) throws ProducerException;
+    void streamFormatChanged(final @Nullable byte[] codecPrivateData, final int trackId) throws ProducerException;
 
     /**
      * Returns the underlying native stream handle
@@ -149,8 +147,13 @@ void getStreamData(final @NonNull byte[] fillBuffer, int offset, int length, @No
     @NonNull
     KinesisVideoStreamMetrics getMetrics() throws ProducerException;
 
+    /**
+     * Free the Kinesis Video stream.
+     */
+    void streamFreed() throws ProducerException;
+
     /**
      * Reset current connection of producer stream
      */
     void resetConnection() throws ProducerException;
-}
+}
\ No newline at end of file
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/KinesisVideoStreamMetrics.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/KinesisVideoStreamMetrics.java
index 6b51b5de4a..e645ae0376 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/KinesisVideoStreamMetrics.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/KinesisVideoStreamMetrics.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.internal.producer;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/ReadResult.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/ReadResult.java
index 978524eb29..d6db7a6766 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/ReadResult.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/ReadResult.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.internal.producer;
@@ -27,26 +27,19 @@
      */
     public static final long INVALID_UPLOAD_HANDLE_VALUE = -1;
 
-    private long uploadHandle = INVALID_UPLOAD_HANDLE_VALUE;
     private int readBytes = 0;
     private boolean isEndOfStream = false;
 
     /**
      * Setter method which is called from the native codebase.
-     * @param uploadHandle Upload handle
      * @param readBytes Read bytes
      * @param isEndOfStream Whether its the end of stream
      */
-    public void setReadResult(final long uploadHandle, final int readBytes, final boolean isEndOfStream) {
-        this.uploadHandle = uploadHandle;
+    public void setReadResult(final int readBytes, final boolean isEndOfStream) {
         this.readBytes = readBytes;
         this.isEndOfStream = isEndOfStream;
     }
 
-    public long getUploadHandle() {
-        return uploadHandle;
-    }
-
     public int getReadBytes() {
         return readBytes;
     }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/ServiceCallbacks.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/ServiceCallbacks.java
index 6664c2b19b..b58bbdc5f6 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/ServiceCallbacks.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/ServiceCallbacks.java
@@ -1,21 +1,20 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
-
 package com.amazonaws.kinesisvideo.internal.producer;
 
 import com.amazonaws.kinesisvideo.producer.ProducerException;
@@ -68,15 +67,15 @@
      * @throws ProducerException
      */
     void createStream(final @NonNull String deviceName,
-            final @NonNull String streamName,
-            final @NonNull String contentType,
-            final @Nullable String kmsKeyId,
-            long retentionPeriod,
-            long callAfter,
-            long timeout,
-            final @Nullable byte[] authData,
-            int authType,
-            long customData) throws ProducerException;
+                      final @NonNull String streamName,
+                      final @NonNull String contentType,
+                      final @Nullable String kmsKeyId,
+                      long retentionPeriod,
+                      long callAfter,
+                      long timeout,
+                      final @Nullable byte[] authData,
+                      int authType,
+                      long customData) throws ProducerException;
 
     /**
      * Schedules a call to describe stream
@@ -85,15 +84,17 @@ void createStream(final @NonNull String deviceName,
      * @param timeout - Time out for the call - 100ns
      * @param authData - Authentication bits
      * @param authType - Authentication type - this is the AUTH_INFO_TYPE defined in /src/client/Include.h
-     * @param customData - Custom data to use to call the event functions
+     * @param streamHandle - stream handle returned by PIC
+     * @param stream - stream object for the result event callback
      * @throws ProducerException
      */
     void describeStream(final @NonNull String streamName,
-            long callAfter,
-            long timeout,
-            final @Nullable byte[] authData,
-            int authType,
-            long customData) throws ProducerException;
+                        long callAfter,
+                        long timeout,
+                        final @Nullable byte[] authData,
+                        int authType,
+                        long streamHandle,
+                        KinesisVideoProducerStream stream) throws ProducerException;
 
     /**
      * Schedules a call to get streaming endpoint
@@ -103,16 +104,18 @@ void describeStream(final @NonNull String streamName,
      * @param timeout - Time out for the call - 100ns
      * @param authData - Authentication bits
      * @param authType - Authentication type - this is the AUTH_INFO_TYPE defined in /src/client/Include.h
-     * @param customData - Custom data to use to call the event functions
+     * @param streamHandle - stream handle returned by PIC
+     * @param stream - stream object for the result event callback
      * @throws ProducerException
      */
     void getStreamingEndpoint(final @NonNull String streamName,
-            final @NonNull String apiName,
-            long callAfter,
-            long timeout,
-            final @Nullable byte[] authData,
-            int authType,
-            long customData) throws ProducerException;
+                              final @NonNull String apiName,
+                              long callAfter,
+                              long timeout,
+                              final @Nullable byte[] authData,
+                              int authType,
+                              long streamHandle,
+                              KinesisVideoProducerStream stream) throws ProducerException;
 
     /**
      * Schedules a call to get streaming token
@@ -121,15 +124,17 @@ void getStreamingEndpoint(final @NonNull String streamName,
      * @param timeout - Time out for the call - 100ns
      * @param authData - Authentication bits
      * @param authType - Authentication type - this is the AUTH_INFO_TYPE defined in /src/client/Include.h
-     * @param customData - Custom data to use to call the event functions
+     * @param streamHandle - stream handle returned by PIC
+     * @param stream - stream object for the result event callback
      * @throws ProducerException
      */
     void getStreamingToken(final @NonNull String streamName,
-            long callAfter,
-            long timeout,
-            final @Nullable byte[] authData,
-            int authType,
-            long customData) throws ProducerException;
+                           long callAfter,
+                           long timeout,
+                           final @Nullable byte[] authData,
+                           int authType,
+                           long streamHandle,
+                           KinesisVideoProducerStream stream) throws ProducerException;
 
     /**
      * Schedules a call to put stream API
@@ -143,20 +148,20 @@ void getStreamingToken(final @NonNull String streamName,
      * @param timeout - Time out for the call - 100ns
      * @param authData - Authentication bits
      * @param authType - Authentication type - this is the AUTH_INFO_TYPE defined in /src/client/Include.h
-     * @param customData - Custom data to use to call the event functions
+     * @param stream - stream object for the result event callback
      * @throws ProducerException
      */
     void putStream(final @NonNull String streamName,
-            final @NonNull String containerType,
-            long streamStartTime,
-            boolean absoluteFragmentTimes,
-            boolean ackRequired,
-            final @NonNull String streamingEndpoint,
-            long callAfter,
-            long timeout,
-            final @Nullable byte[] authData,
-            int authType,
-            long customData) throws ProducerException;
+                   final @NonNull String containerType,
+                   long streamStartTime,
+                   boolean absoluteFragmentTimes,
+                   boolean ackRequired,
+                   final @NonNull String streamingEndpoint,
+                   long callAfter,
+                   long timeout,
+                   final @Nullable byte[] authData,
+                   int authType,
+                   KinesisVideoProducerStream stream) throws ProducerException;
 
     /**
      * Schedules a call to tag resource API
@@ -166,16 +171,18 @@ void putStream(final @NonNull String streamName,
      * @param timeout - Time out for the call - 100ns
      * @param authData - Authentication bits
      * @param authType - Authentication type - this is the AUTH_INFO_TYPE defined in /src/client/Include.h
-     * @param customData - Custom data to use to call the event functions
+     * @param streamHandle - stream handle returned by PIC
+     * @param stream - stream object for the result event callback
      * @throws ProducerException
      */
     void tagResource(final @NonNull String resourceArn,
-            final @Nullable Tag[] tags,
-            long callAfter,
-            long timeout,
-            final @Nullable byte[] authData,
-            int authType,
-            long customData) throws ProducerException;
+                     final @Nullable Tag[] tags,
+                     long callAfter,
+                     long timeout,
+                     final @Nullable byte[] authData,
+                     int authType,
+                     long streamHandle,
+                     KinesisVideoProducerStream stream) throws ProducerException;
 
     /**
      * Schedules a call to create device
@@ -188,11 +195,11 @@ void tagResource(final @NonNull String resourceArn,
      * @throws ProducerException
      */
     void createDevice(final @NonNull String deviceName,
-            long callAfter,
-            long timeout,
-            final @Nullable byte[] authData,
-            int authType,
-            long customData) throws ProducerException;
+                      long callAfter,
+                      long timeout,
+                      final @Nullable byte[] authData,
+                      int authType,
+                      long customData) throws ProducerException;
 
     /**
      * Schedules a call to device certificate to token API
@@ -205,11 +212,11 @@ void createDevice(final @NonNull String deviceName,
      * @throws ProducerException
      */
     void deviceCertToToken(final @NonNull String deviceName,
-            long callAfter,
-            long timeout,
-            final @Nullable byte[] authData,
-            int authType,
-            long customData) throws ProducerException;
+                           long callAfter,
+                           long timeout,
+                           final @Nullable byte[] authData,
+                           int authType,
+                           long customData) throws ProducerException;
 
     /**
      * Add a producer stream to ongoing stream list
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/client/KinesisVideoServiceClient.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/client/KinesisVideoServiceClient.java
index 4d78266aa2..fa47281333 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/client/KinesisVideoServiceClient.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/client/KinesisVideoServiceClient.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.internal.producer.client;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/jni/NativeKinesisVideoProducerJni.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/jni/NativeKinesisVideoProducerJni.java
index 2e1513542d..ac70e2aa13 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/jni/NativeKinesisVideoProducerJni.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/jni/NativeKinesisVideoProducerJni.java
@@ -1,22 +1,23 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.internal.producer.jni;
 
+import com.amazonaws.kinesisvideo.common.exception.KinesisVideoException;
 import com.amazonaws.kinesisvideo.common.logging.Log;
 import com.amazonaws.kinesisvideo.common.logging.LogLevel;
 import com.amazonaws.kinesisvideo.common.preconditions.Preconditions;
@@ -73,7 +74,7 @@
     /**
      * The expected library version.
      */
-    private static final String EXPECTED_LIBRARY_VERSION = "1.8";
+    public static final String EXPECTED_LIBRARY_VERSION = "2.0";
 
     /**
      * The manifest handle will be set after call to parse()
@@ -367,10 +368,13 @@ public KinesisVideoProducerStream createStreamSync(final @NonNull StreamInfo str
             throws ProducerException
     {
         final NativeKinesisVideoProducerStream stream = (NativeKinesisVideoProducerStream) createStream(streamInfo, streamCallbacks);
-
-        // Block until ready
-        stream.awaitReady();
-
+        try {
+            // Block until ready
+            stream.awaitReady();
+        } catch (final ProducerException e) {
+            freeStream(stream);
+            throw e;
+        }
         return stream;
     }
 
@@ -416,13 +420,16 @@ public void freeStreams() throws ProducerException
     {
         Preconditions.checkState(isInitialized());
         synchronized (mSyncObject) {
-            final Collection<KinesisVideoProducerStream> streamCollection = mKinesisVideoHandleMap.values();
-            for (final KinesisVideoProducerStream stream: streamCollection) {
-                // Remove from the map
-                mKinesisVideoHandleMap.remove(stream.getStreamHandle());
+            try {
+                final Collection<KinesisVideoProducerStream> streamCollection = mKinesisVideoHandleMap.values();
+                for (final KinesisVideoProducerStream stream : streamCollection) {
 
-                // Free the stream
-                freeStream(stream);
+                    // Free the stream
+                    freeStream(stream);
+                }
+            } finally{
+                // Remove from the map
+                mKinesisVideoHandleMap.clear();
             }
         }
     }
@@ -438,8 +445,14 @@ public void freeStream(final @NonNull KinesisVideoProducerStream stream) throws
         }
 
         synchronized (mSyncObject) {
-            // Stop the streams
-            freeKinesisVideoStream(mClientHandle, stream.getStreamHandle());
+            final long streamHandle = stream.getStreamHandle();
+            stream.streamFreed();
+            try {
+                // Stop the streams
+                freeKinesisVideoStream(mClientHandle, streamHandle);
+            } finally {
+                mKinesisVideoHandleMap.remove(streamHandle);
+            }
         }
     }
 
@@ -486,13 +499,13 @@ public void getStreamMetrics(final long streamHandle, @NonNull final KinesisVide
      * @param kinesisVideoFrame  an KinesisVideoFrame object
      * @throws ProducerException
      */
-    public void putFrame(final long streamHandle, final @NonNull KinesisVideoFrame kinesisVideoFrameFrame) throws ProducerException
+    public void putFrame(final long streamHandle, final @NonNull KinesisVideoFrame kinesisVideoFrame) throws ProducerException
     {
         Preconditions.checkState(isInitialized());
-        Preconditions.checkNotNull(kinesisVideoFrameFrame);
+        Preconditions.checkNotNull(kinesisVideoFrame);
 
         synchronized (mSyncObject) {
-            putKinesisVideoFrame(mClientHandle, streamHandle, kinesisVideoFrameFrame);
+            putKinesisVideoFrame(mClientHandle, streamHandle, kinesisVideoFrame);
         }
     }
 
@@ -552,9 +565,12 @@ public void parseFragmentAck(final long streamHandle, final long uploadHandle, f
     }
 
     /**
-     * Get stream data from the buffer.
+     * Get stream data from the buffer for specific upload Handle.
+     * Each uploadHandle correspond to a PutMedia connection to
+     * Kinesis Video Streams.
      *
      * @param streamHandle     the handle of the stream
+     * @param uploadHandle     the client stream upload handle
      * @param fillBuffer    The buffer to fill
      * @param offset    The start of the buffer
      * @param length    The number of bytes to fill
@@ -562,6 +578,7 @@ public void parseFragmentAck(final long streamHandle, final long uploadHandle, f
      * @throws ProducerException
      */
     public void getStreamData(final long streamHandle,
+                              final long uploadHandle,
                               final @NonNull byte[] fillBuffer,
                               final int offset,
                               final int length,
@@ -572,7 +589,8 @@ public void getStreamData(final long streamHandle,
         Preconditions.checkNotNull(readResult);
 
         synchronized (mSyncObject) {
-            getKinesisVideoStreamData(mClientHandle, streamHandle, fillBuffer, offset, length, readResult);
+            getKinesisVideoStreamData(mClientHandle, streamHandle, uploadHandle, fillBuffer, offset, length,
+                    readResult);
         }
     }
 
@@ -583,12 +601,13 @@ public void getStreamData(final long streamHandle,
      * @param codecPrivateData    Codec Private Data or null to reset
      * @throws ProducerException
      */
-    public void streamFormatChanged(final long streamHandle, final @Nullable byte[] codecPrivateData) throws ProducerException
+    public void streamFormatChanged(final long streamHandle, final @Nullable byte[] codecPrivateData,
+                                    final long trackId) throws ProducerException
     {
         Preconditions.checkState(isInitialized());
 
         synchronized (mSyncObject) {
-            kinesisVideoStreamFormatChanged(mClientHandle, streamHandle, codecPrivateData);
+            kinesisVideoStreamFormatChanged(mClientHandle, streamHandle, codecPrivateData, trackId);
         }
     }
 
@@ -633,6 +652,8 @@ private String getDeviceFingerprint()
 
     /**
      * Reports stream underflow
+     *
+     * @param streamHandle     the handle of the stream
      */
     private void streamUnderflowReport(final long streamHandle) throws ProducerException
     {
@@ -656,6 +677,20 @@ private void storageOverflowPressure(final long remainingSize)
         }
     }
 
+    /**
+     * Reports buffer temporal overflow pressure
+     */
+    private void bufferDurationOverflowPressure(final long streamHandle, final long remainDuration) throws ProducerException {
+        synchronized (mCallbackSyncObject) {
+            if (!mKinesisVideoHandleMap.containsKey(streamHandle)) {
+                throw new ProducerException("Invalid stream handle.", STATUS_INVALID_OPERATION);
+            }
+
+            final KinesisVideoProducerStream kinesisVideoProducerStream = mKinesisVideoHandleMap.get(streamHandle);
+            kinesisVideoProducerStream.bufferDurationOverflowPressure(remainDuration);
+        }
+    }
+
     /**
      * Reports stream latency pressure
      */
@@ -688,8 +723,12 @@ private void streamConnectionStale(final long streamHandle, final long lastAckDu
 
     /**
      * Reports received fragment ACK
+     *
+     * @param streamHandle the handle of the stream
+     * @param uploadHandle the client stream upload handle
+     * @param fragmentAck ACK for the fragment
      */
-    private void fragmentAckReceived(final long streamHandle, @NonNull final KinesisVideoFragmentAck fragmentAck)
+    private void fragmentAckReceived(final long streamHandle, final long uploadHandle, @NonNull final KinesisVideoFragmentAck fragmentAck)
             throws ProducerException
     {
         synchronized (mCallbackSyncObject) {
@@ -698,7 +737,7 @@ private void fragmentAckReceived(final long streamHandle, @NonNull final Kinesis
             }
 
             final KinesisVideoProducerStream kinesisVideoProducerStream = mKinesisVideoHandleMap.get(streamHandle);
-            kinesisVideoProducerStream.fragmentAckReceived(fragmentAck);
+            kinesisVideoProducerStream.fragmentAckReceived(uploadHandle, fragmentAck);
         }
     }
 
@@ -735,7 +774,7 @@ private void droppedFragmentReport(final long streamHandle, final long fragmentT
     /**
      * Reports stream error.
      */
-    private void streamErrorReport(final long streamHandle, final long fragmentTimecode, final long statusCode) throws ProducerException
+    private void streamErrorReport(final long streamHandle, final long uploadHandle, final long fragmentTimecode, final long statusCode) throws ProducerException
     {
         synchronized (mCallbackSyncObject) {
             if (!mKinesisVideoHandleMap.containsKey(streamHandle)) {
@@ -743,7 +782,7 @@ private void streamErrorReport(final long streamHandle, final long fragmentTimec
             }
 
             final KinesisVideoProducerStream kinesisVideoProducerStream = mKinesisVideoHandleMap.get(streamHandle);
-            kinesisVideoProducerStream.streamErrorReport(fragmentTimecode, statusCode);
+            kinesisVideoProducerStream.streamErrorReport(uploadHandle, fragmentTimecode, statusCode);
         }
     }
 
@@ -864,7 +903,7 @@ public void createStreamResult(final long customData, final @Nullable String str
      * @param timeout - Time out for the call
      * @param authData - Authentication bits
      * @param authType - Authentication type - this is the AUTH_INFO_TYPE defined in /src/client/Include.h
-     * @param customData - Custom data to use to call the event functions
+     * @param streamHandle - Custom data to use to call the event functions
      * @return STATUS of the call
      */
     private int describeStream(final @NonNull String streamName,
@@ -872,12 +911,13 @@ private int describeStream(final @NonNull String streamName,
             final long timeout,
             final byte[] authData,
             final int authType,
-            final long customData) throws ProducerException
+            final long streamHandle) throws ProducerException
     {
 
         synchronized (mCallbackSyncObject) {
             try {
-                mServiceCallbacks.describeStream(streamName, callAfter, timeout, authData, authType, customData);
+                mServiceCallbacks.describeStream(streamName, callAfter, timeout, authData, authType,
+                        streamHandle, mKinesisVideoHandleMap.get(streamHandle));
                 return STATUS_SUCCESS;
             } catch (final ProducerException e) {
                 return e.getStatusCode();
@@ -886,12 +926,19 @@ private int describeStream(final @NonNull String streamName,
     }
 
     @Override
-    public void describeStreamResult(final long customData,
+    public void describeStreamResult(final KinesisVideoProducerStream stream,
+                                      final long streamHandle,
                                       final @Nullable StreamDescription streamDescription,
                                       final int httpStatusCode) throws ProducerException
     {
         synchronized (mSyncObject) {
-            describeStreamResultEvent(mClientHandle, customData, httpStatusCode, streamDescription);
+            if (stream == null) {
+                describeStreamResultEvent(mClientHandle, streamHandle, httpStatusCode, streamDescription);
+            } else {
+                if (stream.getStreamHandle() != INVALID_STREAM_HANDLE_VALUE) {
+                    describeStreamResultEvent(mClientHandle, stream.getStreamHandle(), httpStatusCode, streamDescription);
+                }
+            }
         }
     }
 
@@ -903,7 +950,7 @@ public void describeStreamResult(final long customData,
      * @param timeout - Time out for the call
      * @param authData - Authentication bits
      * @param authType - Authentication type - this is the AUTH_INFO_TYPE defined in /src/client/Include.h
-     * @param customData - Custom data to use to call the event functions
+     * @param streamHandle - Custom data to use to call the event functions
      * @return STATUS of the call
      */
     private int getStreamingEndpoint(final @NonNull String streamName,
@@ -912,11 +959,12 @@ private int getStreamingEndpoint(final @NonNull String streamName,
             final long timeout,
             final @Nullable byte[] authData,
             final int authType,
-            final long customData) throws ProducerException
+            final long streamHandle) throws ProducerException
     {
         synchronized (mCallbackSyncObject) {
             try {
-                mServiceCallbacks.getStreamingEndpoint(streamName, apiName, callAfter, timeout, authData, authType, customData);
+                mServiceCallbacks.getStreamingEndpoint(streamName, apiName, callAfter, timeout, authData, authType,
+                        streamHandle, mKinesisVideoHandleMap.get(streamHandle));
                 return STATUS_SUCCESS;
             } catch (final ProducerException e) {
                 return e.getStatusCode();
@@ -925,10 +973,19 @@ private int getStreamingEndpoint(final @NonNull String streamName,
     }
 
     @Override
-    public void getStreamingEndpointResult(final long customData, final @Nullable String endpoint, final int httpStatusCode) throws ProducerException
+    public void getStreamingEndpointResult(final KinesisVideoProducerStream stream,
+                                           final long streamHandle,
+                                           final @Nullable String endpoint,
+                                           final int httpStatusCode) throws ProducerException
     {
         synchronized (mSyncObject) {
-            getStreamingEndpointResultEvent(mClientHandle, customData, httpStatusCode, endpoint);
+            if (stream == null) {
+                getStreamingEndpointResultEvent(mClientHandle, streamHandle, httpStatusCode, endpoint);
+            } else {
+                if (stream.getStreamHandle() != INVALID_STREAM_HANDLE_VALUE) {
+                    getStreamingEndpointResultEvent(mClientHandle, stream.getStreamHandle(), httpStatusCode, endpoint);
+                }
+            }
         }
     }
 
@@ -939,7 +996,7 @@ public void getStreamingEndpointResult(final long customData, final @Nullable St
      * @param timeout - Time out for the call
      * @param authData - Authentication bits
      * @param authType - Authentication type - this is the AUTH_INFO_TYPE defined in /src/client/Include.h
-     * @param customData - Custom data to use to call the event functions
+     * @param streamHandle - Custom data to use to call the event functions
      * @return STATUS of the call
      */
     private int getStreamingToken(final @NonNull String streamName,
@@ -947,11 +1004,12 @@ private int getStreamingToken(final @NonNull String streamName,
             final long timeout,
             final @Nullable byte[] authData,
             final int authType,
-            final long customData) throws ProducerException
+            final long streamHandle) throws ProducerException
     {
         synchronized (mCallbackSyncObject) {
             try {
-                mServiceCallbacks.getStreamingToken(streamName, callAfter, timeout, authData, authType, customData);
+                mServiceCallbacks.getStreamingToken(streamName, callAfter, timeout, authData, authType,
+                        streamHandle, mKinesisVideoHandleMap.get(streamHandle));
                 return STATUS_SUCCESS;
             } catch (final ProducerException e) {
                 return e.getStatusCode();
@@ -960,12 +1018,23 @@ private int getStreamingToken(final @NonNull String streamName,
     }
 
     @Override
-    public void getStreamingTokenResult(final long customData, final @Nullable byte[] token, final long expiration, final int httpStatusCode) throws ProducerException
+    public void getStreamingTokenResult(final KinesisVideoProducerStream stream,
+                                        final long streamHandle,
+                                        final @Nullable byte[] token,
+                                        final long expiration,
+                                        final int httpStatusCode) throws ProducerException
     {
         synchronized (mSyncObject) {
             final int tokenSize = token == null ? 0 : token.length;
 
-            getStreamingTokenResultEvent(mClientHandle, customData, httpStatusCode, token, tokenSize, expiration);
+            if (stream == null) {
+                getStreamingTokenResultEvent(mClientHandle, streamHandle, httpStatusCode, token, tokenSize, expiration);
+            } else {
+                if (stream.getStreamHandle() != INVALID_STREAM_HANDLE_VALUE) {
+                    getStreamingTokenResultEvent(mClientHandle, stream.getStreamHandle(),
+                            httpStatusCode, token, tokenSize, expiration);
+                }
+            }
         }
     }
 
@@ -981,7 +1050,7 @@ public void getStreamingTokenResult(final long customData, final @Nullable byte[
      * @param timeout - Time out for the call
      * @param authData - Authentication bits
      * @param authType - Authentication type - this is the AUTH_INFO_TYPE defined in /src/client/Include.h
-     * @param customData - Custom data to use to call the event functions
+     * @param streamHandle - Custom data to use to call the event functions
      * @return STATUS of the call
      */
     private int putStream(final @NonNull String streamName,
@@ -994,7 +1063,7 @@ private int putStream(final @NonNull String streamName,
             final long timeout,
             final @Nullable byte[] authData,
             final int authType,
-            final long customData) throws ProducerException
+            final long streamHandle) throws ProducerException
     {
         synchronized (mCallbackSyncObject) {
             try {
@@ -1008,7 +1077,7 @@ private int putStream(final @NonNull String streamName,
                         timeout,
                         authData,
                         authType,
-                        customData);
+                        mKinesisVideoHandleMap.get(streamHandle));
                 return STATUS_SUCCESS;
             } catch (final ProducerException e) {
                 return e.getStatusCode();
@@ -1017,10 +1086,13 @@ private int putStream(final @NonNull String streamName,
     }
 
     @Override
-    public void putStreamResult(final long customData, final long clientStreamHandle, final int httpStatusCode) throws ProducerException
+    public void putStreamResult(final KinesisVideoProducerStream stream, final long clientStreamHandle,
+                                final int httpStatusCode) throws ProducerException
     {
         synchronized (mSyncObject) {
-            putStreamResultEvent(mClientHandle, customData, httpStatusCode, clientStreamHandle);
+            if (stream.getStreamHandle() != INVALID_STREAM_HANDLE_VALUE) {
+                putStreamResultEvent(mClientHandle, stream.getStreamHandle(), httpStatusCode, clientStreamHandle);
+            }
         }
     }
 
@@ -1032,7 +1104,7 @@ public void putStreamResult(final long customData, final long clientStreamHandle
      * @param timeout - Time out for the call
      * @param authData - Authentication bits
      * @param authType - Authentication type - this is the AUTH_INFO_TYPE defined in /src/client/Include.h
-     * @param customData - Custom data to use to call the event functions
+     * @param streamHandle - Custom data to use to call the event functions
      * @return STATUS of the call
      */
     private int tagResource(final @NonNull String resourceArn,
@@ -1041,11 +1113,12 @@ private int tagResource(final @NonNull String resourceArn,
             final long timeout,
             final @Nullable byte[] authData,
             final int authType,
-            final long customData) throws ProducerException
+            final long streamHandle) throws ProducerException
     {
         synchronized (mCallbackSyncObject) {
             try {
-                mServiceCallbacks.tagResource(resourceArn, tags, callAfter, timeout, authData, authType, customData);
+                mServiceCallbacks.tagResource(resourceArn, tags, callAfter, timeout, authData, authType,
+                        streamHandle, mKinesisVideoHandleMap.get(streamHandle));
                 return STATUS_SUCCESS;
             } catch (final ProducerException e) {
                 return e.getStatusCode();
@@ -1054,10 +1127,17 @@ private int tagResource(final @NonNull String resourceArn,
     }
 
     @Override
-    public void tagResourceResult(final long customData, final int httpStatusCode) throws ProducerException
+    public void tagResourceResult(final KinesisVideoProducerStream stream,
+                                  final long streamHandle, final int httpStatusCode) throws ProducerException
     {
         synchronized (mSyncObject) {
-            tagResourceResultEvent(mClientHandle, customData, httpStatusCode);
+            if (stream == null) {
+                tagResourceResultEvent(mClientHandle, streamHandle, httpStatusCode);
+            } else {
+                if (stream.getStreamHandle() != INVALID_STREAM_HANDLE_VALUE) {
+                    tagResourceResultEvent(mClientHandle, stream.getStreamHandle(), httpStatusCode);
+                }
+            }
         }
     }
 
@@ -1247,7 +1327,8 @@ private native long createKinesisVideoStream(long clientHandle, final @NonNull S
      * @param kinesisVideoFrame Kinesis Video frame to put
      * @throws ProducerException
      */
-    private native void putKinesisVideoFrame(long clientHandle, long streamHandle, final @NonNull KinesisVideoFrame kinesisVideoFrame)
+    private native void putKinesisVideoFrame(long clientHandle, long streamHandle,
+                                             final @NonNull KinesisVideoFrame kinesisVideoFrame)
             throws ProducerException;
 
     /**
@@ -1260,7 +1341,9 @@ private native void putKinesisVideoFrame(long clientHandle, long streamHandle, f
      * @param persistent  whether this is persistent metadata or not
      * @throws ProducerException
      */
-    private native void putKinesisVideoFragmentMetadata(long clientHandle, long streamHandle, final @NonNull String metadataName, final @NonNull String metadataValue, boolean persistent)
+    private native void putKinesisVideoFragmentMetadata(long clientHandle, long streamHandle,
+                                                        final @NonNull String metadataName,
+                                                        final @NonNull String metadataValue, boolean persistent)
             throws ProducerException;
 
     /**
@@ -1272,7 +1355,8 @@ private native void putKinesisVideoFragmentMetadata(long clientHandle, long stre
      * @param kinesisVideoFragmentAck Kinesis Video fragment ack to report for the stream
      * @throws ProducerException
      */
-    private native void kinesisVideoStreamFragmentAck(long clientHandle, long streamHandle, long uploadHandle, final @NonNull KinesisVideoFragmentAck kinesisVideoFragmentAck)
+    private native void kinesisVideoStreamFragmentAck(long clientHandle, long streamHandle, long uploadHandle,
+                                                      final @NonNull KinesisVideoFragmentAck kinesisVideoFragmentAck)
             throws ProducerException;
 
     /**
@@ -1284,7 +1368,8 @@ private native void kinesisVideoStreamFragmentAck(long clientHandle, long stream
      * @param kinesisVideoFragmentAck Kinesis Video fragment ack string to report for the stream
      * @throws ProducerException
      */
-    private native void kinesisVideoStreamParseFragmentAck(long clientHandle, long streamHandle, long uploadHandle, final @NonNull String kinesisVideoFragmentAck)
+    private native void kinesisVideoStreamParseFragmentAck(long clientHandle, long streamHandle, long uploadHandle,
+                                                           final @NonNull String kinesisVideoFragmentAck)
             throws ProducerException;
 
     /**
@@ -1305,7 +1390,8 @@ private native void getKinesisVideoMetrics(long clientHandle, @NonNull final Kin
      * @param metrics - Kinesis Video stream metrics object to fill in
      * @throws ProducerException
      */
-    private native void getKinesisVideoStreamMetrics(long clientHandle, long streamHandle, @NonNull final KinesisVideoStreamMetrics metrics)
+    private native void getKinesisVideoStreamMetrics(long clientHandle, long streamHandle,
+                                                     final @NonNull KinesisVideoStreamMetrics metrics)
             throws ProducerException;
 
     /**
@@ -1317,7 +1403,8 @@ private native void getKinesisVideoStreamMetrics(long clientHandle, long streamH
      * @param streamDescription stream description object
      * @throws ProducerException
      */
-    private native void describeStreamResultEvent(long clientHandle, long streamHandle, int httpStatusCode, final @Nullable StreamDescription streamDescription)
+    private native void describeStreamResultEvent(long clientHandle, long streamHandle, int httpStatusCode,
+                                                  final @Nullable StreamDescription streamDescription)
             throws ProducerException;
 
     /**
@@ -1329,7 +1416,8 @@ private native void describeStreamResultEvent(long clientHandle, long streamHand
      * @param streamingEndpoint streaming endpoint
      * @throws ProducerException
      */
-    private native void getStreamingEndpointResultEvent(long clientHandle, long streamHandle, int httpStatusCode, final @Nullable String streamingEndpoint)
+    private native void getStreamingEndpointResultEvent(long clientHandle, long streamHandle, int httpStatusCode,
+                                                        final @Nullable String streamingEndpoint)
             throws ProducerException;
 
     /**
@@ -1343,7 +1431,9 @@ private native void getStreamingEndpointResultEvent(long clientHandle, long stre
      * @param tokenExpiration token expiration time in 100ns absolute time
      * @throws ProducerException
      */
-    private native void getStreamingTokenResultEvent(long clientHandle, long streamHandle, int httpStatusCode, final @Nullable byte[] streamingToken, int tokenSize, long tokenExpiration)
+    private native void getStreamingTokenResultEvent(long clientHandle, long streamHandle, int httpStatusCode,
+                                                     final @Nullable byte[] streamingToken, int tokenSize,
+                                                     long tokenExpiration)
             throws ProducerException;
 
     /**
@@ -1392,7 +1482,9 @@ private native void createStreamResultEvent(long clientHandle, long streamHandle
      * @param readResult the result of the read operation
      * @throws ProducerException
      */
-    private native void getKinesisVideoStreamData(long clientHandle, long streamHandle, final @NonNull byte[] fillBuffer, int offset, int length, final @NonNull ReadResult readResult)
+    private native void getKinesisVideoStreamData(long clientHandle, long streamHandle, long uploadHandle,
+                                                  final @NonNull byte[] fillBuffer, int offset,
+                                                  int length, final @NonNull ReadResult readResult)
             throws ProducerException;
 
     /**
@@ -1401,9 +1493,11 @@ private native void getKinesisVideoStreamData(long clientHandle, long streamHand
      * @param clientHandle the handle of the client
      * @param streamHandle the handle of the stream
      * @param codecPrivateData Codec Private Data bits or null to reset
+     * @param trackId Track Id of the changed CPD belongs to
      * @throws ProducerException
      */
-    private native void kinesisVideoStreamFormatChanged(long clientHandle, long streamHandle, final @Nullable byte[] codecPrivateData)
+    private native void kinesisVideoStreamFormatChanged(long clientHandle, long streamHandle,
+                                                        final @Nullable byte[] codecPrivateData, long trackId)
             throws ProducerException;
 
     /**
@@ -1415,8 +1509,8 @@ private native void kinesisVideoStreamFormatChanged(long clientHandle, long stre
      * @param deviceArn device ARN if successful.
      * @throws ProducerException
      */
-    private native void createDeviceResultEvent(long clientHandle, long deviceHandle, int httpStatusCode, final @Nullable String deviceArn)
-            throws ProducerException;
+    private native void createDeviceResultEvent(long clientHandle, long deviceHandle, int httpStatusCode,
+                                                final @Nullable String deviceArn) throws ProducerException;
 
     /**
      * Sends device certificate to token exchange result event to SDK
@@ -1429,7 +1523,8 @@ private native void createDeviceResultEvent(long clientHandle, long deviceHandle
      * @param tokenExpiration token expiration time in 100ns absolute time
      * @throws ProducerException
      */
-    private native void deviceCertToTokenResultEvent(long clientHandle, long deviceHandle, int httpStatusCode, final @Nullable byte[] token, int tokenSize, long tokenExpiration)
+    private native void deviceCertToTokenResultEvent(long clientHandle, long deviceHandle, int httpStatusCode,
+                                                     final @Nullable byte[] token, int tokenSize, long tokenExpiration)
             throws ProducerException;
 
     /**
@@ -1441,6 +1536,7 @@ private native void deviceCertToTokenResultEvent(long clientHandle, long deviceH
      * @param statusCode the status code of the termination event
      * @throws ProducerException
      */
-    private native void kinesisVideoStreamTerminated(long clientHandle, long streamHandle, long uploadHandle, int statusCode)
+    private native void kinesisVideoStreamTerminated(long clientHandle, long streamHandle, long uploadHandle,
+                                                     int statusCode)
             throws ProducerException;
 }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/jni/NativeKinesisVideoProducerStream.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/jni/NativeKinesisVideoProducerStream.java
index 9f5a8557cd..6b889741b1 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/jni/NativeKinesisVideoProducerStream.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/jni/NativeKinesisVideoProducerStream.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.internal.producer.jni;
@@ -46,6 +46,7 @@
  */
 public class NativeKinesisVideoProducerStream implements KinesisVideoProducerStream
 {
+    final static long TIMEOUT_IN_MS = 30000; // 30 seconds
     private class NativeDataInputStream extends InputStream {
         /**
          * Whether the stream has been closed
@@ -72,8 +73,8 @@ public int read() throws IOException
 
         @Override
         public int read(final byte[] b,
-                final int off,
-                final int len)
+                        final int off,
+                        final int len)
                 throws IOException {
             if (mStreamClosed) {
                 mLog.warn("Stream %s with uploadHandle %d has been closed", mStreamInfo.getName(), mUploadHandle);
@@ -86,11 +87,11 @@ public int read(final byte[] b,
 
             while (!mStreamClosed) {
                 synchronized (mMonitor) {
-                    while (!mDataAvailable) {
+                    while (!mDataAvailable && !mStreamClosed) {
                         try {
                             mLog.debug("no data for stream %s with uploadHandle %d, waiting", mStreamInfo.getName(),
                                     mUploadHandle);
-                            mMonitor.wait();
+                            mMonitor.wait(TIMEOUT_IN_MS);
                         } catch (final InterruptedException e) {
                             mLog.exception(e, "Waiting for the data availability with uploadHandle %d"
                                     + "threw an interrupted exception. Continuing...", mUploadHandle);
@@ -109,29 +110,22 @@ public int read(final byte[] b,
                 }
 
                 try {
-                    mKinesisVideoProducerJni.getStreamData(mStreamHandle, b, off, len, mReadResult);
+                    mKinesisVideoProducerJni.getStreamData(mStreamHandle, mUploadHandle, b, off, len, mReadResult);
                     bytesRead = mReadResult.getReadBytes();
                     mLog.debug("getStreamData fill %d bytes for stream %s with uploadHandle %d", bytesRead,
-                            mStreamInfo.getName(),
-                            mUploadHandle);
+                            mStreamInfo.getName(), mUploadHandle);
 
                     if (mReadResult.isEndOfStream()) {
-                        if (mReadResult.getUploadHandle() == mUploadHandle) {
-                            // EOS for current session
-                            mLog.info("Received end-of-stream indicator for %s, uploadHandle %d",
-                                    mStreamInfo.getName(), mUploadHandle);
+                        // EOS for current session
+                        mLog.info("Received end-of-stream indicator for %s, uploadHandle %d",
+                                mStreamInfo.getName(), mUploadHandle);
 
-                            // Set the flag so the stream is not valid any longer
-                            mStreamClosed = true;
+                        // Set the flag so the stream is not valid any longer
+                        mStreamClosed = true;
 
-                            if (0 == bytesRead) {
-                                // Indicate the EOS
-                                bytesRead = -1;
-                            }
-                        } else {
-                            mLog.debug("Found end of stream for stream %s on uploadHandle %d for previous uploadHandle %d",
-                                    mStreamInfo.getName(), mUploadHandle, mReadResult.getUploadHandle());
-                            notifyEndOfStream(mReadResult.getUploadHandle());
+                        if (0 == bytesRead) {
+                            // Indicate the EOS
+                            bytesRead = -1;
                         }
                     }
 
@@ -171,7 +165,7 @@ public int read(final byte[] b)
 
         @Override
         public void close()
-            throws IOException
+                throws IOException
         {
             // Set the stream to stopped state
             mStreamClosed = true;
@@ -205,7 +199,7 @@ protected void endOfReaderThread() {
 
     private static final int SERVICE_CALL_RESULT_OK = 200;
     private final NativeKinesisVideoProducerJni mKinesisVideoProducerJni;
-    private final long mStreamHandle;
+    private volatile long mStreamHandle;
     private final StreamInfo mStreamInfo;
     private final StreamCallbacks mStreamCallbacks;
     private final CountDownLatch mReadyLatch;
@@ -239,24 +233,27 @@ public InputStream getDataStream(final long uploadHandle) throws ProducerExcepti
     }
 
     @Override
-    public void getStreamData(@NonNull final byte[] fillBuffer,
+    public void getStreamData(final long uploadHandle,
+                              @NonNull final byte[] fillBuffer,
                               final int offset,
                               final int length,
                               @NonNull final ReadResult readResult) throws ProducerException {
-        mKinesisVideoProducerJni.getStreamData(mStreamHandle, fillBuffer, offset, length, readResult);
+        Preconditions.checkState(mStreamHandle != NativeKinesisVideoProducerJni.INVALID_STREAM_HANDLE_VALUE);
+        mKinesisVideoProducerJni.getStreamData(mStreamHandle, uploadHandle, fillBuffer, offset, length, readResult);
     }
 
     @Override
     public void putFrame(@NonNull final KinesisVideoFrame kinesisVideoFrame) throws ProducerException {
         Preconditions.checkNotNull(kinesisVideoFrame);
+        Preconditions.checkState(mStreamHandle != NativeKinesisVideoProducerJni.INVALID_STREAM_HANDLE_VALUE);
 
-        mLog.debug("PutFrame index: %s, pts: %s, dts: %s, duration: %s, keyFrame: %s, flags: %s",
+        mLog.error("PutFrame index: %s, pts: %s, dts: %s, duration: %s, keyFrame: %s, track: %s",
                 kinesisVideoFrame.getIndex(),
                 kinesisVideoFrame.getPresentationTs(),
                 kinesisVideoFrame.getDecodingTs(),
                 kinesisVideoFrame.getDuration(),
                 FrameFlags.isKeyFrame(kinesisVideoFrame.getFlags()),
-                kinesisVideoFrame.getFlags());
+                kinesisVideoFrame.getTrackId());
 
         // Print out metrics on every key-frame
         if (FrameFlags.isKeyFrame(kinesisVideoFrame.getFlags())) {
@@ -297,6 +294,7 @@ public void putFragmentMetadata(@NonNull final String metadataName, @NonNull fin
             throws ProducerException {
         Preconditions.checkNotNull(metadataName);
         Preconditions.checkNotNull(metadataValue);
+        Preconditions.checkState(mStreamHandle != NativeKinesisVideoProducerJni.INVALID_STREAM_HANDLE_VALUE);
 
         mKinesisVideoProducerJni.putFragmentMetadata(mStreamHandle, metadataName, metadataValue, persistent);
     }
@@ -305,6 +303,7 @@ public void putFragmentMetadata(@NonNull final String metadataName, @NonNull fin
     @Override
     public void fragmentAck(final long uploadHandle, final @NonNull KinesisVideoFragmentAck kinesisVideoFragmentAck) throws ProducerException {
         Preconditions.checkNotNull(kinesisVideoFragmentAck);
+        Preconditions.checkState(mStreamHandle != NativeKinesisVideoProducerJni.INVALID_STREAM_HANDLE_VALUE);
 
         mKinesisVideoProducerJni.fragmentAck(mStreamHandle, uploadHandle, kinesisVideoFragmentAck);
     }
@@ -312,17 +311,22 @@ public void fragmentAck(final long uploadHandle, final @NonNull KinesisVideoFrag
     @Override
     public void parseFragmentAck(final long uploadHandle, final @NonNull String kinesisVideoFragmentAck) throws ProducerException {
         Preconditions.checkNotNull(kinesisVideoFragmentAck);
+        Preconditions.checkState(mStreamHandle != NativeKinesisVideoProducerJni.INVALID_STREAM_HANDLE_VALUE);
 
         mKinesisVideoProducerJni.parseFragmentAck(mStreamHandle, uploadHandle, kinesisVideoFragmentAck);
     }
 
     @Override
-    public void streamFormatChanged(final @Nullable byte[] codecPrivateData) throws ProducerException {
-        mKinesisVideoProducerJni.streamFormatChanged(mStreamHandle, codecPrivateData);
+    public void streamFormatChanged(@Nullable final byte[] codecPrivateData, int trackId)
+            throws ProducerException {
+
+        Preconditions.checkState(mStreamHandle != NativeKinesisVideoProducerJni.INVALID_STREAM_HANDLE_VALUE);
+        mKinesisVideoProducerJni.streamFormatChanged(mStreamHandle, codecPrivateData, trackId);
     }
 
     @Override
     public void streamTerminated(final long uploadHandle, final int statusCode) throws ProducerException {
+        Preconditions.checkState(mStreamHandle != NativeKinesisVideoProducerJni.INVALID_STREAM_HANDLE_VALUE);
         mKinesisVideoProducerJni.streamTerminated(mStreamHandle, uploadHandle, statusCode);
     }
 
@@ -341,13 +345,33 @@ public void stopStreamSync() throws ProducerException {
         try {
             awaitStopped();
         } catch (final ProducerException e) {
+            Exception storedException = null;
+            for (NativeDataInputStream inputStream : mInputStreamMap.values()) {
+                try {
+                    inputStream.close();
+                } catch (final IOException e1) {
+                    storedException = e1;
+                }
+            }
             mLog.exception(e, "Stopping stream threw an exception. Force stopping the input stream.");
+            if (storedException != null) {
+                throw new ProducerException(storedException);
+            }
+        } finally {
+            for (final InputStream stream : mInputStreamMap.values()) {
+                try {
+                    stream.close();
+                } catch (final IOException e) {
+                    mLog.exception(e);
+                }
+            }
         }
     }
 
     @NonNull
     @Override
     public KinesisVideoStreamMetrics getMetrics() throws ProducerException {
+        Preconditions.checkState(mStreamHandle != NativeKinesisVideoProducerJni.INVALID_STREAM_HANDLE_VALUE);
         mKinesisVideoProducerJni.getStreamMetrics(mStreamHandle, mStreamMetrics);
         return mStreamMetrics;
     }
@@ -362,6 +386,12 @@ public long getStreamHandle() {
         return mStreamHandle;
     }
 
+    @Override
+    public void streamFreed() throws ProducerException {
+        streamClosed(ReadResult.INVALID_UPLOAD_HANDLE_VALUE);
+        mStreamHandle = NativeKinesisVideoProducerJni.INVALID_STREAM_HANDLE_VALUE;
+    }
+
     @Override
     public void streamUnderflowReport() throws ProducerException
     {
@@ -387,10 +417,11 @@ public void streamConnectionStale(final long lastAckDuration) throws ProducerExc
     }
 
     @Override
-    public void fragmentAckReceived(@NonNull final KinesisVideoFragmentAck fragmentAck) throws ProducerException
+    public void fragmentAckReceived(final long uploadHandle,
+                                    @NonNull final KinesisVideoFragmentAck fragmentAck) throws ProducerException
     {
         if (mStreamCallbacks != null) {
-            mStreamCallbacks.fragmentAckReceived(fragmentAck);
+            mStreamCallbacks.fragmentAckReceived(uploadHandle, fragmentAck);
         }
     }
 
@@ -411,10 +442,10 @@ public void droppedFragmentReport(final long fragmentTimecode) throws ProducerEx
     }
 
     @Override
-    public void streamErrorReport(final long fragmentTimecode, final long statusCode) throws ProducerException
+    public void streamErrorReport(final long uploadHandle, final long fragmentTimecode, final long statusCode) throws ProducerException
     {
         if (mStreamCallbacks != null) {
-            mStreamCallbacks.streamErrorReport(fragmentTimecode, statusCode);
+            mStreamCallbacks.streamErrorReport(uploadHandle, fragmentTimecode, statusCode);
         }
     }
 
@@ -450,11 +481,41 @@ public void streamReady() throws ProducerException
     public void streamClosed(final long uploadHandle) throws ProducerException
     {
         mLog.debug("Stream %s is closed", mStreamInfo.getName());
-        // Release the stopped latch
-        mStoppedLatch.countDown();
 
+        if (uploadHandle == ReadResult.INVALID_UPLOAD_HANDLE_VALUE) {
+            for (final Map.Entry<Long, NativeDataInputStream> stream : mInputStreamMap.entrySet()) {
+                try {
+                    stream.getValue().close();
+                    if (mStreamCallbacks != null) {
+                        mStreamCallbacks.streamClosed(stream.getKey());
+                    }
+                } catch (final IOException e) {
+                    mLog.error("stream close failed with exception ", e);
+                }
+            }
+
+            // Release the stopped latch
+            mStoppedLatch.countDown();
+        } else {
+            try {
+                mInputStreamMap.get(uploadHandle).close();
+            } catch (final IOException e) {
+                mLog.error("stream close failed with exception ", e);
+            }
+
+            // Release the stopped latch
+            mStoppedLatch.countDown();
+
+            if (mStreamCallbacks != null) {
+                mStreamCallbacks.streamClosed(uploadHandle);
+            }
+        }
+    }
+
+    @Override
+    public void bufferDurationOverflowPressure(final long remainDuration) throws ProducerException {
         if (mStreamCallbacks != null) {
-            mStreamCallbacks.streamClosed(uploadHandle);
+            mStreamCallbacks.bufferDurationOverflowPressure(remainDuration);
         }
     }
 
@@ -492,13 +553,4 @@ public void awaitStopped() throws ProducerException
             throw new ProducerException(e);
         }
     }
-
-    private void notifyEndOfStream(final long uploadHandle) {
-        final NativeDataInputStream inputStream = mInputStreamMap.get(uploadHandle);
-        if (inputStream != null) {
-            inputStream.endOfReaderThread();
-        } else {
-            mLog.error("NativeDataInputStream corresponding to upload handle %d is not found.", uploadHandle);
-        }
-    }
 }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/jni/NativeLibraryLoader.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/jni/NativeLibraryLoader.java
index 64281f9a1c..85b4b5c2ef 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/jni/NativeLibraryLoader.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/producer/jni/NativeLibraryLoader.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.internal.producer.jni;
@@ -27,7 +27,7 @@
  * Static helper for loading libraries
  */
 //@ThreadSafe
-class NativeLibraryLoader {
+public class NativeLibraryLoader {
 
     private final Log mLog;
 
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/AckConsumer.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/AckConsumer.java
index c901761f52..e8befb17cd 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/AckConsumer.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/AckConsumer.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.internal.service;
@@ -21,6 +21,7 @@
 import com.amazonaws.kinesisvideo.common.logging.Log;
 import com.amazonaws.kinesisvideo.common.preconditions.Preconditions;
 import com.amazonaws.kinesisvideo.internal.producer.KinesisVideoProducerStream;
+import com.amazonaws.kinesisvideo.internal.producer.jni.NativeKinesisVideoProducerJni;
 import com.amazonaws.kinesisvideo.producer.ProducerException;
 
 import android.support.annotation.NonNull;
@@ -34,7 +35,7 @@
 class AckConsumer implements Consumer<InputStream> {
     private static final long STOPPED_TIMEOUT_IN_MILLISECONDS = 15000;
     private static final int FOUR_KB = 4096;
-    private static final String END_OF_STREAM_MSG = "0";
+    private static final String END_OF_STREAM_MSG = "0\r\n\r\n";
     private final KinesisVideoProducerStream stream;
     private InputStream ackStream = null;
     private final CountDownLatch stoppedLatch;
@@ -81,7 +82,8 @@ private void processAckInputStream() {
                 }
 
                 // Check for end-of-stream and 0 before processing
-                if (bytesRead == -1 || END_OF_STREAM_MSG.equals(bytesString)) {
+                if (stream.getStreamHandle() == NativeKinesisVideoProducerJni.INVALID_STREAM_HANDLE_VALUE
+                        || bytesRead <= 0 || END_OF_STREAM_MSG.equals(bytesString)) {
                     // End-of-stream
                     log.debug("Received end-of-stream for ACKs.");
                     closed = true;
@@ -127,4 +129,4 @@ public void close() throws ProducerException {
             throw new ProducerException(e);
         }
     }
-}
+}
\ No newline at end of file
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/BlockingAckConsumer.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/BlockingAckConsumer.java
index 9813dd2978..7d6fa20ba7 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/BlockingAckConsumer.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/BlockingAckConsumer.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.internal.service;
@@ -111,4 +111,4 @@ public void awaitResponse() throws KinesisVideoException {
             }
         }
     }
-}
+}
\ No newline at end of file
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/DefaultServiceCallbacksImpl.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/DefaultServiceCallbacksImpl.java
index 73321bbd8f..5912a5936b 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/DefaultServiceCallbacksImpl.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/DefaultServiceCallbacksImpl.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.internal.service;
@@ -76,7 +76,12 @@ public void accept(@Nullable final Exception object) {
             if (streamHandle != NativeKinesisVideoProducerJni.INVALID_STREAM_HANDLE_VALUE) {
                 // The exception can be null indicating successful completion
                 final int statusCode = getStatusCodeFromException(object);
-
+                for (final StreamingInfo stream : mStreams) {
+                    if (stream.getStream().getStreamHandle() == streamHandle) {
+                        log.info("Complete callback triggered for "
+                                + stream.getStream().getStreamName() + " with statuscode " + statusCode);
+                    }
+                }
                 if (statusCode != HTTP_OK) {
                     try {
                         stream.streamTerminated(uploadHandle, statusCode);
@@ -242,7 +247,8 @@ public void describeStream(
             final long timeout,
             @Nullable final byte[] authData,
             final int authType,
-            final long customData) throws ProducerException {
+            final long streamHandle,
+            final KinesisVideoProducerStream stream) throws ProducerException {
 
         Preconditions.checkState(isInitialized(), "Service callbacks object should be initialized first");
         final long delay = calculateRelativeServiceCallAfter(callAfter);
@@ -267,7 +273,7 @@ public void run() {
                 }
 
                 try {
-                    kinesisVideoProducer.describeStreamResult(customData, streamDescription, statusCode);
+                    kinesisVideoProducer.describeStreamResult(stream, streamHandle, streamDescription, statusCode);
                 } catch (final ProducerException e) {
                     throw new RuntimeException(e);
                 }
@@ -285,7 +291,8 @@ public void getStreamingEndpoint(
             final long timeout,
             @Nullable final byte[] authData,
             final int authType,
-            final long customData) throws ProducerException {
+            final long streamHandle,
+            final KinesisVideoProducerStream stream) throws ProducerException {
 
         Preconditions.checkState(isInitialized(), "Service callbacks object should be initialized first");
         final long delay = calculateRelativeServiceCallAfter(callAfter);
@@ -313,7 +320,7 @@ public void run() {
                 }
 
                 try {
-                    kinesisVideoProducer.getStreamingEndpointResult(customData, endpoint, statusCode);
+                    kinesisVideoProducer.getStreamingEndpointResult(stream, streamHandle, endpoint, statusCode);
                 } catch (final ProducerException e) {
                     throw new RuntimeException(e);
                 }
@@ -330,7 +337,8 @@ public void getStreamingToken(
             final long timeout,
             @Nullable final byte[] authData,
             final int authType,
-            final long customData) throws ProducerException {
+            final long streamHandle,
+            final KinesisVideoProducerStream stream) throws ProducerException {
 
         Preconditions.checkState(isInitialized(), "Service callbacks object should be initialized first");
         final long delay = calculateRelativeServiceCallAfter(callAfter);
@@ -375,7 +383,8 @@ public void run() {
 
                 try {
                     kinesisVideoProducer.getStreamingTokenResult(
-                            customData,
+                            stream,
+                            streamHandle,
                             serializedCredentials,
                             expiration,
                             statusCode);
@@ -400,7 +409,7 @@ public void putStream(
             final long timeout,
             @Nullable final byte[] authData,
             final int authType,
-            final long customData) throws ProducerException {
+            final KinesisVideoProducerStream kinesisVideoProducerStream) throws ProducerException {
 
         Preconditions.checkState(isInitialized(), "Service callbacks object should be initialized first");
         final long delay = calculateRelativeServiceCallAfter(callAfter);
@@ -408,14 +417,6 @@ public void putStream(
         final Runnable task = new Runnable() {
             @Override
             public void run() {
-                // find the right stream
-                KinesisVideoProducerStream kinesisVideoProducerStream = null;
-                for (final StreamingInfo streamingInfo : mStreams) {
-                    if (streamingInfo.getStream().getStreamHandle() == customData) {
-                        kinesisVideoProducerStream = streamingInfo.getStream();
-                        break;
-                    }
-                }
 
                 if (kinesisVideoProducerStream == null) {
                     throw new IllegalStateException("Couldn't find the correct stream");
@@ -460,7 +461,7 @@ public void run() {
 
                 try {
                     log.info("putStreamResult uploadHandle " + clientUploadHandle + " status " + statusCode);
-                    kinesisVideoProducer.putStreamResult(customData, clientUploadHandle, statusCode);
+                    kinesisVideoProducer.putStreamResult(kinesisVideoProducerStream, clientUploadHandle, statusCode);
                 } catch (final ProducerException e) {
                     throw new RuntimeException(e);
                 }
@@ -477,7 +478,8 @@ public void tagResource(@NonNull final String resourceArn,
                             final long timeout,
                             @Nullable final byte[] authData,
                             final int authType,
-                            final long customData) throws ProducerException {
+                            final long streamHandle,
+                            final KinesisVideoProducerStream stream) throws ProducerException {
 
         Preconditions.checkState(isInitialized(), "Service callbacks object should be initialized first");
         final long delay = calculateRelativeServiceCallAfter(callAfter);
@@ -514,7 +516,7 @@ public void run() {
                 }
 
                 try {
-                    kinesisVideoProducer.tagResourceResult(customData, statusCode);
+                    kinesisVideoProducer.tagResourceResult(stream, streamHandle, statusCode);
                 } catch (final ProducerException e) {
                     throw new RuntimeException(e);
                 }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/exception/AccessDeniedException.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/exception/AccessDeniedException.java
index 23195a50ee..e7e1903ca3 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/exception/AccessDeniedException.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/exception/AccessDeniedException.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.internal.service.exception;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/exception/AmazonServiceException.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/exception/AmazonServiceException.java
index af907e834c..874a9944f8 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/exception/AmazonServiceException.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/exception/AmazonServiceException.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.internal.service.exception;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/exception/ResourceInUseException.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/exception/ResourceInUseException.java
index 60104484b4..f514958727 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/exception/ResourceInUseException.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/exception/ResourceInUseException.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.internal.service.exception;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/exception/ResourceNotFoundException.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/exception/ResourceNotFoundException.java
index a3411737ea..e4daf4d8e0 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/exception/ResourceNotFoundException.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/internal/service/exception/ResourceNotFoundException.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.internal.service.exception;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/model/Response.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/model/Response.java
index da0f35f26c..0a1bb4e0e4 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/model/Response.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/model/Response.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.model;
@@ -22,106 +22,108 @@
 
 /**
  * Response object which is parsed from the http response to status line, headers and the body.
+ *
+ * @author bdhandap
  */
 public class Response {
-
     /**
      * Status line with status code and reason. Eg :400, 404, etc
      */
     private final ResponseStatus responseStatus;
-
     /**
      * Key value pair of all the headers in the response.
      */
     private final Map<String, String> responseHeaders;
-
     /**
      * Response body as string if the response contains text response.
      */
     private final String responseBody;
-
     /**
      * Response as the raw input stream.
      */
     private final InputStream responsePayload;
-    
-    Response(ResponseBuilder builder) {
-        this.responseStatus = builder.responseStatus;
-        this.responseHeaders = builder.responseHeaders;
-        this.responseBody = builder.responseBody;
-        this.responsePayload = builder.responsePayload;
-    }
-    
-    public static ResponseBuilder builder() {
-        return new ResponseBuilder();
+
+    Response(final ResponseStatus responseStatus, final Map<String, String> responseHeaders, final String responseBody, final InputStream responsePayload) {
+        this.responseStatus = responseStatus;
+        this.responseHeaders = responseHeaders;
+        this.responseBody = responseBody;
+        this.responsePayload = responsePayload;
     }
 
+
     public static class ResponseBuilder {
         private ResponseStatus responseStatus;
         private Map<String, String> responseHeaders;
         private String responseBody;
         private InputStream responsePayload;
-        
-        ResponseBuilder() { }
-        
-        public ResponseBuilder responseStatus(ResponseStatus responseStatus) {
+
+        ResponseBuilder() {
+        }
+
+        public ResponseBuilder responseStatus(final ResponseStatus responseStatus) {
             this.responseStatus = responseStatus;
             return this;
         }
-        
-        public ResponseBuilder responseHeaders(Map<String, String> responseHeaders) {
+
+        public ResponseBuilder responseHeaders(final Map<String, String> responseHeaders) {
             this.responseHeaders = responseHeaders;
             return this;
         }
-        
-        public ResponseBuilder responseBody(String responseBody) {
+
+        public ResponseBuilder responseBody(final String responseBody) {
             this.responseBody = responseBody;
             return this;
         }
-        
-        public ResponseBuilder responsePayload(InputStream responsePayload) {
+
+        public ResponseBuilder responsePayload(final InputStream responsePayload) {
             this.responsePayload = responsePayload;
             return this;
         }
-        
+
         public Response build() {
-            return new Response(this);
+            return new Response(responseStatus, responseHeaders, responseBody, responsePayload);
+        }
+
+        @Override
+        public String toString() {
+            return "Response.ResponseBuilder(responseStatus=" + this.responseStatus + ", responseHeaders=" + this.responseHeaders + ", responseBody=" + this.responseBody + ", responsePayload=" + this.responsePayload + ")";
         }
     }
-    
-    /* (non-Javadoc)
-     * @see java.lang.Object#toString()
-     */
-    @Override
-    public String toString() {
-        return "Response [responseStatus=" + responseStatus + ", responseHeaders=" + responseHeaders + ", super=" + super.toString() + "]";
+
+    public static ResponseBuilder builder() {
+        return new ResponseBuilder();
     }
 
     /**
-     * @return the responseStatus
+     * Status line with status code and reason. Eg :400, 404, etc
      */
     public ResponseStatus getResponseStatus() {
-        return responseStatus;
+        return this.responseStatus;
     }
 
     /**
-     * @return the responseHeaders
+     * Key value pair of all the headers in the response.
      */
     public Map<String, String> getResponseHeaders() {
-        return responseHeaders;
+        return this.responseHeaders;
     }
 
     /**
-     * @return the responseBody
+     * Response body as string if the response contains text response.
      */
     public String getResponseBody() {
-        return responseBody;
+        return this.responseBody;
     }
 
     /**
-     * @return the responsePayload
+     * Response as the raw input stream.
      */
     public InputStream getResponsePayload() {
-        return responsePayload;
+        return this.responsePayload;
+    }
+
+    @Override
+    public String toString() {
+        return "Response(responseStatus=" + this.getResponseStatus() + ", responseHeaders=" + this.getResponseHeaders() + ")";
     }
 }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/model/ResponseStatus.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/model/ResponseStatus.java
index f4eb9e3439..c77defbf98 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/model/ResponseStatus.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/model/ResponseStatus.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.model;
@@ -21,67 +21,65 @@
     private final String protocol;
     private final int statusCode;
     private final String reason;
-    
-    ResponseStatus(ResponseStatusBuilder builder) {
-        this.protocol = builder.protocol;
-        this.statusCode = builder.statusCode;
-        this.reason = builder.reason;
-    }
-    
-    public static ResponseStatusBuilder builder() {
-        return new ResponseStatusBuilder();
+
+    ResponseStatus(final String protocol, final int statusCode, final String reason) {
+        this.protocol = protocol;
+        this.statusCode = statusCode;
+        this.reason = reason;
     }
-    
+
+
     public static class ResponseStatusBuilder {
         private String protocol;
         private int statusCode;
         private String reason;
-        
-        ResponseStatusBuilder() { }
-        
-        public ResponseStatusBuilder protocol(String protocol) {
+
+        ResponseStatusBuilder() {
+        }
+
+        public ResponseStatusBuilder protocol(final String protocol) {
             this.protocol = protocol;
             return this;
         }
-        
-        public ResponseStatusBuilder statusCode(int statusCode) {
+
+        public ResponseStatusBuilder statusCode(final int statusCode) {
             this.statusCode = statusCode;
             return this;
         }
-        
-        public ResponseStatusBuilder reason(String reason) {
+
+        public ResponseStatusBuilder reason(final String reason) {
             this.reason = reason;
             return this;
         }
-        
+
         public ResponseStatus build() {
-            return new ResponseStatus(this);
+            return new ResponseStatus(protocol, statusCode, reason);
+        }
+
+        @Override
+        public String toString() {
+            return "ResponseStatus.ResponseStatusBuilder(protocol=" + this.protocol + ", statusCode=" + this.statusCode + ", reason=" + this.reason + ")";
         }
     }
-    
-    /* (non-Javadoc)
-     * @see java.lang.Object#toString()
-     */
-    @Override
-    public String toString() {
-        return "ResponseStatus [protocol=" + protocol + ", statusCode=" + statusCode + ", reason=" + reason + ", super=" + super.toString() + "]";
+
+    public static ResponseStatusBuilder builder() {
+        return new ResponseStatusBuilder();
     }
-    /**
-     * @return the protocol
-     */
+
     public String getProtocol() {
-        return protocol;
+        return this.protocol;
     }
-    /**
-     * @return the statusCode
-     */
+
     public int getStatusCode() {
-        return statusCode;
+        return this.statusCode;
     }
-    /**
-     * @return the reason
-     */
+
     public String getReason() {
-        return reason;
+        return this.reason;
+    }
+
+    @Override
+    public String toString() {
+        return "ResponseStatus(protocol=" + this.getProtocol() + ", statusCode=" + this.getStatusCode() + ", reason=" + this.getReason() + ")";
     }
 }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/AuthCallbacks.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/AuthCallbacks.java
index 5ae3b13790..76326b6da5 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/AuthCallbacks.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/AuthCallbacks.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.producer;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/AuthInfo.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/AuthInfo.java
index d4c29eee7b..1efb1a2d4e 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/AuthInfo.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/AuthInfo.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.producer;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/AuthInfoType.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/AuthInfoType.java
index 61ecbcf005..ff5d27ea3e 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/AuthInfoType.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/AuthInfoType.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.producer;
@@ -58,4 +58,4 @@
     public int getIntType() {
         return mType;
     }
-}
+}
\ No newline at end of file
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/ClientInfo.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/ClientInfo.java
new file mode 100644
index 0000000000..4cae574fe4
--- /dev/null
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/ClientInfo.java
@@ -0,0 +1,91 @@
+/**
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.kinesisvideo.producer;
+
+/**
+ * Client information object.
+ *
+ * NOTE: This should follow the structure defined in /client/Include.h
+ *
+ * NOTE: Suppressing Findbug error as this code will be accessed from native codebase.
+ */
+public class ClientInfo {
+    /**
+     * Current version for the structure as defined in the native code
+     */
+    public static final int CLIENT_INFO_CURRENT_VERSION = 0;
+    public static final int DEFAULT_LOGGER_LOG_LEVEL = 4;
+
+    private final int mVersion;
+    private final long mCreateClientTimeout;
+    private final long mCreateStreamTimeout;
+    private final long mStopStreamTimeout;
+    private final long mOfflineBufferAvailabilityTimeout;
+    private final int mLoggerLogLevel;
+    private final boolean mLogMetric;
+
+    public ClientInfo() {
+        mVersion = CLIENT_INFO_CURRENT_VERSION;
+        mCreateClientTimeout = 0L;
+        mCreateStreamTimeout = 0L;
+        mStopStreamTimeout = 0L;
+        mOfflineBufferAvailabilityTimeout = 0L;
+        mLoggerLogLevel = DEFAULT_LOGGER_LOG_LEVEL;
+        mLogMetric = true;
+    }
+
+    public ClientInfo(final long createClientTimeout, final long createStreamTimeout, final long stopStreamTimeout,
+                      final long offlineBufferAvailabilityTimeout,
+                      final int loggerLogLevel, final boolean logMetric) {
+        mVersion = CLIENT_INFO_CURRENT_VERSION;
+        mCreateClientTimeout = createClientTimeout;
+        mCreateStreamTimeout = createStreamTimeout;
+        mStopStreamTimeout = stopStreamTimeout;
+        mOfflineBufferAvailabilityTimeout = offlineBufferAvailabilityTimeout;
+        mLoggerLogLevel = DEFAULT_LOGGER_LOG_LEVEL;
+        mLogMetric = logMetric;
+    }
+
+    public int getVersion() {
+        return mVersion;
+    }
+
+    public long getCreateClientTimeout() {
+        return mCreateClientTimeout;
+    }
+
+    public long getCreateStreamTimeout() {
+        return mCreateStreamTimeout;
+    }
+
+    public long getStopStreamTimeout() {
+        return mStopStreamTimeout;
+    }
+
+    public long getOfflineBufferAvailabilityTimeout() {
+        return mOfflineBufferAvailabilityTimeout;
+    }
+
+    public int getLoggerLogLevel() {
+        return mLoggerLogLevel;
+    }
+
+    public boolean getLogMetric() {
+        return mLogMetric;
+    }
+}
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/DeviceInfo.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/DeviceInfo.java
index a270277edc..74063fbb2d 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/DeviceInfo.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/DeviceInfo.java
@@ -1,25 +1,24 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.producer;
 
+import com.amazonaws.kinesisvideo.internal.producer.jni.NativeKinesisVideoProducerJni;
 //import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
-import com.amazonaws.kinesisvideo.producer.StorageInfo;
-import com.amazonaws.kinesisvideo.producer.Tag;
 
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -38,21 +37,32 @@
     /**
      * Current version for the structure as defined in the native code
      */
-    public static final int DEVICE_INFO_CURRENT_VERSION = 0;
+    public static final int DEVICE_INFO_CURRENT_VERSION = 1;
 
     private final int mVersion;
     private final String mName;
     private final StorageInfo mStorageInfo;
     private final int mStreamCount;
     private final Tag[] mTags;
+    private final String mClientId;
+    private final ClientInfo mClientInfo;
 
     public DeviceInfo(int version, @Nullable final String name, @NonNull final StorageInfo storageInfo,
             int streamCount, @Nullable final Tag[] tags) {
+        this(version, name, storageInfo, streamCount, tags,
+                "JNI " + NativeKinesisVideoProducerJni.EXPECTED_LIBRARY_VERSION, new ClientInfo());
+    }
+
+    public DeviceInfo(int version, @Nullable final String name, @NonNull final StorageInfo storageInfo,
+                      int streamCount, @Nullable final Tag[] tags, @NonNull final String clientId,
+                      @NonNull final ClientInfo clientInfo) {
         mStorageInfo = Preconditions.checkNotNull(storageInfo);
         mName = name;
         mTags = tags;
         mVersion = version;
         mStreamCount = streamCount;
+        mClientId = clientId;
+        mClientInfo = clientInfo;
     }
 
     public int getVersion() {
@@ -97,4 +107,14 @@ public String getRootDirectory() {
     public Tag[] getTags() {
         return mTags;
     }
+
+    @NonNull
+    public String getClientId() {
+        return mClientId;
+    }
+
+    @NonNull
+    public ClientInfo getClientInfo() {
+        return mClientInfo;
+    }
 }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/FragmentAckType.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/FragmentAckType.java
index 697995d7be..525f4a31c1 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/FragmentAckType.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/FragmentAckType.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.producer;
@@ -66,4 +66,4 @@ public FragmentAckType(int type) {
     public int getIntType() {
         return mType;
     }
-}
+}
\ No newline at end of file
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/FrameFlags.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/FrameFlags.java
index 1b1db78f15..41adfc8f8e 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/FrameFlags.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/FrameFlags.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.producer;
@@ -72,4 +72,4 @@ public static boolean isDiscardableFrame(final int frameFlags) {
     public static boolean isInvisibleFrame(final int frameFlags) {
         return (frameFlags & FRAME_FLAG_INVISIBLE_FRAME) == FRAME_FLAG_INVISIBLE_FRAME;
     }
-}
+}
\ No newline at end of file
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/FrameOrderMode.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/FrameOrderMode.java
new file mode 100644
index 0000000000..9e590ea6a3
--- /dev/null
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/FrameOrderMode.java
@@ -0,0 +1,68 @@
+/**
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.kinesisvideo.producer;
+
+/**
+ * Definition of the FrameOrderMode.
+ *
+ * NOTE: This enum must be the same as defined in /client/Include.h
+ *
+ */
+public enum FrameOrderMode {
+    /**
+     * When in FRAME_ORDER_MODE_PASS_THROUGH, when putKinesisVideoFrame is called, the frame is submitted immediately
+     */
+    FRAME_ORDER_MODE_PASS_THROUGH(0),
+    /**
+     * When in FRAME_ORDERING_MODE_MULTI_TRACK_AV, frames are submitted in the order of their dts. In case of two frames
+     * having the same mkv timestamp, and one of them being key frame, the key frame flag is moved to the earliest frame
+     * to make sure we dont have cluster end timestamp being equal to the next cluster beginning timestamp.
+     */
+    FRAME_ORDERING_MODE_MULTI_TRACK_AV(1),
+
+    /**
+     * If frames from different tracks have dts difference less than mkv timecode scale, then add 1 unit of mkv timecode
+     * scale to the latter frame to avoid backend reporting fragment overlap. This will be deprecated once backend is
+     * fixed.
+     */
+    FRAME_ORDERING_MODE_MULTI_TRACK_AV_COMPARE_DTS_ONE_MS_COMPENSATE(2),
+
+    /**
+     * same as the dts counter part, but compares pts instead.
+     */
+    FRAME_ORDERING_MODE_MULTI_TRACK_AV_COMPARE_PTS_ONE_MS_COMPENSATE(3);
+
+    private final int mValue;
+
+    public static final int getFrameOrderMode(String status) {
+        for (FrameOrderMode frameOrderMode : FrameOrderMode.values()) {
+            if (frameOrderMode.name().equals(status)) {
+                return frameOrderMode.mValue;
+            }
+        }
+        return FRAME_ORDER_MODE_PASS_THROUGH.intValue();
+    }
+
+    FrameOrderMode(int value) {
+        this.mValue = value;
+    }
+
+    public final int intValue() {
+        return mValue;
+    }
+}
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoFragmentAck.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoFragmentAck.java
index 154a755608..a70312edca 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoFragmentAck.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoFragmentAck.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.producer;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoFrame.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoFrame.java
index 628da652ab..6c76ba36a2 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoFrame.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/KinesisVideoFrame.java
@@ -1,22 +1,23 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.producer;
 
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.DEFAULT_TRACK_ID;
 import static java.util.Objects.requireNonNull;
 
 import java.nio.ByteBuffer;
@@ -31,6 +32,16 @@
  */
 
 public class KinesisVideoFrame {
+    /**
+     * Current version for the structure as defined in the native code
+     */
+    public static final int FRAME_CURRENT_VERSION = 0;
+
+    /**
+     * Version of frame structure
+     */
+    private final int mVersion;
+
     /**
      * Index of the frame
      */
@@ -56,22 +67,33 @@
      */
     private final long mDuration;
 
+    /**
+     * The track id of the frame
+     */
+    private final long mTrackId;
+
     /**
      * The actual frame data
      */
     private final ByteBuffer mData;
+    private final int mSize;
 
     public KinesisVideoFrame(int index, int flags, long decodingTs, long presentationTs, long duration,
-            @NonNull ByteBuffer data) {
+            @NonNull ByteBuffer data, long trackId) {
+        mVersion = FRAME_CURRENT_VERSION;
         mIndex = index;
         mFlags = flags;
         mDecodingTs = decodingTs;
         mPresentationTs = presentationTs;
         mDuration = duration;
         mData = requireNonNull(data);
-        // In some devices encoder would generate frames with more than 3 trailing zeros
-        // which is not allowed by AnnexB specification
-        removeTrailingZeros();
+        mTrackId = trackId;
+        mSize = data.remaining();
+    }
+
+    public KinesisVideoFrame(int index, int flags, long decodingTs, long presentationTs, long duration,
+                             @NonNull ByteBuffer data) {
+        this(index, flags, decodingTs, presentationTs, duration, data, DEFAULT_TRACK_ID);
     }
 
     public int getIndex() {
@@ -95,7 +117,7 @@ public long getDuration() {
     }
 
     public int getSize() {
-        return mData.remaining();
+        return mSize;
     }
 
     @NonNull
@@ -103,8 +125,10 @@ public ByteBuffer getData() {
         ByteBuffer byteBuffer = mData;
         try {
             if (mData.hasArray()) {
-                byteBuffer = ByteBuffer.allocateDirect(mData.remaining());
+                byteBuffer = ByteBuffer.allocateDirect(mSize);
                 byteBuffer.put(mData);
+                mData.rewind();
+                byteBuffer.flip();
             }
         } catch(final Exception e) {
             // Some Android implementations throw when accessing hasArray() API. We will ignore it
@@ -113,19 +137,19 @@ public ByteBuffer getData() {
         return byteBuffer;
     }
 
+    public long getTrackId() {
+        return mTrackId;
+    }
+
     @Override public String toString() {
         return new StringBuilder().append(getClass().getSimpleName()).append("{").append("mIndex=").append(mIndex)
                 .append(", mFlags=").append(mFlags).append(", mDecodingTs=").append(mDecodingTs)
                 .append(", mPresentationTs=").append(mPresentationTs).append(", mDuration=").append(mDuration)
-                .append(", mData=").append(mData).append("}").toString();
+                .append(", mData=").append(mData).append(", mTrackId=").append(mTrackId).append("}")
+                .toString();
     }
 
-    private void removeTrailingZeros() {
-        for (int index = mData.limit() - 1; index > mData.position(); index--) {
-            if (mData.get(index) != 0) {
-                mData.limit(index + 1);
-                break;
-            }
-        }
+    public int getVersion() {
+        return mVersion;
     }
 }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/MkvFlags.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/MkvFlags.java
index fe767f21fe..e25e6acfe5 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/MkvFlags.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/MkvFlags.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.producer;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/MkvTrackInfoType.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/MkvTrackInfoType.java
new file mode 100644
index 0000000000..1ecb2897c8
--- /dev/null
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/MkvTrackInfoType.java
@@ -0,0 +1,51 @@
+/**
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.kinesisvideo.producer;
+
+/* IMPORTANT!!! Make sure the values in this file correspond to their native counterparts in MKV_TRACK_INFO_TYPE
+stucture from amazon-kinesis-video-streams-producer-sdk-cpp/kinesis-video-pic/src/mkvgen/include/com/amazonaws/kinesis/video/mkvgen/Include.h */
+public enum MkvTrackInfoType {
+    VIDEO(1), AUDIO(2), UNKNOWN(3);
+    private final int mValue;
+
+    public static final int getStatusCode(String status) {
+        for (MkvTrackInfoType trackInfoType : MkvTrackInfoType.values()) {
+            if (trackInfoType.name().equals(status)) {
+                return trackInfoType.mValue;
+            }
+        }
+        return UNKNOWN.intValue();
+    }
+
+    MkvTrackInfoType(int value) {
+        this.mValue = value;
+    }
+
+    public static MkvTrackInfoType getType(final int i) {
+        for (final MkvTrackInfoType eachValue : values()) {
+            if (eachValue.intValue() == i) {
+                return eachValue;
+            }
+        }
+        throw new IllegalArgumentException("Illegal value for NalAdaptationFlags");
+    }
+
+    public final int intValue() {
+        return mValue;
+    }
+}
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/ProducerException.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/ProducerException.java
index 0557a356de..e07b4bae56 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/ProducerException.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/ProducerException.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.producer;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StorageCallbacks.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StorageCallbacks.java
index b6f5933b5e..7e58bccb76 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StorageCallbacks.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StorageCallbacks.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.producer;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StorageInfo.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StorageInfo.java
index eb81380fe7..0996aedfde 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StorageInfo.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StorageInfo.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.producer;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamCallbacks.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamCallbacks.java
index 090e48aa45..641b1225d3 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamCallbacks.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamCallbacks.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.producer;
@@ -51,10 +51,11 @@
 
     /**
      * Reports the received ACK.
+     * @param uploadHandle The client stream upload handle.
      * @param fragmentAck The received fragment ACK.
      * @throws ProducerException
      */
-    void fragmentAckReceived(@NonNull final KinesisVideoFragmentAck fragmentAck) throws ProducerException;
+    void fragmentAckReceived(long uploadHandle, @NonNull final KinesisVideoFragmentAck fragmentAck) throws ProducerException;
 
     /**
      * Reports a dropped frame for the stream.
@@ -74,11 +75,12 @@
      * Reports an error for the stream. The client should terminate the connection
      * as the inlet host would have/has already terminated the connection.
      *
+     * @param uploadHandle The client stream upload handle.
      * @param fragmentTimecode Fragment time code of the errored fragment.
      * @param statusCode Status code of the failure.
      * @throws ProducerException
      */
-    void streamErrorReport(long fragmentTimecode, long statusCode) throws ProducerException;
+    void streamErrorReport(long uploadHandle, long fragmentTimecode, long statusCode) throws ProducerException;
 
     /**
      * New data is available for the stream.
@@ -101,4 +103,11 @@
      * @throws ProducerException
      */
     void streamClosed(long uploadHandle) throws ProducerException;
+
+    /**
+     * Stream temporal buffer pressure.
+     * @param remainDuration Remaining duration in the buffer in hundreds of nanos.
+     * @throws ProducerException
+     */
+    void bufferDurationOverflowPressure(long remainDuration) throws ProducerException;
 }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamDescription.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamDescription.java
index e8b6facf0e..778f7cfab6 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamDescription.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamDescription.java
@@ -1,30 +1,32 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.producer;
 
 /**
  * Class to represent the stream description object coming from a successful call to the DescribeStream service API.
+ *
+ * @author dduc
  */
 public class StreamDescription {
     /**
      * Current version for the structure as defined in the native code
      */
-    public static final int STREAM_DESCRIPTION_CURRENT_VERSION = 0;
+    public static final int STREAM_DESCRIPTION_CURRENT_VERSION = 1;
 
     private final int mVersion;
     private final String mDeviceName;
@@ -34,8 +36,16 @@
     private final String mStreamArn;
     private final StreamStatus mStreamStatus;
     private final long mCreationTime;
+    private final long mRetention;
+    private final String mKmsKeyId;
 
     public StreamDescription(int version, String deviceName, String streamName, String contentType, String updateVersion, String streamArn, StreamStatus streamStatus, long creationTime) {
+        this(version, deviceName, streamName, contentType, updateVersion, streamArn, streamStatus, creationTime, 0,"");
+    }
+
+    public StreamDescription(int version, String deviceName, String streamName, String contentType,
+                             String updateVersion, String streamArn, StreamStatus streamStatus, long creationTime,
+                             long retention, String kmsKeyId) {
         this.mVersion = version;
         this.mDeviceName = deviceName;
         this.mStreamName = streamName;
@@ -44,6 +54,8 @@ public StreamDescription(int version, String deviceName, String streamName, Stri
         this.mStreamArn = streamArn;
         this.mStreamStatus = streamStatus;
         this.mCreationTime = creationTime;
+        this.mRetention = retention;
+        this.mKmsKeyId = kmsKeyId;
     }
 
     public int getVersion() {
@@ -77,4 +89,12 @@ public int getStreamStatus() {
     public long getCreationTime() {
         return mCreationTime;
     }
+
+    public long getRetention() {
+        return mRetention;
+    }
+
+    public String getKmsKeyId() {
+        return mKmsKeyId;
+    }
 }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamInfo.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamInfo.java
index 319027814b..ebbb76e428 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamInfo.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamInfo.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.producer;
@@ -25,6 +25,12 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
+import java.nio.ByteBuffer;
+import java.util.UUID;
+
+import static com.amazonaws.kinesisvideo.producer.MkvTrackInfoType.VIDEO;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.DEFAULT_TRACK_ID;
+
 /**
  * Stream information class.
  *
@@ -34,13 +40,13 @@
  *
  * NOTE: Suppressing Findbug to eliminate unnecessary mem copy.
  */
-//@SuppressFBWarnings("EI_EXPOSE_REP")
+////@SuppressFBWarnings("EI_EXPOSE_REP")
 public class StreamInfo {
     /**
      * StreamInfo structure current version.
      * IMPORTANT: Must be kept in sync with the native counterpart.
      */
-    public static final int STREAM_INFO_CURRENT_VERSION = 0;
+    public static final int STREAM_INFO_CURRENT_VERSION = 1;
 
     /**
      * Streaming types that must correspond to the native counterparts
@@ -138,8 +144,6 @@ public int getIntValue() {
     private final boolean mAbsoluteFragmentTimes;
     private final boolean mFragmentAcks;
     private final boolean mRecoverOnError;
-    private final String mCodecId;
-    private final String mTrackName;
     private final int mAvgBandwidthBps;
     private final int mFrameRate;
     private final long mBufferDuration;
@@ -147,9 +151,11 @@ public int getIntValue() {
     private final long mConnectionStalenessDuration;
     private final long mTimecodeScale;
     private final boolean mRecalculateMetrics;
-    private final byte[] mCodecPrivateData;
     private final Tag[] mTags;
     private final NalAdaptationFlags mNalAdaptationFlags;
+    private final TrackInfo[] mTrackInfoList;
+    private final UUID mSegmentUuid;
+    private final FrameOrderMode mFrameOrderMode;
 
     /**
      * Generates a track name from a content type
@@ -220,6 +226,59 @@ public StreamInfo(final int version, @Nullable final String name, @NonNull final
                       @Nullable final byte[] codecPrivateData,
                       @Nullable final Tag[] tags,
                       @NonNull final NalAdaptationFlags nalAdaptationFlags) {
+        this(version, name, streamingType, contentType, kmsKeyId, retentionPeriod, adaptive, maxLatency,
+                fragmentDuration, keyFrameFragmentation, frameTimecodes, absoluteFragmentTimes, fragmentAcks,
+                recoverOnError, avgBandwidthBps, frameRate, bufferDuration, replayDuration,
+                connectionStalenessDuration, timecodeScale, recalculateMetrics, tags,
+                nalAdaptationFlags,
+                null,
+                new TrackInfo[] {new TrackInfo(DEFAULT_TRACK_ID, codecId, trackName, codecPrivateData, VIDEO)});
+    }
+
+    public StreamInfo(final int version, @Nullable final String name, @NonNull final StreamingType streamingType,
+                      @NonNull final String contentType, @Nullable final String kmsKeyId, final long retentionPeriod,
+                      final boolean adaptive, final long maxLatency, final long fragmentDuration,
+                      final boolean keyFrameFragmentation, final boolean frameTimecodes,
+                      final boolean absoluteFragmentTimes, final boolean fragmentAcks, final boolean recoverOnError,
+                      final int avgBandwidthBps, final int frameRate, final long bufferDuration,
+                      final long replayDuration, final long connectionStalenessDuration, final long timecodeScale,
+                      final boolean recalculateMetrics, @Nullable final Tag[] tags,
+                      @NonNull final NalAdaptationFlags nalAdaptationFlags,
+                      @Nullable final UUID segmentUuid,
+                      @NonNull final TrackInfo[] trackInfoList) {
+        this(version, name, streamingType, contentType, kmsKeyId, retentionPeriod, adaptive, maxLatency,
+                fragmentDuration, keyFrameFragmentation, frameTimecodes, absoluteFragmentTimes, fragmentAcks,
+                recoverOnError, avgBandwidthBps, frameRate, bufferDuration, replayDuration,
+                connectionStalenessDuration, timecodeScale, recalculateMetrics, tags,
+                nalAdaptationFlags,
+                segmentUuid,
+                trackInfoList,
+                fixUpFrameOrderMode(trackInfoList));
+    }
+
+    private static FrameOrderMode fixUpFrameOrderMode(TrackInfo[] trackInfos) {
+        if (trackInfos.length == 2 && ((trackInfos[0].getTrackType().equals(MkvTrackInfoType.VIDEO)
+                && trackInfos[1].getTrackType().equals(MkvTrackInfoType.AUDIO))
+                || (trackInfos[0].getTrackType().equals(MkvTrackInfoType.AUDIO)
+                && trackInfos[1].getTrackType().equals(MkvTrackInfoType.VIDEO)))) {
+            // TODO change back to FRAME_ORDERING_MODE_MULTI_TRACK_AV once backend is fixed.
+            return FrameOrderMode.FRAME_ORDERING_MODE_MULTI_TRACK_AV_COMPARE_PTS_ONE_MS_COMPENSATE;
+        }
+        return FrameOrderMode.FRAME_ORDER_MODE_PASS_THROUGH;
+    }
+
+    public StreamInfo(final int version, @Nullable final String name, @NonNull final StreamingType streamingType,
+                      @NonNull final String contentType, @Nullable final String kmsKeyId, final long retentionPeriod,
+                      final boolean adaptive, final long maxLatency, final long fragmentDuration,
+                      final boolean keyFrameFragmentation, final boolean frameTimecodes,
+                      final boolean absoluteFragmentTimes, final boolean fragmentAcks, final boolean recoverOnError,
+                      final int avgBandwidthBps, final int frameRate, final long bufferDuration,
+                      final long replayDuration, final long connectionStalenessDuration, final long timecodeScale,
+                      final boolean recalculateMetrics, @Nullable final Tag[] tags,
+                      @NonNull final NalAdaptationFlags nalAdaptationFlags,
+                      @Nullable final UUID segmentUuid,
+                      @NonNull final TrackInfo[] trackInfoList,
+                      FrameOrderMode frameOrderMode) {
         mVersion = version;
         mName = name;
         mStreamingType = streamingType;
@@ -234,8 +293,6 @@ public StreamInfo(final int version, @Nullable final String name, @NonNull final
         mAbsoluteFragmentTimes = absoluteFragmentTimes;
         mFragmentAcks = fragmentAcks;
         mRecoverOnError = recoverOnError;
-        mCodecId = codecId;
-        mTrackName = trackName;
         mAvgBandwidthBps = avgBandwidthBps;
         mFrameRate = frameRate;
         mBufferDuration = bufferDuration;
@@ -243,9 +300,11 @@ public StreamInfo(final int version, @Nullable final String name, @NonNull final
         mConnectionStalenessDuration = connectionStalenessDuration;
         mTimecodeScale = timecodeScale;
         mRecalculateMetrics = recalculateMetrics;
-        mCodecPrivateData = codecPrivateData;
         mTags = tags;
         mNalAdaptationFlags = nalAdaptationFlags;
+        mSegmentUuid = segmentUuid;
+        mTrackInfoList = trackInfoList;
+        mFrameOrderMode = frameOrderMode;
     }
 
     public int getVersion() {
@@ -307,16 +366,6 @@ public boolean isRecoverOnError() {
         return mRecoverOnError;
     }
 
-    @Nullable
-    public String getCodecId() {
-        return mCodecId;
-    }
-
-    @Nullable
-    public String getTrackName() {
-        return mTrackName;
-    }
-
     public int getAvgBandwidthBps() {
         return mAvgBandwidthBps;
     }
@@ -345,9 +394,80 @@ public boolean isRecalculateMetrics() {
         return mRecalculateMetrics;
     }
 
+    @Nullable
+    public UUID getSegmentUuid() {
+        return mSegmentUuid;
+    }
+
+    @Nullable
+    public byte[] getSegmentUuidBytes() {
+        if (mSegmentUuid == null) {
+            return null;
+        }
+
+        final ByteBuffer tempBuffer = ByteBuffer.wrap(new byte[16]);
+        tempBuffer.putLong(mSegmentUuid.getMostSignificantBits());
+        tempBuffer.putLong(mSegmentUuid.getLeastSignificantBits());
+        return tempBuffer.array();
+    }
+
+    @NonNull
+    public TrackInfo[] getTrackInfoList() {
+        return mTrackInfoList;
+    }
+
+    public int getTrackInfoCount() {
+        return mTrackInfoList.length;
+    }
+
+    @Nullable
+    public String getCodecId(final int trackIndex) {
+        return mTrackInfoList[trackIndex].getCodecId();
+    }
+
+    @Nullable
+    public String getTrackName(final int trackIndex) {
+        return mTrackInfoList[trackIndex].getTrackName();
+    }
+
     @Nullable
     public byte[] getCodecPrivateData() {
-        return mCodecPrivateData;
+        return mTrackInfoList == null || mTrackInfoList.length == 0 ? null : mTrackInfoList[0].getCodecPrivateData();
+    }
+
+    @Nullable
+    public String getCodecId() {
+        return mTrackInfoList == null || mTrackInfoList.length == 0 ? null : mTrackInfoList[0].getCodecId();
+    }
+
+    @Nullable
+    public String getTrackName() {
+        return mTrackInfoList == null || mTrackInfoList.length == 0 ? null : mTrackInfoList[0].getTrackName();
+    }
+
+    @Nullable
+    public byte[] getCodecPrivateData(final int trackIndex) {
+        Preconditions.checkState(mTrackInfoList != null && trackIndex < mTrackInfoList.length,
+                "Requested track is not available in track info list.");
+        return mTrackInfoList[trackIndex].getCodecPrivateData();
+    }
+
+    public long getTrackId(final int trackIndex) {
+        Preconditions.checkState(mTrackInfoList != null && trackIndex < mTrackInfoList.length,
+                "Requested track is not available in track info list.");
+        return mTrackInfoList[trackIndex].getTrackId();
+    }
+
+    public int getTrackInfoType(final int trackIndex) {
+        Preconditions.checkState(mTrackInfoList != null && trackIndex < mTrackInfoList.length,
+                "Requested track is not available in track info list.");
+        return mTrackInfoList[trackIndex].getTrackType().intValue();
+    }
+
+    public int getTrackInfoVersion(final int trackIndex) {
+        Preconditions.checkState(mTrackInfoList != null && trackIndex < mTrackInfoList.length,
+                "Requested track is not available in track info list.");
+        return mTrackInfoList[trackIndex].getVersion();
     }
 
     @Nullable
@@ -359,4 +479,8 @@ public boolean isRecalculateMetrics() {
     public int getNalAdaptationFlags() {
         return mNalAdaptationFlags.getIntValue();
     }
+
+    public int getFrameOrderMode() {
+        return mFrameOrderMode.intValue();
+    }
 }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamStatus.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamStatus.java
index 9ab9c40784..af1dcb2dea 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamStatus.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/StreamStatus.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.producer;
@@ -47,4 +47,4 @@ public static final int getStatusCode(String status) {
     public final int intValue() {
         return mValue;
     }
-}
+}
\ No newline at end of file
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/Tag.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/Tag.java
index 588f24c4f1..3f9ec563ba 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/Tag.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/Tag.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.producer;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/Time.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/Time.java
index fb01b302fc..2296187cab 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/Time.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/Time.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.producer;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/TrackInfo.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/TrackInfo.java
new file mode 100644
index 0000000000..b093fecbdb
--- /dev/null
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/producer/TrackInfo.java
@@ -0,0 +1,88 @@
+/**
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.kinesisvideo.producer;
+
+//import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+
+import android.support.annotation.Nullable;
+
+/**
+ * Track information object.
+ *
+ * NOTE: This should follow the structure defined in /mkvgen/Include.h
+ *
+ * NOTE: Suppressing Findbug error as this code will be accessed from native codebase.
+ */
+//@SuppressFBWarnings("EI_EXPOSE_REP")
+public class TrackInfo {
+    public static final int TRACK_INFO_CURRENT_VERSION = 0;
+
+    private final int version;
+
+    // Unique Identifier for TrackInfo
+    private final long trackId;
+
+    // Codec ID of the stream. Null terminated.
+    private final String codecId;
+
+    // Human readable track name. Null terminated.
+    private final String trackName;
+
+    // Codec private data. Can be NULL if no CPD is used. Allocated in heap.
+    private final byte[] codecPrivateData;
+
+    // Track's content type.
+    private final MkvTrackInfoType trackType;
+
+    public TrackInfo(final long trackId, @Nullable final String codecId, @Nullable final String trackName,
+                     @Nullable final byte[] codecPrivateData, final MkvTrackInfoType trackType) {
+        this.version = TRACK_INFO_CURRENT_VERSION;
+        this.trackId = trackId;
+        this.codecId = codecId;
+        this.trackName = trackName;
+        this.codecPrivateData = codecPrivateData;
+        this.trackType = trackType;
+    }
+
+    public int getVersion() {
+        return version;
+    }
+
+    public long getTrackId() {
+        return trackId;
+    }
+
+    @Nullable
+    public String getCodecId() {
+        return codecId;
+    }
+
+    @Nullable
+    public String getTrackName() {
+        return trackName;
+    }
+
+    @Nullable
+    public byte[] getCodecPrivateData() {
+        return codecPrivateData;
+    }
+
+    public MkvTrackInfoType getTrackType() {
+        return trackType;
+    }
+}
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/signing/KinesisVideoSigner.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/signing/KinesisVideoSigner.java
index 4af46e9341..d70ad0e74b 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/signing/KinesisVideoSigner.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/signing/KinesisVideoSigner.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.signing;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/socket/SocketFactory.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/socket/SocketFactory.java
index 821417f49c..8c44369c3b 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/socket/SocketFactory.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/socket/SocketFactory.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.socket;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/storage/DefaultStorageCallbacks.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/storage/DefaultStorageCallbacks.java
index 91313a205e..101b175ad8 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/storage/DefaultStorageCallbacks.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/storage/DefaultStorageCallbacks.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.storage;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthMeasuringOutputStream.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthMeasuringOutputStream.java
index c09c489d19..01e33f6180 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthMeasuringOutputStream.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthMeasuringOutputStream.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.stream.throttling;
@@ -27,8 +27,9 @@
 
     private final OutputStream mOutputStream;
     private final OpsPerSecondMeasurer mOpsPerSecondMeasurer;
-    
-    public BandwidthMeasuringOutputStream(OutputStream outputStream, OpsPerSecondMeasurer opsPerSecondMeasurer) {
+
+    public BandwidthMeasuringOutputStream(final OutputStream outputStream,
+            final OpsPerSecondMeasurer opsPerSecondMeasurer) {
         this.mOutputStream = outputStream;
         this.mOpsPerSecondMeasurer = opsPerSecondMeasurer;
     }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthThrottledOutputStream.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthThrottledOutputStream.java
index a07c3cf90b..4d68143b61 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthThrottledOutputStream.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthThrottledOutputStream.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.stream.throttling;
@@ -49,7 +49,7 @@ public void write(final byte[] b) throws IOException {
     }
 
     @Override
-    public void write(final byte[] b, int off, int len) throws IOException {
+    public void write(final byte[] b, final int off, final int len) throws IOException {
         int bytesWritten = 0;
         while (bytesWritten < len) {
             final int allowedBytesToWrite = throttler.getAllowedBytes(len - bytesWritten);
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthThrottler.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthThrottler.java
index 41e9284dd7..5d68fc16f3 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthThrottler.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthThrottler.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.stream.throttling;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthThrottlerImpl.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthThrottlerImpl.java
index 578d654f30..13f1ce6e8c 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthThrottlerImpl.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/BandwidthThrottlerImpl.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.stream.throttling;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/DiscreteTimePeriodsThrottler.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/DiscreteTimePeriodsThrottler.java
index efb3c4d29c..c6c2c19845 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/DiscreteTimePeriodsThrottler.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/DiscreteTimePeriodsThrottler.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.stream.throttling;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/OpsPerSecondMeasurer.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/OpsPerSecondMeasurer.java
index 53ced408f9..8f7d88f017 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/OpsPerSecondMeasurer.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/OpsPerSecondMeasurer.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.stream.throttling;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/ThrottledInputStream.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/ThrottledInputStream.java
index bc7f648104..80373f1008 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/ThrottledInputStream.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/ThrottledInputStream.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.stream.throttling;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/ThrottledOutputStream.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/ThrottledOutputStream.java
index 457e899053..70d61b19cd 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/ThrottledOutputStream.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/ThrottledOutputStream.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.stream.throttling;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/Throttler.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/Throttler.java
index 1084864467..941980e6c3 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/Throttler.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/stream/throttling/Throttler.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.stream.throttling;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/streaming/DefaultStreamCallbacks.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/streaming/DefaultStreamCallbacks.java
index ccfd21500e..775f929666 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/streaming/DefaultStreamCallbacks.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/streaming/DefaultStreamCallbacks.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.streaming;
@@ -40,7 +40,7 @@ public void streamConnectionStale(final long lastAckDuration) throws ProducerExc
     }
 
     @Override
-    public void fragmentAckReceived(@NonNull final KinesisVideoFragmentAck fragmentAck) throws ProducerException {
+    public void fragmentAckReceived(final long uploadHandle, @NonNull final KinesisVideoFragmentAck fragmentAck) throws ProducerException {
         // no-op
     }
 
@@ -50,7 +50,7 @@ public void droppedFrameReport(final long frameTimecode) throws ProducerExceptio
     }
 
     @Override
-    public void streamErrorReport(final long frameTimecode, final long statusCode) throws ProducerException {
+    public void streamErrorReport(final long uploadHandle, final long frameTimecode, final long statusCode) throws ProducerException {
         // no-op
     }
 
@@ -74,4 +74,9 @@ public void streamReady() throws ProducerException {
     public void streamClosed(final long uploadHandle) throws ProducerException {
         // no-op
     }
+
+    @Override
+    public void bufferDurationOverflowPressure(final long remainDuration) throws ProducerException {
+        // no-op
+    }
 }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/util/StreamInfoConstants.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/util/StreamInfoConstants.java
index 85ee306fea..56cee3b693 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/util/StreamInfoConstants.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/util/StreamInfoConstants.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.util;
@@ -45,6 +45,14 @@
     public static final boolean ABSOLUTE_TIMECODES = true;
     public static final boolean RELATIVE_TIMECODES = false;
     public static final boolean RECALCULATE_METRICS = true;
+    public static final int DEFAULT_TRACK_ID = 1;
+    public static final int VIDEO_TRACK_ID = DEFAULT_TRACK_ID;
+    public static final int AUDIO_TRACK_ID = DEFAULT_TRACK_ID + 1;
+    public static final String VIDEO_CONTENT_TYPE = "video/h264";
+    public static final String AUDIO_VIDEO_CONTENT_TYPE = "video/h264,audio/aac";
+    public static final long FRAME_DURATION_0_MS = 0L;
+    public static final String VIDEO_CODEC_ID = "V_MPEG4/ISO/AVC";
+    public static final String AUDIO_CODEC_ID = "A_AAC";
 
     /**
      * Default buffer duration for a stream
@@ -65,4 +73,3 @@ private StreamInfoConstants() {
         throw new UnsupportedOperationException();
     }
 }
-
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/util/VersionUtil.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/util/VersionUtil.java
index c75b228fb3..90bb85770a 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/util/VersionUtil.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/kinesisvideo/util/VersionUtil.java
@@ -1,18 +1,18 @@
 /**
- * Copyright 2017-2018 Amazon.com,
- * Inc. or its affiliates. All Rights Reserved.
- *
- * Licensed under the Amazon Software License (the "License").
- * You may not use this file except in compliance with the
- * License. A copy of the License is located at
- *
- *     http://aws.amazon.com/asl/
- *
- * or in the "license" file accompanying this file. This file is
- * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
- * CONDITIONS OF ANY KIND, express or implied. See the License
- * for the specific language governing permissions and
- * limitations under the License.
+ * COPYRIGHT:
+ * <p>
+ * Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * <p>
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ * <p>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p>
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
  */
 
 package com.amazonaws.kinesisvideo.util;
@@ -23,7 +23,7 @@
 
 public final class VersionUtil {
 
-    public static final String AWS_SDK_KVS_PRODUCER_VERSION_STRING = "1.2.3";
+    public static final String AWS_SDK_KVS_PRODUCER_VERSION_STRING = "1.9.3";
 
     private static final String DEFAULT_USER_AGENT_NAME = "AWS-SDK-KVS";
 
@@ -48,3 +48,4 @@ public static String getUserAgent() {
         return getUserAgent(DEFAULT_USER_AGENT_NAME);
     }
 }
+
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/audio/AudioFramesSource.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/audio/AudioFramesSource.java
new file mode 100644
index 0000000000..61c4f1df29
--- /dev/null
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/audio/AudioFramesSource.java
@@ -0,0 +1,162 @@
+/**
+ * Copyright 2017-2018 Amazon.com,
+ * Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Amazon Software License (the "License").
+ * You may not use this file except in compliance with the
+ * License. A copy of the License is located at
+ *
+ *     http://aws.amazon.com/asl/
+ *
+ * or in the "license" file accompanying this file. This file is
+ * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
+ * CONDITIONS OF ANY KIND, express or implied. See the License
+ * for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.amazonaws.mobileconnectors.kinesisvideo.audio;
+
+import static com.amazonaws.mobileconnectors.kinesisvideo.encoding.EncoderWrapper.FrameAvailableListener;
+
+import java.io.IOException;
+import java.nio.ByteBuffer;
+
+import android.content.Context;
+import android.media.AudioFormat;
+import android.media.AudioRecord;
+import android.media.MediaRecorder;
+import android.util.Log;
+
+import com.amazonaws.kinesisvideo.client.mediasource.AudioMediaSourceConfiguration;
+import com.amazonaws.kinesisvideo.internal.mediasource.OnStreamDataAvailable;
+import com.amazonaws.mobileconnectors.kinesisvideo.camera.EncodingCancellationToken;
+import com.amazonaws.mobileconnectors.kinesisvideo.encoding.EncoderWrapper;
+import com.amazonaws.mobileconnectors.kinesisvideo.encoding.EncoderWrapper.CodecPrivateDataAvailableListener;
+
+/**
+ * Utility class for audio encoder
+ */
+public class AudioFramesSource {
+    private static final String TAG = AudioFramesSource.class.getSimpleName();
+
+    private EncoderWrapper mEncoderWrapper;
+    private OnStreamDataAvailable mListener;
+    private boolean mIsReleased = false;
+    private final AudioMediaSourceConfiguration mMediaSourceConfiguration;
+    private final EncodingCancellationToken mEncodingCancellationToken;
+
+    public AudioFramesSource(final AudioMediaSourceConfiguration mediaSourceConfiguration,
+                              final EncodingCancellationToken encodingCancellationToken) {
+
+        mMediaSourceConfiguration = mediaSourceConfiguration;
+        mEncodingCancellationToken = encodingCancellationToken;
+    }
+
+    public void startEncoding(final Context context) {
+        AudioFramesSourceRunnableWrapper.startEncoding(
+                this,
+                context);
+    }
+
+    private static class AudioFramesSourceRunnableWrapper implements Runnable {
+        private final AudioFramesSource mFramesSource;
+        private final Context mContext;
+
+        private AudioFramesSourceRunnableWrapper(final AudioFramesSource framesSource,
+                                                 final Context context) {
+            mContext = context;
+            mFramesSource = framesSource;
+        }
+
+        @Override
+        public void run() {
+            try {
+                mFramesSource.startCapturing(mContext);
+            } catch (Throwable th) {
+                th.printStackTrace();
+            }
+        }
+
+        public static void startEncoding(final AudioFramesSource framesSource,
+                                         final Context context) {
+            AudioFramesSourceRunnableWrapper wrapper = new AudioFramesSourceRunnableWrapper(
+                    framesSource,
+                    context);
+            Thread th = new Thread(wrapper, "AudioFramesSource");
+            th.start();
+        }
+    }
+
+    private void startCapturing(final Context context) throws IOException {
+        try {
+            mEncoderWrapper = new EncoderWrapper(mMediaSourceConfiguration);
+            mEncoderWrapper.setMkvDataListener(mListener);
+
+            android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_URGENT_AUDIO);
+            final int min_buffer_size = AudioRecord.getMinBufferSize(
+                    mMediaSourceConfiguration.getSampleRate(), AudioFormat.CHANNEL_IN_MONO,
+                    AudioFormat.ENCODING_PCM_16BIT);
+            int buffer_size =
+                    mMediaSourceConfiguration.getSamplesPerFrame() * mMediaSourceConfiguration.getFramesPerBuffer();
+            if (buffer_size < min_buffer_size)
+                buffer_size = ((min_buffer_size / mMediaSourceConfiguration.getSamplesPerFrame()) + 1)
+                        * mMediaSourceConfiguration.getSamplesPerFrame() * 2;
+
+            AudioRecord audioRecord = new AudioRecord(MediaRecorder.AudioSource.DEFAULT,
+                    mMediaSourceConfiguration.getSampleRate(),
+                    AudioFormat.CHANNEL_IN_MONO,
+                    AudioFormat.ENCODING_PCM_16BIT,
+                    buffer_size);
+            if (audioRecord.getState() != AudioRecord.STATE_INITIALIZED) {
+                throw new RuntimeException("Failed to get the audio to initialized state");
+            }
+
+            final ByteBuffer buffer = ByteBuffer.allocateDirect(mMediaSourceConfiguration.getSamplesPerFrame());
+
+            // Start recording
+            audioRecord.startRecording();
+
+            int readBytes;
+            try {
+                while (!mIsReleased) {
+                    buffer.clear();
+
+                    readBytes = audioRecord.read(buffer, mMediaSourceConfiguration.getSamplesPerFrame());
+                    if (readBytes > 0) {
+                        buffer.position(readBytes);
+                        buffer.flip();
+                        mEncoderWrapper.encodeSample(buffer, readBytes, mEncodingCancellationToken.isEncodingCancelled());
+                        if (mEncodingCancellationToken.isEncodingCancelled()) {
+                            release();
+                        }
+                    }
+                }
+            } finally {
+                audioRecord.stop();
+                audioRecord.release();
+            }
+        } catch (final Throwable e) {
+            Log.e(TAG, "encoder loop exception" + threadId(), e);
+        }
+    }
+
+    public void setMkvDataListener(final OnStreamDataAvailable listener) {
+        mListener = listener;
+    }
+
+    private void release() {
+        if (mIsReleased) {
+            return;
+        }
+
+        mIsReleased = true;
+        Log.i(TAG, "releasing everything");
+        mEncoderWrapper.stop();
+        Log.i(TAG, "released everything");
+    }
+
+    private static String threadId() {
+        return " | threadId=" + Thread.currentThread().getId();
+    }
+}
\ No newline at end of file
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/camera/CameraAVFramesSource.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/camera/CameraAVFramesSource.java
new file mode 100644
index 0000000000..5b6aeb8192
--- /dev/null
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/camera/CameraAVFramesSource.java
@@ -0,0 +1,230 @@
+/**
+ * Copyright 2017-2018 Amazon.com,
+ * Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Amazon Software License (the "License").
+ * You may not use this file except in compliance with the
+ * License. A copy of the License is located at
+ *
+ *     http://aws.amazon.com/asl/
+ *
+ * or in the "license" file accompanying this file. This file is
+ * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
+ * CONDITIONS OF ANY KIND, express or implied. See the License
+ * for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.amazonaws.mobileconnectors.kinesisvideo.camera;
+
+import android.content.Context;
+import android.media.Image;
+import android.media.ImageReader;
+import android.util.Log;
+import android.view.Surface;
+
+import com.amazonaws.kinesisvideo.client.mediasource.CameraMediaSourceConfiguration;
+import com.amazonaws.kinesisvideo.common.exception.KinesisVideoException;
+import com.amazonaws.kinesisvideo.internal.mediasource.OnStreamDataAvailable;
+import com.amazonaws.mobileconnectors.kinesisvideo.encoding.EncoderWrapper;
+import com.amazonaws.mobileconnectors.kinesisvideo.encoding.EncoderWrapper.CodecPrivateDataAvailableListener;
+import com.amazonaws.mobileconnectors.kinesisvideo.mediasource.android.AndroidAudioVideoMediaSourceConfiguration;
+import com.amazonaws.mobileconnectors.kinesisvideo.mediasource.android.AndroidCameraMediaSource;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+import static com.amazonaws.mobileconnectors.kinesisvideo.encoding.EncoderWrapper.FrameAvailableListener;
+
+/**
+ * Utility class, Binds together encoder, camera wrapper, and camera frames image reader
+ */
+public class CameraAVFramesSource {
+    private static final String TAG = CameraAVFramesSource.class.getSimpleName();
+
+    private EncoderWrapper mEncoderWrapper;
+    private OnStreamDataAvailable mListener;
+    private CameraAdapter mCameraAdapter;
+    private boolean mIsReleased = false;
+    private final ImageReader mImageReader;
+    private final CameraMediaSourceConfiguration mMediaSourceConfiguration;
+    private final EncodingCancellationToken mEncodingCancellationToken;
+
+
+    public CameraAVFramesSource(final ImageReader imageReader,
+                                final CameraMediaSourceConfiguration mediaSourceConfiguration,
+                                final EncodingCancellationToken encodingCancellationToken) {
+
+        mMediaSourceConfiguration = mediaSourceConfiguration;
+        mEncodingCancellationToken = encodingCancellationToken;
+        mImageReader = imageReader;
+        mImageReader.setOnImageAvailableListener(getOnImageAvailableListener(), null);
+    }
+
+    private ImageReader.OnImageAvailableListener getOnImageAvailableListener() {
+        return new ImageReader.OnImageAvailableListener() {
+            @Override
+            public void onImageAvailable(final ImageReader imageReader) {
+                final Image image = imageReader.acquireNextImage();
+                mEncoderWrapper.encodeFrame(image, mEncodingCancellationToken.isEncodingCancelled());
+                image.close();
+
+                if (mEncodingCancellationToken.isEncodingCancelled()) {
+                    release();
+                    return;
+                }
+            }
+        };
+    }
+
+    public void startEncoding(final Context context,
+                              final List<Surface> previewSurfaces,
+                              final String cameraId) {
+
+        final List<Surface> cameraOutputSurfaces = new ArrayList<Surface>();
+        cameraOutputSurfaces.addAll(previewSurfaces);
+        cameraOutputSurfaces.add(mImageReader.getSurface());
+
+        CameraFramesSourceRunnableWrapper.startEncoding(
+                this,
+                context,
+                cameraOutputSurfaces,
+                cameraId);
+    }      
+
+    private static class CameraFramesSourceRunnableWrapper implements Runnable {
+        private final List<Surface> mCameraOutputSurfaces;
+        private final CameraAVFramesSource mCameraFramesSource;
+        private final Context mContext;
+
+        private final String mCameraId;
+
+        private CameraFramesSourceRunnableWrapper(final CameraAVFramesSource cameraFramesSource,
+                                                  final Context context,
+                                                  final List<Surface> cameraOutputSurfaces,
+                                                  final String cameraId) {
+            mCameraFramesSource = cameraFramesSource;
+            mContext = context;
+            mCameraOutputSurfaces = cameraOutputSurfaces;
+            mCameraId = cameraId;
+        }
+
+        @Override
+        public void run() {
+            try {
+                mCameraFramesSource.startCapturing(
+                        mContext,
+                        mCameraOutputSurfaces,
+                        mCameraId);
+            } catch (Throwable th) {
+                th.printStackTrace();
+            }
+        }
+
+        public static void startEncoding(final CameraAVFramesSource test,
+                                         final Context context,
+                                         final List<Surface> cameraOutputSurfaces,
+                                         final String cameraId) {
+            CameraFramesSourceRunnableWrapper wrapper = new CameraFramesSourceRunnableWrapper(
+                    test,
+                    context,
+                    cameraOutputSurfaces,
+                    cameraId);
+            Thread th = new Thread(wrapper, "CameraFramesSource");
+            th.start();
+        }
+    }
+
+    private void startCapturing(final Context context,
+                                final List<Surface> cameraOutputSurfaces,
+                                final String cameraId) throws IOException {
+        try {
+            mEncoderWrapper = new EncoderWrapper(mMediaSourceConfiguration);
+            mEncoderWrapper.setMkvDataListener(mListener);
+
+            prepareCameraAndPreview(
+                    context,
+                    cameraOutputSurfaces,
+                    cameraId);
+        } catch (final Throwable e) {
+            Log.e(TAG, "encoder loop exception" + threadId(), e);
+        }
+    }
+
+    public void setMkvDataListener(final OnStreamDataAvailable listener) {
+        mListener = listener;
+    }
+
+    private void prepareCameraAndPreview(final Context context,
+                                         final List<Surface> cameraOutputSurfaces,
+                                         final String cameraId) {
+
+        if (mCameraAdapter != null) {
+            Log.e(TAG, "starting camera frames source second time" + threadId());
+            throw new RuntimeException("starting camera frames source second time");
+        }
+
+        mCameraAdapter = new CameraAdapter(context, cameraId);
+        Log.i(TAG, "camera adapter");
+
+        mCameraAdapter.openCamera(startPreviewWhenReady(cameraOutputSurfaces));
+    }
+
+    private void release() {
+        if (mIsReleased) {
+            return;
+        }
+
+        mIsReleased = true;
+        Log.i(TAG, "releasing everything");
+        mEncoderWrapper.stop();
+        releaseCamera();
+        Log.i(TAG, "released everything");
+    }
+
+    private void releaseCamera() {
+        try {
+            mCameraAdapter.closeCamera();
+        } catch (final Throwable e) {
+            Log.e(TAG, "error releasing camera");
+        }
+    }
+
+    private AndroidCameraMediaSource.OpenCameraCallback startPreviewWhenReady(
+            final List<Surface> cameraOutputSurfaces) {
+
+        return new AndroidCameraMediaSource.OpenCameraCallback() {
+            @Override
+            public void onOpened() {
+                Log.i(TAG, "camera opened" + threadId());
+                mCameraAdapter.startPreview(cameraOutputSurfaces, getCaptureCallback());
+            }
+
+            @Override
+            public void onError(final KinesisVideoException e) {
+                Log.e(TAG, "failed to open camera" + threadId(), e);
+                release();
+                throw new RuntimeException(e);
+            }
+        };
+    }
+
+    private AndroidCameraMediaSource.CaptureCallback getCaptureCallback() {
+        return new AndroidCameraMediaSource.CaptureCallback() {
+            @Override
+            public void onStarted() {
+                Log.i(TAG, "capture started" + threadId());
+            }
+
+            @Override
+            public void onFailed() {
+                Log.i(TAG, "capture failed" + threadId());
+            }
+        };
+    }
+
+    private static String threadId() {
+        return " | threadId=" + Thread.currentThread().getId();
+    }
+}
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/EncoderFactory.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/EncoderFactory.java
index 67b3bef637..56989ba568 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/EncoderFactory.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/EncoderFactory.java
@@ -21,6 +21,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import android.media.AudioFormat;
 import android.media.MediaCodec;
 import android.media.MediaCodecInfo;
 import android.media.MediaCrypto;
@@ -28,6 +29,7 @@
 import android.util.Log;
 import android.view.Surface;
 
+import com.amazonaws.kinesisvideo.client.mediasource.AudioMediaSourceConfiguration;
 import com.amazonaws.kinesisvideo.client.mediasource.CameraMediaSourceConfiguration;
 
 public class EncoderFactory {
@@ -35,6 +37,7 @@
     private static final Surface NULL_SURFACE = null;
     private static final MediaCrypto NULL_CRYPTO = null;
     private static final int IFRAME_EVERY_2_SEC = 2;
+    private static final int AUDIO_CHANNEL_COUNT = 1;
 
     public static MediaCodec createConfiguredEncoder(
             final CameraMediaSourceConfiguration mediaSourceConfiguration) {
@@ -42,6 +45,12 @@ public static MediaCodec createConfiguredEncoder(
         return createMediaCodec(mediaSourceConfiguration);
     }
 
+    public static MediaCodec createConfiguredAudioEncoder(
+            final AudioMediaSourceConfiguration mediaSourceConfiguration) {
+
+        return createAudioMediaCodec(mediaSourceConfiguration);
+    }
+
     private static MediaCodec createMediaCodec(final CameraMediaSourceConfiguration mediaSourceConfiguration) {
         try {
             final MediaCodec encoder = MediaCodec.createEncoderByType(mediaSourceConfiguration.getEncoderMimeType());
@@ -91,7 +100,7 @@ private static MediaFormat configureMediaFormat(
         format.setString(MediaFormat.KEY_MIME, mediaSourceConfiguration.getEncoderMimeType());
         format.setInteger(MediaFormat.KEY_BIT_RATE, mediaSourceConfiguration.getBitRate());
         format.setInteger(MediaFormat.KEY_FRAME_RATE, mediaSourceConfiguration.getFrameRate());
-        format.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL, IFRAME_EVERY_2_SEC);
+        format.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL, 1);
 
         Log.d(TAG, "format: " + format);
 
@@ -113,4 +122,49 @@ private static void logSupportedColorFormats(
 
         Log.d(TAG, "Supported color formats: " + formatsList.toString());
     }
+
+    private static MediaCodec createAudioMediaCodec(final AudioMediaSourceConfiguration mediaSourceConfiguration) {
+        try {
+            final MediaCodec encoder = MediaCodec.createEncoderByType(mediaSourceConfiguration.getEncoderMimeType());
+            try {
+                encoder.configure(configureAudioMediaFormat(mediaSourceConfiguration),
+                        NULL_SURFACE,
+                        NULL_CRYPTO,
+                        MediaCodec.CONFIGURE_FLAG_ENCODE);
+
+                return encoder;
+            } catch (MediaCodec.CodecException e) {
+                Log.d(TAG, "Failed configuring MediaCodec for audio");
+                throw e;
+            }
+        } catch (final IOException e) {
+            throw new RuntimeException("unable to create encoder", e);
+        }
+    }
+
+    private static MediaFormat configureAudioMediaFormat(final AudioMediaSourceConfiguration mediaSourceConfiguration) {
+
+        Log.d(TAG, mediaSourceConfiguration.getEncoderMimeType() + " sample rate "
+                + mediaSourceConfiguration.getSampleRate() + "@"
+                + mediaSourceConfiguration.getBitRate());
+
+        final MediaFormat format = MediaFormat.createAudioFormat(
+                mediaSourceConfiguration.getEncoderMimeType(),
+                mediaSourceConfiguration.getSampleRate(),
+                AUDIO_CHANNEL_COUNT);
+
+        // Set some properties.  Failing to specify some of these can cause the MediaCodec
+        // configure() call to throw an unhelpful exception.
+        format.setString(MediaFormat.KEY_MIME, mediaSourceConfiguration.getEncoderMimeType());
+        format.setInteger(MediaFormat.KEY_AAC_PROFILE, MediaCodecInfo.CodecProfileLevel.AACObjectLC);
+        //format.setInteger(MediaFormat.KEY_CHANNEL_MASK, AudioFormat.CHANNEL_IN_MONO);
+        format.setInteger(MediaFormat.KEY_BIT_RATE, mediaSourceConfiguration.getBitRate());
+        format.setInteger(MediaFormat.KEY_SAMPLE_RATE, mediaSourceConfiguration.getSampleRate());
+        format.setInteger(MediaFormat.KEY_CHANNEL_COUNT, AUDIO_CHANNEL_COUNT);
+        format.setInteger(MediaFormat.KEY_MAX_INPUT_SIZE, 16384);
+
+        Log.d(TAG, "format: " + format);
+
+        return format;
+    }
 }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/EncoderSampleSubmitter.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/EncoderSampleSubmitter.java
new file mode 100644
index 0000000000..b01f1e2d53
--- /dev/null
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/EncoderSampleSubmitter.java
@@ -0,0 +1,84 @@
+/**
+ * Copyright 2017-2018 Amazon.com,
+ * Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Amazon Software License (the "License").
+ * You may not use this file except in compliance with the
+ * License. A copy of the License is located at
+ *
+ *     http://aws.amazon.com/asl/
+ *
+ * or in the "license" file accompanying this file. This file is
+ * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
+ * CONDITIONS OF ANY KIND, express or implied. See the License
+ * for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.amazonaws.mobileconnectors.kinesisvideo.encoding;
+
+import java.nio.ByteBuffer;
+
+import android.media.Image;
+import android.media.MediaCodec;
+import android.support.annotation.NonNull;
+
+/**
+ * Utility class to submit samples to the encoder.
+ *
+ */
+public class EncoderSampleSubmitter {
+    private static final long NS_IN_US = 1000;
+    private static final long NS_IN_MS = 1000000;
+    private static final int FROM_START = 0;
+    private static final int NO_FLAGS = 0;
+    private static final int DEQUEUE_NOW = -1;
+
+    private final MediaCodec mEncoder;
+    private long mFirstFrameTimestamp = -1;
+
+    public EncoderSampleSubmitter(final MediaCodec encoder) {
+        mEncoder = encoder;
+    }
+
+    public void submitSampleToEncoder(final @NonNull ByteBuffer byteBuffer,
+                                      final int readBytes,
+                                      final boolean endOfStream) {
+
+        // encoders are super sensitive to the timestamps, careful here
+        final long timestamp = nanosSinceFirstFrame();
+        queueInputBuffer(byteBuffer, readBytes, timestamp / NS_IN_US, endOfStream);
+    }
+
+    private void queueInputBuffer(final @NonNull ByteBuffer byteBuffer,
+                                  final int readBytes,
+                                  final long timestampInUS,
+                                  final boolean endOfStream) {
+
+        final int flags = endOfStream ? MediaCodec.BUFFER_FLAG_END_OF_STREAM : NO_FLAGS;
+
+        // step one. get the info about the encoder input buffer
+        final int inputBufferIndex = mEncoder.dequeueInputBuffer(DEQUEUE_NOW);
+        final ByteBuffer tmpBuffer = mEncoder.getInputBuffer(inputBufferIndex);
+        final int tmpBufferSize = tmpBuffer.capacity();
+
+        // step two. copy the frame into the encoder input
+        tmpBuffer.put(byteBuffer);
+
+        // step three. submit the buffer into the encoder
+        mEncoder.queueInputBuffer(
+                inputBufferIndex,
+                FROM_START,
+                tmpBufferSize,
+                timestampInUS,
+                flags);
+    }
+
+    private long nanosSinceFirstFrame() {
+        final long currentTime = System.currentTimeMillis();
+        if (mFirstFrameTimestamp < 0) {
+            mFirstFrameTimestamp = currentTime;
+        }
+        return (currentTime - mFirstFrameTimestamp) * NS_IN_MS;
+    }
+}
\ No newline at end of file
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/EncoderWrapper.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/EncoderWrapper.java
index 9a628929d4..ec64eadf19 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/EncoderWrapper.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/EncoderWrapper.java
@@ -21,12 +21,18 @@
 import android.media.MediaCodec;
 import android.util.Log;
 
+import com.amazonaws.kinesisvideo.client.mediasource.AudioMediaSourceConfiguration;
 import com.amazonaws.kinesisvideo.client.mediasource.CameraMediaSourceConfiguration;
+import com.amazonaws.kinesisvideo.common.exception.KinesisVideoException;
+import com.amazonaws.kinesisvideo.internal.client.mediasource.MediaSourceConfiguration;
+import com.amazonaws.kinesisvideo.internal.mediasource.OnStreamDataAvailable;
 import com.amazonaws.kinesisvideo.producer.KinesisVideoFrame;
 import com.amazonaws.mobileconnectors.kinesisvideo.util.FrameUtility;
 
 import java.nio.ByteBuffer;
 
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.VIDEO_TRACK_ID;
+
 /**
  * Wrapper class around MediaCodec.
  * Accepts raw frame data in YUV420 format as an input, sends it to the encoder,
@@ -36,16 +42,19 @@
 public class EncoderWrapper {
     private static final String TAG = EncoderWrapper.class.getSimpleName();
     private static final int TIMEOUT_USEC = 10000;
-    private final CameraMediaSourceConfiguration mMediaSourceConfiguration;
+    private final MediaSourceConfiguration mMediaSourceConfiguration;
     private MediaCodec mEncoder;
     private EncoderFrameSubmitter mEncoderFrameSubmitter;
+    private EncoderSampleSubmitter mEncoderSampleSubmitter;
     private long mLastRecordedFrameTimestamp = 0;
     private MediaCodec.BufferInfo mBufferInfo;
     private CodecPrivateDataAvailableListener mCodecPrivateDataListener;
     private FrameAvailableListener mFrameAvailableListener;
+    private OnStreamDataAvailable mListener = null;
     private boolean mIsStopped = false;
     private int mFrameIndex;
     private long mFragmentStart = 0;
+    private int mTrackId = 0;
 
     public interface FrameAvailableListener {
 
@@ -55,18 +64,33 @@
 
         void onCodecPrivateDataAvailable(final byte[] privateData);
     }
-    public EncoderWrapper(final CameraMediaSourceConfiguration mediaSourceConfiguration) {
+    public EncoderWrapper(final MediaSourceConfiguration mediaSourceConfiguration) {
         mMediaSourceConfiguration = mediaSourceConfiguration;
         initEncoder();
     }
 
     private void initEncoder() {
         mBufferInfo = new MediaCodec.BufferInfo();
-        mEncoder = EncoderFactory.createConfiguredEncoder(mMediaSourceConfiguration);
-        mEncoderFrameSubmitter = new EncoderFrameSubmitter(mEncoder);
+        if (mMediaSourceConfiguration instanceof CameraMediaSourceConfiguration) {
+            mTrackId = ((CameraMediaSourceConfiguration) mMediaSourceConfiguration).getTrackId();
+            mEncoder = EncoderFactory
+                    .createConfiguredEncoder((CameraMediaSourceConfiguration) mMediaSourceConfiguration);
+            mEncoderFrameSubmitter = new EncoderFrameSubmitter(mEncoder);
+        } else if (mMediaSourceConfiguration instanceof AudioMediaSourceConfiguration) {
+            mTrackId = ((AudioMediaSourceConfiguration) mMediaSourceConfiguration).getTrackId();
+            mEncoder = EncoderFactory
+                    .createConfiguredAudioEncoder((AudioMediaSourceConfiguration) mMediaSourceConfiguration);
+            mEncoderSampleSubmitter = new EncoderSampleSubmitter(mEncoder);
+        } else {
+            throw new RuntimeException("Unexpected media source configuration: " + mMediaSourceConfiguration);
+        }
         mEncoder.start();
     }
 
+    public void setMkvDataListener(final OnStreamDataAvailable listener) {
+        mListener = listener;
+    }
+
     public void setCodecPrivateDataAvailableListener(
             final CodecPrivateDataAvailableListener listener) {
 
@@ -96,6 +120,26 @@ public void encodeFrame(final Image frameImageYUV420,
         Log.d(TAG, "frame encoded" + threadId());
     }
 
+    public void encodeSample(final ByteBuffer buffer,
+                             final int readBytes,
+                             final boolean endOfStream) {
+
+        if (mIsStopped) {
+            Log.w(TAG, "received a sample to encode after already stopped. returning");
+            return;
+        }
+
+        Log.d(TAG, "encoding sample" + threadId());
+
+        mEncoderSampleSubmitter.submitSampleToEncoder(buffer, readBytes, endOfStream);
+
+        Log.d(TAG, "sample sent to encoder" + threadId());
+
+        getDataFromEncoder(endOfStream);
+
+        Log.d(TAG, "sample encoded" + threadId());
+    }
+
 
     private void getDataFromEncoder(final boolean endOfStream) {
         boolean stopReadingFromEncoder = false;
@@ -181,7 +225,16 @@ private void notifyCodecPrivateDataAvailable(final ByteBuffer codecPrivateDataBu
         Log.d(TAG, "got codec private data");
         final ByteBuffer privateData = codecPrivateDataBuffer;
         final byte[] codecPrivateDataArray = convertToArray(privateData);
-        mCodecPrivateDataListener.onCodecPrivateDataAvailable(codecPrivateDataArray);
+        if (mListener == null) {
+            mCodecPrivateDataListener.onCodecPrivateDataAvailable(codecPrivateDataArray);
+        } else {
+            try {
+                mListener.onCodecPrivateData(codecPrivateDataArray, mTrackId);
+            } catch (KinesisVideoException e) {
+                Log.e(TAG, "error updating sink with codec private data", e);
+                throw new RuntimeException("error updating sink with codec private data", e);
+            }
+        }
     }
 
     private void sendEncodedFrameToProducerSDK(final ByteBuffer encodedData) {
@@ -195,12 +248,26 @@ private void sendEncodedFrameToProducerSDK(final ByteBuffer encodedData) {
 
         final ByteBuffer frameData = encodedData;
 
-        mFrameAvailableListener.onFrameAvailable(
-                FrameUtility.createFrame(
+        if (mListener == null) {
+            mFrameAvailableListener.onFrameAvailable(
+                    FrameUtility.createFrame(
+                            mBufferInfo,
+                            1 + currentTime - mFragmentStart,
+                            mFrameIndex++,
+                            frameData));
+        } else {
+            try {
+                mListener.onFrameDataAvailable(FrameUtility.createFrame(
                         mBufferInfo,
                         1 + currentTime - mFragmentStart,
                         mFrameIndex++,
-                        frameData));
+                        frameData,
+                        mTrackId,
+                        mMediaSourceConfiguration instanceof AudioMediaSourceConfiguration));
+            } catch (KinesisVideoException e) {
+                Log.e(TAG, "error updating sink with frame", e);
+            }
+        }
     }
 
     public void stop() {
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/AndroidAudioVideoMediaSource.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/AndroidAudioVideoMediaSource.java
new file mode 100644
index 0000000000..cbb8ac7147
--- /dev/null
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/AndroidAudioVideoMediaSource.java
@@ -0,0 +1,253 @@
+/**
+ * Copyright 2017-2018 Amazon.com,
+ * Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Amazon Software License (the "License").
+ * You may not use this file except in compliance with the
+ * License. A copy of the License is located at
+ *
+ *     http://aws.amazon.com/asl/
+ *
+ * or in the "license" file accompanying this file. This file is
+ * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
+ * CONDITIONS OF ANY KIND, express or implied. See the License
+ * for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.amazonaws.mobileconnectors.kinesisvideo.mediasource.android;
+
+import android.content.Context;
+import android.graphics.ImageFormat;
+import android.media.ImageReader;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.util.Log;
+import android.view.Surface;
+
+import com.amazonaws.kinesisvideo.client.mediasource.MediaSourceState;
+import com.amazonaws.kinesisvideo.common.exception.KinesisVideoException;
+import com.amazonaws.kinesisvideo.internal.client.mediasource.MediaSourceConfiguration;
+import com.amazonaws.kinesisvideo.internal.client.mediasource.MediaSourceSink;
+import com.amazonaws.kinesisvideo.internal.mediasource.DefaultOnStreamDataAvailable;
+import com.amazonaws.kinesisvideo.internal.mediasource.OnStreamDataAvailable;
+import com.amazonaws.kinesisvideo.internal.mediasource.multitrack.MultiTrackMediaSource;
+import com.amazonaws.kinesisvideo.producer.StreamCallbacks;
+import com.amazonaws.kinesisvideo.producer.StreamInfo;
+import com.amazonaws.mobileconnectors.kinesisvideo.audio.AudioFramesSource;
+import com.amazonaws.mobileconnectors.kinesisvideo.camera.CameraAVFramesSource;
+import com.amazonaws.mobileconnectors.kinesisvideo.camera.EncodingCancellationToken;
+
+import java.util.Arrays;
+import java.util.List;
+
+import static com.amazonaws.kinesisvideo.producer.Time.HUNDREDS_OF_NANOS_IN_AN_HOUR;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.DEFAULT_BITRATE;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.DEFAULT_GOP_DURATION;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.KEYFRAME_FRAGMENTATION;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.NOT_ADAPTIVE;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.NO_KMS_KEY_ID;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.RECALCULATE_METRICS;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.RECOVER_ON_FAILURE;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.REQUEST_FRAGMENT_ACKS;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.USE_FRAME_TIMECODES;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.VERSION_ZERO;
+
+public class AndroidAudioVideoMediaSource extends MultiTrackMediaSource {
+
+    private static final String TAG = AndroidCameraMediaSource.class.getSimpleName();
+
+    private static final int TWO_FRAMES_BUFFER = 2;
+
+    private final Context mContext;
+    private final String mStreamName;
+
+    private CameraAVFramesSource mCameraAVFramesSource;
+    private AudioFramesSource mAudioFramesSource;
+    private EncodingCancellationToken mEncodingCancellationToken;
+    private EncodingCancellationToken mEncodingCancellationTokenForAudio;
+    private List<Surface> mPreivewSurfaces;
+
+    private MediaSourceState mMediaSourceState;
+    private AndroidAudioVideoMediaSourceConfiguration mMediaSourceConfiguration;
+    private MediaSourceSink mMediaSourceSink;
+    private OnStreamDataAvailable mListener;
+
+    public interface OpenCameraCallback {
+        void onOpened();
+        void onError(final KinesisVideoException e);
+    }
+
+    public interface CaptureCallback {
+        void onStarted();
+        void onFailed();
+    }
+
+    public AndroidAudioVideoMediaSource(final String streamName, final Context context) {
+        super(streamName);
+        mContext = context;
+        mStreamName = streamName;
+        mEncodingCancellationToken = new EncodingCancellationToken();
+        mEncodingCancellationTokenForAudio = new EncodingCancellationToken();
+    }
+
+    public void setPreviewSurfaces(final Surface ... surfaces) {
+        mPreivewSurfaces = Arrays.asList(surfaces);
+    }
+
+    private CameraAVFramesSource createFramesSource(final ImageReader imageReader) {
+        mEncodingCancellationToken = new EncodingCancellationToken();
+
+        final CameraAVFramesSource cameraAVFramesSource = new CameraAVFramesSource(
+                imageReader,
+                mMediaSourceConfiguration.getCameraMediaSourceConfiguration(),
+                mEncodingCancellationToken);
+
+        return cameraAVFramesSource;
+    }
+
+    private AudioFramesSource createAudioFramesSource() {
+        mEncodingCancellationTokenForAudio = new EncodingCancellationToken();
+
+        final AudioFramesSource audioFramesSource = new AudioFramesSource(
+                mMediaSourceConfiguration.getAudioMediaSourceConfiguration(),
+                mEncodingCancellationTokenForAudio);
+
+        return audioFramesSource;
+    }
+
+    @Override
+    public MediaSourceState getMediaSourceState() {
+        return mMediaSourceState;
+    }
+
+    @Override
+    public MediaSourceConfiguration getConfiguration() {
+        return mMediaSourceConfiguration;
+    }
+
+    @Override
+    public StreamInfo getStreamInfo() throws KinesisVideoException {
+        return new StreamInfo(VERSION_ZERO,
+                mStreamName,
+                StreamInfo.StreamingType.STREAMING_TYPE_REALTIME,
+                mMediaSourceConfiguration.getContentType(),
+                NO_KMS_KEY_ID,
+                mMediaSourceConfiguration.getRetentionPeriodInHours()
+                        * HUNDREDS_OF_NANOS_IN_AN_HOUR,
+                NOT_ADAPTIVE,
+                mMediaSourceConfiguration.getLatencyPressure(),
+                DEFAULT_GOP_DURATION,
+                KEYFRAME_FRAGMENTATION,
+                USE_FRAME_TIMECODES,
+                mMediaSourceConfiguration.isAbsoluteTimecode(),
+                REQUEST_FRAGMENT_ACKS,
+                RECOVER_ON_FAILURE,
+                DEFAULT_BITRATE, // start bit rate for statistics
+                mMediaSourceConfiguration.getFps(),
+                mMediaSourceConfiguration.getBufferDuration(),
+                mMediaSourceConfiguration.getReplayDuration(),
+                mMediaSourceConfiguration.getStalenessDuration(),
+                mMediaSourceConfiguration.getTimecodeScale(),
+                RECALCULATE_METRICS,
+                null,
+                mMediaSourceConfiguration.getNalAdaptationFlag(),
+                null,
+                mMediaSourceConfiguration.getTrackInfoList());
+    }
+
+    @Override
+    public void initialize(@NonNull final MediaSourceSink mediaSourceSink) throws KinesisVideoException {
+        super.initialize(mediaSourceSink);
+        mMediaSourceSink = mediaSourceSink;
+        mMediaSourceState = MediaSourceState.INITIALIZED;
+        mListener = new DefaultOnStreamDataAvailable(mMediaSourceSink);
+        mAudioFramesSource.setMkvDataListener(mListener);
+        mCameraAVFramesSource.setMkvDataListener(mListener);
+    }
+
+    @Override
+    public void configure(final MediaSourceConfiguration configuration) {
+        if (!(configuration instanceof AndroidAudioVideoMediaSourceConfiguration)) {
+            throw new IllegalArgumentException(
+                    "expected instance of CameraMediaSourceConfiguration"
+                            + ", received " + configuration);
+        }
+
+        mMediaSourceConfiguration = (AndroidAudioVideoMediaSourceConfiguration) configuration;
+        mCameraAVFramesSource = createFramesSource(createImageReader());
+        mAudioFramesSource = createAudioFramesSource();
+
+    }
+
+    private ImageReader createImageReader() {
+        return ImageReader
+                .newInstance(
+                        mMediaSourceConfiguration.getCameraMediaSourceConfiguration().getHorizontalResolution(),
+                        mMediaSourceConfiguration.getCameraMediaSourceConfiguration().getVerticalResolution(),
+                        ImageFormat.YUV_420_888,
+                        TWO_FRAMES_BUFFER);
+
+    }
+
+    @Override
+    public void start() throws KinesisVideoException {
+        mMediaSourceState = MediaSourceState.RUNNING;
+        startEncoding();
+        startAudioEncoding();
+    }
+
+    @Override
+    public void stop() throws KinesisVideoException {
+        stopEncoding();
+        mMediaSourceState = MediaSourceState.STOPPED;
+    }
+
+    @Override
+    public boolean isStopped() {
+        return mMediaSourceState == MediaSourceState.STOPPED;
+    }
+
+    @Override
+    public void free() throws KinesisVideoException {
+
+    }
+
+    @Nullable
+    @Override
+    public StreamCallbacks getStreamCallbacks() {
+        return null;
+    }
+
+    private void startEncoding() {
+        Log.i(TAG, "encoding starting");
+
+        mCameraAVFramesSource.startEncoding(
+                mContext,
+                mPreivewSurfaces,
+                mMediaSourceConfiguration.getCameraMediaSourceConfiguration().getCameraId());
+    }
+
+    private void startAudioEncoding() {
+        Log.i(TAG, "audio encoding starting");
+
+        mAudioFramesSource.startEncoding(mContext);
+    }
+
+    private void stopEncoding() {
+        Log.i(TAG, "encoding stopping");
+
+        if (mEncodingCancellationToken == null) {
+            return;
+        }
+
+        mEncodingCancellationToken.cancelEncoding();
+        mEncodingCancellationToken = null;
+        mEncodingCancellationTokenForAudio.cancelEncoding();
+        mEncodingCancellationTokenForAudio = null;
+    }
+
+    @Override
+    public MediaSourceSink getMediaSourceSink() {
+        return mMediaSourceSink;
+    }
+}
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/AndroidAudioVideoMediaSourceConfiguration.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/AndroidAudioVideoMediaSourceConfiguration.java
new file mode 100644
index 0000000000..9308522ef3
--- /dev/null
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/AndroidAudioVideoMediaSourceConfiguration.java
@@ -0,0 +1,325 @@
+/**
+ * Copyright 2017-2018 Amazon.com,
+ * Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Amazon Software License (the "License").
+ * You may not use this file except in compliance with the
+ * License. A copy of the License is located at
+ *
+ *     http://aws.amazon.com/asl/
+ *
+ * or in the "license" file accompanying this file. This file is
+ * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
+ * CONDITIONS OF ANY KIND, express or implied. See the License
+ * for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.amazonaws.mobileconnectors.kinesisvideo.mediasource.android;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+
+import com.amazonaws.kinesisvideo.client.mediasource.AudioMediaSourceConfiguration;
+import com.amazonaws.kinesisvideo.client.mediasource.CameraMediaSourceConfiguration;
+import com.amazonaws.kinesisvideo.internal.mediasource.multitrack.MultiTrackMediaSourceConfiguration;
+import com.amazonaws.kinesisvideo.producer.MkvTrackInfoType;
+import com.amazonaws.kinesisvideo.producer.StreamInfo;
+import com.amazonaws.kinesisvideo.producer.TrackInfo;
+
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.AUDIO_VIDEO_CONTENT_TYPE;
+
+public class AndroidAudioVideoMediaSourceConfiguration extends MultiTrackMediaSourceConfiguration implements Parcelable {
+    private final CameraMediaSourceConfiguration cameraMediaSourceConfiguration;
+    private static final CameraMediaSourceConfiguration.Builder cameraConfigBuilder = new CameraMediaSourceConfiguration.Builder();
+    private final AudioMediaSourceConfiguration audioMediaSourceConfiguration;
+    private static final AudioMediaSourceConfiguration.Builder audioConfigBuilder = new AudioMediaSourceConfiguration.Builder();
+    private final Builder builder;
+
+    public static final Parcelable.Creator<AndroidAudioVideoMediaSourceConfiguration> CREATOR
+            = new Parcelable.Creator<AndroidAudioVideoMediaSourceConfiguration>() {
+
+        public AndroidAudioVideoMediaSourceConfiguration createFromParcel(final Parcel in) {
+            return new AndroidAudioVideoMediaSourceConfiguration(readFromParcel(in));
+        }
+
+        public AndroidAudioVideoMediaSourceConfiguration[] newArray(int size) {
+            return new AndroidAudioVideoMediaSourceConfiguration[size];
+        }
+    };
+
+    @Override
+    public int describeContents() {
+        return 0;
+    }
+
+    @Override
+    public void writeToParcel(final Parcel parcel,
+                              final int i) {
+
+        parcel.writeString(cameraMediaSourceConfiguration.getCameraId());
+        parcel.writeString(cameraMediaSourceConfiguration.getOutputFileName());
+        parcel.writeString(cameraMediaSourceConfiguration.getEncoderMimeType());
+        parcel.writeInt(cameraMediaSourceConfiguration.getFrameRate());
+        parcel.writeInt(cameraMediaSourceConfiguration.getHorizontalResolution());
+        parcel.writeInt(cameraMediaSourceConfiguration.getVerticalResolution());
+        parcel.writeInt(cameraMediaSourceConfiguration.getCameraFacing());
+        parcel.writeInt(cameraMediaSourceConfiguration.getCameraOrientation());
+        parcel.writeInt(cameraMediaSourceConfiguration.getBitRate());
+        parcel.writeInt(cameraMediaSourceConfiguration.getRetentionPeriodInHours());
+        parcel.writeString(String.valueOf(cameraMediaSourceConfiguration.isEndcoderHardwareAccelerated()));
+        parcel.writeLong(cameraMediaSourceConfiguration.getTimeScale());
+        parcel.writeInt(cameraMediaSourceConfiguration.getNalAdaptationFlags().getIntValue());
+        parcel.writeString(String.valueOf((cameraMediaSourceConfiguration.getIsAbsoluteTimecode())));
+        parcel.writeLong(getBufferDuration());
+        parcel.writeString(getContentType());
+        parcel.writeLong(getLatencyPressure());
+        parcel.writeLong(getReplayDuration());
+        parcel.writeLong(getStalenessDuration());
+        parcel.writeInt(audioMediaSourceConfiguration.getBitRate());
+        parcel.writeString(audioMediaSourceConfiguration.getEncoderMimeType());
+        parcel.writeInt(audioMediaSourceConfiguration.getFramesPerBuffer());
+        parcel.writeString(audioMediaSourceConfiguration.getOutputFileName());
+        parcel.writeInt(audioMediaSourceConfiguration.getSampleRate());
+        parcel.writeInt(audioMediaSourceConfiguration.getSamplesPerFrame());
+        if (getTrackInfoList() == null) {
+            parcel.writeInt(0);
+        } else {
+            final TrackInfo[] trackInfoList = getTrackInfoList();
+            parcel.writeInt(trackInfoList.length);
+            for (TrackInfo trackInfo : trackInfoList) {
+                parcel.writeLong(trackInfo.getTrackId());
+                parcel.writeString(trackInfo.getCodecId());
+                parcel.writeString(trackInfo.getTrackName());
+                if (trackInfo.getCodecPrivateData() == null) {
+                    parcel.writeInt(0);
+                } else {
+                    parcel.writeInt(trackInfo.getCodecPrivateData().length);
+                    parcel.writeByteArray(trackInfo.getCodecPrivateData());
+                }
+                parcel.writeInt(trackInfo.getTrackType().intValue());
+            }
+        }
+    }
+
+    private static AndroidAudioVideoMediaSourceConfiguration.AudioVideoBuilder readFromParcel(final Parcel parcel) {
+        final AndroidAudioVideoMediaSourceConfiguration.AudioVideoBuilder builder =
+                new AndroidAudioVideoMediaSourceConfiguration.AudioVideoBuilder()
+                        .withCameraId(parcel.readString())
+                        .withFileOutput(parcel.readString())
+                        .withEncodingMimeType(parcel.readString())
+                        .withFps(parcel.readInt())
+                        .withHorizontalResolution(parcel.readInt())
+                        .withVerticalResolution(parcel.readInt())
+                        .withCameraFacing(parcel.readInt())
+                        .withCameraOrientation(parcel.readInt())
+                        .withEncodingBitRate(parcel.readInt())
+                        .withRetentionPeriodInHours(parcel.readInt())
+                        .withIsEncoderHardwareAccelerated(Boolean.parseBoolean(parcel.readString()))
+                        .withTimecodeScale(parcel.readLong())
+                        .withNalAdaptationFlag(StreamInfo.NalAdaptationFlags.getFlag(parcel.readInt()))
+                        .withAbsoluteTimecode(Boolean.parseBoolean(parcel.readString()))
+                        .withBufferDuration(parcel.readLong())
+                        .withContentType(parcel.readString())
+                        .withLatencyPressure(parcel.readLong())
+                        .withReplayDuration(parcel.readLong())
+                        .withStalenessDuration(parcel.readLong())
+                        .withAudioEncodingBitRate(parcel.readInt())
+                        .withAudioEncodingMimeType(parcel.readString())
+                        .withAudioFramesPerBuffer(parcel.readInt())
+                        .withAudioFileOutput(parcel.readString())
+                        .withAudioSampleRate(parcel.readInt())
+                        .withAudioSamplesPerFrame(parcel.readInt());
+        int trackInfoListLength = parcel.readInt();
+        if (trackInfoListLength != 0) {
+            TrackInfo[] trackInfos = new TrackInfo[trackInfoListLength];
+            for (int index = 0; index < trackInfoListLength; index++) {
+                long trackId = parcel.readLong();
+                String codecId = parcel.readString();
+                String trackName = parcel.readString();
+                int codecPrivateDataSize = parcel.readInt();
+                byte[] privateData = null;
+                if (codecPrivateDataSize > 0) {
+                    privateData = new byte[codecPrivateDataSize];
+                    parcel.readByteArray(privateData);
+                }
+                MkvTrackInfoType trackType = MkvTrackInfoType.getType(parcel.readInt());
+
+                trackInfos[index] = new TrackInfo(trackId, codecId, trackName, privateData, trackType);
+            }
+            builder.withTrackInfoList(trackInfos);
+        }
+        return builder;
+    }
+
+    protected AndroidAudioVideoMediaSourceConfiguration(final Builder builder) {
+        super(builder);
+        this.builder = builder;
+        cameraMediaSourceConfiguration = new CameraMediaSourceConfiguration(cameraConfigBuilder);
+        audioMediaSourceConfiguration = new AudioMediaSourceConfiguration(audioConfigBuilder);
+    }
+
+    public static class AudioVideoBuilder extends Builder<AudioVideoBuilder> {
+        public AudioVideoBuilder() {
+            super(AudioVideoBuilder.class);
+        }
+    }
+
+    protected static class Builder<T extends Builder<T>>
+            extends MultiTrackMediaSourceConfiguration.Builder<T> {
+
+        public Builder(final Class<?> builder) {
+            super();
+        }
+
+        public T withEncodingMimeType(final String mimeType) {
+            cameraConfigBuilder.withEncodingMimeType(mimeType);
+            return (T) this;
+        }
+
+        public T withRetentionPeriodInHours(final int retentionPeriodInHours) {
+            super.withRetentionPeriodInHours(retentionPeriodInHours);
+            cameraConfigBuilder.withRetentionPeriodInHours(retentionPeriodInHours);
+            audioConfigBuilder.withRetentionPeriodInHours(retentionPeriodInHours);
+            return (T) this;
+        }
+
+        public T withFps(final int frameRate) {
+            super.withFps(frameRate);
+            cameraConfigBuilder.withFrameRate(frameRate);
+            return (T) this;
+        }
+
+        public T withFileOutput(final String outputFileName) {
+            cameraConfigBuilder.withFileOutput(outputFileName);
+            return (T) this;
+        }
+
+        public T withCameraId(final String cameraId) {
+            cameraConfigBuilder.withCameraId(cameraId);
+            return (T) this;
+        }
+
+        public T withHorizontalResolution(final int horizontalResolution) {
+            cameraConfigBuilder.withHorizontalResolution(horizontalResolution);
+            return (T) this;
+        }
+
+        public T withVerticalResolution(final int verticalResolution) {
+            cameraConfigBuilder.withVerticalResolution(verticalResolution);
+            return (T) this;
+        }
+
+        public T withCameraFacing(final int facing) {
+            cameraConfigBuilder.withCameraFacing(facing);
+            return (T) this;
+        }
+
+        public T withCameraOrientation(final int orientation) {
+            cameraConfigBuilder.withCameraOrientation(orientation);
+            return (T) this;
+        }
+
+        public T withEncodingBitRate(final int bitrate) {
+            cameraConfigBuilder.withEncodingBitRate(bitrate);
+            return (T) this;
+        }
+
+        public T withIsEncoderHardwareAccelerated(final boolean isAccelerated) {
+            cameraConfigBuilder.withIsEncoderHardwareAccelerated(isAccelerated);
+            return (T) this;
+        }
+
+        public T withTimecodeScale(final long timescale) {
+            super.withTimecodeScale(timecodeScale);
+            cameraConfigBuilder.withFrameTimeScale(timescale);
+            audioConfigBuilder.withFrameTimeScale(timescale);
+            return (T) this;
+        }
+
+        public T withGopDurationMillis(final int gopDuration) {
+            cameraConfigBuilder.withGopDurationMillis(gopDuration);
+            return (T) this;
+        }
+
+        public T withNalAdaptationFlag(final StreamInfo.NalAdaptationFlags nalAdaptationFlags) {
+            super.withNalAdaptationFlag(nalAdaptationFlags);
+            cameraConfigBuilder.withNalAdaptationFlags(nalAdaptationFlags);
+            return (T) this;
+        }
+
+        public T withAbsoluteTimecode(final boolean isAbsoluteTimecode) {
+            super.withAbsoluteTimecode(isAbsoluteTimecode);
+            cameraConfigBuilder.withIsAbsoluteTimecode(isAbsoluteTimecode);
+            audioConfigBuilder.withIsAbsoluteTimecode(isAbsoluteTimecode);
+            return (T) this;
+        }
+
+        public T withAudioEncodingMimeType(final String mimeType) {
+            audioConfigBuilder.withEncodingMimeType(mimeType);
+            return (T) this;
+        }
+
+        public T withAudioSampleRate(final int sampleRate) {
+            audioConfigBuilder.withSampleRate(sampleRate);
+            return (T) this;
+        }
+
+        public T withAudioSamplesPerFrame(final int samplesPerFrame) {
+            audioConfigBuilder.withSamplesPerFrame(samplesPerFrame);
+            return (T) this;
+        }
+
+        public T withAudioFramesPerBuffer(final int framesPerBuffer) {
+            audioConfigBuilder.withFramesPerBuffer(framesPerBuffer);
+            return (T) this;
+        }
+
+        public T withAudioFileOutput(final String outputFileName) {
+            audioConfigBuilder.withFileOutput(outputFileName);
+            return (T) this;
+        }
+
+        public T withAudioEncodingBitRate(final int bitrate) {
+            audioConfigBuilder.withEncodingBitRate(bitrate);
+            return (T) this;
+        }
+
+        public T withAudioIsEncoderHardwareAccelerated(final boolean isAccelerated) {
+            audioConfigBuilder.withIsEncoderHardwareAccelerated(isAccelerated);
+            return (T) this;
+        }
+
+        @Override
+        public AndroidAudioVideoMediaSourceConfiguration build() {
+            cameraConfigBuilder.withCodecPrivateData(null);
+            audioConfigBuilder.withCodecPrivateData(null);
+
+            if (contentType == null) {
+                withContentType(AUDIO_VIDEO_CONTENT_TYPE);
+            }
+
+            for (TrackInfo trackInfo : trackInfoList) {
+                switch (trackInfo.getTrackType()) {
+                    case VIDEO:
+                        cameraConfigBuilder.withTrackId((int) trackInfo.getTrackId());
+                        break;
+                    case AUDIO:
+                        audioConfigBuilder.withTrackId((int) trackInfo.getTrackId());
+                        break;
+                    default:
+                        throw new RuntimeException("Track Info Type not exist: " + trackInfo.getTrackId());
+                }
+            }
+
+            return new AndroidAudioVideoMediaSourceConfiguration(this);
+        }
+    }
+
+    public CameraMediaSourceConfiguration getCameraMediaSourceConfiguration() {
+        return cameraMediaSourceConfiguration;
+    }
+
+    public AudioMediaSourceConfiguration getAudioMediaSourceConfiguration() {
+        return audioMediaSourceConfiguration;
+    }
+}
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/AndroidMediaSourceFactory.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/AndroidMediaSourceFactory.java
index aecbc5ae5e..19ff9083ad 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/AndroidMediaSourceFactory.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/AndroidMediaSourceFactory.java
@@ -19,10 +19,13 @@
 
 import android.content.Context;
 
+import com.amazonaws.kinesisvideo.client.mediasource.AudioMediaSourceConfiguration;
 import com.amazonaws.kinesisvideo.client.mediasource.CameraMediaSourceConfiguration;
 import com.amazonaws.kinesisvideo.internal.client.mediasource.MediaSource;
 import com.amazonaws.kinesisvideo.internal.client.mediasource.MediaSourceConfiguration;
 import com.amazonaws.kinesisvideo.client.mediasource.UnknownMediaSourceException;
+import com.amazonaws.kinesisvideo.internal.mediasource.multitrack.MultiTrackMediaSource;
+import com.amazonaws.kinesisvideo.internal.mediasource.multitrack.MultiTrackMediaSourceConfiguration;
 
 public final class AndroidMediaSourceFactory {
 
@@ -34,6 +37,8 @@ public static MediaSource createMediaSource(
         if (CameraMediaSourceConfiguration.MEDIA_SOURCE_TYPE
             .equals(configuration.getMediaSourceType())) {
             return createAndroidCameraMediaSource(streamName, context, (CameraMediaSourceConfiguration) configuration);
+        } else if (configuration instanceof MultiTrackMediaSourceConfiguration) {
+            return createAndroidCameraMediaSource(streamName, context, (AndroidAudioVideoMediaSourceConfiguration) configuration);
         } else {
             throw new UnknownMediaSourceException(configuration.getMediaSourceType());
         }
@@ -49,6 +54,15 @@ private static AndroidCameraMediaSource createAndroidCameraMediaSource(
         return mediaSource;
     }
 
+    private static AndroidAudioVideoMediaSource createAndroidCameraMediaSource(
+            final String streamName,
+            final Context context,
+            final AndroidAudioVideoMediaSourceConfiguration configuration) {
+        final AndroidAudioVideoMediaSource mediaSource = new AndroidAudioVideoMediaSource(streamName, context);
+        mediaSource.configure(configuration);
+        return mediaSource;
+    }
+
     private AndroidMediaSourceFactory() {
         // no-op
     }
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/ProducerStreamSink.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/ProducerStreamSink.java
index a3a6e71a52..0c85fdee9e 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/ProducerStreamSink.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/ProducerStreamSink.java
@@ -18,6 +18,7 @@
 package com.amazonaws.mobileconnectors.kinesisvideo.mediasource.android;
 
 import static com.amazonaws.kinesisvideo.common.preconditions.Preconditions.checkNotNull;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.VIDEO_TRACK_ID;
 
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -56,7 +57,12 @@ public void onFrame(@NonNull final KinesisVideoFrame kinesisVideoFrame) throws K
 
     @Override
     public void onCodecPrivateData(@Nullable final byte[] bytes) throws KinesisVideoException {
-        mProducerStream.streamFormatChanged(bytes);
+        mProducerStream.streamFormatChanged(bytes, VIDEO_TRACK_ID);
+    }
+
+    @Override
+    public void onCodecPrivateData(@Nullable byte[] codecPrivateData, int trackId) throws KinesisVideoException {
+        mProducerStream.streamFormatChanged(codecPrivateData, trackId);
     }
 
     @Override
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/FrameUtility.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/FrameUtility.java
index ddb4cbf909..58e1b63bd1 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/FrameUtility.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/util/FrameUtility.java
@@ -24,6 +24,9 @@
 
 import com.amazonaws.kinesisvideo.producer.KinesisVideoFrame;
 
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.DEFAULT_TRACK_ID;
+import static com.amazonaws.kinesisvideo.util.StreamInfoConstants.FRAME_DURATION_0_MS;
+
 public class FrameUtility {
     private static final String TAG = FrameUtility.class.getSimpleName();
     private static final int FRAME_FLAG_KEY_FRAME = 1;
@@ -35,15 +38,18 @@ public static KinesisVideoFrame createFrame(
             final MediaCodec.BufferInfo bufferInfo,
             final long timeCodeMs,
             final int frameIndex,
-            final ByteBuffer encodedFrameData) {
+            final ByteBuffer encodedFrameData,
+            final int trackId,
+            final boolean allNonKeyFrame) {
 
         final long currentTimeMs = System.currentTimeMillis();
 
-        final int flags = isKeyFrame(bufferInfo) ? FRAME_FLAG_KEY_FRAME : FRAME_FLAG_NONE;
+        final int flags = allNonKeyFrame ? FRAME_FLAG_NONE
+                : (isKeyFrame(bufferInfo) ? FRAME_FLAG_KEY_FRAME : FRAME_FLAG_NONE);
 
         Log.d(TAG, "frame timestamp: " + currentTimeMs
                 + ", index: " + frameIndex
-                + ", duration: " + FRAME_DURATION_2_MS
+                + ", duration: " + FRAME_DURATION_0_MS
                 + ", keyFrame: " + isKeyFrame(bufferInfo)
                 + ", flags: " + flags);
         // time is zero, currently the stream will use wall clock internally
@@ -52,8 +58,18 @@ public static KinesisVideoFrame createFrame(
                 flags,
                 currentTimeMs * HUNDREDS_OF_NANOS_IN_MS,
                 currentTimeMs * HUNDREDS_OF_NANOS_IN_MS,
-                FRAME_DURATION_2_MS * HUNDREDS_OF_NANOS_IN_MS,
-                encodedFrameData);
+                FRAME_DURATION_0_MS * HUNDREDS_OF_NANOS_IN_MS,
+                encodedFrameData,
+                trackId);
+    }
+
+    public static KinesisVideoFrame createFrame(
+            final MediaCodec.BufferInfo bufferInfo,
+            final long timeCodeMs,
+            final int frameIndex,
+            final ByteBuffer encodedFrameData) {
+
+        return createFrame(bufferInfo, timeCodeMs, frameIndex, encodedFrameData, DEFAULT_TRACK_ID, false);
     }
 
     private static boolean isKeyFrame(final MediaCodec.BufferInfo bufferInfo) {
diff --git a/aws-android-sdk-kinesisvideo/src/main/jniLibs/arm64-v8a/libKinesisVideoProducerJNI.so b/aws-android-sdk-kinesisvideo/src/main/jniLibs/arm64-v8a/libKinesisVideoProducerJNI.so
old mode 100644
new mode 100755
index 2a57c56456..ed9de164e9
Binary files a/aws-android-sdk-kinesisvideo/src/main/jniLibs/arm64-v8a/libKinesisVideoProducerJNI.so and b/aws-android-sdk-kinesisvideo/src/main/jniLibs/arm64-v8a/libKinesisVideoProducerJNI.so differ
diff --git a/aws-android-sdk-kinesisvideo/src/main/jniLibs/armeabi-v7a/libKinesisVideoProducerJNI.so b/aws-android-sdk-kinesisvideo/src/main/jniLibs/armeabi-v7a/libKinesisVideoProducerJNI.so
old mode 100644
new mode 100755
index b64f55cf00..d4ff7ffe68
Binary files a/aws-android-sdk-kinesisvideo/src/main/jniLibs/armeabi-v7a/libKinesisVideoProducerJNI.so and b/aws-android-sdk-kinesisvideo/src/main/jniLibs/armeabi-v7a/libKinesisVideoProducerJNI.so differ
diff --git a/aws-android-sdk-kinesisvideo/src/main/jniLibs/armeabi/libKinesisVideoProducerJNI.so b/aws-android-sdk-kinesisvideo/src/main/jniLibs/armeabi/libKinesisVideoProducerJNI.so
deleted file mode 100644
index c73c82dd40..0000000000
Binary files a/aws-android-sdk-kinesisvideo/src/main/jniLibs/armeabi/libKinesisVideoProducerJNI.so and /dev/null differ
diff --git a/aws-android-sdk-kinesisvideo/src/main/jniLibs/x86/libKinesisVideoProducerJNI.so b/aws-android-sdk-kinesisvideo/src/main/jniLibs/x86/libKinesisVideoProducerJNI.so
old mode 100644
new mode 100755
index 9ea060aa9a..0bc5e5d2eb
Binary files a/aws-android-sdk-kinesisvideo/src/main/jniLibs/x86/libKinesisVideoProducerJNI.so and b/aws-android-sdk-kinesisvideo/src/main/jniLibs/x86/libKinesisVideoProducerJNI.so differ
diff --git a/aws-android-sdk-kinesisvideo/src/main/jniLibs/x86_64/libKinesisVideoProducerJNI.so b/aws-android-sdk-kinesisvideo/src/main/jniLibs/x86_64/libKinesisVideoProducerJNI.so
old mode 100644
new mode 100755
index da6651079d..4de984cfc9
Binary files a/aws-android-sdk-kinesisvideo/src/main/jniLibs/x86_64/libKinesisVideoProducerJNI.so and b/aws-android-sdk-kinesisvideo/src/main/jniLibs/x86_64/libKinesisVideoProducerJNI.so differ
