diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java
index c19240dad8..dd6f66b6d9 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java
@@ -171,10 +171,7 @@ public boolean start(AmazonS3 s3, TransferDBUtil dbUtil, TransferStatusUpdater u
             }
             return true;
         }
-        /*
-         * @Anchorer
-         * if transfer is already completed when trying to start, we should update state and trigger a callback
-         */
+        // if transfer is already completed when trying to start, we should update state and trigger a callback
         if (TransferState.COMPLETED.equals(state)) {
             updater.updateState(id, TransferState.COMPLETED);
         }
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
index 6036367272..8606f3fdf0 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
@@ -319,10 +319,7 @@ void execCommand(Intent intent) {
                 transfer = dbUtil.getTransferById(id);
                 if (transfer != null) {
                     updater.addTransfer(transfer);
-                    /*
-                     * @Anchorer
-                     * while resuming a transfer, if the transfer is null, create a new one, and trigger a state callback instantly. (for UI display)
-                     */
+                    //while resuming a transfer, if the transfer is null, create a new one, and trigger a state callback instantly. (for UI display)
                     updater.updateState(id, transfer.state);
                 } else {
                     LOGGER.error("Can't find transfer: " + id);
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java
index 853de34713..d20067cd85 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java
@@ -106,10 +106,7 @@ private Boolean uploadMultipartAndWaitForCompletion() throws ExecutionException
                         + " due to " + ace.getMessage(), ace);
                 updater.throwError(upload.id, ace);
 
-                /*
-                 * @Anchorer
-                 * While initiating Multi-part upload, if the task is already paused by user, the task should not be set to FAILED.
-                 */
+                // While initiating Multi-part upload, if the task is already paused by user, the task should not be set to FAILED.
                 if (!TransferState.PAUSED.equals(upload.state)) {
                     updater.updateState(upload.id, TransferState.FAILED);
                 }
@@ -191,10 +188,7 @@ private Boolean uploadMultipartAndWaitForCompletion() throws ExecutionException
                 updater.throwError(upload.id, e);
             }
 
-            /*
-             * @Anchorer
-             * If the task is already paused by user, it should not be set to FAILED state.
-             */
+            // If the task is already paused by user, it should not be set to FAILED state.
             if (!TransferState.PAUSED.equals(upload.state)) {
                 updater.updateState(upload.id, TransferState.FAILED);
             }
@@ -212,10 +206,7 @@ private Boolean uploadMultipartAndWaitForCompletion() throws ExecutionException
                     + " due to " + ace.getMessage(), ace);
             updater.throwError(upload.id, ace);
 
-            /*
-             * @Anchorer
-             * If the task is already paused by user, it should not be set to FAILED state.
-             */
+            // If the task is already paused by user, it should not be set to FAILED state.
             if (!TransferState.PAUSED.equals(upload.state)) {
                 updater.updateState(upload.id, TransferState.FAILED);
             }
@@ -259,10 +250,7 @@ private Boolean uploadSinglePartAndWaitForCompletion() {
             LOGGER.debug("Failed to upload: " + upload.id + " due to " + e.getMessage(), e);
             updater.throwError(upload.id, e);
 
-            /*
-             * @Anchorer
-             * If the task is already paused by user, it should not be set to FAILED state.
-             */
+            // If the task is already paused by user, it should not be set to FAILED state.
             if (!TransferState.PAUSED.equals(upload.state)) {
                 updater.updateState(upload.id, TransferState.FAILED);
             }
