diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/auth/AwsIoTKinesisVideoCredentialsProvider.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/auth/AwsIoTKinesisVideoCredentialsProvider.java
new file mode 100644
index 0000000000..ec464a9c89
--- /dev/null
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/auth/AwsIoTKinesisVideoCredentialsProvider.java
@@ -0,0 +1,152 @@
+package com.amazonaws.mobileconnectors.kinesisvideo.auth;
+
+import android.support.annotation.NonNull;
+
+import com.amazonaws.kinesisvideo.auth.AbstractKinesisVideoCredentialsProvider;
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.net.URL;
+import java.security.KeyManagementException;
+import java.security.KeyStore;
+import java.security.KeyStoreException;
+import java.security.NoSuchAlgorithmException;
+import java.security.SecureRandom;
+import java.security.UnrecoverableKeyException;
+import java.security.cert.CertificateException;
+import java.util.Date;
+import javax.net.ssl.HttpsURLConnection;
+import javax.net.ssl.KeyManagerFactory;
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.SSLSocketFactory;
+import com.amazonaws.kinesisvideo.auth.AbstractKinesisVideoCredentialsProvider;
+import com.amazonaws.kinesisvideo.auth.KinesisVideoCredentials;
+import com.amazonaws.kinesisvideo.common.exception.KinesisVideoException;
+import com.amazonaws.kinesisvideo.common.logging.Log;
+import com.amazonaws.kinesisvideo.common.preconditions.Preconditions;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+
+public class AwsIoTKinesisVideoCredentialsProvider extends AbstractKinesisVideoCredentialsProvider {
+
+    public static final Date CREDENTIALS_NEVER_EXPIRE = new Date(Long.MAX_VALUE);
+    private static final String KEYMANAGER_X509 = "SunX509";
+    private static final String KEYSTORE_PKCS = "PKCS12";
+    private static final String TLS = "TLS";
+
+    private String awsIotAuthUrl;
+    private String keyStoreLocation;
+    private String keyStorePassword;
+    private SSLSocketFactory sslSocketFactory;
+    private Gson gson;
+    private final Log log;
+
+
+    public AwsIoTKinesisVideoCredentialsProvider(@NonNull final String awsIotAuthUrl,
+                                                 @NonNull final String keyStoreLocation,
+                                                 @NonNull final String keyStorePassword,
+                                                 @NonNull Log log) throws UnrecoverableKeyException, KeyManagementException, NoSuchAlgorithmException, KeyStoreException, CertificateException, IOException {
+        this.awsIotAuthUrl = Preconditions.checkNotNull(awsIotAuthUrl);
+        this.keyStorePassword = Preconditions.checkNotNull(keyStorePassword);
+        this.keyStoreLocation = Preconditions.checkNotNull(keyStoreLocation);
+        this.log = Preconditions.checkNotNull(log);
+        this.sslSocketFactory = getFactory( this.keyStoreLocation, this.keyStorePassword );
+        this.gson = new GsonBuilder().registerTypeAdapter(AwsIoTSessionCredentials.class, new AwsIoTSessionCredentialsDeserializer()).create();
+    }
+
+    @Override
+    protected KinesisVideoCredentials updateCredentials() throws KinesisVideoException {
+        AwsIoTSessionCredentials awsCredentials;
+
+        try {
+            awsCredentials = this.refresh();
+            return new KinesisVideoCredentials(awsCredentials.getAccessKeyId(),
+                    awsCredentials.getSecretAccessKey(),
+                    awsCredentials.getSessionToken(),
+                    awsCredentials.getExpiration());
+        } catch (Exception e) {
+            throw new KinesisVideoException(e);
+        }
+    }
+
+    public String getAwsIotAuthUrl() {
+        return awsIotAuthUrl;
+    }
+
+    public void setAwsIotAuthUrl(String awsIotAuthUrl) {
+        this.awsIotAuthUrl = awsIotAuthUrl;
+    }
+
+    public String getKeyStoreLocation() {
+        return keyStoreLocation;
+    }
+
+    public void setKeyStoreLocation(String keyStoreLocation) {
+        this.keyStoreLocation = keyStoreLocation;
+    }
+
+    public String getKeyStorePassword() {
+        return keyStorePassword;
+    }
+
+    public void setKeyStorePassword(String keyStorePassword) {
+        this.keyStorePassword = keyStorePassword;
+    }
+
+    private AwsIoTSessionCredentials refresh(){
+        try {
+            log.debug("Retrieving IoT Session Credentials from: " + this.awsIotAuthUrl);
+
+            URL url = new URL(this.awsIotAuthUrl);
+            HttpsURLConnection urlConnection = (HttpsURLConnection) url.openConnection();
+            urlConnection.setSSLSocketFactory(this.sslSocketFactory);
+
+            BufferedReader bufferedInputReader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
+            AwsIoTSessionCredentials awsIoTcredentials = serializeAuthorizationResponse(bufferedInputReader);
+            if( awsIoTcredentials != null && awsIoTcredentials.getAccessKeyId() != null
+                    && awsIoTcredentials.getSecretAccessKey() != null
+                    && awsIoTcredentials.getSessionToken() != null
+                    && awsIoTcredentials.getExpiration() != null) {
+                log.debug("Successfully retrieved IoT Session Credentials: " + awsIoTcredentials);
+
+                return awsIoTcredentials;
+            } else {
+                log.error("AWS IoT Credentials Response Information is null " + awsIoTcredentials);
+                return null;
+            }
+
+        } catch (IOException e) {
+            log.exception(e, " Error retrieving IoT credentials");
+            return null;
+        }
+
+    }
+
+    private AwsIoTSessionCredentials serializeAuthorizationResponse(BufferedReader bufferedInputReader) throws IOException {
+        String credentialsResponseLine;
+        credentialsResponseLine = bufferedInputReader.readLine();
+        return gson.fromJson(credentialsResponseLine, AwsIoTSessionCredentials.class);
+    }
+
+    private SSLSocketFactory getFactory( String keyManagerLocation, String keyPassword ) throws NoSuchAlgorithmException, KeyStoreException, CertificateException, IOException, UnrecoverableKeyException, KeyManagementException  {
+        File keyManagerfile = new File(keyManagerLocation);
+        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KEYMANAGER_X509);
+        KeyStore keyStore = KeyStore.getInstance(KEYSTORE_PKCS);
+
+        InputStream keyInput = new FileInputStream(keyManagerfile);
+        keyStore.load(keyInput, keyPassword.toCharArray());
+        keyInput.close();
+
+        keyManagerFactory.init(keyStore, keyPassword.toCharArray());
+
+        SSLContext context = SSLContext.getInstance(TLS);
+        context.init(keyManagerFactory.getKeyManagers(), null, new SecureRandom());
+
+        return context.getSocketFactory();
+    }
+
+}
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/auth/AwsIoTSessionCredentials.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/auth/AwsIoTSessionCredentials.java
new file mode 100644
index 0000000000..bec84dcba8
--- /dev/null
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/auth/AwsIoTSessionCredentials.java
@@ -0,0 +1,41 @@
+package com.amazonaws.mobileconnectors.kinesisvideo.auth;
+
+import java.util.Date;
+
+public class AwsIoTSessionCredentials {
+    private String accessKeyId;
+    private String secretAccessKey;
+    private String sessionToken;
+    private Date expiration;
+
+    public String getAccessKeyId() {
+        return accessKeyId;
+    }
+    public void setAccessKeyId(String accessKeyId) {
+        this.accessKeyId = accessKeyId;
+    }
+    public String getSecretAccessKey() {
+        return secretAccessKey;
+    }
+    public void setSecretAccessKey(String secretAccessKey) {
+        this.secretAccessKey = secretAccessKey;
+    }
+    public String getSessionToken() {
+        return sessionToken;
+    }
+    public void setSessionToken(String sessionToken) {
+        this.sessionToken = sessionToken;
+    }
+    public Date getExpiration() {
+        return expiration;
+    }
+    public void setExpiration(Date expiration) {
+        this.expiration = expiration;
+    }
+
+    @Override
+    public String toString() {
+        return "AwsIoTSessionCredentials [accessKeyId=" + accessKeyId + ", secretAccessKey=" + secretAccessKey
+                + ", sessionToken=" + sessionToken + ", expiration=" + expiration + "]";
+    }
+}
\ No newline at end of file
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/auth/AwsIoTSessionCredentialsDeserializer.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/auth/AwsIoTSessionCredentialsDeserializer.java
new file mode 100644
index 0000000000..8d7f9cea69
--- /dev/null
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/auth/AwsIoTSessionCredentialsDeserializer.java
@@ -0,0 +1,23 @@
+package com.amazonaws.mobileconnectors.kinesisvideo.auth;
+
+import java.lang.reflect.Type;
+
+import com.google.gson.Gson;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonParseException;
+
+public class AwsIoTSessionCredentialsDeserializer implements JsonDeserializer<AwsIoTSessionCredentials> {
+
+    private static final String CREDENTIALS_ATTRIBUTE = "credentials";
+
+    public AwsIoTSessionCredentials deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext jsonDeserializationContext)
+            throws JsonParseException {
+        JsonElement content = jsonElement.getAsJsonObject().get(CREDENTIALS_ATTRIBUTE);
+
+        // Deserialize it. You use a new instance of Gson to avoid infinite recursion
+        // to this deserializer
+        return new Gson().fromJson(content, AwsIoTSessionCredentials.class);
+    }
+}
\ No newline at end of file
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/client/KinesisVideoAndroidClientFactory.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/client/KinesisVideoAndroidClientFactory.java
index 2c504f80be..f2aa881d5e 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/client/KinesisVideoAndroidClientFactory.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/client/KinesisVideoAndroidClientFactory.java
@@ -102,6 +102,26 @@ public static KinesisVideoClient createKinesisVideoClient(final @NonNull Context
         final KinesisVideoCredentialsProvider kinesisVideoCredentialsProvider =
                 new KinesisVideoCredentialsProviderImpl(awsCredentialsProvider, log);
 
+        return createKinesisVideoClient(context, regions,kinesisVideoCredentialsProvider);
+    }
+
+    /**
+     * Create KinesisVideo client.
+     *
+     * @param context Android context to use
+     * @param regions Regions object
+     * @param KinesisVideoCredentialsProvider Credentials provider
+     * @return
+     * @throws KinesisVideoException
+     */
+    public static KinesisVideoClient createKinesisVideoClient(final @NonNull Context context,
+                                                              final @NonNull Regions regions,
+                                                              final @NonNull KinesisVideoCredentialsProvider kinesisVideoCredentialsProvider)
+            throws KinesisVideoException {
+        final OutputChannel outputChannel = new AndroidLogOutputChannel();
+
+        final Log log = new Log(outputChannel, LogLevel.VERBOSE, LOG_TAG);
+
         final KinesisVideoClientConfiguration configuration = KinesisVideoClientConfiguration.builder()
                 .withRegion(regions.getName())
                 .withCredentialsProvider(kinesisVideoCredentialsProvider)
