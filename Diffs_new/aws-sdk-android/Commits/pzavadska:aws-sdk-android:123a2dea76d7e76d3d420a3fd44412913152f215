diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDBUtil.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDBUtil.java
index 2361f5d711..15627e7a0e 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDBUtil.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDBUtil.java
@@ -709,6 +709,9 @@ private ContentValues generateContentValuesForObjectMetadata(ObjectMetadata meta
             values.put(TransferTable.COLUMN_HTTP_EXPIRES_DATE,
                     String.valueOf(metadata.getHttpExpiresDate().getTime()));
         }
+        if (metadata.getStorageClass() != null) {
+            values.put(TransferTable.COLUMN_HEADER_STORAGE_CLASS, metadata.getStorageClass());
+        }
 
         return values;
     }
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDatabaseHelper.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDatabaseHelper.java
index a9725a9213..2c0300cc1d 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDatabaseHelper.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferDatabaseHelper.java
@@ -22,7 +22,7 @@
 class TransferDatabaseHelper extends SQLiteOpenHelper {
 
     private static final String DATABASE_NAME = "awss3transfertable.db";
-    private static final int DATABASE_VERSION = 4;
+    private static final int DATABASE_VERSION = 5;
 
     private int version;
 
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java
index 9b4c10e676..e071efc64e 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java
@@ -21,6 +21,7 @@
 import com.amazonaws.mobileconnectors.s3.transferutility.TransferService.NetworkInfoReceiver;
 import com.amazonaws.services.s3.AmazonS3;
 import com.amazonaws.services.s3.model.AbortMultipartUploadRequest;
+import com.amazonaws.services.s3.model.StorageClass;
 import com.amazonaws.util.json.JsonUtils;
 
 import org.apache.commons.logging.Log;
@@ -68,6 +69,7 @@
     public String headerContentEncoding;
     public String headerCacheControl;
     public String headerExpire;
+    public String headerStorageClass;
 
     /**
      * The following were added in 2.2.6 to support object metdata
@@ -147,6 +149,7 @@ public void updateFromDB(Cursor c) {
         this.sseKMSKey = c.getString(c.getColumnIndexOrThrow(TransferTable.COLUMN_SSE_KMS_KEY));
         this.md5 = c.getString(c.getColumnIndexOrThrow(TransferTable.COLUMN_CONTENT_MD5));
         this.cannedAcl = c.getString(c.getColumnIndexOrThrow(TransferTable.COLUMN_CANNED_ACL));
+        this.headerStorageClass = c.getString(c.getColumnIndexOrThrow(TransferTable.COLUMN_HEADER_STORAGE_CLASS));
     }
 
     /**
@@ -287,9 +290,9 @@ public String toString() {
                 .append("isLastPart:").append(isLastPart).append(",")
                 .append("partNumber:").append(partNumber).append(",")
                 .append("multipartId:").append(multipartId).append(",")
-                .append("eTag:").append(eTag)
+                .append("eTag:").append(eTag).append(",")
+                .append("storageClass:").append(headerStorageClass)
                 .append("]");
         return sb.toString();
     }
 }
-
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferTable.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferTable.java
index 56a5eae4a8..f50a01b187 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferTable.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferTable.java
@@ -152,6 +152,11 @@
      * User specified cache control
      */
     public static final String COLUMN_HEADER_CACHE_CONTROL = "header_cache_control";
+    
+    /**
+     * User specified storage class
+     */
+    public static final String COLUMN_HEADER_STORAGE_CLASS = "header_storage_class";
 
     /**
      * ============ Below added in 2.2.6 for support for metadata ============
@@ -228,7 +233,8 @@
             + COLUMN_HEADER_CONTENT_DISPOSITION + " text, "
             + COLUMN_HEADER_CONTENT_ENCODING + " text, "
             + COLUMN_HEADER_CACHE_CONTROL + " text, "
-            + COLUMN_HEADER_EXPIRE + " text"
+            + COLUMN_HEADER_EXPIRE + " text, "
+            + COLUMN_HEADER_STORAGE_CLASS + " text"
             + ");";
 
     /**
@@ -244,6 +250,7 @@ public static void onCreate(SQLiteDatabase database, int version) {
     private static final int TABLE_VERSION_2 = 2;
     private static final int TABLE_VERSION_3 = 3;
     private static final int TABLE_VERSION_4 = 4;
+    private static final int TABLE_VERSION_5 = 5;
 
     /**
      * Upgrades the database.
@@ -264,6 +271,9 @@ public static void onUpgrade(SQLiteDatabase database, int oldVersion,
         if (oldVersion < TABLE_VERSION_4 && newVersion >= TABLE_VERSION_4) {
             addVersion4Columns(database);
         }
+        if (oldVersion < TABLE_VERSION_5 && newVersion >= TABLE_VERSION_5) {
+            addVersion5Columns(database);
+        }
     }
 
     /**
@@ -304,4 +314,10 @@ private static void addVersion4Columns(SQLiteDatabase database) {
                 " ADD COLUMN " + COLUMN_CANNED_ACL + " text;";
         database.execSQL(addCannedAcl);
     }
+    
+    private static void addVersion5Columns(SQLiteDatabase database) {
+        final String addCannedAcl = "ALTER TABLE " + TABLE_TRANSFER +
+                " ADD COLUMN " + COLUMN_HEADER_STORAGE_CLASS + " text;";
+        database.execSQL(addCannedAcl);
+    }
 }
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java
index 12b4acd3e4..f5ae615279 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java
@@ -301,6 +301,9 @@ private PutObjectRequest createPutObjectRequest(TransferRecord upload) {
         } else {
             om.setContentType(Mimetypes.getInstance().getMimetype(file));
         }
+        if (upload.headerStorageClass != null) {
+            putObjectRequest.setStorageClass(upload.headerStorageClass);
+        }
         if (upload.expirationTimeRuleId != null) {
             om.setExpirationTimeRuleId(upload.expirationTimeRuleId);
         }
@@ -320,7 +323,6 @@ private PutObjectRequest createPutObjectRequest(TransferRecord upload) {
             putObjectRequest
                     .setSSEAwsKeyManagementParams(new SSEAwsKeyManagementParams(upload.sseKMSKey));
         }
-
         putObjectRequest.setMetadata(om);
         putObjectRequest.setCannedAcl(getCannedAclFromString(upload.cannedAcl));
 
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ObjectMetadata.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ObjectMetadata.java
index 211f95a165..74bad7d6e7 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ObjectMetadata.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/model/ObjectMetadata.java
@@ -839,6 +839,14 @@ public String getStorageClass() {
         }
         return storageClass.toString();
     }
+    
+    /**
+     * Sets the Amazon S3 storage class for the stored objects.
+     * @param storageClass The Amazon S3 storage class for the stored objects. 
+     */
+    public void setStorageClass(StorageClass storageClass) {
+        metadata.put(Headers.STORAGE_CLASS, storageClass);
+    }
 
     /**
      * Returns the value of the specified user meta datum.
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/AbstractS3ResponseHandlerTest.java b/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/AbstractS3ResponseHandlerTest.java
index 03cbcdac19..3f7f12c817 100644
--- a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/AbstractS3ResponseHandlerTest.java
+++ b/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/AbstractS3ResponseHandlerTest.java
@@ -24,6 +24,7 @@
 import com.amazonaws.services.s3.Headers;
 import com.amazonaws.services.s3.S3ResponseMetadata;
 import com.amazonaws.services.s3.model.ObjectMetadata;
+import com.amazonaws.services.s3.model.StorageClass;
 
 import org.junit.Test;
 
@@ -63,6 +64,7 @@ public void testPopulateObjectMetadata() {
                 .header(Headers.RESTORE,
                         "ongoing-request=\"false\", expiry-date=\"Wed, 07 Nov 2012 00:00:00 GMT\"")
                 .header("UndefinedKey", "UndefinedValue")
+                .header(Headers.STORAGE_CLASS, "STANDARD_IA")
                 .build();
 
         ObjectMetadata om = new ObjectMetadata();
@@ -81,6 +83,7 @@ public void testPopulateObjectMetadata() {
         assertEquals("Rule for testfile.txt", om.getExpirationTimeRuleId());
         assertEquals(1352246400000L, om.getRestoreExpirationTime().getTime());
         assertFalse(om.getOngoingRestore());
+        assertEquals(om.getStorageClass(), StorageClass.StandardInfrequentAccess.toString());
     }
 
     private class TClass extends AbstractS3ResponseHandler<String> {
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3MetadataResponseHandlerTest.java b/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3MetadataResponseHandlerTest.java
index bfff4c3ccd..51b2fe9a63 100644
--- a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3MetadataResponseHandlerTest.java
+++ b/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/internal/S3MetadataResponseHandlerTest.java
@@ -23,6 +23,7 @@
 import com.amazonaws.services.s3.Headers;
 import com.amazonaws.services.s3.S3ResponseMetadata;
 import com.amazonaws.services.s3.model.ObjectMetadata;
+import com.amazonaws.services.s3.model.StorageClass;
 
 import org.junit.Test;
 
@@ -43,6 +44,7 @@ public void testHandle() throws Exception {
                 .header(Headers.RESTORE,
                         "ongoing-request=\"false\", expiry-date=\"Wed, 07 Nov 2012 00:00:00 GMT\"")
                 .header("UndefinedKey", "UndefinedValue")
+                .header(Headers.STORAGE_CLASS, "STANDARD_IA")
                 .build();
 
         S3MetadataResponseHandler handler = new S3MetadataResponseHandler();
@@ -62,6 +64,7 @@ public void testHandle() throws Exception {
         assertEquals(1136116800000L, om.getHttpExpiresDate().getTime());
         assertEquals("Rule for testfile.txt", om.getExpirationTimeRuleId());
         assertEquals(1352246400000L, om.getRestoreExpirationTime().getTime());
+        assertEquals(om.getStorageClass(), StorageClass.StandardInfrequentAccess.toString());
         assertFalse(om.getOngoingRestore());
     }
 
diff --git a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/ObjectMetadataTest.java b/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/ObjectMetadataTest.java
index 11902efb83..fecc0343dc 100644
--- a/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/ObjectMetadataTest.java
+++ b/aws-android-sdk-s3/src/test/java/com/amazonaws/services/s3/model/ObjectMetadataTest.java
@@ -39,6 +39,7 @@ public void cloneEmpty() {
             assertNull(from.getSSECustomerKeyMd5());
             assertTrue(0 == from.getUserMetadata().size());
             assertNull(from.getVersionId());
+            assertNull(from.getStorageClass());
             // Clone an empty instance
             from = from.clone();
         }
@@ -77,6 +78,7 @@ public void cloneNonEmpty() {
         from.setHeader(Headers.CONTENT_RANGE, "/9999");
         from.setHeader(Headers.S3_VERSION_ID, "versionid");
         from.setHeader(Headers.ETAG, "etag");
+        from.setStorageClass(StorageClass.ReducedRedundancy);
 
         assertEquals("cachecontrol", from.getCacheControl());
         assertEquals("contentDisposition", from.getContentDisposition());
@@ -107,6 +109,7 @@ public void cloneNonEmpty() {
         assertEquals("sseCustKeyMd5", from.getSSECustomerKeyMd5());
         assertTrue(2 == from.getUserMetadata().size());
         assertEquals("versionid", from.getVersionId());
+        assertEquals(from.getStorageClass(), StorageClass.ReducedRedundancy.toString());
 
         // Clone it
         ObjectMetadata to = from.clone();
@@ -136,5 +139,6 @@ public void cloneNonEmpty() {
         assertNotSame(from.getUserMetadata(), to.getUserMetadata());
         
         assertEquals("versionid", to.getVersionId());
+        assertEquals(from.getStorageClass(), to.getStorageClass());
     }
 }
