diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/DownloadTask.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/DownloadTask.java
index 663699e7b9..35434fe76f 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/DownloadTask.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/DownloadTask.java
@@ -67,7 +67,7 @@ public DownloadTask(TransferRecord download, AmazonS3 s3, TransferStatusUpdater
      */
     @Override
     public Boolean call() throws Exception {
-        if (!networkInfo.isNetworkConnected()) {
+        if (!networkInfo.isNetworkAvailableForTransfer(download)) {
             updater.updateState(download.id, TransferState.WAITING_FOR_NETWORK);
             return false;
         }
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java
index 0093a52058..65c2b196f8 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java
@@ -35,7 +35,7 @@
  * TransferRecord is used to store all the information of a transfer and
  * start/stop the a thread for the transfer task.
  */
-class TransferRecord {
+public class TransferRecord {
     private static final String TAG = "TransferRecord";
 
     public int id;
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
index 575faf5543..93a6c033d6 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
@@ -30,7 +30,6 @@
 import android.os.Looper;
 import android.os.Message;
 import android.util.Log;
-
 import com.amazonaws.services.s3.AmazonS3;
 
 import java.io.FileDescriptor;
@@ -130,9 +129,16 @@ public void onCreate() {
     /**
      * A Broadcast receiver to receive network connection change events.
      */
-    static class NetworkInfoReceiver extends BroadcastReceiver {
-        private final Handler handler;
-        private final ConnectivityManager connManager;
+    public static class NetworkInfoReceiver extends BroadcastReceiver {
+        public static NetworkInfoReceiverFactory factory = new NetworkInfoReceiverFactory() {
+            @Override
+            public NetworkInfoReceiver getNetworkReceiver(Context context, Handler updateHandler) {
+                return new NetworkInfoReceiver(context, updateHandler);
+            }
+        };
+
+        protected final Handler handler;
+        protected final ConnectivityManager connManager;
 
         /**
          * Constructs a NetworkInfoReceiver.
@@ -150,19 +156,35 @@ public void onReceive(Context context, Intent intent) {
             if (ConnectivityManager.CONNECTIVITY_ACTION.equals(intent.getAction())) {
                 boolean networkConnected = isNetworkConnected();
                 Log.d(TAG, "Network connected: " + networkConnected);
-                handler.sendEmptyMessage(networkConnected ? MSG_CHECK : MSG_DISCONNECT);
+                if (networkConnected) {
+                    handler.sendMessage(handler.obtainMessage(MSG_CHECK, shouldScan()));
+                } else {
+                    handler.sendEmptyMessage(MSG_DISCONNECT);
+                }
             }
         }
 
+        protected boolean shouldScan() {
+            return false;
+        }
+
         /**
          * Gets the status of network connectivity.
          *
          * @return true if network is connected, false otherwise.
          */
-        boolean isNetworkConnected() {
+        protected boolean isNetworkConnected() {
             NetworkInfo info = connManager.getActiveNetworkInfo();
             return info != null && info.isConnected();
         }
+
+        protected boolean isNetworkAvailableForTransfer(TransferRecord transfer) {
+            return isNetworkConnected();
+        }
+    }
+
+    public static interface NetworkInfoReceiverFactory {
+        public NetworkInfoReceiver getNetworkReceiver(Context context, Handler updateHandler);
     }
 
     @Override
@@ -213,6 +235,10 @@ public UpdateHandler(Looper looper) {
         @Override
         public void handleMessage(Message msg) {
             if (msg.what == MSG_CHECK) {
+                boolean forceShouldScan = (Boolean)msg.obj;
+                if (forceShouldScan) {
+                    shouldScan = true;
+                }
                 // remove messages of the same type
                 updateHandler.removeMessages(MSG_CHECK);
                 checkTransfers();
@@ -242,7 +268,7 @@ void checkTransfers() {
         if (isActive()) {
             lastActiveTime = System.currentTimeMillis();
             // check after one minute
-            updateHandler.sendEmptyMessageDelayed(MSG_CHECK, MINUTE_IN_MILLIS);
+            updateHandler.sendMessageDelayed(updateHandler.obtainMessage(MSG_CHECK, false), MINUTE_IN_MILLIS);
         } else {
             /*
              * Stop the service when it's been idled for more than a minute.
@@ -417,7 +443,8 @@ void pauseAllForNetwork() {
      */
     void setHandlerLooper(Looper looper) {
         updateHandler = new UpdateHandler(looper);
-        networkInfoReceiver = new NetworkInfoReceiver(getApplicationContext(), updateHandler);
+        networkInfoReceiver = NetworkInfoReceiver.factory.getNetworkReceiver(getApplicationContext(), updateHandler);
+        Log.i(TAG, "Using NetworkInfoReceiver of type: " + this.networkInfoReceiver.getClass().getSimpleName());
     }
 
     @Override
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java
index 37e8a81bc7..c83fd26f96 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java
@@ -65,7 +65,7 @@ public UploadTask(TransferRecord uploadInfo, AmazonS3 s3, TransferDBUtil dbUtil,
      */
     @Override
     public Boolean call() throws Exception {
-        if (!networkInfo.isNetworkConnected()) {
+        if (!networkInfo.isNetworkAvailableForTransfer(upload)) {
             updater.updateState(upload.id, TransferState.WAITING_FOR_NETWORK);
             return false;
         }
@@ -166,7 +166,7 @@ private Boolean uploadMultipartAndWaitForCompletion() throws ExecutionException
                     Log.d(TAG, "Transfer " + upload.id + " is interrupted by user");
                     return false;
                 } else if (e.getCause() != null && e.getCause() instanceof IOException
-                        && !networkInfo.isNetworkConnected()) {
+                        && !networkInfo.isNetworkAvailableForTransfer(upload)) {
                     Log.d(TAG, "Transfer " + upload.id + " waits for network");
                     updater.updateState(upload.id, TransferState.WAITING_FOR_NETWORK);
                 }
@@ -213,7 +213,7 @@ private Boolean uploadSinglePartAndWaitForCompletion() {
                 Log.d(TAG, "Transfer " + upload.id + " is interrupted by user");
                 return false;
             } else if (e.getCause() != null && e.getCause() instanceof IOException
-                    && !networkInfo.isNetworkConnected()) {
+                    && !networkInfo.isNetworkAvailableForTransfer(upload)) {
                 Log.d(TAG, "Transfer " + upload.id + " waits for network");
                 updater.updateState(upload.id, TransferState.WAITING_FOR_NETWORK);
             }
