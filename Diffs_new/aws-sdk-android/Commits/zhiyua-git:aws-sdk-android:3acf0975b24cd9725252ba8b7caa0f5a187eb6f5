diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/audio/AudioFramesSource.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/audio/AudioFramesSource.java
index 960c84cd0a..ec3ca3ffef 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/audio/AudioFramesSource.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/audio/AudioFramesSource.java
@@ -17,8 +17,6 @@
 
 package com.amazonaws.mobileconnectors.kinesisvideo.audio;
 
-import static com.amazonaws.mobileconnectors.kinesisvideo.encoding.EncoderWrapper.FrameAvailableListener;
-
 import java.io.IOException;
 import java.nio.ByteBuffer;
 
@@ -32,7 +30,6 @@
 import com.amazonaws.kinesisvideo.internal.mediasource.OnStreamDataAvailable;
 import com.amazonaws.mobileconnectors.kinesisvideo.camera.EncodingCancellationToken;
 import com.amazonaws.mobileconnectors.kinesisvideo.encoding.EncoderWrapper;
-import com.amazonaws.mobileconnectors.kinesisvideo.encoding.EncoderWrapper.CodecPrivateDataAvailableListener;
 
 /**
  * Utility class for audio encoder
@@ -53,42 +50,48 @@ public AudioFramesSource(final AudioMediaSourceConfiguration mediaSourceConfigur
         mEncodingCancellationToken = encodingCancellationToken;
     }
 
-    public void startEncoding(final Context context) {
+    public void startEncoding(final Context context, final Object startMutex) {
         AudioFramesSourceRunnableWrapper.startEncoding(
                 this,
-                context);
+                context,
+                startMutex);
     }
 
     private static class AudioFramesSourceRunnableWrapper implements Runnable {
         private final AudioFramesSource mFramesSource;
         private final Context mContext;
+        private final Object mStartMutex;
 
         private AudioFramesSourceRunnableWrapper(final AudioFramesSource framesSource,
-                                                 final Context context) {
+                                                 final Context context,
+                                                 final Object startMutex) {
             mContext = context;
             mFramesSource = framesSource;
+            mStartMutex = startMutex;
         }
 
         @Override
         public void run() {
             try {
-                mFramesSource.startCapturing(mContext);
+                mFramesSource.startCapturing(mContext, mStartMutex);
             } catch (Throwable th) {
                 th.printStackTrace();
             }
         }
 
         public static void startEncoding(final AudioFramesSource framesSource,
-                                         final Context context) {
+                                         final Context context,
+                                         final Object startMutex) {
             AudioFramesSourceRunnableWrapper wrapper = new AudioFramesSourceRunnableWrapper(
                     framesSource,
-                    context);
+                    context,
+                    startMutex);
             Thread th = new Thread(wrapper, "AudioFramesSource");
             th.start();
         }
     }
 
-    private void startCapturing(final Context context) throws IOException {
+    private void startCapturing(final Context context, final Object startMutex) throws IOException {
         try {
             mEncoderWrapper = new EncoderWrapper(mMediaSourceConfiguration);
             mEncoderWrapper.setMkvDataListener(mListener);
@@ -117,6 +120,15 @@ private void startCapturing(final Context context) throws IOException {
             // Start recording
             audioRecord.startRecording();
 
+            synchronized (startMutex) {
+                // Wait until first video frame being put
+                try {
+                    startMutex.wait();
+                } catch (InterruptedException e) {
+                    Log.e(TAG, "Interruption happend while waiting for video frame", e);
+                }
+            }
+
             int readBytes;
             try {
                 while (!mIsReleased) {
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/camera/CameraAVFramesSource.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/camera/CameraAVFramesSource.java
index 5b6aeb8192..3c737bce62 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/camera/CameraAVFramesSource.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/camera/CameraAVFramesSource.java
@@ -80,7 +80,8 @@ public void onImageAvailable(final ImageReader imageReader) {
 
     public void startEncoding(final Context context,
                               final List<Surface> previewSurfaces,
-                              final String cameraId) {
+                              final String cameraId,
+                              final Object startMutex) {
 
         final List<Surface> cameraOutputSurfaces = new ArrayList<Surface>();
         cameraOutputSurfaces.addAll(previewSurfaces);
@@ -90,7 +91,8 @@ public void startEncoding(final Context context,
                 this,
                 context,
                 cameraOutputSurfaces,
-                cameraId);
+                cameraId,
+                startMutex);
     }      
 
     private static class CameraFramesSourceRunnableWrapper implements Runnable {
@@ -98,16 +100,19 @@ public void startEncoding(final Context context,
         private final CameraAVFramesSource mCameraFramesSource;
         private final Context mContext;
 
+        private final Object mStartMutex;
         private final String mCameraId;
 
         private CameraFramesSourceRunnableWrapper(final CameraAVFramesSource cameraFramesSource,
                                                   final Context context,
                                                   final List<Surface> cameraOutputSurfaces,
-                                                  final String cameraId) {
+                                                  final String cameraId,
+                                                  final Object startMutex) {
             mCameraFramesSource = cameraFramesSource;
             mContext = context;
             mCameraOutputSurfaces = cameraOutputSurfaces;
             mCameraId = cameraId;
+            mStartMutex = startMutex;
         }
 
         @Override
@@ -116,7 +121,8 @@ public void run() {
                 mCameraFramesSource.startCapturing(
                         mContext,
                         mCameraOutputSurfaces,
-                        mCameraId);
+                        mCameraId,
+                        mStartMutex);
             } catch (Throwable th) {
                 th.printStackTrace();
             }
@@ -125,12 +131,14 @@ public void run() {
         public static void startEncoding(final CameraAVFramesSource test,
                                          final Context context,
                                          final List<Surface> cameraOutputSurfaces,
-                                         final String cameraId) {
+                                         final String cameraId,
+                                         final Object startMutex) {
             CameraFramesSourceRunnableWrapper wrapper = new CameraFramesSourceRunnableWrapper(
                     test,
                     context,
                     cameraOutputSurfaces,
-                    cameraId);
+                    cameraId,
+                    startMutex);
             Thread th = new Thread(wrapper, "CameraFramesSource");
             th.start();
         }
@@ -138,9 +146,10 @@ public static void startEncoding(final CameraAVFramesSource test,
 
     private void startCapturing(final Context context,
                                 final List<Surface> cameraOutputSurfaces,
-                                final String cameraId) throws IOException {
+                                final String cameraId,
+                                final Object startMutex) throws IOException {
         try {
-            mEncoderWrapper = new EncoderWrapper(mMediaSourceConfiguration);
+            mEncoderWrapper = new EncoderWrapper(mMediaSourceConfiguration, startMutex);
             mEncoderWrapper.setMkvDataListener(mListener);
 
             prepareCameraAndPreview(
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/EncoderWrapper.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/EncoderWrapper.java
index ec64eadf19..07d4b73f1f 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/EncoderWrapper.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/encoding/EncoderWrapper.java
@@ -55,6 +55,7 @@
     private int mFrameIndex;
     private long mFragmentStart = 0;
     private int mTrackId = 0;
+    private Object mStartMutex = null;
 
     public interface FrameAvailableListener {
 
@@ -69,6 +70,12 @@ public EncoderWrapper(final MediaSourceConfiguration mediaSourceConfiguration) {
         initEncoder();
     }
 
+    public EncoderWrapper(final MediaSourceConfiguration mediaSourceConfiguration, final Object startMutex) {
+        mMediaSourceConfiguration = mediaSourceConfiguration;
+        initEncoder();
+        mStartMutex = startMutex;
+    }
+
     private void initEncoder() {
         mBufferInfo = new MediaCodec.BufferInfo();
         if (mMediaSourceConfiguration instanceof CameraMediaSourceConfiguration) {
@@ -244,6 +251,12 @@ private void sendEncodedFrameToProducerSDK(final ByteBuffer encodedData) {
 
         if (mFragmentStart == 0) {
             mFragmentStart = currentTime;
+            if (mStartMutex != null) {
+                synchronized (mStartMutex) {
+                    // Notify others this source started
+                    mStartMutex.notifyAll();
+                }
+            }
         }
 
         final ByteBuffer frameData = encodedData;
diff --git a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/AndroidAudioVideoMediaSource.java b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/AndroidAudioVideoMediaSource.java
index b0a5a2426b..0053c1b8e0 100644
--- a/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/AndroidAudioVideoMediaSource.java
+++ b/aws-android-sdk-kinesisvideo/src/main/java/com/amazonaws/mobileconnectors/kinesisvideo/mediasource/android/AndroidAudioVideoMediaSource.java
@@ -71,6 +71,7 @@
     private AndroidAudioVideoMediaSourceConfiguration mMediaSourceConfiguration;
     private MediaSourceSink mMediaSourceSink;
     private OnStreamDataAvailable mListener;
+    private final Object mStartMutex = new Object();
 
     public interface OpenCameraCallback {
         void onOpened();
@@ -224,13 +225,14 @@ private void startEncoding() {
         mCameraAVFramesSource.startEncoding(
                 mContext,
                 mPreivewSurfaces,
-                mMediaSourceConfiguration.getCameraMediaSourceConfiguration().getCameraId());
+                mMediaSourceConfiguration.getCameraMediaSourceConfiguration().getCameraId(),
+                mStartMutex);
     }
 
     private void startAudioEncoding() {
         Log.i(TAG, "audio encoding starting");
 
-        mAudioFramesSource.startEncoding(mContext);
+        mAudioFramesSource.startEncoding(mContext, mStartMutex);
     }
 
     private void stopEncoding() {
