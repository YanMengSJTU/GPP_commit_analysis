diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/AmazonCognitoIdentityProvider.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/AmazonCognitoIdentityProvider.java
index 7f49dc51a0..2085a237c8 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/AmazonCognitoIdentityProvider.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/AmazonCognitoIdentityProvider.java
@@ -129,7 +129,7 @@ AddCustomAttributesResult addCustomAttributes(
      * Adds the specified user to the specified group.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminAddUserToGroupRequest
@@ -156,7 +156,7 @@ void adminAddUserToGroup(AdminAddUserToGroupRequest adminAddUserToGroupRequest)
      * Works on any user.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminConfirmSignUpRequest <p>
@@ -253,7 +253,7 @@ AdminCreateUserResult adminCreateUser(AdminCreateUserRequest adminCreateUserRequ
      * Deletes a user as an administrator. Works on any user.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminDeleteUserRequest <p>
@@ -282,7 +282,7 @@ void adminDeleteUser(AdminDeleteUserRequest adminDeleteUserRequest)
      * any user.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminDeleteUserAttributesRequest <p>
@@ -381,10 +381,10 @@ AdminDisableProviderForUserResult adminDisableProviderForUser(
 
     /**
      * <p>
-     * Disables the specified user as an administrator. Works on any user.
+     * Disables the specified user.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminDisableUserRequest <p>
@@ -415,7 +415,7 @@ AdminDisableUserResult adminDisableUser(AdminDisableUserRequest adminDisableUser
      * Enables the specified user as an administrator. Works on any user.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminEnableUserRequest <p>
@@ -446,7 +446,7 @@ AdminEnableUserResult adminEnableUser(AdminEnableUserRequest adminEnableUserRequ
      * Forgets the device, as an administrator.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminForgetDeviceRequest <p>
@@ -475,7 +475,7 @@ void adminForgetDevice(AdminForgetDeviceRequest adminForgetDeviceRequest)
      * Gets the device, as an administrator.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminGetDeviceRequest <p>
@@ -506,7 +506,7 @@ AdminGetDeviceResult adminGetDevice(AdminGetDeviceRequest adminGetDeviceRequest)
      * Works on any user.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminGetUserRequest <p>
@@ -537,7 +537,7 @@ AdminGetUserResult adminGetUser(AdminGetUserRequest adminGetUserRequest)
      * Initiates the authentication flow, as an administrator.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminInitiateAuthRequest <p>
@@ -631,7 +631,7 @@ AdminLinkProviderForUserResult adminLinkProviderForUser(
      * Lists devices, as an administrator.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminListDevicesRequest <p>
@@ -661,7 +661,7 @@ AdminListDevicesResult adminListDevices(AdminListDevicesRequest adminListDevices
      * Lists the groups that the user belongs to.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminListGroupsForUserRequest
@@ -720,7 +720,7 @@ AdminListUserAuthEventsResult adminListUserAuthEvents(
      * Removes the specified user from the specified group.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminRemoveUserFromGroupRequest
@@ -758,7 +758,7 @@ void adminRemoveUserFromGroup(AdminRemoveUserFromGroupRequest adminRemoveUserFro
      * user with the code to change their password.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminResetUserPasswordRequest <p>
@@ -798,7 +798,7 @@ AdminResetUserPasswordResult adminResetUserPassword(
      * Responds to an authentication challenge, as an administrator.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminRespondToAuthChallengeRequest <p>
@@ -842,7 +842,12 @@ AdminRespondToAuthChallengeResult adminRespondToAuthChallenge(
 
     /**
      * <p>
-     * Sets the user's multi-factor authentication (MFA) preference.
+     * Sets the user's multi-factor authentication (MFA) preference, including
+     * which MFA options are enabled and if any are preferred. Only one factor
+     * can be set as preferred. The preferred MFA factor will be used to
+     * authenticate a user if multiple factors are enabled. If multiple options
+     * are enabled and no preference is set, a challenge to choose an MFA option
+     * will be returned during sign in.
      * </p>
      * 
      * @param adminSetUserMFAPreferenceRequest
@@ -869,6 +874,23 @@ AdminSetUserMFAPreferenceResult adminSetUserMFAPreference(
             throws AmazonClientException, AmazonServiceException;
 
     /**
+     * <p>
+     * Sets the specified user's password in a user pool as an administrator.
+     * Works on any user.
+     * </p>
+     * <p>
+     * The password can be temporary or permanent. If it is temporary, the user
+     * status will be placed into the <code>FORCE_CHANGE_PASSWORD</code> state.
+     * When the user next tries to sign in, the InitiateAuth/AdminInitiateAuth
+     * response will contain the <code>NEW_PASSWORD_REQUIRED</code> challenge.
+     * If the user does not sign in before it expires, the user will not be able
+     * to sign in and their password will need to be reset by an administrator.
+     * </p>
+     * <p>
+     * Once the user has set a new password, or the password is permanent, the
+     * user status will be set to <code>Confirmed</code>.
+     * </p>
+     * 
      * @param adminSetUserPasswordRequest
      * @return adminSetUserPasswordResult The response from the
      *         AdminSetUserPassword service method, as returned by Amazon
@@ -894,15 +916,15 @@ AdminSetUserPasswordResult adminSetUserPassword(
 
     /**
      * <p>
-     * Sets all the user settings for a specified user name. Works on any user.
-     * </p>
-     * <p>
-     * Requires developer credentials.
+     * <i>This action is no longer supported.</i> You can use it to configure
+     * only SMS MFA. You can't use it to configure TOTP software token MFA. To
+     * configure either type of MFA, use the <a>AdminSetUserMFAPreference</a>
+     * action instead.
      * </p>
      * 
      * @param adminSetUserSettingsRequest <p>
-     *            Represents the request to set user settings as an
-     *            administrator.
+     *            You can use this parameter to set an MFA configuration that
+     *            uses the SMS delivery medium.
      *            </p>
      * @return adminSetUserSettingsResult The response from the
      *         AdminSetUserSettings service method, as returned by Amazon
@@ -959,7 +981,7 @@ AdminUpdateAuthEventFeedbackResult adminUpdateAuthEventFeedback(
      * Updates the device status as an administrator.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminUpdateDeviceStatusRequest <p>
@@ -1001,7 +1023,7 @@ AdminUpdateDeviceStatusResult adminUpdateDeviceStatus(
      * mark phone and email as verified.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminUpdateUserAttributesRequest <p>
@@ -1041,7 +1063,7 @@ AdminUpdateUserAttributesResult adminUpdateUserAttributes(
      * Signs out users from all devices, as an administrator.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminUserGlobalSignOutRequest <p>
@@ -1240,7 +1262,7 @@ ConfirmSignUpResult confirmSignUp(ConfirmSignUpRequest confirmSignUpRequest)
      * Creates a new group in the specified user pool.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param createGroupRequest
@@ -1442,7 +1464,7 @@ CreateUserPoolDomainResult createUserPoolDomain(
      * Deletes a group. Currently only groups with no members can be deleted.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param deleteGroupRequest
@@ -1963,7 +1985,7 @@ GetDeviceResult getDevice(GetDeviceRequest getDeviceRequest) throws AmazonClient
      * Gets a group.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param getGroupRequest
@@ -2023,6 +2045,7 @@ GetIdentityProviderByIdentifierResult getIdentityProviderByIdentifier(
      *         GetSigningCertificate service method, as returned by Amazon
      *         Cognito Your User Pool.
      * @throws InternalErrorException
+     * @throws InvalidParameterException
      * @throws ResourceNotFoundException
      * @throws AmazonClientException If any internal errors are encountered
      *             inside the client while attempting to make the request or
@@ -2209,6 +2232,8 @@ GlobalSignOutResult globalSignOut(GlobalSignOutRequest globalSignOutRequest)
      * @throws UserNotFoundException
      * @throws UserNotConfirmedException
      * @throws InternalErrorException
+     * @throws InvalidSmsRoleAccessPolicyException
+     * @throws InvalidSmsRoleTrustRelationshipException
      * @throws AmazonClientException If any internal errors are encountered
      *             inside the client while attempting to make the request or
      *             handle the response. For example if a network connection is
@@ -2255,7 +2280,7 @@ ListDevicesResult listDevices(ListDevicesRequest listDevicesRequest)
      * Lists the groups associated with a user pool.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param listGroupsRequest
@@ -2473,7 +2498,7 @@ ListUsersResult listUsers(ListUsersRequest listUsersRequest) throws AmazonClient
      * Lists the users in the specified group.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param listUsersInGroupRequest
@@ -2657,7 +2682,12 @@ SetUICustomizationResult setUICustomization(SetUICustomizationRequest setUICusto
 
     /**
      * <p>
-     * Set the user's multi-factor authentication (MFA) method preference.
+     * Set the user's multi-factor authentication (MFA) method preference,
+     * including which MFA factors are enabled and if any are preferred. Only
+     * one factor can be set as preferred. The preferred MFA factor will be used
+     * to authenticate a user if multiple factors are enabled. If multiple
+     * options are enabled and no preference is set, a challenge to choose an
+     * MFA option will be returned during sign in.
      * </p>
      * 
      * @param setUserMFAPreferenceRequest
@@ -2685,7 +2715,7 @@ SetUserMFAPreferenceResult setUserMFAPreference(
 
     /**
      * <p>
-     * Set the user pool MFA configuration.
+     * Set the user pool multi-factor authentication (MFA) configuration.
      * </p>
      * 
      * @param setUserPoolMfaConfigRequest
@@ -2713,9 +2743,10 @@ SetUserPoolMfaConfigResult setUserPoolMfaConfig(
 
     /**
      * <p>
-     * Sets the user settings like multi-factor authentication (MFA). If MFA is
-     * to be removed for a particular attribute pass the attribute with code
-     * delivery as null. If null list is passed, all MFA options are removed.
+     * <i>This action is no longer supported.</i> You can use it to configure
+     * only SMS MFA. You can't use it to configure TOTP software token MFA. To
+     * configure either type of MFA, use the <a>SetUserMFAPreference</a> action
+     * instead.
      * </p>
      * 
      * @param setUserSettingsRequest <p>
@@ -2967,7 +2998,7 @@ UpdateDeviceStatusResult updateDeviceStatus(UpdateDeviceStatusRequest updateDevi
      * Updates the specified group with the specified attributes.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param updateGroupRequest
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/AmazonCognitoIdentityProviderClient.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/AmazonCognitoIdentityProviderClient.java
index 5f5582716b..de0c91b763 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/AmazonCognitoIdentityProviderClient.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/AmazonCognitoIdentityProviderClient.java
@@ -460,7 +460,7 @@ public AddCustomAttributesResult addCustomAttributes(
      * Adds the specified user to the specified group.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminAddUserToGroupRequest
@@ -509,7 +509,7 @@ public void adminAddUserToGroup(AdminAddUserToGroupRequest adminAddUserToGroupRe
      * Works on any user.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminConfirmSignUpRequest <p>
@@ -660,7 +660,7 @@ public AdminCreateUserResult adminCreateUser(AdminCreateUserRequest adminCreateU
      * Deletes a user as an administrator. Works on any user.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminDeleteUserRequest <p>
@@ -710,7 +710,7 @@ public void adminDeleteUser(AdminDeleteUserRequest adminDeleteUserRequest)
      * any user.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminDeleteUserAttributesRequest <p>
@@ -863,10 +863,10 @@ public AdminDisableProviderForUserResult adminDisableProviderForUser(
 
     /**
      * <p>
-     * Disables the specified user as an administrator. Works on any user.
+     * Disables the specified user.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminDisableUserRequest <p>
@@ -923,7 +923,7 @@ public AdminDisableUserResult adminDisableUser(AdminDisableUserRequest adminDisa
      * Enables the specified user as an administrator. Works on any user.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminEnableUserRequest <p>
@@ -980,7 +980,7 @@ public AdminEnableUserResult adminEnableUser(AdminEnableUserRequest adminEnableU
      * Forgets the device, as an administrator.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminForgetDeviceRequest <p>
@@ -1031,7 +1031,7 @@ public void adminForgetDevice(AdminForgetDeviceRequest adminForgetDeviceRequest)
      * Gets the device, as an administrator.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminGetDeviceRequest <p>
@@ -1088,7 +1088,7 @@ public AdminGetDeviceResult adminGetDevice(AdminGetDeviceRequest adminGetDeviceR
      * Works on any user.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminGetUserRequest <p>
@@ -1145,7 +1145,7 @@ public AdminGetUserResult adminGetUser(AdminGetUserRequest adminGetUserRequest)
      * Initiates the authentication flow, as an administrator.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminInitiateAuthRequest <p>
@@ -1294,7 +1294,7 @@ public AdminLinkProviderForUserResult adminLinkProviderForUser(
      * Lists devices, as an administrator.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminListDevicesRequest <p>
@@ -1350,7 +1350,7 @@ public AdminListDevicesResult adminListDevices(AdminListDevicesRequest adminList
      * Lists the groups that the user belongs to.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminListGroupsForUserRequest
@@ -1463,7 +1463,7 @@ public AdminListUserAuthEventsResult adminListUserAuthEvents(
      * Removes the specified user from the specified group.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminRemoveUserFromGroupRequest
@@ -1524,7 +1524,7 @@ public void adminRemoveUserFromGroup(
      * user with the code to change their password.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminResetUserPasswordRequest <p>
@@ -1591,7 +1591,7 @@ public AdminResetUserPasswordResult adminResetUserPassword(
      * Responds to an authentication challenge, as an administrator.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminRespondToAuthChallengeRequest <p>
@@ -1662,7 +1662,12 @@ public AdminRespondToAuthChallengeResult adminRespondToAuthChallenge(
 
     /**
      * <p>
-     * Sets the user's multi-factor authentication (MFA) preference.
+     * Sets the user's multi-factor authentication (MFA) preference, including
+     * which MFA options are enabled and if any are preferred. Only one factor
+     * can be set as preferred. The preferred MFA factor will be used to
+     * authenticate a user if multiple factors are enabled. If multiple options
+     * are enabled and no preference is set, a challenge to choose an MFA option
+     * will be returned during sign in.
      * </p>
      * 
      * @param adminSetUserMFAPreferenceRequest
@@ -1716,6 +1721,23 @@ public AdminSetUserMFAPreferenceResult adminSetUserMFAPreference(
     }
 
     /**
+     * <p>
+     * Sets the specified user's password in a user pool as an administrator.
+     * Works on any user.
+     * </p>
+     * <p>
+     * The password can be temporary or permanent. If it is temporary, the user
+     * status will be placed into the <code>FORCE_CHANGE_PASSWORD</code> state.
+     * When the user next tries to sign in, the InitiateAuth/AdminInitiateAuth
+     * response will contain the <code>NEW_PASSWORD_REQUIRED</code> challenge.
+     * If the user does not sign in before it expires, the user will not be able
+     * to sign in and their password will need to be reset by an administrator.
+     * </p>
+     * <p>
+     * Once the user has set a new password, or the password is permanent, the
+     * user status will be set to <code>Confirmed</code>.
+     * </p>
+     * 
      * @param adminSetUserPasswordRequest
      * @return adminSetUserPasswordResult The response from the
      *         AdminSetUserPassword service method, as returned by Amazon
@@ -1768,15 +1790,15 @@ public AdminSetUserPasswordResult adminSetUserPassword(
 
     /**
      * <p>
-     * Sets all the user settings for a specified user name. Works on any user.
-     * </p>
-     * <p>
-     * Requires developer credentials.
+     * <i>This action is no longer supported.</i> You can use it to configure
+     * only SMS MFA. You can't use it to configure TOTP software token MFA. To
+     * configure either type of MFA, use the <a>AdminSetUserMFAPreference</a>
+     * action instead.
      * </p>
      * 
      * @param adminSetUserSettingsRequest <p>
-     *            Represents the request to set user settings as an
-     *            administrator.
+     *            You can use this parameter to set an MFA configuration that
+     *            uses the SMS delivery medium.
      *            </p>
      * @return adminSetUserSettingsResult The response from the
      *         AdminSetUserSettings service method, as returned by Amazon
@@ -1887,7 +1909,7 @@ public AdminUpdateAuthEventFeedbackResult adminUpdateAuthEventFeedback(
      * Updates the device status as an administrator.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminUpdateDeviceStatusRequest <p>
@@ -1956,7 +1978,7 @@ public AdminUpdateDeviceStatusResult adminUpdateDeviceStatus(
      * mark phone and email as verified.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminUpdateUserAttributesRequest <p>
@@ -2023,7 +2045,7 @@ public AdminUpdateUserAttributesResult adminUpdateUserAttributes(
      * Signs out users from all devices, as an administrator.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param adminUserGlobalSignOutRequest <p>
@@ -2381,7 +2403,7 @@ public ConfirmSignUpResult confirmSignUp(ConfirmSignUpRequest confirmSignUpReque
      * Creates a new group in the specified user pool.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param createGroupRequest
@@ -2770,7 +2792,7 @@ public CreateUserPoolDomainResult createUserPoolDomain(
      * Deletes a group. Currently only groups with no members can be deleted.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param deleteGroupRequest
@@ -3761,7 +3783,7 @@ public GetDeviceResult getDevice(GetDeviceRequest getDeviceRequest)
      * Gets a group.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param getGroupRequest
@@ -3874,6 +3896,7 @@ public GetIdentityProviderByIdentifierResult getIdentityProviderByIdentifier(
      *         GetSigningCertificate service method, as returned by Amazon
      *         Cognito Your User Pool.
      * @throws InternalErrorException
+     * @throws InvalidParameterException
      * @throws ResourceNotFoundException
      * @throws AmazonClientException If any internal errors are encountered
      *             inside the client while attempting to make the request or
@@ -4221,6 +4244,8 @@ public GlobalSignOutResult globalSignOut(GlobalSignOutRequest globalSignOutReque
      * @throws UserNotFoundException
      * @throws UserNotConfirmedException
      * @throws InternalErrorException
+     * @throws InvalidSmsRoleAccessPolicyException
+     * @throws InvalidSmsRoleTrustRelationshipException
      * @throws AmazonClientException If any internal errors are encountered
      *             inside the client while attempting to make the request or
      *             handle the response. For example if a network connection is
@@ -4319,7 +4344,7 @@ public ListDevicesResult listDevices(ListDevicesRequest listDevicesRequest)
      * Lists the groups associated with a user pool.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param listGroupsRequest
@@ -4751,7 +4776,7 @@ public ListUsersResult listUsers(ListUsersRequest listUsersRequest)
      * Lists the users in the specified group.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param listUsersInGroupRequest
@@ -5070,7 +5095,12 @@ public SetUICustomizationResult setUICustomization(
 
     /**
      * <p>
-     * Set the user's multi-factor authentication (MFA) method preference.
+     * Set the user's multi-factor authentication (MFA) method preference,
+     * including which MFA factors are enabled and if any are preferred. Only
+     * one factor can be set as preferred. The preferred MFA factor will be used
+     * to authenticate a user if multiple factors are enabled. If multiple
+     * options are enabled and no preference is set, a challenge to choose an
+     * MFA option will be returned during sign in.
      * </p>
      * 
      * @param setUserMFAPreferenceRequest
@@ -5125,7 +5155,7 @@ public SetUserMFAPreferenceResult setUserMFAPreference(
 
     /**
      * <p>
-     * Set the user pool MFA configuration.
+     * Set the user pool multi-factor authentication (MFA) configuration.
      * </p>
      * 
      * @param setUserPoolMfaConfigRequest
@@ -5180,9 +5210,10 @@ public SetUserPoolMfaConfigResult setUserPoolMfaConfig(
 
     /**
      * <p>
-     * Sets the user settings like multi-factor authentication (MFA). If MFA is
-     * to be removed for a particular attribute pass the attribute with code
-     * delivery as null. If null list is passed, all MFA options are removed.
+     * <i>This action is no longer supported.</i> You can use it to configure
+     * only SMS MFA. You can't use it to configure TOTP software token MFA. To
+     * configure either type of MFA, use the <a>SetUserMFAPreference</a> action
+     * instead.
      * </p>
      * 
      * @param setUserSettingsRequest <p>
@@ -5649,7 +5680,7 @@ public UpdateDeviceStatusResult updateDeviceStatus(
      * Updates the specified group with the specified attributes.
      * </p>
      * <p>
-     * Requires developer credentials.
+     * Calling this action requires developer credentials.
      * </p>
      * 
      * @param updateGroupRequest
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminAddUserToGroupRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminAddUserToGroupRequest.java
index a9bdf230e1..d14ea4ff75 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminAddUserToGroupRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminAddUserToGroupRequest.java
@@ -24,7 +24,7 @@
  * Adds the specified user to the specified group.
  * </p>
  * <p>
- * Requires developer credentials.
+ * Calling this action requires developer credentials.
  * </p>
  */
 public class AdminAddUserToGroupRequest extends AmazonWebServiceRequest implements Serializable {
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminConfirmSignUpRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminConfirmSignUpRequest.java
index decc01650e..8604baedb4 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminConfirmSignUpRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminConfirmSignUpRequest.java
@@ -25,7 +25,7 @@
  * Works on any user.
  * </p>
  * <p>
- * Requires developer credentials.
+ * Calling this action requires developer credentials.
  * </p>
  */
 public class AdminConfirmSignUpRequest extends AmazonWebServiceRequest implements Serializable {
@@ -51,6 +51,58 @@
      */
     private String username;
 
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * If your user pool configuration includes triggers, the AdminConfirmSignUp
+     * API action invokes the AWS Lambda function that is specified for the
+     * <i>post confirmation</i> trigger. When Amazon Cognito invokes this
+     * function, it passes a JSON payload, which the function receives as input.
+     * In this payload, the <code>clientMetadata</code> attribute provides the
+     * data that you assigned to the ClientMetadata parameter in your
+     * AdminConfirmSignUp request. In your function code in AWS Lambda, you can
+     * process the ClientMetadata value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     */
+    private java.util.Map<String, String> clientMetadata;
+
     /**
      * <p>
      * The user pool ID for which you want to confirm user registration.
@@ -167,6 +219,409 @@ public AdminConfirmSignUpRequest withUsername(String username) {
         return this;
     }
 
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * If your user pool configuration includes triggers, the AdminConfirmSignUp
+     * API action invokes the AWS Lambda function that is specified for the
+     * <i>post confirmation</i> trigger. When Amazon Cognito invokes this
+     * function, it passes a JSON payload, which the function receives as input.
+     * In this payload, the <code>clientMetadata</code> attribute provides the
+     * data that you assigned to the ClientMetadata parameter in your
+     * AdminConfirmSignUp request. In your function code in AWS Lambda, you can
+     * process the ClientMetadata value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     *
+     * @return <p>
+     *         A map of custom key-value pairs that you can provide as input for
+     *         any custom workflows that this action triggers.
+     *         </p>
+     *         <p>
+     *         If your user pool configuration includes triggers, the
+     *         AdminConfirmSignUp API action invokes the AWS Lambda function
+     *         that is specified for the <i>post confirmation</i> trigger. When
+     *         Amazon Cognito invokes this function, it passes a JSON payload,
+     *         which the function receives as input. In this payload, the
+     *         <code>clientMetadata</code> attribute provides the data that you
+     *         assigned to the ClientMetadata parameter in your
+     *         AdminConfirmSignUp request. In your function code in AWS Lambda,
+     *         you can process the ClientMetadata value to enhance your workflow
+     *         for your specific needs.
+     *         </p>
+     *         <p>
+     *         For more information, see <a href=
+     *         "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *         >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     *         <i>Amazon Cognito Developer Guide</i>.
+     *         </p>
+     *         <note>
+     *         <p>
+     *         Take the following limitations into consideration when you use
+     *         the ClientMetadata parameter:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not store the ClientMetadata value. This data
+     *         is available only to AWS Lambda triggers that are assigned to a
+     *         user pool to support custom workflows. If your user pool
+     *         configuration does not include triggers, the ClientMetadata
+     *         parameter serves no purpose.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not validate the ClientMetadata value.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not encrypt the the ClientMetadata value, so
+     *         don't use it to provide sensitive information.
+     *         </p>
+     *         </li>
+     *         </ul>
+     *         </note>
+     */
+    public java.util.Map<String, String> getClientMetadata() {
+        return clientMetadata;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * If your user pool configuration includes triggers, the AdminConfirmSignUp
+     * API action invokes the AWS Lambda function that is specified for the
+     * <i>post confirmation</i> trigger. When Amazon Cognito invokes this
+     * function, it passes a JSON payload, which the function receives as input.
+     * In this payload, the <code>clientMetadata</code> attribute provides the
+     * data that you assigned to the ClientMetadata parameter in your
+     * AdminConfirmSignUp request. In your function code in AWS Lambda, you can
+     * process the ClientMetadata value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     *
+     * @param clientMetadata <p>
+     *            A map of custom key-value pairs that you can provide as input
+     *            for any custom workflows that this action triggers.
+     *            </p>
+     *            <p>
+     *            If your user pool configuration includes triggers, the
+     *            AdminConfirmSignUp API action invokes the AWS Lambda function
+     *            that is specified for the <i>post confirmation</i> trigger.
+     *            When Amazon Cognito invokes this function, it passes a JSON
+     *            payload, which the function receives as input. In this
+     *            payload, the <code>clientMetadata</code> attribute provides
+     *            the data that you assigned to the ClientMetadata parameter in
+     *            your AdminConfirmSignUp request. In your function code in AWS
+     *            Lambda, you can process the ClientMetadata value to enhance
+     *            your workflow for your specific needs.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
+     */
+    public void setClientMetadata(java.util.Map<String, String> clientMetadata) {
+        this.clientMetadata = clientMetadata;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * If your user pool configuration includes triggers, the AdminConfirmSignUp
+     * API action invokes the AWS Lambda function that is specified for the
+     * <i>post confirmation</i> trigger. When Amazon Cognito invokes this
+     * function, it passes a JSON payload, which the function receives as input.
+     * In this payload, the <code>clientMetadata</code> attribute provides the
+     * data that you assigned to the ClientMetadata parameter in your
+     * AdminConfirmSignUp request. In your function code in AWS Lambda, you can
+     * process the ClientMetadata value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param clientMetadata <p>
+     *            A map of custom key-value pairs that you can provide as input
+     *            for any custom workflows that this action triggers.
+     *            </p>
+     *            <p>
+     *            If your user pool configuration includes triggers, the
+     *            AdminConfirmSignUp API action invokes the AWS Lambda function
+     *            that is specified for the <i>post confirmation</i> trigger.
+     *            When Amazon Cognito invokes this function, it passes a JSON
+     *            payload, which the function receives as input. In this
+     *            payload, the <code>clientMetadata</code> attribute provides
+     *            the data that you assigned to the ClientMetadata parameter in
+     *            your AdminConfirmSignUp request. In your function code in AWS
+     *            Lambda, you can process the ClientMetadata value to enhance
+     *            your workflow for your specific needs.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public AdminConfirmSignUpRequest withClientMetadata(java.util.Map<String, String> clientMetadata) {
+        this.clientMetadata = clientMetadata;
+        return this;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * If your user pool configuration includes triggers, the AdminConfirmSignUp
+     * API action invokes the AWS Lambda function that is specified for the
+     * <i>post confirmation</i> trigger. When Amazon Cognito invokes this
+     * function, it passes a JSON payload, which the function receives as input.
+     * In this payload, the <code>clientMetadata</code> attribute provides the
+     * data that you assigned to the ClientMetadata parameter in your
+     * AdminConfirmSignUp request. In your function code in AWS Lambda, you can
+     * process the ClientMetadata value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
+     * The method adds a new key-value pair into ClientMetadata parameter, and
+     * returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param key The key of the entry to be added into ClientMetadata.
+     * @param value The corresponding value of the entry to be added into
+     *            ClientMetadata.
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public AdminConfirmSignUpRequest addClientMetadataEntry(String key, String value) {
+        if (null == this.clientMetadata) {
+            this.clientMetadata = new java.util.HashMap<String, String>();
+        }
+        if (this.clientMetadata.containsKey(key))
+            throw new IllegalArgumentException("Duplicated keys (" + key.toString()
+                    + ") are provided.");
+        this.clientMetadata.put(key, value);
+        return this;
+    }
+
+    /**
+     * Removes all the entries added into ClientMetadata.
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     */
+    public AdminConfirmSignUpRequest clearClientMetadataEntries() {
+        this.clientMetadata = null;
+        return this;
+    }
+
     /**
      * Returns a string representation of this object; useful for testing and
      * debugging.
@@ -181,7 +636,9 @@ public String toString() {
         if (getUserPoolId() != null)
             sb.append("UserPoolId: " + getUserPoolId() + ",");
         if (getUsername() != null)
-            sb.append("Username: " + getUsername());
+            sb.append("Username: " + getUsername() + ",");
+        if (getClientMetadata() != null)
+            sb.append("ClientMetadata: " + getClientMetadata());
         sb.append("}");
         return sb.toString();
     }
@@ -193,6 +650,8 @@ public int hashCode() {
 
         hashCode = prime * hashCode + ((getUserPoolId() == null) ? 0 : getUserPoolId().hashCode());
         hashCode = prime * hashCode + ((getUsername() == null) ? 0 : getUsername().hashCode());
+        hashCode = prime * hashCode
+                + ((getClientMetadata() == null) ? 0 : getClientMetadata().hashCode());
         return hashCode;
     }
 
@@ -216,6 +675,11 @@ public boolean equals(Object obj) {
             return false;
         if (other.getUsername() != null && other.getUsername().equals(this.getUsername()) == false)
             return false;
+        if (other.getClientMetadata() == null ^ this.getClientMetadata() == null)
+            return false;
+        if (other.getClientMetadata() != null
+                && other.getClientMetadata().equals(this.getClientMetadata()) == false)
+            return false;
         return true;
     }
 }
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminCreateUserConfigType.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminCreateUserConfigType.java
index 0b1854b15e..1991a12a71 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminCreateUserConfigType.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminCreateUserConfigType.java
@@ -60,7 +60,7 @@
      * </p>
      * <p>
      * See also <a href=
-     * "http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization"
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization"
      * >Customizing User Invitation Messages</a>.
      * </p>
      */
@@ -277,7 +277,7 @@ public AdminCreateUserConfigType withUnusedAccountValidityDays(Integer unusedAcc
      * </p>
      * <p>
      * See also <a href=
-     * "http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization"
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization"
      * >Customizing User Invitation Messages</a>.
      * </p>
      *
@@ -287,7 +287,7 @@ public AdminCreateUserConfigType withUnusedAccountValidityDays(Integer unusedAcc
      *         </p>
      *         <p>
      *         See also <a href=
-     *         "http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization"
+     *         "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization"
      *         >Customizing User Invitation Messages</a>.
      *         </p>
      */
@@ -301,7 +301,7 @@ public MessageTemplateType getInviteMessageTemplate() {
      * </p>
      * <p>
      * See also <a href=
-     * "http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization"
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization"
      * >Customizing User Invitation Messages</a>.
      * </p>
      *
@@ -311,7 +311,7 @@ public MessageTemplateType getInviteMessageTemplate() {
      *            </p>
      *            <p>
      *            See also <a href=
-     *            "http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization"
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization"
      *            >Customizing User Invitation Messages</a>.
      *            </p>
      */
@@ -325,7 +325,7 @@ public void setInviteMessageTemplate(MessageTemplateType inviteMessageTemplate)
      * </p>
      * <p>
      * See also <a href=
-     * "http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization"
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization"
      * >Customizing User Invitation Messages</a>.
      * </p>
      * <p>
@@ -338,7 +338,7 @@ public void setInviteMessageTemplate(MessageTemplateType inviteMessageTemplate)
      *            </p>
      *            <p>
      *            See also <a href=
-     *            "http://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization"
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-message-customizations.html#cognito-user-pool-settings-user-invitation-message-customization"
      *            >Customizing User Invitation Messages</a>.
      *            </p>
      * @return A reference to this updated object so that method calls can be
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminCreateUserRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminCreateUserRequest.java
index 0f439130b9..0edc62dbaa 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminCreateUserRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminCreateUserRequest.java
@@ -213,6 +213,59 @@
      */
     private java.util.List<String> desiredDeliveryMediums;
 
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the AdminCreateUser API action, Amazon
+     * Cognito invokes the function that is assigned to the <i>pre sign-up</i>
+     * trigger. When Amazon Cognito invokes this function, it passes a JSON
+     * payload, which the function receives as input. This payload contains a
+     * <code>clientMetadata</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your AdminCreateUser request.
+     * In your function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     */
+    private java.util.Map<String, String> clientMetadata;
+
     /**
      * <p>
      * The user pool ID for the user pool where the user will be created.
@@ -1519,6 +1572,416 @@ public AdminCreateUserRequest withDesiredDeliveryMediums(
         return this;
     }
 
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the AdminCreateUser API action, Amazon
+     * Cognito invokes the function that is assigned to the <i>pre sign-up</i>
+     * trigger. When Amazon Cognito invokes this function, it passes a JSON
+     * payload, which the function receives as input. This payload contains a
+     * <code>clientMetadata</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your AdminCreateUser request.
+     * In your function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     *
+     * @return <p>
+     *         A map of custom key-value pairs that you can provide as input for
+     *         any custom workflows that this action triggers.
+     *         </p>
+     *         <p>
+     *         You create custom workflows by assigning AWS Lambda functions to
+     *         user pool triggers. When you use the AdminCreateUser API action,
+     *         Amazon Cognito invokes the function that is assigned to the
+     *         <i>pre sign-up</i> trigger. When Amazon Cognito invokes this
+     *         function, it passes a JSON payload, which the function receives
+     *         as input. This payload contains a <code>clientMetadata</code>
+     *         attribute, which provides the data that you assigned to the
+     *         ClientMetadata parameter in your AdminCreateUser request. In your
+     *         function code in AWS Lambda, you can process the
+     *         <code>clientMetadata</code> value to enhance your workflow for
+     *         your specific needs.
+     *         </p>
+     *         <p>
+     *         For more information, see <a href=
+     *         "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *         >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     *         <i>Amazon Cognito Developer Guide</i>.
+     *         </p>
+     *         <note>
+     *         <p>
+     *         Take the following limitations into consideration when you use
+     *         the ClientMetadata parameter:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not store the ClientMetadata value. This data
+     *         is available only to AWS Lambda triggers that are assigned to a
+     *         user pool to support custom workflows. If your user pool
+     *         configuration does not include triggers, the ClientMetadata
+     *         parameter serves no purpose.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not validate the ClientMetadata value.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not encrypt the the ClientMetadata value, so
+     *         don't use it to provide sensitive information.
+     *         </p>
+     *         </li>
+     *         </ul>
+     *         </note>
+     */
+    public java.util.Map<String, String> getClientMetadata() {
+        return clientMetadata;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the AdminCreateUser API action, Amazon
+     * Cognito invokes the function that is assigned to the <i>pre sign-up</i>
+     * trigger. When Amazon Cognito invokes this function, it passes a JSON
+     * payload, which the function receives as input. This payload contains a
+     * <code>clientMetadata</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your AdminCreateUser request.
+     * In your function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     *
+     * @param clientMetadata <p>
+     *            A map of custom key-value pairs that you can provide as input
+     *            for any custom workflows that this action triggers.
+     *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the AdminCreateUser API
+     *            action, Amazon Cognito invokes the function that is assigned
+     *            to the <i>pre sign-up</i> trigger. When Amazon Cognito invokes
+     *            this function, it passes a JSON payload, which the function
+     *            receives as input. This payload contains a
+     *            <code>clientMetadata</code> attribute, which provides the data
+     *            that you assigned to the ClientMetadata parameter in your
+     *            AdminCreateUser request. In your function code in AWS Lambda,
+     *            you can process the <code>clientMetadata</code> value to
+     *            enhance your workflow for your specific needs.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
+     */
+    public void setClientMetadata(java.util.Map<String, String> clientMetadata) {
+        this.clientMetadata = clientMetadata;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the AdminCreateUser API action, Amazon
+     * Cognito invokes the function that is assigned to the <i>pre sign-up</i>
+     * trigger. When Amazon Cognito invokes this function, it passes a JSON
+     * payload, which the function receives as input. This payload contains a
+     * <code>clientMetadata</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your AdminCreateUser request.
+     * In your function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param clientMetadata <p>
+     *            A map of custom key-value pairs that you can provide as input
+     *            for any custom workflows that this action triggers.
+     *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the AdminCreateUser API
+     *            action, Amazon Cognito invokes the function that is assigned
+     *            to the <i>pre sign-up</i> trigger. When Amazon Cognito invokes
+     *            this function, it passes a JSON payload, which the function
+     *            receives as input. This payload contains a
+     *            <code>clientMetadata</code> attribute, which provides the data
+     *            that you assigned to the ClientMetadata parameter in your
+     *            AdminCreateUser request. In your function code in AWS Lambda,
+     *            you can process the <code>clientMetadata</code> value to
+     *            enhance your workflow for your specific needs.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public AdminCreateUserRequest withClientMetadata(java.util.Map<String, String> clientMetadata) {
+        this.clientMetadata = clientMetadata;
+        return this;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the AdminCreateUser API action, Amazon
+     * Cognito invokes the function that is assigned to the <i>pre sign-up</i>
+     * trigger. When Amazon Cognito invokes this function, it passes a JSON
+     * payload, which the function receives as input. This payload contains a
+     * <code>clientMetadata</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your AdminCreateUser request.
+     * In your function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
+     * The method adds a new key-value pair into ClientMetadata parameter, and
+     * returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param key The key of the entry to be added into ClientMetadata.
+     * @param value The corresponding value of the entry to be added into
+     *            ClientMetadata.
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public AdminCreateUserRequest addClientMetadataEntry(String key, String value) {
+        if (null == this.clientMetadata) {
+            this.clientMetadata = new java.util.HashMap<String, String>();
+        }
+        if (this.clientMetadata.containsKey(key))
+            throw new IllegalArgumentException("Duplicated keys (" + key.toString()
+                    + ") are provided.");
+        this.clientMetadata.put(key, value);
+        return this;
+    }
+
+    /**
+     * Removes all the entries added into ClientMetadata.
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     */
+    public AdminCreateUserRequest clearClientMetadataEntries() {
+        this.clientMetadata = null;
+        return this;
+    }
+
     /**
      * Returns a string representation of this object; useful for testing and
      * debugging.
@@ -1545,7 +2008,9 @@ public String toString() {
         if (getMessageAction() != null)
             sb.append("MessageAction: " + getMessageAction() + ",");
         if (getDesiredDeliveryMediums() != null)
-            sb.append("DesiredDeliveryMediums: " + getDesiredDeliveryMediums());
+            sb.append("DesiredDeliveryMediums: " + getDesiredDeliveryMediums() + ",");
+        if (getClientMetadata() != null)
+            sb.append("ClientMetadata: " + getClientMetadata());
         sb.append("}");
         return sb.toString();
     }
@@ -1571,6 +2036,8 @@ public int hashCode() {
                 * hashCode
                 + ((getDesiredDeliveryMediums() == null) ? 0 : getDesiredDeliveryMediums()
                         .hashCode());
+        hashCode = prime * hashCode
+                + ((getClientMetadata() == null) ? 0 : getClientMetadata().hashCode());
         return hashCode;
     }
 
@@ -1624,6 +2091,11 @@ public boolean equals(Object obj) {
         if (other.getDesiredDeliveryMediums() != null
                 && other.getDesiredDeliveryMediums().equals(this.getDesiredDeliveryMediums()) == false)
             return false;
+        if (other.getClientMetadata() == null ^ this.getClientMetadata() == null)
+            return false;
+        if (other.getClientMetadata() != null
+                && other.getClientMetadata().equals(this.getClientMetadata()) == false)
+            return false;
         return true;
     }
 }
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminDeleteUserAttributesRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminDeleteUserAttributesRequest.java
index 3c5f9a7c24..b8cab189ba 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminDeleteUserAttributesRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminDeleteUserAttributesRequest.java
@@ -25,7 +25,7 @@
  * user.
  * </p>
  * <p>
- * Requires developer credentials.
+ * Calling this action requires developer credentials.
  * </p>
  */
 public class AdminDeleteUserAttributesRequest extends AmazonWebServiceRequest implements
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminDeleteUserRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminDeleteUserRequest.java
index 380b956de3..2aefcaef4c 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminDeleteUserRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminDeleteUserRequest.java
@@ -24,7 +24,7 @@
  * Deletes a user as an administrator. Works on any user.
  * </p>
  * <p>
- * Requires developer credentials.
+ * Calling this action requires developer credentials.
  * </p>
  */
 public class AdminDeleteUserRequest extends AmazonWebServiceRequest implements Serializable {
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminDisableUserRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminDisableUserRequest.java
index b8c322513f..03f5276739 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminDisableUserRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminDisableUserRequest.java
@@ -21,10 +21,10 @@
 
 /**
  * <p>
- * Disables the specified user as an administrator. Works on any user.
+ * Disables the specified user.
  * </p>
  * <p>
- * Requires developer credentials.
+ * Calling this action requires developer credentials.
  * </p>
  */
 public class AdminDisableUserRequest extends AmazonWebServiceRequest implements Serializable {
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminEnableUserRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminEnableUserRequest.java
index 90b8806299..2d140be873 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminEnableUserRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminEnableUserRequest.java
@@ -24,7 +24,7 @@
  * Enables the specified user as an administrator. Works on any user.
  * </p>
  * <p>
- * Requires developer credentials.
+ * Calling this action requires developer credentials.
  * </p>
  */
 public class AdminEnableUserRequest extends AmazonWebServiceRequest implements Serializable {
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminForgetDeviceRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminForgetDeviceRequest.java
index 7abbafd6ea..3e6b7ae1db 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminForgetDeviceRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminForgetDeviceRequest.java
@@ -24,7 +24,7 @@
  * Forgets the device, as an administrator.
  * </p>
  * <p>
- * Requires developer credentials.
+ * Calling this action requires developer credentials.
  * </p>
  */
 public class AdminForgetDeviceRequest extends AmazonWebServiceRequest implements Serializable {
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminGetDeviceRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminGetDeviceRequest.java
index 37fd11ce72..2109646b61 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminGetDeviceRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminGetDeviceRequest.java
@@ -24,7 +24,7 @@
  * Gets the device, as an administrator.
  * </p>
  * <p>
- * Requires developer credentials.
+ * Calling this action requires developer credentials.
  * </p>
  */
 public class AdminGetDeviceRequest extends AmazonWebServiceRequest implements Serializable {
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminGetUserRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminGetUserRequest.java
index f4fe4e3fe8..dab2d87f44 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminGetUserRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminGetUserRequest.java
@@ -25,7 +25,7 @@
  * Works on any user.
  * </p>
  * <p>
- * Requires developer credentials.
+ * Calling this action requires developer credentials.
  * </p>
  */
 public class AdminGetUserRequest extends AmazonWebServiceRequest implements Serializable {
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminGetUserResult.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminGetUserResult.java
index 22b611ac29..cd800dab93 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminGetUserResult.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminGetUserResult.java
@@ -116,7 +116,11 @@
 
     /**
      * <p>
-     * Specifies the options for MFA (e.g., email or phone number).
+     * <i>This response parameter is no longer supported.</i> It provides
+     * information only about SMS MFA configurations. It doesn't provide
+     * information about TOTP software token MFA configurations. To look up
+     * information about either type of MFA configuration, use the
+     * <a>AdminGetUserResponse$UserMFASettingList</a> response instead.
      * </p>
      */
     private java.util.List<MFAOptionType> mFAOptions;
@@ -130,7 +134,8 @@
 
     /**
      * <p>
-     * The list of the user's MFA settings.
+     * The MFA options that are enabled for the user. The possible values in
+     * this list are <code>SMS_MFA</code> and <code>SOFTWARE_TOKEN_MFA</code>.
      * </p>
      */
     private java.util.List<String> userMFASettingList;
@@ -935,11 +940,20 @@ public AdminGetUserResult withUserStatus(UserStatusType userStatus) {
 
     /**
      * <p>
-     * Specifies the options for MFA (e.g., email or phone number).
+     * <i>This response parameter is no longer supported.</i> It provides
+     * information only about SMS MFA configurations. It doesn't provide
+     * information about TOTP software token MFA configurations. To look up
+     * information about either type of MFA configuration, use the
+     * <a>AdminGetUserResponse$UserMFASettingList</a> response instead.
      * </p>
      *
      * @return <p>
-     *         Specifies the options for MFA (e.g., email or phone number).
+     *         <i>This response parameter is no longer supported.</i> It
+     *         provides information only about SMS MFA configurations. It
+     *         doesn't provide information about TOTP software token MFA
+     *         configurations. To look up information about either type of MFA
+     *         configuration, use the
+     *         <a>AdminGetUserResponse$UserMFASettingList</a> response instead.
      *         </p>
      */
     public java.util.List<MFAOptionType> getMFAOptions() {
@@ -948,11 +962,21 @@ public AdminGetUserResult withUserStatus(UserStatusType userStatus) {
 
     /**
      * <p>
-     * Specifies the options for MFA (e.g., email or phone number).
+     * <i>This response parameter is no longer supported.</i> It provides
+     * information only about SMS MFA configurations. It doesn't provide
+     * information about TOTP software token MFA configurations. To look up
+     * information about either type of MFA configuration, use the
+     * <a>AdminGetUserResponse$UserMFASettingList</a> response instead.
      * </p>
      *
      * @param mFAOptions <p>
-     *            Specifies the options for MFA (e.g., email or phone number).
+     *            <i>This response parameter is no longer supported.</i> It
+     *            provides information only about SMS MFA configurations. It
+     *            doesn't provide information about TOTP software token MFA
+     *            configurations. To look up information about either type of
+     *            MFA configuration, use the
+     *            <a>AdminGetUserResponse$UserMFASettingList</a> response
+     *            instead.
      *            </p>
      */
     public void setMFAOptions(java.util.Collection<MFAOptionType> mFAOptions) {
@@ -966,14 +990,24 @@ public void setMFAOptions(java.util.Collection<MFAOptionType> mFAOptions) {
 
     /**
      * <p>
-     * Specifies the options for MFA (e.g., email or phone number).
+     * <i>This response parameter is no longer supported.</i> It provides
+     * information only about SMS MFA configurations. It doesn't provide
+     * information about TOTP software token MFA configurations. To look up
+     * information about either type of MFA configuration, use the
+     * <a>AdminGetUserResponse$UserMFASettingList</a> response instead.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
      *
      * @param mFAOptions <p>
-     *            Specifies the options for MFA (e.g., email or phone number).
+     *            <i>This response parameter is no longer supported.</i> It
+     *            provides information only about SMS MFA configurations. It
+     *            doesn't provide information about TOTP software token MFA
+     *            configurations. To look up information about either type of
+     *            MFA configuration, use the
+     *            <a>AdminGetUserResponse$UserMFASettingList</a> response
+     *            instead.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
@@ -990,14 +1024,24 @@ public AdminGetUserResult withMFAOptions(MFAOptionType... mFAOptions) {
 
     /**
      * <p>
-     * Specifies the options for MFA (e.g., email or phone number).
+     * <i>This response parameter is no longer supported.</i> It provides
+     * information only about SMS MFA configurations. It doesn't provide
+     * information about TOTP software token MFA configurations. To look up
+     * information about either type of MFA configuration, use the
+     * <a>AdminGetUserResponse$UserMFASettingList</a> response instead.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
      *
      * @param mFAOptions <p>
-     *            Specifies the options for MFA (e.g., email or phone number).
+     *            <i>This response parameter is no longer supported.</i> It
+     *            provides information only about SMS MFA configurations. It
+     *            doesn't provide information about TOTP software token MFA
+     *            configurations. To look up information about either type of
+     *            MFA configuration, use the
+     *            <a>AdminGetUserResponse$UserMFASettingList</a> response
+     *            instead.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
@@ -1054,11 +1098,14 @@ public AdminGetUserResult withPreferredMfaSetting(String preferredMfaSetting) {
 
     /**
      * <p>
-     * The list of the user's MFA settings.
+     * The MFA options that are enabled for the user. The possible values in
+     * this list are <code>SMS_MFA</code> and <code>SOFTWARE_TOKEN_MFA</code>.
      * </p>
      *
      * @return <p>
-     *         The list of the user's MFA settings.
+     *         The MFA options that are enabled for the user. The possible
+     *         values in this list are <code>SMS_MFA</code> and
+     *         <code>SOFTWARE_TOKEN_MFA</code>.
      *         </p>
      */
     public java.util.List<String> getUserMFASettingList() {
@@ -1067,11 +1114,14 @@ public AdminGetUserResult withPreferredMfaSetting(String preferredMfaSetting) {
 
     /**
      * <p>
-     * The list of the user's MFA settings.
+     * The MFA options that are enabled for the user. The possible values in
+     * this list are <code>SMS_MFA</code> and <code>SOFTWARE_TOKEN_MFA</code>.
      * </p>
      *
      * @param userMFASettingList <p>
-     *            The list of the user's MFA settings.
+     *            The MFA options that are enabled for the user. The possible
+     *            values in this list are <code>SMS_MFA</code> and
+     *            <code>SOFTWARE_TOKEN_MFA</code>.
      *            </p>
      */
     public void setUserMFASettingList(java.util.Collection<String> userMFASettingList) {
@@ -1085,14 +1135,17 @@ public void setUserMFASettingList(java.util.Collection<String> userMFASettingLis
 
     /**
      * <p>
-     * The list of the user's MFA settings.
+     * The MFA options that are enabled for the user. The possible values in
+     * this list are <code>SMS_MFA</code> and <code>SOFTWARE_TOKEN_MFA</code>.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
      *
      * @param userMFASettingList <p>
-     *            The list of the user's MFA settings.
+     *            The MFA options that are enabled for the user. The possible
+     *            values in this list are <code>SMS_MFA</code> and
+     *            <code>SOFTWARE_TOKEN_MFA</code>.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
@@ -1109,14 +1162,17 @@ public AdminGetUserResult withUserMFASettingList(String... userMFASettingList) {
 
     /**
      * <p>
-     * The list of the user's MFA settings.
+     * The MFA options that are enabled for the user. The possible values in
+     * this list are <code>SMS_MFA</code> and <code>SOFTWARE_TOKEN_MFA</code>.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
      *
      * @param userMFASettingList <p>
-     *            The list of the user's MFA settings.
+     *            The MFA options that are enabled for the user. The possible
+     *            values in this list are <code>SMS_MFA</code> and
+     *            <code>SOFTWARE_TOKEN_MFA</code>.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminInitiateAuthRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminInitiateAuthRequest.java
index c53c3d9217..c73ff41de1 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminInitiateAuthRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminInitiateAuthRequest.java
@@ -24,7 +24,7 @@
  * Initiates the authentication flow, as an administrator.
  * </p>
  * <p>
- * Requires developer credentials.
+ * Calling this action requires developer credentials.
  * </p>
  */
 public class AdminInitiateAuthRequest extends AmazonWebServiceRequest implements Serializable {
@@ -163,10 +163,112 @@
 
     /**
      * <p>
-     * This is a random key-value pair map which can contain any key and will be
-     * passed to your PreAuthentication Lambda trigger as-is. It can be used to
-     * implement additional validations around authentication.
+     * A map of custom key-value pairs that you can provide as input for certain
+     * custom workflows that this action triggers.
      * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the AdminInitiateAuth API action, Amazon
+     * Cognito invokes the AWS Lambda functions that are specified for various
+     * triggers. The ClientMetadata value is passed as input to the functions
+     * for only the following triggers:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Pre signup
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Pre authentication
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * User migration
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * When Amazon Cognito invokes the functions for these triggers, it passes a
+     * JSON payload, which the function receives as input. This payload contains
+     * a <code>validationData</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your AdminInitiateAuth
+     * request. In your function code in AWS Lambda, you can process the
+     * <code>validationData</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * When you use the AdminInitiateAuth API action, Amazon Cognito also
+     * invokes the functions for the following triggers, but it does not provide
+     * the ClientMetadata value as input:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Post authentication
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Custom message
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Pre token generation
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Create auth challenge
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Define auth challenge
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Verify auth challenge
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
      */
     private java.util.Map<String, String> clientMetadata;
 
@@ -1333,17 +1435,222 @@ public AdminInitiateAuthRequest clearAuthParametersEntries() {
 
     /**
      * <p>
-     * This is a random key-value pair map which can contain any key and will be
-     * passed to your PreAuthentication Lambda trigger as-is. It can be used to
-     * implement additional validations around authentication.
+     * A map of custom key-value pairs that you can provide as input for certain
+     * custom workflows that this action triggers.
      * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the AdminInitiateAuth API action, Amazon
+     * Cognito invokes the AWS Lambda functions that are specified for various
+     * triggers. The ClientMetadata value is passed as input to the functions
+     * for only the following triggers:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Pre signup
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Pre authentication
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * User migration
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * When Amazon Cognito invokes the functions for these triggers, it passes a
+     * JSON payload, which the function receives as input. This payload contains
+     * a <code>validationData</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your AdminInitiateAuth
+     * request. In your function code in AWS Lambda, you can process the
+     * <code>validationData</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * When you use the AdminInitiateAuth API action, Amazon Cognito also
+     * invokes the functions for the following triggers, but it does not provide
+     * the ClientMetadata value as input:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Post authentication
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Custom message
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Pre token generation
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Create auth challenge
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Define auth challenge
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Verify auth challenge
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
      *
      * @return <p>
-     *         This is a random key-value pair map which can contain any key and
-     *         will be passed to your PreAuthentication Lambda trigger as-is. It
-     *         can be used to implement additional validations around
-     *         authentication.
+     *         A map of custom key-value pairs that you can provide as input for
+     *         certain custom workflows that this action triggers.
      *         </p>
+     *         <p>
+     *         You create custom workflows by assigning AWS Lambda functions to
+     *         user pool triggers. When you use the AdminInitiateAuth API
+     *         action, Amazon Cognito invokes the AWS Lambda functions that are
+     *         specified for various triggers. The ClientMetadata value is
+     *         passed as input to the functions for only the following triggers:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         Pre signup
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Pre authentication
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         User migration
+     *         </p>
+     *         </li>
+     *         </ul>
+     *         <p>
+     *         When Amazon Cognito invokes the functions for these triggers, it
+     *         passes a JSON payload, which the function receives as input. This
+     *         payload contains a <code>validationData</code> attribute, which
+     *         provides the data that you assigned to the ClientMetadata
+     *         parameter in your AdminInitiateAuth request. In your function
+     *         code in AWS Lambda, you can process the
+     *         <code>validationData</code> value to enhance your workflow for
+     *         your specific needs.
+     *         </p>
+     *         <p>
+     *         When you use the AdminInitiateAuth API action, Amazon Cognito
+     *         also invokes the functions for the following triggers, but it
+     *         does not provide the ClientMetadata value as input:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         Post authentication
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Custom message
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Pre token generation
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Create auth challenge
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Define auth challenge
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Verify auth challenge
+     *         </p>
+     *         </li>
+     *         </ul>
+     *         <p>
+     *         For more information, see <a href=
+     *         "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *         >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     *         <i>Amazon Cognito Developer Guide</i>.
+     *         </p>
+     *         <note>
+     *         <p>
+     *         Take the following limitations into consideration when you use
+     *         the ClientMetadata parameter:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not store the ClientMetadata value. This data
+     *         is available only to AWS Lambda triggers that are assigned to a
+     *         user pool to support custom workflows. If your user pool
+     *         configuration does not include triggers, the ClientMetadata
+     *         parameter serves no purpose.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not validate the ClientMetadata value.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not encrypt the the ClientMetadata value, so
+     *         don't use it to provide sensitive information.
+     *         </p>
+     *         </li>
+     *         </ul>
+     *         </note>
      */
     public java.util.Map<String, String> getClientMetadata() {
         return clientMetadata;
@@ -1351,17 +1658,223 @@ public AdminInitiateAuthRequest clearAuthParametersEntries() {
 
     /**
      * <p>
-     * This is a random key-value pair map which can contain any key and will be
-     * passed to your PreAuthentication Lambda trigger as-is. It can be used to
-     * implement additional validations around authentication.
+     * A map of custom key-value pairs that you can provide as input for certain
+     * custom workflows that this action triggers.
      * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the AdminInitiateAuth API action, Amazon
+     * Cognito invokes the AWS Lambda functions that are specified for various
+     * triggers. The ClientMetadata value is passed as input to the functions
+     * for only the following triggers:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Pre signup
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Pre authentication
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * User migration
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * When Amazon Cognito invokes the functions for these triggers, it passes a
+     * JSON payload, which the function receives as input. This payload contains
+     * a <code>validationData</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your AdminInitiateAuth
+     * request. In your function code in AWS Lambda, you can process the
+     * <code>validationData</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * When you use the AdminInitiateAuth API action, Amazon Cognito also
+     * invokes the functions for the following triggers, but it does not provide
+     * the ClientMetadata value as input:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Post authentication
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Custom message
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Pre token generation
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Create auth challenge
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Define auth challenge
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Verify auth challenge
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
      *
      * @param clientMetadata <p>
-     *            This is a random key-value pair map which can contain any key
-     *            and will be passed to your PreAuthentication Lambda trigger
-     *            as-is. It can be used to implement additional validations
-     *            around authentication.
+     *            A map of custom key-value pairs that you can provide as input
+     *            for certain custom workflows that this action triggers.
      *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the AdminInitiateAuth API
+     *            action, Amazon Cognito invokes the AWS Lambda functions that
+     *            are specified for various triggers. The ClientMetadata value
+     *            is passed as input to the functions for only the following
+     *            triggers:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Pre signup
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Pre authentication
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            User migration
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            <p>
+     *            When Amazon Cognito invokes the functions for these triggers,
+     *            it passes a JSON payload, which the function receives as
+     *            input. This payload contains a <code>validationData</code>
+     *            attribute, which provides the data that you assigned to the
+     *            ClientMetadata parameter in your AdminInitiateAuth request. In
+     *            your function code in AWS Lambda, you can process the
+     *            <code>validationData</code> value to enhance your workflow for
+     *            your specific needs.
+     *            </p>
+     *            <p>
+     *            When you use the AdminInitiateAuth API action, Amazon Cognito
+     *            also invokes the functions for the following triggers, but it
+     *            does not provide the ClientMetadata value as input:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Post authentication
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Custom message
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Pre token generation
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Create auth challenge
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Define auth challenge
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Verify auth challenge
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
      */
     public void setClientMetadata(java.util.Map<String, String> clientMetadata) {
         this.clientMetadata = clientMetadata;
@@ -1369,20 +1882,226 @@ public void setClientMetadata(java.util.Map<String, String> clientMetadata) {
 
     /**
      * <p>
-     * This is a random key-value pair map which can contain any key and will be
-     * passed to your PreAuthentication Lambda trigger as-is. It can be used to
-     * implement additional validations around authentication.
+     * A map of custom key-value pairs that you can provide as input for certain
+     * custom workflows that this action triggers.
      * </p>
      * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the AdminInitiateAuth API action, Amazon
+     * Cognito invokes the AWS Lambda functions that are specified for various
+     * triggers. The ClientMetadata value is passed as input to the functions
+     * for only the following triggers:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Pre signup
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Pre authentication
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * User migration
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * When Amazon Cognito invokes the functions for these triggers, it passes a
+     * JSON payload, which the function receives as input. This payload contains
+     * a <code>validationData</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your AdminInitiateAuth
+     * request. In your function code in AWS Lambda, you can process the
+     * <code>validationData</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * When you use the AdminInitiateAuth API action, Amazon Cognito also
+     * invokes the functions for the following triggers, but it does not provide
+     * the ClientMetadata value as input:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Post authentication
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Custom message
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Pre token generation
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Create auth challenge
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Define auth challenge
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Verify auth challenge
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
      *
      * @param clientMetadata <p>
-     *            This is a random key-value pair map which can contain any key
-     *            and will be passed to your PreAuthentication Lambda trigger
-     *            as-is. It can be used to implement additional validations
-     *            around authentication.
+     *            A map of custom key-value pairs that you can provide as input
+     *            for certain custom workflows that this action triggers.
      *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the AdminInitiateAuth API
+     *            action, Amazon Cognito invokes the AWS Lambda functions that
+     *            are specified for various triggers. The ClientMetadata value
+     *            is passed as input to the functions for only the following
+     *            triggers:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Pre signup
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Pre authentication
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            User migration
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            <p>
+     *            When Amazon Cognito invokes the functions for these triggers,
+     *            it passes a JSON payload, which the function receives as
+     *            input. This payload contains a <code>validationData</code>
+     *            attribute, which provides the data that you assigned to the
+     *            ClientMetadata parameter in your AdminInitiateAuth request. In
+     *            your function code in AWS Lambda, you can process the
+     *            <code>validationData</code> value to enhance your workflow for
+     *            your specific needs.
+     *            </p>
+     *            <p>
+     *            When you use the AdminInitiateAuth API action, Amazon Cognito
+     *            also invokes the functions for the following triggers, but it
+     *            does not provide the ClientMetadata value as input:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Post authentication
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Custom message
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Pre token generation
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Create auth challenge
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Define auth challenge
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Verify auth challenge
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
      */
@@ -1393,11 +2112,113 @@ public AdminInitiateAuthRequest withClientMetadata(java.util.Map<String, String>
 
     /**
      * <p>
-     * This is a random key-value pair map which can contain any key and will be
-     * passed to your PreAuthentication Lambda trigger as-is. It can be used to
-     * implement additional validations around authentication.
+     * A map of custom key-value pairs that you can provide as input for certain
+     * custom workflows that this action triggers.
      * </p>
      * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the AdminInitiateAuth API action, Amazon
+     * Cognito invokes the AWS Lambda functions that are specified for various
+     * triggers. The ClientMetadata value is passed as input to the functions
+     * for only the following triggers:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Pre signup
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Pre authentication
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * User migration
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * When Amazon Cognito invokes the functions for these triggers, it passes a
+     * JSON payload, which the function receives as input. This payload contains
+     * a <code>validationData</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your AdminInitiateAuth
+     * request. In your function code in AWS Lambda, you can process the
+     * <code>validationData</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * When you use the AdminInitiateAuth API action, Amazon Cognito also
+     * invokes the functions for the following triggers, but it does not provide
+     * the ClientMetadata value as input:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Post authentication
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Custom message
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Pre token generation
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Create auth challenge
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Define auth challenge
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Verify auth challenge
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
      * The method adds a new key-value pair into ClientMetadata parameter, and
      * returns a reference to this object so that method calls can be chained
      * together.
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminListDevicesRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminListDevicesRequest.java
index ad2dff55c4..7969ac461d 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminListDevicesRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminListDevicesRequest.java
@@ -24,7 +24,7 @@
  * Lists devices, as an administrator.
  * </p>
  * <p>
- * Requires developer credentials.
+ * Calling this action requires developer credentials.
  * </p>
  */
 public class AdminListDevicesRequest extends AmazonWebServiceRequest implements Serializable {
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminListGroupsForUserRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminListGroupsForUserRequest.java
index 26498a5f4f..fd7688511f 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminListGroupsForUserRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminListGroupsForUserRequest.java
@@ -24,7 +24,7 @@
  * Lists the groups that the user belongs to.
  * </p>
  * <p>
- * Requires developer credentials.
+ * Calling this action requires developer credentials.
  * </p>
  */
 public class AdminListGroupsForUserRequest extends AmazonWebServiceRequest implements Serializable {
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminRemoveUserFromGroupRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminRemoveUserFromGroupRequest.java
index 02912d0d1a..a606179571 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminRemoveUserFromGroupRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminRemoveUserFromGroupRequest.java
@@ -24,7 +24,7 @@
  * Removes the specified user from the specified group.
  * </p>
  * <p>
- * Requires developer credentials.
+ * Calling this action requires developer credentials.
  * </p>
  */
 public class AdminRemoveUserFromGroupRequest extends AmazonWebServiceRequest implements
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminResetUserPasswordRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminResetUserPasswordRequest.java
index 3d339a452a..22c416b1a5 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminResetUserPasswordRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminResetUserPasswordRequest.java
@@ -36,7 +36,7 @@
  * password.
  * </p>
  * <p>
- * Requires developer credentials.
+ * Calling this action requires developer credentials.
  * </p>
  */
 public class AdminResetUserPasswordRequest extends AmazonWebServiceRequest implements Serializable {
@@ -63,6 +63,59 @@
      */
     private String username;
 
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the AdminResetUserPassword API action, Amazon
+     * Cognito invokes the function that is assigned to the <i>custom
+     * message</i> trigger. When Amazon Cognito invokes this function, it passes
+     * a JSON payload, which the function receives as input. This payload
+     * contains a <code>clientMetadata</code> attribute, which provides the data
+     * that you assigned to the ClientMetadata parameter in your
+     * AdminResetUserPassword request. In your function code in AWS Lambda, you
+     * can process the <code>clientMetadata</code> value to enhance your
+     * workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     */
+    private java.util.Map<String, String> clientMetadata;
+
     /**
      * <p>
      * The user pool ID for the user pool where you want to reset the user's
@@ -183,6 +236,417 @@ public AdminResetUserPasswordRequest withUsername(String username) {
         return this;
     }
 
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the AdminResetUserPassword API action, Amazon
+     * Cognito invokes the function that is assigned to the <i>custom
+     * message</i> trigger. When Amazon Cognito invokes this function, it passes
+     * a JSON payload, which the function receives as input. This payload
+     * contains a <code>clientMetadata</code> attribute, which provides the data
+     * that you assigned to the ClientMetadata parameter in your
+     * AdminResetUserPassword request. In your function code in AWS Lambda, you
+     * can process the <code>clientMetadata</code> value to enhance your
+     * workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     *
+     * @return <p>
+     *         A map of custom key-value pairs that you can provide as input for
+     *         any custom workflows that this action triggers.
+     *         </p>
+     *         <p>
+     *         You create custom workflows by assigning AWS Lambda functions to
+     *         user pool triggers. When you use the AdminResetUserPassword API
+     *         action, Amazon Cognito invokes the function that is assigned to
+     *         the <i>custom message</i> trigger. When Amazon Cognito invokes
+     *         this function, it passes a JSON payload, which the function
+     *         receives as input. This payload contains a
+     *         <code>clientMetadata</code> attribute, which provides the data
+     *         that you assigned to the ClientMetadata parameter in your
+     *         AdminResetUserPassword request. In your function code in AWS
+     *         Lambda, you can process the <code>clientMetadata</code> value to
+     *         enhance your workflow for your specific needs.
+     *         </p>
+     *         <p>
+     *         For more information, see <a href=
+     *         "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *         >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     *         <i>Amazon Cognito Developer Guide</i>.
+     *         </p>
+     *         <note>
+     *         <p>
+     *         Take the following limitations into consideration when you use
+     *         the ClientMetadata parameter:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not store the ClientMetadata value. This data
+     *         is available only to AWS Lambda triggers that are assigned to a
+     *         user pool to support custom workflows. If your user pool
+     *         configuration does not include triggers, the ClientMetadata
+     *         parameter serves no purpose.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not validate the ClientMetadata value.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not encrypt the the ClientMetadata value, so
+     *         don't use it to provide sensitive information.
+     *         </p>
+     *         </li>
+     *         </ul>
+     *         </note>
+     */
+    public java.util.Map<String, String> getClientMetadata() {
+        return clientMetadata;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the AdminResetUserPassword API action, Amazon
+     * Cognito invokes the function that is assigned to the <i>custom
+     * message</i> trigger. When Amazon Cognito invokes this function, it passes
+     * a JSON payload, which the function receives as input. This payload
+     * contains a <code>clientMetadata</code> attribute, which provides the data
+     * that you assigned to the ClientMetadata parameter in your
+     * AdminResetUserPassword request. In your function code in AWS Lambda, you
+     * can process the <code>clientMetadata</code> value to enhance your
+     * workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     *
+     * @param clientMetadata <p>
+     *            A map of custom key-value pairs that you can provide as input
+     *            for any custom workflows that this action triggers.
+     *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the AdminResetUserPassword
+     *            API action, Amazon Cognito invokes the function that is
+     *            assigned to the <i>custom message</i> trigger. When Amazon
+     *            Cognito invokes this function, it passes a JSON payload, which
+     *            the function receives as input. This payload contains a
+     *            <code>clientMetadata</code> attribute, which provides the data
+     *            that you assigned to the ClientMetadata parameter in your
+     *            AdminResetUserPassword request. In your function code in AWS
+     *            Lambda, you can process the <code>clientMetadata</code> value
+     *            to enhance your workflow for your specific needs.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
+     */
+    public void setClientMetadata(java.util.Map<String, String> clientMetadata) {
+        this.clientMetadata = clientMetadata;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the AdminResetUserPassword API action, Amazon
+     * Cognito invokes the function that is assigned to the <i>custom
+     * message</i> trigger. When Amazon Cognito invokes this function, it passes
+     * a JSON payload, which the function receives as input. This payload
+     * contains a <code>clientMetadata</code> attribute, which provides the data
+     * that you assigned to the ClientMetadata parameter in your
+     * AdminResetUserPassword request. In your function code in AWS Lambda, you
+     * can process the <code>clientMetadata</code> value to enhance your
+     * workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param clientMetadata <p>
+     *            A map of custom key-value pairs that you can provide as input
+     *            for any custom workflows that this action triggers.
+     *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the AdminResetUserPassword
+     *            API action, Amazon Cognito invokes the function that is
+     *            assigned to the <i>custom message</i> trigger. When Amazon
+     *            Cognito invokes this function, it passes a JSON payload, which
+     *            the function receives as input. This payload contains a
+     *            <code>clientMetadata</code> attribute, which provides the data
+     *            that you assigned to the ClientMetadata parameter in your
+     *            AdminResetUserPassword request. In your function code in AWS
+     *            Lambda, you can process the <code>clientMetadata</code> value
+     *            to enhance your workflow for your specific needs.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public AdminResetUserPasswordRequest withClientMetadata(
+            java.util.Map<String, String> clientMetadata) {
+        this.clientMetadata = clientMetadata;
+        return this;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the AdminResetUserPassword API action, Amazon
+     * Cognito invokes the function that is assigned to the <i>custom
+     * message</i> trigger. When Amazon Cognito invokes this function, it passes
+     * a JSON payload, which the function receives as input. This payload
+     * contains a <code>clientMetadata</code> attribute, which provides the data
+     * that you assigned to the ClientMetadata parameter in your
+     * AdminResetUserPassword request. In your function code in AWS Lambda, you
+     * can process the <code>clientMetadata</code> value to enhance your
+     * workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
+     * The method adds a new key-value pair into ClientMetadata parameter, and
+     * returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param key The key of the entry to be added into ClientMetadata.
+     * @param value The corresponding value of the entry to be added into
+     *            ClientMetadata.
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public AdminResetUserPasswordRequest addClientMetadataEntry(String key, String value) {
+        if (null == this.clientMetadata) {
+            this.clientMetadata = new java.util.HashMap<String, String>();
+        }
+        if (this.clientMetadata.containsKey(key))
+            throw new IllegalArgumentException("Duplicated keys (" + key.toString()
+                    + ") are provided.");
+        this.clientMetadata.put(key, value);
+        return this;
+    }
+
+    /**
+     * Removes all the entries added into ClientMetadata.
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     */
+    public AdminResetUserPasswordRequest clearClientMetadataEntries() {
+        this.clientMetadata = null;
+        return this;
+    }
+
     /**
      * Returns a string representation of this object; useful for testing and
      * debugging.
@@ -197,7 +661,9 @@ public String toString() {
         if (getUserPoolId() != null)
             sb.append("UserPoolId: " + getUserPoolId() + ",");
         if (getUsername() != null)
-            sb.append("Username: " + getUsername());
+            sb.append("Username: " + getUsername() + ",");
+        if (getClientMetadata() != null)
+            sb.append("ClientMetadata: " + getClientMetadata());
         sb.append("}");
         return sb.toString();
     }
@@ -209,6 +675,8 @@ public int hashCode() {
 
         hashCode = prime * hashCode + ((getUserPoolId() == null) ? 0 : getUserPoolId().hashCode());
         hashCode = prime * hashCode + ((getUsername() == null) ? 0 : getUsername().hashCode());
+        hashCode = prime * hashCode
+                + ((getClientMetadata() == null) ? 0 : getClientMetadata().hashCode());
         return hashCode;
     }
 
@@ -232,6 +700,11 @@ public boolean equals(Object obj) {
             return false;
         if (other.getUsername() != null && other.getUsername().equals(this.getUsername()) == false)
             return false;
+        if (other.getClientMetadata() == null ^ this.getClientMetadata() == null)
+            return false;
+        if (other.getClientMetadata() != null
+                && other.getClientMetadata().equals(this.getClientMetadata()) == false)
+            return false;
         return true;
     }
 }
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminRespondToAuthChallengeRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminRespondToAuthChallengeRequest.java
index 70af00f8bb..38a09d8081 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminRespondToAuthChallengeRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminRespondToAuthChallengeRequest.java
@@ -24,7 +24,7 @@
  * Responds to an authentication challenge, as an administrator.
  * </p>
  * <p>
- * Requires developer credentials.
+ * Calling this action requires developer credentials.
  * </p>
  */
 public class AdminRespondToAuthChallengeRequest extends AmazonWebServiceRequest implements
@@ -142,6 +142,62 @@
      */
     private ContextDataType contextData;
 
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the AdminRespondToAuthChallenge API action,
+     * Amazon Cognito invokes any functions that are assigned to the following
+     * triggers: <i>pre sign-up</i>, <i>custom message</i>, <i>post
+     * authentication</i>, <i>user migration</i>, <i>pre token generation</i>,
+     * <i>define auth challenge</i>, <i>create auth challenge</i>, and <i>verify
+     * auth challenge response</i>. When Amazon Cognito invokes any of these
+     * functions, it passes a JSON payload, which the function receives as
+     * input. This payload contains a <code>clientMetadata</code> attribute,
+     * which provides the data that you assigned to the ClientMetadata parameter
+     * in your AdminRespondToAuthChallenge request. In your function code in AWS
+     * Lambda, you can process the <code>clientMetadata</code> value to enhance
+     * your workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     */
+    private java.util.Map<String, String> clientMetadata;
+
     /**
      * <p>
      * The ID of the Amazon Cognito user pool.
@@ -935,6 +991,443 @@ public AdminRespondToAuthChallengeRequest withContextData(ContextDataType contex
         return this;
     }
 
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the AdminRespondToAuthChallenge API action,
+     * Amazon Cognito invokes any functions that are assigned to the following
+     * triggers: <i>pre sign-up</i>, <i>custom message</i>, <i>post
+     * authentication</i>, <i>user migration</i>, <i>pre token generation</i>,
+     * <i>define auth challenge</i>, <i>create auth challenge</i>, and <i>verify
+     * auth challenge response</i>. When Amazon Cognito invokes any of these
+     * functions, it passes a JSON payload, which the function receives as
+     * input. This payload contains a <code>clientMetadata</code> attribute,
+     * which provides the data that you assigned to the ClientMetadata parameter
+     * in your AdminRespondToAuthChallenge request. In your function code in AWS
+     * Lambda, you can process the <code>clientMetadata</code> value to enhance
+     * your workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     *
+     * @return <p>
+     *         A map of custom key-value pairs that you can provide as input for
+     *         any custom workflows that this action triggers.
+     *         </p>
+     *         <p>
+     *         You create custom workflows by assigning AWS Lambda functions to
+     *         user pool triggers. When you use the AdminRespondToAuthChallenge
+     *         API action, Amazon Cognito invokes any functions that are
+     *         assigned to the following triggers: <i>pre sign-up</i>, <i>custom
+     *         message</i>, <i>post authentication</i>, <i>user migration</i>,
+     *         <i>pre token generation</i>, <i>define auth challenge</i>,
+     *         <i>create auth challenge</i>, and <i>verify auth challenge
+     *         response</i>. When Amazon Cognito invokes any of these functions,
+     *         it passes a JSON payload, which the function receives as input.
+     *         This payload contains a <code>clientMetadata</code> attribute,
+     *         which provides the data that you assigned to the ClientMetadata
+     *         parameter in your AdminRespondToAuthChallenge request. In your
+     *         function code in AWS Lambda, you can process the
+     *         <code>clientMetadata</code> value to enhance your workflow for
+     *         your specific needs.
+     *         </p>
+     *         <p>
+     *         For more information, see <a href=
+     *         "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *         >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     *         <i>Amazon Cognito Developer Guide</i>.
+     *         </p>
+     *         <note>
+     *         <p>
+     *         Take the following limitations into consideration when you use
+     *         the ClientMetadata parameter:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not store the ClientMetadata value. This data
+     *         is available only to AWS Lambda triggers that are assigned to a
+     *         user pool to support custom workflows. If your user pool
+     *         configuration does not include triggers, the ClientMetadata
+     *         parameter serves no purpose.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not validate the ClientMetadata value.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not encrypt the the ClientMetadata value, so
+     *         don't use it to provide sensitive information.
+     *         </p>
+     *         </li>
+     *         </ul>
+     *         </note>
+     */
+    public java.util.Map<String, String> getClientMetadata() {
+        return clientMetadata;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the AdminRespondToAuthChallenge API action,
+     * Amazon Cognito invokes any functions that are assigned to the following
+     * triggers: <i>pre sign-up</i>, <i>custom message</i>, <i>post
+     * authentication</i>, <i>user migration</i>, <i>pre token generation</i>,
+     * <i>define auth challenge</i>, <i>create auth challenge</i>, and <i>verify
+     * auth challenge response</i>. When Amazon Cognito invokes any of these
+     * functions, it passes a JSON payload, which the function receives as
+     * input. This payload contains a <code>clientMetadata</code> attribute,
+     * which provides the data that you assigned to the ClientMetadata parameter
+     * in your AdminRespondToAuthChallenge request. In your function code in AWS
+     * Lambda, you can process the <code>clientMetadata</code> value to enhance
+     * your workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     *
+     * @param clientMetadata <p>
+     *            A map of custom key-value pairs that you can provide as input
+     *            for any custom workflows that this action triggers.
+     *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the
+     *            AdminRespondToAuthChallenge API action, Amazon Cognito invokes
+     *            any functions that are assigned to the following triggers:
+     *            <i>pre sign-up</i>, <i>custom message</i>, <i>post
+     *            authentication</i>, <i>user migration</i>, <i>pre token
+     *            generation</i>, <i>define auth challenge</i>, <i>create auth
+     *            challenge</i>, and <i>verify auth challenge response</i>. When
+     *            Amazon Cognito invokes any of these functions, it passes a
+     *            JSON payload, which the function receives as input. This
+     *            payload contains a <code>clientMetadata</code> attribute,
+     *            which provides the data that you assigned to the
+     *            ClientMetadata parameter in your AdminRespondToAuthChallenge
+     *            request. In your function code in AWS Lambda, you can process
+     *            the <code>clientMetadata</code> value to enhance your workflow
+     *            for your specific needs.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
+     */
+    public void setClientMetadata(java.util.Map<String, String> clientMetadata) {
+        this.clientMetadata = clientMetadata;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the AdminRespondToAuthChallenge API action,
+     * Amazon Cognito invokes any functions that are assigned to the following
+     * triggers: <i>pre sign-up</i>, <i>custom message</i>, <i>post
+     * authentication</i>, <i>user migration</i>, <i>pre token generation</i>,
+     * <i>define auth challenge</i>, <i>create auth challenge</i>, and <i>verify
+     * auth challenge response</i>. When Amazon Cognito invokes any of these
+     * functions, it passes a JSON payload, which the function receives as
+     * input. This payload contains a <code>clientMetadata</code> attribute,
+     * which provides the data that you assigned to the ClientMetadata parameter
+     * in your AdminRespondToAuthChallenge request. In your function code in AWS
+     * Lambda, you can process the <code>clientMetadata</code> value to enhance
+     * your workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param clientMetadata <p>
+     *            A map of custom key-value pairs that you can provide as input
+     *            for any custom workflows that this action triggers.
+     *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the
+     *            AdminRespondToAuthChallenge API action, Amazon Cognito invokes
+     *            any functions that are assigned to the following triggers:
+     *            <i>pre sign-up</i>, <i>custom message</i>, <i>post
+     *            authentication</i>, <i>user migration</i>, <i>pre token
+     *            generation</i>, <i>define auth challenge</i>, <i>create auth
+     *            challenge</i>, and <i>verify auth challenge response</i>. When
+     *            Amazon Cognito invokes any of these functions, it passes a
+     *            JSON payload, which the function receives as input. This
+     *            payload contains a <code>clientMetadata</code> attribute,
+     *            which provides the data that you assigned to the
+     *            ClientMetadata parameter in your AdminRespondToAuthChallenge
+     *            request. In your function code in AWS Lambda, you can process
+     *            the <code>clientMetadata</code> value to enhance your workflow
+     *            for your specific needs.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public AdminRespondToAuthChallengeRequest withClientMetadata(
+            java.util.Map<String, String> clientMetadata) {
+        this.clientMetadata = clientMetadata;
+        return this;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the AdminRespondToAuthChallenge API action,
+     * Amazon Cognito invokes any functions that are assigned to the following
+     * triggers: <i>pre sign-up</i>, <i>custom message</i>, <i>post
+     * authentication</i>, <i>user migration</i>, <i>pre token generation</i>,
+     * <i>define auth challenge</i>, <i>create auth challenge</i>, and <i>verify
+     * auth challenge response</i>. When Amazon Cognito invokes any of these
+     * functions, it passes a JSON payload, which the function receives as
+     * input. This payload contains a <code>clientMetadata</code> attribute,
+     * which provides the data that you assigned to the ClientMetadata parameter
+     * in your AdminRespondToAuthChallenge request. In your function code in AWS
+     * Lambda, you can process the <code>clientMetadata</code> value to enhance
+     * your workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
+     * The method adds a new key-value pair into ClientMetadata parameter, and
+     * returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param key The key of the entry to be added into ClientMetadata.
+     * @param value The corresponding value of the entry to be added into
+     *            ClientMetadata.
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public AdminRespondToAuthChallengeRequest addClientMetadataEntry(String key, String value) {
+        if (null == this.clientMetadata) {
+            this.clientMetadata = new java.util.HashMap<String, String>();
+        }
+        if (this.clientMetadata.containsKey(key))
+            throw new IllegalArgumentException("Duplicated keys (" + key.toString()
+                    + ") are provided.");
+        this.clientMetadata.put(key, value);
+        return this;
+    }
+
+    /**
+     * Removes all the entries added into ClientMetadata.
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     */
+    public AdminRespondToAuthChallengeRequest clearClientMetadataEntries() {
+        this.clientMetadata = null;
+        return this;
+    }
+
     /**
      * Returns a string representation of this object; useful for testing and
      * debugging.
@@ -959,7 +1452,9 @@ public String toString() {
         if (getAnalyticsMetadata() != null)
             sb.append("AnalyticsMetadata: " + getAnalyticsMetadata() + ",");
         if (getContextData() != null)
-            sb.append("ContextData: " + getContextData());
+            sb.append("ContextData: " + getContextData() + ",");
+        if (getClientMetadata() != null)
+            sb.append("ClientMetadata: " + getClientMetadata());
         sb.append("}");
         return sb.toString();
     }
@@ -980,6 +1475,8 @@ public int hashCode() {
                 + ((getAnalyticsMetadata() == null) ? 0 : getAnalyticsMetadata().hashCode());
         hashCode = prime * hashCode
                 + ((getContextData() == null) ? 0 : getContextData().hashCode());
+        hashCode = prime * hashCode
+                + ((getClientMetadata() == null) ? 0 : getClientMetadata().hashCode());
         return hashCode;
     }
 
@@ -1027,6 +1524,11 @@ public boolean equals(Object obj) {
         if (other.getContextData() != null
                 && other.getContextData().equals(this.getContextData()) == false)
             return false;
+        if (other.getClientMetadata() == null ^ this.getClientMetadata() == null)
+            return false;
+        if (other.getClientMetadata() != null
+                && other.getClientMetadata().equals(this.getClientMetadata()) == false)
+            return false;
         return true;
     }
 }
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminSetUserMFAPreferenceRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminSetUserMFAPreferenceRequest.java
index 39e571f8c9..32a27c963d 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminSetUserMFAPreferenceRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminSetUserMFAPreferenceRequest.java
@@ -21,7 +21,12 @@
 
 /**
  * <p>
- * Sets the user's multi-factor authentication (MFA) preference.
+ * Sets the user's multi-factor authentication (MFA) preference, including which
+ * MFA options are enabled and if any are preferred. Only one factor can be set
+ * as preferred. The preferred MFA factor will be used to authenticate a user if
+ * multiple factors are enabled. If multiple options are enabled and no
+ * preference is set, a challenge to choose an MFA option will be returned
+ * during sign in.
  * </p>
  */
 public class AdminSetUserMFAPreferenceRequest extends AmazonWebServiceRequest implements
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminSetUserPasswordRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminSetUserPasswordRequest.java
index a5bedfe2ae..493d4bb644 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminSetUserPasswordRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminSetUserPasswordRequest.java
@@ -19,9 +19,30 @@
 
 import com.amazonaws.AmazonWebServiceRequest;
 
+/**
+ * <p>
+ * Sets the specified user's password in a user pool as an administrator. Works
+ * on any user.
+ * </p>
+ * <p>
+ * The password can be temporary or permanent. If it is temporary, the user
+ * status will be placed into the <code>FORCE_CHANGE_PASSWORD</code> state. When
+ * the user next tries to sign in, the InitiateAuth/AdminInitiateAuth response
+ * will contain the <code>NEW_PASSWORD_REQUIRED</code> challenge. If the user
+ * does not sign in before it expires, the user will not be able to sign in and
+ * their password will need to be reset by an administrator.
+ * </p>
+ * <p>
+ * Once the user has set a new password, or the password is permanent, the user
+ * status will be set to <code>Confirmed</code>.
+ * </p>
+ */
 public class AdminSetUserPasswordRequest extends AmazonWebServiceRequest implements Serializable {
     /**
-     * The new value for the userPoolId property for this object.
+     * <p>
+     * The user pool ID for the user pool where you want to set the user's
+     * password.
+     * </p>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Length: </b>1 - 55<br/>
@@ -30,7 +51,9 @@
     private String userPoolId;
 
     /**
-     * The new value for the username property for this object.
+     * <p>
+     * The user name of the user whose password you wish to set.
+     * </p>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Length: </b>1 - 128<br/>
@@ -39,7 +62,9 @@
     private String username;
 
     /**
-     * The new value for the password property for this object.
+     * <p>
+     * The password for the user.
+     * </p>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Length: </b>6 - 256<br/>
@@ -48,39 +73,56 @@
     private String password;
 
     /**
-     * The new value for the permanent property for this object.
+     * <p>
+     * <code>True</code> if the password is permanent, <code>False</code> if it
+     * is temporary.
+     * </p>
      */
     private Boolean permanent;
 
     /**
-     * Returns the value of the userPoolId property for this object.
+     * <p>
+     * The user pool ID for the user pool where you want to set the user's
+     * password.
+     * </p>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Length: </b>1 - 55<br/>
      * <b>Pattern: </b>[\w-]+_[0-9a-zA-Z]+<br/>
      *
-     * @return The value of the userPoolId property for this object.
+     * @return <p>
+     *         The user pool ID for the user pool where you want to set the
+     *         user's password.
+     *         </p>
      */
     public String getUserPoolId() {
         return userPoolId;
     }
 
     /**
-     * Sets the value of userPoolId
+     * <p>
+     * The user pool ID for the user pool where you want to set the user's
+     * password.
+     * </p>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Length: </b>1 - 55<br/>
      * <b>Pattern: </b>[\w-]+_[0-9a-zA-Z]+<br/>
      *
-     * @param userPoolId The new value for the userPoolId property for this
-     *            object.
+     * @param userPoolId <p>
+     *            The user pool ID for the user pool where you want to set the
+     *            user's password.
+     *            </p>
      */
     public void setUserPoolId(String userPoolId) {
         this.userPoolId = userPoolId;
     }
 
     /**
-     * Sets the value of the userPoolId property for this object.
+     * <p>
+     * The user pool ID for the user pool where you want to set the user's
+     * password.
+     * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
@@ -89,8 +131,10 @@ public void setUserPoolId(String userPoolId) {
      * <b>Length: </b>1 - 55<br/>
      * <b>Pattern: </b>[\w-]+_[0-9a-zA-Z]+<br/>
      *
-     * @param userPoolId The new value for the userPoolId property for this
-     *            object.
+     * @param userPoolId <p>
+     *            The user pool ID for the user pool where you want to set the
+     *            user's password.
+     *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
      */
@@ -100,33 +144,43 @@ public AdminSetUserPasswordRequest withUserPoolId(String userPoolId) {
     }
 
     /**
-     * Returns the value of the username property for this object.
+     * <p>
+     * The user name of the user whose password you wish to set.
+     * </p>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Length: </b>1 - 128<br/>
      * <b>Pattern: </b>[\p{L}\p{M}\p{S}\p{N}\p{P}]+<br/>
      *
-     * @return The value of the username property for this object.
+     * @return <p>
+     *         The user name of the user whose password you wish to set.
+     *         </p>
      */
     public String getUsername() {
         return username;
     }
 
     /**
-     * Sets the value of username
+     * <p>
+     * The user name of the user whose password you wish to set.
+     * </p>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Length: </b>1 - 128<br/>
      * <b>Pattern: </b>[\p{L}\p{M}\p{S}\p{N}\p{P}]+<br/>
      *
-     * @param username The new value for the username property for this object.
+     * @param username <p>
+     *            The user name of the user whose password you wish to set.
+     *            </p>
      */
     public void setUsername(String username) {
         this.username = username;
     }
 
     /**
-     * Sets the value of the username property for this object.
+     * <p>
+     * The user name of the user whose password you wish to set.
+     * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
@@ -135,7 +189,9 @@ public void setUsername(String username) {
      * <b>Length: </b>1 - 128<br/>
      * <b>Pattern: </b>[\p{L}\p{M}\p{S}\p{N}\p{P}]+<br/>
      *
-     * @param username The new value for the username property for this object.
+     * @param username <p>
+     *            The user name of the user whose password you wish to set.
+     *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
      */
@@ -145,33 +201,43 @@ public AdminSetUserPasswordRequest withUsername(String username) {
     }
 
     /**
-     * Returns the value of the password property for this object.
+     * <p>
+     * The password for the user.
+     * </p>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Length: </b>6 - 256<br/>
      * <b>Pattern: </b>[\S]+<br/>
      *
-     * @return The value of the password property for this object.
+     * @return <p>
+     *         The password for the user.
+     *         </p>
      */
     public String getPassword() {
         return password;
     }
 
     /**
-     * Sets the value of password
+     * <p>
+     * The password for the user.
+     * </p>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Length: </b>6 - 256<br/>
      * <b>Pattern: </b>[\S]+<br/>
      *
-     * @param password The new value for the password property for this object.
+     * @param password <p>
+     *            The password for the user.
+     *            </p>
      */
     public void setPassword(String password) {
         this.password = password;
     }
 
     /**
-     * Sets the value of the password property for this object.
+     * <p>
+     * The password for the user.
+     * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
@@ -180,7 +246,9 @@ public void setPassword(String password) {
      * <b>Length: </b>6 - 256<br/>
      * <b>Pattern: </b>[\S]+<br/>
      *
-     * @param password The new value for the password property for this object.
+     * @param password <p>
+     *            The password for the user.
+     *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
      */
@@ -190,41 +258,63 @@ public AdminSetUserPasswordRequest withPassword(String password) {
     }
 
     /**
-     * Returns the value of the permanent property for this object.
+     * <p>
+     * <code>True</code> if the password is permanent, <code>False</code> if it
+     * is temporary.
+     * </p>
      *
-     * @return The value of the permanent property for this object.
+     * @return <p>
+     *         <code>True</code> if the password is permanent,
+     *         <code>False</code> if it is temporary.
+     *         </p>
      */
     public Boolean isPermanent() {
         return permanent;
     }
 
     /**
-     * Returns the value of the permanent property for this object.
+     * <p>
+     * <code>True</code> if the password is permanent, <code>False</code> if it
+     * is temporary.
+     * </p>
      *
-     * @return The value of the permanent property for this object.
+     * @return <p>
+     *         <code>True</code> if the password is permanent,
+     *         <code>False</code> if it is temporary.
+     *         </p>
      */
     public Boolean getPermanent() {
         return permanent;
     }
 
     /**
-     * Sets the value of permanent
+     * <p>
+     * <code>True</code> if the password is permanent, <code>False</code> if it
+     * is temporary.
+     * </p>
      *
-     * @param permanent The new value for the permanent property for this
-     *            object.
+     * @param permanent <p>
+     *            <code>True</code> if the password is permanent,
+     *            <code>False</code> if it is temporary.
+     *            </p>
      */
     public void setPermanent(Boolean permanent) {
         this.permanent = permanent;
     }
 
     /**
-     * Sets the value of the permanent property for this object.
+     * <p>
+     * <code>True</code> if the password is permanent, <code>False</code> if it
+     * is temporary.
+     * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
      *
-     * @param permanent The new value for the permanent property for this
-     *            object.
+     * @param permanent <p>
+     *            <code>True</code> if the password is permanent,
+     *            <code>False</code> if it is temporary.
+     *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
      */
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminSetUserSettingsRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminSetUserSettingsRequest.java
index 059ff55364..21967a7cf9 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminSetUserSettingsRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminSetUserSettingsRequest.java
@@ -21,17 +21,16 @@
 
 /**
  * <p>
- * Sets all the user settings for a specified user name. Works on any user.
- * </p>
- * <p>
- * Requires developer credentials.
+ * <i>This action is no longer supported.</i> You can use it to configure only
+ * SMS MFA. You can't use it to configure TOTP software token MFA. To configure
+ * either type of MFA, use the <a>AdminSetUserMFAPreference</a> action instead.
  * </p>
  */
 public class AdminSetUserSettingsRequest extends AmazonWebServiceRequest implements Serializable {
     /**
      * <p>
-     * The user pool ID for the user pool where you want to set the user's
-     * settings, such as MFA options.
+     * The ID of the user pool that contains the user that you are setting
+     * options for.
      * </p>
      * <p>
      * <b>Constraints:</b><br/>
@@ -42,7 +41,7 @@
 
     /**
      * <p>
-     * The user name of the user for whom you wish to set user settings.
+     * The user name of the user that you are setting options for.
      * </p>
      * <p>
      * <b>Constraints:</b><br/>
@@ -53,15 +52,16 @@
 
     /**
      * <p>
-     * Specifies the options for MFA (e.g., email or phone number).
+     * You can use this parameter only to set an SMS configuration that uses SMS
+     * for delivery.
      * </p>
      */
     private java.util.List<MFAOptionType> mFAOptions;
 
     /**
      * <p>
-     * The user pool ID for the user pool where you want to set the user's
-     * settings, such as MFA options.
+     * The ID of the user pool that contains the user that you are setting
+     * options for.
      * </p>
      * <p>
      * <b>Constraints:</b><br/>
@@ -69,8 +69,8 @@
      * <b>Pattern: </b>[\w-]+_[0-9a-zA-Z]+<br/>
      *
      * @return <p>
-     *         The user pool ID for the user pool where you want to set the
-     *         user's settings, such as MFA options.
+     *         The ID of the user pool that contains the user that you are
+     *         setting options for.
      *         </p>
      */
     public String getUserPoolId() {
@@ -79,8 +79,8 @@ public String getUserPoolId() {
 
     /**
      * <p>
-     * The user pool ID for the user pool where you want to set the user's
-     * settings, such as MFA options.
+     * The ID of the user pool that contains the user that you are setting
+     * options for.
      * </p>
      * <p>
      * <b>Constraints:</b><br/>
@@ -88,8 +88,8 @@ public String getUserPoolId() {
      * <b>Pattern: </b>[\w-]+_[0-9a-zA-Z]+<br/>
      *
      * @param userPoolId <p>
-     *            The user pool ID for the user pool where you want to set the
-     *            user's settings, such as MFA options.
+     *            The ID of the user pool that contains the user that you are
+     *            setting options for.
      *            </p>
      */
     public void setUserPoolId(String userPoolId) {
@@ -98,8 +98,8 @@ public void setUserPoolId(String userPoolId) {
 
     /**
      * <p>
-     * The user pool ID for the user pool where you want to set the user's
-     * settings, such as MFA options.
+     * The ID of the user pool that contains the user that you are setting
+     * options for.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
@@ -110,8 +110,8 @@ public void setUserPoolId(String userPoolId) {
      * <b>Pattern: </b>[\w-]+_[0-9a-zA-Z]+<br/>
      *
      * @param userPoolId <p>
-     *            The user pool ID for the user pool where you want to set the
-     *            user's settings, such as MFA options.
+     *            The ID of the user pool that contains the user that you are
+     *            setting options for.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
@@ -123,7 +123,7 @@ public AdminSetUserSettingsRequest withUserPoolId(String userPoolId) {
 
     /**
      * <p>
-     * The user name of the user for whom you wish to set user settings.
+     * The user name of the user that you are setting options for.
      * </p>
      * <p>
      * <b>Constraints:</b><br/>
@@ -131,7 +131,7 @@ public AdminSetUserSettingsRequest withUserPoolId(String userPoolId) {
      * <b>Pattern: </b>[\p{L}\p{M}\p{S}\p{N}\p{P}]+<br/>
      *
      * @return <p>
-     *         The user name of the user for whom you wish to set user settings.
+     *         The user name of the user that you are setting options for.
      *         </p>
      */
     public String getUsername() {
@@ -140,7 +140,7 @@ public String getUsername() {
 
     /**
      * <p>
-     * The user name of the user for whom you wish to set user settings.
+     * The user name of the user that you are setting options for.
      * </p>
      * <p>
      * <b>Constraints:</b><br/>
@@ -148,8 +148,7 @@ public String getUsername() {
      * <b>Pattern: </b>[\p{L}\p{M}\p{S}\p{N}\p{P}]+<br/>
      *
      * @param username <p>
-     *            The user name of the user for whom you wish to set user
-     *            settings.
+     *            The user name of the user that you are setting options for.
      *            </p>
      */
     public void setUsername(String username) {
@@ -158,7 +157,7 @@ public void setUsername(String username) {
 
     /**
      * <p>
-     * The user name of the user for whom you wish to set user settings.
+     * The user name of the user that you are setting options for.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
@@ -169,8 +168,7 @@ public void setUsername(String username) {
      * <b>Pattern: </b>[\p{L}\p{M}\p{S}\p{N}\p{P}]+<br/>
      *
      * @param username <p>
-     *            The user name of the user for whom you wish to set user
-     *            settings.
+     *            The user name of the user that you are setting options for.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
@@ -182,11 +180,13 @@ public AdminSetUserSettingsRequest withUsername(String username) {
 
     /**
      * <p>
-     * Specifies the options for MFA (e.g., email or phone number).
+     * You can use this parameter only to set an SMS configuration that uses SMS
+     * for delivery.
      * </p>
      *
      * @return <p>
-     *         Specifies the options for MFA (e.g., email or phone number).
+     *         You can use this parameter only to set an SMS configuration that
+     *         uses SMS for delivery.
      *         </p>
      */
     public java.util.List<MFAOptionType> getMFAOptions() {
@@ -195,11 +195,13 @@ public AdminSetUserSettingsRequest withUsername(String username) {
 
     /**
      * <p>
-     * Specifies the options for MFA (e.g., email or phone number).
+     * You can use this parameter only to set an SMS configuration that uses SMS
+     * for delivery.
      * </p>
      *
      * @param mFAOptions <p>
-     *            Specifies the options for MFA (e.g., email or phone number).
+     *            You can use this parameter only to set an SMS configuration
+     *            that uses SMS for delivery.
      *            </p>
      */
     public void setMFAOptions(java.util.Collection<MFAOptionType> mFAOptions) {
@@ -213,14 +215,16 @@ public void setMFAOptions(java.util.Collection<MFAOptionType> mFAOptions) {
 
     /**
      * <p>
-     * Specifies the options for MFA (e.g., email or phone number).
+     * You can use this parameter only to set an SMS configuration that uses SMS
+     * for delivery.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
      *
      * @param mFAOptions <p>
-     *            Specifies the options for MFA (e.g., email or phone number).
+     *            You can use this parameter only to set an SMS configuration
+     *            that uses SMS for delivery.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
@@ -237,14 +241,16 @@ public AdminSetUserSettingsRequest withMFAOptions(MFAOptionType... mFAOptions) {
 
     /**
      * <p>
-     * Specifies the options for MFA (e.g., email or phone number).
+     * You can use this parameter only to set an SMS configuration that uses SMS
+     * for delivery.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
      *
      * @param mFAOptions <p>
-     *            Specifies the options for MFA (e.g., email or phone number).
+     *            You can use this parameter only to set an SMS configuration
+     *            that uses SMS for delivery.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminUpdateDeviceStatusRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminUpdateDeviceStatusRequest.java
index a2cf1ad869..6d605a914c 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminUpdateDeviceStatusRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminUpdateDeviceStatusRequest.java
@@ -24,7 +24,7 @@
  * Updates the device status as an administrator.
  * </p>
  * <p>
- * Requires developer credentials.
+ * Calling this action requires developer credentials.
  * </p>
  */
 public class AdminUpdateDeviceStatusRequest extends AmazonWebServiceRequest implements Serializable {
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminUpdateUserAttributesRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminUpdateUserAttributesRequest.java
index 1b24c9939d..2d439cf0a3 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminUpdateUserAttributesRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminUpdateUserAttributesRequest.java
@@ -33,7 +33,7 @@
  * phone and email as verified.
  * </p>
  * <p>
- * Requires developer credentials.
+ * Calling this action requires developer credentials.
  * </p>
  */
 public class AdminUpdateUserAttributesRequest extends AmazonWebServiceRequest implements
@@ -72,6 +72,59 @@
      */
     private java.util.List<AttributeType> userAttributes;
 
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the AdminUpdateUserAttributes API action,
+     * Amazon Cognito invokes the function that is assigned to the <i>custom
+     * message</i> trigger. When Amazon Cognito invokes this function, it passes
+     * a JSON payload, which the function receives as input. This payload
+     * contains a <code>clientMetadata</code> attribute, which provides the data
+     * that you assigned to the ClientMetadata parameter in your
+     * AdminUpdateUserAttributes request. In your function code in AWS Lambda,
+     * you can process the <code>clientMetadata</code> value to enhance your
+     * workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     */
+    private java.util.Map<String, String> clientMetadata;
+
     /**
      * <p>
      * The user pool ID for the user pool where you want to update user
@@ -302,6 +355,419 @@ public AdminUpdateUserAttributesRequest withUserAttributes(
         return this;
     }
 
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the AdminUpdateUserAttributes API action,
+     * Amazon Cognito invokes the function that is assigned to the <i>custom
+     * message</i> trigger. When Amazon Cognito invokes this function, it passes
+     * a JSON payload, which the function receives as input. This payload
+     * contains a <code>clientMetadata</code> attribute, which provides the data
+     * that you assigned to the ClientMetadata parameter in your
+     * AdminUpdateUserAttributes request. In your function code in AWS Lambda,
+     * you can process the <code>clientMetadata</code> value to enhance your
+     * workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     *
+     * @return <p>
+     *         A map of custom key-value pairs that you can provide as input for
+     *         any custom workflows that this action triggers.
+     *         </p>
+     *         <p>
+     *         You create custom workflows by assigning AWS Lambda functions to
+     *         user pool triggers. When you use the AdminUpdateUserAttributes
+     *         API action, Amazon Cognito invokes the function that is assigned
+     *         to the <i>custom message</i> trigger. When Amazon Cognito invokes
+     *         this function, it passes a JSON payload, which the function
+     *         receives as input. This payload contains a
+     *         <code>clientMetadata</code> attribute, which provides the data
+     *         that you assigned to the ClientMetadata parameter in your
+     *         AdminUpdateUserAttributes request. In your function code in AWS
+     *         Lambda, you can process the <code>clientMetadata</code> value to
+     *         enhance your workflow for your specific needs.
+     *         </p>
+     *         <p>
+     *         For more information, see <a href=
+     *         "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *         >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     *         <i>Amazon Cognito Developer Guide</i>.
+     *         </p>
+     *         <note>
+     *         <p>
+     *         Take the following limitations into consideration when you use
+     *         the ClientMetadata parameter:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not store the ClientMetadata value. This data
+     *         is available only to AWS Lambda triggers that are assigned to a
+     *         user pool to support custom workflows. If your user pool
+     *         configuration does not include triggers, the ClientMetadata
+     *         parameter serves no purpose.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not validate the ClientMetadata value.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not encrypt the the ClientMetadata value, so
+     *         don't use it to provide sensitive information.
+     *         </p>
+     *         </li>
+     *         </ul>
+     *         </note>
+     */
+    public java.util.Map<String, String> getClientMetadata() {
+        return clientMetadata;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the AdminUpdateUserAttributes API action,
+     * Amazon Cognito invokes the function that is assigned to the <i>custom
+     * message</i> trigger. When Amazon Cognito invokes this function, it passes
+     * a JSON payload, which the function receives as input. This payload
+     * contains a <code>clientMetadata</code> attribute, which provides the data
+     * that you assigned to the ClientMetadata parameter in your
+     * AdminUpdateUserAttributes request. In your function code in AWS Lambda,
+     * you can process the <code>clientMetadata</code> value to enhance your
+     * workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     *
+     * @param clientMetadata <p>
+     *            A map of custom key-value pairs that you can provide as input
+     *            for any custom workflows that this action triggers.
+     *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the
+     *            AdminUpdateUserAttributes API action, Amazon Cognito invokes
+     *            the function that is assigned to the <i>custom message</i>
+     *            trigger. When Amazon Cognito invokes this function, it passes
+     *            a JSON payload, which the function receives as input. This
+     *            payload contains a <code>clientMetadata</code> attribute,
+     *            which provides the data that you assigned to the
+     *            ClientMetadata parameter in your AdminUpdateUserAttributes
+     *            request. In your function code in AWS Lambda, you can process
+     *            the <code>clientMetadata</code> value to enhance your workflow
+     *            for your specific needs.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
+     */
+    public void setClientMetadata(java.util.Map<String, String> clientMetadata) {
+        this.clientMetadata = clientMetadata;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the AdminUpdateUserAttributes API action,
+     * Amazon Cognito invokes the function that is assigned to the <i>custom
+     * message</i> trigger. When Amazon Cognito invokes this function, it passes
+     * a JSON payload, which the function receives as input. This payload
+     * contains a <code>clientMetadata</code> attribute, which provides the data
+     * that you assigned to the ClientMetadata parameter in your
+     * AdminUpdateUserAttributes request. In your function code in AWS Lambda,
+     * you can process the <code>clientMetadata</code> value to enhance your
+     * workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param clientMetadata <p>
+     *            A map of custom key-value pairs that you can provide as input
+     *            for any custom workflows that this action triggers.
+     *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the
+     *            AdminUpdateUserAttributes API action, Amazon Cognito invokes
+     *            the function that is assigned to the <i>custom message</i>
+     *            trigger. When Amazon Cognito invokes this function, it passes
+     *            a JSON payload, which the function receives as input. This
+     *            payload contains a <code>clientMetadata</code> attribute,
+     *            which provides the data that you assigned to the
+     *            ClientMetadata parameter in your AdminUpdateUserAttributes
+     *            request. In your function code in AWS Lambda, you can process
+     *            the <code>clientMetadata</code> value to enhance your workflow
+     *            for your specific needs.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public AdminUpdateUserAttributesRequest withClientMetadata(
+            java.util.Map<String, String> clientMetadata) {
+        this.clientMetadata = clientMetadata;
+        return this;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the AdminUpdateUserAttributes API action,
+     * Amazon Cognito invokes the function that is assigned to the <i>custom
+     * message</i> trigger. When Amazon Cognito invokes this function, it passes
+     * a JSON payload, which the function receives as input. This payload
+     * contains a <code>clientMetadata</code> attribute, which provides the data
+     * that you assigned to the ClientMetadata parameter in your
+     * AdminUpdateUserAttributes request. In your function code in AWS Lambda,
+     * you can process the <code>clientMetadata</code> value to enhance your
+     * workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
+     * The method adds a new key-value pair into ClientMetadata parameter, and
+     * returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param key The key of the entry to be added into ClientMetadata.
+     * @param value The corresponding value of the entry to be added into
+     *            ClientMetadata.
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public AdminUpdateUserAttributesRequest addClientMetadataEntry(String key, String value) {
+        if (null == this.clientMetadata) {
+            this.clientMetadata = new java.util.HashMap<String, String>();
+        }
+        if (this.clientMetadata.containsKey(key))
+            throw new IllegalArgumentException("Duplicated keys (" + key.toString()
+                    + ") are provided.");
+        this.clientMetadata.put(key, value);
+        return this;
+    }
+
+    /**
+     * Removes all the entries added into ClientMetadata.
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     */
+    public AdminUpdateUserAttributesRequest clearClientMetadataEntries() {
+        this.clientMetadata = null;
+        return this;
+    }
+
     /**
      * Returns a string representation of this object; useful for testing and
      * debugging.
@@ -318,7 +784,9 @@ public String toString() {
         if (getUsername() != null)
             sb.append("Username: " + getUsername() + ",");
         if (getUserAttributes() != null)
-            sb.append("UserAttributes: " + getUserAttributes());
+            sb.append("UserAttributes: " + getUserAttributes() + ",");
+        if (getClientMetadata() != null)
+            sb.append("ClientMetadata: " + getClientMetadata());
         sb.append("}");
         return sb.toString();
     }
@@ -332,6 +800,8 @@ public int hashCode() {
         hashCode = prime * hashCode + ((getUsername() == null) ? 0 : getUsername().hashCode());
         hashCode = prime * hashCode
                 + ((getUserAttributes() == null) ? 0 : getUserAttributes().hashCode());
+        hashCode = prime * hashCode
+                + ((getClientMetadata() == null) ? 0 : getClientMetadata().hashCode());
         return hashCode;
     }
 
@@ -360,6 +830,11 @@ public boolean equals(Object obj) {
         if (other.getUserAttributes() != null
                 && other.getUserAttributes().equals(this.getUserAttributes()) == false)
             return false;
+        if (other.getClientMetadata() == null ^ this.getClientMetadata() == null)
+            return false;
+        if (other.getClientMetadata() != null
+                && other.getClientMetadata().equals(this.getClientMetadata()) == false)
+            return false;
         return true;
     }
 }
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminUserGlobalSignOutRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminUserGlobalSignOutRequest.java
index 05b47084c6..3923a488fc 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminUserGlobalSignOutRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/AdminUserGlobalSignOutRequest.java
@@ -24,7 +24,7 @@
  * Signs out users from all devices, as an administrator.
  * </p>
  * <p>
- * Requires developer credentials.
+ * Calling this action requires developer credentials.
  * </p>
  */
 public class AdminUserGlobalSignOutRequest extends AmazonWebServiceRequest implements Serializable {
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ConfirmForgotPasswordRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ConfirmForgotPasswordRequest.java
index 6b74b3ee79..9b9ac8135c 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ConfirmForgotPasswordRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ConfirmForgotPasswordRequest.java
@@ -101,6 +101,60 @@
      */
     private UserContextDataType userContextData;
 
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the ConfirmForgotPassword API action, Amazon
+     * Cognito invokes the functions that are assigned to the <i>post
+     * confirmation</i> and <i>pre mutation</i> triggers. When Amazon Cognito
+     * invokes either of these functions, it passes a JSON payload, which the
+     * function receives as input. This payload contains a
+     * <code>clientMetadata</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your ConfirmForgotPassword
+     * request. In your function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     */
+    private java.util.Map<String, String> clientMetadata;
+
     /**
      * <p>
      * The app client ID of the app associated with the user pool.
@@ -522,6 +576,424 @@ public ConfirmForgotPasswordRequest withUserContextData(UserContextDataType user
         return this;
     }
 
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the ConfirmForgotPassword API action, Amazon
+     * Cognito invokes the functions that are assigned to the <i>post
+     * confirmation</i> and <i>pre mutation</i> triggers. When Amazon Cognito
+     * invokes either of these functions, it passes a JSON payload, which the
+     * function receives as input. This payload contains a
+     * <code>clientMetadata</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your ConfirmForgotPassword
+     * request. In your function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     *
+     * @return <p>
+     *         A map of custom key-value pairs that you can provide as input for
+     *         any custom workflows that this action triggers.
+     *         </p>
+     *         <p>
+     *         You create custom workflows by assigning AWS Lambda functions to
+     *         user pool triggers. When you use the ConfirmForgotPassword API
+     *         action, Amazon Cognito invokes the functions that are assigned to
+     *         the <i>post confirmation</i> and <i>pre mutation</i> triggers.
+     *         When Amazon Cognito invokes either of these functions, it passes
+     *         a JSON payload, which the function receives as input. This
+     *         payload contains a <code>clientMetadata</code> attribute, which
+     *         provides the data that you assigned to the ClientMetadata
+     *         parameter in your ConfirmForgotPassword request. In your function
+     *         code in AWS Lambda, you can process the
+     *         <code>clientMetadata</code> value to enhance your workflow for
+     *         your specific needs.
+     *         </p>
+     *         <p>
+     *         For more information, see <a href=
+     *         "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *         >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     *         <i>Amazon Cognito Developer Guide</i>.
+     *         </p>
+     *         <note>
+     *         <p>
+     *         Take the following limitations into consideration when you use
+     *         the ClientMetadata parameter:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not store the ClientMetadata value. This data
+     *         is available only to AWS Lambda triggers that are assigned to a
+     *         user pool to support custom workflows. If your user pool
+     *         configuration does not include triggers, the ClientMetadata
+     *         parameter serves no purpose.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not validate the ClientMetadata value.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not encrypt the the ClientMetadata value, so
+     *         don't use it to provide sensitive information.
+     *         </p>
+     *         </li>
+     *         </ul>
+     *         </note>
+     */
+    public java.util.Map<String, String> getClientMetadata() {
+        return clientMetadata;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the ConfirmForgotPassword API action, Amazon
+     * Cognito invokes the functions that are assigned to the <i>post
+     * confirmation</i> and <i>pre mutation</i> triggers. When Amazon Cognito
+     * invokes either of these functions, it passes a JSON payload, which the
+     * function receives as input. This payload contains a
+     * <code>clientMetadata</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your ConfirmForgotPassword
+     * request. In your function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     *
+     * @param clientMetadata <p>
+     *            A map of custom key-value pairs that you can provide as input
+     *            for any custom workflows that this action triggers.
+     *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the ConfirmForgotPassword
+     *            API action, Amazon Cognito invokes the functions that are
+     *            assigned to the <i>post confirmation</i> and <i>pre
+     *            mutation</i> triggers. When Amazon Cognito invokes either of
+     *            these functions, it passes a JSON payload, which the function
+     *            receives as input. This payload contains a
+     *            <code>clientMetadata</code> attribute, which provides the data
+     *            that you assigned to the ClientMetadata parameter in your
+     *            ConfirmForgotPassword request. In your function code in AWS
+     *            Lambda, you can process the <code>clientMetadata</code> value
+     *            to enhance your workflow for your specific needs.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
+     */
+    public void setClientMetadata(java.util.Map<String, String> clientMetadata) {
+        this.clientMetadata = clientMetadata;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the ConfirmForgotPassword API action, Amazon
+     * Cognito invokes the functions that are assigned to the <i>post
+     * confirmation</i> and <i>pre mutation</i> triggers. When Amazon Cognito
+     * invokes either of these functions, it passes a JSON payload, which the
+     * function receives as input. This payload contains a
+     * <code>clientMetadata</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your ConfirmForgotPassword
+     * request. In your function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param clientMetadata <p>
+     *            A map of custom key-value pairs that you can provide as input
+     *            for any custom workflows that this action triggers.
+     *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the ConfirmForgotPassword
+     *            API action, Amazon Cognito invokes the functions that are
+     *            assigned to the <i>post confirmation</i> and <i>pre
+     *            mutation</i> triggers. When Amazon Cognito invokes either of
+     *            these functions, it passes a JSON payload, which the function
+     *            receives as input. This payload contains a
+     *            <code>clientMetadata</code> attribute, which provides the data
+     *            that you assigned to the ClientMetadata parameter in your
+     *            ConfirmForgotPassword request. In your function code in AWS
+     *            Lambda, you can process the <code>clientMetadata</code> value
+     *            to enhance your workflow for your specific needs.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public ConfirmForgotPasswordRequest withClientMetadata(
+            java.util.Map<String, String> clientMetadata) {
+        this.clientMetadata = clientMetadata;
+        return this;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the ConfirmForgotPassword API action, Amazon
+     * Cognito invokes the functions that are assigned to the <i>post
+     * confirmation</i> and <i>pre mutation</i> triggers. When Amazon Cognito
+     * invokes either of these functions, it passes a JSON payload, which the
+     * function receives as input. This payload contains a
+     * <code>clientMetadata</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your ConfirmForgotPassword
+     * request. In your function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
+     * The method adds a new key-value pair into ClientMetadata parameter, and
+     * returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param key The key of the entry to be added into ClientMetadata.
+     * @param value The corresponding value of the entry to be added into
+     *            ClientMetadata.
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public ConfirmForgotPasswordRequest addClientMetadataEntry(String key, String value) {
+        if (null == this.clientMetadata) {
+            this.clientMetadata = new java.util.HashMap<String, String>();
+        }
+        if (this.clientMetadata.containsKey(key))
+            throw new IllegalArgumentException("Duplicated keys (" + key.toString()
+                    + ") are provided.");
+        this.clientMetadata.put(key, value);
+        return this;
+    }
+
+    /**
+     * Removes all the entries added into ClientMetadata.
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     */
+    public ConfirmForgotPasswordRequest clearClientMetadataEntries() {
+        this.clientMetadata = null;
+        return this;
+    }
+
     /**
      * Returns a string representation of this object; useful for testing and
      * debugging.
@@ -546,7 +1018,9 @@ public String toString() {
         if (getAnalyticsMetadata() != null)
             sb.append("AnalyticsMetadata: " + getAnalyticsMetadata() + ",");
         if (getUserContextData() != null)
-            sb.append("UserContextData: " + getUserContextData());
+            sb.append("UserContextData: " + getUserContextData() + ",");
+        if (getClientMetadata() != null)
+            sb.append("ClientMetadata: " + getClientMetadata());
         sb.append("}");
         return sb.toString();
     }
@@ -566,6 +1040,8 @@ public int hashCode() {
                 + ((getAnalyticsMetadata() == null) ? 0 : getAnalyticsMetadata().hashCode());
         hashCode = prime * hashCode
                 + ((getUserContextData() == null) ? 0 : getUserContextData().hashCode());
+        hashCode = prime * hashCode
+                + ((getClientMetadata() == null) ? 0 : getClientMetadata().hashCode());
         return hashCode;
     }
 
@@ -612,6 +1088,11 @@ public boolean equals(Object obj) {
         if (other.getUserContextData() != null
                 && other.getUserContextData().equals(this.getUserContextData()) == false)
             return false;
+        if (other.getClientMetadata() == null ^ this.getClientMetadata() == null)
+            return false;
+        if (other.getClientMetadata() != null
+                && other.getClientMetadata().equals(this.getClientMetadata()) == false)
+            return false;
         return true;
     }
 }
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ConfirmSignUpRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ConfirmSignUpRequest.java
index 2448fd820a..b3133543bb 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ConfirmSignUpRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ConfirmSignUpRequest.java
@@ -102,6 +102,59 @@
      */
     private UserContextDataType userContextData;
 
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the ConfirmSignUp API action, Amazon Cognito
+     * invokes the function that is assigned to the <i>post confirmation</i>
+     * trigger. When Amazon Cognito invokes this function, it passes a JSON
+     * payload, which the function receives as input. This payload contains a
+     * <code>clientMetadata</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your ConfirmSignUp request.
+     * In your function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     */
+    private java.util.Map<String, String> clientMetadata;
+
     /**
      * <p>
      * The ID of the app client associated with the user pool.
@@ -567,6 +620,416 @@ public ConfirmSignUpRequest withUserContextData(UserContextDataType userContextD
         return this;
     }
 
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the ConfirmSignUp API action, Amazon Cognito
+     * invokes the function that is assigned to the <i>post confirmation</i>
+     * trigger. When Amazon Cognito invokes this function, it passes a JSON
+     * payload, which the function receives as input. This payload contains a
+     * <code>clientMetadata</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your ConfirmSignUp request.
+     * In your function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     *
+     * @return <p>
+     *         A map of custom key-value pairs that you can provide as input for
+     *         any custom workflows that this action triggers.
+     *         </p>
+     *         <p>
+     *         You create custom workflows by assigning AWS Lambda functions to
+     *         user pool triggers. When you use the ConfirmSignUp API action,
+     *         Amazon Cognito invokes the function that is assigned to the
+     *         <i>post confirmation</i> trigger. When Amazon Cognito invokes
+     *         this function, it passes a JSON payload, which the function
+     *         receives as input. This payload contains a
+     *         <code>clientMetadata</code> attribute, which provides the data
+     *         that you assigned to the ClientMetadata parameter in your
+     *         ConfirmSignUp request. In your function code in AWS Lambda, you
+     *         can process the <code>clientMetadata</code> value to enhance your
+     *         workflow for your specific needs.
+     *         </p>
+     *         <p>
+     *         For more information, see <a href=
+     *         "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *         >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     *         <i>Amazon Cognito Developer Guide</i>.
+     *         </p>
+     *         <note>
+     *         <p>
+     *         Take the following limitations into consideration when you use
+     *         the ClientMetadata parameter:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not store the ClientMetadata value. This data
+     *         is available only to AWS Lambda triggers that are assigned to a
+     *         user pool to support custom workflows. If your user pool
+     *         configuration does not include triggers, the ClientMetadata
+     *         parameter serves no purpose.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not validate the ClientMetadata value.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not encrypt the the ClientMetadata value, so
+     *         don't use it to provide sensitive information.
+     *         </p>
+     *         </li>
+     *         </ul>
+     *         </note>
+     */
+    public java.util.Map<String, String> getClientMetadata() {
+        return clientMetadata;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the ConfirmSignUp API action, Amazon Cognito
+     * invokes the function that is assigned to the <i>post confirmation</i>
+     * trigger. When Amazon Cognito invokes this function, it passes a JSON
+     * payload, which the function receives as input. This payload contains a
+     * <code>clientMetadata</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your ConfirmSignUp request.
+     * In your function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     *
+     * @param clientMetadata <p>
+     *            A map of custom key-value pairs that you can provide as input
+     *            for any custom workflows that this action triggers.
+     *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the ConfirmSignUp API
+     *            action, Amazon Cognito invokes the function that is assigned
+     *            to the <i>post confirmation</i> trigger. When Amazon Cognito
+     *            invokes this function, it passes a JSON payload, which the
+     *            function receives as input. This payload contains a
+     *            <code>clientMetadata</code> attribute, which provides the data
+     *            that you assigned to the ClientMetadata parameter in your
+     *            ConfirmSignUp request. In your function code in AWS Lambda,
+     *            you can process the <code>clientMetadata</code> value to
+     *            enhance your workflow for your specific needs.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
+     */
+    public void setClientMetadata(java.util.Map<String, String> clientMetadata) {
+        this.clientMetadata = clientMetadata;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the ConfirmSignUp API action, Amazon Cognito
+     * invokes the function that is assigned to the <i>post confirmation</i>
+     * trigger. When Amazon Cognito invokes this function, it passes a JSON
+     * payload, which the function receives as input. This payload contains a
+     * <code>clientMetadata</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your ConfirmSignUp request.
+     * In your function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param clientMetadata <p>
+     *            A map of custom key-value pairs that you can provide as input
+     *            for any custom workflows that this action triggers.
+     *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the ConfirmSignUp API
+     *            action, Amazon Cognito invokes the function that is assigned
+     *            to the <i>post confirmation</i> trigger. When Amazon Cognito
+     *            invokes this function, it passes a JSON payload, which the
+     *            function receives as input. This payload contains a
+     *            <code>clientMetadata</code> attribute, which provides the data
+     *            that you assigned to the ClientMetadata parameter in your
+     *            ConfirmSignUp request. In your function code in AWS Lambda,
+     *            you can process the <code>clientMetadata</code> value to
+     *            enhance your workflow for your specific needs.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public ConfirmSignUpRequest withClientMetadata(java.util.Map<String, String> clientMetadata) {
+        this.clientMetadata = clientMetadata;
+        return this;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the ConfirmSignUp API action, Amazon Cognito
+     * invokes the function that is assigned to the <i>post confirmation</i>
+     * trigger. When Amazon Cognito invokes this function, it passes a JSON
+     * payload, which the function receives as input. This payload contains a
+     * <code>clientMetadata</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your ConfirmSignUp request.
+     * In your function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
+     * The method adds a new key-value pair into ClientMetadata parameter, and
+     * returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param key The key of the entry to be added into ClientMetadata.
+     * @param value The corresponding value of the entry to be added into
+     *            ClientMetadata.
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public ConfirmSignUpRequest addClientMetadataEntry(String key, String value) {
+        if (null == this.clientMetadata) {
+            this.clientMetadata = new java.util.HashMap<String, String>();
+        }
+        if (this.clientMetadata.containsKey(key))
+            throw new IllegalArgumentException("Duplicated keys (" + key.toString()
+                    + ") are provided.");
+        this.clientMetadata.put(key, value);
+        return this;
+    }
+
+    /**
+     * Removes all the entries added into ClientMetadata.
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     */
+    public ConfirmSignUpRequest clearClientMetadataEntries() {
+        this.clientMetadata = null;
+        return this;
+    }
+
     /**
      * Returns a string representation of this object; useful for testing and
      * debugging.
@@ -591,7 +1054,9 @@ public String toString() {
         if (getAnalyticsMetadata() != null)
             sb.append("AnalyticsMetadata: " + getAnalyticsMetadata() + ",");
         if (getUserContextData() != null)
-            sb.append("UserContextData: " + getUserContextData());
+            sb.append("UserContextData: " + getUserContextData() + ",");
+        if (getClientMetadata() != null)
+            sb.append("ClientMetadata: " + getClientMetadata());
         sb.append("}");
         return sb.toString();
     }
@@ -612,6 +1077,8 @@ public int hashCode() {
                 + ((getAnalyticsMetadata() == null) ? 0 : getAnalyticsMetadata().hashCode());
         hashCode = prime * hashCode
                 + ((getUserContextData() == null) ? 0 : getUserContextData().hashCode());
+        hashCode = prime * hashCode
+                + ((getClientMetadata() == null) ? 0 : getClientMetadata().hashCode());
         return hashCode;
     }
 
@@ -659,6 +1126,11 @@ public boolean equals(Object obj) {
         if (other.getUserContextData() != null
                 && other.getUserContextData().equals(this.getUserContextData()) == false)
             return false;
+        if (other.getClientMetadata() == null ^ this.getClientMetadata() == null)
+            return false;
+        if (other.getClientMetadata() != null
+                && other.getClientMetadata().equals(this.getClientMetadata()) == false)
+            return false;
         return true;
     }
 }
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/CreateGroupRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/CreateGroupRequest.java
index 733fdf5afe..fd6f75eecb 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/CreateGroupRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/CreateGroupRequest.java
@@ -24,7 +24,7 @@
  * Creates a new group in the specified user pool.
  * </p>
  * <p>
- * Requires developer credentials.
+ * Calling this action requires developer credentials.
  * </p>
  */
 public class CreateGroupRequest extends AmazonWebServiceRequest implements Serializable {
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/CreateUserPoolClientRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/CreateUserPoolClientRequest.java
index 20e7285084..6ec33c7817 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/CreateUserPoolClientRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/CreateUserPoolClientRequest.java
@@ -213,7 +213,8 @@
      * <p>
      * A list of allowed <code>OAuth</code> scopes. Currently supported values
      * are <code>"phone"</code>, <code>"email"</code>, <code>"openid"</code>,
-     * and <code>"Cognito"</code>.
+     * and <code>"Cognito"</code>. In addition to these values, custom scopes
+     * created in Resource Servers are also supported.
      * </p>
      */
     private java.util.List<String> allowedOAuthScopes;
@@ -1690,13 +1691,16 @@ public CreateUserPoolClientRequest withAllowedOAuthFlows(
      * <p>
      * A list of allowed <code>OAuth</code> scopes. Currently supported values
      * are <code>"phone"</code>, <code>"email"</code>, <code>"openid"</code>,
-     * and <code>"Cognito"</code>.
+     * and <code>"Cognito"</code>. In addition to these values, custom scopes
+     * created in Resource Servers are also supported.
      * </p>
      *
      * @return <p>
      *         A list of allowed <code>OAuth</code> scopes. Currently supported
      *         values are <code>"phone"</code>, <code>"email"</code>,
-     *         <code>"openid"</code>, and <code>"Cognito"</code>.
+     *         <code>"openid"</code>, and <code>"Cognito"</code>. In addition to
+     *         these values, custom scopes created in Resource Servers are also
+     *         supported.
      *         </p>
      */
     public java.util.List<String> getAllowedOAuthScopes() {
@@ -1707,14 +1711,16 @@ public CreateUserPoolClientRequest withAllowedOAuthFlows(
      * <p>
      * A list of allowed <code>OAuth</code> scopes. Currently supported values
      * are <code>"phone"</code>, <code>"email"</code>, <code>"openid"</code>,
-     * and <code>"Cognito"</code>.
+     * and <code>"Cognito"</code>. In addition to these values, custom scopes
+     * created in Resource Servers are also supported.
      * </p>
      *
      * @param allowedOAuthScopes <p>
      *            A list of allowed <code>OAuth</code> scopes. Currently
      *            supported values are <code>"phone"</code>,
      *            <code>"email"</code>, <code>"openid"</code>, and
-     *            <code>"Cognito"</code>.
+     *            <code>"Cognito"</code>. In addition to these values, custom
+     *            scopes created in Resource Servers are also supported.
      *            </p>
      */
     public void setAllowedOAuthScopes(java.util.Collection<String> allowedOAuthScopes) {
@@ -1730,7 +1736,8 @@ public void setAllowedOAuthScopes(java.util.Collection<String> allowedOAuthScope
      * <p>
      * A list of allowed <code>OAuth</code> scopes. Currently supported values
      * are <code>"phone"</code>, <code>"email"</code>, <code>"openid"</code>,
-     * and <code>"Cognito"</code>.
+     * and <code>"Cognito"</code>. In addition to these values, custom scopes
+     * created in Resource Servers are also supported.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
@@ -1740,7 +1747,8 @@ public void setAllowedOAuthScopes(java.util.Collection<String> allowedOAuthScope
      *            A list of allowed <code>OAuth</code> scopes. Currently
      *            supported values are <code>"phone"</code>,
      *            <code>"email"</code>, <code>"openid"</code>, and
-     *            <code>"Cognito"</code>.
+     *            <code>"Cognito"</code>. In addition to these values, custom
+     *            scopes created in Resource Servers are also supported.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
@@ -1759,7 +1767,8 @@ public CreateUserPoolClientRequest withAllowedOAuthScopes(String... allowedOAuth
      * <p>
      * A list of allowed <code>OAuth</code> scopes. Currently supported values
      * are <code>"phone"</code>, <code>"email"</code>, <code>"openid"</code>,
-     * and <code>"Cognito"</code>.
+     * and <code>"Cognito"</code>. In addition to these values, custom scopes
+     * created in Resource Servers are also supported.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
@@ -1769,7 +1778,8 @@ public CreateUserPoolClientRequest withAllowedOAuthScopes(String... allowedOAuth
      *            A list of allowed <code>OAuth</code> scopes. Currently
      *            supported values are <code>"phone"</code>,
      *            <code>"email"</code>, <code>"openid"</code>, and
-     *            <code>"Cognito"</code>.
+     *            <code>"Cognito"</code>. In addition to these values, custom
+     *            scopes created in Resource Servers are also supported.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/DeleteGroupRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/DeleteGroupRequest.java
index 6f233d6de4..9cdb354dc1 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/DeleteGroupRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/DeleteGroupRequest.java
@@ -24,7 +24,7 @@
  * Deletes a group. Currently only groups with no members can be deleted.
  * </p>
  * <p>
- * Requires developer credentials.
+ * Calling this action requires developer credentials.
  * </p>
  */
 public class DeleteGroupRequest extends AmazonWebServiceRequest implements Serializable {
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ForgotPasswordRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ForgotPasswordRequest.java
index 127e60bad2..0968555aa8 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ForgotPasswordRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ForgotPasswordRequest.java
@@ -85,6 +85,60 @@
      */
     private AnalyticsMetadataType analyticsMetadata;
 
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the ForgotPassword API action, Amazon Cognito
+     * invokes any functions that are assigned to the following triggers: <i>pre
+     * sign-up</i>, <i>custom message</i>, and <i>user migration</i>. When
+     * Amazon Cognito invokes any of these functions, it passes a JSON payload,
+     * which the function receives as input. This payload contains a
+     * <code>clientMetadata</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your ForgotPassword request.
+     * In your function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     */
+    private java.util.Map<String, String> clientMetadata;
+
     /**
      * <p>
      * The ID of the client associated with the user pool.
@@ -382,6 +436,423 @@ public ForgotPasswordRequest withAnalyticsMetadata(AnalyticsMetadataType analyti
         return this;
     }
 
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the ForgotPassword API action, Amazon Cognito
+     * invokes any functions that are assigned to the following triggers: <i>pre
+     * sign-up</i>, <i>custom message</i>, and <i>user migration</i>. When
+     * Amazon Cognito invokes any of these functions, it passes a JSON payload,
+     * which the function receives as input. This payload contains a
+     * <code>clientMetadata</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your ForgotPassword request.
+     * In your function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     *
+     * @return <p>
+     *         A map of custom key-value pairs that you can provide as input for
+     *         any custom workflows that this action triggers.
+     *         </p>
+     *         <p>
+     *         You create custom workflows by assigning AWS Lambda functions to
+     *         user pool triggers. When you use the ForgotPassword API action,
+     *         Amazon Cognito invokes any functions that are assigned to the
+     *         following triggers: <i>pre sign-up</i>, <i>custom message</i>,
+     *         and <i>user migration</i>. When Amazon Cognito invokes any of
+     *         these functions, it passes a JSON payload, which the function
+     *         receives as input. This payload contains a
+     *         <code>clientMetadata</code> attribute, which provides the data
+     *         that you assigned to the ClientMetadata parameter in your
+     *         ForgotPassword request. In your function code in AWS Lambda, you
+     *         can process the <code>clientMetadata</code> value to enhance your
+     *         workflow for your specific needs.
+     *         </p>
+     *         <p>
+     *         For more information, see <a href=
+     *         "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *         >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     *         <i>Amazon Cognito Developer Guide</i>.
+     *         </p>
+     *         <note>
+     *         <p>
+     *         Take the following limitations into consideration when you use
+     *         the ClientMetadata parameter:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not store the ClientMetadata value. This data
+     *         is available only to AWS Lambda triggers that are assigned to a
+     *         user pool to support custom workflows. If your user pool
+     *         configuration does not include triggers, the ClientMetadata
+     *         parameter serves no purpose.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not validate the ClientMetadata value.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not encrypt the the ClientMetadata value, so
+     *         don't use it to provide sensitive information.
+     *         </p>
+     *         </li>
+     *         </ul>
+     *         </note>
+     */
+    public java.util.Map<String, String> getClientMetadata() {
+        return clientMetadata;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the ForgotPassword API action, Amazon Cognito
+     * invokes any functions that are assigned to the following triggers: <i>pre
+     * sign-up</i>, <i>custom message</i>, and <i>user migration</i>. When
+     * Amazon Cognito invokes any of these functions, it passes a JSON payload,
+     * which the function receives as input. This payload contains a
+     * <code>clientMetadata</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your ForgotPassword request.
+     * In your function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     *
+     * @param clientMetadata <p>
+     *            A map of custom key-value pairs that you can provide as input
+     *            for any custom workflows that this action triggers.
+     *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the ForgotPassword API
+     *            action, Amazon Cognito invokes any functions that are assigned
+     *            to the following triggers: <i>pre sign-up</i>, <i>custom
+     *            message</i>, and <i>user migration</i>. When Amazon Cognito
+     *            invokes any of these functions, it passes a JSON payload,
+     *            which the function receives as input. This payload contains a
+     *            <code>clientMetadata</code> attribute, which provides the data
+     *            that you assigned to the ClientMetadata parameter in your
+     *            ForgotPassword request. In your function code in AWS Lambda,
+     *            you can process the <code>clientMetadata</code> value to
+     *            enhance your workflow for your specific needs.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
+     */
+    public void setClientMetadata(java.util.Map<String, String> clientMetadata) {
+        this.clientMetadata = clientMetadata;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the ForgotPassword API action, Amazon Cognito
+     * invokes any functions that are assigned to the following triggers: <i>pre
+     * sign-up</i>, <i>custom message</i>, and <i>user migration</i>. When
+     * Amazon Cognito invokes any of these functions, it passes a JSON payload,
+     * which the function receives as input. This payload contains a
+     * <code>clientMetadata</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your ForgotPassword request.
+     * In your function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param clientMetadata <p>
+     *            A map of custom key-value pairs that you can provide as input
+     *            for any custom workflows that this action triggers.
+     *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the ForgotPassword API
+     *            action, Amazon Cognito invokes any functions that are assigned
+     *            to the following triggers: <i>pre sign-up</i>, <i>custom
+     *            message</i>, and <i>user migration</i>. When Amazon Cognito
+     *            invokes any of these functions, it passes a JSON payload,
+     *            which the function receives as input. This payload contains a
+     *            <code>clientMetadata</code> attribute, which provides the data
+     *            that you assigned to the ClientMetadata parameter in your
+     *            ForgotPassword request. In your function code in AWS Lambda,
+     *            you can process the <code>clientMetadata</code> value to
+     *            enhance your workflow for your specific needs.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public ForgotPasswordRequest withClientMetadata(java.util.Map<String, String> clientMetadata) {
+        this.clientMetadata = clientMetadata;
+        return this;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the ForgotPassword API action, Amazon Cognito
+     * invokes any functions that are assigned to the following triggers: <i>pre
+     * sign-up</i>, <i>custom message</i>, and <i>user migration</i>. When
+     * Amazon Cognito invokes any of these functions, it passes a JSON payload,
+     * which the function receives as input. This payload contains a
+     * <code>clientMetadata</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your ForgotPassword request.
+     * In your function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
+     * The method adds a new key-value pair into ClientMetadata parameter, and
+     * returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param key The key of the entry to be added into ClientMetadata.
+     * @param value The corresponding value of the entry to be added into
+     *            ClientMetadata.
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public ForgotPasswordRequest addClientMetadataEntry(String key, String value) {
+        if (null == this.clientMetadata) {
+            this.clientMetadata = new java.util.HashMap<String, String>();
+        }
+        if (this.clientMetadata.containsKey(key))
+            throw new IllegalArgumentException("Duplicated keys (" + key.toString()
+                    + ") are provided.");
+        this.clientMetadata.put(key, value);
+        return this;
+    }
+
+    /**
+     * Removes all the entries added into ClientMetadata.
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     */
+    public ForgotPasswordRequest clearClientMetadataEntries() {
+        this.clientMetadata = null;
+        return this;
+    }
+
     /**
      * Returns a string representation of this object; useful for testing and
      * debugging.
@@ -402,7 +873,9 @@ public String toString() {
         if (getUsername() != null)
             sb.append("Username: " + getUsername() + ",");
         if (getAnalyticsMetadata() != null)
-            sb.append("AnalyticsMetadata: " + getAnalyticsMetadata());
+            sb.append("AnalyticsMetadata: " + getAnalyticsMetadata() + ",");
+        if (getClientMetadata() != null)
+            sb.append("ClientMetadata: " + getClientMetadata());
         sb.append("}");
         return sb.toString();
     }
@@ -419,6 +892,8 @@ public int hashCode() {
         hashCode = prime * hashCode + ((getUsername() == null) ? 0 : getUsername().hashCode());
         hashCode = prime * hashCode
                 + ((getAnalyticsMetadata() == null) ? 0 : getAnalyticsMetadata().hashCode());
+        hashCode = prime * hashCode
+                + ((getClientMetadata() == null) ? 0 : getClientMetadata().hashCode());
         return hashCode;
     }
 
@@ -456,6 +931,11 @@ public boolean equals(Object obj) {
         if (other.getAnalyticsMetadata() != null
                 && other.getAnalyticsMetadata().equals(this.getAnalyticsMetadata()) == false)
             return false;
+        if (other.getClientMetadata() == null ^ this.getClientMetadata() == null)
+            return false;
+        if (other.getClientMetadata() != null
+                && other.getClientMetadata().equals(this.getClientMetadata()) == false)
+            return false;
         return true;
     }
 }
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/GetGroupRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/GetGroupRequest.java
index 0546d235fd..5876252ef0 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/GetGroupRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/GetGroupRequest.java
@@ -24,7 +24,7 @@
  * Gets a group.
  * </p>
  * <p>
- * Requires developer credentials.
+ * Calling this action requires developer credentials.
  * </p>
  */
 public class GetGroupRequest extends AmazonWebServiceRequest implements Serializable {
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/GetUserAttributeVerificationCodeRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/GetUserAttributeVerificationCodeRequest.java
index ced7c151bb..be7c776dde 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/GetUserAttributeVerificationCodeRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/GetUserAttributeVerificationCodeRequest.java
@@ -49,6 +49,59 @@
      */
     private String attributeName;
 
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the GetUserAttributeVerificationCode API
+     * action, Amazon Cognito invokes the function that is assigned to the
+     * <i>custom message</i> trigger. When Amazon Cognito invokes this function,
+     * it passes a JSON payload, which the function receives as input. This
+     * payload contains a <code>clientMetadata</code> attribute, which provides
+     * the data that you assigned to the ClientMetadata parameter in your
+     * GetUserAttributeVerificationCode request. In your function code in AWS
+     * Lambda, you can process the <code>clientMetadata</code> value to enhance
+     * your workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     */
+    private java.util.Map<String, String> clientMetadata;
+
     /**
      * <p>
      * The access token returned by the server response to get the user
@@ -172,6 +225,422 @@ public GetUserAttributeVerificationCodeRequest withAttributeName(String attribut
         return this;
     }
 
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the GetUserAttributeVerificationCode API
+     * action, Amazon Cognito invokes the function that is assigned to the
+     * <i>custom message</i> trigger. When Amazon Cognito invokes this function,
+     * it passes a JSON payload, which the function receives as input. This
+     * payload contains a <code>clientMetadata</code> attribute, which provides
+     * the data that you assigned to the ClientMetadata parameter in your
+     * GetUserAttributeVerificationCode request. In your function code in AWS
+     * Lambda, you can process the <code>clientMetadata</code> value to enhance
+     * your workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     *
+     * @return <p>
+     *         A map of custom key-value pairs that you can provide as input for
+     *         any custom workflows that this action triggers.
+     *         </p>
+     *         <p>
+     *         You create custom workflows by assigning AWS Lambda functions to
+     *         user pool triggers. When you use the
+     *         GetUserAttributeVerificationCode API action, Amazon Cognito
+     *         invokes the function that is assigned to the <i>custom
+     *         message</i> trigger. When Amazon Cognito invokes this function,
+     *         it passes a JSON payload, which the function receives as input.
+     *         This payload contains a <code>clientMetadata</code> attribute,
+     *         which provides the data that you assigned to the ClientMetadata
+     *         parameter in your GetUserAttributeVerificationCode request. In
+     *         your function code in AWS Lambda, you can process the
+     *         <code>clientMetadata</code> value to enhance your workflow for
+     *         your specific needs.
+     *         </p>
+     *         <p>
+     *         For more information, see <a href=
+     *         "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *         >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     *         <i>Amazon Cognito Developer Guide</i>.
+     *         </p>
+     *         <note>
+     *         <p>
+     *         Take the following limitations into consideration when you use
+     *         the ClientMetadata parameter:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not store the ClientMetadata value. This data
+     *         is available only to AWS Lambda triggers that are assigned to a
+     *         user pool to support custom workflows. If your user pool
+     *         configuration does not include triggers, the ClientMetadata
+     *         parameter serves no purpose.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not validate the ClientMetadata value.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not encrypt the the ClientMetadata value, so
+     *         don't use it to provide sensitive information.
+     *         </p>
+     *         </li>
+     *         </ul>
+     *         </note>
+     */
+    public java.util.Map<String, String> getClientMetadata() {
+        return clientMetadata;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the GetUserAttributeVerificationCode API
+     * action, Amazon Cognito invokes the function that is assigned to the
+     * <i>custom message</i> trigger. When Amazon Cognito invokes this function,
+     * it passes a JSON payload, which the function receives as input. This
+     * payload contains a <code>clientMetadata</code> attribute, which provides
+     * the data that you assigned to the ClientMetadata parameter in your
+     * GetUserAttributeVerificationCode request. In your function code in AWS
+     * Lambda, you can process the <code>clientMetadata</code> value to enhance
+     * your workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     *
+     * @param clientMetadata <p>
+     *            A map of custom key-value pairs that you can provide as input
+     *            for any custom workflows that this action triggers.
+     *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the
+     *            GetUserAttributeVerificationCode API action, Amazon Cognito
+     *            invokes the function that is assigned to the <i>custom
+     *            message</i> trigger. When Amazon Cognito invokes this
+     *            function, it passes a JSON payload, which the function
+     *            receives as input. This payload contains a
+     *            <code>clientMetadata</code> attribute, which provides the data
+     *            that you assigned to the ClientMetadata parameter in your
+     *            GetUserAttributeVerificationCode request. In your function
+     *            code in AWS Lambda, you can process the
+     *            <code>clientMetadata</code> value to enhance your workflow for
+     *            your specific needs.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
+     */
+    public void setClientMetadata(java.util.Map<String, String> clientMetadata) {
+        this.clientMetadata = clientMetadata;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the GetUserAttributeVerificationCode API
+     * action, Amazon Cognito invokes the function that is assigned to the
+     * <i>custom message</i> trigger. When Amazon Cognito invokes this function,
+     * it passes a JSON payload, which the function receives as input. This
+     * payload contains a <code>clientMetadata</code> attribute, which provides
+     * the data that you assigned to the ClientMetadata parameter in your
+     * GetUserAttributeVerificationCode request. In your function code in AWS
+     * Lambda, you can process the <code>clientMetadata</code> value to enhance
+     * your workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param clientMetadata <p>
+     *            A map of custom key-value pairs that you can provide as input
+     *            for any custom workflows that this action triggers.
+     *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the
+     *            GetUserAttributeVerificationCode API action, Amazon Cognito
+     *            invokes the function that is assigned to the <i>custom
+     *            message</i> trigger. When Amazon Cognito invokes this
+     *            function, it passes a JSON payload, which the function
+     *            receives as input. This payload contains a
+     *            <code>clientMetadata</code> attribute, which provides the data
+     *            that you assigned to the ClientMetadata parameter in your
+     *            GetUserAttributeVerificationCode request. In your function
+     *            code in AWS Lambda, you can process the
+     *            <code>clientMetadata</code> value to enhance your workflow for
+     *            your specific needs.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public GetUserAttributeVerificationCodeRequest withClientMetadata(
+            java.util.Map<String, String> clientMetadata) {
+        this.clientMetadata = clientMetadata;
+        return this;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the GetUserAttributeVerificationCode API
+     * action, Amazon Cognito invokes the function that is assigned to the
+     * <i>custom message</i> trigger. When Amazon Cognito invokes this function,
+     * it passes a JSON payload, which the function receives as input. This
+     * payload contains a <code>clientMetadata</code> attribute, which provides
+     * the data that you assigned to the ClientMetadata parameter in your
+     * GetUserAttributeVerificationCode request. In your function code in AWS
+     * Lambda, you can process the <code>clientMetadata</code> value to enhance
+     * your workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
+     * The method adds a new key-value pair into ClientMetadata parameter, and
+     * returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param key The key of the entry to be added into ClientMetadata.
+     * @param value The corresponding value of the entry to be added into
+     *            ClientMetadata.
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public GetUserAttributeVerificationCodeRequest addClientMetadataEntry(String key, String value) {
+        if (null == this.clientMetadata) {
+            this.clientMetadata = new java.util.HashMap<String, String>();
+        }
+        if (this.clientMetadata.containsKey(key))
+            throw new IllegalArgumentException("Duplicated keys (" + key.toString()
+                    + ") are provided.");
+        this.clientMetadata.put(key, value);
+        return this;
+    }
+
+    /**
+     * Removes all the entries added into ClientMetadata.
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     */
+    public GetUserAttributeVerificationCodeRequest clearClientMetadataEntries() {
+        this.clientMetadata = null;
+        return this;
+    }
+
     /**
      * Returns a string representation of this object; useful for testing and
      * debugging.
@@ -186,7 +655,9 @@ public String toString() {
         if (getAccessToken() != null)
             sb.append("AccessToken: " + getAccessToken() + ",");
         if (getAttributeName() != null)
-            sb.append("AttributeName: " + getAttributeName());
+            sb.append("AttributeName: " + getAttributeName() + ",");
+        if (getClientMetadata() != null)
+            sb.append("ClientMetadata: " + getClientMetadata());
         sb.append("}");
         return sb.toString();
     }
@@ -200,6 +671,8 @@ public int hashCode() {
                 + ((getAccessToken() == null) ? 0 : getAccessToken().hashCode());
         hashCode = prime * hashCode
                 + ((getAttributeName() == null) ? 0 : getAttributeName().hashCode());
+        hashCode = prime * hashCode
+                + ((getClientMetadata() == null) ? 0 : getClientMetadata().hashCode());
         return hashCode;
     }
 
@@ -224,6 +697,11 @@ public boolean equals(Object obj) {
         if (other.getAttributeName() != null
                 && other.getAttributeName().equals(this.getAttributeName()) == false)
             return false;
+        if (other.getClientMetadata() == null ^ this.getClientMetadata() == null)
+            return false;
+        if (other.getClientMetadata() != null
+                && other.getClientMetadata().equals(this.getClientMetadata()) == false)
+            return false;
         return true;
     }
 }
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/GetUserPoolMfaConfigResult.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/GetUserPoolMfaConfigResult.java
index 726611bdd8..b194155135 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/GetUserPoolMfaConfigResult.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/GetUserPoolMfaConfigResult.java
@@ -34,8 +34,26 @@
 
     /**
      * <p>
-     * The multi-factor (MFA) configuration.
+     * The multi-factor (MFA) configuration. Valid values include:
      * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>OFF</code> MFA will not be used for any users.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ON</code> MFA is required for all users to sign in.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>OPTIONAL</code> MFA will be required only for individual users who
+     * have an MFA factor enabled.
+     * </p>
+     * </li>
+     * </ul>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Allowed Values: </b>OFF, ON, OPTIONAL
@@ -136,15 +154,51 @@ public GetUserPoolMfaConfigResult withSoftwareTokenMfaConfiguration(
 
     /**
      * <p>
-     * The multi-factor (MFA) configuration.
+     * The multi-factor (MFA) configuration. Valid values include:
      * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>OFF</code> MFA will not be used for any users.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ON</code> MFA is required for all users to sign in.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>OPTIONAL</code> MFA will be required only for individual users who
+     * have an MFA factor enabled.
+     * </p>
+     * </li>
+     * </ul>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Allowed Values: </b>OFF, ON, OPTIONAL
      *
      * @return <p>
-     *         The multi-factor (MFA) configuration.
+     *         The multi-factor (MFA) configuration. Valid values include:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         <code>OFF</code> MFA will not be used for any users.
      *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>ON</code> MFA is required for all users to sign in.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>OPTIONAL</code> MFA will be required only for individual
+     *         users who have an MFA factor enabled.
+     *         </p>
+     *         </li>
+     *         </ul>
      * @see UserPoolMfaType
      */
     public String getMfaConfiguration() {
@@ -153,15 +207,51 @@ public String getMfaConfiguration() {
 
     /**
      * <p>
-     * The multi-factor (MFA) configuration.
+     * The multi-factor (MFA) configuration. Valid values include:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>OFF</code> MFA will not be used for any users.
      * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ON</code> MFA is required for all users to sign in.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>OPTIONAL</code> MFA will be required only for individual users who
+     * have an MFA factor enabled.
+     * </p>
+     * </li>
+     * </ul>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Allowed Values: </b>OFF, ON, OPTIONAL
      *
      * @param mfaConfiguration <p>
-     *            The multi-factor (MFA) configuration.
+     *            The multi-factor (MFA) configuration. Valid values include:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>OFF</code> MFA will not be used for any users.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ON</code> MFA is required for all users to sign in.
      *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>OPTIONAL</code> MFA will be required only for individual
+     *            users who have an MFA factor enabled.
+     *            </p>
+     *            </li>
+     *            </ul>
      * @see UserPoolMfaType
      */
     public void setMfaConfiguration(String mfaConfiguration) {
@@ -170,8 +260,26 @@ public void setMfaConfiguration(String mfaConfiguration) {
 
     /**
      * <p>
-     * The multi-factor (MFA) configuration.
+     * The multi-factor (MFA) configuration. Valid values include:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>OFF</code> MFA will not be used for any users.
      * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ON</code> MFA is required for all users to sign in.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>OPTIONAL</code> MFA will be required only for individual users who
+     * have an MFA factor enabled.
+     * </p>
+     * </li>
+     * </ul>
      * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
@@ -180,8 +288,26 @@ public void setMfaConfiguration(String mfaConfiguration) {
      * <b>Allowed Values: </b>OFF, ON, OPTIONAL
      *
      * @param mfaConfiguration <p>
-     *            The multi-factor (MFA) configuration.
+     *            The multi-factor (MFA) configuration. Valid values include:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>OFF</code> MFA will not be used for any users.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ON</code> MFA is required for all users to sign in.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>OPTIONAL</code> MFA will be required only for individual
+     *            users who have an MFA factor enabled.
      *            </p>
+     *            </li>
+     *            </ul>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
      * @see UserPoolMfaType
@@ -193,15 +319,51 @@ public GetUserPoolMfaConfigResult withMfaConfiguration(String mfaConfiguration)
 
     /**
      * <p>
-     * The multi-factor (MFA) configuration.
+     * The multi-factor (MFA) configuration. Valid values include:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>OFF</code> MFA will not be used for any users.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ON</code> MFA is required for all users to sign in.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>OPTIONAL</code> MFA will be required only for individual users who
+     * have an MFA factor enabled.
      * </p>
+     * </li>
+     * </ul>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Allowed Values: </b>OFF, ON, OPTIONAL
      *
      * @param mfaConfiguration <p>
-     *            The multi-factor (MFA) configuration.
+     *            The multi-factor (MFA) configuration. Valid values include:
      *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>OFF</code> MFA will not be used for any users.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ON</code> MFA is required for all users to sign in.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>OPTIONAL</code> MFA will be required only for individual
+     *            users who have an MFA factor enabled.
+     *            </p>
+     *            </li>
+     *            </ul>
      * @see UserPoolMfaType
      */
     public void setMfaConfiguration(UserPoolMfaType mfaConfiguration) {
@@ -210,8 +372,26 @@ public void setMfaConfiguration(UserPoolMfaType mfaConfiguration) {
 
     /**
      * <p>
-     * The multi-factor (MFA) configuration.
+     * The multi-factor (MFA) configuration. Valid values include:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>OFF</code> MFA will not be used for any users.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ON</code> MFA is required for all users to sign in.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>OPTIONAL</code> MFA will be required only for individual users who
+     * have an MFA factor enabled.
      * </p>
+     * </li>
+     * </ul>
      * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
@@ -220,8 +400,26 @@ public void setMfaConfiguration(UserPoolMfaType mfaConfiguration) {
      * <b>Allowed Values: </b>OFF, ON, OPTIONAL
      *
      * @param mfaConfiguration <p>
-     *            The multi-factor (MFA) configuration.
+     *            The multi-factor (MFA) configuration. Valid values include:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>OFF</code> MFA will not be used for any users.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ON</code> MFA is required for all users to sign in.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>OPTIONAL</code> MFA will be required only for individual
+     *            users who have an MFA factor enabled.
      *            </p>
+     *            </li>
+     *            </ul>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
      * @see UserPoolMfaType
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/GetUserResult.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/GetUserResult.java
index a0016f562e..574cb2a59c 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/GetUserResult.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/GetUserResult.java
@@ -48,7 +48,11 @@
 
     /**
      * <p>
-     * Specifies the options for MFA (e.g., email or phone number).
+     * <i>This response parameter is no longer supported.</i> It provides
+     * information only about SMS MFA configurations. It doesn't provide
+     * information about TOTP software token MFA configurations. To look up
+     * information about either type of MFA configuration, use the use the
+     * <a>GetUserResponse$UserMFASettingList</a> response instead.
      * </p>
      */
     private java.util.List<MFAOptionType> mFAOptions;
@@ -62,7 +66,8 @@
 
     /**
      * <p>
-     * The list of the user's MFA settings.
+     * The MFA options that are enabled for the user. The possible values in
+     * this list are <code>SMS_MFA</code> and <code>SOFTWARE_TOKEN_MFA</code>.
      * </p>
      */
     private java.util.List<String> userMFASettingList;
@@ -235,11 +240,20 @@ public GetUserResult withUserAttributes(java.util.Collection<AttributeType> user
 
     /**
      * <p>
-     * Specifies the options for MFA (e.g., email or phone number).
+     * <i>This response parameter is no longer supported.</i> It provides
+     * information only about SMS MFA configurations. It doesn't provide
+     * information about TOTP software token MFA configurations. To look up
+     * information about either type of MFA configuration, use the use the
+     * <a>GetUserResponse$UserMFASettingList</a> response instead.
      * </p>
      *
      * @return <p>
-     *         Specifies the options for MFA (e.g., email or phone number).
+     *         <i>This response parameter is no longer supported.</i> It
+     *         provides information only about SMS MFA configurations. It
+     *         doesn't provide information about TOTP software token MFA
+     *         configurations. To look up information about either type of MFA
+     *         configuration, use the use the
+     *         <a>GetUserResponse$UserMFASettingList</a> response instead.
      *         </p>
      */
     public java.util.List<MFAOptionType> getMFAOptions() {
@@ -248,11 +262,20 @@ public GetUserResult withUserAttributes(java.util.Collection<AttributeType> user
 
     /**
      * <p>
-     * Specifies the options for MFA (e.g., email or phone number).
+     * <i>This response parameter is no longer supported.</i> It provides
+     * information only about SMS MFA configurations. It doesn't provide
+     * information about TOTP software token MFA configurations. To look up
+     * information about either type of MFA configuration, use the use the
+     * <a>GetUserResponse$UserMFASettingList</a> response instead.
      * </p>
      *
      * @param mFAOptions <p>
-     *            Specifies the options for MFA (e.g., email or phone number).
+     *            <i>This response parameter is no longer supported.</i> It
+     *            provides information only about SMS MFA configurations. It
+     *            doesn't provide information about TOTP software token MFA
+     *            configurations. To look up information about either type of
+     *            MFA configuration, use the use the
+     *            <a>GetUserResponse$UserMFASettingList</a> response instead.
      *            </p>
      */
     public void setMFAOptions(java.util.Collection<MFAOptionType> mFAOptions) {
@@ -266,14 +289,23 @@ public void setMFAOptions(java.util.Collection<MFAOptionType> mFAOptions) {
 
     /**
      * <p>
-     * Specifies the options for MFA (e.g., email or phone number).
+     * <i>This response parameter is no longer supported.</i> It provides
+     * information only about SMS MFA configurations. It doesn't provide
+     * information about TOTP software token MFA configurations. To look up
+     * information about either type of MFA configuration, use the use the
+     * <a>GetUserResponse$UserMFASettingList</a> response instead.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
      *
      * @param mFAOptions <p>
-     *            Specifies the options for MFA (e.g., email or phone number).
+     *            <i>This response parameter is no longer supported.</i> It
+     *            provides information only about SMS MFA configurations. It
+     *            doesn't provide information about TOTP software token MFA
+     *            configurations. To look up information about either type of
+     *            MFA configuration, use the use the
+     *            <a>GetUserResponse$UserMFASettingList</a> response instead.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
@@ -290,14 +322,23 @@ public GetUserResult withMFAOptions(MFAOptionType... mFAOptions) {
 
     /**
      * <p>
-     * Specifies the options for MFA (e.g., email or phone number).
+     * <i>This response parameter is no longer supported.</i> It provides
+     * information only about SMS MFA configurations. It doesn't provide
+     * information about TOTP software token MFA configurations. To look up
+     * information about either type of MFA configuration, use the use the
+     * <a>GetUserResponse$UserMFASettingList</a> response instead.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
      *
      * @param mFAOptions <p>
-     *            Specifies the options for MFA (e.g., email or phone number).
+     *            <i>This response parameter is no longer supported.</i> It
+     *            provides information only about SMS MFA configurations. It
+     *            doesn't provide information about TOTP software token MFA
+     *            configurations. To look up information about either type of
+     *            MFA configuration, use the use the
+     *            <a>GetUserResponse$UserMFASettingList</a> response instead.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
@@ -354,11 +395,14 @@ public GetUserResult withPreferredMfaSetting(String preferredMfaSetting) {
 
     /**
      * <p>
-     * The list of the user's MFA settings.
+     * The MFA options that are enabled for the user. The possible values in
+     * this list are <code>SMS_MFA</code> and <code>SOFTWARE_TOKEN_MFA</code>.
      * </p>
      *
      * @return <p>
-     *         The list of the user's MFA settings.
+     *         The MFA options that are enabled for the user. The possible
+     *         values in this list are <code>SMS_MFA</code> and
+     *         <code>SOFTWARE_TOKEN_MFA</code>.
      *         </p>
      */
     public java.util.List<String> getUserMFASettingList() {
@@ -367,11 +411,14 @@ public GetUserResult withPreferredMfaSetting(String preferredMfaSetting) {
 
     /**
      * <p>
-     * The list of the user's MFA settings.
+     * The MFA options that are enabled for the user. The possible values in
+     * this list are <code>SMS_MFA</code> and <code>SOFTWARE_TOKEN_MFA</code>.
      * </p>
      *
      * @param userMFASettingList <p>
-     *            The list of the user's MFA settings.
+     *            The MFA options that are enabled for the user. The possible
+     *            values in this list are <code>SMS_MFA</code> and
+     *            <code>SOFTWARE_TOKEN_MFA</code>.
      *            </p>
      */
     public void setUserMFASettingList(java.util.Collection<String> userMFASettingList) {
@@ -385,14 +432,17 @@ public void setUserMFASettingList(java.util.Collection<String> userMFASettingLis
 
     /**
      * <p>
-     * The list of the user's MFA settings.
+     * The MFA options that are enabled for the user. The possible values in
+     * this list are <code>SMS_MFA</code> and <code>SOFTWARE_TOKEN_MFA</code>.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
      *
      * @param userMFASettingList <p>
-     *            The list of the user's MFA settings.
+     *            The MFA options that are enabled for the user. The possible
+     *            values in this list are <code>SMS_MFA</code> and
+     *            <code>SOFTWARE_TOKEN_MFA</code>.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
@@ -409,14 +459,17 @@ public GetUserResult withUserMFASettingList(String... userMFASettingList) {
 
     /**
      * <p>
-     * The list of the user's MFA settings.
+     * The MFA options that are enabled for the user. The possible values in
+     * this list are <code>SMS_MFA</code> and <code>SOFTWARE_TOKEN_MFA</code>.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
      *
      * @param userMFASettingList <p>
-     *            The list of the user's MFA settings.
+     *            The MFA options that are enabled for the user. The possible
+     *            values in this list are <code>SMS_MFA</code> and
+     *            <code>SOFTWARE_TOKEN_MFA</code>.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/InitiateAuthRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/InitiateAuthRequest.java
index 2cc3902e5d..862bc6c0d6 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/InitiateAuthRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/InitiateAuthRequest.java
@@ -127,10 +127,112 @@
 
     /**
      * <p>
-     * This is a random key-value pair map which can contain any key and will be
-     * passed to your PreAuthentication Lambda trigger as-is. It can be used to
-     * implement additional validations around authentication.
+     * A map of custom key-value pairs that you can provide as input for certain
+     * custom workflows that this action triggers.
      * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the InitiateAuth API action, Amazon Cognito
+     * invokes the AWS Lambda functions that are specified for various triggers.
+     * The ClientMetadata value is passed as input to the functions for only the
+     * following triggers:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Pre signup
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Pre authentication
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * User migration
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * When Amazon Cognito invokes the functions for these triggers, it passes a
+     * JSON payload, which the function receives as input. This payload contains
+     * a <code>validationData</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your InitiateAuth request. In
+     * your function code in AWS Lambda, you can process the
+     * <code>validationData</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * When you use the InitiateAuth API action, Amazon Cognito also invokes the
+     * functions for the following triggers, but it does not provide the
+     * ClientMetadata value as input:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Post authentication
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Custom message
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Pre token generation
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Create auth challenge
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Define auth challenge
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Verify auth challenge
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
      */
     private java.util.Map<String, String> clientMetadata;
 
@@ -1102,17 +1204,221 @@ public InitiateAuthRequest clearAuthParametersEntries() {
 
     /**
      * <p>
-     * This is a random key-value pair map which can contain any key and will be
-     * passed to your PreAuthentication Lambda trigger as-is. It can be used to
-     * implement additional validations around authentication.
+     * A map of custom key-value pairs that you can provide as input for certain
+     * custom workflows that this action triggers.
      * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the InitiateAuth API action, Amazon Cognito
+     * invokes the AWS Lambda functions that are specified for various triggers.
+     * The ClientMetadata value is passed as input to the functions for only the
+     * following triggers:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Pre signup
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Pre authentication
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * User migration
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * When Amazon Cognito invokes the functions for these triggers, it passes a
+     * JSON payload, which the function receives as input. This payload contains
+     * a <code>validationData</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your InitiateAuth request. In
+     * your function code in AWS Lambda, you can process the
+     * <code>validationData</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * When you use the InitiateAuth API action, Amazon Cognito also invokes the
+     * functions for the following triggers, but it does not provide the
+     * ClientMetadata value as input:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Post authentication
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Custom message
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Pre token generation
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Create auth challenge
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Define auth challenge
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Verify auth challenge
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
      *
      * @return <p>
-     *         This is a random key-value pair map which can contain any key and
-     *         will be passed to your PreAuthentication Lambda trigger as-is. It
-     *         can be used to implement additional validations around
-     *         authentication.
+     *         A map of custom key-value pairs that you can provide as input for
+     *         certain custom workflows that this action triggers.
      *         </p>
+     *         <p>
+     *         You create custom workflows by assigning AWS Lambda functions to
+     *         user pool triggers. When you use the InitiateAuth API action,
+     *         Amazon Cognito invokes the AWS Lambda functions that are
+     *         specified for various triggers. The ClientMetadata value is
+     *         passed as input to the functions for only the following triggers:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         Pre signup
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Pre authentication
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         User migration
+     *         </p>
+     *         </li>
+     *         </ul>
+     *         <p>
+     *         When Amazon Cognito invokes the functions for these triggers, it
+     *         passes a JSON payload, which the function receives as input. This
+     *         payload contains a <code>validationData</code> attribute, which
+     *         provides the data that you assigned to the ClientMetadata
+     *         parameter in your InitiateAuth request. In your function code in
+     *         AWS Lambda, you can process the <code>validationData</code> value
+     *         to enhance your workflow for your specific needs.
+     *         </p>
+     *         <p>
+     *         When you use the InitiateAuth API action, Amazon Cognito also
+     *         invokes the functions for the following triggers, but it does not
+     *         provide the ClientMetadata value as input:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         Post authentication
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Custom message
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Pre token generation
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Create auth challenge
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Define auth challenge
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Verify auth challenge
+     *         </p>
+     *         </li>
+     *         </ul>
+     *         <p>
+     *         For more information, see <a href=
+     *         "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *         >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     *         <i>Amazon Cognito Developer Guide</i>.
+     *         </p>
+     *         <note>
+     *         <p>
+     *         Take the following limitations into consideration when you use
+     *         the ClientMetadata parameter:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not store the ClientMetadata value. This data
+     *         is available only to AWS Lambda triggers that are assigned to a
+     *         user pool to support custom workflows. If your user pool
+     *         configuration does not include triggers, the ClientMetadata
+     *         parameter serves no purpose.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not validate the ClientMetadata value.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not encrypt the the ClientMetadata value, so
+     *         don't use it to provide sensitive information.
+     *         </p>
+     *         </li>
+     *         </ul>
+     *         </note>
      */
     public java.util.Map<String, String> getClientMetadata() {
         return clientMetadata;
@@ -1120,17 +1426,223 @@ public InitiateAuthRequest clearAuthParametersEntries() {
 
     /**
      * <p>
-     * This is a random key-value pair map which can contain any key and will be
-     * passed to your PreAuthentication Lambda trigger as-is. It can be used to
-     * implement additional validations around authentication.
+     * A map of custom key-value pairs that you can provide as input for certain
+     * custom workflows that this action triggers.
      * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the InitiateAuth API action, Amazon Cognito
+     * invokes the AWS Lambda functions that are specified for various triggers.
+     * The ClientMetadata value is passed as input to the functions for only the
+     * following triggers:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Pre signup
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Pre authentication
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * User migration
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * When Amazon Cognito invokes the functions for these triggers, it passes a
+     * JSON payload, which the function receives as input. This payload contains
+     * a <code>validationData</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your InitiateAuth request. In
+     * your function code in AWS Lambda, you can process the
+     * <code>validationData</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * When you use the InitiateAuth API action, Amazon Cognito also invokes the
+     * functions for the following triggers, but it does not provide the
+     * ClientMetadata value as input:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Post authentication
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Custom message
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Pre token generation
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Create auth challenge
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Define auth challenge
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Verify auth challenge
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
      *
      * @param clientMetadata <p>
-     *            This is a random key-value pair map which can contain any key
-     *            and will be passed to your PreAuthentication Lambda trigger
-     *            as-is. It can be used to implement additional validations
-     *            around authentication.
+     *            A map of custom key-value pairs that you can provide as input
+     *            for certain custom workflows that this action triggers.
      *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the InitiateAuth API
+     *            action, Amazon Cognito invokes the AWS Lambda functions that
+     *            are specified for various triggers. The ClientMetadata value
+     *            is passed as input to the functions for only the following
+     *            triggers:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Pre signup
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Pre authentication
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            User migration
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            <p>
+     *            When Amazon Cognito invokes the functions for these triggers,
+     *            it passes a JSON payload, which the function receives as
+     *            input. This payload contains a <code>validationData</code>
+     *            attribute, which provides the data that you assigned to the
+     *            ClientMetadata parameter in your InitiateAuth request. In your
+     *            function code in AWS Lambda, you can process the
+     *            <code>validationData</code> value to enhance your workflow for
+     *            your specific needs.
+     *            </p>
+     *            <p>
+     *            When you use the InitiateAuth API action, Amazon Cognito also
+     *            invokes the functions for the following triggers, but it does
+     *            not provide the ClientMetadata value as input:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Post authentication
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Custom message
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Pre token generation
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Create auth challenge
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Define auth challenge
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Verify auth challenge
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
      */
     public void setClientMetadata(java.util.Map<String, String> clientMetadata) {
         this.clientMetadata = clientMetadata;
@@ -1138,20 +1650,226 @@ public void setClientMetadata(java.util.Map<String, String> clientMetadata) {
 
     /**
      * <p>
-     * This is a random key-value pair map which can contain any key and will be
-     * passed to your PreAuthentication Lambda trigger as-is. It can be used to
-     * implement additional validations around authentication.
+     * A map of custom key-value pairs that you can provide as input for certain
+     * custom workflows that this action triggers.
      * </p>
      * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the InitiateAuth API action, Amazon Cognito
+     * invokes the AWS Lambda functions that are specified for various triggers.
+     * The ClientMetadata value is passed as input to the functions for only the
+     * following triggers:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Pre signup
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Pre authentication
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * User migration
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * When Amazon Cognito invokes the functions for these triggers, it passes a
+     * JSON payload, which the function receives as input. This payload contains
+     * a <code>validationData</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your InitiateAuth request. In
+     * your function code in AWS Lambda, you can process the
+     * <code>validationData</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * When you use the InitiateAuth API action, Amazon Cognito also invokes the
+     * functions for the following triggers, but it does not provide the
+     * ClientMetadata value as input:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Post authentication
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Custom message
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Pre token generation
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Create auth challenge
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Define auth challenge
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Verify auth challenge
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
      *
      * @param clientMetadata <p>
-     *            This is a random key-value pair map which can contain any key
-     *            and will be passed to your PreAuthentication Lambda trigger
-     *            as-is. It can be used to implement additional validations
-     *            around authentication.
+     *            A map of custom key-value pairs that you can provide as input
+     *            for certain custom workflows that this action triggers.
      *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the InitiateAuth API
+     *            action, Amazon Cognito invokes the AWS Lambda functions that
+     *            are specified for various triggers. The ClientMetadata value
+     *            is passed as input to the functions for only the following
+     *            triggers:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Pre signup
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Pre authentication
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            User migration
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            <p>
+     *            When Amazon Cognito invokes the functions for these triggers,
+     *            it passes a JSON payload, which the function receives as
+     *            input. This payload contains a <code>validationData</code>
+     *            attribute, which provides the data that you assigned to the
+     *            ClientMetadata parameter in your InitiateAuth request. In your
+     *            function code in AWS Lambda, you can process the
+     *            <code>validationData</code> value to enhance your workflow for
+     *            your specific needs.
+     *            </p>
+     *            <p>
+     *            When you use the InitiateAuth API action, Amazon Cognito also
+     *            invokes the functions for the following triggers, but it does
+     *            not provide the ClientMetadata value as input:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Post authentication
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Custom message
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Pre token generation
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Create auth challenge
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Define auth challenge
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Verify auth challenge
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
      */
@@ -1162,11 +1880,113 @@ public InitiateAuthRequest withClientMetadata(java.util.Map<String, String> clie
 
     /**
      * <p>
-     * This is a random key-value pair map which can contain any key and will be
-     * passed to your PreAuthentication Lambda trigger as-is. It can be used to
-     * implement additional validations around authentication.
+     * A map of custom key-value pairs that you can provide as input for certain
+     * custom workflows that this action triggers.
      * </p>
      * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the InitiateAuth API action, Amazon Cognito
+     * invokes the AWS Lambda functions that are specified for various triggers.
+     * The ClientMetadata value is passed as input to the functions for only the
+     * following triggers:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Pre signup
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Pre authentication
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * User migration
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * When Amazon Cognito invokes the functions for these triggers, it passes a
+     * JSON payload, which the function receives as input. This payload contains
+     * a <code>validationData</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your InitiateAuth request. In
+     * your function code in AWS Lambda, you can process the
+     * <code>validationData</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * When you use the InitiateAuth API action, Amazon Cognito also invokes the
+     * functions for the following triggers, but it does not provide the
+     * ClientMetadata value as input:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Post authentication
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Custom message
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Pre token generation
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Create auth challenge
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Define auth challenge
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Verify auth challenge
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
      * The method adds a new key-value pair into ClientMetadata parameter, and
      * returns a reference to this object so that method calls can be chained
      * together.
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ListGroupsRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ListGroupsRequest.java
index eedef9215e..fa0869392a 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ListGroupsRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ListGroupsRequest.java
@@ -24,7 +24,7 @@
  * Lists the groups associated with a user pool.
  * </p>
  * <p>
- * Requires developer credentials.
+ * Calling this action requires developer credentials.
  * </p>
  */
 public class ListGroupsRequest extends AmazonWebServiceRequest implements Serializable {
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ListUsersInGroupRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ListUsersInGroupRequest.java
index 7edd7bff7a..7341b5a7fd 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ListUsersInGroupRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ListUsersInGroupRequest.java
@@ -24,7 +24,7 @@
  * Lists the users in the specified group.
  * </p>
  * <p>
- * Requires developer credentials.
+ * Calling this action requires developer credentials.
  * </p>
  */
 public class ListUsersInGroupRequest extends AmazonWebServiceRequest implements Serializable {
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ListUsersRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ListUsersRequest.java
index edaa442f0c..dca2a7c0b1 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ListUsersRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ListUsersRequest.java
@@ -162,9 +162,9 @@
      * </p>
      * <p>
      * For more information, see <a href=
-     * "http://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api"
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api"
      * >Searching for Users Using the ListUsers API</a> and <a href=
-     * "http://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples"
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples"
      * >Examples of Using the ListUsers API</a> in the <i>Amazon Cognito
      * Developer Guide</i>.
      * </p>
@@ -541,9 +541,9 @@ public ListUsersRequest withPaginationToken(String paginationToken) {
      * </p>
      * <p>
      * For more information, see <a href=
-     * "http://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api"
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api"
      * >Searching for Users Using the ListUsers API</a> and <a href=
-     * "http://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples"
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples"
      * >Examples of Using the ListUsers API</a> in the <i>Amazon Cognito
      * Developer Guide</i>.
      * </p>
@@ -644,9 +644,9 @@ public ListUsersRequest withPaginationToken(String paginationToken) {
      *         </p>
      *         <p>
      *         For more information, see <a href=
-     *         "http://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api"
+     *         "https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api"
      *         >Searching for Users Using the ListUsers API</a> and <a href=
-     *         "http://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples"
+     *         "https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples"
      *         >Examples of Using the ListUsers API</a> in the <i>Amazon Cognito
      *         Developer Guide</i>.
      *         </p>
@@ -749,9 +749,9 @@ public String getFilter() {
      * </p>
      * <p>
      * For more information, see <a href=
-     * "http://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api"
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api"
      * >Searching for Users Using the ListUsers API</a> and <a href=
-     * "http://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples"
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples"
      * >Examples of Using the ListUsers API</a> in the <i>Amazon Cognito
      * Developer Guide</i>.
      * </p>
@@ -853,9 +853,9 @@ public String getFilter() {
      *            </p>
      *            <p>
      *            For more information, see <a href=
-     *            "http://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api"
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api"
      *            >Searching for Users Using the ListUsers API</a> and <a href=
-     *            "http://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples"
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples"
      *            >Examples of Using the ListUsers API</a> in the <i>Amazon
      *            Cognito Developer Guide</i>.
      *            </p>
@@ -958,9 +958,9 @@ public void setFilter(String filter) {
      * </p>
      * <p>
      * For more information, see <a href=
-     * "http://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api"
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api"
      * >Searching for Users Using the ListUsers API</a> and <a href=
-     * "http://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples"
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples"
      * >Examples of Using the ListUsers API</a> in the <i>Amazon Cognito
      * Developer Guide</i>.
      * </p>
@@ -1065,9 +1065,9 @@ public void setFilter(String filter) {
      *            </p>
      *            <p>
      *            For more information, see <a href=
-     *            "http://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api"
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api"
      *            >Searching for Users Using the ListUsers API</a> and <a href=
-     *            "http://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples"
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples"
      *            >Examples of Using the ListUsers API</a> in the <i>Amazon
      *            Cognito Developer Guide</i>.
      *            </p>
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/MFAOptionType.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/MFAOptionType.java
index 2ea352251d..e7ebb957c1 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/MFAOptionType.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/MFAOptionType.java
@@ -19,13 +19,24 @@
 
 /**
  * <p>
- * Specifies the different settings for multi-factor authentication (MFA).
+ * <i>This data type is no longer supported.</i> You can use it only for SMS MFA
+ * configurations. You can't use it for TOTP software token MFA configurations.
+ * </p>
+ * <p>
+ * To set either type of MFA configuration, use the
+ * <a>AdminSetUserMFAPreference</a> or <a>SetUserMFAPreference</a> actions.
+ * </p>
+ * <p>
+ * To look up information about either type of MFA configuration, use the
+ * <a>AdminGetUserResponse$UserMFASettingList</a> or
+ * <a>GetUserResponse$UserMFASettingList</a> responses.
  * </p>
  */
 public class MFAOptionType implements Serializable {
     /**
      * <p>
-     * The delivery medium (email message or SMS message) to send the MFA code.
+     * The delivery medium to send the MFA code. You can use this parameter to
+     * set only the <code>SMS</code> delivery medium value.
      * </p>
      * <p>
      * <b>Constraints:</b><br/>
@@ -35,7 +46,8 @@
 
     /**
      * <p>
-     * The attribute name of the MFA option type.
+     * The attribute name of the MFA option type. The only valid value is
+     * <code>phone_number</code>.
      * </p>
      * <p>
      * <b>Constraints:</b><br/>
@@ -46,15 +58,16 @@
 
     /**
      * <p>
-     * The delivery medium (email message or SMS message) to send the MFA code.
+     * The delivery medium to send the MFA code. You can use this parameter to
+     * set only the <code>SMS</code> delivery medium value.
      * </p>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Allowed Values: </b>SMS, EMAIL
      *
      * @return <p>
-     *         The delivery medium (email message or SMS message) to send the
-     *         MFA code.
+     *         The delivery medium to send the MFA code. You can use this
+     *         parameter to set only the <code>SMS</code> delivery medium value.
      *         </p>
      * @see DeliveryMediumType
      */
@@ -64,15 +77,17 @@ public String getDeliveryMedium() {
 
     /**
      * <p>
-     * The delivery medium (email message or SMS message) to send the MFA code.
+     * The delivery medium to send the MFA code. You can use this parameter to
+     * set only the <code>SMS</code> delivery medium value.
      * </p>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Allowed Values: </b>SMS, EMAIL
      *
      * @param deliveryMedium <p>
-     *            The delivery medium (email message or SMS message) to send the
-     *            MFA code.
+     *            The delivery medium to send the MFA code. You can use this
+     *            parameter to set only the <code>SMS</code> delivery medium
+     *            value.
      *            </p>
      * @see DeliveryMediumType
      */
@@ -82,7 +97,8 @@ public void setDeliveryMedium(String deliveryMedium) {
 
     /**
      * <p>
-     * The delivery medium (email message or SMS message) to send the MFA code.
+     * The delivery medium to send the MFA code. You can use this parameter to
+     * set only the <code>SMS</code> delivery medium value.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
@@ -92,8 +108,9 @@ public void setDeliveryMedium(String deliveryMedium) {
      * <b>Allowed Values: </b>SMS, EMAIL
      *
      * @param deliveryMedium <p>
-     *            The delivery medium (email message or SMS message) to send the
-     *            MFA code.
+     *            The delivery medium to send the MFA code. You can use this
+     *            parameter to set only the <code>SMS</code> delivery medium
+     *            value.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
@@ -106,15 +123,17 @@ public MFAOptionType withDeliveryMedium(String deliveryMedium) {
 
     /**
      * <p>
-     * The delivery medium (email message or SMS message) to send the MFA code.
+     * The delivery medium to send the MFA code. You can use this parameter to
+     * set only the <code>SMS</code> delivery medium value.
      * </p>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Allowed Values: </b>SMS, EMAIL
      *
      * @param deliveryMedium <p>
-     *            The delivery medium (email message or SMS message) to send the
-     *            MFA code.
+     *            The delivery medium to send the MFA code. You can use this
+     *            parameter to set only the <code>SMS</code> delivery medium
+     *            value.
      *            </p>
      * @see DeliveryMediumType
      */
@@ -124,7 +143,8 @@ public void setDeliveryMedium(DeliveryMediumType deliveryMedium) {
 
     /**
      * <p>
-     * The delivery medium (email message or SMS message) to send the MFA code.
+     * The delivery medium to send the MFA code. You can use this parameter to
+     * set only the <code>SMS</code> delivery medium value.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
@@ -134,8 +154,9 @@ public void setDeliveryMedium(DeliveryMediumType deliveryMedium) {
      * <b>Allowed Values: </b>SMS, EMAIL
      *
      * @param deliveryMedium <p>
-     *            The delivery medium (email message or SMS message) to send the
-     *            MFA code.
+     *            The delivery medium to send the MFA code. You can use this
+     *            parameter to set only the <code>SMS</code> delivery medium
+     *            value.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
@@ -148,7 +169,8 @@ public MFAOptionType withDeliveryMedium(DeliveryMediumType deliveryMedium) {
 
     /**
      * <p>
-     * The attribute name of the MFA option type.
+     * The attribute name of the MFA option type. The only valid value is
+     * <code>phone_number</code>.
      * </p>
      * <p>
      * <b>Constraints:</b><br/>
@@ -156,7 +178,8 @@ public MFAOptionType withDeliveryMedium(DeliveryMediumType deliveryMedium) {
      * <b>Pattern: </b>[\p{L}\p{M}\p{S}\p{N}\p{P}]+<br/>
      *
      * @return <p>
-     *         The attribute name of the MFA option type.
+     *         The attribute name of the MFA option type. The only valid value
+     *         is <code>phone_number</code>.
      *         </p>
      */
     public String getAttributeName() {
@@ -165,7 +188,8 @@ public String getAttributeName() {
 
     /**
      * <p>
-     * The attribute name of the MFA option type.
+     * The attribute name of the MFA option type. The only valid value is
+     * <code>phone_number</code>.
      * </p>
      * <p>
      * <b>Constraints:</b><br/>
@@ -173,7 +197,8 @@ public String getAttributeName() {
      * <b>Pattern: </b>[\p{L}\p{M}\p{S}\p{N}\p{P}]+<br/>
      *
      * @param attributeName <p>
-     *            The attribute name of the MFA option type.
+     *            The attribute name of the MFA option type. The only valid
+     *            value is <code>phone_number</code>.
      *            </p>
      */
     public void setAttributeName(String attributeName) {
@@ -182,7 +207,8 @@ public void setAttributeName(String attributeName) {
 
     /**
      * <p>
-     * The attribute name of the MFA option type.
+     * The attribute name of the MFA option type. The only valid value is
+     * <code>phone_number</code>.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
@@ -193,7 +219,8 @@ public void setAttributeName(String attributeName) {
      * <b>Pattern: </b>[\p{L}\p{M}\p{S}\p{N}\p{P}]+<br/>
      *
      * @param attributeName <p>
-     *            The attribute name of the MFA option type.
+     *            The attribute name of the MFA option type. The only valid
+     *            value is <code>phone_number</code>.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/PasswordPolicyType.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/PasswordPolicyType.java
index 40a94c0ebf..6db08aa28a 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/PasswordPolicyType.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/PasswordPolicyType.java
@@ -67,8 +67,18 @@
     private Boolean requireSymbols;
 
     /**
-     * The new value for the temporaryPasswordValidityDays property for this
-     * object.
+     * <p>
+     * In the password policy you have set, refers to the number of days a
+     * temporary password is valid. If the user does not sign-in during this
+     * time, their password will need to be reset by an administrator.
+     * </p>
+     * <note>
+     * <p>
+     * When you set <code>TemporaryPasswordValidityDays</code> for a user pool,
+     * you will no longer be able to set the deprecated
+     * <code>UnusedAccountValidityDays</code> value for that user pool.
+     * </p>
+     * </note>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Range: </b>0 - 365<br/>
@@ -412,35 +422,89 @@ public PasswordPolicyType withRequireSymbols(Boolean requireSymbols) {
     }
 
     /**
-     * Returns the value of the temporaryPasswordValidityDays property for this
-     * object.
+     * <p>
+     * In the password policy you have set, refers to the number of days a
+     * temporary password is valid. If the user does not sign-in during this
+     * time, their password will need to be reset by an administrator.
+     * </p>
+     * <note>
+     * <p>
+     * When you set <code>TemporaryPasswordValidityDays</code> for a user pool,
+     * you will no longer be able to set the deprecated
+     * <code>UnusedAccountValidityDays</code> value for that user pool.
+     * </p>
+     * </note>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Range: </b>0 - 365<br/>
      *
-     * @return The value of the temporaryPasswordValidityDays property for this
-     *         object.
+     * @return <p>
+     *         In the password policy you have set, refers to the number of days
+     *         a temporary password is valid. If the user does not sign-in
+     *         during this time, their password will need to be reset by an
+     *         administrator.
+     *         </p>
+     *         <note>
+     *         <p>
+     *         When you set <code>TemporaryPasswordValidityDays</code> for a
+     *         user pool, you will no longer be able to set the deprecated
+     *         <code>UnusedAccountValidityDays</code> value for that user pool.
+     *         </p>
+     *         </note>
      */
     public Integer getTemporaryPasswordValidityDays() {
         return temporaryPasswordValidityDays;
     }
 
     /**
-     * Sets the value of temporaryPasswordValidityDays
+     * <p>
+     * In the password policy you have set, refers to the number of days a
+     * temporary password is valid. If the user does not sign-in during this
+     * time, their password will need to be reset by an administrator.
+     * </p>
+     * <note>
+     * <p>
+     * When you set <code>TemporaryPasswordValidityDays</code> for a user pool,
+     * you will no longer be able to set the deprecated
+     * <code>UnusedAccountValidityDays</code> value for that user pool.
+     * </p>
+     * </note>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Range: </b>0 - 365<br/>
      *
-     * @param temporaryPasswordValidityDays The new value for the
-     *            temporaryPasswordValidityDays property for this object.
+     * @param temporaryPasswordValidityDays <p>
+     *            In the password policy you have set, refers to the number of
+     *            days a temporary password is valid. If the user does not
+     *            sign-in during this time, their password will need to be reset
+     *            by an administrator.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            When you set <code>TemporaryPasswordValidityDays</code> for a
+     *            user pool, you will no longer be able to set the deprecated
+     *            <code>UnusedAccountValidityDays</code> value for that user
+     *            pool.
+     *            </p>
+     *            </note>
      */
     public void setTemporaryPasswordValidityDays(Integer temporaryPasswordValidityDays) {
         this.temporaryPasswordValidityDays = temporaryPasswordValidityDays;
     }
 
     /**
-     * Sets the value of the temporaryPasswordValidityDays property for this
-     * object.
+     * <p>
+     * In the password policy you have set, refers to the number of days a
+     * temporary password is valid. If the user does not sign-in during this
+     * time, their password will need to be reset by an administrator.
+     * </p>
+     * <note>
+     * <p>
+     * When you set <code>TemporaryPasswordValidityDays</code> for a user pool,
+     * you will no longer be able to set the deprecated
+     * <code>UnusedAccountValidityDays</code> value for that user pool.
+     * </p>
+     * </note>
      * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
@@ -448,8 +512,20 @@ public void setTemporaryPasswordValidityDays(Integer temporaryPasswordValidityDa
      * <b>Constraints:</b><br/>
      * <b>Range: </b>0 - 365<br/>
      *
-     * @param temporaryPasswordValidityDays The new value for the
-     *            temporaryPasswordValidityDays property for this object.
+     * @param temporaryPasswordValidityDays <p>
+     *            In the password policy you have set, refers to the number of
+     *            days a temporary password is valid. If the user does not
+     *            sign-in during this time, their password will need to be reset
+     *            by an administrator.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            When you set <code>TemporaryPasswordValidityDays</code> for a
+     *            user pool, you will no longer be able to set the deprecated
+     *            <code>UnusedAccountValidityDays</code> value for that user
+     *            pool.
+     *            </p>
+     *            </note>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
      */
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ResendConfirmationCodeRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ResendConfirmationCodeRequest.java
index 840f934083..0e245c62e3 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ResendConfirmationCodeRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/ResendConfirmationCodeRequest.java
@@ -78,6 +78,59 @@
      */
     private AnalyticsMetadataType analyticsMetadata;
 
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the ResendConfirmationCode API action, Amazon
+     * Cognito invokes the function that is assigned to the <i>custom
+     * message</i> trigger. When Amazon Cognito invokes this function, it passes
+     * a JSON payload, which the function receives as input. This payload
+     * contains a <code>clientMetadata</code> attribute, which provides the data
+     * that you assigned to the ClientMetadata parameter in your
+     * ResendConfirmationCode request. In your function code in AWS Lambda, you
+     * can process the <code>clientMetadata</code> value to enhance your
+     * workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     */
+    private java.util.Map<String, String> clientMetadata;
+
     /**
      * <p>
      * The ID of the client associated with the user pool.
@@ -373,6 +426,417 @@ public ResendConfirmationCodeRequest withAnalyticsMetadata(
         return this;
     }
 
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the ResendConfirmationCode API action, Amazon
+     * Cognito invokes the function that is assigned to the <i>custom
+     * message</i> trigger. When Amazon Cognito invokes this function, it passes
+     * a JSON payload, which the function receives as input. This payload
+     * contains a <code>clientMetadata</code> attribute, which provides the data
+     * that you assigned to the ClientMetadata parameter in your
+     * ResendConfirmationCode request. In your function code in AWS Lambda, you
+     * can process the <code>clientMetadata</code> value to enhance your
+     * workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     *
+     * @return <p>
+     *         A map of custom key-value pairs that you can provide as input for
+     *         any custom workflows that this action triggers.
+     *         </p>
+     *         <p>
+     *         You create custom workflows by assigning AWS Lambda functions to
+     *         user pool triggers. When you use the ResendConfirmationCode API
+     *         action, Amazon Cognito invokes the function that is assigned to
+     *         the <i>custom message</i> trigger. When Amazon Cognito invokes
+     *         this function, it passes a JSON payload, which the function
+     *         receives as input. This payload contains a
+     *         <code>clientMetadata</code> attribute, which provides the data
+     *         that you assigned to the ClientMetadata parameter in your
+     *         ResendConfirmationCode request. In your function code in AWS
+     *         Lambda, you can process the <code>clientMetadata</code> value to
+     *         enhance your workflow for your specific needs.
+     *         </p>
+     *         <p>
+     *         For more information, see <a href=
+     *         "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *         >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     *         <i>Amazon Cognito Developer Guide</i>.
+     *         </p>
+     *         <note>
+     *         <p>
+     *         Take the following limitations into consideration when you use
+     *         the ClientMetadata parameter:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not store the ClientMetadata value. This data
+     *         is available only to AWS Lambda triggers that are assigned to a
+     *         user pool to support custom workflows. If your user pool
+     *         configuration does not include triggers, the ClientMetadata
+     *         parameter serves no purpose.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not validate the ClientMetadata value.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not encrypt the the ClientMetadata value, so
+     *         don't use it to provide sensitive information.
+     *         </p>
+     *         </li>
+     *         </ul>
+     *         </note>
+     */
+    public java.util.Map<String, String> getClientMetadata() {
+        return clientMetadata;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the ResendConfirmationCode API action, Amazon
+     * Cognito invokes the function that is assigned to the <i>custom
+     * message</i> trigger. When Amazon Cognito invokes this function, it passes
+     * a JSON payload, which the function receives as input. This payload
+     * contains a <code>clientMetadata</code> attribute, which provides the data
+     * that you assigned to the ClientMetadata parameter in your
+     * ResendConfirmationCode request. In your function code in AWS Lambda, you
+     * can process the <code>clientMetadata</code> value to enhance your
+     * workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     *
+     * @param clientMetadata <p>
+     *            A map of custom key-value pairs that you can provide as input
+     *            for any custom workflows that this action triggers.
+     *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the ResendConfirmationCode
+     *            API action, Amazon Cognito invokes the function that is
+     *            assigned to the <i>custom message</i> trigger. When Amazon
+     *            Cognito invokes this function, it passes a JSON payload, which
+     *            the function receives as input. This payload contains a
+     *            <code>clientMetadata</code> attribute, which provides the data
+     *            that you assigned to the ClientMetadata parameter in your
+     *            ResendConfirmationCode request. In your function code in AWS
+     *            Lambda, you can process the <code>clientMetadata</code> value
+     *            to enhance your workflow for your specific needs.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
+     */
+    public void setClientMetadata(java.util.Map<String, String> clientMetadata) {
+        this.clientMetadata = clientMetadata;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the ResendConfirmationCode API action, Amazon
+     * Cognito invokes the function that is assigned to the <i>custom
+     * message</i> trigger. When Amazon Cognito invokes this function, it passes
+     * a JSON payload, which the function receives as input. This payload
+     * contains a <code>clientMetadata</code> attribute, which provides the data
+     * that you assigned to the ClientMetadata parameter in your
+     * ResendConfirmationCode request. In your function code in AWS Lambda, you
+     * can process the <code>clientMetadata</code> value to enhance your
+     * workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param clientMetadata <p>
+     *            A map of custom key-value pairs that you can provide as input
+     *            for any custom workflows that this action triggers.
+     *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the ResendConfirmationCode
+     *            API action, Amazon Cognito invokes the function that is
+     *            assigned to the <i>custom message</i> trigger. When Amazon
+     *            Cognito invokes this function, it passes a JSON payload, which
+     *            the function receives as input. This payload contains a
+     *            <code>clientMetadata</code> attribute, which provides the data
+     *            that you assigned to the ClientMetadata parameter in your
+     *            ResendConfirmationCode request. In your function code in AWS
+     *            Lambda, you can process the <code>clientMetadata</code> value
+     *            to enhance your workflow for your specific needs.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public ResendConfirmationCodeRequest withClientMetadata(
+            java.util.Map<String, String> clientMetadata) {
+        this.clientMetadata = clientMetadata;
+        return this;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the ResendConfirmationCode API action, Amazon
+     * Cognito invokes the function that is assigned to the <i>custom
+     * message</i> trigger. When Amazon Cognito invokes this function, it passes
+     * a JSON payload, which the function receives as input. This payload
+     * contains a <code>clientMetadata</code> attribute, which provides the data
+     * that you assigned to the ClientMetadata parameter in your
+     * ResendConfirmationCode request. In your function code in AWS Lambda, you
+     * can process the <code>clientMetadata</code> value to enhance your
+     * workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
+     * The method adds a new key-value pair into ClientMetadata parameter, and
+     * returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param key The key of the entry to be added into ClientMetadata.
+     * @param value The corresponding value of the entry to be added into
+     *            ClientMetadata.
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public ResendConfirmationCodeRequest addClientMetadataEntry(String key, String value) {
+        if (null == this.clientMetadata) {
+            this.clientMetadata = new java.util.HashMap<String, String>();
+        }
+        if (this.clientMetadata.containsKey(key))
+            throw new IllegalArgumentException("Duplicated keys (" + key.toString()
+                    + ") are provided.");
+        this.clientMetadata.put(key, value);
+        return this;
+    }
+
+    /**
+     * Removes all the entries added into ClientMetadata.
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     */
+    public ResendConfirmationCodeRequest clearClientMetadataEntries() {
+        this.clientMetadata = null;
+        return this;
+    }
+
     /**
      * Returns a string representation of this object; useful for testing and
      * debugging.
@@ -393,7 +857,9 @@ public String toString() {
         if (getUsername() != null)
             sb.append("Username: " + getUsername() + ",");
         if (getAnalyticsMetadata() != null)
-            sb.append("AnalyticsMetadata: " + getAnalyticsMetadata());
+            sb.append("AnalyticsMetadata: " + getAnalyticsMetadata() + ",");
+        if (getClientMetadata() != null)
+            sb.append("ClientMetadata: " + getClientMetadata());
         sb.append("}");
         return sb.toString();
     }
@@ -410,6 +876,8 @@ public int hashCode() {
         hashCode = prime * hashCode + ((getUsername() == null) ? 0 : getUsername().hashCode());
         hashCode = prime * hashCode
                 + ((getAnalyticsMetadata() == null) ? 0 : getAnalyticsMetadata().hashCode());
+        hashCode = prime * hashCode
+                + ((getClientMetadata() == null) ? 0 : getClientMetadata().hashCode());
         return hashCode;
     }
 
@@ -447,6 +915,11 @@ public boolean equals(Object obj) {
         if (other.getAnalyticsMetadata() != null
                 && other.getAnalyticsMetadata().equals(this.getAnalyticsMetadata()) == false)
             return false;
+        if (other.getClientMetadata() == null ^ this.getClientMetadata() == null)
+            return false;
+        if (other.getClientMetadata() != null
+                && other.getClientMetadata().equals(this.getClientMetadata()) == false)
+            return false;
         return true;
     }
 }
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/RespondToAuthChallengeRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/RespondToAuthChallengeRequest.java
index f49ef0f43e..8b1f23e7ae 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/RespondToAuthChallengeRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/RespondToAuthChallengeRequest.java
@@ -71,27 +71,48 @@
      * The challenge responses. These are inputs corresponding to the value of
      * <code>ChallengeName</code>, for example:
      * </p>
+     * <note>
+     * <p>
+     * <code>SECRET_HASH</code> (if app client is configured with client secret)
+     * applies to all inputs below (including <code>SOFTWARE_TOKEN_MFA</code>).
+     * </p>
+     * </note>
      * <ul>
      * <li>
      * <p>
-     * <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>,
-     * <code>SECRET_HASH</code> (if app client is configured with client
-     * secret).
+     * <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>.
      * </p>
      * </li>
      * <li>
      * <p>
      * <code>PASSWORD_VERIFIER</code>: <code>PASSWORD_CLAIM_SIGNATURE</code>,
      * <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, <code>TIMESTAMP</code>,
-     * <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is
-     * configured with client secret).
+     * <code>USERNAME</code>.
      * </p>
      * </li>
      * <li>
      * <p>
      * <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>, any other
-     * required attributes, <code>USERNAME</code>, <code>SECRET_HASH</code> (if
-     * app client is configured with client secret).
+     * required attributes, <code>USERNAME</code>.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>SOFTWARE_TOKEN_MFA</code>: <code>USERNAME</code> and
+     * <code>SOFTWARE_TOKEN_MFA_CODE</code> are required attributes.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>DEVICE_SRP_AUTH</code> requires <code>USERNAME</code>,
+     * <code>DEVICE_KEY</code>, <code>SRP_A</code> (and <code>SECRET_HASH</code>
+     * ).
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>DEVICE_PASSWORD_VERIFIER</code> requires everything that
+     * <code>PASSWORD_VERIFIER</code> requires plus <code>DEVICE_KEY</code>.
      * </p>
      * </li>
      * </ul>
@@ -115,6 +136,61 @@
      */
     private UserContextDataType userContextData;
 
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the RespondToAuthChallenge API action, Amazon
+     * Cognito invokes any functions that are assigned to the following
+     * triggers: <i>post authentication</i>, <i>pre token generation</i>,
+     * <i>define auth challenge</i>, <i>create auth challenge</i>, and <i>verify
+     * auth challenge</i>. When Amazon Cognito invokes any of these functions,
+     * it passes a JSON payload, which the function receives as input. This
+     * payload contains a <code>clientMetadata</code> attribute, which provides
+     * the data that you assigned to the ClientMetadata parameter in your
+     * RespondToAuthChallenge request. In your function code in AWS Lambda, you
+     * can process the <code>clientMetadata</code> value to enhance your
+     * workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     */
+    private java.util.Map<String, String> clientMetadata;
+
     /**
      * <p>
      * The app client ID.
@@ -403,27 +479,48 @@ public RespondToAuthChallengeRequest withSession(String session) {
      * The challenge responses. These are inputs corresponding to the value of
      * <code>ChallengeName</code>, for example:
      * </p>
+     * <note>
+     * <p>
+     * <code>SECRET_HASH</code> (if app client is configured with client secret)
+     * applies to all inputs below (including <code>SOFTWARE_TOKEN_MFA</code>).
+     * </p>
+     * </note>
      * <ul>
      * <li>
      * <p>
-     * <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>,
-     * <code>SECRET_HASH</code> (if app client is configured with client
-     * secret).
+     * <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>.
      * </p>
      * </li>
      * <li>
      * <p>
      * <code>PASSWORD_VERIFIER</code>: <code>PASSWORD_CLAIM_SIGNATURE</code>,
      * <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, <code>TIMESTAMP</code>,
-     * <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is
-     * configured with client secret).
+     * <code>USERNAME</code>.
      * </p>
      * </li>
      * <li>
      * <p>
      * <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>, any other
-     * required attributes, <code>USERNAME</code>, <code>SECRET_HASH</code> (if
-     * app client is configured with client secret).
+     * required attributes, <code>USERNAME</code>.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>SOFTWARE_TOKEN_MFA</code>: <code>USERNAME</code> and
+     * <code>SOFTWARE_TOKEN_MFA_CODE</code> are required attributes.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>DEVICE_SRP_AUTH</code> requires <code>USERNAME</code>,
+     * <code>DEVICE_KEY</code>, <code>SRP_A</code> (and <code>SECRET_HASH</code>
+     * ).
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>DEVICE_PASSWORD_VERIFIER</code> requires everything that
+     * <code>PASSWORD_VERIFIER</code> requires plus <code>DEVICE_KEY</code>.
      * </p>
      * </li>
      * </ul>
@@ -432,12 +529,18 @@ public RespondToAuthChallengeRequest withSession(String session) {
      *         The challenge responses. These are inputs corresponding to the
      *         value of <code>ChallengeName</code>, for example:
      *         </p>
+     *         <note>
+     *         <p>
+     *         <code>SECRET_HASH</code> (if app client is configured with client
+     *         secret) applies to all inputs below (including
+     *         <code>SOFTWARE_TOKEN_MFA</code>).
+     *         </p>
+     *         </note>
      *         <ul>
      *         <li>
      *         <p>
      *         <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>,
-     *         <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is
-     *         configured with client secret).
+     *         <code>USERNAME</code>.
      *         </p>
      *         </li>
      *         <li>
@@ -445,16 +548,33 @@ public RespondToAuthChallengeRequest withSession(String session) {
      *         <code>PASSWORD_VERIFIER</code>:
      *         <code>PASSWORD_CLAIM_SIGNATURE</code>,
      *         <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, <code>TIMESTAMP</code>,
-     *         <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is
-     *         configured with client secret).
+     *         <code>USERNAME</code>.
      *         </p>
      *         </li>
      *         <li>
      *         <p>
      *         <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>,
-     *         any other required attributes, <code>USERNAME</code>,
-     *         <code>SECRET_HASH</code> (if app client is configured with client
-     *         secret).
+     *         any other required attributes, <code>USERNAME</code>.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>SOFTWARE_TOKEN_MFA</code>: <code>USERNAME</code> and
+     *         <code>SOFTWARE_TOKEN_MFA_CODE</code> are required attributes.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>DEVICE_SRP_AUTH</code> requires <code>USERNAME</code>,
+     *         <code>DEVICE_KEY</code>, <code>SRP_A</code> (and
+     *         <code>SECRET_HASH</code>).
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>DEVICE_PASSWORD_VERIFIER</code> requires everything that
+     *         <code>PASSWORD_VERIFIER</code> requires plus
+     *         <code>DEVICE_KEY</code>.
      *         </p>
      *         </li>
      *         </ul>
@@ -468,27 +588,48 @@ public RespondToAuthChallengeRequest withSession(String session) {
      * The challenge responses. These are inputs corresponding to the value of
      * <code>ChallengeName</code>, for example:
      * </p>
+     * <note>
+     * <p>
+     * <code>SECRET_HASH</code> (if app client is configured with client secret)
+     * applies to all inputs below (including <code>SOFTWARE_TOKEN_MFA</code>).
+     * </p>
+     * </note>
      * <ul>
      * <li>
      * <p>
-     * <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>,
-     * <code>SECRET_HASH</code> (if app client is configured with client
-     * secret).
+     * <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>.
      * </p>
      * </li>
      * <li>
      * <p>
      * <code>PASSWORD_VERIFIER</code>: <code>PASSWORD_CLAIM_SIGNATURE</code>,
      * <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, <code>TIMESTAMP</code>,
-     * <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is
-     * configured with client secret).
+     * <code>USERNAME</code>.
      * </p>
      * </li>
      * <li>
      * <p>
      * <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>, any other
-     * required attributes, <code>USERNAME</code>, <code>SECRET_HASH</code> (if
-     * app client is configured with client secret).
+     * required attributes, <code>USERNAME</code>.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>SOFTWARE_TOKEN_MFA</code>: <code>USERNAME</code> and
+     * <code>SOFTWARE_TOKEN_MFA_CODE</code> are required attributes.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>DEVICE_SRP_AUTH</code> requires <code>USERNAME</code>,
+     * <code>DEVICE_KEY</code>, <code>SRP_A</code> (and <code>SECRET_HASH</code>
+     * ).
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>DEVICE_PASSWORD_VERIFIER</code> requires everything that
+     * <code>PASSWORD_VERIFIER</code> requires plus <code>DEVICE_KEY</code>.
      * </p>
      * </li>
      * </ul>
@@ -497,12 +638,18 @@ public RespondToAuthChallengeRequest withSession(String session) {
      *            The challenge responses. These are inputs corresponding to the
      *            value of <code>ChallengeName</code>, for example:
      *            </p>
+     *            <note>
+     *            <p>
+     *            <code>SECRET_HASH</code> (if app client is configured with
+     *            client secret) applies to all inputs below (including
+     *            <code>SOFTWARE_TOKEN_MFA</code>).
+     *            </p>
+     *            </note>
      *            <ul>
      *            <li>
      *            <p>
      *            <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>,
-     *            <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client
-     *            is configured with client secret).
+     *            <code>USERNAME</code>.
      *            </p>
      *            </li>
      *            <li>
@@ -510,17 +657,33 @@ public RespondToAuthChallengeRequest withSession(String session) {
      *            <code>PASSWORD_VERIFIER</code>:
      *            <code>PASSWORD_CLAIM_SIGNATURE</code>,
      *            <code>PASSWORD_CLAIM_SECRET_BLOCK</code>,
-     *            <code>TIMESTAMP</code>, <code>USERNAME</code>,
-     *            <code>SECRET_HASH</code> (if app client is configured with
-     *            client secret).
+     *            <code>TIMESTAMP</code>, <code>USERNAME</code>.
      *            </p>
      *            </li>
      *            <li>
      *            <p>
      *            <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>,
-     *            any other required attributes, <code>USERNAME</code>,
-     *            <code>SECRET_HASH</code> (if app client is configured with
-     *            client secret).
+     *            any other required attributes, <code>USERNAME</code>.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>SOFTWARE_TOKEN_MFA</code>: <code>USERNAME</code> and
+     *            <code>SOFTWARE_TOKEN_MFA_CODE</code> are required attributes.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>DEVICE_SRP_AUTH</code> requires <code>USERNAME</code>,
+     *            <code>DEVICE_KEY</code>, <code>SRP_A</code> (and
+     *            <code>SECRET_HASH</code>).
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>DEVICE_PASSWORD_VERIFIER</code> requires everything that
+     *            <code>PASSWORD_VERIFIER</code> requires plus
+     *            <code>DEVICE_KEY</code>.
      *            </p>
      *            </li>
      *            </ul>
@@ -534,27 +697,48 @@ public void setChallengeResponses(java.util.Map<String, String> challengeRespons
      * The challenge responses. These are inputs corresponding to the value of
      * <code>ChallengeName</code>, for example:
      * </p>
+     * <note>
+     * <p>
+     * <code>SECRET_HASH</code> (if app client is configured with client secret)
+     * applies to all inputs below (including <code>SOFTWARE_TOKEN_MFA</code>).
+     * </p>
+     * </note>
      * <ul>
      * <li>
      * <p>
-     * <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>,
-     * <code>SECRET_HASH</code> (if app client is configured with client
-     * secret).
+     * <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>.
      * </p>
      * </li>
      * <li>
      * <p>
      * <code>PASSWORD_VERIFIER</code>: <code>PASSWORD_CLAIM_SIGNATURE</code>,
      * <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, <code>TIMESTAMP</code>,
-     * <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is
-     * configured with client secret).
+     * <code>USERNAME</code>.
      * </p>
      * </li>
      * <li>
      * <p>
      * <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>, any other
-     * required attributes, <code>USERNAME</code>, <code>SECRET_HASH</code> (if
-     * app client is configured with client secret).
+     * required attributes, <code>USERNAME</code>.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>SOFTWARE_TOKEN_MFA</code>: <code>USERNAME</code> and
+     * <code>SOFTWARE_TOKEN_MFA_CODE</code> are required attributes.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>DEVICE_SRP_AUTH</code> requires <code>USERNAME</code>,
+     * <code>DEVICE_KEY</code>, <code>SRP_A</code> (and <code>SECRET_HASH</code>
+     * ).
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>DEVICE_PASSWORD_VERIFIER</code> requires everything that
+     * <code>PASSWORD_VERIFIER</code> requires plus <code>DEVICE_KEY</code>.
      * </p>
      * </li>
      * </ul>
@@ -566,12 +750,18 @@ public void setChallengeResponses(java.util.Map<String, String> challengeRespons
      *            The challenge responses. These are inputs corresponding to the
      *            value of <code>ChallengeName</code>, for example:
      *            </p>
+     *            <note>
+     *            <p>
+     *            <code>SECRET_HASH</code> (if app client is configured with
+     *            client secret) applies to all inputs below (including
+     *            <code>SOFTWARE_TOKEN_MFA</code>).
+     *            </p>
+     *            </note>
      *            <ul>
      *            <li>
      *            <p>
      *            <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>,
-     *            <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client
-     *            is configured with client secret).
+     *            <code>USERNAME</code>.
      *            </p>
      *            </li>
      *            <li>
@@ -579,17 +769,33 @@ public void setChallengeResponses(java.util.Map<String, String> challengeRespons
      *            <code>PASSWORD_VERIFIER</code>:
      *            <code>PASSWORD_CLAIM_SIGNATURE</code>,
      *            <code>PASSWORD_CLAIM_SECRET_BLOCK</code>,
-     *            <code>TIMESTAMP</code>, <code>USERNAME</code>,
-     *            <code>SECRET_HASH</code> (if app client is configured with
-     *            client secret).
+     *            <code>TIMESTAMP</code>, <code>USERNAME</code>.
      *            </p>
      *            </li>
      *            <li>
      *            <p>
      *            <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>,
-     *            any other required attributes, <code>USERNAME</code>,
-     *            <code>SECRET_HASH</code> (if app client is configured with
-     *            client secret).
+     *            any other required attributes, <code>USERNAME</code>.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>SOFTWARE_TOKEN_MFA</code>: <code>USERNAME</code> and
+     *            <code>SOFTWARE_TOKEN_MFA_CODE</code> are required attributes.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>DEVICE_SRP_AUTH</code> requires <code>USERNAME</code>,
+     *            <code>DEVICE_KEY</code>, <code>SRP_A</code> (and
+     *            <code>SECRET_HASH</code>).
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>DEVICE_PASSWORD_VERIFIER</code> requires everything that
+     *            <code>PASSWORD_VERIFIER</code> requires plus
+     *            <code>DEVICE_KEY</code>.
      *            </p>
      *            </li>
      *            </ul>
@@ -607,27 +813,48 @@ public RespondToAuthChallengeRequest withChallengeResponses(
      * The challenge responses. These are inputs corresponding to the value of
      * <code>ChallengeName</code>, for example:
      * </p>
+     * <note>
+     * <p>
+     * <code>SECRET_HASH</code> (if app client is configured with client secret)
+     * applies to all inputs below (including <code>SOFTWARE_TOKEN_MFA</code>).
+     * </p>
+     * </note>
      * <ul>
      * <li>
      * <p>
-     * <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>,
-     * <code>SECRET_HASH</code> (if app client is configured with client
-     * secret).
+     * <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>.
      * </p>
      * </li>
      * <li>
      * <p>
      * <code>PASSWORD_VERIFIER</code>: <code>PASSWORD_CLAIM_SIGNATURE</code>,
      * <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, <code>TIMESTAMP</code>,
-     * <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is
-     * configured with client secret).
+     * <code>USERNAME</code>.
      * </p>
      * </li>
      * <li>
      * <p>
      * <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>, any other
-     * required attributes, <code>USERNAME</code>, <code>SECRET_HASH</code> (if
-     * app client is configured with client secret).
+     * required attributes, <code>USERNAME</code>.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>SOFTWARE_TOKEN_MFA</code>: <code>USERNAME</code> and
+     * <code>SOFTWARE_TOKEN_MFA_CODE</code> are required attributes.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>DEVICE_SRP_AUTH</code> requires <code>USERNAME</code>,
+     * <code>DEVICE_KEY</code>, <code>SRP_A</code> (and <code>SECRET_HASH</code>
+     * ).
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>DEVICE_PASSWORD_VERIFIER</code> requires everything that
+     * <code>PASSWORD_VERIFIER</code> requires plus <code>DEVICE_KEY</code>.
      * </p>
      * </li>
      * </ul>
@@ -773,6 +1000,433 @@ public RespondToAuthChallengeRequest withUserContextData(UserContextDataType use
         return this;
     }
 
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the RespondToAuthChallenge API action, Amazon
+     * Cognito invokes any functions that are assigned to the following
+     * triggers: <i>post authentication</i>, <i>pre token generation</i>,
+     * <i>define auth challenge</i>, <i>create auth challenge</i>, and <i>verify
+     * auth challenge</i>. When Amazon Cognito invokes any of these functions,
+     * it passes a JSON payload, which the function receives as input. This
+     * payload contains a <code>clientMetadata</code> attribute, which provides
+     * the data that you assigned to the ClientMetadata parameter in your
+     * RespondToAuthChallenge request. In your function code in AWS Lambda, you
+     * can process the <code>clientMetadata</code> value to enhance your
+     * workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     *
+     * @return <p>
+     *         A map of custom key-value pairs that you can provide as input for
+     *         any custom workflows that this action triggers.
+     *         </p>
+     *         <p>
+     *         You create custom workflows by assigning AWS Lambda functions to
+     *         user pool triggers. When you use the RespondToAuthChallenge API
+     *         action, Amazon Cognito invokes any functions that are assigned to
+     *         the following triggers: <i>post authentication</i>, <i>pre token
+     *         generation</i>, <i>define auth challenge</i>, <i>create auth
+     *         challenge</i>, and <i>verify auth challenge</i>. When Amazon
+     *         Cognito invokes any of these functions, it passes a JSON payload,
+     *         which the function receives as input. This payload contains a
+     *         <code>clientMetadata</code> attribute, which provides the data
+     *         that you assigned to the ClientMetadata parameter in your
+     *         RespondToAuthChallenge request. In your function code in AWS
+     *         Lambda, you can process the <code>clientMetadata</code> value to
+     *         enhance your workflow for your specific needs.
+     *         </p>
+     *         <p>
+     *         For more information, see <a href=
+     *         "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *         >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     *         <i>Amazon Cognito Developer Guide</i>.
+     *         </p>
+     *         <note>
+     *         <p>
+     *         Take the following limitations into consideration when you use
+     *         the ClientMetadata parameter:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not store the ClientMetadata value. This data
+     *         is available only to AWS Lambda triggers that are assigned to a
+     *         user pool to support custom workflows. If your user pool
+     *         configuration does not include triggers, the ClientMetadata
+     *         parameter serves no purpose.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not validate the ClientMetadata value.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not encrypt the the ClientMetadata value, so
+     *         don't use it to provide sensitive information.
+     *         </p>
+     *         </li>
+     *         </ul>
+     *         </note>
+     */
+    public java.util.Map<String, String> getClientMetadata() {
+        return clientMetadata;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the RespondToAuthChallenge API action, Amazon
+     * Cognito invokes any functions that are assigned to the following
+     * triggers: <i>post authentication</i>, <i>pre token generation</i>,
+     * <i>define auth challenge</i>, <i>create auth challenge</i>, and <i>verify
+     * auth challenge</i>. When Amazon Cognito invokes any of these functions,
+     * it passes a JSON payload, which the function receives as input. This
+     * payload contains a <code>clientMetadata</code> attribute, which provides
+     * the data that you assigned to the ClientMetadata parameter in your
+     * RespondToAuthChallenge request. In your function code in AWS Lambda, you
+     * can process the <code>clientMetadata</code> value to enhance your
+     * workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     *
+     * @param clientMetadata <p>
+     *            A map of custom key-value pairs that you can provide as input
+     *            for any custom workflows that this action triggers.
+     *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the RespondToAuthChallenge
+     *            API action, Amazon Cognito invokes any functions that are
+     *            assigned to the following triggers: <i>post
+     *            authentication</i>, <i>pre token generation</i>, <i>define
+     *            auth challenge</i>, <i>create auth challenge</i>, and
+     *            <i>verify auth challenge</i>. When Amazon Cognito invokes any
+     *            of these functions, it passes a JSON payload, which the
+     *            function receives as input. This payload contains a
+     *            <code>clientMetadata</code> attribute, which provides the data
+     *            that you assigned to the ClientMetadata parameter in your
+     *            RespondToAuthChallenge request. In your function code in AWS
+     *            Lambda, you can process the <code>clientMetadata</code> value
+     *            to enhance your workflow for your specific needs.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
+     */
+    public void setClientMetadata(java.util.Map<String, String> clientMetadata) {
+        this.clientMetadata = clientMetadata;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the RespondToAuthChallenge API action, Amazon
+     * Cognito invokes any functions that are assigned to the following
+     * triggers: <i>post authentication</i>, <i>pre token generation</i>,
+     * <i>define auth challenge</i>, <i>create auth challenge</i>, and <i>verify
+     * auth challenge</i>. When Amazon Cognito invokes any of these functions,
+     * it passes a JSON payload, which the function receives as input. This
+     * payload contains a <code>clientMetadata</code> attribute, which provides
+     * the data that you assigned to the ClientMetadata parameter in your
+     * RespondToAuthChallenge request. In your function code in AWS Lambda, you
+     * can process the <code>clientMetadata</code> value to enhance your
+     * workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param clientMetadata <p>
+     *            A map of custom key-value pairs that you can provide as input
+     *            for any custom workflows that this action triggers.
+     *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the RespondToAuthChallenge
+     *            API action, Amazon Cognito invokes any functions that are
+     *            assigned to the following triggers: <i>post
+     *            authentication</i>, <i>pre token generation</i>, <i>define
+     *            auth challenge</i>, <i>create auth challenge</i>, and
+     *            <i>verify auth challenge</i>. When Amazon Cognito invokes any
+     *            of these functions, it passes a JSON payload, which the
+     *            function receives as input. This payload contains a
+     *            <code>clientMetadata</code> attribute, which provides the data
+     *            that you assigned to the ClientMetadata parameter in your
+     *            RespondToAuthChallenge request. In your function code in AWS
+     *            Lambda, you can process the <code>clientMetadata</code> value
+     *            to enhance your workflow for your specific needs.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public RespondToAuthChallengeRequest withClientMetadata(
+            java.util.Map<String, String> clientMetadata) {
+        this.clientMetadata = clientMetadata;
+        return this;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the RespondToAuthChallenge API action, Amazon
+     * Cognito invokes any functions that are assigned to the following
+     * triggers: <i>post authentication</i>, <i>pre token generation</i>,
+     * <i>define auth challenge</i>, <i>create auth challenge</i>, and <i>verify
+     * auth challenge</i>. When Amazon Cognito invokes any of these functions,
+     * it passes a JSON payload, which the function receives as input. This
+     * payload contains a <code>clientMetadata</code> attribute, which provides
+     * the data that you assigned to the ClientMetadata parameter in your
+     * RespondToAuthChallenge request. In your function code in AWS Lambda, you
+     * can process the <code>clientMetadata</code> value to enhance your
+     * workflow for your specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
+     * The method adds a new key-value pair into ClientMetadata parameter, and
+     * returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param key The key of the entry to be added into ClientMetadata.
+     * @param value The corresponding value of the entry to be added into
+     *            ClientMetadata.
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public RespondToAuthChallengeRequest addClientMetadataEntry(String key, String value) {
+        if (null == this.clientMetadata) {
+            this.clientMetadata = new java.util.HashMap<String, String>();
+        }
+        if (this.clientMetadata.containsKey(key))
+            throw new IllegalArgumentException("Duplicated keys (" + key.toString()
+                    + ") are provided.");
+        this.clientMetadata.put(key, value);
+        return this;
+    }
+
+    /**
+     * Removes all the entries added into ClientMetadata.
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     */
+    public RespondToAuthChallengeRequest clearClientMetadataEntries() {
+        this.clientMetadata = null;
+        return this;
+    }
+
     /**
      * Returns a string representation of this object; useful for testing and
      * debugging.
@@ -795,7 +1449,9 @@ public String toString() {
         if (getAnalyticsMetadata() != null)
             sb.append("AnalyticsMetadata: " + getAnalyticsMetadata() + ",");
         if (getUserContextData() != null)
-            sb.append("UserContextData: " + getUserContextData());
+            sb.append("UserContextData: " + getUserContextData() + ",");
+        if (getClientMetadata() != null)
+            sb.append("ClientMetadata: " + getClientMetadata());
         sb.append("}");
         return sb.toString();
     }
@@ -815,6 +1471,8 @@ public int hashCode() {
                 + ((getAnalyticsMetadata() == null) ? 0 : getAnalyticsMetadata().hashCode());
         hashCode = prime * hashCode
                 + ((getUserContextData() == null) ? 0 : getUserContextData().hashCode());
+        hashCode = prime * hashCode
+                + ((getClientMetadata() == null) ? 0 : getClientMetadata().hashCode());
         return hashCode;
     }
 
@@ -857,6 +1515,11 @@ public boolean equals(Object obj) {
         if (other.getUserContextData() != null
                 && other.getUserContextData().equals(this.getUserContextData()) == false)
             return false;
+        if (other.getClientMetadata() == null ^ this.getClientMetadata() == null)
+            return false;
+        if (other.getClientMetadata() != null
+                && other.getClientMetadata().equals(this.getClientMetadata()) == false)
+            return false;
         return true;
     }
 }
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SMSMfaSettingsType.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SMSMfaSettingsType.java
index a5a98d5629..2597332f46 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SMSMfaSettingsType.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SMSMfaSettingsType.java
@@ -19,7 +19,7 @@
 
 /**
  * <p>
- * The SMS multi-factor authentication (MFA) settings type.
+ * The type used for enabling SMS MFA at the user level.
  * </p>
  */
 public class SMSMfaSettingsType implements Serializable {
@@ -32,7 +32,7 @@
 
     /**
      * <p>
-     * The preferred MFA method.
+     * Specifies whether SMS is the preferred MFA method.
      * </p>
      */
     private Boolean preferredMfa;
@@ -97,11 +97,11 @@ public SMSMfaSettingsType withEnabled(Boolean enabled) {
 
     /**
      * <p>
-     * The preferred MFA method.
+     * Specifies whether SMS is the preferred MFA method.
      * </p>
      *
      * @return <p>
-     *         The preferred MFA method.
+     *         Specifies whether SMS is the preferred MFA method.
      *         </p>
      */
     public Boolean isPreferredMfa() {
@@ -110,11 +110,11 @@ public Boolean isPreferredMfa() {
 
     /**
      * <p>
-     * The preferred MFA method.
+     * Specifies whether SMS is the preferred MFA method.
      * </p>
      *
      * @return <p>
-     *         The preferred MFA method.
+     *         Specifies whether SMS is the preferred MFA method.
      *         </p>
      */
     public Boolean getPreferredMfa() {
@@ -123,11 +123,11 @@ public Boolean getPreferredMfa() {
 
     /**
      * <p>
-     * The preferred MFA method.
+     * Specifies whether SMS is the preferred MFA method.
      * </p>
      *
      * @param preferredMfa <p>
-     *            The preferred MFA method.
+     *            Specifies whether SMS is the preferred MFA method.
      *            </p>
      */
     public void setPreferredMfa(Boolean preferredMfa) {
@@ -136,14 +136,14 @@ public void setPreferredMfa(Boolean preferredMfa) {
 
     /**
      * <p>
-     * The preferred MFA method.
+     * Specifies whether SMS is the preferred MFA method.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
      *
      * @param preferredMfa <p>
-     *            The preferred MFA method.
+     *            Specifies whether SMS is the preferred MFA method.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SetUserMFAPreferenceRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SetUserMFAPreferenceRequest.java
index 303753fe1f..c41704f894 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SetUserMFAPreferenceRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SetUserMFAPreferenceRequest.java
@@ -21,7 +21,12 @@
 
 /**
  * <p>
- * Set the user's multi-factor authentication (MFA) method preference.
+ * Set the user's multi-factor authentication (MFA) method preference, including
+ * which MFA factors are enabled and if any are preferred. Only one factor can
+ * be set as preferred. The preferred MFA factor will be used to authenticate a
+ * user if multiple factors are enabled. If multiple options are enabled and no
+ * preference is set, a challenge to choose an MFA option will be returned
+ * during sign in.
  * </p>
  */
 public class SetUserMFAPreferenceRequest extends AmazonWebServiceRequest implements Serializable {
@@ -41,7 +46,7 @@
 
     /**
      * <p>
-     * The access token.
+     * The access token for the user.
      * </p>
      * <p>
      * <b>Constraints:</b><br/>
@@ -144,14 +149,14 @@ public SetUserMFAPreferenceRequest withSoftwareTokenMfaSettings(
 
     /**
      * <p>
-     * The access token.
+     * The access token for the user.
      * </p>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Pattern: </b>[A-Za-z0-9-_=.]+<br/>
      *
      * @return <p>
-     *         The access token.
+     *         The access token for the user.
      *         </p>
      */
     public String getAccessToken() {
@@ -160,14 +165,14 @@ public String getAccessToken() {
 
     /**
      * <p>
-     * The access token.
+     * The access token for the user.
      * </p>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Pattern: </b>[A-Za-z0-9-_=.]+<br/>
      *
      * @param accessToken <p>
-     *            The access token.
+     *            The access token for the user.
      *            </p>
      */
     public void setAccessToken(String accessToken) {
@@ -176,7 +181,7 @@ public void setAccessToken(String accessToken) {
 
     /**
      * <p>
-     * The access token.
+     * The access token for the user.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
@@ -186,7 +191,7 @@ public void setAccessToken(String accessToken) {
      * <b>Pattern: </b>[A-Za-z0-9-_=.]+<br/>
      *
      * @param accessToken <p>
-     *            The access token.
+     *            The access token for the user.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SetUserPoolMfaConfigRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SetUserPoolMfaConfigRequest.java
index 5263f76c8d..a92dd20512 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SetUserPoolMfaConfigRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SetUserPoolMfaConfigRequest.java
@@ -21,7 +21,7 @@
 
 /**
  * <p>
- * Set the user pool MFA configuration.
+ * Set the user pool multi-factor authentication (MFA) configuration.
  * </p>
  */
 public class SetUserPoolMfaConfigRequest extends AmazonWebServiceRequest implements Serializable {
@@ -52,8 +52,26 @@
 
     /**
      * <p>
-     * The MFA configuration.
+     * The MFA configuration. Valid values include:
      * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>OFF</code> MFA will not be used for any users.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ON</code> MFA is required for all users to sign in.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>OPTIONAL</code> MFA will be required only for individual users who
+     * have an MFA factor enabled.
+     * </p>
+     * </li>
+     * </ul>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Allowed Values: </b>OFF, ON, OPTIONAL
@@ -211,15 +229,51 @@ public SetUserPoolMfaConfigRequest withSoftwareTokenMfaConfiguration(
 
     /**
      * <p>
-     * The MFA configuration.
+     * The MFA configuration. Valid values include:
      * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>OFF</code> MFA will not be used for any users.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ON</code> MFA is required for all users to sign in.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>OPTIONAL</code> MFA will be required only for individual users who
+     * have an MFA factor enabled.
+     * </p>
+     * </li>
+     * </ul>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Allowed Values: </b>OFF, ON, OPTIONAL
      *
      * @return <p>
-     *         The MFA configuration.
+     *         The MFA configuration. Valid values include:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         <code>OFF</code> MFA will not be used for any users.
      *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>ON</code> MFA is required for all users to sign in.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>OPTIONAL</code> MFA will be required only for individual
+     *         users who have an MFA factor enabled.
+     *         </p>
+     *         </li>
+     *         </ul>
      * @see UserPoolMfaType
      */
     public String getMfaConfiguration() {
@@ -228,15 +282,51 @@ public String getMfaConfiguration() {
 
     /**
      * <p>
-     * The MFA configuration.
+     * The MFA configuration. Valid values include:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>OFF</code> MFA will not be used for any users.
      * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ON</code> MFA is required for all users to sign in.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>OPTIONAL</code> MFA will be required only for individual users who
+     * have an MFA factor enabled.
+     * </p>
+     * </li>
+     * </ul>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Allowed Values: </b>OFF, ON, OPTIONAL
      *
      * @param mfaConfiguration <p>
-     *            The MFA configuration.
+     *            The MFA configuration. Valid values include:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>OFF</code> MFA will not be used for any users.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ON</code> MFA is required for all users to sign in.
      *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>OPTIONAL</code> MFA will be required only for individual
+     *            users who have an MFA factor enabled.
+     *            </p>
+     *            </li>
+     *            </ul>
      * @see UserPoolMfaType
      */
     public void setMfaConfiguration(String mfaConfiguration) {
@@ -245,8 +335,26 @@ public void setMfaConfiguration(String mfaConfiguration) {
 
     /**
      * <p>
-     * The MFA configuration.
+     * The MFA configuration. Valid values include:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>OFF</code> MFA will not be used for any users.
      * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ON</code> MFA is required for all users to sign in.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>OPTIONAL</code> MFA will be required only for individual users who
+     * have an MFA factor enabled.
+     * </p>
+     * </li>
+     * </ul>
      * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
@@ -255,8 +363,26 @@ public void setMfaConfiguration(String mfaConfiguration) {
      * <b>Allowed Values: </b>OFF, ON, OPTIONAL
      *
      * @param mfaConfiguration <p>
-     *            The MFA configuration.
+     *            The MFA configuration. Valid values include:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>OFF</code> MFA will not be used for any users.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ON</code> MFA is required for all users to sign in.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>OPTIONAL</code> MFA will be required only for individual
+     *            users who have an MFA factor enabled.
      *            </p>
+     *            </li>
+     *            </ul>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
      * @see UserPoolMfaType
@@ -268,15 +394,51 @@ public SetUserPoolMfaConfigRequest withMfaConfiguration(String mfaConfiguration)
 
     /**
      * <p>
-     * The MFA configuration.
+     * The MFA configuration. Valid values include:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>OFF</code> MFA will not be used for any users.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ON</code> MFA is required for all users to sign in.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>OPTIONAL</code> MFA will be required only for individual users who
+     * have an MFA factor enabled.
      * </p>
+     * </li>
+     * </ul>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Allowed Values: </b>OFF, ON, OPTIONAL
      *
      * @param mfaConfiguration <p>
-     *            The MFA configuration.
+     *            The MFA configuration. Valid values include:
      *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>OFF</code> MFA will not be used for any users.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ON</code> MFA is required for all users to sign in.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>OPTIONAL</code> MFA will be required only for individual
+     *            users who have an MFA factor enabled.
+     *            </p>
+     *            </li>
+     *            </ul>
      * @see UserPoolMfaType
      */
     public void setMfaConfiguration(UserPoolMfaType mfaConfiguration) {
@@ -285,8 +447,26 @@ public void setMfaConfiguration(UserPoolMfaType mfaConfiguration) {
 
     /**
      * <p>
-     * The MFA configuration.
+     * The MFA configuration. Valid values include:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>OFF</code> MFA will not be used for any users.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ON</code> MFA is required for all users to sign in.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>OPTIONAL</code> MFA will be required only for individual users who
+     * have an MFA factor enabled.
      * </p>
+     * </li>
+     * </ul>
      * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
@@ -295,8 +475,26 @@ public void setMfaConfiguration(UserPoolMfaType mfaConfiguration) {
      * <b>Allowed Values: </b>OFF, ON, OPTIONAL
      *
      * @param mfaConfiguration <p>
-     *            The MFA configuration.
+     *            The MFA configuration. Valid values include:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>OFF</code> MFA will not be used for any users.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ON</code> MFA is required for all users to sign in.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>OPTIONAL</code> MFA will be required only for individual
+     *            users who have an MFA factor enabled.
      *            </p>
+     *            </li>
+     *            </ul>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
      * @see UserPoolMfaType
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SetUserPoolMfaConfigResult.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SetUserPoolMfaConfigResult.java
index 3eafd37c9e..cc912d0d2b 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SetUserPoolMfaConfigResult.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SetUserPoolMfaConfigResult.java
@@ -34,8 +34,26 @@
 
     /**
      * <p>
-     * The MFA configuration.
+     * The MFA configuration. Valid values include:
      * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>OFF</code> MFA will not be used for any users.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ON</code> MFA is required for all users to sign in.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>OPTIONAL</code> MFA will be required only for individual users who
+     * have an MFA factor enabled.
+     * </p>
+     * </li>
+     * </ul>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Allowed Values: </b>OFF, ON, OPTIONAL
@@ -136,15 +154,51 @@ public SetUserPoolMfaConfigResult withSoftwareTokenMfaConfiguration(
 
     /**
      * <p>
-     * The MFA configuration.
+     * The MFA configuration. Valid values include:
      * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>OFF</code> MFA will not be used for any users.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ON</code> MFA is required for all users to sign in.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>OPTIONAL</code> MFA will be required only for individual users who
+     * have an MFA factor enabled.
+     * </p>
+     * </li>
+     * </ul>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Allowed Values: </b>OFF, ON, OPTIONAL
      *
      * @return <p>
-     *         The MFA configuration.
+     *         The MFA configuration. Valid values include:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         <code>OFF</code> MFA will not be used for any users.
      *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>ON</code> MFA is required for all users to sign in.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>OPTIONAL</code> MFA will be required only for individual
+     *         users who have an MFA factor enabled.
+     *         </p>
+     *         </li>
+     *         </ul>
      * @see UserPoolMfaType
      */
     public String getMfaConfiguration() {
@@ -153,15 +207,51 @@ public String getMfaConfiguration() {
 
     /**
      * <p>
-     * The MFA configuration.
+     * The MFA configuration. Valid values include:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>OFF</code> MFA will not be used for any users.
      * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ON</code> MFA is required for all users to sign in.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>OPTIONAL</code> MFA will be required only for individual users who
+     * have an MFA factor enabled.
+     * </p>
+     * </li>
+     * </ul>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Allowed Values: </b>OFF, ON, OPTIONAL
      *
      * @param mfaConfiguration <p>
-     *            The MFA configuration.
+     *            The MFA configuration. Valid values include:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>OFF</code> MFA will not be used for any users.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ON</code> MFA is required for all users to sign in.
      *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>OPTIONAL</code> MFA will be required only for individual
+     *            users who have an MFA factor enabled.
+     *            </p>
+     *            </li>
+     *            </ul>
      * @see UserPoolMfaType
      */
     public void setMfaConfiguration(String mfaConfiguration) {
@@ -170,8 +260,26 @@ public void setMfaConfiguration(String mfaConfiguration) {
 
     /**
      * <p>
-     * The MFA configuration.
+     * The MFA configuration. Valid values include:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>OFF</code> MFA will not be used for any users.
      * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ON</code> MFA is required for all users to sign in.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>OPTIONAL</code> MFA will be required only for individual users who
+     * have an MFA factor enabled.
+     * </p>
+     * </li>
+     * </ul>
      * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
@@ -180,8 +288,26 @@ public void setMfaConfiguration(String mfaConfiguration) {
      * <b>Allowed Values: </b>OFF, ON, OPTIONAL
      *
      * @param mfaConfiguration <p>
-     *            The MFA configuration.
+     *            The MFA configuration. Valid values include:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>OFF</code> MFA will not be used for any users.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ON</code> MFA is required for all users to sign in.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>OPTIONAL</code> MFA will be required only for individual
+     *            users who have an MFA factor enabled.
      *            </p>
+     *            </li>
+     *            </ul>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
      * @see UserPoolMfaType
@@ -193,15 +319,51 @@ public SetUserPoolMfaConfigResult withMfaConfiguration(String mfaConfiguration)
 
     /**
      * <p>
-     * The MFA configuration.
+     * The MFA configuration. Valid values include:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>OFF</code> MFA will not be used for any users.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ON</code> MFA is required for all users to sign in.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>OPTIONAL</code> MFA will be required only for individual users who
+     * have an MFA factor enabled.
      * </p>
+     * </li>
+     * </ul>
      * <p>
      * <b>Constraints:</b><br/>
      * <b>Allowed Values: </b>OFF, ON, OPTIONAL
      *
      * @param mfaConfiguration <p>
-     *            The MFA configuration.
+     *            The MFA configuration. Valid values include:
      *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>OFF</code> MFA will not be used for any users.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ON</code> MFA is required for all users to sign in.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>OPTIONAL</code> MFA will be required only for individual
+     *            users who have an MFA factor enabled.
+     *            </p>
+     *            </li>
+     *            </ul>
      * @see UserPoolMfaType
      */
     public void setMfaConfiguration(UserPoolMfaType mfaConfiguration) {
@@ -210,8 +372,26 @@ public void setMfaConfiguration(UserPoolMfaType mfaConfiguration) {
 
     /**
      * <p>
-     * The MFA configuration.
+     * The MFA configuration. Valid values include:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>OFF</code> MFA will not be used for any users.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ON</code> MFA is required for all users to sign in.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>OPTIONAL</code> MFA will be required only for individual users who
+     * have an MFA factor enabled.
      * </p>
+     * </li>
+     * </ul>
      * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
@@ -220,8 +400,26 @@ public void setMfaConfiguration(UserPoolMfaType mfaConfiguration) {
      * <b>Allowed Values: </b>OFF, ON, OPTIONAL
      *
      * @param mfaConfiguration <p>
-     *            The MFA configuration.
+     *            The MFA configuration. Valid values include:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>OFF</code> MFA will not be used for any users.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ON</code> MFA is required for all users to sign in.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>OPTIONAL</code> MFA will be required only for individual
+     *            users who have an MFA factor enabled.
      *            </p>
+     *            </li>
+     *            </ul>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
      * @see UserPoolMfaType
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SetUserSettingsRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SetUserSettingsRequest.java
index ff13f76c4b..3b18721551 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SetUserSettingsRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SetUserSettingsRequest.java
@@ -21,9 +21,9 @@
 
 /**
  * <p>
- * Sets the user settings like multi-factor authentication (MFA). If MFA is to
- * be removed for a particular attribute pass the attribute with code delivery
- * as null. If null list is passed, all MFA options are removed.
+ * <i>This action is no longer supported.</i> You can use it to configure only
+ * SMS MFA. You can't use it to configure TOTP software token MFA. To configure
+ * either type of MFA, use the <a>SetUserMFAPreference</a> action instead.
  * </p>
  */
 public class SetUserSettingsRequest extends AmazonWebServiceRequest implements Serializable {
@@ -39,7 +39,8 @@
 
     /**
      * <p>
-     * Specifies the options for MFA (e.g., email or phone number).
+     * You can use this parameter only to set an SMS configuration that uses SMS
+     * for delivery.
      * </p>
      */
     private java.util.List<MFAOptionType> mFAOptions;
@@ -100,11 +101,13 @@ public SetUserSettingsRequest withAccessToken(String accessToken) {
 
     /**
      * <p>
-     * Specifies the options for MFA (e.g., email or phone number).
+     * You can use this parameter only to set an SMS configuration that uses SMS
+     * for delivery.
      * </p>
      *
      * @return <p>
-     *         Specifies the options for MFA (e.g., email or phone number).
+     *         You can use this parameter only to set an SMS configuration that
+     *         uses SMS for delivery.
      *         </p>
      */
     public java.util.List<MFAOptionType> getMFAOptions() {
@@ -113,11 +116,13 @@ public SetUserSettingsRequest withAccessToken(String accessToken) {
 
     /**
      * <p>
-     * Specifies the options for MFA (e.g., email or phone number).
+     * You can use this parameter only to set an SMS configuration that uses SMS
+     * for delivery.
      * </p>
      *
      * @param mFAOptions <p>
-     *            Specifies the options for MFA (e.g., email or phone number).
+     *            You can use this parameter only to set an SMS configuration
+     *            that uses SMS for delivery.
      *            </p>
      */
     public void setMFAOptions(java.util.Collection<MFAOptionType> mFAOptions) {
@@ -131,14 +136,16 @@ public void setMFAOptions(java.util.Collection<MFAOptionType> mFAOptions) {
 
     /**
      * <p>
-     * Specifies the options for MFA (e.g., email or phone number).
+     * You can use this parameter only to set an SMS configuration that uses SMS
+     * for delivery.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
      *
      * @param mFAOptions <p>
-     *            Specifies the options for MFA (e.g., email or phone number).
+     *            You can use this parameter only to set an SMS configuration
+     *            that uses SMS for delivery.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
@@ -155,14 +162,16 @@ public SetUserSettingsRequest withMFAOptions(MFAOptionType... mFAOptions) {
 
     /**
      * <p>
-     * Specifies the options for MFA (e.g., email or phone number).
+     * You can use this parameter only to set an SMS configuration that uses SMS
+     * for delivery.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
      *
      * @param mFAOptions <p>
-     *            Specifies the options for MFA (e.g., email or phone number).
+     *            You can use this parameter only to set an SMS configuration
+     *            that uses SMS for delivery.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SignUpRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SignUpRequest.java
index 8c7fb7cbfc..54a002eea0 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SignUpRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SignUpRequest.java
@@ -107,6 +107,60 @@
      */
     private UserContextDataType userContextData;
 
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the SignUp API action, Amazon Cognito invokes
+     * any functions that are assigned to the following triggers: <i>pre
+     * sign-up</i>, <i>custom message</i>, and <i>post confirmation</i>. When
+     * Amazon Cognito invokes any of these functions, it passes a JSON payload,
+     * which the function receives as input. This payload contains a
+     * <code>clientMetadata</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your SignUp request. In your
+     * function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     */
+    private java.util.Map<String, String> clientMetadata;
+
     /**
      * <p>
      * The ID of the client associated with the user pool.
@@ -635,6 +689,423 @@ public SignUpRequest withUserContextData(UserContextDataType userContextData) {
         return this;
     }
 
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the SignUp API action, Amazon Cognito invokes
+     * any functions that are assigned to the following triggers: <i>pre
+     * sign-up</i>, <i>custom message</i>, and <i>post confirmation</i>. When
+     * Amazon Cognito invokes any of these functions, it passes a JSON payload,
+     * which the function receives as input. This payload contains a
+     * <code>clientMetadata</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your SignUp request. In your
+     * function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     *
+     * @return <p>
+     *         A map of custom key-value pairs that you can provide as input for
+     *         any custom workflows that this action triggers.
+     *         </p>
+     *         <p>
+     *         You create custom workflows by assigning AWS Lambda functions to
+     *         user pool triggers. When you use the SignUp API action, Amazon
+     *         Cognito invokes any functions that are assigned to the following
+     *         triggers: <i>pre sign-up</i>, <i>custom message</i>, and <i>post
+     *         confirmation</i>. When Amazon Cognito invokes any of these
+     *         functions, it passes a JSON payload, which the function receives
+     *         as input. This payload contains a <code>clientMetadata</code>
+     *         attribute, which provides the data that you assigned to the
+     *         ClientMetadata parameter in your SignUp request. In your function
+     *         code in AWS Lambda, you can process the
+     *         <code>clientMetadata</code> value to enhance your workflow for
+     *         your specific needs.
+     *         </p>
+     *         <p>
+     *         For more information, see <a href=
+     *         "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *         >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     *         <i>Amazon Cognito Developer Guide</i>.
+     *         </p>
+     *         <note>
+     *         <p>
+     *         Take the following limitations into consideration when you use
+     *         the ClientMetadata parameter:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not store the ClientMetadata value. This data
+     *         is available only to AWS Lambda triggers that are assigned to a
+     *         user pool to support custom workflows. If your user pool
+     *         configuration does not include triggers, the ClientMetadata
+     *         parameter serves no purpose.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not validate the ClientMetadata value.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not encrypt the the ClientMetadata value, so
+     *         don't use it to provide sensitive information.
+     *         </p>
+     *         </li>
+     *         </ul>
+     *         </note>
+     */
+    public java.util.Map<String, String> getClientMetadata() {
+        return clientMetadata;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the SignUp API action, Amazon Cognito invokes
+     * any functions that are assigned to the following triggers: <i>pre
+     * sign-up</i>, <i>custom message</i>, and <i>post confirmation</i>. When
+     * Amazon Cognito invokes any of these functions, it passes a JSON payload,
+     * which the function receives as input. This payload contains a
+     * <code>clientMetadata</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your SignUp request. In your
+     * function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     *
+     * @param clientMetadata <p>
+     *            A map of custom key-value pairs that you can provide as input
+     *            for any custom workflows that this action triggers.
+     *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the SignUp API action,
+     *            Amazon Cognito invokes any functions that are assigned to the
+     *            following triggers: <i>pre sign-up</i>, <i>custom message</i>,
+     *            and <i>post confirmation</i>. When Amazon Cognito invokes any
+     *            of these functions, it passes a JSON payload, which the
+     *            function receives as input. This payload contains a
+     *            <code>clientMetadata</code> attribute, which provides the data
+     *            that you assigned to the ClientMetadata parameter in your
+     *            SignUp request. In your function code in AWS Lambda, you can
+     *            process the <code>clientMetadata</code> value to enhance your
+     *            workflow for your specific needs.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
+     */
+    public void setClientMetadata(java.util.Map<String, String> clientMetadata) {
+        this.clientMetadata = clientMetadata;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the SignUp API action, Amazon Cognito invokes
+     * any functions that are assigned to the following triggers: <i>pre
+     * sign-up</i>, <i>custom message</i>, and <i>post confirmation</i>. When
+     * Amazon Cognito invokes any of these functions, it passes a JSON payload,
+     * which the function receives as input. This payload contains a
+     * <code>clientMetadata</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your SignUp request. In your
+     * function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param clientMetadata <p>
+     *            A map of custom key-value pairs that you can provide as input
+     *            for any custom workflows that this action triggers.
+     *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the SignUp API action,
+     *            Amazon Cognito invokes any functions that are assigned to the
+     *            following triggers: <i>pre sign-up</i>, <i>custom message</i>,
+     *            and <i>post confirmation</i>. When Amazon Cognito invokes any
+     *            of these functions, it passes a JSON payload, which the
+     *            function receives as input. This payload contains a
+     *            <code>clientMetadata</code> attribute, which provides the data
+     *            that you assigned to the ClientMetadata parameter in your
+     *            SignUp request. In your function code in AWS Lambda, you can
+     *            process the <code>clientMetadata</code> value to enhance your
+     *            workflow for your specific needs.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public SignUpRequest withClientMetadata(java.util.Map<String, String> clientMetadata) {
+        this.clientMetadata = clientMetadata;
+        return this;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the SignUp API action, Amazon Cognito invokes
+     * any functions that are assigned to the following triggers: <i>pre
+     * sign-up</i>, <i>custom message</i>, and <i>post confirmation</i>. When
+     * Amazon Cognito invokes any of these functions, it passes a JSON payload,
+     * which the function receives as input. This payload contains a
+     * <code>clientMetadata</code> attribute, which provides the data that you
+     * assigned to the ClientMetadata parameter in your SignUp request. In your
+     * function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
+     * The method adds a new key-value pair into ClientMetadata parameter, and
+     * returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param key The key of the entry to be added into ClientMetadata.
+     * @param value The corresponding value of the entry to be added into
+     *            ClientMetadata.
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public SignUpRequest addClientMetadataEntry(String key, String value) {
+        if (null == this.clientMetadata) {
+            this.clientMetadata = new java.util.HashMap<String, String>();
+        }
+        if (this.clientMetadata.containsKey(key))
+            throw new IllegalArgumentException("Duplicated keys (" + key.toString()
+                    + ") are provided.");
+        this.clientMetadata.put(key, value);
+        return this;
+    }
+
+    /**
+     * Removes all the entries added into ClientMetadata.
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     */
+    public SignUpRequest clearClientMetadataEntries() {
+        this.clientMetadata = null;
+        return this;
+    }
+
     /**
      * Returns a string representation of this object; useful for testing and
      * debugging.
@@ -661,7 +1132,9 @@ public String toString() {
         if (getAnalyticsMetadata() != null)
             sb.append("AnalyticsMetadata: " + getAnalyticsMetadata() + ",");
         if (getUserContextData() != null)
-            sb.append("UserContextData: " + getUserContextData());
+            sb.append("UserContextData: " + getUserContextData() + ",");
+        if (getClientMetadata() != null)
+            sb.append("ClientMetadata: " + getClientMetadata());
         sb.append("}");
         return sb.toString();
     }
@@ -683,6 +1156,8 @@ public int hashCode() {
                 + ((getAnalyticsMetadata() == null) ? 0 : getAnalyticsMetadata().hashCode());
         hashCode = prime * hashCode
                 + ((getUserContextData() == null) ? 0 : getUserContextData().hashCode());
+        hashCode = prime * hashCode
+                + ((getClientMetadata() == null) ? 0 : getClientMetadata().hashCode());
         return hashCode;
     }
 
@@ -734,6 +1209,11 @@ public boolean equals(Object obj) {
         if (other.getUserContextData() != null
                 && other.getUserContextData().equals(this.getUserContextData()) == false)
             return false;
+        if (other.getClientMetadata() == null ^ this.getClientMetadata() == null)
+            return false;
+        if (other.getClientMetadata() != null
+                && other.getClientMetadata().equals(this.getClientMetadata()) == false)
+            return false;
         return true;
     }
 }
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SmsConfigurationType.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SmsConfigurationType.java
index 310eed11b6..210d80bb73 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SmsConfigurationType.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SmsConfigurationType.java
@@ -19,14 +19,18 @@
 
 /**
  * <p>
- * The SMS configuration type.
+ * The SMS configuration type that includes the settings the Cognito User Pool
+ * needs to call for the Amazon SNS service to send an SMS message from your AWS
+ * account. The Cognito User Pool makes the request to the Amazon SNS Service by
+ * using an AWS IAM role that you provide for your AWS account.
  * </p>
  */
 public class SmsConfigurationType implements Serializable {
     /**
      * <p>
      * The Amazon Resource Name (ARN) of the Amazon Simple Notification Service
-     * (SNS) caller.
+     * (SNS) caller. This is the ARN of the IAM role in your AWS account which
+     * Cognito will use to send SMS messages.
      * </p>
      * <p>
      * <b>Constraints:</b><br/>
@@ -39,7 +43,15 @@
 
     /**
      * <p>
-     * The external ID.
+     * The external ID is a value that we recommend you use to add security to
+     * your IAM role which is used to call Amazon SNS to send SMS messages for
+     * your user pool. If you provide an <code>ExternalId</code>, the Cognito
+     * User Pool will include it when attempting to assume your IAM role, so
+     * that you can set your roles trust policy to require the
+     * <code>ExternalID</code>. If you use the Cognito Management Console to
+     * create a role for SMS MFA, Cognito will create a role with the required
+     * permissions and a trust policy that demonstrates use of the
+     * <code>ExternalId</code>.
      * </p>
      */
     private String externalId;
@@ -47,7 +59,8 @@
     /**
      * <p>
      * The Amazon Resource Name (ARN) of the Amazon Simple Notification Service
-     * (SNS) caller.
+     * (SNS) caller. This is the ARN of the IAM role in your AWS account which
+     * Cognito will use to send SMS messages.
      * </p>
      * <p>
      * <b>Constraints:</b><br/>
@@ -58,7 +71,8 @@
      *
      * @return <p>
      *         The Amazon Resource Name (ARN) of the Amazon Simple Notification
-     *         Service (SNS) caller.
+     *         Service (SNS) caller. This is the ARN of the IAM role in your AWS
+     *         account which Cognito will use to send SMS messages.
      *         </p>
      */
     public String getSnsCallerArn() {
@@ -68,7 +82,8 @@ public String getSnsCallerArn() {
     /**
      * <p>
      * The Amazon Resource Name (ARN) of the Amazon Simple Notification Service
-     * (SNS) caller.
+     * (SNS) caller. This is the ARN of the IAM role in your AWS account which
+     * Cognito will use to send SMS messages.
      * </p>
      * <p>
      * <b>Constraints:</b><br/>
@@ -79,7 +94,9 @@ public String getSnsCallerArn() {
      *
      * @param snsCallerArn <p>
      *            The Amazon Resource Name (ARN) of the Amazon Simple
-     *            Notification Service (SNS) caller.
+     *            Notification Service (SNS) caller. This is the ARN of the IAM
+     *            role in your AWS account which Cognito will use to send SMS
+     *            messages.
      *            </p>
      */
     public void setSnsCallerArn(String snsCallerArn) {
@@ -89,7 +106,8 @@ public void setSnsCallerArn(String snsCallerArn) {
     /**
      * <p>
      * The Amazon Resource Name (ARN) of the Amazon Simple Notification Service
-     * (SNS) caller.
+     * (SNS) caller. This is the ARN of the IAM role in your AWS account which
+     * Cognito will use to send SMS messages.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
@@ -103,7 +121,9 @@ public void setSnsCallerArn(String snsCallerArn) {
      *
      * @param snsCallerArn <p>
      *            The Amazon Resource Name (ARN) of the Amazon Simple
-     *            Notification Service (SNS) caller.
+     *            Notification Service (SNS) caller. This is the ARN of the IAM
+     *            role in your AWS account which Cognito will use to send SMS
+     *            messages.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
@@ -115,11 +135,28 @@ public SmsConfigurationType withSnsCallerArn(String snsCallerArn) {
 
     /**
      * <p>
-     * The external ID.
+     * The external ID is a value that we recommend you use to add security to
+     * your IAM role which is used to call Amazon SNS to send SMS messages for
+     * your user pool. If you provide an <code>ExternalId</code>, the Cognito
+     * User Pool will include it when attempting to assume your IAM role, so
+     * that you can set your roles trust policy to require the
+     * <code>ExternalID</code>. If you use the Cognito Management Console to
+     * create a role for SMS MFA, Cognito will create a role with the required
+     * permissions and a trust policy that demonstrates use of the
+     * <code>ExternalId</code>.
      * </p>
      *
      * @return <p>
-     *         The external ID.
+     *         The external ID is a value that we recommend you use to add
+     *         security to your IAM role which is used to call Amazon SNS to
+     *         send SMS messages for your user pool. If you provide an
+     *         <code>ExternalId</code>, the Cognito User Pool will include it
+     *         when attempting to assume your IAM role, so that you can set your
+     *         roles trust policy to require the <code>ExternalID</code>. If you
+     *         use the Cognito Management Console to create a role for SMS MFA,
+     *         Cognito will create a role with the required permissions and a
+     *         trust policy that demonstrates use of the <code>ExternalId</code>
+     *         .
      *         </p>
      */
     public String getExternalId() {
@@ -128,11 +165,28 @@ public String getExternalId() {
 
     /**
      * <p>
-     * The external ID.
+     * The external ID is a value that we recommend you use to add security to
+     * your IAM role which is used to call Amazon SNS to send SMS messages for
+     * your user pool. If you provide an <code>ExternalId</code>, the Cognito
+     * User Pool will include it when attempting to assume your IAM role, so
+     * that you can set your roles trust policy to require the
+     * <code>ExternalID</code>. If you use the Cognito Management Console to
+     * create a role for SMS MFA, Cognito will create a role with the required
+     * permissions and a trust policy that demonstrates use of the
+     * <code>ExternalId</code>.
      * </p>
      *
      * @param externalId <p>
-     *            The external ID.
+     *            The external ID is a value that we recommend you use to add
+     *            security to your IAM role which is used to call Amazon SNS to
+     *            send SMS messages for your user pool. If you provide an
+     *            <code>ExternalId</code>, the Cognito User Pool will include it
+     *            when attempting to assume your IAM role, so that you can set
+     *            your roles trust policy to require the <code>ExternalID</code>
+     *            . If you use the Cognito Management Console to create a role
+     *            for SMS MFA, Cognito will create a role with the required
+     *            permissions and a trust policy that demonstrates use of the
+     *            <code>ExternalId</code>.
      *            </p>
      */
     public void setExternalId(String externalId) {
@@ -141,14 +195,31 @@ public void setExternalId(String externalId) {
 
     /**
      * <p>
-     * The external ID.
+     * The external ID is a value that we recommend you use to add security to
+     * your IAM role which is used to call Amazon SNS to send SMS messages for
+     * your user pool. If you provide an <code>ExternalId</code>, the Cognito
+     * User Pool will include it when attempting to assume your IAM role, so
+     * that you can set your roles trust policy to require the
+     * <code>ExternalID</code>. If you use the Cognito Management Console to
+     * create a role for SMS MFA, Cognito will create a role with the required
+     * permissions and a trust policy that demonstrates use of the
+     * <code>ExternalId</code>.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
      *
      * @param externalId <p>
-     *            The external ID.
+     *            The external ID is a value that we recommend you use to add
+     *            security to your IAM role which is used to call Amazon SNS to
+     *            send SMS messages for your user pool. If you provide an
+     *            <code>ExternalId</code>, the Cognito User Pool will include it
+     *            when attempting to assume your IAM role, so that you can set
+     *            your roles trust policy to require the <code>ExternalID</code>
+     *            . If you use the Cognito Management Console to create a role
+     *            for SMS MFA, Cognito will create a role with the required
+     *            permissions and a trust policy that demonstrates use of the
+     *            <code>ExternalId</code>.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SmsMfaConfigType.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SmsMfaConfigType.java
index d05f98205e..4cbb4078fa 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SmsMfaConfigType.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SmsMfaConfigType.java
@@ -25,7 +25,10 @@
 public class SmsMfaConfigType implements Serializable {
     /**
      * <p>
-     * The SMS authentication message.
+     * The SMS authentication message that will be sent to users with the code
+     * they need to sign in. The message must contain the ‘{####}’ placeholder,
+     * which will be replaced with the code. If the message is not included, and
+     * default message will be used.
      * </p>
      * <p>
      * <b>Constraints:</b><br/>
@@ -43,7 +46,10 @@
 
     /**
      * <p>
-     * The SMS authentication message.
+     * The SMS authentication message that will be sent to users with the code
+     * they need to sign in. The message must contain the ‘{####}’ placeholder,
+     * which will be replaced with the code. If the message is not included, and
+     * default message will be used.
      * </p>
      * <p>
      * <b>Constraints:</b><br/>
@@ -51,7 +57,10 @@
      * <b>Pattern: </b>.*\{####\}.*<br/>
      *
      * @return <p>
-     *         The SMS authentication message.
+     *         The SMS authentication message that will be sent to users with
+     *         the code they need to sign in. The message must contain the
+     *         ‘{####}’ placeholder, which will be replaced with the code. If
+     *         the message is not included, and default message will be used.
      *         </p>
      */
     public String getSmsAuthenticationMessage() {
@@ -60,7 +69,10 @@ public String getSmsAuthenticationMessage() {
 
     /**
      * <p>
-     * The SMS authentication message.
+     * The SMS authentication message that will be sent to users with the code
+     * they need to sign in. The message must contain the ‘{####}’ placeholder,
+     * which will be replaced with the code. If the message is not included, and
+     * default message will be used.
      * </p>
      * <p>
      * <b>Constraints:</b><br/>
@@ -68,7 +80,10 @@ public String getSmsAuthenticationMessage() {
      * <b>Pattern: </b>.*\{####\}.*<br/>
      *
      * @param smsAuthenticationMessage <p>
-     *            The SMS authentication message.
+     *            The SMS authentication message that will be sent to users with
+     *            the code they need to sign in. The message must contain the
+     *            ‘{####}’ placeholder, which will be replaced with the code. If
+     *            the message is not included, and default message will be used.
      *            </p>
      */
     public void setSmsAuthenticationMessage(String smsAuthenticationMessage) {
@@ -77,7 +92,10 @@ public void setSmsAuthenticationMessage(String smsAuthenticationMessage) {
 
     /**
      * <p>
-     * The SMS authentication message.
+     * The SMS authentication message that will be sent to users with the code
+     * they need to sign in. The message must contain the ‘{####}’ placeholder,
+     * which will be replaced with the code. If the message is not included, and
+     * default message will be used.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
@@ -88,7 +106,10 @@ public void setSmsAuthenticationMessage(String smsAuthenticationMessage) {
      * <b>Pattern: </b>.*\{####\}.*<br/>
      *
      * @param smsAuthenticationMessage <p>
-     *            The SMS authentication message.
+     *            The SMS authentication message that will be sent to users with
+     *            the code they need to sign in. The message must contain the
+     *            ‘{####}’ placeholder, which will be replaced with the code. If
+     *            the message is not included, and default message will be used.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SoftwareTokenMfaSettingsType.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SoftwareTokenMfaSettingsType.java
index 88bac062eb..e8e25a738c 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SoftwareTokenMfaSettingsType.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/SoftwareTokenMfaSettingsType.java
@@ -32,7 +32,7 @@
 
     /**
      * <p>
-     * The preferred MFA method.
+     * Specifies whether software token MFA is the preferred MFA method.
      * </p>
      */
     private Boolean preferredMfa;
@@ -97,11 +97,11 @@ public SoftwareTokenMfaSettingsType withEnabled(Boolean enabled) {
 
     /**
      * <p>
-     * The preferred MFA method.
+     * Specifies whether software token MFA is the preferred MFA method.
      * </p>
      *
      * @return <p>
-     *         The preferred MFA method.
+     *         Specifies whether software token MFA is the preferred MFA method.
      *         </p>
      */
     public Boolean isPreferredMfa() {
@@ -110,11 +110,11 @@ public Boolean isPreferredMfa() {
 
     /**
      * <p>
-     * The preferred MFA method.
+     * Specifies whether software token MFA is the preferred MFA method.
      * </p>
      *
      * @return <p>
-     *         The preferred MFA method.
+     *         Specifies whether software token MFA is the preferred MFA method.
      *         </p>
      */
     public Boolean getPreferredMfa() {
@@ -123,11 +123,12 @@ public Boolean getPreferredMfa() {
 
     /**
      * <p>
-     * The preferred MFA method.
+     * Specifies whether software token MFA is the preferred MFA method.
      * </p>
      *
      * @param preferredMfa <p>
-     *            The preferred MFA method.
+     *            Specifies whether software token MFA is the preferred MFA
+     *            method.
      *            </p>
      */
     public void setPreferredMfa(Boolean preferredMfa) {
@@ -136,14 +137,15 @@ public void setPreferredMfa(Boolean preferredMfa) {
 
     /**
      * <p>
-     * The preferred MFA method.
+     * Specifies whether software token MFA is the preferred MFA method.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
      * together.
      *
      * @param preferredMfa <p>
-     *            The preferred MFA method.
+     *            Specifies whether software token MFA is the preferred MFA
+     *            method.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/UpdateGroupRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/UpdateGroupRequest.java
index 8e27b89617..b2593b59f1 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/UpdateGroupRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/UpdateGroupRequest.java
@@ -24,7 +24,7 @@
  * Updates the specified group with the specified attributes.
  * </p>
  * <p>
- * Requires developer credentials.
+ * Calling this action requires developer credentials.
  * </p>
  */
 public class UpdateGroupRequest extends AmazonWebServiceRequest implements Serializable {
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/UpdateUserAttributesRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/UpdateUserAttributesRequest.java
index 1370d2b4c9..d2ca353a63 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/UpdateUserAttributesRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/UpdateUserAttributesRequest.java
@@ -46,6 +46,60 @@
      */
     private String accessToken;
 
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the UpdateUserAttributes API action, Amazon
+     * Cognito invokes the functions that are assigned to the <i>custom
+     * message</i> and <i>pre mutation</i> triggers. When Amazon Cognito invokes
+     * either of these functions, it passes a JSON payload, which the function
+     * receives as input. This payload contains a <code>clientMetadata</code>
+     * attribute, which provides the data that you assigned to the
+     * ClientMetadata parameter in your UpdateUserAttributes request. In your
+     * function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     */
+    private java.util.Map<String, String> clientMetadata;
+
     /**
      * <p>
      * An array of name-value pairs representing user attributes.
@@ -207,6 +261,423 @@ public UpdateUserAttributesRequest withAccessToken(String accessToken) {
         return this;
     }
 
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the UpdateUserAttributes API action, Amazon
+     * Cognito invokes the functions that are assigned to the <i>custom
+     * message</i> and <i>pre mutation</i> triggers. When Amazon Cognito invokes
+     * either of these functions, it passes a JSON payload, which the function
+     * receives as input. This payload contains a <code>clientMetadata</code>
+     * attribute, which provides the data that you assigned to the
+     * ClientMetadata parameter in your UpdateUserAttributes request. In your
+     * function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     *
+     * @return <p>
+     *         A map of custom key-value pairs that you can provide as input for
+     *         any custom workflows that this action triggers.
+     *         </p>
+     *         <p>
+     *         You create custom workflows by assigning AWS Lambda functions to
+     *         user pool triggers. When you use the UpdateUserAttributes API
+     *         action, Amazon Cognito invokes the functions that are assigned to
+     *         the <i>custom message</i> and <i>pre mutation</i> triggers. When
+     *         Amazon Cognito invokes either of these functions, it passes a
+     *         JSON payload, which the function receives as input. This payload
+     *         contains a <code>clientMetadata</code> attribute, which provides
+     *         the data that you assigned to the ClientMetadata parameter in
+     *         your UpdateUserAttributes request. In your function code in AWS
+     *         Lambda, you can process the <code>clientMetadata</code> value to
+     *         enhance your workflow for your specific needs.
+     *         </p>
+     *         <p>
+     *         For more information, see <a href=
+     *         "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *         >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     *         <i>Amazon Cognito Developer Guide</i>.
+     *         </p>
+     *         <note>
+     *         <p>
+     *         Take the following limitations into consideration when you use
+     *         the ClientMetadata parameter:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not store the ClientMetadata value. This data
+     *         is available only to AWS Lambda triggers that are assigned to a
+     *         user pool to support custom workflows. If your user pool
+     *         configuration does not include triggers, the ClientMetadata
+     *         parameter serves no purpose.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not validate the ClientMetadata value.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         Amazon Cognito does not encrypt the the ClientMetadata value, so
+     *         don't use it to provide sensitive information.
+     *         </p>
+     *         </li>
+     *         </ul>
+     *         </note>
+     */
+    public java.util.Map<String, String> getClientMetadata() {
+        return clientMetadata;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the UpdateUserAttributes API action, Amazon
+     * Cognito invokes the functions that are assigned to the <i>custom
+     * message</i> and <i>pre mutation</i> triggers. When Amazon Cognito invokes
+     * either of these functions, it passes a JSON payload, which the function
+     * receives as input. This payload contains a <code>clientMetadata</code>
+     * attribute, which provides the data that you assigned to the
+     * ClientMetadata parameter in your UpdateUserAttributes request. In your
+     * function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     *
+     * @param clientMetadata <p>
+     *            A map of custom key-value pairs that you can provide as input
+     *            for any custom workflows that this action triggers.
+     *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the UpdateUserAttributes
+     *            API action, Amazon Cognito invokes the functions that are
+     *            assigned to the <i>custom message</i> and <i>pre mutation</i>
+     *            triggers. When Amazon Cognito invokes either of these
+     *            functions, it passes a JSON payload, which the function
+     *            receives as input. This payload contains a
+     *            <code>clientMetadata</code> attribute, which provides the data
+     *            that you assigned to the ClientMetadata parameter in your
+     *            UpdateUserAttributes request. In your function code in AWS
+     *            Lambda, you can process the <code>clientMetadata</code> value
+     *            to enhance your workflow for your specific needs.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
+     */
+    public void setClientMetadata(java.util.Map<String, String> clientMetadata) {
+        this.clientMetadata = clientMetadata;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the UpdateUserAttributes API action, Amazon
+     * Cognito invokes the functions that are assigned to the <i>custom
+     * message</i> and <i>pre mutation</i> triggers. When Amazon Cognito invokes
+     * either of these functions, it passes a JSON payload, which the function
+     * receives as input. This payload contains a <code>clientMetadata</code>
+     * attribute, which provides the data that you assigned to the
+     * ClientMetadata parameter in your UpdateUserAttributes request. In your
+     * function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param clientMetadata <p>
+     *            A map of custom key-value pairs that you can provide as input
+     *            for any custom workflows that this action triggers.
+     *            </p>
+     *            <p>
+     *            You create custom workflows by assigning AWS Lambda functions
+     *            to user pool triggers. When you use the UpdateUserAttributes
+     *            API action, Amazon Cognito invokes the functions that are
+     *            assigned to the <i>custom message</i> and <i>pre mutation</i>
+     *            triggers. When Amazon Cognito invokes either of these
+     *            functions, it passes a JSON payload, which the function
+     *            receives as input. This payload contains a
+     *            <code>clientMetadata</code> attribute, which provides the data
+     *            that you assigned to the ClientMetadata parameter in your
+     *            UpdateUserAttributes request. In your function code in AWS
+     *            Lambda, you can process the <code>clientMetadata</code> value
+     *            to enhance your workflow for your specific needs.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     *            >Customizing User Pool Workflows with Lambda Triggers</a> in
+     *            the <i>Amazon Cognito Developer Guide</i>.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            Take the following limitations into consideration when you use
+     *            the ClientMetadata parameter:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not store the ClientMetadata value. This
+     *            data is available only to AWS Lambda triggers that are
+     *            assigned to a user pool to support custom workflows. If your
+     *            user pool configuration does not include triggers, the
+     *            ClientMetadata parameter serves no purpose.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not validate the ClientMetadata value.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            Amazon Cognito does not encrypt the the ClientMetadata value,
+     *            so don't use it to provide sensitive information.
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </note>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public UpdateUserAttributesRequest withClientMetadata(
+            java.util.Map<String, String> clientMetadata) {
+        this.clientMetadata = clientMetadata;
+        return this;
+    }
+
+    /**
+     * <p>
+     * A map of custom key-value pairs that you can provide as input for any
+     * custom workflows that this action triggers.
+     * </p>
+     * <p>
+     * You create custom workflows by assigning AWS Lambda functions to user
+     * pool triggers. When you use the UpdateUserAttributes API action, Amazon
+     * Cognito invokes the functions that are assigned to the <i>custom
+     * message</i> and <i>pre mutation</i> triggers. When Amazon Cognito invokes
+     * either of these functions, it passes a JSON payload, which the function
+     * receives as input. This payload contains a <code>clientMetadata</code>
+     * attribute, which provides the data that you assigned to the
+     * ClientMetadata parameter in your UpdateUserAttributes request. In your
+     * function code in AWS Lambda, you can process the
+     * <code>clientMetadata</code> value to enhance your workflow for your
+     * specific needs.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"
+     * >Customizing User Pool Workflows with Lambda Triggers</a> in the
+     * <i>Amazon Cognito Developer Guide</i>.
+     * </p>
+     * <note>
+     * <p>
+     * Take the following limitations into consideration when you use the
+     * ClientMetadata parameter:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Amazon Cognito does not store the ClientMetadata value. This data is
+     * available only to AWS Lambda triggers that are assigned to a user pool to
+     * support custom workflows. If your user pool configuration does not
+     * include triggers, the ClientMetadata parameter serves no purpose.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not validate the ClientMetadata value.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * Amazon Cognito does not encrypt the the ClientMetadata value, so don't
+     * use it to provide sensitive information.
+     * </p>
+     * </li>
+     * </ul>
+     * </note>
+     * <p>
+     * The method adds a new key-value pair into ClientMetadata parameter, and
+     * returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param key The key of the entry to be added into ClientMetadata.
+     * @param value The corresponding value of the entry to be added into
+     *            ClientMetadata.
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public UpdateUserAttributesRequest addClientMetadataEntry(String key, String value) {
+        if (null == this.clientMetadata) {
+            this.clientMetadata = new java.util.HashMap<String, String>();
+        }
+        if (this.clientMetadata.containsKey(key))
+            throw new IllegalArgumentException("Duplicated keys (" + key.toString()
+                    + ") are provided.");
+        this.clientMetadata.put(key, value);
+        return this;
+    }
+
+    /**
+     * Removes all the entries added into ClientMetadata.
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     */
+    public UpdateUserAttributesRequest clearClientMetadataEntries() {
+        this.clientMetadata = null;
+        return this;
+    }
+
     /**
      * Returns a string representation of this object; useful for testing and
      * debugging.
@@ -221,7 +692,9 @@ public String toString() {
         if (getUserAttributes() != null)
             sb.append("UserAttributes: " + getUserAttributes() + ",");
         if (getAccessToken() != null)
-            sb.append("AccessToken: " + getAccessToken());
+            sb.append("AccessToken: " + getAccessToken() + ",");
+        if (getClientMetadata() != null)
+            sb.append("ClientMetadata: " + getClientMetadata());
         sb.append("}");
         return sb.toString();
     }
@@ -235,6 +708,8 @@ public int hashCode() {
                 + ((getUserAttributes() == null) ? 0 : getUserAttributes().hashCode());
         hashCode = prime * hashCode
                 + ((getAccessToken() == null) ? 0 : getAccessToken().hashCode());
+        hashCode = prime * hashCode
+                + ((getClientMetadata() == null) ? 0 : getClientMetadata().hashCode());
         return hashCode;
     }
 
@@ -259,6 +734,11 @@ public boolean equals(Object obj) {
         if (other.getAccessToken() != null
                 && other.getAccessToken().equals(this.getAccessToken()) == false)
             return false;
+        if (other.getClientMetadata() == null ^ this.getClientMetadata() == null)
+            return false;
+        if (other.getClientMetadata() != null
+                && other.getClientMetadata().equals(this.getClientMetadata()) == false)
+            return false;
         return true;
     }
 }
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/UpdateUserPoolClientRequest.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/UpdateUserPoolClientRequest.java
index f3e4ac0e3c..26139c7670 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/UpdateUserPoolClientRequest.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/UpdateUserPoolClientRequest.java
@@ -201,7 +201,8 @@
      * <p>
      * A list of allowed <code>OAuth</code> scopes. Currently supported values
      * are <code>"phone"</code>, <code>"email"</code>, <code>"openid"</code>,
-     * and <code>"Cognito"</code>.
+     * and <code>"Cognito"</code>. In addition to these values, custom scopes
+     * created in Resource Servers are also supported.
      * </p>
      */
     private java.util.List<String> allowedOAuthScopes;
@@ -1519,13 +1520,16 @@ public UpdateUserPoolClientRequest withAllowedOAuthFlows(
      * <p>
      * A list of allowed <code>OAuth</code> scopes. Currently supported values
      * are <code>"phone"</code>, <code>"email"</code>, <code>"openid"</code>,
-     * and <code>"Cognito"</code>.
+     * and <code>"Cognito"</code>. In addition to these values, custom scopes
+     * created in Resource Servers are also supported.
      * </p>
      *
      * @return <p>
      *         A list of allowed <code>OAuth</code> scopes. Currently supported
      *         values are <code>"phone"</code>, <code>"email"</code>,
-     *         <code>"openid"</code>, and <code>"Cognito"</code>.
+     *         <code>"openid"</code>, and <code>"Cognito"</code>. In addition to
+     *         these values, custom scopes created in Resource Servers are also
+     *         supported.
      *         </p>
      */
     public java.util.List<String> getAllowedOAuthScopes() {
@@ -1536,14 +1540,16 @@ public UpdateUserPoolClientRequest withAllowedOAuthFlows(
      * <p>
      * A list of allowed <code>OAuth</code> scopes. Currently supported values
      * are <code>"phone"</code>, <code>"email"</code>, <code>"openid"</code>,
-     * and <code>"Cognito"</code>.
+     * and <code>"Cognito"</code>. In addition to these values, custom scopes
+     * created in Resource Servers are also supported.
      * </p>
      *
      * @param allowedOAuthScopes <p>
      *            A list of allowed <code>OAuth</code> scopes. Currently
      *            supported values are <code>"phone"</code>,
      *            <code>"email"</code>, <code>"openid"</code>, and
-     *            <code>"Cognito"</code>.
+     *            <code>"Cognito"</code>. In addition to these values, custom
+     *            scopes created in Resource Servers are also supported.
      *            </p>
      */
     public void setAllowedOAuthScopes(java.util.Collection<String> allowedOAuthScopes) {
@@ -1559,7 +1565,8 @@ public void setAllowedOAuthScopes(java.util.Collection<String> allowedOAuthScope
      * <p>
      * A list of allowed <code>OAuth</code> scopes. Currently supported values
      * are <code>"phone"</code>, <code>"email"</code>, <code>"openid"</code>,
-     * and <code>"Cognito"</code>.
+     * and <code>"Cognito"</code>. In addition to these values, custom scopes
+     * created in Resource Servers are also supported.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
@@ -1569,7 +1576,8 @@ public void setAllowedOAuthScopes(java.util.Collection<String> allowedOAuthScope
      *            A list of allowed <code>OAuth</code> scopes. Currently
      *            supported values are <code>"phone"</code>,
      *            <code>"email"</code>, <code>"openid"</code>, and
-     *            <code>"Cognito"</code>.
+     *            <code>"Cognito"</code>. In addition to these values, custom
+     *            scopes created in Resource Servers are also supported.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
@@ -1588,7 +1596,8 @@ public UpdateUserPoolClientRequest withAllowedOAuthScopes(String... allowedOAuth
      * <p>
      * A list of allowed <code>OAuth</code> scopes. Currently supported values
      * are <code>"phone"</code>, <code>"email"</code>, <code>"openid"</code>,
-     * and <code>"Cognito"</code>.
+     * and <code>"Cognito"</code>. In addition to these values, custom scopes
+     * created in Resource Servers are also supported.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
@@ -1598,7 +1607,8 @@ public UpdateUserPoolClientRequest withAllowedOAuthScopes(String... allowedOAuth
      *            A list of allowed <code>OAuth</code> scopes. Currently
      *            supported values are <code>"phone"</code>,
      *            <code>"email"</code>, <code>"openid"</code>, and
-     *            <code>"Cognito"</code>.
+     *            <code>"Cognito"</code>. In addition to these values, custom
+     *            scopes created in Resource Servers are also supported.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/UserPoolClientType.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/UserPoolClientType.java
index b11e5a2e1c..2ff716fc37 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/UserPoolClientType.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/UserPoolClientType.java
@@ -225,7 +225,8 @@
      * <p>
      * A list of allowed <code>OAuth</code> scopes. Currently supported values
      * are <code>"phone"</code>, <code>"email"</code>, <code>"openid"</code>,
-     * and <code>"Cognito"</code>.
+     * and <code>"Cognito"</code>. In addition to these values, custom scopes
+     * created in Resource Servers are also supported.
      * </p>
      */
     private java.util.List<String> allowedOAuthScopes;
@@ -1716,13 +1717,16 @@ public UserPoolClientType withAllowedOAuthFlows(java.util.Collection<String> all
      * <p>
      * A list of allowed <code>OAuth</code> scopes. Currently supported values
      * are <code>"phone"</code>, <code>"email"</code>, <code>"openid"</code>,
-     * and <code>"Cognito"</code>.
+     * and <code>"Cognito"</code>. In addition to these values, custom scopes
+     * created in Resource Servers are also supported.
      * </p>
      *
      * @return <p>
      *         A list of allowed <code>OAuth</code> scopes. Currently supported
      *         values are <code>"phone"</code>, <code>"email"</code>,
-     *         <code>"openid"</code>, and <code>"Cognito"</code>.
+     *         <code>"openid"</code>, and <code>"Cognito"</code>. In addition to
+     *         these values, custom scopes created in Resource Servers are also
+     *         supported.
      *         </p>
      */
     public java.util.List<String> getAllowedOAuthScopes() {
@@ -1733,14 +1737,16 @@ public UserPoolClientType withAllowedOAuthFlows(java.util.Collection<String> all
      * <p>
      * A list of allowed <code>OAuth</code> scopes. Currently supported values
      * are <code>"phone"</code>, <code>"email"</code>, <code>"openid"</code>,
-     * and <code>"Cognito"</code>.
+     * and <code>"Cognito"</code>. In addition to these values, custom scopes
+     * created in Resource Servers are also supported.
      * </p>
      *
      * @param allowedOAuthScopes <p>
      *            A list of allowed <code>OAuth</code> scopes. Currently
      *            supported values are <code>"phone"</code>,
      *            <code>"email"</code>, <code>"openid"</code>, and
-     *            <code>"Cognito"</code>.
+     *            <code>"Cognito"</code>. In addition to these values, custom
+     *            scopes created in Resource Servers are also supported.
      *            </p>
      */
     public void setAllowedOAuthScopes(java.util.Collection<String> allowedOAuthScopes) {
@@ -1756,7 +1762,8 @@ public void setAllowedOAuthScopes(java.util.Collection<String> allowedOAuthScope
      * <p>
      * A list of allowed <code>OAuth</code> scopes. Currently supported values
      * are <code>"phone"</code>, <code>"email"</code>, <code>"openid"</code>,
-     * and <code>"Cognito"</code>.
+     * and <code>"Cognito"</code>. In addition to these values, custom scopes
+     * created in Resource Servers are also supported.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
@@ -1766,7 +1773,8 @@ public void setAllowedOAuthScopes(java.util.Collection<String> allowedOAuthScope
      *            A list of allowed <code>OAuth</code> scopes. Currently
      *            supported values are <code>"phone"</code>,
      *            <code>"email"</code>, <code>"openid"</code>, and
-     *            <code>"Cognito"</code>.
+     *            <code>"Cognito"</code>. In addition to these values, custom
+     *            scopes created in Resource Servers are also supported.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
@@ -1785,7 +1793,8 @@ public UserPoolClientType withAllowedOAuthScopes(String... allowedOAuthScopes) {
      * <p>
      * A list of allowed <code>OAuth</code> scopes. Currently supported values
      * are <code>"phone"</code>, <code>"email"</code>, <code>"openid"</code>,
-     * and <code>"Cognito"</code>.
+     * and <code>"Cognito"</code>. In addition to these values, custom scopes
+     * created in Resource Servers are also supported.
      * </p>
      * <p>
      * Returns a reference to this object so that method calls can be chained
@@ -1795,7 +1804,8 @@ public UserPoolClientType withAllowedOAuthScopes(String... allowedOAuthScopes) {
      *            A list of allowed <code>OAuth</code> scopes. Currently
      *            supported values are <code>"phone"</code>,
      *            <code>"email"</code>, <code>"openid"</code>, and
-     *            <code>"Cognito"</code>.
+     *            <code>"Cognito"</code>. In addition to these values, custom
+     *            scopes created in Resource Servers are also supported.
      *            </p>
      * @return A reference to this updated object so that method calls can be
      *         chained together.
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/AdminConfirmSignUpRequestMarshaller.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/AdminConfirmSignUpRequestMarshaller.java
index 8a27d4d2c9..1b0db1f6e4 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/AdminConfirmSignUpRequestMarshaller.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/AdminConfirmSignUpRequestMarshaller.java
@@ -70,6 +70,21 @@
                 jsonWriter.name("Username");
                 jsonWriter.value(username);
             }
+            if (adminConfirmSignUpRequest.getClientMetadata() != null) {
+                java.util.Map<String, String> clientMetadata = adminConfirmSignUpRequest
+                        .getClientMetadata();
+                jsonWriter.name("ClientMetadata");
+                jsonWriter.beginObject();
+                for (java.util.Map.Entry<String, String> clientMetadataEntry : clientMetadata
+                        .entrySet()) {
+                    String clientMetadataValue = clientMetadataEntry.getValue();
+                    if (clientMetadataValue != null) {
+                        jsonWriter.name(clientMetadataEntry.getKey());
+                        jsonWriter.value(clientMetadataValue);
+                    }
+                }
+                jsonWriter.endObject();
+            }
 
             jsonWriter.endObject();
             jsonWriter.close();
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/AdminCreateUserRequestMarshaller.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/AdminCreateUserRequestMarshaller.java
index 83f42bc3ad..974783aab6 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/AdminCreateUserRequestMarshaller.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/AdminCreateUserRequestMarshaller.java
@@ -122,6 +122,21 @@
                 }
                 jsonWriter.endArray();
             }
+            if (adminCreateUserRequest.getClientMetadata() != null) {
+                java.util.Map<String, String> clientMetadata = adminCreateUserRequest
+                        .getClientMetadata();
+                jsonWriter.name("ClientMetadata");
+                jsonWriter.beginObject();
+                for (java.util.Map.Entry<String, String> clientMetadataEntry : clientMetadata
+                        .entrySet()) {
+                    String clientMetadataValue = clientMetadataEntry.getValue();
+                    if (clientMetadataValue != null) {
+                        jsonWriter.name(clientMetadataEntry.getKey());
+                        jsonWriter.value(clientMetadataValue);
+                    }
+                }
+                jsonWriter.endObject();
+            }
 
             jsonWriter.endObject();
             jsonWriter.close();
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/AdminResetUserPasswordRequestMarshaller.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/AdminResetUserPasswordRequestMarshaller.java
index 16efa996f2..f3604830f7 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/AdminResetUserPasswordRequestMarshaller.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/AdminResetUserPasswordRequestMarshaller.java
@@ -70,6 +70,21 @@
                 jsonWriter.name("Username");
                 jsonWriter.value(username);
             }
+            if (adminResetUserPasswordRequest.getClientMetadata() != null) {
+                java.util.Map<String, String> clientMetadata = adminResetUserPasswordRequest
+                        .getClientMetadata();
+                jsonWriter.name("ClientMetadata");
+                jsonWriter.beginObject();
+                for (java.util.Map.Entry<String, String> clientMetadataEntry : clientMetadata
+                        .entrySet()) {
+                    String clientMetadataValue = clientMetadataEntry.getValue();
+                    if (clientMetadataValue != null) {
+                        jsonWriter.name(clientMetadataEntry.getKey());
+                        jsonWriter.value(clientMetadataValue);
+                    }
+                }
+                jsonWriter.endObject();
+            }
 
             jsonWriter.endObject();
             jsonWriter.close();
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/AdminRespondToAuthChallengeRequestMarshaller.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/AdminRespondToAuthChallengeRequestMarshaller.java
index 47f8bc9e19..95f5b92600 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/AdminRespondToAuthChallengeRequestMarshaller.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/AdminRespondToAuthChallengeRequestMarshaller.java
@@ -107,6 +107,21 @@
                 jsonWriter.name("ContextData");
                 ContextDataTypeJsonMarshaller.getInstance().marshall(contextData, jsonWriter);
             }
+            if (adminRespondToAuthChallengeRequest.getClientMetadata() != null) {
+                java.util.Map<String, String> clientMetadata = adminRespondToAuthChallengeRequest
+                        .getClientMetadata();
+                jsonWriter.name("ClientMetadata");
+                jsonWriter.beginObject();
+                for (java.util.Map.Entry<String, String> clientMetadataEntry : clientMetadata
+                        .entrySet()) {
+                    String clientMetadataValue = clientMetadataEntry.getValue();
+                    if (clientMetadataValue != null) {
+                        jsonWriter.name(clientMetadataEntry.getKey());
+                        jsonWriter.value(clientMetadataValue);
+                    }
+                }
+                jsonWriter.endObject();
+            }
 
             jsonWriter.endObject();
             jsonWriter.close();
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/AdminUpdateUserAttributesRequestMarshaller.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/AdminUpdateUserAttributesRequestMarshaller.java
index 03e2dc8217..cee05dc32f 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/AdminUpdateUserAttributesRequestMarshaller.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/AdminUpdateUserAttributesRequestMarshaller.java
@@ -83,6 +83,21 @@
                 }
                 jsonWriter.endArray();
             }
+            if (adminUpdateUserAttributesRequest.getClientMetadata() != null) {
+                java.util.Map<String, String> clientMetadata = adminUpdateUserAttributesRequest
+                        .getClientMetadata();
+                jsonWriter.name("ClientMetadata");
+                jsonWriter.beginObject();
+                for (java.util.Map.Entry<String, String> clientMetadataEntry : clientMetadata
+                        .entrySet()) {
+                    String clientMetadataValue = clientMetadataEntry.getValue();
+                    if (clientMetadataValue != null) {
+                        jsonWriter.name(clientMetadataEntry.getKey());
+                        jsonWriter.value(clientMetadataValue);
+                    }
+                }
+                jsonWriter.endObject();
+            }
 
             jsonWriter.endObject();
             jsonWriter.close();
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/ConfirmForgotPasswordRequestMarshaller.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/ConfirmForgotPasswordRequestMarshaller.java
index 3c4ac73f1a..2a4b39fba1 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/ConfirmForgotPasswordRequestMarshaller.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/ConfirmForgotPasswordRequestMarshaller.java
@@ -99,6 +99,21 @@
                 UserContextDataTypeJsonMarshaller.getInstance().marshall(userContextData,
                         jsonWriter);
             }
+            if (confirmForgotPasswordRequest.getClientMetadata() != null) {
+                java.util.Map<String, String> clientMetadata = confirmForgotPasswordRequest
+                        .getClientMetadata();
+                jsonWriter.name("ClientMetadata");
+                jsonWriter.beginObject();
+                for (java.util.Map.Entry<String, String> clientMetadataEntry : clientMetadata
+                        .entrySet()) {
+                    String clientMetadataValue = clientMetadataEntry.getValue();
+                    if (clientMetadataValue != null) {
+                        jsonWriter.name(clientMetadataEntry.getKey());
+                        jsonWriter.value(clientMetadataValue);
+                    }
+                }
+                jsonWriter.endObject();
+            }
 
             jsonWriter.endObject();
             jsonWriter.close();
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/ConfirmSignUpRequestMarshaller.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/ConfirmSignUpRequestMarshaller.java
index 44f1fd8963..0cb859402c 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/ConfirmSignUpRequestMarshaller.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/ConfirmSignUpRequestMarshaller.java
@@ -97,6 +97,21 @@
                 UserContextDataTypeJsonMarshaller.getInstance().marshall(userContextData,
                         jsonWriter);
             }
+            if (confirmSignUpRequest.getClientMetadata() != null) {
+                java.util.Map<String, String> clientMetadata = confirmSignUpRequest
+                        .getClientMetadata();
+                jsonWriter.name("ClientMetadata");
+                jsonWriter.beginObject();
+                for (java.util.Map.Entry<String, String> clientMetadataEntry : clientMetadata
+                        .entrySet()) {
+                    String clientMetadataValue = clientMetadataEntry.getValue();
+                    if (clientMetadataValue != null) {
+                        jsonWriter.name(clientMetadataEntry.getKey());
+                        jsonWriter.value(clientMetadataValue);
+                    }
+                }
+                jsonWriter.endObject();
+            }
 
             jsonWriter.endObject();
             jsonWriter.close();
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/ForgotPasswordRequestMarshaller.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/ForgotPasswordRequestMarshaller.java
index 25819454f0..a718c29feb 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/ForgotPasswordRequestMarshaller.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/ForgotPasswordRequestMarshaller.java
@@ -87,6 +87,21 @@
                 AnalyticsMetadataTypeJsonMarshaller.getInstance().marshall(analyticsMetadata,
                         jsonWriter);
             }
+            if (forgotPasswordRequest.getClientMetadata() != null) {
+                java.util.Map<String, String> clientMetadata = forgotPasswordRequest
+                        .getClientMetadata();
+                jsonWriter.name("ClientMetadata");
+                jsonWriter.beginObject();
+                for (java.util.Map.Entry<String, String> clientMetadataEntry : clientMetadata
+                        .entrySet()) {
+                    String clientMetadataValue = clientMetadataEntry.getValue();
+                    if (clientMetadataValue != null) {
+                        jsonWriter.name(clientMetadataEntry.getKey());
+                        jsonWriter.value(clientMetadataValue);
+                    }
+                }
+                jsonWriter.endObject();
+            }
 
             jsonWriter.endObject();
             jsonWriter.close();
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/GetUserAttributeVerificationCodeRequestMarshaller.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/GetUserAttributeVerificationCodeRequestMarshaller.java
index 47e54799be..97b3dba54f 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/GetUserAttributeVerificationCodeRequestMarshaller.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/GetUserAttributeVerificationCodeRequestMarshaller.java
@@ -71,6 +71,21 @@
                 jsonWriter.name("AttributeName");
                 jsonWriter.value(attributeName);
             }
+            if (getUserAttributeVerificationCodeRequest.getClientMetadata() != null) {
+                java.util.Map<String, String> clientMetadata = getUserAttributeVerificationCodeRequest
+                        .getClientMetadata();
+                jsonWriter.name("ClientMetadata");
+                jsonWriter.beginObject();
+                for (java.util.Map.Entry<String, String> clientMetadataEntry : clientMetadata
+                        .entrySet()) {
+                    String clientMetadataValue = clientMetadataEntry.getValue();
+                    if (clientMetadataValue != null) {
+                        jsonWriter.name(clientMetadataEntry.getKey());
+                        jsonWriter.value(clientMetadataValue);
+                    }
+                }
+                jsonWriter.endObject();
+            }
 
             jsonWriter.endObject();
             jsonWriter.close();
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/ResendConfirmationCodeRequestMarshaller.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/ResendConfirmationCodeRequestMarshaller.java
index 43f9603fb8..c4115d4b40 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/ResendConfirmationCodeRequestMarshaller.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/ResendConfirmationCodeRequestMarshaller.java
@@ -89,6 +89,21 @@
                 AnalyticsMetadataTypeJsonMarshaller.getInstance().marshall(analyticsMetadata,
                         jsonWriter);
             }
+            if (resendConfirmationCodeRequest.getClientMetadata() != null) {
+                java.util.Map<String, String> clientMetadata = resendConfirmationCodeRequest
+                        .getClientMetadata();
+                jsonWriter.name("ClientMetadata");
+                jsonWriter.beginObject();
+                for (java.util.Map.Entry<String, String> clientMetadataEntry : clientMetadata
+                        .entrySet()) {
+                    String clientMetadataValue = clientMetadataEntry.getValue();
+                    if (clientMetadataValue != null) {
+                        jsonWriter.name(clientMetadataEntry.getKey());
+                        jsonWriter.value(clientMetadataValue);
+                    }
+                }
+                jsonWriter.endObject();
+            }
 
             jsonWriter.endObject();
             jsonWriter.close();
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/RespondToAuthChallengeRequestMarshaller.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/RespondToAuthChallengeRequestMarshaller.java
index 2a6083fbe7..6dc7ddc023 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/RespondToAuthChallengeRequestMarshaller.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/RespondToAuthChallengeRequestMarshaller.java
@@ -104,6 +104,21 @@
                 UserContextDataTypeJsonMarshaller.getInstance().marshall(userContextData,
                         jsonWriter);
             }
+            if (respondToAuthChallengeRequest.getClientMetadata() != null) {
+                java.util.Map<String, String> clientMetadata = respondToAuthChallengeRequest
+                        .getClientMetadata();
+                jsonWriter.name("ClientMetadata");
+                jsonWriter.beginObject();
+                for (java.util.Map.Entry<String, String> clientMetadataEntry : clientMetadata
+                        .entrySet()) {
+                    String clientMetadataValue = clientMetadataEntry.getValue();
+                    if (clientMetadataValue != null) {
+                        jsonWriter.name(clientMetadataEntry.getKey());
+                        jsonWriter.value(clientMetadataValue);
+                    }
+                }
+                jsonWriter.endObject();
+            }
 
             jsonWriter.endObject();
             jsonWriter.close();
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/SignUpRequestMarshaller.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/SignUpRequestMarshaller.java
index 63d9e1e6c3..34438b73f0 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/SignUpRequestMarshaller.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/SignUpRequestMarshaller.java
@@ -113,6 +113,20 @@
                 UserContextDataTypeJsonMarshaller.getInstance().marshall(userContextData,
                         jsonWriter);
             }
+            if (signUpRequest.getClientMetadata() != null) {
+                java.util.Map<String, String> clientMetadata = signUpRequest.getClientMetadata();
+                jsonWriter.name("ClientMetadata");
+                jsonWriter.beginObject();
+                for (java.util.Map.Entry<String, String> clientMetadataEntry : clientMetadata
+                        .entrySet()) {
+                    String clientMetadataValue = clientMetadataEntry.getValue();
+                    if (clientMetadataValue != null) {
+                        jsonWriter.name(clientMetadataEntry.getKey());
+                        jsonWriter.value(clientMetadataValue);
+                    }
+                }
+                jsonWriter.endObject();
+            }
 
             jsonWriter.endObject();
             jsonWriter.close();
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/UpdateUserAttributesRequestMarshaller.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/UpdateUserAttributesRequestMarshaller.java
index 5325ba9f26..e08b84dd94 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/UpdateUserAttributesRequestMarshaller.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/services/cognitoidentityprovider/model/transform/UpdateUserAttributesRequestMarshaller.java
@@ -78,6 +78,21 @@
                 jsonWriter.name("AccessToken");
                 jsonWriter.value(accessToken);
             }
+            if (updateUserAttributesRequest.getClientMetadata() != null) {
+                java.util.Map<String, String> clientMetadata = updateUserAttributesRequest
+                        .getClientMetadata();
+                jsonWriter.name("ClientMetadata");
+                jsonWriter.beginObject();
+                for (java.util.Map.Entry<String, String> clientMetadataEntry : clientMetadata
+                        .entrySet()) {
+                    String clientMetadataValue = clientMetadataEntry.getValue();
+                    if (clientMetadataValue != null) {
+                        jsonWriter.name(clientMetadataEntry.getKey());
+                        jsonWriter.value(clientMetadataValue);
+                    }
+                }
+                jsonWriter.endObject();
+            }
 
             jsonWriter.endObject();
             jsonWriter.close();
