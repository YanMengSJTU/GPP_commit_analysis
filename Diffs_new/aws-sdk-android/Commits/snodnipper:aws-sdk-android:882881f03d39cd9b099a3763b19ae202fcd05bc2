diff --git a/aws-android-sdk-auth-core/src/main/AndroidManifest.xml b/aws-android-sdk-auth-core/src/main/AndroidManifest.xml
index dc65d007c4..ca4d900ebb 100644
--- a/aws-android-sdk-auth-core/src/main/AndroidManifest.xml
+++ b/aws-android-sdk-auth-core/src/main/AndroidManifest.xml
@@ -2,4 +2,4 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
 		  package="com.amazonaws.mobile.auth.core">
 
-<uses-sdk android:minSdkVersion="15" android:targetSdkVersion="25" /></manifest>
+<uses-sdk android:minSdkVersion="15" android:targetSdkVersion="27" /></manifest>
diff --git a/aws-android-sdk-auth-userpools/src/main/AndroidManifest.xml b/aws-android-sdk-auth-userpools/src/main/AndroidManifest.xml
index 0396e962e6..4a47a2a709 100644
--- a/aws-android-sdk-auth-userpools/src/main/AndroidManifest.xml
+++ b/aws-android-sdk-auth-userpools/src/main/AndroidManifest.xml
@@ -40,4 +40,4 @@
              >
          </activity>
      </application>
-<uses-sdk android:minSdkVersion="15" android:targetSdkVersion="25" /></manifest>
+<uses-sdk android:minSdkVersion="15" android:targetSdkVersion="27" /></manifest>
diff --git a/aws-android-sdk-cognitoidentityprovider-android-demo/src/androidTest/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/android/demo/ExampleInstrumentedTest.java b/aws-android-sdk-cognitoidentityprovider-android-demo/src/androidTest/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/android/demo/ExampleInstrumentedTest.java
new file mode 100644
index 0000000000..e38534a0d3
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-android-demo/src/androidTest/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/android/demo/ExampleInstrumentedTest.java
@@ -0,0 +1,26 @@
+package com.amazonaws.mobileconnectors.cognitoidentityprovider.android.demo;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.junit.Assert.*;
+
+/**
+ * Instrumented test, which will execute on an Android device.
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+@RunWith(AndroidJUnit4.class)
+public class ExampleInstrumentedTest {
+    @Test
+    public void useAppContext() throws Exception {
+        // Context of the app under test.
+        Context appContext = InstrumentationRegistry.getTargetContext();
+
+        assertEquals("com.amazonaws.mobileconnectors.cognitoidentityprovider.android.demo", appContext.getPackageName());
+    }
+}
diff --git a/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/AndroidManifest.xml b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/AndroidManifest.xml
new file mode 100644
index 0000000000..4bd5fd23d7
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/AndroidManifest.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.amazonaws.mobileconnectors.cognitoidentityprovider.android.demo">
+
+    <uses-permission android:name="android.permission.INTERNET" />
+
+    <application
+        android:allowBackup="true"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:roundIcon="@mipmap/ic_launcher_round"
+        android:supportsRtl="true"
+        android:theme="@style/AppTheme">
+        <activity android:name=".MainActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+    </application>
+
+</manifest>
\ No newline at end of file
diff --git a/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/android/demo/AuthProvider.java b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/android/demo/AuthProvider.java
new file mode 100644
index 0000000000..fefb2cdb6b
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/android/demo/AuthProvider.java
@@ -0,0 +1,8 @@
+package com.amazonaws.mobileconnectors.cognitoidentityprovider.android.demo;
+
+import io.reactivex.Single;
+
+public interface AuthProvider {
+
+    Single<String> getJwtToken();
+}
diff --git a/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/android/demo/AuthProviderCognito.java b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/android/demo/AuthProviderCognito.java
new file mode 100644
index 0000000000..3637f3e448
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/android/demo/AuthProviderCognito.java
@@ -0,0 +1,93 @@
+package com.amazonaws.mobileconnectors.cognitoidentityprovider.android.demo;
+
+import com.amazonaws.ClientConfiguration;
+import com.amazonaws.auth.AnonymousAWSCredentials;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoDevice;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUserPool;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUserSession;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.continuations.AuthenticationContinuation;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.continuations.AuthenticationDetails;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.continuations.ChallengeContinuation;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.continuations.MultiFactorAuthenticationContinuation;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.handlers.AuthenticationHandler;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.util.CognitoSecretHash;
+import com.amazonaws.regions.RegionUtils;
+import com.amazonaws.regions.Regions;
+import com.amazonaws.services.cognitoidentityprovider.AmazonCognitoIdentityProvider;
+import com.amazonaws.services.cognitoidentityprovider.AmazonCognitoIdentityProviderClient;
+
+import io.reactivex.Single;
+import io.reactivex.SingleEmitter;
+import io.reactivex.SingleOnSubscribe;
+
+public class AuthProviderCognito implements AuthProvider {
+
+    // store in case we need to refresh with the stored username and password
+    private final String emailAddress;
+    private final String password;
+
+    private AmazonCognitoIdentityProvider cognitoIdentityProviderClient;
+    private CognitoUser cognitoUser;
+
+    public AuthProviderCognito(String clientId, String clientSecret, String poolId, String region,
+                               String emailAddress, String password) {
+        this.emailAddress = emailAddress;
+        this.password = password;
+
+        cognitoIdentityProviderClient =
+                new AmazonCognitoIdentityProviderClient(new AnonymousAWSCredentials(),
+                        new ClientConfiguration());
+        cognitoIdentityProviderClient.setRegion(RegionUtils.getRegion(region));
+
+        CognitoUserPool pool = new CognitoUserPool(poolId, clientId, clientSecret, Regions.EU_WEST_1);
+        cognitoUser = new CognitoUser(pool, emailAddress, clientId, clientSecret,
+                CognitoSecretHash.getSecretHash(emailAddress, clientId, clientSecret),
+                cognitoIdentityProviderClient);
+    }
+
+    @Override
+    public Single<String> getJwtToken() {
+        return Single.create(new SingleOnSubscribe<String>() {
+            @Override
+            public void subscribe(SingleEmitter<String> emitter) throws Exception {
+                try {
+                    cognitoUser.getSession(new AuthenticationHandler() {
+                        @Override
+                        public void onSuccess(CognitoUserSession userSession, CognitoDevice newDevice) {
+                            emitter.onSuccess(userSession.getAccessToken().getJWTToken());
+                        }
+
+                        @Override
+                        public void getAuthenticationDetails(
+                                AuthenticationContinuation authenticationContinuation, String userId) {
+                            AuthenticationDetails authenticationDetails = new AuthenticationDetails(emailAddress,
+                                    password, null);
+                            authenticationContinuation.setAuthenticationDetails(authenticationDetails);
+                            authenticationContinuation.continueTask();
+                        }
+
+                        @Override
+                        public void getMFACode(MultiFactorAuthenticationContinuation continuation) {
+                            emitter.onError(new UnsupportedOperationException("MFA required - aborting"));
+                        }
+
+                        @Override
+                        public void authenticationChallenge(ChallengeContinuation continuation) {
+                            emitter.onError(
+                                    new UnsupportedOperationException("unsupported authentication challenge"));
+                        }
+
+                        @Override
+                        public void onFailure(Exception exception) {
+                            emitter.onError(exception);
+                        }
+                    });
+
+                } catch (Exception ex) {
+                    emitter.onError(ex);
+                }
+            }
+        });
+    }
+}
\ No newline at end of file
diff --git a/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/android/demo/MainActivity.java b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/android/demo/MainActivity.java
new file mode 100644
index 0000000000..b59dbc91db
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/android/demo/MainActivity.java
@@ -0,0 +1,147 @@
+package com.amazonaws.mobileconnectors.cognitoidentityprovider.android.demo;
+
+import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
+import android.util.Log;
+import android.widget.TextView;
+
+import com.amazonaws.AndroidInitializer;
+import com.amazonaws.ClientConfiguration;
+import com.amazonaws.auth.AnonymousAWSCredentials;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoDevice;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUserPool;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUserSession;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.continuations.AuthenticationContinuation;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.continuations.AuthenticationDetails;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.continuations.ChallengeContinuation;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.continuations.MultiFactorAuthenticationContinuation;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.handlers.AuthenticationHandler;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.util.CognitoSecretHash;
+import com.amazonaws.regions.RegionUtils;
+import com.amazonaws.regions.Regions;
+import com.amazonaws.services.cognitoidentityprovider.AmazonCognitoIdentityProvider;
+import com.amazonaws.services.cognitoidentityprovider.AmazonCognitoIdentityProviderClient;
+
+import java.util.Random;
+
+import io.reactivex.SingleObserver;
+import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.disposables.Disposable;
+import io.reactivex.schedulers.Schedulers;
+
+public class MainActivity extends AppCompatActivity {
+
+    private static String TAG = MainActivity.class.getSimpleName();
+
+    String clientId = "your client id";
+    String clientSecret = "your client secret";
+    String poolId = "your pool id";
+
+    String region = "your region";
+    String emailAddress = "user id for login";
+    String password = "user password for login";
+
+    private TextView textview;
+    private TextView textview2;
+    
+    private final Random random = new Random();
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+        textview = findViewById(R.id.textView);
+        textview2 = findViewById(R.id.textView2);
+        AndroidInitializer.init(this);
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        if (random.nextBoolean()) {
+            Log.d(TAG, "using reactive extensions code path");
+            textview2.setText("RX");
+            rxJava();  
+        } else {
+            Log.d(TAG, "using stock aws code path");
+            textview2.setText("legacy");
+            legacy();
+        }
+    }
+
+    private void legacy() {
+        AmazonCognitoIdentityProvider cognitoIdentityProviderClient =
+                new AmazonCognitoIdentityProviderClient(new AnonymousAWSCredentials(),
+                        new ClientConfiguration());
+        cognitoIdentityProviderClient.setRegion(RegionUtils.getRegion(region));
+
+        CognitoUserPool pool = new CognitoUserPool(poolId, clientId, clientSecret, Regions.EU_WEST_1);
+        CognitoUser cognitoUser = new CognitoUser(pool, emailAddress, clientId, clientSecret,
+                CognitoSecretHash.getSecretHash(emailAddress, clientId, clientSecret),
+                cognitoIdentityProviderClient);
+        cognitoUser.getSessionInBackground(new AuthenticationHandler() {
+            @Override
+            public void onSuccess(CognitoUserSession userSession, CognitoDevice newDevice) {
+                if (textview != null) {
+                    textview.setText(userSession.getAccessToken().getJWTToken());
+                }
+            }
+
+            @Override
+            public void getAuthenticationDetails(
+                    AuthenticationContinuation authenticationContinuation, String userId) {
+                AuthenticationDetails authenticationDetails = new AuthenticationDetails(emailAddress,
+                        password, null);
+                authenticationContinuation.setAuthenticationDetails(authenticationDetails);
+                authenticationContinuation.continueTask();
+            }
+
+            @Override
+            public void getMFACode(MultiFactorAuthenticationContinuation continuation) {
+                Log.e(TAG, "MFA required - aborting", new UnsupportedOperationException("MFA required - aborting"));
+            }
+
+            @Override
+            public void authenticationChallenge(ChallengeContinuation continuation) {
+                Log.e(TAG, "unsupported authentication challenge", new UnsupportedOperationException("unsupported authentication challenge"));
+            }
+
+            @Override
+            public void onFailure(Exception exception) {
+                Log.e(TAG, "failure", exception);
+            }
+        });
+
+    }
+
+    private void rxJava() {
+
+        AuthProvider authProvider = new AuthProviderCognito(clientId, clientSecret, poolId, region,
+                emailAddress, password);
+
+        authProvider.getJwtToken()
+                .subscribeOn(Schedulers.newThread())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new SingleObserver<String>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        System.out.println("Subscribed");
+                    }
+
+                    @Override
+                    public void onSuccess(String jwt) {
+                        if (textview != null) {
+                            textview.setText(jwt);
+                        } else {
+                            System.out.println("Success: " + jwt);
+                        }
+                    }
+
+                    @Override
+                    public void onError(Throwable ex) {
+                        System.out.println("Yikes: " + ex.getMessage());
+                    }
+                });
+    }
+}
diff --git a/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/drawable-v24/ic_launcher_foreground.xml b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/drawable-v24/ic_launcher_foreground.xml
new file mode 100644
index 0000000000..c7bd21dbd8
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/drawable-v24/ic_launcher_foreground.xml
@@ -0,0 +1,34 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:aapt="http://schemas.android.com/aapt"
+    android:width="108dp"
+    android:height="108dp"
+    android:viewportHeight="108"
+    android:viewportWidth="108">
+    <path
+        android:fillType="evenOdd"
+        android:pathData="M32,64C32,64 38.39,52.99 44.13,50.95C51.37,48.37 70.14,49.57 70.14,49.57L108.26,87.69L108,109.01L75.97,107.97L32,64Z"
+        android:strokeColor="#00000000"
+        android:strokeWidth="1">
+        <aapt:attr name="android:fillColor">
+            <gradient
+                android:endX="78.5885"
+                android:endY="90.9159"
+                android:startX="48.7653"
+                android:startY="61.0927"
+                android:type="linear">
+                <item
+                    android:color="#44000000"
+                    android:offset="0.0" />
+                <item
+                    android:color="#00000000"
+                    android:offset="1.0" />
+            </gradient>
+        </aapt:attr>
+    </path>
+    <path
+        android:fillColor="#FFFFFF"
+        android:fillType="nonZero"
+        android:pathData="M66.94,46.02L66.94,46.02C72.44,50.07 76,56.61 76,64L32,64C32,56.61 35.56,50.11 40.98,46.06L36.18,41.19C35.45,40.45 35.45,39.3 36.18,38.56C36.91,37.81 38.05,37.81 38.78,38.56L44.25,44.05C47.18,42.57 50.48,41.71 54,41.71C57.48,41.71 60.78,42.57 63.68,44.05L69.11,38.56C69.84,37.81 70.98,37.81 71.71,38.56C72.44,39.3 72.44,40.45 71.71,41.19L66.94,46.02ZM62.94,56.92C64.08,56.92 65,56.01 65,54.88C65,53.76 64.08,52.85 62.94,52.85C61.8,52.85 60.88,53.76 60.88,54.88C60.88,56.01 61.8,56.92 62.94,56.92ZM45.06,56.92C46.2,56.92 47.13,56.01 47.13,54.88C47.13,53.76 46.2,52.85 45.06,52.85C43.92,52.85 43,53.76 43,54.88C43,56.01 43.92,56.92 45.06,56.92Z"
+        android:strokeColor="#00000000"
+        android:strokeWidth="1" />
+</vector>
diff --git a/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/drawable/ic_launcher_background.xml b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/drawable/ic_launcher_background.xml
new file mode 100644
index 0000000000..d5fccc538c
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/drawable/ic_launcher_background.xml
@@ -0,0 +1,170 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="108dp"
+    android:height="108dp"
+    android:viewportHeight="108"
+    android:viewportWidth="108">
+    <path
+        android:fillColor="#26A69A"
+        android:pathData="M0,0h108v108h-108z" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M9,0L9,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,0L19,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M29,0L29,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M39,0L39,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M49,0L49,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M59,0L59,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M69,0L69,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M79,0L79,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M89,0L89,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M99,0L99,108"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,9L108,9"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,19L108,19"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,29L108,29"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,39L108,39"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,49L108,49"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,59L108,59"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,69L108,69"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,79L108,79"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,89L108,89"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,99L108,99"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,29L89,29"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,39L89,39"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,49L89,49"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,59L89,59"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,69L89,69"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,79L89,79"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M29,19L29,89"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M39,19L39,89"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M49,19L49,89"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M59,19L59,89"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M69,19L69,89"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M79,19L79,89"
+        android:strokeColor="#33FFFFFF"
+        android:strokeWidth="0.8" />
+</vector>
diff --git a/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/layout/activity_main.xml b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/layout/activity_main.xml
new file mode 100644
index 0000000000..c5cfa61629
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/layout/activity_main.xml
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="utf-8"?>
+<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context="com.amazonaws.mobileconnectors.cognitoidentityprovider.android.demo.MainActivity">
+
+    <TextView
+        android:id="@+id/textView"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Hello World!"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintLeft_toLeftOf="parent"
+        app:layout_constraintRight_toRightOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
+
+    <TextView
+        android:id="@+id/textView2"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginBottom="8dp"
+        android:layout_marginEnd="8dp"
+        android:layout_marginStart="8dp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent" />
+
+</android.support.constraint.ConstraintLayout>
diff --git a/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-anydpi-v26/ic_launcher.xml b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
new file mode 100644
index 0000000000..eca70cfe52
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@drawable/ic_launcher_background" />
+    <foreground android:drawable="@drawable/ic_launcher_foreground" />
+</adaptive-icon>
\ No newline at end of file
diff --git a/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
new file mode 100644
index 0000000000..eca70cfe52
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@drawable/ic_launcher_background" />
+    <foreground android:drawable="@drawable/ic_launcher_foreground" />
+</adaptive-icon>
\ No newline at end of file
diff --git a/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-hdpi/ic_launcher.png b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-hdpi/ic_launcher.png
new file mode 100644
index 0000000000..a2f5908281
Binary files /dev/null and b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-hdpi/ic_launcher_round.png b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-hdpi/ic_launcher_round.png
new file mode 100644
index 0000000000..1b52399808
Binary files /dev/null and b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-hdpi/ic_launcher_round.png differ
diff --git a/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-mdpi/ic_launcher.png b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-mdpi/ic_launcher.png
new file mode 100644
index 0000000000..ff10afd6e1
Binary files /dev/null and b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-mdpi/ic_launcher_round.png b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-mdpi/ic_launcher_round.png
new file mode 100644
index 0000000000..115a4c768a
Binary files /dev/null and b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-mdpi/ic_launcher_round.png differ
diff --git a/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-xhdpi/ic_launcher.png b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100644
index 0000000000..dcd3cd8083
Binary files /dev/null and b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-xhdpi/ic_launcher_round.png b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-xhdpi/ic_launcher_round.png
new file mode 100644
index 0000000000..459ca609d3
Binary files /dev/null and b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-xhdpi/ic_launcher_round.png differ
diff --git a/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-xxhdpi/ic_launcher.png b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100644
index 0000000000..8ca12fe024
Binary files /dev/null and b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-xxhdpi/ic_launcher_round.png b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-xxhdpi/ic_launcher_round.png
new file mode 100644
index 0000000000..8e19b410a1
Binary files /dev/null and b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-xxhdpi/ic_launcher_round.png differ
diff --git a/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-xxxhdpi/ic_launcher.png
new file mode 100644
index 0000000000..b824ebdd48
Binary files /dev/null and b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-xxxhdpi/ic_launcher.png differ
diff --git a/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png
new file mode 100644
index 0000000000..4c19a13c23
Binary files /dev/null and b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png differ
diff --git a/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/values/colors.xml b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/values/colors.xml
new file mode 100644
index 0000000000..3ab3e9cbce
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/values/colors.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="colorPrimary">#3F51B5</color>
+    <color name="colorPrimaryDark">#303F9F</color>
+    <color name="colorAccent">#FF4081</color>
+</resources>
diff --git a/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/values/strings.xml b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/values/strings.xml
new file mode 100644
index 0000000000..d8cfd65d54
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/values/strings.xml
@@ -0,0 +1,3 @@
+<resources>
+    <string name="app_name">Identity Provider Demo</string>
+</resources>
diff --git a/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/values/styles.xml b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/values/styles.xml
new file mode 100644
index 0000000000..5885930df6
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-android-demo/src/main/res/values/styles.xml
@@ -0,0 +1,11 @@
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <!-- Customize your theme here. -->
+        <item name="colorPrimary">@color/colorPrimary</item>
+        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+        <item name="colorAccent">@color/colorAccent</item>
+    </style>
+
+</resources>
diff --git a/aws-android-sdk-cognitoidentityprovider-android-demo/src/test/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/android/demo/ExampleUnitTest.java b/aws-android-sdk-cognitoidentityprovider-android-demo/src/test/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/android/demo/ExampleUnitTest.java
new file mode 100644
index 0000000000..b45579454c
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-android-demo/src/test/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/android/demo/ExampleUnitTest.java
@@ -0,0 +1,17 @@
+package com.amazonaws.mobileconnectors.cognitoidentityprovider.android.demo;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * Example local unit test, which will execute on the development machine (host).
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+public class ExampleUnitTest {
+    @Test
+    public void addition_isCorrect() throws Exception {
+        assertEquals(4, 2 + 2);
+    }
+}
\ No newline at end of file
diff --git a/aws-android-sdk-cognitoidentityprovider-android/pom.xml b/aws-android-sdk-cognitoidentityprovider-android/pom.xml
new file mode 100644
index 0000000000..8539f85885
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-android/pom.xml
@@ -0,0 +1,47 @@
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>com.amazonaws</groupId>
+  <artifactId>aws-android-sdk-cognitoidentityprovider-android</artifactId>
+  <packaging>jar</packaging>
+  <name>AWS SDK for Android - Amazon Cognito Identity Provider</name>
+  <version>2.6.14</version>
+  <description>The AWS Android SDK for Amazon Cognito Identity Provider module holds the client classes that are used for communicating with Amazon Cognito Identity Provider Service</description>
+  <url>http://aws.amazon.com/sdkforandroid</url>
+  
+  <parent>
+    <groupId>com.amazonaws</groupId>
+    <artifactId>aws-android-sdk-pom</artifactId>
+    <version>2.6.14</version>
+  </parent>
+
+  <licenses>
+    <license>
+      <name>Amazon Software License</name>
+      <url>http://aws.amazon.com/asl/</url>
+      <distribution>repo</distribution>
+    </license>
+  </licenses>
+
+  <dependencies>
+    <dependency>
+      <groupId>com.amazonaws</groupId>
+      <artifactId>aws-android-sdk-cognitoidentityprovider</artifactId>
+      <version>2.6.14</version>
+    </dependency>
+  </dependencies>
+
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-compiler-plugin</artifactId>
+      </plugin>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-javadoc-plugin</artifactId>
+      </plugin>
+    </plugins>
+  </build>
+</project>
diff --git a/aws-android-sdk-cognitoidentityprovider-android/src/main/AndroidManifest.xml b/aws-android-sdk-cognitoidentityprovider-android/src/main/AndroidManifest.xml
new file mode 100644
index 0000000000..bd1ed05b32
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-android/src/main/AndroidManifest.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.amazonaws.mobileconnectors.cognitoidentityprovider.android">
+
+</manifest>
diff --git a/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/AndroidInitializer.java b/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/AndroidInitializer.java
new file mode 100644
index 0000000000..f71b6893cd
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/AndroidInitializer.java
@@ -0,0 +1,47 @@
+package com.amazonaws;
+
+import android.content.Context;
+import android.os.Handler;
+
+import com.amazonaws.cognito.clientcontext.data.UserContextDataProvider;
+import com.amazonaws.cognito.clientcontext.datacollection.AndroidContextDataAggregator;
+import com.amazonaws.extra.persistence.SharedPreferencesStorage;
+import com.amazonaws.extra.persistence.Storage;
+import com.amazonaws.extra.persistence.StorageProvider;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.extra.execution.CallbackExectorProvider;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.extra.execution.CallbackExecutor;
+
+public class AndroidInitializer {
+    
+    private static boolean initialised = false;
+    
+    private AndroidInitializer(){}
+    
+    public static void init(final Context context) {
+        if (initialised) {
+            return;
+        }
+        
+        AndroidContextDataAggregator dataAggregator = AndroidContextDataAggregator.getInstance();
+        dataAggregator.refreshAggregatedData(context.getApplicationContext());
+        UserContextDataProvider.setDefaultDataAggregator(dataAggregator);
+
+        final Handler handler = new Handler(context.getMainLooper());
+        CallbackExectorProvider.setCallbackExecutor(new CallbackExecutor() {
+            @Override
+            public void execute(Runnable runnable) {
+                Thread thread = new Thread(runnable);
+                handler.post(thread);
+            }
+        });
+
+        StorageProvider.setDefaultStorageFactory(new StorageProvider.StorageFactory() {
+            @Override
+            public Storage create(String key) {
+                return new SharedPreferencesStorage(context.getApplicationContext(), key);
+            }
+        });
+        
+        initialised = true;
+    }
+}
diff --git a/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/AndroidApplicationDataCollector.java b/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/AndroidApplicationDataCollector.java
new file mode 100644
index 0000000000..1677896558
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/AndroidApplicationDataCollector.java
@@ -0,0 +1,55 @@
+package com.amazonaws.cognito.clientcontext.datacollection;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import android.content.Context;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.PackageManager.NameNotFoundException;
+import android.util.Log;
+
+/**
+ * It collects application related data for the device.
+ */
+public class AndroidApplicationDataCollector extends AndroidDataCollector {
+
+    private static final String TAG = AndroidApplicationDataCollector.class.getSimpleName();
+    private static final int ALL_FLAGS_OFF = 0;
+    
+    @Override
+    public Map<String, String> collect(Context context) {
+        Map<String, String> contextData = new HashMap<String, String>();
+        contextData.put(AndroidDataRecordKey.APP_NAME, getAppName(context));
+        contextData.put(AndroidDataRecordKey.APP_TARGET_SDK, getAppTargetSdk(context));
+        contextData.put(AndroidDataRecordKey.APP_VERSION, getAppVersion(context));
+        return contextData;
+    }
+
+    private String getAppName(Context context) {
+        ApplicationInfo applicationInfo = context.getApplicationInfo();
+
+        PackageManager packageManager = context.getPackageManager();
+        String appName = (String) packageManager.getApplicationLabel(applicationInfo);
+        return appName;
+    }
+
+    private String getAppVersion(Context context) {
+        PackageManager packageManager = context.getPackageManager();
+
+        String appVersion = "";
+        try {
+            PackageInfo packageInfo = packageManager.getPackageInfo(context.getPackageName(), ALL_FLAGS_OFF);
+            appVersion = packageInfo.versionName;
+        } catch (NameNotFoundException e) {
+            Log.i(TAG, "Unable to get app version. Provided package name could not be found.");
+        }
+        return appVersion;
+    }
+
+    private String getAppTargetSdk(Context context) {
+        ApplicationInfo applicationInfo = context.getApplicationInfo();
+        return String.valueOf(applicationInfo.targetSdkVersion);
+    }
+}
\ No newline at end of file
diff --git a/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/AndroidBuildDataCollector.java b/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/AndroidBuildDataCollector.java
new file mode 100644
index 0000000000..eddfc19532
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/AndroidBuildDataCollector.java
@@ -0,0 +1,27 @@
+package com.amazonaws.cognito.clientcontext.datacollection;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import android.content.Context;
+import android.os.Build;
+
+/**
+ * It collects build information for underlying device hardware.
+ */
+public class AndroidBuildDataCollector extends AndroidDataCollector {
+    
+    @Override
+    public Map<String, String> collect(Context context) {
+        Map<String, String> contextData = new HashMap<String, String>();
+        contextData.put(AndroidDataRecordKey.BRAND, Build.BRAND);
+        contextData.put(AndroidDataRecordKey.FINGERPRINT, Build.FINGERPRINT);
+        contextData.put(AndroidDataRecordKey.HARDWARE, Build.HARDWARE);
+        contextData.put(AndroidDataRecordKey.MODEL, Build.MODEL);
+        contextData.put(AndroidDataRecordKey.PRODUCT, Build.PRODUCT);
+        contextData.put(AndroidDataRecordKey.BUILD_TYPE, Build.TYPE);
+        contextData.put(AndroidDataRecordKey.VERSION_RELEASE, Build.VERSION.RELEASE);
+        contextData.put(AndroidDataRecordKey.VERSION_SDK, Build.VERSION.SDK);
+        return contextData;
+    }
+}
\ No newline at end of file
diff --git a/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/AndroidContextDataAggregator.java b/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/AndroidContextDataAggregator.java
new file mode 100644
index 0000000000..502d31e80e
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/AndroidContextDataAggregator.java
@@ -0,0 +1,92 @@
+package com.amazonaws.cognito.clientcontext.datacollection;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import android.content.Context;
+
+/**
+ * It collect all the user context data.
+ */
+public class AndroidContextDataAggregator implements DataAggregator {
+
+    private final List<AndroidDataCollector> dataCollectors;
+    private final Map<String, String> lastAggregatedData = new HashMap<>();
+
+
+    @Override
+    public Map<String, String> getAggregatedData() {
+        return lastAggregatedData;
+    }
+    
+    public void refreshAggregatedData(Context context) {
+        lastAggregatedData.clear();
+        lastAggregatedData.putAll(getAggregatedData(context));
+    }
+
+    /**
+     * Private class to store an instance. This is used to ensure a singleton
+     * instance of the class.
+     */
+    private static class InstanceHolder {
+        private static final AndroidContextDataAggregator INSTANCE = new AndroidContextDataAggregator();
+    }
+
+    private AndroidContextDataAggregator() {
+        this.dataCollectors = getDataCollectors();
+    }
+
+    /**
+     * Protected constructor to instantiate a class object for unit testing.
+     * 
+     * @param dataCollectors
+     *            collectors for user context data.
+     */
+    protected AndroidContextDataAggregator(List<AndroidDataCollector> dataCollectors) {
+        this.dataCollectors = dataCollectors;
+    }
+
+    /**
+     * @return instance of the class
+     */
+    public static AndroidContextDataAggregator getInstance() {
+        return InstanceHolder.INSTANCE;
+    }
+
+    /**
+     * It invokes collect for all the data collectors and create user context
+     * data.
+     * 
+     * @param context
+     *            Android application context.
+     * @return key-value pair of the collected user context data.
+     */
+    public Map<String, String> getAggregatedData(Context context) {
+        Map<String, String> userContextData = new HashMap<String, String>();
+        for (AndroidDataCollector collector : dataCollectors) {
+            Map<String, String> data = collector.collect(context);
+            userContextData.putAll(data);
+        }
+        removerNullEntries(userContextData);
+        return userContextData;
+    }
+
+    private void removerNullEntries(Map<String, String> data) {
+        for (Map.Entry<String, String> entry : data.entrySet()) {
+            if (entry.getValue() == null) {
+                data.remove(entry.getKey());
+            }
+        }
+    }
+
+    private List<AndroidDataCollector> getDataCollectors() {
+        List<AndroidDataCollector> availableDataCollectors = new ArrayList<AndroidDataCollector>();
+        availableDataCollectors.add(new AndroidApplicationDataCollector());
+        availableDataCollectors.add(new AndroidBuildDataCollector());
+        availableDataCollectors.add(new AndroidDeviceDataCollector());
+        availableDataCollectors.add(new AndroidTelephonyDataCollector());
+        return availableDataCollectors;
+    }
+}
\ No newline at end of file
diff --git a/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/AndroidDataCollector.java b/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/AndroidDataCollector.java
new file mode 100644
index 0000000000..9525fa7395
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/AndroidDataCollector.java
@@ -0,0 +1,21 @@
+package com.amazonaws.cognito.clientcontext.datacollection;
+
+import java.util.Map;
+
+import android.content.Context;
+
+/**
+ * Base class for the data collectors. Data collectors provide logic to collect
+ * context data.
+ */
+public abstract class AndroidDataCollector {
+
+    /**
+     * Actual logic to collect a category of data from device.
+     * 
+     * @param context
+     *            android application context.
+     * @return return key-value pair of user-context data.
+     */
+    public abstract Map<String, String> collect(Context context);
+}
diff --git a/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/AndroidDataRecordKey.java b/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/AndroidDataRecordKey.java
new file mode 100644
index 0000000000..93ff90c45a
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/AndroidDataRecordKey.java
@@ -0,0 +1,141 @@
+package com.amazonaws.cognito.clientcontext.datacollection;
+
+/**
+ * Constants in this class contains the fields that are extracted from the
+ * device. It enlists the constants used as a key for user context data fields.
+ */
+public class AndroidDataRecordKey {
+
+    /*
+     * Keys for application related data.
+     */
+
+    /**
+     * Name of the application using user pools.
+     */
+    public static final String APP_NAME = "ApplicationName";
+    /**
+     * Target SDK version for the application.
+     */
+    public static final String APP_TARGET_SDK = "ApplicationTargetSdk";
+    /**
+     * Version of the application installed on device.
+     */
+    public static final String APP_VERSION = "ApplicationVersion";
+
+    /*
+     * Keys for device build information related data. Refer android
+     * documentation-https://developer.android.com/reference/android/os/Build.
+     * html
+     */
+
+    /**
+     * Boot-loader version of the system
+     */
+    public static final String BOOTLOADER = "Bootloader";
+    /**
+     * The consumer-visible brand with which the product/hardware will be
+     * associated
+     */
+    public static final String BRAND = "DeviceBrand";
+    /**
+     * A string that uniquely identifies this build on device.
+     */
+    public static final String FINGERPRINT = "DeviceFingerprint";
+    /**
+     * Name of the underlying device hardware.
+     */
+    public static final String HARDWARE = "DeviceHardware";
+    /**
+     * The manufacturer of the product/hardware.
+     */
+    public static final String MANUFACTURER = "DeviceManufacturer";
+    /**
+     * The end-user-visible name for the end product.
+     */
+    public static final String MODEL = "DeviceName";
+    /**
+     * The name of the overall product.
+     */
+    public static final String PRODUCT = "Product";
+    /**
+     * The type of build, like "user" or "eng".
+     */
+    public static final String BUILD_TYPE = "BuildType";
+    /**
+     * The user-visible version string for Android release.
+     */
+    public static final String VERSION_RELEASE = "DeviceOsReleaseVersion";
+    /**
+     * The user-visible SDK version of the framework
+     */
+    public static final String VERSION_SDK = "DeviceSdkVersion";
+
+    /*
+     * Keys for device related information.
+     */
+
+    /**
+     * DeviceId that Cognito has associated with the device
+     */
+    public static final String DEVICE_AGENT = "DeviceId";
+
+    /**
+     * Third party device id provided on the device
+     */
+    public static final String THIRD_PARTY_DEVICE_AGENT = "ThirdPartyDeviceId";
+
+    /**
+     * Platform like Android, iOS or JS.
+     */
+    public static final String PLATFORM = "Platform";
+    /**
+     * Device time zone.
+     */
+    public static final String TIMEZONE = "ClientTimezone";
+    /**
+     * Device display dimensions.
+     */
+    public static final String DEVICE_HEIGHT = "ScreenHeightPixels";
+    public static final String DEVICE_WIDTH = "ScreenWidthPixels";
+    /**
+     * Language on device.
+     */
+    public static final String DEVICE_LANGUAGE = "DeviceLanguage";
+
+    /*
+     * Keys for telephony data from device. Refer
+     * documentation-https://developer.android.com/reference/android/telephony/
+     * TelephonyManager.html
+     */
+
+    /**
+     * Does device has SIM card
+     */
+    public static final String HAS_ICC_CARD = "HasSimCard";
+    /**
+     * Is device network on roaming mode.
+     */
+    public static final String IS_NETWORK_ROAMING = "IsNetworkRoaming";
+    /**
+     * Device network operator.
+     */
+    public static final String NETWORK_OPERATOR = "Carrier";
+    /**
+     * Constant identifying Network type for current data connection.
+     */
+    public static final String NETWORK_TYPE = "NetworkType";
+    /**
+     * Constant that indicates the type of radio used to transmit voice calls
+     * like GSM / CDMA / SIP
+     */
+    public static final String PHONE_TYPE = "PhoneType";
+    /**
+     * SIM provider's country code.
+     */
+    public static final String SIM_COUNTRY_ISO = "SimCountry";
+    /**
+     * provider of the SIM.
+     */
+    public static final String SIM_OPERATOR = "SimOperator";
+}
\ No newline at end of file
diff --git a/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/AndroidDeviceDataCollector.java b/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/AndroidDeviceDataCollector.java
new file mode 100644
index 0000000000..1cdff9ac86
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/AndroidDeviceDataCollector.java
@@ -0,0 +1,92 @@
+package com.amazonaws.cognito.clientcontext.datacollection;
+
+import java.util.Date;
+import java.util.HashMap;
+import java.util.Locale;
+import java.util.Map;
+import java.util.TimeZone;
+import java.util.UUID;
+import java.util.concurrent.TimeUnit;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.provider.Settings;
+import android.view.Display;
+import android.view.WindowManager;
+
+/**
+ * It collects information that identifying the device.
+ */
+public class AndroidDeviceDataCollector extends AndroidDataCollector {
+
+    private static final String PLATFORM = "ANDROID";
+    protected static final String LOCAL_STORAGE_PATH = "AWS.Cognito.ContextData";
+    protected static final String LOCAL_STORAGE_DEVICE_ID_KEY = "CognitoDeviceId";
+    
+    @Override
+    public Map<String, String> collect(Context context) {
+        Map<String, String> contextdata = new HashMap<String, String>();
+        contextdata.put(AndroidDataRecordKey.TIMEZONE, getTimezoneOffset());
+        contextdata.put(AndroidDataRecordKey.PLATFORM, PLATFORM);
+        contextdata.put(AndroidDataRecordKey.THIRD_PARTY_DEVICE_AGENT, getThirdPartyDeviceAgent());
+        contextdata.put(AndroidDataRecordKey.DEVICE_AGENT, getCognitoDeviceAgent(context));
+        contextdata.put(AndroidDataRecordKey.DEVICE_LANGUAGE, getLanguage());
+
+        Display display = getDisplay(context);
+        contextdata.put(AndroidDataRecordKey.DEVICE_HEIGHT, String.valueOf(display.getHeight()));
+        contextdata.put(AndroidDataRecordKey.DEVICE_WIDTH, String.valueOf(display.getWidth()));
+
+        return contextdata;
+    }
+
+    private Display getDisplay(Context context) {
+        WindowManager windowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
+        return windowManager.getDefaultDisplay();
+    }
+
+    protected String getCognitoDeviceAgent(Context context) {
+        SharedPreferences sharedPreferences = context.getSharedPreferences(LOCAL_STORAGE_PATH, Context.MODE_PRIVATE);
+        if (sharedPreferences == null) {
+            return null;
+        }
+
+        String storedId = sharedPreferences.getString(LOCAL_STORAGE_DEVICE_ID_KEY, null);
+        if (storedId != null) {
+            return storedId;
+        }
+
+        String randomId = UUID.randomUUID().toString();
+        String deviceId = randomId + ":" + new Date().getTime();
+
+        SharedPreferences.Editor editor = sharedPreferences.edit();
+        editor.putString(LOCAL_STORAGE_DEVICE_ID_KEY, deviceId);
+        editor.apply();
+        return deviceId;
+    }
+
+    protected String getThirdPartyDeviceAgent() {
+        return Settings.Secure.ANDROID_ID;
+    }
+
+    protected String getLanguage() {
+        return Locale.getDefault().toString();
+    }
+
+    private String getTimezoneOffset() {
+        TimeZone timeZone = getTimezone();
+        int rawTimezoneOffset = timeZone.getRawOffset();
+
+        long hours = TimeUnit.MILLISECONDS.toHours(rawTimezoneOffset);
+        long minutes = TimeUnit.MILLISECONDS.toMinutes(rawTimezoneOffset) - TimeUnit.HOURS.toMinutes(hours);
+
+        String offset = (hours < 0 ? "-" : "") + String.format(Locale.US, "%02d:%02d", Math.abs(hours), minutes);
+        return offset;
+    }
+
+    /**
+     * Method is protected to allow it to be over-riden for unit testing
+     */
+    protected TimeZone getTimezone() {
+        return TimeZone.getDefault();
+    }
+}
diff --git a/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/AndroidTelephonyDataCollector.java b/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/AndroidTelephonyDataCollector.java
new file mode 100644
index 0000000000..eba1362660
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/AndroidTelephonyDataCollector.java
@@ -0,0 +1,33 @@
+package com.amazonaws.cognito.clientcontext.datacollection;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import android.content.Context;
+import android.telephony.TelephonyManager;
+
+/**
+ * It collect device's network related information.
+ */
+public class AndroidTelephonyDataCollector extends AndroidDataCollector {
+    
+    @Override
+    public Map<String, String> collect(Context context) {
+        Map<String, String> contextData = new HashMap<String, String>();
+        TelephonyManager telephonyManager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
+
+        if (telephonyManager != null) {
+            contextData.put(AndroidDataRecordKey.HAS_ICC_CARD, String.valueOf(telephonyManager.hasIccCard()));
+            contextData.put(AndroidDataRecordKey.IS_NETWORK_ROAMING, String.valueOf(telephonyManager.isNetworkRoaming()));
+            contextData.put(AndroidDataRecordKey.NETWORK_OPERATOR, telephonyManager.getNetworkOperatorName());
+            contextData.put(AndroidDataRecordKey.NETWORK_TYPE, String.valueOf(telephonyManager.getNetworkType()));
+            contextData.put(AndroidDataRecordKey.PHONE_TYPE, String.valueOf(telephonyManager.getPhoneType()));
+
+            if (telephonyManager.getSimState() == TelephonyManager.SIM_STATE_READY) {
+                contextData.put(AndroidDataRecordKey.SIM_COUNTRY_ISO, String.valueOf(telephonyManager.getSimCountryIso()));
+                contextData.put(AndroidDataRecordKey.SIM_OPERATOR, String.valueOf(telephonyManager.getSimOperatorName()));
+            }
+        }
+        return contextData;
+    }
+}
\ No newline at end of file
diff --git a/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/extra/persistence/SharedPreferencesStorage.java b/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/extra/persistence/SharedPreferencesStorage.java
new file mode 100644
index 0000000000..a9becb06c3
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/extra/persistence/SharedPreferencesStorage.java
@@ -0,0 +1,40 @@
+package com.amazonaws.extra.persistence;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+
+public class SharedPreferencesStorage implements Storage {
+
+    private final SharedPreferences prefs;
+
+    public SharedPreferencesStorage(Context context, String name) {
+        prefs = context.getApplicationContext().getSharedPreferences(name, Context.MODE_PRIVATE);        
+    }
+    
+    @Override
+    public boolean contains(String key) {
+        return prefs.contains(key);
+    }
+
+    @Override
+    public String getValue(String key, String defaultValue) {
+        return prefs.getString(key, defaultValue);
+    }
+
+    @Override
+    public String put(String key, String value) {
+        prefs.edit().putString(key, value).apply();
+        return key;
+    }
+
+    @Override
+    public String remove(String key) {
+        prefs.edit().remove(key).apply();
+        return key;
+    }
+
+    @Override
+    public void clear() {
+        prefs.edit().clear().apply();
+    }
+}
diff --git a/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/mobile/config/AWSAndroidConfiguration.java b/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/mobile/config/AWSAndroidConfiguration.java
new file mode 100644
index 0000000000..8da5440854
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-android/src/main/java/com/amazonaws/mobile/config/AWSAndroidConfiguration.java
@@ -0,0 +1,179 @@
+/*
+ * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+package com.amazonaws.mobile.config;
+
+import android.content.Context;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.InputStream;
+import java.util.Scanner;
+
+/**
+ * A container for the JSONObject representation of SDK configuration. Reads the
+ * res/raw/awsconfiguration.json file in your project by default. This can be
+ * specified in the constructor through the resource id, if you wish to read a
+ * different resource as your configuration source.
+ */
+public class AWSAndroidConfiguration extends AWSConfiguration {
+    private static final String DEFAULT = "Default";
+    private static final String DEFAULT_IDENTIFIER = "awsconfiguration";
+
+    private JSONObject mJSONObject;
+    private String configName; // "Default" or something else like "Backup"
+
+    /**
+     * Constructs an AWSConfiguration object
+     *
+     * @param context application context, used to retrieve
+     *            awsconfiguration.json from resources
+     */
+    public AWSAndroidConfiguration(Context context) {
+        this(context, getConfigResourceId(context));
+    }
+
+    private static int getConfigResourceId(Context context) {
+        try {
+            return context.getResources().getIdentifier(DEFAULT_IDENTIFIER,
+                    "raw", context.getPackageName());
+        } catch (Exception e) {
+            throw new RuntimeException(
+                    "Failed to read awsconfiguration.json"
+                            + " please check that it is correctly formed.",
+                    e);
+        }
+    }
+
+    /**
+     * Constructs an AWSConfiguration object
+     *
+     * @param context application context, used to retrieve the resource
+     *            specified by configResourceId
+     * @param configResourceId resource id of the json file to be read
+     */
+    public AWSAndroidConfiguration(Context context, int configResourceId) {
+        this(context, configResourceId, DEFAULT);
+    }
+
+    /**
+     * Construct an AWSConfiguration object
+     *
+     * @param context application context, used to retrieve the resource
+     *            specified by configResourceId
+     * @param configResourceId resource id of the json file to be read
+     * @param configName instructs the reader of this configuration to pick the
+     *            specified configName
+     */
+    public AWSAndroidConfiguration(Context context, int configResourceId,
+                            String configName) {
+        this.configName = configName;
+        readInputJson(context, configResourceId);
+    }
+
+    private void readInputJson(Context context, int resourceId) {
+        try {
+            final InputStream inputStream = context.getResources().openRawResource(
+                    resourceId);
+            final Scanner in = new Scanner(inputStream);
+            final StringBuilder sb = new StringBuilder();
+            while (in.hasNextLine()) {
+                sb.append(in.nextLine());
+            }
+            in.close();
+
+            this.mJSONObject = new JSONObject(sb.toString());
+        } catch (Exception je) {
+            throw new RuntimeException(
+                    "Failed to read awsconfiguration.json please check that it is correctly formed.",
+                    je);
+        }
+    }
+
+    /**
+     * This method will search for the name provided in the json and unwrap the
+     * configuration specified by {@link #setConfiguration(String)}.
+     *
+     * Example:
+     * {
+     *     "S3TransferUtility": {
+     *         "Default": {
+     *             "Bucket": "waterBucket",
+     *             "Region": "us-west-2"
+     *         }
+     *     }
+     * }
+     *
+     * When name is "S3TransferUtility" and setConfiguration is "Default",
+     * The value return is:
+     * {
+     *     "Bucket": "waterBucket",
+     *     "Region": "us-west-2"
+     * }
+     *
+     * Certain keys do not have a configuration (i.e. "Default") and
+     * when this happens the value for the key is directly returned.
+     *
+     * @param key used to search for in JSON map
+     * @return an immutable copy of the value mapped by {@code name} if it
+     *         exists and is a {@code JSONObject}, or null otherwise.
+     */
+    public JSONObject optJsonObject(String key) {
+        try {
+            JSONObject value = this.mJSONObject.getJSONObject(key);
+
+            if (value.has(this.configName)) {
+                value = value.getJSONObject(this.configName);
+            }
+
+            return new JSONObject(value.toString());
+        } catch (JSONException je) {
+            return null;
+        }
+    }
+
+    /**
+     * @return The user agent specified in the configuration file.
+     */
+    public String getUserAgent() {
+        try {
+            return this.mJSONObject.getString("UserAgent");
+        } catch (JSONException je) {
+            return "";
+        }
+    }
+
+    /**
+     * Change the settings that are being read in. This is "Default" by default.
+     *
+     * @param configurationName the key used to differentiate between configuration settings
+     */
+    public void setConfiguration(String configurationName) {
+        this.configName = configurationName;
+    }
+
+    /**
+     *
+     * @return the configuration This is "Default" by default.
+     */
+    public String getConfiguration() {
+        return this.configName;
+    }
+
+    @Override
+    public String toString() {
+        return mJSONObject.toString();
+    }
+}
diff --git a/aws-android-sdk-cognitoidentityprovider-demo/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/rx/AuthProvider.java b/aws-android-sdk-cognitoidentityprovider-demo/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/rx/AuthProvider.java
new file mode 100644
index 0000000000..a1f79cf580
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-demo/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/rx/AuthProvider.java
@@ -0,0 +1,8 @@
+package com.amazonaws.mobileconnectors.cognitoidentityprovider.rx;
+
+import io.reactivex.Single;
+
+public interface AuthProvider {
+
+    Single<String> getJwtToken();
+}
diff --git a/aws-android-sdk-cognitoidentityprovider-demo/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/rx/AuthProviderCognito.java b/aws-android-sdk-cognitoidentityprovider-demo/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/rx/AuthProviderCognito.java
new file mode 100644
index 0000000000..70a9cf4503
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-demo/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/rx/AuthProviderCognito.java
@@ -0,0 +1,92 @@
+package com.amazonaws.mobileconnectors.cognitoidentityprovider.rx;
+
+import com.amazonaws.ClientConfiguration;
+import com.amazonaws.auth.AnonymousAWSCredentials;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoDevice;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUserPool;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUserSession;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.continuations.AuthenticationContinuation;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.continuations.AuthenticationDetails;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.continuations.ChallengeContinuation;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.continuations.MultiFactorAuthenticationContinuation;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.handlers.AuthenticationHandler;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.util.CognitoSecretHash;
+import com.amazonaws.regions.RegionUtils;
+import com.amazonaws.regions.Regions;
+import com.amazonaws.services.cognitoidentityprovider.AmazonCognitoIdentityProvider;
+import com.amazonaws.services.cognitoidentityprovider.AmazonCognitoIdentityProviderClient;
+
+import io.reactivex.Single;
+import io.reactivex.SingleEmitter;
+import io.reactivex.SingleOnSubscribe;
+
+public class AuthProviderCognito implements AuthProvider {
+
+    // store in case we need to refresh with the stored username and password
+    private final String emailAddress;
+    private final String password;
+
+    private AmazonCognitoIdentityProvider cognitoIdentityProviderClient;
+    private CognitoUser cognitoUser;
+
+    public AuthProviderCognito(String clientId, String clientSecret, String poolId, String region,
+                               String emailAddress, String password) {
+        this.emailAddress = emailAddress;
+        this.password = password;
+
+        cognitoIdentityProviderClient =
+                new AmazonCognitoIdentityProviderClient(new AnonymousAWSCredentials(),
+                        new ClientConfiguration());
+        cognitoIdentityProviderClient.setRegion(RegionUtils.getRegion(region));
+
+        CognitoUserPool pool = new CognitoUserPool(poolId, clientId, clientSecret, Regions.EU_WEST_1);
+        cognitoUser = new CognitoUser(pool, emailAddress, clientId, clientSecret,
+                CognitoSecretHash.getSecretHash(emailAddress, clientId, clientSecret),
+                cognitoIdentityProviderClient);
+    }
+
+    @Override
+    public Single<String> getJwtToken() {
+        return Single.create(new SingleOnSubscribe<String>() {
+            @Override
+            public void subscribe(SingleEmitter<String> emitter) throws Exception {
+                try {
+                    cognitoUser.getSession(new AuthenticationHandler() {
+                        @Override
+                        public void onSuccess(CognitoUserSession userSession, CognitoDevice newDevice) {
+                            emitter.onSuccess(userSession.getAccessToken().getJWTToken());
+                        }
+
+                        @Override
+                        public void getAuthenticationDetails(
+                                AuthenticationContinuation authenticationContinuation, String userId) {
+                            AuthenticationDetails authenticationDetails = new AuthenticationDetails(emailAddress,
+                                    password, null);
+                            authenticationContinuation.setAuthenticationDetails(authenticationDetails);
+                            authenticationContinuation.continueTask();
+                        }
+
+                        @Override
+                        public void getMFACode(MultiFactorAuthenticationContinuation continuation) {
+                            emitter.onError(new UnsupportedOperationException("MFA required - aborting"));
+                        }
+
+                        @Override
+                        public void authenticationChallenge(ChallengeContinuation continuation) {
+                            emitter.onError(
+                                    new UnsupportedOperationException("unsupported authentication challenge"));
+                        }
+
+                        @Override
+                        public void onFailure(Exception exception) {
+                            emitter.onError(exception);
+                        }
+                    });
+                } catch (Exception ex) {
+                    emitter.onError(ex);
+                }
+            }
+        });
+    }
+}
\ No newline at end of file
diff --git a/aws-android-sdk-cognitoidentityprovider-demo/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/rx/Main.java b/aws-android-sdk-cognitoidentityprovider-demo/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/rx/Main.java
new file mode 100644
index 0000000000..b62afa1872
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider-demo/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/rx/Main.java
@@ -0,0 +1,37 @@
+package com.amazonaws.mobileconnectors.cognitoidentityprovider.rx;
+
+import io.reactivex.SingleObserver;
+import io.reactivex.disposables.Disposable;
+
+public class Main {
+
+  public static void main(String[] args) {
+    String clientId = "your client id";
+    String clientSecret = "your client secret";
+    String poolId = "your pool id";
+    
+    String region = "your region";
+    String emailAddress = "user id for login";
+    String password = "user password for login";
+    AuthProvider authProvider = new AuthProviderCognito(clientId, clientSecret, poolId, region,
+        emailAddress, password);
+
+    authProvider.getJwtToken()
+        .subscribe(new SingleObserver<String>() {
+          @Override
+          public void onSubscribe(Disposable d) {
+            System.out.println("Subscribed");
+          }
+
+          @Override
+          public void onSuccess(String jwt) {
+            System.out.println("Success: " + jwt);
+          }
+
+          @Override
+          public void onError(Throwable ex) {
+            System.out.println("Yikes: " + ex.getMessage());
+          }
+        });
+  }
+}
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/AndroidManifest.xml b/aws-android-sdk-cognitoidentityprovider/src/main/AndroidManifest.xml
new file mode 100644
index 0000000000..704a1aad71
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/AndroidManifest.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+ <manifest xmlns:android="http://schemas.android.com/apk/res/android"
+           xmlns:amazon="http://schemas.amazon.com/apk/res/android"
+           package="com.amazonaws.mobileconnectors.cognitoauth">
+ 
+     <application android:allowBackup="true"/>
+
+     <uses-sdk android:minSdkVersion="15"
+               android:targetSdkVersion="27" />
+ </manifest>
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/android/util/Base64.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/android/util/Base64.java
new file mode 100644
index 0000000000..05ab446f02
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/android/util/Base64.java
@@ -0,0 +1,742 @@
+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.amazonaws.android.util;
+
+import java.io.UnsupportedEncodingException;
+
+/**
+ * Utilities for encoding and decoding the Base64 representation of
+ * binary data.  See RFCs <a
+ * href="http://www.ietf.org/rfc/rfc2045.txt">2045</a> and <a
+ * href="http://www.ietf.org/rfc/rfc3548.txt">3548</a>.
+ */
+public class Base64 {
+    /**
+     * Default values for encoder/decoder flags.
+     */
+    public static final int DEFAULT = 0;
+
+    /**
+     * Encoder flag bit to omit the padding '=' characters at the end
+     * of the output (if any).
+     */
+    public static final int NO_PADDING = 1;
+
+    /**
+     * Encoder flag bit to omit all line terminators (i.e., the output
+     * will be on one long line).
+     */
+    public static final int NO_WRAP = 2;
+
+    /**
+     * Encoder flag bit to indicate lines should be terminated with a
+     * CRLF pair instead of just an LF.  Has no effect if {@code
+     * NO_WRAP} is specified as well.
+     */
+    public static final int CRLF = 4;
+
+    /**
+     * Encoder/decoder flag bit to indicate using the "URL and
+     * filename safe" variant of Base64 (see RFC 3548 section 4) where
+     * {@code -} and {@code _} are used in place of {@code +} and
+     * {@code /}.
+     */
+    public static final int URL_SAFE = 8;
+
+    /**
+     * Flag to pass to {@link Base64OutputStream} to indicate that it
+     * should not close the output stream it is wrapping when it
+     * itself is closed.
+     */
+    public static final int NO_CLOSE = 16;
+
+    //  --------------------------------------------------------
+    //  shared code
+    //  --------------------------------------------------------
+
+    /* package */ static abstract class Coder {
+        public byte[] output;
+        public int op;
+
+        /**
+         * Encode/decode another block of input data.  this.output is
+         * provided by the caller, and must be big enough to hold all
+         * the coded data.  On exit, this.opwill be set to the length
+         * of the coded data.
+         *
+         * @param finish true if this is the final call to process for
+         *        this object.  Will finalize the coder state and
+         *        include any final bytes in the output.
+         *
+         * @return true if the input so far is good; false if some
+         *         error has been detected in the input stream..
+         */
+        public abstract boolean process(byte[] input, int offset, int len, boolean finish);
+
+        /**
+         * @return the maximum number of bytes a call to process()
+         * could produce for the given number of input bytes.  This may
+         * be an overestimate.
+         */
+        public abstract int maxOutputSize(int len);
+    }
+
+    //  --------------------------------------------------------
+    //  decoding
+    //  --------------------------------------------------------
+
+    /**
+     * Decode the Base64-encoded data in input and return the data in
+     * a new byte array.
+     *
+     * <p>The padding '=' characters at the end are considered optional, but
+     * if any are present, there must be the correct number of them.
+     *
+     * @param str    the input String to decode, which is converted to
+     *               bytes using the default charset
+     * @param flags  controls certain features of the decoded output.
+     *               Pass {@code DEFAULT} to decode standard Base64.
+     *
+     * @throws IllegalArgumentException if the input contains
+     * incorrect padding
+     */
+    public static byte[] decode(String str, int flags) {
+        return decode(str.getBytes(), flags);
+    }
+
+    /**
+     * Decode the Base64-encoded data in input and return the data in
+     * a new byte array.
+     *
+     * <p>The padding '=' characters at the end are considered optional, but
+     * if any are present, there must be the correct number of them.
+     *
+     * @param input the input array to decode
+     * @param flags  controls certain features of the decoded output.
+     *               Pass {@code DEFAULT} to decode standard Base64.
+     *
+     * @throws IllegalArgumentException if the input contains
+     * incorrect padding
+     */
+    public static byte[] decode(byte[] input, int flags) {
+        return decode(input, 0, input.length, flags);
+    }
+
+    /**
+     * Decode the Base64-encoded data in input and return the data in
+     * a new byte array.
+     *
+     * <p>The padding '=' characters at the end are considered optional, but
+     * if any are present, there must be the correct number of them.
+     *
+     * @param input  the data to decode
+     * @param offset the position within the input array at which to start
+     * @param len    the number of bytes of input to decode
+     * @param flags  controls certain features of the decoded output.
+     *               Pass {@code DEFAULT} to decode standard Base64.
+     *
+     * @throws IllegalArgumentException if the input contains
+     * incorrect padding
+     */
+    public static byte[] decode(byte[] input, int offset, int len, int flags) {
+        // Allocate space for the most data the input could represent.
+        // (It could contain less if it contains whitespace, etc.)
+        Decoder decoder = new Decoder(flags, new byte[len*3/4]);
+
+        if (!decoder.process(input, offset, len, true)) {
+            throw new IllegalArgumentException("bad base-64");
+        }
+
+        // Maybe we got lucky and allocated exactly enough output space.
+        if (decoder.op == decoder.output.length) {
+            return decoder.output;
+        }
+
+        // Need to shorten the array, so allocate a new one of the
+        // right size and copy.
+        byte[] temp = new byte[decoder.op];
+        System.arraycopy(decoder.output, 0, temp, 0, decoder.op);
+        return temp;
+    }
+
+    /* package */ static class Decoder extends Coder {
+        /**
+         * Lookup table for turning bytes into their position in the
+         * Base64 alphabet.
+         */
+        private static final int DECODE[] = {
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63,
+            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -2, -1, -1,
+            -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
+            15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1,
+            -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
+            41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+        };
+
+        /**
+         * Decode lookup table for the "web safe" variant (RFC 3548
+         * sec. 4) where - and _ replace + and /.
+         */
+        private static final int DECODE_WEBSAFE[] = {
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1,
+            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -2, -1, -1,
+            -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
+            15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63,
+            -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
+            41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+        };
+
+        /** Non-data values in the DECODE arrays. */
+        private static final int SKIP = -1;
+        private static final int EQUALS = -2;
+
+        /**
+         * States 0-3 are reading through the next input tuple.
+         * State 4 is having read one '=' and expecting exactly
+         * one more.
+         * State 5 is expecting no more data or padding characters
+         * in the input.
+         * State 6 is the error state; an error has been detected
+         * in the input and no future input can "fix" it.
+         */
+        private int state;   // state number (0 to 6)
+        private int value;
+
+        final private int[] alphabet;
+
+        public Decoder(int flags, byte[] output) {
+            this.output = output;
+
+            alphabet = ((flags & URL_SAFE) == 0) ? DECODE : DECODE_WEBSAFE;
+            state = 0;
+            value = 0;
+        }
+
+        /**
+         * @return an overestimate for the number of bytes {@code
+         * len} bytes could decode to.
+         */
+        public int maxOutputSize(int len) {
+            return len * 3/4 + 10;
+        }
+
+        /**
+         * Decode another block of input data.
+         *
+         * @return true if the state machine is still healthy.  false if
+         *         bad base-64 data has been detected in the input stream.
+         */
+        public boolean process(byte[] input, int offset, int len, boolean finish) {
+            if (this.state == 6) return false;
+
+            int p = offset;
+            len += offset;
+
+            // Using local variables makes the decoder about 12%
+            // faster than if we manipulate the member variables in
+            // the loop.  (Even alphabet makes a measurable
+            // difference, which is somewhat surprising to me since
+            // the member variable is final.)
+            int state = this.state;
+            int value = this.value;
+            int op = 0;
+            final byte[] output = this.output;
+            final int[] alphabet = this.alphabet;
+
+            while (p < len) {
+                // Try the fast path:  we're starting a new tuple and the
+                // next four bytes of the input stream are all data
+                // bytes.  This corresponds to going through states
+                // 0-1-2-3-0.  We expect to use this method for most of
+                // the data.
+                //
+                // If any of the next four bytes of input are non-data
+                // (whitespace, etc.), value will end up negative.  (All
+                // the non-data values in decode are small negative
+                // numbers, so shifting any of them up and or'ing them
+                // together will result in a value with its top bit set.)
+                //
+                // You can remove this whole block and the output should
+                // be the same, just slower.
+                if (state == 0) {
+                    while (p+4 <= len &&
+                           (value = ((alphabet[input[p] & 0xff] << 18) |
+                                     (alphabet[input[p+1] & 0xff] << 12) |
+                                     (alphabet[input[p+2] & 0xff] << 6) |
+                                     (alphabet[input[p+3] & 0xff]))) >= 0) {
+                        output[op+2] = (byte) value;
+                        output[op+1] = (byte) (value >> 8);
+                        output[op] = (byte) (value >> 16);
+                        op += 3;
+                        p += 4;
+                    }
+                    if (p >= len) break;
+                }
+
+                // The fast path isn't available -- either we've read a
+                // partial tuple, or the next four input bytes aren't all
+                // data, or whatever.  Fall back to the slower state
+                // machine implementation.
+
+                int d = alphabet[input[p++] & 0xff];
+
+                switch (state) {
+                case 0:
+                    if (d >= 0) {
+                        value = d;
+                        ++state;
+                    } else if (d != SKIP) {
+                        this.state = 6;
+                        return false;
+                    }
+                    break;
+
+                case 1:
+                    if (d >= 0) {
+                        value = (value << 6) | d;
+                        ++state;
+                    } else if (d != SKIP) {
+                        this.state = 6;
+                        return false;
+                    }
+                    break;
+
+                case 2:
+                    if (d >= 0) {
+                        value = (value << 6) | d;
+                        ++state;
+                    } else if (d == EQUALS) {
+                        // Emit the last (partial) output tuple;
+                        // expect exactly one more padding character.
+                        output[op++] = (byte) (value >> 4);
+                        state = 4;
+                    } else if (d != SKIP) {
+                        this.state = 6;
+                        return false;
+                    }
+                    break;
+
+                case 3:
+                    if (d >= 0) {
+                        // Emit the output triple and return to state 0.
+                        value = (value << 6) | d;
+                        output[op+2] = (byte) value;
+                        output[op+1] = (byte) (value >> 8);
+                        output[op] = (byte) (value >> 16);
+                        op += 3;
+                        state = 0;
+                    } else if (d == EQUALS) {
+                        // Emit the last (partial) output tuple;
+                        // expect no further data or padding characters.
+                        output[op+1] = (byte) (value >> 2);
+                        output[op] = (byte) (value >> 10);
+                        op += 2;
+                        state = 5;
+                    } else if (d != SKIP) {
+                        this.state = 6;
+                        return false;
+                    }
+                    break;
+
+                case 4:
+                    if (d == EQUALS) {
+                        ++state;
+                    } else if (d != SKIP) {
+                        this.state = 6;
+                        return false;
+                    }
+                    break;
+
+                case 5:
+                    if (d != SKIP) {
+                        this.state = 6;
+                        return false;
+                    }
+                    break;
+                }
+            }
+
+            if (!finish) {
+                // We're out of input, but a future call could provide
+                // more.
+                this.state = state;
+                this.value = value;
+                this.op = op;
+                return true;
+            }
+
+            // Done reading input.  Now figure out where we are left in
+            // the state machine and finish up.
+
+            switch (state) {
+            case 0:
+                // Output length is a multiple of three.  Fine.
+                break;
+            case 1:
+                // Read one extra input byte, which isn't enough to
+                // make another output byte.  Illegal.
+                this.state = 6;
+                return false;
+            case 2:
+                // Read two extra input bytes, enough to emit 1 more
+                // output byte.  Fine.
+                output[op++] = (byte) (value >> 4);
+                break;
+            case 3:
+                // Read three extra input bytes, enough to emit 2 more
+                // output bytes.  Fine.
+                output[op++] = (byte) (value >> 10);
+                output[op++] = (byte) (value >> 2);
+                break;
+            case 4:
+                // Read one padding '=' when we expected 2.  Illegal.
+                this.state = 6;
+                return false;
+            case 5:
+                // Read all the padding '='s we expected and no more.
+                // Fine.
+                break;
+            }
+
+            this.state = state;
+            this.op = op;
+            return true;
+        }
+    }
+
+    //  --------------------------------------------------------
+    //  encoding
+    //  --------------------------------------------------------
+
+    /**
+     * Base64-encode the given data and return a newly allocated
+     * String with the result.
+     *
+     * @param input  the data to encode
+     * @param flags  controls certain features of the encoded output.
+     *               Passing {@code DEFAULT} results in output that
+     *               adheres to RFC 2045.
+     */
+    public static String encodeToString(byte[] input, int flags) {
+        try {
+            return new String(encode(input, flags), "US-ASCII");
+        } catch (UnsupportedEncodingException e) {
+            // US-ASCII is guaranteed to be available.
+            throw new AssertionError(e);
+        }
+    }
+
+    /**
+     * Base64-encode the given data and return a newly allocated
+     * String with the result.
+     *
+     * @param input  the data to encode
+     * @param offset the position within the input array at which to
+     *               start
+     * @param len    the number of bytes of input to encode
+     * @param flags  controls certain features of the encoded output.
+     *               Passing {@code DEFAULT} results in output that
+     *               adheres to RFC 2045.
+     */
+    public static String encodeToString(byte[] input, int offset, int len, int flags) {
+        try {
+            return new String(encode(input, offset, len, flags), "US-ASCII");
+        } catch (UnsupportedEncodingException e) {
+            // US-ASCII is guaranteed to be available.
+            throw new AssertionError(e);
+        }
+    }
+
+    /**
+     * Base64-encode the given data and return a newly allocated
+     * byte[] with the result.
+     *
+     * @param input  the data to encode
+     * @param flags  controls certain features of the encoded output.
+     *               Passing {@code DEFAULT} results in output that
+     *               adheres to RFC 2045.
+     */
+    public static byte[] encode(byte[] input, int flags) {
+        return encode(input, 0, input.length, flags);
+    }
+
+    /**
+     * Base64-encode the given data and return a newly allocated
+     * byte[] with the result.
+     *
+     * @param input  the data to encode
+     * @param offset the position within the input array at which to
+     *               start
+     * @param len    the number of bytes of input to encode
+     * @param flags  controls certain features of the encoded output.
+     *               Passing {@code DEFAULT} results in output that
+     *               adheres to RFC 2045.
+     */
+    public static byte[] encode(byte[] input, int offset, int len, int flags) {
+        Encoder encoder = new Encoder(flags, null);
+
+        // Compute the exact length of the array we will produce.
+        int output_len = len / 3 * 4;
+
+        // Account for the tail of the data and the padding bytes, if any.
+        if (encoder.do_padding) {
+            if (len % 3 > 0) {
+                output_len += 4;
+            }
+        } else {
+            switch (len % 3) {
+                case 0: break;
+                case 1: output_len += 2; break;
+                case 2: output_len += 3; break;
+            }
+        }
+
+        // Account for the newlines, if any.
+        if (encoder.do_newline && len > 0) {
+            output_len += (((len-1) / (3 * Encoder.LINE_GROUPS)) + 1) *
+                (encoder.do_cr ? 2 : 1);
+        }
+
+        encoder.output = new byte[output_len];
+        encoder.process(input, offset, len, true);
+
+        assert encoder.op == output_len;
+
+        return encoder.output;
+    }
+
+    /* package */ static class Encoder extends Coder {
+        /**
+         * Emit a new line every this many output tuples.  Corresponds to
+         * a 76-character line length (the maximum allowable according to
+         * <a href="http://www.ietf.org/rfc/rfc2045.txt">RFC 2045</a>).
+         */
+        public static final int LINE_GROUPS = 19;
+
+        /**
+         * Lookup table for turning Base64 alphabet positions (6 bits)
+         * into output bytes.
+         */
+        private static final byte ENCODE[] = {
+            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
+            'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
+            'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
+            'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/',
+        };
+
+        /**
+         * Lookup table for turning Base64 alphabet positions (6 bits)
+         * into output bytes.
+         */
+        private static final byte ENCODE_WEBSAFE[] = {
+            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
+            'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
+            'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
+            'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_',
+        };
+
+        final private byte[] tail;
+        /* package */ int tailLen;
+        private int count;
+
+        final public boolean do_padding;
+        final public boolean do_newline;
+        final public boolean do_cr;
+        final private byte[] alphabet;
+
+        public Encoder(int flags, byte[] output) {
+            this.output = output;
+
+            do_padding = (flags & NO_PADDING) == 0;
+            do_newline = (flags & NO_WRAP) == 0;
+            do_cr = (flags & CRLF) != 0;
+            alphabet = ((flags & URL_SAFE) == 0) ? ENCODE : ENCODE_WEBSAFE;
+
+            tail = new byte[2];
+            tailLen = 0;
+
+            count = do_newline ? LINE_GROUPS : -1;
+        }
+
+        /**
+         * @return an overestimate for the number of bytes {@code
+         * len} bytes could encode to.
+         */
+        public int maxOutputSize(int len) {
+            return len * 8/5 + 10;
+        }
+
+        public boolean process(byte[] input, int offset, int len, boolean finish) {
+            // Using local variables makes the encoder about 9% faster.
+            final byte[] alphabet = this.alphabet;
+            final byte[] output = this.output;
+            int op = 0;
+            int count = this.count;
+
+            int p = offset;
+            len += offset;
+            int v = -1;
+
+            // First we need to concatenate the tail of the previous call
+            // with any input bytes available now and see if we can empty
+            // the tail.
+
+            switch (tailLen) {
+                case 0:
+                    // There was no tail.
+                    break;
+
+                case 1:
+                    if (p+2 <= len) {
+                        // A 1-byte tail with at least 2 bytes of
+                        // input available now.
+                        v = ((tail[0] & 0xff) << 16) |
+                            ((input[p++] & 0xff) << 8) |
+                            (input[p++] & 0xff);
+                        tailLen = 0;
+                    };
+                    break;
+
+                case 2:
+                    if (p+1 <= len) {
+                        // A 2-byte tail with at least 1 byte of input.
+                        v = ((tail[0] & 0xff) << 16) |
+                            ((tail[1] & 0xff) << 8) |
+                            (input[p++] & 0xff);
+                        tailLen = 0;
+                    }
+                    break;
+            }
+
+            if (v != -1) {
+                output[op++] = alphabet[(v >> 18) & 0x3f];
+                output[op++] = alphabet[(v >> 12) & 0x3f];
+                output[op++] = alphabet[(v >> 6) & 0x3f];
+                output[op++] = alphabet[v & 0x3f];
+                if (--count == 0) {
+                    if (do_cr) output[op++] = '\r';
+                    output[op++] = '\n';
+                    count = LINE_GROUPS;
+                }
+            }
+
+            // At this point either there is no tail, or there are fewer
+            // than 3 bytes of input available.
+
+            // The main loop, turning 3 input bytes into 4 output bytes on
+            // each iteration.
+            while (p+3 <= len) {
+                v = ((input[p] & 0xff) << 16) |
+                    ((input[p+1] & 0xff) << 8) |
+                    (input[p+2] & 0xff);
+                output[op] = alphabet[(v >> 18) & 0x3f];
+                output[op+1] = alphabet[(v >> 12) & 0x3f];
+                output[op+2] = alphabet[(v >> 6) & 0x3f];
+                output[op+3] = alphabet[v & 0x3f];
+                p += 3;
+                op += 4;
+                if (--count == 0) {
+                    if (do_cr) output[op++] = '\r';
+                    output[op++] = '\n';
+                    count = LINE_GROUPS;
+                }
+            }
+
+            if (finish) {
+                // Finish up the tail of the input.  Note that we need to
+                // consume any bytes in tail before any bytes
+                // remaining in input; there should be at most two bytes
+                // total.
+
+                if (p-tailLen == len-1) {
+                    int t = 0;
+                    v = ((tailLen > 0 ? tail[t++] : input[p++]) & 0xff) << 4;
+                    tailLen -= t;
+                    output[op++] = alphabet[(v >> 6) & 0x3f];
+                    output[op++] = alphabet[v & 0x3f];
+                    if (do_padding) {
+                        output[op++] = '=';
+                        output[op++] = '=';
+                    }
+                    if (do_newline) {
+                        if (do_cr) output[op++] = '\r';
+                        output[op++] = '\n';
+                    }
+                } else if (p-tailLen == len-2) {
+                    int t = 0;
+                    v = (((tailLen > 1 ? tail[t++] : input[p++]) & 0xff) << 10) |
+                        (((tailLen > 0 ? tail[t++] : input[p++]) & 0xff) << 2);
+                    tailLen -= t;
+                    output[op++] = alphabet[(v >> 12) & 0x3f];
+                    output[op++] = alphabet[(v >> 6) & 0x3f];
+                    output[op++] = alphabet[v & 0x3f];
+                    if (do_padding) {
+                        output[op++] = '=';
+                    }
+                    if (do_newline) {
+                        if (do_cr) output[op++] = '\r';
+                        output[op++] = '\n';
+                    }
+                } else if (do_newline && op > 0 && count != LINE_GROUPS) {
+                    if (do_cr) output[op++] = '\r';
+                    output[op++] = '\n';
+                }
+
+                assert tailLen == 0;
+                assert p == len;
+            } else {
+                // Save the leftovers in tail to be consumed on the next
+                // call to encodeInternal.
+
+                if (p == len-1) {
+                    tail[tailLen++] = input[p];
+                } else if (p == len-2) {
+                    tail[tailLen++] = input[p];
+                    tail[tailLen++] = input[p+1];
+                }
+            }
+
+            this.op = op;
+            this.count = count;
+
+            return true;
+        }
+    }
+
+    private Base64() { }   // don't instantiate
+}
+
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/cognito/clientcontext/data/ConfigurationConstant.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/cognito/clientcontext/data/ConfigurationConstant.java
new file mode 100644
index 0000000000..8238054a16
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/cognito/clientcontext/data/ConfigurationConstant.java
@@ -0,0 +1,16 @@
+package com.amazonaws.cognito.clientcontext.data;
+
+import java.nio.charset.Charset;
+
+/**
+ * It provides constants that defines configuration for the library. These
+ * constants are used in multiple classes within the library.
+ */
+public class ConfigurationConstant {
+
+    /**
+     * Default CHARSET used while generating byte array.
+     */
+    public static final Charset DEFAULT_CHARSET = Charset.forName("UTF-8");
+}
+
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/cognito/clientcontext/data/UserContextDataProvider.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/cognito/clientcontext/data/UserContextDataProvider.java
new file mode 100644
index 0000000000..b92d950821
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/cognito/clientcontext/data/UserContextDataProvider.java
@@ -0,0 +1,139 @@
+package com.amazonaws.cognito.clientcontext.data;
+
+import com.amazonaws.cognito.clientcontext.datacollection.DataAggregator;
+import com.amazonaws.cognito.clientcontext.datacollection.DataAggregatorImpl;
+import com.amazonaws.android.util.Base64;
+import java.util.Map;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import com.amazonaws.cognito.clientcontext.util.SignatureGenerator;
+
+/**
+ * It provides the user context data that is sent to the server.
+ */
+public class UserContextDataProvider {
+  
+  public static DataAggregator sDefaultDataAggregator = new DataAggregatorImpl();
+
+  private static final String TAG = UserContextDataProvider.class.getSimpleName();
+  private static final Log LOGGER = LogFactory.getLog(UserContextDataProvider.class);
+  
+  public static final String VERSION = "ANDROID20171114";
+
+  private DataAggregator aggregator;
+  private SignatureGenerator signatureGenerator;
+
+  /**
+   * Private class to store an instance. This is used to ensure a singleton
+   * instance of the class.
+   */
+  private static class InstanceHolder {
+    private static final UserContextDataProvider INSTANCE = new UserContextDataProvider();
+  }
+
+  private UserContextDataProvider() {
+    this(sDefaultDataAggregator, new SignatureGenerator());
+  }
+
+  /**
+   * Protected constructor to instantiate a class object for unit testing.
+   */
+  protected UserContextDataProvider(DataAggregator aggregator, SignatureGenerator signatureGenerator) {
+    this.aggregator = aggregator;
+    this.signatureGenerator = signatureGenerator;
+  }
+  
+  public static void setDefaultDataAggregator(DataAggregator dataAggregator) {
+    sDefaultDataAggregator = dataAggregator;
+  }
+
+  /**
+   * @return instance of the class
+   */
+  public static UserContextDataProvider getInstance() {
+    return InstanceHolder.INSTANCE;
+  }
+
+  /**
+   * It gets aggregated user context data, adds signature to it and provides
+   * it in Base64 encoded form. Final data is JSON object with 'signature' and
+   * 'payload'. Payload is a JSON object that contains 'username',
+   * 'userPoolId', 'timestamp' and 'contextData'.
+   *
+   * @param username
+   *            username for the user
+   * @param userPoolId
+   *            cognito userpoolId for the application
+   * @param signatureSecret
+   *            secret key used while generating signature. For now, this
+   *            would be application clientId.
+   * @return base64 encoded userContextData.
+   */
+  public String getEncodedContextData(String username, String userPoolId, String signatureSecret) {
+    JSONObject jsonResponse = new JSONObject();
+
+    try {
+      final Map<String, String> contextData = aggregator.getAggregatedData();
+      JSONObject payload = getJsonPayload(contextData, username, userPoolId);
+      String payloadString = payload.toString();
+
+      String signature = signatureGenerator.getSignature(payloadString, signatureSecret, VERSION);
+      jsonResponse = getJsonResponse(payloadString, signature);
+      return getEncodedResponse(jsonResponse);
+    } catch (Exception e) {
+      LOGGER.error("Exception in creating JSON from context data", e);
+      return null;
+    }
+  }
+
+  private JSONObject getJsonPayload(Map<String, String> contextData, String username, String userPoolId)
+      throws JSONException {
+    JSONObject payload = new JSONObject();
+    payload.put(ContextDataJsonKeys.CONTEXT_DATA, new JSONObject(contextData));
+    payload.put(ContextDataJsonKeys.USERNAME, username);
+    payload.put(ContextDataJsonKeys.USER_POOL_ID, userPoolId);
+    payload.put(ContextDataJsonKeys.TIMESTAMP_MILLI_SEC, getTimestamp());
+    return payload;
+  }
+
+  /**
+   * Protected to allow overriding in unit test.
+   */
+  protected String getTimestamp() {
+    return String.valueOf(System.currentTimeMillis());
+  }
+
+  private JSONObject getJsonResponse(String payload, String signature) throws JSONException {
+    JSONObject jsonResponse = new JSONObject();
+    jsonResponse.put(ContextDataJsonKeys.DATA_PAYLOAD, payload);
+    jsonResponse.put(ContextDataJsonKeys.SIGNATURE, signature);
+    jsonResponse.put(ContextDataJsonKeys.VERSION, UserContextDataProvider.VERSION);
+    return jsonResponse;
+  }
+
+  /**
+   * Protected to allow overriding in unit test. Base64 is part of AndroidSdk
+   * which cannot be directly invoked in unit test.
+   */
+  protected String getEncodedResponse(JSONObject jsonResponse) {
+    byte[] responseBytes = jsonResponse.toString().getBytes(ConfigurationConstant.DEFAULT_CHARSET);
+    return Base64.encodeToString(responseBytes, Base64.DEFAULT);
+  }
+
+  /**
+   * Class defines constant keys that are used in JSON response object.
+   */
+  private class ContextDataJsonKeys {
+    private static final String CONTEXT_DATA = "contextData";
+    private static final String USERNAME = "username";
+    private static final String USER_POOL_ID = "userPoolId";
+    private static final String TIMESTAMP_MILLI_SEC = "timestamp";
+    private static final String DATA_PAYLOAD = "payload";
+    private static final String VERSION = "version";
+    private static final String SIGNATURE = "signature";
+  }
+}
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/DataAggregator.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/DataAggregator.java
new file mode 100644
index 0000000000..5518a32107
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/DataAggregator.java
@@ -0,0 +1,11 @@
+package com.amazonaws.cognito.clientcontext.datacollection;
+
+import java.util.Map;
+
+public interface DataAggregator {
+
+    /**
+     * @return map of device configuration properties
+     */
+    Map<String, String> getAggregatedData();
+}
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/DataAggregatorImpl.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/DataAggregatorImpl.java
new file mode 100644
index 0000000000..52fd1c8a6a
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/DataAggregatorImpl.java
@@ -0,0 +1,22 @@
+package com.amazonaws.cognito.clientcontext.datacollection;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class DataAggregatorImpl implements DataAggregator {
+    
+    @Override
+    public Map<String, String> getAggregatedData() {
+        Map<String, String> data = new HashMap<>();
+        data.put(DataRecordKey.JDK_VENDOR, getProp("java.vm.specification.vendor", "Java"));
+        data.put(DataRecordKey.OS_ARCH, getProp("os.arch", "Java"));
+        data.put(DataRecordKey.OS_NAME, getProp("os.name", "Java"));
+        data.put(DataRecordKey.OS_VERSION, getProp("os.version", "Java"));
+        return data;
+    }
+    
+    private static String getProp(String property, String defaultValue) {
+        String value = System.getProperty(property);
+        return value == null ? defaultValue : value;
+    }
+}
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/DataRecordKey.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/DataRecordKey.java
new file mode 100644
index 0000000000..7bf8f3d5ea
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/cognito/clientcontext/datacollection/DataRecordKey.java
@@ -0,0 +1,32 @@
+package com.amazonaws.cognito.clientcontext.datacollection;
+
+/**
+ * Constants in this class contains the fields that are extracted from the
+ * device. It enlists the constants used as a key for user context data fields.
+ */
+public class DataRecordKey {
+
+    /*
+     * Keys for application related data.
+     */
+
+    /**
+     * Operating system architecture.
+     */
+    public static final String OS_ARCH = "os.arch";
+    
+    /**
+     * Operating system name
+     */
+    public static final String OS_NAME = "os.name";
+    
+    /**
+     * Operating system version
+     */
+    public static final String OS_VERSION = "os.version";
+
+    /**
+     * JVM vendor
+     */
+    public static final String JDK_VENDOR = "java.vm.specification.vendor";    
+}
\ No newline at end of file
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/cognito/clientcontext/util/SignatureGenerator.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/cognito/clientcontext/util/SignatureGenerator.java
new file mode 100644
index 0000000000..f9a9c45f05
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/cognito/clientcontext/util/SignatureGenerator.java
@@ -0,0 +1,55 @@
+package com.amazonaws.cognito.clientcontext.util;
+
+import javax.crypto.Mac;
+import javax.crypto.spec.SecretKeySpec;
+
+import com.amazonaws.cognito.clientcontext.data.ConfigurationConstant;
+
+import com.amazonaws.android.util.Base64;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+/**
+ * Create the signature for context data. It create HMAC_SHA256 for the
+ * stringified JSON payload data and then encode it in Base64. Payload contains
+ * username, userpoolId and timestamp so these are already factored in the
+ * generated signature.
+ */
+public class SignatureGenerator {
+    private static final String TAG = "HMAC_SHA256_Signature";
+    private static final String ALGORITHM = "HmacSHA256";
+    private static final Log LOGGER = LogFactory.getLog(SignatureGenerator.class);
+
+    /**
+     * Generates the signature for the JSON data payload.
+     * 
+     * @param data
+     *            JSON payload for contextData.
+     * @param secret
+     *            secret key used for generating the signature.
+     * @return signature string for the payload.
+     */
+    public String getSignature(String data, String secret, String version) {
+        String signature = "";
+        try {
+            Mac sha256Hmac = Mac.getInstance(ALGORITHM);
+            SecretKeySpec secretKey = new SecretKeySpec(secret.getBytes(ConfigurationConstant.DEFAULT_CHARSET), ALGORITHM);
+            sha256Hmac.init(secretKey);
+            
+            byte[] versionBytes = version.getBytes(ConfigurationConstant.DEFAULT_CHARSET);
+            sha256Hmac.update(versionBytes);
+
+            byte[] dataBytes = data.getBytes(ConfigurationConstant.DEFAULT_CHARSET);
+            signature = Base64.encodeToString(sha256Hmac.doFinal(dataBytes), Base64.DEFAULT);
+        } catch (Exception e) {
+            logWarning(e);
+        }
+        return signature;
+    }
+
+    private void logWarning(Exception e) {
+        LOGGER.warn("Exception while completing context data signature", e);
+    }
+}
+
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/CognitoDevice.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/CognitoDevice.java
index b7e1502ff4..4f0bbe0295 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/CognitoDevice.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/CognitoDevice.java
@@ -17,9 +17,7 @@
 
 package com.amazonaws.mobileconnectors.cognitoidentityprovider;
 
-import android.content.Context;
-import android.os.Handler;
-
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.extra.execution.CallbackExectorProvider;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.exceptions.CognitoInternalErrorException;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.exceptions.CognitoNotAuthorizedException;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.exceptions.CognitoParameterInvalidException;
@@ -74,11 +72,6 @@
      */
     private final CognitoUser user;
 
-    /**
-     * Required to access Android OS resources.
-     */
-    private final Context context;
-
     /**
      * Constructs an object of type {@link CognitoDevice} with device details.
      *
@@ -88,16 +81,14 @@
      * @param lastModifiedDate          REQUIRED: The date on which the device attributes were last modified.
      * @param lastAccessedDate          REQUIRED: The date this device details were last read.
      * @param user                      REQUIRED: The {@link CognitoUser} this device is linked to.
-     * @param context                   REQUIRED: App context.
      */
-    public CognitoDevice(String deviceKey, CognitoUserAttributes deviceAttributes, Date createDate, Date lastModifiedDate, Date lastAccessedDate, CognitoUser user, Context context) {
+    public CognitoDevice(String deviceKey, CognitoUserAttributes deviceAttributes, Date createDate, Date lastModifiedDate, Date lastAccessedDate, CognitoUser user) {
         this.deviceKey = deviceKey;
         this.deviceAttributes = deviceAttributes;
         this.createDate = createDate;
         this.lastModifiedDate = lastModifiedDate;
         this.lastAccessedDate = lastAccessedDate;
         this.user = user;
-        this.context = context;
     }
 
     /**
@@ -105,16 +96,14 @@ public CognitoDevice(String deviceKey, CognitoUserAttributes deviceAttributes, D
      *
      * @param device                    REQUIRED: A {@link DeviceType} object.
      * @param user                      REQUIRED: The {@link CognitoUser} this device is linked to.
-     * @param context                   REQUIRED: App context.
      */
-    public CognitoDevice(DeviceType device, CognitoUser user, Context context) {
+    public CognitoDevice(DeviceType device, CognitoUser user) {
         this.deviceKey = device.getDeviceKey();
         this.deviceAttributes = new CognitoUserAttributes(device.getDeviceAttributes());
         this.createDate = device.getDeviceCreateDate();
         this.lastModifiedDate = device.getDeviceLastModifiedDate();
         this.lastAccessedDate = device.getDeviceLastModifiedDate();
         this.user = user;
-        this.context = context;
     }
 
     /**
@@ -200,7 +189,6 @@ public void getDeviceInBackground(final GenericHandler callback) {
         new Thread(new Runnable() {
             @Override
             public void run() {
-                final Handler handler = new Handler(context.getMainLooper());
                 Runnable returnCallback;
                 try {
                     final GetDeviceResult getDeviceResult = getDeviceInternal(user.getCachedSession());
@@ -219,7 +207,7 @@ public void run() {
                         }
                     };
                 }
-                handler.post(returnCallback);
+                CallbackExectorProvider.getExecutor().execute(returnCallback);
             }
         }).start();
     }
@@ -261,7 +249,6 @@ public void forgetDeviceInBackground(final GenericHandler callback) {
         new Thread(new Runnable() {
             @Override
             public void run() {
-                final Handler handler = new Handler(context.getMainLooper());
                 Runnable returnCallback;
                 try {
                     forgetDeviceInternal(user.getCachedSession());
@@ -279,7 +266,7 @@ public void run() {
                         }
                     };
                 }
-                handler.post(returnCallback);
+                CallbackExectorProvider.getExecutor().execute(returnCallback);
             }
         }).start();
     }
@@ -317,7 +304,6 @@ public void rememberThisDeviceInBackground(final GenericHandler callback) {
         new Thread(new Runnable() {
             @Override
             public void run() {
-                final Handler handler = new Handler(context.getMainLooper());
                 Runnable returnCallback;
                 try {
                     updateDeviceStatusInternal(user.getCachedSession(), DEVICE_TYPE_REMEMBERED);
@@ -335,7 +321,7 @@ public void run() {
                         }
                     };
                 }
-                handler.post(returnCallback);
+                CallbackExectorProvider.getExecutor().execute(returnCallback);
             }
         }).start();
     }
@@ -374,7 +360,6 @@ public void doNotRememberThisDeviceInBackground(final GenericHandler callback) {
         new Thread(new Runnable() {
             @Override
             public void run() {
-                final Handler handler = new Handler(context.getMainLooper());
                 Runnable returnCallback;
                 try {
                     updateDeviceStatusInternal(user.getCachedSession(), DEVICE_TYPE_NOT_REMEMBERED);
@@ -392,7 +377,7 @@ public void run() {
                         }
                     };
                 }
-                handler.post(returnCallback);
+                CallbackExectorProvider.getExecutor().execute(returnCallback);
             }
         }).start();
     }
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/CognitoUser.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/CognitoUser.java
index c331e8b9ce..a635bb9d69 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/CognitoUser.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/CognitoUser.java
@@ -17,10 +17,9 @@
 
 package com.amazonaws.mobileconnectors.cognitoidentityprovider;
 
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.os.Handler;
 
+import com.amazonaws.extra.persistence.StorageProvider;
+import com.amazonaws.extra.persistence.Storage;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.continuations.AuthenticationContinuation;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.continuations.AuthenticationDetails;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.continuations.ChallengeContinuation;
@@ -33,6 +32,7 @@
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.exceptions.CognitoInternalErrorException;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.exceptions.CognitoNotAuthorizedException;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.exceptions.CognitoParameterInvalidException;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.extra.execution.CallbackExectorProvider;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.handlers.AuthenticationHandler;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.handlers.DevicesHandler;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.handlers.ForgotPasswordHandler;
@@ -130,14 +130,11 @@
  */
 public class CognitoUser {
     private static final Log LOGGER = LogFactory.getLog(CognitoUser.class);
+    
+    protected static final String COGNITO_IDENTITY_PROVIDER_CACHE_STORAGE_NAME = "cognito_identity_provider_cache_storage";
 
     private static final int SRP_RADIX = 16;
 
-    /**
-     * Application context.
-     */
-    private final Context context;
-
     /**
      * CIP low-level client.
      */
@@ -199,13 +196,11 @@
      * @param clientSecret REQUIRED: Client secret assigned for this Client-Id.
      * @param secretHash REQUIRED: Secret-Hash, calculated for this android app.
      * @param client REQUIRED: Low level android client.
-     * @param context REQUIRED: Application context.
      */
-    protected CognitoUser(CognitoUserPool pool, String userId,
+    public CognitoUser(CognitoUserPool pool, String userId,
             String clientId, String clientSecret, String secretHash,
-            AmazonCognitoIdentityProvider client, Context context) {
+           AmazonCognitoIdentityProvider client) {
         this.pool = pool;
-        this.context = context;
         this.userId = userId;
         this.cognitoIdentityProviderClient = client;
         this.clientId = clientId;
@@ -267,7 +262,6 @@ public void confirmSignUpInBackground(final String confirmationCode,
         new Thread(new Runnable() {
             @Override
             public void run() {
-                final Handler handler = new Handler(context.getMainLooper());
                 Runnable returnCallback;
                 try {
                     confirmSignUpInternal(confirmationCode, forcedAliasCreation);
@@ -285,7 +279,7 @@ public void run() {
                         }
                     };
                 }
-                handler.post(returnCallback);
+                CallbackExectorProvider.getExecutor().execute(returnCallback);
             }
         }).start();
     }
@@ -359,7 +353,6 @@ public void resendConfirmationCodeInBackground(final VerificationHandler callbac
         new Thread(new Runnable() {
             @Override
             public void run() {
-                final Handler handler = new Handler(context.getMainLooper());
                 Runnable returnCallback;
                 try {
                     final ResendConfirmationCodeResult resendConfirmationCodeResult = resendConfirmationCodeInternal();
@@ -378,7 +371,7 @@ public void run() {
                         }
                     };
                 }
-                handler.post(returnCallback);
+                CallbackExectorProvider.getExecutor().execute(returnCallback);
             }
         }).start();
     }
@@ -452,7 +445,6 @@ public void forgotPasswordInBackground(final ForgotPasswordHandler callback) {
         new Thread(new Runnable() {
             @Override
             public void run() {
-                final Handler handler = new Handler(context.getMainLooper());
                 Runnable returnCallback;
                 try {
                     final ForgotPasswordResult forgotPasswordResult = forgotPasswordInternal();
@@ -475,7 +467,7 @@ public void run() {
                         }
                     };
                 }
-                handler.post(returnCallback);
+                CallbackExectorProvider.getExecutor().execute(returnCallback);
             }
         }).start();
     }
@@ -562,7 +554,6 @@ public void confirmPasswordInBackground(final String verificationCode,
         new Thread(new Runnable() {
             @Override
             public void run() {
-                final Handler handler = new Handler(context.getMainLooper());
                 Runnable returnCallback;
                 try {
                     confirmPasswordInternal(verificationCode, newPassword);
@@ -580,7 +571,7 @@ public void run() {
                         }
                     };
                 }
-                handler.post(returnCallback);
+                CallbackExectorProvider.getExecutor().execute(returnCallback);
             }
         }).start();
     }
@@ -671,7 +662,6 @@ public void getSessionInBackground(final AuthenticationHandler callback) {
         new Thread(new Runnable() {
             @Override
             public void run() {
-                final Handler handler = new Handler(context.getMainLooper());
                 Runnable returnCallback;
                 try {
                     getCachedSession();
@@ -686,8 +676,8 @@ public void run() {
                         @Override
                         public void run() {
                             final AuthenticationContinuation authenticationContinuation = new AuthenticationContinuation(
-                                    cognitoUser, context,
-                                    AuthenticationContinuation.RUN_IN_BACKGROUND, callback);
+                                    cognitoUser, AuthenticationContinuation.RUN_IN_BACKGROUND,
+                                    callback);
                             callback.getAuthenticationDetails(authenticationContinuation,
                                     cognitoUser.getUserId());
                         }
@@ -700,7 +690,7 @@ public void run() {
                         }
                     };
                 }
-                handler.post(returnCallback);
+                CallbackExectorProvider.getExecutor().execute(returnCallback);
             }
         }).start();
     }
@@ -732,7 +722,6 @@ public void getSession(final AuthenticationHandler callback) {
         if (callback == null) {
             throw new InvalidParameterException("callback is null");
         }
-
         try {
             getCachedSession();
             callback.onSuccess(cipSession, null);
@@ -740,7 +729,7 @@ public void getSession(final AuthenticationHandler callback) {
             callback.onFailure(e);
         } catch (final CognitoNotAuthorizedException e) {
             final AuthenticationContinuation authenticationContinuation = new AuthenticationContinuation(
-                    this, context, AuthenticationContinuation.RUN_IN_CURRENT, callback);
+                    this, AuthenticationContinuation.RUN_IN_CURRENT, callback);
             callback.getAuthenticationDetails(authenticationContinuation, getUserId());
         } catch (final Exception e) {
             callback.onFailure(e);
@@ -877,7 +866,6 @@ public void changePasswordInBackground(final String oldUserPassword,
         new Thread(new Runnable() {
             @Override
             public void run() {
-                final Handler handler = new Handler(context.getMainLooper());
                 Runnable returnCallback;
                 try {
                     final CognitoUserSession session = user.getCachedSession();
@@ -896,7 +884,7 @@ public void run() {
                         }
                     };
                 }
-                handler.post(returnCallback);
+                CallbackExectorProvider.getExecutor().execute(returnCallback);
             }
         }).start();
     }
@@ -968,7 +956,6 @@ public void getDetailsInBackground(final GetDetailsHandler callback) {
         new Thread(new Runnable() {
             @Override
             public void run() {
-                final Handler handler = new Handler(context.getMainLooper());
                 Runnable returnCallback;
                 try {
                     final CognitoUserSession session = user.getCachedSession();
@@ -987,7 +974,7 @@ public void run() {
                         }
                     };
                 }
-                handler.post(returnCallback);
+                CallbackExectorProvider.getExecutor().execute(returnCallback);
             }
         }).start();
     }
@@ -1062,7 +1049,6 @@ public void getAttributeVerificationCodeInBackground(final String attributeName,
         new Thread(new Runnable() {
             @Override
             public void run() {
-                final Handler handler = new Handler(context.getMainLooper());
                 Runnable returnCallback;
                 try {
                     final CognitoUserSession session = user.getCachedSession();
@@ -1084,7 +1070,7 @@ public void run() {
                         }
                     };
                 }
-                handler.post(returnCallback);
+                CallbackExectorProvider.getExecutor().execute(returnCallback);
             }
         }).start();
     }
@@ -1170,7 +1156,6 @@ public void verifyAttributeInBackground(final String attributeName,
         new Thread(new Runnable() {
             @Override
             public void run() {
-                final Handler handler = new Handler(context.getMainLooper());
                 Runnable returnCallback;
                 try {
                     final CognitoUserSession session = user.getCachedSession();
@@ -1189,7 +1174,7 @@ public void run() {
                         }
                     };
                 }
-                handler.post(returnCallback);
+                CallbackExectorProvider.getExecutor().execute(returnCallback);
             }
         }).start();
     }
@@ -1262,7 +1247,6 @@ public void associateSoftwareTokenInBackground(final String sessionToken, final
         new Thread(new Runnable() {
             @Override
             public void run() {
-                final Handler handler = new Handler(context.getMainLooper());
                 Runnable returnCallback;
                 boolean useSessionToken;
                 try {
@@ -1283,14 +1267,14 @@ public void run() {
                         returnCallback = new Runnable() {
                             @Override
                             public void run() {
-                                callback.onVerify(new VerifyMfaContinuation(context, clientId, user, callback, parameters, true, nextSessionToken, VerifyMfaContinuation.RUN_IN_BACKGROUND));
+                                callback.onVerify(new VerifyMfaContinuation(clientId, user, callback, parameters, true, nextSessionToken, VerifyMfaContinuation.RUN_IN_BACKGROUND));
                             }
                         };
                     } else {
                         returnCallback = new Runnable() {
                             @Override
                             public void run() {
-                                callback.onVerify(new VerifyMfaContinuation(context, clientId, user, callback, parameters, false, nextSessionToken, VerifyMfaContinuation.RUN_IN_BACKGROUND));
+                                callback.onVerify(new VerifyMfaContinuation(clientId, user, callback, parameters, false, nextSessionToken, VerifyMfaContinuation.RUN_IN_BACKGROUND));
                             }
                         };
                     }
@@ -1302,7 +1286,7 @@ public void run() {
                         }
                     };
                 }
-                handler.post(returnCallback);
+                CallbackExectorProvider.getExecutor().execute(returnCallback);
             }
         }).start();
     }
@@ -1332,7 +1316,7 @@ public void associateSoftwareToken(final String sessionToken, final RegisterMfaH
             final Map<String, String> parameters = new HashMap<String, String>();
             parameters.put("type", CognitoServiceConstants.CHLG_TYPE_SOFTWARE_TOKEN_MFA);
             parameters.put("secretKey", result.getSecretCode());
-            callback.onVerify(new VerifyMfaContinuation(context, clientId, user, callback, parameters, useSessionToken, nextSessionToken, VerifyMfaContinuation.RUN_IN_CURRENT));
+            callback.onVerify(new VerifyMfaContinuation(clientId, user, callback, parameters, useSessionToken, nextSessionToken, VerifyMfaContinuation.RUN_IN_CURRENT));
         } catch (Exception e) {
             callback.onFailure(e);
         }
@@ -1396,7 +1380,6 @@ public void verifySoftwareTokenInBackground(
         new Thread(new Runnable() {
             @Override
             public void run() {
-                final Handler handler = new Handler(context.getMainLooper());
                 Runnable returnCallback;
                 try {
                     final CognitoUserSession cognitoTokens = user.getCachedSession();
@@ -1436,7 +1419,7 @@ public void run() {
                         }
                     };
                 }
-                handler.post(returnCallback);
+                CallbackExectorProvider.getExecutor().execute(returnCallback);
             }
         }).start();
     }
@@ -1548,7 +1531,6 @@ public void updateAttributesInBackground(final CognitoUserAttributes attributes,
         new Thread(new Runnable() {
             @Override
             public void run() {
-                final Handler handler = new Handler(context.getMainLooper());
                 Runnable returnCallback;
                 try {
                     final CognitoUserSession session = user.getCachedSession();
@@ -1578,7 +1560,7 @@ public void run() {
                         }
                     };
                 }
-                handler.post(returnCallback);
+                CallbackExectorProvider.getExecutor().execute(returnCallback);
             }
         }).start();
     }
@@ -1656,7 +1638,6 @@ public void deleteAttributesInBackground(final List<String> attributeNamesToDele
         new Thread(new Runnable() {
             @Override
             public void run() {
-                final Handler handler = new Handler(context.getMainLooper());
                 Runnable returnCallback;
                 try {
                     final CognitoUserSession session = user.getCachedSession();
@@ -1675,7 +1656,7 @@ public void run() {
                         }
                     };
                 }
-                handler.post(returnCallback);
+                CallbackExectorProvider.getExecutor().execute(returnCallback);
             }
         }).start();
     }
@@ -1764,7 +1745,6 @@ public void globalSignOutInBackground(final GenericHandler callback) {
         new Thread(new Runnable() {
             @Override
             public void run() {
-                final Handler handler = new Handler(context.getMainLooper());
                 Runnable returnCallback;
                 try {
                     final CognitoUserSession session = user.getCachedSession();
@@ -1784,7 +1764,7 @@ public void run() {
                         }
                     };
                 }
-                handler.post(returnCallback);
+                CallbackExectorProvider.getExecutor().execute(returnCallback);
             }
         }).start();
     }
@@ -1848,7 +1828,6 @@ public void deleteUserInBackground(final GenericHandler callback) {
         new Thread(new Runnable() {
             @Override
             public void run() {
-                final Handler handler = new Handler(context.getMainLooper());
                 Runnable returnCallback;
                 try {
                     final CognitoUserSession session = user.getCachedSession();
@@ -1867,7 +1846,7 @@ public void run() {
                         }
                     };
                 }
-                handler.post(returnCallback);
+                CallbackExectorProvider.getExecutor().execute(returnCallback);
             }
         }).start();
     }
@@ -1934,7 +1913,6 @@ public void setUserSettingsInBackground(final CognitoUserSettings cognitoUserSet
         new Thread(new Runnable() {
             @Override
             public void run() {
-                final Handler handler = new Handler(context.getMainLooper());
                 Runnable returnCallback;
                 try {
                     setUserSettingsInternal(cognitoUserSettings, session);
@@ -1952,7 +1930,7 @@ public void run() {
                         }
                     };
                 }
-                handler.post(returnCallback);
+                CallbackExectorProvider.getExecutor().execute(returnCallback);
             }
         }).start();
     }
@@ -2021,7 +1999,6 @@ public void setUserMfaSettingsInBackground(final List<CognitoMfaSettings> mfaSet
         new Thread(new Runnable() {
             @Override
             public void run() {
-                final Handler handler = new Handler(context.getMainLooper());
                 Runnable returnCallback;
                 try {
                     setUserMfaSettingsInternal(mfaSettings, session);
@@ -2039,7 +2016,7 @@ public void run() {
                         }
                     };
                 }
-                handler.post(returnCallback);
+                CallbackExectorProvider.getExecutor().execute(returnCallback);
             }
         }).start();
     }
@@ -2084,8 +2061,8 @@ private void setUserMfaSettingsInternal(List<CognitoMfaSettings> mfaSettings, Co
     private void clearCachedTokens() {
         try {
             // Clear all cached tokens.
-            final SharedPreferences csiCachedTokens = context
-                    .getSharedPreferences("CognitoIdentityProviderCache", 0);
+            final Storage csiCachedTokens =
+                    StorageProvider.get(COGNITO_IDENTITY_PROVIDER_CACHE_STORAGE_NAME);
 
             // Format "key" strings
             final String csiIdTokenKey = String.format("CognitoIdentityProvider.%s.%s.idToken",
@@ -2095,10 +2072,9 @@ private void clearCachedTokens() {
             final String csiRefreshTokenKey = String
                     .format("CognitoIdentityProvider.%s.%s.refreshToken", clientId, userId);
 
-            final SharedPreferences.Editor cacheEdit = csiCachedTokens.edit();
-            cacheEdit.remove(csiIdTokenKey);
-            cacheEdit.remove(csiAccessTokenKey);
-            cacheEdit.remove(csiRefreshTokenKey).apply();
+            csiCachedTokens.remove(csiIdTokenKey);
+            csiCachedTokens.remove(csiAccessTokenKey);
+            csiCachedTokens.remove(csiRefreshTokenKey);
         } catch (final Exception e) {
             // Logging exception, this is not a fatal error
             LOGGER.error("Error while deleting from SharedPreferences", e);
@@ -2114,8 +2090,8 @@ private CognitoUserSession readCachedTokens() {
         CognitoUserSession userSession = new CognitoUserSession(null, null, null);
 
         try {
-            final SharedPreferences csiCachedTokens = context
-                    .getSharedPreferences("CognitoIdentityProviderCache", 0);
+            final Storage csiCachedTokens =
+                    StorageProvider.get(COGNITO_IDENTITY_PROVIDER_CACHE_STORAGE_NAME);
 
             // Format "key" strings
             final String csiIdTokenKey = "CognitoIdentityProvider." + clientId + "." + userId
@@ -2127,11 +2103,11 @@ private CognitoUserSession readCachedTokens() {
 
             if (csiCachedTokens.contains(csiIdTokenKey)) {
                 final CognitoIdToken csiCachedIdToken = new CognitoIdToken(
-                        csiCachedTokens.getString(csiIdTokenKey, null));
+                        csiCachedTokens.getValue(csiIdTokenKey, null));
                 final CognitoAccessToken csiCachedAccessToken = new CognitoAccessToken(
-                        csiCachedTokens.getString(csiAccessTokenKey, null));
+                        csiCachedTokens.getValue(csiAccessTokenKey, null));
                 final CognitoRefreshToken csiCachedRefreshToken = new CognitoRefreshToken(
-                        csiCachedTokens.getString(csiRefreshTokenKey, null));
+                        csiCachedTokens.getValue(csiRefreshTokenKey, null));
                 userSession = new CognitoUserSession(csiCachedIdToken, csiCachedAccessToken,
                         csiCachedRefreshToken);
             }
@@ -2149,8 +2125,8 @@ private CognitoUserSession readCachedTokens() {
      */
     private void cacheTokens(CognitoUserSession session) {
         try {
-            final SharedPreferences csiCachedTokens = context
-                    .getSharedPreferences("CognitoIdentityProviderCache", 0);
+            final Storage csiCachedTokens =
+                    StorageProvider.get(COGNITO_IDENTITY_PROVIDER_CACHE_STORAGE_NAME);
 
             final String csiUserPoolId = pool.getUserPoolId();
 
@@ -2163,13 +2139,10 @@ private void cacheTokens(CognitoUserSession session) {
                     + ".refreshToken";
             final String csiLastUserKey = "CognitoIdentityProvider." + clientId + ".LastAuthUser";
 
-            // Store the data in Shared Preferences
-            final SharedPreferences.Editor cacheEdit = csiCachedTokens.edit();
-            cacheEdit.putString(csiIdTokenKey, session.getIdToken().getJWTToken());
-            cacheEdit.putString(csiAccessTokenKey, session.getAccessToken().getJWTToken());
-            cacheEdit.putString(csiRefreshTokenKey, session.getRefreshToken().getToken());
-            cacheEdit.putString(csiLastUserKey, userId).apply();
-
+            csiCachedTokens.put(csiIdTokenKey, session.getIdToken().getJWTToken());
+            csiCachedTokens.put(csiAccessTokenKey, session.getAccessToken().getJWTToken());
+            csiCachedTokens.put(csiRefreshTokenKey, session.getRefreshToken().getToken());
+            csiCachedTokens.put(csiLastUserKey, userId);
         } catch (final Exception e) {
             // Logging exception, this is not a fatal error
             LOGGER.error("Error while writing to SharedPreferences.", e);
@@ -2265,13 +2238,12 @@ public Runnable respondToChallenge(final RespondToAuthChallengeRequest challenge
         } catch (final ResourceNotFoundException rna) {
             final CognitoUser cognitoUser = this;
             if (rna.getMessage().contains("Device")) {
-                CognitoDeviceHelper.clearCachedDevice(usernameInternal, pool.getUserPoolId(),
-                        context);
+                CognitoDeviceHelper.clearCachedDevice(usernameInternal, pool.getUserPoolId());
                 return new Runnable() {
                     @Override
                     public void run() {
                         final AuthenticationContinuation authenticationContinuation = new AuthenticationContinuation(
-                                cognitoUser, context, runInBackground, callback);
+                                cognitoUser, runInBackground, callback);
                         callback.getAuthenticationDetails(authenticationContinuation,
                                 cognitoUser.getUserId());
                     }
@@ -2328,13 +2300,12 @@ private Runnable startWithUserSrpAuth(final AuthenticationDetails authentication
         } catch (final ResourceNotFoundException rna) {
             final CognitoUser cognitoUser = this;
             if (rna.getMessage().contains("Device")) {
-                CognitoDeviceHelper.clearCachedDevice(usernameInternal, pool.getUserPoolId(),
-                        context);
+                CognitoDeviceHelper.clearCachedDevice(usernameInternal, pool.getUserPoolId());
                 return new Runnable() {
                     @Override
                     public void run() {
                         final AuthenticationContinuation authenticationContinuation = new AuthenticationContinuation(
-                                cognitoUser, context, runInBackground, callback);
+                                cognitoUser, runInBackground, callback);
                         callback.getAuthenticationDetails(authenticationContinuation,
                                 cognitoUser.getUserId());
                     }
@@ -2443,8 +2414,7 @@ public void run() {
                 if (confirmDeviceResult != null
                         && confirmDeviceResult.isUserConfirmationNecessary()) {
                     final CognitoDevice newDevice = new CognitoDevice(
-                            newDeviceMetadata.getDeviceKey(), null, null, null, null, cognitoUser,
-                            context);
+                            newDeviceMetadata.getDeviceKey(), null, null, null, null, cognitoUser);
                     nextTask = new Runnable() {
                         @Override
                         public void run() {
@@ -2465,7 +2435,7 @@ public void run() {
         } else if (CognitoServiceConstants.CHLG_TYPE_SMS_MFA.equals(challengeName)
                 || CognitoServiceConstants.CHLG_TYPE_SOFTWARE_TOKEN_MFA.equals(challengeName)) {
             final MultiFactorAuthenticationContinuation multiFactorAuthenticationContinuation = new MultiFactorAuthenticationContinuation(
-                    cognitoUser, context, challenge, runInBackground, callback);
+                    cognitoUser, challenge, runInBackground, callback);
             nextTask = new Runnable() {
                 @Override
                 public void run() {
@@ -2474,7 +2444,7 @@ public void run() {
             };
         } else if (CognitoServiceConstants.CHLG_TYPE_SELECT_MFA_TYPE.equals(challengeName)) {
             final ChooseMfaContinuation continuation = new ChooseMfaContinuation(
-                    cognitoUser, context, usernameInternal, clientId, secretHash, challenge, runInBackground, callback);
+                    cognitoUser, usernameInternal, clientId, secretHash, challenge, runInBackground, callback);
             nextTask = new Runnable() {
                 @Override
                 public void run() {
@@ -2483,7 +2453,7 @@ public void run() {
             };
         } else if (CognitoServiceConstants.CHLG_TYPE_MFA_SETUP.equals(challengeName)) {
             final RegisterMfaContinuation continuation = new RegisterMfaContinuation(
-                    cognitoUser, context, usernameInternal, clientId, secretHash, challenge, runInBackground, callback);
+                    cognitoUser, usernameInternal, clientId, secretHash, challenge, runInBackground, callback);
             nextTask = new Runnable() {
                 @Override
                 public void run() {
@@ -2494,7 +2464,7 @@ public void run() {
             nextTask = deviceSrpAuthentication(challenge, callback, runInBackground);
         } else if (CognitoServiceConstants.CHLG_TYPE_NEW_PASSWORD_REQUIRED.equals(challengeName)) {
             final NewPasswordContinuation newPasswordContinuation = new NewPasswordContinuation(
-                    cognitoUser, context, usernameInternal, clientId, secretHash, challenge,
+                    cognitoUser, usernameInternal, clientId, secretHash, challenge,
                     runInBackground, callback);
             nextTask = new Runnable() {
                 @Override
@@ -2504,8 +2474,8 @@ public void run() {
             };
         } else {
             final ChallengeContinuation challengeContinuation = new ChallengeContinuation(
-                    cognitoUser, context, usernameInternal, clientId, secretHash, challenge,
-                    runInBackground, callback);
+                    cognitoUser, usernameInternal, clientId, secretHash, challenge, runInBackground,
+                    callback);
             nextTask = new Runnable() {
                 @Override
                 public void run() {
@@ -2563,9 +2533,9 @@ public void run() {
     private Runnable deviceSrpAuthentication(final RespondToAuthChallengeResult challenge,
             final AuthenticationHandler callback, final boolean runInBackground) {
         final String deviceSecret = CognitoDeviceHelper.getDeviceSecret(usernameInternal,
-                pool.getUserPoolId(), context);
+                pool.getUserPoolId());
         final String deviceGroupKey = CognitoDeviceHelper.getDeviceGroupKey(usernameInternal,
-                pool.getUserPoolId(), context);
+                pool.getUserPoolId());
         final AuthenticationHelper authenticationHelper = new AuthenticationHelper(deviceGroupKey);
         final RespondToAuthChallengeRequest devicesAuthRequest = initiateDevicesAuthRequest(
                 authenticationHelper);
@@ -2585,12 +2555,12 @@ private Runnable deviceSrpAuthentication(final RespondToAuthChallengeResult chal
             }
         } catch (final NotAuthorizedException na) {
             final CognitoUser cognitoUser = this;
-            CognitoDeviceHelper.clearCachedDevice(usernameInternal, pool.getUserPoolId(), context);
+            CognitoDeviceHelper.clearCachedDevice(usernameInternal, pool.getUserPoolId());
             return new Runnable() {
                 @Override
                 public void run() {
                     final AuthenticationContinuation authenticationContinuation = new AuthenticationContinuation(
-                            cognitoUser, context, runInBackground, callback);
+                            cognitoUser, runInBackground, callback);
                     callback.getAuthenticationDetails(authenticationContinuation,
                             cognitoUser.getUserId());
                 }
@@ -2632,7 +2602,7 @@ private InitiateAuthRequest initiateUserSrpAuthRequest(
         if (deviceKey == null) {
             initiateAuthRequest.addAuthParametersEntry(
                     CognitoServiceConstants.AUTH_PARAM_DEVICE_KEY, CognitoDeviceHelper.getDeviceKey(
-                            authenticationDetails.getUserId(), pool.getUserPoolId(), context));
+                            authenticationDetails.getUserId(), pool.getUserPoolId()));
         } else {
             initiateAuthRequest.addAuthParametersEntry(
                     CognitoServiceConstants.AUTH_PARAM_DEVICE_KEY, deviceKey);
@@ -2724,11 +2694,11 @@ private InitiateAuthRequest initiateRefreshTokenAuthRequest(CognitoUserSession c
                 currSession.getRefreshToken().getToken());
         if (deviceKey == null) {
             if (usernameInternal != null) {
-                deviceKey = CognitoDeviceHelper.getDeviceKey(usernameInternal, pool.getUserPoolId(),
-                        context);
+                deviceKey = CognitoDeviceHelper.getDeviceKey(usernameInternal,
+                        pool.getUserPoolId());
             } else {
                 deviceKey = CognitoDeviceHelper.getDeviceKey(currSession.getUsername(), 
-                        pool.getUserPoolId(), context);
+                        pool.getUserPoolId());
             }
         }
         initiateAuthRequest.addAuthParametersEntry(CognitoServiceConstants.AUTH_PARAM_DEVICE_KEY,
@@ -2765,8 +2735,7 @@ private RespondToAuthChallengeRequest userSrpAuthRequest(InitiateAuthResult chal
                 .get(CognitoServiceConstants.CHLG_PARAM_USER_ID_FOR_SRP);
         this.usernameInternal = challenge.getChallengeParameters()
                 .get(CognitoServiceConstants.CHLG_PARAM_USERNAME);
-        this.deviceKey = CognitoDeviceHelper.getDeviceKey(usernameInternal, pool.getUserPoolId(),
-                context);
+        this.deviceKey = CognitoDeviceHelper.getDeviceKey(usernameInternal, pool.getUserPoolId());
         secretHash = CognitoSecretHash.getSecretHash(usernameInternal, clientId, clientSecret);
 
         final BigInteger srpB = new BigInteger(challenge.getChallengeParameters().get("SRP_B"), 16);
@@ -2921,14 +2890,13 @@ public void listDevicesInBackground(final int limit, final String paginationToke
         new Thread(new Runnable() {
             @Override
             public void run() {
-                final Handler handler = new Handler(context.getMainLooper());
                 Runnable returnCallback;
                 try {
                     final ListDevicesResult listDevicesResult = listDevicesInternal(
                             user.getCachedSession(), limit, paginationToken);
                     final List<CognitoDevice> devicesList = new ArrayList<CognitoDevice>();
                     for (final DeviceType device : listDevicesResult.getDevices()) {
-                        devicesList.add(new CognitoDevice(device, user, context));
+                        devicesList.add(new CognitoDevice(device, user));
                     }
                     returnCallback = new Runnable() {
                         @Override
@@ -2945,7 +2913,7 @@ public void run() {
                         }
                     };
                 }
-                handler.post(returnCallback);
+                CallbackExectorProvider.getExecutor().execute(returnCallback);
             }
         }).start();
     }
@@ -2969,7 +2937,7 @@ public void listDevices(int limit, String paginationToken, DevicesHandler callba
                     limit, paginationToken);
             final List<CognitoDevice> devicesList = new ArrayList<CognitoDevice>();
             for (final DeviceType device : listDevicesResult.getDevices()) {
-                devicesList.add(new CognitoDevice(device, this, context));
+                devicesList.add(new CognitoDevice(device, this));
             }
             callback.onSuccess(devicesList);
         } catch (final Exception e) {
@@ -2986,19 +2954,18 @@ public void listDevices(int limit, String paginationToken, DevicesHandler callba
     public CognitoDevice thisDevice() {
         if (deviceKey == null) {
             if (usernameInternal != null) {
-                deviceKey = CognitoDeviceHelper.getDeviceKey(usernameInternal, pool.getUserPoolId(),
-                        context);
+                deviceKey = CognitoDeviceHelper.getDeviceKey(usernameInternal, pool.getUserPoolId());
             } else if (userId != null) {
-                deviceKey = CognitoDeviceHelper.getDeviceKey(userId, pool.getUserPoolId(), context);
+                deviceKey = CognitoDeviceHelper.getDeviceKey(userId, pool.getUserPoolId());
                 if (deviceKey == null) {
                     CognitoUserSession currSession = this.readCachedTokens();
                     deviceKey = CognitoDeviceHelper.getDeviceKey(currSession.getUsername(), 
-                            this.pool.getUserPoolId(), this.context);
+                            this.pool.getUserPoolId());
                 }
             }
         }
         if (deviceKey != null) {
-            return new CognitoDevice(deviceKey, null, null, null, null, this, context);
+            return new CognitoDevice(deviceKey, null, null, null, null, this);
         } else {
             return null;
         }
@@ -3030,11 +2997,11 @@ private ConfirmDeviceResult confirmDevice(final NewDeviceMetadataType deviceMeta
             return null;
         }
         CognitoDeviceHelper.cacheDeviceKey(usernameInternal, pool.getUserPoolId(),
-                deviceMetadata.getDeviceKey(), context);
+                deviceMetadata.getDeviceKey());
         CognitoDeviceHelper.cacheDeviceVerifier(usernameInternal, pool.getUserPoolId(),
-                deviceSrpVerifiers.get("secret"), context);
+                deviceSrpVerifiers.get("secret"));
         CognitoDeviceHelper.cacheDeviceGroupKey(usernameInternal, pool.getUserPoolId(),
-                deviceMetadata.getDeviceGroupKey(), context);
+                deviceMetadata.getDeviceGroupKey());
         return confirmDeviceResult;
     }
 
@@ -3114,8 +3081,7 @@ private void updateInternalUsername(Map<String, String> challengeParameters) {
                     .containsKey(CognitoServiceConstants.CHLG_PARAM_USERNAME)) {
                 usernameInternal = challengeParameters
                         .get(CognitoServiceConstants.CHLG_PARAM_USERNAME);
-                deviceKey = CognitoDeviceHelper.getDeviceKey(usernameInternal, pool.getUserPoolId(),
-                        context);
+                deviceKey = CognitoDeviceHelper.getDeviceKey(usernameInternal, pool.getUserPoolId());
                 if (secretHash == null) {
                     secretHash = CognitoSecretHash.getSecretHash(usernameInternal, clientId,
                             clientSecret);
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/CognitoUserPool.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/CognitoUserPool.java
index b962bae544..339e2972a2 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/CognitoUserPool.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/CognitoUserPool.java
@@ -17,13 +17,12 @@
 
 package com.amazonaws.mobileconnectors.cognitoidentityprovider;
 
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.os.Handler;
-
 import com.amazonaws.ClientConfiguration;
 import com.amazonaws.auth.AnonymousAWSCredentials;
 import com.amazonaws.cognito.clientcontext.data.UserContextDataProvider;
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.extra.execution.CallbackExectorProvider;
+import com.amazonaws.extra.persistence.StorageProvider;
+import com.amazonaws.extra.persistence.Storage;
 import com.amazonaws.mobile.config.AWSConfiguration;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.handlers.AuthenticationHandler;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.handlers.SignUpHandler;
@@ -83,11 +82,6 @@
      */
     private final String clientSecret;
 
-    /**
-     * Application context.
-     */
-    private final Context context;
-
     /**
      * CIP low-level client.
      */
@@ -109,12 +103,11 @@
     private boolean advancedSecurityDataCollectionFlag = true;
 
     /**
-     * @deprecated use {@link CognitoUserPool#CognitoUserPool(Context, String, String, String, ClientConfiguration, Regions)}
+     * @deprecated use {@link CognitoUserPool#CognitoUserPool(String, String, String, ClientConfiguration, Regions)}
      * <p>
      * Constructs a user-pool with a developer specified {@link ClientConfiguration} and default AWS region {@link Regions}.
      * Region defaults to US-EAST-1.
      * </p>
-     * @param context               REQUIRED: Android application context
      * @param userPoolId            REQUIRED: User-pool-Id of the user-pool
      * @param clientId              REQUIRED: Client-Id generated for this app and user-pool at the
      *                              Cognito Identity Provider developer console
@@ -125,18 +118,17 @@
      *                              retry counts, etc.).
      */
     @Deprecated()
-    public CognitoUserPool(Context context, String userPoolId, String clientId, String clientSecret,
+    public CognitoUserPool(String userPoolId, String clientId, String clientSecret,
                            ClientConfiguration clientConfiguration) {
-        this(context, userPoolId, clientId, clientSecret, clientConfiguration, Regions.US_EAST_1);
+        this(userPoolId, clientId, clientSecret, clientConfiguration, Regions.US_EAST_1);
     }
 
     /**
-     * @deprecated use {@link CognitoUserPool#CognitoUserPool(Context, String, String, String, ClientConfiguration, Regions)}
+     * @deprecated use {@link CognitoUserPool#CognitoUserPool(String, String, String, ClientConfiguration, Regions)}
      * <p>
      * Constructs a user-pool with default {@link ClientConfiguration} and default AWS region {@link Regions}.
      * Region defaults to US-EAST-1.
      * </p>
-     * @param context               REQUIRED: Android application context.
      * @param userPoolId            REQUIRED: User-pool-Id of the user-pool.
      * @param clientId              REQUIRED: Client-Id generated for this app and user-pool at the
      *                              Cognito Identity Provider developer console.
@@ -144,24 +136,22 @@ public CognitoUserPool(Context context, String userPoolId, String clientId, Stri
      *                              the Cognito Identity Provider developer console.
      */
     @Deprecated()
-    public CognitoUserPool(Context context, String userPoolId, String clientId, String clientSecret) {
-        this(context, userPoolId, clientId, clientSecret, new ClientConfiguration(), Regions.US_EAST_1);
+    public CognitoUserPool(String userPoolId, String clientId, String clientSecret) {
+        this(userPoolId, clientId, clientSecret, new ClientConfiguration(), Regions.US_EAST_1);
     }
 
     /**
      * Constructs a user-pool with default {@link ClientConfiguration}.
      *
-     * @param context               REQUIRED: Android application context.
      * @param awsConfiguration      REQUIRED: Holds the configuration read from awsconfiguration.json
      */
-    public CognitoUserPool(Context context, AWSConfiguration awsConfiguration) {
+    public CognitoUserPool(AWSConfiguration awsConfiguration) {
         try {
             final JSONObject userPoolConfiguration = awsConfiguration.optJsonObject("CognitoUserPool");
-            this.context = context;
             this.userPoolId = userPoolConfiguration.getString("PoolId");
             this.clientId = userPoolConfiguration.getString("AppClientId");
             this.clientSecret = userPoolConfiguration.optString("AppClientSecret");
-            this.pinpointEndpointId = CognitoPinpointSharedContext.getPinpointEndpoint(context, userPoolConfiguration.optString("PinpointAppId"));
+            this.pinpointEndpointId = CognitoPinpointSharedContext.getPinpointEndpoint(userPoolConfiguration.optString("PinpointAppId"));
 
             final ClientConfiguration clientConfig = new ClientConfiguration();
             clientConfig.setUserAgent(awsConfiguration.getUserAgent());
@@ -177,7 +167,6 @@ public CognitoUserPool(Context context, AWSConfiguration awsConfiguration) {
     /**
      * Constructs a user-pool with default {@link ClientConfiguration}.
      *
-     * @param context               REQUIRED: Android application context.
      * @param userPoolId            REQUIRED: User-pool-Id of the user-pool.
      * @param clientId              REQUIRED: Client-Id generated for this app and user-pool at the
      *                              Cognito Identity Provider developer console.
@@ -185,14 +174,13 @@ public CognitoUserPool(Context context, AWSConfiguration awsConfiguration) {
      *                              the Cognito Identity Provider developer console.
      * @param region                REQUIRED: AWS region {@link Regions}.
      */
-    public CognitoUserPool(Context context, String userPoolId, String clientId, String clientSecret, Regions region) {
-        this(context, userPoolId, clientId, clientSecret, new ClientConfiguration(), region);
+    public CognitoUserPool(String userPoolId, String clientId, String clientSecret, Regions region) {
+        this(userPoolId, clientId, clientSecret, new ClientConfiguration(), region);
     }
     
     /**
      * Constructs a user-pool with default {@link ClientConfiguration}.
      *
-     * @param context               REQUIRED: Android application context.
      * @param userPoolId            REQUIRED: User-pool-Id of the user-pool.
      * @param clientId              REQUIRED: Client-Id generated for this app and user-pool at the
      *                              Cognito Identity Provider developer console.
@@ -201,14 +189,13 @@ public CognitoUserPool(Context context, String userPoolId, String clientId, Stri
      * @param region                REQUIRED: AWS region {@link Regions}.
      * @param pinpointAppId         REQUIRED: AWS Pinpoint App Id for analytics.
      */
-    public CognitoUserPool(Context context, String userPoolId, String clientId, String clientSecret, Regions region, String pinpointAppId) {
-        this(context, userPoolId, clientId, clientSecret, new ClientConfiguration(), region, pinpointAppId);
+    public CognitoUserPool(String userPoolId, String clientId, String clientSecret, Regions region, String pinpointAppId) {
+        this(userPoolId, clientId, clientSecret, new ClientConfiguration(), region, pinpointAppId);
     }
 
     /**
      * Constructs a user-pool.
      *
-     * @param context               REQUIRED: Android application context.
      * @param userPoolId            REQUIRED: User-pool-Id of the user-pool.
      * @param clientId              REQUIRED: Client-Id generated for this app and user-pool at the
      *                              Cognito Identity Provider developer console.
@@ -219,14 +206,13 @@ public CognitoUserPool(Context context, String userPoolId, String clientId, Stri
      *                              retry counts, etc.).
      * @param region                REQUIRED: AWS region {@link Regions}.
      */
-    public CognitoUserPool(Context context, String userPoolId, String clientId, String clientSecret, ClientConfiguration clientConfiguration, Regions region) {
-        this(context, userPoolId, clientId, clientSecret, clientConfiguration, region, null);
+    public CognitoUserPool(String userPoolId, String clientId, String clientSecret, ClientConfiguration clientConfiguration, Regions region) {
+        this(userPoolId, clientId, clientSecret, clientConfiguration, region, null);
     }
     
     /**
      * Constructs a user-pool with integrated Pinpoint analytics.
      *
-     * @param context               REQUIRED: Android application context.
      * @param userPoolId            REQUIRED: User-pool-Id of the user-pool.
      * @param clientId              REQUIRED: Client-Id generated for this app and user-pool at the
      *                              Cognito Identity Provider developer console.
@@ -238,21 +224,19 @@ public CognitoUserPool(Context context, String userPoolId, String clientId, Stri
      * @param region                REQUIRED: AWS region {@link Regions}.
      * @param pinpointAppId         REQUIRED: AWS Pinpoint App Id for analytics.
      */
-    public CognitoUserPool(Context context, String userPoolId, String clientId, String clientSecret, ClientConfiguration clientConfiguration, Regions region, String pinpointAppId) {
-        this.context = context;
+    public CognitoUserPool(String userPoolId, String clientId, String clientSecret, ClientConfiguration clientConfiguration, Regions region, String pinpointAppId) {
         this.userPoolId = userPoolId;
         this.clientId = clientId;
         this.clientSecret = clientSecret;
         this.client = new AmazonCognitoIdentityProviderClient(new AnonymousAWSCredentials(), clientConfiguration);
         this.client.setRegion(com.amazonaws.regions.Region.getRegion(region));
-        this.pinpointEndpointId = CognitoPinpointSharedContext.getPinpointEndpoint(context, pinpointAppId);
+        this.pinpointEndpointId = CognitoPinpointSharedContext.getPinpointEndpoint(pinpointAppId);
     }
 
 
     /**
      * Constructs a user-pool with default {@link ClientConfiguration}.
      *
-     * @param context               REQUIRED: Android application context.
      * @param userPoolId            REQUIRED: User-pool-Id of the user-pool.
      * @param clientId              REQUIRED: Client-Id generated for this app and user-pool at the
      *                              Cognito Identity Provider developer console.
@@ -260,14 +244,13 @@ public CognitoUserPool(Context context, String userPoolId, String clientId, Stri
      *                              the Cognito Identity Provider developer console.
      * @param client                REQUIRED: AWS low-level Cognito Identity Provider Client.
      */
-    public CognitoUserPool(Context context, String userPoolId, String clientId, String clientSecret, AmazonCognitoIdentityProvider client) {
-        this(context, userPoolId, clientId, clientSecret, client, null);
+    public CognitoUserPool(String userPoolId, String clientId, String clientSecret, AmazonCognitoIdentityProvider client) {
+        this(userPoolId, clientId, clientSecret, client, null);
     }
     
     /**
      * Constructs a user-pool with default {@link ClientConfiguration} and integrated analytics.
      *
-     * @param context               REQUIRED: Android application context.
      * @param userPoolId            REQUIRED: User-pool-Id of the user-pool.
      * @param clientId              REQUIRED: Client-Id generated for this app and user-pool at the
      *                              Cognito Identity Provider developer console.
@@ -276,13 +259,12 @@ public CognitoUserPool(Context context, String userPoolId, String clientId, Stri
      * @param client                REQUIRED: AWS low-level Cognito Identity Provider Client.
      * @param pinpointAppId         REQUIRED: AWS Pinpoint App Id for analytics.
      */
-    public CognitoUserPool(Context context, String userPoolId, String clientId, String clientSecret, AmazonCognitoIdentityProvider client, String pinpointAppId) {
-        this.context = context;
+    public CognitoUserPool(String userPoolId, String clientId, String clientSecret, AmazonCognitoIdentityProvider client, String pinpointAppId) {
         this.userPoolId = userPoolId;
         this.clientId = clientId;
         this.clientSecret = clientSecret;
         this.client = client;
-        this.pinpointEndpointId = CognitoPinpointSharedContext.getPinpointEndpoint(context, pinpointAppId);
+        this.pinpointEndpointId = CognitoPinpointSharedContext.getPinpointEndpoint(pinpointAppId);
     }
 
     /**
@@ -330,7 +312,6 @@ public void signUpInBackground(final String userId, final String password,
         new Thread(new Runnable() {
             @Override
             public void run() {
-                final Handler handler = new Handler(context.getMainLooper());
                 Runnable returnCallback;
                 try {
                     final SignUpResult signUpResult = signUpInternal(userId, password,
@@ -352,7 +333,7 @@ public void run() {
                         }
                     };
                 }
-                handler.post(returnCallback);
+                CallbackExectorProvider.getExecutor().execute(returnCallback);
             }
         }).start();
     }
@@ -439,13 +420,15 @@ private SignUpResult signUpInternal(String userId, String password,
      * @return An instance of the {@link CognitoUser} for last authenticated, cached on this device
      */
     public CognitoUser getCurrentUser() {
-        final SharedPreferences csiCachedTokens = context
-                .getSharedPreferences("CognitoIdentityProviderCache", 0);
+        final Storage csiCachedTokens =
+                StorageProvider.get(CognitoUser.COGNITO_IDENTITY_PROVIDER_CACHE_STORAGE_NAME);
 
         final String csiLastUserKey = "CognitoIdentityProvider." + clientId + ".LastAuthUser";
+        String userId = csiCachedTokens.getValue(csiLastUserKey, null);
 
-        if (csiCachedTokens.contains(csiLastUserKey)) {
-            return getUser(csiCachedTokens.getString(csiLastUserKey, null));
+        boolean isUserId = userId != null;
+        if (isUserId) {
+            return getUser(userId);
         } else {
             return getUser();
         }
@@ -457,7 +440,7 @@ public CognitoUser getCurrentUser() {
      * @return {@link CognitoUser}.
      */
     public CognitoUser getUser() {
-        return new CognitoUser(this, null, clientId, clientSecret, null, client, context);
+        return new CognitoUser(this, null, clientId, clientSecret, null, client);
     }
 
     /**
@@ -481,8 +464,7 @@ public CognitoUser getUser(String userId) {
         }
 
         return new CognitoUser(this, userId, clientId, clientSecret,
-                CognitoSecretHash.getSecretHash(userId, clientId, clientSecret),
-                client, context);
+                CognitoSecretHash.getSecretHash(userId, clientId, clientSecret), client);
     }
 
     /**
@@ -502,7 +484,7 @@ protected UserContextDataType getUserContextData(String userId) {
         UserContextDataType contextData = null;
         if (this.advancedSecurityDataCollectionFlag) {
             UserContextDataProvider provider = UserContextDataProvider.getInstance();
-            String encodedData = provider.getEncodedContextData(context, userId, this.getUserPoolId(), clientId);
+            String encodedData = provider.getEncodedContextData(userId, this.getUserPoolId(), clientId);
 
             contextData = new UserContextDataType();
             contextData.setEncodedData(encodedData);
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/AuthenticationContinuation.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/AuthenticationContinuation.java
index 06b140da54..bf86054ff7 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/AuthenticationContinuation.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/AuthenticationContinuation.java
@@ -17,9 +17,7 @@
 
 package com.amazonaws.mobileconnectors.cognitoidentityprovider.continuations;
 
-import android.content.Context;
-import android.os.Handler;
-
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.extra.execution.CallbackExectorProvider;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.handlers.AuthenticationHandler;
 
@@ -41,7 +39,6 @@
 
     // Data required to continue with the authentication process.
     private final CognitoUser user;
-    private final Context context;
     private final AuthenticationHandler callback;
     private final boolean runInBackground;
 
@@ -58,16 +55,13 @@
      * Constructs a new continuation in the authentication process.
      *
      * @param user                  REQUIRED: Reference to the {@link CognitoUser} object.
-     * @param context               REQUIRED: Application context to manage threads.
      * @param runInBackground       REQUIRED: Represents where this continuation has to run.
      * @param callback              REQUIRED: Callback to interact with the app.
      */
     public AuthenticationContinuation(CognitoUser user,
-                                      Context context,
                                       boolean runInBackground,
                                       AuthenticationHandler callback) {
         this.user = user;
-        this.context = context;
         this.runInBackground = runInBackground;
         this.callback = callback;
     }
@@ -94,7 +88,6 @@ public void continueTask() {
             new Thread(new Runnable() {
                 @Override
                 public void run() {
-                    final Handler handler = new Handler(context.getMainLooper());
                     Runnable nextStep;
                     try {
                         nextStep = user.initiateUserAuthentication(authenticationDetails, callback, RUN_IN_BACKGROUND);
@@ -106,7 +99,7 @@ public void run() {
                             }
                         };
                     }
-                    handler.post(nextStep);
+                    CallbackExectorProvider.getExecutor().execute(nextStep);
                 }
             }).start();
         } else {
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/ChallengeContinuation.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/ChallengeContinuation.java
index 5dd5af301b..8db984ae58 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/ChallengeContinuation.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/ChallengeContinuation.java
@@ -17,9 +17,7 @@
 
 package com.amazonaws.mobileconnectors.cognitoidentityprovider.continuations;
 
-import android.content.Context;
-import android.os.Handler;
-
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.extra.execution.CallbackExectorProvider;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.handlers.AuthenticationHandler;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.util.CognitoServiceConstants;
@@ -46,7 +44,6 @@
     public static final boolean RUN_IN_CURRENT = false;
 
     private final RespondToAuthChallengeResult challengeResult;
-    private final Context context;
     private final String clientId;
     private final String secretHash;
     private final CognitoUser user;
@@ -59,7 +56,6 @@
      * Constructs a continuation for a challenge to be presented to the user.
      *  
      * @param user REQUIRED: Reference to the user being authenticated. 
-     * @param context REQUIRED: Android application context.
      * @param username REQUIRED: Username used for this auth attempt.
      * @param clientId REQUIRED: Cognito App Id 
      * @param secretHash REQUIRED: Hash of the App Secret 
@@ -69,7 +65,6 @@
      * @param callback REQUIRED: Reference to the callback handler. 
      */
     public ChallengeContinuation(CognitoUser user,
-                                 Context context,
                                  String username,
                                  String clientId,
                                  String secretHash,
@@ -77,7 +72,6 @@ public ChallengeContinuation(CognitoUser user,
                                  boolean runInBackground,
                                  AuthenticationHandler callback) {
         this.challengeResult = challengeResult;
-        this.context = context;
         this.clientId = clientId;
         this.secretHash = secretHash;
         this.user = user;
@@ -144,7 +138,6 @@ public void continueTask() {
             new Thread(new Runnable() {
                 @Override
                 public void run() {
-                    final Handler handler = new Handler(context.getMainLooper());
                     Runnable nextStep;
                     try {
                         nextStep = user.respondToChallenge(respondToAuthChallengeRequest, callback, RUN_IN_BACKGROUND);
@@ -156,7 +149,7 @@ public void run() {
                             }
                         };
                     }
-                    handler.post(nextStep);
+                    CallbackExectorProvider.getExecutor().execute(nextStep);
                 }
             }).start();
         } else {
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/ChooseMfaContinuation.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/ChooseMfaContinuation.java
index 280e3f3053..2ebecc6ab9 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/ChooseMfaContinuation.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/ChooseMfaContinuation.java
@@ -1,7 +1,5 @@
 package com.amazonaws.mobileconnectors.cognitoidentityprovider.continuations;
 
-import android.content.Context;
-
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.exceptions.CognitoParameterInvalidException;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.handlers.AuthenticationHandler;
@@ -28,7 +26,6 @@
     /**
      * Constructs a new continuation for multiple user MFA's.
      * @param user                  REQUIRED: Reference to the {@link CognitoUser} object.
-     * @param context               REQUIRED: The android context.
      * @param username              REQUIRED: The username.
      * @param clientId              REQUIRED: The clientId.
      * @param secretHash            REQUIRED: The secret hash.
@@ -38,15 +35,13 @@
      */
     public ChooseMfaContinuation(
             CognitoUser user,
-            Context context,
             String username,
             String clientId,
             String secretHash,
             RespondToAuthChallengeResult challengeResult,
             boolean runInBackground,
             AuthenticationHandler callback) {
-        super(user, context, username, clientId, secretHash, challengeResult, runInBackground,
-                callback);
+        super(user, username, clientId, secretHash, challengeResult, runInBackground, callback);
         mfaOptions = getListFromString(getParameters().get(CognitoServiceConstants.CHLG_PARAM_MFAS_CAN_CHOOSE));
     }
 
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/MultiFactorAuthenticationContinuation.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/MultiFactorAuthenticationContinuation.java
index 08fd77fea2..21eb402f15 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/MultiFactorAuthenticationContinuation.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/MultiFactorAuthenticationContinuation.java
@@ -17,9 +17,7 @@
 
 package com.amazonaws.mobileconnectors.cognitoidentityprovider.continuations;
 
-import android.content.Context;
-import android.os.Handler;
-
+import com.amazonaws.mobileconnectors.cognitoidentityprovider.extra.execution.CallbackExectorProvider;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUserCodeDeliveryDetails;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.handlers.AuthenticationHandler;
@@ -42,7 +40,6 @@
     public static final boolean RUN_IN_CURRENT = false;
 
     private final CognitoUser user;
-    private final Context context;
     private final RespondToAuthChallengeResult challenge;
     private final boolean runInBackground;
     private final AuthenticationHandler callback;
@@ -55,15 +52,12 @@
      * @param challenge             REQUIRED: Contains the MFA Challenge.
      * @param runInBackground       REQUIRED: Represents where this continuation has to run.
      * @param callback              REQUIRED: Callback to interact with the app.
-     * @param context               REQUIRED: The android context.
      */
     public MultiFactorAuthenticationContinuation(CognitoUser user,
-                                                 Context context,
                                                  RespondToAuthChallengeResult challenge,
                                                  boolean runInBackground,
                                                  AuthenticationHandler callback) {
         this.user = user;
-        this.context = context;
         this.callback = callback;
         this.runInBackground = runInBackground;
         this.challenge = challenge;
@@ -100,7 +94,6 @@ public void continueTask() {
             new Thread(new Runnable() {
                 @Override
                 public void run() {
-                    final Handler handler = new Handler(context.getMainLooper());
                     Runnable nextStep;
                     try {
 
@@ -114,7 +107,7 @@ public void run() {
                             }
                         };
                     }
-                    handler.post(nextStep);
+                    CallbackExectorProvider.getExecutor().execute(nextStep);
                 }
             }).start();
         } else {
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/NewPasswordContinuation.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/NewPasswordContinuation.java
index dd25d710fd..0661e42494 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/NewPasswordContinuation.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/NewPasswordContinuation.java
@@ -17,8 +17,6 @@
 
 package com.amazonaws.mobileconnectors.cognitoidentityprovider.continuations;
 
-import android.content.Context;
-
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.exceptions.CognitoParameterInvalidException;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.handlers.AuthenticationHandler;
@@ -62,22 +60,19 @@
      * @param user                  REQUIRED: Reference to the {@link CognitoUser} object.
      * @param runInBackground       REQUIRED: Represents where this continuation has to run.
      * @param callback              REQUIRED: Callback to interact with the app.
-     * @param context               REQUIRED: The android context.
      * @param username              REQUIRED: the username.
      * @param clientId              REQUIRED: the clientId.
      * @param secretHash            REQUIRED: the secreth hash.
      * @param challengeResult       REQUIRED: The response to respond to the authentication challenge.
      */
     public NewPasswordContinuation(CognitoUser user,
-            Context context,
             String username,
             String clientId,
             String secretHash,
             RespondToAuthChallengeResult challengeResult,
             boolean runInBackground,
             AuthenticationHandler callback) {
-        super(user, context, username, clientId, secretHash, challengeResult, runInBackground,
-                callback);
+        super(user, username, clientId, secretHash, challengeResult, runInBackground, callback);
         this.callback = callback;
 
         // Parse required User Attributes and current values of user attributes.
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/RegisterMfaContinuation.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/RegisterMfaContinuation.java
index 891d0424a2..5e115b5e35 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/RegisterMfaContinuation.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/RegisterMfaContinuation.java
@@ -1,7 +1,5 @@
 package com.amazonaws.mobileconnectors.cognitoidentityprovider.continuations;
 
-import android.content.Context;
-
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.exceptions.CognitoParameterInvalidException;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.handlers.AuthenticationHandler;
@@ -31,7 +29,6 @@
     /**
      * Constructs a new continuation for multiple user MFA's.
      * @param user                  REQUIRED: Reference to the {@link CognitoUser} object.
-     * @param context               REQUIRED: The android context.
      * @param username              REQUIRED: The username.
      * @param clientId              REQUIRED: The clientId.
      * @param secretHash            REQUIRED: The secret hash.
@@ -41,15 +38,13 @@
      */
     public RegisterMfaContinuation(
             CognitoUser user,
-            Context context,
             String username,
             String clientId,
             String secretHash,
             RespondToAuthChallengeResult challengeResult,
             boolean runInBackground,
             AuthenticationHandler callback) {
-        super(user, context, username, clientId, secretHash, challengeResult, runInBackground,
-                callback);
+        super(user, username, clientId, secretHash, challengeResult, runInBackground, callback);
         mfaOptions = getListFromString(getParameters().get(CognitoServiceConstants.CHLG_PARAM_MFAS_CAN_SETUP));
     }
 
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/VerifyMfaContinuation.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/VerifyMfaContinuation.java
index 069c6e2bc8..c1dfb66ae6 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/VerifyMfaContinuation.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/continuations/VerifyMfaContinuation.java
@@ -1,7 +1,5 @@
 package com.amazonaws.mobileconnectors.cognitoidentityprovider.continuations;
 
-import android.content.Context;
-
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.CognitoUser;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.exceptions.CognitoParameterInvalidException;
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.handlers.RegisterMfaHandler;
@@ -27,7 +25,6 @@
      */
     public static final boolean RUN_IN_CURRENT = false;
 
-    private final Context context;
     private final String clientId;
     private final CognitoUser user;
     private final RegisterMfaHandler callback;
@@ -43,7 +40,6 @@
 
     /**
      * Constructs a new continuation for MFA verification.
-     * @param context               REQUIRED: The android context.
      * @param clientId              REQUIRED: The clientId.
      * @param user                  REQUIRED: Reference to the {@link CognitoUser} object.
      * @param callback              REQUIRED: Callback to interact with the app.
@@ -53,7 +49,6 @@
      * @param runInBackground       REQUIRED: Represents where this continuation has to run.
      */
     public VerifyMfaContinuation(
-            Context context,
             String clientId,
             CognitoUser user,
             RegisterMfaHandler callback,
@@ -61,7 +56,6 @@ public VerifyMfaContinuation(
             boolean useSessionToken,
             String sessionToken,
             boolean runInBackground) {
-        this.context = context;
         this.clientId = clientId;
         this.user = user;
         this.callback = callback;
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/extra/execution/CallbackExectorProvider.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/extra/execution/CallbackExectorProvider.java
new file mode 100644
index 0000000000..59c242bd22
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/extra/execution/CallbackExectorProvider.java
@@ -0,0 +1,19 @@
+package com.amazonaws.mobileconnectors.cognitoidentityprovider.extra.execution;
+
+public class CallbackExectorProvider {
+
+    private static CallbackExecutor callbackExecutor = new CallbackExecutorSimple();
+
+    /**
+     * Specify the instance to execute AWS callbacks.
+     * 
+     * @param callbackExecutor the instance to executes AWS SDK callbacks
+     */
+    public static void setCallbackExecutor(CallbackExecutor callbackExecutor) {
+        CallbackExectorProvider.callbackExecutor = callbackExecutor;
+    }
+
+    public static CallbackExecutor getExecutor() {
+        return callbackExecutor;
+    }
+}
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/extra/execution/CallbackExecutor.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/extra/execution/CallbackExecutor.java
new file mode 100644
index 0000000000..5123fb8090
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/extra/execution/CallbackExecutor.java
@@ -0,0 +1,6 @@
+package com.amazonaws.mobileconnectors.cognitoidentityprovider.extra.execution;
+
+public interface CallbackExecutor {
+
+    void execute(Runnable runnable);
+}
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/extra/execution/CallbackExecutorSimple.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/extra/execution/CallbackExecutorSimple.java
new file mode 100644
index 0000000000..70d35f0e05
--- /dev/null
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/extra/execution/CallbackExecutorSimple.java
@@ -0,0 +1,9 @@
+package com.amazonaws.mobileconnectors.cognitoidentityprovider.extra.execution;
+
+public class CallbackExecutorSimple implements CallbackExecutor {
+
+    @Override
+    public void execute(Runnable runnable) {
+        new Thread(runnable).start();
+    }
+}
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/util/CognitoDeviceHelper.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/util/CognitoDeviceHelper.java
index 2d57c34de1..d57086de90 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/util/CognitoDeviceHelper.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/util/CognitoDeviceHelper.java
@@ -17,10 +17,8 @@
 
 package com.amazonaws.mobileconnectors.cognitoidentityprovider.util;
 
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.os.Build;
-
+import com.amazonaws.extra.persistence.StorageProvider;
+import com.amazonaws.extra.persistence.Storage;
 import com.amazonaws.util.Base64;
 import com.amazonaws.util.StringUtils;
 
@@ -53,13 +51,15 @@
     static deviceSRP srpCalculator = null;
 
     /**
-     * Uses the Android class {@link android.os.build} to return the model of
-     * the android device.
+     * Uses the Java version for the type of device.
      *
      * @return Device model name, which is also the name of the device.
      */
     public static String getDeviceName() {
-        return Build.MODEL;
+        // TODO consider Build.MODEL in Android provider
+        // Note: [c/sh]ould be consolidated with DataAggregator.
+        String version = System.getProperty("java.version");
+        return version == null ? "JAVA" : version;
     }
 
     /**
@@ -68,14 +68,15 @@ public static String getDeviceName() {
      *
      * @param username          REQUIRED: The current user.
      * @param userPoolId        REQUIRED: Client ID of the application.
-     * @param context           REQUIRED: Application context.
      * @return device key as String, null if the device-key is not available.
      */
-    public static String getDeviceKey(String username, String userPoolId, Context context) {
+    public static String getDeviceKey(String username, String userPoolId) {
         try {
-            final SharedPreferences cipCachedDeviceDetails = context.getSharedPreferences(getDeviceDetailsCacheForUser(username, userPoolId), 0);
+            final Storage cipCachedDeviceDetails =
+                    StorageProvider.get(getDeviceDetailsCacheForUser(username, userPoolId));
+
             if (cipCachedDeviceDetails != null && cipCachedDeviceDetails.contains(COGNITO_DEVICE_KEY)) {
-                return cipCachedDeviceDetails.getString(COGNITO_DEVICE_KEY, null);
+                return cipCachedDeviceDetails.getValue(COGNITO_DEVICE_KEY, null);
             }
         } catch (final Exception e) {
             LOGGER.error("Error accessing SharedPreferences", e);
@@ -89,14 +90,14 @@ public static String getDeviceKey(String username, String userPoolId, Context co
      *
      * @param username          REQUIRED: The current user.
      * @param userPoolId        REQUIRED: Client ID of the application.
-     * @param context           REQUIRED: Application context.
      * @return device secret as String, null if the device-key is not available.
      */
-    public static String getDeviceSecret(String username, String userPoolId, Context context) {
+    public static String getDeviceSecret(String username, String userPoolId) {
         try {
-            final SharedPreferences cipCachedDeviceDetails = context.getSharedPreferences(getDeviceDetailsCacheForUser(username, userPoolId), 0);
+            final Storage cipCachedDeviceDetails =
+                    StorageProvider.get(getDeviceDetailsCacheForUser(username, userPoolId));
             if (cipCachedDeviceDetails != null && cipCachedDeviceDetails.contains(COGNITO_DEVICE_SECRET)) {
-                return cipCachedDeviceDetails.getString(COGNITO_DEVICE_SECRET, null);
+                return cipCachedDeviceDetails.getValue(COGNITO_DEVICE_SECRET, null);
             }
         } catch (final Exception e) {
             LOGGER.error("Error accessing SharedPreferences", e);
@@ -110,14 +111,14 @@ public static String getDeviceSecret(String username, String userPoolId, Context
      *
      * @param username          REQUIRED: The current user.
      * @param userPoolId        REQUIRED: Client ID of the application.
-     * @param context           REQUIRED: Application context.
      * @return device group key as String, null if the device-key is not available.
      */
-    public static String getDeviceGroupKey(String username, String userPoolId, Context context) {
+    public static String getDeviceGroupKey(String username, String userPoolId) {
         try {
-            final SharedPreferences cipCachedDeviceDetails = context.getSharedPreferences(getDeviceDetailsCacheForUser(username, userPoolId), 0);
+            final Storage cipCachedDeviceDetails =
+                    StorageProvider.get(getDeviceDetailsCacheForUser(username, userPoolId));
             if (cipCachedDeviceDetails != null && cipCachedDeviceDetails.contains(COGNITO_DEVICE_GROUP_KEY)) {
-                return cipCachedDeviceDetails.getString(COGNITO_DEVICE_GROUP_KEY, null);
+                return cipCachedDeviceDetails.getValue(COGNITO_DEVICE_GROUP_KEY, null);
             }
         } catch (final Exception e) {
             LOGGER.error("Error accessing SharedPreferences", e);
@@ -132,12 +133,12 @@ public static String getDeviceGroupKey(String username, String userPoolId, Conte
      * @param username          REQUIRED: The current user.
      * @param userPoolId        REQUIRED: Client ID of the device.
      * @param deviceKey         REQUIRED: Cognito assigned device key.
-     * @param context           REQUIRED: App context, needed to access device datastore.
      */
-    public static void cacheDeviceKey(String username, String userPoolId, String deviceKey, Context context) {
+    public static void cacheDeviceKey(String username, String userPoolId, String deviceKey) {
         try {
-            final SharedPreferences cipCachedDeviceDetails = context.getSharedPreferences(getDeviceDetailsCacheForUser(username, userPoolId), 0);
-            cipCachedDeviceDetails.edit().putString(COGNITO_DEVICE_KEY, deviceKey).apply();
+            final Storage cipCachedDeviceDetails =
+                    StorageProvider.get(getDeviceDetailsCacheForUser(username, userPoolId));
+            cipCachedDeviceDetails.put(COGNITO_DEVICE_KEY, deviceKey);
         } catch (final Exception e) {
             LOGGER.error("Error accessing SharedPreferences", e);
         }
@@ -150,12 +151,12 @@ public static void cacheDeviceKey(String username, String userPoolId, String dev
      * @param username          REQUIRED: The current user.
      * @param userPoolId        REQUIRED: Client ID of the device.
      * @param deviceSecret      REQUIRED: Cognito assigned device key.
-     * @param context           REQUIRED: App context, needed to access device datastore.
      */
-    public static void cacheDeviceVerifier(String username, String userPoolId, String deviceSecret, Context context) {
+    public static void cacheDeviceVerifier(String username, String userPoolId, String deviceSecret) {
         try {
-            final SharedPreferences cipCachedDeviceDetails = context.getSharedPreferences(getDeviceDetailsCacheForUser(username, userPoolId), 0);
-            cipCachedDeviceDetails.edit().putString(COGNITO_DEVICE_SECRET, deviceSecret).apply();
+            final Storage cipCachedDeviceDetails =
+                    StorageProvider.get(getDeviceDetailsCacheForUser(username, userPoolId));
+            cipCachedDeviceDetails.put(COGNITO_DEVICE_SECRET, deviceSecret);
         } catch (final Exception e) {
             LOGGER.error("Error accessing SharedPreferences", e);
         }
@@ -168,12 +169,12 @@ public static void cacheDeviceVerifier(String username, String userPoolId, Strin
      * @param username          REQUIRED: The current user.
      * @param userPoolId        REQUIRED: Client ID of the device.
      * @param deviceGroupKey    REQUIRED: Cognito assigned device group key.
-     * @param context           REQUIRED: App context, needed to access device datastore.
      */
-    public static void cacheDeviceGroupKey(String username, String userPoolId, String deviceGroupKey, Context context) {
+    public static void cacheDeviceGroupKey(String username, String userPoolId, String deviceGroupKey) {
         try {
-            final SharedPreferences cipCachedDeviceDetails = context.getSharedPreferences(getDeviceDetailsCacheForUser(username, userPoolId), 0);
-            cipCachedDeviceDetails.edit().putString(COGNITO_DEVICE_GROUP_KEY, deviceGroupKey).apply();
+            final Storage cipCachedDeviceDetails =
+                    StorageProvider.get(getDeviceDetailsCacheForUser(username, userPoolId));
+            cipCachedDeviceDetails.put(COGNITO_DEVICE_GROUP_KEY, deviceGroupKey);
         } catch (final Exception e) {
             LOGGER.error("Error accessing SharedPreferences", e);
         }
@@ -184,12 +185,12 @@ public static void cacheDeviceGroupKey(String username, String userPoolId, Strin
      *
      * @param username          REQUIRED: The current user.
      * @param userPoolId        REQUIRED: Client ID of the device.
-     * @param context           REQUIRED: App context, needed to access device datastore.
      */
-    public static void clearCachedDevice(String username, String userPoolId, Context context) {
+    public static void clearCachedDevice(String username, String userPoolId) {
         try {
-            final SharedPreferences cipCachedDeviceDetails = context.getSharedPreferences(getDeviceDetailsCacheForUser(username, userPoolId), 0);
-            cipCachedDeviceDetails.edit().clear().apply();
+            final Storage cipCachedDeviceDetails =
+                    StorageProvider.get(getDeviceDetailsCacheForUser(username, userPoolId));
+            cipCachedDeviceDetails.clear();
         } catch (final Exception e) {
             LOGGER.error("Error accessing SharedPreferences", e);
         }
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/util/CognitoJWTParser.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/util/CognitoJWTParser.java
index d7cd326464..d600d86f45 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/util/CognitoJWTParser.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/util/CognitoJWTParser.java
@@ -17,7 +17,7 @@
 
 package com.amazonaws.mobileconnectors.cognitoidentityprovider.util;
 
-import android.util.Base64;
+import com.amazonaws.android.util.Base64;
 
 import com.amazonaws.mobileconnectors.cognitoidentityprovider.exceptions.CognitoParameterInvalidException;
 
diff --git a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/util/CognitoPinpointSharedContext.java b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/util/CognitoPinpointSharedContext.java
index 02cbb54376..02e1a57c91 100644
--- a/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/util/CognitoPinpointSharedContext.java
+++ b/aws-android-sdk-cognitoidentityprovider/src/main/java/com/amazonaws/mobileconnectors/cognitoidentityprovider/util/CognitoPinpointSharedContext.java
@@ -1,7 +1,7 @@
 package com.amazonaws.mobileconnectors.cognitoidentityprovider.util;
 
-import android.content.Context;
-import android.content.SharedPreferences;
+import com.amazonaws.extra.persistence.StorageProvider;
+import com.amazonaws.extra.persistence.Storage;
 
 import java.util.UUID;
 
@@ -15,7 +15,7 @@
     private static final Log LOGGER = LogFactory.getLog(CognitoPinpointSharedContext.class);
 
     /**
-     * Key to access Pinpoint endpoint id in {@link android.content.SharedPreferences}.
+     * Key to access Pinpoint endpoint id in @link android.content.SharedPreferences}.
      */
     private static final String UNIQUE_ID_KEY = "UniqueId";
 
@@ -27,13 +27,11 @@
 
     /**
      * Returns the pinpoint endpoint id for the provided Pinpoint App Id.
-     * @param context Required, {@link Context}.
      * @param pinpointAppId Required, the pinpoint appId.
      * @return The pinpoint endpoint id as a string.
      */
-    public static String getPinpointEndpoint(Context context,
-                                             String pinpointAppId) {
-        return getPinpointEndpoint(context, pinpointAppId, UNIQUE_ID_KEY);
+    public static String getPinpointEndpoint(String pinpointAppId) {
+        return getPinpointEndpoint(pinpointAppId, UNIQUE_ID_KEY);
     }
 
     /**
@@ -43,27 +41,24 @@ public static String getPinpointEndpoint(Context context,
      *     Generates and stores a new pinpoint endpoint id if a pinpoint endpoint id is not available for this
      *     combination.
      * </p>
-     * @param context Required, {@link Context}.
      * @param pinpointAppId Required, the pinpoint appId.
      * @param pinpointEndpointIdentifier Required, the pinpoint user identifier.
      * @return The pinpoint endpoint id as a string.
      */
-    public static String getPinpointEndpoint(Context context,
-                                             String pinpointAppId,
+    public static String getPinpointEndpoint(String pinpointAppId,
                                              String pinpointEndpointIdentifier) {
-        if (context == null || pinpointAppId == null || pinpointEndpointIdentifier == null) {
+        if (pinpointAppId == null || pinpointEndpointIdentifier == null) {
             return null;
         }
 
         try {
-            final SharedPreferences pinpointPreferences =
-                    context.getSharedPreferences(pinpointAppId + PREFERENCES_AND_FILE_MANAGER_SUFFIX,
-                            Context.MODE_PRIVATE);
-            String pinpointEndpointId = pinpointPreferences.getString(pinpointEndpointIdentifier, null);
+            final Storage pinpointStorage =
+                    StorageProvider.get(pinpointAppId + PREFERENCES_AND_FILE_MANAGER_SUFFIX);
+
+            String pinpointEndpointId = pinpointStorage.getValue(pinpointEndpointIdentifier, null);
             if (pinpointEndpointId == null) {
                 pinpointEndpointId = UUID.randomUUID().toString();
-                final SharedPreferences.Editor pinpointSharedPrefsEditor = pinpointPreferences.edit();
-                pinpointSharedPrefsEditor.putString(pinpointEndpointIdentifier, pinpointEndpointId).apply();
+                pinpointStorage.put(pinpointEndpointIdentifier, pinpointEndpointId);
             }
             return pinpointEndpointId;
         } catch (Exception e) {
diff --git a/aws-android-sdk-core/src/main/AndroidManifest.xml b/aws-android-sdk-core/src/main/AndroidManifest.xml
new file mode 100644
index 0000000000..704a1aad71
--- /dev/null
+++ b/aws-android-sdk-core/src/main/AndroidManifest.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+ <manifest xmlns:android="http://schemas.android.com/apk/res/android"
+           xmlns:amazon="http://schemas.amazon.com/apk/res/android"
+           package="com.amazonaws.mobileconnectors.cognitoauth">
+ 
+     <application android:allowBackup="true"/>
+
+     <uses-sdk android:minSdkVersion="15"
+               android:targetSdkVersion="27" />
+ </manifest>
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/auth/CognitoCachingCredentialsProvider.java b/aws-android-sdk-core/src/main/java/com/amazonaws/auth/CognitoCachingCredentialsProvider.java
index 538f4055a2..4ce72e9b2d 100644
--- a/aws-android-sdk-core/src/main/java/com/amazonaws/auth/CognitoCachingCredentialsProvider.java
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/auth/CognitoCachingCredentialsProvider.java
@@ -15,11 +15,9 @@
 
 package com.amazonaws.auth;
 
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.util.Log;
-
 import com.amazonaws.ClientConfiguration;
+import com.amazonaws.extra.persistence.Storage;
+import com.amazonaws.extra.persistence.StorageProvider;
 import com.amazonaws.mobile.config.AWSConfiguration;
 import com.amazonaws.regions.Regions;
 import com.amazonaws.services.cognitoidentity.AmazonCognitoIdentityClient;
@@ -27,12 +25,15 @@
 import com.amazonaws.services.securitytoken.AWSSecurityTokenService;
 import com.amazonaws.util.VersionInfoUtils;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
 import java.util.Date;
 import java.util.Map;
 
 /**
  * This credentials provider is intended for Android applications. It offers the
- * ability to persist the Cognito identity id in {@link SharedPreferences}.
+ * ability to persist the Cognito identity id.
  * Furthermore, it caches session credentials so as to reduce the number of
  * network requests. This is the provider to use with a custom identity
  * provider, which should be an extension of AWSAbstractCognitoIdentityProvider.
@@ -77,11 +78,11 @@
 public class CognitoCachingCredentialsProvider
         extends CognitoCredentialsProvider {
 
-    private final String DEFAULT_SHAREDPREFERENCES_NAME = "com.amazonaws.android.auth";
+    private static final Log LOGGER = LogFactory.getLog(CognitoCachingCredentialsProvider.class);
     private static final String USER_AGENT = CognitoCachingCredentialsProvider.class.getName()
             + "/" + VersionInfoUtils.getVersion();
-    private final SharedPreferences prefs;
     private String identityId;
+    public static final String STORAGE_KEY = "com.amazonaws.android.auth";
 
     private static final String ID_KEY = "identityId";
     private static final String AK_KEY = "accessKey";
@@ -96,7 +97,7 @@
     private final IdentityChangedListener listener = new IdentityChangedListener() {
         @Override
         public void identityChanged(String oldIdentityId, String newIdentityId) {
-            Log.d(TAG, "Identity id is changed");
+            LOGGER.debug("Identity id is changed");
             saveIdentityId(newIdentityId);
             clearCredentials();
         }
@@ -109,7 +110,6 @@ public void identityChanged(String oldIdentityId, String newIdentityId) {
      * request short-lived session credentials, which will then be returned by
      * this class's {@link #getCredentials()} method.
      *
-     * @param context The Android context to be used for the caching
      * @param accountId The AWS accountId for the account with Amazon Cognito
      * @param identityPoolId The Amazon Cogntio identity pool to use
      * @param unauthRoleArn The ARN of the IAM Role that will be assumed when
@@ -118,14 +118,9 @@ public void identityChanged(String oldIdentityId, String newIdentityId) {
      *            authenticated
      * @param region The region to use when contacting Cognito Identity
      */
-    public CognitoCachingCredentialsProvider(Context context, String accountId,
-            String identityPoolId, String unauthRoleArn, String authRoleArn, Regions region) {
+    public CognitoCachingCredentialsProvider(String accountId,
+                                             String identityPoolId, String unauthRoleArn, String authRoleArn, Regions region) {
         super(accountId, identityPoolId, unauthRoleArn, authRoleArn, region);
-        if (context == null) {
-            throw new IllegalArgumentException("context can't be null");
-        }
-        this.prefs = context.getSharedPreferences(DEFAULT_SHAREDPREFERENCES_NAME,
-                Context.MODE_PRIVATE);
         initialize();
     }
 
@@ -140,7 +135,6 @@ public CognitoCachingCredentialsProvider(Context context, String accountId,
      * configuration for the Amazon Cognito and STS clients.
      * </p>
      *
-     * @param context The Android context to be used for the caching
      * @param accountId The AWS accountId for the account with Amazon Cognito
      * @param identityPoolId The Amazon Cognito identity pool to use
      * @param unauthRoleArn The ARN of the IAM Role that will be assumed when
@@ -151,15 +145,10 @@ public CognitoCachingCredentialsProvider(Context context, String accountId,
      * @param clientConfiguration Configuration to apply to service clients
      *            created
      */
-    public CognitoCachingCredentialsProvider(Context context, String accountId,
-            String identityPoolId, String unauthRoleArn, String authRoleArn, Regions region,
-            ClientConfiguration clientConfiguration) {
+    public CognitoCachingCredentialsProvider(String accountId,
+                                             String identityPoolId, String unauthRoleArn, String authRoleArn, Regions region,
+                                             ClientConfiguration clientConfiguration) {
         super(accountId, identityPoolId, unauthRoleArn, authRoleArn, region, clientConfiguration);
-        if (context == null) {
-            throw new IllegalArgumentException("context can't be null");
-        }
-        this.prefs = context.getSharedPreferences(DEFAULT_SHAREDPREFERENCES_NAME,
-                Context.MODE_PRIVATE);
         initialize();
     }
 
@@ -178,17 +167,11 @@ public CognitoCachingCredentialsProvider(Context context, String accountId,
      * enhanced flow.
      * </p>
      *
-     * @param context The Android context to be used for the caching
      * @param identityPoolId The Amazon Cognito identity pool to use
      * @param region The region to use when contacting Cognito Identity
      */
-    public CognitoCachingCredentialsProvider(Context context, String identityPoolId, Regions region) {
+    public CognitoCachingCredentialsProvider(String identityPoolId, Regions region) {
         super(identityPoolId, region);
-        if (context == null) {
-            throw new IllegalArgumentException("context can't be null");
-        }
-        this.prefs = context.getSharedPreferences(DEFAULT_SHAREDPREFERENCES_NAME,
-                Context.MODE_PRIVATE);
         initialize();
     }
 
@@ -219,18 +202,12 @@ public CognitoCachingCredentialsProvider(Context context, String identityPoolId,
      *     }
      * }
      *
-     * @param context The Android context to be used for the caching
      * @param awsConfiguration The configuration holding you identity pool id
      *                         and the region to use when contacting
      *                         Cognito Identity
      */
-    public CognitoCachingCredentialsProvider(Context context, AWSConfiguration awsConfiguration) {
+    public CognitoCachingCredentialsProvider(AWSConfiguration awsConfiguration) {
         super(awsConfiguration);
-        if (context == null) {
-            throw new IllegalArgumentException("context can't be null");
-        }
-        this.prefs = context.getSharedPreferences(DEFAULT_SHAREDPREFERENCES_NAME,
-                Context.MODE_PRIVATE);
         initialize();
     }
 
@@ -253,20 +230,14 @@ public CognitoCachingCredentialsProvider(Context context, AWSConfiguration awsCo
      * enhanced flow.
      * </p>
      *
-     * @param context The Android context to be used for the caching
      * @param identityPoolId The Amazon Cognito identity pool to use
      * @param region The region to use when contacting Cognito Identity
      * @param clientConfiguration Configuration to apply to service clients
      *            created
      */
-    public CognitoCachingCredentialsProvider(Context context, String identityPoolId,
-            Regions region, ClientConfiguration clientConfiguration) {
+    public CognitoCachingCredentialsProvider(String identityPoolId,
+                                             Regions region, ClientConfiguration clientConfiguration) {
         super(identityPoolId, region, clientConfiguration);
-        if (context == null) {
-            throw new IllegalArgumentException("context can't be null");
-        }
-        this.prefs = context.getSharedPreferences(DEFAULT_SHAREDPREFERENCES_NAME,
-                Context.MODE_PRIVATE);
         initialize();
     }
 
@@ -285,26 +256,17 @@ public CognitoCachingCredentialsProvider(Context context, String identityPoolId,
      * flow, not contacting STS. Otherwise the basic flow will be used.
      * </p>
      *
-     * @param context The Android context to be used for the caching
      * @param accountId The AWS accountId for the account with Amazon Cognito
      * @param identityPoolId The Amazon Cogntio identity pool to use
-     * @param unauthRoleArn The ARN of the IAM Role that will be assumed when
-     *            unauthenticated
-     * @param authRoleArn The ARN of the IAM Role that will be assumed when
-     *            authenticated
      * @param cibClient Preconfigured CognitoIdentity client to make requests
      *            with
      * @param stsClient Preconfigured STS client to make requests with
      */
-    public CognitoCachingCredentialsProvider(Context context, String accountId,
-            String identityPoolId, String unauthArn, String authArn,
-            AmazonCognitoIdentityClient cibClient, AWSSecurityTokenService stsClient) {
+    public CognitoCachingCredentialsProvider(String accountId,
+                                             String identityPoolId, String unauthArn,
+                                             String authArn, AmazonCognitoIdentityClient cibClient,
+                                             AWSSecurityTokenService stsClient) {
         super(accountId, identityPoolId, unauthArn, authArn, cibClient, stsClient);
-        if (context == null) {
-            throw new IllegalArgumentException("context can't be null");
-        }
-        this.prefs = context.getSharedPreferences(DEFAULT_SHAREDPREFERENCES_NAME,
-                Context.MODE_PRIVATE);
         initialize();
     }
 
@@ -318,20 +280,14 @@ public CognitoCachingCredentialsProvider(Context context, String accountId,
      * Provider class.
      * </p>
      *
-     * @param context The Android context to be used for the caching
      * @param provider a reference to the provider in question, including what's
      *            needed to interact with it to later connect with STS
      * @param unauthArn the unauthArn, for use with the STS call
      * @param authArn the authArn, for use with the STS call
      */
-    public CognitoCachingCredentialsProvider(Context context, AWSCognitoIdentityProvider provider,
-            String unauthArn, String authArn) {
+    public CognitoCachingCredentialsProvider(AWSCognitoIdentityProvider provider,
+                                             String unauthArn, String authArn) {
         super(provider, unauthArn, authArn);
-        if (context == null) {
-            throw new IllegalArgumentException("context can't be null");
-        }
-        this.prefs = context.getSharedPreferences(DEFAULT_SHAREDPREFERENCES_NAME,
-                Context.MODE_PRIVATE);
         initialize();
     }
 
@@ -345,21 +301,15 @@ public CognitoCachingCredentialsProvider(Context context, AWSCognitoIdentityProv
      * Provider class, and the STS client to use.
      * </p>
      *
-     * @param context The Android context to be used for the caching
      * @param provider a reference to the provider in question, including what's
      *            needed to interact with it to later connect with STS
      * @param unauthArn the unauthArn, for use with the STS call
      * @param authArn the authArn, for use with the STS call
      * @param stsClient the sts endpoint to get session credentials from
      */
-    public CognitoCachingCredentialsProvider(Context context, AWSCognitoIdentityProvider provider,
-            String unauthArn, String authArn, AWSSecurityTokenService stsClient) {
+    public CognitoCachingCredentialsProvider(AWSCognitoIdentityProvider provider,
+                                             String unauthArn, String authArn, AWSSecurityTokenService stsClient) {
         super(provider, unauthArn, authArn, stsClient);
-        if (context == null) {
-            throw new IllegalArgumentException("context can't be null");
-        }
-        this.prefs = context.getSharedPreferences(DEFAULT_SHAREDPREFERENCES_NAME,
-                Context.MODE_PRIVATE);
         initialize();
     }
 
@@ -380,20 +330,14 @@ public CognitoCachingCredentialsProvider(Context context, AWSCognitoIdentityProv
      * roles) will work without doing so, but will not use the enhanced flow.
      * </p>
      *
-     * @param context The Android context to be used for the caching
      * @param provider a reference to the provider in question, including what's
      *            needed to interact with it to later connect with Amazon
      *            Cognito
      * @param region The region to use when contacting Cognito
      */
-    public CognitoCachingCredentialsProvider(Context context, AWSCognitoIdentityProvider provider,
-            Regions region) {
+    public CognitoCachingCredentialsProvider(AWSCognitoIdentityProvider provider,
+                                             Regions region) {
         super(provider, region);
-        if (context == null) {
-            throw new IllegalArgumentException("context can't be null");
-        }
-        this.prefs = context.getSharedPreferences(DEFAULT_SHAREDPREFERENCES_NAME,
-                Context.MODE_PRIVATE);
         initialize();
     }
 
@@ -414,7 +358,6 @@ public CognitoCachingCredentialsProvider(Context context, AWSCognitoIdentityProv
      * roles) will work without doing so, but will not use the enhanced flow.
      * </p>
      *
-     * @param context The Android context to be used for the caching
      * @param provider a reference to the provider in question, including what's
      *            needed to interact with it to later connect with Amazon
      *            Cognito
@@ -422,14 +365,9 @@ public CognitoCachingCredentialsProvider(Context context, AWSCognitoIdentityProv
      *            created
      * @param region The region to use when contacting Cognito Identity
      */
-    public CognitoCachingCredentialsProvider(Context context, AWSCognitoIdentityProvider provider,
-            Regions region, ClientConfiguration clientConfiguration) {
+    public CognitoCachingCredentialsProvider(AWSCognitoIdentityProvider provider,
+                                             Regions region, ClientConfiguration clientConfiguration) {
         super(provider, region, clientConfiguration);
-        if (context == null) {
-            throw new IllegalArgumentException("context can't be null");
-        }
-        this.prefs = context.getSharedPreferences(DEFAULT_SHAREDPREFERENCES_NAME,
-                Context.MODE_PRIVATE);
         initialize();
     }
 
@@ -443,8 +381,7 @@ private void initialize() {
     /**
      * Gets the Cognito identity id of the user. The first time when this method
      * is called, a network request will be made to retrieve a new identity id.
-     * After that it's saved in {@link SharedPreferences}. Please don't call it
-     * in the main thread.
+     * After that it's saved. Please don't call it in the main thread.
      *
      * @return identity id of the user
      */
@@ -486,12 +423,12 @@ public AWSSessionCredentials getCredentials() {
 
         	// null check before saving credentials
         	if (sessionCredentialsExpiration != null) {
-        		saveCredentials(sessionCredentials, 
+        		saveCredentials(sessionCredentials,
         				sessionCredentialsExpiration.getTime());
         	}
         	return sessionCredentials;
         } catch (NotAuthorizedException e) {
-            Log.e(TAG, "Failure to get credentials", e);
+            LOGGER.error("Failure to get credentials", e);
             if (getLogins() != null) {
                 // If the fetch failed then the credentials don't
                 // match the current id, so clear them
@@ -547,7 +484,7 @@ public void clear() {
         super.clear();
 
         // clear cached identity id and credentials
-        prefs.edit().clear().apply();
+        StorageProvider.get(STORAGE_KEY).clear();
     }
 
     /*
@@ -560,13 +497,12 @@ public void clearCredentials() {
     	credentialsLock.writeLock().lock();
     	try {
 	        super.clearCredentials();
-	        Log.d(TAG, "Clearing credentials from SharedPreferences");
-	        prefs.edit()
-	                .remove(namespace(AK_KEY))
-	                .remove(namespace(SK_KEY))
-	                .remove(namespace(ST_KEY))
-	                .remove(namespace(EXP_KEY))
-	                .apply();
+	        LOGGER.debug("Clearing credentials from SharedPreferences");
+            Storage storage = StorageProvider.get(STORAGE_KEY);
+            storage.remove(AK_KEY);
+            storage.remove(SK_KEY);
+            storage.remove(ST_KEY);
+            storage.remove(EXP_KEY);
     	} finally {
     		credentialsLock.writeLock().unlock();
     	}
@@ -578,7 +514,7 @@ public void clearCredentials() {
      * @return cached identity id, null if it doesn't exist
      */
     public String getCachedIdentityId() {
-        String cachedIdentityId = prefs.getString(namespace(ID_KEY), null);
+        String cachedIdentityId = StorageProvider.get(STORAGE_KEY).getValue(namespace(ID_KEY), null);
         if (cachedIdentityId != null && identityId == null) {
             super.setIdentityId(cachedIdentityId);
         }
@@ -586,23 +522,25 @@ public String getCachedIdentityId() {
     }
 
     /**
-     * Load the credentials from prefs
+     * Load the credentials from storage
      */
     void loadCachedCredentials() {
-        Log.d(TAG, "Loading credentials from SharedPreferences");
-        sessionCredentialsExpiration = new Date(prefs.getLong(namespace(EXP_KEY), 0));
-        // make sure we have valid data in prefs
-        boolean hasAK = prefs.contains(namespace(AK_KEY));
-        boolean hasSK = prefs.contains(namespace(SK_KEY));
-        boolean hasST = prefs.contains(namespace(ST_KEY));
+        Storage storage = StorageProvider.get(STORAGE_KEY);
+        
+        LOGGER.debug("Loading credentials from SharedPreferences");
+        sessionCredentialsExpiration = new Date(Long.valueOf(storage.getValue(EXP_KEY, "0")));
+        // make sure we have valid data in storage
+        boolean hasAK = storage.contains(namespace(AK_KEY));
+        boolean hasSK = storage.contains(namespace(SK_KEY));
+        boolean hasST = storage.contains(namespace(ST_KEY));
         if (!hasAK || !hasSK || !hasST) {
-            Log.d(TAG, "No valid credentials found in SharedPreferences");
+            LOGGER.debug("No valid credentials found in SharedPreferences");
             sessionCredentialsExpiration = null;
             return;
         }
-        String AK = prefs.getString(namespace(AK_KEY), null);
-        String SK = prefs.getString(namespace(SK_KEY), null);
-        String ST = prefs.getString(namespace(ST_KEY), null);
+        String AK = storage.getValue(namespace(AK_KEY), null);
+        String SK = storage.getValue(namespace(SK_KEY), null);
+        String ST = storage.getValue(namespace(ST_KEY), null);
 
         sessionCredentials = new BasicSessionCredentials(AK, SK, ST);
     }
@@ -611,15 +549,14 @@ void loadCachedCredentials() {
      * Save the credentials to SharedPreferences
      */
     private void saveCredentials(AWSSessionCredentials sessionCredentials,
-            long time) {
-        Log.d(TAG, "Saving credentials to SharedPreferences");
+                                 long time) {
+        LOGGER.debug("Saving credentials to SharedPreferences");
         if (sessionCredentials != null) {
-            prefs.edit()
-                    .putString(namespace(AK_KEY), sessionCredentials.getAWSAccessKeyId())
-                    .putString(namespace(SK_KEY), sessionCredentials.getAWSSecretKey())
-                    .putString(namespace(ST_KEY), sessionCredentials.getSessionToken())
-                    .putLong(namespace(EXP_KEY), time)
-                    .apply();
+            Storage storage = StorageProvider.get(STORAGE_KEY);
+            storage.put(namespace(AK_KEY), sessionCredentials.getAWSAccessKeyId());
+            storage.put(namespace(SK_KEY), sessionCredentials.getAWSSecretKey());
+            storage.put(namespace(ST_KEY), sessionCredentials.getSessionToken());
+            storage.put(namespace(EXP_KEY), String.valueOf(time));
         }
     }
 
@@ -628,12 +565,11 @@ private void saveCredentials(AWSSessionCredentials sessionCredentials,
      * Id to SharedPreferences
      */
     private void saveIdentityId(String identityId) {
-        Log.d(TAG, "Saving identity id to SharedPreferences");
+        LOGGER.debug("Saving identity id to SharedPreferences");
         this.identityId = identityId;
 
-        prefs.edit()
-                .putString(namespace(ID_KEY), identityId)
-                .apply();
+        Storage storage = StorageProvider.get(STORAGE_KEY);
+        storage.put(namespace(ID_KEY), identityId);
     }
 
     @Override
@@ -647,15 +583,15 @@ protected String getUserAgent() {
     // under the old key is performed. If there is one, save it under the new
     // namespace.
     private void checkUpgrade() {
+        Storage storage = StorageProvider.get(STORAGE_KEY);
+
         // check identity id without namespace
-        if (prefs.contains(ID_KEY)) {
-            Log.i(TAG,
-                    "Identity id without namespace is detected. It will be saved under new namespace.");
+        if (storage.contains(ID_KEY)) {
+            LOGGER.info("Identity id without namespace is detected. It will be saved under new namespace.");
             // save identity id
-            String identityId = prefs.getString(ID_KEY, null);
-            prefs.edit().clear() // clear old data
-                    .putString(namespace(ID_KEY), identityId)
-                    .apply();
+            String identityId = storage.getValue(ID_KEY, null);
+            storage.clear(); // clear old data
+            storage.put(namespace(ID_KEY), identityId);
         }
     }
 
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/extra/persistence/Storage.java b/aws-android-sdk-core/src/main/java/com/amazonaws/extra/persistence/Storage.java
new file mode 100644
index 0000000000..5321925111
--- /dev/null
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/extra/persistence/Storage.java
@@ -0,0 +1,14 @@
+package com.amazonaws.extra.persistence;
+
+public interface Storage {
+
+    boolean contains(String key);
+
+    String getValue(String key, String defaultValue);
+
+    String put(String key, String value);
+
+    String remove(String key);
+
+    void clear();
+}
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/extra/persistence/StorageMemory.java b/aws-android-sdk-core/src/main/java/com/amazonaws/extra/persistence/StorageMemory.java
new file mode 100644
index 0000000000..edee2aec91
--- /dev/null
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/extra/persistence/StorageMemory.java
@@ -0,0 +1,31 @@
+package com.amazonaws.extra.persistence;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class StorageMemory implements Storage {
+
+    private Map<String, String> keyValues = new HashMap<>();
+
+    public boolean contains(String key) {
+        return keyValues.containsKey(key);
+    }
+
+    public String getValue(String key, String defaultValue) {
+        String value;
+        return (value = keyValues.get(key)) == null
+                && !keyValues.containsKey(key) ? defaultValue : value;
+    }
+
+    public String put(String key, String value) {
+        return keyValues.put(key, value);
+    }
+
+    public String remove(String key) {
+        return keyValues.remove(key);
+    }
+
+    public void clear() {
+        keyValues.clear();
+    }
+}
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/extra/persistence/StorageProvider.java b/aws-android-sdk-core/src/main/java/com/amazonaws/extra/persistence/StorageProvider.java
new file mode 100644
index 0000000000..95e1150f55
--- /dev/null
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/extra/persistence/StorageProvider.java
@@ -0,0 +1,51 @@
+package com.amazonaws.extra.persistence;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class StorageProvider {
+
+    public interface StorageFactory {
+        /**
+         * Create a new Storage object.
+         *
+         * The name is the value used by the external system to reference this storage.  It may be
+         * useful for the storage to know of this value should it need to persist the data.
+         * For example, the name might identify the URL, disk or remote memory location.
+         *
+         * @param name that can be used to identity persistence data
+         * @return new storage instance
+         */
+        Storage create(String name);
+    }
+
+    private static StorageFactory storageFactory = new StorageFactory() {
+        @Override
+        public Storage create(String key) {
+            return new StorageMemory();
+        }
+    };
+    private static Map<String, Storage> storageMap = new HashMap<>();
+    
+    public static void setDefaultStorageFactory(StorageFactory storageFactory) {
+        StorageProvider.storageFactory = storageFactory;
+    }
+
+    /**
+     *
+     * @param key name of the storage
+     * @return the existing or new storage
+     */
+    public static Storage get(String key) {
+        Storage storage = storageMap.get(key);
+
+        boolean isStorage = storage != null;
+        if (isStorage) {
+            return storage;
+        } else {
+            Storage newStorage = storageFactory.create(key);
+            storageMap.put(key, newStorage);
+            return newStorage;
+        }
+    }
+}
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/mobile/config/AWSConfigurable.java b/aws-android-sdk-core/src/main/java/com/amazonaws/mobile/config/AWSConfigurable.java
index ddb0d915a3..eeca1e00a1 100644
--- a/aws-android-sdk-core/src/main/java/com/amazonaws/mobile/config/AWSConfigurable.java
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/mobile/config/AWSConfigurable.java
@@ -14,8 +14,6 @@
  */
 package com.amazonaws.mobile.config;
 
-import android.content.Context;
-
 import com.amazonaws.ClientConfiguration;
 
 /**
@@ -39,32 +37,27 @@
      * {@link com.amazonaws.mobile.config.AWSConfiguration} will be
      * constructed based on awsconfiguration.json file.
      * 
-     * @param context               Reference to the application context.
      * @return the client instance that conforms to AWSConfigurable
      */
-    public AWSConfigurable initialize(Context context) throws Exception;
+    public AWSConfigurable initialize() throws Exception;
 
     /**
      * Initialize the SDK Client. This method will construct the instance
      * of the client and perform basic initialization.
      * 
-     * @param context               Reference to the application context.
      * @param configuration         Instance of {@link AWSConfiguration}
      * @return the client instance that conforms to AWSConfigurable
      */
-    public AWSConfigurable initialize(Context context,
-                                      AWSConfiguration configuration) throws Exception;
+    public AWSConfigurable initialize(AWSConfiguration configuration) throws Exception;
 
     /**
      * Initialize the SDK Client. This method will construct the instance
      * of the client and perform basic initialization.
      * 
-     * @param context               Reference to the application context.
      * @param configuration         Instance of {@link AWSConfiguration}
      * @param clientConfiguration   Instance of {@link com.amazonaws.ClientConfiguration}
      * @return the client instance that conforms to AWSConfigurable
      */
-    public AWSConfigurable initialize(Context context,
-                                      AWSConfiguration configuration,
+    public AWSConfigurable initialize(AWSConfiguration configuration,
                                       ClientConfiguration clientConfiguration) throws Exception;
 }
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/mobile/config/AWSConfiguration.java b/aws-android-sdk-core/src/main/java/com/amazonaws/mobile/config/AWSConfiguration.java
index 18afc37d90..a463483d2d 100644
--- a/aws-android-sdk-core/src/main/java/com/amazonaws/mobile/config/AWSConfiguration.java
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/mobile/config/AWSConfiguration.java
@@ -14,19 +14,11 @@
  */
 package com.amazonaws.mobile.config;
 
-import android.content.Context;
-
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.io.InputStream;
-import java.util.Scanner;
-
 /**
- * A container for the JSONObject representation of SDK configuration. Reads the
- * res/raw/awsconfiguration.json file in your project by default. This can be
- * specified in the constructor through the resource id, if you wish to read a
- * different resource as your configuration source.
+ * A container for the JSONObject representation of SDK configuration.
  */
 public class AWSConfiguration {
     private static final String DEFAULT = "Default";
@@ -35,72 +27,6 @@
     private JSONObject mJSONObject;
     private String configName; // "Default" or something else like "Backup"
 
-    /**
-     * Constructs an AWSConfiguration object
-     * 
-     * @param context application context, used to retrieve
-     *            awsconfiguration.json from resources
-     */
-    public AWSConfiguration(Context context) {
-        this(context, getConfigResourceId(context));
-    }
-    
-    private static int getConfigResourceId(Context context) {
-        try {
-            return context.getResources().getIdentifier(DEFAULT_IDENTIFIER,
-                    "raw", context.getPackageName());
-        } catch (Exception e) {
-            throw new RuntimeException(
-                    "Failed to read awsconfiguration.json"
-                    + " please check that it is correctly formed.",
-                    e);
-        }
-    }
-
-    /**
-     * Constructs an AWSConfiguration object
-     * 
-     * @param context application context, used to retrieve the resource
-     *            specified by configResourceId
-     * @param configResourceId resource id of the json file to be read
-     */
-    public AWSConfiguration(Context context, int configResourceId) {
-        this(context, configResourceId, DEFAULT);
-    }
-
-    /**
-     * Construct an AWSConfiguration object
-     * 
-     * @param context application context, used to retrieve the resource
-     *            specified by configResourceId
-     * @param configResourceId resource id of the json file to be read
-     * @param configName instructs the reader of this configuration to pick the
-     *            specified configName
-     */
-    public AWSConfiguration(Context context, int configResourceId,
-            String configName) {
-        this.configName = configName;
-        readInputJson(context, configResourceId);
-    }
-
-    private void readInputJson(Context context, int resourceId) {
-        try {
-            final InputStream inputStream = context.getResources().openRawResource(
-                    resourceId);
-            final Scanner in = new Scanner(inputStream);
-            final StringBuilder sb = new StringBuilder();
-            while (in.hasNextLine()) {
-                sb.append(in.nextLine());
-            }
-            in.close();
-
-            this.mJSONObject = new JSONObject(sb.toString());
-        } catch (Exception je) {
-            throw new RuntimeException(
-                    "Failed to read awsconfiguration.json please check that it is correctly formed.",
-                    je);
-        }
-    }
 
     /**
      * This method will search for the name provided in the json and unwrap the
diff --git a/pom.xml b/pom.xml
index cb1b62f024..ed78ba31a1 100644
--- a/pom.xml
+++ b/pom.xml
@@ -41,6 +41,7 @@
     <module>aws-android-sdk-autoscaling</module>
     <module>aws-android-sdk-cloudwatch</module>
     <module>aws-android-sdk-cognito</module>
+    <module>aws-android-sdk-cognitoidentityprovider-android</module>
     <module>aws-android-sdk-cognitoidentityprovider-asf</module>
     <module>aws-android-sdk-cognitoidentityprovider</module>
     <module>aws-android-sdk-cognitoauth</module>
