diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/internal/keyvaluestore/KeyProvider18.java b/aws-android-sdk-core/src/main/java/com/amazonaws/internal/keyvaluestore/KeyProvider18.java
index 6fc90228fe..77a1faca77 100644
--- a/aws-android-sdk-core/src/main/java/com/amazonaws/internal/keyvaluestore/KeyProvider18.java
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/internal/keyvaluestore/KeyProvider18.java
@@ -86,23 +86,24 @@ public Key getKey(SharedPreferences sharedPreferences,
                     logger.debug("Loading the encryption key from SharedPreferences");
                     String encryptedAesEncryptionKey = sharedPreferences
                             .getString(ENCRYPTED_AES_KEY, null);
-                    return new SecretKeySpec(
-                            rsaDecrypt(keyAlias, Base64.decode(encryptedAesEncryptionKey)),
-                            KEY_ALGORITHM_AES);
-                } else {
-                    this.secureRandom = new SecureRandom();
-                    KeyGenerator generator = KeyGenerator.getInstance(KEY_ALGORITHM_AES);
-                    generator.init(CIPHER_AES_GCM_NOPADDING_KEY_LENGTH_IN_BITS, secureRandom);
-                    SecretKey aesEncryptionKey = generator.generateKey();
-
-                    sharedPreferences.edit()
-                            .putString(ENCRYPTED_AES_KEY,
-                                    Base64.encodeAsString(rsaEncrypt(keyAlias, aesEncryptionKey.getEncoded())))
-                            .apply();
-
-                    logger.info("Generated and saved the encryption key to SharedPreferences");
-                    return aesEncryptionKey;
+                    byte[] bytes = rsaDecrypt(keyAlias, Base64.decode(encryptedAesEncryptionKey));
+                    if (bytes != null) {
+                        return new SecretKeySpec(bytes, KEY_ALGORITHM_AES);
+                    }
                 }
+
+                this.secureRandom = new SecureRandom();
+                KeyGenerator generator = KeyGenerator.getInstance(KEY_ALGORITHM_AES);
+                generator.init(CIPHER_AES_GCM_NOPADDING_KEY_LENGTH_IN_BITS, secureRandom);
+                SecretKey aesEncryptionKey = generator.generateKey();
+
+                sharedPreferences.edit()
+                        .putString(ENCRYPTED_AES_KEY,
+                                Base64.encodeAsString(rsaEncrypt(keyAlias, aesEncryptionKey.getEncoded())))
+                        .apply();
+
+                logger.info("Generated and saved the encryption key to SharedPreferences");
+                return aesEncryptionKey;
             } catch (Exception ex) {
                 logger.error("Error in getting the key.", ex);
                 throw new IllegalStateException(ex);
