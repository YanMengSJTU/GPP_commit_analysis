diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/AmazonLexRuntime.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/AmazonLexRuntime.java
index 4a8e2b8fe5..8c0f2b497b 100644
--- a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/AmazonLexRuntime.java
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/AmazonLexRuntime.java
@@ -95,6 +95,53 @@
      */
     public void setRegion(Region region) throws java.lang.IllegalArgumentException;
 
+    /**
+     * <p>
+     * Removes session information for a specified bot, alias, and user ID.
+     * </p>
+     * 
+     * @param deleteSessionRequest
+     * @return deleteSessionResult The response from the DeleteSession service
+     *         method, as returned by Amazon Lex Runtime Service.
+     * @throws NotFoundException
+     * @throws BadRequestException
+     * @throws LimitExceededException
+     * @throws InternalFailureException
+     * @throws ConflictException
+     * @throws AmazonClientException If any internal errors are encountered
+     *             inside the client while attempting to make the request or
+     *             handle the response. For example if a network connection is
+     *             not available.
+     * @throws AmazonServiceException If an error response is returned by Amazon
+     *             Lex Runtime Service indicating either a problem with the data
+     *             in the request, or a server side issue.
+     */
+    DeleteSessionResult deleteSession(DeleteSessionRequest deleteSessionRequest)
+            throws AmazonClientException, AmazonServiceException;
+
+    /**
+     * <p>
+     * Returns session information for a specified bot, alias, and user ID.
+     * </p>
+     * 
+     * @param getSessionRequest
+     * @return getSessionResult The response from the GetSession service method,
+     *         as returned by Amazon Lex Runtime Service.
+     * @throws NotFoundException
+     * @throws BadRequestException
+     * @throws LimitExceededException
+     * @throws InternalFailureException
+     * @throws AmazonClientException If any internal errors are encountered
+     *             inside the client while attempting to make the request or
+     *             handle the response. For example if a network connection is
+     *             not available.
+     * @throws AmazonServiceException If an error response is returned by Amazon
+     *             Lex Runtime Service indicating either a problem with the data
+     *             in the request, or a server side issue.
+     */
+    GetSessionResult getSession(GetSessionRequest getSessionRequest) throws AmazonClientException,
+            AmazonServiceException;
+
     /**
      * <p>
      * Sends user input (text or speech) to Amazon Lex. Clients use this API to
@@ -196,7 +243,7 @@
      * <p>
      * In addition, Amazon Lex also returns your application-specific
      * <code>sessionAttributes</code>. For more information, see <a
-     * href="http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html"
+     * href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html"
      * >Managing Conversation Context</a>.
      * </p>
      * 
@@ -227,8 +274,8 @@ PostContentResult postContent(PostContentRequest postContentRequest)
 
     /**
      * <p>
-     * Sends user input (text-only) to Amazon Lex. Client applications can use
-     * this API to send requests to Amazon Lex at runtime. Amazon Lex then
+     * Sends user input (text or SSML) to Amazon Lex. Client applications can
+     * use this API to send requests to Amazon Lex at runtime. Amazon Lex then
      * interprets the user input using the machine learning model it built for
      * the bot.
      * </p>
@@ -320,7 +367,7 @@ PostContentResult postContent(PostContentRequest postContentRequest)
      * <p>
      * In addition, Amazon Lex also returns your application-specific
      * <code>sessionAttributes</code>. For more information, see <a
-     * href="http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html"
+     * href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html"
      * >Managing Conversation Context</a>.
      * </p>
      * 
@@ -346,6 +393,40 @@ PostContentResult postContent(PostContentRequest postContentRequest)
     PostTextResult postText(PostTextRequest postTextRequest) throws AmazonClientException,
             AmazonServiceException;
 
+    /**
+     * <p>
+     * Creates a new session or modifies an existing session with an Amazon Lex
+     * bot. Use this operation to enable your application to set the state of
+     * the bot.
+     * </p>
+     * <p>
+     * For more information, see <a
+     * href="https://docs.aws.amazon.com/lex/latest/dg/how-session-api.html"
+     * >Managing Sessions</a>.
+     * </p>
+     * 
+     * @param putSessionRequest
+     * @return putSessionResult The response from the PutSession service method,
+     *         as returned by Amazon Lex Runtime Service.
+     * @throws NotFoundException
+     * @throws BadRequestException
+     * @throws LimitExceededException
+     * @throws InternalFailureException
+     * @throws ConflictException
+     * @throws NotAcceptableException
+     * @throws DependencyFailedException
+     * @throws BadGatewayException
+     * @throws AmazonClientException If any internal errors are encountered
+     *             inside the client while attempting to make the request or
+     *             handle the response. For example if a network connection is
+     *             not available.
+     * @throws AmazonServiceException If an error response is returned by Amazon
+     *             Lex Runtime Service indicating either a problem with the data
+     *             in the request, or a server side issue.
+     */
+    PutSessionResult putSession(PutSessionRequest putSessionRequest) throws AmazonClientException,
+            AmazonServiceException;
+
     /**
      * Shuts down this client object, releasing any resources that might be held
      * open. This is an optional method, and callers are not expected to call
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/AmazonLexRuntimeClient.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/AmazonLexRuntimeClient.java
index 1722bd0f17..f1f042b929 100644
--- a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/AmazonLexRuntimeClient.java
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/AmazonLexRuntimeClient.java
@@ -373,6 +373,105 @@ private static ClientConfiguration adjustClientConfiguration(ClientConfiguration
         return config;
     }
 
+    /**
+     * <p>
+     * Removes session information for a specified bot, alias, and user ID.
+     * </p>
+     * 
+     * @param deleteSessionRequest
+     * @return deleteSessionResult The response from the DeleteSession service
+     *         method, as returned by Amazon Lex Runtime Service.
+     * @throws NotFoundException
+     * @throws BadRequestException
+     * @throws LimitExceededException
+     * @throws InternalFailureException
+     * @throws ConflictException
+     * @throws AmazonClientException If any internal errors are encountered
+     *             inside the client while attempting to make the request or
+     *             handle the response. For example if a network connection is
+     *             not available.
+     * @throws AmazonServiceException If an error response is returned by Amazon
+     *             Lex Runtime Service indicating either a problem with the data
+     *             in the request, or a server side issue.
+     */
+    public DeleteSessionResult deleteSession(DeleteSessionRequest deleteSessionRequest)
+            throws AmazonServiceException, AmazonClientException {
+        ExecutionContext executionContext = createExecutionContext(deleteSessionRequest);
+        AWSRequestMetrics awsRequestMetrics = executionContext.getAwsRequestMetrics();
+        awsRequestMetrics.startEvent(Field.ClientExecuteTime);
+        Request<DeleteSessionRequest> request = null;
+        Response<DeleteSessionResult> response = null;
+        try {
+            awsRequestMetrics.startEvent(Field.RequestMarshallTime);
+            try {
+                request = new DeleteSessionRequestMarshaller().marshall(deleteSessionRequest);
+                // Binds the request metrics to the current request.
+                request.setAWSRequestMetrics(awsRequestMetrics);
+            } finally {
+                awsRequestMetrics.endEvent(Field.RequestMarshallTime);
+            }
+            Unmarshaller<DeleteSessionResult, JsonUnmarshallerContext> unmarshaller = new DeleteSessionResultJsonUnmarshaller();
+            JsonResponseHandler<DeleteSessionResult> responseHandler = new JsonResponseHandler<DeleteSessionResult>(
+                    unmarshaller);
+
+            response = invoke(request, responseHandler, executionContext);
+
+            return response.getAwsResponse();
+        } finally {
+            awsRequestMetrics.endEvent(Field.ClientExecuteTime);
+            endClientExecution(awsRequestMetrics, request, response, LOGGING_AWS_REQUEST_METRIC);
+        }
+    }
+
+    /**
+     * <p>
+     * Returns session information for a specified bot, alias, and user ID.
+     * </p>
+     * 
+     * @param getSessionRequest
+     * @return getSessionResult The response from the GetSession service method,
+     *         as returned by Amazon Lex Runtime Service.
+     * @throws NotFoundException
+     * @throws BadRequestException
+     * @throws LimitExceededException
+     * @throws InternalFailureException
+     * @throws AmazonClientException If any internal errors are encountered
+     *             inside the client while attempting to make the request or
+     *             handle the response. For example if a network connection is
+     *             not available.
+     * @throws AmazonServiceException If an error response is returned by Amazon
+     *             Lex Runtime Service indicating either a problem with the data
+     *             in the request, or a server side issue.
+     */
+    public GetSessionResult getSession(GetSessionRequest getSessionRequest)
+            throws AmazonServiceException, AmazonClientException {
+        ExecutionContext executionContext = createExecutionContext(getSessionRequest);
+        AWSRequestMetrics awsRequestMetrics = executionContext.getAwsRequestMetrics();
+        awsRequestMetrics.startEvent(Field.ClientExecuteTime);
+        Request<GetSessionRequest> request = null;
+        Response<GetSessionResult> response = null;
+        try {
+            awsRequestMetrics.startEvent(Field.RequestMarshallTime);
+            try {
+                request = new GetSessionRequestMarshaller().marshall(getSessionRequest);
+                // Binds the request metrics to the current request.
+                request.setAWSRequestMetrics(awsRequestMetrics);
+            } finally {
+                awsRequestMetrics.endEvent(Field.RequestMarshallTime);
+            }
+            Unmarshaller<GetSessionResult, JsonUnmarshallerContext> unmarshaller = new GetSessionResultJsonUnmarshaller();
+            JsonResponseHandler<GetSessionResult> responseHandler = new JsonResponseHandler<GetSessionResult>(
+                    unmarshaller);
+
+            response = invoke(request, responseHandler, executionContext);
+
+            return response.getAwsResponse();
+        } finally {
+            awsRequestMetrics.endEvent(Field.ClientExecuteTime);
+            endClientExecution(awsRequestMetrics, request, response, LOGGING_AWS_REQUEST_METRIC);
+        }
+    }
+
     /**
      * <p>
      * Sends user input (text or speech) to Amazon Lex. Clients use this API to
@@ -474,7 +573,7 @@ private static ClientConfiguration adjustClientConfiguration(ClientConfiguration
      * <p>
      * In addition, Amazon Lex also returns your application-specific
      * <code>sessionAttributes</code>. For more information, see <a
-     * href="http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html"
+     * href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html"
      * >Managing Conversation Context</a>.
      * </p>
      * 
@@ -531,8 +630,8 @@ public PostContentResult postContent(PostContentRequest postContentRequest)
 
     /**
      * <p>
-     * Sends user input (text-only) to Amazon Lex. Client applications can use
-     * this API to send requests to Amazon Lex at runtime. Amazon Lex then
+     * Sends user input (text or SSML) to Amazon Lex. Client applications can
+     * use this API to send requests to Amazon Lex at runtime. Amazon Lex then
      * interprets the user input using the machine learning model it built for
      * the bot.
      * </p>
@@ -624,7 +723,7 @@ public PostContentResult postContent(PostContentRequest postContentRequest)
      * <p>
      * In addition, Amazon Lex also returns your application-specific
      * <code>sessionAttributes</code>. For more information, see <a
-     * href="http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html"
+     * href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html"
      * >Managing Conversation Context</a>.
      * </p>
      * 
@@ -676,6 +775,66 @@ public PostTextResult postText(PostTextRequest postTextRequest)
         }
     }
 
+    /**
+     * <p>
+     * Creates a new session or modifies an existing session with an Amazon Lex
+     * bot. Use this operation to enable your application to set the state of
+     * the bot.
+     * </p>
+     * <p>
+     * For more information, see <a
+     * href="https://docs.aws.amazon.com/lex/latest/dg/how-session-api.html"
+     * >Managing Sessions</a>.
+     * </p>
+     * 
+     * @param putSessionRequest
+     * @return putSessionResult The response from the PutSession service method,
+     *         as returned by Amazon Lex Runtime Service.
+     * @throws NotFoundException
+     * @throws BadRequestException
+     * @throws LimitExceededException
+     * @throws InternalFailureException
+     * @throws ConflictException
+     * @throws NotAcceptableException
+     * @throws DependencyFailedException
+     * @throws BadGatewayException
+     * @throws AmazonClientException If any internal errors are encountered
+     *             inside the client while attempting to make the request or
+     *             handle the response. For example if a network connection is
+     *             not available.
+     * @throws AmazonServiceException If an error response is returned by Amazon
+     *             Lex Runtime Service indicating either a problem with the data
+     *             in the request, or a server side issue.
+     */
+    public PutSessionResult putSession(PutSessionRequest putSessionRequest)
+            throws AmazonServiceException, AmazonClientException {
+        ExecutionContext executionContext = createExecutionContext(putSessionRequest);
+        AWSRequestMetrics awsRequestMetrics = executionContext.getAwsRequestMetrics();
+        awsRequestMetrics.startEvent(Field.ClientExecuteTime);
+        Request<PutSessionRequest> request = null;
+        Response<PutSessionResult> response = null;
+        try {
+            awsRequestMetrics.startEvent(Field.RequestMarshallTime);
+            try {
+                request = new PutSessionRequestMarshaller().marshall(putSessionRequest);
+                // Binds the request metrics to the current request.
+                request.setAWSRequestMetrics(awsRequestMetrics);
+            } finally {
+                awsRequestMetrics.endEvent(Field.RequestMarshallTime);
+            }
+            Unmarshaller<PutSessionResult, JsonUnmarshallerContext> unmarshaller = new PutSessionResultJsonUnmarshaller();
+            JsonResponseHandler<PutSessionResult> responseHandler = new JsonResponseHandler<PutSessionResult>(
+                    unmarshaller);
+
+            response = invoke(request, responseHandler, executionContext);
+
+            return response.getAwsResponse();
+        } finally {
+            awsRequestMetrics.endEvent(Field.ClientExecuteTime);
+            endClientExecution(awsRequestMetrics, request, response, LOGGING_AWS_REQUEST_METRIC);
+        }
+    }
+
     /**
      * Returns additional metadata for a previously executed successful,
      * request, typically used for debugging issues where a service isn't acting
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/ConfirmationStatus.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/ConfirmationStatus.java
new file mode 100644
index 0000000000..edc332673d
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/ConfirmationStatus.java
@@ -0,0 +1,64 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.lexrts.model;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Confirmation Status
+ */
+public enum ConfirmationStatus {
+
+    None("None"),
+    Confirmed("Confirmed"),
+    Denied("Denied");
+
+    private String value;
+
+    private ConfirmationStatus(String value) {
+        this.value = value;
+    }
+
+    @Override
+    public String toString() {
+        return value;
+    }
+
+    private static final Map<String, ConfirmationStatus> enumMap;
+    static {
+        enumMap = new HashMap<String, ConfirmationStatus>();
+        enumMap.put("None", None);
+        enumMap.put("Confirmed", Confirmed);
+        enumMap.put("Denied", Denied);
+    }
+
+    /**
+     * Use this in place of valueOf.
+     *
+     * @param value real value
+     * @return ConfirmationStatus corresponding to the value
+     */
+    public static ConfirmationStatus fromValue(String value) {
+        if (value == null || value.isEmpty()) {
+            throw new IllegalArgumentException("Value cannot be null or empty!");
+        } else if (enumMap.containsKey(value)) {
+            return enumMap.get(value);
+        } else {
+            throw new IllegalArgumentException("Cannot create enum from " + value + " value!");
+        }
+    }
+}
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/DeleteSessionRequest.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/DeleteSessionRequest.java
new file mode 100644
index 0000000000..aac1b650d0
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/DeleteSessionRequest.java
@@ -0,0 +1,257 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.lexrts.model;
+
+import java.io.Serializable;
+
+import com.amazonaws.AmazonWebServiceRequest;
+
+/**
+ * <p>
+ * Removes session information for a specified bot, alias, and user ID.
+ * </p>
+ */
+public class DeleteSessionRequest extends AmazonWebServiceRequest implements Serializable {
+    /**
+     * <p>
+     * The name of the bot that contains the session data.
+     * </p>
+     */
+    private String botName;
+
+    /**
+     * <p>
+     * The alias in use for the bot that contains the session data.
+     * </p>
+     */
+    private String botAlias;
+
+    /**
+     * <p>
+     * The identifier of the user associated with the session data.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>2 - 100<br/>
+     * <b>Pattern: </b>[0-9a-zA-Z._:-]+<br/>
+     */
+    private String userId;
+
+    /**
+     * <p>
+     * The name of the bot that contains the session data.
+     * </p>
+     *
+     * @return <p>
+     *         The name of the bot that contains the session data.
+     *         </p>
+     */
+    public String getBotName() {
+        return botName;
+    }
+
+    /**
+     * <p>
+     * The name of the bot that contains the session data.
+     * </p>
+     *
+     * @param botName <p>
+     *            The name of the bot that contains the session data.
+     *            </p>
+     */
+    public void setBotName(String botName) {
+        this.botName = botName;
+    }
+
+    /**
+     * <p>
+     * The name of the bot that contains the session data.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param botName <p>
+     *            The name of the bot that contains the session data.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public DeleteSessionRequest withBotName(String botName) {
+        this.botName = botName;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The alias in use for the bot that contains the session data.
+     * </p>
+     *
+     * @return <p>
+     *         The alias in use for the bot that contains the session data.
+     *         </p>
+     */
+    public String getBotAlias() {
+        return botAlias;
+    }
+
+    /**
+     * <p>
+     * The alias in use for the bot that contains the session data.
+     * </p>
+     *
+     * @param botAlias <p>
+     *            The alias in use for the bot that contains the session data.
+     *            </p>
+     */
+    public void setBotAlias(String botAlias) {
+        this.botAlias = botAlias;
+    }
+
+    /**
+     * <p>
+     * The alias in use for the bot that contains the session data.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param botAlias <p>
+     *            The alias in use for the bot that contains the session data.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public DeleteSessionRequest withBotAlias(String botAlias) {
+        this.botAlias = botAlias;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The identifier of the user associated with the session data.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>2 - 100<br/>
+     * <b>Pattern: </b>[0-9a-zA-Z._:-]+<br/>
+     *
+     * @return <p>
+     *         The identifier of the user associated with the session data.
+     *         </p>
+     */
+    public String getUserId() {
+        return userId;
+    }
+
+    /**
+     * <p>
+     * The identifier of the user associated with the session data.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>2 - 100<br/>
+     * <b>Pattern: </b>[0-9a-zA-Z._:-]+<br/>
+     *
+     * @param userId <p>
+     *            The identifier of the user associated with the session data.
+     *            </p>
+     */
+    public void setUserId(String userId) {
+        this.userId = userId;
+    }
+
+    /**
+     * <p>
+     * The identifier of the user associated with the session data.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>2 - 100<br/>
+     * <b>Pattern: </b>[0-9a-zA-Z._:-]+<br/>
+     *
+     * @param userId <p>
+     *            The identifier of the user associated with the session data.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public DeleteSessionRequest withUserId(String userId) {
+        this.userId = userId;
+        return this;
+    }
+
+    /**
+     * Returns a string representation of this object; useful for testing and
+     * debugging.
+     *
+     * @return A string representation of this object.
+     * @see java.lang.Object#toString()
+     */
+    @Override
+    public String toString() {
+        StringBuilder sb = new StringBuilder();
+        sb.append("{");
+        if (getBotName() != null)
+            sb.append("botName: " + getBotName() + ",");
+        if (getBotAlias() != null)
+            sb.append("botAlias: " + getBotAlias() + ",");
+        if (getUserId() != null)
+            sb.append("userId: " + getUserId());
+        sb.append("}");
+        return sb.toString();
+    }
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int hashCode = 1;
+
+        hashCode = prime * hashCode + ((getBotName() == null) ? 0 : getBotName().hashCode());
+        hashCode = prime * hashCode + ((getBotAlias() == null) ? 0 : getBotAlias().hashCode());
+        hashCode = prime * hashCode + ((getUserId() == null) ? 0 : getUserId().hashCode());
+        return hashCode;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj)
+            return true;
+        if (obj == null)
+            return false;
+
+        if (obj instanceof DeleteSessionRequest == false)
+            return false;
+        DeleteSessionRequest other = (DeleteSessionRequest) obj;
+
+        if (other.getBotName() == null ^ this.getBotName() == null)
+            return false;
+        if (other.getBotName() != null && other.getBotName().equals(this.getBotName()) == false)
+            return false;
+        if (other.getBotAlias() == null ^ this.getBotAlias() == null)
+            return false;
+        if (other.getBotAlias() != null && other.getBotAlias().equals(this.getBotAlias()) == false)
+            return false;
+        if (other.getUserId() == null ^ this.getUserId() == null)
+            return false;
+        if (other.getUserId() != null && other.getUserId().equals(this.getUserId()) == false)
+            return false;
+        return true;
+    }
+}
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/DeleteSessionResult.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/DeleteSessionResult.java
new file mode 100644
index 0000000000..a3391f05b1
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/DeleteSessionResult.java
@@ -0,0 +1,310 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.lexrts.model;
+
+import java.io.Serializable;
+
+public class DeleteSessionResult implements Serializable {
+    /**
+     * <p>
+     * The name of the bot associated with the session data.
+     * </p>
+     */
+    private String botName;
+
+    /**
+     * <p>
+     * The alias in use for the bot associated with the session data.
+     * </p>
+     */
+    private String botAlias;
+
+    /**
+     * <p>
+     * The ID of the client application user.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>2 - 100<br/>
+     * <b>Pattern: </b>[0-9a-zA-Z._:-]+<br/>
+     */
+    private String userId;
+
+    /**
+     * <p>
+     * The unique identifier for the session.
+     * </p>
+     */
+    private String sessionId;
+
+    /**
+     * <p>
+     * The name of the bot associated with the session data.
+     * </p>
+     *
+     * @return <p>
+     *         The name of the bot associated with the session data.
+     *         </p>
+     */
+    public String getBotName() {
+        return botName;
+    }
+
+    /**
+     * <p>
+     * The name of the bot associated with the session data.
+     * </p>
+     *
+     * @param botName <p>
+     *            The name of the bot associated with the session data.
+     *            </p>
+     */
+    public void setBotName(String botName) {
+        this.botName = botName;
+    }
+
+    /**
+     * <p>
+     * The name of the bot associated with the session data.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param botName <p>
+     *            The name of the bot associated with the session data.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public DeleteSessionResult withBotName(String botName) {
+        this.botName = botName;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The alias in use for the bot associated with the session data.
+     * </p>
+     *
+     * @return <p>
+     *         The alias in use for the bot associated with the session data.
+     *         </p>
+     */
+    public String getBotAlias() {
+        return botAlias;
+    }
+
+    /**
+     * <p>
+     * The alias in use for the bot associated with the session data.
+     * </p>
+     *
+     * @param botAlias <p>
+     *            The alias in use for the bot associated with the session data.
+     *            </p>
+     */
+    public void setBotAlias(String botAlias) {
+        this.botAlias = botAlias;
+    }
+
+    /**
+     * <p>
+     * The alias in use for the bot associated with the session data.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param botAlias <p>
+     *            The alias in use for the bot associated with the session data.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public DeleteSessionResult withBotAlias(String botAlias) {
+        this.botAlias = botAlias;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The ID of the client application user.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>2 - 100<br/>
+     * <b>Pattern: </b>[0-9a-zA-Z._:-]+<br/>
+     *
+     * @return <p>
+     *         The ID of the client application user.
+     *         </p>
+     */
+    public String getUserId() {
+        return userId;
+    }
+
+    /**
+     * <p>
+     * The ID of the client application user.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>2 - 100<br/>
+     * <b>Pattern: </b>[0-9a-zA-Z._:-]+<br/>
+     *
+     * @param userId <p>
+     *            The ID of the client application user.
+     *            </p>
+     */
+    public void setUserId(String userId) {
+        this.userId = userId;
+    }
+
+    /**
+     * <p>
+     * The ID of the client application user.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>2 - 100<br/>
+     * <b>Pattern: </b>[0-9a-zA-Z._:-]+<br/>
+     *
+     * @param userId <p>
+     *            The ID of the client application user.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public DeleteSessionResult withUserId(String userId) {
+        this.userId = userId;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The unique identifier for the session.
+     * </p>
+     *
+     * @return <p>
+     *         The unique identifier for the session.
+     *         </p>
+     */
+    public String getSessionId() {
+        return sessionId;
+    }
+
+    /**
+     * <p>
+     * The unique identifier for the session.
+     * </p>
+     *
+     * @param sessionId <p>
+     *            The unique identifier for the session.
+     *            </p>
+     */
+    public void setSessionId(String sessionId) {
+        this.sessionId = sessionId;
+    }
+
+    /**
+     * <p>
+     * The unique identifier for the session.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param sessionId <p>
+     *            The unique identifier for the session.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public DeleteSessionResult withSessionId(String sessionId) {
+        this.sessionId = sessionId;
+        return this;
+    }
+
+    /**
+     * Returns a string representation of this object; useful for testing and
+     * debugging.
+     *
+     * @return A string representation of this object.
+     * @see java.lang.Object#toString()
+     */
+    @Override
+    public String toString() {
+        StringBuilder sb = new StringBuilder();
+        sb.append("{");
+        if (getBotName() != null)
+            sb.append("botName: " + getBotName() + ",");
+        if (getBotAlias() != null)
+            sb.append("botAlias: " + getBotAlias() + ",");
+        if (getUserId() != null)
+            sb.append("userId: " + getUserId() + ",");
+        if (getSessionId() != null)
+            sb.append("sessionId: " + getSessionId());
+        sb.append("}");
+        return sb.toString();
+    }
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int hashCode = 1;
+
+        hashCode = prime * hashCode + ((getBotName() == null) ? 0 : getBotName().hashCode());
+        hashCode = prime * hashCode + ((getBotAlias() == null) ? 0 : getBotAlias().hashCode());
+        hashCode = prime * hashCode + ((getUserId() == null) ? 0 : getUserId().hashCode());
+        hashCode = prime * hashCode + ((getSessionId() == null) ? 0 : getSessionId().hashCode());
+        return hashCode;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj)
+            return true;
+        if (obj == null)
+            return false;
+
+        if (obj instanceof DeleteSessionResult == false)
+            return false;
+        DeleteSessionResult other = (DeleteSessionResult) obj;
+
+        if (other.getBotName() == null ^ this.getBotName() == null)
+            return false;
+        if (other.getBotName() != null && other.getBotName().equals(this.getBotName()) == false)
+            return false;
+        if (other.getBotAlias() == null ^ this.getBotAlias() == null)
+            return false;
+        if (other.getBotAlias() != null && other.getBotAlias().equals(this.getBotAlias()) == false)
+            return false;
+        if (other.getUserId() == null ^ this.getUserId() == null)
+            return false;
+        if (other.getUserId() != null && other.getUserId().equals(this.getUserId()) == false)
+            return false;
+        if (other.getSessionId() == null ^ this.getSessionId() == null)
+            return false;
+        if (other.getSessionId() != null
+                && other.getSessionId().equals(this.getSessionId()) == false)
+            return false;
+        return true;
+    }
+}
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/DialogAction.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/DialogAction.java
new file mode 100644
index 0000000000..75b3a65262
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/DialogAction.java
@@ -0,0 +1,1575 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.lexrts.model;
+
+import java.io.Serializable;
+
+/**
+ * <p>
+ * Describes the next action that the bot should take in its interaction with
+ * the user and provides information about the context in which the action takes
+ * place. Use the <code>DialogAction</code> data type to set the interaction to
+ * a specific state, or to return the interaction to a previous state.
+ * </p>
+ */
+public class DialogAction implements Serializable {
+    /**
+     * <p>
+     * The next action that the bot should take in its interaction with the
+     * user. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>ConfirmIntent</code> - The next action is asking the user if the
+     * intent is complete and ready to be fulfilled. This is a yes/no question
+     * such as "Place the order?"
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Close</code> - Indicates that the there will not be a response from
+     * the user. For example, the statement "Your order has been placed" does
+     * not require a response.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Delegate</code> - The next action is determined by Amazon Lex.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitIntent</code> - The next action is to determine the intent
+     * that the user wants to fulfill.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitSlot</code> - The next action is to elicit a slot value from
+     * the user.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>ElicitIntent, ConfirmIntent, ElicitSlot, Close,
+     * Delegate
+     */
+    private String type;
+
+    /**
+     * <p>
+     * The name of the intent.
+     * </p>
+     */
+    private String intentName;
+
+    /**
+     * <p>
+     * Map of the slots that have been gathered and their values.
+     * </p>
+     */
+    private java.util.Map<String, String> slots;
+
+    /**
+     * <p>
+     * The name of the slot that should be elicited from the user.
+     * </p>
+     */
+    private String slotToElicit;
+
+    /**
+     * <p>
+     * The fulfillment state of the intent. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>Failed</code> - The Lambda function associated with the intent
+     * failed to fulfill the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Fulfilled</code> - The intent has fulfilled by the Lambda function
+     * associated with the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ReadyForFulfillment</code> - All of the information necessary for
+     * the intent is present and the intent ready to be fulfilled by the client
+     * application.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>Fulfilled, Failed, ReadyForFulfillment
+     */
+    private String fulfillmentState;
+
+    /**
+     * <p>
+     * The message that should be shown to the user. If you don't specify a
+     * message, Amazon Lex will use the message configured for the intent.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>1 - 1024<br/>
+     */
+    private String message;
+
+    /**
+     * <ul>
+     * <li>
+     * <p>
+     * <code>PlainText</code> - The message contains plain UTF-8 text.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>CustomPayload</code> - The message is a custom format for the
+     * client.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>SSML</code> - The message contains text formatted for voice output.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Composite</code> - The message contains an escaped JSON object
+     * containing one or more messages. For more information, see <a href=
+     * "https://docs.aws.amazon.com/lex/latest/dg/howitworks-manage-prompts.html"
+     * >Message Groups</a>.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>PlainText, CustomPayload, SSML, Composite
+     */
+    private String messageFormat;
+
+    /**
+     * <p>
+     * The next action that the bot should take in its interaction with the
+     * user. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>ConfirmIntent</code> - The next action is asking the user if the
+     * intent is complete and ready to be fulfilled. This is a yes/no question
+     * such as "Place the order?"
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Close</code> - Indicates that the there will not be a response from
+     * the user. For example, the statement "Your order has been placed" does
+     * not require a response.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Delegate</code> - The next action is determined by Amazon Lex.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitIntent</code> - The next action is to determine the intent
+     * that the user wants to fulfill.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitSlot</code> - The next action is to elicit a slot value from
+     * the user.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>ElicitIntent, ConfirmIntent, ElicitSlot, Close,
+     * Delegate
+     *
+     * @return <p>
+     *         The next action that the bot should take in its interaction with
+     *         the user. The possible values are:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         <code>ConfirmIntent</code> - The next action is asking the user
+     *         if the intent is complete and ready to be fulfilled. This is a
+     *         yes/no question such as "Place the order?"
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>Close</code> - Indicates that the there will not be a
+     *         response from the user. For example, the statement
+     *         "Your order has been placed" does not require a response.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>Delegate</code> - The next action is determined by Amazon
+     *         Lex.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>ElicitIntent</code> - The next action is to determine the
+     *         intent that the user wants to fulfill.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>ElicitSlot</code> - The next action is to elicit a slot
+     *         value from the user.
+     *         </p>
+     *         </li>
+     *         </ul>
+     * @see DialogActionType
+     */
+    public String getType() {
+        return type;
+    }
+
+    /**
+     * <p>
+     * The next action that the bot should take in its interaction with the
+     * user. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>ConfirmIntent</code> - The next action is asking the user if the
+     * intent is complete and ready to be fulfilled. This is a yes/no question
+     * such as "Place the order?"
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Close</code> - Indicates that the there will not be a response from
+     * the user. For example, the statement "Your order has been placed" does
+     * not require a response.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Delegate</code> - The next action is determined by Amazon Lex.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitIntent</code> - The next action is to determine the intent
+     * that the user wants to fulfill.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitSlot</code> - The next action is to elicit a slot value from
+     * the user.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>ElicitIntent, ConfirmIntent, ElicitSlot, Close,
+     * Delegate
+     *
+     * @param type <p>
+     *            The next action that the bot should take in its interaction
+     *            with the user. The possible values are:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>ConfirmIntent</code> - The next action is asking the
+     *            user if the intent is complete and ready to be fulfilled. This
+     *            is a yes/no question such as "Place the order?"
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Close</code> - Indicates that the there will not be a
+     *            response from the user. For example, the statement
+     *            "Your order has been placed" does not require a response.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Delegate</code> - The next action is determined by
+     *            Amazon Lex.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ElicitIntent</code> - The next action is to determine
+     *            the intent that the user wants to fulfill.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ElicitSlot</code> - The next action is to elicit a slot
+     *            value from the user.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @see DialogActionType
+     */
+    public void setType(String type) {
+        this.type = type;
+    }
+
+    /**
+     * <p>
+     * The next action that the bot should take in its interaction with the
+     * user. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>ConfirmIntent</code> - The next action is asking the user if the
+     * intent is complete and ready to be fulfilled. This is a yes/no question
+     * such as "Place the order?"
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Close</code> - Indicates that the there will not be a response from
+     * the user. For example, the statement "Your order has been placed" does
+     * not require a response.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Delegate</code> - The next action is determined by Amazon Lex.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitIntent</code> - The next action is to determine the intent
+     * that the user wants to fulfill.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitSlot</code> - The next action is to elicit a slot value from
+     * the user.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>ElicitIntent, ConfirmIntent, ElicitSlot, Close,
+     * Delegate
+     *
+     * @param type <p>
+     *            The next action that the bot should take in its interaction
+     *            with the user. The possible values are:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>ConfirmIntent</code> - The next action is asking the
+     *            user if the intent is complete and ready to be fulfilled. This
+     *            is a yes/no question such as "Place the order?"
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Close</code> - Indicates that the there will not be a
+     *            response from the user. For example, the statement
+     *            "Your order has been placed" does not require a response.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Delegate</code> - The next action is determined by
+     *            Amazon Lex.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ElicitIntent</code> - The next action is to determine
+     *            the intent that the user wants to fulfill.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ElicitSlot</code> - The next action is to elicit a slot
+     *            value from the user.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     * @see DialogActionType
+     */
+    public DialogAction withType(String type) {
+        this.type = type;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The next action that the bot should take in its interaction with the
+     * user. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>ConfirmIntent</code> - The next action is asking the user if the
+     * intent is complete and ready to be fulfilled. This is a yes/no question
+     * such as "Place the order?"
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Close</code> - Indicates that the there will not be a response from
+     * the user. For example, the statement "Your order has been placed" does
+     * not require a response.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Delegate</code> - The next action is determined by Amazon Lex.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitIntent</code> - The next action is to determine the intent
+     * that the user wants to fulfill.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitSlot</code> - The next action is to elicit a slot value from
+     * the user.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>ElicitIntent, ConfirmIntent, ElicitSlot, Close,
+     * Delegate
+     *
+     * @param type <p>
+     *            The next action that the bot should take in its interaction
+     *            with the user. The possible values are:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>ConfirmIntent</code> - The next action is asking the
+     *            user if the intent is complete and ready to be fulfilled. This
+     *            is a yes/no question such as "Place the order?"
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Close</code> - Indicates that the there will not be a
+     *            response from the user. For example, the statement
+     *            "Your order has been placed" does not require a response.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Delegate</code> - The next action is determined by
+     *            Amazon Lex.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ElicitIntent</code> - The next action is to determine
+     *            the intent that the user wants to fulfill.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ElicitSlot</code> - The next action is to elicit a slot
+     *            value from the user.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @see DialogActionType
+     */
+    public void setType(DialogActionType type) {
+        this.type = type.toString();
+    }
+
+    /**
+     * <p>
+     * The next action that the bot should take in its interaction with the
+     * user. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>ConfirmIntent</code> - The next action is asking the user if the
+     * intent is complete and ready to be fulfilled. This is a yes/no question
+     * such as "Place the order?"
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Close</code> - Indicates that the there will not be a response from
+     * the user. For example, the statement "Your order has been placed" does
+     * not require a response.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Delegate</code> - The next action is determined by Amazon Lex.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitIntent</code> - The next action is to determine the intent
+     * that the user wants to fulfill.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitSlot</code> - The next action is to elicit a slot value from
+     * the user.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>ElicitIntent, ConfirmIntent, ElicitSlot, Close,
+     * Delegate
+     *
+     * @param type <p>
+     *            The next action that the bot should take in its interaction
+     *            with the user. The possible values are:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>ConfirmIntent</code> - The next action is asking the
+     *            user if the intent is complete and ready to be fulfilled. This
+     *            is a yes/no question such as "Place the order?"
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Close</code> - Indicates that the there will not be a
+     *            response from the user. For example, the statement
+     *            "Your order has been placed" does not require a response.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Delegate</code> - The next action is determined by
+     *            Amazon Lex.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ElicitIntent</code> - The next action is to determine
+     *            the intent that the user wants to fulfill.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ElicitSlot</code> - The next action is to elicit a slot
+     *            value from the user.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     * @see DialogActionType
+     */
+    public DialogAction withType(DialogActionType type) {
+        this.type = type.toString();
+        return this;
+    }
+
+    /**
+     * <p>
+     * The name of the intent.
+     * </p>
+     *
+     * @return <p>
+     *         The name of the intent.
+     *         </p>
+     */
+    public String getIntentName() {
+        return intentName;
+    }
+
+    /**
+     * <p>
+     * The name of the intent.
+     * </p>
+     *
+     * @param intentName <p>
+     *            The name of the intent.
+     *            </p>
+     */
+    public void setIntentName(String intentName) {
+        this.intentName = intentName;
+    }
+
+    /**
+     * <p>
+     * The name of the intent.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param intentName <p>
+     *            The name of the intent.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public DialogAction withIntentName(String intentName) {
+        this.intentName = intentName;
+        return this;
+    }
+
+    /**
+     * <p>
+     * Map of the slots that have been gathered and their values.
+     * </p>
+     *
+     * @return <p>
+     *         Map of the slots that have been gathered and their values.
+     *         </p>
+     */
+    public java.util.Map<String, String> getSlots() {
+        return slots;
+    }
+
+    /**
+     * <p>
+     * Map of the slots that have been gathered and their values.
+     * </p>
+     *
+     * @param slots <p>
+     *            Map of the slots that have been gathered and their values.
+     *            </p>
+     */
+    public void setSlots(java.util.Map<String, String> slots) {
+        this.slots = slots;
+    }
+
+    /**
+     * <p>
+     * Map of the slots that have been gathered and their values.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param slots <p>
+     *            Map of the slots that have been gathered and their values.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public DialogAction withSlots(java.util.Map<String, String> slots) {
+        this.slots = slots;
+        return this;
+    }
+
+    /**
+     * <p>
+     * Map of the slots that have been gathered and their values.
+     * </p>
+     * <p>
+     * The method adds a new key-value pair into slots parameter, and returns a
+     * reference to this object so that method calls can be chained together.
+     *
+     * @param key The key of the entry to be added into slots.
+     * @param value The corresponding value of the entry to be added into slots.
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public DialogAction addslotsEntry(String key, String value) {
+        if (null == this.slots) {
+            this.slots = new java.util.HashMap<String, String>();
+        }
+        if (this.slots.containsKey(key))
+            throw new IllegalArgumentException("Duplicated keys (" + key.toString()
+                    + ") are provided.");
+        this.slots.put(key, value);
+        return this;
+    }
+
+    /**
+     * Removes all the entries added into slots.
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     */
+    public DialogAction clearslotsEntries() {
+        this.slots = null;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The name of the slot that should be elicited from the user.
+     * </p>
+     *
+     * @return <p>
+     *         The name of the slot that should be elicited from the user.
+     *         </p>
+     */
+    public String getSlotToElicit() {
+        return slotToElicit;
+    }
+
+    /**
+     * <p>
+     * The name of the slot that should be elicited from the user.
+     * </p>
+     *
+     * @param slotToElicit <p>
+     *            The name of the slot that should be elicited from the user.
+     *            </p>
+     */
+    public void setSlotToElicit(String slotToElicit) {
+        this.slotToElicit = slotToElicit;
+    }
+
+    /**
+     * <p>
+     * The name of the slot that should be elicited from the user.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param slotToElicit <p>
+     *            The name of the slot that should be elicited from the user.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public DialogAction withSlotToElicit(String slotToElicit) {
+        this.slotToElicit = slotToElicit;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The fulfillment state of the intent. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>Failed</code> - The Lambda function associated with the intent
+     * failed to fulfill the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Fulfilled</code> - The intent has fulfilled by the Lambda function
+     * associated with the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ReadyForFulfillment</code> - All of the information necessary for
+     * the intent is present and the intent ready to be fulfilled by the client
+     * application.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>Fulfilled, Failed, ReadyForFulfillment
+     *
+     * @return <p>
+     *         The fulfillment state of the intent. The possible values are:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         <code>Failed</code> - The Lambda function associated with the
+     *         intent failed to fulfill the intent.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>Fulfilled</code> - The intent has fulfilled by the Lambda
+     *         function associated with the intent.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>ReadyForFulfillment</code> - All of the information
+     *         necessary for the intent is present and the intent ready to be
+     *         fulfilled by the client application.
+     *         </p>
+     *         </li>
+     *         </ul>
+     * @see FulfillmentState
+     */
+    public String getFulfillmentState() {
+        return fulfillmentState;
+    }
+
+    /**
+     * <p>
+     * The fulfillment state of the intent. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>Failed</code> - The Lambda function associated with the intent
+     * failed to fulfill the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Fulfilled</code> - The intent has fulfilled by the Lambda function
+     * associated with the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ReadyForFulfillment</code> - All of the information necessary for
+     * the intent is present and the intent ready to be fulfilled by the client
+     * application.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>Fulfilled, Failed, ReadyForFulfillment
+     *
+     * @param fulfillmentState <p>
+     *            The fulfillment state of the intent. The possible values are:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>Failed</code> - The Lambda function associated with the
+     *            intent failed to fulfill the intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Fulfilled</code> - The intent has fulfilled by the
+     *            Lambda function associated with the intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ReadyForFulfillment</code> - All of the information
+     *            necessary for the intent is present and the intent ready to be
+     *            fulfilled by the client application.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @see FulfillmentState
+     */
+    public void setFulfillmentState(String fulfillmentState) {
+        this.fulfillmentState = fulfillmentState;
+    }
+
+    /**
+     * <p>
+     * The fulfillment state of the intent. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>Failed</code> - The Lambda function associated with the intent
+     * failed to fulfill the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Fulfilled</code> - The intent has fulfilled by the Lambda function
+     * associated with the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ReadyForFulfillment</code> - All of the information necessary for
+     * the intent is present and the intent ready to be fulfilled by the client
+     * application.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>Fulfilled, Failed, ReadyForFulfillment
+     *
+     * @param fulfillmentState <p>
+     *            The fulfillment state of the intent. The possible values are:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>Failed</code> - The Lambda function associated with the
+     *            intent failed to fulfill the intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Fulfilled</code> - The intent has fulfilled by the
+     *            Lambda function associated with the intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ReadyForFulfillment</code> - All of the information
+     *            necessary for the intent is present and the intent ready to be
+     *            fulfilled by the client application.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     * @see FulfillmentState
+     */
+    public DialogAction withFulfillmentState(String fulfillmentState) {
+        this.fulfillmentState = fulfillmentState;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The fulfillment state of the intent. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>Failed</code> - The Lambda function associated with the intent
+     * failed to fulfill the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Fulfilled</code> - The intent has fulfilled by the Lambda function
+     * associated with the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ReadyForFulfillment</code> - All of the information necessary for
+     * the intent is present and the intent ready to be fulfilled by the client
+     * application.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>Fulfilled, Failed, ReadyForFulfillment
+     *
+     * @param fulfillmentState <p>
+     *            The fulfillment state of the intent. The possible values are:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>Failed</code> - The Lambda function associated with the
+     *            intent failed to fulfill the intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Fulfilled</code> - The intent has fulfilled by the
+     *            Lambda function associated with the intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ReadyForFulfillment</code> - All of the information
+     *            necessary for the intent is present and the intent ready to be
+     *            fulfilled by the client application.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @see FulfillmentState
+     */
+    public void setFulfillmentState(FulfillmentState fulfillmentState) {
+        this.fulfillmentState = fulfillmentState.toString();
+    }
+
+    /**
+     * <p>
+     * The fulfillment state of the intent. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>Failed</code> - The Lambda function associated with the intent
+     * failed to fulfill the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Fulfilled</code> - The intent has fulfilled by the Lambda function
+     * associated with the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ReadyForFulfillment</code> - All of the information necessary for
+     * the intent is present and the intent ready to be fulfilled by the client
+     * application.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>Fulfilled, Failed, ReadyForFulfillment
+     *
+     * @param fulfillmentState <p>
+     *            The fulfillment state of the intent. The possible values are:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>Failed</code> - The Lambda function associated with the
+     *            intent failed to fulfill the intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Fulfilled</code> - The intent has fulfilled by the
+     *            Lambda function associated with the intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ReadyForFulfillment</code> - All of the information
+     *            necessary for the intent is present and the intent ready to be
+     *            fulfilled by the client application.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     * @see FulfillmentState
+     */
+    public DialogAction withFulfillmentState(FulfillmentState fulfillmentState) {
+        this.fulfillmentState = fulfillmentState.toString();
+        return this;
+    }
+
+    /**
+     * <p>
+     * The message that should be shown to the user. If you don't specify a
+     * message, Amazon Lex will use the message configured for the intent.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>1 - 1024<br/>
+     *
+     * @return <p>
+     *         The message that should be shown to the user. If you don't
+     *         specify a message, Amazon Lex will use the message configured for
+     *         the intent.
+     *         </p>
+     */
+    public String getMessage() {
+        return message;
+    }
+
+    /**
+     * <p>
+     * The message that should be shown to the user. If you don't specify a
+     * message, Amazon Lex will use the message configured for the intent.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>1 - 1024<br/>
+     *
+     * @param message <p>
+     *            The message that should be shown to the user. If you don't
+     *            specify a message, Amazon Lex will use the message configured
+     *            for the intent.
+     *            </p>
+     */
+    public void setMessage(String message) {
+        this.message = message;
+    }
+
+    /**
+     * <p>
+     * The message that should be shown to the user. If you don't specify a
+     * message, Amazon Lex will use the message configured for the intent.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>1 - 1024<br/>
+     *
+     * @param message <p>
+     *            The message that should be shown to the user. If you don't
+     *            specify a message, Amazon Lex will use the message configured
+     *            for the intent.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public DialogAction withMessage(String message) {
+        this.message = message;
+        return this;
+    }
+
+    /**
+     * <ul>
+     * <li>
+     * <p>
+     * <code>PlainText</code> - The message contains plain UTF-8 text.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>CustomPayload</code> - The message is a custom format for the
+     * client.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>SSML</code> - The message contains text formatted for voice output.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Composite</code> - The message contains an escaped JSON object
+     * containing one or more messages. For more information, see <a href=
+     * "https://docs.aws.amazon.com/lex/latest/dg/howitworks-manage-prompts.html"
+     * >Message Groups</a>.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>PlainText, CustomPayload, SSML, Composite
+     *
+     * @return <ul>
+     *         <li>
+     *         <p>
+     *         <code>PlainText</code> - The message contains plain UTF-8 text.
+     *         </p>
+     *         </li> <li>
+     *         <p>
+     *         <code>CustomPayload</code> - The message is a custom format for
+     *         the client.
+     *         </p>
+     *         </li> <li>
+     *         <p>
+     *         <code>SSML</code> - The message contains text formatted for voice
+     *         output.
+     *         </p>
+     *         </li> <li>
+     *         <p>
+     *         <code>Composite</code> - The message contains an escaped JSON
+     *         object containing one or more messages. For more information, see
+     *         <a href=
+     *         "https://docs.aws.amazon.com/lex/latest/dg/howitworks-manage-prompts.html"
+     *         >Message Groups</a>.
+     *         </p>
+     *         </li>
+     *         </ul>
+     * @see MessageFormatType
+     */
+    public String getMessageFormat() {
+        return messageFormat;
+    }
+
+    /**
+     * <ul>
+     * <li>
+     * <p>
+     * <code>PlainText</code> - The message contains plain UTF-8 text.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>CustomPayload</code> - The message is a custom format for the
+     * client.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>SSML</code> - The message contains text formatted for voice output.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Composite</code> - The message contains an escaped JSON object
+     * containing one or more messages. For more information, see <a href=
+     * "https://docs.aws.amazon.com/lex/latest/dg/howitworks-manage-prompts.html"
+     * >Message Groups</a>.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>PlainText, CustomPayload, SSML, Composite
+     *
+     * @param messageFormat <ul>
+     *            <li>
+     *            <p>
+     *            <code>PlainText</code> - The message contains plain UTF-8
+     *            text.
+     *            </p>
+     *            </li> <li>
+     *            <p>
+     *            <code>CustomPayload</code> - The message is a custom format
+     *            for the client.
+     *            </p>
+     *            </li> <li>
+     *            <p>
+     *            <code>SSML</code> - The message contains text formatted for
+     *            voice output.
+     *            </p>
+     *            </li> <li>
+     *            <p>
+     *            <code>Composite</code> - The message contains an escaped JSON
+     *            object containing one or more messages. For more information,
+     *            see <a href=
+     *            "https://docs.aws.amazon.com/lex/latest/dg/howitworks-manage-prompts.html"
+     *            >Message Groups</a>.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @see MessageFormatType
+     */
+    public void setMessageFormat(String messageFormat) {
+        this.messageFormat = messageFormat;
+    }
+
+    /**
+     * <ul>
+     * <li>
+     * <p>
+     * <code>PlainText</code> - The message contains plain UTF-8 text.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>CustomPayload</code> - The message is a custom format for the
+     * client.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>SSML</code> - The message contains text formatted for voice output.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Composite</code> - The message contains an escaped JSON object
+     * containing one or more messages. For more information, see <a href=
+     * "https://docs.aws.amazon.com/lex/latest/dg/howitworks-manage-prompts.html"
+     * >Message Groups</a>.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>PlainText, CustomPayload, SSML, Composite
+     *
+     * @param messageFormat <ul>
+     *            <li>
+     *            <p>
+     *            <code>PlainText</code> - The message contains plain UTF-8
+     *            text.
+     *            </p>
+     *            </li> <li>
+     *            <p>
+     *            <code>CustomPayload</code> - The message is a custom format
+     *            for the client.
+     *            </p>
+     *            </li> <li>
+     *            <p>
+     *            <code>SSML</code> - The message contains text formatted for
+     *            voice output.
+     *            </p>
+     *            </li> <li>
+     *            <p>
+     *            <code>Composite</code> - The message contains an escaped JSON
+     *            object containing one or more messages. For more information,
+     *            see <a href=
+     *            "https://docs.aws.amazon.com/lex/latest/dg/howitworks-manage-prompts.html"
+     *            >Message Groups</a>.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     * @see MessageFormatType
+     */
+    public DialogAction withMessageFormat(String messageFormat) {
+        this.messageFormat = messageFormat;
+        return this;
+    }
+
+    /**
+     * <ul>
+     * <li>
+     * <p>
+     * <code>PlainText</code> - The message contains plain UTF-8 text.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>CustomPayload</code> - The message is a custom format for the
+     * client.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>SSML</code> - The message contains text formatted for voice output.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Composite</code> - The message contains an escaped JSON object
+     * containing one or more messages. For more information, see <a href=
+     * "https://docs.aws.amazon.com/lex/latest/dg/howitworks-manage-prompts.html"
+     * >Message Groups</a>.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>PlainText, CustomPayload, SSML, Composite
+     *
+     * @param messageFormat <ul>
+     *            <li>
+     *            <p>
+     *            <code>PlainText</code> - The message contains plain UTF-8
+     *            text.
+     *            </p>
+     *            </li> <li>
+     *            <p>
+     *            <code>CustomPayload</code> - The message is a custom format
+     *            for the client.
+     *            </p>
+     *            </li> <li>
+     *            <p>
+     *            <code>SSML</code> - The message contains text formatted for
+     *            voice output.
+     *            </p>
+     *            </li> <li>
+     *            <p>
+     *            <code>Composite</code> - The message contains an escaped JSON
+     *            object containing one or more messages. For more information,
+     *            see <a href=
+     *            "https://docs.aws.amazon.com/lex/latest/dg/howitworks-manage-prompts.html"
+     *            >Message Groups</a>.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @see MessageFormatType
+     */
+    public void setMessageFormat(MessageFormatType messageFormat) {
+        this.messageFormat = messageFormat.toString();
+    }
+
+    /**
+     * <ul>
+     * <li>
+     * <p>
+     * <code>PlainText</code> - The message contains plain UTF-8 text.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>CustomPayload</code> - The message is a custom format for the
+     * client.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>SSML</code> - The message contains text formatted for voice output.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Composite</code> - The message contains an escaped JSON object
+     * containing one or more messages. For more information, see <a href=
+     * "https://docs.aws.amazon.com/lex/latest/dg/howitworks-manage-prompts.html"
+     * >Message Groups</a>.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>PlainText, CustomPayload, SSML, Composite
+     *
+     * @param messageFormat <ul>
+     *            <li>
+     *            <p>
+     *            <code>PlainText</code> - The message contains plain UTF-8
+     *            text.
+     *            </p>
+     *            </li> <li>
+     *            <p>
+     *            <code>CustomPayload</code> - The message is a custom format
+     *            for the client.
+     *            </p>
+     *            </li> <li>
+     *            <p>
+     *            <code>SSML</code> - The message contains text formatted for
+     *            voice output.
+     *            </p>
+     *            </li> <li>
+     *            <p>
+     *            <code>Composite</code> - The message contains an escaped JSON
+     *            object containing one or more messages. For more information,
+     *            see <a href=
+     *            "https://docs.aws.amazon.com/lex/latest/dg/howitworks-manage-prompts.html"
+     *            >Message Groups</a>.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     * @see MessageFormatType
+     */
+    public DialogAction withMessageFormat(MessageFormatType messageFormat) {
+        this.messageFormat = messageFormat.toString();
+        return this;
+    }
+
+    /**
+     * Returns a string representation of this object; useful for testing and
+     * debugging.
+     *
+     * @return A string representation of this object.
+     * @see java.lang.Object#toString()
+     */
+    @Override
+    public String toString() {
+        StringBuilder sb = new StringBuilder();
+        sb.append("{");
+        if (getType() != null)
+            sb.append("type: " + getType() + ",");
+        if (getIntentName() != null)
+            sb.append("intentName: " + getIntentName() + ",");
+        if (getSlots() != null)
+            sb.append("slots: " + getSlots() + ",");
+        if (getSlotToElicit() != null)
+            sb.append("slotToElicit: " + getSlotToElicit() + ",");
+        if (getFulfillmentState() != null)
+            sb.append("fulfillmentState: " + getFulfillmentState() + ",");
+        if (getMessage() != null)
+            sb.append("message: " + getMessage() + ",");
+        if (getMessageFormat() != null)
+            sb.append("messageFormat: " + getMessageFormat());
+        sb.append("}");
+        return sb.toString();
+    }
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int hashCode = 1;
+
+        hashCode = prime * hashCode + ((getType() == null) ? 0 : getType().hashCode());
+        hashCode = prime * hashCode + ((getIntentName() == null) ? 0 : getIntentName().hashCode());
+        hashCode = prime * hashCode + ((getSlots() == null) ? 0 : getSlots().hashCode());
+        hashCode = prime * hashCode
+                + ((getSlotToElicit() == null) ? 0 : getSlotToElicit().hashCode());
+        hashCode = prime * hashCode
+                + ((getFulfillmentState() == null) ? 0 : getFulfillmentState().hashCode());
+        hashCode = prime * hashCode + ((getMessage() == null) ? 0 : getMessage().hashCode());
+        hashCode = prime * hashCode
+                + ((getMessageFormat() == null) ? 0 : getMessageFormat().hashCode());
+        return hashCode;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj)
+            return true;
+        if (obj == null)
+            return false;
+
+        if (obj instanceof DialogAction == false)
+            return false;
+        DialogAction other = (DialogAction) obj;
+
+        if (other.getType() == null ^ this.getType() == null)
+            return false;
+        if (other.getType() != null && other.getType().equals(this.getType()) == false)
+            return false;
+        if (other.getIntentName() == null ^ this.getIntentName() == null)
+            return false;
+        if (other.getIntentName() != null
+                && other.getIntentName().equals(this.getIntentName()) == false)
+            return false;
+        if (other.getSlots() == null ^ this.getSlots() == null)
+            return false;
+        if (other.getSlots() != null && other.getSlots().equals(this.getSlots()) == false)
+            return false;
+        if (other.getSlotToElicit() == null ^ this.getSlotToElicit() == null)
+            return false;
+        if (other.getSlotToElicit() != null
+                && other.getSlotToElicit().equals(this.getSlotToElicit()) == false)
+            return false;
+        if (other.getFulfillmentState() == null ^ this.getFulfillmentState() == null)
+            return false;
+        if (other.getFulfillmentState() != null
+                && other.getFulfillmentState().equals(this.getFulfillmentState()) == false)
+            return false;
+        if (other.getMessage() == null ^ this.getMessage() == null)
+            return false;
+        if (other.getMessage() != null && other.getMessage().equals(this.getMessage()) == false)
+            return false;
+        if (other.getMessageFormat() == null ^ this.getMessageFormat() == null)
+            return false;
+        if (other.getMessageFormat() != null
+                && other.getMessageFormat().equals(this.getMessageFormat()) == false)
+            return false;
+        return true;
+    }
+}
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/DialogActionType.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/DialogActionType.java
new file mode 100644
index 0000000000..23d93305df
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/DialogActionType.java
@@ -0,0 +1,68 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.lexrts.model;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Dialog Action Type
+ */
+public enum DialogActionType {
+
+    ElicitIntent("ElicitIntent"),
+    ConfirmIntent("ConfirmIntent"),
+    ElicitSlot("ElicitSlot"),
+    Close("Close"),
+    Delegate("Delegate");
+
+    private String value;
+
+    private DialogActionType(String value) {
+        this.value = value;
+    }
+
+    @Override
+    public String toString() {
+        return value;
+    }
+
+    private static final Map<String, DialogActionType> enumMap;
+    static {
+        enumMap = new HashMap<String, DialogActionType>();
+        enumMap.put("ElicitIntent", ElicitIntent);
+        enumMap.put("ConfirmIntent", ConfirmIntent);
+        enumMap.put("ElicitSlot", ElicitSlot);
+        enumMap.put("Close", Close);
+        enumMap.put("Delegate", Delegate);
+    }
+
+    /**
+     * Use this in place of valueOf.
+     *
+     * @param value real value
+     * @return DialogActionType corresponding to the value
+     */
+    public static DialogActionType fromValue(String value) {
+        if (value == null || value.isEmpty()) {
+            throw new IllegalArgumentException("Value cannot be null or empty!");
+        } else if (enumMap.containsKey(value)) {
+            return enumMap.get(value);
+        } else {
+            throw new IllegalArgumentException("Cannot create enum from " + value + " value!");
+        }
+    }
+}
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/FulfillmentState.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/FulfillmentState.java
new file mode 100644
index 0000000000..3b446aaba9
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/FulfillmentState.java
@@ -0,0 +1,64 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.lexrts.model;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Fulfillment State
+ */
+public enum FulfillmentState {
+
+    Fulfilled("Fulfilled"),
+    Failed("Failed"),
+    ReadyForFulfillment("ReadyForFulfillment");
+
+    private String value;
+
+    private FulfillmentState(String value) {
+        this.value = value;
+    }
+
+    @Override
+    public String toString() {
+        return value;
+    }
+
+    private static final Map<String, FulfillmentState> enumMap;
+    static {
+        enumMap = new HashMap<String, FulfillmentState>();
+        enumMap.put("Fulfilled", Fulfilled);
+        enumMap.put("Failed", Failed);
+        enumMap.put("ReadyForFulfillment", ReadyForFulfillment);
+    }
+
+    /**
+     * Use this in place of valueOf.
+     *
+     * @param value real value
+     * @return FulfillmentState corresponding to the value
+     */
+    public static FulfillmentState fromValue(String value) {
+        if (value == null || value.isEmpty()) {
+            throw new IllegalArgumentException("Value cannot be null or empty!");
+        } else if (enumMap.containsKey(value)) {
+            return enumMap.get(value);
+        } else {
+            throw new IllegalArgumentException("Cannot create enum from " + value + " value!");
+        }
+    }
+}
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/GetSessionRequest.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/GetSessionRequest.java
new file mode 100644
index 0000000000..03a7b5f424
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/GetSessionRequest.java
@@ -0,0 +1,264 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.lexrts.model;
+
+import java.io.Serializable;
+
+import com.amazonaws.AmazonWebServiceRequest;
+
+/**
+ * <p>
+ * Returns session information for a specified bot, alias, and user ID.
+ * </p>
+ */
+public class GetSessionRequest extends AmazonWebServiceRequest implements Serializable {
+    /**
+     * <p>
+     * The name of the bot that contains the session data.
+     * </p>
+     */
+    private String botName;
+
+    /**
+     * <p>
+     * The alias in use for the bot that contains the session data.
+     * </p>
+     */
+    private String botAlias;
+
+    /**
+     * <p>
+     * The ID of the client application user. Amazon Lex uses this to identify a
+     * user's conversation with your bot.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>2 - 100<br/>
+     * <b>Pattern: </b>[0-9a-zA-Z._:-]+<br/>
+     */
+    private String userId;
+
+    /**
+     * <p>
+     * The name of the bot that contains the session data.
+     * </p>
+     *
+     * @return <p>
+     *         The name of the bot that contains the session data.
+     *         </p>
+     */
+    public String getBotName() {
+        return botName;
+    }
+
+    /**
+     * <p>
+     * The name of the bot that contains the session data.
+     * </p>
+     *
+     * @param botName <p>
+     *            The name of the bot that contains the session data.
+     *            </p>
+     */
+    public void setBotName(String botName) {
+        this.botName = botName;
+    }
+
+    /**
+     * <p>
+     * The name of the bot that contains the session data.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param botName <p>
+     *            The name of the bot that contains the session data.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public GetSessionRequest withBotName(String botName) {
+        this.botName = botName;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The alias in use for the bot that contains the session data.
+     * </p>
+     *
+     * @return <p>
+     *         The alias in use for the bot that contains the session data.
+     *         </p>
+     */
+    public String getBotAlias() {
+        return botAlias;
+    }
+
+    /**
+     * <p>
+     * The alias in use for the bot that contains the session data.
+     * </p>
+     *
+     * @param botAlias <p>
+     *            The alias in use for the bot that contains the session data.
+     *            </p>
+     */
+    public void setBotAlias(String botAlias) {
+        this.botAlias = botAlias;
+    }
+
+    /**
+     * <p>
+     * The alias in use for the bot that contains the session data.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param botAlias <p>
+     *            The alias in use for the bot that contains the session data.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public GetSessionRequest withBotAlias(String botAlias) {
+        this.botAlias = botAlias;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The ID of the client application user. Amazon Lex uses this to identify a
+     * user's conversation with your bot.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>2 - 100<br/>
+     * <b>Pattern: </b>[0-9a-zA-Z._:-]+<br/>
+     *
+     * @return <p>
+     *         The ID of the client application user. Amazon Lex uses this to
+     *         identify a user's conversation with your bot.
+     *         </p>
+     */
+    public String getUserId() {
+        return userId;
+    }
+
+    /**
+     * <p>
+     * The ID of the client application user. Amazon Lex uses this to identify a
+     * user's conversation with your bot.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>2 - 100<br/>
+     * <b>Pattern: </b>[0-9a-zA-Z._:-]+<br/>
+     *
+     * @param userId <p>
+     *            The ID of the client application user. Amazon Lex uses this to
+     *            identify a user's conversation with your bot.
+     *            </p>
+     */
+    public void setUserId(String userId) {
+        this.userId = userId;
+    }
+
+    /**
+     * <p>
+     * The ID of the client application user. Amazon Lex uses this to identify a
+     * user's conversation with your bot.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>2 - 100<br/>
+     * <b>Pattern: </b>[0-9a-zA-Z._:-]+<br/>
+     *
+     * @param userId <p>
+     *            The ID of the client application user. Amazon Lex uses this to
+     *            identify a user's conversation with your bot.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public GetSessionRequest withUserId(String userId) {
+        this.userId = userId;
+        return this;
+    }
+
+    /**
+     * Returns a string representation of this object; useful for testing and
+     * debugging.
+     *
+     * @return A string representation of this object.
+     * @see java.lang.Object#toString()
+     */
+    @Override
+    public String toString() {
+        StringBuilder sb = new StringBuilder();
+        sb.append("{");
+        if (getBotName() != null)
+            sb.append("botName: " + getBotName() + ",");
+        if (getBotAlias() != null)
+            sb.append("botAlias: " + getBotAlias() + ",");
+        if (getUserId() != null)
+            sb.append("userId: " + getUserId());
+        sb.append("}");
+        return sb.toString();
+    }
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int hashCode = 1;
+
+        hashCode = prime * hashCode + ((getBotName() == null) ? 0 : getBotName().hashCode());
+        hashCode = prime * hashCode + ((getBotAlias() == null) ? 0 : getBotAlias().hashCode());
+        hashCode = prime * hashCode + ((getUserId() == null) ? 0 : getUserId().hashCode());
+        return hashCode;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj)
+            return true;
+        if (obj == null)
+            return false;
+
+        if (obj instanceof GetSessionRequest == false)
+            return false;
+        GetSessionRequest other = (GetSessionRequest) obj;
+
+        if (other.getBotName() == null ^ this.getBotName() == null)
+            return false;
+        if (other.getBotName() != null && other.getBotName().equals(this.getBotName()) == false)
+            return false;
+        if (other.getBotAlias() == null ^ this.getBotAlias() == null)
+            return false;
+        if (other.getBotAlias() != null && other.getBotAlias().equals(this.getBotAlias()) == false)
+            return false;
+        if (other.getUserId() == null ^ this.getUserId() == null)
+            return false;
+        if (other.getUserId() != null && other.getUserId().equals(this.getUserId()) == false)
+            return false;
+        return true;
+    }
+}
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/GetSessionResult.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/GetSessionResult.java
new file mode 100644
index 0000000000..d5733b4908
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/GetSessionResult.java
@@ -0,0 +1,419 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.lexrts.model;
+
+import java.io.Serializable;
+
+public class GetSessionResult implements Serializable {
+    /**
+     * <p>
+     * An array of information about the intents used in the session. The array
+     * can contain a maximum of three summaries. If more than three intents are
+     * used in the session, the <code>recentIntentSummaryView</code> operation
+     * contains information about the last three intents used.
+     * </p>
+     */
+    private java.util.List<IntentSummary> recentIntentSummaryView;
+
+    /**
+     * <p>
+     * Map of key/value pairs representing the session-specific context
+     * information. It contains application information passed between Amazon
+     * Lex and a client application.
+     * </p>
+     */
+    private java.util.Map<String, String> sessionAttributes;
+
+    /**
+     * <p>
+     * A unique identifier for the session.
+     * </p>
+     */
+    private String sessionId;
+
+    /**
+     * <p>
+     * Describes the current state of the bot.
+     * </p>
+     */
+    private DialogAction dialogAction;
+
+    /**
+     * <p>
+     * An array of information about the intents used in the session. The array
+     * can contain a maximum of three summaries. If more than three intents are
+     * used in the session, the <code>recentIntentSummaryView</code> operation
+     * contains information about the last three intents used.
+     * </p>
+     *
+     * @return <p>
+     *         An array of information about the intents used in the session.
+     *         The array can contain a maximum of three summaries. If more than
+     *         three intents are used in the session, the
+     *         <code>recentIntentSummaryView</code> operation contains
+     *         information about the last three intents used.
+     *         </p>
+     */
+    public java.util.List<IntentSummary> getRecentIntentSummaryView() {
+        return recentIntentSummaryView;
+    }
+
+    /**
+     * <p>
+     * An array of information about the intents used in the session. The array
+     * can contain a maximum of three summaries. If more than three intents are
+     * used in the session, the <code>recentIntentSummaryView</code> operation
+     * contains information about the last three intents used.
+     * </p>
+     *
+     * @param recentIntentSummaryView <p>
+     *            An array of information about the intents used in the session.
+     *            The array can contain a maximum of three summaries. If more
+     *            than three intents are used in the session, the
+     *            <code>recentIntentSummaryView</code> operation contains
+     *            information about the last three intents used.
+     *            </p>
+     */
+    public void setRecentIntentSummaryView(
+            java.util.Collection<IntentSummary> recentIntentSummaryView) {
+        if (recentIntentSummaryView == null) {
+            this.recentIntentSummaryView = null;
+            return;
+        }
+
+        this.recentIntentSummaryView = new java.util.ArrayList<IntentSummary>(
+                recentIntentSummaryView);
+    }
+
+    /**
+     * <p>
+     * An array of information about the intents used in the session. The array
+     * can contain a maximum of three summaries. If more than three intents are
+     * used in the session, the <code>recentIntentSummaryView</code> operation
+     * contains information about the last three intents used.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param recentIntentSummaryView <p>
+     *            An array of information about the intents used in the session.
+     *            The array can contain a maximum of three summaries. If more
+     *            than three intents are used in the session, the
+     *            <code>recentIntentSummaryView</code> operation contains
+     *            information about the last three intents used.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public GetSessionResult withRecentIntentSummaryView(IntentSummary... recentIntentSummaryView) {
+        if (getRecentIntentSummaryView() == null) {
+            this.recentIntentSummaryView = new java.util.ArrayList<IntentSummary>(
+                    recentIntentSummaryView.length);
+        }
+        for (IntentSummary value : recentIntentSummaryView) {
+            this.recentIntentSummaryView.add(value);
+        }
+        return this;
+    }
+
+    /**
+     * <p>
+     * An array of information about the intents used in the session. The array
+     * can contain a maximum of three summaries. If more than three intents are
+     * used in the session, the <code>recentIntentSummaryView</code> operation
+     * contains information about the last three intents used.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param recentIntentSummaryView <p>
+     *            An array of information about the intents used in the session.
+     *            The array can contain a maximum of three summaries. If more
+     *            than three intents are used in the session, the
+     *            <code>recentIntentSummaryView</code> operation contains
+     *            information about the last three intents used.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public GetSessionResult withRecentIntentSummaryView(
+            java.util.Collection<IntentSummary> recentIntentSummaryView) {
+        setRecentIntentSummaryView(recentIntentSummaryView);
+        return this;
+    }
+
+    /**
+     * <p>
+     * Map of key/value pairs representing the session-specific context
+     * information. It contains application information passed between Amazon
+     * Lex and a client application.
+     * </p>
+     *
+     * @return <p>
+     *         Map of key/value pairs representing the session-specific context
+     *         information. It contains application information passed between
+     *         Amazon Lex and a client application.
+     *         </p>
+     */
+    public java.util.Map<String, String> getSessionAttributes() {
+        return sessionAttributes;
+    }
+
+    /**
+     * <p>
+     * Map of key/value pairs representing the session-specific context
+     * information. It contains application information passed between Amazon
+     * Lex and a client application.
+     * </p>
+     *
+     * @param sessionAttributes <p>
+     *            Map of key/value pairs representing the session-specific
+     *            context information. It contains application information
+     *            passed between Amazon Lex and a client application.
+     *            </p>
+     */
+    public void setSessionAttributes(java.util.Map<String, String> sessionAttributes) {
+        this.sessionAttributes = sessionAttributes;
+    }
+
+    /**
+     * <p>
+     * Map of key/value pairs representing the session-specific context
+     * information. It contains application information passed between Amazon
+     * Lex and a client application.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param sessionAttributes <p>
+     *            Map of key/value pairs representing the session-specific
+     *            context information. It contains application information
+     *            passed between Amazon Lex and a client application.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public GetSessionResult withSessionAttributes(java.util.Map<String, String> sessionAttributes) {
+        this.sessionAttributes = sessionAttributes;
+        return this;
+    }
+
+    /**
+     * <p>
+     * Map of key/value pairs representing the session-specific context
+     * information. It contains application information passed between Amazon
+     * Lex and a client application.
+     * </p>
+     * <p>
+     * The method adds a new key-value pair into sessionAttributes parameter,
+     * and returns a reference to this object so that method calls can be
+     * chained together.
+     *
+     * @param key The key of the entry to be added into sessionAttributes.
+     * @param value The corresponding value of the entry to be added into
+     *            sessionAttributes.
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public GetSessionResult addsessionAttributesEntry(String key, String value) {
+        if (null == this.sessionAttributes) {
+            this.sessionAttributes = new java.util.HashMap<String, String>();
+        }
+        if (this.sessionAttributes.containsKey(key))
+            throw new IllegalArgumentException("Duplicated keys (" + key.toString()
+                    + ") are provided.");
+        this.sessionAttributes.put(key, value);
+        return this;
+    }
+
+    /**
+     * Removes all the entries added into sessionAttributes.
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     */
+    public GetSessionResult clearsessionAttributesEntries() {
+        this.sessionAttributes = null;
+        return this;
+    }
+
+    /**
+     * <p>
+     * A unique identifier for the session.
+     * </p>
+     *
+     * @return <p>
+     *         A unique identifier for the session.
+     *         </p>
+     */
+    public String getSessionId() {
+        return sessionId;
+    }
+
+    /**
+     * <p>
+     * A unique identifier for the session.
+     * </p>
+     *
+     * @param sessionId <p>
+     *            A unique identifier for the session.
+     *            </p>
+     */
+    public void setSessionId(String sessionId) {
+        this.sessionId = sessionId;
+    }
+
+    /**
+     * <p>
+     * A unique identifier for the session.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param sessionId <p>
+     *            A unique identifier for the session.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public GetSessionResult withSessionId(String sessionId) {
+        this.sessionId = sessionId;
+        return this;
+    }
+
+    /**
+     * <p>
+     * Describes the current state of the bot.
+     * </p>
+     *
+     * @return <p>
+     *         Describes the current state of the bot.
+     *         </p>
+     */
+    public DialogAction getDialogAction() {
+        return dialogAction;
+    }
+
+    /**
+     * <p>
+     * Describes the current state of the bot.
+     * </p>
+     *
+     * @param dialogAction <p>
+     *            Describes the current state of the bot.
+     *            </p>
+     */
+    public void setDialogAction(DialogAction dialogAction) {
+        this.dialogAction = dialogAction;
+    }
+
+    /**
+     * <p>
+     * Describes the current state of the bot.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param dialogAction <p>
+     *            Describes the current state of the bot.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public GetSessionResult withDialogAction(DialogAction dialogAction) {
+        this.dialogAction = dialogAction;
+        return this;
+    }
+
+    /**
+     * Returns a string representation of this object; useful for testing and
+     * debugging.
+     *
+     * @return A string representation of this object.
+     * @see java.lang.Object#toString()
+     */
+    @Override
+    public String toString() {
+        StringBuilder sb = new StringBuilder();
+        sb.append("{");
+        if (getRecentIntentSummaryView() != null)
+            sb.append("recentIntentSummaryView: " + getRecentIntentSummaryView() + ",");
+        if (getSessionAttributes() != null)
+            sb.append("sessionAttributes: " + getSessionAttributes() + ",");
+        if (getSessionId() != null)
+            sb.append("sessionId: " + getSessionId() + ",");
+        if (getDialogAction() != null)
+            sb.append("dialogAction: " + getDialogAction());
+        sb.append("}");
+        return sb.toString();
+    }
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int hashCode = 1;
+
+        hashCode = prime
+                * hashCode
+                + ((getRecentIntentSummaryView() == null) ? 0 : getRecentIntentSummaryView()
+                        .hashCode());
+        hashCode = prime * hashCode
+                + ((getSessionAttributes() == null) ? 0 : getSessionAttributes().hashCode());
+        hashCode = prime * hashCode + ((getSessionId() == null) ? 0 : getSessionId().hashCode());
+        hashCode = prime * hashCode
+                + ((getDialogAction() == null) ? 0 : getDialogAction().hashCode());
+        return hashCode;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj)
+            return true;
+        if (obj == null)
+            return false;
+
+        if (obj instanceof GetSessionResult == false)
+            return false;
+        GetSessionResult other = (GetSessionResult) obj;
+
+        if (other.getRecentIntentSummaryView() == null ^ this.getRecentIntentSummaryView() == null)
+            return false;
+        if (other.getRecentIntentSummaryView() != null
+                && other.getRecentIntentSummaryView().equals(this.getRecentIntentSummaryView()) == false)
+            return false;
+        if (other.getSessionAttributes() == null ^ this.getSessionAttributes() == null)
+            return false;
+        if (other.getSessionAttributes() != null
+                && other.getSessionAttributes().equals(this.getSessionAttributes()) == false)
+            return false;
+        if (other.getSessionId() == null ^ this.getSessionId() == null)
+            return false;
+        if (other.getSessionId() != null
+                && other.getSessionId().equals(this.getSessionId()) == false)
+            return false;
+        if (other.getDialogAction() == null ^ this.getDialogAction() == null)
+            return false;
+        if (other.getDialogAction() != null
+                && other.getDialogAction().equals(this.getDialogAction()) == false)
+            return false;
+        return true;
+    }
+}
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/IntentSummary.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/IntentSummary.java
new file mode 100644
index 0000000000..3f1bfce901
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/IntentSummary.java
@@ -0,0 +1,1464 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.lexrts.model;
+
+import java.io.Serializable;
+
+/**
+ * <p>
+ * Provides information about the state of an intent. You can use this
+ * information to get the current state of an intent so that you can process the
+ * intent, or so that you can return the intent to its previous state.
+ * </p>
+ */
+public class IntentSummary implements Serializable {
+    /**
+     * <p>
+     * The name of the intent.
+     * </p>
+     */
+    private String intentName;
+
+    /**
+     * <p>
+     * Map of the slots that have been gathered and their values.
+     * </p>
+     */
+    private java.util.Map<String, String> slots;
+
+    /**
+     * <p>
+     * The status of the intent after the user responds to the confirmation
+     * prompt. If the user confirms the intent, Amazon Lex sets this field to
+     * <code>Confirmed</code>. If the user denies the intent, Amazon Lex sets
+     * this value to <code>Denied</code>. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>Confirmed</code> - The user has responded "Yes" to the confirmation
+     * prompt, confirming that the intent is complete and that it is ready to be
+     * fulfilled.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Denied</code> - The user has responded "No" to the confirmation
+     * prompt.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>None</code> - The user has never been prompted for confirmation;
+     * or, the user was prompted but did not confirm or deny the prompt.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>None, Confirmed, Denied
+     */
+    private String confirmationStatus;
+
+    /**
+     * <p>
+     * The next action that the bot should take in its interaction with the
+     * user. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>ConfirmIntent</code> - The next action is asking the user if the
+     * intent is complete and ready to be fulfilled. This is a yes/no question
+     * such as "Place the order?"
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Close</code> - Indicates that the there will not be a response from
+     * the user. For example, the statement "Your order has been placed" does
+     * not require a response.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitIntent</code> - The next action is to determine the intent
+     * that the user wants to fulfill.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitSlot</code> - The next action is to elicit a slot value from
+     * the user.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>ElicitIntent, ConfirmIntent, ElicitSlot, Close,
+     * Delegate
+     */
+    private String dialogActionType;
+
+    /**
+     * <p>
+     * The fulfillment state of the intent. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>Failed</code> - The Lambda function associated with the intent
+     * failed to fulfill the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Fulfilled</code> - The intent has fulfilled by the Lambda function
+     * associated with the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ReadyForFulfillment</code> - All of the information necessary for
+     * the intent is present and the intent ready to be fulfilled by the client
+     * application.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>Fulfilled, Failed, ReadyForFulfillment
+     */
+    private String fulfillmentState;
+
+    /**
+     * <p>
+     * The next slot to elicit from the user. If there is not slot to elicit,
+     * the field is blank.
+     * </p>
+     */
+    private String slotToElicit;
+
+    /**
+     * <p>
+     * The name of the intent.
+     * </p>
+     *
+     * @return <p>
+     *         The name of the intent.
+     *         </p>
+     */
+    public String getIntentName() {
+        return intentName;
+    }
+
+    /**
+     * <p>
+     * The name of the intent.
+     * </p>
+     *
+     * @param intentName <p>
+     *            The name of the intent.
+     *            </p>
+     */
+    public void setIntentName(String intentName) {
+        this.intentName = intentName;
+    }
+
+    /**
+     * <p>
+     * The name of the intent.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param intentName <p>
+     *            The name of the intent.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public IntentSummary withIntentName(String intentName) {
+        this.intentName = intentName;
+        return this;
+    }
+
+    /**
+     * <p>
+     * Map of the slots that have been gathered and their values.
+     * </p>
+     *
+     * @return <p>
+     *         Map of the slots that have been gathered and their values.
+     *         </p>
+     */
+    public java.util.Map<String, String> getSlots() {
+        return slots;
+    }
+
+    /**
+     * <p>
+     * Map of the slots that have been gathered and their values.
+     * </p>
+     *
+     * @param slots <p>
+     *            Map of the slots that have been gathered and their values.
+     *            </p>
+     */
+    public void setSlots(java.util.Map<String, String> slots) {
+        this.slots = slots;
+    }
+
+    /**
+     * <p>
+     * Map of the slots that have been gathered and their values.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param slots <p>
+     *            Map of the slots that have been gathered and their values.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public IntentSummary withSlots(java.util.Map<String, String> slots) {
+        this.slots = slots;
+        return this;
+    }
+
+    /**
+     * <p>
+     * Map of the slots that have been gathered and their values.
+     * </p>
+     * <p>
+     * The method adds a new key-value pair into slots parameter, and returns a
+     * reference to this object so that method calls can be chained together.
+     *
+     * @param key The key of the entry to be added into slots.
+     * @param value The corresponding value of the entry to be added into slots.
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public IntentSummary addslotsEntry(String key, String value) {
+        if (null == this.slots) {
+            this.slots = new java.util.HashMap<String, String>();
+        }
+        if (this.slots.containsKey(key))
+            throw new IllegalArgumentException("Duplicated keys (" + key.toString()
+                    + ") are provided.");
+        this.slots.put(key, value);
+        return this;
+    }
+
+    /**
+     * Removes all the entries added into slots.
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     */
+    public IntentSummary clearslotsEntries() {
+        this.slots = null;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The status of the intent after the user responds to the confirmation
+     * prompt. If the user confirms the intent, Amazon Lex sets this field to
+     * <code>Confirmed</code>. If the user denies the intent, Amazon Lex sets
+     * this value to <code>Denied</code>. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>Confirmed</code> - The user has responded "Yes" to the confirmation
+     * prompt, confirming that the intent is complete and that it is ready to be
+     * fulfilled.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Denied</code> - The user has responded "No" to the confirmation
+     * prompt.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>None</code> - The user has never been prompted for confirmation;
+     * or, the user was prompted but did not confirm or deny the prompt.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>None, Confirmed, Denied
+     *
+     * @return <p>
+     *         The status of the intent after the user responds to the
+     *         confirmation prompt. If the user confirms the intent, Amazon Lex
+     *         sets this field to <code>Confirmed</code>. If the user denies the
+     *         intent, Amazon Lex sets this value to <code>Denied</code>. The
+     *         possible values are:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         <code>Confirmed</code> - The user has responded "Yes" to the
+     *         confirmation prompt, confirming that the intent is complete and
+     *         that it is ready to be fulfilled.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>Denied</code> - The user has responded "No" to the
+     *         confirmation prompt.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>None</code> - The user has never been prompted for
+     *         confirmation; or, the user was prompted but did not confirm or
+     *         deny the prompt.
+     *         </p>
+     *         </li>
+     *         </ul>
+     * @see ConfirmationStatus
+     */
+    public String getConfirmationStatus() {
+        return confirmationStatus;
+    }
+
+    /**
+     * <p>
+     * The status of the intent after the user responds to the confirmation
+     * prompt. If the user confirms the intent, Amazon Lex sets this field to
+     * <code>Confirmed</code>. If the user denies the intent, Amazon Lex sets
+     * this value to <code>Denied</code>. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>Confirmed</code> - The user has responded "Yes" to the confirmation
+     * prompt, confirming that the intent is complete and that it is ready to be
+     * fulfilled.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Denied</code> - The user has responded "No" to the confirmation
+     * prompt.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>None</code> - The user has never been prompted for confirmation;
+     * or, the user was prompted but did not confirm or deny the prompt.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>None, Confirmed, Denied
+     *
+     * @param confirmationStatus <p>
+     *            The status of the intent after the user responds to the
+     *            confirmation prompt. If the user confirms the intent, Amazon
+     *            Lex sets this field to <code>Confirmed</code>. If the user
+     *            denies the intent, Amazon Lex sets this value to
+     *            <code>Denied</code>. The possible values are:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>Confirmed</code> - The user has responded "Yes" to the
+     *            confirmation prompt, confirming that the intent is complete
+     *            and that it is ready to be fulfilled.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Denied</code> - The user has responded "No" to the
+     *            confirmation prompt.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>None</code> - The user has never been prompted for
+     *            confirmation; or, the user was prompted but did not confirm or
+     *            deny the prompt.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @see ConfirmationStatus
+     */
+    public void setConfirmationStatus(String confirmationStatus) {
+        this.confirmationStatus = confirmationStatus;
+    }
+
+    /**
+     * <p>
+     * The status of the intent after the user responds to the confirmation
+     * prompt. If the user confirms the intent, Amazon Lex sets this field to
+     * <code>Confirmed</code>. If the user denies the intent, Amazon Lex sets
+     * this value to <code>Denied</code>. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>Confirmed</code> - The user has responded "Yes" to the confirmation
+     * prompt, confirming that the intent is complete and that it is ready to be
+     * fulfilled.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Denied</code> - The user has responded "No" to the confirmation
+     * prompt.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>None</code> - The user has never been prompted for confirmation;
+     * or, the user was prompted but did not confirm or deny the prompt.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>None, Confirmed, Denied
+     *
+     * @param confirmationStatus <p>
+     *            The status of the intent after the user responds to the
+     *            confirmation prompt. If the user confirms the intent, Amazon
+     *            Lex sets this field to <code>Confirmed</code>. If the user
+     *            denies the intent, Amazon Lex sets this value to
+     *            <code>Denied</code>. The possible values are:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>Confirmed</code> - The user has responded "Yes" to the
+     *            confirmation prompt, confirming that the intent is complete
+     *            and that it is ready to be fulfilled.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Denied</code> - The user has responded "No" to the
+     *            confirmation prompt.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>None</code> - The user has never been prompted for
+     *            confirmation; or, the user was prompted but did not confirm or
+     *            deny the prompt.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     * @see ConfirmationStatus
+     */
+    public IntentSummary withConfirmationStatus(String confirmationStatus) {
+        this.confirmationStatus = confirmationStatus;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The status of the intent after the user responds to the confirmation
+     * prompt. If the user confirms the intent, Amazon Lex sets this field to
+     * <code>Confirmed</code>. If the user denies the intent, Amazon Lex sets
+     * this value to <code>Denied</code>. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>Confirmed</code> - The user has responded "Yes" to the confirmation
+     * prompt, confirming that the intent is complete and that it is ready to be
+     * fulfilled.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Denied</code> - The user has responded "No" to the confirmation
+     * prompt.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>None</code> - The user has never been prompted for confirmation;
+     * or, the user was prompted but did not confirm or deny the prompt.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>None, Confirmed, Denied
+     *
+     * @param confirmationStatus <p>
+     *            The status of the intent after the user responds to the
+     *            confirmation prompt. If the user confirms the intent, Amazon
+     *            Lex sets this field to <code>Confirmed</code>. If the user
+     *            denies the intent, Amazon Lex sets this value to
+     *            <code>Denied</code>. The possible values are:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>Confirmed</code> - The user has responded "Yes" to the
+     *            confirmation prompt, confirming that the intent is complete
+     *            and that it is ready to be fulfilled.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Denied</code> - The user has responded "No" to the
+     *            confirmation prompt.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>None</code> - The user has never been prompted for
+     *            confirmation; or, the user was prompted but did not confirm or
+     *            deny the prompt.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @see ConfirmationStatus
+     */
+    public void setConfirmationStatus(ConfirmationStatus confirmationStatus) {
+        this.confirmationStatus = confirmationStatus.toString();
+    }
+
+    /**
+     * <p>
+     * The status of the intent after the user responds to the confirmation
+     * prompt. If the user confirms the intent, Amazon Lex sets this field to
+     * <code>Confirmed</code>. If the user denies the intent, Amazon Lex sets
+     * this value to <code>Denied</code>. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>Confirmed</code> - The user has responded "Yes" to the confirmation
+     * prompt, confirming that the intent is complete and that it is ready to be
+     * fulfilled.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Denied</code> - The user has responded "No" to the confirmation
+     * prompt.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>None</code> - The user has never been prompted for confirmation;
+     * or, the user was prompted but did not confirm or deny the prompt.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>None, Confirmed, Denied
+     *
+     * @param confirmationStatus <p>
+     *            The status of the intent after the user responds to the
+     *            confirmation prompt. If the user confirms the intent, Amazon
+     *            Lex sets this field to <code>Confirmed</code>. If the user
+     *            denies the intent, Amazon Lex sets this value to
+     *            <code>Denied</code>. The possible values are:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>Confirmed</code> - The user has responded "Yes" to the
+     *            confirmation prompt, confirming that the intent is complete
+     *            and that it is ready to be fulfilled.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Denied</code> - The user has responded "No" to the
+     *            confirmation prompt.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>None</code> - The user has never been prompted for
+     *            confirmation; or, the user was prompted but did not confirm or
+     *            deny the prompt.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     * @see ConfirmationStatus
+     */
+    public IntentSummary withConfirmationStatus(ConfirmationStatus confirmationStatus) {
+        this.confirmationStatus = confirmationStatus.toString();
+        return this;
+    }
+
+    /**
+     * <p>
+     * The next action that the bot should take in its interaction with the
+     * user. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>ConfirmIntent</code> - The next action is asking the user if the
+     * intent is complete and ready to be fulfilled. This is a yes/no question
+     * such as "Place the order?"
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Close</code> - Indicates that the there will not be a response from
+     * the user. For example, the statement "Your order has been placed" does
+     * not require a response.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitIntent</code> - The next action is to determine the intent
+     * that the user wants to fulfill.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitSlot</code> - The next action is to elicit a slot value from
+     * the user.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>ElicitIntent, ConfirmIntent, ElicitSlot, Close,
+     * Delegate
+     *
+     * @return <p>
+     *         The next action that the bot should take in its interaction with
+     *         the user. The possible values are:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         <code>ConfirmIntent</code> - The next action is asking the user
+     *         if the intent is complete and ready to be fulfilled. This is a
+     *         yes/no question such as "Place the order?"
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>Close</code> - Indicates that the there will not be a
+     *         response from the user. For example, the statement
+     *         "Your order has been placed" does not require a response.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>ElicitIntent</code> - The next action is to determine the
+     *         intent that the user wants to fulfill.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>ElicitSlot</code> - The next action is to elicit a slot
+     *         value from the user.
+     *         </p>
+     *         </li>
+     *         </ul>
+     * @see DialogActionType
+     */
+    public String getDialogActionType() {
+        return dialogActionType;
+    }
+
+    /**
+     * <p>
+     * The next action that the bot should take in its interaction with the
+     * user. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>ConfirmIntent</code> - The next action is asking the user if the
+     * intent is complete and ready to be fulfilled. This is a yes/no question
+     * such as "Place the order?"
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Close</code> - Indicates that the there will not be a response from
+     * the user. For example, the statement "Your order has been placed" does
+     * not require a response.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitIntent</code> - The next action is to determine the intent
+     * that the user wants to fulfill.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitSlot</code> - The next action is to elicit a slot value from
+     * the user.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>ElicitIntent, ConfirmIntent, ElicitSlot, Close,
+     * Delegate
+     *
+     * @param dialogActionType <p>
+     *            The next action that the bot should take in its interaction
+     *            with the user. The possible values are:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>ConfirmIntent</code> - The next action is asking the
+     *            user if the intent is complete and ready to be fulfilled. This
+     *            is a yes/no question such as "Place the order?"
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Close</code> - Indicates that the there will not be a
+     *            response from the user. For example, the statement
+     *            "Your order has been placed" does not require a response.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ElicitIntent</code> - The next action is to determine
+     *            the intent that the user wants to fulfill.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ElicitSlot</code> - The next action is to elicit a slot
+     *            value from the user.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @see DialogActionType
+     */
+    public void setDialogActionType(String dialogActionType) {
+        this.dialogActionType = dialogActionType;
+    }
+
+    /**
+     * <p>
+     * The next action that the bot should take in its interaction with the
+     * user. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>ConfirmIntent</code> - The next action is asking the user if the
+     * intent is complete and ready to be fulfilled. This is a yes/no question
+     * such as "Place the order?"
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Close</code> - Indicates that the there will not be a response from
+     * the user. For example, the statement "Your order has been placed" does
+     * not require a response.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitIntent</code> - The next action is to determine the intent
+     * that the user wants to fulfill.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitSlot</code> - The next action is to elicit a slot value from
+     * the user.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>ElicitIntent, ConfirmIntent, ElicitSlot, Close,
+     * Delegate
+     *
+     * @param dialogActionType <p>
+     *            The next action that the bot should take in its interaction
+     *            with the user. The possible values are:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>ConfirmIntent</code> - The next action is asking the
+     *            user if the intent is complete and ready to be fulfilled. This
+     *            is a yes/no question such as "Place the order?"
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Close</code> - Indicates that the there will not be a
+     *            response from the user. For example, the statement
+     *            "Your order has been placed" does not require a response.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ElicitIntent</code> - The next action is to determine
+     *            the intent that the user wants to fulfill.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ElicitSlot</code> - The next action is to elicit a slot
+     *            value from the user.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     * @see DialogActionType
+     */
+    public IntentSummary withDialogActionType(String dialogActionType) {
+        this.dialogActionType = dialogActionType;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The next action that the bot should take in its interaction with the
+     * user. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>ConfirmIntent</code> - The next action is asking the user if the
+     * intent is complete and ready to be fulfilled. This is a yes/no question
+     * such as "Place the order?"
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Close</code> - Indicates that the there will not be a response from
+     * the user. For example, the statement "Your order has been placed" does
+     * not require a response.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitIntent</code> - The next action is to determine the intent
+     * that the user wants to fulfill.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitSlot</code> - The next action is to elicit a slot value from
+     * the user.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>ElicitIntent, ConfirmIntent, ElicitSlot, Close,
+     * Delegate
+     *
+     * @param dialogActionType <p>
+     *            The next action that the bot should take in its interaction
+     *            with the user. The possible values are:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>ConfirmIntent</code> - The next action is asking the
+     *            user if the intent is complete and ready to be fulfilled. This
+     *            is a yes/no question such as "Place the order?"
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Close</code> - Indicates that the there will not be a
+     *            response from the user. For example, the statement
+     *            "Your order has been placed" does not require a response.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ElicitIntent</code> - The next action is to determine
+     *            the intent that the user wants to fulfill.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ElicitSlot</code> - The next action is to elicit a slot
+     *            value from the user.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @see DialogActionType
+     */
+    public void setDialogActionType(DialogActionType dialogActionType) {
+        this.dialogActionType = dialogActionType.toString();
+    }
+
+    /**
+     * <p>
+     * The next action that the bot should take in its interaction with the
+     * user. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>ConfirmIntent</code> - The next action is asking the user if the
+     * intent is complete and ready to be fulfilled. This is a yes/no question
+     * such as "Place the order?"
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Close</code> - Indicates that the there will not be a response from
+     * the user. For example, the statement "Your order has been placed" does
+     * not require a response.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitIntent</code> - The next action is to determine the intent
+     * that the user wants to fulfill.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitSlot</code> - The next action is to elicit a slot value from
+     * the user.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>ElicitIntent, ConfirmIntent, ElicitSlot, Close,
+     * Delegate
+     *
+     * @param dialogActionType <p>
+     *            The next action that the bot should take in its interaction
+     *            with the user. The possible values are:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>ConfirmIntent</code> - The next action is asking the
+     *            user if the intent is complete and ready to be fulfilled. This
+     *            is a yes/no question such as "Place the order?"
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Close</code> - Indicates that the there will not be a
+     *            response from the user. For example, the statement
+     *            "Your order has been placed" does not require a response.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ElicitIntent</code> - The next action is to determine
+     *            the intent that the user wants to fulfill.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ElicitSlot</code> - The next action is to elicit a slot
+     *            value from the user.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     * @see DialogActionType
+     */
+    public IntentSummary withDialogActionType(DialogActionType dialogActionType) {
+        this.dialogActionType = dialogActionType.toString();
+        return this;
+    }
+
+    /**
+     * <p>
+     * The fulfillment state of the intent. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>Failed</code> - The Lambda function associated with the intent
+     * failed to fulfill the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Fulfilled</code> - The intent has fulfilled by the Lambda function
+     * associated with the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ReadyForFulfillment</code> - All of the information necessary for
+     * the intent is present and the intent ready to be fulfilled by the client
+     * application.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>Fulfilled, Failed, ReadyForFulfillment
+     *
+     * @return <p>
+     *         The fulfillment state of the intent. The possible values are:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         <code>Failed</code> - The Lambda function associated with the
+     *         intent failed to fulfill the intent.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>Fulfilled</code> - The intent has fulfilled by the Lambda
+     *         function associated with the intent.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>ReadyForFulfillment</code> - All of the information
+     *         necessary for the intent is present and the intent ready to be
+     *         fulfilled by the client application.
+     *         </p>
+     *         </li>
+     *         </ul>
+     * @see FulfillmentState
+     */
+    public String getFulfillmentState() {
+        return fulfillmentState;
+    }
+
+    /**
+     * <p>
+     * The fulfillment state of the intent. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>Failed</code> - The Lambda function associated with the intent
+     * failed to fulfill the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Fulfilled</code> - The intent has fulfilled by the Lambda function
+     * associated with the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ReadyForFulfillment</code> - All of the information necessary for
+     * the intent is present and the intent ready to be fulfilled by the client
+     * application.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>Fulfilled, Failed, ReadyForFulfillment
+     *
+     * @param fulfillmentState <p>
+     *            The fulfillment state of the intent. The possible values are:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>Failed</code> - The Lambda function associated with the
+     *            intent failed to fulfill the intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Fulfilled</code> - The intent has fulfilled by the
+     *            Lambda function associated with the intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ReadyForFulfillment</code> - All of the information
+     *            necessary for the intent is present and the intent ready to be
+     *            fulfilled by the client application.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @see FulfillmentState
+     */
+    public void setFulfillmentState(String fulfillmentState) {
+        this.fulfillmentState = fulfillmentState;
+    }
+
+    /**
+     * <p>
+     * The fulfillment state of the intent. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>Failed</code> - The Lambda function associated with the intent
+     * failed to fulfill the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Fulfilled</code> - The intent has fulfilled by the Lambda function
+     * associated with the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ReadyForFulfillment</code> - All of the information necessary for
+     * the intent is present and the intent ready to be fulfilled by the client
+     * application.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>Fulfilled, Failed, ReadyForFulfillment
+     *
+     * @param fulfillmentState <p>
+     *            The fulfillment state of the intent. The possible values are:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>Failed</code> - The Lambda function associated with the
+     *            intent failed to fulfill the intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Fulfilled</code> - The intent has fulfilled by the
+     *            Lambda function associated with the intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ReadyForFulfillment</code> - All of the information
+     *            necessary for the intent is present and the intent ready to be
+     *            fulfilled by the client application.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     * @see FulfillmentState
+     */
+    public IntentSummary withFulfillmentState(String fulfillmentState) {
+        this.fulfillmentState = fulfillmentState;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The fulfillment state of the intent. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>Failed</code> - The Lambda function associated with the intent
+     * failed to fulfill the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Fulfilled</code> - The intent has fulfilled by the Lambda function
+     * associated with the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ReadyForFulfillment</code> - All of the information necessary for
+     * the intent is present and the intent ready to be fulfilled by the client
+     * application.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>Fulfilled, Failed, ReadyForFulfillment
+     *
+     * @param fulfillmentState <p>
+     *            The fulfillment state of the intent. The possible values are:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>Failed</code> - The Lambda function associated with the
+     *            intent failed to fulfill the intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Fulfilled</code> - The intent has fulfilled by the
+     *            Lambda function associated with the intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ReadyForFulfillment</code> - All of the information
+     *            necessary for the intent is present and the intent ready to be
+     *            fulfilled by the client application.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @see FulfillmentState
+     */
+    public void setFulfillmentState(FulfillmentState fulfillmentState) {
+        this.fulfillmentState = fulfillmentState.toString();
+    }
+
+    /**
+     * <p>
+     * The fulfillment state of the intent. The possible values are:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>Failed</code> - The Lambda function associated with the intent
+     * failed to fulfill the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Fulfilled</code> - The intent has fulfilled by the Lambda function
+     * associated with the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ReadyForFulfillment</code> - All of the information necessary for
+     * the intent is present and the intent ready to be fulfilled by the client
+     * application.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>Fulfilled, Failed, ReadyForFulfillment
+     *
+     * @param fulfillmentState <p>
+     *            The fulfillment state of the intent. The possible values are:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>Failed</code> - The Lambda function associated with the
+     *            intent failed to fulfill the intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Fulfilled</code> - The intent has fulfilled by the
+     *            Lambda function associated with the intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ReadyForFulfillment</code> - All of the information
+     *            necessary for the intent is present and the intent ready to be
+     *            fulfilled by the client application.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     * @see FulfillmentState
+     */
+    public IntentSummary withFulfillmentState(FulfillmentState fulfillmentState) {
+        this.fulfillmentState = fulfillmentState.toString();
+        return this;
+    }
+
+    /**
+     * <p>
+     * The next slot to elicit from the user. If there is not slot to elicit,
+     * the field is blank.
+     * </p>
+     *
+     * @return <p>
+     *         The next slot to elicit from the user. If there is not slot to
+     *         elicit, the field is blank.
+     *         </p>
+     */
+    public String getSlotToElicit() {
+        return slotToElicit;
+    }
+
+    /**
+     * <p>
+     * The next slot to elicit from the user. If there is not slot to elicit,
+     * the field is blank.
+     * </p>
+     *
+     * @param slotToElicit <p>
+     *            The next slot to elicit from the user. If there is not slot to
+     *            elicit, the field is blank.
+     *            </p>
+     */
+    public void setSlotToElicit(String slotToElicit) {
+        this.slotToElicit = slotToElicit;
+    }
+
+    /**
+     * <p>
+     * The next slot to elicit from the user. If there is not slot to elicit,
+     * the field is blank.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param slotToElicit <p>
+     *            The next slot to elicit from the user. If there is not slot to
+     *            elicit, the field is blank.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public IntentSummary withSlotToElicit(String slotToElicit) {
+        this.slotToElicit = slotToElicit;
+        return this;
+    }
+
+    /**
+     * Returns a string representation of this object; useful for testing and
+     * debugging.
+     *
+     * @return A string representation of this object.
+     * @see java.lang.Object#toString()
+     */
+    @Override
+    public String toString() {
+        StringBuilder sb = new StringBuilder();
+        sb.append("{");
+        if (getIntentName() != null)
+            sb.append("intentName: " + getIntentName() + ",");
+        if (getSlots() != null)
+            sb.append("slots: " + getSlots() + ",");
+        if (getConfirmationStatus() != null)
+            sb.append("confirmationStatus: " + getConfirmationStatus() + ",");
+        if (getDialogActionType() != null)
+            sb.append("dialogActionType: " + getDialogActionType() + ",");
+        if (getFulfillmentState() != null)
+            sb.append("fulfillmentState: " + getFulfillmentState() + ",");
+        if (getSlotToElicit() != null)
+            sb.append("slotToElicit: " + getSlotToElicit());
+        sb.append("}");
+        return sb.toString();
+    }
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int hashCode = 1;
+
+        hashCode = prime * hashCode + ((getIntentName() == null) ? 0 : getIntentName().hashCode());
+        hashCode = prime * hashCode + ((getSlots() == null) ? 0 : getSlots().hashCode());
+        hashCode = prime * hashCode
+                + ((getConfirmationStatus() == null) ? 0 : getConfirmationStatus().hashCode());
+        hashCode = prime * hashCode
+                + ((getDialogActionType() == null) ? 0 : getDialogActionType().hashCode());
+        hashCode = prime * hashCode
+                + ((getFulfillmentState() == null) ? 0 : getFulfillmentState().hashCode());
+        hashCode = prime * hashCode
+                + ((getSlotToElicit() == null) ? 0 : getSlotToElicit().hashCode());
+        return hashCode;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj)
+            return true;
+        if (obj == null)
+            return false;
+
+        if (obj instanceof IntentSummary == false)
+            return false;
+        IntentSummary other = (IntentSummary) obj;
+
+        if (other.getIntentName() == null ^ this.getIntentName() == null)
+            return false;
+        if (other.getIntentName() != null
+                && other.getIntentName().equals(this.getIntentName()) == false)
+            return false;
+        if (other.getSlots() == null ^ this.getSlots() == null)
+            return false;
+        if (other.getSlots() != null && other.getSlots().equals(this.getSlots()) == false)
+            return false;
+        if (other.getConfirmationStatus() == null ^ this.getConfirmationStatus() == null)
+            return false;
+        if (other.getConfirmationStatus() != null
+                && other.getConfirmationStatus().equals(this.getConfirmationStatus()) == false)
+            return false;
+        if (other.getDialogActionType() == null ^ this.getDialogActionType() == null)
+            return false;
+        if (other.getDialogActionType() != null
+                && other.getDialogActionType().equals(this.getDialogActionType()) == false)
+            return false;
+        if (other.getFulfillmentState() == null ^ this.getFulfillmentState() == null)
+            return false;
+        if (other.getFulfillmentState() != null
+                && other.getFulfillmentState().equals(this.getFulfillmentState()) == false)
+            return false;
+        if (other.getSlotToElicit() == null ^ this.getSlotToElicit() == null)
+            return false;
+        if (other.getSlotToElicit() != null
+                && other.getSlotToElicit().equals(this.getSlotToElicit()) == false)
+            return false;
+        return true;
+    }
+}
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/PostContentRequest.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/PostContentRequest.java
index 60047cafde..9f204a4693 100644
--- a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/PostContentRequest.java
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/PostContentRequest.java
@@ -117,7 +117,7 @@
  * <p>
  * In addition, Amazon Lex also returns your application-specific
  * <code>sessionAttributes</code>. For more information, see <a
- * href="http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html">Managing
+ * href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html">Managing
  * Conversation Context</a>.
  * </p>
  */
@@ -199,7 +199,7 @@
      * </p>
      * <p>
      * For more information, see <a href=
-     * "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
+     * "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
      * >Setting Session Attributes</a>.
      * </p>
      */
@@ -224,7 +224,7 @@
      * </p>
      * <p>
      * For more information, see <a href=
-     * "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
+     * "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
      * >Setting Request Attributes</a>.
      * </p>
      */
@@ -314,6 +314,14 @@
      * header). For example, if you specify <code>audio/mpeg</code> as the
      * value, Amazon Lex returns speech in the MPEG format.
      * </p>
+     * </li>
+     * <li>
+     * <p>
+     * If the value is <code>audio/pcm</code>, the speech returned is
+     * <code>audio/pcm</code> in 16-bit, little endian format.
+     * </p>
+     * </li>
+     * <li>
      * <p>
      * The following are the accepted values:
      * </p>
@@ -756,7 +764,7 @@ public PostContentRequest withUserId(String userId) {
      * </p>
      * <p>
      * For more information, see <a href=
-     * "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
+     * "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
      * >Setting Session Attributes</a>.
      * </p>
      *
@@ -773,7 +781,7 @@ public PostContentRequest withUserId(String userId) {
      *         </p>
      *         <p>
      *         For more information, see <a href=
-     *         "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
+     *         "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
      *         >Setting Session Attributes</a>.
      *         </p>
      */
@@ -795,7 +803,7 @@ public String getSessionAttributes() {
      * </p>
      * <p>
      * For more information, see <a href=
-     * "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
+     * "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
      * >Setting Session Attributes</a>.
      * </p>
      *
@@ -812,7 +820,7 @@ public String getSessionAttributes() {
      *            </p>
      *            <p>
      *            For more information, see <a href=
-     *            "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
+     *            "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
      *            >Setting Session Attributes</a>.
      *            </p>
      */
@@ -834,7 +842,7 @@ public void setSessionAttributes(String sessionAttributes) {
      * </p>
      * <p>
      * For more information, see <a href=
-     * "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
+     * "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
      * >Setting Session Attributes</a>.
      * </p>
      * <p>
@@ -854,7 +862,7 @@ public void setSessionAttributes(String sessionAttributes) {
      *            </p>
      *            <p>
      *            For more information, see <a href=
-     *            "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
+     *            "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
      *            >Setting Session Attributes</a>.
      *            </p>
      * @return A reference to this updated object so that method calls can be
@@ -884,7 +892,7 @@ public PostContentRequest withSessionAttributes(String sessionAttributes) {
      * </p>
      * <p>
      * For more information, see <a href=
-     * "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
+     * "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
      * >Setting Request Attributes</a>.
      * </p>
      *
@@ -906,7 +914,7 @@ public PostContentRequest withSessionAttributes(String sessionAttributes) {
      *         </p>
      *         <p>
      *         For more information, see <a href=
-     *         "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
+     *         "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
      *         >Setting Request Attributes</a>.
      *         </p>
      */
@@ -933,7 +941,7 @@ public String getRequestAttributes() {
      * </p>
      * <p>
      * For more information, see <a href=
-     * "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
+     * "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
      * >Setting Request Attributes</a>.
      * </p>
      *
@@ -955,7 +963,7 @@ public String getRequestAttributes() {
      *            </p>
      *            <p>
      *            For more information, see <a href=
-     *            "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
+     *            "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
      *            >Setting Request Attributes</a>.
      *            </p>
      */
@@ -982,7 +990,7 @@ public void setRequestAttributes(String requestAttributes) {
      * </p>
      * <p>
      * For more information, see <a href=
-     * "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
+     * "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
      * >Setting Request Attributes</a>.
      * </p>
      * <p>
@@ -1007,7 +1015,7 @@ public void setRequestAttributes(String requestAttributes) {
      *            </p>
      *            <p>
      *            For more information, see <a href=
-     *            "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
+     *            "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
      *            >Setting Request Attributes</a>.
      *            </p>
      * @return A reference to this updated object so that method calls can be
@@ -1412,6 +1420,14 @@ public PostContentRequest withContentType(String contentType) {
      * header). For example, if you specify <code>audio/mpeg</code> as the
      * value, Amazon Lex returns speech in the MPEG format.
      * </p>
+     * </li>
+     * <li>
+     * <p>
+     * If the value is <code>audio/pcm</code>, the speech returned is
+     * <code>audio/pcm</code> in 16-bit, little endian format.
+     * </p>
+     * </li>
+     * <li>
      * <p>
      * The following are the accepted values:
      * </p>
@@ -1469,6 +1485,14 @@ public PostContentRequest withContentType(String contentType) {
      *         <code>audio/mpeg</code> as the value, Amazon Lex returns speech
      *         in the MPEG format.
      *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         If the value is <code>audio/pcm</code>, the speech returned is
+     *         <code>audio/pcm</code> in 16-bit, little endian format.
+     *         </p>
+     *         </li>
+     *         <li>
      *         <p>
      *         The following are the accepted values:
      *         </p>
@@ -1529,6 +1553,14 @@ public String getAccept() {
      * header). For example, if you specify <code>audio/mpeg</code> as the
      * value, Amazon Lex returns speech in the MPEG format.
      * </p>
+     * </li>
+     * <li>
+     * <p>
+     * If the value is <code>audio/pcm</code>, the speech returned is
+     * <code>audio/pcm</code> in 16-bit, little endian format.
+     * </p>
+     * </li>
+     * <li>
      * <p>
      * The following are the accepted values:
      * </p>
@@ -1586,6 +1618,14 @@ public String getAccept() {
      *            specify <code>audio/mpeg</code> as the value, Amazon Lex
      *            returns speech in the MPEG format.
      *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            If the value is <code>audio/pcm</code>, the speech returned is
+     *            <code>audio/pcm</code> in 16-bit, little endian format.
+     *            </p>
+     *            </li>
+     *            <li>
      *            <p>
      *            The following are the accepted values:
      *            </p>
@@ -1646,6 +1686,14 @@ public void setAccept(String accept) {
      * header). For example, if you specify <code>audio/mpeg</code> as the
      * value, Amazon Lex returns speech in the MPEG format.
      * </p>
+     * </li>
+     * <li>
+     * <p>
+     * If the value is <code>audio/pcm</code>, the speech returned is
+     * <code>audio/pcm</code> in 16-bit, little endian format.
+     * </p>
+     * </li>
+     * <li>
      * <p>
      * The following are the accepted values:
      * </p>
@@ -1706,6 +1754,14 @@ public void setAccept(String accept) {
      *            specify <code>audio/mpeg</code> as the value, Amazon Lex
      *            returns speech in the MPEG format.
      *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            If the value is <code>audio/pcm</code>, the speech returned is
+     *            <code>audio/pcm</code> in 16-bit, little endian format.
+     *            </p>
+     *            </li>
+     *            <li>
      *            <p>
      *            The following are the accepted values:
      *            </p>
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/PostContentResult.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/PostContentResult.java
index 163b91bebc..dca66d87c4 100644
--- a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/PostContentResult.java
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/PostContentResult.java
@@ -36,7 +36,8 @@
     /**
      * <p>
      * Map of zero or more intent slots (name/value pairs) Amazon Lex detected
-     * from the user input during the conversation.
+     * from the user input during the conversation. The field is base-64
+     * encoded.
      * </p>
      * <p>
      * Amazon Lex creates a resolution list containing likely values for a slot.
@@ -70,7 +71,7 @@
      * <p>
      * If the intent is not configured with a Lambda function, or if the Lambda
      * function returned <code>Delegate</code> as the
-     * <code>dialogAction.type</code> its response, Amazon Lex decides on the
+     * <code>dialogAction.type</code> in its response, Amazon Lex decides on the
      * next course of action and selects an appropriate message from the bot's
      * configuration based on the current interaction context. For example, if
      * Amazon Lex isn't able to understand user input, it uses a clarification
@@ -340,7 +341,8 @@ public PostContentResult withIntentName(String intentName) {
     /**
      * <p>
      * Map of zero or more intent slots (name/value pairs) Amazon Lex detected
-     * from the user input during the conversation.
+     * from the user input during the conversation. The field is base-64
+     * encoded.
      * </p>
      * <p>
      * Amazon Lex creates a resolution list containing likely values for a slot.
@@ -358,7 +360,8 @@ public PostContentResult withIntentName(String intentName) {
      *
      * @return <p>
      *         Map of zero or more intent slots (name/value pairs) Amazon Lex
-     *         detected from the user input during the conversation.
+     *         detected from the user input during the conversation. The field
+     *         is base-64 encoded.
      *         </p>
      *         <p>
      *         Amazon Lex creates a resolution list containing likely values for
@@ -381,7 +384,8 @@ public String getSlots() {
     /**
      * <p>
      * Map of zero or more intent slots (name/value pairs) Amazon Lex detected
-     * from the user input during the conversation.
+     * from the user input during the conversation. The field is base-64
+     * encoded.
      * </p>
      * <p>
      * Amazon Lex creates a resolution list containing likely values for a slot.
@@ -399,7 +403,8 @@ public String getSlots() {
      *
      * @param slots <p>
      *            Map of zero or more intent slots (name/value pairs) Amazon Lex
-     *            detected from the user input during the conversation.
+     *            detected from the user input during the conversation. The
+     *            field is base-64 encoded.
      *            </p>
      *            <p>
      *            Amazon Lex creates a resolution list containing likely values
@@ -424,7 +429,8 @@ public void setSlots(String slots) {
     /**
      * <p>
      * Map of zero or more intent slots (name/value pairs) Amazon Lex detected
-     * from the user input during the conversation.
+     * from the user input during the conversation. The field is base-64
+     * encoded.
      * </p>
      * <p>
      * Amazon Lex creates a resolution list containing likely values for a slot.
@@ -445,7 +451,8 @@ public void setSlots(String slots) {
      *
      * @param slots <p>
      *            Map of zero or more intent slots (name/value pairs) Amazon Lex
-     *            detected from the user input during the conversation.
+     *            detected from the user input during the conversation. The
+     *            field is base-64 encoded.
      *            </p>
      *            <p>
      *            Amazon Lex creates a resolution list containing likely values
@@ -529,7 +536,7 @@ public PostContentResult withSessionAttributes(String sessionAttributes) {
      * <p>
      * If the intent is not configured with a Lambda function, or if the Lambda
      * function returned <code>Delegate</code> as the
-     * <code>dialogAction.type</code> its response, Amazon Lex decides on the
+     * <code>dialogAction.type</code> in its response, Amazon Lex decides on the
      * next course of action and selects an appropriate message from the bot's
      * configuration based on the current interaction context. For example, if
      * Amazon Lex isn't able to understand user input, it uses a clarification
@@ -557,11 +564,11 @@ public PostContentResult withSessionAttributes(String sessionAttributes) {
      *         <p>
      *         If the intent is not configured with a Lambda function, or if the
      *         Lambda function returned <code>Delegate</code> as the
-     *         <code>dialogAction.type</code> its response, Amazon Lex decides
-     *         on the next course of action and selects an appropriate message
-     *         from the bot's configuration based on the current interaction
-     *         context. For example, if Amazon Lex isn't able to understand user
-     *         input, it uses a clarification prompt message.
+     *         <code>dialogAction.type</code> in its response, Amazon Lex
+     *         decides on the next course of action and selects an appropriate
+     *         message from the bot's configuration based on the current
+     *         interaction context. For example, if Amazon Lex isn't able to
+     *         understand user input, it uses a clarification prompt message.
      *         </p>
      *         <p>
      *         When you create an intent you can assign messages to groups. When
@@ -588,7 +595,7 @@ public String getMessage() {
      * <p>
      * If the intent is not configured with a Lambda function, or if the Lambda
      * function returned <code>Delegate</code> as the
-     * <code>dialogAction.type</code> its response, Amazon Lex decides on the
+     * <code>dialogAction.type</code> in its response, Amazon Lex decides on the
      * next course of action and selects an appropriate message from the bot's
      * configuration based on the current interaction context. For example, if
      * Amazon Lex isn't able to understand user input, it uses a clarification
@@ -616,7 +623,7 @@ public String getMessage() {
      *            <p>
      *            If the intent is not configured with a Lambda function, or if
      *            the Lambda function returned <code>Delegate</code> as the
-     *            <code>dialogAction.type</code> its response, Amazon Lex
+     *            <code>dialogAction.type</code> in its response, Amazon Lex
      *            decides on the next course of action and selects an
      *            appropriate message from the bot's configuration based on the
      *            current interaction context. For example, if Amazon Lex isn't
@@ -648,7 +655,7 @@ public void setMessage(String message) {
      * <p>
      * If the intent is not configured with a Lambda function, or if the Lambda
      * function returned <code>Delegate</code> as the
-     * <code>dialogAction.type</code> its response, Amazon Lex decides on the
+     * <code>dialogAction.type</code> in its response, Amazon Lex decides on the
      * next course of action and selects an appropriate message from the bot's
      * configuration based on the current interaction context. For example, if
      * Amazon Lex isn't able to understand user input, it uses a clarification
@@ -679,7 +686,7 @@ public void setMessage(String message) {
      *            <p>
      *            If the intent is not configured with a Lambda function, or if
      *            the Lambda function returned <code>Delegate</code> as the
-     *            <code>dialogAction.type</code> its response, Amazon Lex
+     *            <code>dialogAction.type</code> in its response, Amazon Lex
      *            decides on the next course of action and selects an
      *            appropriate message from the bot's configuration based on the
      *            current interaction context. For example, if Amazon Lex isn't
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/PostTextRequest.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/PostTextRequest.java
index 30fc594efa..80800b60f3 100644
--- a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/PostTextRequest.java
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/PostTextRequest.java
@@ -21,9 +21,10 @@
 
 /**
  * <p>
- * Sends user input (text-only) to Amazon Lex. Client applications can use this
- * API to send requests to Amazon Lex at runtime. Amazon Lex then interprets the
- * user input using the machine learning model it built for the bot.
+ * Sends user input (text or SSML) to Amazon Lex. Client applications can use
+ * this API to send requests to Amazon Lex at runtime. Amazon Lex then
+ * interprets the user input using the machine learning model it built for the
+ * bot.
  * </p>
  * <p>
  * In response, Amazon Lex returns the next <code>message</code> to convey to
@@ -111,7 +112,7 @@
  * <p>
  * In addition, Amazon Lex also returns your application-specific
  * <code>sessionAttributes</code>. For more information, see <a
- * href="http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html">Managing
+ * href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html">Managing
  * Conversation Context</a>.
  * </p>
  */
@@ -186,7 +187,7 @@
      * </p>
      * <p>
      * For more information, see <a href=
-     * "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
+     * "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
      * >Setting Session Attributes</a>.
      * </p>
      */
@@ -204,7 +205,7 @@
      * </p>
      * <p>
      * For more information, see <a href=
-     * "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
+     * "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
      * >Setting Request Attributes</a>.
      * </p>
      */
@@ -606,7 +607,7 @@ public PostTextRequest withUserId(String userId) {
      * </p>
      * <p>
      * For more information, see <a href=
-     * "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
+     * "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
      * >Setting Session Attributes</a>.
      * </p>
      *
@@ -616,7 +617,7 @@ public PostTextRequest withUserId(String userId) {
      *         </p>
      *         <p>
      *         For more information, see <a href=
-     *         "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
+     *         "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
      *         >Setting Session Attributes</a>.
      *         </p>
      */
@@ -631,7 +632,7 @@ public PostTextRequest withUserId(String userId) {
      * </p>
      * <p>
      * For more information, see <a href=
-     * "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
+     * "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
      * >Setting Session Attributes</a>.
      * </p>
      *
@@ -641,7 +642,7 @@ public PostTextRequest withUserId(String userId) {
      *            </p>
      *            <p>
      *            For more information, see <a href=
-     *            "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
+     *            "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
      *            >Setting Session Attributes</a>.
      *            </p>
      */
@@ -656,7 +657,7 @@ public void setSessionAttributes(java.util.Map<String, String> sessionAttributes
      * </p>
      * <p>
      * For more information, see <a href=
-     * "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
+     * "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
      * >Setting Session Attributes</a>.
      * </p>
      * <p>
@@ -669,7 +670,7 @@ public void setSessionAttributes(java.util.Map<String, String> sessionAttributes
      *            </p>
      *            <p>
      *            For more information, see <a href=
-     *            "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
+     *            "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
      *            >Setting Session Attributes</a>.
      *            </p>
      * @return A reference to this updated object so that method calls can be
@@ -687,7 +688,7 @@ public PostTextRequest withSessionAttributes(java.util.Map<String, String> sessi
      * </p>
      * <p>
      * For more information, see <a href=
-     * "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
+     * "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs"
      * >Setting Session Attributes</a>.
      * </p>
      * <p>
@@ -735,7 +736,7 @@ public PostTextRequest clearsessionAttributesEntries() {
      * </p>
      * <p>
      * For more information, see <a href=
-     * "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
+     * "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
      * >Setting Request Attributes</a>.
      * </p>
      *
@@ -750,7 +751,7 @@ public PostTextRequest clearsessionAttributesEntries() {
      *         </p>
      *         <p>
      *         For more information, see <a href=
-     *         "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
+     *         "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
      *         >Setting Request Attributes</a>.
      *         </p>
      */
@@ -770,7 +771,7 @@ public PostTextRequest clearsessionAttributesEntries() {
      * </p>
      * <p>
      * For more information, see <a href=
-     * "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
+     * "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
      * >Setting Request Attributes</a>.
      * </p>
      *
@@ -785,7 +786,7 @@ public PostTextRequest clearsessionAttributesEntries() {
      *            </p>
      *            <p>
      *            For more information, see <a href=
-     *            "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
+     *            "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
      *            >Setting Request Attributes</a>.
      *            </p>
      */
@@ -805,7 +806,7 @@ public void setRequestAttributes(java.util.Map<String, String> requestAttributes
      * </p>
      * <p>
      * For more information, see <a href=
-     * "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
+     * "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
      * >Setting Request Attributes</a>.
      * </p>
      * <p>
@@ -823,7 +824,7 @@ public void setRequestAttributes(java.util.Map<String, String> requestAttributes
      *            </p>
      *            <p>
      *            For more information, see <a href=
-     *            "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
+     *            "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
      *            >Setting Request Attributes</a>.
      *            </p>
      * @return A reference to this updated object so that method calls can be
@@ -846,7 +847,7 @@ public PostTextRequest withRequestAttributes(java.util.Map<String, String> reque
      * </p>
      * <p>
      * For more information, see <a href=
-     * "http://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
+     * "https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs"
      * >Setting Request Attributes</a>.
      * </p>
      * <p>
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/PutSessionRequest.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/PutSessionRequest.java
new file mode 100644
index 0000000000..206c8cd7a9
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/PutSessionRequest.java
@@ -0,0 +1,905 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.lexrts.model;
+
+import java.io.Serializable;
+
+import com.amazonaws.AmazonWebServiceRequest;
+
+/**
+ * <p>
+ * Creates a new session or modifies an existing session with an Amazon Lex bot.
+ * Use this operation to enable your application to set the state of the bot.
+ * </p>
+ * <p>
+ * For more information, see <a
+ * href="https://docs.aws.amazon.com/lex/latest/dg/how-session-api.html"
+ * >Managing Sessions</a>.
+ * </p>
+ */
+public class PutSessionRequest extends AmazonWebServiceRequest implements Serializable {
+    /**
+     * <p>
+     * The name of the bot that contains the session data.
+     * </p>
+     */
+    private String botName;
+
+    /**
+     * <p>
+     * The alias in use for the bot that contains the session data.
+     * </p>
+     */
+    private String botAlias;
+
+    /**
+     * <p>
+     * The ID of the client application user. Amazon Lex uses this to identify a
+     * user's conversation with your bot.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>2 - 100<br/>
+     * <b>Pattern: </b>[0-9a-zA-Z._:-]+<br/>
+     */
+    private String userId;
+
+    /**
+     * <p>
+     * Map of key/value pairs representing the session-specific context
+     * information. It contains application information passed between Amazon
+     * Lex and a client application.
+     * </p>
+     */
+    private java.util.Map<String, String> sessionAttributes;
+
+    /**
+     * <p>
+     * Sets the next action that the bot should take to fulfill the
+     * conversation.
+     * </p>
+     */
+    private DialogAction dialogAction;
+
+    /**
+     * <p>
+     * The message that Amazon Lex returns in the response can be either text or
+     * speech based depending on the value of this field.
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * If the value is <code>text/plain; charset=utf-8</code>, Amazon Lex
+     * returns text in the response.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * If the value begins with <code>audio/</code>, Amazon Lex returns speech
+     * in the response. Amazon Lex uses Amazon Polly to generate the speech in
+     * the configuration that you specify. For example, if you specify
+     * <code>audio/mpeg</code> as the value, Amazon Lex returns speech in the
+     * MPEG format.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * If the value is <code>audio/pcm</code>, the speech is returned as
+     * <code>audio/pcm</code> in 16-bit, little endian format.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * The following are the accepted values:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>audio/mpeg</code>
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>audio/ogg</code>
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>audio/pcm</code>
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>audio/*</code> (defaults to mpeg)
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>text/plain; charset=utf-8</code>
+     * </p>
+     * </li>
+     * </ul>
+     * </li>
+     * </ul>
+     */
+    private String accept;
+
+    /**
+     * <p>
+     * The name of the bot that contains the session data.
+     * </p>
+     *
+     * @return <p>
+     *         The name of the bot that contains the session data.
+     *         </p>
+     */
+    public String getBotName() {
+        return botName;
+    }
+
+    /**
+     * <p>
+     * The name of the bot that contains the session data.
+     * </p>
+     *
+     * @param botName <p>
+     *            The name of the bot that contains the session data.
+     *            </p>
+     */
+    public void setBotName(String botName) {
+        this.botName = botName;
+    }
+
+    /**
+     * <p>
+     * The name of the bot that contains the session data.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param botName <p>
+     *            The name of the bot that contains the session data.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public PutSessionRequest withBotName(String botName) {
+        this.botName = botName;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The alias in use for the bot that contains the session data.
+     * </p>
+     *
+     * @return <p>
+     *         The alias in use for the bot that contains the session data.
+     *         </p>
+     */
+    public String getBotAlias() {
+        return botAlias;
+    }
+
+    /**
+     * <p>
+     * The alias in use for the bot that contains the session data.
+     * </p>
+     *
+     * @param botAlias <p>
+     *            The alias in use for the bot that contains the session data.
+     *            </p>
+     */
+    public void setBotAlias(String botAlias) {
+        this.botAlias = botAlias;
+    }
+
+    /**
+     * <p>
+     * The alias in use for the bot that contains the session data.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param botAlias <p>
+     *            The alias in use for the bot that contains the session data.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public PutSessionRequest withBotAlias(String botAlias) {
+        this.botAlias = botAlias;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The ID of the client application user. Amazon Lex uses this to identify a
+     * user's conversation with your bot.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>2 - 100<br/>
+     * <b>Pattern: </b>[0-9a-zA-Z._:-]+<br/>
+     *
+     * @return <p>
+     *         The ID of the client application user. Amazon Lex uses this to
+     *         identify a user's conversation with your bot.
+     *         </p>
+     */
+    public String getUserId() {
+        return userId;
+    }
+
+    /**
+     * <p>
+     * The ID of the client application user. Amazon Lex uses this to identify a
+     * user's conversation with your bot.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>2 - 100<br/>
+     * <b>Pattern: </b>[0-9a-zA-Z._:-]+<br/>
+     *
+     * @param userId <p>
+     *            The ID of the client application user. Amazon Lex uses this to
+     *            identify a user's conversation with your bot.
+     *            </p>
+     */
+    public void setUserId(String userId) {
+        this.userId = userId;
+    }
+
+    /**
+     * <p>
+     * The ID of the client application user. Amazon Lex uses this to identify a
+     * user's conversation with your bot.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>2 - 100<br/>
+     * <b>Pattern: </b>[0-9a-zA-Z._:-]+<br/>
+     *
+     * @param userId <p>
+     *            The ID of the client application user. Amazon Lex uses this to
+     *            identify a user's conversation with your bot.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public PutSessionRequest withUserId(String userId) {
+        this.userId = userId;
+        return this;
+    }
+
+    /**
+     * <p>
+     * Map of key/value pairs representing the session-specific context
+     * information. It contains application information passed between Amazon
+     * Lex and a client application.
+     * </p>
+     *
+     * @return <p>
+     *         Map of key/value pairs representing the session-specific context
+     *         information. It contains application information passed between
+     *         Amazon Lex and a client application.
+     *         </p>
+     */
+    public java.util.Map<String, String> getSessionAttributes() {
+        return sessionAttributes;
+    }
+
+    /**
+     * <p>
+     * Map of key/value pairs representing the session-specific context
+     * information. It contains application information passed between Amazon
+     * Lex and a client application.
+     * </p>
+     *
+     * @param sessionAttributes <p>
+     *            Map of key/value pairs representing the session-specific
+     *            context information. It contains application information
+     *            passed between Amazon Lex and a client application.
+     *            </p>
+     */
+    public void setSessionAttributes(java.util.Map<String, String> sessionAttributes) {
+        this.sessionAttributes = sessionAttributes;
+    }
+
+    /**
+     * <p>
+     * Map of key/value pairs representing the session-specific context
+     * information. It contains application information passed between Amazon
+     * Lex and a client application.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param sessionAttributes <p>
+     *            Map of key/value pairs representing the session-specific
+     *            context information. It contains application information
+     *            passed between Amazon Lex and a client application.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public PutSessionRequest withSessionAttributes(java.util.Map<String, String> sessionAttributes) {
+        this.sessionAttributes = sessionAttributes;
+        return this;
+    }
+
+    /**
+     * <p>
+     * Map of key/value pairs representing the session-specific context
+     * information. It contains application information passed between Amazon
+     * Lex and a client application.
+     * </p>
+     * <p>
+     * The method adds a new key-value pair into sessionAttributes parameter,
+     * and returns a reference to this object so that method calls can be
+     * chained together.
+     *
+     * @param key The key of the entry to be added into sessionAttributes.
+     * @param value The corresponding value of the entry to be added into
+     *            sessionAttributes.
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public PutSessionRequest addsessionAttributesEntry(String key, String value) {
+        if (null == this.sessionAttributes) {
+            this.sessionAttributes = new java.util.HashMap<String, String>();
+        }
+        if (this.sessionAttributes.containsKey(key))
+            throw new IllegalArgumentException("Duplicated keys (" + key.toString()
+                    + ") are provided.");
+        this.sessionAttributes.put(key, value);
+        return this;
+    }
+
+    /**
+     * Removes all the entries added into sessionAttributes.
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     */
+    public PutSessionRequest clearsessionAttributesEntries() {
+        this.sessionAttributes = null;
+        return this;
+    }
+
+    /**
+     * <p>
+     * Sets the next action that the bot should take to fulfill the
+     * conversation.
+     * </p>
+     *
+     * @return <p>
+     *         Sets the next action that the bot should take to fulfill the
+     *         conversation.
+     *         </p>
+     */
+    public DialogAction getDialogAction() {
+        return dialogAction;
+    }
+
+    /**
+     * <p>
+     * Sets the next action that the bot should take to fulfill the
+     * conversation.
+     * </p>
+     *
+     * @param dialogAction <p>
+     *            Sets the next action that the bot should take to fulfill the
+     *            conversation.
+     *            </p>
+     */
+    public void setDialogAction(DialogAction dialogAction) {
+        this.dialogAction = dialogAction;
+    }
+
+    /**
+     * <p>
+     * Sets the next action that the bot should take to fulfill the
+     * conversation.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param dialogAction <p>
+     *            Sets the next action that the bot should take to fulfill the
+     *            conversation.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public PutSessionRequest withDialogAction(DialogAction dialogAction) {
+        this.dialogAction = dialogAction;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The message that Amazon Lex returns in the response can be either text or
+     * speech based depending on the value of this field.
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * If the value is <code>text/plain; charset=utf-8</code>, Amazon Lex
+     * returns text in the response.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * If the value begins with <code>audio/</code>, Amazon Lex returns speech
+     * in the response. Amazon Lex uses Amazon Polly to generate the speech in
+     * the configuration that you specify. For example, if you specify
+     * <code>audio/mpeg</code> as the value, Amazon Lex returns speech in the
+     * MPEG format.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * If the value is <code>audio/pcm</code>, the speech is returned as
+     * <code>audio/pcm</code> in 16-bit, little endian format.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * The following are the accepted values:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>audio/mpeg</code>
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>audio/ogg</code>
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>audio/pcm</code>
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>audio/*</code> (defaults to mpeg)
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>text/plain; charset=utf-8</code>
+     * </p>
+     * </li>
+     * </ul>
+     * </li>
+     * </ul>
+     *
+     * @return <p>
+     *         The message that Amazon Lex returns in the response can be either
+     *         text or speech based depending on the value of this field.
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         If the value is <code>text/plain; charset=utf-8</code>, Amazon
+     *         Lex returns text in the response.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         If the value begins with <code>audio/</code>, Amazon Lex returns
+     *         speech in the response. Amazon Lex uses Amazon Polly to generate
+     *         the speech in the configuration that you specify. For example, if
+     *         you specify <code>audio/mpeg</code> as the value, Amazon Lex
+     *         returns speech in the MPEG format.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         If the value is <code>audio/pcm</code>, the speech is returned as
+     *         <code>audio/pcm</code> in 16-bit, little endian format.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         The following are the accepted values:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         <code>audio/mpeg</code>
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>audio/ogg</code>
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>audio/pcm</code>
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>audio/*</code> (defaults to mpeg)
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>text/plain; charset=utf-8</code>
+     *         </p>
+     *         </li>
+     *         </ul>
+     *         </li>
+     *         </ul>
+     */
+    public String getAccept() {
+        return accept;
+    }
+
+    /**
+     * <p>
+     * The message that Amazon Lex returns in the response can be either text or
+     * speech based depending on the value of this field.
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * If the value is <code>text/plain; charset=utf-8</code>, Amazon Lex
+     * returns text in the response.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * If the value begins with <code>audio/</code>, Amazon Lex returns speech
+     * in the response. Amazon Lex uses Amazon Polly to generate the speech in
+     * the configuration that you specify. For example, if you specify
+     * <code>audio/mpeg</code> as the value, Amazon Lex returns speech in the
+     * MPEG format.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * If the value is <code>audio/pcm</code>, the speech is returned as
+     * <code>audio/pcm</code> in 16-bit, little endian format.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * The following are the accepted values:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>audio/mpeg</code>
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>audio/ogg</code>
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>audio/pcm</code>
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>audio/*</code> (defaults to mpeg)
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>text/plain; charset=utf-8</code>
+     * </p>
+     * </li>
+     * </ul>
+     * </li>
+     * </ul>
+     *
+     * @param accept <p>
+     *            The message that Amazon Lex returns in the response can be
+     *            either text or speech based depending on the value of this
+     *            field.
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            If the value is <code>text/plain; charset=utf-8</code>, Amazon
+     *            Lex returns text in the response.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            If the value begins with <code>audio/</code>, Amazon Lex
+     *            returns speech in the response. Amazon Lex uses Amazon Polly
+     *            to generate the speech in the configuration that you specify.
+     *            For example, if you specify <code>audio/mpeg</code> as the
+     *            value, Amazon Lex returns speech in the MPEG format.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            If the value is <code>audio/pcm</code>, the speech is returned
+     *            as <code>audio/pcm</code> in 16-bit, little endian format.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            The following are the accepted values:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>audio/mpeg</code>
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>audio/ogg</code>
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>audio/pcm</code>
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>audio/*</code> (defaults to mpeg)
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>text/plain; charset=utf-8</code>
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </li>
+     *            </ul>
+     */
+    public void setAccept(String accept) {
+        this.accept = accept;
+    }
+
+    /**
+     * <p>
+     * The message that Amazon Lex returns in the response can be either text or
+     * speech based depending on the value of this field.
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * If the value is <code>text/plain; charset=utf-8</code>, Amazon Lex
+     * returns text in the response.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * If the value begins with <code>audio/</code>, Amazon Lex returns speech
+     * in the response. Amazon Lex uses Amazon Polly to generate the speech in
+     * the configuration that you specify. For example, if you specify
+     * <code>audio/mpeg</code> as the value, Amazon Lex returns speech in the
+     * MPEG format.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * If the value is <code>audio/pcm</code>, the speech is returned as
+     * <code>audio/pcm</code> in 16-bit, little endian format.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * The following are the accepted values:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>audio/mpeg</code>
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>audio/ogg</code>
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>audio/pcm</code>
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>audio/*</code> (defaults to mpeg)
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>text/plain; charset=utf-8</code>
+     * </p>
+     * </li>
+     * </ul>
+     * </li>
+     * </ul>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param accept <p>
+     *            The message that Amazon Lex returns in the response can be
+     *            either text or speech based depending on the value of this
+     *            field.
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            If the value is <code>text/plain; charset=utf-8</code>, Amazon
+     *            Lex returns text in the response.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            If the value begins with <code>audio/</code>, Amazon Lex
+     *            returns speech in the response. Amazon Lex uses Amazon Polly
+     *            to generate the speech in the configuration that you specify.
+     *            For example, if you specify <code>audio/mpeg</code> as the
+     *            value, Amazon Lex returns speech in the MPEG format.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            If the value is <code>audio/pcm</code>, the speech is returned
+     *            as <code>audio/pcm</code> in 16-bit, little endian format.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            The following are the accepted values:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>audio/mpeg</code>
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>audio/ogg</code>
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>audio/pcm</code>
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>audio/*</code> (defaults to mpeg)
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>text/plain; charset=utf-8</code>
+     *            </p>
+     *            </li>
+     *            </ul>
+     *            </li>
+     *            </ul>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public PutSessionRequest withAccept(String accept) {
+        this.accept = accept;
+        return this;
+    }
+
+    /**
+     * Returns a string representation of this object; useful for testing and
+     * debugging.
+     *
+     * @return A string representation of this object.
+     * @see java.lang.Object#toString()
+     */
+    @Override
+    public String toString() {
+        StringBuilder sb = new StringBuilder();
+        sb.append("{");
+        if (getBotName() != null)
+            sb.append("botName: " + getBotName() + ",");
+        if (getBotAlias() != null)
+            sb.append("botAlias: " + getBotAlias() + ",");
+        if (getUserId() != null)
+            sb.append("userId: " + getUserId() + ",");
+        if (getSessionAttributes() != null)
+            sb.append("sessionAttributes: " + getSessionAttributes() + ",");
+        if (getDialogAction() != null)
+            sb.append("dialogAction: " + getDialogAction() + ",");
+        if (getAccept() != null)
+            sb.append("accept: " + getAccept());
+        sb.append("}");
+        return sb.toString();
+    }
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int hashCode = 1;
+
+        hashCode = prime * hashCode + ((getBotName() == null) ? 0 : getBotName().hashCode());
+        hashCode = prime * hashCode + ((getBotAlias() == null) ? 0 : getBotAlias().hashCode());
+        hashCode = prime * hashCode + ((getUserId() == null) ? 0 : getUserId().hashCode());
+        hashCode = prime * hashCode
+                + ((getSessionAttributes() == null) ? 0 : getSessionAttributes().hashCode());
+        hashCode = prime * hashCode
+                + ((getDialogAction() == null) ? 0 : getDialogAction().hashCode());
+        hashCode = prime * hashCode + ((getAccept() == null) ? 0 : getAccept().hashCode());
+        return hashCode;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj)
+            return true;
+        if (obj == null)
+            return false;
+
+        if (obj instanceof PutSessionRequest == false)
+            return false;
+        PutSessionRequest other = (PutSessionRequest) obj;
+
+        if (other.getBotName() == null ^ this.getBotName() == null)
+            return false;
+        if (other.getBotName() != null && other.getBotName().equals(this.getBotName()) == false)
+            return false;
+        if (other.getBotAlias() == null ^ this.getBotAlias() == null)
+            return false;
+        if (other.getBotAlias() != null && other.getBotAlias().equals(this.getBotAlias()) == false)
+            return false;
+        if (other.getUserId() == null ^ this.getUserId() == null)
+            return false;
+        if (other.getUserId() != null && other.getUserId().equals(this.getUserId()) == false)
+            return false;
+        if (other.getSessionAttributes() == null ^ this.getSessionAttributes() == null)
+            return false;
+        if (other.getSessionAttributes() != null
+                && other.getSessionAttributes().equals(this.getSessionAttributes()) == false)
+            return false;
+        if (other.getDialogAction() == null ^ this.getDialogAction() == null)
+            return false;
+        if (other.getDialogAction() != null
+                && other.getDialogAction().equals(this.getDialogAction()) == false)
+            return false;
+        if (other.getAccept() == null ^ this.getAccept() == null)
+            return false;
+        if (other.getAccept() != null && other.getAccept().equals(this.getAccept()) == false)
+            return false;
+        return true;
+    }
+}
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/PutSessionResult.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/PutSessionResult.java
new file mode 100644
index 0000000000..cc9018bd3c
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/PutSessionResult.java
@@ -0,0 +1,1619 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.lexrts.model;
+
+import java.io.Serializable;
+
+public class PutSessionResult implements Serializable {
+    /**
+     * <p>
+     * Content type as specified in the <code>Accept</code> HTTP header in the
+     * request.
+     * </p>
+     */
+    private String contentType;
+
+    /**
+     * <p>
+     * The name of the current intent.
+     * </p>
+     */
+    private String intentName;
+
+    /**
+     * <p>
+     * Map of zero or more intent slots Amazon Lex detected from the user input
+     * during the conversation.
+     * </p>
+     * <p>
+     * Amazon Lex creates a resolution list containing likely values for a slot.
+     * The value that it returns is determined by the
+     * <code>valueSelectionStrategy</code> selected when the slot type was
+     * created or updated. If <code>valueSelectionStrategy</code> is set to
+     * <code>ORIGINAL_VALUE</code>, the value provided by the user is returned,
+     * if the user value is similar to the slot values. If
+     * <code>valueSelectionStrategy</code> is set to <code>TOP_RESOLUTION</code>
+     * Amazon Lex returns the first value in the resolution list or, if there is
+     * no resolution list, null. If you don't specify a
+     * <code>valueSelectionStrategy</code> the default is
+     * <code>ORIGINAL_VALUE</code>.
+     * </p>
+     */
+    private String slots;
+
+    /**
+     * <p>
+     * Map of key/value pairs representing session-specific context information.
+     * </p>
+     */
+    private String sessionAttributes;
+
+    /**
+     * <p>
+     * The next message that should be presented to the user.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>1 - 1024<br/>
+     */
+    private String message;
+
+    /**
+     * <p>
+     * The format of the response message. One of the following values:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>PlainText</code> - The message contains plain UTF-8 text.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>CustomPayload</code> - The message is a custom format for the
+     * client.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>SSML</code> - The message contains text formatted for voice output.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Composite</code> - The message contains an escaped JSON object
+     * containing one or more messages from the groups that messages were
+     * assigned to when the intent was created.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>PlainText, CustomPayload, SSML, Composite
+     */
+    private String messageFormat;
+
+    /**
+     * <p/>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>ConfirmIntent</code> - Amazon Lex is expecting a "yes" or "no"
+     * response to confirm the intent before fulfilling an intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitIntent</code> - Amazon Lex wants to elicit the user's intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitSlot</code> - Amazon Lex is expecting the value of a slot for
+     * the current intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Failed</code> - Conveys that the conversation with the user has
+     * failed. This can happen for various reasons, including the user does not
+     * provide an appropriate response to prompts from the service, or if the
+     * Lambda function fails to fulfill the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Fulfilled</code> - Conveys that the Lambda function has sucessfully
+     * fulfilled the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ReadyForFulfillment</code> - Conveys that the client has to fulfill
+     * the intent.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>ElicitIntent, ConfirmIntent, ElicitSlot,
+     * Fulfilled, ReadyForFulfillment, Failed
+     */
+    private String dialogState;
+
+    /**
+     * <p>
+     * If the <code>dialogState</code> is <code>ElicitSlot</code>, returns the
+     * name of the slot for which Amazon Lex is eliciting a value.
+     * </p>
+     */
+    private String slotToElicit;
+
+    /**
+     * <p>
+     * The audio version of the message to convey to the user.
+     * </p>
+     */
+    private java.io.InputStream audioStream;
+
+    /**
+     * <p>
+     * A unique identifier for the session.
+     * </p>
+     */
+    private String sessionId;
+
+    /**
+     * <p>
+     * Content type as specified in the <code>Accept</code> HTTP header in the
+     * request.
+     * </p>
+     *
+     * @return <p>
+     *         Content type as specified in the <code>Accept</code> HTTP header
+     *         in the request.
+     *         </p>
+     */
+    public String getContentType() {
+        return contentType;
+    }
+
+    /**
+     * <p>
+     * Content type as specified in the <code>Accept</code> HTTP header in the
+     * request.
+     * </p>
+     *
+     * @param contentType <p>
+     *            Content type as specified in the <code>Accept</code> HTTP
+     *            header in the request.
+     *            </p>
+     */
+    public void setContentType(String contentType) {
+        this.contentType = contentType;
+    }
+
+    /**
+     * <p>
+     * Content type as specified in the <code>Accept</code> HTTP header in the
+     * request.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param contentType <p>
+     *            Content type as specified in the <code>Accept</code> HTTP
+     *            header in the request.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public PutSessionResult withContentType(String contentType) {
+        this.contentType = contentType;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The name of the current intent.
+     * </p>
+     *
+     * @return <p>
+     *         The name of the current intent.
+     *         </p>
+     */
+    public String getIntentName() {
+        return intentName;
+    }
+
+    /**
+     * <p>
+     * The name of the current intent.
+     * </p>
+     *
+     * @param intentName <p>
+     *            The name of the current intent.
+     *            </p>
+     */
+    public void setIntentName(String intentName) {
+        this.intentName = intentName;
+    }
+
+    /**
+     * <p>
+     * The name of the current intent.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param intentName <p>
+     *            The name of the current intent.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public PutSessionResult withIntentName(String intentName) {
+        this.intentName = intentName;
+        return this;
+    }
+
+    /**
+     * <p>
+     * Map of zero or more intent slots Amazon Lex detected from the user input
+     * during the conversation.
+     * </p>
+     * <p>
+     * Amazon Lex creates a resolution list containing likely values for a slot.
+     * The value that it returns is determined by the
+     * <code>valueSelectionStrategy</code> selected when the slot type was
+     * created or updated. If <code>valueSelectionStrategy</code> is set to
+     * <code>ORIGINAL_VALUE</code>, the value provided by the user is returned,
+     * if the user value is similar to the slot values. If
+     * <code>valueSelectionStrategy</code> is set to <code>TOP_RESOLUTION</code>
+     * Amazon Lex returns the first value in the resolution list or, if there is
+     * no resolution list, null. If you don't specify a
+     * <code>valueSelectionStrategy</code> the default is
+     * <code>ORIGINAL_VALUE</code>.
+     * </p>
+     *
+     * @return <p>
+     *         Map of zero or more intent slots Amazon Lex detected from the
+     *         user input during the conversation.
+     *         </p>
+     *         <p>
+     *         Amazon Lex creates a resolution list containing likely values for
+     *         a slot. The value that it returns is determined by the
+     *         <code>valueSelectionStrategy</code> selected when the slot type
+     *         was created or updated. If <code>valueSelectionStrategy</code> is
+     *         set to <code>ORIGINAL_VALUE</code>, the value provided by the
+     *         user is returned, if the user value is similar to the slot
+     *         values. If <code>valueSelectionStrategy</code> is set to
+     *         <code>TOP_RESOLUTION</code> Amazon Lex returns the first value in
+     *         the resolution list or, if there is no resolution list, null. If
+     *         you don't specify a <code>valueSelectionStrategy</code> the
+     *         default is <code>ORIGINAL_VALUE</code>.
+     *         </p>
+     */
+    public String getSlots() {
+        return slots;
+    }
+
+    /**
+     * <p>
+     * Map of zero or more intent slots Amazon Lex detected from the user input
+     * during the conversation.
+     * </p>
+     * <p>
+     * Amazon Lex creates a resolution list containing likely values for a slot.
+     * The value that it returns is determined by the
+     * <code>valueSelectionStrategy</code> selected when the slot type was
+     * created or updated. If <code>valueSelectionStrategy</code> is set to
+     * <code>ORIGINAL_VALUE</code>, the value provided by the user is returned,
+     * if the user value is similar to the slot values. If
+     * <code>valueSelectionStrategy</code> is set to <code>TOP_RESOLUTION</code>
+     * Amazon Lex returns the first value in the resolution list or, if there is
+     * no resolution list, null. If you don't specify a
+     * <code>valueSelectionStrategy</code> the default is
+     * <code>ORIGINAL_VALUE</code>.
+     * </p>
+     *
+     * @param slots <p>
+     *            Map of zero or more intent slots Amazon Lex detected from the
+     *            user input during the conversation.
+     *            </p>
+     *            <p>
+     *            Amazon Lex creates a resolution list containing likely values
+     *            for a slot. The value that it returns is determined by the
+     *            <code>valueSelectionStrategy</code> selected when the slot
+     *            type was created or updated. If
+     *            <code>valueSelectionStrategy</code> is set to
+     *            <code>ORIGINAL_VALUE</code>, the value provided by the user is
+     *            returned, if the user value is similar to the slot values. If
+     *            <code>valueSelectionStrategy</code> is set to
+     *            <code>TOP_RESOLUTION</code> Amazon Lex returns the first value
+     *            in the resolution list or, if there is no resolution list,
+     *            null. If you don't specify a
+     *            <code>valueSelectionStrategy</code> the default is
+     *            <code>ORIGINAL_VALUE</code>.
+     *            </p>
+     */
+    public void setSlots(String slots) {
+        this.slots = slots;
+    }
+
+    /**
+     * <p>
+     * Map of zero or more intent slots Amazon Lex detected from the user input
+     * during the conversation.
+     * </p>
+     * <p>
+     * Amazon Lex creates a resolution list containing likely values for a slot.
+     * The value that it returns is determined by the
+     * <code>valueSelectionStrategy</code> selected when the slot type was
+     * created or updated. If <code>valueSelectionStrategy</code> is set to
+     * <code>ORIGINAL_VALUE</code>, the value provided by the user is returned,
+     * if the user value is similar to the slot values. If
+     * <code>valueSelectionStrategy</code> is set to <code>TOP_RESOLUTION</code>
+     * Amazon Lex returns the first value in the resolution list or, if there is
+     * no resolution list, null. If you don't specify a
+     * <code>valueSelectionStrategy</code> the default is
+     * <code>ORIGINAL_VALUE</code>.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param slots <p>
+     *            Map of zero or more intent slots Amazon Lex detected from the
+     *            user input during the conversation.
+     *            </p>
+     *            <p>
+     *            Amazon Lex creates a resolution list containing likely values
+     *            for a slot. The value that it returns is determined by the
+     *            <code>valueSelectionStrategy</code> selected when the slot
+     *            type was created or updated. If
+     *            <code>valueSelectionStrategy</code> is set to
+     *            <code>ORIGINAL_VALUE</code>, the value provided by the user is
+     *            returned, if the user value is similar to the slot values. If
+     *            <code>valueSelectionStrategy</code> is set to
+     *            <code>TOP_RESOLUTION</code> Amazon Lex returns the first value
+     *            in the resolution list or, if there is no resolution list,
+     *            null. If you don't specify a
+     *            <code>valueSelectionStrategy</code> the default is
+     *            <code>ORIGINAL_VALUE</code>.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public PutSessionResult withSlots(String slots) {
+        this.slots = slots;
+        return this;
+    }
+
+    /**
+     * <p>
+     * Map of key/value pairs representing session-specific context information.
+     * </p>
+     *
+     * @return <p>
+     *         Map of key/value pairs representing session-specific context
+     *         information.
+     *         </p>
+     */
+    public String getSessionAttributes() {
+        return sessionAttributes;
+    }
+
+    /**
+     * <p>
+     * Map of key/value pairs representing session-specific context information.
+     * </p>
+     *
+     * @param sessionAttributes <p>
+     *            Map of key/value pairs representing session-specific context
+     *            information.
+     *            </p>
+     */
+    public void setSessionAttributes(String sessionAttributes) {
+        this.sessionAttributes = sessionAttributes;
+    }
+
+    /**
+     * <p>
+     * Map of key/value pairs representing session-specific context information.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param sessionAttributes <p>
+     *            Map of key/value pairs representing session-specific context
+     *            information.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public PutSessionResult withSessionAttributes(String sessionAttributes) {
+        this.sessionAttributes = sessionAttributes;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The next message that should be presented to the user.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>1 - 1024<br/>
+     *
+     * @return <p>
+     *         The next message that should be presented to the user.
+     *         </p>
+     */
+    public String getMessage() {
+        return message;
+    }
+
+    /**
+     * <p>
+     * The next message that should be presented to the user.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>1 - 1024<br/>
+     *
+     * @param message <p>
+     *            The next message that should be presented to the user.
+     *            </p>
+     */
+    public void setMessage(String message) {
+        this.message = message;
+    }
+
+    /**
+     * <p>
+     * The next message that should be presented to the user.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>1 - 1024<br/>
+     *
+     * @param message <p>
+     *            The next message that should be presented to the user.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public PutSessionResult withMessage(String message) {
+        this.message = message;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The format of the response message. One of the following values:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>PlainText</code> - The message contains plain UTF-8 text.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>CustomPayload</code> - The message is a custom format for the
+     * client.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>SSML</code> - The message contains text formatted for voice output.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Composite</code> - The message contains an escaped JSON object
+     * containing one or more messages from the groups that messages were
+     * assigned to when the intent was created.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>PlainText, CustomPayload, SSML, Composite
+     *
+     * @return <p>
+     *         The format of the response message. One of the following values:
+     *         </p>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         <code>PlainText</code> - The message contains plain UTF-8 text.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>CustomPayload</code> - The message is a custom format for
+     *         the client.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>SSML</code> - The message contains text formatted for voice
+     *         output.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>Composite</code> - The message contains an escaped JSON
+     *         object containing one or more messages from the groups that
+     *         messages were assigned to when the intent was created.
+     *         </p>
+     *         </li>
+     *         </ul>
+     * @see MessageFormatType
+     */
+    public String getMessageFormat() {
+        return messageFormat;
+    }
+
+    /**
+     * <p>
+     * The format of the response message. One of the following values:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>PlainText</code> - The message contains plain UTF-8 text.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>CustomPayload</code> - The message is a custom format for the
+     * client.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>SSML</code> - The message contains text formatted for voice output.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Composite</code> - The message contains an escaped JSON object
+     * containing one or more messages from the groups that messages were
+     * assigned to when the intent was created.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>PlainText, CustomPayload, SSML, Composite
+     *
+     * @param messageFormat <p>
+     *            The format of the response message. One of the following
+     *            values:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>PlainText</code> - The message contains plain UTF-8
+     *            text.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>CustomPayload</code> - The message is a custom format
+     *            for the client.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>SSML</code> - The message contains text formatted for
+     *            voice output.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Composite</code> - The message contains an escaped JSON
+     *            object containing one or more messages from the groups that
+     *            messages were assigned to when the intent was created.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @see MessageFormatType
+     */
+    public void setMessageFormat(String messageFormat) {
+        this.messageFormat = messageFormat;
+    }
+
+    /**
+     * <p>
+     * The format of the response message. One of the following values:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>PlainText</code> - The message contains plain UTF-8 text.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>CustomPayload</code> - The message is a custom format for the
+     * client.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>SSML</code> - The message contains text formatted for voice output.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Composite</code> - The message contains an escaped JSON object
+     * containing one or more messages from the groups that messages were
+     * assigned to when the intent was created.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>PlainText, CustomPayload, SSML, Composite
+     *
+     * @param messageFormat <p>
+     *            The format of the response message. One of the following
+     *            values:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>PlainText</code> - The message contains plain UTF-8
+     *            text.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>CustomPayload</code> - The message is a custom format
+     *            for the client.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>SSML</code> - The message contains text formatted for
+     *            voice output.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Composite</code> - The message contains an escaped JSON
+     *            object containing one or more messages from the groups that
+     *            messages were assigned to when the intent was created.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     * @see MessageFormatType
+     */
+    public PutSessionResult withMessageFormat(String messageFormat) {
+        this.messageFormat = messageFormat;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The format of the response message. One of the following values:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>PlainText</code> - The message contains plain UTF-8 text.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>CustomPayload</code> - The message is a custom format for the
+     * client.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>SSML</code> - The message contains text formatted for voice output.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Composite</code> - The message contains an escaped JSON object
+     * containing one or more messages from the groups that messages were
+     * assigned to when the intent was created.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>PlainText, CustomPayload, SSML, Composite
+     *
+     * @param messageFormat <p>
+     *            The format of the response message. One of the following
+     *            values:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>PlainText</code> - The message contains plain UTF-8
+     *            text.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>CustomPayload</code> - The message is a custom format
+     *            for the client.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>SSML</code> - The message contains text formatted for
+     *            voice output.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Composite</code> - The message contains an escaped JSON
+     *            object containing one or more messages from the groups that
+     *            messages were assigned to when the intent was created.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @see MessageFormatType
+     */
+    public void setMessageFormat(MessageFormatType messageFormat) {
+        this.messageFormat = messageFormat.toString();
+    }
+
+    /**
+     * <p>
+     * The format of the response message. One of the following values:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>PlainText</code> - The message contains plain UTF-8 text.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>CustomPayload</code> - The message is a custom format for the
+     * client.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>SSML</code> - The message contains text formatted for voice output.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Composite</code> - The message contains an escaped JSON object
+     * containing one or more messages from the groups that messages were
+     * assigned to when the intent was created.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>PlainText, CustomPayload, SSML, Composite
+     *
+     * @param messageFormat <p>
+     *            The format of the response message. One of the following
+     *            values:
+     *            </p>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>PlainText</code> - The message contains plain UTF-8
+     *            text.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>CustomPayload</code> - The message is a custom format
+     *            for the client.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>SSML</code> - The message contains text formatted for
+     *            voice output.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Composite</code> - The message contains an escaped JSON
+     *            object containing one or more messages from the groups that
+     *            messages were assigned to when the intent was created.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     * @see MessageFormatType
+     */
+    public PutSessionResult withMessageFormat(MessageFormatType messageFormat) {
+        this.messageFormat = messageFormat.toString();
+        return this;
+    }
+
+    /**
+     * <p/>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>ConfirmIntent</code> - Amazon Lex is expecting a "yes" or "no"
+     * response to confirm the intent before fulfilling an intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitIntent</code> - Amazon Lex wants to elicit the user's intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitSlot</code> - Amazon Lex is expecting the value of a slot for
+     * the current intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Failed</code> - Conveys that the conversation with the user has
+     * failed. This can happen for various reasons, including the user does not
+     * provide an appropriate response to prompts from the service, or if the
+     * Lambda function fails to fulfill the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Fulfilled</code> - Conveys that the Lambda function has sucessfully
+     * fulfilled the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ReadyForFulfillment</code> - Conveys that the client has to fulfill
+     * the intent.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>ElicitIntent, ConfirmIntent, ElicitSlot,
+     * Fulfilled, ReadyForFulfillment, Failed
+     *
+     * @return <p/>
+     *         <ul>
+     *         <li>
+     *         <p>
+     *         <code>ConfirmIntent</code> - Amazon Lex is expecting a "yes" or
+     *         "no" response to confirm the intent before fulfilling an intent.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>ElicitIntent</code> - Amazon Lex wants to elicit the user's
+     *         intent.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>ElicitSlot</code> - Amazon Lex is expecting the value of a
+     *         slot for the current intent.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>Failed</code> - Conveys that the conversation with the user
+     *         has failed. This can happen for various reasons, including the
+     *         user does not provide an appropriate response to prompts from the
+     *         service, or if the Lambda function fails to fulfill the intent.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>Fulfilled</code> - Conveys that the Lambda function has
+     *         sucessfully fulfilled the intent.
+     *         </p>
+     *         </li>
+     *         <li>
+     *         <p>
+     *         <code>ReadyForFulfillment</code> - Conveys that the client has to
+     *         fulfill the intent.
+     *         </p>
+     *         </li>
+     *         </ul>
+     * @see DialogState
+     */
+    public String getDialogState() {
+        return dialogState;
+    }
+
+    /**
+     * <p/>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>ConfirmIntent</code> - Amazon Lex is expecting a "yes" or "no"
+     * response to confirm the intent before fulfilling an intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitIntent</code> - Amazon Lex wants to elicit the user's intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitSlot</code> - Amazon Lex is expecting the value of a slot for
+     * the current intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Failed</code> - Conveys that the conversation with the user has
+     * failed. This can happen for various reasons, including the user does not
+     * provide an appropriate response to prompts from the service, or if the
+     * Lambda function fails to fulfill the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Fulfilled</code> - Conveys that the Lambda function has sucessfully
+     * fulfilled the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ReadyForFulfillment</code> - Conveys that the client has to fulfill
+     * the intent.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>ElicitIntent, ConfirmIntent, ElicitSlot,
+     * Fulfilled, ReadyForFulfillment, Failed
+     *
+     * @param dialogState <p/>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>ConfirmIntent</code> - Amazon Lex is expecting a "yes"
+     *            or "no" response to confirm the intent before fulfilling an
+     *            intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ElicitIntent</code> - Amazon Lex wants to elicit the
+     *            user's intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ElicitSlot</code> - Amazon Lex is expecting the value of
+     *            a slot for the current intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Failed</code> - Conveys that the conversation with the
+     *            user has failed. This can happen for various reasons,
+     *            including the user does not provide an appropriate response to
+     *            prompts from the service, or if the Lambda function fails to
+     *            fulfill the intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Fulfilled</code> - Conveys that the Lambda function has
+     *            sucessfully fulfilled the intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ReadyForFulfillment</code> - Conveys that the client has
+     *            to fulfill the intent.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @see DialogState
+     */
+    public void setDialogState(String dialogState) {
+        this.dialogState = dialogState;
+    }
+
+    /**
+     * <p/>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>ConfirmIntent</code> - Amazon Lex is expecting a "yes" or "no"
+     * response to confirm the intent before fulfilling an intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitIntent</code> - Amazon Lex wants to elicit the user's intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitSlot</code> - Amazon Lex is expecting the value of a slot for
+     * the current intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Failed</code> - Conveys that the conversation with the user has
+     * failed. This can happen for various reasons, including the user does not
+     * provide an appropriate response to prompts from the service, or if the
+     * Lambda function fails to fulfill the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Fulfilled</code> - Conveys that the Lambda function has sucessfully
+     * fulfilled the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ReadyForFulfillment</code> - Conveys that the client has to fulfill
+     * the intent.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>ElicitIntent, ConfirmIntent, ElicitSlot,
+     * Fulfilled, ReadyForFulfillment, Failed
+     *
+     * @param dialogState <p/>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>ConfirmIntent</code> - Amazon Lex is expecting a "yes"
+     *            or "no" response to confirm the intent before fulfilling an
+     *            intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ElicitIntent</code> - Amazon Lex wants to elicit the
+     *            user's intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ElicitSlot</code> - Amazon Lex is expecting the value of
+     *            a slot for the current intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Failed</code> - Conveys that the conversation with the
+     *            user has failed. This can happen for various reasons,
+     *            including the user does not provide an appropriate response to
+     *            prompts from the service, or if the Lambda function fails to
+     *            fulfill the intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Fulfilled</code> - Conveys that the Lambda function has
+     *            sucessfully fulfilled the intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ReadyForFulfillment</code> - Conveys that the client has
+     *            to fulfill the intent.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     * @see DialogState
+     */
+    public PutSessionResult withDialogState(String dialogState) {
+        this.dialogState = dialogState;
+        return this;
+    }
+
+    /**
+     * <p/>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>ConfirmIntent</code> - Amazon Lex is expecting a "yes" or "no"
+     * response to confirm the intent before fulfilling an intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitIntent</code> - Amazon Lex wants to elicit the user's intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitSlot</code> - Amazon Lex is expecting the value of a slot for
+     * the current intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Failed</code> - Conveys that the conversation with the user has
+     * failed. This can happen for various reasons, including the user does not
+     * provide an appropriate response to prompts from the service, or if the
+     * Lambda function fails to fulfill the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Fulfilled</code> - Conveys that the Lambda function has sucessfully
+     * fulfilled the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ReadyForFulfillment</code> - Conveys that the client has to fulfill
+     * the intent.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>ElicitIntent, ConfirmIntent, ElicitSlot,
+     * Fulfilled, ReadyForFulfillment, Failed
+     *
+     * @param dialogState <p/>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>ConfirmIntent</code> - Amazon Lex is expecting a "yes"
+     *            or "no" response to confirm the intent before fulfilling an
+     *            intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ElicitIntent</code> - Amazon Lex wants to elicit the
+     *            user's intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ElicitSlot</code> - Amazon Lex is expecting the value of
+     *            a slot for the current intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Failed</code> - Conveys that the conversation with the
+     *            user has failed. This can happen for various reasons,
+     *            including the user does not provide an appropriate response to
+     *            prompts from the service, or if the Lambda function fails to
+     *            fulfill the intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Fulfilled</code> - Conveys that the Lambda function has
+     *            sucessfully fulfilled the intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ReadyForFulfillment</code> - Conveys that the client has
+     *            to fulfill the intent.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @see DialogState
+     */
+    public void setDialogState(DialogState dialogState) {
+        this.dialogState = dialogState.toString();
+    }
+
+    /**
+     * <p/>
+     * <ul>
+     * <li>
+     * <p>
+     * <code>ConfirmIntent</code> - Amazon Lex is expecting a "yes" or "no"
+     * response to confirm the intent before fulfilling an intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitIntent</code> - Amazon Lex wants to elicit the user's intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ElicitSlot</code> - Amazon Lex is expecting the value of a slot for
+     * the current intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Failed</code> - Conveys that the conversation with the user has
+     * failed. This can happen for various reasons, including the user does not
+     * provide an appropriate response to prompts from the service, or if the
+     * Lambda function fails to fulfill the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>Fulfilled</code> - Conveys that the Lambda function has sucessfully
+     * fulfilled the intent.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <code>ReadyForFulfillment</code> - Conveys that the client has to fulfill
+     * the intent.
+     * </p>
+     * </li>
+     * </ul>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Allowed Values: </b>ElicitIntent, ConfirmIntent, ElicitSlot,
+     * Fulfilled, ReadyForFulfillment, Failed
+     *
+     * @param dialogState <p/>
+     *            <ul>
+     *            <li>
+     *            <p>
+     *            <code>ConfirmIntent</code> - Amazon Lex is expecting a "yes"
+     *            or "no" response to confirm the intent before fulfilling an
+     *            intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ElicitIntent</code> - Amazon Lex wants to elicit the
+     *            user's intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ElicitSlot</code> - Amazon Lex is expecting the value of
+     *            a slot for the current intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Failed</code> - Conveys that the conversation with the
+     *            user has failed. This can happen for various reasons,
+     *            including the user does not provide an appropriate response to
+     *            prompts from the service, or if the Lambda function fails to
+     *            fulfill the intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>Fulfilled</code> - Conveys that the Lambda function has
+     *            sucessfully fulfilled the intent.
+     *            </p>
+     *            </li>
+     *            <li>
+     *            <p>
+     *            <code>ReadyForFulfillment</code> - Conveys that the client has
+     *            to fulfill the intent.
+     *            </p>
+     *            </li>
+     *            </ul>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     * @see DialogState
+     */
+    public PutSessionResult withDialogState(DialogState dialogState) {
+        this.dialogState = dialogState.toString();
+        return this;
+    }
+
+    /**
+     * <p>
+     * If the <code>dialogState</code> is <code>ElicitSlot</code>, returns the
+     * name of the slot for which Amazon Lex is eliciting a value.
+     * </p>
+     *
+     * @return <p>
+     *         If the <code>dialogState</code> is <code>ElicitSlot</code>,
+     *         returns the name of the slot for which Amazon Lex is eliciting a
+     *         value.
+     *         </p>
+     */
+    public String getSlotToElicit() {
+        return slotToElicit;
+    }
+
+    /**
+     * <p>
+     * If the <code>dialogState</code> is <code>ElicitSlot</code>, returns the
+     * name of the slot for which Amazon Lex is eliciting a value.
+     * </p>
+     *
+     * @param slotToElicit <p>
+     *            If the <code>dialogState</code> is <code>ElicitSlot</code>,
+     *            returns the name of the slot for which Amazon Lex is eliciting
+     *            a value.
+     *            </p>
+     */
+    public void setSlotToElicit(String slotToElicit) {
+        this.slotToElicit = slotToElicit;
+    }
+
+    /**
+     * <p>
+     * If the <code>dialogState</code> is <code>ElicitSlot</code>, returns the
+     * name of the slot for which Amazon Lex is eliciting a value.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param slotToElicit <p>
+     *            If the <code>dialogState</code> is <code>ElicitSlot</code>,
+     *            returns the name of the slot for which Amazon Lex is eliciting
+     *            a value.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public PutSessionResult withSlotToElicit(String slotToElicit) {
+        this.slotToElicit = slotToElicit;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The audio version of the message to convey to the user.
+     * </p>
+     *
+     * @return <p>
+     *         The audio version of the message to convey to the user.
+     *         </p>
+     */
+    public java.io.InputStream getAudioStream() {
+        return audioStream;
+    }
+
+    /**
+     * <p>
+     * The audio version of the message to convey to the user.
+     * </p>
+     *
+     * @param audioStream <p>
+     *            The audio version of the message to convey to the user.
+     *            </p>
+     */
+    public void setAudioStream(java.io.InputStream audioStream) {
+        this.audioStream = audioStream;
+    }
+
+    /**
+     * <p>
+     * The audio version of the message to convey to the user.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param audioStream <p>
+     *            The audio version of the message to convey to the user.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public PutSessionResult withAudioStream(java.io.InputStream audioStream) {
+        this.audioStream = audioStream;
+        return this;
+    }
+
+    /**
+     * <p>
+     * A unique identifier for the session.
+     * </p>
+     *
+     * @return <p>
+     *         A unique identifier for the session.
+     *         </p>
+     */
+    public String getSessionId() {
+        return sessionId;
+    }
+
+    /**
+     * <p>
+     * A unique identifier for the session.
+     * </p>
+     *
+     * @param sessionId <p>
+     *            A unique identifier for the session.
+     *            </p>
+     */
+    public void setSessionId(String sessionId) {
+        this.sessionId = sessionId;
+    }
+
+    /**
+     * <p>
+     * A unique identifier for the session.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param sessionId <p>
+     *            A unique identifier for the session.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public PutSessionResult withSessionId(String sessionId) {
+        this.sessionId = sessionId;
+        return this;
+    }
+
+    /**
+     * Returns a string representation of this object; useful for testing and
+     * debugging.
+     *
+     * @return A string representation of this object.
+     * @see java.lang.Object#toString()
+     */
+    @Override
+    public String toString() {
+        StringBuilder sb = new StringBuilder();
+        sb.append("{");
+        if (getContentType() != null)
+            sb.append("contentType: " + getContentType() + ",");
+        if (getIntentName() != null)
+            sb.append("intentName: " + getIntentName() + ",");
+        if (getSlots() != null)
+            sb.append("slots: " + getSlots() + ",");
+        if (getSessionAttributes() != null)
+            sb.append("sessionAttributes: " + getSessionAttributes() + ",");
+        if (getMessage() != null)
+            sb.append("message: " + getMessage() + ",");
+        if (getMessageFormat() != null)
+            sb.append("messageFormat: " + getMessageFormat() + ",");
+        if (getDialogState() != null)
+            sb.append("dialogState: " + getDialogState() + ",");
+        if (getSlotToElicit() != null)
+            sb.append("slotToElicit: " + getSlotToElicit() + ",");
+        if (getAudioStream() != null)
+            sb.append("audioStream: " + getAudioStream() + ",");
+        if (getSessionId() != null)
+            sb.append("sessionId: " + getSessionId());
+        sb.append("}");
+        return sb.toString();
+    }
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int hashCode = 1;
+
+        hashCode = prime * hashCode
+                + ((getContentType() == null) ? 0 : getContentType().hashCode());
+        hashCode = prime * hashCode + ((getIntentName() == null) ? 0 : getIntentName().hashCode());
+        hashCode = prime * hashCode + ((getSlots() == null) ? 0 : getSlots().hashCode());
+        hashCode = prime * hashCode
+                + ((getSessionAttributes() == null) ? 0 : getSessionAttributes().hashCode());
+        hashCode = prime * hashCode + ((getMessage() == null) ? 0 : getMessage().hashCode());
+        hashCode = prime * hashCode
+                + ((getMessageFormat() == null) ? 0 : getMessageFormat().hashCode());
+        hashCode = prime * hashCode
+                + ((getDialogState() == null) ? 0 : getDialogState().hashCode());
+        hashCode = prime * hashCode
+                + ((getSlotToElicit() == null) ? 0 : getSlotToElicit().hashCode());
+        hashCode = prime * hashCode
+                + ((getAudioStream() == null) ? 0 : getAudioStream().hashCode());
+        hashCode = prime * hashCode + ((getSessionId() == null) ? 0 : getSessionId().hashCode());
+        return hashCode;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj)
+            return true;
+        if (obj == null)
+            return false;
+
+        if (obj instanceof PutSessionResult == false)
+            return false;
+        PutSessionResult other = (PutSessionResult) obj;
+
+        if (other.getContentType() == null ^ this.getContentType() == null)
+            return false;
+        if (other.getContentType() != null
+                && other.getContentType().equals(this.getContentType()) == false)
+            return false;
+        if (other.getIntentName() == null ^ this.getIntentName() == null)
+            return false;
+        if (other.getIntentName() != null
+                && other.getIntentName().equals(this.getIntentName()) == false)
+            return false;
+        if (other.getSlots() == null ^ this.getSlots() == null)
+            return false;
+        if (other.getSlots() != null && other.getSlots().equals(this.getSlots()) == false)
+            return false;
+        if (other.getSessionAttributes() == null ^ this.getSessionAttributes() == null)
+            return false;
+        if (other.getSessionAttributes() != null
+                && other.getSessionAttributes().equals(this.getSessionAttributes()) == false)
+            return false;
+        if (other.getMessage() == null ^ this.getMessage() == null)
+            return false;
+        if (other.getMessage() != null && other.getMessage().equals(this.getMessage()) == false)
+            return false;
+        if (other.getMessageFormat() == null ^ this.getMessageFormat() == null)
+            return false;
+        if (other.getMessageFormat() != null
+                && other.getMessageFormat().equals(this.getMessageFormat()) == false)
+            return false;
+        if (other.getDialogState() == null ^ this.getDialogState() == null)
+            return false;
+        if (other.getDialogState() != null
+                && other.getDialogState().equals(this.getDialogState()) == false)
+            return false;
+        if (other.getSlotToElicit() == null ^ this.getSlotToElicit() == null)
+            return false;
+        if (other.getSlotToElicit() != null
+                && other.getSlotToElicit().equals(this.getSlotToElicit()) == false)
+            return false;
+        if (other.getAudioStream() == null ^ this.getAudioStream() == null)
+            return false;
+        if (other.getAudioStream() != null
+                && other.getAudioStream().equals(this.getAudioStream()) == false)
+            return false;
+        if (other.getSessionId() == null ^ this.getSessionId() == null)
+            return false;
+        if (other.getSessionId() != null
+                && other.getSessionId().equals(this.getSessionId()) == false)
+            return false;
+        return true;
+    }
+}
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/DeleteSessionRequestMarshaller.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/DeleteSessionRequestMarshaller.java
new file mode 100644
index 0000000000..235b8291da
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/DeleteSessionRequestMarshaller.java
@@ -0,0 +1,73 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.lexrts.model.transform;
+
+import static com.amazonaws.util.StringUtils.UTF8;
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.OutputStreamWriter;
+import java.io.StringWriter;
+import java.io.Writer;
+
+import com.amazonaws.AmazonClientException;
+import com.amazonaws.Request;
+import com.amazonaws.DefaultRequest;
+import com.amazonaws.http.HttpMethodName;
+import com.amazonaws.services.lexrts.model.*;
+import com.amazonaws.transform.Marshaller;
+import com.amazonaws.util.BinaryUtils;
+import com.amazonaws.util.StringUtils;
+import com.amazonaws.util.StringInputStream;
+import com.amazonaws.util.json.AwsJsonWriter;
+import com.amazonaws.util.json.JsonUtils;
+
+/**
+ * JSON request marshaller for DeleteSessionRequest
+ */
+public class DeleteSessionRequestMarshaller implements
+        Marshaller<Request<DeleteSessionRequest>, DeleteSessionRequest> {
+
+    public Request<DeleteSessionRequest> marshall(DeleteSessionRequest deleteSessionRequest) {
+        if (deleteSessionRequest == null) {
+            throw new AmazonClientException(
+                    "Invalid argument passed to marshall(DeleteSessionRequest)");
+        }
+
+        Request<DeleteSessionRequest> request = new DefaultRequest<DeleteSessionRequest>(
+                deleteSessionRequest, "AmazonLexRuntime");
+        request.setHttpMethod(HttpMethodName.DELETE);
+
+        String uriResourcePath = "/bot/{botName}/alias/{botAlias}/user/{userId}/session";
+        uriResourcePath = uriResourcePath.replace(
+                "{botName}",
+                (deleteSessionRequest.getBotName() == null) ? "" : StringUtils
+                        .fromString(deleteSessionRequest.getBotName()));
+        uriResourcePath = uriResourcePath.replace(
+                "{botAlias}",
+                (deleteSessionRequest.getBotAlias() == null) ? "" : StringUtils
+                        .fromString(deleteSessionRequest.getBotAlias()));
+        uriResourcePath = uriResourcePath.replace(
+                "{userId}",
+                (deleteSessionRequest.getUserId() == null) ? "" : StringUtils
+                        .fromString(deleteSessionRequest.getUserId()));
+        request.setResourcePath(uriResourcePath);
+        if (!request.getHeaders().containsKey("Content-Type")) {
+            request.addHeader("Content-Type", "application/x-amz-json-1.1");
+        }
+
+        return request;
+    }
+}
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/DeleteSessionResultJsonUnmarshaller.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/DeleteSessionResultJsonUnmarshaller.java
new file mode 100644
index 0000000000..25fd449f4a
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/DeleteSessionResultJsonUnmarshaller.java
@@ -0,0 +1,64 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.lexrts.model.transform;
+
+import com.amazonaws.services.lexrts.model.*;
+import com.amazonaws.transform.SimpleTypeJsonUnmarshallers.*;
+import com.amazonaws.transform.*;
+import com.amazonaws.util.json.AwsJsonReader;
+
+/**
+ * JSON unmarshaller for response DeleteSessionResult
+ */
+public class DeleteSessionResultJsonUnmarshaller implements
+        Unmarshaller<DeleteSessionResult, JsonUnmarshallerContext> {
+
+    public DeleteSessionResult unmarshall(JsonUnmarshallerContext context) throws Exception {
+        DeleteSessionResult deleteSessionResult = new DeleteSessionResult();
+
+        AwsJsonReader reader = context.getReader();
+        reader.beginObject();
+        while (reader.hasNext()) {
+            String name = reader.nextName();
+            if (name.equals("botName")) {
+                deleteSessionResult.setBotName(StringJsonUnmarshaller.getInstance()
+                        .unmarshall(context));
+            } else if (name.equals("botAlias")) {
+                deleteSessionResult.setBotAlias(StringJsonUnmarshaller.getInstance()
+                        .unmarshall(context));
+            } else if (name.equals("userId")) {
+                deleteSessionResult.setUserId(StringJsonUnmarshaller.getInstance()
+                        .unmarshall(context));
+            } else if (name.equals("sessionId")) {
+                deleteSessionResult.setSessionId(StringJsonUnmarshaller.getInstance()
+                        .unmarshall(context));
+            } else {
+                reader.skipValue();
+            }
+        }
+        reader.endObject();
+
+        return deleteSessionResult;
+    }
+
+    private static DeleteSessionResultJsonUnmarshaller instance;
+
+    public static DeleteSessionResultJsonUnmarshaller getInstance() {
+        if (instance == null)
+            instance = new DeleteSessionResultJsonUnmarshaller();
+        return instance;
+    }
+}
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/DialogActionJsonMarshaller.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/DialogActionJsonMarshaller.java
new file mode 100644
index 0000000000..a79c6b519c
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/DialogActionJsonMarshaller.java
@@ -0,0 +1,81 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.lexrts.model.transform;
+
+import com.amazonaws.services.lexrts.model.*;
+import com.amazonaws.util.json.AwsJsonWriter;
+
+/**
+ * JSON marshaller for POJO DialogAction
+ */
+class DialogActionJsonMarshaller {
+
+    public void marshall(DialogAction dialogAction, AwsJsonWriter jsonWriter) throws Exception {
+        jsonWriter.beginObject();
+        if (dialogAction.getType() != null) {
+            String type = dialogAction.getType();
+            jsonWriter.name("type");
+            jsonWriter.value(type);
+        }
+        if (dialogAction.getIntentName() != null) {
+            String intentName = dialogAction.getIntentName();
+            jsonWriter.name("intentName");
+            jsonWriter.value(intentName);
+        }
+        if (dialogAction.getSlots() != null) {
+            java.util.Map<String, String> slots = dialogAction.getSlots();
+            jsonWriter.name("slots");
+            jsonWriter.beginObject();
+            for (java.util.Map.Entry<String, String> slotsEntry : slots.entrySet()) {
+                String slotsValue = slotsEntry.getValue();
+                if (slotsValue != null) {
+                    jsonWriter.name(slotsEntry.getKey());
+                    jsonWriter.value(slotsValue);
+                }
+            }
+            jsonWriter.endObject();
+        }
+        if (dialogAction.getSlotToElicit() != null) {
+            String slotToElicit = dialogAction.getSlotToElicit();
+            jsonWriter.name("slotToElicit");
+            jsonWriter.value(slotToElicit);
+        }
+        if (dialogAction.getFulfillmentState() != null) {
+            String fulfillmentState = dialogAction.getFulfillmentState();
+            jsonWriter.name("fulfillmentState");
+            jsonWriter.value(fulfillmentState);
+        }
+        if (dialogAction.getMessage() != null) {
+            String message = dialogAction.getMessage();
+            jsonWriter.name("message");
+            jsonWriter.value(message);
+        }
+        if (dialogAction.getMessageFormat() != null) {
+            String messageFormat = dialogAction.getMessageFormat();
+            jsonWriter.name("messageFormat");
+            jsonWriter.value(messageFormat);
+        }
+        jsonWriter.endObject();
+    }
+
+    private static DialogActionJsonMarshaller instance;
+
+    public static DialogActionJsonMarshaller getInstance() {
+        if (instance == null)
+            instance = new DialogActionJsonMarshaller();
+        return instance;
+    }
+}
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/DialogActionJsonUnmarshaller.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/DialogActionJsonUnmarshaller.java
new file mode 100644
index 0000000000..b84160ae3d
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/DialogActionJsonUnmarshaller.java
@@ -0,0 +1,76 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.lexrts.model.transform;
+
+import com.amazonaws.services.lexrts.model.*;
+import com.amazonaws.transform.SimpleTypeJsonUnmarshallers.*;
+import com.amazonaws.transform.*;
+import com.amazonaws.util.json.AwsJsonReader;
+
+/**
+ * JSON unmarshaller for POJO DialogAction
+ */
+class DialogActionJsonUnmarshaller implements Unmarshaller<DialogAction, JsonUnmarshallerContext> {
+
+    public DialogAction unmarshall(JsonUnmarshallerContext context) throws Exception {
+        AwsJsonReader reader = context.getReader();
+        if (!reader.isContainer()) {
+            reader.skipValue();
+            return null;
+        }
+        DialogAction dialogAction = new DialogAction();
+        reader.beginObject();
+        while (reader.hasNext()) {
+            String name = reader.nextName();
+            if (name.equals("type")) {
+                dialogAction.setType(StringJsonUnmarshaller.getInstance()
+                        .unmarshall(context));
+            } else if (name.equals("intentName")) {
+                dialogAction.setIntentName(StringJsonUnmarshaller.getInstance()
+                        .unmarshall(context));
+            } else if (name.equals("slots")) {
+                dialogAction.setSlots(new MapUnmarshaller<String>(StringJsonUnmarshaller
+                        .getInstance()
+                        )
+                                .unmarshall(context));
+            } else if (name.equals("slotToElicit")) {
+                dialogAction.setSlotToElicit(StringJsonUnmarshaller.getInstance()
+                        .unmarshall(context));
+            } else if (name.equals("fulfillmentState")) {
+                dialogAction.setFulfillmentState(StringJsonUnmarshaller.getInstance()
+                        .unmarshall(context));
+            } else if (name.equals("message")) {
+                dialogAction.setMessage(StringJsonUnmarshaller.getInstance()
+                        .unmarshall(context));
+            } else if (name.equals("messageFormat")) {
+                dialogAction.setMessageFormat(StringJsonUnmarshaller.getInstance()
+                        .unmarshall(context));
+            } else {
+                reader.skipValue();
+            }
+        }
+        reader.endObject();
+        return dialogAction;
+    }
+
+    private static DialogActionJsonUnmarshaller instance;
+
+    public static DialogActionJsonUnmarshaller getInstance() {
+        if (instance == null)
+            instance = new DialogActionJsonUnmarshaller();
+        return instance;
+    }
+}
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/GetSessionRequestMarshaller.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/GetSessionRequestMarshaller.java
new file mode 100644
index 0000000000..8abf77c35d
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/GetSessionRequestMarshaller.java
@@ -0,0 +1,73 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.lexrts.model.transform;
+
+import static com.amazonaws.util.StringUtils.UTF8;
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.OutputStreamWriter;
+import java.io.StringWriter;
+import java.io.Writer;
+
+import com.amazonaws.AmazonClientException;
+import com.amazonaws.Request;
+import com.amazonaws.DefaultRequest;
+import com.amazonaws.http.HttpMethodName;
+import com.amazonaws.services.lexrts.model.*;
+import com.amazonaws.transform.Marshaller;
+import com.amazonaws.util.BinaryUtils;
+import com.amazonaws.util.StringUtils;
+import com.amazonaws.util.StringInputStream;
+import com.amazonaws.util.json.AwsJsonWriter;
+import com.amazonaws.util.json.JsonUtils;
+
+/**
+ * JSON request marshaller for GetSessionRequest
+ */
+public class GetSessionRequestMarshaller implements
+        Marshaller<Request<GetSessionRequest>, GetSessionRequest> {
+
+    public Request<GetSessionRequest> marshall(GetSessionRequest getSessionRequest) {
+        if (getSessionRequest == null) {
+            throw new AmazonClientException(
+                    "Invalid argument passed to marshall(GetSessionRequest)");
+        }
+
+        Request<GetSessionRequest> request = new DefaultRequest<GetSessionRequest>(
+                getSessionRequest, "AmazonLexRuntime");
+        request.setHttpMethod(HttpMethodName.GET);
+
+        String uriResourcePath = "/bot/{botName}/alias/{botAlias}/user/{userId}/session";
+        uriResourcePath = uriResourcePath.replace(
+                "{botName}",
+                (getSessionRequest.getBotName() == null) ? "" : StringUtils
+                        .fromString(getSessionRequest.getBotName()));
+        uriResourcePath = uriResourcePath.replace(
+                "{botAlias}",
+                (getSessionRequest.getBotAlias() == null) ? "" : StringUtils
+                        .fromString(getSessionRequest.getBotAlias()));
+        uriResourcePath = uriResourcePath.replace(
+                "{userId}",
+                (getSessionRequest.getUserId() == null) ? "" : StringUtils
+                        .fromString(getSessionRequest.getUserId()));
+        request.setResourcePath(uriResourcePath);
+        if (!request.getHeaders().containsKey("Content-Type")) {
+            request.addHeader("Content-Type", "application/x-amz-json-1.1");
+        }
+
+        return request;
+    }
+}
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/GetSessionResultJsonUnmarshaller.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/GetSessionResultJsonUnmarshaller.java
new file mode 100644
index 0000000000..ba2e91d4db
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/GetSessionResultJsonUnmarshaller.java
@@ -0,0 +1,68 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.lexrts.model.transform;
+
+import com.amazonaws.services.lexrts.model.*;
+import com.amazonaws.transform.SimpleTypeJsonUnmarshallers.*;
+import com.amazonaws.transform.*;
+import com.amazonaws.util.json.AwsJsonReader;
+
+/**
+ * JSON unmarshaller for response GetSessionResult
+ */
+public class GetSessionResultJsonUnmarshaller implements
+        Unmarshaller<GetSessionResult, JsonUnmarshallerContext> {
+
+    public GetSessionResult unmarshall(JsonUnmarshallerContext context) throws Exception {
+        GetSessionResult getSessionResult = new GetSessionResult();
+
+        AwsJsonReader reader = context.getReader();
+        reader.beginObject();
+        while (reader.hasNext()) {
+            String name = reader.nextName();
+            if (name.equals("recentIntentSummaryView")) {
+                getSessionResult.setRecentIntentSummaryView(new ListUnmarshaller<IntentSummary>(
+                        IntentSummaryJsonUnmarshaller.getInstance()
+                        )
+                                .unmarshall(context));
+            } else if (name.equals("sessionAttributes")) {
+                getSessionResult.setSessionAttributes(new MapUnmarshaller<String>(
+                        StringJsonUnmarshaller.getInstance()
+                        )
+                                .unmarshall(context));
+            } else if (name.equals("sessionId")) {
+                getSessionResult.setSessionId(StringJsonUnmarshaller.getInstance()
+                        .unmarshall(context));
+            } else if (name.equals("dialogAction")) {
+                getSessionResult.setDialogAction(DialogActionJsonUnmarshaller.getInstance()
+                        .unmarshall(context));
+            } else {
+                reader.skipValue();
+            }
+        }
+        reader.endObject();
+
+        return getSessionResult;
+    }
+
+    private static GetSessionResultJsonUnmarshaller instance;
+
+    public static GetSessionResultJsonUnmarshaller getInstance() {
+        if (instance == null)
+            instance = new GetSessionResultJsonUnmarshaller();
+        return instance;
+    }
+}
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/IntentSummaryJsonMarshaller.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/IntentSummaryJsonMarshaller.java
new file mode 100644
index 0000000000..d76fbfca50
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/IntentSummaryJsonMarshaller.java
@@ -0,0 +1,76 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.lexrts.model.transform;
+
+import com.amazonaws.services.lexrts.model.*;
+import com.amazonaws.util.json.AwsJsonWriter;
+
+/**
+ * JSON marshaller for POJO IntentSummary
+ */
+class IntentSummaryJsonMarshaller {
+
+    public void marshall(IntentSummary intentSummary, AwsJsonWriter jsonWriter) throws Exception {
+        jsonWriter.beginObject();
+        if (intentSummary.getIntentName() != null) {
+            String intentName = intentSummary.getIntentName();
+            jsonWriter.name("intentName");
+            jsonWriter.value(intentName);
+        }
+        if (intentSummary.getSlots() != null) {
+            java.util.Map<String, String> slots = intentSummary.getSlots();
+            jsonWriter.name("slots");
+            jsonWriter.beginObject();
+            for (java.util.Map.Entry<String, String> slotsEntry : slots.entrySet()) {
+                String slotsValue = slotsEntry.getValue();
+                if (slotsValue != null) {
+                    jsonWriter.name(slotsEntry.getKey());
+                    jsonWriter.value(slotsValue);
+                }
+            }
+            jsonWriter.endObject();
+        }
+        if (intentSummary.getConfirmationStatus() != null) {
+            String confirmationStatus = intentSummary.getConfirmationStatus();
+            jsonWriter.name("confirmationStatus");
+            jsonWriter.value(confirmationStatus);
+        }
+        if (intentSummary.getDialogActionType() != null) {
+            String dialogActionType = intentSummary.getDialogActionType();
+            jsonWriter.name("dialogActionType");
+            jsonWriter.value(dialogActionType);
+        }
+        if (intentSummary.getFulfillmentState() != null) {
+            String fulfillmentState = intentSummary.getFulfillmentState();
+            jsonWriter.name("fulfillmentState");
+            jsonWriter.value(fulfillmentState);
+        }
+        if (intentSummary.getSlotToElicit() != null) {
+            String slotToElicit = intentSummary.getSlotToElicit();
+            jsonWriter.name("slotToElicit");
+            jsonWriter.value(slotToElicit);
+        }
+        jsonWriter.endObject();
+    }
+
+    private static IntentSummaryJsonMarshaller instance;
+
+    public static IntentSummaryJsonMarshaller getInstance() {
+        if (instance == null)
+            instance = new IntentSummaryJsonMarshaller();
+        return instance;
+    }
+}
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/IntentSummaryJsonUnmarshaller.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/IntentSummaryJsonUnmarshaller.java
new file mode 100644
index 0000000000..6ef28f797f
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/IntentSummaryJsonUnmarshaller.java
@@ -0,0 +1,73 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.lexrts.model.transform;
+
+import com.amazonaws.services.lexrts.model.*;
+import com.amazonaws.transform.SimpleTypeJsonUnmarshallers.*;
+import com.amazonaws.transform.*;
+import com.amazonaws.util.json.AwsJsonReader;
+
+/**
+ * JSON unmarshaller for POJO IntentSummary
+ */
+class IntentSummaryJsonUnmarshaller implements Unmarshaller<IntentSummary, JsonUnmarshallerContext> {
+
+    public IntentSummary unmarshall(JsonUnmarshallerContext context) throws Exception {
+        AwsJsonReader reader = context.getReader();
+        if (!reader.isContainer()) {
+            reader.skipValue();
+            return null;
+        }
+        IntentSummary intentSummary = new IntentSummary();
+        reader.beginObject();
+        while (reader.hasNext()) {
+            String name = reader.nextName();
+            if (name.equals("intentName")) {
+                intentSummary.setIntentName(StringJsonUnmarshaller.getInstance()
+                        .unmarshall(context));
+            } else if (name.equals("slots")) {
+                intentSummary.setSlots(new MapUnmarshaller<String>(StringJsonUnmarshaller
+                        .getInstance()
+                        )
+                                .unmarshall(context));
+            } else if (name.equals("confirmationStatus")) {
+                intentSummary.setConfirmationStatus(StringJsonUnmarshaller.getInstance()
+                        .unmarshall(context));
+            } else if (name.equals("dialogActionType")) {
+                intentSummary.setDialogActionType(StringJsonUnmarshaller.getInstance()
+                        .unmarshall(context));
+            } else if (name.equals("fulfillmentState")) {
+                intentSummary.setFulfillmentState(StringJsonUnmarshaller.getInstance()
+                        .unmarshall(context));
+            } else if (name.equals("slotToElicit")) {
+                intentSummary.setSlotToElicit(StringJsonUnmarshaller.getInstance()
+                        .unmarshall(context));
+            } else {
+                reader.skipValue();
+            }
+        }
+        reader.endObject();
+        return intentSummary;
+    }
+
+    private static IntentSummaryJsonUnmarshaller instance;
+
+    public static IntentSummaryJsonUnmarshaller getInstance() {
+        if (instance == null)
+            instance = new IntentSummaryJsonUnmarshaller();
+        return instance;
+    }
+}
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/PutSessionRequestMarshaller.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/PutSessionRequestMarshaller.java
new file mode 100644
index 0000000000..8602975de6
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/PutSessionRequestMarshaller.java
@@ -0,0 +1,112 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.lexrts.model.transform;
+
+import static com.amazonaws.util.StringUtils.UTF8;
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.OutputStreamWriter;
+import java.io.StringWriter;
+import java.io.Writer;
+
+import com.amazonaws.AmazonClientException;
+import com.amazonaws.Request;
+import com.amazonaws.DefaultRequest;
+import com.amazonaws.http.HttpMethodName;
+import com.amazonaws.services.lexrts.model.*;
+import com.amazonaws.transform.Marshaller;
+import com.amazonaws.util.BinaryUtils;
+import com.amazonaws.util.StringUtils;
+import com.amazonaws.util.StringInputStream;
+import com.amazonaws.util.json.AwsJsonWriter;
+import com.amazonaws.util.json.JsonUtils;
+
+/**
+ * JSON request marshaller for PutSessionRequest
+ */
+public class PutSessionRequestMarshaller implements
+        Marshaller<Request<PutSessionRequest>, PutSessionRequest> {
+
+    public Request<PutSessionRequest> marshall(PutSessionRequest putSessionRequest) {
+        if (putSessionRequest == null) {
+            throw new AmazonClientException(
+                    "Invalid argument passed to marshall(PutSessionRequest)");
+        }
+
+        Request<PutSessionRequest> request = new DefaultRequest<PutSessionRequest>(
+                putSessionRequest, "AmazonLexRuntime");
+        request.setHttpMethod(HttpMethodName.POST);
+
+        if (putSessionRequest.getAccept() != null) {
+            request.addHeader("Accept", StringUtils.fromString(putSessionRequest.getAccept()));
+        }
+        String uriResourcePath = "/bot/{botName}/alias/{botAlias}/user/{userId}/session";
+        uriResourcePath = uriResourcePath.replace(
+                "{botName}",
+                (putSessionRequest.getBotName() == null) ? "" : StringUtils
+                        .fromString(putSessionRequest.getBotName()));
+        uriResourcePath = uriResourcePath.replace(
+                "{botAlias}",
+                (putSessionRequest.getBotAlias() == null) ? "" : StringUtils
+                        .fromString(putSessionRequest.getBotAlias()));
+        uriResourcePath = uriResourcePath.replace(
+                "{userId}",
+                (putSessionRequest.getUserId() == null) ? "" : StringUtils
+                        .fromString(putSessionRequest.getUserId()));
+        request.setResourcePath(uriResourcePath);
+        try {
+            StringWriter stringWriter = new StringWriter();
+            AwsJsonWriter jsonWriter = JsonUtils.getJsonWriter(stringWriter);
+            jsonWriter.beginObject();
+
+            if (putSessionRequest.getSessionAttributes() != null) {
+                java.util.Map<String, String> sessionAttributes = putSessionRequest
+                        .getSessionAttributes();
+                jsonWriter.name("sessionAttributes");
+                jsonWriter.beginObject();
+                for (java.util.Map.Entry<String, String> sessionAttributesEntry : sessionAttributes
+                        .entrySet()) {
+                    String sessionAttributesValue = sessionAttributesEntry.getValue();
+                    if (sessionAttributesValue != null) {
+                        jsonWriter.name(sessionAttributesEntry.getKey());
+                        jsonWriter.value(sessionAttributesValue);
+                    }
+                }
+                jsonWriter.endObject();
+            }
+            if (putSessionRequest.getDialogAction() != null) {
+                DialogAction dialogAction = putSessionRequest.getDialogAction();
+                jsonWriter.name("dialogAction");
+                DialogActionJsonMarshaller.getInstance().marshall(dialogAction, jsonWriter);
+            }
+
+            jsonWriter.endObject();
+            jsonWriter.close();
+            String snippet = stringWriter.toString();
+            byte[] content = snippet.getBytes(UTF8);
+            request.setContent(new StringInputStream(snippet));
+            request.addHeader("Content-Length", Integer.toString(content.length));
+        } catch (Throwable t) {
+            throw new AmazonClientException(
+                    "Unable to marshall request to JSON: " + t.getMessage(), t);
+        }
+        if (!request.getHeaders().containsKey("Content-Type")) {
+            request.addHeader("Content-Type", "application/x-amz-json-1.1");
+        }
+
+        return request;
+    }
+}
diff --git a/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/PutSessionResultJsonUnmarshaller.java b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/PutSessionResultJsonUnmarshaller.java
new file mode 100644
index 0000000000..a3c1f96f36
--- /dev/null
+++ b/aws-android-sdk-lex/src/main/java/com/amazonaws/services/lexrts/model/transform/PutSessionResultJsonUnmarshaller.java
@@ -0,0 +1,67 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.lexrts.model.transform;
+
+import com.amazonaws.services.lexrts.model.*;
+import com.amazonaws.transform.SimpleTypeJsonUnmarshallers.*;
+import com.amazonaws.transform.*;
+import com.amazonaws.util.json.AwsJsonReader;
+
+/**
+ * JSON unmarshaller for response PutSessionResult
+ */
+public class PutSessionResultJsonUnmarshaller implements
+        Unmarshaller<PutSessionResult, JsonUnmarshallerContext> {
+
+    public PutSessionResult unmarshall(JsonUnmarshallerContext context) throws Exception {
+        PutSessionResult putSessionResult = new PutSessionResult();
+
+        if (context.getHeader("Content-Type") != null)
+            putSessionResult.setContentType(context.getHeader("Content-Type"));
+        if (context.getHeader("x-amz-lex-intent-name") != null)
+            putSessionResult.setIntentName(context.getHeader("x-amz-lex-intent-name"));
+        if (context.getHeader("x-amz-lex-slots") != null)
+            putSessionResult.setSlots(context.getHeader("x-amz-lex-slots"));
+        if (context.getHeader("x-amz-lex-session-attributes") != null)
+            putSessionResult
+                    .setSessionAttributes(context.getHeader("x-amz-lex-session-attributes"));
+        if (context.getHeader("x-amz-lex-message") != null)
+            putSessionResult.setMessage(context.getHeader("x-amz-lex-message"));
+        if (context.getHeader("x-amz-lex-message-format") != null)
+            putSessionResult.setMessageFormat(context.getHeader("x-amz-lex-message-format"));
+        if (context.getHeader("x-amz-lex-dialog-state") != null)
+            putSessionResult.setDialogState(context.getHeader("x-amz-lex-dialog-state"));
+        if (context.getHeader("x-amz-lex-slot-to-elicit") != null)
+            putSessionResult.setSlotToElicit(context.getHeader("x-amz-lex-slot-to-elicit"));
+        java.io.InputStream is = context.getHttpResponse().getContent();
+        if (is != null) {
+            byte[] bytes = com.amazonaws.util.IOUtils.toByteArray(is);
+            java.io.ByteArrayInputStream bis = new java.io.ByteArrayInputStream(bytes);
+            putSessionResult.setAudioStream(bis);
+        }
+        if (context.getHeader("x-amz-lex-session-id") != null)
+            putSessionResult.setSessionId(context.getHeader("x-amz-lex-session-id"));
+        return putSessionResult;
+    }
+
+    private static PutSessionResultJsonUnmarshaller instance;
+
+    public static PutSessionResultJsonUnmarshaller getInstance() {
+        if (instance == null)
+            instance = new PutSessionResultJsonUnmarshaller();
+        return instance;
+    }
+}
