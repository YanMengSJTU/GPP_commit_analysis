diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/http/HttpClientFactory.java b/aws-android-sdk-core/src/main/java/com/amazonaws/http/HttpClientFactory.java
index ea8cfb7aaa..7e2f67820c 100644
--- a/aws-android-sdk-core/src/main/java/com/amazonaws/http/HttpClientFactory.java
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/http/HttpClientFactory.java
@@ -101,18 +101,6 @@ public HttpClient createHttpClient(ClientConfiguration config) {
         sr.register(http);
         sr.register(https);
 
-        /*
-         * If SSL cert checking for endpoints has been explicitly disabled,
-         * register a new scheme for HTTPS that won't cause self-signed certs to
-         * error out.
-         */
-        if (System.getProperty(DISABLE_CERT_CHECKING_SYSTEM_PROPERTY) != null) {
-            SSLSocketFactory sf = getTrustAllSSLSocketFactory();
-            sf.setHostnameVerifier(SSLSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);
-            Scheme sch = new Scheme("https", sf, 443);
-            httpClient.getConnectionManager().getSchemeRegistry().register(sch);
-        }
-
         /* Set proxy if configured */
         String proxyHost = config.getProxyHost();
         int proxyPort = config.getProxyPort();
@@ -162,73 +150,4 @@ public boolean isRedirectRequested(HttpResponse response, HttpContext context) {
             return super.isRedirectRequested(response, context);
         }
     }
-
-    /**
-     * Gets an SSLSocketFactory that bypasses SSL certificate checks.
-     *
-     * @return SSLSocketFactory
-     */
-    private static SSLSocketFactory getTrustAllSSLSocketFactory() {
-        try {
-            KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
-            trustStore.load(null, null);
-            SSLSocketFactory sf = new TrustAllSSLSocketFactory(trustStore);
-            return sf;
-        } catch (Exception e) {
-            throw new AmazonClientException("Failed to create trust all socket factory", e);
-        }
-    }
-
-    /**
-     * An SSLSocketFactory that bypasses SSL certificate checks. This class is
-     * only intended to be used for testing purposes.
-     */
-    private static class TrustAllSSLSocketFactory extends SSLSocketFactory {
-        private final SSLContext sslContext;
-
-        public TrustAllSSLSocketFactory(KeyStore keystore) throws NoSuchAlgorithmException,
-                KeyManagementException, KeyStoreException, UnrecoverableKeyException {
-            super(keystore);
-            sslContext = SSLContext.getInstance("TLS");
-            sslContext.init(null, new TrustManager[] {
-                    new TrustingX509TrustManager()
-            }, null);
-        }
-
-        @Override
-        public Socket createSocket(Socket socket, String host, int port, boolean autoClose)
-                throws IOException, UnknownHostException {
-            return sslContext.getSocketFactory().createSocket(socket, host, port, autoClose);
-        }
-
-        @Override
-        public Socket createSocket() throws IOException {
-            return sslContext.getSocketFactory().createSocket();
-        }
-    }
-
-    /**
-     * Simple implementation of X509TrustManager that trusts all certificates.
-     * This class is only intended to be used for testing purposes.
-     */
-    private static class TrustingX509TrustManager implements X509TrustManager {
-        private static final X509Certificate[] X509_CERTIFICATES = new X509Certificate[0];
-
-        @Override
-        public X509Certificate[] getAcceptedIssuers() {
-            return X509_CERTIFICATES;
-        }
-
-        @Override
-        public void checkServerTrusted(X509Certificate[] chain, String authType)
-                throws CertificateException {
-            // No-op, to trust all certs
-        }
-
-        @Override
-        public void checkClientTrusted(X509Certificate[] chain, String authType)
-                throws CertificateException {
-            // No-op, to trust all certs
-        }
-    };
 }
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/http/UrlHttpClient.java b/aws-android-sdk-core/src/main/java/com/amazonaws/http/UrlHttpClient.java
index b8e6e8146f..2ffa5a2d9d 100644
--- a/aws-android-sdk-core/src/main/java/com/amazonaws/http/UrlHttpClient.java
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/http/UrlHttpClient.java
@@ -183,62 +183,8 @@ void configureConnection(HttpURLConnection connection) {
         // configure https connection
         if (connection instanceof HttpsURLConnection) {
             HttpsURLConnection https = (HttpsURLConnection) connection;
-
-            // disable cert check
-            if (System.getProperty(DISABLE_CERT_CHECKING_SYSTEM_PROPERTY) != null) {
-                disableCertificateValidation(https);
-            }
         }
     }
 
     private SSLContext sc = null;
-
-    private void disableCertificateValidation(HttpsURLConnection connection) {
-        if (sc == null) {
-            TrustManager[] trustAllCerts = new TrustManager[] {
-                    new TrustAllManager()
-            };
-            try {
-                // Install the all-trusting trust manager
-                sc = SSLContext.getInstance("TLS");
-                sc.init(null, trustAllCerts, null);
-            } catch (GeneralSecurityException e) {
-                throw new RuntimeException(e);
-            }
-        }
-
-        connection.setSSLSocketFactory(sc.getSocketFactory());
-        connection.setHostnameVerifier(new AllowAllHostnameVerifier());
-    }
-
-    /**
-     * An allow all hostname verifier, only used internally for testing purpose.
-     */
-    static class AllowAllHostnameVerifier implements HostnameVerifier {
-        @Override
-        public boolean verify(String hostname, SSLSession session) {
-            // Always return true to bypass host name verification
-            return true;
-        }
-    }
-
-    /**
-     * A trust all policy manager, only used internally for testing purpose.
-     */
-    static class TrustAllManager implements X509TrustManager {
-        @Override
-        public X509Certificate[] getAcceptedIssuers() {
-            return null;
-        }
-
-        @Override
-        public void checkClientTrusted(X509Certificate[] certs, String authType) {
-            // No-op, to trust all certs
-        }
-
-        @Override
-        public void checkServerTrusted(X509Certificate[] certs, String authType) {
-            // No-op, to trust all certs
-        }
-    }
 }
diff --git a/aws-android-sdk-core/src/test/java/com/amazonaws/http/UrlHttpClientTest.java b/aws-android-sdk-core/src/test/java/com/amazonaws/http/UrlHttpClientTest.java
index 2f5a898733..e08d45f914 100644
--- a/aws-android-sdk-core/src/test/java/com/amazonaws/http/UrlHttpClientTest.java
+++ b/aws-android-sdk-core/src/test/java/com/amazonaws/http/UrlHttpClientTest.java
@@ -92,7 +92,7 @@ public void testConfigureConnection() throws MalformedURLException {
     }
 
     @Test
-    public void testConfigureConnectionWithCertCheckingDisabled() throws MalformedURLException {
+    public void testConfigureConnectionWithCertCheckingDisabledDoesntWorkAnymore() throws MalformedURLException {
         HttpsURLConnection conn = new MockHttpURLConnection(new URL("https://www.test.com"));
         System.setProperty(SDKGlobalConfiguration.DISABLE_CERT_CHECKING_SYSTEM_PROPERTY, "true");
         client.configureConnection(conn);
@@ -101,8 +101,8 @@ public void testConfigureConnectionWithCertCheckingDisabled() throws MalformedUR
         assertEquals(conn.getReadTimeout(), conf.getSocketTimeout());
         assertFalse(conn.getInstanceFollowRedirects());
         assertFalse("disable cache", conn.getUseCaches());
-        assertTrue(conn.getHostnameVerifier().verify("https://some.bogus.com", null));
-        assertTrue(conn.getHostnameVerifier()
+        assertFalse(conn.getHostnameVerifier().verify("https://some.bogus.com", null));
+        assertFalse(conn.getHostnameVerifier()
                 .verify("https://bucket.withdot.s3.amazonaws.com", null));
         System.clearProperty(SDKGlobalConfiguration.DISABLE_CERT_CHECKING_SYSTEM_PROPERTY);
     }
