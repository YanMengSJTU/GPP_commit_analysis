diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/auth/policy/actions/SecurityTokenServiceActions.java b/aws-android-sdk-core/src/main/java/com/amazonaws/auth/policy/actions/SecurityTokenServiceActions.java
index 780078b82d..aa908014f0 100644
--- a/aws-android-sdk-core/src/main/java/com/amazonaws/auth/policy/actions/SecurityTokenServiceActions.java
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/auth/policy/actions/SecurityTokenServiceActions.java
@@ -28,9 +28,15 @@
     /** Action for the AssumeRole operation. */
     AssumeRole("sts:AssumeRole"),
 
+    /** Action for the AssumeRoleWithSAML operation. */
+    AssumeRoleWithSAML("sts:AssumeRoleWithSAML"),
+
     /** Action for the AssumeRoleWithWebIdentity operation. */
     AssumeRoleWithWebIdentity("sts:AssumeRoleWithWebIdentity"),
 
+    /** Action for the DecodeAuthorizationMessage operation. */
+    DecodeAuthorizationMessage("sts:DecodeAuthorizationMessage"),
+
     /** Action for the GetAccessKeyInfo operation. */
     GetAccessKeyInfo("sts:GetAccessKeyInfo"),
 
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/AWSSecurityTokenService.java b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/AWSSecurityTokenService.java
index 6c4bc37e16..9f1eaae8c4 100644
--- a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/AWSSecurityTokenService.java
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/AWSSecurityTokenService.java
@@ -346,6 +346,151 @@
     AssumeRoleResult assumeRole(AssumeRoleRequest assumeRoleRequest) throws AmazonClientException,
             AmazonServiceException;
 
+    /**
+     * <p>
+     * Returns a set of temporary security credentials for users who have been
+     * authenticated via a SAML authentication response. This operation provides
+     * a mechanism for tying an enterprise identity store or directory to
+     * role-based AWS access without user-specific credentials or configuration.
+     * For a comparison of <code>AssumeRoleWithSAML</code> with the other API
+     * operations that produce temporary credentials, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html"
+     * >Requesting Temporary Security Credentials</a> and <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison"
+     * >Comparing the AWS STS API operations</a> in the <i>IAM User Guide</i>.
+     * </p>
+     * <p>
+     * The temporary security credentials returned by this operation consist of
+     * an access key ID, a secret access key, and a security token. Applications
+     * can use these temporary security credentials to sign calls to AWS
+     * services.
+     * </p>
+     * <p>
+     * By default, the temporary security credentials created by
+     * <code>AssumeRoleWithSAML</code> last for one hour. However, you can use
+     * the optional <code>DurationSeconds</code> parameter to specify the
+     * duration of your session. Your role session lasts for the duration that
+     * you specify, or until the time specified in the SAML authentication
+     * response's <code>SessionNotOnOrAfter</code> value, whichever is shorter.
+     * You can provide a <code>DurationSeconds</code> value from 900 seconds (15
+     * minutes) up to the maximum session duration setting for the role. This
+     * setting can have a value from 1 hour to 12 hours. To learn how to view
+     * the maximum value for your role, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session"
+     * >View the Maximum Session Duration Setting for a Role</a> in the <i>IAM
+     * User Guide</i>. The maximum session duration limit applies when you use
+     * the <code>AssumeRole*</code> API operations or the
+     * <code>assume-role*</code> CLI commands. However the limit does not apply
+     * when you use those operations to create a console URL. For more
+     * information, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html"
+     * >Using IAM Roles</a> in the <i>IAM User Guide</i>.
+     * </p>
+     * <p>
+     * The temporary security credentials created by
+     * <code>AssumeRoleWithSAML</code> can be used to make API calls to any AWS
+     * service with the following exception: you cannot call the STS
+     * <code>GetFederationToken</code> or <code>GetSessionToken</code> API
+     * operations.
+     * </p>
+     * <p>
+     * (Optional) You can pass inline or managed <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session"
+     * >session policies</a> to this operation. You can pass a single JSON
+     * policy document to use as an inline session policy. You can also specify
+     * up to 10 managed policies to use as managed session policies. The plain
+     * text that you use for both inline and managed session policies shouldn't
+     * exceed 2048 characters. Passing policies to this operation returns new
+     * temporary credentials. The resulting session's permissions are the
+     * intersection of the role's identity-based policy and the session
+     * policies. You can use the role's temporary credentials in subsequent AWS
+     * API calls to access resources in the account that owns the role. You
+     * cannot use session policies to grant more permissions than those allowed
+     * by the identity-based policy of the role that is being assumed. For more
+     * information, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session"
+     * >Session Policies</a> in the <i>IAM User Guide</i>.
+     * </p>
+     * <p>
+     * Before your application can call <code>AssumeRoleWithSAML</code>, you
+     * must configure your SAML identity provider (IdP) to issue the claims
+     * required by AWS. Additionally, you must use AWS Identity and Access
+     * Management (IAM) to create a SAML provider entity in your AWS account
+     * that represents your identity provider. You must also create an IAM role
+     * that specifies this SAML provider in its trust policy.
+     * </p>
+     * <p>
+     * Calling <code>AssumeRoleWithSAML</code> does not require the use of AWS
+     * security credentials. The identity of the caller is validated by using
+     * keys in the metadata document that is uploaded for the SAML provider
+     * entity for your identity provider.
+     * </p>
+     * <important>
+     * <p>
+     * Calling <code>AssumeRoleWithSAML</code> can result in an entry in your
+     * AWS CloudTrail logs. The entry includes the value in the
+     * <code>NameID</code> element of the SAML assertion. We recommend that you
+     * use a <code>NameIDType</code> that is not associated with any personally
+     * identifiable information (PII). For example, you could instead use the
+     * Persistent Identifier (
+     * <code>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</code>).
+     * </p>
+     * </important>
+     * <p>
+     * For more information, see the following resources:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html"
+     * >About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_saml.html"
+     * >Creating SAML Identity Providers</a> in the <i>IAM User Guide</i>.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_saml_relying-party.html"
+     * >Configuring a Relying Party and Claims</a> in the <i>IAM User Guide</i>.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-idp_saml.html"
+     * >Creating a Role for SAML 2.0 Federation</a> in the <i>IAM User
+     * Guide</i>.
+     * </p>
+     * </li>
+     * </ul>
+     * 
+     * @param assumeRoleWithSAMLRequest
+     * @return assumeRoleWithSAMLResult The response from the AssumeRoleWithSAML
+     *         service method, as returned by AWS Security Token Service.
+     * @throws MalformedPolicyDocumentException
+     * @throws PackedPolicyTooLargeException
+     * @throws IDPRejectedClaimException
+     * @throws InvalidIdentityTokenException
+     * @throws ExpiredTokenException
+     * @throws RegionDisabledException
+     * @throws AmazonClientException If any internal errors are encountered
+     *             inside the client while attempting to make the request or
+     *             handle the response. For example if a network connection is
+     *             not available.
+     * @throws AmazonServiceException If an error response is returned by AWS
+     *             Security Token Service indicating either a problem with the
+     *             data in the request, or a server side issue.
+     */
+    AssumeRoleWithSAMLResult assumeRoleWithSAML(AssumeRoleWithSAMLRequest assumeRoleWithSAMLRequest)
+            throws AmazonClientException, AmazonServiceException;
+
     /**
      * <p>
      * Returns a set of temporary security credentials for users who have been
@@ -526,6 +671,86 @@ AssumeRoleWithWebIdentityResult assumeRoleWithWebIdentity(
             AssumeRoleWithWebIdentityRequest assumeRoleWithWebIdentityRequest)
             throws AmazonClientException, AmazonServiceException;
 
+    /**
+     * <p>
+     * Decodes additional information about the authorization status of a
+     * request from an encoded message returned in response to an AWS request.
+     * </p>
+     * <p>
+     * For example, if a user is not authorized to perform an operation that he
+     * or she has requested, the request returns a
+     * <code>Client.UnauthorizedOperation</code> response (an HTTP 403
+     * response). Some AWS operations additionally return an encoded message
+     * that can provide details about this authorization failure.
+     * </p>
+     * <note>
+     * <p>
+     * Only certain AWS operations return an encoded authorization message. The
+     * documentation for an individual operation indicates whether that
+     * operation returns an encoded message in addition to returning an HTTP
+     * code.
+     * </p>
+     * </note>
+     * <p>
+     * The message is encoded because the details of the authorization status
+     * can constitute privileged information that the user who requested the
+     * operation should not see. To decode an authorization status message, a
+     * user must be granted permissions via an IAM policy to request the
+     * <code>DecodeAuthorizationMessage</code> (
+     * <code>sts:DecodeAuthorizationMessage</code>) action.
+     * </p>
+     * <p>
+     * The decoded message includes the following type of information:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Whether the request was denied due to an explicit deny or due to the
+     * absence of an explicit allow. For more information, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-denyallow"
+     * >Determining Whether a Request is Allowed or Denied</a> in the <i>IAM
+     * User Guide</i>.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * The principal who made the request.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * The requested action.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * The requested resource.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * The values of condition keys in the context of the user's request.
+     * </p>
+     * </li>
+     * </ul>
+     * 
+     * @param decodeAuthorizationMessageRequest
+     * @return decodeAuthorizationMessageResult The response from the
+     *         DecodeAuthorizationMessage service method, as returned by AWS
+     *         Security Token Service.
+     * @throws InvalidAuthorizationMessageException
+     * @throws AmazonClientException If any internal errors are encountered
+     *             inside the client while attempting to make the request or
+     *             handle the response. For example if a network connection is
+     *             not available.
+     * @throws AmazonServiceException If an error response is returned by AWS
+     *             Security Token Service indicating either a problem with the
+     *             data in the request, or a server side issue.
+     */
+    DecodeAuthorizationMessageResult decodeAuthorizationMessage(
+            DecodeAuthorizationMessageRequest decodeAuthorizationMessageRequest)
+            throws AmazonClientException, AmazonServiceException;
+
     /**
      * <p>
      * Returns the account identifier for the specified access key ID.
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/AWSSecurityTokenServiceClient.java b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/AWSSecurityTokenServiceClient.java
index c553385fd7..551adfd265 100644
--- a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/AWSSecurityTokenServiceClient.java
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/AWSSecurityTokenServiceClient.java
@@ -442,6 +442,7 @@ private void init() {
         exceptionUnmarshallers.add(new ExpiredTokenExceptionUnmarshaller());
         exceptionUnmarshallers.add(new IDPCommunicationErrorExceptionUnmarshaller());
         exceptionUnmarshallers.add(new IDPRejectedClaimExceptionUnmarshaller());
+        exceptionUnmarshallers.add(new InvalidAuthorizationMessageExceptionUnmarshaller());
         exceptionUnmarshallers.add(new InvalidIdentityTokenExceptionUnmarshaller());
         exceptionUnmarshallers.add(new MalformedPolicyDocumentExceptionUnmarshaller());
         exceptionUnmarshallers.add(new PackedPolicyTooLargeExceptionUnmarshaller());
@@ -638,6 +639,169 @@ public AssumeRoleResult assumeRole(AssumeRoleRequest assumeRoleRequest)
         }
     }
 
+    /**
+     * <p>
+     * Returns a set of temporary security credentials for users who have been
+     * authenticated via a SAML authentication response. This operation provides
+     * a mechanism for tying an enterprise identity store or directory to
+     * role-based AWS access without user-specific credentials or configuration.
+     * For a comparison of <code>AssumeRoleWithSAML</code> with the other API
+     * operations that produce temporary credentials, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html"
+     * >Requesting Temporary Security Credentials</a> and <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison"
+     * >Comparing the AWS STS API operations</a> in the <i>IAM User Guide</i>.
+     * </p>
+     * <p>
+     * The temporary security credentials returned by this operation consist of
+     * an access key ID, a secret access key, and a security token. Applications
+     * can use these temporary security credentials to sign calls to AWS
+     * services.
+     * </p>
+     * <p>
+     * By default, the temporary security credentials created by
+     * <code>AssumeRoleWithSAML</code> last for one hour. However, you can use
+     * the optional <code>DurationSeconds</code> parameter to specify the
+     * duration of your session. Your role session lasts for the duration that
+     * you specify, or until the time specified in the SAML authentication
+     * response's <code>SessionNotOnOrAfter</code> value, whichever is shorter.
+     * You can provide a <code>DurationSeconds</code> value from 900 seconds (15
+     * minutes) up to the maximum session duration setting for the role. This
+     * setting can have a value from 1 hour to 12 hours. To learn how to view
+     * the maximum value for your role, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session"
+     * >View the Maximum Session Duration Setting for a Role</a> in the <i>IAM
+     * User Guide</i>. The maximum session duration limit applies when you use
+     * the <code>AssumeRole*</code> API operations or the
+     * <code>assume-role*</code> CLI commands. However the limit does not apply
+     * when you use those operations to create a console URL. For more
+     * information, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html"
+     * >Using IAM Roles</a> in the <i>IAM User Guide</i>.
+     * </p>
+     * <p>
+     * The temporary security credentials created by
+     * <code>AssumeRoleWithSAML</code> can be used to make API calls to any AWS
+     * service with the following exception: you cannot call the STS
+     * <code>GetFederationToken</code> or <code>GetSessionToken</code> API
+     * operations.
+     * </p>
+     * <p>
+     * (Optional) You can pass inline or managed <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session"
+     * >session policies</a> to this operation. You can pass a single JSON
+     * policy document to use as an inline session policy. You can also specify
+     * up to 10 managed policies to use as managed session policies. The plain
+     * text that you use for both inline and managed session policies shouldn't
+     * exceed 2048 characters. Passing policies to this operation returns new
+     * temporary credentials. The resulting session's permissions are the
+     * intersection of the role's identity-based policy and the session
+     * policies. You can use the role's temporary credentials in subsequent AWS
+     * API calls to access resources in the account that owns the role. You
+     * cannot use session policies to grant more permissions than those allowed
+     * by the identity-based policy of the role that is being assumed. For more
+     * information, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session"
+     * >Session Policies</a> in the <i>IAM User Guide</i>.
+     * </p>
+     * <p>
+     * Before your application can call <code>AssumeRoleWithSAML</code>, you
+     * must configure your SAML identity provider (IdP) to issue the claims
+     * required by AWS. Additionally, you must use AWS Identity and Access
+     * Management (IAM) to create a SAML provider entity in your AWS account
+     * that represents your identity provider. You must also create an IAM role
+     * that specifies this SAML provider in its trust policy.
+     * </p>
+     * <p>
+     * Calling <code>AssumeRoleWithSAML</code> does not require the use of AWS
+     * security credentials. The identity of the caller is validated by using
+     * keys in the metadata document that is uploaded for the SAML provider
+     * entity for your identity provider.
+     * </p>
+     * <important>
+     * <p>
+     * Calling <code>AssumeRoleWithSAML</code> can result in an entry in your
+     * AWS CloudTrail logs. The entry includes the value in the
+     * <code>NameID</code> element of the SAML assertion. We recommend that you
+     * use a <code>NameIDType</code> that is not associated with any personally
+     * identifiable information (PII). For example, you could instead use the
+     * Persistent Identifier (
+     * <code>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</code>).
+     * </p>
+     * </important>
+     * <p>
+     * For more information, see the following resources:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html"
+     * >About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_saml.html"
+     * >Creating SAML Identity Providers</a> in the <i>IAM User Guide</i>.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_saml_relying-party.html"
+     * >Configuring a Relying Party and Claims</a> in the <i>IAM User Guide</i>.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-idp_saml.html"
+     * >Creating a Role for SAML 2.0 Federation</a> in the <i>IAM User
+     * Guide</i>.
+     * </p>
+     * </li>
+     * </ul>
+     * 
+     * @param assumeRoleWithSAMLRequest
+     * @return assumeRoleWithSAMLResult The response from the AssumeRoleWithSAML
+     *         service method, as returned by AWS Security Token Service.
+     * @throws MalformedPolicyDocumentException
+     * @throws PackedPolicyTooLargeException
+     * @throws IDPRejectedClaimException
+     * @throws InvalidIdentityTokenException
+     * @throws ExpiredTokenException
+     * @throws RegionDisabledException
+     * @throws AmazonClientException If any internal errors are encountered
+     *             inside the client while attempting to make the request or
+     *             handle the response. For example if a network connection is
+     *             not available.
+     * @throws AmazonServiceException If an error response is returned by AWS
+     *             Security Token Service indicating either a problem with the
+     *             data in the request, or a server side issue.
+     */
+    public AssumeRoleWithSAMLResult assumeRoleWithSAML(
+            AssumeRoleWithSAMLRequest assumeRoleWithSAMLRequest)
+            throws AmazonServiceException, AmazonClientException {
+        ExecutionContext executionContext = createExecutionContext(assumeRoleWithSAMLRequest);
+        AWSRequestMetrics awsRequestMetrics = executionContext.getAwsRequestMetrics();
+        awsRequestMetrics.startEvent(Field.ClientExecuteTime);
+        Request<AssumeRoleWithSAMLRequest> request = null;
+        Response<AssumeRoleWithSAMLResult> response = null;
+        try {
+            request = new AssumeRoleWithSAMLRequestMarshaller().marshall(assumeRoleWithSAMLRequest);
+            // Binds the request metrics to the current request.
+            request.setAWSRequestMetrics(awsRequestMetrics);
+            response = invoke(request, new AssumeRoleWithSAMLResultStaxUnmarshaller(),
+                    executionContext);
+            return response.getAwsResponse();
+        } finally {
+            awsRequestMetrics.endEvent(Field.ClientExecuteTime);
+            endClientExecution(awsRequestMetrics, request, response);
+        }
+    }
+
     /**
      * <p>
      * Returns a set of temporary security credentials for users who have been
@@ -836,6 +1000,104 @@ public AssumeRoleWithWebIdentityResult assumeRoleWithWebIdentity(
         }
     }
 
+    /**
+     * <p>
+     * Decodes additional information about the authorization status of a
+     * request from an encoded message returned in response to an AWS request.
+     * </p>
+     * <p>
+     * For example, if a user is not authorized to perform an operation that he
+     * or she has requested, the request returns a
+     * <code>Client.UnauthorizedOperation</code> response (an HTTP 403
+     * response). Some AWS operations additionally return an encoded message
+     * that can provide details about this authorization failure.
+     * </p>
+     * <note>
+     * <p>
+     * Only certain AWS operations return an encoded authorization message. The
+     * documentation for an individual operation indicates whether that
+     * operation returns an encoded message in addition to returning an HTTP
+     * code.
+     * </p>
+     * </note>
+     * <p>
+     * The message is encoded because the details of the authorization status
+     * can constitute privileged information that the user who requested the
+     * operation should not see. To decode an authorization status message, a
+     * user must be granted permissions via an IAM policy to request the
+     * <code>DecodeAuthorizationMessage</code> (
+     * <code>sts:DecodeAuthorizationMessage</code>) action.
+     * </p>
+     * <p>
+     * The decoded message includes the following type of information:
+     * </p>
+     * <ul>
+     * <li>
+     * <p>
+     * Whether the request was denied due to an explicit deny or due to the
+     * absence of an explicit allow. For more information, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-denyallow"
+     * >Determining Whether a Request is Allowed or Denied</a> in the <i>IAM
+     * User Guide</i>.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * The principal who made the request.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * The requested action.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * The requested resource.
+     * </p>
+     * </li>
+     * <li>
+     * <p>
+     * The values of condition keys in the context of the user's request.
+     * </p>
+     * </li>
+     * </ul>
+     * 
+     * @param decodeAuthorizationMessageRequest
+     * @return decodeAuthorizationMessageResult The response from the
+     *         DecodeAuthorizationMessage service method, as returned by AWS
+     *         Security Token Service.
+     * @throws InvalidAuthorizationMessageException
+     * @throws AmazonClientException If any internal errors are encountered
+     *             inside the client while attempting to make the request or
+     *             handle the response. For example if a network connection is
+     *             not available.
+     * @throws AmazonServiceException If an error response is returned by AWS
+     *             Security Token Service indicating either a problem with the
+     *             data in the request, or a server side issue.
+     */
+    public DecodeAuthorizationMessageResult decodeAuthorizationMessage(
+            DecodeAuthorizationMessageRequest decodeAuthorizationMessageRequest)
+            throws AmazonServiceException, AmazonClientException {
+        ExecutionContext executionContext = createExecutionContext(decodeAuthorizationMessageRequest);
+        AWSRequestMetrics awsRequestMetrics = executionContext.getAwsRequestMetrics();
+        awsRequestMetrics.startEvent(Field.ClientExecuteTime);
+        Request<DecodeAuthorizationMessageRequest> request = null;
+        Response<DecodeAuthorizationMessageResult> response = null;
+        try {
+            request = new DecodeAuthorizationMessageRequestMarshaller()
+                    .marshall(decodeAuthorizationMessageRequest);
+            // Binds the request metrics to the current request.
+            request.setAWSRequestMetrics(awsRequestMetrics);
+            response = invoke(request, new DecodeAuthorizationMessageResultStaxUnmarshaller(),
+                    executionContext);
+            return response.getAwsResponse();
+        } finally {
+            awsRequestMetrics.endEvent(Field.ClientExecuteTime);
+            endClientExecution(awsRequestMetrics, request, response);
+        }
+    }
+
     /**
      * <p>
      * Returns the account identifier for the specified access key ID.
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/AssumeRoleWithSAMLRequest.java b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/AssumeRoleWithSAMLRequest.java
new file mode 100644
index 0000000000..4124b57007
--- /dev/null
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/AssumeRoleWithSAMLRequest.java
@@ -0,0 +1,1417 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.securitytoken.model;
+
+import java.io.Serializable;
+
+import com.amazonaws.AmazonWebServiceRequest;
+
+/**
+ * <p>
+ * Returns a set of temporary security credentials for users who have been
+ * authenticated via a SAML authentication response. This operation provides a
+ * mechanism for tying an enterprise identity store or directory to role-based
+ * AWS access without user-specific credentials or configuration. For a
+ * comparison of <code>AssumeRoleWithSAML</code> with the other API operations
+ * that produce temporary credentials, see <a href=
+ * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html"
+ * >Requesting Temporary Security Credentials</a> and <a href=
+ * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison"
+ * >Comparing the AWS STS API operations</a> in the <i>IAM User Guide</i>.
+ * </p>
+ * <p>
+ * The temporary security credentials returned by this operation consist of an
+ * access key ID, a secret access key, and a security token. Applications can
+ * use these temporary security credentials to sign calls to AWS services.
+ * </p>
+ * <p>
+ * By default, the temporary security credentials created by
+ * <code>AssumeRoleWithSAML</code> last for one hour. However, you can use the
+ * optional <code>DurationSeconds</code> parameter to specify the duration of
+ * your session. Your role session lasts for the duration that you specify, or
+ * until the time specified in the SAML authentication response's
+ * <code>SessionNotOnOrAfter</code> value, whichever is shorter. You can provide
+ * a <code>DurationSeconds</code> value from 900 seconds (15 minutes) up to the
+ * maximum session duration setting for the role. This setting can have a value
+ * from 1 hour to 12 hours. To learn how to view the maximum value for your
+ * role, see <a href=
+ * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session"
+ * >View the Maximum Session Duration Setting for a Role</a> in the <i>IAM User
+ * Guide</i>. The maximum session duration limit applies when you use the
+ * <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI
+ * commands. However the limit does not apply when you use those operations to
+ * create a console URL. For more information, see <a
+ * href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html"
+ * >Using IAM Roles</a> in the <i>IAM User Guide</i>.
+ * </p>
+ * <p>
+ * The temporary security credentials created by <code>AssumeRoleWithSAML</code>
+ * can be used to make API calls to any AWS service with the following
+ * exception: you cannot call the STS <code>GetFederationToken</code> or
+ * <code>GetSessionToken</code> API operations.
+ * </p>
+ * <p>
+ * (Optional) You can pass inline or managed <a href=
+ * "https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session"
+ * >session policies</a> to this operation. You can pass a single JSON policy
+ * document to use as an inline session policy. You can also specify up to 10
+ * managed policies to use as managed session policies. The plain text that you
+ * use for both inline and managed session policies shouldn't exceed 2048
+ * characters. Passing policies to this operation returns new temporary
+ * credentials. The resulting session's permissions are the intersection of the
+ * role's identity-based policy and the session policies. You can use the role's
+ * temporary credentials in subsequent AWS API calls to access resources in the
+ * account that owns the role. You cannot use session policies to grant more
+ * permissions than those allowed by the identity-based policy of the role that
+ * is being assumed. For more information, see <a href=
+ * "https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session"
+ * >Session Policies</a> in the <i>IAM User Guide</i>.
+ * </p>
+ * <p>
+ * Before your application can call <code>AssumeRoleWithSAML</code>, you must
+ * configure your SAML identity provider (IdP) to issue the claims required by
+ * AWS. Additionally, you must use AWS Identity and Access Management (IAM) to
+ * create a SAML provider entity in your AWS account that represents your
+ * identity provider. You must also create an IAM role that specifies this SAML
+ * provider in its trust policy.
+ * </p>
+ * <p>
+ * Calling <code>AssumeRoleWithSAML</code> does not require the use of AWS
+ * security credentials. The identity of the caller is validated by using keys
+ * in the metadata document that is uploaded for the SAML provider entity for
+ * your identity provider.
+ * </p>
+ * <important>
+ * <p>
+ * Calling <code>AssumeRoleWithSAML</code> can result in an entry in your AWS
+ * CloudTrail logs. The entry includes the value in the <code>NameID</code>
+ * element of the SAML assertion. We recommend that you use a
+ * <code>NameIDType</code> that is not associated with any personally
+ * identifiable information (PII). For example, you could instead use the
+ * Persistent Identifier (
+ * <code>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</code>).
+ * </p>
+ * </important>
+ * <p>
+ * For more information, see the following resources:
+ * </p>
+ * <ul>
+ * <li>
+ * <p>
+ * <a href=
+ * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html"
+ * >About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.
+ * </p>
+ * </li>
+ * <li>
+ * <p>
+ * <a href=
+ * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_saml.html"
+ * >Creating SAML Identity Providers</a> in the <i>IAM User Guide</i>.
+ * </p>
+ * </li>
+ * <li>
+ * <p>
+ * <a href=
+ * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_saml_relying-party.html"
+ * >Configuring a Relying Party and Claims</a> in the <i>IAM User Guide</i>.
+ * </p>
+ * </li>
+ * <li>
+ * <p>
+ * <a href=
+ * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-idp_saml.html"
+ * >Creating a Role for SAML 2.0 Federation</a> in the <i>IAM User Guide</i>.
+ * </p>
+ * </li>
+ * </ul>
+ */
+public class AssumeRoleWithSAMLRequest extends AmazonWebServiceRequest implements Serializable {
+    /**
+     * <p>
+     * The Amazon Resource Name (ARN) of the role that the caller is assuming.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>20 - 2048<br/>
+     * <b>Pattern: </b>[
+     * -\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]+<br/>
+     */
+    private String roleArn;
+
+    /**
+     * <p>
+     * The Amazon Resource Name (ARN) of the SAML provider in IAM that describes
+     * the IdP.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>20 - 2048<br/>
+     * <b>Pattern: </b>[
+     * -\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]+<br/>
+     */
+    private String principalArn;
+
+    /**
+     * <p>
+     * The base-64 encoded SAML authentication response provided by the IdP.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/create-role-saml-IdP-tasks.html"
+     * >Configuring a Relying Party and Adding Claims</a> in the <i>IAM User
+     * Guide</i>.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>4 - 100000<br/>
+     */
+    private String sAMLAssertion;
+
+    /**
+     * <p>
+     * The Amazon Resource Names (ARNs) of the IAM managed policies that you
+     * want to use as managed session policies. The policies must exist in the
+     * same account as the role.
+     * </p>
+     * <p>
+     * This parameter is optional. You can provide up to 10 managed policy ARNs.
+     * However, the plain text that you use for both inline and managed session
+     * policies shouldn't exceed 2048 characters. For more information about
+     * ARNs, see <a href=
+     * "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     * >Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS
+     * General Reference.
+     * </p>
+     * <note>
+     * <p>
+     * The characters in this parameter count towards the 2048 character session
+     * policy guideline. However, an AWS conversion compresses the session
+     * policies into a packed binary format that has a separate limit. This is
+     * the enforced limit. The <code>PackedPolicySize</code> response element
+     * indicates by percentage how close the policy is to the upper size limit.
+     * </p>
+     * </note>
+     * <p>
+     * Passing policies to this operation returns new temporary credentials. The
+     * resulting session's permissions are the intersection of the role's
+     * identity-based policy and the session policies. You can use the role's
+     * temporary credentials in subsequent AWS API calls to access resources in
+     * the account that owns the role. You cannot use session policies to grant
+     * more permissions than those allowed by the identity-based policy of the
+     * role that is being assumed. For more information, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session"
+     * >Session Policies</a> in the <i>IAM User Guide</i>.
+     * </p>
+     */
+    private java.util.List<PolicyDescriptorType> policyArns;
+
+    /**
+     * <p>
+     * An IAM policy in JSON format that you want to use as an inline session
+     * policy.
+     * </p>
+     * <p>
+     * This parameter is optional. Passing policies to this operation returns
+     * new temporary credentials. The resulting session's permissions are the
+     * intersection of the role's identity-based policy and the session
+     * policies. You can use the role's temporary credentials in subsequent AWS
+     * API calls to access resources in the account that owns the role. You
+     * cannot use session policies to grant more permissions than those allowed
+     * by the identity-based policy of the role that is being assumed. For more
+     * information, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session"
+     * >Session Policies</a> in the <i>IAM User Guide</i>.
+     * </p>
+     * <p>
+     * The plain text that you use for both inline and managed session policies
+     * shouldn't exceed 2048 characters. The JSON policy characters can be any
+     * ASCII character from the space character to the end of the valid
+     * character list ( through \u00FF). It can also include the tab ( ),
+     * linefeed ( ), and carriage return ( ) characters.
+     * </p>
+     * <note>
+     * <p>
+     * The characters in this parameter count towards the 2048 character session
+     * policy guideline. However, an AWS conversion compresses the session
+     * policies into a packed binary format that has a separate limit. This is
+     * the enforced limit. The <code>PackedPolicySize</code> response element
+     * indicates by percentage how close the policy is to the upper size limit.
+     * </p>
+     * </note>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>1 - 2048<br/>
+     * <b>Pattern: </b>[ -\u00FF]+<br/>
+     */
+    private String policy;
+
+    /**
+     * <p>
+     * The duration, in seconds, of the role session. Your role session lasts
+     * for the duration that you specify for the <code>DurationSeconds</code>
+     * parameter, or until the time specified in the SAML authentication
+     * response's <code>SessionNotOnOrAfter</code> value, whichever is shorter.
+     * You can provide a <code>DurationSeconds</code> value from 900 seconds (15
+     * minutes) up to the maximum session duration setting for the role. This
+     * setting can have a value from 1 hour to 12 hours. If you specify a value
+     * higher than this setting, the operation fails. For example, if you
+     * specify a session duration of 12 hours, but your administrator set the
+     * maximum session duration to 6 hours, your operation fails. To learn how
+     * to view the maximum value for your role, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session"
+     * >View the Maximum Session Duration Setting for a Role</a> in the <i>IAM
+     * User Guide</i>.
+     * </p>
+     * <p>
+     * By default, the value is set to <code>3600</code> seconds.
+     * </p>
+     * <note>
+     * <p>
+     * The <code>DurationSeconds</code> parameter is separate from the duration
+     * of a console session that you might request using the returned
+     * credentials. The request to the federation endpoint for a console sign-in
+     * token takes a <code>SessionDuration</code> parameter that specifies the
+     * maximum length of the console session. For more information, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html"
+     * >Creating a URL that Enables Federated Users to Access the AWS Management
+     * Console</a> in the <i>IAM User Guide</i>.
+     * </p>
+     * </note>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Range: </b>900 - 43200<br/>
+     */
+    private Integer durationSeconds;
+
+    /**
+     * <p>
+     * The Amazon Resource Name (ARN) of the role that the caller is assuming.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>20 - 2048<br/>
+     * <b>Pattern: </b>[
+     * -\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]+<br/>
+     *
+     * @return <p>
+     *         The Amazon Resource Name (ARN) of the role that the caller is
+     *         assuming.
+     *         </p>
+     */
+    public String getRoleArn() {
+        return roleArn;
+    }
+
+    /**
+     * <p>
+     * The Amazon Resource Name (ARN) of the role that the caller is assuming.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>20 - 2048<br/>
+     * <b>Pattern: </b>[
+     * -\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]+<br/>
+     *
+     * @param roleArn <p>
+     *            The Amazon Resource Name (ARN) of the role that the caller is
+     *            assuming.
+     *            </p>
+     */
+    public void setRoleArn(String roleArn) {
+        this.roleArn = roleArn;
+    }
+
+    /**
+     * <p>
+     * The Amazon Resource Name (ARN) of the role that the caller is assuming.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>20 - 2048<br/>
+     * <b>Pattern: </b>[
+     * -\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]+<br/>
+     *
+     * @param roleArn <p>
+     *            The Amazon Resource Name (ARN) of the role that the caller is
+     *            assuming.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public AssumeRoleWithSAMLRequest withRoleArn(String roleArn) {
+        this.roleArn = roleArn;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The Amazon Resource Name (ARN) of the SAML provider in IAM that describes
+     * the IdP.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>20 - 2048<br/>
+     * <b>Pattern: </b>[
+     * -\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]+<br/>
+     *
+     * @return <p>
+     *         The Amazon Resource Name (ARN) of the SAML provider in IAM that
+     *         describes the IdP.
+     *         </p>
+     */
+    public String getPrincipalArn() {
+        return principalArn;
+    }
+
+    /**
+     * <p>
+     * The Amazon Resource Name (ARN) of the SAML provider in IAM that describes
+     * the IdP.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>20 - 2048<br/>
+     * <b>Pattern: </b>[
+     * -\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]+<br/>
+     *
+     * @param principalArn <p>
+     *            The Amazon Resource Name (ARN) of the SAML provider in IAM
+     *            that describes the IdP.
+     *            </p>
+     */
+    public void setPrincipalArn(String principalArn) {
+        this.principalArn = principalArn;
+    }
+
+    /**
+     * <p>
+     * The Amazon Resource Name (ARN) of the SAML provider in IAM that describes
+     * the IdP.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>20 - 2048<br/>
+     * <b>Pattern: </b>[
+     * -\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]+<br/>
+     *
+     * @param principalArn <p>
+     *            The Amazon Resource Name (ARN) of the SAML provider in IAM
+     *            that describes the IdP.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public AssumeRoleWithSAMLRequest withPrincipalArn(String principalArn) {
+        this.principalArn = principalArn;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The base-64 encoded SAML authentication response provided by the IdP.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/create-role-saml-IdP-tasks.html"
+     * >Configuring a Relying Party and Adding Claims</a> in the <i>IAM User
+     * Guide</i>.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>4 - 100000<br/>
+     *
+     * @return <p>
+     *         The base-64 encoded SAML authentication response provided by the
+     *         IdP.
+     *         </p>
+     *         <p>
+     *         For more information, see <a href=
+     *         "https://docs.aws.amazon.com/IAM/latest/UserGuide/create-role-saml-IdP-tasks.html"
+     *         >Configuring a Relying Party and Adding Claims</a> in the <i>IAM
+     *         User Guide</i>.
+     *         </p>
+     */
+    public String getSAMLAssertion() {
+        return sAMLAssertion;
+    }
+
+    /**
+     * <p>
+     * The base-64 encoded SAML authentication response provided by the IdP.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/create-role-saml-IdP-tasks.html"
+     * >Configuring a Relying Party and Adding Claims</a> in the <i>IAM User
+     * Guide</i>.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>4 - 100000<br/>
+     *
+     * @param sAMLAssertion <p>
+     *            The base-64 encoded SAML authentication response provided by
+     *            the IdP.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/IAM/latest/UserGuide/create-role-saml-IdP-tasks.html"
+     *            >Configuring a Relying Party and Adding Claims</a> in the
+     *            <i>IAM User Guide</i>.
+     *            </p>
+     */
+    public void setSAMLAssertion(String sAMLAssertion) {
+        this.sAMLAssertion = sAMLAssertion;
+    }
+
+    /**
+     * <p>
+     * The base-64 encoded SAML authentication response provided by the IdP.
+     * </p>
+     * <p>
+     * For more information, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/create-role-saml-IdP-tasks.html"
+     * >Configuring a Relying Party and Adding Claims</a> in the <i>IAM User
+     * Guide</i>.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>4 - 100000<br/>
+     *
+     * @param sAMLAssertion <p>
+     *            The base-64 encoded SAML authentication response provided by
+     *            the IdP.
+     *            </p>
+     *            <p>
+     *            For more information, see <a href=
+     *            "https://docs.aws.amazon.com/IAM/latest/UserGuide/create-role-saml-IdP-tasks.html"
+     *            >Configuring a Relying Party and Adding Claims</a> in the
+     *            <i>IAM User Guide</i>.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public AssumeRoleWithSAMLRequest withSAMLAssertion(String sAMLAssertion) {
+        this.sAMLAssertion = sAMLAssertion;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The Amazon Resource Names (ARNs) of the IAM managed policies that you
+     * want to use as managed session policies. The policies must exist in the
+     * same account as the role.
+     * </p>
+     * <p>
+     * This parameter is optional. You can provide up to 10 managed policy ARNs.
+     * However, the plain text that you use for both inline and managed session
+     * policies shouldn't exceed 2048 characters. For more information about
+     * ARNs, see <a href=
+     * "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     * >Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS
+     * General Reference.
+     * </p>
+     * <note>
+     * <p>
+     * The characters in this parameter count towards the 2048 character session
+     * policy guideline. However, an AWS conversion compresses the session
+     * policies into a packed binary format that has a separate limit. This is
+     * the enforced limit. The <code>PackedPolicySize</code> response element
+     * indicates by percentage how close the policy is to the upper size limit.
+     * </p>
+     * </note>
+     * <p>
+     * Passing policies to this operation returns new temporary credentials. The
+     * resulting session's permissions are the intersection of the role's
+     * identity-based policy and the session policies. You can use the role's
+     * temporary credentials in subsequent AWS API calls to access resources in
+     * the account that owns the role. You cannot use session policies to grant
+     * more permissions than those allowed by the identity-based policy of the
+     * role that is being assumed. For more information, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session"
+     * >Session Policies</a> in the <i>IAM User Guide</i>.
+     * </p>
+     *
+     * @return <p>
+     *         The Amazon Resource Names (ARNs) of the IAM managed policies that
+     *         you want to use as managed session policies. The policies must
+     *         exist in the same account as the role.
+     *         </p>
+     *         <p>
+     *         This parameter is optional. You can provide up to 10 managed
+     *         policy ARNs. However, the plain text that you use for both inline
+     *         and managed session policies shouldn't exceed 2048 characters.
+     *         For more information about ARNs, see <a href=
+     *         "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     *         >Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in
+     *         the AWS General Reference.
+     *         </p>
+     *         <note>
+     *         <p>
+     *         The characters in this parameter count towards the 2048 character
+     *         session policy guideline. However, an AWS conversion compresses
+     *         the session policies into a packed binary format that has a
+     *         separate limit. This is the enforced limit. The
+     *         <code>PackedPolicySize</code> response element indicates by
+     *         percentage how close the policy is to the upper size limit.
+     *         </p>
+     *         </note>
+     *         <p>
+     *         Passing policies to this operation returns new temporary
+     *         credentials. The resulting session's permissions are the
+     *         intersection of the role's identity-based policy and the session
+     *         policies. You can use the role's temporary credentials in
+     *         subsequent AWS API calls to access resources in the account that
+     *         owns the role. You cannot use session policies to grant more
+     *         permissions than those allowed by the identity-based policy of
+     *         the role that is being assumed. For more information, see <a
+     *         href=
+     *         "https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session"
+     *         >Session Policies</a> in the <i>IAM User Guide</i>.
+     *         </p>
+     */
+    public java.util.List<PolicyDescriptorType> getPolicyArns() {
+        return policyArns;
+    }
+
+    /**
+     * <p>
+     * The Amazon Resource Names (ARNs) of the IAM managed policies that you
+     * want to use as managed session policies. The policies must exist in the
+     * same account as the role.
+     * </p>
+     * <p>
+     * This parameter is optional. You can provide up to 10 managed policy ARNs.
+     * However, the plain text that you use for both inline and managed session
+     * policies shouldn't exceed 2048 characters. For more information about
+     * ARNs, see <a href=
+     * "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     * >Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS
+     * General Reference.
+     * </p>
+     * <note>
+     * <p>
+     * The characters in this parameter count towards the 2048 character session
+     * policy guideline. However, an AWS conversion compresses the session
+     * policies into a packed binary format that has a separate limit. This is
+     * the enforced limit. The <code>PackedPolicySize</code> response element
+     * indicates by percentage how close the policy is to the upper size limit.
+     * </p>
+     * </note>
+     * <p>
+     * Passing policies to this operation returns new temporary credentials. The
+     * resulting session's permissions are the intersection of the role's
+     * identity-based policy and the session policies. You can use the role's
+     * temporary credentials in subsequent AWS API calls to access resources in
+     * the account that owns the role. You cannot use session policies to grant
+     * more permissions than those allowed by the identity-based policy of the
+     * role that is being assumed. For more information, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session"
+     * >Session Policies</a> in the <i>IAM User Guide</i>.
+     * </p>
+     *
+     * @param policyArns <p>
+     *            The Amazon Resource Names (ARNs) of the IAM managed policies
+     *            that you want to use as managed session policies. The policies
+     *            must exist in the same account as the role.
+     *            </p>
+     *            <p>
+     *            This parameter is optional. You can provide up to 10 managed
+     *            policy ARNs. However, the plain text that you use for both
+     *            inline and managed session policies shouldn't exceed 2048
+     *            characters. For more information about ARNs, see <a href=
+     *            "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     *            >Amazon Resource Names (ARNs) and AWS Service Namespaces</a>
+     *            in the AWS General Reference.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            The characters in this parameter count towards the 2048
+     *            character session policy guideline. However, an AWS conversion
+     *            compresses the session policies into a packed binary format
+     *            that has a separate limit. This is the enforced limit. The
+     *            <code>PackedPolicySize</code> response element indicates by
+     *            percentage how close the policy is to the upper size limit.
+     *            </p>
+     *            </note>
+     *            <p>
+     *            Passing policies to this operation returns new temporary
+     *            credentials. The resulting session's permissions are the
+     *            intersection of the role's identity-based policy and the
+     *            session policies. You can use the role's temporary credentials
+     *            in subsequent AWS API calls to access resources in the account
+     *            that owns the role. You cannot use session policies to grant
+     *            more permissions than those allowed by the identity-based
+     *            policy of the role that is being assumed. For more
+     *            information, see <a href=
+     *            "https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session"
+     *            >Session Policies</a> in the <i>IAM User Guide</i>.
+     *            </p>
+     */
+    public void setPolicyArns(java.util.Collection<PolicyDescriptorType> policyArns) {
+        if (policyArns == null) {
+            this.policyArns = null;
+            return;
+        }
+
+        this.policyArns = new java.util.ArrayList<PolicyDescriptorType>(policyArns);
+    }
+
+    /**
+     * <p>
+     * The Amazon Resource Names (ARNs) of the IAM managed policies that you
+     * want to use as managed session policies. The policies must exist in the
+     * same account as the role.
+     * </p>
+     * <p>
+     * This parameter is optional. You can provide up to 10 managed policy ARNs.
+     * However, the plain text that you use for both inline and managed session
+     * policies shouldn't exceed 2048 characters. For more information about
+     * ARNs, see <a href=
+     * "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     * >Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS
+     * General Reference.
+     * </p>
+     * <note>
+     * <p>
+     * The characters in this parameter count towards the 2048 character session
+     * policy guideline. However, an AWS conversion compresses the session
+     * policies into a packed binary format that has a separate limit. This is
+     * the enforced limit. The <code>PackedPolicySize</code> response element
+     * indicates by percentage how close the policy is to the upper size limit.
+     * </p>
+     * </note>
+     * <p>
+     * Passing policies to this operation returns new temporary credentials. The
+     * resulting session's permissions are the intersection of the role's
+     * identity-based policy and the session policies. You can use the role's
+     * temporary credentials in subsequent AWS API calls to access resources in
+     * the account that owns the role. You cannot use session policies to grant
+     * more permissions than those allowed by the identity-based policy of the
+     * role that is being assumed. For more information, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session"
+     * >Session Policies</a> in the <i>IAM User Guide</i>.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param policyArns <p>
+     *            The Amazon Resource Names (ARNs) of the IAM managed policies
+     *            that you want to use as managed session policies. The policies
+     *            must exist in the same account as the role.
+     *            </p>
+     *            <p>
+     *            This parameter is optional. You can provide up to 10 managed
+     *            policy ARNs. However, the plain text that you use for both
+     *            inline and managed session policies shouldn't exceed 2048
+     *            characters. For more information about ARNs, see <a href=
+     *            "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     *            >Amazon Resource Names (ARNs) and AWS Service Namespaces</a>
+     *            in the AWS General Reference.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            The characters in this parameter count towards the 2048
+     *            character session policy guideline. However, an AWS conversion
+     *            compresses the session policies into a packed binary format
+     *            that has a separate limit. This is the enforced limit. The
+     *            <code>PackedPolicySize</code> response element indicates by
+     *            percentage how close the policy is to the upper size limit.
+     *            </p>
+     *            </note>
+     *            <p>
+     *            Passing policies to this operation returns new temporary
+     *            credentials. The resulting session's permissions are the
+     *            intersection of the role's identity-based policy and the
+     *            session policies. You can use the role's temporary credentials
+     *            in subsequent AWS API calls to access resources in the account
+     *            that owns the role. You cannot use session policies to grant
+     *            more permissions than those allowed by the identity-based
+     *            policy of the role that is being assumed. For more
+     *            information, see <a href=
+     *            "https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session"
+     *            >Session Policies</a> in the <i>IAM User Guide</i>.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public AssumeRoleWithSAMLRequest withPolicyArns(PolicyDescriptorType... policyArns) {
+        if (getPolicyArns() == null) {
+            this.policyArns = new java.util.ArrayList<PolicyDescriptorType>(policyArns.length);
+        }
+        for (PolicyDescriptorType value : policyArns) {
+            this.policyArns.add(value);
+        }
+        return this;
+    }
+
+    /**
+     * <p>
+     * The Amazon Resource Names (ARNs) of the IAM managed policies that you
+     * want to use as managed session policies. The policies must exist in the
+     * same account as the role.
+     * </p>
+     * <p>
+     * This parameter is optional. You can provide up to 10 managed policy ARNs.
+     * However, the plain text that you use for both inline and managed session
+     * policies shouldn't exceed 2048 characters. For more information about
+     * ARNs, see <a href=
+     * "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     * >Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the AWS
+     * General Reference.
+     * </p>
+     * <note>
+     * <p>
+     * The characters in this parameter count towards the 2048 character session
+     * policy guideline. However, an AWS conversion compresses the session
+     * policies into a packed binary format that has a separate limit. This is
+     * the enforced limit. The <code>PackedPolicySize</code> response element
+     * indicates by percentage how close the policy is to the upper size limit.
+     * </p>
+     * </note>
+     * <p>
+     * Passing policies to this operation returns new temporary credentials. The
+     * resulting session's permissions are the intersection of the role's
+     * identity-based policy and the session policies. You can use the role's
+     * temporary credentials in subsequent AWS API calls to access resources in
+     * the account that owns the role. You cannot use session policies to grant
+     * more permissions than those allowed by the identity-based policy of the
+     * role that is being assumed. For more information, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session"
+     * >Session Policies</a> in the <i>IAM User Guide</i>.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param policyArns <p>
+     *            The Amazon Resource Names (ARNs) of the IAM managed policies
+     *            that you want to use as managed session policies. The policies
+     *            must exist in the same account as the role.
+     *            </p>
+     *            <p>
+     *            This parameter is optional. You can provide up to 10 managed
+     *            policy ARNs. However, the plain text that you use for both
+     *            inline and managed session policies shouldn't exceed 2048
+     *            characters. For more information about ARNs, see <a href=
+     *            "https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html"
+     *            >Amazon Resource Names (ARNs) and AWS Service Namespaces</a>
+     *            in the AWS General Reference.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            The characters in this parameter count towards the 2048
+     *            character session policy guideline. However, an AWS conversion
+     *            compresses the session policies into a packed binary format
+     *            that has a separate limit. This is the enforced limit. The
+     *            <code>PackedPolicySize</code> response element indicates by
+     *            percentage how close the policy is to the upper size limit.
+     *            </p>
+     *            </note>
+     *            <p>
+     *            Passing policies to this operation returns new temporary
+     *            credentials. The resulting session's permissions are the
+     *            intersection of the role's identity-based policy and the
+     *            session policies. You can use the role's temporary credentials
+     *            in subsequent AWS API calls to access resources in the account
+     *            that owns the role. You cannot use session policies to grant
+     *            more permissions than those allowed by the identity-based
+     *            policy of the role that is being assumed. For more
+     *            information, see <a href=
+     *            "https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session"
+     *            >Session Policies</a> in the <i>IAM User Guide</i>.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public AssumeRoleWithSAMLRequest withPolicyArns(
+            java.util.Collection<PolicyDescriptorType> policyArns) {
+        setPolicyArns(policyArns);
+        return this;
+    }
+
+    /**
+     * <p>
+     * An IAM policy in JSON format that you want to use as an inline session
+     * policy.
+     * </p>
+     * <p>
+     * This parameter is optional. Passing policies to this operation returns
+     * new temporary credentials. The resulting session's permissions are the
+     * intersection of the role's identity-based policy and the session
+     * policies. You can use the role's temporary credentials in subsequent AWS
+     * API calls to access resources in the account that owns the role. You
+     * cannot use session policies to grant more permissions than those allowed
+     * by the identity-based policy of the role that is being assumed. For more
+     * information, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session"
+     * >Session Policies</a> in the <i>IAM User Guide</i>.
+     * </p>
+     * <p>
+     * The plain text that you use for both inline and managed session policies
+     * shouldn't exceed 2048 characters. The JSON policy characters can be any
+     * ASCII character from the space character to the end of the valid
+     * character list ( through \u00FF). It can also include the tab ( ),
+     * linefeed ( ), and carriage return ( ) characters.
+     * </p>
+     * <note>
+     * <p>
+     * The characters in this parameter count towards the 2048 character session
+     * policy guideline. However, an AWS conversion compresses the session
+     * policies into a packed binary format that has a separate limit. This is
+     * the enforced limit. The <code>PackedPolicySize</code> response element
+     * indicates by percentage how close the policy is to the upper size limit.
+     * </p>
+     * </note>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>1 - 2048<br/>
+     * <b>Pattern: </b>[ -\u00FF]+<br/>
+     *
+     * @return <p>
+     *         An IAM policy in JSON format that you want to use as an inline
+     *         session policy.
+     *         </p>
+     *         <p>
+     *         This parameter is optional. Passing policies to this operation
+     *         returns new temporary credentials. The resulting session's
+     *         permissions are the intersection of the role's identity-based
+     *         policy and the session policies. You can use the role's temporary
+     *         credentials in subsequent AWS API calls to access resources in
+     *         the account that owns the role. You cannot use session policies
+     *         to grant more permissions than those allowed by the
+     *         identity-based policy of the role that is being assumed. For more
+     *         information, see <a href=
+     *         "https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session"
+     *         >Session Policies</a> in the <i>IAM User Guide</i>.
+     *         </p>
+     *         <p>
+     *         The plain text that you use for both inline and managed session
+     *         policies shouldn't exceed 2048 characters. The JSON policy
+     *         characters can be any ASCII character from the space character to
+     *         the end of the valid character list ( through \u00FF). It can
+     *         also include the tab ( ), linefeed ( ), and carriage return ( )
+     *         characters.
+     *         </p>
+     *         <note>
+     *         <p>
+     *         The characters in this parameter count towards the 2048 character
+     *         session policy guideline. However, an AWS conversion compresses
+     *         the session policies into a packed binary format that has a
+     *         separate limit. This is the enforced limit. The
+     *         <code>PackedPolicySize</code> response element indicates by
+     *         percentage how close the policy is to the upper size limit.
+     *         </p>
+     *         </note>
+     */
+    public String getPolicy() {
+        return policy;
+    }
+
+    /**
+     * <p>
+     * An IAM policy in JSON format that you want to use as an inline session
+     * policy.
+     * </p>
+     * <p>
+     * This parameter is optional. Passing policies to this operation returns
+     * new temporary credentials. The resulting session's permissions are the
+     * intersection of the role's identity-based policy and the session
+     * policies. You can use the role's temporary credentials in subsequent AWS
+     * API calls to access resources in the account that owns the role. You
+     * cannot use session policies to grant more permissions than those allowed
+     * by the identity-based policy of the role that is being assumed. For more
+     * information, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session"
+     * >Session Policies</a> in the <i>IAM User Guide</i>.
+     * </p>
+     * <p>
+     * The plain text that you use for both inline and managed session policies
+     * shouldn't exceed 2048 characters. The JSON policy characters can be any
+     * ASCII character from the space character to the end of the valid
+     * character list ( through \u00FF). It can also include the tab ( ),
+     * linefeed ( ), and carriage return ( ) characters.
+     * </p>
+     * <note>
+     * <p>
+     * The characters in this parameter count towards the 2048 character session
+     * policy guideline. However, an AWS conversion compresses the session
+     * policies into a packed binary format that has a separate limit. This is
+     * the enforced limit. The <code>PackedPolicySize</code> response element
+     * indicates by percentage how close the policy is to the upper size limit.
+     * </p>
+     * </note>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>1 - 2048<br/>
+     * <b>Pattern: </b>[ -\u00FF]+<br/>
+     *
+     * @param policy <p>
+     *            An IAM policy in JSON format that you want to use as an inline
+     *            session policy.
+     *            </p>
+     *            <p>
+     *            This parameter is optional. Passing policies to this operation
+     *            returns new temporary credentials. The resulting session's
+     *            permissions are the intersection of the role's identity-based
+     *            policy and the session policies. You can use the role's
+     *            temporary credentials in subsequent AWS API calls to access
+     *            resources in the account that owns the role. You cannot use
+     *            session policies to grant more permissions than those allowed
+     *            by the identity-based policy of the role that is being
+     *            assumed. For more information, see <a href=
+     *            "https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session"
+     *            >Session Policies</a> in the <i>IAM User Guide</i>.
+     *            </p>
+     *            <p>
+     *            The plain text that you use for both inline and managed
+     *            session policies shouldn't exceed 2048 characters. The JSON
+     *            policy characters can be any ASCII character from the space
+     *            character to the end of the valid character list ( through
+     *            \u00FF). It can also include the tab ( ), linefeed ( ), and
+     *            carriage return ( ) characters.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            The characters in this parameter count towards the 2048
+     *            character session policy guideline. However, an AWS conversion
+     *            compresses the session policies into a packed binary format
+     *            that has a separate limit. This is the enforced limit. The
+     *            <code>PackedPolicySize</code> response element indicates by
+     *            percentage how close the policy is to the upper size limit.
+     *            </p>
+     *            </note>
+     */
+    public void setPolicy(String policy) {
+        this.policy = policy;
+    }
+
+    /**
+     * <p>
+     * An IAM policy in JSON format that you want to use as an inline session
+     * policy.
+     * </p>
+     * <p>
+     * This parameter is optional. Passing policies to this operation returns
+     * new temporary credentials. The resulting session's permissions are the
+     * intersection of the role's identity-based policy and the session
+     * policies. You can use the role's temporary credentials in subsequent AWS
+     * API calls to access resources in the account that owns the role. You
+     * cannot use session policies to grant more permissions than those allowed
+     * by the identity-based policy of the role that is being assumed. For more
+     * information, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session"
+     * >Session Policies</a> in the <i>IAM User Guide</i>.
+     * </p>
+     * <p>
+     * The plain text that you use for both inline and managed session policies
+     * shouldn't exceed 2048 characters. The JSON policy characters can be any
+     * ASCII character from the space character to the end of the valid
+     * character list ( through \u00FF). It can also include the tab ( ),
+     * linefeed ( ), and carriage return ( ) characters.
+     * </p>
+     * <note>
+     * <p>
+     * The characters in this parameter count towards the 2048 character session
+     * policy guideline. However, an AWS conversion compresses the session
+     * policies into a packed binary format that has a separate limit. This is
+     * the enforced limit. The <code>PackedPolicySize</code> response element
+     * indicates by percentage how close the policy is to the upper size limit.
+     * </p>
+     * </note>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>1 - 2048<br/>
+     * <b>Pattern: </b>[ -\u00FF]+<br/>
+     *
+     * @param policy <p>
+     *            An IAM policy in JSON format that you want to use as an inline
+     *            session policy.
+     *            </p>
+     *            <p>
+     *            This parameter is optional. Passing policies to this operation
+     *            returns new temporary credentials. The resulting session's
+     *            permissions are the intersection of the role's identity-based
+     *            policy and the session policies. You can use the role's
+     *            temporary credentials in subsequent AWS API calls to access
+     *            resources in the account that owns the role. You cannot use
+     *            session policies to grant more permissions than those allowed
+     *            by the identity-based policy of the role that is being
+     *            assumed. For more information, see <a href=
+     *            "https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#policies_session"
+     *            >Session Policies</a> in the <i>IAM User Guide</i>.
+     *            </p>
+     *            <p>
+     *            The plain text that you use for both inline and managed
+     *            session policies shouldn't exceed 2048 characters. The JSON
+     *            policy characters can be any ASCII character from the space
+     *            character to the end of the valid character list ( through
+     *            \u00FF). It can also include the tab ( ), linefeed ( ), and
+     *            carriage return ( ) characters.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            The characters in this parameter count towards the 2048
+     *            character session policy guideline. However, an AWS conversion
+     *            compresses the session policies into a packed binary format
+     *            that has a separate limit. This is the enforced limit. The
+     *            <code>PackedPolicySize</code> response element indicates by
+     *            percentage how close the policy is to the upper size limit.
+     *            </p>
+     *            </note>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public AssumeRoleWithSAMLRequest withPolicy(String policy) {
+        this.policy = policy;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The duration, in seconds, of the role session. Your role session lasts
+     * for the duration that you specify for the <code>DurationSeconds</code>
+     * parameter, or until the time specified in the SAML authentication
+     * response's <code>SessionNotOnOrAfter</code> value, whichever is shorter.
+     * You can provide a <code>DurationSeconds</code> value from 900 seconds (15
+     * minutes) up to the maximum session duration setting for the role. This
+     * setting can have a value from 1 hour to 12 hours. If you specify a value
+     * higher than this setting, the operation fails. For example, if you
+     * specify a session duration of 12 hours, but your administrator set the
+     * maximum session duration to 6 hours, your operation fails. To learn how
+     * to view the maximum value for your role, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session"
+     * >View the Maximum Session Duration Setting for a Role</a> in the <i>IAM
+     * User Guide</i>.
+     * </p>
+     * <p>
+     * By default, the value is set to <code>3600</code> seconds.
+     * </p>
+     * <note>
+     * <p>
+     * The <code>DurationSeconds</code> parameter is separate from the duration
+     * of a console session that you might request using the returned
+     * credentials. The request to the federation endpoint for a console sign-in
+     * token takes a <code>SessionDuration</code> parameter that specifies the
+     * maximum length of the console session. For more information, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html"
+     * >Creating a URL that Enables Federated Users to Access the AWS Management
+     * Console</a> in the <i>IAM User Guide</i>.
+     * </p>
+     * </note>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Range: </b>900 - 43200<br/>
+     *
+     * @return <p>
+     *         The duration, in seconds, of the role session. Your role session
+     *         lasts for the duration that you specify for the
+     *         <code>DurationSeconds</code> parameter, or until the time
+     *         specified in the SAML authentication response's
+     *         <code>SessionNotOnOrAfter</code> value, whichever is shorter. You
+     *         can provide a <code>DurationSeconds</code> value from 900 seconds
+     *         (15 minutes) up to the maximum session duration setting for the
+     *         role. This setting can have a value from 1 hour to 12 hours. If
+     *         you specify a value higher than this setting, the operation
+     *         fails. For example, if you specify a session duration of 12
+     *         hours, but your administrator set the maximum session duration to
+     *         6 hours, your operation fails. To learn how to view the maximum
+     *         value for your role, see <a href=
+     *         "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session"
+     *         >View the Maximum Session Duration Setting for a Role</a> in the
+     *         <i>IAM User Guide</i>.
+     *         </p>
+     *         <p>
+     *         By default, the value is set to <code>3600</code> seconds.
+     *         </p>
+     *         <note>
+     *         <p>
+     *         The <code>DurationSeconds</code> parameter is separate from the
+     *         duration of a console session that you might request using the
+     *         returned credentials. The request to the federation endpoint for
+     *         a console sign-in token takes a <code>SessionDuration</code>
+     *         parameter that specifies the maximum length of the console
+     *         session. For more information, see <a href=
+     *         "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html"
+     *         >Creating a URL that Enables Federated Users to Access the AWS
+     *         Management Console</a> in the <i>IAM User Guide</i>.
+     *         </p>
+     *         </note>
+     */
+    public Integer getDurationSeconds() {
+        return durationSeconds;
+    }
+
+    /**
+     * <p>
+     * The duration, in seconds, of the role session. Your role session lasts
+     * for the duration that you specify for the <code>DurationSeconds</code>
+     * parameter, or until the time specified in the SAML authentication
+     * response's <code>SessionNotOnOrAfter</code> value, whichever is shorter.
+     * You can provide a <code>DurationSeconds</code> value from 900 seconds (15
+     * minutes) up to the maximum session duration setting for the role. This
+     * setting can have a value from 1 hour to 12 hours. If you specify a value
+     * higher than this setting, the operation fails. For example, if you
+     * specify a session duration of 12 hours, but your administrator set the
+     * maximum session duration to 6 hours, your operation fails. To learn how
+     * to view the maximum value for your role, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session"
+     * >View the Maximum Session Duration Setting for a Role</a> in the <i>IAM
+     * User Guide</i>.
+     * </p>
+     * <p>
+     * By default, the value is set to <code>3600</code> seconds.
+     * </p>
+     * <note>
+     * <p>
+     * The <code>DurationSeconds</code> parameter is separate from the duration
+     * of a console session that you might request using the returned
+     * credentials. The request to the federation endpoint for a console sign-in
+     * token takes a <code>SessionDuration</code> parameter that specifies the
+     * maximum length of the console session. For more information, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html"
+     * >Creating a URL that Enables Federated Users to Access the AWS Management
+     * Console</a> in the <i>IAM User Guide</i>.
+     * </p>
+     * </note>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Range: </b>900 - 43200<br/>
+     *
+     * @param durationSeconds <p>
+     *            The duration, in seconds, of the role session. Your role
+     *            session lasts for the duration that you specify for the
+     *            <code>DurationSeconds</code> parameter, or until the time
+     *            specified in the SAML authentication response's
+     *            <code>SessionNotOnOrAfter</code> value, whichever is shorter.
+     *            You can provide a <code>DurationSeconds</code> value from 900
+     *            seconds (15 minutes) up to the maximum session duration
+     *            setting for the role. This setting can have a value from 1
+     *            hour to 12 hours. If you specify a value higher than this
+     *            setting, the operation fails. For example, if you specify a
+     *            session duration of 12 hours, but your administrator set the
+     *            maximum session duration to 6 hours, your operation fails. To
+     *            learn how to view the maximum value for your role, see <a
+     *            href=
+     *            "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session"
+     *            >View the Maximum Session Duration Setting for a Role</a> in
+     *            the <i>IAM User Guide</i>.
+     *            </p>
+     *            <p>
+     *            By default, the value is set to <code>3600</code> seconds.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            The <code>DurationSeconds</code> parameter is separate from
+     *            the duration of a console session that you might request using
+     *            the returned credentials. The request to the federation
+     *            endpoint for a console sign-in token takes a
+     *            <code>SessionDuration</code> parameter that specifies the
+     *            maximum length of the console session. For more information,
+     *            see <a href=
+     *            "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html"
+     *            >Creating a URL that Enables Federated Users to Access the AWS
+     *            Management Console</a> in the <i>IAM User Guide</i>.
+     *            </p>
+     *            </note>
+     */
+    public void setDurationSeconds(Integer durationSeconds) {
+        this.durationSeconds = durationSeconds;
+    }
+
+    /**
+     * <p>
+     * The duration, in seconds, of the role session. Your role session lasts
+     * for the duration that you specify for the <code>DurationSeconds</code>
+     * parameter, or until the time specified in the SAML authentication
+     * response's <code>SessionNotOnOrAfter</code> value, whichever is shorter.
+     * You can provide a <code>DurationSeconds</code> value from 900 seconds (15
+     * minutes) up to the maximum session duration setting for the role. This
+     * setting can have a value from 1 hour to 12 hours. If you specify a value
+     * higher than this setting, the operation fails. For example, if you
+     * specify a session duration of 12 hours, but your administrator set the
+     * maximum session duration to 6 hours, your operation fails. To learn how
+     * to view the maximum value for your role, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session"
+     * >View the Maximum Session Duration Setting for a Role</a> in the <i>IAM
+     * User Guide</i>.
+     * </p>
+     * <p>
+     * By default, the value is set to <code>3600</code> seconds.
+     * </p>
+     * <note>
+     * <p>
+     * The <code>DurationSeconds</code> parameter is separate from the duration
+     * of a console session that you might request using the returned
+     * credentials. The request to the federation endpoint for a console sign-in
+     * token takes a <code>SessionDuration</code> parameter that specifies the
+     * maximum length of the console session. For more information, see <a href=
+     * "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html"
+     * >Creating a URL that Enables Federated Users to Access the AWS Management
+     * Console</a> in the <i>IAM User Guide</i>.
+     * </p>
+     * </note>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Range: </b>900 - 43200<br/>
+     *
+     * @param durationSeconds <p>
+     *            The duration, in seconds, of the role session. Your role
+     *            session lasts for the duration that you specify for the
+     *            <code>DurationSeconds</code> parameter, or until the time
+     *            specified in the SAML authentication response's
+     *            <code>SessionNotOnOrAfter</code> value, whichever is shorter.
+     *            You can provide a <code>DurationSeconds</code> value from 900
+     *            seconds (15 minutes) up to the maximum session duration
+     *            setting for the role. This setting can have a value from 1
+     *            hour to 12 hours. If you specify a value higher than this
+     *            setting, the operation fails. For example, if you specify a
+     *            session duration of 12 hours, but your administrator set the
+     *            maximum session duration to 6 hours, your operation fails. To
+     *            learn how to view the maximum value for your role, see <a
+     *            href=
+     *            "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html#id_roles_use_view-role-max-session"
+     *            >View the Maximum Session Duration Setting for a Role</a> in
+     *            the <i>IAM User Guide</i>.
+     *            </p>
+     *            <p>
+     *            By default, the value is set to <code>3600</code> seconds.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            The <code>DurationSeconds</code> parameter is separate from
+     *            the duration of a console session that you might request using
+     *            the returned credentials. The request to the federation
+     *            endpoint for a console sign-in token takes a
+     *            <code>SessionDuration</code> parameter that specifies the
+     *            maximum length of the console session. For more information,
+     *            see <a href=
+     *            "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html"
+     *            >Creating a URL that Enables Federated Users to Access the AWS
+     *            Management Console</a> in the <i>IAM User Guide</i>.
+     *            </p>
+     *            </note>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public AssumeRoleWithSAMLRequest withDurationSeconds(Integer durationSeconds) {
+        this.durationSeconds = durationSeconds;
+        return this;
+    }
+
+    /**
+     * Returns a string representation of this object; useful for testing and
+     * debugging.
+     *
+     * @return A string representation of this object.
+     * @see java.lang.Object#toString()
+     */
+    @Override
+    public String toString() {
+        StringBuilder sb = new StringBuilder();
+        sb.append("{");
+        if (getRoleArn() != null)
+            sb.append("RoleArn: " + getRoleArn() + ",");
+        if (getPrincipalArn() != null)
+            sb.append("PrincipalArn: " + getPrincipalArn() + ",");
+        if (getSAMLAssertion() != null)
+            sb.append("SAMLAssertion: " + getSAMLAssertion() + ",");
+        if (getPolicyArns() != null)
+            sb.append("PolicyArns: " + getPolicyArns() + ",");
+        if (getPolicy() != null)
+            sb.append("Policy: " + getPolicy() + ",");
+        if (getDurationSeconds() != null)
+            sb.append("DurationSeconds: " + getDurationSeconds());
+        sb.append("}");
+        return sb.toString();
+    }
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int hashCode = 1;
+
+        hashCode = prime * hashCode + ((getRoleArn() == null) ? 0 : getRoleArn().hashCode());
+        hashCode = prime * hashCode
+                + ((getPrincipalArn() == null) ? 0 : getPrincipalArn().hashCode());
+        hashCode = prime * hashCode
+                + ((getSAMLAssertion() == null) ? 0 : getSAMLAssertion().hashCode());
+        hashCode = prime * hashCode + ((getPolicyArns() == null) ? 0 : getPolicyArns().hashCode());
+        hashCode = prime * hashCode + ((getPolicy() == null) ? 0 : getPolicy().hashCode());
+        hashCode = prime * hashCode
+                + ((getDurationSeconds() == null) ? 0 : getDurationSeconds().hashCode());
+        return hashCode;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj)
+            return true;
+        if (obj == null)
+            return false;
+
+        if (obj instanceof AssumeRoleWithSAMLRequest == false)
+            return false;
+        AssumeRoleWithSAMLRequest other = (AssumeRoleWithSAMLRequest) obj;
+
+        if (other.getRoleArn() == null ^ this.getRoleArn() == null)
+            return false;
+        if (other.getRoleArn() != null && other.getRoleArn().equals(this.getRoleArn()) == false)
+            return false;
+        if (other.getPrincipalArn() == null ^ this.getPrincipalArn() == null)
+            return false;
+        if (other.getPrincipalArn() != null
+                && other.getPrincipalArn().equals(this.getPrincipalArn()) == false)
+            return false;
+        if (other.getSAMLAssertion() == null ^ this.getSAMLAssertion() == null)
+            return false;
+        if (other.getSAMLAssertion() != null
+                && other.getSAMLAssertion().equals(this.getSAMLAssertion()) == false)
+            return false;
+        if (other.getPolicyArns() == null ^ this.getPolicyArns() == null)
+            return false;
+        if (other.getPolicyArns() != null
+                && other.getPolicyArns().equals(this.getPolicyArns()) == false)
+            return false;
+        if (other.getPolicy() == null ^ this.getPolicy() == null)
+            return false;
+        if (other.getPolicy() != null && other.getPolicy().equals(this.getPolicy()) == false)
+            return false;
+        if (other.getDurationSeconds() == null ^ this.getDurationSeconds() == null)
+            return false;
+        if (other.getDurationSeconds() != null
+                && other.getDurationSeconds().equals(this.getDurationSeconds()) == false)
+            return false;
+        return true;
+    }
+}
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/AssumeRoleWithSAMLResult.java b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/AssumeRoleWithSAMLResult.java
new file mode 100644
index 0000000000..9f68cdfa73
--- /dev/null
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/AssumeRoleWithSAMLResult.java
@@ -0,0 +1,813 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.securitytoken.model;
+
+import java.io.Serializable;
+
+/**
+ * <p>
+ * Contains the response to a successful <a>AssumeRoleWithSAML</a> request,
+ * including temporary AWS credentials that can be used to make AWS requests.
+ * </p>
+ */
+public class AssumeRoleWithSAMLResult implements Serializable {
+    /**
+     * <p>
+     * The temporary security credentials, which include an access key ID, a
+     * secret access key, and a security (or session) token.
+     * </p>
+     * <note>
+     * <p>
+     * The size of the security token that STS API operations return is not
+     * fixed. We strongly recommend that you make no assumptions about the
+     * maximum size.
+     * </p>
+     * </note>
+     */
+    private Credentials credentials;
+
+    /**
+     * <p>
+     * The identifiers for the temporary security credentials that the operation
+     * returns.
+     * </p>
+     */
+    private AssumedRoleUser assumedRoleUser;
+
+    /**
+     * <p>
+     * A percentage value that indicates the size of the policy in packed form.
+     * The service rejects any policy with a packed size greater than 100
+     * percent, which means the policy exceeded the allowed space.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Range: </b>0 - <br/>
+     */
+    private Integer packedPolicySize;
+
+    /**
+     * <p>
+     * The value of the <code>NameID</code> element in the <code>Subject</code>
+     * element of the SAML assertion.
+     * </p>
+     */
+    private String subject;
+
+    /**
+     * <p>
+     * The format of the name ID, as defined by the <code>Format</code>
+     * attribute in the <code>NameID</code> element of the SAML assertion.
+     * Typical examples of the format are <code>transient</code> or
+     * <code>persistent</code>.
+     * </p>
+     * <p>
+     * If the format includes the prefix
+     * <code>urn:oasis:names:tc:SAML:2.0:nameid-format</code>, that prefix is
+     * removed. For example,
+     * <code>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</code> is
+     * returned as <code>transient</code>. If the format includes any other
+     * prefix, the format is returned with no modifications.
+     * </p>
+     */
+    private String subjectType;
+
+    /**
+     * <p>
+     * The value of the <code>Issuer</code> element of the SAML assertion.
+     * </p>
+     */
+    private String issuer;
+
+    /**
+     * <p>
+     * The value of the <code>Recipient</code> attribute of the
+     * <code>SubjectConfirmationData</code> element of the SAML assertion.
+     * </p>
+     */
+    private String audience;
+
+    /**
+     * <p>
+     * A hash value based on the concatenation of the <code>Issuer</code>
+     * response value, the AWS account ID, and the friendly name (the last part
+     * of the ARN) of the SAML provider in IAM. The combination of
+     * <code>NameQualifier</code> and <code>Subject</code> can be used to
+     * uniquely identify a federated user.
+     * </p>
+     * <p>
+     * The following pseudocode shows how the hash value is calculated:
+     * </p>
+     * <p>
+     * <code>BASE64 ( SHA1 ( "https://example.com/saml" + "123456789012" + "/MySAMLIdP" ) )</code>
+     * </p>
+     */
+    private String nameQualifier;
+
+    /**
+     * <p>
+     * The temporary security credentials, which include an access key ID, a
+     * secret access key, and a security (or session) token.
+     * </p>
+     * <note>
+     * <p>
+     * The size of the security token that STS API operations return is not
+     * fixed. We strongly recommend that you make no assumptions about the
+     * maximum size.
+     * </p>
+     * </note>
+     *
+     * @return <p>
+     *         The temporary security credentials, which include an access key
+     *         ID, a secret access key, and a security (or session) token.
+     *         </p>
+     *         <note>
+     *         <p>
+     *         The size of the security token that STS API operations return is
+     *         not fixed. We strongly recommend that you make no assumptions
+     *         about the maximum size.
+     *         </p>
+     *         </note>
+     */
+    public Credentials getCredentials() {
+        return credentials;
+    }
+
+    /**
+     * <p>
+     * The temporary security credentials, which include an access key ID, a
+     * secret access key, and a security (or session) token.
+     * </p>
+     * <note>
+     * <p>
+     * The size of the security token that STS API operations return is not
+     * fixed. We strongly recommend that you make no assumptions about the
+     * maximum size.
+     * </p>
+     * </note>
+     *
+     * @param credentials <p>
+     *            The temporary security credentials, which include an access
+     *            key ID, a secret access key, and a security (or session)
+     *            token.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            The size of the security token that STS API operations return
+     *            is not fixed. We strongly recommend that you make no
+     *            assumptions about the maximum size.
+     *            </p>
+     *            </note>
+     */
+    public void setCredentials(Credentials credentials) {
+        this.credentials = credentials;
+    }
+
+    /**
+     * <p>
+     * The temporary security credentials, which include an access key ID, a
+     * secret access key, and a security (or session) token.
+     * </p>
+     * <note>
+     * <p>
+     * The size of the security token that STS API operations return is not
+     * fixed. We strongly recommend that you make no assumptions about the
+     * maximum size.
+     * </p>
+     * </note>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param credentials <p>
+     *            The temporary security credentials, which include an access
+     *            key ID, a secret access key, and a security (or session)
+     *            token.
+     *            </p>
+     *            <note>
+     *            <p>
+     *            The size of the security token that STS API operations return
+     *            is not fixed. We strongly recommend that you make no
+     *            assumptions about the maximum size.
+     *            </p>
+     *            </note>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public AssumeRoleWithSAMLResult withCredentials(Credentials credentials) {
+        this.credentials = credentials;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The identifiers for the temporary security credentials that the operation
+     * returns.
+     * </p>
+     *
+     * @return <p>
+     *         The identifiers for the temporary security credentials that the
+     *         operation returns.
+     *         </p>
+     */
+    public AssumedRoleUser getAssumedRoleUser() {
+        return assumedRoleUser;
+    }
+
+    /**
+     * <p>
+     * The identifiers for the temporary security credentials that the operation
+     * returns.
+     * </p>
+     *
+     * @param assumedRoleUser <p>
+     *            The identifiers for the temporary security credentials that
+     *            the operation returns.
+     *            </p>
+     */
+    public void setAssumedRoleUser(AssumedRoleUser assumedRoleUser) {
+        this.assumedRoleUser = assumedRoleUser;
+    }
+
+    /**
+     * <p>
+     * The identifiers for the temporary security credentials that the operation
+     * returns.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param assumedRoleUser <p>
+     *            The identifiers for the temporary security credentials that
+     *            the operation returns.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public AssumeRoleWithSAMLResult withAssumedRoleUser(AssumedRoleUser assumedRoleUser) {
+        this.assumedRoleUser = assumedRoleUser;
+        return this;
+    }
+
+    /**
+     * <p>
+     * A percentage value that indicates the size of the policy in packed form.
+     * The service rejects any policy with a packed size greater than 100
+     * percent, which means the policy exceeded the allowed space.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Range: </b>0 - <br/>
+     *
+     * @return <p>
+     *         A percentage value that indicates the size of the policy in
+     *         packed form. The service rejects any policy with a packed size
+     *         greater than 100 percent, which means the policy exceeded the
+     *         allowed space.
+     *         </p>
+     */
+    public Integer getPackedPolicySize() {
+        return packedPolicySize;
+    }
+
+    /**
+     * <p>
+     * A percentage value that indicates the size of the policy in packed form.
+     * The service rejects any policy with a packed size greater than 100
+     * percent, which means the policy exceeded the allowed space.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Range: </b>0 - <br/>
+     *
+     * @param packedPolicySize <p>
+     *            A percentage value that indicates the size of the policy in
+     *            packed form. The service rejects any policy with a packed size
+     *            greater than 100 percent, which means the policy exceeded the
+     *            allowed space.
+     *            </p>
+     */
+    public void setPackedPolicySize(Integer packedPolicySize) {
+        this.packedPolicySize = packedPolicySize;
+    }
+
+    /**
+     * <p>
+     * A percentage value that indicates the size of the policy in packed form.
+     * The service rejects any policy with a packed size greater than 100
+     * percent, which means the policy exceeded the allowed space.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Range: </b>0 - <br/>
+     *
+     * @param packedPolicySize <p>
+     *            A percentage value that indicates the size of the policy in
+     *            packed form. The service rejects any policy with a packed size
+     *            greater than 100 percent, which means the policy exceeded the
+     *            allowed space.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public AssumeRoleWithSAMLResult withPackedPolicySize(Integer packedPolicySize) {
+        this.packedPolicySize = packedPolicySize;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The value of the <code>NameID</code> element in the <code>Subject</code>
+     * element of the SAML assertion.
+     * </p>
+     *
+     * @return <p>
+     *         The value of the <code>NameID</code> element in the
+     *         <code>Subject</code> element of the SAML assertion.
+     *         </p>
+     */
+    public String getSubject() {
+        return subject;
+    }
+
+    /**
+     * <p>
+     * The value of the <code>NameID</code> element in the <code>Subject</code>
+     * element of the SAML assertion.
+     * </p>
+     *
+     * @param subject <p>
+     *            The value of the <code>NameID</code> element in the
+     *            <code>Subject</code> element of the SAML assertion.
+     *            </p>
+     */
+    public void setSubject(String subject) {
+        this.subject = subject;
+    }
+
+    /**
+     * <p>
+     * The value of the <code>NameID</code> element in the <code>Subject</code>
+     * element of the SAML assertion.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param subject <p>
+     *            The value of the <code>NameID</code> element in the
+     *            <code>Subject</code> element of the SAML assertion.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public AssumeRoleWithSAMLResult withSubject(String subject) {
+        this.subject = subject;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The format of the name ID, as defined by the <code>Format</code>
+     * attribute in the <code>NameID</code> element of the SAML assertion.
+     * Typical examples of the format are <code>transient</code> or
+     * <code>persistent</code>.
+     * </p>
+     * <p>
+     * If the format includes the prefix
+     * <code>urn:oasis:names:tc:SAML:2.0:nameid-format</code>, that prefix is
+     * removed. For example,
+     * <code>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</code> is
+     * returned as <code>transient</code>. If the format includes any other
+     * prefix, the format is returned with no modifications.
+     * </p>
+     *
+     * @return <p>
+     *         The format of the name ID, as defined by the <code>Format</code>
+     *         attribute in the <code>NameID</code> element of the SAML
+     *         assertion. Typical examples of the format are
+     *         <code>transient</code> or <code>persistent</code>.
+     *         </p>
+     *         <p>
+     *         If the format includes the prefix
+     *         <code>urn:oasis:names:tc:SAML:2.0:nameid-format</code>, that
+     *         prefix is removed. For example,
+     *         <code>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</code>
+     *         is returned as <code>transient</code>. If the format includes any
+     *         other prefix, the format is returned with no modifications.
+     *         </p>
+     */
+    public String getSubjectType() {
+        return subjectType;
+    }
+
+    /**
+     * <p>
+     * The format of the name ID, as defined by the <code>Format</code>
+     * attribute in the <code>NameID</code> element of the SAML assertion.
+     * Typical examples of the format are <code>transient</code> or
+     * <code>persistent</code>.
+     * </p>
+     * <p>
+     * If the format includes the prefix
+     * <code>urn:oasis:names:tc:SAML:2.0:nameid-format</code>, that prefix is
+     * removed. For example,
+     * <code>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</code> is
+     * returned as <code>transient</code>. If the format includes any other
+     * prefix, the format is returned with no modifications.
+     * </p>
+     *
+     * @param subjectType <p>
+     *            The format of the name ID, as defined by the
+     *            <code>Format</code> attribute in the <code>NameID</code>
+     *            element of the SAML assertion. Typical examples of the format
+     *            are <code>transient</code> or <code>persistent</code>.
+     *            </p>
+     *            <p>
+     *            If the format includes the prefix
+     *            <code>urn:oasis:names:tc:SAML:2.0:nameid-format</code>, that
+     *            prefix is removed. For example,
+     *            <code>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</code>
+     *            is returned as <code>transient</code>. If the format includes
+     *            any other prefix, the format is returned with no
+     *            modifications.
+     *            </p>
+     */
+    public void setSubjectType(String subjectType) {
+        this.subjectType = subjectType;
+    }
+
+    /**
+     * <p>
+     * The format of the name ID, as defined by the <code>Format</code>
+     * attribute in the <code>NameID</code> element of the SAML assertion.
+     * Typical examples of the format are <code>transient</code> or
+     * <code>persistent</code>.
+     * </p>
+     * <p>
+     * If the format includes the prefix
+     * <code>urn:oasis:names:tc:SAML:2.0:nameid-format</code>, that prefix is
+     * removed. For example,
+     * <code>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</code> is
+     * returned as <code>transient</code>. If the format includes any other
+     * prefix, the format is returned with no modifications.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param subjectType <p>
+     *            The format of the name ID, as defined by the
+     *            <code>Format</code> attribute in the <code>NameID</code>
+     *            element of the SAML assertion. Typical examples of the format
+     *            are <code>transient</code> or <code>persistent</code>.
+     *            </p>
+     *            <p>
+     *            If the format includes the prefix
+     *            <code>urn:oasis:names:tc:SAML:2.0:nameid-format</code>, that
+     *            prefix is removed. For example,
+     *            <code>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</code>
+     *            is returned as <code>transient</code>. If the format includes
+     *            any other prefix, the format is returned with no
+     *            modifications.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public AssumeRoleWithSAMLResult withSubjectType(String subjectType) {
+        this.subjectType = subjectType;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The value of the <code>Issuer</code> element of the SAML assertion.
+     * </p>
+     *
+     * @return <p>
+     *         The value of the <code>Issuer</code> element of the SAML
+     *         assertion.
+     *         </p>
+     */
+    public String getIssuer() {
+        return issuer;
+    }
+
+    /**
+     * <p>
+     * The value of the <code>Issuer</code> element of the SAML assertion.
+     * </p>
+     *
+     * @param issuer <p>
+     *            The value of the <code>Issuer</code> element of the SAML
+     *            assertion.
+     *            </p>
+     */
+    public void setIssuer(String issuer) {
+        this.issuer = issuer;
+    }
+
+    /**
+     * <p>
+     * The value of the <code>Issuer</code> element of the SAML assertion.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param issuer <p>
+     *            The value of the <code>Issuer</code> element of the SAML
+     *            assertion.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public AssumeRoleWithSAMLResult withIssuer(String issuer) {
+        this.issuer = issuer;
+        return this;
+    }
+
+    /**
+     * <p>
+     * The value of the <code>Recipient</code> attribute of the
+     * <code>SubjectConfirmationData</code> element of the SAML assertion.
+     * </p>
+     *
+     * @return <p>
+     *         The value of the <code>Recipient</code> attribute of the
+     *         <code>SubjectConfirmationData</code> element of the SAML
+     *         assertion.
+     *         </p>
+     */
+    public String getAudience() {
+        return audience;
+    }
+
+    /**
+     * <p>
+     * The value of the <code>Recipient</code> attribute of the
+     * <code>SubjectConfirmationData</code> element of the SAML assertion.
+     * </p>
+     *
+     * @param audience <p>
+     *            The value of the <code>Recipient</code> attribute of the
+     *            <code>SubjectConfirmationData</code> element of the SAML
+     *            assertion.
+     *            </p>
+     */
+    public void setAudience(String audience) {
+        this.audience = audience;
+    }
+
+    /**
+     * <p>
+     * The value of the <code>Recipient</code> attribute of the
+     * <code>SubjectConfirmationData</code> element of the SAML assertion.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param audience <p>
+     *            The value of the <code>Recipient</code> attribute of the
+     *            <code>SubjectConfirmationData</code> element of the SAML
+     *            assertion.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public AssumeRoleWithSAMLResult withAudience(String audience) {
+        this.audience = audience;
+        return this;
+    }
+
+    /**
+     * <p>
+     * A hash value based on the concatenation of the <code>Issuer</code>
+     * response value, the AWS account ID, and the friendly name (the last part
+     * of the ARN) of the SAML provider in IAM. The combination of
+     * <code>NameQualifier</code> and <code>Subject</code> can be used to
+     * uniquely identify a federated user.
+     * </p>
+     * <p>
+     * The following pseudocode shows how the hash value is calculated:
+     * </p>
+     * <p>
+     * <code>BASE64 ( SHA1 ( "https://example.com/saml" + "123456789012" + "/MySAMLIdP" ) )</code>
+     * </p>
+     *
+     * @return <p>
+     *         A hash value based on the concatenation of the
+     *         <code>Issuer</code> response value, the AWS account ID, and the
+     *         friendly name (the last part of the ARN) of the SAML provider in
+     *         IAM. The combination of <code>NameQualifier</code> and
+     *         <code>Subject</code> can be used to uniquely identify a federated
+     *         user.
+     *         </p>
+     *         <p>
+     *         The following pseudocode shows how the hash value is calculated:
+     *         </p>
+     *         <p>
+     *         <code>BASE64 ( SHA1 ( "https://example.com/saml" + "123456789012" + "/MySAMLIdP" ) )</code>
+     *         </p>
+     */
+    public String getNameQualifier() {
+        return nameQualifier;
+    }
+
+    /**
+     * <p>
+     * A hash value based on the concatenation of the <code>Issuer</code>
+     * response value, the AWS account ID, and the friendly name (the last part
+     * of the ARN) of the SAML provider in IAM. The combination of
+     * <code>NameQualifier</code> and <code>Subject</code> can be used to
+     * uniquely identify a federated user.
+     * </p>
+     * <p>
+     * The following pseudocode shows how the hash value is calculated:
+     * </p>
+     * <p>
+     * <code>BASE64 ( SHA1 ( "https://example.com/saml" + "123456789012" + "/MySAMLIdP" ) )</code>
+     * </p>
+     *
+     * @param nameQualifier <p>
+     *            A hash value based on the concatenation of the
+     *            <code>Issuer</code> response value, the AWS account ID, and
+     *            the friendly name (the last part of the ARN) of the SAML
+     *            provider in IAM. The combination of <code>NameQualifier</code>
+     *            and <code>Subject</code> can be used to uniquely identify a
+     *            federated user.
+     *            </p>
+     *            <p>
+     *            The following pseudocode shows how the hash value is
+     *            calculated:
+     *            </p>
+     *            <p>
+     *            <code>BASE64 ( SHA1 ( "https://example.com/saml" + "123456789012" + "/MySAMLIdP" ) )</code>
+     *            </p>
+     */
+    public void setNameQualifier(String nameQualifier) {
+        this.nameQualifier = nameQualifier;
+    }
+
+    /**
+     * <p>
+     * A hash value based on the concatenation of the <code>Issuer</code>
+     * response value, the AWS account ID, and the friendly name (the last part
+     * of the ARN) of the SAML provider in IAM. The combination of
+     * <code>NameQualifier</code> and <code>Subject</code> can be used to
+     * uniquely identify a federated user.
+     * </p>
+     * <p>
+     * The following pseudocode shows how the hash value is calculated:
+     * </p>
+     * <p>
+     * <code>BASE64 ( SHA1 ( "https://example.com/saml" + "123456789012" + "/MySAMLIdP" ) )</code>
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param nameQualifier <p>
+     *            A hash value based on the concatenation of the
+     *            <code>Issuer</code> response value, the AWS account ID, and
+     *            the friendly name (the last part of the ARN) of the SAML
+     *            provider in IAM. The combination of <code>NameQualifier</code>
+     *            and <code>Subject</code> can be used to uniquely identify a
+     *            federated user.
+     *            </p>
+     *            <p>
+     *            The following pseudocode shows how the hash value is
+     *            calculated:
+     *            </p>
+     *            <p>
+     *            <code>BASE64 ( SHA1 ( "https://example.com/saml" + "123456789012" + "/MySAMLIdP" ) )</code>
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public AssumeRoleWithSAMLResult withNameQualifier(String nameQualifier) {
+        this.nameQualifier = nameQualifier;
+        return this;
+    }
+
+    /**
+     * Returns a string representation of this object; useful for testing and
+     * debugging.
+     *
+     * @return A string representation of this object.
+     * @see java.lang.Object#toString()
+     */
+    @Override
+    public String toString() {
+        StringBuilder sb = new StringBuilder();
+        sb.append("{");
+        if (getCredentials() != null)
+            sb.append("Credentials: " + getCredentials() + ",");
+        if (getAssumedRoleUser() != null)
+            sb.append("AssumedRoleUser: " + getAssumedRoleUser() + ",");
+        if (getPackedPolicySize() != null)
+            sb.append("PackedPolicySize: " + getPackedPolicySize() + ",");
+        if (getSubject() != null)
+            sb.append("Subject: " + getSubject() + ",");
+        if (getSubjectType() != null)
+            sb.append("SubjectType: " + getSubjectType() + ",");
+        if (getIssuer() != null)
+            sb.append("Issuer: " + getIssuer() + ",");
+        if (getAudience() != null)
+            sb.append("Audience: " + getAudience() + ",");
+        if (getNameQualifier() != null)
+            sb.append("NameQualifier: " + getNameQualifier());
+        sb.append("}");
+        return sb.toString();
+    }
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int hashCode = 1;
+
+        hashCode = prime * hashCode
+                + ((getCredentials() == null) ? 0 : getCredentials().hashCode());
+        hashCode = prime * hashCode
+                + ((getAssumedRoleUser() == null) ? 0 : getAssumedRoleUser().hashCode());
+        hashCode = prime * hashCode
+                + ((getPackedPolicySize() == null) ? 0 : getPackedPolicySize().hashCode());
+        hashCode = prime * hashCode + ((getSubject() == null) ? 0 : getSubject().hashCode());
+        hashCode = prime * hashCode
+                + ((getSubjectType() == null) ? 0 : getSubjectType().hashCode());
+        hashCode = prime * hashCode + ((getIssuer() == null) ? 0 : getIssuer().hashCode());
+        hashCode = prime * hashCode + ((getAudience() == null) ? 0 : getAudience().hashCode());
+        hashCode = prime * hashCode
+                + ((getNameQualifier() == null) ? 0 : getNameQualifier().hashCode());
+        return hashCode;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj)
+            return true;
+        if (obj == null)
+            return false;
+
+        if (obj instanceof AssumeRoleWithSAMLResult == false)
+            return false;
+        AssumeRoleWithSAMLResult other = (AssumeRoleWithSAMLResult) obj;
+
+        if (other.getCredentials() == null ^ this.getCredentials() == null)
+            return false;
+        if (other.getCredentials() != null
+                && other.getCredentials().equals(this.getCredentials()) == false)
+            return false;
+        if (other.getAssumedRoleUser() == null ^ this.getAssumedRoleUser() == null)
+            return false;
+        if (other.getAssumedRoleUser() != null
+                && other.getAssumedRoleUser().equals(this.getAssumedRoleUser()) == false)
+            return false;
+        if (other.getPackedPolicySize() == null ^ this.getPackedPolicySize() == null)
+            return false;
+        if (other.getPackedPolicySize() != null
+                && other.getPackedPolicySize().equals(this.getPackedPolicySize()) == false)
+            return false;
+        if (other.getSubject() == null ^ this.getSubject() == null)
+            return false;
+        if (other.getSubject() != null && other.getSubject().equals(this.getSubject()) == false)
+            return false;
+        if (other.getSubjectType() == null ^ this.getSubjectType() == null)
+            return false;
+        if (other.getSubjectType() != null
+                && other.getSubjectType().equals(this.getSubjectType()) == false)
+            return false;
+        if (other.getIssuer() == null ^ this.getIssuer() == null)
+            return false;
+        if (other.getIssuer() != null && other.getIssuer().equals(this.getIssuer()) == false)
+            return false;
+        if (other.getAudience() == null ^ this.getAudience() == null)
+            return false;
+        if (other.getAudience() != null && other.getAudience().equals(this.getAudience()) == false)
+            return false;
+        if (other.getNameQualifier() == null ^ this.getNameQualifier() == null)
+            return false;
+        if (other.getNameQualifier() != null
+                && other.getNameQualifier().equals(this.getNameQualifier()) == false)
+            return false;
+        return true;
+    }
+}
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/DecodeAuthorizationMessageRequest.java b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/DecodeAuthorizationMessageRequest.java
new file mode 100644
index 0000000000..cd28a615ed
--- /dev/null
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/DecodeAuthorizationMessageRequest.java
@@ -0,0 +1,195 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.securitytoken.model;
+
+import java.io.Serializable;
+
+import com.amazonaws.AmazonWebServiceRequest;
+
+/**
+ * <p>
+ * Decodes additional information about the authorization status of a request
+ * from an encoded message returned in response to an AWS request.
+ * </p>
+ * <p>
+ * For example, if a user is not authorized to perform an operation that he or
+ * she has requested, the request returns a
+ * <code>Client.UnauthorizedOperation</code> response (an HTTP 403 response).
+ * Some AWS operations additionally return an encoded message that can provide
+ * details about this authorization failure.
+ * </p>
+ * <note>
+ * <p>
+ * Only certain AWS operations return an encoded authorization message. The
+ * documentation for an individual operation indicates whether that operation
+ * returns an encoded message in addition to returning an HTTP code.
+ * </p>
+ * </note>
+ * <p>
+ * The message is encoded because the details of the authorization status can
+ * constitute privileged information that the user who requested the operation
+ * should not see. To decode an authorization status message, a user must be
+ * granted permissions via an IAM policy to request the
+ * <code>DecodeAuthorizationMessage</code> (
+ * <code>sts:DecodeAuthorizationMessage</code>) action.
+ * </p>
+ * <p>
+ * The decoded message includes the following type of information:
+ * </p>
+ * <ul>
+ * <li>
+ * <p>
+ * Whether the request was denied due to an explicit deny or due to the absence
+ * of an explicit allow. For more information, see <a href=
+ * "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-denyallow"
+ * >Determining Whether a Request is Allowed or Denied</a> in the <i>IAM User
+ * Guide</i>.
+ * </p>
+ * </li>
+ * <li>
+ * <p>
+ * The principal who made the request.
+ * </p>
+ * </li>
+ * <li>
+ * <p>
+ * The requested action.
+ * </p>
+ * </li>
+ * <li>
+ * <p>
+ * The requested resource.
+ * </p>
+ * </li>
+ * <li>
+ * <p>
+ * The values of condition keys in the context of the user's request.
+ * </p>
+ * </li>
+ * </ul>
+ */
+public class DecodeAuthorizationMessageRequest extends AmazonWebServiceRequest implements
+        Serializable {
+    /**
+     * <p>
+     * The encoded message that was returned with the response.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>1 - 10240<br/>
+     */
+    private String encodedMessage;
+
+    /**
+     * <p>
+     * The encoded message that was returned with the response.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>1 - 10240<br/>
+     *
+     * @return <p>
+     *         The encoded message that was returned with the response.
+     *         </p>
+     */
+    public String getEncodedMessage() {
+        return encodedMessage;
+    }
+
+    /**
+     * <p>
+     * The encoded message that was returned with the response.
+     * </p>
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>1 - 10240<br/>
+     *
+     * @param encodedMessage <p>
+     *            The encoded message that was returned with the response.
+     *            </p>
+     */
+    public void setEncodedMessage(String encodedMessage) {
+        this.encodedMessage = encodedMessage;
+    }
+
+    /**
+     * <p>
+     * The encoded message that was returned with the response.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     * <p>
+     * <b>Constraints:</b><br/>
+     * <b>Length: </b>1 - 10240<br/>
+     *
+     * @param encodedMessage <p>
+     *            The encoded message that was returned with the response.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public DecodeAuthorizationMessageRequest withEncodedMessage(String encodedMessage) {
+        this.encodedMessage = encodedMessage;
+        return this;
+    }
+
+    /**
+     * Returns a string representation of this object; useful for testing and
+     * debugging.
+     *
+     * @return A string representation of this object.
+     * @see java.lang.Object#toString()
+     */
+    @Override
+    public String toString() {
+        StringBuilder sb = new StringBuilder();
+        sb.append("{");
+        if (getEncodedMessage() != null)
+            sb.append("EncodedMessage: " + getEncodedMessage());
+        sb.append("}");
+        return sb.toString();
+    }
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int hashCode = 1;
+
+        hashCode = prime * hashCode
+                + ((getEncodedMessage() == null) ? 0 : getEncodedMessage().hashCode());
+        return hashCode;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj)
+            return true;
+        if (obj == null)
+            return false;
+
+        if (obj instanceof DecodeAuthorizationMessageRequest == false)
+            return false;
+        DecodeAuthorizationMessageRequest other = (DecodeAuthorizationMessageRequest) obj;
+
+        if (other.getEncodedMessage() == null ^ this.getEncodedMessage() == null)
+            return false;
+        if (other.getEncodedMessage() != null
+                && other.getEncodedMessage().equals(this.getEncodedMessage()) == false)
+            return false;
+        return true;
+    }
+}
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/DecodeAuthorizationMessageResult.java b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/DecodeAuthorizationMessageResult.java
new file mode 100644
index 0000000000..a67d431385
--- /dev/null
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/DecodeAuthorizationMessageResult.java
@@ -0,0 +1,125 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.securitytoken.model;
+
+import java.io.Serializable;
+
+/**
+ * <p>
+ * A document that contains additional information about the authorization
+ * status of a request from an encoded message that is returned in response to
+ * an AWS request.
+ * </p>
+ */
+public class DecodeAuthorizationMessageResult implements Serializable {
+    /**
+     * <p>
+     * An XML document that contains the decoded message.
+     * </p>
+     */
+    private String decodedMessage;
+
+    /**
+     * <p>
+     * An XML document that contains the decoded message.
+     * </p>
+     *
+     * @return <p>
+     *         An XML document that contains the decoded message.
+     *         </p>
+     */
+    public String getDecodedMessage() {
+        return decodedMessage;
+    }
+
+    /**
+     * <p>
+     * An XML document that contains the decoded message.
+     * </p>
+     *
+     * @param decodedMessage <p>
+     *            An XML document that contains the decoded message.
+     *            </p>
+     */
+    public void setDecodedMessage(String decodedMessage) {
+        this.decodedMessage = decodedMessage;
+    }
+
+    /**
+     * <p>
+     * An XML document that contains the decoded message.
+     * </p>
+     * <p>
+     * Returns a reference to this object so that method calls can be chained
+     * together.
+     *
+     * @param decodedMessage <p>
+     *            An XML document that contains the decoded message.
+     *            </p>
+     * @return A reference to this updated object so that method calls can be
+     *         chained together.
+     */
+    public DecodeAuthorizationMessageResult withDecodedMessage(String decodedMessage) {
+        this.decodedMessage = decodedMessage;
+        return this;
+    }
+
+    /**
+     * Returns a string representation of this object; useful for testing and
+     * debugging.
+     *
+     * @return A string representation of this object.
+     * @see java.lang.Object#toString()
+     */
+    @Override
+    public String toString() {
+        StringBuilder sb = new StringBuilder();
+        sb.append("{");
+        if (getDecodedMessage() != null)
+            sb.append("DecodedMessage: " + getDecodedMessage());
+        sb.append("}");
+        return sb.toString();
+    }
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int hashCode = 1;
+
+        hashCode = prime * hashCode
+                + ((getDecodedMessage() == null) ? 0 : getDecodedMessage().hashCode());
+        return hashCode;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj)
+            return true;
+        if (obj == null)
+            return false;
+
+        if (obj instanceof DecodeAuthorizationMessageResult == false)
+            return false;
+        DecodeAuthorizationMessageResult other = (DecodeAuthorizationMessageResult) obj;
+
+        if (other.getDecodedMessage() == null ^ this.getDecodedMessage() == null)
+            return false;
+        if (other.getDecodedMessage() != null
+                && other.getDecodedMessage().equals(this.getDecodedMessage()) == false)
+            return false;
+        return true;
+    }
+}
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/InvalidAuthorizationMessageException.java b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/InvalidAuthorizationMessageException.java
new file mode 100644
index 0000000000..7563d78087
--- /dev/null
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/InvalidAuthorizationMessageException.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.securitytoken.model;
+
+import com.amazonaws.AmazonServiceException;
+
+/**
+ * <p>
+ * The error returned if the message passed to
+ * <code>DecodeAuthorizationMessage</code> was invalid. This can happen if the
+ * token contains invalid characters, such as linebreaks.
+ * </p>
+ */
+public class InvalidAuthorizationMessageException extends AmazonServiceException {
+    private static final long serialVersionUID = 1L;
+
+    /**
+     * Constructs a new InvalidAuthorizationMessageException with the specified
+     * error message.
+     *
+     * @param message Describes the error encountered.
+     */
+    public InvalidAuthorizationMessageException(String message) {
+        super(message);
+    }
+}
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/transform/AssumeRoleWithSAMLRequestMarshaller.java b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/transform/AssumeRoleWithSAMLRequestMarshaller.java
new file mode 100644
index 0000000000..88234fab2c
--- /dev/null
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/transform/AssumeRoleWithSAMLRequestMarshaller.java
@@ -0,0 +1,88 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.securitytoken.model.transform;
+
+import com.amazonaws.AmazonClientException;
+import com.amazonaws.Request;
+import com.amazonaws.DefaultRequest;
+import com.amazonaws.services.securitytoken.model.*;
+import com.amazonaws.transform.Marshaller;
+import com.amazonaws.util.StringUtils;
+
+/**
+ * StAX request marshaller for AssumeRoleWithSAMLRequest
+ */
+public class AssumeRoleWithSAMLRequestMarshaller implements
+        Marshaller<Request<AssumeRoleWithSAMLRequest>, AssumeRoleWithSAMLRequest> {
+
+    public Request<AssumeRoleWithSAMLRequest> marshall(
+            AssumeRoleWithSAMLRequest assumeRoleWithSAMLRequest) {
+        if (assumeRoleWithSAMLRequest == null) {
+            throw new AmazonClientException(
+                    "Invalid argument passed to marshall(AssumeRoleWithSAMLRequest)");
+        }
+
+        Request<AssumeRoleWithSAMLRequest> request = new DefaultRequest<AssumeRoleWithSAMLRequest>(
+                assumeRoleWithSAMLRequest, "AWSSecurityTokenService");
+        request.addParameter("Action", "AssumeRoleWithSAML");
+        request.addParameter("Version", "2011-06-15");
+
+        String prefix;
+        if (assumeRoleWithSAMLRequest.getRoleArn() != null) {
+            prefix = "RoleArn";
+            String roleArn = assumeRoleWithSAMLRequest.getRoleArn();
+            request.addParameter(prefix, StringUtils.fromString(roleArn));
+        }
+        if (assumeRoleWithSAMLRequest.getPrincipalArn() != null) {
+            prefix = "PrincipalArn";
+            String principalArn = assumeRoleWithSAMLRequest.getPrincipalArn();
+            request.addParameter(prefix, StringUtils.fromString(principalArn));
+        }
+        if (assumeRoleWithSAMLRequest.getSAMLAssertion() != null) {
+            prefix = "SAMLAssertion";
+            String sAMLAssertion = assumeRoleWithSAMLRequest.getSAMLAssertion();
+            request.addParameter(prefix, StringUtils.fromString(sAMLAssertion));
+        }
+        if (assumeRoleWithSAMLRequest.getPolicyArns() != null) {
+            prefix = "PolicyArns";
+            java.util.List<PolicyDescriptorType> policyArns = assumeRoleWithSAMLRequest
+                    .getPolicyArns();
+            int policyArnsIndex = 1;
+            String policyArnsPrefix = prefix;
+            for (PolicyDescriptorType policyArnsItem : policyArns) {
+                prefix = policyArnsPrefix + ".member." + policyArnsIndex;
+                if (policyArnsItem != null) {
+                    PolicyDescriptorTypeStaxMarshaller.getInstance().marshall(policyArnsItem,
+                            request, prefix + ".");
+                }
+                policyArnsIndex++;
+            }
+            prefix = policyArnsPrefix;
+        }
+        if (assumeRoleWithSAMLRequest.getPolicy() != null) {
+            prefix = "Policy";
+            String policy = assumeRoleWithSAMLRequest.getPolicy();
+            request.addParameter(prefix, StringUtils.fromString(policy));
+        }
+        if (assumeRoleWithSAMLRequest.getDurationSeconds() != null) {
+            prefix = "DurationSeconds";
+            Integer durationSeconds = assumeRoleWithSAMLRequest.getDurationSeconds();
+            request.addParameter(prefix, StringUtils.fromInteger(durationSeconds));
+        }
+
+        return request;
+    }
+}
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/transform/AssumeRoleWithSAMLResultStaxUnmarshaller.java b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/transform/AssumeRoleWithSAMLResultStaxUnmarshaller.java
new file mode 100644
index 0000000000..e29afda8d7
--- /dev/null
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/transform/AssumeRoleWithSAMLResultStaxUnmarshaller.java
@@ -0,0 +1,106 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.securitytoken.model.transform;
+
+import java.util.Map;
+import java.util.Map.Entry;
+
+import org.xmlpull.v1.XmlPullParser;
+
+import com.amazonaws.services.securitytoken.model.*;
+import com.amazonaws.transform.Unmarshaller;
+import com.amazonaws.transform.MapEntry;
+import com.amazonaws.transform.StaxUnmarshallerContext;
+import com.amazonaws.transform.SimpleTypeStaxUnmarshallers.*;
+
+/**
+ * StAX unmarshaller for response AssumeRoleWithSAMLResult
+ */
+public class AssumeRoleWithSAMLResultStaxUnmarshaller implements
+        Unmarshaller<AssumeRoleWithSAMLResult, StaxUnmarshallerContext> {
+
+    public AssumeRoleWithSAMLResult unmarshall(StaxUnmarshallerContext context) throws Exception {
+        AssumeRoleWithSAMLResult assumeRoleWithSAMLResult = new AssumeRoleWithSAMLResult();
+
+        int originalDepth = context.getCurrentDepth();
+        int targetDepth = originalDepth + 1;
+
+        if (context.isStartOfDocument())
+            targetDepth += 2;
+
+        while (true) {
+            int xmlEvent = context.nextEvent();
+            if (xmlEvent == XmlPullParser.END_DOCUMENT)
+                break;
+
+            if (xmlEvent == XmlPullParser.START_TAG) {
+                if (context.testExpression("Credentials", targetDepth)) {
+                    assumeRoleWithSAMLResult.setCredentials(CredentialsStaxUnmarshaller
+                            .getInstance().unmarshall(context));
+                    continue;
+                }
+                if (context.testExpression("AssumedRoleUser", targetDepth)) {
+                    assumeRoleWithSAMLResult.setAssumedRoleUser(AssumedRoleUserStaxUnmarshaller
+                            .getInstance().unmarshall(context));
+                    continue;
+                }
+                if (context.testExpression("PackedPolicySize", targetDepth)) {
+                    assumeRoleWithSAMLResult.setPackedPolicySize(IntegerStaxUnmarshaller
+                            .getInstance().unmarshall(context));
+                    continue;
+                }
+                if (context.testExpression("Subject", targetDepth)) {
+                    assumeRoleWithSAMLResult.setSubject(StringStaxUnmarshaller.getInstance()
+                            .unmarshall(context));
+                    continue;
+                }
+                if (context.testExpression("SubjectType", targetDepth)) {
+                    assumeRoleWithSAMLResult.setSubjectType(StringStaxUnmarshaller.getInstance()
+                            .unmarshall(context));
+                    continue;
+                }
+                if (context.testExpression("Issuer", targetDepth)) {
+                    assumeRoleWithSAMLResult.setIssuer(StringStaxUnmarshaller.getInstance()
+                            .unmarshall(context));
+                    continue;
+                }
+                if (context.testExpression("Audience", targetDepth)) {
+                    assumeRoleWithSAMLResult.setAudience(StringStaxUnmarshaller.getInstance()
+                            .unmarshall(context));
+                    continue;
+                }
+                if (context.testExpression("NameQualifier", targetDepth)) {
+                    assumeRoleWithSAMLResult.setNameQualifier(StringStaxUnmarshaller.getInstance()
+                            .unmarshall(context));
+                    continue;
+                }
+            } else if (xmlEvent == XmlPullParser.END_TAG) {
+                if (context.getCurrentDepth() < originalDepth) {
+                    break;
+                }
+            }
+        }
+        return assumeRoleWithSAMLResult;
+    }
+
+    private static AssumeRoleWithSAMLResultStaxUnmarshaller instance;
+
+    public static AssumeRoleWithSAMLResultStaxUnmarshaller getInstance() {
+        if (instance == null)
+            instance = new AssumeRoleWithSAMLResultStaxUnmarshaller();
+        return instance;
+    }
+}
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/transform/DecodeAuthorizationMessageRequestMarshaller.java b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/transform/DecodeAuthorizationMessageRequestMarshaller.java
new file mode 100644
index 0000000000..f0696389be
--- /dev/null
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/transform/DecodeAuthorizationMessageRequestMarshaller.java
@@ -0,0 +1,52 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.securitytoken.model.transform;
+
+import com.amazonaws.AmazonClientException;
+import com.amazonaws.Request;
+import com.amazonaws.DefaultRequest;
+import com.amazonaws.services.securitytoken.model.*;
+import com.amazonaws.transform.Marshaller;
+import com.amazonaws.util.StringUtils;
+
+/**
+ * StAX request marshaller for DecodeAuthorizationMessageRequest
+ */
+public class DecodeAuthorizationMessageRequestMarshaller implements
+        Marshaller<Request<DecodeAuthorizationMessageRequest>, DecodeAuthorizationMessageRequest> {
+
+    public Request<DecodeAuthorizationMessageRequest> marshall(
+            DecodeAuthorizationMessageRequest decodeAuthorizationMessageRequest) {
+        if (decodeAuthorizationMessageRequest == null) {
+            throw new AmazonClientException(
+                    "Invalid argument passed to marshall(DecodeAuthorizationMessageRequest)");
+        }
+
+        Request<DecodeAuthorizationMessageRequest> request = new DefaultRequest<DecodeAuthorizationMessageRequest>(
+                decodeAuthorizationMessageRequest, "AWSSecurityTokenService");
+        request.addParameter("Action", "DecodeAuthorizationMessage");
+        request.addParameter("Version", "2011-06-15");
+
+        String prefix;
+        if (decodeAuthorizationMessageRequest.getEncodedMessage() != null) {
+            prefix = "EncodedMessage";
+            String encodedMessage = decodeAuthorizationMessageRequest.getEncodedMessage();
+            request.addParameter(prefix, StringUtils.fromString(encodedMessage));
+        }
+
+        return request;
+    }
+}
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/transform/DecodeAuthorizationMessageResultStaxUnmarshaller.java b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/transform/DecodeAuthorizationMessageResultStaxUnmarshaller.java
new file mode 100644
index 0000000000..52a391d1d9
--- /dev/null
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/transform/DecodeAuthorizationMessageResultStaxUnmarshaller.java
@@ -0,0 +1,72 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.securitytoken.model.transform;
+
+import java.util.Map;
+import java.util.Map.Entry;
+
+import org.xmlpull.v1.XmlPullParser;
+
+import com.amazonaws.services.securitytoken.model.*;
+import com.amazonaws.transform.Unmarshaller;
+import com.amazonaws.transform.MapEntry;
+import com.amazonaws.transform.StaxUnmarshallerContext;
+import com.amazonaws.transform.SimpleTypeStaxUnmarshallers.*;
+
+/**
+ * StAX unmarshaller for response DecodeAuthorizationMessageResult
+ */
+public class DecodeAuthorizationMessageResultStaxUnmarshaller implements
+        Unmarshaller<DecodeAuthorizationMessageResult, StaxUnmarshallerContext> {
+
+    public DecodeAuthorizationMessageResult unmarshall(StaxUnmarshallerContext context)
+            throws Exception {
+        DecodeAuthorizationMessageResult decodeAuthorizationMessageResult = new DecodeAuthorizationMessageResult();
+
+        int originalDepth = context.getCurrentDepth();
+        int targetDepth = originalDepth + 1;
+
+        if (context.isStartOfDocument())
+            targetDepth += 2;
+
+        while (true) {
+            int xmlEvent = context.nextEvent();
+            if (xmlEvent == XmlPullParser.END_DOCUMENT)
+                break;
+
+            if (xmlEvent == XmlPullParser.START_TAG) {
+                if (context.testExpression("DecodedMessage", targetDepth)) {
+                    decodeAuthorizationMessageResult.setDecodedMessage(StringStaxUnmarshaller
+                            .getInstance().unmarshall(context));
+                    continue;
+                }
+            } else if (xmlEvent == XmlPullParser.END_TAG) {
+                if (context.getCurrentDepth() < originalDepth) {
+                    break;
+                }
+            }
+        }
+        return decodeAuthorizationMessageResult;
+    }
+
+    private static DecodeAuthorizationMessageResultStaxUnmarshaller instance;
+
+    public static DecodeAuthorizationMessageResultStaxUnmarshaller getInstance() {
+        if (instance == null)
+            instance = new DecodeAuthorizationMessageResultStaxUnmarshaller();
+        return instance;
+    }
+}
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/transform/InvalidAuthorizationMessageExceptionUnmarshaller.java b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/transform/InvalidAuthorizationMessageExceptionUnmarshaller.java
new file mode 100644
index 0000000000..a0676b7ea5
--- /dev/null
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/services/securitytoken/model/transform/InvalidAuthorizationMessageExceptionUnmarshaller.java
@@ -0,0 +1,44 @@
+/*
+ * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *  http://aws.amazon.com/apache2.0
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+package com.amazonaws.services.securitytoken.model.transform;
+
+import org.w3c.dom.Node;
+
+import com.amazonaws.AmazonServiceException;
+import com.amazonaws.util.XpathUtils;
+import com.amazonaws.transform.StandardErrorUnmarshaller;
+
+import com.amazonaws.services.securitytoken.model.InvalidAuthorizationMessageException;
+
+public class InvalidAuthorizationMessageExceptionUnmarshaller extends StandardErrorUnmarshaller {
+
+    public InvalidAuthorizationMessageExceptionUnmarshaller() {
+        super(InvalidAuthorizationMessageException.class);
+    }
+
+    public AmazonServiceException unmarshall(Node node) throws Exception {
+        // Bail out if this isn't the right error code that this
+        // marshaller understands.
+        String errorCode = parseErrorCode(node);
+        if (errorCode == null || !errorCode.equals("InvalidAuthorizationMessageException"))
+            return null;
+
+        InvalidAuthorizationMessageException e = (InvalidAuthorizationMessageException) super
+                .unmarshall(node);
+
+        return e;
+    }
+}
