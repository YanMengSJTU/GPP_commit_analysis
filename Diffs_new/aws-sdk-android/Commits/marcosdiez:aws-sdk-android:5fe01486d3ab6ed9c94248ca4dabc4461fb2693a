diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/auth/AWS4Signer.java b/aws-android-sdk-core/src/main/java/com/amazonaws/auth/AWS4Signer.java
index 0acf28fb10..38bcae7a31 100644
--- a/aws-android-sdk-core/src/main/java/com/amazonaws/auth/AWS4Signer.java
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/auth/AWS4Signer.java
@@ -87,6 +87,14 @@ public AWS4Signer(boolean doubleUrlEncoding) {
         this.doubleUrlEncode = doubleUrlEncoding;
     }
 
+    private Date mDate=null;
+    public AWS4Signer(boolean doubleUrlEncoding, Date mDate) {
+        this.doubleUrlEncode = doubleUrlEncoding;
+        this.mDate = mDate;
+    }
+
+
+
     protected static final Log log = LogFactory.getLog(AWS4Signer.class);
 
     @Override
@@ -322,7 +330,7 @@ protected final String getDateStamp(long dateMilli) {
 
     protected final long getDateFromRequest(Request<?> request) {
         int timeOffset = getTimeOffset(request);
-        Date date = getSignatureDate(timeOffset);
+        Date date = getSignatureDate(timeOffset, mDate);
         if (overriddenDate != null)
             date = overriddenDate;
         return date.getTime();
diff --git a/aws-android-sdk-core/src/main/java/com/amazonaws/auth/AbstractAWSSigner.java b/aws-android-sdk-core/src/main/java/com/amazonaws/auth/AbstractAWSSigner.java
index d1c514d2b1..defcd471b5 100644
--- a/aws-android-sdk-core/src/main/java/com/amazonaws/auth/AbstractAWSSigner.java
+++ b/aws-android-sdk-core/src/main/java/com/amazonaws/auth/AbstractAWSSigner.java
@@ -386,8 +386,13 @@ protected String newString(byte[] bytes) {
         return new String(bytes, UTF8);
     }
 
+
     protected Date getSignatureDate(int timeOffset) {
-        Date dateValue = new Date();
+        return getSignatureDate(timeOffset, null);
+    }
+
+    protected Date getSignatureDate(int timeOffset, Date mDate) {
+        Date dateValue = mDate != null ? mDate : new Date();
         if (timeOffset != 0) {
             long epochMillis = dateValue.getTime();
             epochMillis -= timeOffset * 1000;
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3Client.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3Client.java
index 3c1c24f0ec..786bcb529d 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3Client.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/AmazonS3Client.java
@@ -266,6 +266,8 @@
     /** Whether or not this client has an explicit region configured. */
     private boolean hasExplicitRegion;
 
+    private Date mDate = null;
+
     /**
      * Constructs a new client to invoke service methods on Amazon S3. A
      * credentials provider chain will be used that searches for credentials in
@@ -320,9 +322,19 @@ public AmazonS3Client() {
      * @see AmazonS3Client#AmazonS3Client()
      * @see AmazonS3Client#AmazonS3Client(AWSCredentials, ClientConfiguration)
      */
-    public AmazonS3Client(AWSCredentials awsCredentials) {
-        this(awsCredentials, new ClientConfiguration());
-    }
+     public AmazonS3Client(AWSCredentials awsCredentials)
+     {
+         this(awsCredentials, new ClientConfiguration());
+     }
+
+
+     public AmazonS3Client(AWSCredentials awsCredentials, Date date)
+     {
+         this(awsCredentials, new ClientConfiguration());
+         this.mDate = date;
+     }
+
+
 
     /**
      * Constructs a new Amazon S3 client using the specified AWS credentials and
@@ -3583,7 +3595,7 @@ protected Signer createSigner(final Request<?> request,
 
         if (upgradeToSigV4() && !(signer instanceof AWSS3V4Signer)) {
 
-            AWSS3V4Signer v4Signer = new AWSS3V4Signer();
+            AWSS3V4Signer v4Signer = new AWSS3V4Signer(mDate);
 
             // Always set the service name; if the user has overridden it via
             // setEndpoint(String, String, String), this will return the right
@@ -3627,7 +3639,7 @@ protected Signer createSigner(final Request<?> request,
                             ((key != null) ? key : "");
 
             return new S3Signer(request.getHttpMethod().toString(),
-                    resourcePath);
+                    resourcePath, this.mDate);
         }
 
         return signer;
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/AWSS3V4Signer.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/AWSS3V4Signer.java
index bd0d056f14..bd1433b86b 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/AWSS3V4Signer.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/AWSS3V4Signer.java
@@ -26,6 +26,7 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.util.Date;
 
 /**
  * AWS4 signer implementation for AWS S3
@@ -37,8 +38,8 @@
      * Don't double-url-encode path elements; S3 expects path elements to be
      * encoded only once in the canonical URI.
      */
-    public AWSS3V4Signer() {
-        super(false);
+    public AWSS3V4Signer(Date mDate) {
+        super(false, mDate);
     }
 
     /**
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3Signer.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3Signer.java
index 783f37cbae..71aac7cd72 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3Signer.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/services/s3/internal/S3Signer.java
@@ -55,6 +55,8 @@
      */
     private final String resourcePath;
 
+    private Date mDate = null;
+
     /**
      * Create a dummy instance of the S3Signer.
      */
@@ -72,9 +74,10 @@ public S3Signer() {
      * @param resourcePath The canonical S3 resource path (ex: "/",
      *            "/<bucket name>/", or "/<bucket name>/<key>".
      */
-    public S3Signer(String httpVerb, String resourcePath) {
+    public S3Signer(String httpVerb, String resourcePath, Date mDate) {
         this.httpVerb = httpVerb;
         this.resourcePath = resourcePath;
+        this.mDate = mDate;
 
         if (resourcePath == null)
             throw new IllegalArgumentException("Parameter resourcePath is empty");
@@ -110,7 +113,7 @@ public void sign(Request<?> request, AWSCredentials credentials) {
                 resourcePath, true);
 
         int timeOffset = getTimeOffset(request);
-        Date date = getSignatureDate(timeOffset);
+        Date date = getSignatureDate(timeOffset, mDate);
         request.addHeader(Headers.DATE, ServiceUtils.formatRfc822Date(date));
         String canonicalString = RestUtils.makeS3CanonicalString(
                 httpVerb, encodedResourcePath, request, null);
