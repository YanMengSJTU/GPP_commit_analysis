diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java
index bc726d2936..c19240dad8 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferRecord.java
@@ -171,6 +171,13 @@ public boolean start(AmazonS3 s3, TransferDBUtil dbUtil, TransferStatusUpdater u
             }
             return true;
         }
+        /*
+         * @Anchorer
+         * if transfer is already completed when trying to start, we should update state and trigger a callback
+         */
+        if (TransferState.COMPLETED.equals(state)) {
+            updater.updateState(id, TransferState.COMPLETED);
+        }
         return false;
     }
 
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
index baaf2a2171..6036367272 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/TransferService.java
@@ -319,6 +319,11 @@ void execCommand(Intent intent) {
                 transfer = dbUtil.getTransferById(id);
                 if (transfer != null) {
                     updater.addTransfer(transfer);
+                    /*
+                     * @Anchorer
+                     * while resuming a transfer, if the transfer is null, create a new one, and trigger a state callback instantly. (for UI display)
+                     */
+                    updater.updateState(id, transfer.state);
                 } else {
                     LOGGER.error("Can't find transfer: " + id);
                 }
diff --git a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java
index 676bb2052d..853de34713 100644
--- a/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java
+++ b/aws-android-sdk-s3/src/main/java/com/amazonaws/mobileconnectors/s3/transferutility/UploadTask.java
@@ -105,7 +105,14 @@ private Boolean uploadMultipartAndWaitForCompletion() throws ExecutionException
                 LOGGER.error("Error initiating multipart upload: " + upload.id
                         + " due to " + ace.getMessage(), ace);
                 updater.throwError(upload.id, ace);
-                updater.updateState(upload.id, TransferState.FAILED);
+
+                /*
+                 * @Anchorer
+                 * While initiating Multi-part upload, if the task is already paused by user, the task should not be set to FAILED.
+                 */
+                if (!TransferState.PAUSED.equals(upload.state)) {
+                    updater.updateState(upload.id, TransferState.FAILED);
+                }
                 return false;
             }
             dbUtil.updateMultipartId(upload.id, upload.multipartId);
@@ -183,7 +190,14 @@ private Boolean uploadMultipartAndWaitForCompletion() throws ExecutionException
                 }
                 updater.throwError(upload.id, e);
             }
-            updater.updateState(upload.id, TransferState.FAILED);
+
+            /*
+             * @Anchorer
+             * If the task is already paused by user, it should not be set to FAILED state.
+             */
+            if (!TransferState.PAUSED.equals(upload.state)) {
+                updater.updateState(upload.id, TransferState.FAILED);
+            }
             return false;
         }
 
@@ -197,7 +211,14 @@ private Boolean uploadMultipartAndWaitForCompletion() throws ExecutionException
             LOGGER.error("Failed to complete multipart: " + upload.id
                     + " due to " + ace.getMessage(), ace);
             updater.throwError(upload.id, ace);
-            updater.updateState(upload.id, TransferState.FAILED);
+
+            /*
+             * @Anchorer
+             * If the task is already paused by user, it should not be set to FAILED state.
+             */
+            if (!TransferState.PAUSED.equals(upload.state)) {
+                updater.updateState(upload.id, TransferState.FAILED);
+            }
             return false;
         }
     }
@@ -237,7 +258,14 @@ private Boolean uploadSinglePartAndWaitForCompletion() {
             // all other exceptions
             LOGGER.debug("Failed to upload: " + upload.id + " due to " + e.getMessage(), e);
             updater.throwError(upload.id, e);
-            updater.updateState(upload.id, TransferState.FAILED);
+
+            /*
+             * @Anchorer
+             * If the task is already paused by user, it should not be set to FAILED state.
+             */
+            if (!TransferState.PAUSED.equals(upload.state)) {
+                updater.updateState(upload.id, TransferState.FAILED);
+            }
             return false;
         }
     }
