diff --git a/aws-java-sdk-mobile-client/pom.xml b/aws-java-sdk-mobile-client/pom.xml
index 980d2eee5b..240983b5ef 100644
--- a/aws-java-sdk-mobile-client/pom.xml
+++ b/aws-java-sdk-mobile-client/pom.xml
@@ -31,7 +31,6 @@
       <artifactId>aws-java-sdk-auth-core</artifactId>
       <optional>false</optional>
       <version>2.6.19</version>
-      <type>aar</type>
     </dependency>
 <!--
     <dependency>
@@ -75,34 +74,21 @@
     </dependency>-->
 
     <dependency>
-      <groupId>com.android.support</groupId>
-      <artifactId>support-v4</artifactId>
+      <groupId>com.amazonaws</groupId>
+      <artifactId>aws-java-sdk-core</artifactId>
       <optional>true</optional>
-      <version>23.0.1</version>
-      <type>aar</type>
+      <version>2.6.19</version>
     </dependency>
 
     <dependency>
-      <groupId>com.google.android</groupId>
-      <artifactId>android</artifactId>
-      <version>4.1.1.4</version>
-      <scope>provided</scope>
+        <groupId>org.json</groupId>
+        <artifactId>json</artifactId>
+        <version>20180130</version>
     </dependency>
   </dependencies>
 
   <build>
     <plugins>
-      <plugin>
-        <groupId>com.simpligility.maven.plugins</groupId>
-        <artifactId>android-maven-plugin</artifactId>
-        <version>4.5.0</version>
-        <extensions>true</extensions>
-        <configuration>
-          <sdk>
-            <platform>25</platform>
-          </sdk>
-        </configuration>
-      </plugin>
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-compiler-plugin</artifactId>
diff --git a/aws-java-sdk-mobile-client/src/main/java/com/amazonaws/mobile/client/AWSMobileClient.java b/aws-java-sdk-mobile-client/src/main/java/com/amazonaws/mobile/client/AWSMobileClient.java
index 4ecb495052..d0cf03fd89 100644
--- a/aws-java-sdk-mobile-client/src/main/java/com/amazonaws/mobile/client/AWSMobileClient.java
+++ b/aws-java-sdk-mobile-client/src/main/java/com/amazonaws/mobile/client/AWSMobileClient.java
@@ -17,34 +17,22 @@
 
 package com.amazonaws.mobile.client;
 
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.util.Log;
-
-import com.amazonaws.ClientConfiguration;
 import com.amazonaws.auth.AWSCredentialsProvider;
-import com.amazonaws.mobile.auth.core.DefaultSignInResultHandler;
 import com.amazonaws.mobile.auth.core.signin.SignInProvider;
-import com.amazonaws.mobile.auth.facebook.FacebookButton;
-import com.amazonaws.mobile.auth.facebook.FacebookSignInProvider;
-import com.amazonaws.mobile.auth.google.GoogleButton;
-import com.amazonaws.mobile.auth.google.GoogleSignInProvider;
-import com.amazonaws.mobile.auth.userpools.CognitoUserPoolsSignInProvider;;
+//import com.amazonaws.mobile.auth.facebook.FacebookButton;
+//import com.amazonaws.mobile.auth.facebook.FacebookSignInProvider;
+//import com.amazonaws.mobile.auth.google.GoogleButton;
+//import com.amazonaws.mobile.auth.google.GoogleSignInProvider;
+//import com.amazonaws.mobile.auth.userpools.CognitoUserPoolsSignInProvider;;
 import com.amazonaws.mobile.config.AWSConfiguration;
 import com.amazonaws.mobile.config.AWSConfigurable;
 
 import com.amazonaws.mobile.auth.core.IdentityManager;
 import com.amazonaws.mobile.auth.core.StartupAuthResult;
 import com.amazonaws.mobile.auth.core.StartupAuthResultHandler;
-import com.amazonaws.mobile.auth.core.IdentityProvider;
-import com.amazonaws.mobile.auth.core.StartupAuthErrorDetails;
-import com.amazonaws.mobile.auth.core.signin.AuthException;
-import com.amazonaws.mobile.auth.ui.SignInActivity;
-
-import java.lang.reflect.Constructor;
-import java.lang.reflect.InvocationTargetException;
 import java.util.LinkedHashMap;
+import java.util.logging.Level;
+import java.util.logging.Logger;
 
 import org.json.JSONObject;
 
@@ -54,13 +42,13 @@
  * creates other SDK client instances.
  * 
  * <pre>
- *  To initialize the SDK, invoke the {@link #initialize(Context)}
+ *  To initialize the SDK, invoke the {@link #initialize()}
  *  method:
  * 
  *  AWSMobileClient.getInstance().initialize(this);
  * 
  *  To get a callback when the initalize is successful, invoke the
- *  {@link #initialize(Context, AWSStartupHandler)} method.
+ *  {@link #initialize(AWSStartupHandler)} method.
  * 
  *  AWSMobileClient.getInstance().initalize(this, new AWSStartupHandler() {
  *      @Override
@@ -73,8 +61,7 @@
  */
 public final class AWSMobileClient {
 
-    /** Log Tag. */
-    private static final String LOG_TAG = AWSMobileClient.class.getSimpleName();
+    private static final Logger LOG = Logger.getLogger(AWSMobileClient.class.getName());
 
     /** Map of SDK Client Class and object. */
     private final LinkedHashMap<Class<? extends AWSConfigurable>, AWSConfigurable> clientMap;
@@ -128,17 +115,17 @@ private AWSMobileClient() {
      * to AWS including fetching the Cognito Identity for
      * the user.
      * 
-     * @param context The activity context.
+     * @return 
      */
-    public InitializeBuilder initialize(final Context context) {
+    public InitializeBuilder initialize() {
         this.awsStartupHandler = new AWSStartupHandler() {
             @Override
             public void onComplete(final AWSStartupResult awsStartupResult) {
-                 Log.d(LOG_TAG, "AWSMobileClient Initialize succeeded.");
-                 Log.i(LOG_TAG, "Welcome to AWS! You are connected successfully.");
+                 LOG.log(Level.FINE, "AWSMobileClient Initialize succeeded.");
+                 LOG.log(Level.INFO, "Welcome to AWS! You are connected successfully.");
             }
         };
-        return initialize(context, this.awsStartupHandler);
+        return initialize(this.awsStartupHandler);
     }
 
 
@@ -147,26 +134,25 @@ public void onComplete(final AWSStartupResult awsStartupResult) {
      * to AWS including fetching the Cognito Identity for
      * the user.
      * 
-     * @param context The activity context.
      * @param awsStartupHandler The result for Initialize callback.
+     * @return 
      */
-    public InitializeBuilder initialize(final Context context,
-                                        final AWSStartupHandler awsStartupHandler) {
-        this.awsConfiguration = new AWSConfiguration(context.getApplicationContext());
+    public InitializeBuilder initialize(final AWSStartupHandler awsStartupHandler) {
+        this.awsConfiguration = new AWSConfiguration();
         this.signInProviderConfig = null;
         this.startupAuthResultHandler = new StartupAuthResultHandler() {
             @Override
             public void onComplete(final StartupAuthResult startupAuthResult) {
-                Log.i(LOG_TAG, "Welcome to AWS! You are connected successfully.");
+                LOG.log(Level.INFO, "Welcome to AWS! You are connected successfully.");
                 if (startupAuthResult.isIdentityIdAvailable()) {
-                    Log.i(LOG_TAG, "Identity ID retrieved.");
+                    LOG.log(Level.INFO, "Identity ID retrieved.");
                 }
                 awsStartupHandler.onComplete(
                     new AWSStartupResult(IdentityManager.getDefaultIdentityManager()));
             }
         };
         this.awsStartupHandler = awsStartupHandler;
-        return new InitializeBuilder(context);
+        return new InitializeBuilder();
     }
 
     /**
@@ -183,9 +169,9 @@ private void initializeWithBuilder(final InitializeBuilder initializeBuilder) {
         }
 
         try {
-            fetchCognitoIdentity(initializeBuilder.getContext(), this.startupAuthResultHandler);
+            fetchCognitoIdentity(this.startupAuthResultHandler);
         } catch (final Exception exception) {
-            Log.e(LOG_TAG, "Error in initializing the AWSMobileClient. " +
+            LOG.log(Level.WARNING, "Error in initializing the AWSMobileClient. " +
                             "Check if AWS Cloud Config `awsconfiguration.json` is present in the application.");
         }
     }
@@ -194,24 +180,23 @@ private void initializeWithBuilder(final InitializeBuilder initializeBuilder) {
      * Get the AWSConfigurable client if exists, else create one and
      * add it to the clientMap and return.
      *
-     * @param context       The activity context
      * @param clientClass   SDK Client Class that confirms to the AWSConfigurable interface.
+     * @return 
      */
-    public AWSConfigurable getClient(final Context context,
-                                     final Class<? extends AWSConfigurable> clientClass) {
+    public AWSConfigurable getClient(final Class<? extends AWSConfigurable> clientClass) {
 
-        Log.d(LOG_TAG, "Retrieving the client instance for class: " + clientClass);
+        LOG.log(Level.FINE, "Retrieving the client instance for class: " + clientClass);
 
         AWSConfigurable client = clientMap.get(clientClass);
 
         try {
             if (client == null) {
-                client = clientClass.newInstance().initialize(context.getApplicationContext(), this.awsConfiguration);
+                client = clientClass.newInstance().initialize(this.awsConfiguration);
                 clientMap.put(clientClass, client);
-                Log.d(LOG_TAG, "Created the new client: " + client.toString());
+                LOG.log(Level.FINE, "Created the new client: " + client.toString());
             }
         } catch (final Exception exception) {
-            Log.e(LOG_TAG, "Error occurred in creating and initializing client. "
+            LOG.log(Level.WARNING, "Error occurred in creating and initializing client. "
                     + "Check the context and the clientClass passed in: " + clientClass, exception);
         }
 
@@ -251,7 +236,6 @@ public AWSConfiguration getConfiguration() {
     /**
      * Gets the singleton instance of this class.
      * 
-     * @param context The activity context in the app
      * @return singleton instance
      */
     public static synchronized AWSMobileClient getInstance() {
@@ -271,22 +255,21 @@ public static synchronized AWSMobileClient getInstance() {
      * @param context                  The activity context
      * @param startupAuthResultHandler The callback function for resuming session
      */
-    private void fetchCognitoIdentity(final Context context,
-                                      final StartupAuthResultHandler startupAuthResultHandler) {
+    private void fetchCognitoIdentity(final StartupAuthResultHandler startupAuthResultHandler) {
         try {
-            Log.d(LOG_TAG, "Fetching the Cognito Identity.");
+            LOG.log(Level.FINE, "Fetching the Cognito Identity.");
             
             // Create IdentityManager, register the providers and set the permissions.
-            final IdentityManager identityManager = new IdentityManager(context, this.awsConfiguration);
+            final IdentityManager identityManager = new IdentityManager(this.awsConfiguration);
             IdentityManager.setDefaultIdentityManager(identityManager);
             if (this.signInProviderConfig == null) {
                 this.registerConfigSignInProviders();
             } else {
                 this.registerUserSignInProvidersWithPermissions();
             }
-            this.resumeSession((Activity) context, startupAuthResultHandler);
+            this.resumeSession(startupAuthResultHandler);
         } catch (final Exception exception) {
-            Log.e(LOG_TAG, "Error occurred in fetching the Cognito Identity "
+            LOG.log(Level.WARNING, "Error occurred in fetching the Cognito Identity "
                     + "and resuming the auth session", exception);
         }
     }
@@ -296,18 +279,20 @@ private void fetchCognitoIdentity(final Context context,
      * supplied by the user.
      */
     private void registerUserSignInProvidersWithPermissions() {
-        Log.d(LOG_TAG, "Using the SignInProviderConfig supplied by the user.");
+        LOG.log(Level.FINE, "Using the SignInProviderConfig supplied by the user.");
         final IdentityManager identityManager = IdentityManager.getDefaultIdentityManager();
 
         for (final SignInProviderConfig config : signInProviderConfig) {
             identityManager.addSignInProvider(config.getSignInProviderClass());
             if (config.getProviderPermissions() != null) {
-                if (FacebookSignInProvider.class.isInstance(config.getSignInProviderClass())) {
-                    FacebookSignInProvider.setPermissions(config.getProviderPermissions());
-                }
-                if (GoogleSignInProvider.class.isInstance(config.getSignInProviderClass())) {
-                    GoogleSignInProvider.setPermissions(config.getProviderPermissions());
-                }
+                // TODO: 
+                throw new UnsupportedOperationException("Not supported yet.");
+//                if (FacebookSignInProvider.class.isInstance(config.getSignInProviderClass())) {
+//                    FacebookSignInProvider.setPermissions(config.getProviderPermissions());
+//                }
+//                if (GoogleSignInProvider.class.isInstance(config.getSignInProviderClass())) {
+//                    GoogleSignInProvider.setPermissions(config.getProviderPermissions());
+//                }
             }
         }
     }
@@ -317,19 +302,25 @@ private void registerUserSignInProvidersWithPermissions() {
      * AWSConfiguration.
      */
     private void registerConfigSignInProviders() {
-        Log.d(LOG_TAG, "Using the SignInProviderConfig from `awsconfiguration.json`.");
+        LOG.log(Level.FINE, "Using the SignInProviderConfig from `awsconfiguration.json`.");
         final IdentityManager identityManager = IdentityManager.getDefaultIdentityManager();
 
         if (isConfigurationKeyPresent(USER_POOLS)) {
-            identityManager.addSignInProvider(CognitoUserPoolsSignInProvider.class);
+            // TODO: 
+            throw new UnsupportedOperationException("Not supported yet.");
+//            identityManager.addSignInProvider(CognitoUserPoolsSignInProvider.class);
         }
 
         if (isConfigurationKeyPresent(FACEBOOK)) {
-            identityManager.addSignInProvider(FacebookSignInProvider.class);
+            // TODO: 
+            throw new UnsupportedOperationException("Not supported yet.");
+//            identityManager.addSignInProvider(FacebookSignInProvider.class);
         }
 
         if (isConfigurationKeyPresent(GOOGLE)) {
-            identityManager.addSignInProvider(GoogleSignInProvider.class);
+            // TODO: 
+            throw new UnsupportedOperationException("Not supported yet.");
+//            identityManager.addSignInProvider(GoogleSignInProvider.class);
         }
     }
 
@@ -347,21 +338,19 @@ private boolean isConfigurationKeyPresent(final String configurationKey) {
                 return jsonObject != null;
             }
         } catch (final Exception exception) {
-            Log.d(LOG_TAG, configurationKey + " not found in `awsconfiguration.json`");
+            LOG.log(Level.FINE, configurationKey + " not found in `awsconfiguration.json`");
             return false;
         }
     }
     /**
      * Resume any previusly signed-in session.
      * 
-     * @param callingActivity          The activity context in the app
      * @param startupAuthResultHandler The Callback function for resuming an auth session
      */
-    private void resumeSession(final Activity callingActivity,
-                               final StartupAuthResultHandler startupAuthResultHandler) {
+    private void resumeSession(final StartupAuthResultHandler startupAuthResultHandler) {
         IdentityManager
             .getDefaultIdentityManager()
-            .resumeSession(callingActivity, startupAuthResultHandler);
+            .resumeSession(startupAuthResultHandler);
     }
 
     /**
@@ -371,7 +360,6 @@ private void resumeSession(final Activity callingActivity,
      */
     public class InitializeBuilder {
 
-        private Context context;
         private AWSConfiguration awsConfiguration;
         private SignInProviderConfig[] signInProviderConfig;
 
@@ -379,18 +367,6 @@ private void resumeSession(final Activity callingActivity,
          * Constructor that intializes the InitializeBuilder
          */
         public InitializeBuilder() {
-            this.context = null;
-            this.awsConfiguration = null;
-            this.signInProviderConfig = null;
-        }
-
-        /**
-         * Constructor that intializes the InitializeBuilder
-         * with the context passed in.
-         * @param context The context object passed in
-         */
-        public InitializeBuilder(final Context context) {
-            this.context = context;
             this.awsConfiguration = null;
             this.signInProviderConfig = null;
         }
@@ -431,14 +407,6 @@ public AWSConfiguration getAwsConfiguration() {
             return this.signInProviderConfig;
         }
 
-        /**
-         * Retrieve the context.
-         * @return context
-         */
-        public Context getContext() {
-            return this.context;
-        }
-
         /**
          * Initialize the {@link AWSMobileClient} with the parameters passed in. 
          */
