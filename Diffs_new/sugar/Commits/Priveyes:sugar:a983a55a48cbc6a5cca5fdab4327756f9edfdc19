diff --git a/build.gradle b/build.gradle
index a253d6d3..de03b599 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,5 +1,5 @@
-apply plugin: 'jacoco'
-apply plugin: 'com.github.kt3k.coveralls'
+//apply plugin: 'jacoco'
+//apply plugin: 'com.github.kt3k.coveralls'
 apply plugin: 'java'
 buildscript {
     repositories {
@@ -11,90 +11,90 @@ buildscript {
         classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
     }
 }
-def isReleaseBuild() {
-    return version.contains("SNAPSHOT") == false
-}
-test {
-    testLogging {
-        exceptionFormat = 'full'
-    }
-}
+//def isReleaseBuild() {
+//    return version.contains("SNAPSHOT") == false
+//}
+//test {
+//    testLogging {
+//        exceptionFormat = 'full'
+//    }
+//}
 allprojects {
-    version = VERSION_NAME
-    group = GROUP
+//    version = VERSION_NAME
+//    group = GROUP
 
     repositories {
         google()
-        mavenLocal()
+//        mavenLocal()
         mavenCentral()
-        jcenter()
-    }
-}
-subprojects { proj ->
-    apply plugin: 'jacoco'
-
-    jacoco {
-        version "0.7.1.201405082137"
-    }
-
-    task jacocoTestReport(type: JacocoReport) {
-        group = "Reporting"
-        description = "Generate Jacoco coverage reports after running tests."
-        reports {
-            xml.enabled = true
-            html.enabled = true
-        }
-        classDirectories = fileTree(
-                dir: 'build/intermediates/classes/debug',
-                excludes: ['**/R*.class',
-                           '**/BuildConfig*'])
-        sourceDirectories = files('src/main/java')
-        executionData = files('build/jacoco/testDebugUnitTest.exec')
-        doFirst {
-            files('build/intermediates/classes/debug').getFiles().each { file ->
-                if (file.name.contains('$$')) {
-                    file.renameTo(file.path.replace('$$', '$'))
-                }
-            }
-        }
-    }
-}
-jacoco {
-    toolVersion "0.7.1.201405082137"
-}
-task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
-    group = "Reporting"
-    description = 'Generates an aggregate report from all subprojects'
-    dependsOn(subprojects.jacocoTestReport)
-
-    additionalSourceDirs = files('library/src/main/java')
-    sourceDirectories = files('library/src/main/java')
-    classDirectories = files('library/build/intermediates/classes/debug')
-    executionData = files(subprojects.jacocoTestReport.executionData)
-
-    reports {
-        html.enabled = true
-        xml.enabled = true
-    }
-
-    onlyIf = {
-        true
+//        jcenter()
     }
-
-    doFirst {
-        executionData = files(executionData.findAll { it.exists() })
-    }
-}
-coveralls {
-    sourceDirs = files('library/src/main/java').flatten()
-    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
-}
-tasks.coveralls {
-    group = 'Coverage reports'
-    description = 'Uploads the aggregated coverage report to Coveralls'
-
-    dependsOn jacocoRootReport
-    onlyIf { System.env.'CI' }
 }
+//subprojects { proj ->
+//    apply plugin: 'jacoco'
+//
+//    jacoco {
+//        version "0.7.1.201405082137"
+//    }
+//
+//    task jacocoTestReport(type: JacocoReport) {
+//        group = "Reporting"
+//        description = "Generate Jacoco coverage reports after running tests."
+//        reports {
+//            xml.enabled = true
+//            html.enabled = true
+//        }
+//        classDirectories = fileTree(
+//                dir: 'build/intermediates/classes/debug',
+//                excludes: ['**/R*.class',
+//                           '**/BuildConfig*'])
+//        sourceDirectories = files('src/main/java')
+//        executionData = files('build/jacoco/testDebugUnitTest.exec')
+//        doFirst {
+//            files('build/intermediates/classes/debug').getFiles().each { file ->
+//                if (file.name.contains('$$')) {
+//                    file.renameTo(file.path.replace('$$', '$'))
+//                }
+//            }
+//        }
+//    }
+//}
+//jacoco {
+//    toolVersion "0.7.1.201405082137"
+//}
+//task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
+//    group = "Reporting"
+//    description = 'Generates an aggregate report from all subprojects'
+//    dependsOn(subprojects.jacocoTestReport)
+//
+//    additionalSourceDirs = files('library/src/main/java')
+//    sourceDirectories = files('library/src/main/java')
+//    classDirectories = files('library/build/intermediates/classes/debug')
+//    executionData = files(subprojects.jacocoTestReport.executionData)
+//
+//    reports {
+//        html.enabled = true
+//        xml.enabled = true
+//    }
+//
+//    onlyIf = {
+//        true
+//    }
+//
+//    doFirst {
+//        executionData = files(executionData.findAll { it.exists() })
+//    }
+//}
+//coveralls {
+//    sourceDirs = files('library/src/main/java').flatten()
+//    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
+//}
+//tasks.coveralls {
+//    group = 'Coverage reports'
+//    description = 'Uploads the aggregated coverage report to Coveralls'
+//
+//    dependsOn jacocoRootReport
+//    onlyIf { System.env.'CI' }
+//}
 dependencies {
 }
\ No newline at end of file
diff --git a/library/build.gradle b/library/build.gradle
index 17289e82..7666a1fa 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -1,9 +1,9 @@
 apply plugin: 'com.android.library'
-apply from: '../maven_push.gradle'
+//apply from: '../maven_push.gradle'
 
 android {
     compileSdkVersion 28
-    buildToolsVersion "28.0.3"
+    buildToolsVersion '29.0.0 rc2'
 
     defaultConfig {
         minSdkVersion 14
@@ -14,9 +14,9 @@ android {
             minifyEnabled false
         }
     }
-    testOptions {
-        unitTests.returnDefaultValues = true
-    }
+//    testOptions {
+//        unitTests.returnDefaultValues = true
+//    }
     lintOptions {
         abortOnError false
     }
@@ -27,8 +27,8 @@ android {
 }
 
 dependencies {
-    testImplementation 'junit:junit:4.12'
-    testImplementation 'org.robolectric:robolectric:3.0'
+    //    testImplementation 'junit:junit:4.12'
+    //    testImplementation 'org.robolectric:robolectric:3.0'
 }
 
 //task libraryJar(type: Jar) {
diff --git a/library/src/main/java/com/orm/SugarRecord.java b/library/src/main/java/com/orm/SugarRecord.java
index e7ebc71d..e618e381 100644
--- a/library/src/main/java/com/orm/SugarRecord.java
+++ b/library/src/main/java/com/orm/SugarRecord.java
@@ -1,25 +1,21 @@
 package com.orm;
 
-import android.content.ContentValues;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteException;
-import android.database.sqlite.SQLiteStatement;
-import android.text.TextUtils;
-import android.util.Log;
-import com.orm.annotation.Table;
-import com.orm.annotation.Unique;
-import com.orm.helper.ManifestHelper;
-import com.orm.helper.NamingHelper;
-import com.orm.inflater.EntityInflater;
-import com.orm.util.QueryBuilder;
-import com.orm.util.ReflectionUtil;
-import com.orm.util.SugarCursor;
-
-import java.lang.reflect.Field;
+import android.annotation.*;
+import android.content.*;
+import android.database.*;
+import android.database.sqlite.*;
+import android.text.*;
+import android.util.*;
+
+import com.orm.annotation.*;
+import com.orm.helper.*;
+import com.orm.inflater.*;
+import com.orm.util.*;
+
+import java.lang.reflect.*;
 import java.util.*;
 
-import static com.orm.SugarContext.getSugarContext;
+import static com.orm.SugarContext.*;
 
 public class SugarRecord {
     public static final String SUGAR = "Sugar";
@@ -321,6 +317,16 @@ static long save(SQLiteDatabase db, Object object) {
         ContentValues values = new ContentValues(columns.size());
         Field idField = null;
         for (Field column : columns) {
+            if (column.isAnnotationPresent(Follow.class)) {
+                Log.w("sugarNested Follow", column.getType().getName());
+                // Recursive idea
+                // https://github.com/iweinzierl/sugar/commit/274a572bdb9a5775bb7686f45098d4e94d6f6fb1
+                try {
+                    save(column.get(object)/*Class.forName(column.getType().getName())*/);
+                } catch (@SuppressLint("NewApi") IllegalAccessException e) {
+                    e.printStackTrace();
+                }
+            }
             ReflectionUtil.addFieldValueToColumn(values, column, object, entitiesMap);
             if (column.getName().equals("id")) {
                 idField = column;
diff --git a/library/src/main/java/com/orm/annotation/Follow.java b/library/src/main/java/com/orm/annotation/Follow.java
new file mode 100644
index 00000000..e2686c9b
--- /dev/null
+++ b/library/src/main/java/com/orm/annotation/Follow.java
@@ -0,0 +1,8 @@
+package com.orm.annotation;
+
+import java.lang.annotation.*;
+
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface Follow {
+}
\ No newline at end of file
