diff --git a/README.md b/README.md
index 98db9394..a378cfd6 100644
--- a/README.md
+++ b/README.md
@@ -1,6 +1,8 @@
-# Sugar ORM [![Build Status](https://travis-ci.org/satyan/sugar.svg?branch=master)](https://travis-ci.org/satyan/sugar) [![Coverage Status](https://coveralls.io/repos/satyan/sugar/badge.svg?branch=master)](https://coveralls.io/r/satyan/sugar?branch=master)
+# Brown Sugar ORM (Sugar + SQLCipher) [![Build Status](https://travis-ci.org/satyan/sugar.svg?branch=master)](https://travis-ci.org/satyan/sugar) [![Coverage Status](https://coveralls.io/repos/satyan/sugar/badge.svg?branch=master)](https://coveralls.io/r/satyan/sugar?branch=master)
 
-Insanely easy way to work with Android databases.
+[![Join the chat at https://gitter.im/satyan/sugar](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/satyan/sugar?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
+
+Insanely easy way to work with Android SQLCipher databases.
 
 Official documentation can be found [here](http://satyan.github.io/sugar). The example application is provided in the **example** folder in the source.
 
@@ -21,7 +23,7 @@ There are four ways to install Sugar:
 This is the preferred way. Simply add:
 
 ```groovy
-compile 'com.github.satyan:sugar:1.3.1'
+compile 'com.github.satyan:sugar:1.4'
 ```
 
 to your project dependencies and run `gradle build` or `gradle assemble`.
@@ -34,7 +36,7 @@ Declare the dependency in Maven:
 <dependency>
     <groupId>com.github.satyan</groupId>
     <artifactId>sugar</artifactId>
-    <version>1.3</version>
+    <version>1.4</version>
 </dependency>
 ```
 
@@ -50,6 +52,79 @@ Visit the [releases](https://github.com/satyan/sugar/releases) page to download
 
 After installing, check out how to set up your first database and models [here](http://satyan.github.io/sugar/getting-started.html).
 
+## Examples
+### SugarRecord
+```
+public class Book extends SugarRecord {
+  @Unique
+  String isbn;
+  String title;
+  String edition;
+
+  // Default constructor is necessary for SugarRecord
+  public Book() {
+
+  }
+
+  public Book(String isbn, String title, String edition) {
+    this.isbn = isbn;
+    this.title = title;
+    this.edition = edition;
+  }
+}
+```
+or
+```
+@Table
+public class Book { ... }
+```
+
+### Save Entity
+```
+Book book = new Book("isbn123", "Title here", "2nd edition")
+book.save();
+```
+
+### Load Entity
+```
+Book book = Book.findById(Book.class, 1);
+```
+
+### Update Entity
+```
+Book book = Book.findById(Book.class, 1);
+book.title = "updated title here"; // modify the values
+book.edition = "3rd edition";
+book.save(); // updates the previous entry with new values.
+```
+
+### Delete Entity
+```
+Book book = Book.findById(Book.class, 1);
+book.delete();
+```
+
+### Update Entity based on Unique values
+```
+Book book = new Book("isbn123", "Title here", "2nd edition")
+book.save();
+
+// Update book with isbn123
+Book sameBook = new Book("isbn123", "New Title", "5th edition")
+sameBook.update();
+
+book.getId() == sameBook.getId(); // true
+```
+
+### Bulk Insert
+```
+List<Book> books = new ArrayList<>();
+books.add(new Book("isbn123", "Title here", "2nd edition"))
+books.add(new Book("isbn456", "Title here 2", "3nd edition"))
+books.add(new Book("isbn789", "Title here 3", "4nd edition"))
+SugarRecord.saveInTx(books);
+```
+
 ## Contributing
 
 Please fork this repository and contribute back using [pull requests](https://github.com/satyan/sugar/pulls). Features can be requested using [issues](https://github.com/satyan/sugar/issues). All code, comments, and critiques are greatly appreciated.
diff --git a/build.gradle b/build.gradle
index 1d899395..cd01d003 100644
--- a/build.gradle
+++ b/build.gradle
@@ -34,7 +34,7 @@ subprojects { proj ->
         version "0.7.1.201405082137"
     }
 
-    task jacocoTestReport(type: JacocoReport, dependsOn: "testDebug") {
+    task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
         group = "Reporting"
         description = "Generate Jacoco coverage reports after running tests."
         reports {
diff --git a/library/build.gradle b/library/build.gradle
index 9251b0d8..d0f36f22 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -20,6 +20,8 @@ android {
 dependencies {
     compile 'com.android.support:support-v4:21.0.3'
     compile 'com.google.guava:guava:18.0'
+    compile 'net.zetetic:android-database-sqlcipher:3.3.1-2@aar'
+
     testCompile 'junit:junit:4.12'
 }
 
diff --git a/library/src/main/java/com/orm/SchemaGenerator.java b/library/src/main/java/com/orm/SchemaGenerator.java
index 590e259e..1a950c3c 100644
--- a/library/src/main/java/com/orm/SchemaGenerator.java
+++ b/library/src/main/java/com/orm/SchemaGenerator.java
@@ -1,9 +1,7 @@
 package com.orm;
 
 import android.content.Context;
-import android.database.Cursor;
 import android.database.SQLException;
-import android.database.sqlite.SQLiteDatabase;
 import android.util.Log;
 
 import com.orm.dsl.Column;
@@ -14,6 +12,9 @@
 import com.orm.util.QueryBuilder;
 import com.orm.util.ReflectionUtil;
 
+import net.sqlcipher.Cursor;
+import net.sqlcipher.database.SQLiteDatabase;
+
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStream;
diff --git a/library/src/main/java/com/orm/SugarDb.java b/library/src/main/java/com/orm/SugarDb.java
index a15110a3..9da4cee2 100644
--- a/library/src/main/java/com/orm/SugarDb.java
+++ b/library/src/main/java/com/orm/SugarDb.java
@@ -1,17 +1,19 @@
 package com.orm;
 
 import android.content.Context;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteOpenHelper;
 
 import com.orm.util.ManifestHelper;
 import com.orm.util.SugarCursorFactory;
 
+import net.sqlcipher.database.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteOpenHelper;
+
 import static com.orm.util.ManifestHelper.getDatabaseVersion;
 import static com.orm.util.ManifestHelper.getDebugEnabled;
 
 public class SugarDb extends SQLiteOpenHelper {
 
+    private final String databasePassword;
     private final SchemaGenerator schemaGenerator;
     private SQLiteDatabase sqLiteDatabase;
 
@@ -19,6 +21,9 @@ public SugarDb(Context context) {
         super(context, ManifestHelper.getDatabaseName(context),
                 new SugarCursorFactory(getDebugEnabled(context)), getDatabaseVersion(context));
         schemaGenerator = new SchemaGenerator(context);
+
+        SQLiteDatabase.loadLibs(context);
+        databasePassword = ManifestHelper.getDatabaseKey(context);
     }
 
     @Override
@@ -33,7 +38,7 @@ public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVers
 
     public synchronized SQLiteDatabase getDB() {
         if (this.sqLiteDatabase == null) {
-            this.sqLiteDatabase = getWritableDatabase();
+            this.sqLiteDatabase = getWritableDatabase(databasePassword);
         }
 
         return this.sqLiteDatabase;
diff --git a/library/src/main/java/com/orm/SugarRecord.java b/library/src/main/java/com/orm/SugarRecord.java
index 0f76b766..dd04adc0 100644
--- a/library/src/main/java/com/orm/SugarRecord.java
+++ b/library/src/main/java/com/orm/SugarRecord.java
@@ -1,10 +1,6 @@
 package com.orm;
 
 import android.content.ContentValues;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteException;
-import android.database.sqlite.SQLiteStatement;
 import android.text.TextUtils;
 import android.util.Log;
 
@@ -13,7 +9,11 @@
 import com.orm.util.ReflectionUtil;
 import com.orm.util.QueryBuilder;
 
-import java.lang.String;
+import net.sqlcipher.Cursor;
+import net.sqlcipher.database.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteException;
+import net.sqlcipher.database.SQLiteStatement;
+
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.Arrays;
diff --git a/library/src/main/java/com/orm/SugarTransactionHelper.java b/library/src/main/java/com/orm/SugarTransactionHelper.java
index 73440635..265471ee 100644
--- a/library/src/main/java/com/orm/SugarTransactionHelper.java
+++ b/library/src/main/java/com/orm/SugarTransactionHelper.java
@@ -1,8 +1,9 @@
 package com.orm;
 
-import android.database.sqlite.SQLiteDatabase;
 import android.util.Log;
 
+import net.sqlcipher.database.SQLiteDatabase;
+
 public class SugarTransactionHelper {
 
     public static void doInTransaction(SugarTransactionHelper.Callback callback) {
diff --git a/library/src/main/java/com/orm/util/ManifestHelper.java b/library/src/main/java/com/orm/util/ManifestHelper.java
index fb65724c..84be3ec0 100644
--- a/library/src/main/java/com/orm/util/ManifestHelper.java
+++ b/library/src/main/java/com/orm/util/ManifestHelper.java
@@ -20,6 +20,7 @@
     public final static String METADATA_VERSION = "VERSION";
     public final static String METADATA_DOMAIN_PACKAGE_NAME = "DOMAIN_PACKAGE_NAME";
     public final static String METADATA_QUERY_LOG = "QUERY_LOG";
+    public final static String METADATA_ENCRYPTION_KEY = "ENCRYPTION_KEY";
     /**
      * The default name for the database unless specified in the AndroidManifest.
      */
@@ -85,6 +86,22 @@ public static boolean getDebugEnabled(Context context) {
         return getMetaDataBoolean(context, METADATA_QUERY_LOG);
     }
 
+    /**
+     * Grabs the SQLCipher encryption key from the manifest.
+     *
+     * @param context  the {@link android.content.Context} of the Android application
+     * @return the SQLCipher encryption key from the manifest.
+     */
+    public static String getDatabaseKey(Context context){
+        String dbKey = getMetaDataString(context, METADATA_ENCRYPTION_KEY);
+
+        if (dbKey == null) {
+            dbKey = "";
+        }
+
+        return dbKey;
+    }
+
     private static String getMetaDataString(Context context, String name) {
         String value = null;
 
diff --git a/library/src/main/java/com/orm/util/SugarConfig.java b/library/src/main/java/com/orm/util/SugarConfig.java
index b93da25e..c8cf3868 100644
--- a/library/src/main/java/com/orm/util/SugarConfig.java
+++ b/library/src/main/java/com/orm/util/SugarConfig.java
@@ -1,10 +1,5 @@
 package com.orm.util;
 
-import android.content.Context;
-import android.content.pm.ApplicationInfo;
-import android.content.pm.PackageManager;
-import android.util.Log;
-
 import java.lang.reflect.Field;
 import java.util.Collections;
 import java.util.HashMap;
diff --git a/library/src/main/java/com/orm/util/SugarCursorFactory.java b/library/src/main/java/com/orm/util/SugarCursorFactory.java
index 12706516..b7e14d22 100644
--- a/library/src/main/java/com/orm/util/SugarCursorFactory.java
+++ b/library/src/main/java/com/orm/util/SugarCursorFactory.java
@@ -1,12 +1,13 @@
 package com.orm.util;
 
-import android.database.Cursor;
-import android.database.sqlite.SQLiteCursor;
-import android.database.sqlite.SQLiteCursorDriver;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteQuery;
 import android.util.Log;
 
+import net.sqlcipher.Cursor;
+import net.sqlcipher.database.SQLiteCursor;
+import net.sqlcipher.database.SQLiteCursorDriver;
+import net.sqlcipher.database.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteQuery;
+
 public class SugarCursorFactory implements SQLiteDatabase.CursorFactory {
 
     private boolean debugEnabled;
