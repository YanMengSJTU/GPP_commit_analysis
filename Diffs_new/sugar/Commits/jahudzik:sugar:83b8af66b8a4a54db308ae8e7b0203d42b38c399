diff --git a/library/src/main/java/com/orm/SchemaGenerator.java b/library/src/main/java/com/orm/SchemaGenerator.java
index c25407fc..e041e755 100644
--- a/library/src/main/java/com/orm/SchemaGenerator.java
+++ b/library/src/main/java/com/orm/SchemaGenerator.java
@@ -9,7 +9,6 @@
 import com.orm.annotation.MultiUnique;
 import com.orm.annotation.NotNull;
 import com.orm.annotation.Unique;
-import com.orm.dsl.BuildConfig;
 import com.orm.helper.ManifestHelper;
 import com.orm.util.KeyWordUtil;
 import com.orm.util.MigrationFileParser;
@@ -56,7 +55,6 @@ public void createDatabase(SQLiteDatabase sqLiteDatabase) {
     public void afterTableCreated(Class<?> table, SQLiteDatabase sqLiteDatabase) {
         String fileName = table.getSimpleName() + ".sql";
         executeScript(sqLiteDatabase,"sugar_after_create/" ,fileName);
-
     }
 
     public void doUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {
@@ -102,7 +100,7 @@ private boolean executeSugarUpgrade(SQLiteDatabase db, int oldVersion, int newVe
             List<String> files = Arrays.asList(getAssets().list("sugar_upgrades"));
             Collections.sort(files, new NumberComparator());
             for (String file : files) {
-                if(ManifestHelper.isDebugEnabled()) {
+                if (ManifestHelper.isDebugEnabled()) {
                     Log.i(SUGAR, "filename : " + file);
                 }
 
@@ -114,14 +112,14 @@ private boolean executeSugarUpgrade(SQLiteDatabase db, int oldVersion, int newVe
                         isSuccess = true;
                     }
                 } catch (NumberFormatException e) {
-                    if(ManifestHelper.isDebugEnabled()) {
+                    if (ManifestHelper.isDebugEnabled()) {
                         Log.i(SUGAR, "not a sugar script. ignored." + file);
                     }
                 }
 
             }
         } catch (IOException e) {
-            if(ManifestHelper.isDebugEnabled()) {
+            if (ManifestHelper.isDebugEnabled()) {
                 Log.e(SUGAR, e.getMessage());
             }
         }
@@ -139,8 +137,8 @@ private void executeScript(SQLiteDatabase db,String path ,String file) {
                 sb.append(line);
             }
             MigrationFileParser migrationFileParser = new MigrationFileParser(sb.toString());
-            for(String statement: migrationFileParser.getStatements()){
-                if(ManifestHelper.isDebugEnabled()) {
+            for (String statement: migrationFileParser.getStatements()) {
+                if (ManifestHelper.isDebugEnabled()) {
                     Log.i("Sugar script", statement);
                 }
                 if (!statement.isEmpty()) {
@@ -149,12 +147,12 @@ private void executeScript(SQLiteDatabase db,String path ,String file) {
             }
 
         } catch (IOException e) {
-            if(ManifestHelper.isDebugEnabled()) {
+            if (ManifestHelper.isDebugEnabled()) {
                 Log.e(SUGAR, e.getMessage());
             }
         }
 
-        if(ManifestHelper.isDebugEnabled()) {
+        if (ManifestHelper.isDebugEnabled()) {
             Log.i(SUGAR, "Script executed");
         }
     }
@@ -193,7 +191,7 @@ private void addColumns(Class<?> table, SQLiteDatabase sqLiteDatabase) {
         }
 
         for (String command : alterCommands) {
-            if(ManifestHelper.isDebugEnabled()) {
+            if (ManifestHelper.isDebugEnabled()) {
                 Log.i("Sugar", command);
             }
             sqLiteDatabase.execSQL(command);
@@ -201,14 +199,14 @@ private void addColumns(Class<?> table, SQLiteDatabase sqLiteDatabase) {
     }
 
     protected String createTableSQL(Class<?> table) {
-        if(ManifestHelper.isDebugEnabled()) {
+        if (ManifestHelper.isDebugEnabled()) {
             Log.i(SUGAR, "Create table if not exists");
         }
         List<Field> fields = ReflectionUtil.getTableFields(table);
         String tableName = NamingHelper.toTableName(table);
 
-        if(KeyWordUtil.isKeyword(tableName)) {
-            if(ManifestHelper.isDebugEnabled()) {
+        if (KeyWordUtil.isKeyword(tableName)) {
+            if (ManifestHelper.isDebugEnabled()) {
                 Log.i(SUGAR, "ERROR, SQLITE RESERVED WORD USED IN " + tableName);
             }
         }
@@ -265,11 +263,11 @@ protected String createTableSQL(Class<?> table) {
             sb.append(", UNIQUE(");
 
             String[] constraintFields = constraint.split(",");
-            for(int i = 0; i < constraintFields.length; i++) {
+            for (int i = 0; i < constraintFields.length; i++) {
                 String columnName = NamingHelper.toSQLNameDefault(constraintFields[i]);
                 sb.append(columnName);
 
-                if(i < (constraintFields.length -1)) {
+                if (i < (constraintFields.length -1)) {
                     sb.append(",");
                 }
             }
@@ -278,7 +276,7 @@ protected String createTableSQL(Class<?> table) {
         }
 
         sb.append(" ) ");
-        if(ManifestHelper.isDebugEnabled()) {
+        if (ManifestHelper.isDebugEnabled()) {
             Log.i(SUGAR, "Creating table " + tableName);
         }
 
diff --git a/library/src/main/java/com/orm/SugarDb.java b/library/src/main/java/com/orm/SugarDb.java
index bc71ba23..28391900 100644
--- a/library/src/main/java/com/orm/SugarDb.java
+++ b/library/src/main/java/com/orm/SugarDb.java
@@ -4,7 +4,6 @@
 import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
 
-import com.orm.dsl.BuildConfig;
 import com.orm.helper.ManifestHelper;
 import com.orm.util.SugarCursorFactory;
 
@@ -63,7 +62,7 @@ public synchronized SQLiteDatabase getDB() {
 
     @Override
     public synchronized SQLiteDatabase getReadableDatabase() {
-        if(ManifestHelper.isDebugEnabled()) {
+        if (ManifestHelper.isDebugEnabled()) {
             Log.d(LOG_TAG, "getReadableDatabase");
         }
         openedConnections++;
@@ -72,12 +71,12 @@ public synchronized SQLiteDatabase getReadableDatabase() {
 
     @Override
     public synchronized void close() {
-        if(ManifestHelper.isDebugEnabled()) {
+        if (ManifestHelper.isDebugEnabled()) {
             Log.d(LOG_TAG, "getReadableDatabase");
         }
         openedConnections--;
-        if(openedConnections == 0) {
-            if(ManifestHelper.isDebugEnabled()) {
+        if (openedConnections == 0) {
+            if (ManifestHelper.isDebugEnabled()) {
                 Log.d(LOG_TAG, "closing");
             }
             super.close();
diff --git a/library/src/main/java/com/orm/SugarRecord.java b/library/src/main/java/com/orm/SugarRecord.java
index 2ade2ba3..5fd5ab3f 100644
--- a/library/src/main/java/com/orm/SugarRecord.java
+++ b/library/src/main/java/com/orm/SugarRecord.java
@@ -114,7 +114,7 @@ private static SQLiteDatabase getSugarDataBase() {
             sqLiteDatabase.setTransactionSuccessful();
         } catch (Exception e) {
             deletedRows = 0;
-            if(ManifestHelper.isDebugEnabled()) {
+            if (ManifestHelper.isDebugEnabled()) {
                 Log.i(SUGAR, "Error in deleting in transaction " + e.getMessage());
             }
         } finally {
@@ -134,7 +134,9 @@ private static SQLiteDatabase getSugarDataBase() {
 
     public static <T> T findById(Class<T> type, Long id) {
         List<T> list = find(type, "id=?", new String[]{String.valueOf(id)}, null, null, "1");
-        if (list.isEmpty()) return null;
+        if (list.isEmpty()) {
+            return null;
+        }
         return list.get(0);
     }
 
@@ -190,7 +192,6 @@ private static SQLiteDatabase getSugarDataBase() {
 
     public static <T> List<T> findWithQuery(Class<T> type, String query, String... arguments) {
         Cursor cursor = getSugarDataBase().rawQuery(query, arguments);
-
         return getEntitiesFromCursor(cursor, type);
     }
 
@@ -199,7 +200,6 @@ public static void executeQuery(String query, String... arguments) {
     }
 
     public static <T> List<T> find(Class<T> type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
-
         String args[];
         args = (whereArgs == null) ? null : replaceArgs(whereArgs);
 
@@ -219,11 +219,11 @@ public static void executeQuery(String query, String... arguments) {
         return getEntitiesFromCursor(cursor, type, relationFieldName, relationObject);
     }
 
-    public static <T> List<T> getEntitiesFromCursor(Cursor cursor, Class<T> type){
+    public static <T> List<T> getEntitiesFromCursor(Cursor cursor, Class<T> type) {
         return getEntitiesFromCursor(cursor, type, null, null);
     }
 
-    public static <T> List<T> getEntitiesFromCursor(Cursor cursor, Class<T> type, String relationFieldName, Object relationObject){
+    public static <T> List<T> getEntitiesFromCursor(Cursor cursor, Class<T> type, String relationFieldName, Object relationObject) {
         T entity;
         List<T> result = new ArrayList<>();
         try {
@@ -370,7 +370,7 @@ static long update(SQLiteDatabase db, Object object) {
         List<String> whereArgs = new ArrayList<>();
 
         for (Field column : columns) {
-            if(column.isAnnotationPresent(Unique.class)) {
+            if (column.isAnnotationPresent(Unique.class)) {
                 try {
                     column.setAccessible(true);
                     String columnName = NamingHelper.toColumnName(column);
@@ -407,12 +407,12 @@ public boolean delete() {
         Long id = getId();
         Class<?> type = getClass();
         if (id != null && id > 0L) {
-            if(ManifestHelper.isDebugEnabled()) {
+            if (ManifestHelper.isDebugEnabled()) {
                 Log.i(SUGAR, type.getSimpleName() + " deleted : " + id);
             }
             return getSugarDataBase().delete(NamingHelper.toTableName(type), "Id=?", new String[]{id.toString()}) == 1;
         } else {
-            if(ManifestHelper.isDebugEnabled()) {
+            if (ManifestHelper.isDebugEnabled()) {
                 Log.i(SUGAR, "Cannot delete object: " + type.getSimpleName() + " - object has not been saved");
             }
             return false;
@@ -428,23 +428,23 @@ public static boolean delete(Object object) {
                 Long id = (Long) field.get(object);
                 if (id != null && id > 0L) {
                     boolean deleted = getSugarDataBase().delete(NamingHelper.toTableName(type), "Id=?", new String[]{id.toString()}) == 1;
-                    if(ManifestHelper.isDebugEnabled()) {
+                    if (ManifestHelper.isDebugEnabled()) {
                         Log.i(SUGAR, type.getSimpleName() + " deleted : " + id);
                     }
                     return deleted;
                 } else {
-                    if(ManifestHelper.isDebugEnabled()) {
+                    if (ManifestHelper.isDebugEnabled()) {
                         Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - object has not been saved");
                     }
                     return false;
                 }
             } catch (NoSuchFieldException e) {
-                if(ManifestHelper.isDebugEnabled()) {
+                if (ManifestHelper.isDebugEnabled()) {
                     Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - annotated object has no id");
                 }
                 return false;
             } catch (IllegalAccessException e) {
-                if(ManifestHelper.isDebugEnabled()) {
+                if (ManifestHelper.isDebugEnabled()) {
                     Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - can't access id");
                 }
                 return false;
@@ -452,7 +452,7 @@ public static boolean delete(Object object) {
         } else if (SugarRecord.class.isAssignableFrom(type)) {
             return ((SugarRecord) object).delete();
         } else {
-            if(ManifestHelper.isDebugEnabled()) {
+            if (ManifestHelper.isDebugEnabled()) {
                 Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - not persisted");
             }
             return false;
@@ -534,17 +534,12 @@ public void remove() {
         }
     }
 
-    public static String[] replaceArgs(String[] args){
-
+    public static String[] replaceArgs(String[] args) {
         String [] replace = new String[args.length];
-        for (int i=0; i<args.length; i++){
-
+        for (int i=0; i<args.length; i++) {
             replace[i]= (args[i].equals("true")) ? replace[i]="1" : (args[i].equals("false")) ? replace[i]="0" : args[i];
-
         }
-
         return replace;
-
     }
 
 }
diff --git a/library/src/main/java/com/orm/util/MigrationFileParser.java b/library/src/main/java/com/orm/util/MigrationFileParser.java
index 1691a1eb..997623a5 100644
--- a/library/src/main/java/com/orm/util/MigrationFileParser.java
+++ b/library/src/main/java/com/orm/util/MigrationFileParser.java
@@ -10,11 +10,11 @@
     /**
      * @param content
      */
-    public MigrationFileParser(String content){
+    public MigrationFileParser(String content) {
         this.content = content.replaceAll("(\\/\\*([\\s\\S]*?)\\*\\/)|(--(.)*)|(\n)","");
     }
 
-    public String[] getStatements(){
+    public String[] getStatements() {
         return this.content.split(";");
     }
 
diff --git a/library/src/main/java/com/orm/util/NumberComparator.java b/library/src/main/java/com/orm/util/NumberComparator.java
index a6a08053..e4750c29 100644
--- a/library/src/main/java/com/orm/util/NumberComparator.java
+++ b/library/src/main/java/com/orm/util/NumberComparator.java
@@ -37,10 +37,12 @@ protected int compareRight(String a, String b) {
                     bias = -1;
                 }
             } else if (ca > cb) {
-                if (bias == 0)
+                if (bias == 0) {
                     bias = 1;
-            } else if ((ca == 0) && (cb == 0))
+                }
+            } else if ((ca == 0) && (cb == 0)) {
                 return bias;
+            }
             ia++;
             ib++;
         }
diff --git a/library/src/main/java/com/orm/util/ReflectionUtil.java b/library/src/main/java/com/orm/util/ReflectionUtil.java
index 18943d09..dab708ed 100644
--- a/library/src/main/java/com/orm/util/ReflectionUtil.java
+++ b/library/src/main/java/com/orm/util/ReflectionUtil.java
@@ -35,7 +35,9 @@ private ReflectionUtil() { }
 
     public static List<Field> getTableFields(Class table) {
         List<Field> fieldList = SugarConfig.getFields(table);
-        if (fieldList != null) return fieldList;
+        if (fieldList != null) {
+            return fieldList;
+        }
 
         if (ManifestHelper.isDebugEnabled()) {
             Log.d("Sugar", "Fetching properties");
@@ -78,7 +80,7 @@ public static void addFieldValueToColumn(ContentValues values, Field column, Obj
                 try {
                     field = columnType.getDeclaredField("id");
                     field.setAccessible(true);
-                    if(columnValue != null) {
+                    if (columnValue != null) {
                         values.put(columnName,String.valueOf(field.get(columnValue)));
                     } else {
                         values.putNull(columnName);
@@ -272,7 +274,9 @@ public static void setFieldValueForId(Object object, Long value) {
         try {
             for (String className : getAllClasses()) {
                 Class domainClass = getDomainClass(className);
-                if (domainClass != null) domainClasses.add(domainClass);
+                if (domainClass != null) {
+                    domainClasses.add(domainClass);
+                }
             }
         } catch (IOException | PackageManager.NameNotFoundException  e) {
             if (ManifestHelper.isDebugEnabled()) {
@@ -318,7 +322,9 @@ private static Class getDomainClass(String className) {
         try {
             List<String> allClasses = MultiDexHelper.getAllClasses();
             for (String classString : allClasses) {
-                if (classString.startsWith(packageName)) classNames.add(classString);
+                if (classString.startsWith(packageName)) {
+                    classNames.add(classString);
+                }
             }
         } catch (NullPointerException e) {
             ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
@@ -333,7 +339,9 @@ private static Class getDomainClass(String className) {
                         populateFiles(filePath, fileNames, "");
                     }
                     for (String fileName : fileNames) {
-                        if (fileName.startsWith(packageName)) classNames.add(fileName);
+                        if (fileName.startsWith(packageName)) {
+                            classNames.add(fileName);
+                        }
                     }
                 }
             }
diff --git a/library/src/main/java/com/orm/util/SugarCursor.java b/library/src/main/java/com/orm/util/SugarCursor.java
index d058c5c1..59186bdc 100644
--- a/library/src/main/java/com/orm/util/SugarCursor.java
+++ b/library/src/main/java/com/orm/util/SugarCursor.java
@@ -14,17 +14,19 @@ public int getColumnIndexOrThrow(String columnName) throws IllegalArgumentExcept
         try {
             return super.getColumnIndexOrThrow(columnName);
         } catch (IllegalArgumentException e) {
-            if (columnName.equals("_id"))
+            if (columnName.equals("_id")) {
                 return super.getColumnIndexOrThrow("ID");
-            else
+            } else {
                 throw e;
+            }
         }
     }
 
     @Override
     public int getColumnIndex(String columnName) {
-        if (columnName.equals("_id"))
+        if (columnName.equals("_id")) {
             columnName = "ID";
+        }
         return super.getColumnIndex(columnName);
     }
 }
diff --git a/library/src/main/java/com/orm/util/ThreadUtil.java b/library/src/main/java/com/orm/util/ThreadUtil.java
index 665e5c2d..56faa6bc 100644
--- a/library/src/main/java/com/orm/util/ThreadUtil.java
+++ b/library/src/main/java/com/orm/util/ThreadUtil.java
@@ -25,7 +25,7 @@ public static Future doInBackground(Callable callable) {
         final ExecutorService executor = Executors.newSingleThreadExecutor();
         Future future = executor.submit(callable);
 
-        if(executor.isTerminated()) {
+        if (executor.isTerminated()) {
             executor.shutdown();
         }
 
diff --git a/library/src/test/java/com/orm/helper/NamingHelperTest.java b/library/src/test/java/com/orm/helper/NamingHelperTest.java
index d53769ad..048114e7 100644
--- a/library/src/test/java/com/orm/helper/NamingHelperTest.java
+++ b/library/src/test/java/com/orm/helper/NamingHelperTest.java
@@ -33,7 +33,7 @@ public void testToSQLNameFromField() {
         if (null != fieldList && !fieldList.isEmpty()) {
             List<String> columnList = new ArrayList<>();
 
-            for(Field field: fieldList) {
+            for (Field field: fieldList) {
                 columnList.add(toColumnName(field));
             }
 
diff --git a/library/src/test/java/com/orm/query/SelectTest.java b/library/src/test/java/com/orm/query/SelectTest.java
index ad0393bd..bee2fee9 100644
--- a/library/src/test/java/com/orm/query/SelectTest.java
+++ b/library/src/test/java/com/orm/query/SelectTest.java
@@ -16,7 +16,7 @@
 public final class SelectTest {
 
     @Test
-    public void testMergeCondition(){
+    public void testMergeCondition() {
         Select where = Select.from(TestRecord.class).where(Condition.prop("test").eq("satya"));
         assertEquals("(test = ? )", where.getWhereCond());
         assertEquals(1, where.getArgs().length);
@@ -30,7 +30,7 @@ public void testMergeCondition(){
     }
 
     @Test
-    public void testWhere(){
+    public void testWhere() {
         Select where = Select.from(TestRecord.class).where(Condition.prop("test").eq("satya"));
         assertEquals("(test = ? )", where.getWhereCond());
         assertEquals(1, where.getArgs().length);
@@ -44,7 +44,7 @@ public void testWhere(){
     }
 
     @Test
-    public void toSqlAllClauses(){
+    public void toSqlAllClauses() {
         String toSql = Select.from(TestRecord.class)
                 .where("foo")
                 .orderBy("doe")
@@ -56,14 +56,14 @@ public void toSqlAllClauses(){
     }
 
     @Test
-    public void toSqlNoClauses(){
+    public void toSqlNoClauses() {
         String toSql = Select.from(TestRecord.class)
                 .toSql();
         assertEquals("SELECT * FROM TEST_RECORD ", toSql);
     }
 
     @Test
-    public void toSqlWhereLimitClauses(){
+    public void toSqlWhereLimitClauses() {
         String toSql = Select.from(TestRecord.class)
                 .where("foo")
                 .limit("10")
@@ -73,7 +73,7 @@ public void toSqlWhereLimitClauses(){
 
 
     @Test
-    public void testWhereOr(){
+    public void testWhereOr() {
         Select where = Select.from(TestRecord.class).whereOr(Condition.prop("test").eq("satya"));
         assertEquals("(test = ? )", where.getWhereCond());
         assertEquals(1, where.getArgs().length);
@@ -87,7 +87,7 @@ public void testWhereOr(){
     }
 
     @Test
-    public void testAnd(){
+    public void testAnd() {
         Select where = Select.from(TestRecord.class).whereOr(Condition.prop("test").eq("satya"));
         assertEquals("(test = ? )", where.getWhereCond());
         assertEquals(1, where.getArgs().length);
@@ -102,7 +102,7 @@ public void testAnd(){
     }
 
     @Test
-    public void testOr(){
+    public void testOr() {
         Select where = Select.from(TestRecord.class).whereOr(Condition.prop("test").eq("satya"));
         assertEquals("(test = ? )", where.getWhereCond());
         assertEquals(1, where.getArgs().length);
