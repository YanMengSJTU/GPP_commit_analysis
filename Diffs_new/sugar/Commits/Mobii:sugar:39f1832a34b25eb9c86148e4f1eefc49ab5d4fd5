diff --git a/library/src/com/orm/StringUtil.java b/library/src/com/orm/StringUtil.java
index 40fabf48..ae229b33 100644
--- a/library/src/com/orm/StringUtil.java
+++ b/library/src/com/orm/StringUtil.java
@@ -3,7 +3,7 @@
 public class StringUtil {
     public static String toSQLName(String javaNotation) {
             if(javaNotation.equalsIgnoreCase("_id"))
-                    return "_id";
+                    return "_ID";
 
             StringBuilder sb = new StringBuilder();
             char[] buf = javaNotation.toCharArray();
diff --git a/library/src/com/orm/SugarDb.java b/library/src/com/orm/SugarDb.java
index 227e55cf..971b4654 100644
--- a/library/src/com/orm/SugarDb.java
+++ b/library/src/com/orm/SugarDb.java
@@ -35,7 +35,7 @@ public SugarDb(Context context) {
 
     }
 
-    private <T extends SugarRecord<?>> List<T> getDomainClasses(Context context) {
+    private <T extends SugarRecord<?,?>> List<T> getDomainClasses(Context context) {
         List<T> domainClasses = new ArrayList<T>();
         try {
             for (String className : getAllClasses(context)) {
@@ -55,7 +55,7 @@ public SugarDb(Context context) {
     }
 
     @SuppressWarnings("unchecked")
-    private <T extends SugarRecord<?>> T getDomainClass(String className, Context context) {
+    private <T extends SugarRecord<?,?>> T getDomainClass(String className, Context context) {
         Log.i("Sugar", "domain class");
         Class<?> discoveredClass = null;
         try {
@@ -145,18 +145,18 @@ public void onCreate(SQLiteDatabase sqLiteDatabase) {
         createDatabase(sqLiteDatabase);
     }
 
-    private <T extends SugarRecord<?>> void createDatabase(SQLiteDatabase sqLiteDatabase) {
+    private <T extends SugarRecord<?,?>> void createDatabase(SQLiteDatabase sqLiteDatabase) {
         List<T> domainClasses = getDomainClasses(context);
         for (T domain : domainClasses) {
             createTable(domain, sqLiteDatabase);
         }
     }
 
-    private <T extends SugarRecord<?>> void createTable(T table, SQLiteDatabase sqLiteDatabase) {
+    private <T extends SugarRecord<?,?>> void createTable(T table, SQLiteDatabase sqLiteDatabase) {
         Log.i("Sugar", "create table");
         List<Field> fields = table.getTableFields();
         StringBuilder sb = new StringBuilder("CREATE TABLE ").append(table.getSqlName()).append(
-                " ( ID INTEGER PRIMARY KEY AUTOINCREMENT ");
+                " ( _ID INTEGER PRIMARY KEY AUTOINCREMENT ");
 
         for (Field column : fields) {
             String columnName = StringUtil.toSQLName(column.getName());
@@ -164,7 +164,7 @@ public void onCreate(SQLiteDatabase sqLiteDatabase) {
 
             if (columnType != null) {
 
-                if (columnName.equalsIgnoreCase("Id")) {
+                if (columnName.equalsIgnoreCase("_Id")) {
                     continue;
                 }
                 sb.append(", ").append(columnName).append(" ").append(columnType);
@@ -193,7 +193,7 @@ public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVers
     /**
      * Create the tables that do not exist.
      */
-    private <T extends SugarRecord<?>> void doUpgrade(SQLiteDatabase sqLiteDatabase) {
+    private <T extends SugarRecord<?,?>> void doUpgrade(SQLiteDatabase sqLiteDatabase) {
         List<T> domainClasses = getDomainClasses(context);
         for (T domain : domainClasses) {
             try {// we try to do a select, if fails then (?) there isn't the table
@@ -205,7 +205,7 @@ public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVers
         }
     }
 
-    private <T extends SugarRecord<?>> void deleteTables(SQLiteDatabase sqLiteDatabase) {
+    private <T extends SugarRecord<?,?>> void deleteTables(SQLiteDatabase sqLiteDatabase) {
         List<T> tables = getDomainClasses(this.context);
         for (T table : tables) {
             sqLiteDatabase.execSQL("DROP TABLE IF EXISTS " + table.getSqlName());
diff --git a/library/src/com/orm/SugarRecord.java b/library/src/com/orm/SugarRecord.java
index 764b655e..f3e48414 100644
--- a/library/src/com/orm/SugarRecord.java
+++ b/library/src/com/orm/SugarRecord.java
@@ -19,25 +19,27 @@
 
 import static com.orm.SugarApp.getSugarContext;
 
-public class SugarRecord<T>{
+public abstract class SugarRecord<T,I>{
 
     @Ignore
     String tableName = getSqlName();
 
-    protected Long id = null;
+    protected Long _id = null;
+    
+    public abstract I getId();
 
     public void delete() {
         SQLiteDatabase db = getSugarContext().getDatabase().getDB();
-        db.delete(this.tableName, "Id=?", new String[]{getId().toString()});
+        db.delete(this.tableName, "_Id=?", new String[]{getId().toString()});
     }
 
-    public static <T extends SugarRecord<?>> void deleteAll(Class<T> type) {
+    public static <T extends SugarRecord<?,?>> void deleteAll(Class<T> type) {
         Database db = getSugarContext().getDatabase();
         SQLiteDatabase sqLiteDatabase = db.getDB();
         sqLiteDatabase.delete(getTableName(type), null, null);
     }
 
-    public static <T extends SugarRecord<?>> void deleteAll(Class<T> type, String whereClause, String... whereArgs ) {
+    public static <T extends SugarRecord<?,?>> void deleteAll(Class<T> type, String whereClause, String... whereArgs ) {
         Database db = getSugarContext().getDatabase();
         SQLiteDatabase sqLiteDatabase = db.getDB();
         sqLiteDatabase.delete(getTableName(type), whereClause, whereArgs);
@@ -48,12 +50,12 @@ public long save() {
     }
 
     @SuppressWarnings("deprecation")
-    public static <T extends SugarRecord<?>> void saveInTx(T... objects ) {
+    public static <T extends SugarRecord<?,?>> void saveInTx(T... objects ) {
         saveInTx(Arrays.asList(objects));
     }
 
     @SuppressWarnings("deprecation")
-    public static <T extends SugarRecord<?>> void saveInTx(Collection<T> objects ) {
+    public static <T extends SugarRecord<?,?>> void saveInTx(Collection<T> objects ) {
         SQLiteDatabase sqLiteDatabase = getSugarContext().getDatabase().getDB();
 
         try{
@@ -85,7 +87,7 @@ long save(SQLiteDatabase db) {
                 if (SugarRecord.class.isAssignableFrom(columnType)) {
                     values.put(columnName,
                             (columnValue != null)
-                                    ? String.valueOf(((SugarRecord) columnValue).id)
+                                    ? String.valueOf(((SugarRecord) columnValue)._id)
                                     : "0");
                 } else {
                     if (columnType.equals(Short.class) || columnType.equals(short.class)) {
@@ -122,43 +124,50 @@ long save(SQLiteDatabase db) {
             }
         }
 
-        id = db.insertWithOnConflict(getSqlName(), null, values, SQLiteDatabase.CONFLICT_REPLACE);
+        Cursor cursor = db.query(getSqlName(),null, "ID = ?", new String[]{String.valueOf(getId())}, null, null, null);
+        if(cursor != null && cursor.getCount() > 0) {
+                cursor.moveToFirst();
+                _id = cursor.getLong(cursor.getColumnIndex("_ID"));
+                db.update(getSqlName(), values, "ID = ?", new String[]{String.valueOf(getId())});
+        } else {
+                _id = db.insert(getSqlName(), null, values);
+        }
 
-        Log.i("Sugar", getClass().getSimpleName() + " saved : " + id);
-        return id;
+        Log.i("Sugar", getClass().getSimpleName() + " saved : " + _id);
+        return _id;
     }
 
-    public static <T extends SugarRecord<?>> List<T> listAll(Class<T> type) {
+    public static <T extends SugarRecord<?,?>> List<T> listAll(Class<T> type) {
         return find(type, null, null, null, null, null);
     }
 
-    public static <T extends SugarRecord<?>> T findById(Class<T> type, Long id) {
-        List<T> list = find( type, "id=?", new String[]{String.valueOf(id)}, null, null, "1");
+    public static <T extends SugarRecord<?,?>> T findById(Class<T> type, Long id) {
+        List<T> list = find( type, "_id=?", new String[]{String.valueOf(id)}, null, null, "1");
         if (list.isEmpty()) return null;
         return list.get(0);
     }
 
-    public static <T extends SugarRecord<?>> T findById(Class<T> type, Integer id) {
+    public static <T extends SugarRecord<?,?>> T findById(Class<T> type, Integer id) {
         return findById(type, Long.valueOf(id));
     }
 
-    public static <T extends SugarRecord<?>> Iterator<T> findAll(Class<T> type) {
+    public static <T extends SugarRecord<?,?>> Iterator<T> findAll(Class<T> type) {
         return findAsIterator(type, null, null, null, null, null);
     }
 
-    public static <T extends SugarRecord<?>> Iterator<T> findAsIterator(Class<T> type,
+    public static <T extends SugarRecord<?,?>> Iterator<T> findAsIterator(Class<T> type,
                                                                         String whereClause, String... whereArgs) {
         return findAsIterator(type, whereClause, whereArgs, null, null, null);
     }
 
-    public static <T extends SugarRecord<?>> Iterator<T> findWithQueryAsIterator(Class<T> type, String query, String... arguments) {
+    public static <T extends SugarRecord<?,?>> Iterator<T> findWithQueryAsIterator(Class<T> type, String query, String... arguments) {
         Database db = getSugarContext().getDatabase();
         SQLiteDatabase sqLiteDatabase = db.getDB();
         Cursor c = sqLiteDatabase.rawQuery(query, arguments);
         return new CursorIterator<T>(type, c);
     }
 
-    public static <T extends SugarRecord<?>> Iterator<T> findAsIterator(Class<T> type,
+    public static <T extends SugarRecord<?,?>> Iterator<T> findAsIterator(Class<T> type,
                                                                     String whereClause, String[] whereArgs,
                                                                     String groupBy, String orderBy, String limit) {
 
@@ -169,12 +178,12 @@ long save(SQLiteDatabase db) {
         return new CursorIterator<T>(type, c);
     }
 
-    public static <T extends SugarRecord<?>> List<T> find(Class<T> type,
+    public static <T extends SugarRecord<?,?>> List<T> find(Class<T> type,
                                                        String whereClause, String... whereArgs) {
         return find(type, whereClause, whereArgs, null, null, null);
     }
 
-    public static <T extends SugarRecord<?>> List<T> findWithQuery(Class<T> type, String query, String... arguments){
+    public static <T extends SugarRecord<?,?>> List<T> findWithQuery(Class<T> type, String query, String... arguments){
 
         Database db = getSugarContext().getDatabase();
         SQLiteDatabase sqLiteDatabase = db.getDB();
@@ -200,7 +209,7 @@ public static void executeQuery(String query, String... arguments){
         getSugarContext().getDatabase().getDB().execSQL(query, arguments);
     }
 
-    public static <T extends SugarRecord<?>> List<T> find(Class<T> type,
+    public static <T extends SugarRecord<?,?>> List<T> find(Class<T> type,
                                                        String whereClause, String[] whereArgs,
                                                        String groupBy, String orderBy, String limit) {
         Database db = getSugarContext().getDatabase();
@@ -223,16 +232,16 @@ public static void executeQuery(String query, String... arguments){
         return toRet;
     }
 
-    public static <T extends SugarRecord<?>> long count(Class<?> type) {
+    public static <T extends SugarRecord<?,?>> long count(Class<?> type) {
         return count(type, null, null, null, null, null);
     }
     
-    public static <T extends SugarRecord<?>> long count(Class<?> type,
+    public static <T extends SugarRecord<?,?>> long count(Class<?> type,
             String whereClause, String[] whereArgs) {
     	return count(type, whereClause, whereArgs, null, null, null);
     }
     
-    public static <T extends SugarRecord<?>> long count(Class<?> type,
+    public static <T extends SugarRecord<?,?>> long count(Class<?> type,
             String whereClause, String[] whereArgs,
             String groupBy, String orderBy, String limit) {
     	
@@ -276,7 +285,7 @@ void inflate(Cursor cursor) {
                     continue;
                 }
 
-                if(colName.equalsIgnoreCase("id")){
+                if(colName.equalsIgnoreCase("_id")){
                     long cid = cursor.getLong(columnIndex);
                     field.set(this, Long.valueOf(cid));
                 }else if (fieldType.equals(long.class) || fieldType.equals(Long.class)) {
@@ -341,7 +350,7 @@ void inflate(Cursor cursor) {
 
         for (Field f : entities.keySet()) {
             try {
-                f.set(this, findById((Class<? extends SugarRecord<?>>) f.getType(), 
+                f.set(this, findById((Class<? extends SugarRecord<?,?>>) f.getType(), 
                         entities.get(f)));
             } catch (SQLiteException e) {
             } catch (IllegalArgumentException e) {
@@ -389,15 +398,15 @@ public static String getTableName(Class<?> type) {
         return StringUtil.toSQLName(type.getSimpleName());
     }
 
-    public Long getId() {
-        return id;
+    public Long get_Id() {
+        return _id;
     }
 
-    public void setId(Long id) {
-        this.id = id;
+    public void set_Id(Long id) {
+        this._id = id;
     }
 
-    static class CursorIterator<E extends SugarRecord<?>> implements Iterator<E> {
+    static class CursorIterator<E extends SugarRecord<?,?>> implements Iterator<E> {
         Class<E> type;
         Cursor cursor;
 
diff --git a/library/src/com/orm/query/Select.java b/library/src/com/orm/query/Select.java
index ceaac65c..45fe82c1 100644
--- a/library/src/com/orm/query/Select.java
+++ b/library/src/com/orm/query/Select.java
@@ -6,7 +6,7 @@
 import java.util.Iterator;
 import java.util.List;
 
-public class Select<T extends SugarRecord<?>> implements Iterable {
+public class Select<T extends SugarRecord<?,?>> implements Iterable<T> {
 
     private Class<T> record;
     private String[] arguments;
@@ -22,7 +22,7 @@ public Select(Class<T> record) {
         this.record = record;
     }
 
-    public static <T extends SugarRecord<T>> Select<T> from(Class<T> record) {
+    public static <T extends SugarRecord<T,?>> Select<T> from(Class<T> record) {
         return new Select<T>(record);
     }
 
