diff --git a/library/src/com/orm/SugarDb.java b/library/src/com/orm/SugarDb.java
index 784eb4d2..70ff0a82 100644
--- a/library/src/com/orm/SugarDb.java
+++ b/library/src/com/orm/SugarDb.java
@@ -1,7 +1,7 @@
 package com.orm;
 
 import static com.orm.SugarConfig.getDatabaseVersion;
-import static com.orm.SugarConfig.getDebugEnabled;
+import static com.orm.SugarConfig.getDebugEnabled;  
 
 import java.io.BufferedReader;
 import java.io.File;
@@ -29,6 +29,7 @@
 import com.orm.dsl.Column;
 import com.orm.dsl.NotNull;
 import com.orm.dsl.Unique;
+import com.orm.dsl.Index;
 
 import dalvik.system.DexFile;
 
@@ -166,6 +167,8 @@ public void onCreate(SQLiteDatabase sqLiteDatabase) {
         StringBuilder sb = new StringBuilder("CREATE TABLE ").append(table.getSqlName()).append(
                 " ( ID INTEGER PRIMARY KEY AUTOINCREMENT ");
 
+        List<String> indexes = new ArrayList<String>();
+
         for (Field column : fields) {
             String columnName = StringUtil.toSQLName(column);
             String columnType = QueryBuilder.getColumnType(column.getType());
@@ -193,6 +196,13 @@ public void onCreate(SQLiteDatabase sqLiteDatabase) {
                         sb.append(" UNIQUE");
                     }
 
+                    if (columnAnnotation.index()) {
+                        StringBuilder idxSb = new StringBuilder("CREATE INDEX IF NOT EXISTS ")
+                            .append(columnName).append("_idx ON ").append(table.getSqlName())
+                            .append(" (").append(columnName).append(" ASC)");
+                        indexes.add(idxSb.toString());
+                    }
+
                 }else {
 
                     sb.append(", ").append(columnName).append(" ").append(columnType);
@@ -207,6 +217,14 @@ public void onCreate(SQLiteDatabase sqLiteDatabase) {
                     if (column.isAnnotationPresent(Unique.class)) {
                         sb.append(" UNIQUE");
                     }
+
+                    if (column.isAnnotationPresent(Index.class)) {
+                        Index columnAnnotation = column.getAnnotation(Index.class);
+                        StringBuilder idxSb = new StringBuilder("CREATE INDEX IF NOT EXISTS ")
+                            .append(columnName).append("_idx ON ").append(table.getSqlName())
+                            .append(" (").append(columnName).append(" ").append(columnAnnotation.sort()).append(")");
+                        indexes.add(idxSb.toString());
+                    }
                 }
             }
         }
@@ -221,9 +239,12 @@ public void onCreate(SQLiteDatabase sqLiteDatabase) {
         sb.append(" ) ");
 
         Log.i("Sugar", "creating table " + table.getSqlName());
-
         if (!"".equals(sb.toString()))
             sqLiteDatabase.execSQL(sb.toString());
+
+        for (String idx : indexes) {
+            sqLiteDatabase.execSQL(idx);
+        }
     }
 
     @Override
diff --git a/library/src/com/orm/dsl/Column.java b/library/src/com/orm/dsl/Column.java
index 2c47e3c0..8f87a5c1 100644
--- a/library/src/com/orm/dsl/Column.java
+++ b/library/src/com/orm/dsl/Column.java
@@ -8,4 +8,5 @@
     String name();
     boolean unique() default false;
     boolean notNull() default false;
+    boolean index() default false;
 }
diff --git a/library/src/com/orm/dsl/Index.java b/library/src/com/orm/dsl/Index.java
new file mode 100644
index 00000000..5efbc429
--- /dev/null
+++ b/library/src/com/orm/dsl/Index.java
@@ -0,0 +1,9 @@
+package com.orm.dsl;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+@Retention(RetentionPolicy.RUNTIME)
+public @interface Index {
+    String sort() default "ASC";
+}
