diff --git a/library/src/main/java/com/orm/SugarDb.java b/library/src/main/java/com/orm/SugarDb.java
index 7e907c5a..1404ee48 100644
--- a/library/src/main/java/com/orm/SugarDb.java
+++ b/library/src/main/java/com/orm/SugarDb.java
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.content.pm.PackageManager;
+import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteException;
 import android.database.sqlite.SQLiteOpenHelper;
@@ -187,16 +188,75 @@ public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVers
      */
     private <T extends SugarRecord<?>> void doUpgrade(SQLiteDatabase sqLiteDatabase) {
         List<T> domainClasses = getDomainClasses(context);
+
+        String sql = "select count(*) from sqlite_master where type='table' and name='%s';";
+
         for (T domain : domainClasses) {
-            try {// we try to do a select, if fails then (?) there isn't the table
-                sqLiteDatabase.query(domain.tableName, null, null, null, null, null, null);
-            } catch (SQLiteException e) {
-                Log.i("Sugar", String.format("creating table on update (error was '%s')", e.getMessage()));
+            String tableName = domain.tableName;
+            Cursor c = sqLiteDatabase.rawQuery(String.format(sql, tableName), null);
+            if (c.moveToFirst() && c.getInt(0) == 0) {
                 createTable(domain, sqLiteDatabase);
+            } else {
+                addColumns(domain, sqLiteDatabase);
+            }
+            c.close();
+        }
+    }
+
+    private <T extends SugarRecord<?>> void addColumns(T table, SQLiteDatabase sqLiteDatabase) {
+
+        List<Field> fields = table.getTableFields();
+        String tableName = table.getSqlName();
+        ArrayList<String> presentColumns = getColumnNames(sqLiteDatabase, tableName);
+        ArrayList<String> alterCommands = new ArrayList<>();
+
+        for (Field column : fields) {
+            String columnName = StringUtil.toSQLName(column.getName());
+            String columnType = QueryBuilder.getColumnType(column.getType());
+
+            if (column.isAnnotationPresent(Column.class)) {
+                Column columnAnnotation = column.getAnnotation(Column.class);
+                columnName = columnAnnotation.name();
             }
+
+            if (!presentColumns.contains(columnName)) {
+                StringBuilder sb = new StringBuilder("ALTER TABLE ");
+                sb.append(tableName).append(" ADD COLUMN ").append(columnName).append(" ").append(columnType);
+                if (column.isAnnotationPresent(NotNull.class)) {
+                    if (columnType.endsWith(" NULL")) {
+                        sb.delete(sb.length() - 5, sb.length());
+                    }
+                    sb.append(" NOT NULL");
+                }
+
+                if (column.isAnnotationPresent(Unique.class)) {
+                    sb.append(" UNIQUE");
+                }
+                alterCommands.add(sb.toString());
+            }
+        }
+
+        for (String command : alterCommands) {
+            Log.i("Sugar", command);
+            sqLiteDatabase.execSQL(command);
+        }
+    }
+
+    private ArrayList<String> getColumnNames(SQLiteDatabase sqLiteDatabase, String tableName) {
+        Cursor resultsQuery = sqLiteDatabase.query(tableName, null, null, null, null, null, null);
+        //Check if columns match vs the one on the domain class
+        ArrayList<String> columnNames = new ArrayList<>();
+        for (int i = 0; i < resultsQuery.getColumnCount(); i++) {
+            String columnName = resultsQuery.getColumnName(i);
+            columnNames.add(columnName);
         }
+        resultsQuery.close();
+        return columnNames;
     }
 
+
+
+
     private <T extends SugarRecord<?>> void deleteTables(SQLiteDatabase sqLiteDatabase) {
         List<T> tables = getDomainClasses(this.context);
         for (T table : tables) {
