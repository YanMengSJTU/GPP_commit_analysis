diff --git a/library/src/main/java/com/orm/SugarDb.java b/library/src/main/java/com/orm/SugarDb.java
index 0f859afc..3bb7a51d 100644
--- a/library/src/main/java/com/orm/SugarDb.java
+++ b/library/src/main/java/com/orm/SugarDb.java
@@ -5,7 +5,13 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteException;
 import android.database.sqlite.SQLiteOpenHelper;
+import android.text.TextUtils;
 import android.util.Log;
+
+import com.orm.dsl.Column;
+import com.orm.dsl.NotNull;
+import com.orm.dsl.Unique;
+
 import dalvik.system.DexFile;
 
 import java.io.BufferedReader;
@@ -117,12 +123,43 @@ public void onCreate(SQLiteDatabase sqLiteDatabase) {
             String columnName = StringUtil.toSQLName(column.getName());
             String columnType = QueryBuilder.getColumnType(column.getType());
 
-            if (columnType != null) {
+            if (!TextUtils.isEmpty(columnType)) {
 
                 if (columnName.equalsIgnoreCase("Id")) {
                     continue;
                 }
-                sb.append(", ").append(columnName).append(" ").append(columnType);
+
+                if (column.isAnnotationPresent(Column.class)) {
+                    Column columnAnnotation = column.getAnnotation(Column.class);
+                    columnName = columnAnnotation.name();
+
+                    sb.append(", ").append(columnName).append(" ").append(columnType);
+
+                    if (columnAnnotation.notNull()) {
+                        if (columnType.endsWith(" NULL")) {
+                            sb.delete(sb.length() - 5, sb.length());
+                        }
+                        sb.append(" NOT NULL");
+                    }
+
+                    if (columnAnnotation.unique()) {
+                        sb.append(" UNIQUE");
+                    }
+
+                } else {
+                    sb.append(", ").append(columnName).append(" ").append(columnType);
+
+                    if (column.isAnnotationPresent(NotNull.class)) {
+                        if (columnType.endsWith(" NULL")) {
+                            sb.delete(sb.length() - 5, sb.length());
+                        }
+                        sb.append(" NOT NULL");
+                    }
+
+                    if (column.isAnnotationPresent(Unique.class)) {
+                        sb.append(" UNIQUE");
+                    }
+                }
             }
         }
         sb.append(" ) ");
diff --git a/library/src/main/java/com/orm/dsl/Column.java b/library/src/main/java/com/orm/dsl/Column.java
new file mode 100644
index 00000000..27f5d67e
--- /dev/null
+++ b/library/src/main/java/com/orm/dsl/Column.java
@@ -0,0 +1,11 @@
+package com.orm.dsl;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+@Retention(RetentionPolicy.RUNTIME)
+public @interface Column {
+    String name();
+    boolean unique() default false;
+    boolean notNull() default false;
+}
\ No newline at end of file
diff --git a/library/src/main/java/com/orm/dsl/NotNull.java b/library/src/main/java/com/orm/dsl/NotNull.java
new file mode 100644
index 00000000..d3a9e172
--- /dev/null
+++ b/library/src/main/java/com/orm/dsl/NotNull.java
@@ -0,0 +1,8 @@
+package com.orm.dsl;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+@Retention(RetentionPolicy.RUNTIME)
+public @interface NotNull {
+}
\ No newline at end of file
diff --git a/library/src/main/java/com/orm/dsl/Unique.java b/library/src/main/java/com/orm/dsl/Unique.java
new file mode 100644
index 00000000..0b8a34ed
--- /dev/null
+++ b/library/src/main/java/com/orm/dsl/Unique.java
@@ -0,0 +1,8 @@
+package com.orm.dsl;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+@Retention(RetentionPolicy.RUNTIME)
+public @interface Unique {
+}
\ No newline at end of file
