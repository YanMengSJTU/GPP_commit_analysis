diff --git a/library/src/com/orm/SugarDb.java b/library/src/com/orm/SugarDb.java
index ceab2243..ecbf167f 100644
--- a/library/src/com/orm/SugarDb.java
+++ b/library/src/com/orm/SugarDb.java
@@ -25,6 +25,7 @@
 import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
 
+import com.orm.dsl.View;
 import com.orm.dsl.Column;
 import com.orm.dsl.NotNull;
 import com.orm.dsl.Unique;
@@ -154,9 +155,21 @@ public void onCreate(SQLiteDatabase sqLiteDatabase) {
 
     private <T extends SugarRecord<?>> void createDatabase(SQLiteDatabase sqLiteDatabase) {
         List<T> domainClasses = getDomainClasses(context);
+        List<T> views = new ArrayList<T>();
         for (T domain : domainClasses) {
+            if(domain.getClass().isAnnotationPresent(View.class))
+            {
+                views.add(domain);
+                continue; // Skip, tables must be present to create views
+            }
+
             createTable(domain, sqLiteDatabase);
         }
+
+        for (T view : views)
+        {
+            createView(view, sqLiteDatabase);
+        }
     }
 
     private <T extends SugarRecord<?>> void createTable(T table, SQLiteDatabase sqLiteDatabase) {
@@ -216,6 +229,19 @@ public void onCreate(SQLiteDatabase sqLiteDatabase) {
         if (!"".equals(sb.toString()))
             sqLiteDatabase.execSQL(sb.toString());
     }
+    
+    private <T extends SugarRecord<?>> void createView(T view, SQLiteDatabase sqLiteDatabase) {
+        if(!view.getClass().isAnnotationPresent(View.class)) {
+            throw new RuntimeException("Attempting to create VIEW on class " + view.getClass().getName() + " missing @View annotation");
+        }
+        if(view.getClass().isAnnotationPresent(Table.class)) {
+            throw new RuntimeException("Mutually exclusive annotations @View and @Table on " + view.getClass().getName());
+        }
+        Log.i("Sugar", "create view");
+        StringBuilder sb = new StringBuilder("CREATE VIEW ").append(view.getSqlName()).append(" AS ").append(view.getClass().getAnnotation(View.class).select());
+        Log.i("Sugar", "creating view " + view.getSqlName());
+        sqLiteDatabase.execSQL(sb.toString());
+    }
 
     @Override
     public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {
diff --git a/library/src/com/orm/SugarRecord.java b/library/src/com/orm/SugarRecord.java
index 30eba6ee..444ba8ed 100644
--- a/library/src/com/orm/SugarRecord.java
+++ b/library/src/com/orm/SugarRecord.java
@@ -8,6 +8,7 @@
 import android.text.TextUtils;
 import android.util.Log;
 import com.orm.dsl.Ignore;
+import com.orm.dls.View;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
@@ -388,6 +389,9 @@ public String getSqlName() {
 
 
     public static String getTableName(Class<?> type) {
+        if(type.isAnnotationPresent(View.class)) {
+          return type.isAnnotationPresent(View.class).name(); 
+        }
         return StringUtil.toSQLNameDefault(type.getSimpleName());
     }
 
diff --git a/library/src/com/orm/dsl/View.java b/library/src/com/orm/dsl/View.java
new file mode 100644
index 00000000..f5719cea
--- /dev/null
+++ b/library/src/com/orm/dsl/View.java
@@ -0,0 +1,11 @@
+package com.orm.dsl;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+@Retention(RetentionPolicy.RUNTIME)
+public @interface View
+{
+    String name();
+    String select();
+}
