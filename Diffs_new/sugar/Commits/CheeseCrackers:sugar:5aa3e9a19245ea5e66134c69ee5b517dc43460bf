diff --git a/library/src/com/orm/Database.java b/library/src/com/orm/Database.java
index 0896ee1f..4062a7da 100644
--- a/library/src/com/orm/Database.java
+++ b/library/src/com/orm/Database.java
@@ -2,23 +2,33 @@
 
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
+import android.util.Log;
 
 
 public class Database {
     private SugarDb sugarDb;
     private SQLiteDatabase sqLiteDatabase;
 
-    public Database(Context context){
-        this.sugarDb  = new SugarDb(context);
+    public Database(Context context) {
+        this.sugarDb = new SugarDb(context);
     }
 
 
     public synchronized SQLiteDatabase getDB() {
+
         if (this.sqLiteDatabase == null) {
-            this.sqLiteDatabase = this.sugarDb.getWritableDatabase();
+            Log.d("SeedingSugar", "Sqlitedatabase is null and hasn't been created yet");
+            this.sqLiteDatabase = this.sugarDb.importDatabase();
+
+            if (this.sqLiteDatabase == null) {
+                Log.d("SeedingSugar", "Database import failed");
+                this.sqLiteDatabase = this.sugarDb.getWritableDatabase();
+
+            } else {
+                Log.d("SeedingSugar", "Database import succeeded");
+            }
         }
 
         return this.sqLiteDatabase;
     }
-
 }
diff --git a/library/src/com/orm/SugarDb.java b/library/src/com/orm/SugarDb.java
index 0f859afc..f703ec5d 100644
--- a/library/src/com/orm/SugarDb.java
+++ b/library/src/com/orm/SugarDb.java
@@ -9,9 +9,12 @@
 import dalvik.system.DexFile;
 
 import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.io.OutputStream;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Modifier;
@@ -25,6 +28,12 @@
 
     public SugarDb(Context context) {
         super(context, SugarConfig.getDatabaseName(context), new SugarCursorFactory(getDebugEnabled(context)), getDatabaseVersion(context));
+
+//        super(context, context.getExternalFilesDir(null).getAbsolutePath() + "/" + SugarConfig.getDatabaseName(context),
+//                new SugarCursorFactory(getDebugEnabled(context)), getDatabaseVersion(context));
+
+        Log.d("SeedingSugar", "SugarDb initialized at " + context.getExternalFilesDir(null).getAbsolutePath() + "/" + SugarConfig.getDatabaseName(context));
+
         this.context = context;
 
     }
@@ -100,6 +109,43 @@ public void onCreate(SQLiteDatabase sqLiteDatabase) {
         createDatabase(sqLiteDatabase);
     }
 
+    public SQLiteDatabase importDatabase(){
+        final String dbName = SugarConfig.getDatabaseName(context);
+        final File dbFile = context.getDatabasePath(dbName);
+
+        SQLiteDatabase sqLiteDatabase = context.openOrCreateDatabase(dbName, Context.MODE_PRIVATE, null);
+        sqLiteDatabase.close();
+        sqLiteDatabase = null;
+
+        final File dstFile = context.getDatabasePath(dbName);
+
+        try {
+            final InputStream is = this.context.getAssets().open("database/" + dbName);
+            final OutputStream os = new FileOutputStream(dstFile);
+
+            final byte[] buffer = new byte[1024];
+            int count = -1;
+            long size = 0;
+
+            while ((count = is.read(buffer)) != -1) {
+                os.write(buffer, 0, count);
+                size += count;
+            }
+
+            os.flush();
+            is.close();
+            os.close();
+
+            sqLiteDatabase = SQLiteDatabase.openDatabase(dbFile.getAbsolutePath(), null, SQLiteDatabase.OPEN_READWRITE);
+
+        } catch (IOException e) {
+            Log.e("SeedingSugar", "Failed to import database", e);
+            return null;
+        }
+
+        return sqLiteDatabase;
+    }
+
     private <T extends SugarRecord<?>> void createDatabase(SQLiteDatabase sqLiteDatabase) {
         List<T> domainClasses = getDomainClasses(context);
         for (T domain : domainClasses) {
