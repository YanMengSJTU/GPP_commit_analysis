diff --git a/library/src/main/java/com/orm/SugarRecord.java b/library/src/main/java/com/orm/SugarRecord.java
index 4875142e..6b9e5613 100644
--- a/library/src/main/java/com/orm/SugarRecord.java
+++ b/library/src/main/java/com/orm/SugarRecord.java
@@ -126,15 +126,15 @@ private static SQLiteDatabase getSugarDataBase() {
         return deletedRows;
     }
 
-    public static <T extends SugarRecord> List<T> listAll(Class<T> type) {
+    public static <T> List<T> listAll(Class<T> type) {
         return find(type, null, null, null, null, null);
     }
 
-    public static <T extends SugarRecord> List<T> listAll(Class<T> type, String orderBy) {
+    public static <T> List<T> listAll(Class<T> type, String orderBy) {
         return find(type, null, null, null, orderBy, null);
     }
 
-    public static <T extends SugarRecord> T findById(Class<T> type, Long id) {
+    public static <T> T findById(Class<T> type, Long id) {
         Field idField = SchemaGenerator.findAnnotatedField(type, Id.class);
         if(idField == null)
             return null;
@@ -143,11 +143,11 @@ private static SQLiteDatabase getSugarDataBase() {
         return list.get(0);
     }
 
-    public static <T extends SugarRecord> T findById(Class<T> type, Integer id) {
+    public static <T> T findById(Class<T> type, Integer id) {
         return findById(type, Long.valueOf(id));
     }
 
-    public static <T extends SugarRecord> T findById(Class<T> type, String id) {
+    public static <T> T findById(Class<T> type, String id) {
         Field idField = SchemaGenerator.findAnnotatedField(type, Id.class);
         if(idField == null)
             return null;
@@ -156,7 +156,7 @@ private static SQLiteDatabase getSugarDataBase() {
         return list.get(0);
     }
 
-    public static <T extends SugarRecord> List<T> findById(Class<T> type, String... ids) {
+    public static <T> List<T> findById(Class<T> type, String... ids) {
         Field idField = SchemaGenerator.findAnnotatedField(type, Id.class);
         if(idField == null)
             return null;
@@ -164,7 +164,7 @@ private static SQLiteDatabase getSugarDataBase() {
         return find(type, whereClause, ids);
     }
 
-    public static <T extends SugarRecord> T first(Class<T>type) {
+    public static <T> T first(Class<T>type) {
         List<T> list = findWithQuery(type,
                 "SELECT * FROM " + NamingHelper.toTableName(type) + " ORDER BY ID ASC LIMIT 1");
         if (list.isEmpty()) {
@@ -173,7 +173,7 @@ private static SQLiteDatabase getSugarDataBase() {
         return list.get(0);
     }
 
-    public static <T extends SugarRecord> T last(Class<T>type) {
+    public static <T> T last(Class<T>type) {
         List<T> list = findWithQuery(type,
                 "SELECT * FROM " + NamingHelper.toTableName(type) + " ORDER BY ID DESC LIMIT 1");
         if (list.isEmpty()) {
@@ -182,30 +182,30 @@ private static SQLiteDatabase getSugarDataBase() {
         return list.get(0);
     }
 
-    public static <T extends SugarRecord> Iterator<T> findAll(Class<T> type) {
+    public static <T> Iterator<T> findAll(Class<T> type) {
         return findAsIterator(type, null, null, null, null, null);
     }
 
-    public static <T extends SugarRecord> Iterator<T> findAsIterator(Class<T> type, String whereClause, String... whereArgs) {
+    public static <T> Iterator<T> findAsIterator(Class<T> type, String whereClause, String... whereArgs) {
         return findAsIterator(type, whereClause, whereArgs, null, null, null);
     }
 
-    public static <T extends SugarRecord> Iterator<T> findWithQueryAsIterator(Class<T> type, String query, String... arguments) {
+    public static <T> Iterator<T> findWithQueryAsIterator(Class<T> type, String query, String... arguments) {
         Cursor cursor = getSugarDataBase().rawQuery(query, arguments);
         return new CursorIterator<>(type, cursor);
     }
 
-    public static <T extends SugarRecord> Iterator<T> findAsIterator(Class<T> type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
+    public static <T> Iterator<T> findAsIterator(Class<T> type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
         Cursor cursor = getSugarDataBase().query(NamingHelper.toTableName(type), null, whereClause, whereArgs,
                 groupBy, null, orderBy, limit);
         return new CursorIterator<>(type, cursor);
     }
 
-    public static <T extends SugarRecord> List<T> find(Class<T> type, String whereClause, String... whereArgs) {
+    public static <T> List<T> find(Class<T> type, String whereClause, String... whereArgs) {
         return find(type, whereClause, whereArgs, null, null, null);
     }
 
-    public static <T extends SugarRecord> List<T> findWithQuery(Class<T> type, String query, String... arguments) {
+    public static <T> List<T> findWithQuery(Class<T> type, String query, String... arguments) {
         Cursor cursor = getSugarDataBase().rawQuery(query, arguments);
 
         return getEntitiesFromCursor(cursor, type);
@@ -215,7 +215,7 @@ public static void executeQuery(String query, String... arguments) {
         getSugarDataBase().execSQL(query, arguments);
     }
 
-    public static <T extends SugarRecord> List<T> find(Class<T> type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
+    public static <T> List<T> find(Class<T> type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
 
         String args[];
         args = (whereArgs == null) ? null : replaceArgs(whereArgs);
@@ -226,7 +226,7 @@ public static void executeQuery(String query, String... arguments) {
         return getEntitiesFromCursor(cursor, type);
     }
 
-    public static <T extends SugarRecord> List<T> findOneToMany(Class<T> type, String relationFieldName, Object relationObject, Long relationObjectId) {
+    public static <T> List<T> findOneToMany(Class<T> type, String relationFieldName, Object relationObject, Long relationObjectId) {
         String args[] = { String.valueOf(relationObjectId) };
         String whereClause = NamingHelper.toSQLNameDefault(relationFieldName) + " = ?";
 
@@ -236,11 +236,11 @@ public static void executeQuery(String query, String... arguments) {
         return getEntitiesFromCursor(cursor, type, relationFieldName, relationObject);
     }
 
-    public static <T extends SugarRecord> List<T> getEntitiesFromCursor(Cursor cursor, Class<T> type){
+    public static <T> List<T> getEntitiesFromCursor(Cursor cursor, Class<T> type){
         return getEntitiesFromCursor(cursor, type, null, null);
     }
 
-    public static <T extends SugarRecord> T getEntityFromCursor(Cursor cursor, Class<T> type){
+    public static <T> T getEntityFromCursor(Cursor cursor, Class<T> type){
         T entity = null;
         try {
             entity = type.getDeclaredConstructor().newInstance();
@@ -268,7 +268,7 @@ public static void executeQuery(String query, String... arguments) {
                     idField.set(entity, id);
                 }
             }
-            entity.onLoad();
+            ((SugarRecord)entity).onLoad();
             return entity;
         }catch (Exception e){
             e.printStackTrace();
@@ -276,7 +276,7 @@ public static void executeQuery(String query, String... arguments) {
         return entity;
     }
 
-    public static <T extends SugarRecord> List<T> getEntitiesFromCursor(Cursor cursor, Class<T> type, String relationFieldName, Object relationObject){
+    public static <T> List<T> getEntitiesFromCursor(Cursor cursor, Class<T> type, String relationFieldName, Object relationObject){
         T entity;
         List<T> result = new ArrayList<>();
         try {
@@ -361,7 +361,15 @@ public static long save(Object object) {
         return save(getSugarDataBase(), object);
     }
 
-    static long save(SQLiteDatabase db, Object object) {
+    public static long save(Object object, ContentValues overrideValues) {
+        return save(getSugarDataBase(), object, overrideValues);
+    }
+
+    static long save(SQLiteDatabase db, Object object){
+        return save(db, object, null);
+    }
+
+    static long save(SQLiteDatabase db, Object object, ContentValues overrideValues) {
         Map<Object, Object> entitiesMap = getSugarContext().getEntitiesMap();
         List<Field> columns = ReflectionUtil.getTableFields(object.getClass());
         ContentValues values = new ContentValues(columns.size());
@@ -386,6 +394,10 @@ static long save(SQLiteDatabase db, Object object) {
             }
         }
 
+        if(overrideValues!=null){
+            values.putAll(overrideValues);
+        }
+
         long id = db.insertWithOnConflict(NamingHelper.toTableName(object.getClass()), null, values,
                 SQLiteDatabase.CONFLICT_REPLACE);
 
@@ -531,6 +543,10 @@ public long save() {
         return save(getSugarDataBase(), this);
     }
 
+    public long save(ContentValues override){
+        return save(getSugarDataBase(), this, override);
+    }
+
     public long update() {
         return update(getSugarDataBase(), this);
     }
@@ -559,7 +575,7 @@ public String getIdField(){
         return null;
     }
 
-    static class CursorIterator<E extends SugarRecord> implements Iterator<E> {
+    static class CursorIterator<E> implements Iterator<E> {
         Class<E> type;
         Cursor cursor;
 
@@ -591,7 +607,7 @@ public E next() {
                         .withObject(entity)
                         .withEntitiesMap(getSugarContext().getEntitiesMap())
                         .inflate();
-                entity.onLoad();
+                ((SugarRecord)entity).onLoad();
             } catch (Exception e) {
                 e.printStackTrace();
             } finally {
