diff --git a/library/libs/joda-time-2.2.jar b/library/libs/joda-time-2.2.jar
new file mode 100755
index 00000000..69fa9240
Binary files /dev/null and b/library/libs/joda-time-2.2.jar differ
diff --git a/library/src/com/orm/QueryBuilder.java b/library/src/com/orm/QueryBuilder.java
old mode 100644
new mode 100755
index 6e44f395..ddd7e9af
--- a/library/src/com/orm/QueryBuilder.java
+++ b/library/src/com/orm/QueryBuilder.java
@@ -1,28 +1,30 @@
 package com.orm;
 
+import org.joda.time.DateTime;
+
+import java.util.Arrays;
+import java.util.List;
+
 public class QueryBuilder {
 
+    private static List longTypes = Arrays.asList(Boolean.class, Integer.class, Long.class, java.util.Date.class,
+                                                  java.util.Calendar.class, java.sql.Date.class, DateTime.class);
+    private static List longTypeStrings = Arrays.asList(Boolean.TYPE, Integer.TYPE, Long.TYPE);
+    private static List floatTypes = Arrays.asList(Double.class, Float.class);
+    private static List floatTypeStrings = Arrays.asList(Double.TYPE, Float.TYPE);
+    private static List textTypes = Arrays.asList(String.class, Character.class);
+    private static List textTypeStrings = Arrays.asList(Character.TYPE);
+
     public static String getColumnType(Class type) {
-        if ((type.equals(Boolean.class)) ||
-                (type.equals(Boolean.TYPE)) ||
-                (type.equals(java.util.Date.class)) ||
-                (type.equals(java.sql.Date.class)) ||
-                (type.equals(Integer.class)) ||
-                (type.equals(Integer.TYPE)) ||
-                (type.equals(Long.class)) ||
-                (type.equals(Long.TYPE)) || (
-                (!type.isPrimitive()) &&
-                        (type.getSuperclass() != null) &&
-                        (type.getSuperclass().equals(SugarRecord.class)))) {
+        if (longTypes.contains(type) || longTypeStrings.contains(type)) {
             return "INTEGER";
         }
 
-        if ((type.equals(Double.class)) || (type.equals(Double.TYPE)) || (type.equals(Float.class)) ||
-                (type.equals(Float.TYPE))) {
+        if (floatTypes.contains(type) || floatTypeStrings.contains(type)) {
             return "FLOAT";
         }
 
-        if ((type.equals(String.class)) || (type.equals(Character.TYPE))) {
+        if (textTypes.contains(type) || textTypeStrings.contains(type)) {
             return "TEXT";
         }
 
diff --git a/library/src/com/orm/SugarRecord.java b/library/src/com/orm/SugarRecord.java
old mode 100644
new mode 100755
index c5bb893d..5d157b8f
--- a/library/src/com/orm/SugarRecord.java
+++ b/library/src/com/orm/SugarRecord.java
@@ -7,13 +7,12 @@
 import android.database.sqlite.SQLiteException;
 import android.util.Log;
 import com.orm.dsl.Ignore;
+import org.joda.time.DateMidnight;
+import org.joda.time.DateTime;
 
 import java.lang.reflect.Field;
 import java.sql.Timestamp;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 
 import static com.orm.SugarApp.getSugarContext;
 
@@ -69,8 +68,26 @@ public void save() {
                                     : "0");
                 } else {
                     if (!"id".equalsIgnoreCase(column.getName())) {
-                        values.put(StringUtil.toSQLName(column.getName()),
-                                String.valueOf(column.get(this)));
+                        if (DateTime.class.equals(column.getType())) {
+                            values.put(StringUtil.toSQLName(column.getName()),
+                                       ((DateTime) column.get(this)).getMillis());
+                        }
+                        if (DateMidnight.class.equals(column.getType())) {
+                            values.put(StringUtil.toSQLName(column.getName()),
+                                       ((DateMidnight) column.get(this)).getMillis());
+                        }
+                        else if (Date.class.equals(column.getType())) {
+                            values.put(StringUtil.toSQLName(column.getName()),
+                                       ((Date) column.get(this)).getTime());
+                        }
+                        else if (Calendar.class.equals(column.getType())) {
+                            values.put(StringUtil.toSQLName(column.getName()),
+                                       ((Calendar) column.get(this)).getTimeInMillis());
+                        }
+                        else {
+                            values.put(StringUtil.toSQLName(column.getName()),
+                                    String.valueOf(column.get(this)));
+                        }
                     }
                 }
 
@@ -193,6 +210,20 @@ void inflate(Cursor cursor) {
                 } else if (typeString.equals("java.sql.Timestamp")) {
                     long l = cursor.getLong(cursor.getColumnIndex(colName));
                     field.set(this, new Timestamp(l));
+                } else if (typeString.equals("java.util.Date")) {
+                    long l = cursor.getLong(cursor.getColumnIndex(colName));
+                    field.set(this, new Date(l));
+                } else if (typeString.equals("java.util.Calendar")) {
+                    long l = cursor.getLong(cursor.getColumnIndex(colName));
+                    Calendar c = Calendar.getInstance();
+                    c.setTimeInMillis(l);
+                    field.set(this, c);
+                } else if (typeString.equals("org.joda.time.DateTime")) {
+                    long l = cursor.getLong(cursor.getColumnIndex(colName));
+                    field.set(this, new DateTime(l));
+                } else if (typeString.equals("org.joda.time.DateMidnight")) {
+                    long l = cursor.getLong(cursor.getColumnIndex(colName));
+                    field.set(this, new DateMidnight(l));
                 } else if (SugarRecord.class.isAssignableFrom(field.getType())) {
                     long id = cursor.getLong(cursor.getColumnIndex(colName));
                     if (id > 0)
