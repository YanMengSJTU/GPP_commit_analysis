diff --git a/library/build.gradle b/library/build.gradle
index 4042c614..2f7566a1 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -24,7 +24,6 @@ android {
 dependencies {
     testCompile 'junit:junit:4.12'
     testCompile 'org.robolectric:robolectric:3.0'
-    compile 'io.reactivex:rxjava:1.1.3'
 }
 
 task libraryJar(type: Jar) {
diff --git a/library/src/main/java/com/orm/SugarRecord.java b/library/src/main/java/com/orm/SugarRecord.java
index 4e4f6a21..6ef645cc 100644
--- a/library/src/main/java/com/orm/SugarRecord.java
+++ b/library/src/main/java/com/orm/SugarRecord.java
@@ -26,8 +26,6 @@
 import java.util.NoSuchElementException;
 
 import static com.orm.SugarContext.getSugarContext;
-import rx.Observable;
-import rx.Subscriber;
 
 public class SugarRecord {
     public static final String SUGAR = "Sugar";
@@ -144,17 +142,6 @@ private static SQLiteDatabase getSugarDataBase() {
         return findById(type, Long.valueOf(id));
     }
 
-    public static <T> Observable<T> findByIdRx(final Class<T> type, final Integer id) {
-        return Observable.create(new Observable.OnSubscribe<T>() {
-            @Override
-            public void call(Subscriber<? super T> subscriber) {
-                subscriber.onStart();
-                subscriber.onNext(findById(type, Long.valueOf(id)));
-                subscriber.onCompleted();
-            }
-        });
-    }
-
     public static <T> List<T> findById(Class<T> type, String[] ids) {
         String whereClause = "id IN (" + QueryBuilder.generatePlaceholders(ids.length) + ")";
         return find(type, whereClause, ids);
@@ -182,20 +169,6 @@ public void call(Subscriber<? super T> subscriber) {
         return findAsIterator(type, null, null, null, null, null);
     }
 
-    public static <T> Observable<T> findAllRx(final Class<T> type) {
-        return Observable.create(new Observable.OnSubscribe<T>() {
-            @Override
-            public void call(Subscriber<? super T> subscriber) {
-                subscriber.onStart();
-                Iterator<T> results = findAsIterator(type, null, null, null, null, null);
-                while (results.hasNext()) {
-                    subscriber.onNext(results.next());
-                }
-                subscriber.onCompleted();
-            }
-        });
-    }
-
     public static <T> Iterator<T> findAsIterator(Class<T> type, String whereClause, String... whereArgs) {
         return findAsIterator(type, whereClause, whereArgs, null, null, null);
     }
@@ -215,20 +188,6 @@ public void call(Subscriber<? super T> subscriber) {
         return find(type, whereClause, whereArgs, null, null, null);
     }
 
-    public static <T> Observable<T> findRx(final Class<T> type, final String whereClause, final String... whereArgs) {
-        return Observable.create(new Observable.OnSubscribe<T>() {
-            @Override
-            public void call(Subscriber<? super T> subscriber) {
-                subscriber.onStart();
-                List<T> results = find(type, whereClause, whereArgs, null, null, null);
-                for (T r : results) {
-                    subscriber.onNext(r);
-                }
-                subscriber.onCompleted();
-            }
-        });
-    }
-
     public static <T> List<T> findWithQuery(Class<T> type, String query, String... arguments) {
         Cursor cursor = getSugarDataBase().rawQuery(query, arguments);
 
@@ -250,20 +209,6 @@ public static void executeQuery(String query, String... arguments) {
         return getEntitiesFromCursor(cursor, type);
     }
 
-    public static <T> Observable<List<T>> findRx(final Class<T> type, final String whereClause,
-                                                 final String[] whereArgs, final String groupBy,
-                                                 final String orderBy, final String limit) {
-        return Observable.create(new Observable.OnSubscribe<List<T>>() {
-            @Override
-            public void call(Subscriber<? super List<T>> subscriber) {
-                subscriber.onStart();
-                List<T> results = find(type, whereClause, whereArgs, groupBy, orderBy, limit);
-                subscriber.onNext(results);
-                subscriber.onCompleted();
-            }
-        });
-    }
-
     public static <T> List<T> getEntitiesFromCursor(Cursor cursor, Class<T> type){
         T entity;
         List<T> result = new ArrayList<>();
