diff --git a/build.gradle b/build.gradle
index 26b447b0..2504c317 100644
--- a/build.gradle
+++ b/build.gradle
@@ -31,7 +31,7 @@ subprojects { proj ->
     apply plugin: 'jacoco'
 
     jacoco {
-        version "0.7.1.201405082137"
+        version "0.7.1.201508030944"
     }
 
     task jacocoTestReport(type: JacocoReport, dependsOn: "testDebug") {
diff --git a/library/src/main/java/com/orm/SchemaGenerator.java b/library/src/main/java/com/orm/SchemaGenerator.java
index ce4ae437..9c332ff0 100644
--- a/library/src/main/java/com/orm/SchemaGenerator.java
+++ b/library/src/main/java/com/orm/SchemaGenerator.java
@@ -41,6 +41,14 @@ public void createDatabase(SQLiteDatabase sqLiteDatabase) {
         }
     }
 
+    public void clearDb(SQLiteDatabase sqLiteDatabase) {
+        List<Class> domainClasses = getDomainClasses(context);
+        for (Class domain : domainClasses) {
+            clearTable(domain, sqLiteDatabase);
+        }
+        sqLiteDatabase.rawQuery("", new String[0]);
+    }
+
     public void doUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {
         List<Class> domainClasses = getDomainClasses(context);
         String sql = "select count(*) from sqlite_master where type='table' and name='%s';";
@@ -104,6 +112,44 @@ private void executeScript(SQLiteDatabase db, String file) {
         Log.i("Sugar", "Script executed");
     }
 
+    private void clearTable(Class<?> table, SQLiteDatabase sqLiteDatabase) {
+        Log.i("Sugar", "Clear table");
+        List<Field> fields = ReflectionUtil.getTableFields(table);
+        String tableName = NamingHelper.toSQLName(table);
+        StringBuilder sb = new StringBuilder("DELETE FROM ");
+        sb.append(tableName).append("; VACUUM;");
+
+        for (Field column : fields) {
+            //Create join table for all relationships. This will prevent issues with migrations (yes, unnecessary joins will be slower)
+            if(column.isAnnotationPresent(Relationship.class)) {
+                Relationship relationship =  column.getAnnotation(Relationship.class);
+                clearJoinTable(relationship, sqLiteDatabase);
+            }
+        }
+
+        if (!"".equals(sb.toString())) {
+            try {
+                sqLiteDatabase.execSQL(sb.toString());
+            } catch (SQLException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    private void clearJoinTable(Relationship relationship, SQLiteDatabase sqLiteDatabase) {
+        Log.i("Sugar", "Clearing Join table");
+        StringBuilder sb = new StringBuilder("DELETE FROM ");
+        sb.append(relationship.joinTable()).append("; VACUUM;");
+
+        if (!"".equals(sb.toString())) {
+            try {
+                sqLiteDatabase.execSQL(sb.toString());
+            } catch (SQLException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
     private void createTable(Class<?> table, SQLiteDatabase sqLiteDatabase) {
         Log.i("Sugar", "Create table");
         List<Field> fields = ReflectionUtil.getTableFields(table);
diff --git a/library/src/main/java/com/orm/SugarContext.java b/library/src/main/java/com/orm/SugarContext.java
index 61acf813..58aa4737 100644
--- a/library/src/main/java/com/orm/SugarContext.java
+++ b/library/src/main/java/com/orm/SugarContext.java
@@ -37,6 +37,10 @@ public static void terminate() {
         instance.doTerminate();
     }
 
+    public void clearDb() {
+        instance.getSugarDb().clearDb();
+    }
+
     /*
      * Per issue #106 on Github, this method won't be called in
      * any real Android device. This method is used purely in
diff --git a/library/src/main/java/com/orm/SugarDb.java b/library/src/main/java/com/orm/SugarDb.java
index a15110a3..2e3c2e58 100644
--- a/library/src/main/java/com/orm/SugarDb.java
+++ b/library/src/main/java/com/orm/SugarDb.java
@@ -39,4 +39,8 @@ public synchronized SQLiteDatabase getDB() {
         return this.sqLiteDatabase;
     }
 
+    public void clearDb() {
+        schemaGenerator.clearDb(sqLiteDatabase);
+    }
+
 }
