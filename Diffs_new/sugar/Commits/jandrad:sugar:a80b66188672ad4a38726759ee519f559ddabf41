diff --git a/example/build.gradle b/example/build.gradle
index 084b9d2d..696357db 100644
--- a/example/build.gradle
+++ b/example/build.gradle
@@ -5,7 +5,7 @@ android {
 
     defaultConfig {
         applicationId "com.example"
-        minSdkVersion 9
+        minSdkVersion 10
         targetSdkVersion 23
     }
 
diff --git a/example/src/main/java/com/example/activities/SugarActivity.java b/example/src/main/java/com/example/activities/SugarActivity.java
index 81044546..2cd87568 100644
--- a/example/src/main/java/com/example/activities/SugarActivity.java
+++ b/example/src/main/java/com/example/activities/SugarActivity.java
@@ -5,6 +5,8 @@
 
 import com.example.R;
 
+import net.sqlcipher.database.SQLiteDatabase;
+
 
 public class SugarActivity extends Activity
 {
@@ -14,5 +16,7 @@ public void onCreate(Bundle savedInstanceState)
     {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.main);
+
+        SQLiteDatabase.loadLibs(this);
     }
 }
diff --git a/library/build.gradle b/library/build.gradle
index ac7ffb66..54e9eef6 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -6,7 +6,7 @@ android {
     buildToolsVersion "23.0.2"
 
     defaultConfig {
-        minSdkVersion 9
+        minSdkVersion 10
         targetSdkVersion 23
     }
 
@@ -27,6 +27,8 @@ android {
 
 dependencies {
     testCompile 'junit:junit:4.12'
+    compile 'net.zetetic:android-database-sqlcipher:3.4.0'
+    compile 'com.scottyab:secure-preferences-lib:0.1.4'
 }
 
 task libraryJar(type: Jar) {
diff --git a/library/src/main/java/com/orm/SchemaGenerator.java b/library/src/main/java/com/orm/SchemaGenerator.java
index f5fd4f2a..d88204bd 100644
--- a/library/src/main/java/com/orm/SchemaGenerator.java
+++ b/library/src/main/java/com/orm/SchemaGenerator.java
@@ -1,9 +1,6 @@
 package com.orm;
 
 import android.content.Context;
-import android.database.Cursor;
-import android.database.SQLException;
-import android.database.sqlite.SQLiteDatabase;
 import android.util.Log;
 
 import com.orm.dsl.Column;
@@ -16,6 +13,10 @@
 import com.orm.util.QueryBuilder;
 import com.orm.util.ReflectionUtil;
 
+import net.sqlcipher.Cursor;
+import net.sqlcipher.SQLException;
+import net.sqlcipher.database.SQLiteDatabase;
+
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStream;
diff --git a/library/src/main/java/com/orm/SugarDb.java b/library/src/main/java/com/orm/SugarDb.java
index 56528f96..eadd7f26 100644
--- a/library/src/main/java/com/orm/SugarDb.java
+++ b/library/src/main/java/com/orm/SugarDb.java
@@ -1,13 +1,15 @@
 package com.orm;
 
 import android.content.Context;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
 
 import com.orm.util.ManifestHelper;
+import com.orm.util.SecureHelper;
 import com.orm.util.SugarCursorFactory;
 
+import net.sqlcipher.database.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteOpenHelper;
+
 import static com.orm.util.ManifestHelper.getDatabaseVersion;
 import static com.orm.util.ManifestHelper.getDebugEnabled;
 
@@ -15,12 +17,14 @@
 
     private final SchemaGenerator schemaGenerator;
     private SQLiteDatabase sqLiteDatabase;
+    private SecureHelper secureHelper;
     private int openedConnections = 0;
 
     public SugarDb(Context context) {
         super(context, ManifestHelper.getDatabaseName(context),
                 new SugarCursorFactory(getDebugEnabled(context)), getDatabaseVersion(context));
         schemaGenerator = new SchemaGenerator(context);
+        secureHelper = new SecureHelper(context);
     }
 
     @Override
@@ -35,17 +39,17 @@ public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVers
 
     public synchronized SQLiteDatabase getDB() {
         if (this.sqLiteDatabase == null) {
-            this.sqLiteDatabase = getWritableDatabase();
+            this.sqLiteDatabase = getWritableDatabase(secureHelper.getKey());
         }
 
         return this.sqLiteDatabase;
     }
 
     @Override
-    public synchronized SQLiteDatabase getReadableDatabase() {
+    public synchronized SQLiteDatabase getReadableDatabase(String password) {
         Log.d("SUGAR", "getReadableDatabase");
         openedConnections++;
-        return super.getReadableDatabase();
+        return super.getReadableDatabase(password);
     }
 
     @Override
diff --git a/library/src/main/java/com/orm/SugarRecord.java b/library/src/main/java/com/orm/SugarRecord.java
index 4b9e04ef..a6b7f60b 100644
--- a/library/src/main/java/com/orm/SugarRecord.java
+++ b/library/src/main/java/com/orm/SugarRecord.java
@@ -1,10 +1,6 @@
 package com.orm;
 
 import android.content.ContentValues;
-import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteException;
-import android.database.sqlite.SQLiteStatement;
 import android.text.TextUtils;
 import android.util.Log;
 
@@ -15,6 +11,11 @@
 import com.orm.util.ReflectionUtil;
 import com.orm.util.SugarCursor;
 
+import net.sqlcipher.Cursor;
+import net.sqlcipher.database.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteException;
+import net.sqlcipher.database.SQLiteStatement;
+
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.Arrays;
diff --git a/library/src/main/java/com/orm/SugarTransactionHelper.java b/library/src/main/java/com/orm/SugarTransactionHelper.java
index 7c00812c..729a74f8 100644
--- a/library/src/main/java/com/orm/SugarTransactionHelper.java
+++ b/library/src/main/java/com/orm/SugarTransactionHelper.java
@@ -1,8 +1,9 @@
 package com.orm;
 
-import android.database.sqlite.SQLiteDatabase;
 import android.util.Log;
 
+import net.sqlcipher.database.SQLiteDatabase;
+
 public class SugarTransactionHelper {
 
     public static void doInTransaction(SugarTransactionHelper.Callback callback) {
diff --git a/library/src/main/java/com/orm/util/SecureHelper.java b/library/src/main/java/com/orm/util/SecureHelper.java
new file mode 100644
index 00000000..fc0c782e
--- /dev/null
+++ b/library/src/main/java/com/orm/util/SecureHelper.java
@@ -0,0 +1,60 @@
+package com.orm.util;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+
+import com.securepreferences.SecurePreferences;
+
+import java.math.BigInteger;
+import java.security.NoSuchAlgorithmException;
+import java.security.SecureRandom;
+
+import javax.crypto.KeyGenerator;
+import javax.crypto.SecretKey;
+
+/**
+ * Created by jandrad on 2/05/16.
+ */
+public final class SecureHelper {
+
+	private Context context;
+
+	public SecureHelper(Context context) {
+		this.context = context;
+	}
+
+	private SecretKey generateKey() throws NoSuchAlgorithmException {
+		// Generate a 256-bit key
+		final int outputKeyLength = 256;
+
+		SecureRandom secureRandom = new SecureRandom();
+		KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
+		keyGenerator.init(outputKeyLength, secureRandom);
+		SecretKey key = keyGenerator.generateKey();
+		return key;
+	}
+
+	public void storeKey(String key) {
+		SharedPreferences prefs = new SecurePreferences(context);
+		prefs.edit().putString("key", key.toString());
+	}
+
+	public String getKey() {
+		SharedPreferences prefs = new SecurePreferences(context);
+		String key = prefs.getString("key", null);
+		if (key == null) {
+			try {
+				SecretKey secretKey = generateKey();
+				key = secretKey.toString();
+			} catch (Exception e) {
+				e.printStackTrace();
+				SecureRandom random = new SecureRandom();
+				key = new BigInteger(130, random).toString(32);
+			}
+
+			storeKey(key);
+		}
+
+		return key;
+	}
+}
diff --git a/library/src/main/java/com/orm/util/SugarCursor.java b/library/src/main/java/com/orm/util/SugarCursor.java
index e326f49b..317ac875 100644
--- a/library/src/main/java/com/orm/util/SugarCursor.java
+++ b/library/src/main/java/com/orm/util/SugarCursor.java
@@ -1,7 +1,8 @@
 package com.orm.util;
 
-import android.database.Cursor;
-import android.database.CursorWrapper;
+
+import net.sqlcipher.Cursor;
+import net.sqlcipher.CursorWrapper;
 
 public class SugarCursor extends CursorWrapper {
     public SugarCursor(Cursor cursor) {
diff --git a/library/src/main/java/com/orm/util/SugarCursorFactory.java b/library/src/main/java/com/orm/util/SugarCursorFactory.java
index 12706516..55ca1b10 100644
--- a/library/src/main/java/com/orm/util/SugarCursorFactory.java
+++ b/library/src/main/java/com/orm/util/SugarCursorFactory.java
@@ -1,12 +1,13 @@
 package com.orm.util;
 
-import android.database.Cursor;
-import android.database.sqlite.SQLiteCursor;
-import android.database.sqlite.SQLiteCursorDriver;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteQuery;
 import android.util.Log;
 
+import net.sqlcipher.Cursor;
+import net.sqlcipher.database.SQLiteCursor;
+import net.sqlcipher.database.SQLiteCursorDriver;
+import net.sqlcipher.database.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteQuery;
+
 public class SugarCursorFactory implements SQLiteDatabase.CursorFactory {
 
     private boolean debugEnabled;
@@ -22,9 +23,9 @@ public SugarCursorFactory(boolean debugEnabled) {
 
     @SuppressWarnings("deprecation")
     public Cursor newCursor(SQLiteDatabase sqLiteDatabase,
-            SQLiteCursorDriver sqLiteCursorDriver,
-            String editTable,
-            SQLiteQuery sqLiteQuery) {
+                            SQLiteCursorDriver sqLiteCursorDriver,
+                            String editTable,
+                            SQLiteQuery sqLiteQuery) {
 
         if (debugEnabled) {
             Log.d("SQL Log", sqLiteQuery.toString());
