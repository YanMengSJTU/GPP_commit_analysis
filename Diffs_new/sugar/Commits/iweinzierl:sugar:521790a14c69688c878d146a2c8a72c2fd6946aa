diff --git a/library/src/main/java/com/orm/SugarContext.java b/library/src/main/java/com/orm/SugarContext.java
index be28c9c9..cb8672c8 100644
--- a/library/src/main/java/com/orm/SugarContext.java
+++ b/library/src/main/java/com/orm/SugarContext.java
@@ -4,6 +4,7 @@
 
 import com.google.common.collect.MapMaker;
 import com.orm.entity.EntityListenerManager;
+import com.orm.serializer.EntitySerializerManager;
 
 import java.util.concurrent.ConcurrentMap;
 
@@ -14,12 +15,14 @@
     private Context context;
     private ConcurrentMap<Object, Long> entitiesMap;
     private EntityListenerManager entitylistenerManager;
+    private EntitySerializerManager entitySerializerManager;
 
     private SugarContext(Context context) {
         this.context = context;
         this.sugarDb = new SugarDb(context);
         this.entitiesMap = new MapMaker().weakKeys().makeMap();
         this.entitylistenerManager = new EntityListenerManager(context);
+        this.entitySerializerManager = new EntitySerializerManager(context);
     }
 
     public static SugarContext getSugarContext() {
@@ -63,4 +66,8 @@ protected SugarDb getSugarDb() {
     public EntityListenerManager getEntitylistenerManager() {
         return entitylistenerManager;
     }
+
+    public EntitySerializerManager getEntitySerializerManager() {
+        return entitySerializerManager;
+    }
 }
diff --git a/library/src/main/java/com/orm/SugarRecord.java b/library/src/main/java/com/orm/SugarRecord.java
index ab06896f..cc224a8d 100644
--- a/library/src/main/java/com/orm/SugarRecord.java
+++ b/library/src/main/java/com/orm/SugarRecord.java
@@ -9,11 +9,15 @@
 import android.util.Log;
 
 import com.orm.dsl.Table;
+import com.orm.entity.annotation.PostPersist;
+import com.orm.entity.annotation.PostRemove;
+import com.orm.entity.annotation.PrePersist;
+import com.orm.entity.annotation.PreRemove;
+import com.orm.serializer.EntitySerializerManager;
 import com.orm.util.NamingHelper;
-import com.orm.util.ReflectionUtil;
 import com.orm.util.QueryBuilder;
+import com.orm.util.ReflectionUtil;
 
-import java.lang.String;
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -23,11 +27,6 @@
 import java.util.Map;
 import java.util.NoSuchElementException;
 
-import com.orm.entity.annotation.PostPersist;
-import com.orm.entity.annotation.PostRemove;
-import com.orm.entity.annotation.PrePersist;
-import com.orm.entity.annotation.PreRemove;
-
 import static com.orm.SugarContext.getSugarContext;
 
 public class SugarRecord {
@@ -55,7 +54,7 @@
         try {
             sqLiteDatabase.beginTransaction();
             sqLiteDatabase.setLockingEnabled(false);
-            for (T object: objects) {
+            for (T object : objects) {
                 save(object);
             }
             sqLiteDatabase.setTransactionSuccessful();
@@ -118,7 +117,7 @@
         return find(type, whereClause, ids);
     }
 
-    public static <T> T first(Class<T>type) {
+    public static <T> T first(Class<T> type) {
         List<T> list = findWithQuery(type,
                 "SELECT * FROM " + NamingHelper.toSQLName(type) + " ORDER BY ID ASC LIMIT 1");
         if (list.isEmpty()) {
@@ -127,7 +126,7 @@
         return list.get(0);
     }
 
-    public static <T> T last(Class<T>type) {
+    public static <T> T last(Class<T> type) {
         List<T> list = findWithQuery(type,
                 "SELECT * FROM " + NamingHelper.toSQLName(type) + " ORDER BY ID DESC LIMIT 1");
         if (list.isEmpty()) {
@@ -173,7 +172,8 @@
         try {
             while (c.moveToNext()) {
                 entity = type.getDeclaredConstructor().newInstance();
-                inflate(c, entity, getSugarContext().getEntitiesMap());
+                inflate(c, entity, getSugarContext().getEntitiesMap(),
+                        getSugarContext().getEntitySerializerManager());
                 toRet.add(entity);
             }
         } catch (Exception e) {
@@ -199,7 +199,8 @@ public static void executeQuery(String query, String... arguments) {
         try {
             while (c.moveToNext()) {
                 entity = type.getDeclaredConstructor().newInstance();
-                inflate(c, entity, getSugarContext().getEntitiesMap());
+                inflate(c, entity, getSugarContext().getEntitiesMap(),
+                        getSugarContext().getEntitySerializerManager());
                 toRet.add(entity);
             }
         } catch (Exception e) {
@@ -215,7 +216,7 @@ public static void executeQuery(String query, String... arguments) {
     }
 
     public static <T> long count(Class<?> type, String whereClause, String[] whereArgs) {
-    	return count(type, whereClause, whereArgs, null, null, null);
+        return count(type, whereClause, whereArgs, null, null, null);
     }
 
     public static <T> long count(Class<?> type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
@@ -223,7 +224,7 @@ public static void executeQuery(String query, String... arguments) {
         SQLiteDatabase sqLiteDatabase = db.getDB();
 
         long toRet = -1;
-        String filter = (!TextUtils.isEmpty(whereClause)) ? " where "  + whereClause : "";
+        String filter = (!TextUtils.isEmpty(whereClause)) ? " where " + whereClause : "";
         SQLiteStatement sqliteStatement;
         try {
             sqliteStatement = sqLiteDatabase.compileStatement("SELECT count(*) FROM " + NamingHelper.toSQLName(type) + filter);
@@ -259,7 +260,8 @@ static long save(SQLiteDatabase db, Object object) {
         ContentValues values = new ContentValues(columns.size());
         Field idField = null;
         for (Field column : columns) {
-            ReflectionUtil.addFieldValueToColumn(values, column, object, entitiesMap);
+            EntitySerializerManager serializerManager = getSugarContext().getEntitySerializerManager();
+            ReflectionUtil.addFieldValueToColumn(values, column, object, entitiesMap, serializerManager);
             if (column.getName().equals("id")) {
                 idField = column;
             }
@@ -267,7 +269,7 @@ static long save(SQLiteDatabase db, Object object) {
 
         boolean isSugarEntity = isSugarEntity(object.getClass());
         if (isSugarEntity && entitiesMap.containsKey(object)) {
-                values.put("id", entitiesMap.get(object));
+            values.put("id", entitiesMap.get(object));
         }
 
         long id = db.insertWithOnConflict(NamingHelper.toSQLName(object.getClass()), null, values,
@@ -299,14 +301,16 @@ public static boolean isSugarEntity(Class<?> objectClass) {
         return objectClass.isAnnotationPresent(Table.class) || SugarRecord.class.isAssignableFrom(objectClass);
     }
 
-    private static void inflate(Cursor cursor, Object object, Map<Object, Long> entitiesMap) {
+    private static void inflate(Cursor cursor, Object object, Map<Object, Long> entitiesMap,
+                                EntitySerializerManager entitySerializerManager) {
+
         List<Field> columns = ReflectionUtil.getTableFields(object.getClass());
         if (!entitiesMap.containsKey(object)) {
             entitiesMap.put(object, cursor.getLong(cursor.getColumnIndex(("ID"))));
         }
 
         for (Field field : columns) {
-        	field.setAccessible(true);
+            field.setAccessible(true);
             Class<?> fieldType = field.getType();
             if (isSugarEntity(fieldType)) {
                 try {
@@ -316,7 +320,7 @@ private static void inflate(Cursor cursor, Object object, Map<Object, Long> enti
                     e.printStackTrace();
                 }
             } else {
-                ReflectionUtil.setFieldValueFromCursor(cursor, field, object);
+                ReflectionUtil.setFieldValueFromCursor(cursor, field, object, entitySerializerManager);
             }
         }
     }
@@ -379,7 +383,8 @@ public long save() {
 
     @SuppressWarnings("unchecked")
     void inflate(Cursor cursor) {
-        inflate(cursor, this, getSugarContext().getEntitiesMap());
+        inflate(cursor, this, getSugarContext().getEntitiesMap(),
+                getSugarContext().getEntitySerializerManager());
     }
 
     public Long getId() {
@@ -417,7 +422,8 @@ public E next() {
 
             try {
                 entity = type.getDeclaredConstructor().newInstance();
-                inflate(cursor, entity, getSugarContext().getEntitiesMap());
+                inflate(cursor, entity, getSugarContext().getEntitiesMap(),
+                        getSugarContext().getEntitySerializerManager());
             } catch (Exception e) {
                 e.printStackTrace();
             } finally {
diff --git a/library/src/main/java/com/orm/serializer/EntitySerializer.java b/library/src/main/java/com/orm/serializer/EntitySerializer.java
new file mode 100644
index 00000000..1292ff07
--- /dev/null
+++ b/library/src/main/java/com/orm/serializer/EntitySerializer.java
@@ -0,0 +1,12 @@
+package com.orm.serializer;
+
+public interface EntitySerializer<K, V> {
+
+    Class getDeserializedType();
+
+    Class getSerializedType();
+
+    V serialize(K object);
+
+    K deserialize(V object);
+}
diff --git a/library/src/main/java/com/orm/serializer/EntitySerializerManager.java b/library/src/main/java/com/orm/serializer/EntitySerializerManager.java
new file mode 100644
index 00000000..f7c4ba3f
--- /dev/null
+++ b/library/src/main/java/com/orm/serializer/EntitySerializerManager.java
@@ -0,0 +1,46 @@
+package com.orm.serializer;
+
+import android.content.Context;
+import android.util.Log;
+
+import com.google.common.collect.MapMaker;
+import com.orm.util.ReflectionUtil;
+
+import java.util.List;
+import java.util.concurrent.ConcurrentMap;
+
+public class EntitySerializerManager {
+
+    private Context context;
+    private ConcurrentMap<Class<?>, EntitySerializer> serializers;
+
+    public EntitySerializerManager(Context context) {
+        this.context = context;
+        this.serializers = new MapMaker().weakKeys().makeMap();
+        init();
+    }
+
+    public <K, V> void addSerializer(Class<? extends K> cls, EntitySerializer<K, V> serializer) {
+        serializers.put(cls, serializer);
+    }
+
+    @SuppressWarnings("unchecked")
+    public <K, V> EntitySerializer<K, V> get(Class<? extends K> cls) {
+        return serializers.get(cls);
+    }
+
+    private void init() {
+        List<Class<? extends EntitySerializer>> serializerClasses = ReflectionUtil.getSerializerClasses(context);
+
+        for (Class<? extends EntitySerializer> className : serializerClasses) {
+            try {
+                EntitySerializer entitySerializer = className.newInstance();
+                serializers.put(entitySerializer.getDeserializedType(), entitySerializer);
+            } catch (InstantiationException e) {
+                Log.e("Sugar", e.getMessage());
+            } catch (IllegalAccessException e) {
+                Log.e("Sugar", e.getMessage());
+            }
+        }
+    }
+}
diff --git a/library/src/main/java/com/orm/util/ManifestHelper.java b/library/src/main/java/com/orm/util/ManifestHelper.java
index fb65724c..aee45b1e 100644
--- a/library/src/main/java/com/orm/util/ManifestHelper.java
+++ b/library/src/main/java/com/orm/util/ManifestHelper.java
@@ -19,6 +19,7 @@
      */
     public final static String METADATA_VERSION = "VERSION";
     public final static String METADATA_DOMAIN_PACKAGE_NAME = "DOMAIN_PACKAGE_NAME";
+    public final static String METADATA_SERIALIZER_PACKAGE_NAME = "SERIALIZER_PACKAGE_NAME";
     public final static String METADATA_QUERY_LOG = "QUERY_LOG";
     /**
      * The default name for the database unless specified in the AndroidManifest.
@@ -58,6 +59,22 @@ public static String getDomainPackageName(Context context){
         return domainPackageName;
     }
 
+    /**
+     * Grabs the domain name of the serializer classes from the manifest.
+     *
+     * @param context  the {@link android.content.Context} of the Android application
+     * @return the package String that Sugar uses to search for serializer classes
+     */
+    public static String getSerializerPackageName(Context context) {
+        String serializerPackageName = getMetaDataString(context, METADATA_SERIALIZER_PACKAGE_NAME);
+
+        if (serializerPackageName == null) {
+            serializerPackageName = "";
+        }
+
+        return serializerPackageName;
+    }
+
     /**
      * Grabs the name of the database file specified in the manifest.
      *
diff --git a/library/src/main/java/com/orm/util/ReflectionUtil.java b/library/src/main/java/com/orm/util/ReflectionUtil.java
index a740b42d..47ad1eef 100644
--- a/library/src/main/java/com/orm/util/ReflectionUtil.java
+++ b/library/src/main/java/com/orm/util/ReflectionUtil.java
@@ -9,6 +9,8 @@
 import com.orm.SugarRecord;
 import com.orm.dsl.Ignore;
 import com.orm.dsl.Table;
+import com.orm.serializer.EntitySerializer;
+import com.orm.serializer.EntitySerializerManager;
 
 import java.io.File;
 import java.io.IOException;
@@ -61,12 +63,17 @@
     }
 
     public static void addFieldValueToColumn(ContentValues values, Field column, Object object,
-                                             Map<Object, Long> entitiesMap) {
+                                             Map<Object, Long> entitiesMap, EntitySerializerManager serializerManager) {
         column.setAccessible(true);
         Class<?> columnType = column.getType();
         try {
             String columnName = NamingHelper.toSQLName(column);
             Object columnValue = column.get(object);
+            com.orm.serializer.EntitySerializer serializer = serializerManager.get(columnType);
+
+            if (serializer != null) {
+                columnValue = serializer.serialize(columnValue);
+            }
 
             if (columnType.isAnnotationPresent(Table.class)) {
                 Field field = null;
@@ -145,7 +152,8 @@ public static void addFieldValueToColumn(ContentValues values, Field column, Obj
         }
     }
 
-    public static void setFieldValueFromCursor(Cursor cursor, Field field, Object object) {
+    public static void setFieldValueFromCursor(Cursor cursor, Field field, Object object,
+                                               EntitySerializerManager serializerManager) {
         field.setAccessible(true);
         try {
             Class fieldType = field.getType();
@@ -157,6 +165,8 @@ public static void setFieldValueFromCursor(Cursor cursor, Field field, Object ob
                 return;
             }
 
+            com.orm.serializer.EntitySerializer serializer = serializerManager.get(fieldType);
+
             if (colName.equalsIgnoreCase("id")) {
                 long cid = cursor.getLong(columnIndex);
                 field.set(object, Long.valueOf(cid));
@@ -211,6 +221,8 @@ public static void setFieldValueFromCursor(Cursor cursor, Field field, Object ob
                 } catch (Exception e) {
                     Log.e("Sugar", "Enum cannot be read from Sqlite3 database. Please check the type of field " + field.getName());
                 }
+            } else if (serializer != null) {
+                setFieldFromCursorWithSerializer(cursor, field, object, columnIndex, serializer);
             } else
                 Log.e("Sugar", "Class cannot be read from Sqlite3 database. Please check the type of field " + field.getName() + "(" + field.getType().getName() + ")");
         } catch (IllegalArgumentException e) {
@@ -220,6 +232,26 @@ public static void setFieldValueFromCursor(Cursor cursor, Field field, Object ob
         }
     }
 
+    private static void setFieldFromCursorWithSerializer(Cursor cursor, Field field, Object object, int columnIndex, EntitySerializer serializer) throws IllegalAccessException {
+        Class serializedType = serializer.getSerializedType();
+
+        if (serializedType.equals(long.class) || serializedType.equals(Long.class)) {
+            field.set(object, serializer.deserialize(cursor.getLong(columnIndex)));
+        } else if (serializedType.equals(int.class) || serializedType.equals(Integer.class)) {
+            field.set(object, serializer.deserialize(cursor.getInt(columnIndex)));
+        } else if (serializedType.equals(double.class) || serializedType.equals(Double.class)) {
+            field.set(object, serializer.deserialize(cursor.getInt(columnIndex)));
+        } else if (serializedType.equals(byte.class) || serializedType.equals(Byte.class)) {
+            field.set(object, serializer.deserialize(cursor.getInt(columnIndex)));
+        } else if (serializedType.equals(boolean.class) || serializedType.equals(Boolean.class)) {
+            field.set(object, serializer.deserialize(cursor.getInt(columnIndex)));
+        } else if (serializedType.equals(short.class) || serializedType.equals(Short.class)) {
+            field.set(object, serializer.deserialize(cursor.getInt(columnIndex)));
+        } else if (serializedType.equals(float.class) || serializedType.equals(Float.class)) {
+            field.set(object, serializer.deserialize(cursor.getInt(columnIndex)));
+        }
+    }
+
     private static Field getDeepField(String fieldName, Class<?> type) throws NoSuchFieldException {
         try {
             Field field = type.getDeclaredField(fieldName);
@@ -250,7 +282,7 @@ public static void setFieldValueForId(Object object, Long value) {
     public static List<Class> getDomainClasses(Context context) {
         List<Class> domainClasses = new ArrayList<Class>();
         try {
-            for (String className : getAllClasses(context)) {
+            for (String className : getAllDomainClasses(context)) {
                 Class domainClass = getDomainClass(className, context);
                 if (domainClass != null) domainClasses.add(domainClass);
             }
@@ -286,9 +318,40 @@ private static Class getDomainClass(String className, Context context) {
         }
     }
 
+    public static List<Class<? extends com.orm.serializer.EntitySerializer>> getSerializerClasses(Context context) {
+        List<Class<? extends com.orm.serializer.EntitySerializer>> serializerClasses = new ArrayList<>();
+        try {
+            for (String className : getAllSerializerClasses(context)) {
+                Class serializerClass = getSerializerClass(className, context);
+                if (serializerClass != null) serializerClasses.add(serializerClass);
+            }
+        } catch (PackageManager.NameNotFoundException | IOException e) {
+            Log.e("Sugar", e.getMessage());
+        }
+
+        return serializerClasses;
+    }
+
+    private static Class getSerializerClass(String className, Context context) {
+        try {
+            Class<?> discoveredClass = Class.forName(
+                    className, true, context.getClass().getClassLoader());
 
-    private static List<String> getAllClasses(Context context) throws PackageManager.NameNotFoundException, IOException {
-        String packageName = ManifestHelper.getDomainPackageName(context);
+            if (discoveredClass != null && com.orm.serializer.EntitySerializer.class.isAssignableFrom(discoveredClass)
+                    && !Modifier.isAbstract(discoveredClass.getModifiers())) {
+
+                Log.i("Sugar", "serializer class : " + discoveredClass.getSimpleName());
+                return discoveredClass;
+            }
+        } catch (ClassNotFoundException e) {
+            e.printStackTrace();
+        }
+
+        return null;
+    }
+
+
+    private static List<String> getAllClasses(Context context, String packageName) throws PackageManager.NameNotFoundException, IOException {
         String path = getSourcePath(context);
         List<String> classNames = new ArrayList<String>();
         DexFile dexfile = null;
@@ -321,6 +384,14 @@ private static Class getDomainClass(String className, Context context) {
         return classNames;
     }
 
+    private static List<String> getAllSerializerClasses(Context context) throws PackageManager.NameNotFoundException, IOException {
+        return getAllClasses(context, ManifestHelper.getSerializerPackageName(context));
+    }
+
+    private static List<String> getAllDomainClasses(Context context) throws PackageManager.NameNotFoundException, IOException {
+        return getAllClasses(context, ManifestHelper.getDomainPackageName(context));
+    }
+
     private static void populateFiles(File path, List<String> fileNames, String parent) {
         if (path.isDirectory()) {
             for (File newPath : path.listFiles()) {
