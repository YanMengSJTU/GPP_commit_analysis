diff --git a/library/src/main/java/com/sixgreen/cube/Cube.java b/library/src/main/java/com/sixgreen/cube/Cube.java
index 59564f57..b6784d29 100644
--- a/library/src/main/java/com/sixgreen/cube/Cube.java
+++ b/library/src/main/java/com/sixgreen/cube/Cube.java
@@ -84,7 +84,7 @@ public static CubeDataManager getCubeDataManager() {
     }
 
 
-    public static <T> T executeLoader(final Loader<T> loader) throws Exception {
+    public static <T> T executeLoader(final CubeLoader<T> loader) throws Exception {
         T result = null;
         CubeDataManager manager = null;
         try {
@@ -101,7 +101,7 @@ public static CubeDataManager getCubeDataManager() {
         return result;
     }
 
-    public static void executeDeleter(final Deleter deleter) throws Exception {
+    public static void executeDeleter(final CubeDeleter deleter) throws Exception {
         CubeDataManager manager = null;
         try {
             manager = getCubeDataManager();
@@ -116,7 +116,7 @@ public static void executeDeleter(final Deleter deleter) throws Exception {
         }
     }
 
-    public static void executeSaver(final Saver saver) throws Exception {
+    public static void executeSaver(final CubeSaver saver) throws Exception {
         //EntityTransaction transaction = null;
         CubeDataManager manager = null;
         try {
@@ -133,7 +133,7 @@ public static void executeSaver(final Saver saver) throws Exception {
     }
     
 
-    public static void executeUpdater(final Updater updater) throws Exception {
+    public static void executeUpdater(final CubeUpdater updater) throws Exception {
         CubeDataManager manager = null;
         try {
             manager = getCubeDataManager();
diff --git a/library/src/main/java/com/sixgreen/cube/CubeDeleter.java b/library/src/main/java/com/sixgreen/cube/CubeDeleter.java
new file mode 100644
index 00000000..c2331e8c
--- /dev/null
+++ b/library/src/main/java/com/sixgreen/cube/CubeDeleter.java
@@ -0,0 +1,24 @@
+package com.sixgreen.cube;
+
+import com.sixgreen.cube.support.CubeDataManager;
+
+/**
+ * Convenience base class for objects that need to be able to delete themselves.
+ * There is no requirement for persistent objects to extend this
+ * class; it just provides a delete() method.
+ * <p/>
+ * There are two versions of the delete() method. The no-args version does the
+ * delete operation inside its own transaction - it's the simplest way of deleteing
+ * an object. The other version takes a CubeDataManager object and adds the delete operation to the
+ * mangers transaction.
+ * <p/>
+ * Created by bpappin on 16-08-23.
+ */
+public abstract class CubeDeleter {
+
+    public void delete() throws Exception {
+        Cube.executeDeleter(this);
+    }
+
+    public abstract void delete(CubeDataManager manager);
+}
diff --git a/library/src/main/java/com/sixgreen/cube/CubeLoader.java b/library/src/main/java/com/sixgreen/cube/CubeLoader.java
new file mode 100644
index 00000000..42ff355c
--- /dev/null
+++ b/library/src/main/java/com/sixgreen/cube/CubeLoader.java
@@ -0,0 +1,23 @@
+package com.sixgreen.cube;
+
+import com.sixgreen.cube.support.CubeDataManager;
+
+/**
+ * Convenience base class for objects that need to be able to load themselves.
+ * There is no requirement for persistent objects to extend this
+ * class; it just provides a load() method.
+ * <p/>
+ * There are two versions of the load() method. The no-args version does the
+ * load operation inside its own transaction - it's the simplest way of loading
+ * an object. The other version takes a CubeDataManager object and adds the load operation to the
+ * mangers transaction.
+ * <p/>
+ * Created by bpappin on 16-08-23.
+ */
+public abstract class CubeLoader<T> {
+    public abstract T load(CubeDataManager manager);
+
+    public T load() throws Exception {
+        return Cube.executeLoader(this);
+    }
+}
diff --git a/library/src/main/java/com/sixgreen/cube/Saver.java b/library/src/main/java/com/sixgreen/cube/CubeSaver.java
similarity index 76%
rename from library/src/main/java/com/sixgreen/cube/Saver.java
rename to library/src/main/java/com/sixgreen/cube/CubeSaver.java
index 01524a30..0dd42966 100644
--- a/library/src/main/java/com/sixgreen/cube/Saver.java
+++ b/library/src/main/java/com/sixgreen/cube/CubeSaver.java
@@ -10,15 +10,14 @@
  * <p>
  * There are two versions of the save() method. The no-args version does the
  * save operation inside its own transaction - it's the simplest way of saving
- * an object. The other version takes a Session object (see HibernateManager for
- * ways of acquiring one) and adds the save operation to the session's
+ * an object. The other version takes a CubeDataManager object and adds the save operation to the mangers
  * transaction.
  *
  * Created by bpappin on 16-08-23.
  */
-public abstract class Saver {
+public abstract class CubeSaver {
 
-    public Saver() {
+    public CubeSaver() {
         super();
     }
 
diff --git a/library/src/main/java/com/sixgreen/cube/Updater.java b/library/src/main/java/com/sixgreen/cube/CubeUpdater.java
similarity index 64%
rename from library/src/main/java/com/sixgreen/cube/Updater.java
rename to library/src/main/java/com/sixgreen/cube/CubeUpdater.java
index 4a989427..15748e55 100644
--- a/library/src/main/java/com/sixgreen/cube/Updater.java
+++ b/library/src/main/java/com/sixgreen/cube/CubeUpdater.java
@@ -3,27 +3,24 @@
 import com.sixgreen.cube.support.CubeDataManager;
 
 /**
- * Convenience base class for objects that need to be able to save themselves.
+ * Convenience base class for objects that need to be able to update themselves.
  * There is no requirement for persistent objects to extend this
  * class; it just provides a update() method.
- *
- * <p>
+ * <p/>
  * There are two versions of the update() method. The no-args version does the
- * save operation inside its own transaction - it's the simplest way of saving
- * an object. The other version takes a Session object (see HibernateManager for
- * ways of acquiring one) and adds the save operation to the session's
- * transaction.
- *
+ * update operation inside its own transaction - it's the simplest way of updating
+ * an object. The other version takes a CubeDataManager object and adds the update operation to the
+ * mangers transaction.
+ * <p/>
  * Created by bpappin on 16-08-23.
  */
-public abstract class Updater {
+public abstract class CubeUpdater {
 
     /**
      * Save the object using a new Hibernate session. The session will be
      * created, committed and closed during the lifetime of this call.
      *
      * @throws Exception
-     *
      * @throws Exception
      */
     public void update() throws Exception {
@@ -34,7 +31,7 @@ public void update() throws Exception {
      * Save the object in an existing session.
      *
      * @param manager
-     *            JPA EntityManager manager.
+     *         JPA EntityManager manager.
      */
     public abstract void update(CubeDataManager manager);
 }
diff --git a/library/src/main/java/com/sixgreen/cube/Deleter.java b/library/src/main/java/com/sixgreen/cube/Deleter.java
deleted file mode 100644
index 44045c39..00000000
--- a/library/src/main/java/com/sixgreen/cube/Deleter.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package com.sixgreen.cube;
-
-import com.sixgreen.cube.support.CubeDataManager;
-
-/**
- * Created by bpappin on 16-08-23.
- */
-public abstract class Deleter {
-
-    public void delete() throws Exception {
-        Cube.executeDeleter(this);
-    }
-
-    public abstract void delete(CubeDataManager manager);
-}
diff --git a/library/src/main/java/com/sixgreen/cube/Loader.java b/library/src/main/java/com/sixgreen/cube/Loader.java
deleted file mode 100644
index abfda7c3..00000000
--- a/library/src/main/java/com/sixgreen/cube/Loader.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package com.sixgreen.cube;
-
-import com.sixgreen.cube.support.CubeDataManager;
-
-/**
- * Created by bpappin on 16-08-23.
- */
-public abstract class Loader<T> {
-    public abstract T load(CubeDataManager manager);
-
-    public T load() throws Exception {
-        return Cube.executeLoader(this);
-    }
-}
