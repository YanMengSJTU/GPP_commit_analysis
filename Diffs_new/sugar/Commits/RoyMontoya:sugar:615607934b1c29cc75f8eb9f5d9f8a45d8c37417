diff --git a/build.gradle b/build.gradle
index 024245fe..1d899395 100644
--- a/build.gradle
+++ b/build.gradle
@@ -6,13 +6,20 @@ buildscript {
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.1.0'
+        classpath 'com.android.tools.build:gradle:1.1.1'
         classpath 'org.robolectric:robolectric-gradle-plugin:1.0.1'
         classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
     }
 }
 
+def isReleaseBuild() {
+    return version.contains("SNAPSHOT") == false
+}
+
 allprojects {
+    version = VERSION_NAME
+    group = GROUP
+
     repositories {
         mavenLocal()
         mavenCentral()
diff --git a/example/build.gradle b/example/build.gradle
index a017d24a..dad72cd7 100644
--- a/example/build.gradle
+++ b/example/build.gradle
@@ -27,7 +27,7 @@ dependencies {
 
 robolectric {
     // Configure includes / excludes
-    include '**/*Test.class'
+    include '**/*Tests.class'
     exclude '**/espresso/**/*.class'
 
     // Configure max heap size of the test JVM
diff --git a/gradle.properties b/gradle.properties
new file mode 100644
index 00000000..2ec9c9ec
--- /dev/null
+++ b/gradle.properties
@@ -0,0 +1,33 @@
+# Project-wide Gradle settings.
+
+# IDE (e.g. Android Studio) users:
+# Settings specified in this file will override any Gradle settings
+# configured through the IDE.
+
+# For more details on how to configure your build environment visit
+# http://www.gradle.org/docs/current/userguide/build_environment.html
+
+# Specifies the JVM arguments used for the daemon process.
+# The setting is particularly useful for tweaking memory settings.
+# Default value: -Xmx10248m -XX:MaxPermSize=256m
+# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
+
+# When configured, Gradle will run in incubating parallel mode.
+# This option should only be used with decoupled projects. More details, visit
+# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
+# org.gradle.parallel=true
+
+VERSION_NAME=1.4
+VERSION_CODE=1
+GROUP=com.github.satyan
+
+POM_DESCRIPTION=Sugar ORM - Insanely easy way to work with android database
+POM_URL=https://github.com/satyan/sugar
+POM_SCM_URL=https://github.com/satyan/sugar
+POM_SCM_CONNECTION=scm:git@github.com:satyan/sugar.git
+POM_SCM_DEV_CONNECTION=scm:git@github.com:satyan/sugar.git
+POM_LICENCE_NAME=The Apache Software License, Version 2.0
+POM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt
+POM_LICENCE_DIST=repo
+POM_DEVELOPER_ID=satyan
+POM_DEVELOPER_NAME=Satya Narayan
\ No newline at end of file
diff --git a/library/build.gradle b/library/build.gradle
index df1a932a..9251b0d8 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -1,8 +1,5 @@
 apply plugin: 'com.android.library'
-apply plugin: 'maven-publish'
-
-group 'com.github.satyan'
-version '1.3.1'
+apply from: '../maven_push.gradle'
 
 android {
     compileSdkVersion 21
@@ -33,20 +30,3 @@ task libraryJar(type: Jar) {
     baseName 'sugar'
 }
 
-publishing {
-    publications {
-        artifactJar(MavenPublication) {
-            artifact libraryJar
-            artifactId 'sugar'
-            groupId project.group
-        }
-        artifactAar(MavenPublication) {
-            artifact bundleRelease
-            artifactId 'sugar'
-            groupId project.group
-        }
-    }
-    repositories {
-        mavenCentral()
-    }
-}
diff --git a/library/gradle.properties b/library/gradle.properties
new file mode 100644
index 00000000..07fe1d15
--- /dev/null
+++ b/library/gradle.properties
@@ -0,0 +1,3 @@
+POM_NAME=Sugar ORM
+POM_ARTIFACT_ID=sugar
+POM_PACKAGING=aar
\ No newline at end of file
diff --git a/library/src/main/java/com/orm/query/Select.java b/library/src/main/java/com/orm/query/Select.java
index 9c52a9b4..28b1cbce 100644
--- a/library/src/main/java/com/orm/query/Select.java
+++ b/library/src/main/java/com/orm/query/Select.java
@@ -17,6 +17,16 @@
     private String limit;
     private String offset;
     private List<Object> args = new ArrayList<Object>();
+    private static final String SPACE = " ";
+    private static final String WHERE = "WHERE ";
+    private static final String ORDER_BY = "ORDER BY ";
+    private static final String LIMIT = "LIMIT ";
+    private static final String OFFSET = "OFFSET ";
+    private static final String SELECT_FROM = "SELECT * FROM ";
+    private static final String LEFT_PARENTHESIS = "(";
+    private static final String RIGHT_PARENTHESIS = ")";
+    private static final String SINGLE_QUOTE = "'";
+
 
     public Select(Class<T> record) {
         this.record = record;
@@ -54,39 +64,41 @@ public Select(Class<T> record) {
     }
 
     private void mergeConditions(Condition[] conditions, Condition.Type type) {
-        StringBuilder toAppend = new StringBuilder("");
+        StringBuilder toAppend = new StringBuilder();
         for (Condition condition : conditions) {
             if (toAppend.length() != 0) {
-                toAppend.append(" ").append(type.name()).append(" ");
+                toAppend.append(SPACE).append(type.name()).append(SPACE);
             }
 
             if (Condition.Check.LIKE.equals(condition.getCheck()) ||
                     Condition.Check.NOT_LIKE.equals(condition.getCheck())) {
                 toAppend
-                    .append(condition.getProperty())
-                    .append(condition.getCheckSymbol())
-                    .append("'")
-                    .append(condition.getValue().toString())
-                    .append("'");
+                        .append(condition.getProperty())
+                        .append(condition.getCheckSymbol())
+                        .append(SINGLE_QUOTE)
+                        .append(condition.getValue().toString())
+                        .append(SINGLE_QUOTE);
             } else if (Condition.Check.IS_NULL.equals(condition.getCheck()) ||
                     Condition.Check.IS_NOT_NULL.equals(condition.getCheck())) {
                 toAppend
-                    .append(condition.getProperty())
-                    .append(condition.getCheckSymbol());
+                        .append(condition.getProperty())
+                        .append(condition.getCheckSymbol());
             } else {
                 toAppend
-                    .append(condition.getProperty())
-                    .append(condition.getCheckSymbol())
-                    .append("? ");
+                        .append(condition.getProperty())
+                        .append(condition.getCheckSymbol())
+                        .append("? ");
                 args.add(condition.getValue());
             }
         }
-        
-        if (!"".equals(whereClause)) {
-            whereClause += " " + type.name() + " ";
+
+
+        if (!whereClause.isEmpty()) {
+            whereClause += SPACE + type.name() + SPACE;
         }
 
-        whereClause += "(" + toAppend + ")";
+
+        whereClause += LEFT_PARENTHESIS + toAppend + RIGHT_PARENTHESIS;
     }
 
     public Select<T> whereOr(Condition... args) {
@@ -117,12 +129,12 @@ private void mergeConditions(Condition[] conditions, Condition.Type type) {
 
         return SugarRecord.find(record, whereClause, arguments, groupBy, orderBy, limit);
     }
-    
+
     public long count() {
         if (arguments == null) {
             arguments = convertArgs(args);
         }
-    	
+
         return SugarRecord.count(record, whereClause, arguments, groupBy, orderBy, limit);
     }
 
@@ -134,31 +146,31 @@ public T first() {
         List<T> list = SugarRecord.find(record, whereClause, arguments, groupBy, orderBy, "1");
         return list.size() > 0 ? list.get(0) : null;
     }
-    
+
     String toSql() {
         StringBuilder sql = new StringBuilder();
-        sql.append("SELECT * FROM ").append(NamingHelper.toSQLName(this.record)).append(" ");
+        sql.append(SELECT_FROM).append(NamingHelper.toSQLName(this.record)).append(SPACE);
 
-        if (whereClause != null) {
-            sql.append("WHERE ").append(whereClause).append(" ");
+        if (!whereClause.isEmpty()) {
+            sql.append(WHERE).append(whereClause).append(SPACE);
         }
 
-        if (orderBy != null) {
-            sql.append("ORDER BY ").append(orderBy).append(" ");
+        if (!orderBy.isEmpty()) {
+            sql.append(ORDER_BY).append(orderBy).append(SPACE);
         }
 
-        if (limit != null) {
-            sql.append("LIMIT ").append(limit).append(" ");
+        if (!limit.isEmpty()) {
+            sql.append(LIMIT).append(limit).append(SPACE);
         }
 
-        if (offset != null) {
-            sql.append("OFFSET ").append(offset).append(" ");
+        if (!offset.isEmpty()) {
+            sql.append(OFFSET).append(offset).append(SPACE);
         }
 
         return sql.toString();
     }
 
-    String getWhereCond() {
+    String getWhereClause() {
         return whereClause;
     }
 
@@ -170,7 +182,7 @@ String getWhereCond() {
         String[] argsArray = new String[argsList.size()];
 
         for (int i = 0; i < argsList.size(); i++) {
-             argsArray[i] = argsList.get(i).toString();
+            argsArray[i] = argsList.get(i).toString();
         }
 
         return argsArray;
diff --git a/maven_push.gradle b/maven_push.gradle
new file mode 100644
index 00000000..b741e61b
--- /dev/null
+++ b/maven_push.gradle
@@ -0,0 +1,92 @@
+apply plugin: 'maven'
+apply plugin: 'signing'
+
+def sonatypeRepositoryUrl
+if (isReleaseBuild()) {
+    println 'RELEASE BUILD'
+    sonatypeRepositoryUrl = hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
+            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
+} else {
+    println 'DEBUG BUILD'
+    sonatypeRepositoryUrl = hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
+            : "https://oss.sonatype.org/content/repositories/snapshots/"
+}
+
+def getRepositoryUsername() {
+    return hasProperty('nexusUsername') ? nexusUsername : ""
+}
+
+def getRepositoryPassword() {
+    return hasProperty('nexusPassword') ? nexusPassword : ""
+}
+
+afterEvaluate { project ->
+    uploadArchives {
+        repositories {
+            mavenDeployer {
+                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
+
+                pom.artifactId = POM_ARTIFACT_ID
+
+                repository(url: sonatypeRepositoryUrl) {
+                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
+                }
+
+                pom.project {
+                    name POM_NAME
+                    packaging POM_PACKAGING
+                    description POM_DESCRIPTION
+                    url POM_URL
+
+                    scm {
+                        url POM_SCM_URL
+                        connection POM_SCM_CONNECTION
+                        developerConnection POM_SCM_DEV_CONNECTION
+                    }
+
+                    licenses {
+                        license {
+                            name POM_LICENCE_NAME
+                            url POM_LICENCE_URL
+                            distribution POM_LICENCE_DIST
+                        }
+                    }
+
+                    developers {
+                        developer {
+                            id POM_DEVELOPER_ID
+                            name POM_DEVELOPER_NAME
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    signing {
+        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
+        sign configurations.archives
+    }
+
+    task androidJavadocs(type: Javadoc) {
+        source = android.sourceSets.main.java.sourceFiles
+    }
+
+    task androidJavadocsJar(type: Jar) {
+        classifier = 'javadoc'
+        //basename = artifact_id
+        from androidJavadocs.destinationDir
+    }
+
+    task androidSourcesJar(type: Jar) {
+        classifier = 'sources'
+        //basename = artifact_id
+        from android.sourceSets.main.java.sourceFiles
+    }
+
+    artifacts {
+        //archives packageReleaseJar
+        archives androidSourcesJar
+        archives androidJavadocsJar
+    }
+}
\ No newline at end of file
