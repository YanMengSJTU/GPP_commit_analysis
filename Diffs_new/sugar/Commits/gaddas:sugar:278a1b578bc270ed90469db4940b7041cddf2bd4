diff --git a/example/project.properties b/example/project.properties
index a6cf15da..66a7afeb 100644
--- a/example/project.properties
+++ b/example/project.properties
@@ -11,5 +11,5 @@
 #proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 
 # Project target.
-target=android-19
+target=android-21
 android.library.reference.1=../library
diff --git a/example/src/com/example/Note.java b/example/src/com/example/Note.java
index 82f73de3..772f1114 100755
--- a/example/src/com/example/Note.java
+++ b/example/src/com/example/Note.java
@@ -1,27 +1,20 @@
 package com.example;
 
+import java.util.Calendar;
+
 import com.orm.dsl.Column;
 import com.orm.dsl.Table;
 
 @Table(name = "Note")
 public class Note {
 
-    private long id;
-
+	protected Long id = null;
+	
     @Column(name = "noteId", unique = true, notNull = true)
     private int noteId;
 
     private String title;
     private String description;
-    private String name;
-    private Integer noteNumber = 2;
-    private Float tagNumber = 4.0f;
-    private float tagNo = 5.0f;
-    private Boolean isTag = true;
-    private boolean isTagged = false;
-    private Double noteTagNo = 40.5;
-    private double noteTagNumber = 24.4;
-    private Tag tag;
 
 	private Integer testIntegerObj;
 	private Integer testIntegerObjNull;
@@ -40,6 +33,8 @@
 	private Calendar testDate;
 	private Calendar testDateNull;
 	private char testChar;
+	private Character testCharObj;
+	private Character testCharObjNull;
 
 	private Tag tag;
 
@@ -69,6 +64,8 @@ public Note(int noteId, String title, String description, Tag tag) {
 		testDate = Calendar.getInstance();
 		testDateNull = null;
 		testChar = 'c';
+		testCharObj = 'c';
+		testCharObjNull = null;
 	}
 
 	public boolean Validate() {
@@ -106,6 +103,10 @@ public boolean Validate() {
 			return false;
 		if (testChar != 'c')
 			return false;
+		if (testCharObj != 'c')
+			return false;
+		if (testCharObjNull != null)
+			return false;
 		
 		return true;
 	}
@@ -140,6 +141,6 @@ public void setTitle(String title) {
 
 	@Override
 	public String toString() {
-		return title + "id: " + id + " - " + tag + " " + tag.getId();
+		return title + "noteId: " + noteId + " - " + tag;
 	}
 }
diff --git a/example/src/com/example/SugarActivity.java b/example/src/com/example/SugarActivity.java
index c2164d07..30ae4a02 100755
--- a/example/src/com/example/SugarActivity.java
+++ b/example/src/com/example/SugarActivity.java
@@ -1,5 +1,7 @@
 package com.example;
 
+import java.util.List;
+
 import com.orm.query.Select;
 import android.app.Activity;
 import android.content.Intent;
@@ -13,35 +15,35 @@
 {
     /** Called when the activity is first created. */
     @Override
-    public void onCreate(Bundle savedInstanceState)
+	public void onCreate(Bundle savedInstanceState)
     {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.main);
-        SugarRecord.deleteAll(Note.class);
-        SugarRecord.deleteAll(TextNote.class);
-        SugarRecord.deleteAll(Tag.class);
-        SugarRecord.deleteAll(NewNote.class);
-        initDb();
-        Intent intent = new Intent(this, NoteListActivity.class);
-        startActivity(intent);
+         super.onCreate(savedInstanceState);
+         setContentView(R.layout.main);
+         SugarRecord.deleteAll(Note.class);
+         SugarRecord.deleteAll(TextNote.class);
+         SugarRecord.deleteAll(Tag.class);
+         SugarRecord.deleteAll(NewNote.class);
+         initDb();
+         Intent intent = new Intent(this, NoteListActivity.class);
+         startActivity(intent);
     }
 
      private void initDb() {
 
-        Tag t1 = new Tag("tag1");
-        Tag t2 = new Tag("tag2");
-        save(t1);
-        save(t2);
-
-        Note n1 = new Note(10, "note1", "description1", t1);
-        Note n2 = new Note(10, "note2", "description2", t1);
-        Note n3 = new Note(10, "note3", "description3", t2);
-        Note n4 = new Note(10, "note4", "description4", t2);
+         Tag t1 = new Tag("tag1");
+         Tag t2 = new Tag("tag2");
+         save(t1);
+         save(t2);
 
-        if (!n1.Validate()) Log.e("TEST", "Validation before saving failed!");
-        
-        TextNote textNote = new TextNote();
-        textNote.desc = "Test";
+         Note n1 = new Note(10, "note1", "description1", t1);
+         Note n2 = new Note(11, "note2", "description2", t1);
+         Note n3 = new Note(12, "note3", "description3", t2);
+         Note n4 = new Note(13, "note4", "description4", t2);
+ 
+         if (!n1.Validate()) Log.e("TEST", "Validation before saving failed!");
+         
+         TextNote textNote = new TextNote();
+         textNote.desc = "Test";
 
          save(textNote);
          save(n1);
@@ -59,7 +61,11 @@ private void initDb() {
          n3.setTitle("batrix");
          save(n3);
 
-        Note existingNote = Select.from(Note.class).where("TITLE = ?", new String[] { "atrix" }).first();
-        if (!existingNote.Validate()) Log.e("TEST", "Validation after loading failed!");
+         List<Note> notes = Select.from(Note.class).list();
+         if (notes.size() != 4) Log.e("TEST", "Note size not 4!");
+         
+         Note existingNote = Select.from(Note.class).where("TITLE = ?", new String[] { "atrix" }).first();
+         if (existingNote == null) Log.e("TEST", "Note not found in database!");
+         if (!existingNote.Validate()) Log.e("TEST", "Validation after loading failed!");
 	}
 }
diff --git a/example/src/com/example/Tag.java b/example/src/com/example/Tag.java
index 5f8f67e0..c9469221 100755
--- a/example/src/com/example/Tag.java
+++ b/example/src/com/example/Tag.java
@@ -1,9 +1,10 @@
 package com.example;
 
+import com.orm.SugarRecord;
 import com.orm.dsl.Table;
 
 @Table(name = "tag")
-public class Tag {
+public class Tag extends SugarRecord {
     private String name;
 
 	public Tag(String name) {
diff --git a/library/project.properties b/library/project.properties
index 61afc8fe..f2c8b26d 100644
--- a/library/project.properties
+++ b/library/project.properties
@@ -12,4 +12,4 @@
 
 android.library=true
 # Project target.
-target=android-19
+target=android-21
diff --git a/library/src/com/orm/SchemaGenerator.java b/library/src/com/orm/SchemaGenerator.java
index a7f25b51..cdbba962 100644
--- a/library/src/com/orm/SchemaGenerator.java
+++ b/library/src/com/orm/SchemaGenerator.java
@@ -33,15 +33,15 @@ public SchemaGenerator(Context context) {
     }
 
     public void createDatabase(SQLiteDatabase sqLiteDatabase) {
-        List<Class> domainClasses = getDomainClasses(context);
-        for (Class domain : domainClasses) {
+        List<Class<?>> domainClasses = getDomainClasses(context);
+        for (Class<?> domain : domainClasses) {
             createTable(domain, sqLiteDatabase);
         }
     }
 
     public void doUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVersion) {
-        List<Class> domainClasses = getDomainClasses(context);
-        for (Class domain : domainClasses) {
+        List<Class<?>> domainClasses = getDomainClasses(context);
+        for (Class<?> domain : domainClasses) {
             try {  // we try to do a select, if fails then (?) there isn't the table
                 sqLiteDatabase.query(NamingHelper.toSQLName(domain), null, null, null, null, null, null);
             } catch (SQLiteException e) {
@@ -54,8 +54,8 @@ public void doUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVers
     }
 
     public void deleteTables(SQLiteDatabase sqLiteDatabase) {
-        List<Class> tables = getDomainClasses(context);
-        for (Class table : tables) {
+        List<Class<?>> tables = getDomainClasses(context);
+        for (Class<?> table : tables) {
             sqLiteDatabase.execSQL("DROP TABLE IF EXISTS " + NamingHelper.toSQLName(table));
         }
     }
diff --git a/library/src/com/orm/SugarContext.java b/library/src/com/orm/SugarContext.java
index ea853766..72fecd99 100644
--- a/library/src/com/orm/SugarContext.java
+++ b/library/src/com/orm/SugarContext.java
@@ -31,6 +31,15 @@ public static void terminate() {
         instance.doTerminate();
     }
 
+    public static Context getContext()
+    {
+        if (instance == null) {
+            throw new NullPointerException("SugarContext has not been initialized properly. Call SugarContext.init(Context) in your Application.onCreate() method and SugarContext.terminate() in your Application.onTerminate() method.");
+        }
+        
+        return instance.context;
+    }
+    
     /*
      * Per issue #106 on Github, this method won't be called in
      * any real Android device. This method is used purely in
@@ -46,5 +55,4 @@ private void doTerminate() {
     protected SugarDb getSugarDb() {
         return sugarDb;
     }
-
 }
diff --git a/library/src/com/orm/SugarDb.java b/library/src/com/orm/SugarDb.java
index 6158b20c..9979263f 100644
--- a/library/src/com/orm/SugarDb.java
+++ b/library/src/com/orm/SugarDb.java
@@ -35,9 +35,7 @@ public synchronized SQLiteDatabase getDB() {
         if (this.sqLiteDatabase == null) {
             this.sqLiteDatabase = getWritableDatabase();
         }
-
-    public <T extends SugarRecord<?>> void deleteTables(SQLiteDatabase sqLiteDatabase) {
+        
         return this.sqLiteDatabase;
     }
-
 }
diff --git a/library/src/com/orm/SugarRecord.java b/library/src/com/orm/SugarRecord.java
index e8174ce4..f177661b 100644
--- a/library/src/com/orm/SugarRecord.java
+++ b/library/src/com/orm/SugarRecord.java
@@ -2,10 +2,8 @@
 
 import android.content.ContentValues;
 import android.database.Cursor;
-import android.database.DatabaseUtils;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
-import android.net.Uri;
 import android.text.TextUtils;
 import android.util.Log;
 import com.orm.dsl.Table;
@@ -19,19 +17,9 @@
 
 public class SugarRecord {
 
-    protected Long id = null;
+    public Long id = null;
 
-    public void delete() {
-        if (id != null)
-        {
-            SQLiteDatabase db = getSugarContext().getSugarDb().getDB();
-            db.delete(this.tableName, "Id=?", new String[]{getId().toString()});
-            Log.i("Sugar", getClass().getSimpleName() + " deleted: " + id);
-            id = null;
-        }
-    }
-
-    public static <T extends SugarRecord<?>> void deleteAll(Class<T> type) {
+    public static <T> void deleteAll(Class<T> type) {
         SugarDb db = getSugarContext().getSugarDb();
         SQLiteDatabase sqLiteDatabase = db.getDB();
         sqLiteDatabase.delete(NamingHelper.toSQLName(type), null, null);
@@ -42,11 +30,11 @@ public void delete() {
         SQLiteDatabase sqLiteDatabase = db.getDB();
         sqLiteDatabase.delete(NamingHelper.toSQLName(type), whereClause, whereArgs);
     }
-
-    public static <T extends SugarRecord<?>> void deleteById(Class<T> type, Long id) {
-        Database db = getSugarContext().getSugarDb();
-        SQLiteDatabase sqLiteDatabase = db.getDB();
-        sqLiteDatabase.delete(getTableName(type), "id=?", new String[]{String.valueOf(id)});
+    
+    public static <T extends SugarRecord> void deleteById(Class<T> type, Long id) {
+    	SQLiteDatabase db = getSugarContext().getSugarDb().getDB();
+        db.delete(NamingHelper.toSQLName(type), "Id=?", new String[]{String.valueOf(id)});
+        Log.i("Sugar", type.getSimpleName() + " deleted: " + id);
     }
     
     public static <T> void saveInTx(T... objects) {
@@ -209,7 +197,8 @@ static long save(SQLiteDatabase db, Object object) {
         if (SugarRecord.class.isAssignableFrom(object.getClass())) {
             ReflectionUtil.setFieldValueForId(object, id);
         }
-        Log.i("Sugar", object.getClass().getSimpleName() + " saved : " + id);
+        
+        Log.i("Sugar", object.getClass().getSimpleName() + " saved: " + id);
 
         return id;
     }
@@ -232,16 +221,19 @@ private static void inflate(Cursor cursor, Object object) {
     }
 
     public void delete() {
-        SQLiteDatabase db = getSugarContext().getSugarDb().getDB();
-        db.delete(NamingHelper.toSQLName(getClass()), "Id=?", new String[]{getId().toString()});
-        Log.i("Sugar", getClass().getSimpleName() + " deleted : " + getId().toString());
+    	if (id != null)
+        {
+    		SQLiteDatabase db = getSugarContext().getSugarDb().getDB();
+        	db.delete(NamingHelper.toSQLName(getClass()), "Id=?", new String[]{getId().toString()});
+        	Log.i("Sugar", getClass().getSimpleName() + " deleted: " + getId().toString());
+        	id = null;
+        }
     }
-
+    
     public long save() {
         return save(getSugarContext().getSugarDb().getDB(), this);
     }
 
-    @SuppressWarnings("unchecked")
     void inflate(Cursor cursor) {
         inflate(cursor, this);
     }
diff --git a/library/src/com/orm/query/Select.java b/library/src/com/orm/query/Select.java
index 1e353906..29fb9773 100644
--- a/library/src/com/orm/query/Select.java
+++ b/library/src/com/orm/query/Select.java
@@ -7,7 +7,7 @@
 import java.util.Iterator;
 import java.util.List;
 
-public class Select<T> implements Iterable {
+public class Select<T> implements Iterable<T> {
 
     private Class<T> record;
     private String[] arguments;
diff --git a/library/src/com/orm/util/NamingHelper.java b/library/src/com/orm/util/NamingHelper.java
index 734b4a56..961b6fd1 100644
--- a/library/src/com/orm/util/NamingHelper.java
+++ b/library/src/com/orm/util/NamingHelper.java
@@ -1,14 +1,8 @@
 package com.orm.util;
 
-import android.text.TextUtils;
-
 import com.orm.dsl.Column;
 import com.orm.dsl.Table;
-
 import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.LinkedList;
-import java.util.List;
 
 public class NamingHelper {
 
diff --git a/library/src/com/orm/util/QueryBuilder.java b/library/src/com/orm/util/QueryBuilder.java
index 25e62f8d..e21ea2e1 100644
--- a/library/src/com/orm/util/QueryBuilder.java
+++ b/library/src/com/orm/util/QueryBuilder.java
@@ -14,9 +14,10 @@ public static String getColumnType(Class<?> type) {
                 (type.equals(Integer.class)) ||
                 (type.equals(Integer.TYPE)) ||
                 (type.equals(Long.class)) ||
-                (type.equals(Long.TYPE)) || (
-                (!type.isPrimitive()) &&
-                        (SugarRecord.class.isAssignableFrom(type))))  {
+                (type.equals(Long.TYPE)) ||
+                (type.equals(Character.TYPE)) ||
+                (type.equals(Character.class)) ||
+                ((!type.isPrimitive()) && (SugarRecord.class.isAssignableFrom(type))))  {
             return "INTEGER";
         }
 
@@ -40,7 +41,6 @@ public static String getColumnType(Class<?> type) {
         }
 
         if ((type.equals(String.class)) || 
-                (type.equals(Character.TYPE)) ||
                 (type.equals(android.net.Uri.class))) {
             return "TEXT";
         }
diff --git a/library/src/com/orm/util/ReflectionUtil.java b/library/src/com/orm/util/ReflectionUtil.java
index 3dc2b59d..5c971c79 100644
--- a/library/src/com/orm/util/ReflectionUtil.java
+++ b/library/src/com/orm/util/ReflectionUtil.java
@@ -4,6 +4,8 @@
 import android.content.Context;
 import android.content.pm.PackageManager;
 import android.database.Cursor;
+import android.database.sqlite.SQLiteException;
+import android.net.Uri;
 import android.util.Log;
 import com.orm.SugarRecord;
 import com.orm.dsl.Ignore;
@@ -21,7 +23,7 @@
 
 public class ReflectionUtil {
 
-    public static List<Field> getTableFields(Class table) {
+    public static List<Field> getTableFields(Class<?> table) {
         List<Field> fieldList = SugarConfig.getFields(table);
         if (fieldList != null) return fieldList;
 
@@ -59,23 +61,30 @@ public static void addFieldValueToColumn(ContentValues values, Field column, Obj
             Object columnValue = column.get(object);
 
             if (SugarRecord.class.isAssignableFrom(columnType)) {
-                values.put(columnName,
-                        (columnValue != null)
-                                ? String.valueOf(((SugarRecord) columnValue).getId())
-                                : "0");
+                values.put(columnName, (columnValue != null) 
+                		? String.valueOf(((SugarRecord) columnValue).getId())
+                        : "0");
             } else {
-                if (columnType.equals(Short.class) || columnType.equals(short.class)) {
+            	if (columnValue == null) {
+                    values.putNull(columnName);
+                } else if (columnType.equals(Short.class) || columnType.equals(short.class)) {
                     values.put(columnName, (Short) columnValue);
                 } else if (columnType.equals(Integer.class) || columnType.equals(int.class)) {
                     values.put(columnName, (Integer) columnValue);
                 } else if (columnType.equals(Long.class) || columnType.equals(long.class)) {
                     values.put(columnName, (Long) columnValue);
+                } else if (columnType.equals(Byte.class) || columnType.equals(byte.class)) {
+                    values.put(columnName, (Byte) columnValue);
                 } else if (columnType.equals(Float.class) || columnType.equals(float.class)) {
                     values.put(columnName, (Float) columnValue);
                 } else if (columnType.equals(Double.class) || columnType.equals(double.class)) {
                     values.put(columnName, (Double) columnValue);
                 } else if (columnType.equals(Boolean.class) || columnType.equals(boolean.class)) {
                     values.put(columnName, (Boolean) columnValue);
+                } else if (columnType.equals(Character.class) || columnType.equals(char.class)) {
+                    values.put(columnName, (Integer) (int) ((Character) columnValue).charValue());
+                } else if (columnType.equals(Uri.class)) {
+                    values.put(columnName, columnValue.toString());
                 } else if (Timestamp.class.equals(columnType)) {
                     try {
                         values.put(columnName, ((Timestamp) column.get(object)).getTime());
@@ -95,11 +104,7 @@ public static void addFieldValueToColumn(ContentValues values, Field column, Obj
                         values.put(columnName, (Long) null);
                     }
                 } else {
-                    if (columnValue == null) {
-                        values.putNull(columnName);
-                    } else {
-                        values.put(columnName, String.valueOf(columnValue));
-                    }
+                    values.put(columnName, String.valueOf(columnValue));
                 }
             }
 
@@ -108,10 +113,13 @@ public static void addFieldValueToColumn(ContentValues values, Field column, Obj
         }
     }
 
-    public static void setFieldValueFromCursor(Cursor cursor, Field field, Object object) {
+    @SuppressWarnings("unchecked")
+	public static void setFieldValueFromCursor(Cursor cursor, Field field, Object object) {
+    	Map<Field, Long> entities = new HashMap<Field, Long>();
+    	
         field.setAccessible(true);
         try {
-            Class fieldType = field.getType();
+            Class<?> fieldType = field.getType();
             String colName = NamingHelper.toSQLName(field);
 
             int columnIndex = cursor.getColumnIndex(colName);
@@ -124,29 +132,29 @@ public static void setFieldValueFromCursor(Cursor cursor, Field field, Object ob
                 long cid = cursor.getLong(columnIndex);
                 field.set(object, Long.valueOf(cid));
             } else if (fieldType.equals(long.class) || fieldType.equals(Long.class)) {
-                field.set(object,
-                        cursor.getLong(columnIndex));
+                field.set(object, cursor.getLong(columnIndex));
+            } else if (fieldType.equals(byte.class)) {
+                field.set(object, (byte) cursor.getShort(columnIndex));
+            } else if (fieldType.equals(Byte.class)) {
+                field.set(object, (Byte) (byte) cursor.getShort(columnIndex));
             } else if (fieldType.equals(String.class)) {
                 String val = cursor.getString(columnIndex);
                 field.set(object, val != null && val.equals("null") ? null : val);
             } else if (fieldType.equals(double.class) || fieldType.equals(Double.class)) {
-                field.set(object,
-                        cursor.getDouble(columnIndex));
+                field.set(object, cursor.getDouble(columnIndex));
             } else if (fieldType.equals(boolean.class) || fieldType.equals(Boolean.class)) {
-                field.set(object,
-                        cursor.getString(columnIndex).equals("1"));
+                field.set(object, Boolean.parseBoolean(cursor.getString(columnIndex)) || cursor.getString(columnIndex).equals("1"));
             } else if (field.getType().getName().equals("[B")) {
-                field.set(object,
-                        cursor.getBlob(columnIndex));
+                field.set(object, cursor.getBlob(columnIndex));
             } else if (fieldType.equals(int.class) || fieldType.equals(Integer.class)) {
-                field.set(object,
-                        cursor.getInt(columnIndex));
+                field.set(object, cursor.getInt(columnIndex));
             } else if (fieldType.equals(float.class) || fieldType.equals(Float.class)) {
-                field.set(object,
-                        cursor.getFloat(columnIndex));
+                field.set(object, cursor.getFloat(columnIndex));
             } else if (fieldType.equals(short.class) || fieldType.equals(Short.class)) {
-                field.set(object,
-                        cursor.getShort(columnIndex));
+                field.set(object, cursor.getShort(columnIndex));
+            } else if (fieldType.equals(Uri.class)) {
+                String uri = cursor.getString(columnIndex);
+                field.set(object, Uri.parse(uri)); 
             } else if (fieldType.equals(Timestamp.class)) {
                 long l = cursor.getLong(columnIndex);
                 field.set(object, new Timestamp(l));
@@ -158,6 +166,10 @@ public static void setFieldValueFromCursor(Cursor cursor, Field field, Object ob
                 Calendar c = Calendar.getInstance();
                 c.setTimeInMillis(l);
                 field.set(object, c);
+            } else if (fieldType.equals(char.class)) {
+                field.set(object, (char) cursor.getInt(columnIndex));
+            } else if (fieldType.equals(Character.class)) {
+                field.set(object, (Character) (char) cursor.getInt(columnIndex)); 
             } else if (Enum.class.isAssignableFrom(fieldType)) {
                 try {
                     Method valueOf = field.getType().getMethod("valueOf", String.class);
@@ -167,12 +179,27 @@ public static void setFieldValueFromCursor(Cursor cursor, Field field, Object ob
                 } catch (Exception e) {
                     Log.e("Sugar", "Enum cannot be read from Sqlite3 database. Please check the type of field " + field.getName());
                 }
+            } else if (SugarRecord.class.isAssignableFrom(fieldType)) {
+                long id = cursor.getLong(columnIndex);
+                if (id > 0)
+                	entities.put(field, id);
+                else
+                	field.set(object, null);
             } else
                 Log.e("Sugar", "Class cannot be read from Sqlite3 database. Please check the type of field " + field.getName() + "(" + field.getType().getName() + ")");
         } catch (IllegalArgumentException e) {
-            Log.e("field set error", e.getMessage());
+        	Log.e("Sugar", "Field set error (IllegalArgumentException). Please check the field " + field.getName());
         } catch (IllegalAccessException e) {
-            Log.e("field set error", e.getMessage());
+        	Log.e("Sugar", "Field set error (IllegalAccessException). Please check the field " + field.getName());
+        }
+        
+        for (Field f : entities.keySet()) {
+            try {
+            	f.set(object, SugarRecord.findById((Class<? extends SugarRecord>) f.getType(), entities.get(f)));
+            } catch (SQLiteException e) {
+            } catch (IllegalArgumentException e) {
+            } catch (IllegalAccessException e) {
+            }
         }
     }
 
@@ -190,12 +217,12 @@ public static void setFieldValueForId(Object object, Long value) {
         }
     }
 
-    public static List<Class> getDomainClasses(Context context) {
-        List<Class> domainClasses = new ArrayList<Class>();
+    public static List<Class<?>> getDomainClasses(Context context) {
+        List<Class<?>> domainClasses = new ArrayList<Class<?>>();
         try {
             for (String className : getAllClasses(context)) {
                 if (className.startsWith(ManifestHelper.getDomainPackageName(context))) {
-                    Class domainClass = getDomainClass(className, context);
+                    Class<?> domainClass = getDomainClass(className, context);
                     if (domainClass != null) domainClasses.add(domainClass);
                 }
             }
@@ -209,7 +236,7 @@ public static void setFieldValueForId(Object object, Long value) {
     }
 
 
-    private static Class getDomainClass(String className, Context context) {
+    private static Class<?> getDomainClass(String className, Context context) {
         Class<?> discoveredClass = null;
         try {
             discoveredClass = Class.forName(className, true, context.getClass().getClassLoader());
@@ -231,7 +258,6 @@ private static Class getDomainClass(String className, Context context) {
         }
     }
 
-
     private static List<String> getAllClasses(Context context) throws PackageManager.NameNotFoundException, IOException {
         String path = getSourcePath(context);
         List<String> classNames = new ArrayList<String>();
diff --git a/library/src/com/orm/util/SugarConfig.java b/library/src/com/orm/util/SugarConfig.java
index b93da25e..bf20cf47 100644
--- a/library/src/com/orm/util/SugarConfig.java
+++ b/library/src/com/orm/util/SugarConfig.java
@@ -1,17 +1,11 @@
 package com.orm.util;
 
-import android.content.Context;
-import android.content.pm.ApplicationInfo;
-import android.content.pm.PackageManager;
-import android.util.Log;
-
 import java.lang.reflect.Field;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-
 public class SugarConfig {
 
     static Map<Class<?>, List<Field>> fields = new HashMap<Class<?>, List<Field>>();
