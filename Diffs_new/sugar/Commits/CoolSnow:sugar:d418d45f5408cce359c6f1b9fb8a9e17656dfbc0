diff --git a/.gitignore b/.gitignore
new file mode 100644
index 00000000..c008b9e6
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,5 @@
+library/bin
+library/gen
+library/.project
+library/.classpath
+*.class
diff --git a/library/src/com/orm/SugarDb.java b/library/src/com/orm/SugarDb.java
index e966ccd0..7256b90c 100644
--- a/library/src/com/orm/SugarDb.java
+++ b/library/src/com/orm/SugarDb.java
@@ -13,6 +13,7 @@
 import java.io.InputStreamReader;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Modifier;
 import java.util.*;
 
 import static com.orm.SugarConfig.getDatabaseVersion;
@@ -53,16 +54,15 @@ public SugarDb(Context context) {
     private <T extends SugarRecord> T getDomainClass(String className, Context context) {
         Log.i("Sugar", "domain class");
         Class discoveredClass = null;
-        Class superClass = null;
         try {
             discoveredClass = Class.forName(className, true, context.getClass().getClassLoader());
-            superClass = discoveredClass.getSuperclass();
         } catch (ClassNotFoundException e) {
             Log.e("Sugar", e.getMessage());
         }
 
-        if ((discoveredClass == null) || (superClass == null) ||
-                (!discoveredClass.getSuperclass().equals(SugarRecord.class))) {
+        if ((discoveredClass == null) ||
+                (!SugarRecord.class.isAssignableFrom(discoveredClass)) ||
+                Modifier.isAbstract(discoveredClass.getModifiers())) {
             return null;
         } else {
             try {
@@ -148,7 +148,6 @@ public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVers
     }
 
     private boolean executeSugarUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
-
         boolean isSuccess = false;
         try {
             List<String> files = Arrays.asList(this.context.getAssets().list("sugar_upgrades"));
diff --git a/library/src/com/orm/SugarRecord.java b/library/src/com/orm/SugarRecord.java
index bbd67459..1020d836 100644
--- a/library/src/com/orm/SugarRecord.java
+++ b/library/src/com/orm/SugarRecord.java
@@ -9,7 +9,6 @@
 import com.orm.dsl.Ignore;
 
 import java.lang.reflect.Field;
-import java.lang.reflect.InvocationTargetException;
 import java.sql.Timestamp;
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -20,12 +19,17 @@
 
 public class SugarRecord<T> {
 
+    @Ignore
     private Context context;
-    protected Long id = null;
+    @Ignore
     private SugarApp application;
+    @Ignore
     private Database database;
+    @Ignore
     String tableName = getSqlName();
-
+    
+    protected Long id = null;
+    
     public SugarRecord(Context context) {
         this.context = context;
         this.application = (SugarApp) context.getApplicationContext();
@@ -217,36 +221,41 @@ void inflate(Cursor cursor) {
     }
 
     public List<Field> getTableFields() {
-
         List<Field> fieldList = SugarConfig.getFields(getClass());
         if(fieldList != null) return fieldList;
 
-        Log.d("Sugar", "Fetching properties");
+        Log.d("Sugar", "Fetching properties: " + getClass().getName());
         List<Field> typeFields = new ArrayList<Field>();
-        try {
-            typeFields.add(getClass().getSuperclass().getDeclaredField("id"));
-        } catch (SecurityException e) {
-            Log.e("Sugar", e.getMessage());
-        } catch (NoSuchFieldException e) {
-            Log.e("Sugar", e.getMessage());
-        }
-
-        Field[] fields = getClass().getDeclaredFields();
-        for (Field field : fields) {
+        
+        getAllFields(typeFields, getClass());
+        
+        List<Field> toStore = new ArrayList<Field>();
+        for (Field field : typeFields) {
             if (!field.isAnnotationPresent(Ignore.class)) {
-                typeFields.add(field);
+            	toStore.add(field);
             }
         }
 
-        SugarConfig.setFields(getClass(), typeFields);
-        return typeFields;
+        SugarConfig.setFields(getClass(), toStore);
+        return toStore;
+    }
+    
+    private static List<Field> getAllFields(List<Field> fields, Class<?> type) {
+        for (Field field : type.getDeclaredFields()) {
+            fields.add(field);
+        }
+
+        if (type.getSuperclass() != null) {
+            fields = getAllFields(fields, type.getSuperclass());
+        }
+
+        return fields;
     }
 
     public String getSqlName() {
         return getTableName(getClass());
     }
 
-
     public static String getTableName(Class<?> type) {
         return StringUtil.toSQLName(type.getSimpleName());
     }
