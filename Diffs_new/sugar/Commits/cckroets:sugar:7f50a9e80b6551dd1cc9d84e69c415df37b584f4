diff --git a/build.gradle b/build.gradle
index 030e1cb3..caeb6c73 100644
--- a/build.gradle
+++ b/build.gradle
@@ -7,7 +7,7 @@ buildscript {
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.0.0'
+        classpath 'com.android.tools.build:gradle:2.1.0'
         classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
     }
 }
diff --git a/example/src/main/AndroidManifest.xml b/example/src/main/AndroidManifest.xml
index eb802533..95f0592e 100644
--- a/example/src/main/AndroidManifest.xml
+++ b/example/src/main/AndroidManifest.xml
@@ -1,8 +1,11 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
+          xmlns:tools="http://schemas.android.com/tools"
       package="com.example"
       android:versionCode="1"
       android:versionName="1.0">
+    <uses-sdk tools:overrideLibrary="timber.log" />
+
     <application android:label="@string/app_name" android:icon="@drawable/icon" android:name="ClientApp">
         <activity android:name=".activities.SugarActivity" android:label="@string/app_name">
             <intent-filter>
diff --git a/library/build.gradle b/library/build.gradle
index 2f7566a1..48a8891e 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -24,6 +24,7 @@ android {
 dependencies {
     testCompile 'junit:junit:4.12'
     testCompile 'org.robolectric:robolectric:3.0'
+    compile 'com.jakewharton.timber:timber:4.1.2'
 }
 
 task libraryJar(type: Jar) {
diff --git a/library/src/main/java/com/orm/SugarRecord.java b/library/src/main/java/com/orm/SugarRecord.java
index 6ef645cc..14a774d9 100644
--- a/library/src/main/java/com/orm/SugarRecord.java
+++ b/library/src/main/java/com/orm/SugarRecord.java
@@ -6,7 +6,7 @@
 import android.database.sqlite.SQLiteException;
 import android.database.sqlite.SQLiteStatement;
 import android.text.TextUtils;
-import android.util.Log;
+import timber.log.Timber;
 
 import com.orm.annotation.Table;
 import com.orm.annotation.Unique;
@@ -28,8 +28,6 @@
 import static com.orm.SugarContext.getSugarContext;
 
 public class SugarRecord {
-    public static final String SUGAR = "Sugar";
-
     private Long id = null;
 
     private static SQLiteDatabase getSugarDataBase() {
@@ -66,7 +64,7 @@ private static SQLiteDatabase getSugarDataBase() {
             }
             sqLiteDatabase.setTransactionSuccessful();
         } catch (Exception e) {
-            Log.i(SUGAR, "Error in saving in transaction " + e.getMessage());
+            Timber.e("Error in saving in transaction " + e.getMessage());
         } finally {
             sqLiteDatabase.endTransaction();
             sqLiteDatabase.setLockingEnabled(true);
@@ -89,7 +87,7 @@ private static SQLiteDatabase getSugarDataBase() {
             }
             sqLiteDatabase.setTransactionSuccessful();
         } catch (Exception e) {
-            Log.i(SUGAR, "Error in saving in transaction " + e.getMessage());
+            Timber.e("Error in saving in transaction " + e.getMessage());
         } finally {
             sqLiteDatabase.endTransaction();
             sqLiteDatabase.setLockingEnabled(true);
@@ -116,7 +114,7 @@ private static SQLiteDatabase getSugarDataBase() {
             sqLiteDatabase.setTransactionSuccessful();
         } catch (Exception e) {
             deletedRows = 0;
-            Log.i(SUGAR, "Error in deleting in transaction " + e.getMessage());
+            Timber.e("Error in deleting in transaction " + e.getMessage());
         } finally {
             sqLiteDatabase.endTransaction();
             sqLiteDatabase.setLockingEnabled(true);
@@ -302,7 +300,7 @@ static long save(SQLiteDatabase db, Object object) {
         }
 
         if (ManifestHelper.isDebugEnabled()) {
-            Log.i(SUGAR, object.getClass().getSimpleName() + " saved : " + id);
+            Timber.i(object.getClass().getSimpleName() + " saved : " + id);
         }
 
         return id;
@@ -384,10 +382,10 @@ public boolean delete() {
         Long id = getId();
         Class<?> type = getClass();
         if (id != null && id > 0L) {
-            Log.i(SUGAR, type.getSimpleName() + " deleted : " + id);
+            Timber.i(type.getSimpleName() + " deleted : " + id);
             return getSugarDataBase().delete(NamingHelper.toTableName(type), "Id=?", new String[]{id.toString()}) == 1;
         } else {
-            Log.i(SUGAR, "Cannot delete object: " + type.getSimpleName() + " - object has not been saved");
+            Timber.i("Cannot delete object: " + type.getSimpleName() + " - object has not been saved");
             return false;
         }
     }
@@ -401,23 +399,23 @@ public static boolean delete(Object object) {
                 Long id = (Long) field.get(object);
                 if (id != null && id > 0L) {
                     boolean deleted = getSugarDataBase().delete(NamingHelper.toTableName(type), "Id=?", new String[]{id.toString()}) == 1;
-                    Log.i(SUGAR, type.getSimpleName() + " deleted : " + id);
+                    Timber.i(type.getSimpleName() + " deleted : " + id);
                     return deleted;
                 } else {
-                    Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - object has not been saved");
+                    Timber.i("Cannot delete object: " + object.getClass().getSimpleName() + " - object has not been saved");
                     return false;
                 }
             } catch (NoSuchFieldException e) {
-                Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - annotated object has no id");
+                Timber.i("Cannot delete object: " + object.getClass().getSimpleName() + " - annotated object has no id");
                 return false;
             } catch (IllegalAccessException e) {
-                Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - can't access id");
+                Timber.i("Cannot delete object: " + object.getClass().getSimpleName() + " - can't access id");
                 return false;
             }
         } else if (SugarRecord.class.isAssignableFrom(type)) {
             return ((SugarRecord) object).delete();
         } else {
-            Log.i(SUGAR, "Cannot delete object: " + object.getClass().getSimpleName() + " - not persisted");
+            Timber.i("Cannot delete object: " + object.getClass().getSimpleName() + " - not persisted");
             return false;
         }
     }
diff --git a/library/src/main/java/com/orm/helper/SugarTransactionHelper.java b/library/src/main/java/com/orm/helper/SugarTransactionHelper.java
index 82077a4a..3ff5e532 100644
--- a/library/src/main/java/com/orm/helper/SugarTransactionHelper.java
+++ b/library/src/main/java/com/orm/helper/SugarTransactionHelper.java
@@ -1,13 +1,11 @@
 package com.orm.helper;
 
 import android.database.sqlite.SQLiteDatabase;
-import android.util.Log;
+import timber.log.Timber;
 
 import static com.orm.SugarContext.getSugarContext;
 
 public final class SugarTransactionHelper {
-    private static final String LOG_TAG = SugarTransactionHelper.class.getSimpleName();
-
     //Prevent instantiation..
     private SugarTransactionHelper() { }
 
@@ -16,14 +14,14 @@ public static void doInTransaction(Callback callback) {
         database.beginTransaction();
 
         try {
-            Log.d(LOG_TAG, "Callback executing within transaction");
+            Timber.d("Callback executing within transaction");
 
             callback.manipulateInTransaction();
             database.setTransactionSuccessful();
 
-            Log.d(LOG_TAG, "Callback successfully executed within transaction");
+            Timber.d("Callback successfully executed within transaction");
         } catch (Throwable e) {
-            Log.d(LOG_TAG, "Could execute callback within transaction", e);
+            Timber.d("Could execute callback within transaction", e);
         } finally {
             database.endTransaction();
         }
diff --git a/library/src/main/java/com/orm/util/ReflectionUtil.java b/library/src/main/java/com/orm/util/ReflectionUtil.java
index 2f5bb117..ca3a8f92 100644
--- a/library/src/main/java/com/orm/util/ReflectionUtil.java
+++ b/library/src/main/java/com/orm/util/ReflectionUtil.java
@@ -3,7 +3,7 @@
 import android.content.ContentValues;
 import android.content.pm.PackageManager;
 import android.database.Cursor;
-import android.util.Log;
+import timber.log.Timber;
 
 import com.orm.SugarRecord;
 import com.orm.SugarSerializer;
@@ -39,7 +39,7 @@ private ReflectionUtil() { }
         List<Field> fieldList = SugarConfig.getFields(table);
         if (fieldList != null) return fieldList;
 
-        Log.d("Sugar", "Fetching properties");
+        Timber.d("Fetching properties");
         List<Field> typeFields = new ArrayList<>();
 
         getAllFields(typeFields, table);
@@ -73,7 +73,7 @@ private static SugarSerializer getSerializer(Serialize annotation,
         }
 
         if (!SugarSerializer.class.isAssignableFrom(serializerClass)) {
-            Log.e("Sugar", "Invalid serializer " + annotation.value());
+            Timber.e("Invalid serializer " + annotation.value());
             return null;
         }
         try {
@@ -81,9 +81,9 @@ private static SugarSerializer getSerializer(Serialize annotation,
             serializerMap.put(serializerClass, sugarSerializer);
             return sugarSerializer;
         } catch (IllegalAccessException e1) {
-            Log.e("Sugar", e1.getMessage());
+            Timber.e(e1.getMessage());
         } catch (InstantiationException e2) {
-            Log.e("Sugar", e2.getMessage());
+            Timber.e(e2.getMessage());
         }
         return null;
     }
@@ -175,7 +175,7 @@ public static void addFieldValueToColumn(ContentValues values, Field column, Obj
             }
 
         } catch (IllegalAccessException e) {
-            Log.e("Sugar", e.getMessage());
+            Timber.e(e, "addFieldValueToColumn: " + column.getName() + ", object=" + object);
         }
     }
 
@@ -190,7 +190,7 @@ public static void setFieldValueFromCursor(Cursor cursor, Field field, Object ob
 
             //TODO auto upgrade to add new columns
             if (columnIndex < 0) {
-                Log.e("SUGAR", "Invalid colName, you should upgrade database");
+                Timber.e("Invalid colName, you should upgrade database");
                 return;
             }
 
@@ -256,12 +256,12 @@ public static void setFieldValueFromCursor(Cursor cursor, Field field, Object ob
                     Object enumVal = valueOf.invoke(field.getType(), strVal);
                     field.set(object, enumVal);
                 } catch (Exception e) {
-                    Log.e("Sugar", "Enum cannot be read from Sqlite3 database. Please check the type of field " + field.getName());
+                    Timber.e("Enum cannot be read from Sqlite3 database. Please check the type of field " + field.getName());
                 }
             } else
-                Log.e("Sugar", "Class cannot be read from Sqlite3 database. Please check the type of field " + field.getName() + "(" + field.getType().getName() + ")");
+                Timber.e("Class cannot be read from Sqlite3 database. Please check the type of field " + field.getName() + "(" + field.getType().getName() + ")");
         } catch (IllegalArgumentException | IllegalAccessException e) {
-            Log.e("field set error", e.getMessage());
+            Timber.e(e, "field set error", e.getMessage());
         }
     }
 
@@ -296,7 +296,7 @@ public static void setFieldValueForId(Object object, Long value) {
                 if (domainClass != null) domainClasses.add(domainClass);
             }
         } catch (IOException | PackageManager.NameNotFoundException  e) {
-            Log.e("Sugar", e.getMessage());
+            Timber.e(e, "getDomainClasses()" + e.getMessage());
         }
 
         return domainClasses;
@@ -309,7 +309,7 @@ private static Class getDomainClass(String className) {
             discoveredClass = Class.forName(className, true, Thread.currentThread().getContextClassLoader());
         } catch (Throwable e) {
             String error = (e.getMessage() == null) ? "getDomainClass " + className + " error" : e.getMessage();
-            Log.e("Sugar", error);
+            Timber.e(e, error);
         }
 
         if ((discoveredClass != null) &&
@@ -318,7 +318,7 @@ private static Class getDomainClass(String className) {
                         discoveredClass.isAnnotationPresent(Table.class)) &&
                 !Modifier.isAbstract(discoveredClass.getModifiers())) {
 
-            Log.i("Sugar", "domain class : " + discoveredClass.getSimpleName());
+            Timber.i("domain class : " + discoveredClass.getSimpleName());
             return discoveredClass;
 
         } else {
diff --git a/library/src/main/java/com/orm/util/SugarCursorFactory.java b/library/src/main/java/com/orm/util/SugarCursorFactory.java
index 3274fccc..880a6927 100644
--- a/library/src/main/java/com/orm/util/SugarCursorFactory.java
+++ b/library/src/main/java/com/orm/util/SugarCursorFactory.java
@@ -5,7 +5,7 @@
 import android.database.sqlite.SQLiteCursorDriver;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteQuery;
-import android.util.Log;
+import timber.log.Timber;
 
 public class SugarCursorFactory implements SQLiteDatabase.CursorFactory {
 
@@ -26,7 +26,7 @@ public Cursor newCursor(SQLiteDatabase sqLiteDatabase,
             SQLiteQuery sqLiteQuery) {
 
         if (debugEnabled) {
-            Log.d("SQL Log", sqLiteQuery.toString());
+            Timber.d("SQL Log", sqLiteQuery.toString());
         }
 
         return new SQLiteCursor(sqLiteDatabase, sqLiteCursorDriver, editTable, sqLiteQuery);
