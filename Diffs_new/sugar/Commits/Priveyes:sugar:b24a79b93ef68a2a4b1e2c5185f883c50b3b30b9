diff --git a/.gitignore b/.gitignore
index 8cfcff0b..0f901644 100644
--- a/.gitignore
+++ b/.gitignore
@@ -33,7 +33,6 @@ local.properties
 *.xcworkspace
 *_ReSharper*
 
-.DS_Store
 ._.DS_Store
 
 project.properties
diff --git a/build.gradle b/build.gradle
index 030e1cb3..a253d6d3 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,22 +1,21 @@
 apply plugin: 'jacoco'
 apply plugin: 'com.github.kt3k.coveralls'
 apply plugin: 'java'
-
 buildscript {
     repositories {
+        google()
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.0.0'
+        classpath 'com.android.tools.build:gradle:3.4.0-rc03'
         classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
     }
 }
-
 def isReleaseBuild() {
     return version.contains("SNAPSHOT") == false
 }
-test{
-    testLogging{
+test {
+    testLogging {
         exceptionFormat = 'full'
     }
 }
@@ -25,12 +24,12 @@ allprojects {
     group = GROUP
 
     repositories {
+        google()
         mavenLocal()
         mavenCentral()
         jcenter()
     }
 }
-
 subprojects { proj ->
     apply plugin: 'jacoco'
 
@@ -46,9 +45,9 @@ subprojects { proj ->
             html.enabled = true
         }
         classDirectories = fileTree(
-            dir: 'build/intermediates/classes/debug',
-            excludes: ['**/R*.class',
-                       '**/BuildConfig*'])
+                dir: 'build/intermediates/classes/debug',
+                excludes: ['**/R*.class',
+                           '**/BuildConfig*'])
         sourceDirectories = files('src/main/java')
         executionData = files('build/jacoco/testDebugUnitTest.exec')
         doFirst {
@@ -60,11 +59,9 @@ subprojects { proj ->
         }
     }
 }
-
 jacoco {
     toolVersion "0.7.1.201405082137"
 }
-
 task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
     group = "Reporting"
     description = 'Generates an aggregate report from all subprojects'
@@ -88,16 +85,16 @@ task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
         executionData = files(executionData.findAll { it.exists() })
     }
 }
-
 coveralls {
     sourceDirs = files('library/src/main/java').flatten()
     jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
 }
-
 tasks.coveralls {
     group = 'Coverage reports'
     description = 'Uploads the aggregated coverage report to Coveralls'
 
     dependsOn jacocoRootReport
     onlyIf { System.env.'CI' }
+}
+dependencies {
 }
\ No newline at end of file
diff --git a/example/build.gradle b/example/build.gradle
index a8b90f05..ca601c53 100644
--- a/example/build.gradle
+++ b/example/build.gradle
@@ -1,13 +1,13 @@
 apply plugin: 'com.android.application'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion "23.0.3"
+    compileSdkVersion 28
+    buildToolsVersion "28.0.3"
 
     defaultConfig {
-        applicationId "com.example"
-        minSdkVersion 9
-        targetSdkVersion 23
+        applicationId "com.sugar.example"
+        minSdkVersion 14
+        targetSdkVersion 28
     }
     buildTypes {
         release {
@@ -17,9 +17,13 @@ android {
     lintOptions {
         abortOnError false
     }
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_8
+        targetCompatibility JavaVersion.VERSION_1_8
+    }
 }
 
 dependencies {
-    compile project (':library')
-    compile 'com.android.support:appcompat-v7:23.3.0'
+    implementation project(':library')
+    implementation 'com.android.support:appcompat-v7:28.0.0'
 }
diff --git a/example/src/main/AndroidManifest.xml b/example/src/main/AndroidManifest.xml
index eb802533..e1cd0e98 100644
--- a/example/src/main/AndroidManifest.xml
+++ b/example/src/main/AndroidManifest.xml
@@ -1,17 +1,32 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-      package="com.example"
-      android:versionCode="1"
-      android:versionName="1.0">
-    <application android:label="@string/app_name" android:icon="@drawable/icon" android:name="ClientApp">
-        <activity android:name=".activities.SugarActivity" android:label="@string/app_name">
+    xmlns:tools="http://schemas.android.com/tools"
+    package="com.example"
+    android:versionCode="1"
+    android:versionName="1.0">
+
+    <application
+        android:label="@string/app_name"
+        android:icon="@drawable/icon"
+
+        tools:ignore="GoogleAppIndexingWarning">
+        <activity
+            android:name=".activities.SugarActivity"
+            android:label="@string/app_name">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
                 <category android:name="android.intent.category.LAUNCHER" />
             </intent-filter>
         </activity>
-        <meta-data android:name="DATABASE" android:value="sugar_example.db" />
-        <meta-data android:name="VERSION" android:value="3" />
-        <meta-data android:name="QUERY_LOG" android:value="true" />
+
+        <meta-data
+            android:name="DATABASE"
+            android:value="sugar_example.db" />
+        <meta-data
+            android:name="VERSION"
+            android:value="3" />
+        <meta-data
+            android:name="QUERY_LOG"
+            android:value="true" />
     </application>
 </manifest> 
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index b0bb3ffb..1ce63905 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Sat Apr 09 17:51:14 ART 2016
+#Sun Apr 07 13:17:45 CEST 2019
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-5.2.1-all.zip
diff --git a/library/build.gradle b/library/build.gradle
index 907162ee..17289e82 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -2,12 +2,12 @@ apply plugin: 'com.android.library'
 apply from: '../maven_push.gradle'
 
 android {
-    compileSdkVersion 23
-    buildToolsVersion "23.0.3"
+    compileSdkVersion 28
+    buildToolsVersion "28.0.3"
 
     defaultConfig {
-        minSdkVersion 9
-        targetSdkVersion 23
+        minSdkVersion 14
+        targetSdkVersion 28
     }
     buildTypes {
         release {
@@ -20,17 +20,25 @@ android {
     lintOptions {
         abortOnError false
     }
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_8
+        targetCompatibility JavaVersion.VERSION_1_8
+    }
 }
 
 dependencies {
-    testCompile 'junit:junit:4.12'
-    testCompile 'org.robolectric:robolectric:3.0'
+    testImplementation 'junit:junit:4.12'
+    testImplementation 'org.robolectric:robolectric:3.0'
 }
 
-task libraryJar(type: Jar) {
-    dependsOn assembleRelease
-    from android.sourceSets.main.java.srcDirs,
-         ['build/intermediates/classes/release/'] // Add the release classes into the jar
-    baseName 'sugar'
+//task libraryJar(type: Jar) {
+//    dependsOn "assembleRelease"
+//    from android.sourceSets.main.java.srcDirs,
+//         ['build/intermediates/classes/release/'] // Add the release classes into the jar
+//    baseName 'sugar'
+//}
+
+afterEvaluate {
+    task aar(dependsOn: "assembleRelease")
 }
 
diff --git a/library/src/main/java/com/orm/SugarContext.java b/library/src/main/java/com/orm/SugarContext.java
index 61609986..be7f4445 100644
--- a/library/src/main/java/com/orm/SugarContext.java
+++ b/library/src/main/java/com/orm/SugarContext.java
@@ -17,7 +17,7 @@
 
     private SugarContext() {
         this.sugarDb = SugarDb.getInstance();
-        this.entitiesMap = Collections.synchronizedMap(new WeakHashMap<Object, Long>());
+        this.entitiesMap = Collections.synchronizedMap(new WeakHashMap<>());
     }
     
     public static SugarContext getSugarContext() {
diff --git a/library/src/main/java/com/orm/SugarRecord.java b/library/src/main/java/com/orm/SugarRecord.java
index 2ade2ba3..e7ebc71d 100644
--- a/library/src/main/java/com/orm/SugarRecord.java
+++ b/library/src/main/java/com/orm/SugarRecord.java
@@ -200,7 +200,7 @@ public static void executeQuery(String query, String... arguments) {
 
     public static <T> List<T> find(Class<T> type, String whereClause, String[] whereArgs, String groupBy, String orderBy, String limit) {
 
-        String args[];
+	    String[] args;
         args = (whereArgs == null) ? null : replaceArgs(whereArgs);
 
         Cursor cursor = getSugarDataBase().query(NamingHelper.toTableName(type), null, whereClause, args,
@@ -210,7 +210,7 @@ public static void executeQuery(String query, String... arguments) {
     }
 
     public static <T> List<T> findOneToMany(Class<T> type, String relationFieldName, Object relationObject, Long relationObjectId) {
-        String args[] = { String.valueOf(relationObjectId) };
+	    String[] args = {String.valueOf(relationObjectId)};
         String whereClause = NamingHelper.toSQLNameDefault(relationFieldName) + " = ?";
 
         Cursor cursor = getSugarDataBase().query(NamingHelper.toTableName(type), null, whereClause, args,
diff --git a/library/src/test/java/com/orm/SugarDataSourceTest.java b/library/src/test/java/com/orm/SugarDataSourceTest.java
index 9f3d25ba..08685785 100644
--- a/library/src/test/java/com/orm/SugarDataSourceTest.java
+++ b/library/src/test/java/com/orm/SugarDataSourceTest.java
@@ -59,7 +59,7 @@ public void onError(Exception e) {
                     @Override
                     public void onSuccess(Boolean result) {
                         assertNotNull(result);
-                        assertEquals(true, result.booleanValue());
+                        assertTrue(result.booleanValue());
                     }
                 },
                 new SugarDataSource.ErrorCallback() {
diff --git a/library/src/test/java/com/orm/SugarDbTest.java b/library/src/test/java/com/orm/SugarDbTest.java
index 7ff5914a..6fa604fa 100644
--- a/library/src/test/java/com/orm/SugarDbTest.java
+++ b/library/src/test/java/com/orm/SugarDbTest.java
@@ -11,6 +11,7 @@
 import org.robolectric.annotation.Config;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 
 /**
  * @author jonatan.salas
@@ -24,18 +25,18 @@
     //TODO check this better!
     public void testGetReadableDatabase() {
         final SQLiteDatabase db = sugarDb.getReadableDatabase();
-        assertEquals(false, db.isReadOnly());
+	    assertFalse(db.isReadOnly());
     }
 
     @Test
     public void testGetWritableDatabase() {
         final SQLiteDatabase db = sugarDb.getWritableDatabase();
-        assertEquals(false, db.isReadOnly());
+	    assertFalse(db.isReadOnly());
     }
 
     @Test
     public void testGetDB() {
         final SQLiteDatabase db = sugarDb.getDB();
-        assertEquals(false, db.isReadOnly());
+	    assertFalse(db.isReadOnly());
     }
 }
diff --git a/library/src/test/java/com/orm/helper/ManifestHelperTest.java b/library/src/test/java/com/orm/helper/ManifestHelperTest.java
index 2fad344c..1a3e6bba 100644
--- a/library/src/test/java/com/orm/helper/ManifestHelperTest.java
+++ b/library/src/test/java/com/orm/helper/ManifestHelperTest.java
@@ -11,6 +11,7 @@
 
 import static junit.framework.Assert.assertNull;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 
 import static com.orm.helper.ManifestHelper.getDatabaseName;
@@ -55,6 +56,6 @@ public void testGetDomainPackageName() {
 
     @Test
     public void testGetDebugEnabled() {
-        assertEquals(false, isDebugEnabled());
+	    assertFalse(isDebugEnabled());
     }
 }
diff --git a/library/src/test/java/com/orm/helper/SugarTransactionHelperTest.java b/library/src/test/java/com/orm/helper/SugarTransactionHelperTest.java
index 1fe73708..64f09dca 100644
--- a/library/src/test/java/com/orm/helper/SugarTransactionHelperTest.java
+++ b/library/src/test/java/com/orm/helper/SugarTransactionHelperTest.java
@@ -18,6 +18,7 @@
 
 import static junit.framework.Assert.assertEquals;
 import static junit.framework.Assert.assertNull;
+import static junit.framework.Assert.assertTrue;
 
 /**
  * @author jonatan.salas
@@ -67,9 +68,9 @@ public void manipulateInTransaction() {
 
         final List<TestRecord> results = TestRecord.listAll(TestRecord.class);
 
-        assertEquals(true, inList(results, record1));
-        assertEquals(true, inList(results, record2));
-        assertEquals(true, inList(results, record3));
+	    assertTrue(inList(results, record1));
+	    assertTrue(inList(results, record2));
+	    assertTrue(inList(results, record3));
     }
 
     private boolean inList(List<TestRecord> list, TestRecord testRecord) {
diff --git a/library/src/test/java/com/orm/model/EnumFieldAnnotatedModel.java b/library/src/test/java/com/orm/model/EnumFieldAnnotatedModel.java
index abb3a63f..b913c246 100644
--- a/library/src/test/java/com/orm/model/EnumFieldAnnotatedModel.java
+++ b/library/src/test/java/com/orm/model/EnumFieldAnnotatedModel.java
@@ -4,11 +4,11 @@
 
 @Table
 public class EnumFieldAnnotatedModel {
-    public static enum DefaultEnum {
+    public enum DefaultEnum {
         ONE, TWO
     }
 
-    public static enum OverrideEnum {
+    public enum OverrideEnum {
         ONE, TWO;
 
         @Override
diff --git a/library/src/test/java/com/orm/model/EnumFieldExtendedModel.java b/library/src/test/java/com/orm/model/EnumFieldExtendedModel.java
index 24ec7725..24e0bcf7 100644
--- a/library/src/test/java/com/orm/model/EnumFieldExtendedModel.java
+++ b/library/src/test/java/com/orm/model/EnumFieldExtendedModel.java
@@ -3,11 +3,11 @@
 import com.orm.SugarRecord;
 
 public class EnumFieldExtendedModel extends SugarRecord {
-    public static enum DefaultEnum {
+    public enum DefaultEnum {
         ONE, TWO
     }
 
-    public static enum OverrideEnum {
+    public enum OverrideEnum {
         ONE, TWO;
 
         @Override
diff --git a/library/src/test/java/com/orm/record/BooleanFieldTests.java b/library/src/test/java/com/orm/record/BooleanFieldTests.java
index 3a026a48..1f4ad044 100644
--- a/library/src/test/java/com/orm/record/BooleanFieldTests.java
+++ b/library/src/test/java/com/orm/record/BooleanFieldTests.java
@@ -14,7 +14,9 @@
 import static com.orm.SugarRecord.findById;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
 
 @RunWith(RobolectricGradleTestRunner.class)
 @Config(sdk = 18, constants = BuildConfig.class, application = ClientApp.class, packageName = "com.orm.model", manifest = Config.NONE)
@@ -31,7 +33,7 @@ public void nullBooleanExtendedTest() {
     public void nullRawBooleanExtendedTest() {
         save(new BooleanFieldExtendedModel());
         BooleanFieldExtendedModel model = findById(BooleanFieldExtendedModel.class, 1);
-        assertEquals(false, model.getRawBoolean());
+	    assertFalse(model.getRawBoolean());
     }
 
     @Test
@@ -45,7 +47,7 @@ public void nullBooleanAnnotatedTest() {
     public void nullRawBooleanAnnotatedTest() {
         save(new BooleanFieldAnnotatedModel());
         BooleanFieldAnnotatedModel model = findById(BooleanFieldAnnotatedModel.class, 1);
-        assertEquals(false, model.getRawBoolean());
+	    assertFalse(model.getRawBoolean());
     }
 
 ////TODO check this method
@@ -60,7 +62,7 @@ public void nullRawBooleanAnnotatedTest() {
     public void rawBooleanExtendedTest() {
         save(new BooleanFieldExtendedModel(true));
         BooleanFieldExtendedModel model = findById(BooleanFieldExtendedModel.class, 1);
-        assertEquals(true, model.getRawBoolean());
+	    assertTrue(model.getRawBoolean());
     }
 
 //    //TODO check this
@@ -78,6 +80,6 @@ public void rawBooleanExtendedTest() {
     public void rawBooleanAnnotatedTest() {
         save(new BooleanFieldAnnotatedModel(true));
         BooleanFieldAnnotatedModel model = findById(BooleanFieldAnnotatedModel.class, 1);
-        assertEquals(true, model.getRawBoolean());
+	    assertTrue(model.getRawBoolean());
     }
 }
diff --git a/library/src/test/java/com/orm/record/OneToManyTest.java b/library/src/test/java/com/orm/record/OneToManyTest.java
index 73a60b57..17e5c7d9 100644
--- a/library/src/test/java/com/orm/record/OneToManyTest.java
+++ b/library/src/test/java/com/orm/record/OneToManyTest.java
@@ -134,6 +134,6 @@ public void shouldNotInflateList() {
 
         WithoutOneToManyAnnotationModel result = findById(WithoutOneToManyAnnotationModel.class, 1l);
 
-        Assert.assertEquals(null, result.getModels());
+        Assert.assertNull(result.getModels());
     }
 }
diff --git a/library/src/test/java/com/orm/util/KeyWordUtilTest.java b/library/src/test/java/com/orm/util/KeyWordUtilTest.java
index 417f1b21..aded401d 100644
--- a/library/src/test/java/com/orm/util/KeyWordUtilTest.java
+++ b/library/src/test/java/com/orm/util/KeyWordUtilTest.java
@@ -3,7 +3,9 @@
 import org.junit.Test;
 
 import static junit.framework.Assert.assertEquals;
+import static junit.framework.Assert.assertFalse;
 import static junit.framework.Assert.assertNull;
+import static junit.framework.Assert.assertTrue;
 
 /**
  * @author jonatan.salas
@@ -18,19 +20,19 @@ public void testPrivateConstructor() throws Exception {
 
     @Test
     public void testKeyWord() {
-        assertEquals(true, KeyWordUtil.isKeyword("SELECT"));
-        assertEquals(true, KeyWordUtil.isKeyword("TRANSACTION"));
-        assertEquals(true, KeyWordUtil.isKeyword("MATCH"));
-        assertEquals(true, KeyWordUtil.isKeyword("AS"));
-        assertEquals(true, KeyWordUtil.isKeyword("NOTNULL"));
-        assertEquals(true, KeyWordUtil.isKeyword("NOT"));
-        assertEquals(false, KeyWordUtil.isKeyword("PERSONS"));
-        assertEquals(false, KeyWordUtil.isKeyword("NAME"));
-        assertEquals(false, KeyWordUtil.isKeyword("LOCATION"));
+	    assertTrue(KeyWordUtil.isKeyword("SELECT"));
+	    assertTrue(KeyWordUtil.isKeyword("TRANSACTION"));
+	    assertTrue(KeyWordUtil.isKeyword("MATCH"));
+	    assertTrue(KeyWordUtil.isKeyword("AS"));
+	    assertTrue(KeyWordUtil.isKeyword("NOTNULL"));
+	    assertTrue(KeyWordUtil.isKeyword("NOT"));
+	    assertFalse(KeyWordUtil.isKeyword("PERSONS"));
+	    assertFalse(KeyWordUtil.isKeyword("NAME"));
+	    assertFalse(KeyWordUtil.isKeyword("LOCATION"));
     }
 
     @Test
     public void testNullKeyword() {
-        assertEquals(false, KeyWordUtil.isKeyword(null));
+	    assertFalse(KeyWordUtil.isKeyword(null));
     }
 }
diff --git a/library/src/test/java/com/orm/util/MigrationFileParserTest.java b/library/src/test/java/com/orm/util/MigrationFileParserTest.java
index 9b2d87ce..48f9c324 100644
--- a/library/src/test/java/com/orm/util/MigrationFileParserTest.java
+++ b/library/src/test/java/com/orm/util/MigrationFileParserTest.java
@@ -12,7 +12,7 @@
     public void testSingleLineStatement() {
         MigrationFileParser singleLineComment = new MigrationFileParser("insert into table--comment");
 
-        String statements[] = singleLineComment.getStatements();
+	    String[] statements = singleLineComment.getStatements();
         assertEquals("Testing single line statement size",1,statements.length);
         assertEquals("Testing single line statement content","insert into table",statements[0]);
 
@@ -27,7 +27,7 @@ public void testSingleLineStatement() {
     public void testMultiLineComment() {
         MigrationFileParser multiLineComment = new MigrationFileParser("insert into table /**comment \n new line 2 \n new line 3 */hello");
 
-        String statements[] = multiLineComment.getStatements();
+	    String[] statements = multiLineComment.getStatements();
         assertEquals("Testing multiline statement size",1,statements.length);
         assertEquals("Testing multiline comment","insert into table hello",statements[0]);
     }
@@ -36,7 +36,7 @@ public void testMultiLineComment() {
     public void testMixedComment() {
         MigrationFileParser mixedComment = new MigrationFileParser("insert into/*multiline\n **comment*/--comment");
 
-        String statements[] = mixedComment.getStatements();
+	    String[] statements = mixedComment.getStatements();
 
         assertEquals("Testing mixed comment statement size",1,statements.length);
         assertEquals("Testing mixed comment statments", "insert into", statements[0]);
diff --git a/library/src/test/java/com/orm/util/ReflectionUtilTest.java b/library/src/test/java/com/orm/util/ReflectionUtilTest.java
index a93e059a..992300db 100644
--- a/library/src/test/java/com/orm/util/ReflectionUtilTest.java
+++ b/library/src/test/java/com/orm/util/ReflectionUtilTest.java
@@ -44,8 +44,8 @@ public void testGetTableFields() {
             strings.add(field.getName());
         }
 
-        Assert.assertEquals(true, strings.contains("id"));
-        Assert.assertEquals(true, strings.contains("name"));
+        Assert.assertTrue(strings.contains("id"));
+        Assert.assertTrue(strings.contains("name"));
     }
 
     @Test(expected = NoSuchFieldException.class)
diff --git a/library/src/test/java/com/orm/util/SugarConfigTest.java b/library/src/test/java/com/orm/util/SugarConfigTest.java
index 82943e9e..9531faed 100644
--- a/library/src/test/java/com/orm/util/SugarConfigTest.java
+++ b/library/src/test/java/com/orm/util/SugarConfigTest.java
@@ -28,6 +28,6 @@ public void testSetGetFields() {
     @Test
     public void testClearCache() {
         SugarConfig.clearCache();
-        Assert.assertEquals(true, SugarConfig.fields.isEmpty());
+	    Assert.assertTrue(SugarConfig.fields.isEmpty());
     }
 }
