diff --git a/example/src/test/java/com/example/sugartest/BigDecimalFieldTests.java b/example/src/test/java/com/example/sugartest/BigDecimalFieldTests.java
index e1a06689..b17095d3 100644
--- a/example/src/test/java/com/example/sugartest/BigDecimalFieldTests.java
+++ b/example/src/test/java/com/example/sugartest/BigDecimalFieldTests.java
@@ -3,7 +3,6 @@
 
 import com.example.models.BigDecimalFieldAnnotatedModel;
 import com.example.models.BigDecimalFieldExtendedModel;
-import com.example.models.PrimaryKeyNotationBigDecimalFieldAnnotatedModel;
 import com.orm.SugarRecord;
 
 import org.junit.Test;
@@ -12,31 +11,30 @@
 
 import java.math.BigDecimal;
 
+
 import static com.orm.SugarRecord.save;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk=18)
-public class BigDecimalFieldTests {
+@RunWith (RobolectricGradleTestRunner.class)
+@Config (sdk = 18)
+public class BigDecimalFieldTests{
     @Test
-    public void nullBigDecimalExtendedTest() {
+    public void nullBigDecimalExtendedTest(){
         save(new BigDecimalFieldExtendedModel());
-        BigDecimalFieldExtendedModel model =
-                SugarRecord.findById(BigDecimalFieldExtendedModel.class, 1);
+        BigDecimalFieldExtendedModel model = SugarRecord.findById(BigDecimalFieldExtendedModel.class, 1);
         assertNull(model.getBigDecimal());
     }
 
     @Test
-    public void nullBigDecimalAnnotatedTest() {
+    public void nullBigDecimalAnnotatedTest(){
         save(new BigDecimalFieldAnnotatedModel());
-        BigDecimalFieldAnnotatedModel model =
-                SugarRecord.findById(BigDecimalFieldAnnotatedModel.class, 1);
+        BigDecimalFieldAnnotatedModel model = SugarRecord.findById(BigDecimalFieldAnnotatedModel.class, 1);
         assertNull(model.getBigDecimal());
     }
 
     @Test
-    public void bigDecimalExtendedTest() {
+    public void bigDecimalExtendedTest(){
         BigDecimal decimal = new BigDecimal(1234.5678901234567890123456789);
         save(new BigDecimalFieldExtendedModel(decimal));
         BigDecimalFieldExtendedModel model = SugarRecord.findById(BigDecimalFieldExtendedModel.class, 1);
@@ -44,36 +42,11 @@ public void bigDecimalExtendedTest() {
     }
 
     @Test
-    public void bigDecimalAnnotatedTest() {
+    public void bigDecimalAnnotatedTest(){
         BigDecimal decimal = new BigDecimal(1234.5678901234567890123456789);
         save(new BigDecimalFieldAnnotatedModel(decimal));
-        BigDecimalFieldAnnotatedModel model =
-                SugarRecord.findById(BigDecimalFieldAnnotatedModel.class, 1);
-        assertEquals(decimal, model.getBigDecimal());
-    }
-    @Test
-    public void primryKeyNotationNullBigDecimalExtendedTest() {
-        save(new PrimaryKeyNotationBigDecimalFieldAnnotatedModel());
-        PrimaryKeyNotationBigDecimalFieldAnnotatedModel model =
-                SugarRecord.findById(PrimaryKeyNotationBigDecimalFieldAnnotatedModel.class, 1);
-        assertNull(model.getBigDecimal());
-    }
-
-    @Test
-    public void primryKeyNotationBigDecimalExtendedTest() {
-        BigDecimal decimal = new BigDecimal(1234.5678901234567890123456789);
-        save(new PrimaryKeyNotationBigDecimalFieldAnnotatedModel(decimal));
-        PrimaryKeyNotationBigDecimalFieldAnnotatedModel model =
-                SugarRecord.findById(PrimaryKeyNotationBigDecimalFieldAnnotatedModel.class, 1);
+        BigDecimalFieldAnnotatedModel model = SugarRecord.findById(BigDecimalFieldAnnotatedModel.class, 1);
         assertEquals(decimal, model.getBigDecimal());
     }
 
-    @Test
-    public void primryKeyNotationBigDecimalAnnotatedTest() {
-        BigDecimal decimal = new BigDecimal(1234.5678901234567890123456789);
-        save(new PrimaryKeyNotationBigDecimalFieldAnnotatedModel(decimal));
-        PrimaryKeyNotationBigDecimalFieldAnnotatedModel model =
-                SugarRecord.findById(PrimaryKeyNotationBigDecimalFieldAnnotatedModel.class, 1);
-        assertEquals(decimal, model.getBigDecimal());
-    }
 }
diff --git a/example/src/test/java/com/example/sugartest/BooleanFieldTests.java b/example/src/test/java/com/example/sugartest/BooleanFieldTests.java
index 55cf997f..3625bed3 100644
--- a/example/src/test/java/com/example/sugartest/BooleanFieldTests.java
+++ b/example/src/test/java/com/example/sugartest/BooleanFieldTests.java
@@ -2,50 +2,50 @@
 
 
 import com.example.models.BooleanFieldAnnotatedModel;
-import com.example.models.PrimaryKeyNotationBooleanFieldAnnotatedModel;
 import com.orm.SugarRecord;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
 
+
 import static com.orm.SugarRecord.save;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 
-@RunWith(RobolectricGradleTestRunner.class)
-@Config(sdk=18)
-public class BooleanFieldTests {
+@RunWith (RobolectricGradleTestRunner.class)
+@Config (sdk = 18)
+public class BooleanFieldTests{
     @Test
-    public void nullBooleanExtendedTest() {
+    public void nullBooleanExtendedTest(){
         save(new BooleanFieldAnnotatedModel());
         BooleanFieldAnnotatedModel model = SugarRecord.findById(BooleanFieldAnnotatedModel.class, 1);
         assertNull(model.getBoolean());
     }
 
     @Test
-    public void nullRawBooleanExtendedTest() {
+    public void nullRawBooleanExtendedTest(){
         save(new BooleanFieldAnnotatedModel());
         BooleanFieldAnnotatedModel model = SugarRecord.findById(BooleanFieldAnnotatedModel.class, 1);
         assertEquals(false, model.getRawBoolean());
     }
 
     @Test
-    public void nullBooleanAnnotatedTest() {
+    public void nullBooleanAnnotatedTest(){
         save(new BooleanFieldAnnotatedModel());
         BooleanFieldAnnotatedModel model = SugarRecord.findById(BooleanFieldAnnotatedModel.class, 1);
         assertNull(model.getBoolean());
     }
 
     @Test
-    public void nullRawBooleanAnnotatedTest() {
+    public void nullRawBooleanAnnotatedTest(){
         save(new BooleanFieldAnnotatedModel());
         BooleanFieldAnnotatedModel model = SugarRecord.findById(BooleanFieldAnnotatedModel.class, 1);
         assertEquals(false, model.getRawBoolean());
     }
 
     @Test
-    public void objectBooleanExtendedTest() {
+    public void objectBooleanExtendedTest(){
         Boolean objectBoolean = new Boolean(true);
         save(new BooleanFieldAnnotatedModel(objectBoolean));
         BooleanFieldAnnotatedModel model = SugarRecord.findById(BooleanFieldAnnotatedModel.class, 1);
@@ -53,14 +53,14 @@ public void objectBooleanExtendedTest() {
     }
 
     @Test
-    public void rawBooleanExtendedTest() {
+    public void rawBooleanExtendedTest(){
         save(new BooleanFieldAnnotatedModel(true));
         BooleanFieldAnnotatedModel model = SugarRecord.findById(BooleanFieldAnnotatedModel.class, 1);
         assertEquals(true, model.getRawBoolean());
     }
 
     @Test
-    public void objectBooleanAnnotatedTest() {
+    public void objectBooleanAnnotatedTest(){
         Boolean objectBoolean = new Boolean(true);
         save(new BooleanFieldAnnotatedModel(objectBoolean));
         BooleanFieldAnnotatedModel model = SugarRecord.findById(BooleanFieldAnnotatedModel.class, 1);
@@ -68,67 +68,10 @@ public void objectBooleanAnnotatedTest() {
     }
 
     @Test
-    public void rawBooleanAnnotatedTest() {
+    public void rawBooleanAnnotatedTest(){
         save(new BooleanFieldAnnotatedModel(true));
         BooleanFieldAnnotatedModel model = SugarRecord.findById(BooleanFieldAnnotatedModel.class, 1);
         assertEquals(true, model.getRawBoolean());
     }
 
-    @Test
-    public void primaryKeyNullBooleanExtendedTest() {
-        save(new PrimaryKeyNotationBooleanFieldAnnotatedModel());
-        PrimaryKeyNotationBooleanFieldAnnotatedModel model = SugarRecord.findById(PrimaryKeyNotationBooleanFieldAnnotatedModel.class, 1);
-        assertNull(model.getBoolean());
-    }
-
-    @Test
-    public void primaryKeynullRawBooleanExtendedTest() {
-        save(new PrimaryKeyNotationBooleanFieldAnnotatedModel());
-        PrimaryKeyNotationBooleanFieldAnnotatedModel model = SugarRecord.findById(PrimaryKeyNotationBooleanFieldAnnotatedModel.class, 1);
-        assertEquals(false, model.getRawBoolean());
-    }
-
-    @Test
-    public void primaryKeyNotationNullBooleanAnnotatedTest() {
-        save(new PrimaryKeyNotationBooleanFieldAnnotatedModel());
-        PrimaryKeyNotationBooleanFieldAnnotatedModel model = SugarRecord.findById(PrimaryKeyNotationBooleanFieldAnnotatedModel.class, 1);
-        assertNull(model.getBoolean());
-    }
-
-    @Test
-    public void primaryKeyNotationNullRawBooleanAnnotatedTest() {
-        save(new PrimaryKeyNotationBooleanFieldAnnotatedModel());
-        PrimaryKeyNotationBooleanFieldAnnotatedModel model = SugarRecord.findById(PrimaryKeyNotationBooleanFieldAnnotatedModel.class, 1);
-        assertEquals(false, model.getRawBoolean());
-    }
-
-    @Test
-    public void primaryKeyNotationObjectBooleanExtendedTest() {
-        Boolean objectBoolean = new Boolean(true);
-        save(new PrimaryKeyNotationBooleanFieldAnnotatedModel(objectBoolean));
-        PrimaryKeyNotationBooleanFieldAnnotatedModel model = SugarRecord.findById(PrimaryKeyNotationBooleanFieldAnnotatedModel.class, 1);
-        assertEquals(objectBoolean, model.getBoolean());
-    }
-
-    @Test
-    public void primaryKeyNotationRawBooleanExtendedTest() {
-        save(new PrimaryKeyNotationBooleanFieldAnnotatedModel(true));
-        PrimaryKeyNotationBooleanFieldAnnotatedModel model = SugarRecord.findById(PrimaryKeyNotationBooleanFieldAnnotatedModel.class, 1);
-        assertEquals(true, model.getRawBoolean());
-    }
-
-    @Test
-    public void primaryKeyNotationObjectBooleanAnnotatedTest() {
-        Boolean objectBoolean = new Boolean(true);
-        save(new PrimaryKeyNotationBooleanFieldAnnotatedModel(objectBoolean));
-        PrimaryKeyNotationBooleanFieldAnnotatedModel model = SugarRecord.findById(PrimaryKeyNotationBooleanFieldAnnotatedModel.class, 1);
-        assertEquals(objectBoolean, model.getBoolean());
-    }
-
-    @Test
-    public void primaryKeyNotationRawBooleanAnnotatedTest() {
-        save(new PrimaryKeyNotationBooleanFieldAnnotatedModel(true));
-        PrimaryKeyNotationBooleanFieldAnnotatedModel model = SugarRecord.findById(PrimaryKeyNotationBooleanFieldAnnotatedModel.class, 1);
-        assertEquals(true, model.getRawBoolean());
-    }
 }
diff --git a/example/src/test/java/com/example/sugartest/PrimaryKeyNotationBigDecimalFieldTests.java b/example/src/test/java/com/example/sugartest/PrimaryKeyNotationBigDecimalFieldTests.java
new file mode 100644
index 00000000..620ab84c
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/PrimaryKeyNotationBigDecimalFieldTests.java
@@ -0,0 +1,47 @@
+package com.example.sugartest;
+
+
+import com.example.models.PrimaryKeyNotationBigDecimalFieldAnnotatedModel;
+import com.orm.SugarRecord;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+import java.math.BigDecimal;
+
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+
+@RunWith (RobolectricGradleTestRunner.class)
+@Config (sdk = 18)
+public class PrimaryKeyNotationBigDecimalFieldTests{
+
+    @Test
+    public void primryKeyNotationNullBigDecimalExtendedTest(){
+        save(new PrimaryKeyNotationBigDecimalFieldAnnotatedModel());
+        PrimaryKeyNotationBigDecimalFieldAnnotatedModel model =
+                SugarRecord.findById(PrimaryKeyNotationBigDecimalFieldAnnotatedModel.class, 1);
+        assertNull(model.getBigDecimal());
+    }
+
+    @Test
+    public void primryKeyNotationBigDecimalExtendedTest(){
+        BigDecimal decimal = new BigDecimal(1234.5678901234567890123456789);
+        save(new PrimaryKeyNotationBigDecimalFieldAnnotatedModel(decimal));
+        PrimaryKeyNotationBigDecimalFieldAnnotatedModel model =
+                SugarRecord.findById(PrimaryKeyNotationBigDecimalFieldAnnotatedModel.class, 1);
+        assertEquals(decimal, model.getBigDecimal());
+    }
+
+    @Test
+    public void primryKeyNotationBigDecimalAnnotatedTest(){
+        BigDecimal decimal = new BigDecimal(1234.5678901234567890123456789);
+        save(new PrimaryKeyNotationBigDecimalFieldAnnotatedModel(decimal));
+        PrimaryKeyNotationBigDecimalFieldAnnotatedModel model =
+                SugarRecord.findById(PrimaryKeyNotationBigDecimalFieldAnnotatedModel.class, 1);
+        assertEquals(decimal, model.getBigDecimal());
+    }
+}
diff --git a/example/src/test/java/com/example/sugartest/PrimaryKeyNotationBooleanFieldTests.java b/example/src/test/java/com/example/sugartest/PrimaryKeyNotationBooleanFieldTests.java
new file mode 100644
index 00000000..0fc04fce
--- /dev/null
+++ b/example/src/test/java/com/example/sugartest/PrimaryKeyNotationBooleanFieldTests.java
@@ -0,0 +1,77 @@
+package com.example.sugartest;
+
+
+import com.example.models.PrimaryKeyNotationBooleanFieldAnnotatedModel;
+import com.orm.SugarRecord;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.annotation.Config;
+
+
+import static com.orm.SugarRecord.save;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+
+@RunWith (RobolectricGradleTestRunner.class)
+@Config (sdk = 18)
+public class PrimaryKeyNotationBooleanFieldTests{
+
+    @Test
+    public void primaryKeyNullBooleanExtendedTest(){
+        save(new PrimaryKeyNotationBooleanFieldAnnotatedModel());
+        PrimaryKeyNotationBooleanFieldAnnotatedModel model = SugarRecord.findById(PrimaryKeyNotationBooleanFieldAnnotatedModel.class, 1);
+        assertNull(model.getBoolean());
+    }
+
+    @Test
+    public void primaryKeynullRawBooleanExtendedTest(){
+        save(new PrimaryKeyNotationBooleanFieldAnnotatedModel());
+        PrimaryKeyNotationBooleanFieldAnnotatedModel model = SugarRecord.findById(PrimaryKeyNotationBooleanFieldAnnotatedModel.class, 1);
+        assertEquals(false, model.getRawBoolean());
+    }
+
+    @Test
+    public void primaryKeyNotationNullBooleanAnnotatedTest(){
+        save(new PrimaryKeyNotationBooleanFieldAnnotatedModel());
+        PrimaryKeyNotationBooleanFieldAnnotatedModel model = SugarRecord.findById(PrimaryKeyNotationBooleanFieldAnnotatedModel.class, 1);
+        assertNull(model.getBoolean());
+    }
+
+    @Test
+    public void primaryKeyNotationNullRawBooleanAnnotatedTest(){
+        save(new PrimaryKeyNotationBooleanFieldAnnotatedModel());
+        PrimaryKeyNotationBooleanFieldAnnotatedModel model = SugarRecord.findById(PrimaryKeyNotationBooleanFieldAnnotatedModel.class, 1);
+        assertEquals(false, model.getRawBoolean());
+    }
+
+    @Test
+    public void primaryKeyNotationObjectBooleanExtendedTest(){
+        Boolean objectBoolean = new Boolean(true);
+        save(new PrimaryKeyNotationBooleanFieldAnnotatedModel(objectBoolean));
+        PrimaryKeyNotationBooleanFieldAnnotatedModel model = SugarRecord.findById(PrimaryKeyNotationBooleanFieldAnnotatedModel.class, 1);
+        assertEquals(objectBoolean, model.getBoolean());
+    }
+
+    @Test
+    public void primaryKeyNotationRawBooleanExtendedTest(){
+        save(new PrimaryKeyNotationBooleanFieldAnnotatedModel(true));
+        PrimaryKeyNotationBooleanFieldAnnotatedModel model = SugarRecord.findById(PrimaryKeyNotationBooleanFieldAnnotatedModel.class, 1);
+        assertEquals(true, model.getRawBoolean());
+    }
+
+    @Test
+    public void primaryKeyNotationObjectBooleanAnnotatedTest(){
+        Boolean objectBoolean = new Boolean(true);
+        save(new PrimaryKeyNotationBooleanFieldAnnotatedModel(objectBoolean));
+        PrimaryKeyNotationBooleanFieldAnnotatedModel model = SugarRecord.findById(PrimaryKeyNotationBooleanFieldAnnotatedModel.class, 1);
+        assertEquals(objectBoolean, model.getBoolean());
+    }
+
+    @Test
+    public void primaryKeyNotationRawBooleanAnnotatedTest(){
+        save(new PrimaryKeyNotationBooleanFieldAnnotatedModel(true));
+        PrimaryKeyNotationBooleanFieldAnnotatedModel model = SugarRecord.findById(PrimaryKeyNotationBooleanFieldAnnotatedModel.class, 1);
+        assertEquals(true, model.getRawBoolean());
+    }
+}
