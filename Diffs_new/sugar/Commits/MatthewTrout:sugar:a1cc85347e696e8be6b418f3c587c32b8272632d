diff --git a/library/src/test/java/com/orm/model/SimpleModelWithMore.java b/library/src/test/java/com/orm/model/SimpleModelWithMore.java
new file mode 100644
index 00000000..042be474
--- /dev/null
+++ b/library/src/test/java/com/orm/model/SimpleModelWithMore.java
@@ -0,0 +1,14 @@
+package com.orm.model;
+
+public class SimpleModelWithMore extends SimpleModel {
+
+    private String more;
+
+    public String getMore() {
+        return more;
+    }
+
+    public void setMore(String more) {
+        this.more = more;
+    }
+}
diff --git a/library/src/test/java/com/orm/util/ReflectionUtilTest.java b/library/src/test/java/com/orm/util/ReflectionUtilTest.java
index a93e059a..46464292 100644
--- a/library/src/test/java/com/orm/util/ReflectionUtilTest.java
+++ b/library/src/test/java/com/orm/util/ReflectionUtilTest.java
@@ -7,6 +7,8 @@
 import com.orm.SugarRecord;
 import com.orm.app.ClientApp;
 import com.orm.dsl.BuildConfig;
+import com.orm.model.SimpleModel;
+import com.orm.model.SimpleModelWithMore;
 import com.orm.model.TestRecord;
 import com.orm.model.foreignnull.OriginRecord;
 import com.orm.query.Select;
@@ -38,14 +40,40 @@ public void testPrivateConstructor() throws Exception {
     @Test
     public void testGetTableFields() {
         List<Field> fieldList = ReflectionUtil.getTableFields(TestRecord.class);
+
+        List<String> strings = getStringNamesFromFields(fieldList);
+
+        Assert.assertEquals(true, strings.contains("id"));
+        Assert.assertEquals(true, strings.contains("name"));
+    }
+
+    @Test
+    public void testGetAllFields() {
+        List<Field> fieldList = ReflectionUtil.getAllFields(SimpleModelWithMore.class);
+
+        List<String> strings = getStringNamesFromFields(fieldList);
+
+        Assert.assertEquals(true, strings.contains("more"));
+        Assert.assertEquals(true, strings.contains("str"));
+        Assert.assertEquals(true, strings.contains("integer"));
+        Assert.assertEquals(true, strings.contains("bool"));
+
+    }
+
+    @Test
+    public void testGetFieldByName() {
+        Field field = ReflectionUtil.getFieldByName(SimpleModel.class, "str");
+        Assert.assertNotNull(field);
+    }
+
+    private List<String> getStringNamesFromFields(List<Field> fieldList) {
         List<String> strings = new ArrayList<>();
 
-        for (Field field: fieldList) {
+        for (Field field : fieldList) {
             strings.add(field.getName());
         }
 
-        Assert.assertEquals(true, strings.contains("id"));
-        Assert.assertEquals(true, strings.contains("name"));
+        return strings;
     }
 
     @Test(expected = NoSuchFieldException.class)
@@ -93,7 +121,7 @@ public void testSetFieldValueFromCursor() throws NoSuchFieldException {
 
     @Test
     public void testForeignNull() throws NoSuchFieldException {
-        final OriginRecord record = new OriginRecord(null,null);
+        final OriginRecord record = new OriginRecord(null, null);
         SugarRecord.save(record);
     }
 }
