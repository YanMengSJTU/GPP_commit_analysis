diff --git a/library/src/com/orm/Database.java b/library/src/com/orm/Database.java
index 0896ee1f..34b581c3 100644
--- a/library/src/com/orm/Database.java
+++ b/library/src/com/orm/Database.java
@@ -8,11 +8,10 @@
     private SugarDb sugarDb;
     private SQLiteDatabase sqLiteDatabase;
 
-    public Database(Context context){
+    public Database(Context context) {
         this.sugarDb  = new SugarDb(context);
     }
 
-
     public synchronized SQLiteDatabase getDB() {
         if (this.sqLiteDatabase == null) {
             this.sqLiteDatabase = this.sugarDb.getWritableDatabase();
@@ -21,4 +20,8 @@ public synchronized SQLiteDatabase getDB() {
         return this.sqLiteDatabase;
     }
 
+    public void deleteDatabase() {
+        this.sugarDb.deleteTables(this.getDB());
+        this.sugarDb.onCreate(this.getDB());
+    }
 }
diff --git a/library/src/com/orm/SugarApp.java b/library/src/com/orm/SugarApp.java
index ca48d3d0..956216df 100644
--- a/library/src/com/orm/SugarApp.java
+++ b/library/src/com/orm/SugarApp.java
@@ -21,6 +21,8 @@ public void onTerminate(){
     public static SugarApp getSugarContext(){
         return sugarContext;
     }
-
-
+    
+    public void deleteDatabase(){
+        this.database.deleteDatabase();
+    }
 }
diff --git a/library/src/com/orm/SugarDb.java b/library/src/com/orm/SugarDb.java
index 15bef1f7..bad94817 100644
--- a/library/src/com/orm/SugarDb.java
+++ b/library/src/com/orm/SugarDb.java
@@ -25,7 +25,6 @@
     public SugarDb(Context context) {
         super(context, SugarConfig.getDatabaseName(context), new SugarCursorFactory(getDebugEnabled(context)), getDatabaseVersion(context));
         this.context = context;
-
     }
 
     private <T extends SugarRecord> List<T> getDomainClasses(Context context) {
@@ -52,7 +51,7 @@ public SugarDb(Context context) {
     }
 
     private <T extends SugarRecord> T getDomainClass(String className, Context context) {
-        Log.i("Sugar", "domain class");
+        Log.i("Sugar", "domain class: " + className);
         Class discoveredClass = null;
         try {
             discoveredClass = Class.forName(className, true, context.getClass().getClassLoader());
@@ -79,7 +78,6 @@ public SugarDb(Context context) {
         }
 
         return null;
-
     }
 
     private Enumeration getAllClasses(Context context) throws PackageManager.NameNotFoundException, IOException {
@@ -98,7 +96,7 @@ public void onCreate(SQLiteDatabase sqLiteDatabase) {
         createDatabase(sqLiteDatabase);
     }
 
-    private <T extends SugarRecord> void createDatabase(SQLiteDatabase sqLiteDatabase) {
+    public <T extends SugarRecord> void createDatabase(SQLiteDatabase sqLiteDatabase) {
         List<T> domainClasses = getDomainClasses(context);
         for (T domain : domainClasses) {
             createTable(domain, sqLiteDatabase);
@@ -106,7 +104,6 @@ public void onCreate(SQLiteDatabase sqLiteDatabase) {
     }
 
     private <T extends SugarRecord> void createTable(T table, SQLiteDatabase sqLiteDatabase) {
-        Log.i("Sugar", "create table");
         List<Field> fields = table.getTableFields();
         StringBuilder sb = new StringBuilder("CREATE TABLE ").append(table.getSqlName()).append(
                 " ( ID INTEGER PRIMARY KEY AUTOINCREMENT ");
@@ -125,7 +122,7 @@ public void onCreate(SQLiteDatabase sqLiteDatabase) {
         }
         sb.append(" ) ");
 
-        Log.i("Sugar", "creating table " + table.getSqlName());
+        Log.i("Sugar", "creating table: " + table.getSqlName());
 
         if (!"".equals(sb.toString()))
             sqLiteDatabase.execSQL(sb.toString());
@@ -140,9 +137,10 @@ public void onUpgrade(SQLiteDatabase sqLiteDatabase, int oldVersion, int newVers
         }
     }
 
-    private <T extends SugarRecord> void deleteTables(SQLiteDatabase sqLiteDatabase) {
+    public <T extends SugarRecord> void deleteTables(SQLiteDatabase sqLiteDatabase) {
         List<T> tables = getDomainClasses(this.context);
         for (T table : tables) {
+            Log.i("Sugar", "dropping table: " + table.getSqlName());
             sqLiteDatabase.execSQL("DROP TABLE IF EXISTS " + table.getSqlName());
         }
     }
@@ -155,7 +153,7 @@ private boolean executeSugarUpgrade(SQLiteDatabase db, int oldVersion, int newVe
             Collections.sort(files, new NumberComparator());
 
             for (String file : files){
-                Log.i("Sugar", "filename : " + file);
+                Log.i("Sugar", "filename: " + file);
                 try {
                     int version = Integer.valueOf(file.replace(".sql", ""));
 
@@ -188,7 +186,7 @@ private void executeScript(SQLiteDatabase db, String file) {
             Log.e("Sugar", e.getMessage());
         }
 
-        Log.i("Sugar", "script : " + text.toString());
+        Log.i("Sugar", "script: " + text.toString());
         db.execSQL(text.toString());
     }
 }
diff --git a/library/src/com/orm/SugarRecord.java b/library/src/com/orm/SugarRecord.java
index 5634d25e..ab1da61e 100644
--- a/library/src/com/orm/SugarRecord.java
+++ b/library/src/com/orm/SugarRecord.java
@@ -9,6 +9,8 @@
 import com.orm.dsl.Ignore;
 
 import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
 import java.sql.Timestamp;
 import java.util.*;
 
@@ -84,7 +86,7 @@ public void save() {
         else
                 sqLiteDatabase.update(getSqlName(), values, "ID = ?", new String[]{String.valueOf(id)});
 
-        Log.i("Sugar", getClass().getSimpleName() + " saved : " + id);
+        Log.i("Sugar", getClass().getSimpleName() + " saved: " + id);
     }
 
     public static <T extends SugarRecord> void saveInTx(T... objects ) {
@@ -157,7 +159,7 @@ void save(SQLiteDatabase db) {
         else
             db.update(getSqlName(), values, "ID = ?", new String[]{String.valueOf(id)});
 
-        Log.i("Sugar", getClass().getSimpleName() + " saved : " + id);
+        Log.i("Sugar", getClass().getSimpleName() + " saved: " + id);
     }
 
     public static <T extends SugarRecord> List<T> listAll(Class<T> type) {
@@ -265,6 +267,15 @@ void inflate(Cursor cursor) {
                 } else if (typeString.equals("java.sql.Timestamp")) {
                     long l = cursor.getLong(cursor.getColumnIndex(colName));
                     field.set(this, new Timestamp(l));
+                } else if (Enum.class.isAssignableFrom(field.getType())) {
+                    try {
+                        Method valueOf = field.getType().getMethod("valueOf", String.class);
+                        String strVal = cursor.getString(cursor.getColumnIndex(colName));
+                        Object enumVal = valueOf.invoke(field.getType(), strVal);
+                        field.set(this, enumVal);
+                    } catch (Exception e) {
+                        Log.e("Sugar", "Enum cannot be read from Sqlite3 database. Please check the type of field " + field.getName());
+                    }
                 } else if (SugarRecord.class.isAssignableFrom(field.getType())) {
                     long id = cursor.getLong(cursor.getColumnIndex(colName));
                     if (id > 0)
@@ -272,13 +283,12 @@ void inflate(Cursor cursor) {
                     else
                         field.set(this, null);
                 } else
-                    Log.e("Sugar", "Class cannot be read from Sqlite3 database.");
+                    Log.e("Sugar", "Class cannot be read from Sqlite3 database. Please check the type of field " + field.getName() + "(" + typeString + ")");
             } catch (IllegalArgumentException e) {
                 Log.e("field set error", e.getMessage());
             } catch (IllegalAccessException e) {
                 Log.e("field set error", e.getMessage());
             }
-
         }
 
         for (Field f : entities.keySet()) {
@@ -296,14 +306,14 @@ void inflate(Cursor cursor) {
         List<Field> fieldList = SugarConfig.getFields(getClass());
         if(fieldList != null) return fieldList;
 
-        Log.d("Sugar", "Fetching properties");
+        Log.d("Sugar", "fetching properties for " + getClass().getSimpleName());
         List<Field> typeFields = new ArrayList<Field>();
 
         getAllFields(typeFields, getClass());
 
         List<Field> toStore = new ArrayList<Field>();
         for (Field field : typeFields) {
-            if (!field.isAnnotationPresent(Ignore.class)) {
+            if (!field.isAnnotationPresent(Ignore.class) && !Modifier.isStatic(field.getModifiers())) {
                 toStore.add(field);
             }
         }
