diff --git a/library/src/main/java/com/orm/query/Select.java b/library/src/main/java/com/orm/query/Select.java
index 0ce58bc2..7f359ef6 100644
--- a/library/src/main/java/com/orm/query/Select.java
+++ b/library/src/main/java/com/orm/query/Select.java
@@ -14,10 +14,10 @@
     private Class<T> record;
     private String[] arguments;
     private String whereClause = "";
-    private String orderBy;
-    private String groupBy;
-    private String limit;
-    private String offset;
+    private String orderBy = "";
+    private String groupBy = "";
+    private String limit = "";
+    private String offset = "";
     private List<Object> args = new ArrayList<Object>();
 
     public Select(Class<T> record) {
@@ -43,6 +43,11 @@ public Select(Class<T> record) {
         return this;
     }
 
+    public Select<T> offset(String offset) {
+        this.offset = offset;
+        return this;
+    }
+
     public Select<T> where(String whereClause) {
         this.whereClause = whereClause;
         return this;
@@ -136,10 +141,32 @@ public T first() {
         List<T> list = SugarRecord.find(record, whereClause, arguments, groupBy, orderBy, "1");
         return list.size() > 0 ? list.get(0) : null;
     }
-    
+
     String toSql() {
-        return SQLiteQueryBuilder.buildQueryString(
-                true, NamingHelper.toSQLName(this.record), arguments, whereClause, groupBy, null, orderBy, limit);
+        StringBuilder sql = new StringBuilder();
+        sql.append("SELECT * FROM ").append(NamingHelper.toSQLName(this.record)).append(" ");
+
+        if (!whereClause.isEmpty()) {
+            sql.append("WHERE ").append(whereClause).append(" ");
+        }
+
+        if (!orderBy.isEmpty()) {
+            sql.append("ORDER BY ").append(orderBy).append(" ");
+        }
+
+        if (!groupBy.isEmpty()) {
+            sql.append("GROUP BY ").append(groupBy).append(" ");
+        }
+
+        if (!limit.isEmpty()) {
+            sql.append("LIMIT ").append(limit).append(" ");
+        }
+
+        if (!offset.isEmpty()) {
+            sql.append("OFFSET ").append(offset).append(" ");
+        }
+
+        return sql.toString();
     }
 
     String getWhereCond() {
diff --git a/library/src/test/java/com/orm/query/SelectTest.java b/library/src/test/java/com/orm/query/SelectTest.java
index 3ab345ae..5da78cb0 100644
--- a/library/src/test/java/com/orm/query/SelectTest.java
+++ b/library/src/test/java/com/orm/query/SelectTest.java
@@ -35,6 +35,34 @@ public void testWhere(){
         assertEquals("2", where.getArgs()[1]);
     }
 
+    @Test
+    public void toSqlAllClauses(){
+        String toSql = Select.from(TestRecord.class)
+                .where("test")
+                .groupBy("test")
+                .orderBy("test")
+                .limit("test")
+                .offset("test")
+                .toSql();
+        assertEquals("SELECT * FROM TEST_RECORD WHERE test ORDER BY test GROUP BY test LIMIT test OFFSET test ", toSql);
+    }
+
+    @Test
+    public void toSqlNoClauses(){
+        String toSql = Select.from(TestRecord.class)
+                .toSql();
+        assertEquals("SELECT * FROM TEST_RECORD ", toSql);
+    }
+
+    @Test
+    public void toSqlWhereLimitClauses(){
+        String toSql = Select.from(TestRecord.class)
+                .where("test")
+                .limit("test")
+                .toSql();
+        assertEquals("SELECT * FROM TEST_RECORD WHERE test LIMIT test ", toSql);
+    }
+
 
     @Test
     public void testWhereOr(){
