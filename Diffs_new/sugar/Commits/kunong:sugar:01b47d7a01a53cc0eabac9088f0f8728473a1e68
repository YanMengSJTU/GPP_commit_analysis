diff --git a/library/src/main/java/com/orm/SchemaGenerator.java b/library/src/main/java/com/orm/SchemaGenerator.java
index f5fd4f2a..67c46b45 100644
--- a/library/src/main/java/com/orm/SchemaGenerator.java
+++ b/library/src/main/java/com/orm/SchemaGenerator.java
@@ -2,11 +2,11 @@
 
 import android.content.Context;
 import android.database.Cursor;
-import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
 import android.util.Log;
 
 import com.orm.dsl.Column;
+import com.orm.dsl.Index;
 import com.orm.dsl.MultiUnique;
 import com.orm.dsl.NotNull;
 import com.orm.dsl.Unique;
@@ -24,6 +24,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
+import java.util.LinkedList;
 import java.util.List;
 
 import static com.orm.util.ReflectionUtil.getDomainClasses;
@@ -122,7 +123,7 @@ private void executeScript(SQLiteDatabase db, String file) {
                 sb.append(line);
             }
             MigrationFileParser migrationFileParser = new MigrationFileParser(sb.toString());
-            for(String statement: migrationFileParser.getStatements()){
+            for (String statement : migrationFileParser.getStatements()) {
                 Log.i("Sugar script", statement);
                 if (!statement.isEmpty()) {
                     db.execSQL(statement);
@@ -187,41 +188,39 @@ protected String createTableSQL(Class<?> table) {
             String columnName = NamingHelper.toSQLName(column);
             String columnType = QueryBuilder.getColumnType(column.getType());
 
-            if (columnType != null) {
-                if (columnName.equalsIgnoreCase("Id")) {
-                    continue;
-                }
+            if (columnName.equalsIgnoreCase("Id")) {
+                continue;
+            }
 
-                if (column.isAnnotationPresent(Column.class)) {
-                    Column columnAnnotation = column.getAnnotation(Column.class);
-                    columnName = columnAnnotation.name();
+            if (column.isAnnotationPresent(Column.class)) {
+                Column columnAnnotation = column.getAnnotation(Column.class);
+                columnName = columnAnnotation.name();
 
-                    sb.append(", ").append(columnName).append(" ").append(columnType);
+                sb.append(", ").append(columnName).append(" ").append(columnType);
 
-                    if (columnAnnotation.notNull()) {
-                        if (columnType.endsWith(NULL)) {
-                            sb.delete(sb.length() - 5, sb.length());
-                        }
-                        sb.append(NOT_NULL);
+                if (columnAnnotation.notNull()) {
+                    if (columnType.endsWith(NULL)) {
+                        sb.delete(sb.length() - 5, sb.length());
                     }
+                    sb.append(NOT_NULL);
+                }
 
-                    if (columnAnnotation.unique()) {
-                        sb.append(UNIQUE);
-                    }
+                if (columnAnnotation.unique()) {
+                    sb.append(UNIQUE);
+                }
 
-                } else {
-                    sb.append(", ").append(columnName).append(" ").append(columnType);
+            } else {
+                sb.append(", ").append(columnName).append(" ").append(columnType);
 
-                    if (column.isAnnotationPresent(NotNull.class)) {
-                        if (columnType.endsWith(NULL)) {
-                            sb.delete(sb.length() - 5, sb.length());
-                        }
-                        sb.append(NOT_NULL);
+                if (column.isAnnotationPresent(NotNull.class)) {
+                    if (columnType.endsWith(NULL)) {
+                        sb.delete(sb.length() - 5, sb.length());
                     }
+                    sb.append(NOT_NULL);
+                }
 
-                    if (column.isAnnotationPresent(Unique.class)) {
-                        sb.append(UNIQUE);
-                    }
+                if (column.isAnnotationPresent(Unique.class)) {
+                    sb.append(UNIQUE);
                 }
             }
         }
@@ -232,11 +231,11 @@ protected String createTableSQL(Class<?> table) {
             sb.append(", UNIQUE(");
 
             String[] constraintFields = constraint.split(",");
-            for(int i = 0; i < constraintFields.length; i++) {
+            for (int i = 0; i < constraintFields.length; i++) {
                 String columnName = NamingHelper.toSQLNameDefault(constraintFields[i]);
                 sb.append(columnName);
 
-                if(i < (constraintFields.length -1)) {
+                if (i < (constraintFields.length - 1)) {
                     sb.append(",");
                 }
             }
@@ -250,16 +249,63 @@ protected String createTableSQL(Class<?> table) {
         return sb.toString();
     }
 
+    protected String createTableIndexSQL(Class<?> table) {
+        List<Field> fields = ReflectionUtil.getTableFields(table);
+        String tableName = NamingHelper.toSQLName(table);
+        StringBuilder sb = new StringBuilder();
+        List<String> indexStatements = new LinkedList<>();
+
+        for (Field column : fields) {
+            String columnName = NamingHelper.toSQLName(column);
+
+            if (columnName.equalsIgnoreCase("Id")) {
+                continue;
+            }
+
+            if (column.isAnnotationPresent(Index.class)) {
+                Index indexAnnotation = column.getAnnotation(Index.class);
+
+                String idxStr = indexAnnotation.unique() ? "CREATE UNIQUE INDEX" : "CREATE INDEX";
+                StringBuilder indexBuilder = new StringBuilder(idxStr).append(" IF NOT EXISTS ").append(tableName).append("_").append(columnName).append("_IDX");
+                indexBuilder.append(" ON ").append(tableName).append(" (").append(columnName).append(" asc)").append(";");
+                indexStatements.add(indexBuilder.toString());
+            }
+        }
+
+        for (String indexStatement : indexStatements) {
+            sb.append(indexStatement);
+        }
+
+        Log.i(SUGAR, "Creating index " + tableName);
+
+        return sb.toString();
+    }
+
     private void createTable(Class<?> table, SQLiteDatabase sqLiteDatabase) {
         String createSQL = createTableSQL(table);
+        String createIndexSQL = createTableIndexSQL(table);
+
+        //noinspection SynchronizationOnLocalVariableOrMethodParameter
+        synchronized (sqLiteDatabase) {
+            sqLiteDatabase.beginTransaction();
 
-        if (!createSQL.isEmpty()) {
             try {
-                sqLiteDatabase.execSQL(createSQL);
-            } catch (SQLException e) {
+                if (!createSQL.isEmpty()) {
+                    sqLiteDatabase.execSQL(createSQL);
+                }
+
+                if (!createIndexSQL.isEmpty()) {
+                    sqLiteDatabase.execSQL(createIndexSQL);
+                }
+
+                sqLiteDatabase.setTransactionSuccessful();
+            } catch (Exception e) {
                 e.printStackTrace();
+            } finally {
+                sqLiteDatabase.endTransaction();
             }
         }
+
     }
 
 }
diff --git a/library/src/main/java/com/orm/dsl/Column.java b/library/src/main/java/com/orm/dsl/Column.java
index 58e66529..6a84ed61 100644
--- a/library/src/main/java/com/orm/dsl/Column.java
+++ b/library/src/main/java/com/orm/dsl/Column.java
@@ -9,6 +9,8 @@
 @Target(ElementType.FIELD)
 public @interface Column {
     String name();
-    boolean unique() default false;
-    boolean notNull() default false;
+
+    @Deprecated boolean unique() default false;
+
+    @Deprecated boolean notNull() default false;
 }
diff --git a/library/src/main/java/com/orm/dsl/Index.java b/library/src/main/java/com/orm/dsl/Index.java
new file mode 100644
index 00000000..c5b5f247
--- /dev/null
+++ b/library/src/main/java/com/orm/dsl/Index.java
@@ -0,0 +1,12 @@
+package com.orm.dsl;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.FIELD)
+public @interface Index {
+    boolean unique() default false;
+}
