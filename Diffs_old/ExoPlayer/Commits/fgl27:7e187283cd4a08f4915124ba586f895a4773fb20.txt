diff --git a/extensions/vp9/src/main/java/com/google/android/exoplayer2/ext/vp9/LibvpxVideoRenderer.java b/extensions/vp9/src/main/java/com/google/android/exoplayer2/ext/vp9/LibvpxVideoRenderer.java
index 5871371d76..f5d92e2a15 100644
--- a/extensions/vp9/src/main/java/com/google/android/exoplayer2/ext/vp9/LibvpxVideoRenderer.java
+++ b/extensions/vp9/src/main/java/com/google/android/exoplayer2/ext/vp9/LibvpxVideoRenderer.java
@@ -489,6 +489,7 @@ private void setDecoderDrmSession(@Nullable DrmSession<ExoMediaCrypto> session)
    * @throws ExoPlaybackException If an error occurs (re-)initializing the decoder.
    */
   @CallSuper
+  @SuppressWarnings("unchecked")
   protected void onInputFormatChanged(Format newFormat) throws ExoPlaybackException {
     Format oldFormat = format;
     format = newFormat;
@@ -502,12 +503,16 @@ protected void onInputFormatChanged(Format newFormat) throws ExoPlaybackExceptio
           throw ExoPlaybackException.createForRenderer(
               new IllegalStateException("Media requires a DrmSessionManager"), getIndex());
         }
-        DrmSession<ExoMediaCrypto> session =
-            drmSessionManager.acquireSession(Looper.myLooper(), newFormat.drmInitData);
-        if (sourceDrmSession != null) {
-          sourceDrmSession.releaseReference();
+        if (formatHolder.decryptionResourceIsProvided) {
+          setSourceDrmSession((DrmSession<ExoMediaCrypto>) formatHolder.drmSession);
+        } else {
+          DrmSession<ExoMediaCrypto> session =
+              drmSessionManager.acquireSession(Looper.myLooper(), newFormat.drmInitData);
+          if (sourceDrmSession != null) {
+            sourceDrmSession.releaseReference();
+          }
+          sourceDrmSession = session;
         }
-        sourceDrmSession = session;
       } else {
         setSourceDrmSession(null);
       }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/audio/SimpleDecoderAudioRenderer.java b/library/core/src/main/java/com/google/android/exoplayer2/audio/SimpleDecoderAudioRenderer.java
index 1553227988..08e8203fd4 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/audio/SimpleDecoderAudioRenderer.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/audio/SimpleDecoderAudioRenderer.java
@@ -655,6 +655,7 @@ private void setDecoderDrmSession(@Nullable DrmSession<ExoMediaCrypto> session)
     decoderDrmSession = session;
   }
 
+  @SuppressWarnings("unchecked")
   private void onInputFormatChanged(Format newFormat) throws ExoPlaybackException {
     Format oldFormat = inputFormat;
     inputFormat = newFormat;
@@ -667,12 +668,16 @@ private void onInputFormatChanged(Format newFormat) throws ExoPlaybackException
           throw ExoPlaybackException.createForRenderer(
               new IllegalStateException("Media requires a DrmSessionManager"), getIndex());
         }
-        DrmSession<ExoMediaCrypto> session =
-            drmSessionManager.acquireSession(Looper.myLooper(), newFormat.drmInitData);
-        if (sourceDrmSession != null) {
-          sourceDrmSession.releaseReference();
+        if (formatHolder.decryptionResourceIsProvided) {
+          setSourceDrmSession((DrmSession<ExoMediaCrypto>) formatHolder.drmSession);
+        } else {
+          DrmSession<ExoMediaCrypto> session =
+              drmSessionManager.acquireSession(Looper.myLooper(), newFormat.drmInitData);
+          if (sourceDrmSession != null) {
+            sourceDrmSession.releaseReference();
+          }
+          sourceDrmSession = session;
         }
-        sourceDrmSession = session;
       } else {
         setSourceDrmSession(null);
       }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecRenderer.java b/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecRenderer.java
index 05f83109e8..6d0f9a4aad 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecRenderer.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecRenderer.java
@@ -1135,6 +1135,7 @@ protected void onCodecInitialized(String name, long initializedTimestampMs,
    * @param formatHolder A {@link FormatHolder} that holds the new {@link Format}.
    * @throws ExoPlaybackException If an error occurs re-initializing the {@link MediaCodec}.
    */
+  @SuppressWarnings("unchecked")
   protected void onInputFormatChanged(FormatHolder formatHolder) throws ExoPlaybackException {
     Format oldFormat = inputFormat;
     Format newFormat = formatHolder.format;
@@ -1149,12 +1150,16 @@ protected void onInputFormatChanged(FormatHolder formatHolder) throws ExoPlaybac
           throw ExoPlaybackException.createForRenderer(
               new IllegalStateException("Media requires a DrmSessionManager"), getIndex());
         }
-        DrmSession<FrameworkMediaCrypto> session =
-            drmSessionManager.acquireSession(Looper.myLooper(), newFormat.drmInitData);
-        if (sourceDrmSession != null) {
-          sourceDrmSession.releaseReference();
+        if (formatHolder.decryptionResourceIsProvided) {
+          setSourceDrmSession((DrmSession<FrameworkMediaCrypto>) formatHolder.drmSession);
+        } else {
+          DrmSession<FrameworkMediaCrypto> session =
+              drmSessionManager.acquireSession(Looper.myLooper(), newFormat.drmInitData);
+          if (sourceDrmSession != null) {
+            sourceDrmSession.releaseReference();
+          }
+          sourceDrmSession = session;
         }
-        sourceDrmSession = session;
       } else {
         setSourceDrmSession(null);
       }
