diff --git a/demo/src/main/java/com/google/android/exoplayer/demo/SmoothStreamingTestMediaDrmCallback.java b/demo/src/main/java/com/google/android/exoplayer/demo/SmoothStreamingTestMediaDrmCallback.java
index 257b0cac2e..3ad8133d89 100644
--- a/demo/src/main/java/com/google/android/exoplayer/demo/SmoothStreamingTestMediaDrmCallback.java
+++ b/demo/src/main/java/com/google/android/exoplayer/demo/SmoothStreamingTestMediaDrmCallback.java
@@ -15,13 +15,13 @@
  */
 package com.google.android.exoplayer.demo;
 
+import com.google.android.exoplayer.drm.ExoMediaDrm.KeyRequest;
+import com.google.android.exoplayer.drm.ExoMediaDrm.ProvisionRequest;
 import com.google.android.exoplayer.drm.MediaDrmCallback;
 import com.google.android.exoplayer.drm.StreamingDrmSessionManager;
 import com.google.android.exoplayer.util.Util;
 
 import android.annotation.TargetApi;
-import android.media.MediaDrm.KeyRequest;
-import android.media.MediaDrm.ProvisionRequest;
 import android.text.TextUtils;
 
 import java.io.IOException;
diff --git a/demo/src/main/java/com/google/android/exoplayer/demo/WidevineTestMediaDrmCallback.java b/demo/src/main/java/com/google/android/exoplayer/demo/WidevineTestMediaDrmCallback.java
index 4d9fcf22b8..e171d9d891 100644
--- a/demo/src/main/java/com/google/android/exoplayer/demo/WidevineTestMediaDrmCallback.java
+++ b/demo/src/main/java/com/google/android/exoplayer/demo/WidevineTestMediaDrmCallback.java
@@ -15,12 +15,12 @@
  */
 package com.google.android.exoplayer.demo;
 
+import com.google.android.exoplayer.drm.ExoMediaDrm.KeyRequest;
+import com.google.android.exoplayer.drm.ExoMediaDrm.ProvisionRequest;
 import com.google.android.exoplayer.drm.MediaDrmCallback;
 import com.google.android.exoplayer.util.Util;
 
 import android.annotation.TargetApi;
-import android.media.MediaDrm.KeyRequest;
-import android.media.MediaDrm.ProvisionRequest;
 import android.text.TextUtils;
 
 import java.io.IOException;
diff --git a/demo/src/main/java/com/google/android/exoplayer/demo/player/DashRendererBuilder.java b/demo/src/main/java/com/google/android/exoplayer/demo/player/DashRendererBuilder.java
index 458f1d4d70..7cf0aaf0a2 100644
--- a/demo/src/main/java/com/google/android/exoplayer/demo/player/DashRendererBuilder.java
+++ b/demo/src/main/java/com/google/android/exoplayer/demo/player/DashRendererBuilder.java
@@ -35,6 +35,7 @@
 import com.google.android.exoplayer.dash.mpd.UtcTimingElementResolver;
 import com.google.android.exoplayer.dash.mpd.UtcTimingElementResolver.UtcTimingCallback;
 import com.google.android.exoplayer.demo.player.DemoPlayer.RendererBuilder;
+import com.google.android.exoplayer.drm.FrameworkMediaCrypto;
 import com.google.android.exoplayer.drm.MediaDrmCallback;
 import com.google.android.exoplayer.drm.StreamingDrmSessionManager;
 import com.google.android.exoplayer.drm.UnsupportedDrmException;
@@ -195,7 +196,7 @@ private void buildRenderers() {
 
       // Check drm support if necessary.
       boolean filterHdContent = false;
-      StreamingDrmSessionManager drmSessionManager = null;
+      StreamingDrmSessionManager<FrameworkMediaCrypto> drmSessionManager = null;
       if (hasContentProtection) {
         if (Util.SDK_INT < 18) {
           player.onRenderersError(
diff --git a/demo/src/main/java/com/google/android/exoplayer/demo/player/SmoothStreamingRendererBuilder.java b/demo/src/main/java/com/google/android/exoplayer/demo/player/SmoothStreamingRendererBuilder.java
index bb769a833d..243943660e 100644
--- a/demo/src/main/java/com/google/android/exoplayer/demo/player/SmoothStreamingRendererBuilder.java
+++ b/demo/src/main/java/com/google/android/exoplayer/demo/player/SmoothStreamingRendererBuilder.java
@@ -27,6 +27,7 @@
 import com.google.android.exoplayer.chunk.FormatEvaluator.AdaptiveEvaluator;
 import com.google.android.exoplayer.demo.player.DemoPlayer.RendererBuilder;
 import com.google.android.exoplayer.drm.DrmSessionManager;
+import com.google.android.exoplayer.drm.FrameworkMediaCrypto;
 import com.google.android.exoplayer.drm.MediaDrmCallback;
 import com.google.android.exoplayer.drm.StreamingDrmSessionManager;
 import com.google.android.exoplayer.drm.UnsupportedDrmException;
@@ -140,7 +141,7 @@ public void onSingleManifest(SmoothStreamingManifest manifest) {
       DefaultBandwidthMeter bandwidthMeter = new DefaultBandwidthMeter(mainHandler, player);
 
       // Check drm support if necessary.
-      DrmSessionManager drmSessionManager = null;
+      DrmSessionManager<FrameworkMediaCrypto> drmSessionManager = null;
       if (manifest.protectionElement != null) {
         if (Util.SDK_INT < 18) {
           player.onRenderersError(
@@ -148,8 +149,9 @@ public void onSingleManifest(SmoothStreamingManifest manifest) {
           return;
         }
         try {
-          drmSessionManager = new StreamingDrmSessionManager(manifest.protectionElement.uuid,
-              player.getPlaybackLooper(), drmCallback, null, player.getMainHandler(), player);
+          drmSessionManager = StreamingDrmSessionManager.newFrameworkInstance(
+              manifest.protectionElement.uuid, player.getPlaybackLooper(), drmCallback, null,
+              player.getMainHandler(), player);
         } catch (UnsupportedDrmException e) {
           player.onRenderersError(e);
           return;
diff --git a/library/src/main/java/com/google/android/exoplayer/MediaCodecTrackRenderer.java b/library/src/main/java/com/google/android/exoplayer/MediaCodecTrackRenderer.java
index e32675083c..c89e415f55 100644
--- a/library/src/main/java/com/google/android/exoplayer/MediaCodecTrackRenderer.java
+++ b/library/src/main/java/com/google/android/exoplayer/MediaCodecTrackRenderer.java
@@ -18,6 +18,7 @@
 import com.google.android.exoplayer.MediaCodecUtil.DecoderQueryException;
 import com.google.android.exoplayer.drm.DrmInitData;
 import com.google.android.exoplayer.drm.DrmSessionManager;
+import com.google.android.exoplayer.drm.FrameworkMediaCrypto;
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.NalUnitUtil;
 import com.google.android.exoplayer.util.TraceUtil;
@@ -196,7 +197,7 @@ private static String buildCustomDiagnosticInfo(int errorCode) {
   public final CodecCounters codecCounters;
 
   private final MediaCodecSelector mediaCodecSelector;
-  private final DrmSessionManager drmSessionManager;
+  private final DrmSessionManager<FrameworkMediaCrypto> drmSessionManager;
   private final boolean playClearSamplesWithoutKeys;
   private final SampleHolder sampleHolder;
   private final MediaFormatHolder formatHolder;
@@ -248,8 +249,8 @@ private static String buildCustomDiagnosticInfo(int errorCode) {
    * @param eventListener A listener of events. May be null if delivery of events is not required.
    */
   public MediaCodecTrackRenderer(SampleSource source, MediaCodecSelector mediaCodecSelector,
-      DrmSessionManager drmSessionManager, boolean playClearSamplesWithoutKeys,
-      Handler eventHandler, EventListener eventListener) {
+      DrmSessionManager<FrameworkMediaCrypto> drmSessionManager,
+      boolean playClearSamplesWithoutKeys, Handler eventHandler, EventListener eventListener) {
     this (new SampleSource[] {source}, mediaCodecSelector, drmSessionManager,
         playClearSamplesWithoutKeys, eventHandler, eventListener);
   }
@@ -269,8 +270,8 @@ public MediaCodecTrackRenderer(SampleSource source, MediaCodecSelector mediaCode
    * @param eventListener A listener of events. May be null if delivery of events is not required.
    */
   public MediaCodecTrackRenderer(SampleSource[] sources, MediaCodecSelector mediaCodecSelector,
-      DrmSessionManager drmSessionManager, boolean playClearSamplesWithoutKeys,
-      Handler eventHandler, EventListener eventListener) {
+      DrmSessionManager<FrameworkMediaCrypto> drmSessionManager,
+      boolean playClearSamplesWithoutKeys, Handler eventHandler, EventListener eventListener) {
     super(sources);
     Assertions.checkState(Util.SDK_INT >= 16);
     this.mediaCodecSelector = Assertions.checkNotNull(mediaCodecSelector);
@@ -352,7 +353,7 @@ protected final void maybeInitCodec() throws ExoPlaybackException {
         throw new ExoPlaybackException(drmSessionManager.getError());
       } else if (drmSessionState == DrmSessionManager.STATE_OPENED
           || drmSessionState == DrmSessionManager.STATE_OPENED_WITH_KEYS) {
-        mediaCrypto = drmSessionManager.getMediaCrypto();
+        mediaCrypto = drmSessionManager.getMediaCrypto().getWrappedMediaCrypto();
         requiresSecureDecoder = drmSessionManager.requiresSecureDecoderComponent(mimeType);
       } else {
         // The drm session isn't open yet.
diff --git a/library/src/main/java/com/google/android/exoplayer/MediaCodecVideoTrackRenderer.java b/library/src/main/java/com/google/android/exoplayer/MediaCodecVideoTrackRenderer.java
index fa2e684e88..cc3a71a636 100644
--- a/library/src/main/java/com/google/android/exoplayer/MediaCodecVideoTrackRenderer.java
+++ b/library/src/main/java/com/google/android/exoplayer/MediaCodecVideoTrackRenderer.java
@@ -17,6 +17,7 @@
 
 import com.google.android.exoplayer.MediaCodecUtil.DecoderQueryException;
 import com.google.android.exoplayer.drm.DrmSessionManager;
+import com.google.android.exoplayer.drm.FrameworkMediaCrypto;
 import com.google.android.exoplayer.util.MimeTypes;
 import com.google.android.exoplayer.util.TraceUtil;
 import com.google.android.exoplayer.util.Util;
@@ -197,8 +198,9 @@ public MediaCodecVideoTrackRenderer(Context context, SampleSource source,
    */
   public MediaCodecVideoTrackRenderer(Context context, SampleSource source,
       MediaCodecSelector mediaCodecSelector, int videoScalingMode, long allowedJoiningTimeMs,
-      DrmSessionManager drmSessionManager, boolean playClearSamplesWithoutKeys,
-      Handler eventHandler, EventListener eventListener, int maxDroppedFrameCountToNotify) {
+      DrmSessionManager<FrameworkMediaCrypto> drmSessionManager,
+      boolean playClearSamplesWithoutKeys, Handler eventHandler, EventListener eventListener,
+      int maxDroppedFrameCountToNotify) {
     super(source, mediaCodecSelector, drmSessionManager, playClearSamplesWithoutKeys, eventHandler,
         eventListener);
     this.frameReleaseTimeHelper = new VideoFrameReleaseTimeHelper(context);
diff --git a/library/src/main/java/com/google/android/exoplayer/drm/DrmSessionManager.java b/library/src/main/java/com/google/android/exoplayer/drm/DrmSessionManager.java
index a5e78ab008..ce8c24a630 100644
--- a/library/src/main/java/com/google/android/exoplayer/drm/DrmSessionManager.java
+++ b/library/src/main/java/com/google/android/exoplayer/drm/DrmSessionManager.java
@@ -22,7 +22,7 @@
  * Manages a DRM session.
  */
 @TargetApi(16)
-public interface DrmSessionManager {
+public interface DrmSessionManager<T extends ExoMediaCrypto> {
 
   /**
    * The error state. {@link #getError()} can be used to retrieve the cause.
@@ -67,15 +67,15 @@
   int getState();
 
   /**
-   * Gets a {@link MediaCrypto} for the open session.
+   * Gets an {@link ExoMediaCrypto} for the open session.
    * <p>
    * This method may be called when the manager is in the following states:
    * {@link #STATE_OPENED}, {@link #STATE_OPENED_WITH_KEYS}
    *
-   * @return A {@link MediaCrypto} for the open session.
+   * @return An {@link ExoMediaCrypto} for the open session.
    * @throws IllegalStateException If called when a session isn't opened.
    */
-  MediaCrypto getMediaCrypto();
+  T getMediaCrypto();
 
   /**
    * Whether the session requires a secure decoder for the specified mime type.
diff --git a/library/src/main/java/com/google/android/exoplayer/drm/ExoMediaCrypto.java b/library/src/main/java/com/google/android/exoplayer/drm/ExoMediaCrypto.java
new file mode 100644
index 0000000000..710b839509
--- /dev/null
+++ b/library/src/main/java/com/google/android/exoplayer/drm/ExoMediaCrypto.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright (C) 2014 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.android.exoplayer.drm;
+
+/**
+ * An opaque {@link android.media.MediaCrypto} equivalent.
+ */
+public interface ExoMediaCrypto {
+
+  /**
+   * @see android.media.MediaCrypto#requiresSecureDecoderComponent(String)
+   */
+  boolean requiresSecureDecoderComponent(String mimeType);
+
+}
diff --git a/library/src/main/java/com/google/android/exoplayer/drm/ExoMediaDrm.java b/library/src/main/java/com/google/android/exoplayer/drm/ExoMediaDrm.java
new file mode 100644
index 0000000000..17ebb35481
--- /dev/null
+++ b/library/src/main/java/com/google/android/exoplayer/drm/ExoMediaDrm.java
@@ -0,0 +1,147 @@
+/*
+ * Copyright (C) 2014 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.android.exoplayer.drm;
+
+import android.media.DeniedByServerException;
+import android.media.MediaCryptoException;
+import android.media.MediaDrm;
+import android.media.NotProvisionedException;
+import android.media.ResourceBusyException;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.UUID;
+
+/**
+ * Used to obtain keys for decrypting protected media streams. See {@link android.media.MediaDrm}.
+ */
+public interface ExoMediaDrm<T extends ExoMediaCrypto> {
+
+  /**
+   * @see android.media.MediaDrm.OnEventListener
+   */
+  interface OnEventListener<T extends ExoMediaCrypto> {
+    /**
+     * Called when an event occurs that requires the app to be notified
+     *
+     * @param mediaDrm the {@link ExoMediaDrm} object on which the event occurred.
+     * @param sessionId the DRM session ID on which the event occurred
+     * @param event indicates the event type
+     * @param extra an secondary error code
+     * @param data optional byte array of data that may be associated with the event
+     */
+    void onEvent(ExoMediaDrm<T> mediaDrm, byte[] sessionId, int event, int extra, byte[] data);
+  }
+
+  /**
+   * @see android.media.MediaDrm.KeyRequest
+   */
+  interface KeyRequest {
+    byte[] getData();
+    String getDefaultUrl();
+  }
+
+  /**
+   * @see android.media.MediaDrm.ProvisionRequest
+   */
+  interface ProvisionRequest {
+    byte[] getData();
+    String getDefaultUrl();
+  }
+
+  /**
+   * @see MediaDrm#setOnEventListener(MediaDrm.OnEventListener)
+   */
+  void setOnEventListener(OnEventListener<T> listener);
+
+  /**
+   * @see MediaDrm#openSession()
+   */
+  byte[] openSession() throws NotProvisionedException, ResourceBusyException;
+
+  /**
+   * @see MediaDrm#closeSession(byte[])
+   */
+  void closeSession(byte[] sessionId);
+
+  /**
+   * @see MediaDrm#getKeyRequest(byte[], byte[], String, int, HashMap)
+   */
+  KeyRequest getKeyRequest(byte[] scope, byte[] init, String mimeType, int keyType,
+      HashMap<String, String> optionalParameters) throws NotProvisionedException;
+
+  /**
+   * @see MediaDrm#provideKeyResponse(byte[], byte[])
+   */
+  byte[] provideKeyResponse(byte[] scope, byte[] response)
+      throws NotProvisionedException, DeniedByServerException;
+
+  /**
+   * @see MediaDrm#getProvisionRequest()
+   */
+  ProvisionRequest getProvisionRequest();
+
+  /**
+   * @see MediaDrm#provideProvisionResponse(byte[])
+   */
+  void provideProvisionResponse(byte[] response) throws DeniedByServerException;
+
+  /**
+   * @see MediaDrm#queryKeyStatus(byte[]).
+   */
+  Map<String, String> queryKeyStatus(byte[] sessionId);
+
+  /**
+   * @see MediaDrm#release().
+   */
+  void release();
+
+  /**
+   * @see MediaDrm#restoreKeys(byte[], byte[]).
+   */
+  void restoreKeys(byte[] sessionId, byte[] keySetId);
+
+  /**
+   * @see MediaDrm#getPropertyString(String)
+   */
+  String getPropertyString(String propertyName);
+
+  /**
+   * @see MediaDrm#getPropertyByteArray(String)
+   */
+  byte[] getPropertyByteArray(String propertyName);
+
+  /**
+   * @see MediaDrm#setPropertyString(String, String)
+   */
+  void setPropertyString(String propertyName, String value);
+
+  /**
+   * @see MediaDrm#setPropertyByteArray(String, byte[])
+   */
+  void setPropertyByteArray(String propertyName, byte[] value);
+
+  /**
+   * @see android.media.MediaCrypto#MediaCrypto(UUID, byte[])
+   *
+   * @param uuid The UUID of the crypto scheme.
+   * @param initData Opaque initialization data specific to the crypto scheme.
+   * @return An object extends {@link ExoMediaCrypto}, using opaque crypto scheme specific data.
+   * @throws MediaCryptoException
+   */
+  T createMediaCrypto(UUID uuid, byte[] initData) throws MediaCryptoException;
+
+}
diff --git a/library/src/main/java/com/google/android/exoplayer/drm/FrameworkMediaCrypto.java b/library/src/main/java/com/google/android/exoplayer/drm/FrameworkMediaCrypto.java
new file mode 100644
index 0000000000..261736d741
--- /dev/null
+++ b/library/src/main/java/com/google/android/exoplayer/drm/FrameworkMediaCrypto.java
@@ -0,0 +1,44 @@
+/*
+ * Copyright (C) 2014 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.android.exoplayer.drm;
+
+import com.google.android.exoplayer.util.Assertions;
+
+import android.annotation.TargetApi;
+import android.media.MediaCrypto;
+
+/**
+ * An {@link ExoMediaCrypto} implementation that wraps the framework {@link MediaCrypto}.
+ */
+@TargetApi(16)
+public final class FrameworkMediaCrypto implements ExoMediaCrypto {
+
+  private final MediaCrypto mediaCrypto;
+
+  /* package */ FrameworkMediaCrypto(MediaCrypto mediaCrypto) {
+    this.mediaCrypto = Assertions.checkNotNull(mediaCrypto);
+  }
+
+  public MediaCrypto getWrappedMediaCrypto() {
+    return mediaCrypto;
+  }
+
+  @Override
+  public boolean requiresSecureDecoderComponent(String mimeType) {
+    return mediaCrypto.requiresSecureDecoderComponent(mimeType);
+  }
+
+}
diff --git a/library/src/main/java/com/google/android/exoplayer/drm/FrameworkMediaDrm.java b/library/src/main/java/com/google/android/exoplayer/drm/FrameworkMediaDrm.java
new file mode 100644
index 0000000000..b6393c5424
--- /dev/null
+++ b/library/src/main/java/com/google/android/exoplayer/drm/FrameworkMediaDrm.java
@@ -0,0 +1,151 @@
+/*
+ * Copyright (C) 2014 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.android.exoplayer.drm;
+
+import com.google.android.exoplayer.util.Assertions;
+
+import android.annotation.TargetApi;
+import android.media.DeniedByServerException;
+import android.media.MediaCrypto;
+import android.media.MediaCryptoException;
+import android.media.MediaDrm;
+import android.media.NotProvisionedException;
+import android.media.ResourceBusyException;
+import android.media.UnsupportedSchemeException;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.UUID;
+
+/**
+ * An {@link ExoMediaDrm} implementation that wraps the framework {@link MediaDrm}.
+ */
+@TargetApi(18)
+public final class FrameworkMediaDrm implements ExoMediaDrm<FrameworkMediaCrypto> {
+
+  private final MediaDrm mediaDrm;
+
+  public FrameworkMediaDrm(UUID uuid) throws UnsupportedSchemeException {
+    this.mediaDrm = new MediaDrm(Assertions.checkNotNull(uuid));
+  }
+
+  @Override
+  public void setOnEventListener(final ExoMediaDrm.OnEventListener<FrameworkMediaCrypto> listener) {
+    mediaDrm.setOnEventListener(listener == null ? null : new MediaDrm.OnEventListener() {
+      @Override
+      public void onEvent(MediaDrm md, byte[] sessionId, int event, int extra, byte[] data) {
+        listener.onEvent(FrameworkMediaDrm.this, sessionId, event, extra, data);
+      }
+    });
+  }
+
+  @Override
+  public byte[] openSession() throws NotProvisionedException, ResourceBusyException {
+    return mediaDrm.openSession();
+  }
+
+  @Override
+  public void closeSession(byte[] sessionId) {
+    mediaDrm.closeSession(sessionId);
+  }
+
+  @Override
+  public KeyRequest getKeyRequest(byte[] scope, byte[] init, String mimeType, int keyType,
+      HashMap<String, String> optionalParameters) throws NotProvisionedException {
+    final MediaDrm.KeyRequest request = mediaDrm.getKeyRequest(scope, init, mimeType, keyType,
+        optionalParameters);
+    return new KeyRequest() {
+      @Override
+      public byte[] getData() {
+        return request.getData();
+      }
+
+      @Override
+      public String getDefaultUrl() {
+        return request.getDefaultUrl();
+      }
+    };
+  }
+
+  @Override
+  public byte[] provideKeyResponse(byte[] scope, byte[] response)
+      throws NotProvisionedException, DeniedByServerException {
+    return mediaDrm.provideKeyResponse(scope, response);
+  }
+
+  @Override
+  public ProvisionRequest getProvisionRequest() {
+    final MediaDrm.ProvisionRequest provisionRequest = mediaDrm.getProvisionRequest();
+    return new ProvisionRequest() {
+      @Override
+      public byte[] getData() {
+        return provisionRequest.getData();
+      }
+
+      @Override
+      public String getDefaultUrl() {
+        return provisionRequest.getDefaultUrl();
+      }
+    };
+  }
+
+  @Override
+  public void provideProvisionResponse(byte[] response) throws DeniedByServerException {
+    mediaDrm.provideProvisionResponse(response);
+  }
+
+  @Override
+  public Map<String, String> queryKeyStatus(byte[] sessionId) {
+    return mediaDrm.queryKeyStatus(sessionId);
+  }
+
+  @Override
+  public void release() {
+    mediaDrm.release();
+  }
+
+  @Override
+  public void restoreKeys(byte[] sessionId, byte[] keySetId) {
+    mediaDrm.restoreKeys(sessionId, keySetId);
+  }
+
+  @Override
+  public String getPropertyString(String propertyName) {
+    return mediaDrm.getPropertyString(propertyName);
+  }
+
+  @Override
+  public byte[] getPropertyByteArray(String propertyName) {
+    return mediaDrm.getPropertyByteArray(propertyName);
+  }
+
+  @Override
+  public void setPropertyString(String propertyName, String value) {
+    mediaDrm.setPropertyString(propertyName, value);
+  }
+
+  @Override
+  public void setPropertyByteArray(String propertyName, byte[] value) {
+    mediaDrm.setPropertyByteArray(propertyName, value);
+  }
+
+  @Override
+  public FrameworkMediaCrypto createMediaCrypto(UUID uuid, byte[] initData)
+      throws MediaCryptoException {
+    return new FrameworkMediaCrypto(new MediaCrypto(uuid, initData));
+  }
+
+}
diff --git a/library/src/main/java/com/google/android/exoplayer/drm/MediaDrmCallback.java b/library/src/main/java/com/google/android/exoplayer/drm/MediaDrmCallback.java
index 30757e75b4..8d4257abca 100644
--- a/library/src/main/java/com/google/android/exoplayer/drm/MediaDrmCallback.java
+++ b/library/src/main/java/com/google/android/exoplayer/drm/MediaDrmCallback.java
@@ -15,13 +15,15 @@
  */
 package com.google.android.exoplayer.drm;
 
+import com.google.android.exoplayer.drm.ExoMediaDrm.KeyRequest;
+import com.google.android.exoplayer.drm.ExoMediaDrm.ProvisionRequest;
+
 import android.annotation.TargetApi;
-import android.media.MediaDrm;
 
 import java.util.UUID;
 
 /**
- * Performs {@link MediaDrm} key and provisioning requests.
+ * Performs {@link ExoMediaDrm} key and provisioning requests.
  */
 @TargetApi(18)
 public interface MediaDrmCallback {
@@ -34,7 +36,7 @@
    * @return The response data.
    * @throws Exception If an error occurred executing the request.
    */
-  byte[] executeProvisionRequest(UUID uuid, MediaDrm.ProvisionRequest request) throws Exception;
+  byte[] executeProvisionRequest(UUID uuid, ProvisionRequest request) throws Exception;
 
   /**
    * Executes a key request.
@@ -44,6 +46,6 @@
    * @return The response data.
    * @throws Exception If an error occurred executing the request.
    */
-  byte[] executeKeyRequest(UUID uuid, MediaDrm.KeyRequest request) throws Exception;
+  byte[] executeKeyRequest(UUID uuid, KeyRequest request) throws Exception;
 
 }
diff --git a/library/src/main/java/com/google/android/exoplayer/drm/StreamingDrmSessionManager.java b/library/src/main/java/com/google/android/exoplayer/drm/StreamingDrmSessionManager.java
index be22d4c6c8..8eaeda8e5b 100644
--- a/library/src/main/java/com/google/android/exoplayer/drm/StreamingDrmSessionManager.java
+++ b/library/src/main/java/com/google/android/exoplayer/drm/StreamingDrmSessionManager.java
@@ -16,17 +16,16 @@
 package com.google.android.exoplayer.drm;
 
 import com.google.android.exoplayer.drm.DrmInitData.SchemeInitData;
+import com.google.android.exoplayer.drm.ExoMediaDrm.KeyRequest;
+import com.google.android.exoplayer.drm.ExoMediaDrm.OnEventListener;
+import com.google.android.exoplayer.drm.ExoMediaDrm.ProvisionRequest;
 import com.google.android.exoplayer.extractor.mp4.PsshAtomUtil;
 import com.google.android.exoplayer.util.Util;
 
 import android.annotation.SuppressLint;
 import android.annotation.TargetApi;
 import android.media.DeniedByServerException;
-import android.media.MediaCrypto;
 import android.media.MediaDrm;
-import android.media.MediaDrm.KeyRequest;
-import android.media.MediaDrm.OnEventListener;
-import android.media.MediaDrm.ProvisionRequest;
 import android.media.NotProvisionedException;
 import android.media.UnsupportedSchemeException;
 import android.os.Handler;
@@ -40,10 +39,10 @@
 
 /**
  * A base class for {@link DrmSessionManager} implementations that support streaming playbacks
- * using {@link MediaDrm}.
+ * using {@link ExoMediaDrm}.
  */
 @TargetApi(18)
-public class StreamingDrmSessionManager implements DrmSessionManager {
+public class StreamingDrmSessionManager<T extends ExoMediaCrypto> implements DrmSessionManager<T> {
 
   /**
    * Interface definition for a callback to be notified of {@link StreamingDrmSessionManager}
@@ -88,7 +87,7 @@
 
   private final Handler eventHandler;
   private final EventListener eventListener;
-  private final MediaDrm mediaDrm;
+  private final ExoMediaDrm<T> mediaDrm;
   private final HashMap<String, String> optionalKeyRequestParameters;
 
   /* package */ final MediaDrmHandler mediaDrmHandler;
@@ -102,11 +101,21 @@
   private int openCount;
   private boolean provisioningInProgress;
   private int state;
-  private MediaCrypto mediaCrypto;
+  private T mediaCrypto;
   private Exception lastException;
   private SchemeInitData schemeInitData;
   private byte[] sessionId;
 
+  private static FrameworkMediaDrm createFrameworkDrm(UUID uuid) throws UnsupportedDrmException {
+    try {
+      return new FrameworkMediaDrm(uuid);
+    } catch (UnsupportedSchemeException e) {
+      throw new UnsupportedDrmException(UnsupportedDrmException.REASON_UNSUPPORTED_SCHEME, e);
+    } catch (Exception e) {
+      throw new UnsupportedDrmException(UnsupportedDrmException.REASON_INSTANTIATION_ERROR, e);
+    }
+  }
+
   /**
    * Instantiates a new instance using the Widevine scheme.
    *
@@ -120,10 +129,11 @@
    * @param eventListener A listener of events. May be null if delivery of events is not required.
    * @throws UnsupportedDrmException If the specified DRM scheme is not supported.
    */
-  public static StreamingDrmSessionManager newWidevineInstance(Looper playbackLooper,
-      MediaDrmCallback callback, HashMap<String, String> optionalKeyRequestParameters,
+  public static StreamingDrmSessionManager<FrameworkMediaCrypto> newWidevineInstance(
+      Looper playbackLooper, MediaDrmCallback callback,
+      HashMap<String, String> optionalKeyRequestParameters,
       Handler eventHandler, EventListener eventListener) throws UnsupportedDrmException {
-    return new StreamingDrmSessionManager(WIDEVINE_UUID, playbackLooper, callback,
+    return StreamingDrmSessionManager.newFrameworkInstance(WIDEVINE_UUID, playbackLooper, callback,
         optionalKeyRequestParameters, eventHandler, eventListener);
   }
 
@@ -142,8 +152,8 @@ public static StreamingDrmSessionManager newWidevineInstance(Looper playbackLoop
    * @param eventListener A listener of events. May be null if delivery of events is not required.
    * @throws UnsupportedDrmException If the specified DRM scheme is not supported.
    */
-  public static StreamingDrmSessionManager newPlayReadyInstance(Looper playbackLooper,
-      MediaDrmCallback callback, String customData, Handler eventHandler,
+  public static StreamingDrmSessionManager<FrameworkMediaCrypto> newPlayReadyInstance(
+      Looper playbackLooper, MediaDrmCallback callback, String customData, Handler eventHandler,
       EventListener eventListener) throws UnsupportedDrmException {
     HashMap<String, String> optionalKeyRequestParameters;
     if (!TextUtils.isEmpty(customData)) {
@@ -152,7 +162,7 @@ public static StreamingDrmSessionManager newPlayReadyInstance(Looper playbackLoo
     } else {
       optionalKeyRequestParameters = null;
     }
-    return new StreamingDrmSessionManager(PLAYREADY_UUID, playbackLooper, callback,
+    return StreamingDrmSessionManager.newFrameworkInstance(PLAYREADY_UUID, playbackLooper, callback,
         optionalKeyRequestParameters, eventHandler, eventListener);
   }
 
@@ -168,21 +178,57 @@ public static StreamingDrmSessionManager newPlayReadyInstance(Looper playbackLoo
    * @param eventListener A listener of events. May be null if delivery of events is not required.
    * @throws UnsupportedDrmException If the specified DRM scheme is not supported.
    */
-  public StreamingDrmSessionManager(UUID uuid, Looper playbackLooper, MediaDrmCallback callback,
+  public static StreamingDrmSessionManager<FrameworkMediaCrypto> newFrameworkInstance(
+      UUID uuid, Looper playbackLooper, MediaDrmCallback callback,
       HashMap<String, String> optionalKeyRequestParameters, Handler eventHandler,
       EventListener eventListener) throws UnsupportedDrmException {
+    return StreamingDrmSessionManager.newInstance(uuid, playbackLooper, callback,
+        optionalKeyRequestParameters, eventHandler, eventListener, createFrameworkDrm(uuid));
+  }
+
+  /**
+   * @param uuid The UUID of the drm scheme.
+   * @param playbackLooper The looper associated with the media playback thread. Should usually be
+   *     obtained using {@link com.google.android.exoplayer.ExoPlayer#getPlaybackLooper()}.
+   * @param callback Performs key and provisioning requests.
+   * @param optionalKeyRequestParameters An optional map of parameters to pass as the last argument
+   *     to {@link MediaDrm#getKeyRequest(byte[], byte[], String, int, HashMap)}. May be null.
+   * @param eventHandler A handler to use when delivering events to {@code eventListener}. May be
+   *     null if delivery of events is not required.
+   * @param eventListener A listener of events. May be null if delivery of events is not required.
+   * @param mediaDrm An underlying {@link ExoMediaDrm} for use by the manager.
+   * @throws UnsupportedDrmException If the specified DRM scheme is not supported.
+   */
+  public static<T extends ExoMediaCrypto> StreamingDrmSessionManager<T> newInstance(
+      UUID uuid, Looper playbackLooper, MediaDrmCallback callback,
+      HashMap<String, String> optionalKeyRequestParameters, Handler eventHandler,
+      EventListener eventListener, ExoMediaDrm<T> mediaDrm) throws UnsupportedDrmException {
+    return new StreamingDrmSessionManager<>(uuid, playbackLooper, callback,
+        optionalKeyRequestParameters, eventHandler, eventListener, mediaDrm);
+  }
+
+  /**
+   * @param uuid The UUID of the drm scheme.
+   * @param playbackLooper The looper associated with the media playback thread. Should usually be
+   *     obtained using {@link com.google.android.exoplayer.ExoPlayer#getPlaybackLooper()}.
+   * @param callback Performs key and provisioning requests.
+   * @param optionalKeyRequestParameters An optional map of parameters to pass as the last argument
+   *     to {@link MediaDrm#getKeyRequest(byte[], byte[], String, int, HashMap)}. May be null.
+   * @param eventHandler A handler to use when delivering events to {@code eventListener}. May be
+   *     null if delivery of events is not required.
+   * @param eventListener A listener of events. May be null if delivery of events is not required.
+   * @param mediaDrm An underlying {@link ExoMediaDrm} for use by the manager.
+   * @throws UnsupportedDrmException If the specified DRM scheme is not supported.
+   */
+  private StreamingDrmSessionManager(UUID uuid, Looper playbackLooper, MediaDrmCallback callback,
+      HashMap<String, String> optionalKeyRequestParameters, Handler eventHandler,
+      EventListener eventListener, ExoMediaDrm<T> mediaDrm) throws UnsupportedDrmException {
     this.uuid = uuid;
     this.callback = callback;
     this.optionalKeyRequestParameters = optionalKeyRequestParameters;
     this.eventHandler = eventHandler;
     this.eventListener = eventListener;
-    try {
-      mediaDrm = new MediaDrm(uuid);
-    } catch (UnsupportedSchemeException e) {
-      throw new UnsupportedDrmException(UnsupportedDrmException.REASON_UNSUPPORTED_SCHEME, e);
-    } catch (Exception e) {
-      throw new UnsupportedDrmException(UnsupportedDrmException.REASON_INSTANTIATION_ERROR, e);
-    }
+    this.mediaDrm = mediaDrm;
     mediaDrm.setOnEventListener(new MediaDrmEventListener());
     mediaDrmHandler = new MediaDrmHandler(playbackLooper);
     postResponseHandler = new PostResponseHandler(playbackLooper);
@@ -195,7 +241,7 @@ public final int getState() {
   }
 
   @Override
-  public final MediaCrypto getMediaCrypto() {
+  public final T getMediaCrypto() {
     if (state != STATE_OPENED && state != STATE_OPENED_WITH_KEYS) {
       throw new IllegalStateException();
     }
@@ -318,7 +364,7 @@ public void close() {
   private void openInternal(boolean allowProvisioning) {
     try {
       sessionId = mediaDrm.openSession();
-      mediaCrypto = new MediaCrypto(uuid, sessionId);
+      mediaCrypto = mediaDrm.createMediaCrypto(uuid, sessionId);
       state = STATE_OPENED;
       postKeyRequest();
     } catch (NotProvisionedException e) {
@@ -456,10 +502,10 @@ public void handleMessage(Message msg) {
 
   }
 
-  private class MediaDrmEventListener implements OnEventListener {
+  private class MediaDrmEventListener implements OnEventListener<T> {
 
     @Override
-    public void onEvent(MediaDrm md, byte[] sessionId, int event, int extra, byte[] data) {
+    public void onEvent(ExoMediaDrm<T> md, byte[] sessionId, int event, int extra, byte[] data) {
       mediaDrmHandler.sendEmptyMessage(event);
     }
 
