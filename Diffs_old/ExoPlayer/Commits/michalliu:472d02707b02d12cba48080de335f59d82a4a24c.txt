diff --git a/library/core/src/main/java/com/google/android/exoplayer2/source/ExtractorMediaPeriod.java b/library/core/src/main/java/com/google/android/exoplayer2/source/ExtractorMediaPeriod.java
index 1a6d249397..f95d717d38 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/source/ExtractorMediaPeriod.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/source/ExtractorMediaPeriod.java
@@ -95,6 +95,7 @@
   private SeekMap seekMap;
   private SampleQueue[] sampleQueues;
   private int[] sampleQueueTrackIds;
+  private int[] sampleQueueTrackTypes;
   private boolean sampleQueuesBuilt;
   private boolean prepared;
   private int actualMinLoadableRetryCount;
@@ -118,6 +119,11 @@
   private boolean loadingFinished;
   private boolean released;
 
+  /**
+   * custom fields
+   */
+  private boolean useAudioVideoMinBufferPosition;
+
   /**
    * @param uri The {@link Uri} of the media stream.
    * @param dataSource The data source to read the media.
@@ -168,6 +174,7 @@ public void run() {
     };
     handler = new Handler();
     sampleQueueTrackIds = new int[0];
+    sampleQueueTrackTypes = new int[0];
     sampleQueues = new SampleQueue[0];
     pendingResetPositionUs = C.TIME_UNSET;
     length = C.LENGTH_UNSET;
@@ -336,7 +343,7 @@ public long getBufferedPositionUs() {
       return pendingResetPositionUs;
     }
     long largestQueuedTimestampUs;
-    if (false && haveAudioVideoTracks) {
+    if (useAudioVideoMinBufferPosition && haveAudioVideoTracks) {
       // Ignore non-AV tracks, which may be sparse or poorly interleaved.
       largestQueuedTimestampUs = Long.MAX_VALUE;
       int trackCount = sampleQueues.length;
@@ -567,6 +574,8 @@ public TrackOutput track(int id, int type) {
     trackOutput.setUpstreamFormatChangeListener(this);
     sampleQueueTrackIds = Arrays.copyOf(sampleQueueTrackIds, trackCount + 1);
     sampleQueueTrackIds[trackCount] = id;
+    sampleQueueTrackTypes = Arrays.copyOf(sampleQueueTrackTypes, trackCount + 1);
+    sampleQueueTrackTypes[trackCount] = type;
     sampleQueues = Arrays.copyOf(sampleQueues, trackCount + 1);
     sampleQueues[trackCount] = trackOutput;
     return trackOutput;
