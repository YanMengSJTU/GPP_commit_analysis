diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java
index ac8be7dc16..b0cc90bff3 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java
@@ -20,6 +20,7 @@
 import com.google.android.exoplayer2.offline.DownloaderConstructorHelper;
 import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.DefaultDataSourceFactory;
+import com.google.android.exoplayer2.upstream.DefaultHttpDataSource;
 import com.google.android.exoplayer2.upstream.DefaultHttpDataSourceFactory;
 import com.google.android.exoplayer2.upstream.FileDataSourceFactory;
 import com.google.android.exoplayer2.upstream.HttpDataSource;
@@ -54,19 +55,28 @@ public void onCreate() {
     userAgent = Util.getUserAgent(this, "ExoPlayerDemo");
   }
 
-  /** Returns a {@link DataSource.Factory}. */
+  /**
+   * Returns a {@link DataSource.Factory}.
+   */
   public DataSource.Factory buildDataSourceFactory() {
     DefaultDataSourceFactory upstreamFactory =
         new DefaultDataSourceFactory(this, buildHttpDataSourceFactory());
     return buildReadOnlyCacheDataSource(upstreamFactory, getDownloadCache());
   }
 
-  /** Returns a {@link HttpDataSource.Factory}. */
+  /**
+   * Returns a {@link HttpDataSource.Factory}.
+   */
   public HttpDataSource.Factory buildHttpDataSourceFactory() {
-    return new DefaultHttpDataSourceFactory(userAgent);
+    return new DefaultHttpDataSourceFactory(userAgent, null /* listener */,
+        DefaultHttpDataSource.DEFAULT_CONNECT_TIMEOUT_MILLIS,
+        DefaultHttpDataSource.DEFAULT_READ_TIMEOUT_MILLIS,
+        true);
   }
 
-  /** Returns whether extension renderers should be used. */
+  /**
+   * Returns whether extension renderers should be used.
+   */
   public boolean useExtensionRenderers() {
     return "withExtensions".equals(BuildConfig.FLAVOR);
   }
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
index 6395ea4c24..c4af70ba28 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
@@ -31,6 +31,7 @@
 import android.view.View.OnClickListener;
 import android.view.ViewGroup;
 import android.widget.BaseExpandableListAdapter;
+import android.widget.Button;
 import android.widget.ExpandableListView;
 import android.widget.ExpandableListView.OnChildClickListener;
 import android.widget.ImageButton;
@@ -53,7 +54,9 @@
 import java.util.Collections;
 import java.util.List;
 
-/** An activity for selecting from a list of media samples. */
+/**
+ * An activity for selecting from a list of media samples.
+ */
 public class SampleChooserActivity extends Activity
     implements DownloadTracker.Listener, OnChildClickListener {
 
@@ -69,49 +72,25 @@
   public void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.sample_chooser_activity);
-    sampleAdapter = new SampleAdapter();
-    ExpandableListView sampleListView = findViewById(R.id.sample_list);
-    sampleListView.setAdapter(sampleAdapter);
-    sampleListView.setOnChildClickListener(this);
-
-    Intent intent = getIntent();
-    String dataUri = intent.getDataString();
-    String[] uris;
-    if (dataUri != null) {
-      uris = new String[] {dataUri};
-    } else {
-      ArrayList<String> uriList = new ArrayList<>();
-      AssetManager assetManager = getAssets();
-      try {
-        for (String asset : assetManager.list("")) {
-          if (asset.endsWith(".exolist.json")) {
-            uriList.add("asset:///" + asset);
-          }
-        }
-      } catch (IOException e) {
-        Toast.makeText(getApplicationContext(), R.string.sample_list_load_error, Toast.LENGTH_LONG)
-            .show();
+
+    Button playAsDashBtn = findViewById(R.id.play_url);
+    playAsDashBtn.setOnClickListener(view -> {
+      TextView inputUrlView = findViewById(R.id.input_url);
+      String inputUrl = inputUrlView.getText().toString();
+      String extension = "mpd";
+      if (!inputUrl.contains(".mpd")) {
+        extension = "m3u8";
       }
-      uris = new String[uriList.size()];
-      uriList.toArray(uris);
-      Arrays.sort(uris);
-    }
-
-    DemoApplication application = (DemoApplication) getApplication();
-    useExtensionRenderers = application.useExtensionRenderers();
-    downloadTracker = application.getDownloadTracker();
-    SampleListLoader loaderTask = new SampleListLoader();
-    loaderTask.execute(uris);
-
-    // Start the download service if it should be running but it's not currently.
-    // Starting the service in the foreground causes notification flicker if there is no scheduled
-    // action. Starting it in the background throws an exception if the app is in the background too
-    // (e.g. if device screen is locked).
-    try {
-      DownloadService.start(this, DemoDownloadService.class);
-    } catch (IllegalStateException e) {
-      DownloadService.startForeground(this, DemoDownloadService.class);
-    }
+      Uri inputUri = Uri.parse(inputUrl);
+      UriSample uriSample = new UriSample("dash stream", null, inputUri, extension, null, null);
+      startActivity(
+          uriSample.buildIntent(
+              /* context= */ this,
+              isNonNullAndChecked(preferExtensionDecodersMenuItem),
+              isNonNullAndChecked(randomAbrMenuItem)
+                  ? PlayerActivity.ABR_ALGORITHM_RANDOM
+                  : PlayerActivity.ABR_ALGORITHM_DEFAULT));
+    });
   }
 
   @Override
@@ -130,19 +109,6 @@ public boolean onOptionsItemSelected(MenuItem item) {
     return true;
   }
 
-  @Override
-  public void onStart() {
-    super.onStart();
-    downloadTracker.addListener(this);
-    sampleAdapter.notifyDataSetChanged();
-  }
-
-  @Override
-  public void onStop() {
-    downloadTracker.removeListener(this);
-    super.onStop();
-  }
-
   @Override
   public void onDownloadsChanged() {
     sampleAdapter.notifyDataSetChanged();
@@ -491,6 +457,7 @@ public SampleGroup(String title) {
   }
 
   private static final class DrmInfo {
+
     public final String drmScheme;
     public final String drmLicenseUrl;
     public final String[] drmKeyRequestProperties;
@@ -517,6 +484,7 @@ public void updateIntent(Intent intent) {
   }
 
   private abstract static class Sample {
+
     public final String name;
     public final DrmInfo drmInfo;
 
diff --git a/demos/main/src/main/res/layout/sample_chooser_activity.xml b/demos/main/src/main/res/layout/sample_chooser_activity.xml
index 4d968c7497..d204c09ef4 100644
--- a/demos/main/src/main/res/layout/sample_chooser_activity.xml
+++ b/demos/main/src/main/res/layout/sample_chooser_activity.xml
@@ -14,12 +14,29 @@
      limitations under the License.
 -->
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    android:orientation="vertical">
+  android:id="@+id/sdf"
+  android:layout_width="match_parent"
+  android:layout_height="match_parent"
+  android:orientation="vertical">
 
-  <ExpandableListView android:id="@+id/sample_list"
-      android:layout_width="match_parent"
-      android:layout_height="match_parent"/>
 
+  <EditText
+    android:id="@+id/input_url"
+    android:layout_width="match_parent"
+    android:layout_height="72dp"
+    android:layout_margin="10dp"
+    android:ems="10"
+    android:inputType="textPersonName"
+    android:text="URL"/>
+  <LinearLayout
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="horizontal">
+    <Button
+      android:id="@+id/play_url"
+      android:layout_width="wrap_content"
+      android:layout_height="wrap_content"
+      android:layout_weight="1"
+      android:text="Play"/>
+  </LinearLayout>
 </LinearLayout>
