diff --git a/extensions/okhttp/build.gradle b/extensions/okhttp/build.gradle
index f7c3ce6256..4d257c42e3 100644
--- a/extensions/okhttp/build.gradle
+++ b/extensions/okhttp/build.gradle
@@ -36,7 +36,7 @@ android {
 
 dependencies {
     compile project(':library')
-    compile('com.squareup.okhttp3:okhttp:+') {
+    compile('com.squareup.okhttp:okhttp:2.5.0') {
         exclude group: 'org.json'
     }
 }
diff --git a/extensions/okhttp/src/main/java/com/google/android/exoplayer/ext/okhttp/OkHttpDataSource.java b/extensions/okhttp/src/main/java/com/google/android/exoplayer/ext/okhttp/OkHttpDataSource.java
index cf2e9ba2d2..19e802e34e 100644
--- a/extensions/okhttp/src/main/java/com/google/android/exoplayer/ext/okhttp/OkHttpDataSource.java
+++ b/extensions/okhttp/src/main/java/com/google/android/exoplayer/ext/okhttp/OkHttpDataSource.java
@@ -22,6 +22,14 @@
 import com.google.android.exoplayer.util.Assertions;
 import com.google.android.exoplayer.util.Predicate;
 
+import com.squareup.okhttp.CacheControl;
+import com.squareup.okhttp.HttpUrl;
+import com.squareup.okhttp.OkHttpClient;
+import com.squareup.okhttp.Request;
+import com.squareup.okhttp.RequestBody;
+import com.squareup.okhttp.Response;
+import com.squareup.okhttp.internal.Util;
+
 import java.io.EOFException;
 import java.io.IOException;
 import java.io.InputStream;
@@ -31,13 +39,6 @@
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicReference;
 
-import okhttp3.CacheControl;
-import okhttp3.HttpUrl;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.RequestBody;
-import okhttp3.Response;
-
 /**
  * An {@link HttpDataSource} that delegates to Square's {@link OkHttpClient}.
  */
@@ -115,7 +116,7 @@ public OkHttpDataSource(OkHttpClient client, String userAgent,
 
   @Override
   public String getUri() {
-    return response == null ? null : response.request().url().toString();
+    return response == null ? null : response.request().urlString();
   }
 
   @Override
@@ -183,10 +184,15 @@ public long open(DataSpec dataSpec) throws HttpDataSourceException {
     bytesToSkip = responseCode == 200 && dataSpec.position != 0 ? dataSpec.position : 0;
 
     // Determine the length of the data to be read, after skipping.
-    long contentLength = response.body().contentLength();
-    bytesToRead = dataSpec.length != C.LENGTH_UNBOUNDED ? dataSpec.length
-        : contentLength != -1 ? contentLength - bytesToSkip
-        : C.LENGTH_UNBOUNDED;
+    try {
+      long contentLength = response.body().contentLength();
+      bytesToRead = dataSpec.length != C.LENGTH_UNBOUNDED ? dataSpec.length
+          : contentLength != -1 ? contentLength - bytesToSkip
+          : C.LENGTH_UNBOUNDED;
+    } catch (IOException e) {
+      closeConnectionQuietly();
+      throw new HttpDataSourceException(e, dataSpec);
+    }
 
     opened = true;
     if (listener != null) {
@@ -364,7 +370,7 @@ private int readInternal(byte[] buffer, int offset, int readLength) throws IOExc
    * Closes the current connection quietly, if there is one.
    */
   private void closeConnectionQuietly() {
-    response.body().close();
+    Util.closeQuietly(response.body());
     response = null;
     responseByteStream = null;
   }
