diff --git a/extensions/vp9/src/main/java/com/google/android/exoplayer2/ext/vp9/LibvpxVideoRenderer.java b/extensions/vp9/src/main/java/com/google/android/exoplayer2/ext/vp9/LibvpxVideoRenderer.java
index dd303af0d8..888aa58213 100644
--- a/extensions/vp9/src/main/java/com/google/android/exoplayer2/ext/vp9/LibvpxVideoRenderer.java
+++ b/extensions/vp9/src/main/java/com/google/android/exoplayer2/ext/vp9/LibvpxVideoRenderer.java
@@ -21,6 +21,7 @@
 import android.os.Looper;
 import android.os.SystemClock;
 import android.support.annotation.IntDef;
+import android.util.Log;
 import android.view.Surface;
 import com.google.android.exoplayer2.BaseRenderer;
 import com.google.android.exoplayer2.C;
@@ -47,6 +48,7 @@
  * Decodes and renders video using the native VP9 decoder.
  */
 public final class LibvpxVideoRenderer extends BaseRenderer {
+  public static final String TAG = "LibvpxVideoRenderer";
 
   @Retention(RetentionPolicy.SOURCE)
   @IntDef({REINITIALIZATION_STATE_NONE, REINITIALIZATION_STATE_SIGNAL_END_OF_STREAM,
@@ -131,6 +133,8 @@
   private int consecutiveDroppedFrameCount;
   private int buffersInCodecCount;
 
+  private String vpxDecoderInfo;
+
   /**
    * @param scaleToFit Whether video frames should be scaled to fit when rendering.
    * @param allowedJoiningTimeMs The maximum duration in milliseconds for which this video renderer
@@ -193,8 +197,23 @@ public LibvpxVideoRenderer(boolean scaleToFit, long allowedJoiningTimeMs,
     decoderReinitializationState = REINITIALIZATION_STATE_NONE;
   }
 
+  private void checkSupportsFormat(Format format) {
+      Log.d(TAG, "supportsFormat " + format.sampleMimeType);
+      if (!VpxLibrary.isAvailable()) {
+          Log.w(TAG, "VpxLibrary not available");
+        } else {
+          if (vpxDecoderInfo == null) {
+              vpxDecoderInfo = "VpxLibrary Version:" + VpxLibrary.getVersion()
+                              + ", build params:" + VpxLibrary.getBuildConfig()
+                              + ", HighBitDepthSupported:" + VpxLibrary.isHighBitDepthSupported();
+              Log.i(TAG, vpxDecoderInfo);
+            }
+       }
+  }
+
   @Override
   public int supportsFormat(Format format) {
+    checkSupportsFormat(format);
     if (!VpxLibrary.isAvailable() || !MimeTypes.VIDEO_VP9.equalsIgnoreCase(format.sampleMimeType)) {
       return FORMAT_UNSUPPORTED_TYPE;
     } else if (!supportsFormatDrm(drmSessionManager, format.drmInitData)) {
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadException.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadException.java
deleted file mode 100644
index 983727c14d..0000000000
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadException.java
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.offline;
-
-import java.io.IOException;
-
-/** Thrown on an error during downloading. */
-public final class DownloadException extends IOException {
-
-  /** @param message The message for the exception. */
-  public DownloadException(String message) {
-    super(message);
-  }
-
-  /** @param cause The cause for the exception. */
-  public DownloadException(Throwable cause) {
-    super(cause);
-  }
-
-}
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/Downloader.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/Downloader.java
deleted file mode 100644
index b8d9432c63..0000000000
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/Downloader.java
+++ /dev/null
@@ -1,92 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.offline;
-
-import android.support.annotation.Nullable;
-import com.google.android.exoplayer2.C;
-import java.io.IOException;
-
-/**
- * An interface for stream downloaders.
- */
-public interface Downloader {
-
-  /**
-   * Listener notified when download progresses.
-   * <p>
-   * No guarantees are made about the thread or threads on which the listener is called, but it is
-   * guaranteed that listener methods will be called in a serial fashion (i.e. one at a time) and in
-   * the same order as events occurred.
-   */
-  interface ProgressListener {
-    /**
-     * Called during the download. Calling intervals depend on the {@link Downloader}
-     * implementation.
-     *
-     * @param downloader The reporting instance.
-     * @param downloadPercentage The download percentage. This value can be an estimation.
-     * @param downloadedBytes Total number of downloaded bytes.
-     * @see #download(ProgressListener)
-     */
-    void onDownloadProgress(Downloader downloader, float downloadPercentage, long downloadedBytes);
-  }
-
-  /**
-   * Initializes the downloader.
-   *
-   * @throws DownloadException Thrown if the media cannot be downloaded.
-   * @throws InterruptedException If the thread has been interrupted.
-   * @throws IOException Thrown when there is an io error while reading from cache.
-   * @see #getDownloadedBytes()
-   * @see #getDownloadPercentage()
-   */
-  void init() throws InterruptedException, IOException;
-
-  /**
-   * Downloads the media.
-   *
-   * @param listener If not null, called during download.
-   * @throws DownloadException Thrown if the media cannot be downloaded.
-   * @throws InterruptedException If the thread has been interrupted.
-   * @throws IOException Thrown when there is an io error while downloading.
-   */
-  void download(@Nullable ProgressListener listener)
-      throws InterruptedException, IOException;
-
-  /**
-   * Removes all of the downloaded data of the media.
-   *
-   * @throws InterruptedException Thrown if the thread was interrupted.
-   */
-  void remove() throws InterruptedException;
-
-  /**
-   * Returns the total number of downloaded bytes, or {@link C#LENGTH_UNSET} if it hasn't been
-   * calculated yet.
-   *
-   * @see #init()
-   */
-  long getDownloadedBytes();
-
-  /**
-   * Returns the download percentage, or {@link Float#NaN} if it can't be calculated yet. This
-   * value can be an estimation.
-   *
-   * @see #init()
-   */
-  float getDownloadPercentage();
-
-}
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloaderConstructorHelper.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloaderConstructorHelper.java
deleted file mode 100644
index 9ef9366397..0000000000
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloaderConstructorHelper.java
+++ /dev/null
@@ -1,105 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.offline;
-
-import android.support.annotation.Nullable;
-import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.upstream.DataSink;
-import com.google.android.exoplayer2.upstream.DataSource;
-import com.google.android.exoplayer2.upstream.DataSource.Factory;
-import com.google.android.exoplayer2.upstream.DummyDataSource;
-import com.google.android.exoplayer2.upstream.FileDataSource;
-import com.google.android.exoplayer2.upstream.PriorityDataSource;
-import com.google.android.exoplayer2.upstream.cache.Cache;
-import com.google.android.exoplayer2.upstream.cache.CacheDataSink;
-import com.google.android.exoplayer2.upstream.cache.CacheDataSource;
-import com.google.android.exoplayer2.util.Assertions;
-import com.google.android.exoplayer2.util.PriorityTaskManager;
-
-/** A helper class that holds necessary parameters for {@link Downloader} construction. */
-public final class DownloaderConstructorHelper {
-
-  private final Cache cache;
-  private final Factory upstreamDataSourceFactory;
-  private final Factory cacheReadDataSourceFactory;
-  private final DataSink.Factory cacheWriteDataSinkFactory;
-  private final PriorityTaskManager priorityTaskManager;
-
-  /**
-   * @param cache Cache instance to be used to store downloaded data.
-   * @param upstreamDataSourceFactory A {@link Factory} for downloading data.
-   */
-  public DownloaderConstructorHelper(Cache cache, Factory upstreamDataSourceFactory) {
-    this(cache, upstreamDataSourceFactory, null, null, null);
-  }
-
-  /**
-   * @param cache Cache instance to be used to store downloaded data.
-   * @param upstreamDataSourceFactory A {@link Factory} for downloading data.
-   * @param cacheReadDataSourceFactory A {@link Factory} for reading data from the cache.
-   *     If null, null is passed to {@link Downloader} constructor.
-   * @param cacheWriteDataSinkFactory A {@link DataSink.Factory} for writing data to the cache. If
-   *     null, null is passed to {@link Downloader} constructor.
-   * @param priorityTaskManager If one is given then the download priority is set lower than
-   *     loading. If null, null is passed to {@link Downloader} constructor.
-   */
-  public DownloaderConstructorHelper(Cache cache, Factory upstreamDataSourceFactory,
-      @Nullable Factory cacheReadDataSourceFactory,
-      @Nullable DataSink.Factory cacheWriteDataSinkFactory,
-      @Nullable PriorityTaskManager priorityTaskManager) {
-    Assertions.checkNotNull(upstreamDataSourceFactory);
-    this.cache = cache;
-    this.upstreamDataSourceFactory = upstreamDataSourceFactory;
-    this.cacheReadDataSourceFactory = cacheReadDataSourceFactory;
-    this.cacheWriteDataSinkFactory = cacheWriteDataSinkFactory;
-    this.priorityTaskManager = priorityTaskManager;
-  }
-
-  /** Returns the {@link Cache} instance. */
-  public Cache getCache() {
-    return cache;
-  }
-
-  /** Returns a {@link PriorityTaskManager} instance.*/
-  public PriorityTaskManager getPriorityTaskManager() {
-    // Return a dummy PriorityTaskManager if none is provided. Create a new PriorityTaskManager
-    // each time so clients don't affect each other over the dummy PriorityTaskManager instance.
-    return priorityTaskManager != null ? priorityTaskManager : new PriorityTaskManager();
-  }
-
-  /**
-   * Returns a new {@link CacheDataSource} instance. If {@code offline} is true, it can only read
-   * data from the cache.
-   */
-  public CacheDataSource buildCacheDataSource(boolean offline) {
-    DataSource cacheReadDataSource = cacheReadDataSourceFactory != null
-        ? cacheReadDataSourceFactory.createDataSource() : new FileDataSource();
-    if (offline) {
-      return new CacheDataSource(cache, DummyDataSource.INSTANCE,
-          cacheReadDataSource, null, CacheDataSource.FLAG_BLOCK_ON_CACHE, null);
-    } else {
-      DataSink cacheWriteDataSink = cacheWriteDataSinkFactory != null
-          ? cacheWriteDataSinkFactory.createDataSink()
-          : new CacheDataSink(cache, CacheDataSource.DEFAULT_MAX_CACHE_FILE_SIZE);
-      DataSource upstream = upstreamDataSourceFactory.createDataSource();
-      upstream = priorityTaskManager == null ? upstream
-          : new PriorityDataSource(upstream, priorityTaskManager, C.PRIORITY_DOWNLOAD);
-      return new CacheDataSource(cache, upstream, cacheReadDataSource,
-          cacheWriteDataSink, CacheDataSource.FLAG_BLOCK_ON_CACHE, null);
-    }
-  }
-
-}
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloader.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloader.java
deleted file mode 100644
index e5aa429424..0000000000
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloader.java
+++ /dev/null
@@ -1,98 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
- package com.google.android.exoplayer2.offline;
-
-import android.net.Uri;
-import android.support.annotation.Nullable;
-import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.upstream.DataSpec;
-import com.google.android.exoplayer2.upstream.cache.Cache;
-import com.google.android.exoplayer2.upstream.cache.CacheDataSource;
-import com.google.android.exoplayer2.upstream.cache.CacheUtil;
-import com.google.android.exoplayer2.upstream.cache.CacheUtil.CachingCounters;
-import com.google.android.exoplayer2.util.PriorityTaskManager;
-import java.io.IOException;
-
-/**
- * A downloader for progressive media streams.
- */
-public final class ProgressiveDownloader implements Downloader {
-
-  private static final int BUFFER_SIZE_BYTES = 128 * 1024;
-
-  private final DataSpec dataSpec;
-  private final Cache cache;
-  private final CacheDataSource dataSource;
-  private final PriorityTaskManager priorityTaskManager;
-  private final CacheUtil.CachingCounters cachingCounters;
-
-  /**
-   * @param uri Uri of the data to be downloaded.
-   * @param customCacheKey A custom key that uniquely identifies the original stream. Used for cache
-   *     indexing. May be null.
-   * @param constructorHelper a {@link DownloaderConstructorHelper} instance.
-   */
-  public ProgressiveDownloader(
-      String uri, String customCacheKey, DownloaderConstructorHelper constructorHelper) {
-    this.dataSpec = new DataSpec(Uri.parse(uri), 0, C.LENGTH_UNSET, customCacheKey, 0);
-    this.cache = constructorHelper.getCache();
-    this.dataSource = constructorHelper.buildCacheDataSource(false);
-    this.priorityTaskManager = constructorHelper.getPriorityTaskManager();
-    cachingCounters = new CachingCounters();
-  }
-
-  @Override
-  public void init() {
-    CacheUtil.getCached(dataSpec, cache, cachingCounters);
-  }
-
-  @Override
-  public void download(@Nullable ProgressListener listener) throws InterruptedException,
-      IOException {
-    priorityTaskManager.add(C.PRIORITY_DOWNLOAD);
-    try {
-      byte[] buffer = new byte[BUFFER_SIZE_BYTES];
-      CacheUtil.cache(dataSpec, cache, dataSource, buffer, priorityTaskManager, C.PRIORITY_DOWNLOAD,
-          cachingCounters, true);
-      // TODO: Work out how to call onDownloadProgress periodically during the download, or else
-      // get rid of ProgressListener and move to a model where the manager periodically polls
-      // Downloaders.
-      if (listener != null) {
-        listener.onDownloadProgress(this, 100, cachingCounters.contentLength);
-      }
-    } finally {
-      priorityTaskManager.remove(C.PRIORITY_DOWNLOAD);
-    }
-  }
-
-  @Override
-  public void remove() {
-    CacheUtil.remove(cache, CacheUtil.getKey(dataSpec));
-  }
-
-  @Override
-  public long getDownloadedBytes() {
-    return cachingCounters.totalCachedBytes();
-  }
-
-  @Override
-  public float getDownloadPercentage() {
-    long contentLength = cachingCounters.contentLength;
-    return contentLength == C.LENGTH_UNSET ? Float.NaN
-        : ((cachingCounters.totalCachedBytes() * 100f) / contentLength);
-  }
-
-}
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloader.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloader.java
deleted file mode 100644
index 3cb5db30ec..0000000000
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloader.java
+++ /dev/null
@@ -1,329 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.offline;
-
-import android.net.Uri;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.upstream.DataSource;
-import com.google.android.exoplayer2.upstream.DataSpec;
-import com.google.android.exoplayer2.upstream.cache.Cache;
-import com.google.android.exoplayer2.upstream.cache.CacheDataSource;
-import com.google.android.exoplayer2.upstream.cache.CacheUtil;
-import com.google.android.exoplayer2.upstream.cache.CacheUtil.CachingCounters;
-import com.google.android.exoplayer2.util.PriorityTaskManager;
-import java.io.IOException;
-import java.util.Collections;
-import java.util.List;
-
-/**
- * Base class for multi segment stream downloaders.
- *
- * <p>All of the methods are blocking. Also they are not thread safe, except {@link
- * #getTotalSegments()}, {@link #getDownloadedSegments()} and {@link #getDownloadedBytes()}.
- *
- * @param <M> The type of the manifest object.
- * @param <K> The type of the representation key object.
- */
-public abstract class SegmentDownloader<M, K> implements Downloader {
-
-  /** Smallest unit of content to be downloaded. */
-  protected static class Segment implements Comparable<Segment> {
-    /** The start time of the segment in microseconds. */
-    public final long startTimeUs;
-
-    /** The {@link DataSpec} of the segment. */
-    public final DataSpec dataSpec;
-
-    /** Constructs a Segment. */
-    public Segment(long startTimeUs, DataSpec dataSpec) {
-      this.startTimeUs = startTimeUs;
-      this.dataSpec = dataSpec;
-    }
-
-    @Override
-    public int compareTo(@NonNull Segment other) {
-      long startOffsetDiff = startTimeUs - other.startTimeUs;
-      return startOffsetDiff == 0 ? 0 : ((startOffsetDiff < 0) ? -1 : 1);
-    }
-  }
-
-  private static final int BUFFER_SIZE_BYTES = 128 * 1024;
-
-  private final Uri manifestUri;
-  private final PriorityTaskManager priorityTaskManager;
-  private final Cache cache;
-  private final CacheDataSource dataSource;
-  private final CacheDataSource offlineDataSource;
-
-  private M manifest;
-  private K[] keys;
-  private volatile int totalSegments;
-  private volatile int downloadedSegments;
-  private volatile long downloadedBytes;
-
-  /**
-   * @param manifestUri The {@link Uri} of the manifest to be downloaded.
-   * @param constructorHelper a {@link DownloaderConstructorHelper} instance.
-   */
-  public SegmentDownloader(Uri manifestUri, DownloaderConstructorHelper constructorHelper) {
-    this.manifestUri = manifestUri;
-    this.cache = constructorHelper.getCache();
-    this.dataSource = constructorHelper.buildCacheDataSource(false);
-    this.offlineDataSource = constructorHelper.buildCacheDataSource(true);
-    this.priorityTaskManager = constructorHelper.getPriorityTaskManager();
-    resetCounters();
-  }
-
-  /**
-   * Returns the manifest. Downloads and parses it if necessary.
-   *
-   * @return The manifest.
-   * @throws IOException If an error occurs reading data.
-   */
-  public final M getManifest() throws IOException {
-    return getManifestIfNeeded(false);
-  }
-
-  /**
-   * Selects multiple representations pointed to by the keys for downloading, checking status. Any
-   * previous selection is cleared. If keys are null or empty, all representations are downloaded.
-   */
-  public final void selectRepresentations(K[] keys) {
-    this.keys = keys != null ? keys.clone() : null;
-    resetCounters();
-  }
-
-  /**
-   * Initializes the total segments, downloaded segments and downloaded bytes counters for the
-   * selected representations.
-   *
-   * @throws IOException Thrown when there is an io error while reading from cache.
-   * @throws DownloadException Thrown if the media cannot be downloaded.
-   * @throws InterruptedException If the thread has been interrupted.
-   * @see #getTotalSegments()
-   * @see #getDownloadedSegments()
-   * @see #getDownloadedBytes()
-   */
-  @Override
-  public final void init() throws InterruptedException, IOException {
-    try {
-      getManifestIfNeeded(true);
-    } catch (IOException e) {
-      // Either the manifest file isn't available offline or not parsable.
-      return;
-    }
-    try {
-      initStatus(true);
-    } catch (IOException | InterruptedException e) {
-      resetCounters();
-      throw e;
-    }
-  }
-
-  /**
-   * Downloads the content for the selected representations in sync or resumes a previously stopped
-   * download.
-   *
-   * @param listener If not null, called during download.
-   * @throws IOException Thrown when there is an io error while downloading.
-   * @throws DownloadException Thrown if the media cannot be downloaded.
-   * @throws InterruptedException If the thread has been interrupted.
-   */
-  @Override
-  public final synchronized void download(@Nullable ProgressListener listener)
-      throws IOException, InterruptedException {
-    priorityTaskManager.add(C.PRIORITY_DOWNLOAD);
-    try {
-      getManifestIfNeeded(false);
-      List<Segment> segments = initStatus(false);
-      notifyListener(listener); // Initial notification.
-      Collections.sort(segments);
-      byte[] buffer = new byte[BUFFER_SIZE_BYTES];
-      CachingCounters cachingCounters = new CachingCounters();
-      for (int i = 0; i < segments.size(); i++) {
-        CacheUtil.cache(segments.get(i).dataSpec, cache, dataSource, buffer,
-            priorityTaskManager, C.PRIORITY_DOWNLOAD, cachingCounters, true);
-        downloadedBytes += cachingCounters.newlyCachedBytes;
-        downloadedSegments++;
-        notifyListener(listener);
-      }
-    } finally {
-      priorityTaskManager.remove(C.PRIORITY_DOWNLOAD);
-    }
-  }
-
-  /**
-   * Returns the total number of segments in the representations which are selected, or {@link
-   * C#LENGTH_UNSET} if it hasn't been calculated yet.
-   *
-   * @see #init()
-   */
-  public final int getTotalSegments() {
-    return totalSegments;
-  }
-
-  /**
-   * Returns the total number of downloaded segments in the representations which are selected, or
-   * {@link C#LENGTH_UNSET} if it hasn't been calculated yet.
-   *
-   * @see #init()
-   */
-  public final int getDownloadedSegments() {
-    return downloadedSegments;
-  }
-
-  /**
-   * Returns the total number of downloaded bytes in the representations which are selected, or
-   * {@link C#LENGTH_UNSET} if it hasn't been calculated yet.
-   *
-   * @see #init()
-   */
-  @Override
-  public final long getDownloadedBytes() {
-    return downloadedBytes;
-  }
-
-  @Override
-  public float getDownloadPercentage() {
-    // Take local snapshot of the volatile fields
-    int totalSegments = this.totalSegments;
-    int downloadedSegments = this.downloadedSegments;
-    if (totalSegments == C.LENGTH_UNSET || downloadedSegments == C.LENGTH_UNSET) {
-      return Float.NaN;
-    }
-    return totalSegments == 0 ? 100f : (downloadedSegments * 100f) / totalSegments;
-  }
-
-  @Override
-  public final void remove() throws InterruptedException {
-    try {
-      getManifestIfNeeded(true);
-    } catch (IOException e) {
-      // Either the manifest file isn't available offline, or it's not parsable. Continue anyway to
-      // reset the counters and attempt to remove the manifest file.
-    }
-    resetCounters();
-    if (manifest != null) {
-      List<Segment> segments = null;
-      try {
-        segments = getAllSegments(offlineDataSource, manifest, true);
-      } catch (IOException e) {
-        // Ignore exceptions. We do our best with what's available offline.
-      }
-      if (segments != null) {
-        for (int i = 0; i < segments.size(); i++) {
-          remove(segments.get(i).dataSpec.uri);
-        }
-      }
-      manifest = null;
-    }
-    remove(manifestUri);
-  }
-
-  /**
-   * Loads and parses the manifest.
-   *
-   * @param dataSource The {@link DataSource} through which to load.
-   * @param uri The manifest uri.
-   * @return The manifest.
-   * @throws IOException If an error occurs reading data.
-   */
-  protected abstract M getManifest(DataSource dataSource, Uri uri) throws IOException;
-
-  /**
-   * Returns a list of {@link Segment}s for given keys.
-   *
-   * @param dataSource The {@link DataSource} through which to load any required data.
-   * @param manifest The manifest containing the segments.
-   * @param keys The selected representation keys.
-   * @param allowIncompleteIndex Whether to continue in the case that a load error prevents all
-   *     segments from being listed. If true then a partial segment list will be returned. If false
-   *     an {@link IOException} will be thrown.
-   * @throws InterruptedException Thrown if the thread was interrupted.
-   * @throws IOException Thrown if {@code allowPartialIndex} is false and a load error occurs, or if
-   *     the media is not in a form that allows for its segments to be listed.
-   * @return A list of {@link Segment}s for given keys.
-   */
-  protected abstract List<Segment> getSegments(DataSource dataSource, M manifest, K[] keys,
-      boolean allowIncompleteIndex) throws InterruptedException, IOException;
-
-  /**
-   * Returns a list of all segments.
-   *
-   * @see #getSegments(DataSource, M, Object[], boolean)
-   */
-  protected abstract List<Segment> getAllSegments(DataSource dataSource, M manifest,
-      boolean allowPartialIndex) throws InterruptedException, IOException;
-
-  private void resetCounters() {
-    totalSegments = C.LENGTH_UNSET;
-    downloadedSegments = C.LENGTH_UNSET;
-    downloadedBytes = C.LENGTH_UNSET;
-  }
-
-  private void remove(Uri uri) {
-    CacheUtil.remove(cache, CacheUtil.generateKey(uri));
-  }
-
-  private void notifyListener(ProgressListener listener) {
-    if (listener != null) {
-      listener.onDownloadProgress(this, getDownloadPercentage(), downloadedBytes);
-    }
-  }
-
-  /**
-   * Initializes totalSegments, downloadedSegments and downloadedBytes for selected representations.
-   * If not offline then downloads missing metadata.
-   *
-   * @return A list of not fully downloaded segments.
-   */
-  private synchronized List<Segment> initStatus(boolean offline)
-      throws IOException, InterruptedException {
-    DataSource dataSource = getDataSource(offline);
-    List<Segment> segments = keys != null && keys.length > 0
-        ? getSegments(dataSource, manifest, keys, offline)
-        : getAllSegments(dataSource, manifest, offline);
-    CachingCounters cachingCounters = new CachingCounters();
-    totalSegments = segments.size();
-    downloadedSegments = 0;
-    downloadedBytes = 0;
-    for (int i = segments.size() - 1; i >= 0; i--) {
-      Segment segment = segments.get(i);
-      CacheUtil.getCached(segment.dataSpec, cache, cachingCounters);
-      downloadedBytes += cachingCounters.alreadyCachedBytes;
-      if (cachingCounters.alreadyCachedBytes == cachingCounters.contentLength) {
-        // The segment is fully downloaded.
-        downloadedSegments++;
-        segments.remove(i);
-      }
-    }
-    return segments;
-  }
-
-  private M getManifestIfNeeded(boolean offline) throws IOException {
-    if (manifest == null) {
-      manifest = getManifest(getDataSource(offline), manifestUri);
-    }
-    return manifest;
-  }
-
-  private DataSource getDataSource(boolean offline) {
-    return offline ? offlineDataSource : dataSource;
-  }
-
-}
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloader.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloader.java
deleted file mode 100644
index 5ac61294a4..0000000000
--- a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloader.java
+++ /dev/null
@@ -1,138 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.source.hls.offline;
-
-import android.net.Uri;
-import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.offline.DownloaderConstructorHelper;
-import com.google.android.exoplayer2.offline.SegmentDownloader;
-import com.google.android.exoplayer2.source.hls.playlist.HlsMasterPlaylist;
-import com.google.android.exoplayer2.source.hls.playlist.HlsMasterPlaylist.HlsUrl;
-import com.google.android.exoplayer2.source.hls.playlist.HlsMediaPlaylist;
-import com.google.android.exoplayer2.source.hls.playlist.HlsPlaylist;
-import com.google.android.exoplayer2.source.hls.playlist.HlsPlaylistParser;
-import com.google.android.exoplayer2.upstream.DataSource;
-import com.google.android.exoplayer2.upstream.DataSpec;
-import com.google.android.exoplayer2.upstream.ParsingLoadable;
-import com.google.android.exoplayer2.util.UriUtil;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.List;
-
-/**
- * Helper class to download HLS streams.
- *
- * A subset of renditions can be downloaded by selecting them using {@link
- * #selectRepresentations(Object[])}. As key, string form of the rendition's url is used. The urls
- * can be absolute or relative to the master playlist url.
- */
-public final class HlsDownloader extends SegmentDownloader<HlsMasterPlaylist, String> {
-
-  /**
-   * @see SegmentDownloader#SegmentDownloader(Uri, DownloaderConstructorHelper)
-   */
-  public HlsDownloader(Uri manifestUri, DownloaderConstructorHelper constructorHelper)  {
-    super(manifestUri, constructorHelper);
-  }
-
-  @Override
-  protected HlsMasterPlaylist getManifest(DataSource dataSource, Uri uri) throws IOException {
-    HlsPlaylist hlsPlaylist = loadManifest(dataSource, uri);
-    if (hlsPlaylist instanceof HlsMasterPlaylist) {
-      return (HlsMasterPlaylist) hlsPlaylist;
-    } else {
-      return HlsMasterPlaylist.createSingleVariantMasterPlaylist(hlsPlaylist.baseUri);
-    }
-  }
-
-  @Override
-  protected List<Segment> getAllSegments(DataSource dataSource, HlsMasterPlaylist manifest,
-      boolean allowIndexLoadErrors) throws InterruptedException, IOException {
-    ArrayList<String> urls = new ArrayList<>();
-    extractUrls(manifest.variants, urls);
-    extractUrls(manifest.audios, urls);
-    extractUrls(manifest.subtitles, urls);
-    return getSegments(dataSource, manifest, urls.toArray(new String[urls.size()]),
-        allowIndexLoadErrors);
-  }
-
-  @Override
-  protected List<Segment> getSegments(DataSource dataSource, HlsMasterPlaylist manifest,
-      String[] keys, boolean allowIndexLoadErrors) throws InterruptedException, IOException {
-    HashSet<Uri> encryptionKeyUris = new HashSet<>();
-    ArrayList<Segment> segments = new ArrayList<>();
-    for (String playlistUrl : keys) {
-      HlsMediaPlaylist mediaPlaylist = null;
-      Uri uri = UriUtil.resolveToUri(manifest.baseUri, playlistUrl);
-      try {
-        mediaPlaylist = (HlsMediaPlaylist) loadManifest(dataSource, uri);
-      } catch (IOException e) {
-        if (!allowIndexLoadErrors) {
-          throw e;
-        }
-      }
-      segments.add(new Segment(mediaPlaylist != null ? mediaPlaylist.startTimeUs : Long.MIN_VALUE,
-          new DataSpec(uri)));
-      if (mediaPlaylist == null) {
-        continue;
-      }
-
-      HlsMediaPlaylist.Segment initSegment = mediaPlaylist.initializationSegment;
-      if (initSegment != null) {
-        addSegment(segments, mediaPlaylist, initSegment, encryptionKeyUris);
-      }
-
-      List<HlsMediaPlaylist.Segment> hlsSegments = mediaPlaylist.segments;
-      for (int i = 0; i < hlsSegments.size(); i++) {
-        addSegment(segments, mediaPlaylist, hlsSegments.get(i), encryptionKeyUris);
-      }
-    }
-    return segments;
-  }
-
-  private HlsPlaylist loadManifest(DataSource dataSource, Uri uri) throws IOException {
-    DataSpec dataSpec = new DataSpec(uri,
-        DataSpec.FLAG_ALLOW_CACHING_UNKNOWN_LENGTH | DataSpec.FLAG_ALLOW_GZIP);
-    ParsingLoadable<HlsPlaylist> loadable = new ParsingLoadable<>(dataSource, dataSpec,
-        C.DATA_TYPE_MANIFEST, new HlsPlaylistParser());
-    loadable.load();
-    return loadable.getResult();
-  }
-
-  private static void addSegment(ArrayList<Segment> segments, HlsMediaPlaylist mediaPlaylist,
-      HlsMediaPlaylist.Segment hlsSegment, HashSet<Uri> encryptionKeyUris)
-      throws IOException, InterruptedException {
-    long startTimeUs = mediaPlaylist.startTimeUs + hlsSegment.relativeStartTimeUs;
-    if (hlsSegment.fullSegmentEncryptionKeyUri != null) {
-      Uri keyUri = UriUtil.resolveToUri(mediaPlaylist.baseUri,
-          hlsSegment.fullSegmentEncryptionKeyUri);
-      if (encryptionKeyUris.add(keyUri)) {
-        segments.add(new Segment(startTimeUs, new DataSpec(keyUri)));
-      }
-    }
-    Uri resolvedUri = UriUtil.resolveToUri(mediaPlaylist.baseUri, hlsSegment.url);
-    segments.add(new Segment(startTimeUs,
-        new DataSpec(resolvedUri, hlsSegment.byterangeOffset, hlsSegment.byterangeLength, null)));
-  }
-
-  private static void extractUrls(List<HlsUrl> hlsUrls, ArrayList<String> urls) {
-    for (int i = 0; i < hlsUrls.size(); i++) {
-      urls.add(hlsUrls.get(i).url);
-    }
-  }
-
-}
