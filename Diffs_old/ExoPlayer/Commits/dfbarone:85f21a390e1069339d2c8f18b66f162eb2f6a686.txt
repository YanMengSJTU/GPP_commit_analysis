diff --git a/core_settings.gradle b/core_settings.gradle
index 4d90fa962a..986a2573d3 100644
--- a/core_settings.gradle
+++ b/core_settings.gradle
@@ -23,6 +23,7 @@ include modulePrefix + 'library-dash'
 include modulePrefix + 'library-hls'
 include modulePrefix + 'library-smoothstreaming'
 include modulePrefix + 'library-ui'
+include modulePrefix + 'library-manager'
 include modulePrefix + 'testutils'
 include modulePrefix + 'testutils-robolectric'
 include modulePrefix + 'extension-ffmpeg'
@@ -45,6 +46,7 @@ project(modulePrefix + 'library-dash').projectDir = new File(rootDir, 'library/d
 project(modulePrefix + 'library-hls').projectDir = new File(rootDir, 'library/hls')
 project(modulePrefix + 'library-smoothstreaming').projectDir = new File(rootDir, 'library/smoothstreaming')
 project(modulePrefix + 'library-ui').projectDir = new File(rootDir, 'library/ui')
+project(modulePrefix + 'library-manager').projectDir = new File(rootDir, 'library/manager')
 project(modulePrefix + 'testutils').projectDir = new File(rootDir, 'testutils')
 project(modulePrefix + 'testutils-robolectric').projectDir = new File(rootDir, 'testutils_robolectric')
 project(modulePrefix + 'extension-ffmpeg').projectDir = new File(rootDir, 'extensions/ffmpeg')
diff --git a/demos/manager/README.md b/demos/manager/README.md
new file mode 100644
index 0000000000..270dec6698
--- /dev/null
+++ b/demos/manager/README.md
@@ -0,0 +1,5 @@
+# ExoPlayer manager demo #
+
+This is the test ExoPlayer manager demo application. It uses ExoPlayer to play a number
+of test streams. It can be used as a starting point or reference project when
+developing other applications that make use of the ExoPlayer library.
diff --git a/demos/manager/build.gradle b/demos/manager/build.gradle
new file mode 100644
index 0000000000..2e37a598a4
--- /dev/null
+++ b/demos/manager/build.gradle
@@ -0,0 +1,73 @@
+// Copyright (C) 2016 The Android Open Source Project
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+apply from: '../../constants.gradle'
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion project.ext.compileSdkVersion
+    buildToolsVersion project.ext.buildToolsVersion
+
+    defaultConfig {
+        versionName project.ext.releaseVersion
+        versionCode project.ext.releaseVersionCode
+        minSdkVersion 16
+        targetSdkVersion project.ext.targetSdkVersion
+    }
+
+    buildTypes {
+        release {
+            shrinkResources true
+            minifyEnabled true
+            proguardFiles = [
+                "proguard-rules.txt",
+                getDefaultProguardFile('proguard-android.txt')
+            ]
+        }
+        debug {
+            jniDebuggable = true
+        }
+    }
+
+    lintOptions {
+        // The managerdemo app does not have translations.
+        disable 'MissingTranslation'
+    }
+
+    flavorDimensions "extensions"
+
+    productFlavors {
+        noExtensions {
+            dimension "extensions"
+        }
+        withExtensions {
+            dimension "extensions"
+        }
+    }
+}
+
+dependencies {
+    implementation 'com.android.support:support-annotations:' + supportLibraryVersion
+    implementation project(modulePrefix + 'library-core')
+    implementation project(modulePrefix + 'library-dash')
+    implementation project(modulePrefix + 'library-hls')
+    implementation project(modulePrefix + 'library-smoothstreaming')
+    implementation project(modulePrefix + 'library-ui')
+    implementation project(modulePrefix + 'library-manager')
+    withExtensionsImplementation project(path: modulePrefix + 'extension-ffmpeg')
+    withExtensionsImplementation project(path: modulePrefix + 'extension-flac')
+    withExtensionsImplementation project(path: modulePrefix + 'extension-ima')
+    withExtensionsImplementation project(path: modulePrefix + 'extension-opus')
+    withExtensionsImplementation project(path: modulePrefix + 'extension-vp9')
+    withExtensionsImplementation project(path: modulePrefix + 'extension-rtmp')
+}
diff --git a/demos/manager/proguard-rules.txt b/demos/manager/proguard-rules.txt
new file mode 100644
index 0000000000..cd201892ab
--- /dev/null
+++ b/demos/manager/proguard-rules.txt
@@ -0,0 +1,7 @@
+# Proguard rules specific to the main demo app.
+
+# Constructor accessed via reflection in PlayerActivity
+-dontnote com.google.android.exoplayer2.ext.ima.ImaAdsLoader
+-keepclassmembers class com.google.android.exoplayer2.ext.ima.ImaAdsLoader {
+  <init>(android.content.Context, android.net.Uri);
+}
diff --git a/demos/manager/src/main/AndroidManifest.xml b/demos/manager/src/main/AndroidManifest.xml
new file mode 100644
index 0000000000..201bd325ea
--- /dev/null
+++ b/demos/manager/src/main/AndroidManifest.xml
@@ -0,0 +1,93 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2016 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.google.android.exoplayer2.managerdemo">
+
+  <uses-permission android:name="android.permission.INTERNET"/>
+  <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
+  <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
+  <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>
+
+  <uses-feature android:name="android.software.leanback" android:required="false"/>
+  <uses-feature android:name="android.hardware.touchscreen" android:required="false"/>
+  <uses-sdk/>
+
+  <application
+      android:label="@string/application_name"
+      android:icon="@mipmap/ic_launcher"
+      android:banner="@drawable/ic_banner"
+      android:largeHeap="true"
+      android:allowBackup="false"
+      android:name="com.google.android.exoplayer2.managerdemo.DemoApplication">
+
+    <activity android:name="com.google.android.exoplayer2.managerdemo.SampleChooserActivity"
+        android:configChanges="keyboardHidden"
+        android:label="@string/application_name">
+      <intent-filter>
+        <action android:name="android.intent.action.MAIN"/>
+        <category android:name="android.intent.category.LAUNCHER"/>
+        <category android:name="android.intent.category.LEANBACK_LAUNCHER"/>
+      </intent-filter>
+      <intent-filter>
+        <action android:name="android.intent.action.VIEW"/>
+        <category android:name="android.intent.category.DEFAULT"/>
+        <category android:name="android.intent.category.BROWSABLE"/>
+        <data android:scheme="http"/>
+        <data android:scheme="https"/>
+        <data android:scheme="content"/>
+        <data android:scheme="asset"/>
+        <data android:scheme="file"/>
+        <data android:host="*"/>
+        <data android:pathPattern=".*\\.exolist\\.json"/>
+      </intent-filter>
+    </activity>
+
+    <activity android:name="com.google.android.exoplayer2.managerdemo.PlayerActivity"
+        android:configChanges="keyboard|keyboardHidden|orientation|screenSize|screenLayout|smallestScreenSize|uiMode"
+        android:launchMode="singleTop"
+        android:label="@string/application_name"
+        android:theme="@style/PlayerTheme">
+      <intent-filter>
+        <action android:name="com.google.android.exoplayer.managerdemo.action.VIEW"/>
+        <category android:name="android.intent.category.DEFAULT"/>
+        <data android:scheme="http"/>
+        <data android:scheme="https"/>
+        <data android:scheme="content"/>
+        <data android:scheme="asset"/>
+        <data android:scheme="file"/>
+      </intent-filter>
+      <intent-filter>
+        <action android:name="com.google.android.exoplayer.managerdemo.action.VIEW_LIST"/>
+        <category android:name="android.intent.category.DEFAULT"/>
+      </intent-filter>
+    </activity>
+
+    <service android:name="com.google.android.exoplayer2.managerdemo.DemoDownloadService"
+        android:exported="false">
+      <intent-filter>
+        <action android:name="com.google.android.exoplayer.downloadService.action.INIT"/>
+        <category android:name="android.intent.category.DEFAULT"/>
+      </intent-filter>
+    </service>
+
+    <service android:name="com.google.android.exoplayer2.scheduler.PlatformScheduler$PlatformSchedulerService"
+        android:permission="android.permission.BIND_JOB_SERVICE"
+        android:exported="true"/>
+
+  </application>
+
+</manifest>
diff --git a/demos/manager/src/main/assets/media.exolist.json b/demos/manager/src/main/assets/media.exolist.json
new file mode 100644
index 0000000000..0d26f196c1
--- /dev/null
+++ b/demos/manager/src/main/assets/media.exolist.json
@@ -0,0 +1,593 @@
+[
+  {
+    "name": "YouTube DASH",
+    "samples": [
+      {
+        "name": "Google Glass (MP4,H264)",
+        "uri": "http://www.youtube.com/api/manifest/dash/id/bf5bb2419360daf1/source/youtube?as=fmp4_audio_clear,fmp4_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=51AF5F39AB0CEC3E5497CD9C900EBFEAECCCB5C7.8506521BFC350652163895D4C26DEE124209AA9E&key=ik0",
+        "extension": "mpd"
+      },
+      {
+        "name": "Google Play (MP4,H264)",
+        "uri": "http://www.youtube.com/api/manifest/dash/id/3aa39fa2cc27967f/source/youtube?as=fmp4_audio_clear,fmp4_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=A2716F75795F5D2AF0E88962FFCD10DB79384F29.84308FF04844498CE6FBCE4731507882B8307798&key=ik0",
+        "extension": "mpd"
+      },
+      {
+        "name": "Google Glass (WebM,VP9)",
+        "uri": "http://www.youtube.com/api/manifest/dash/id/bf5bb2419360daf1/source/youtube?as=fmp4_audio_clear,webm2_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=249B04F79E984D7F86B4D8DB48AE6FAF41C17AB3.7B9F0EC0505E1566E59B8E488E9419F253DDF413&key=ik0",
+        "extension": "mpd"
+      },
+      {
+        "name": "Google Play (WebM,VP9)",
+        "uri": "http://www.youtube.com/api/manifest/dash/id/3aa39fa2cc27967f/source/youtube?as=fmp4_audio_clear,webm2_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=B1C2A74783AC1CC4865EB312D7DD2D48230CC9FD.BD153B9882175F1F94BFE5141A5482313EA38E8D&key=ik0",
+        "extension": "mpd"
+      }
+    ]
+  },
+  {
+    "name": "Widevine DASH Policy Tests (GTS)",
+    "samples": [
+      {
+        "name": "WV: HDCP not specified",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=d286538032258a1c&provider=widevine_test"
+      },
+      {
+        "name": "WV: HDCP not required",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=48fcc369939ac96c&provider=widevine_test"
+      },
+      {
+        "name": "WV: HDCP required",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=e06c39f1151da3df&provider=widevine_test"
+      },
+      {
+        "name": "WV: Secure video path required (MP4,H264)",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=0894c7c8719b28a0&provider=widevine_test"
+      },
+      {
+        "name": "WV: Secure video path required (WebM,VP9)",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/tears/tears.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=0894c7c8719b28a0&provider=widevine_test"
+      },
+      {
+        "name": "WV: Secure video path required (MP4,H265)",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/hevc/tears/tears.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=0894c7c8719b28a0&provider=widevine_test"
+      },
+      {
+        "name": "WV: HDCP + secure video path required",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=efd045b1eb61888a&provider=widevine_test"
+      },
+      {
+        "name": "WV: 30s license duration (fails at ~30s)",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=f9a34cab7b05881a&provider=widevine_test"
+      }
+    ]
+  },
+  {
+    "name": "Widevine HDCP Capabilities Tests",
+    "samples": [
+      {
+        "name": "WV: HDCP: None (not required)",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_None&provider=widevine_test"
+      },
+      {
+        "name": "WV: HDCP: 1.0 required",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_V1&provider=widevine_test"
+      },
+      {
+        "name": "WV: HDCP: 2.0 required",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_V2&provider=widevine_test"
+      },
+      {
+        "name": "WV: HDCP: 2.1 required",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_V2_1&provider=widevine_test"
+      },
+      {
+        "name": "WV: HDCP: 2.2 required",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_V2_2&provider=widevine_test"
+      },
+      {
+        "name": "WV: HDCP: No digital output",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_NO_DIGTAL_OUTPUT&provider=widevine_test"
+      }
+    ]
+  },
+  {
+    "name": "Widevine DASH: MP4,H264",
+    "samples": [
+      {
+        "name": "WV: Clear SD & HD (MP4,H264)",
+        "uri": "https://storage.googleapis.com/wvmedia/clear/h264/tears/tears.mpd"
+      },
+      {
+        "name": "WV: Clear SD (MP4,H264)",
+        "uri": "https://storage.googleapis.com/wvmedia/clear/h264/tears/tears_sd.mpd"
+      },
+      {
+        "name": "WV: Clear HD (MP4,H264)",
+        "uri": "https://storage.googleapis.com/wvmedia/clear/h264/tears/tears_hd.mpd"
+      },
+      {
+        "name": "WV: Clear UHD (MP4,H264)",
+        "uri": "https://storage.googleapis.com/wvmedia/clear/h264/tears/tears_uhd.mpd"
+      },
+      {
+        "name": "WV: Secure SD & HD (cenc,MP4,H264)",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
+      },
+      {
+        "name": "WV: Secure SD (cenc,MP4,H264)",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_sd.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
+      },
+      {
+        "name": "WV: Secure HD (cenc,MP4,H264)",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_hd.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
+      },
+      {
+        "name": "WV: Secure UHD (cenc,MP4,H264)",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_uhd.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
+      },
+      {
+        "name": "WV: Secure SD & HD (cbc1,MP4,H264)",
+        "uri": "https://storage.googleapis.com/wvmedia/cbc1/h264/tears/tears_aes_cbc1.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
+      },
+      {
+        "name": "WV: Secure SD (cbc1,MP4,H264)",
+        "uri": "https://storage.googleapis.com/wvmedia/cbc1/h264/tears/tears_aes_cbc1_sd.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
+      },
+      {
+        "name": "WV: Secure HD (cbc1,MP4,H264)",
+        "uri": "https://storage.googleapis.com/wvmedia/cbc1/h264/tears/tears_aes_cbc1_hd.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
+      },
+      {
+        "name": "WV: Secure UHD (cbc1,MP4,H264)",
+        "uri": "https://storage.googleapis.com/wvmedia/cbc1/h264/tears/tears_aes_cbc1_uhd.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
+      },
+      {
+        "name": "WV: Secure SD & HD (cbcs,MP4,H264)",
+        "uri": "https://storage.googleapis.com/wvmedia/cbcs/h264/tears/tears_aes_cbcs.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
+      },
+      {
+        "name": "WV: Secure SD (cbcs,MP4,H264)",
+        "uri": "https://storage.googleapis.com/wvmedia/cbcs/h264/tears/tears_aes_cbcs_sd.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
+      },
+      {
+        "name": "WV: Secure HD (cbcs,MP4,H264)",
+        "uri": "https://storage.googleapis.com/wvmedia/cbcs/h264/tears/tears_aes_cbcs_hd.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
+      },
+      {
+        "name": "WV: Secure UHD (cbcs,MP4,H264)",
+        "uri": "https://storage.googleapis.com/wvmedia/cbcs/h264/tears/tears_aes_cbcs_uhd.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
+      }
+    ]
+  },
+  {
+    "name": "Widevine DASH: WebM,VP9",
+    "samples": [
+      {
+        "name": "WV: Clear SD & HD (WebM,VP9)",
+        "uri": "https://storage.googleapis.com/wvmedia/clear/vp9/tears/tears.mpd"
+      },
+      {
+        "name": "WV: Clear SD (WebM,VP9)",
+        "uri": "https://storage.googleapis.com/wvmedia/clear/vp9/tears/tears_sd.mpd"
+      },
+      {
+        "name": "WV: Clear HD (WebM,VP9)",
+        "uri": "https://storage.googleapis.com/wvmedia/clear/vp9/tears/tears_hd.mpd"
+      },
+      {
+        "name": "WV: Clear UHD (WebM,VP9)",
+        "uri": "https://storage.googleapis.com/wvmedia/clear/vp9/tears/tears_uhd.mpd"
+      },
+      {
+        "name": "WV: Secure Fullsample SD & HD (WebM,VP9)",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/tears/tears.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
+      },
+      {
+        "name": "WV: Secure Fullsample SD (WebM,VP9)",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/tears/tears_sd.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
+      },
+      {
+        "name": "WV: Secure Fullsample HD (WebM,VP9)",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/tears/tears_hd.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
+      },
+      {
+        "name": "WV: Secure Fullsample UHD (WebM,VP9)",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/tears/tears_uhd.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
+      },
+      {
+        "name": "WV: Secure Subsample SD & HD (WebM,VP9)",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/subsample/24fps/tears/tears.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
+      },
+      {
+        "name": "WV: Secure Subsample SD (WebM,VP9)",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/subsample/24fps/tears/tears_sd.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
+      },
+      {
+        "name": "WV: Secure Subsample HD (WebM,VP9)",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/subsample/24fps/tears/tears_hd.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
+      },
+      {
+        "name": "WV: Secure Subsample UHD (WebM,VP9)",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/subsample/24fps/tears/tears_uhd.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
+      }
+    ]
+  },
+  {
+    "name": "Widevine DASH: MP4,H265",
+    "samples": [
+      {
+        "name": "WV: Clear SD & HD (MP4,H265)",
+        "uri": "https://storage.googleapis.com/wvmedia/clear/hevc/tears/tears.mpd"
+      },
+      {
+        "name": "WV: Clear SD (MP4,H265)",
+        "uri": "https://storage.googleapis.com/wvmedia/clear/hevc/tears/tears_sd.mpd"
+      },
+      {
+        "name": "WV: Clear HD (MP4,H265)",
+        "uri": "https://storage.googleapis.com/wvmedia/clear/hevc/tears/tears_hd.mpd"
+      },
+      {
+        "name": "WV: Clear UHD (MP4,H265)",
+        "uri": "https://storage.googleapis.com/wvmedia/clear/hevc/tears/tears_uhd.mpd"
+      },
+      {
+        "name": "WV: Secure SD & HD (MP4,H265)",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/hevc/tears/tears.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
+      },
+      {
+        "name": "WV: Secure SD (MP4,H265)",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/hevc/tears/tears_sd.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
+      },
+      {
+        "name": "WV: Secure HD (MP4,H265)",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/hevc/tears/tears_hd.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
+      },
+      {
+        "name": "WV: Secure UHD (MP4,H265)",
+        "uri": "https://storage.googleapis.com/wvmedia/cenc/hevc/tears/tears_uhd.mpd",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
+      }
+    ]
+  },
+  {
+    "name": "SmoothStreaming",
+    "samples": [
+      {
+        "name": "Super speed",
+        "uri": "http://playready.directtaps.net/smoothstreaming/SSWSS720H264/SuperSpeedway_720.ism"
+      },
+      {
+        "name": "Super speed (PlayReady)",
+        "uri": "http://playready.directtaps.net/smoothstreaming/SSWSS720H264PR/SuperSpeedway_720.ism",
+        "drm_scheme": "playready"
+      }
+    ]
+  },
+  {
+    "name": "HLS",
+    "samples": [
+      {
+        "name": "Apple 4x3 basic stream",
+        "uri": "https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_4x3/bipbop_4x3_variant.m3u8"
+      },
+      {
+        "name": "Apple 16x9 basic stream",
+        "uri": "https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/bipbop_16x9_variant.m3u8"
+      },
+      {
+        "name": "Apple master playlist advanced (TS)",
+        "uri": "https://tungsten.aaplimg.com/VOD/bipbop_adv_example_v2/master.m3u8"
+      },
+      {
+        "name": "Apple master playlist advanced (fMP4)",
+        "uri": "https://tungsten.aaplimg.com/VOD/bipbop_adv_fmp4_example/master.m3u8"
+      },
+      {
+        "name": "Apple TS media playlist",
+        "uri": "https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_4x3/gear1/prog_index.m3u8"
+      },
+      {
+        "name": "Apple AAC media playlist",
+        "uri": "https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_4x3/gear0/prog_index.m3u8"
+      },
+      {
+        "name": "Apple ID3 metadata",
+        "uri": "http://devimages.apple.com/samplecode/adDemo/ad.m3u8"
+      }
+    ]
+  },
+  {
+    "name": "Misc",
+    "samples": [
+      {
+        "name": "Dizzy",
+        "uri": "https://html5demos.com/assets/dizzy.mp4"
+      },
+      {
+        "name": "Apple AAC 10s",
+        "uri": "https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_4x3/gear0/fileSequence0.aac"
+      },
+      {
+        "name": "Apple TS 10s",
+        "uri": "https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_4x3/gear1/fileSequence0.ts"
+      },
+      {
+        "name": "Android screens (Matroska)",
+        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv"
+      },
+      {
+        "name": "Big Buck Bunny (MP4 Video)",
+        "uri": "http://redirector.c.youtube.com/videoplayback?id=604ed5ce52eda7ee&itag=22&source=youtube&sparams=ip,ipbits,expire,source,id&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=513F28C7FDCBEC60A66C86C9A393556C99DC47FB.04C88036EEE12565A1ED864A875A58F15D8B5300&key=ik0"
+      },
+      {
+        "name": "Screens 360P (WebM,VP9,No Audio)",
+        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/video-vp9-360.webm"
+      },
+      {
+        "name": "Screens 480p (FMP4,H264,No Audio)",
+        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/video-avc-baseline-480.mp4"
+      },
+      {
+        "name": "Screens 1080p (FMP4,H264, No Audio)",
+        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/video-137.mp4"
+      },
+      {
+        "name": "Screens (FMP4,AAC Audio)",
+        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/audio-141.mp4"
+      },
+      {
+        "name": "Google Play (MP3 Audio)",
+        "uri": "https://storage.googleapis.com/exoplayer-test-media-0/play.mp3"
+      },
+      {
+        "name": "Google Play (Ogg/Vorbis Audio)",
+        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/ogg/play.ogg"
+      },
+      {
+        "name": "Google Glass (WebM Video with Vorbis Audio)",
+        "uri": "http://demos.webmproject.org/exoplayer/glass_vp9_vorbis.webm"
+      },
+      {
+        "name": "Google Glass (VP9 in MP4/ISO-BMFF)",
+        "uri": "http://demos.webmproject.org/exoplayer/glass.mp4"
+      },
+      {
+        "name": "Google Glass DASH - VP9 and Opus",
+        "uri": "http://demos.webmproject.org/dash/201410/vp9_glass/manifest_vp9_opus.mpd"
+      },
+      {
+        "name": "Big Buck Bunny (FLV Video)",
+        "uri": "http://vod.leasewebcdn.com/bbb.flv?ri=1024&rs=150&start=0"
+      }
+    ]
+  },
+  {
+    "name": "Playlists",
+    "samples": [
+      {
+        "name": "Cats -> Dogs",
+        "playlist": [
+          {
+            "uri": "https://html5demos.com/assets/dizzy.mp4"
+          },
+          {
+            "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv"
+          }
+        ]
+      },
+      {
+        "name": "Audio -> Video -> Audio",
+        "playlist": [
+          {
+            "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/audio-141.mp4"
+          },
+          {
+            "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv"
+          },
+          {
+            "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/audio-141.mp4"
+          }
+        ]
+      },
+      {
+        "name": "Clear -> Enc -> Clear -> Enc -> Enc",
+        "drm_scheme": "widevine",
+        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test",
+        "playlist": [
+          {
+            "uri": "https://html5demos.com/assets/dizzy.mp4"
+          },
+          {
+            "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_sd.mpd"
+          },
+          {
+            "uri": "https://html5demos.com/assets/dizzy.mp4"
+          },
+          {
+            "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_sd.mpd"
+          },
+          {
+            "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_sd.mpd"
+          }
+        ]
+      }
+    ]
+  },
+  {
+    "name": "IMA sample ad tags",
+    "samples": [
+      {
+        "name": "Single inline linear",
+        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
+        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/single_ad_samples&ciu_szs=300x250&impl=s&gdfp_req=1&env=vp&output=vast&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ct%3Dlinear&correlator="
+      },
+      {
+        "name": "Single skippable inline",
+        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
+        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/single_ad_samples&ciu_szs=300x250&impl=s&gdfp_req=1&env=vp&output=vast&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ct%3Dskippablelinear&correlator="
+      },
+      {
+        "name": "Single redirect linear",
+        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
+        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/single_ad_samples&ciu_szs=300x250&impl=s&gdfp_req=1&env=vp&output=vast&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ct%3Dredirectlinear&correlator="
+      },
+      {
+        "name": "Single redirect error",
+        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
+        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/single_ad_samples&ciu_szs=300x250&impl=s&gdfp_req=1&env=vp&output=vast&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ct%3Dredirecterror&nofb=1&correlator="
+      },
+      {
+        "name": "Single redirect broken (fallback)",
+        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
+        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/single_ad_samples&ciu_szs=300x250&impl=s&gdfp_req=1&env=vp&output=vast&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ct%3Dredirecterror&correlator="
+      },
+      {
+        "name": "VMAP pre-roll",
+        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
+        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpreonly&cmsid=496&vid=short_onecue&correlator="
+      },
+      {
+        "name": "VMAP pre-roll + bumper",
+        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
+        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpreonlybumper&cmsid=496&vid=short_onecue&correlator="
+      },
+      {
+        "name": "VMAP post-roll",
+        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
+        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpostonly&cmsid=496&vid=short_onecue&correlator="
+      },
+      {
+        "name": "VMAP post-roll + bumper",
+        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
+        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpostonlybumper&cmsid=496&vid=short_onecue&correlator="
+      },
+      {
+        "name": "VMAP pre-, mid- and post-rolls, single ads",
+        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
+        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpremidpost&cmsid=496&vid=short_onecue&correlator="
+      },
+      {
+        "name": "VMAP pre-roll single ad, mid-roll standard pod with 3 ads, post-roll single ad",
+        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
+        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpremidpostpod&cmsid=496&vid=short_onecue&correlator="
+      },
+      {
+        "name": "VMAP pre-roll single ad, mid-roll optimized pod with 3 ads, post-roll single ad",
+        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
+        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpremidpostoptimizedpod&cmsid=496&vid=short_onecue&correlator="
+      },
+      {
+        "name": "VMAP pre-roll single ad, mid-roll standard pod with 3 ads, post-roll single ad (bumpers around all ad breaks)",
+        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
+        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpremidpostpodbumper&cmsid=496&vid=short_onecue&correlator="
+      },
+      {
+        "name": "VMAP pre-roll single ad, mid-roll optimized pod with 3 ads, post-roll single ad (bumpers around all ad breaks)",
+        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
+        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpremidpostoptimizedpodbumper&cmsid=496&vid=short_onecue&correlator="
+      },
+      {
+        "name": "VMAP pre-roll single ad, mid-roll standard pods with 5 ads every 10 seconds for 1:40, post-roll single ad",
+        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
+        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpremidpostlongpod&cmsid=496&vid=short_tencue&correlator="
+      },
+      {
+        "name": "VMAP empty midroll",
+        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
+        "ad_tag_uri": "http://vastsynthesizer.appspot.com/empty-midroll"
+      },
+      {
+        "name": "VMAP full, empty, full midrolls",
+        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
+        "ad_tag_uri": "http://vastsynthesizer.appspot.com/empty-midroll-2"
+      }
+    ]
+  },
+  {
+    "name": "ABR",
+    "samples": [
+      {
+        "name": "Random ABR - Google Glass (MP4,H264)",
+        "uri": "http://www.youtube.com/api/manifest/dash/id/bf5bb2419360daf1/source/youtube?as=fmp4_audio_clear,fmp4_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=51AF5F39AB0CEC3E5497CD9C900EBFEAECCCB5C7.8506521BFC350652163895D4C26DEE124209AA9E&key=ik0",
+        "extension": "mpd",
+        "abr_algorithm": "random"
+      }
+    ]
+  }
+]
diff --git a/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoApplication.java b/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoApplication.java
new file mode 100644
index 0000000000..a9919d6e06
--- /dev/null
+++ b/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoApplication.java
@@ -0,0 +1,150 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.android.exoplayer2.managerdemo;
+
+import android.app.Application;
+import com.google.android.exoplayer2.managerdemo.BuildConfig;
+import com.google.android.exoplayer2.managerdemo.DownloadTracker;
+import com.google.android.exoplayer2.offline.DownloadAction.Deserializer;
+import com.google.android.exoplayer2.offline.DownloadManager;
+import com.google.android.exoplayer2.offline.DownloaderConstructorHelper;
+import com.google.android.exoplayer2.offline.ProgressiveDownloadAction;
+import com.google.android.exoplayer2.source.dash.offline.DashDownloadAction;
+import com.google.android.exoplayer2.source.hls.offline.HlsDownloadAction;
+import com.google.android.exoplayer2.source.smoothstreaming.offline.SsDownloadAction;
+import com.google.android.exoplayer2.upstream.DataSource;
+import com.google.android.exoplayer2.upstream.DefaultDataSourceFactory;
+import com.google.android.exoplayer2.upstream.DefaultHttpDataSourceFactory;
+import com.google.android.exoplayer2.upstream.FileDataSourceFactory;
+import com.google.android.exoplayer2.upstream.HttpDataSource;
+import com.google.android.exoplayer2.upstream.TransferListener;
+import com.google.android.exoplayer2.upstream.cache.Cache;
+import com.google.android.exoplayer2.upstream.cache.CacheDataSource;
+import com.google.android.exoplayer2.upstream.cache.CacheDataSourceFactory;
+import com.google.android.exoplayer2.upstream.cache.NoOpCacheEvictor;
+import com.google.android.exoplayer2.upstream.cache.SimpleCache;
+import com.google.android.exoplayer2.util.Util;
+import java.io.File;
+
+/**
+ * Placeholder application to facilitate overriding Application methods for debugging and testing.
+ */
+public class DemoApplication extends Application {
+
+  private static final String DOWNLOAD_ACTION_FILE = "actions";
+  private static final String DOWNLOAD_TRACKER_ACTION_FILE = "tracked_actions";
+  private static final String DOWNLOAD_CONTENT_DIRECTORY = "downloads";
+  private static final int MAX_SIMULTANEOUS_DOWNLOADS = 2;
+  private static final Deserializer[] DOWNLOAD_DESERIALIZERS =
+      new Deserializer[] {
+          DashDownloadAction.DESERIALIZER,
+          HlsDownloadAction.DESERIALIZER,
+          SsDownloadAction.DESERIALIZER,
+          ProgressiveDownloadAction.DESERIALIZER
+      };
+
+  protected String userAgent;
+
+  private File downloadDirectory;
+  private Cache downloadCache;
+  private DownloadManager downloadManager;
+  private DownloadTracker downloadTracker;
+
+  @Override
+  public void onCreate() {
+    super.onCreate();
+    userAgent = Util.getUserAgent(this, "ExoPlayerDemo");
+  }
+
+  /** Returns a {@link DataSource.Factory}. */
+  public DataSource.Factory buildDataSourceFactory(TransferListener<? super DataSource> listener) {
+    DefaultDataSourceFactory upstreamFactory =
+        new DefaultDataSourceFactory(this, listener, buildHttpDataSourceFactory(listener));
+    return buildReadOnlyCacheDataSource(upstreamFactory, getDownloadCache());
+  }
+
+  /** Returns a {@link HttpDataSource.Factory}. */
+  public HttpDataSource.Factory buildHttpDataSourceFactory(
+      TransferListener<? super DataSource> listener) {
+    return new DefaultHttpDataSourceFactory(userAgent, listener);
+  }
+
+  /** Returns whether extension renderers should be used. */
+  public boolean useExtensionRenderers() {
+    return "withExtensions".equals(BuildConfig.FLAVOR);
+  }
+
+  public DownloadManager getDownloadManager() {
+    initDownloadManager();
+    return downloadManager;
+  }
+
+  public DownloadTracker getDownloadTracker() {
+    initDownloadManager();
+    return downloadTracker;
+  }
+
+  private synchronized void initDownloadManager() {
+    if (downloadManager == null) {
+      DownloaderConstructorHelper downloaderConstructorHelper =
+          new DownloaderConstructorHelper(
+              getDownloadCache(), buildHttpDataSourceFactory(/* listener= */ null));
+      downloadManager =
+          new DownloadManager(
+              downloaderConstructorHelper,
+              MAX_SIMULTANEOUS_DOWNLOADS,
+              DownloadManager.DEFAULT_MIN_RETRY_COUNT,
+              new File(getDownloadDirectory(), DOWNLOAD_ACTION_FILE),
+              DOWNLOAD_DESERIALIZERS);
+      downloadTracker =
+          new DownloadTracker(
+              /* context= */ this,
+              buildDataSourceFactory(/* listener= */ null),
+              new File(getDownloadDirectory(), DOWNLOAD_TRACKER_ACTION_FILE),
+              DOWNLOAD_DESERIALIZERS);
+      downloadManager.addListener(downloadTracker);
+    }
+  }
+
+  private synchronized Cache getDownloadCache() {
+    if (downloadCache == null) {
+      File downloadContentDirectory = new File(getDownloadDirectory(), DOWNLOAD_CONTENT_DIRECTORY);
+      downloadCache = new SimpleCache(downloadContentDirectory, new NoOpCacheEvictor());
+    }
+    return downloadCache;
+  }
+
+  private File getDownloadDirectory() {
+    if (downloadDirectory == null) {
+      downloadDirectory = getExternalFilesDir(null);
+      if (downloadDirectory == null) {
+        downloadDirectory = getFilesDir();
+      }
+    }
+    return downloadDirectory;
+  }
+
+  private static CacheDataSourceFactory buildReadOnlyCacheDataSource(
+      DefaultDataSourceFactory upstreamFactory, Cache cache) {
+    return new CacheDataSourceFactory(
+        cache,
+        upstreamFactory,
+        new FileDataSourceFactory(),
+        /* cacheWriteDataSinkFactory= */ null,
+        CacheDataSource.FLAG_IGNORE_CACHE_ON_ERROR,
+        /* eventListener= */ null);
+  }
+}
diff --git a/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoDownloadService.java b/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoDownloadService.java
new file mode 100644
index 0000000000..ae8a85a3a2
--- /dev/null
+++ b/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoDownloadService.java
@@ -0,0 +1,89 @@
+/*
+ * Copyright (C) 2017 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.android.exoplayer2.managerdemo;
+
+import android.app.Notification;
+import com.google.android.exoplayer2.offline.DownloadManager;
+import com.google.android.exoplayer2.offline.DownloadManager.TaskState;
+import com.google.android.exoplayer2.offline.DownloadService;
+import com.google.android.exoplayer2.scheduler.PlatformScheduler;
+import com.google.android.exoplayer2.ui.DownloadNotificationUtil;
+import com.google.android.exoplayer2.util.NotificationUtil;
+import com.google.android.exoplayer2.util.Util;
+
+/** A service for downloading media. */
+public class DemoDownloadService extends DownloadService {
+
+  private static final String CHANNEL_ID = "download_channel";
+  private static final int JOB_ID = 1;
+  private static final int FOREGROUND_NOTIFICATION_ID = 1;
+
+  public DemoDownloadService() {
+    super(
+        FOREGROUND_NOTIFICATION_ID,
+        DEFAULT_FOREGROUND_NOTIFICATION_UPDATE_INTERVAL,
+        CHANNEL_ID,
+        R.string.exo_download_notification_channel_name);
+  }
+
+  @Override
+  protected DownloadManager getDownloadManager() {
+    return ((DemoApplication) getApplication()).getDownloadManager();
+  }
+
+  @Override
+  protected PlatformScheduler getScheduler() {
+    return Util.SDK_INT >= 21 ? new PlatformScheduler(this, JOB_ID) : null;
+  }
+
+  @Override
+  protected Notification getForegroundNotification(TaskState[] taskStates) {
+    return DownloadNotificationUtil.buildProgressNotification(
+        /* context= */ this,
+        R.drawable.exo_controls_play,
+        CHANNEL_ID,
+        /* contentIntent= */ null,
+        /* message= */ null,
+        taskStates);
+  }
+
+  @Override
+  protected void onTaskStateChanged(TaskState taskState) {
+    if (taskState.action.isRemoveAction) {
+      return;
+    }
+    Notification notification = null;
+    if (taskState.state == TaskState.STATE_COMPLETED) {
+      notification =
+          DownloadNotificationUtil.buildDownloadCompletedNotification(
+              /* context= */ this,
+              R.drawable.exo_controls_play,
+              CHANNEL_ID,
+              /* contentIntent= */ null,
+              Util.fromUtf8Bytes(taskState.action.data));
+    } else if (taskState.state == TaskState.STATE_FAILED) {
+      notification =
+          DownloadNotificationUtil.buildDownloadFailedNotification(
+              /* context= */ this,
+              R.drawable.exo_controls_play,
+              CHANNEL_ID,
+              /* contentIntent= */ null,
+              Util.fromUtf8Bytes(taskState.action.data));
+    }
+    int notificationId = FOREGROUND_NOTIFICATION_ID + 1 + taskState.taskId;
+    NotificationUtil.setNotification(this, notificationId, notification);
+  }
+}
diff --git a/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoPlayerManager.java b/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoPlayerManager.java
new file mode 100644
index 0000000000..3641ed16cd
--- /dev/null
+++ b/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoPlayerManager.java
@@ -0,0 +1,227 @@
+package com.google.android.exoplayer2.managerdemo;
+
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.net.Uri;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.util.Pair;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+
+import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.ExoPlaybackException;
+import com.google.android.exoplayer2.drm.DefaultDrmSessionManager;
+import com.google.android.exoplayer2.drm.FrameworkMediaCrypto;
+import com.google.android.exoplayer2.drm.FrameworkMediaDrm;
+import com.google.android.exoplayer2.drm.HttpMediaDrmCallback;
+import com.google.android.exoplayer2.drm.UnsupportedDrmException;
+import com.dfbarone.android.exoplayer2.manager.util.ContextHelper;
+import com.dfbarone.android.exoplayer2.manager.SimpleExoPlayerManager;
+import com.google.android.exoplayer2.mediacodec.MediaCodecRenderer;
+import com.google.android.exoplayer2.mediacodec.MediaCodecUtil;
+import com.google.android.exoplayer2.source.MediaSource;
+import com.google.android.exoplayer2.source.ads.AdsLoader;
+import com.google.android.exoplayer2.source.ads.AdsMediaSource;
+import com.google.android.exoplayer2.upstream.DataSource;
+import com.google.android.exoplayer2.upstream.HttpDataSource;
+import com.google.android.exoplayer2.upstream.TransferListener;
+import com.google.android.exoplayer2.util.ErrorMessageProvider;
+import com.google.android.exoplayer2.util.Util;
+
+import java.lang.reflect.Constructor;
+import java.util.UUID;
+
+public class DemoPlayerManager extends SimpleExoPlayerManager {
+
+  public static final String DRM_SCHEME_EXTRA = "drm_scheme";
+  public static final String DRM_LICENSE_URL_EXTRA = "drm_license_url";
+  public static final String DRM_KEY_REQUEST_PROPERTIES_EXTRA = "drm_key_request_properties";
+  public static final String DRM_MULTI_SESSION_EXTRA = "drm_multi_session";
+  // For backwards compatibility only.
+  private static final String DRM_SCHEME_UUID_EXTRA = "drm_scheme_uuid";
+
+  public DemoPlayerManager(Context context, View root) {
+    super(context, root);
+
+    /* Customizations in intializePlayer */
+    setPlayerDependencies(
+        new CustomPlayerDependencies.Builder(
+            new DemoDataSourceBuilder(),
+            new DefaultMediaSourceBuilder()
+        )
+            .setErrorMessageProvider(new PlayerErrorMessageProvider())
+            .setDrmSessionManagerBuilder(new DemoDrmSessionManagerBuilder())
+            .setAdsMediaSourceBuilder(new DemoAdsMediaSourceBuilder())
+            .build()
+    );
+  }
+
+  // Activity lifecycle
+  public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
+                                         @NonNull int[] grantResults) {
+    if (grantResults.length == 0) {
+      // Empty results are triggered if a permission is requested while another request was already
+      // pending and can be safely ignored in this case.
+      return;
+    }
+    if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+      initializePlayer();
+    } else {
+      onError(getContext().getString(R.string.storage_permission_denied));
+      //finish(getContext().getString(R.string.storage_permission_denied));
+    }
+  }
+
+  private class DemoDataSourceBuilder implements DataSourceBuilder {
+    @Override
+    public DataSource.Factory buildDataSourceFactory(boolean useBandwidthMeter) {
+      // Optional
+      TransferListener<? super DataSource> listener = useBandwidthMeter ? BANDWIDTH_METER : null;
+      return ((DemoApplication) ContextHelper.getApplication(getContext())).buildDataSourceFactory(listener);
+    }
+
+    /**
+     * Returns a {@link HttpDataSource.Factory}.
+     */
+    @Override
+    public HttpDataSource.Factory buildHttpDataSourceFactory(
+        TransferListener<? super DataSource> listener) {
+      return ((DemoApplication) ContextHelper.getApplication(getContext())).buildHttpDataSourceFactory(listener);
+    }
+  }
+
+  private class DemoDrmSessionManagerBuilder implements DrmSessionManagerBuilder {
+    @Override
+    public DefaultDrmSessionManager<FrameworkMediaCrypto> buildDrmSessionManager() throws UnsupportedDrmException {
+      Intent intent = getIntent();
+      String drmLicenseUrl = intent.getStringExtra(DRM_LICENSE_URL_EXTRA);
+      String[] keyRequestPropertiesArray = intent.getStringArrayExtra(DRM_KEY_REQUEST_PROPERTIES_EXTRA);
+      boolean multiSession = intent.getBooleanExtra(DRM_MULTI_SESSION_EXTRA, false);
+      String drmSchemeExtra = intent.hasExtra(DRM_SCHEME_EXTRA) ? DRM_SCHEME_EXTRA : DRM_SCHEME_UUID_EXTRA;
+      UUID drmSchemeUuid = Util.getDrmUuid(intent.getStringExtra(drmSchemeExtra));
+      if (drmSchemeUuid != null) {
+        return buildDrmSessionManagerV18(drmSchemeUuid, drmLicenseUrl, keyRequestPropertiesArray, multiSession);
+      } else {
+        return null;
+      }
+    }
+
+    private DefaultDrmSessionManager<FrameworkMediaCrypto> buildDrmSessionManagerV18(
+        UUID uuid, String licenseUrl, String[] keyRequestPropertiesArray, boolean multiSession)
+        throws UnsupportedDrmException {
+      HttpDataSource.Factory licenseDataSourceFactory =
+          ((DemoApplication) ContextHelper.getApplication(getContext())).buildHttpDataSourceFactory(/* listener= */ null);
+      HttpMediaDrmCallback drmCallback =
+          new HttpMediaDrmCallback(licenseUrl, licenseDataSourceFactory);
+      if (keyRequestPropertiesArray != null) {
+        for (int i = 0; i < keyRequestPropertiesArray.length - 1; i += 2) {
+          drmCallback.setKeyRequestProperty(keyRequestPropertiesArray[i],
+              keyRequestPropertiesArray[i + 1]);
+        }
+      }
+      return new DefaultDrmSessionManager<>(
+          uuid, FrameworkMediaDrm.newInstance(uuid), drmCallback, null, multiSession);
+    }
+  }
+
+  private class DemoAdsMediaSourceBuilder implements AdsMediaSourceBuilder {
+    // Fields used only for ad playback. The ads loader is loaded via reflection.
+    protected AdsLoader adsLoader;
+    protected ViewGroup adUiViewGroup;
+
+    /**
+     * Returns an ads media source, reusing the ads loader if one exists.
+     */
+    @Override
+    public @Nullable
+    MediaSource createAdsMediaSource(MediaSource mediaSource, Uri adTagUri) {
+      // Load the extension source using reflection so the demo app doesn't have to depend on it.
+      // The ads loader is reused for multiple playbacks, so that ad playback can resume.
+      try {
+        Class<?> loaderClass = Class.forName("com.google.android.exoplayer2.ext.ima.ImaAdsLoader");
+        if (adsLoader == null) {
+          // Full class names used so the LINT.IfChange rule triggers should any of the classes move.
+          // LINT.IfChange
+          Constructor<? extends AdsLoader> loaderConstructor =
+              loaderClass
+                  .asSubclass(AdsLoader.class)
+                  .getConstructor(Context.class, Uri.class);
+          // LINT.ThenChange(../../../../../../../../proguard-rules.txt)
+          adsLoader = loaderConstructor.newInstance(this, adTagUri);
+          adUiViewGroup = new FrameLayout(/*this*/getContext());
+          // The demo app has a non-null overlay frame layout.
+          if (playerView != null) {
+            playerView.getOverlayFrameLayout().addView(adUiViewGroup);
+          }
+        }
+        AdsMediaSource.MediaSourceFactory adMediaSourceFactory =
+            new AdsMediaSource.MediaSourceFactory() {
+              @Override
+              public MediaSource createMediaSource(Uri uri) {
+                return playerDependencies().mediaSourceBuilder().buildMediaSource(uri);
+              }
+
+              @Override
+              public int[] getSupportedTypes() {
+                return new int[]{C.TYPE_DASH, C.TYPE_SS, C.TYPE_HLS, C.TYPE_OTHER};
+              }
+            };
+        return new AdsMediaSource(mediaSource, adMediaSourceFactory, adsLoader, adUiViewGroup);
+      } catch (ClassNotFoundException e) {
+        // IMA extension not loaded.
+        return null;
+      } catch (Exception e) {
+        throw new RuntimeException(e);
+      }
+    }
+
+    @Override
+    public void releaseAdsLoader() {
+      if (adsLoader != null) {
+        adsLoader.release();
+        adsLoader = null;
+        if (playerView != null) {
+          playerView.getOverlayFrameLayout().removeAllViews();
+        }
+      }
+    }
+  }
+
+  private class PlayerErrorMessageProvider implements ErrorMessageProvider<ExoPlaybackException> {
+
+    @Override
+    public Pair<Integer, String> getErrorMessage(ExoPlaybackException e) {
+      String errorString = getContext().getString(R.string.error_generic);
+      if (e.type == ExoPlaybackException.TYPE_RENDERER) {
+        Exception cause = e.getRendererException();
+        if (cause instanceof MediaCodecRenderer.DecoderInitializationException) {
+          // Special case for decoder initialization failures.
+          MediaCodecRenderer.DecoderInitializationException decoderInitializationException =
+              (MediaCodecRenderer.DecoderInitializationException) cause;
+          if (decoderInitializationException.decoderName == null) {
+            if (decoderInitializationException.getCause() instanceof MediaCodecUtil.DecoderQueryException) {
+              errorString = getContext().getString(R.string.error_querying_decoders);
+            } else if (decoderInitializationException.secureDecoderRequired) {
+              errorString =
+                  getContext().getString(
+                      R.string.error_no_secure_decoder, decoderInitializationException.mimeType);
+            } else {
+              errorString =
+                  getContext().getString(R.string.error_no_decoder, decoderInitializationException.mimeType);
+            }
+          } else {
+            errorString =
+                getContext().getString(
+                    R.string.error_instantiating_decoder,
+                    decoderInitializationException.decoderName);
+          }
+        }
+      }
+      return Pair.create(0, errorString);
+    }
+  }
+
+}
diff --git a/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DownloadTracker.java b/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DownloadTracker.java
new file mode 100644
index 0000000000..7890cd479c
--- /dev/null
+++ b/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DownloadTracker.java
@@ -0,0 +1,303 @@
+/*
+ * Copyright (C) 2017 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.android.exoplayer2.managerdemo;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.net.Uri;
+import android.os.Handler;
+import android.os.HandlerThread;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.ArrayAdapter;
+import android.widget.ListView;
+import android.widget.Toast;
+import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.offline.ActionFile;
+import com.google.android.exoplayer2.offline.DownloadAction;
+import com.google.android.exoplayer2.offline.DownloadHelper;
+import com.google.android.exoplayer2.offline.DownloadManager;
+import com.google.android.exoplayer2.offline.DownloadManager.TaskState;
+import com.google.android.exoplayer2.offline.DownloadService;
+import com.google.android.exoplayer2.offline.ProgressiveDownloadHelper;
+import com.google.android.exoplayer2.offline.SegmentDownloadAction;
+import com.google.android.exoplayer2.offline.TrackKey;
+import com.google.android.exoplayer2.source.TrackGroup;
+import com.google.android.exoplayer2.source.TrackGroupArray;
+import com.google.android.exoplayer2.source.dash.offline.DashDownloadHelper;
+import com.google.android.exoplayer2.source.hls.offline.HlsDownloadHelper;
+import com.google.android.exoplayer2.source.smoothstreaming.offline.SsDownloadHelper;
+import com.google.android.exoplayer2.ui.DefaultTrackNameProvider;
+import com.google.android.exoplayer2.ui.TrackNameProvider;
+import com.google.android.exoplayer2.upstream.DataSource;
+import com.google.android.exoplayer2.util.Util;
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.concurrent.CopyOnWriteArraySet;
+
+/**
+ * Tracks media that has been downloaded.
+ *
+ * <p>Tracked downloads are persisted using an {@link ActionFile}, however in a real application
+ * it's expected that state will be stored directly in the application's media database, so that it
+ * can be queried efficiently together with other information about the media.
+ */
+public class DownloadTracker implements DownloadManager.Listener {
+
+  /** Listens for changes in the tracked downloads. */
+  public interface Listener {
+
+    /** Called when the tracked downloads changed. */
+    void onDownloadsChanged();
+  }
+
+  private static final String TAG = "DownloadTracker";
+
+  private final Context context;
+  private final DataSource.Factory dataSourceFactory;
+  private final TrackNameProvider trackNameProvider;
+  private final CopyOnWriteArraySet<Listener> listeners;
+  private final HashMap<Uri, DownloadAction> trackedDownloadStates;
+  private final ActionFile actionFile;
+  private final Handler actionFileWriteHandler;
+
+  public DownloadTracker(
+      Context context,
+      DataSource.Factory dataSourceFactory,
+      File actionFile,
+      DownloadAction.Deserializer[] deserializers) {
+    this.context = context.getApplicationContext();
+    this.dataSourceFactory = dataSourceFactory;
+    this.actionFile = new ActionFile(actionFile);
+    trackNameProvider = new DefaultTrackNameProvider(context.getResources());
+    listeners = new CopyOnWriteArraySet<>();
+    trackedDownloadStates = new HashMap<>();
+    HandlerThread actionFileWriteThread = new HandlerThread("DownloadTracker");
+    actionFileWriteThread.start();
+    actionFileWriteHandler = new Handler(actionFileWriteThread.getLooper());
+    loadTrackedActions(deserializers);
+  }
+
+  public void addListener(Listener listener) {
+    listeners.add(listener);
+  }
+
+  public void removeListener(Listener listener) {
+    listeners.remove(listener);
+  }
+
+  public boolean isDownloaded(Uri uri) {
+    return trackedDownloadStates.containsKey(uri);
+  }
+
+  @SuppressWarnings("unchecked")
+  public <K> List<K> getOfflineStreamKeys(Uri uri) {
+    if (!trackedDownloadStates.containsKey(uri)) {
+      return Collections.emptyList();
+    }
+    DownloadAction action = trackedDownloadStates.get(uri);
+    if (action instanceof SegmentDownloadAction) {
+      return ((SegmentDownloadAction) action).keys;
+    }
+    return Collections.emptyList();
+  }
+
+  public void toggleDownload(Activity activity, String name, Uri uri, String extension) {
+    if (isDownloaded(uri)) {
+      DownloadAction removeAction =
+          getDownloadHelper(uri, extension).getRemoveAction(Util.getUtf8Bytes(name));
+      startServiceWithAction(removeAction);
+    } else {
+      StartDownloadDialogHelper helper =
+          new StartDownloadDialogHelper(activity, getDownloadHelper(uri, extension), name);
+      helper.prepare();
+    }
+  }
+
+  // DownloadManager.Listener
+
+  @Override
+  public void onInitialized(DownloadManager downloadManager) {
+    // Do nothing.
+  }
+
+  @Override
+  public void onTaskStateChanged(DownloadManager downloadManager, TaskState taskState) {
+    DownloadAction action = taskState.action;
+    Uri uri = action.uri;
+    if ((action.isRemoveAction && taskState.state == TaskState.STATE_COMPLETED)
+        || (!action.isRemoveAction && taskState.state == TaskState.STATE_FAILED)) {
+      // A download has been removed, or has failed. Stop tracking it.
+      if (trackedDownloadStates.remove(uri) != null) {
+        handleTrackedDownloadStatesChanged();
+      }
+    }
+  }
+
+  @Override
+  public void onIdle(DownloadManager downloadManager) {
+    // Do nothing.
+  }
+
+  // Internal methods
+
+  private void loadTrackedActions(DownloadAction.Deserializer[] deserializers) {
+    try {
+      DownloadAction[] allActions = actionFile.load(deserializers);
+      for (DownloadAction action : allActions) {
+        trackedDownloadStates.put(action.uri, action);
+      }
+    } catch (IOException e) {
+      Log.e(TAG, "Failed to load tracked actions", e);
+    }
+  }
+
+  private void handleTrackedDownloadStatesChanged() {
+    for (Listener listener : listeners) {
+      listener.onDownloadsChanged();
+    }
+    final DownloadAction[] actions = trackedDownloadStates.values().toArray(new DownloadAction[0]);
+    actionFileWriteHandler.post(
+        new Runnable() {
+          @Override
+          public void run() {
+            try {
+              actionFile.store(actions);
+            } catch (IOException e) {
+              Log.e(TAG, "Failed to store tracked actions", e);
+            }
+          }
+        });
+  }
+
+  private void startDownload(DownloadAction action) {
+    if (trackedDownloadStates.containsKey(action.uri)) {
+      // This content is already being downloaded. Do nothing.
+      return;
+    }
+    trackedDownloadStates.put(action.uri, action);
+    handleTrackedDownloadStatesChanged();
+    startServiceWithAction(action);
+  }
+
+  private void startServiceWithAction(DownloadAction action) {
+    DownloadService.startWithAction(context, DemoDownloadService.class, action, false);
+  }
+
+  private DownloadHelper getDownloadHelper(Uri uri, String extension) {
+    int type = Util.inferContentType(uri, extension);
+    switch (type) {
+      case C.TYPE_DASH:
+        return new DashDownloadHelper(uri, dataSourceFactory);
+      case C.TYPE_SS:
+        return new SsDownloadHelper(uri, dataSourceFactory);
+      case C.TYPE_HLS:
+        return new HlsDownloadHelper(uri, dataSourceFactory);
+      case C.TYPE_OTHER:
+        return new ProgressiveDownloadHelper(uri);
+      default:
+        throw new IllegalStateException("Unsupported type: " + type);
+    }
+  }
+
+  private final class StartDownloadDialogHelper
+      implements DownloadHelper.Callback, DialogInterface.OnClickListener {
+
+    private final DownloadHelper downloadHelper;
+    private final String name;
+
+    private final AlertDialog.Builder builder;
+    private final View dialogView;
+    private final List<TrackKey> trackKeys;
+    private final ArrayAdapter<String> trackTitles;
+    private final ListView representationList;
+
+    public StartDownloadDialogHelper(
+        Activity activity, DownloadHelper downloadHelper, String name) {
+      this.downloadHelper = downloadHelper;
+      this.name = name;
+      builder =
+          new AlertDialog.Builder(activity)
+              .setTitle(R.string.exo_download_description)
+              .setPositiveButton(android.R.string.ok, this)
+              .setNegativeButton(android.R.string.cancel, null);
+
+      // Inflate with the builder's context to ensure the correct style is used.
+      LayoutInflater dialogInflater = LayoutInflater.from(builder.getContext());
+      dialogView = dialogInflater.inflate(R.layout.start_download_dialog, null);
+
+      trackKeys = new ArrayList<>();
+      trackTitles =
+          new ArrayAdapter<>(
+              builder.getContext(), android.R.layout.simple_list_item_multiple_choice);
+      representationList = dialogView.findViewById(R.id.representation_list);
+      representationList.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
+      representationList.setAdapter(trackTitles);
+    }
+
+    public void prepare() {
+      downloadHelper.prepare(this);
+    }
+
+    @Override
+    public void onPrepared(DownloadHelper helper) {
+      for (int i = 0; i < downloadHelper.getPeriodCount(); i++) {
+        TrackGroupArray trackGroups = downloadHelper.getTrackGroups(i);
+        for (int j = 0; j < trackGroups.length; j++) {
+          TrackGroup trackGroup = trackGroups.get(j);
+          for (int k = 0; k < trackGroup.length; k++) {
+            trackKeys.add(new TrackKey(i, j, k));
+            trackTitles.add(trackNameProvider.getTrackName(trackGroup.getFormat(k)));
+          }
+        }
+        if (!trackKeys.isEmpty()) {
+          builder.setView(dialogView);
+        }
+        builder.create().show();
+      }
+    }
+
+    @Override
+    public void onPrepareError(DownloadHelper helper, IOException e) {
+      Toast.makeText(
+          context.getApplicationContext(), R.string.download_start_error, Toast.LENGTH_LONG)
+          .show();
+    }
+
+    @Override
+    public void onClick(DialogInterface dialog, int which) {
+      ArrayList<TrackKey> selectedTrackKeys = new ArrayList<>();
+      for (int i = 0; i < representationList.getChildCount(); i++) {
+        if (representationList.isItemChecked(i)) {
+          selectedTrackKeys.add(trackKeys.get(i));
+        }
+      }
+      if (!selectedTrackKeys.isEmpty() || trackKeys.isEmpty()) {
+        // We have selected keys, or we're dealing with single stream content.
+        DownloadAction downloadAction =
+            downloadHelper.getDownloadAction(Util.getUtf8Bytes(name), selectedTrackKeys);
+        startDownload(downloadAction);
+      }
+    }
+  }
+}
\ No newline at end of file
diff --git a/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/PlayerActivity.java b/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/PlayerActivity.java
new file mode 100644
index 0000000000..0eb8444464
--- /dev/null
+++ b/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/PlayerActivity.java
@@ -0,0 +1,129 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.android.exoplayer2.managerdemo;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.text.TextUtils;
+import android.util.Log;
+import android.view.KeyEvent;
+import android.widget.Toast;
+import com.google.android.exoplayer2.ExoPlaybackException;
+import com.dfbarone.android.exoplayer2.manager.PlayerManager;
+import com.google.android.exoplayer2.util.Util;
+
+/** An activity that plays media using {@link DemoPlayerManager}. */
+public class PlayerActivity extends Activity
+    implements PlayerManager.EventListener {
+
+  private static final String TAG = PlayerActivity.class.getSimpleName();
+
+  private DemoPlayerManager playerManager;
+
+  // Activity lifecycle
+  @Override
+  public void onCreate(Bundle savedInstanceState) {
+    super.onCreate(savedInstanceState);
+    setContentView(R.layout.player_activity);
+
+    playerManager = new DemoPlayerManager(this, findViewById(R.id.root));
+    playerManager.onRestoreInstanceState(savedInstanceState);
+    playerManager.setEventListener(this);
+    playerManager.setIntent(getIntent());
+    playerManager.setDebug(BuildConfig.DEBUG);
+  }
+
+  @Override
+  public void onNewIntent(Intent intent) {
+    playerManager.onNewIntent(intent);
+  }
+
+  @Override
+  public void onStart() {
+    super.onStart();
+    if (Util.SDK_INT > 23) {
+      playerManager.initializePlayer();
+    }
+  }
+
+  @Override
+  public void onResume() {
+    super.onResume();
+    if (Util.SDK_INT <= 23) {
+      playerManager.initializePlayer();
+    }
+  }
+
+  @Override
+  public void onPause() {
+    super.onPause();
+    if (Util.SDK_INT <= 23) {
+      playerManager.releasePlayer();
+    }
+  }
+
+  @Override
+  public void onStop() {
+    super.onStop();
+    if (Util.SDK_INT > 23) {
+      playerManager.releasePlayer();
+    }
+  }
+
+  @Override
+  public void onDestroy() {
+    super.onDestroy();
+    playerManager.releasePlayer();
+    playerManager.releaseAdsLoader();
+  }
+
+  @Override
+  public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
+                                         @NonNull int[] grantResults) {
+    playerManager.onRequestPermissionsResult(requestCode, permissions, grantResults);
+  }
+
+  @Override
+  public void onSaveInstanceState(Bundle outState) {
+    playerManager.onSaveInstanceState(outState);
+    super.onSaveInstanceState(outState);
+  }
+
+  @Override
+  public boolean dispatchKeyEvent(KeyEvent event) {
+    // See whether the player view wants to handle media or DPAD keys events.
+    return playerManager.dispatchKeyEvent(event) || super.dispatchKeyEvent(event);
+  }
+
+  // ExoPlayerWrapper.EventListener
+  @Override
+  public void onError(String message, Exception e) {
+    if (e != null) {
+      Log.d(TAG, "onError() " + message);
+      Toast.makeText(this, message, Toast.LENGTH_LONG);
+    }
+  }
+
+  @Override
+  public void onFinish() {
+    Log.d(TAG, "onFinish()");
+    // user attempt to close
+    super.finish();
+  }
+
+}
diff --git a/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/SampleChooserActivity.java b/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/SampleChooserActivity.java
new file mode 100644
index 0000000000..04d265e2e8
--- /dev/null
+++ b/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/SampleChooserActivity.java
@@ -0,0 +1,571 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.android.exoplayer2.managerdemo;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.content.res.AssetManager;
+import android.net.Uri;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.util.JsonReader;
+import android.util.Log;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.ViewGroup;
+import android.widget.BaseExpandableListAdapter;
+import android.widget.ExpandableListView;
+import android.widget.ExpandableListView.OnChildClickListener;
+import android.widget.ImageButton;
+import android.widget.TextView;
+import android.widget.Toast;
+import com.google.android.exoplayer2.ParserException;
+import com.google.android.exoplayer2.offline.DownloadService;
+import com.google.android.exoplayer2.upstream.DataSource;
+import com.google.android.exoplayer2.upstream.DataSourceInputStream;
+import com.google.android.exoplayer2.upstream.DataSpec;
+import com.google.android.exoplayer2.upstream.DefaultDataSource;
+import com.google.android.exoplayer2.util.Assertions;
+import com.google.android.exoplayer2.util.Util;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+
+/** An activity for selecting from a list of media samples. */
+public class SampleChooserActivity extends Activity
+    implements DownloadTracker.Listener, OnChildClickListener {
+
+  private static final String TAG = "SampleChooserActivity";
+
+  private DownloadTracker downloadTracker;
+  private SampleAdapter sampleAdapter;
+
+  @Override
+  public void onCreate(Bundle savedInstanceState) {
+    super.onCreate(savedInstanceState);
+    setContentView(R.layout.sample_chooser_activity);
+    sampleAdapter = new SampleAdapter();
+    ExpandableListView sampleListView = findViewById(R.id.sample_list);
+    sampleListView.setAdapter(sampleAdapter);
+    sampleListView.setOnChildClickListener(this);
+
+    Intent intent = getIntent();
+    String dataUri = intent.getDataString();
+    String[] uris;
+    if (dataUri != null) {
+      uris = new String[] {dataUri};
+    } else {
+      ArrayList<String> uriList = new ArrayList<>();
+      AssetManager assetManager = getAssets();
+      try {
+        for (String asset : assetManager.list("")) {
+          if (asset.endsWith(".exolist.json")) {
+            uriList.add("asset:///" + asset);
+          }
+        }
+      } catch (IOException e) {
+        Toast.makeText(getApplicationContext(), R.string.sample_list_load_error, Toast.LENGTH_LONG)
+            .show();
+      }
+      uris = new String[uriList.size()];
+      uriList.toArray(uris);
+      Arrays.sort(uris);
+    }
+
+    downloadTracker = ((DemoApplication) getApplication()).getDownloadTracker();
+    SampleListLoader loaderTask = new SampleListLoader();
+    loaderTask.execute(uris);
+
+    // Start the download service if it should be running but it's not currently.
+    // Starting the service in the foreground causes notification flicker if there is no scheduled
+    // action. Starting it in the background throws an exception if the app is in the background too
+    // (e.g. if device screen is locked).
+    try {
+      DownloadService.start(this, DemoDownloadService.class);
+    } catch (IllegalStateException e) {
+      DownloadService.startForeground(this, DemoDownloadService.class);
+    }
+  }
+
+  @Override
+  public void onStart() {
+    super.onStart();
+    downloadTracker.addListener(this);
+    sampleAdapter.notifyDataSetChanged();
+  }
+
+  @Override
+  public void onStop() {
+    downloadTracker.removeListener(this);
+    super.onStop();
+  }
+
+  @Override
+  public void onDownloadsChanged() {
+    sampleAdapter.notifyDataSetChanged();
+  }
+
+  private void onSampleGroups(final List<SampleGroup> groups, boolean sawError) {
+    if (sawError) {
+      Toast.makeText(getApplicationContext(), R.string.sample_list_load_error, Toast.LENGTH_LONG)
+          .show();
+    }
+    sampleAdapter.setSampleGroups(groups);
+  }
+
+  @Override
+  public boolean onChildClick(
+      ExpandableListView parent, View view, int groupPosition, int childPosition, long id) {
+    Sample sample = (Sample) view.getTag();
+    startActivity(sample.buildIntent(this));
+    return true;
+  }
+
+  private void onSampleDownloadButtonClicked(Sample sample) {
+    int downloadUnsupportedStringId = getDownloadUnsupportedStringId(sample);
+    if (downloadUnsupportedStringId != 0) {
+      Toast.makeText(getApplicationContext(), downloadUnsupportedStringId, Toast.LENGTH_LONG)
+          .show();
+    } else {
+      UriSample uriSample = (UriSample) sample;
+      downloadTracker.toggleDownload(this, sample.name, uriSample.uri, uriSample.extension);
+    }
+  }
+
+  private int getDownloadUnsupportedStringId(Sample sample) {
+    if (sample instanceof PlaylistSample) {
+      return R.string.download_playlist_unsupported;
+    }
+    UriSample uriSample = (UriSample) sample;
+    if (uriSample.drmInfo != null) {
+      return R.string.download_drm_unsupported;
+    }
+    if (uriSample.adTagUri != null) {
+      return R.string.download_ads_unsupported;
+    }
+    String scheme = uriSample.uri.getScheme();
+    if (!("http".equals(scheme) || "https".equals(scheme))) {
+      return R.string.download_scheme_unsupported;
+    }
+    return 0;
+  }
+
+  private final class SampleListLoader extends AsyncTask<String, Void, List<SampleGroup>> {
+
+    private boolean sawError;
+
+    @Override
+    protected List<SampleGroup> doInBackground(String... uris) {
+      List<SampleGroup> result = new ArrayList<>();
+      Context context = getApplicationContext();
+      String userAgent = Util.getUserAgent(context, "ExoPlayerDemo");
+      DataSource dataSource = new DefaultDataSource(context, null, userAgent, false);
+      for (String uri : uris) {
+        DataSpec dataSpec = new DataSpec(Uri.parse(uri));
+        InputStream inputStream = new DataSourceInputStream(dataSource, dataSpec);
+        try {
+          readSampleGroups(new JsonReader(new InputStreamReader(inputStream, "UTF-8")), result);
+        } catch (Exception e) {
+          Log.e(TAG, "Error loading sample list: " + uri, e);
+          sawError = true;
+        } finally {
+          Util.closeQuietly(dataSource);
+        }
+      }
+      return result;
+    }
+
+    @Override
+    protected void onPostExecute(List<SampleGroup> result) {
+      onSampleGroups(result, sawError);
+    }
+
+    private void readSampleGroups(JsonReader reader, List<SampleGroup> groups) throws IOException {
+      reader.beginArray();
+      while (reader.hasNext()) {
+        readSampleGroup(reader, groups);
+      }
+      reader.endArray();
+    }
+
+    private void readSampleGroup(JsonReader reader, List<SampleGroup> groups) throws IOException {
+      String groupName = "";
+      ArrayList<Sample> samples = new ArrayList<>();
+
+      reader.beginObject();
+      while (reader.hasNext()) {
+        String name = reader.nextName();
+        switch (name) {
+          case "name":
+            groupName = reader.nextString();
+            break;
+          case "samples":
+            reader.beginArray();
+            while (reader.hasNext()) {
+              samples.add(readEntry(reader, false));
+            }
+            reader.endArray();
+            break;
+          case "_comment":
+            reader.nextString(); // Ignore.
+            break;
+          default:
+            throw new ParserException("Unsupported name: " + name);
+        }
+      }
+      reader.endObject();
+
+      SampleGroup group = getGroup(groupName, groups);
+      group.samples.addAll(samples);
+    }
+
+    private Sample readEntry(JsonReader reader, boolean insidePlaylist) throws IOException {
+      String sampleName = null;
+      Uri uri = null;
+      String extension = null;
+      String drmScheme = null;
+      String drmLicenseUrl = null;
+      String[] drmKeyRequestProperties = null;
+      boolean drmMultiSession = false;
+      boolean preferExtensionDecoders = false;
+      ArrayList<UriSample> playlistSamples = null;
+      String adTagUri = null;
+      String abrAlgorithm = null;
+
+      reader.beginObject();
+      while (reader.hasNext()) {
+        String name = reader.nextName();
+        switch (name) {
+          case "name":
+            sampleName = reader.nextString();
+            break;
+          case "uri":
+            uri = Uri.parse(reader.nextString());
+            break;
+          case "extension":
+            extension = reader.nextString();
+            break;
+          case "drm_scheme":
+            Assertions.checkState(!insidePlaylist, "Invalid attribute on nested item: drm_scheme");
+            drmScheme = reader.nextString();
+            break;
+          case "drm_license_url":
+            Assertions.checkState(!insidePlaylist,
+                "Invalid attribute on nested item: drm_license_url");
+            drmLicenseUrl = reader.nextString();
+            break;
+          case "drm_key_request_properties":
+            Assertions.checkState(!insidePlaylist,
+                "Invalid attribute on nested item: drm_key_request_properties");
+            ArrayList<String> drmKeyRequestPropertiesList = new ArrayList<>();
+            reader.beginObject();
+            while (reader.hasNext()) {
+              drmKeyRequestPropertiesList.add(reader.nextName());
+              drmKeyRequestPropertiesList.add(reader.nextString());
+            }
+            reader.endObject();
+            drmKeyRequestProperties = drmKeyRequestPropertiesList.toArray(new String[0]);
+            break;
+          case "drm_multi_session":
+            drmMultiSession = reader.nextBoolean();
+            break;
+          case "prefer_extension_decoders":
+            Assertions.checkState(!insidePlaylist,
+                "Invalid attribute on nested item: prefer_extension_decoders");
+            preferExtensionDecoders = reader.nextBoolean();
+            break;
+          case "playlist":
+            Assertions.checkState(!insidePlaylist, "Invalid nesting of playlists");
+            playlistSamples = new ArrayList<>();
+            reader.beginArray();
+            while (reader.hasNext()) {
+              playlistSamples.add((UriSample) readEntry(reader, true));
+            }
+            reader.endArray();
+            break;
+          case "ad_tag_uri":
+            adTagUri = reader.nextString();
+            break;
+          case "abr_algorithm":
+            Assertions.checkState(
+                !insidePlaylist, "Invalid attribute on nested item: abr_algorithm");
+            abrAlgorithm = reader.nextString();
+            break;
+          default:
+            throw new ParserException("Unsupported attribute name: " + name);
+        }
+      }
+      reader.endObject();
+      DrmInfo drmInfo =
+          drmScheme == null
+              ? null
+              : new DrmInfo(drmScheme, drmLicenseUrl, drmKeyRequestProperties, drmMultiSession);
+      if (playlistSamples != null) {
+        UriSample[] playlistSamplesArray = playlistSamples.toArray(
+            new UriSample[playlistSamples.size()]);
+        return new PlaylistSample(
+            sampleName, preferExtensionDecoders, abrAlgorithm, drmInfo, playlistSamplesArray);
+      } else {
+        return new UriSample(
+            sampleName, preferExtensionDecoders, abrAlgorithm, drmInfo, uri, extension, adTagUri);
+      }
+    }
+
+    private SampleGroup getGroup(String groupName, List<SampleGroup> groups) {
+      for (int i = 0; i < groups.size(); i++) {
+        if (Util.areEqual(groupName, groups.get(i).title)) {
+          return groups.get(i);
+        }
+      }
+      SampleGroup group = new SampleGroup(groupName);
+      groups.add(group);
+      return group;
+    }
+
+  }
+
+  private final class SampleAdapter extends BaseExpandableListAdapter implements OnClickListener {
+
+    private List<SampleGroup> sampleGroups;
+
+    public SampleAdapter() {
+      sampleGroups = Collections.emptyList();
+    }
+
+    public void setSampleGroups(List<SampleGroup> sampleGroups) {
+      this.sampleGroups = sampleGroups;
+      notifyDataSetChanged();
+    }
+
+    @Override
+    public Sample getChild(int groupPosition, int childPosition) {
+      return getGroup(groupPosition).samples.get(childPosition);
+    }
+
+    @Override
+    public long getChildId(int groupPosition, int childPosition) {
+      return childPosition;
+    }
+
+    @Override
+    public View getChildView(int groupPosition, int childPosition, boolean isLastChild,
+        View convertView, ViewGroup parent) {
+      View view = convertView;
+      if (view == null) {
+        view = getLayoutInflater().inflate(R.layout.sample_list_item, parent, false);
+        View downloadButton = view.findViewById(R.id.download_button);
+        downloadButton.setOnClickListener(this);
+        downloadButton.setFocusable(false);
+      }
+      initializeChildView(view, getChild(groupPosition, childPosition));
+      return view;
+    }
+
+    @Override
+    public int getChildrenCount(int groupPosition) {
+      return getGroup(groupPosition).samples.size();
+    }
+
+    @Override
+    public SampleGroup getGroup(int groupPosition) {
+      return sampleGroups.get(groupPosition);
+    }
+
+    @Override
+    public long getGroupId(int groupPosition) {
+      return groupPosition;
+    }
+
+    @Override
+    public View getGroupView(int groupPosition, boolean isExpanded, View convertView,
+        ViewGroup parent) {
+      View view = convertView;
+      if (view == null) {
+        view =
+            getLayoutInflater()
+                .inflate(android.R.layout.simple_expandable_list_item_1, parent, false);
+      }
+      ((TextView) view).setText(getGroup(groupPosition).title);
+      return view;
+    }
+
+    @Override
+    public int getGroupCount() {
+      return sampleGroups.size();
+    }
+
+    @Override
+    public boolean hasStableIds() {
+      return false;
+    }
+
+    @Override
+    public boolean isChildSelectable(int groupPosition, int childPosition) {
+      return true;
+    }
+
+    @Override
+    public void onClick(View view) {
+      onSampleDownloadButtonClicked((Sample) view.getTag());
+    }
+
+    private void initializeChildView(View view, Sample sample) {
+      view.setTag(sample);
+      TextView sampleTitle = view.findViewById(R.id.sample_title);
+      sampleTitle.setText(sample.name);
+
+      boolean canDownload = getDownloadUnsupportedStringId(sample) == 0;
+      boolean isDownloaded = canDownload && downloadTracker.isDownloaded(((UriSample) sample).uri);
+      ImageButton downloadButton = view.findViewById(R.id.download_button);
+      downloadButton.setTag(sample);
+      downloadButton.setColorFilter(
+          canDownload ? (isDownloaded ? 0xFF42A5F5 : 0xFFBDBDBD) : 0xFFEEEEEE);
+      downloadButton.setImageResource(
+          isDownloaded ? R.drawable.ic_download_done : R.drawable.ic_download);
+    }
+  }
+
+  private static final class SampleGroup {
+
+    public final String title;
+    public final List<Sample> samples;
+
+    public SampleGroup(String title) {
+      this.title = title;
+      this.samples = new ArrayList<>();
+    }
+
+  }
+
+  private static final class DrmInfo {
+    public final String drmScheme;
+    public final String drmLicenseUrl;
+    public final String[] drmKeyRequestProperties;
+    public final boolean drmMultiSession;
+
+    public DrmInfo(
+        String drmScheme,
+        String drmLicenseUrl,
+        String[] drmKeyRequestProperties,
+        boolean drmMultiSession) {
+      this.drmScheme = drmScheme;
+      this.drmLicenseUrl = drmLicenseUrl;
+      this.drmKeyRequestProperties = drmKeyRequestProperties;
+      this.drmMultiSession = drmMultiSession;
+    }
+
+    public void updateIntent(Intent intent) {
+      Assertions.checkNotNull(intent);
+      intent.putExtra(DemoPlayerManager.DRM_SCHEME_EXTRA, drmScheme);
+      intent.putExtra(DemoPlayerManager.DRM_LICENSE_URL_EXTRA, drmLicenseUrl);
+      intent.putExtra(DemoPlayerManager.DRM_KEY_REQUEST_PROPERTIES_EXTRA, drmKeyRequestProperties);
+      intent.putExtra(DemoPlayerManager.DRM_MULTI_SESSION_EXTRA, drmMultiSession);
+    }
+  }
+
+  private abstract static class Sample {
+    public final String name;
+    public final boolean preferExtensionDecoders;
+    public final String abrAlgorithm;
+    public final DrmInfo drmInfo;
+
+    public Sample(
+        String name, boolean preferExtensionDecoders, String abrAlgorithm, DrmInfo drmInfo) {
+      this.name = name;
+      this.preferExtensionDecoders = preferExtensionDecoders;
+      this.abrAlgorithm = abrAlgorithm;
+      this.drmInfo = drmInfo;
+    }
+
+    public Intent buildIntent(Context context) {
+      Intent intent = new Intent(context, PlayerActivity.class);
+      intent.putExtra(DemoPlayerManager.PREFER_EXTENSION_DECODERS_EXTRA, preferExtensionDecoders);
+      intent.putExtra(DemoPlayerManager.ABR_ALGORITHM_EXTRA, abrAlgorithm);
+      if (drmInfo != null) {
+        drmInfo.updateIntent(intent);
+      }
+      return intent;
+    }
+
+  }
+
+  private static final class UriSample extends Sample {
+
+    public final Uri uri;
+    public final String extension;
+    public final String adTagUri;
+
+    public UriSample(
+        String name,
+        boolean preferExtensionDecoders,
+        String abrAlgorithm,
+        DrmInfo drmInfo,
+        Uri uri,
+        String extension,
+        String adTagUri) {
+      super(name, preferExtensionDecoders, abrAlgorithm, drmInfo);
+      this.uri = uri;
+      this.extension = extension;
+      this.adTagUri = adTagUri;
+    }
+
+    @Override
+    public Intent buildIntent(Context context) {
+      return super.buildIntent(context)
+          .setData(uri)
+          .putExtra(DemoPlayerManager.EXTENSION_EXTRA, extension)
+          .putExtra(DemoPlayerManager.AD_TAG_URI_EXTRA, adTagUri)
+          .setAction(DemoPlayerManager.ACTION_VIEW);
+    }
+
+  }
+
+  private static final class PlaylistSample extends Sample {
+
+    public final UriSample[] children;
+
+    public PlaylistSample(
+        String name,
+        boolean preferExtensionDecoders,
+        String abrAlgorithm,
+        DrmInfo drmInfo,
+        UriSample... children) {
+      super(name, preferExtensionDecoders, abrAlgorithm, drmInfo);
+      this.children = children;
+    }
+
+    @Override
+    public Intent buildIntent(Context context) {
+      String[] uris = new String[children.length];
+      String[] extensions = new String[children.length];
+      for (int i = 0; i < children.length; i++) {
+        uris[i] = children[i].uri.toString();
+        extensions[i] = children[i].extension;
+      }
+      return super.buildIntent(context)
+          .putExtra(DemoPlayerManager.URI_LIST_EXTRA, uris)
+          .putExtra(DemoPlayerManager.EXTENSION_LIST_EXTRA, extensions)
+          .setAction(DemoPlayerManager.ACTION_VIEW_LIST);
+    }
+
+  }
+
+}
diff --git a/demos/manager/src/main/res/drawable-hdpi/ic_download.png b/demos/manager/src/main/res/drawable-hdpi/ic_download.png
new file mode 100644
index 0000000000..fa3ebbb310
Binary files /dev/null and b/demos/manager/src/main/res/drawable-hdpi/ic_download.png differ
diff --git a/demos/manager/src/main/res/drawable-hdpi/ic_download_done.png b/demos/manager/src/main/res/drawable-hdpi/ic_download_done.png
new file mode 100644
index 0000000000..fa0ec9dd68
Binary files /dev/null and b/demos/manager/src/main/res/drawable-hdpi/ic_download_done.png differ
diff --git a/demos/manager/src/main/res/drawable-mdpi/ic_download.png b/demos/manager/src/main/res/drawable-mdpi/ic_download.png
new file mode 100644
index 0000000000..c8a2039c58
Binary files /dev/null and b/demos/manager/src/main/res/drawable-mdpi/ic_download.png differ
diff --git a/demos/manager/src/main/res/drawable-mdpi/ic_download_done.png b/demos/manager/src/main/res/drawable-mdpi/ic_download_done.png
new file mode 100644
index 0000000000..08073a2a6d
Binary files /dev/null and b/demos/manager/src/main/res/drawable-mdpi/ic_download_done.png differ
diff --git a/demos/manager/src/main/res/drawable-xhdpi/ic_banner.png b/demos/manager/src/main/res/drawable-xhdpi/ic_banner.png
new file mode 100644
index 0000000000..09de177387
Binary files /dev/null and b/demos/manager/src/main/res/drawable-xhdpi/ic_banner.png differ
diff --git a/demos/manager/src/main/res/drawable-xhdpi/ic_download.png b/demos/manager/src/main/res/drawable-xhdpi/ic_download.png
new file mode 100644
index 0000000000..671e0b3ece
Binary files /dev/null and b/demos/manager/src/main/res/drawable-xhdpi/ic_download.png differ
diff --git a/demos/manager/src/main/res/drawable-xhdpi/ic_download_done.png b/demos/manager/src/main/res/drawable-xhdpi/ic_download_done.png
new file mode 100644
index 0000000000..2339c0bf16
Binary files /dev/null and b/demos/manager/src/main/res/drawable-xhdpi/ic_download_done.png differ
diff --git a/demos/manager/src/main/res/drawable-xxhdpi/ic_download.png b/demos/manager/src/main/res/drawable-xxhdpi/ic_download.png
new file mode 100644
index 0000000000..f02715177a
Binary files /dev/null and b/demos/manager/src/main/res/drawable-xxhdpi/ic_download.png differ
diff --git a/demos/manager/src/main/res/drawable-xxhdpi/ic_download_done.png b/demos/manager/src/main/res/drawable-xxhdpi/ic_download_done.png
new file mode 100644
index 0000000000..b631a00088
Binary files /dev/null and b/demos/manager/src/main/res/drawable-xxhdpi/ic_download_done.png differ
diff --git a/demos/manager/src/main/res/drawable-xxxhdpi/ic_download.png b/demos/manager/src/main/res/drawable-xxxhdpi/ic_download.png
new file mode 100644
index 0000000000..6602791545
Binary files /dev/null and b/demos/manager/src/main/res/drawable-xxxhdpi/ic_download.png differ
diff --git a/demos/manager/src/main/res/drawable-xxxhdpi/ic_download_done.png b/demos/manager/src/main/res/drawable-xxxhdpi/ic_download_done.png
new file mode 100644
index 0000000000..52fe8f6990
Binary files /dev/null and b/demos/manager/src/main/res/drawable-xxxhdpi/ic_download_done.png differ
diff --git a/demos/manager/src/main/res/layout/player_activity.xml b/demos/manager/src/main/res/layout/player_activity.xml
new file mode 100644
index 0000000000..6b84033273
--- /dev/null
+++ b/demos/manager/src/main/res/layout/player_activity.xml
@@ -0,0 +1,49 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Copyright (C) 2016 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/root"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:keepScreenOn="true">
+
+  <com.google.android.exoplayer2.ui.PlayerView android:id="@+id/player_view"
+      android:layout_width="match_parent"
+      android:layout_height="match_parent"/>
+
+  <LinearLayout
+      android:layout_width="match_parent"
+      android:layout_height="wrap_content"
+      android:background="#88000000"
+      android:orientation="vertical">
+
+    <TextView android:id="@+id/debug_text_view"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:paddingLeft="4dp"
+        android:paddingRight="4dp"
+        android:textSize="10sp"
+        tools:ignore="SmallSp"/>
+
+    <LinearLayout android:id="@+id/controls_root"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:visibility="gone"/>
+
+  </LinearLayout>
+
+</FrameLayout>
diff --git a/demos/manager/src/main/res/layout/sample_chooser_activity.xml b/demos/manager/src/main/res/layout/sample_chooser_activity.xml
new file mode 100644
index 0000000000..4d968c7497
--- /dev/null
+++ b/demos/manager/src/main/res/layout/sample_chooser_activity.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Copyright (C) 2016 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical">
+
+  <ExpandableListView android:id="@+id/sample_list"
+      android:layout_width="match_parent"
+      android:layout_height="match_parent"/>
+
+</LinearLayout>
diff --git a/demos/manager/src/main/res/layout/sample_list_item.xml b/demos/manager/src/main/res/layout/sample_list_item.xml
new file mode 100644
index 0000000000..cdb0058688
--- /dev/null
+++ b/demos/manager/src/main/res/layout/sample_list_item.xml
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2018 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:paddingStart="12dp"
+    android:paddingEnd="12dp"
+    android:gravity="center_vertical"
+    android:orientation="horizontal">
+
+  <TextView android:id="@+id/sample_title"
+      android:layout_width="0dp"
+      android:layout_height="wrap_content"
+      android:layout_weight="1"
+      android:gravity="center_vertical"
+      android:minHeight="?android:attr/listPreferredItemHeightSmall"
+      android:textAppearance="?android:attr/textAppearanceListItemSmall"/>
+
+  <ImageButton android:id="@+id/download_button"
+      android:layout_width="wrap_content"
+      android:layout_height="wrap_content"
+      android:contentDescription="@string/exo_download_description"
+      android:background="@android:color/transparent"/>
+
+</LinearLayout>
diff --git a/demos/manager/src/main/res/layout/start_download_dialog.xml b/demos/manager/src/main/res/layout/start_download_dialog.xml
new file mode 100644
index 0000000000..acb9af5d97
--- /dev/null
+++ b/demos/manager/src/main/res/layout/start_download_dialog.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2018 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<ListView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/representation_list"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"/>
diff --git a/demos/manager/src/main/res/mipmap-hdpi/ic_launcher.png b/demos/manager/src/main/res/mipmap-hdpi/ic_launcher.png
new file mode 100644
index 0000000000..adaa93220e
Binary files /dev/null and b/demos/manager/src/main/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/demos/manager/src/main/res/mipmap-mdpi/ic_launcher.png b/demos/manager/src/main/res/mipmap-mdpi/ic_launcher.png
new file mode 100644
index 0000000000..9b6f7d5e80
Binary files /dev/null and b/demos/manager/src/main/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/demos/manager/src/main/res/mipmap-xhdpi/ic_launcher.png b/demos/manager/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100644
index 0000000000..2101026c9f
Binary files /dev/null and b/demos/manager/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/demos/manager/src/main/res/mipmap-xxhdpi/ic_launcher.png b/demos/manager/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100644
index 0000000000..223ec8bd11
Binary files /dev/null and b/demos/manager/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/demos/manager/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/demos/manager/src/main/res/mipmap-xxxhdpi/ic_launcher.png
new file mode 100644
index 0000000000..698ed68c42
Binary files /dev/null and b/demos/manager/src/main/res/mipmap-xxxhdpi/ic_launcher.png differ
diff --git a/demos/manager/src/main/res/values/strings.xml b/demos/manager/src/main/res/values/strings.xml
new file mode 100644
index 0000000000..06d058384b
--- /dev/null
+++ b/demos/manager/src/main/res/values/strings.xml
@@ -0,0 +1,60 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2016 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+
+  <string name="application_name">ExoPlayerManager</string>
+
+  <string name="unexpected_intent_action">Unexpected intent action: <xliff:g id="action">%1$s</xliff:g></string>
+
+  <string name="error_generic">Playback failed</string>
+
+  <string name="error_unrecognized_abr_algorithm">Unrecognized ABR algorithm</string>
+
+  <string name="error_drm_not_supported">Protected content not supported on API levels below 18</string>
+
+  <string name="error_drm_unsupported_scheme">This device does not support the required DRM scheme</string>
+
+  <string name="error_drm_unknown">An unknown DRM error occurred</string>
+
+  <string name="error_no_decoder">This device does not provide a decoder for <xliff:g id="mime_type">%1$s</xliff:g></string>
+
+  <string name="error_no_secure_decoder">This device does not provide a secure decoder for <xliff:g id="mime_type">%1$s</xliff:g></string>
+
+  <string name="error_querying_decoders">Unable to query device decoders</string>
+
+  <string name="error_instantiating_decoder">Unable to instantiate decoder <xliff:g id="decoder_name">%1$s</xliff:g></string>
+
+  <string name="error_unsupported_video">Media includes video tracks, but none are playable by this device</string>
+
+  <string name="error_unsupported_audio">Media includes audio tracks, but none are playable by this device</string>
+
+  <string name="storage_permission_denied">Permission to access storage was denied</string>
+
+  <string name="sample_list_load_error">One or more sample lists failed to load</string>
+
+  <string name="ima_not_loaded">Playing sample without ads, as the IMA extension was not loaded</string>
+
+  <string name="download_start_error">Failed to start download</string>
+
+  <string name="download_playlist_unsupported">This demo app does not support downloading playlists</string>
+
+  <string name="download_drm_unsupported">This demo app does not support downloading protected content</string>
+
+  <string name="download_scheme_unsupported">This demo app only supports downloading http streams</string>
+
+  <string name="download_ads_unsupported">IMA does not support offline ads</string>
+
+</resources>
diff --git a/demos/manager/src/main/res/values/styles.xml b/demos/manager/src/main/res/values/styles.xml
new file mode 100644
index 0000000000..5616bb9869
--- /dev/null
+++ b/demos/manager/src/main/res/values/styles.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2016 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<resources xmlns:android="http://schemas.android.com/apk/res/android">
+
+  <style name="PlayerTheme" parent="android:Theme.Holo">
+    <item name="android:windowNoTitle">true</item>
+    <item name="android:windowBackground">@android:color/black</item>
+  </style>
+
+</resources>
diff --git a/library/all/build.gradle b/library/all/build.gradle
index bb832ba0ff..4a4d55a874 100644
--- a/library/all/build.gradle
+++ b/library/all/build.gradle
@@ -30,6 +30,7 @@ dependencies {
     api project(modulePrefix + 'library-hls')
     api project(modulePrefix + 'library-smoothstreaming')
     api project(modulePrefix + 'library-ui')
+    api project(modulePrefix + 'library-manager')
 }
 
 ext {
diff --git a/library/manager/build.gradle b/library/manager/build.gradle
new file mode 100644
index 0000000000..414bc429b4
--- /dev/null
+++ b/library/manager/build.gradle
@@ -0,0 +1,55 @@
+// Copyright (C) 2016 The Android Open Source Project
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+apply from: '../../constants.gradle'
+apply plugin: 'com.android.library'
+
+android {
+    compileSdkVersion project.ext.compileSdkVersion
+    buildToolsVersion project.ext.buildToolsVersion
+
+    defaultConfig {
+        minSdkVersion project.ext.minSdkVersion
+        targetSdkVersion project.ext.targetSdkVersion
+    }
+
+    buildTypes {
+        // Re-enable test coverage when the following issue is fixed:
+        // https://issuetracker.google.com/issues/37019591
+        // debug {
+        //    testCoverageEnabled = true
+        // }
+    }
+}
+
+dependencies {
+    api project(modulePrefix + 'library-core')
+    api project(modulePrefix + 'library-dash')
+    api project(modulePrefix + 'library-hls')
+    api project(modulePrefix + 'library-smoothstreaming')
+    api project(modulePrefix + 'library-ui')
+    implementation 'com.android.support:support-media-compat:' + supportLibraryVersion
+    implementation 'com.android.support:support-annotations:' + supportLibraryVersion
+    compileOnly 'org.checkerframework:checker-qual:' + checkerframeworkVersion
+}
+
+ext {
+    javadocTitle = 'Manager module'
+}
+apply from: '../../javadoc_library.gradle'
+
+ext {
+    releaseArtifact = 'exoplayer-manager'
+    releaseDescription = 'The ExoPlayer library Manager module.'
+}
+apply from: '../../publish.gradle'
diff --git a/library/manager/src/androidTest/java/com/dfbarone/android/exoplayer2/manager/ExampleInstrumentedTest.java b/library/manager/src/androidTest/java/com/dfbarone/android/exoplayer2/manager/ExampleInstrumentedTest.java
new file mode 100644
index 0000000000..7e6028ee55
--- /dev/null
+++ b/library/manager/src/androidTest/java/com/dfbarone/android/exoplayer2/manager/ExampleInstrumentedTest.java
@@ -0,0 +1,26 @@
+package com.dfbarone.android.exoplayer2.manager;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.junit.Assert.*;
+
+/**
+ * Instrumented test, which will execute on an Android device.
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+@RunWith(AndroidJUnit4.class)
+public class ExampleInstrumentedTest {
+  @Test
+  public void useAppContext() {
+    // Context of the app under test.
+    Context appContext = InstrumentationRegistry.getTargetContext();
+
+    assertEquals("com.dfbarone.android.exoplayer2.manager.test", appContext.getPackageName());
+  }
+}
diff --git a/library/manager/src/androidTest/java/com/dfbarone/exoplayermanager/ExampleInstrumentedTest.java b/library/manager/src/androidTest/java/com/dfbarone/exoplayermanager/ExampleInstrumentedTest.java
new file mode 100644
index 0000000000..0852666958
--- /dev/null
+++ b/library/manager/src/androidTest/java/com/dfbarone/exoplayermanager/ExampleInstrumentedTest.java
@@ -0,0 +1,26 @@
+package com.dfbarone.exoplayermanager;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.junit.Assert.*;
+
+/**
+ * Instrumented test, which will execute on an Android device.
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+@RunWith(AndroidJUnit4.class)
+public class ExampleInstrumentedTest {
+  @Test
+  public void useAppContext() {
+    // Context of the app under test.
+    Context appContext = InstrumentationRegistry.getTargetContext();
+
+    assertEquals("com.dfbarone.exoplayermanager", appContext.getPackageName());
+  }
+}
diff --git a/library/manager/src/main/AndroidManifest.xml b/library/manager/src/main/AndroidManifest.xml
new file mode 100644
index 0000000000..73e5cc73e8
--- /dev/null
+++ b/library/manager/src/main/AndroidManifest.xml
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2016 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<manifest package="com.dfbarone.android.exoplayer2.manager" />
diff --git a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/ExoPlayerManager.java b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/ExoPlayerManager.java
new file mode 100644
index 0000000000..17dd18daf7
--- /dev/null
+++ b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/ExoPlayerManager.java
@@ -0,0 +1,156 @@
+package com.dfbarone.android.exoplayer2.manager;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.View;
+
+import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.ExoPlaybackException;
+import com.google.android.exoplayer2.PlaybackPreparer;
+import com.google.android.exoplayer2.Player;
+import com.dfbarone.android.exoplayer2.manager.util.PlayerUtils;
+import com.google.android.exoplayer2.source.TrackGroupArray;
+import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;
+import com.google.android.exoplayer2.trackselection.MappingTrackSelector;
+import com.google.android.exoplayer2.trackselection.TrackSelectionArray;
+import com.google.android.exoplayer2.ui.PlayerControlView;
+
+/**
+ * This class attempts to abstract basic state and non ui functionality.
+ */
+public abstract class ExoPlayerManager extends PlayerManager
+    implements PlaybackPreparer, PlayerControlView.VisibilityListener {
+
+  // Saved instance state keys.
+  public static final String KEY_TRACK_SELECTOR_PARAMETERS = "track_selector_parameters";
+  public static final String KEY_WINDOW = "window";
+  public static final String KEY_POSITION = "position";
+  public static final String KEY_AUTO_PLAY = "auto_play";
+
+  // State variables
+  protected boolean startAutoPlay = false;
+  protected int startWindow = C.INDEX_UNSET;
+  protected long startPosition = C.TIME_UNSET;
+  private boolean mDebug = false;
+
+  // Track selector
+  protected DefaultTrackSelector trackSelector;
+  protected DefaultTrackSelector.Parameters trackSelectorParameters;
+  protected TrackGroupArray lastSeenTrackGroupArray;
+
+  public ExoPlayerManager(Context context, View root) {
+    super(context, root);
+  }
+
+  public void setDebug(boolean debug) {
+    mDebug = debug;
+  }
+
+  public boolean debug() {
+    return mDebug;
+  }
+
+  // Lifecycle methods
+  public void onNewIntent(Intent intent) {
+    releasePlayer();
+    clearStartPosition();
+    setIntent(intent);
+  }
+
+  public void onSaveInstanceState(Bundle outState) {
+    updateTrackSelectorParameters();
+    updateStartPosition();
+    outState.putParcelable(KEY_TRACK_SELECTOR_PARAMETERS, trackSelectorParameters);
+    outState.putBoolean(KEY_AUTO_PLAY, startAutoPlay);
+    outState.putInt(KEY_WINDOW, startWindow);
+    outState.putLong(KEY_POSITION, startPosition);
+  }
+
+  public void onRestoreInstanceState(Bundle savedInstanceState) {
+    // Restore instance state
+    if (savedInstanceState != null) {
+      trackSelectorParameters = savedInstanceState.getParcelable(KEY_TRACK_SELECTOR_PARAMETERS);
+      startAutoPlay = savedInstanceState.getBoolean(KEY_AUTO_PLAY);
+      startWindow = savedInstanceState.getInt(KEY_WINDOW);
+      startPosition = savedInstanceState.getLong(KEY_POSITION);
+    } else {
+      trackSelectorParameters = new DefaultTrackSelector.ParametersBuilder().build();
+      clearStartPosition();
+    }
+  }
+
+  // State methods
+  protected void updateStartPosition() {
+    if (getPlayer() != null) {
+      startAutoPlay = getPlayer().getPlayWhenReady();
+      startWindow = getPlayer().getCurrentWindowIndex();
+      startPosition = Math.max(0, getPlayer().getContentPosition());
+    }
+  }
+
+  protected void clearStartPosition() {
+    startAutoPlay = true;
+    startWindow = C.INDEX_UNSET;
+    startPosition = C.TIME_UNSET;
+  }
+
+  protected void updateTrackSelectorParameters() {
+    if (trackSelector != null) {
+      trackSelectorParameters = trackSelector.getParameters();
+    }
+  }
+
+  // UI methods
+  protected abstract void updateButtonVisibilities();
+
+  protected abstract void showControls();
+
+  // PlaybackControlView.PlaybackPreparer implementation
+  @Override
+  public void preparePlayback() {
+    initializePlayer();
+  }
+
+  // PlayerControlView.VisibilityListener implementation
+  @Override
+  public abstract void onVisibilityChange(int visibility);
+
+  // Player.DefaultEventListener
+  @Override
+  public void onPlayerStateChanged(boolean playWhenReady, int playbackState) {
+    if (playbackState == Player.STATE_ENDED) {
+      showControls();
+    }
+    updateButtonVisibilities();
+  }
+
+  @Override
+  public void onPositionDiscontinuity(@Player.DiscontinuityReason int reason) {
+    if (getPlayer().getPlaybackError() != null) {
+      // The user has performed a seek whilst in the error state. Update the resume position so
+      // that if the user then retries, playback resumes from the position to which they seeked.
+      updateStartPosition();
+    }
+  }
+
+  @Override
+  public void onPlayerError(ExoPlaybackException e) {
+    if (PlayerUtils.isBehindLiveWindow(e)) {
+      clearStartPosition();
+      initializePlayer();
+    } else {
+      updateStartPosition();
+      updateButtonVisibilities();
+      showControls();
+    }
+    onError("onPlayerError", e);
+  }
+
+    @Override
+    @SuppressWarnings("ReferenceEquality")
+    public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray trackSelections) {
+        updateButtonVisibilities();
+    }
+
+}
diff --git a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/PlayerManager.java b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/PlayerManager.java
new file mode 100644
index 0000000000..b515c80c54
--- /dev/null
+++ b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/PlayerManager.java
@@ -0,0 +1,226 @@
+package com.dfbarone.android.exoplayer2.manager;
+
+import android.content.Context;
+import android.content.Intent;
+import android.net.Uri;
+import android.support.annotation.Nullable;
+import android.view.View;
+
+import com.google.android.exoplayer2.LoadControl;
+import com.google.android.exoplayer2.Player;
+import com.google.android.exoplayer2.drm.DefaultDrmSessionManager;
+import com.google.android.exoplayer2.drm.FrameworkMediaCrypto;
+import com.google.android.exoplayer2.drm.UnsupportedDrmException;
+import com.google.android.exoplayer2.source.MediaSource;
+import com.google.android.exoplayer2.upstream.DataSource;
+import com.google.android.exoplayer2.upstream.HttpDataSource;
+import com.google.android.exoplayer2.upstream.TransferListener;
+import com.google.android.exoplayer2.util.ErrorMessageProvider;
+
+/**
+ * Created by dfbarone on 5/17/2018.
+ * <p>
+ * A class to enforce common and hopefully useful ExoPlayer methods.
+ * This class attempts to avoid ui or state methods.
+ */
+public abstract class PlayerManager extends Player.DefaultEventListener {
+
+  // Injected interfaces
+  private EventListener eventListener;
+  private PlayerDependencies dependencies;
+
+  // Context and root View of player
+  private final Context mContext;
+  private final View itemView;
+
+  // Optional place to store playback information here
+  private Intent mIntent = new Intent();
+
+  /** Default constructor*/
+  protected PlayerManager(Context context, View itemView) {
+    if (context == null) {
+      throw new IllegalArgumentException("context may not be null");
+    }
+    this.mContext = context;
+    this.itemView = itemView;
+  }
+
+  /** Common player methods*/
+  protected abstract <T extends Player> T getPlayer();
+
+  protected abstract void initializePlayer();
+
+  protected abstract void releasePlayer();
+
+  protected abstract void releaseAdsLoader();
+
+  /** Getters/Setters*/
+  public Context getContext() {
+    return mContext;
+  }
+
+  public View getView() {
+    return itemView;
+  }
+
+  // Intent methods
+  public Intent getIntent() {
+    return mIntent;
+  }
+
+  public void setIntent(Intent intent) {
+    mIntent = intent;
+  }
+
+  // Listener for internal need to finish
+  public void setEventListener(EventListener listener) {
+    eventListener = listener;
+  }
+
+  // Event listener methods
+  protected void onError(String message) {
+    if (eventListener != null) {
+      eventListener.onError(message, null);
+    }
+  }
+
+  protected void onError(String message, Exception e) {
+    if (eventListener != null) {
+      eventListener.onError(message, e);
+    }
+  }
+
+  protected void finish() {
+    if (eventListener != null) {
+      eventListener.onFinish();
+    }
+  }
+
+  public <T extends PlayerDependencies> T playerDependencies() {
+    return (T)dependencies;
+  }
+
+  public void setPlayerDependencies(PlayerDependencies dependencies) {
+    this.dependencies = dependencies;
+  }
+
+  /**
+   *  PlayerManager Dependencies
+   */
+  public interface EventListener {
+
+    /** Initialization errors for output
+     * @param message non player related error
+     * @param e       ExoPlayerException, if valid will be a player related error
+     */
+    void onError(String message, Exception e);
+
+    /**
+     * User attempt to close player
+     */
+    void onFinish();
+  }
+
+  /** MediaSource builder methods*/
+  public interface MediaSourceBuilder {
+    MediaSource buildMediaSource(Uri uri);
+
+    MediaSource buildMediaSource(Uri uri, @Nullable String overrideExtension);
+  }
+
+  /** DataSource.Factory builder methods*/
+  public interface DataSourceBuilder {
+    /*** Returns a {@link DataSource.Factory}.*/
+    DataSource.Factory buildDataSourceFactory(boolean useBandwidthMeter);
+
+    /*** Returns a {@link HttpDataSource.Factory}.*/
+    HttpDataSource.Factory buildHttpDataSourceFactory(
+        TransferListener<? super DataSource> listener);
+  }
+
+  /** Drm builder methods*/
+  public interface DrmSessionManagerBuilder {
+    DefaultDrmSessionManager<FrameworkMediaCrypto> buildDrmSessionManager() throws UnsupportedDrmException;
+  }
+
+  /** Ads builder methods*/
+  public interface AdsMediaSourceBuilder {
+    MediaSource createAdsMediaSource(MediaSource mediaSource, Uri adTagUri);
+
+    void releaseAdsLoader();
+  }
+
+  /** Main initializer builder class*/
+  public static class PlayerDependencies<T extends PlayerDependencies.Builder<T>> {
+
+    private DataSourceBuilder dataSourceBuilder;
+    private MediaSourceBuilder mediaSourceBuilder;
+    private DrmSessionManagerBuilder drmSessionManagerBuilder;
+    private AdsMediaSourceBuilder adsMediaSourceBuilder;
+
+    public PlayerDependencies(Builder<T> builder) {
+      this.dataSourceBuilder = builder.dataSourceBuilder;
+      this.mediaSourceBuilder = builder.mediaSourceBuilder;
+      this.drmSessionManagerBuilder = builder.drmSessionManagerBuilder;
+      this.adsMediaSourceBuilder = builder.adsMediaSourceBuilder;
+    }
+
+    /*** Required dependency*/
+    public DataSourceBuilder dataSourceBuilder() {
+      return dataSourceBuilder;
+    }
+
+    /*** Required dependency*/
+    public MediaSourceBuilder mediaSourceBuilder() {
+      return mediaSourceBuilder;
+    }
+
+    /*** Optional dependency*/
+    public DrmSessionManagerBuilder drmSessionManagerBuilder() {
+      return drmSessionManagerBuilder;
+    }
+
+    /*** Optional dependency*/
+    public AdsMediaSourceBuilder adsMediaSourceBuilder() {
+      return adsMediaSourceBuilder;
+    }
+
+    public static class Builder<T extends Builder<T>> {
+
+      private DataSourceBuilder dataSourceBuilder;
+      private MediaSourceBuilder mediaSourceBuilder;
+      private DrmSessionManagerBuilder drmSessionManagerBuilder;
+      private AdsMediaSourceBuilder adsMediaSourceBuilder;
+
+      public Builder(DataSourceBuilder dataSourceBuilder, MediaSourceBuilder mediaSourceBuilder) {
+        setDataSourceBuilder(dataSourceBuilder);
+        setMediaSourceBuilder(mediaSourceBuilder);
+      }
+
+      public T setDataSourceBuilder(DataSourceBuilder dataSourceBuilder) {
+        this.dataSourceBuilder = dataSourceBuilder;
+        return (T)this;
+      }
+
+      public T setMediaSourceBuilder(MediaSourceBuilder mediaSourceBuilder) {
+        this.mediaSourceBuilder = mediaSourceBuilder;
+        return (T)this;
+      }
+
+      public T setDrmSessionManagerBuilder(DrmSessionManagerBuilder drmSessionManagerBuilder) {
+        this.drmSessionManagerBuilder = drmSessionManagerBuilder;
+        return (T)this;
+      }
+
+      public T setAdsMediaSourceBuilder(AdsMediaSourceBuilder adsMediaSourceBuilder) {
+        this.adsMediaSourceBuilder = adsMediaSourceBuilder;
+        return (T)this;
+      }
+
+      public PlayerDependencies<T> build() {
+        return new PlayerDependencies<>(this);
+      }
+    }
+  }
+
+}
diff --git a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/SimpleExoPlayerManager.java b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/SimpleExoPlayerManager.java
new file mode 100644
index 0000000000..7853ff9d13
--- /dev/null
+++ b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/SimpleExoPlayerManager.java
@@ -0,0 +1,523 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.dfbarone.android.exoplayer2.manager;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.Intent;
+import android.net.Uri;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.util.Pair;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.widget.Button;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.DefaultLoadControl;
+import com.google.android.exoplayer2.DefaultRenderersFactory;
+import com.google.android.exoplayer2.ExoPlaybackException;
+import com.google.android.exoplayer2.ExoPlayerFactory;
+import com.google.android.exoplayer2.LoadControl;
+import com.google.android.exoplayer2.SimpleExoPlayer;
+import com.google.android.exoplayer2.drm.DefaultDrmSessionManager;
+import com.google.android.exoplayer2.drm.FrameworkMediaCrypto;
+import com.google.android.exoplayer2.drm.UnsupportedDrmException;
+import com.dfbarone.android.exoplayer2.manager.util.ContextHelper;
+import com.dfbarone.android.exoplayer2.manager.util.PlayerUtils;
+import com.google.android.exoplayer2.source.ConcatenatingMediaSource;
+import com.google.android.exoplayer2.source.MediaSource;
+import com.google.android.exoplayer2.source.TrackGroupArray;
+import com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection;
+import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;
+import com.google.android.exoplayer2.trackselection.MappingTrackSelector;
+import com.google.android.exoplayer2.trackselection.MappingTrackSelector.MappedTrackInfo;
+import com.google.android.exoplayer2.trackselection.RandomTrackSelection;
+import com.google.android.exoplayer2.trackselection.TrackSelection;
+import com.google.android.exoplayer2.trackselection.TrackSelectionArray;
+import com.google.android.exoplayer2.ui.DebugTextViewHelper;
+import com.google.android.exoplayer2.ui.PlayerView;
+import com.google.android.exoplayer2.ui.TrackSelectionView;
+import com.google.android.exoplayer2.upstream.DataSource;
+import com.google.android.exoplayer2.upstream.DefaultBandwidthMeter;
+import com.google.android.exoplayer2.upstream.DefaultDataSourceFactory;
+import com.google.android.exoplayer2.upstream.DefaultHttpDataSourceFactory;
+import com.google.android.exoplayer2.upstream.HttpDataSource;
+import com.google.android.exoplayer2.upstream.TransferListener;
+import com.google.android.exoplayer2.util.ErrorMessageProvider;
+import com.google.android.exoplayer2.util.EventLogger;
+import com.google.android.exoplayer2.util.Util;
+import com.dfbarone.android.exoplayer2.manager.R;
+
+import java.net.CookieHandler;
+import java.net.CookieManager;
+import java.net.CookiePolicy;
+
+/**
+ * An class that plays media using {@link SimpleExoPlayer}.
+ */
+public class SimpleExoPlayerManager extends ExoPlayerManager
+    implements OnClickListener {
+
+  public static final String ACTION_VIEW = "com.dfbarone.android.exoplayer2.manager.action.VIEW";
+  public static final String ACTION_VIEW_CUSTOM = "com.dfbarone.android.exoplayer2.manager.action.VIEW_CUSTOM";
+  public static final String URI_EXTRA = "uri";
+  public static final String EXTENSION_EXTRA = "extension";
+
+  public static final String ACTION_VIEW_LIST = "com.dfbarone.android.exoplayer2.manager.action.VIEW_LIST";
+  public static final String ACTION_VIEW_LIST_CUSTOM = "com.dfbarone.android.exoplayer2.manager.action.VIEW_LIST_CUSTOM";
+  public static final String URI_LIST_EXTRA = "uri_list";
+  public static final String EXTENSION_LIST_EXTRA = "extension_list";
+
+  public static final String DRM_SCHEME_EXTRA = "drm_scheme";
+
+  public static final String PREFER_EXTENSION_DECODERS_EXTRA = "prefer_extension_decoders";
+
+  public static final String ABR_ALGORITHM_EXTRA = "abr_algorithm";
+  public static final String ABR_ALGORITHM_DEFAULT = "default";
+  public static final String ABR_ALGORITHM_RANDOM = "random";
+
+  public static final String AD_TAG_URI_EXTRA = "ad_tag_uri";
+
+  // ui
+  protected PlayerView playerView;
+  protected LinearLayout debugRootView;
+  protected TextView debugTextView;
+
+  // core
+  protected SimpleExoPlayer player;
+  protected MediaSource mediaSource;
+  protected DebugTextViewHelper debugViewHelper;
+
+  // Fields used only for ad playback. The ads loader is loaded via reflection.
+  protected Uri loadedAdTagUri;
+
+  // HTTP and DataSource variables
+  protected final static String USER_AGENT = SimpleExoPlayerManager.class.getSimpleName();
+  protected static final DefaultBandwidthMeter BANDWIDTH_METER = new DefaultBandwidthMeter();
+  protected static final CookieManager DEFAULT_COOKIE_MANAGER;
+  protected DataSource.Factory mediaDataSourceFactory;
+
+  static {
+    DEFAULT_COOKIE_MANAGER = new CookieManager();
+    DEFAULT_COOKIE_MANAGER.setCookiePolicy(CookiePolicy.ACCEPT_ORIGINAL_SERVER);
+  }
+
+  public SimpleExoPlayerManager(Context context, View view) {
+    super(context, view);
+
+    if (CookieHandler.getDefault() != DEFAULT_COOKIE_MANAGER) {
+      CookieHandler.setDefault(DEFAULT_COOKIE_MANAGER);
+    }
+
+    setPlayerDependencies(new CustomPlayerDependencies.Builder(new DefaultDataSourceBuilder(),
+            new DefaultMediaSourceBuilder()).build());
+
+    if (getView() != null) {
+      // Find views
+      playerView = getView().findViewById(R.id.player_view);
+      if (playerView == null) {
+        throw new IllegalStateException("Your view must contain a PlayerView with an id of R.id.player_view");
+      }
+      debugRootView = getView().findViewById(R.id.controls_root);
+      debugTextView = getView().findViewById(R.id.debug_text_view);
+
+      setDebugTextVisibility(View.VISIBLE);
+      setDebugRootVisibility(View.GONE);
+
+      // Initialize player view
+      playerView.setControllerVisibilityListener(this);
+      playerView.requestFocus();
+
+      // Set root on click listener
+      getView().setOnClickListener(this);
+    }
+
+    // Restore instance state
+    onRestoreInstanceState(null);
+  }
+
+  @Override
+  public SimpleExoPlayer getPlayer() {
+    return player;
+  }
+
+  @Override
+  public void setPlayerDependencies(PlayerDependencies dependencies) {
+    super.setPlayerDependencies(dependencies);
+    mediaDataSourceFactory = dependencies.dataSourceBuilder().buildDataSourceFactory(true);
+  }
+
+  // Activity lifecycle
+  public boolean dispatchKeyEvent(KeyEvent event) {
+    // See whether the player view wants to handle media or DPAD keys events.
+    return (playerView != null && playerView.dispatchKeyEvent(event)) ||
+        (getView() != null && getView().dispatchKeyEvent(event));
+  }
+
+  // OnClickListener methods
+  @Override
+  public void onClick(View view) {
+    if (debugRootView != null &&
+        view.getParent() == debugRootView) {
+      MappedTrackInfo mappedTrackInfo = trackSelector.getCurrentMappedTrackInfo();
+      if (mappedTrackInfo != null) {
+        CharSequence title = ((Button) view).getText();
+        int rendererIndex = (int) view.getTag();
+        int rendererType = mappedTrackInfo.getRendererType(rendererIndex);
+        boolean allowAdaptiveSelections =
+            rendererType == C.TRACK_TYPE_VIDEO
+                || (rendererType == C.TRACK_TYPE_AUDIO
+                && mappedTrackInfo.getTypeSupport(C.TRACK_TYPE_VIDEO)
+                == MappedTrackInfo.RENDERER_SUPPORT_NO_TRACKS);
+        Pair<AlertDialog, TrackSelectionView> dialogPair =
+            TrackSelectionView.getDialog(ContextHelper.getActivity(getContext()), title, trackSelector, rendererIndex);
+        dialogPair.second.setShowDisableOption(true);
+        dialogPair.second.setAllowAdaptiveSelections(allowAdaptiveSelections);
+        dialogPair.first.show();
+      }
+    }
+  }
+
+  // PlaybackControlView.VisibilityListener implementation
+  @Override
+  public void onVisibilityChange(int visibility) {
+    setDebugTextVisibility(View.VISIBLE);
+    setDebugRootVisibility(visibility);
+  }
+
+  // Internal methods
+  @Override
+  public void initializePlayer() {
+    if (player == null) {
+      Intent intent = getIntent();
+
+      // initialize arguments
+      String action = intent.getAction();
+      Uri[] uris;
+      String[] extensions;
+      if (ACTION_VIEW.equals(action)) {
+        uris = new Uri[]{intent.getData()};
+        extensions = new String[]{intent.getStringExtra(EXTENSION_EXTRA)};
+      } else if (ACTION_VIEW_LIST.equals(action)) {
+        String[] uriStrings = intent.getStringArrayExtra(URI_LIST_EXTRA);
+        uris = new Uri[uriStrings.length];
+        for (int i = 0; i < uriStrings.length; i++) {
+          uris[i] = Uri.parse(uriStrings[i]);
+        }
+        extensions = intent.getStringArrayExtra(EXTENSION_LIST_EXTRA);
+        if (extensions == null) {
+          extensions = new String[uriStrings.length];
+        }
+      } else {
+        onError(getContext().getString(R.string.unexpected_intent_action, action), new IllegalStateException(getContext().getString(R.string.unexpected_intent_action, action)));
+        //finish(getContext().getString(R.string.unexpected_intent_action, action));
+        return;
+      }
+
+      // initialize drm
+      DefaultDrmSessionManager<FrameworkMediaCrypto> drmSessionManager = null;
+      if ((intent.hasExtra(DRM_SCHEME_EXTRA) &&
+          !TextUtils.isEmpty(intent.getStringExtra(DRM_SCHEME_EXTRA)))) {
+        int errorStringId = R.string.error_drm_unknown;
+        if (Util.SDK_INT < 18) {
+          errorStringId = R.string.error_drm_not_supported;
+        } else {
+          try {
+            drmSessionManager = playerDependencies().drmSessionManagerBuilder().buildDrmSessionManager();
+          } catch (UnsupportedDrmException e) {
+            errorStringId = e.reason == UnsupportedDrmException.REASON_UNSUPPORTED_SCHEME
+                ? R.string.error_drm_unsupported_scheme : R.string.error_drm_unknown;
+          } catch (Exception e) {
+
+          }
+        }
+        if (drmSessionManager == null) {
+          onError(getContext().getString(errorStringId), new IllegalStateException(getContext().getString(errorStringId)));
+          //finish(getContext().getString(errorStringId));
+          return;
+        }
+      }
+
+      // initialize track selection
+      TrackSelection.Factory trackSelectionFactory;
+      String abrAlgorithm = intent.getStringExtra(ABR_ALGORITHM_EXTRA);
+      if (abrAlgorithm == null || ABR_ALGORITHM_DEFAULT.equals(abrAlgorithm)) {
+        trackSelectionFactory = new AdaptiveTrackSelection.Factory(BANDWIDTH_METER);
+      } else if (ABR_ALGORITHM_RANDOM.equals(abrAlgorithm)) {
+        trackSelectionFactory = new RandomTrackSelection.Factory();
+      } else {
+        onError(getContext().getString(R.string.error_unrecognized_abr_algorithm), new IllegalStateException(getContext().getString(R.string.error_unrecognized_abr_algorithm)));
+        //finish(getContext().getString(R.string.error_unrecognized_abr_algorithm));
+        return;
+      }
+
+      @DefaultRenderersFactory.ExtensionRendererMode int extensionRendererMode = DefaultRenderersFactory.EXTENSION_RENDERER_MODE_OFF;
+      if (intent.hasExtra(PREFER_EXTENSION_DECODERS_EXTRA)) {
+        boolean preferExtensionDecoders = intent.getBooleanExtra(PREFER_EXTENSION_DECODERS_EXTRA, false);
+        extensionRendererMode = preferExtensionDecoders ? DefaultRenderersFactory.EXTENSION_RENDERER_MODE_PREFER : DefaultRenderersFactory.EXTENSION_RENDERER_MODE_ON;
+      }
+
+      DefaultRenderersFactory renderersFactory = new DefaultRenderersFactory(getContext(), extensionRendererMode);
+
+      trackSelector = new DefaultTrackSelector(trackSelectionFactory);
+      trackSelector.setParameters(trackSelectorParameters);
+      lastSeenTrackGroupArray = null;
+
+      player = ExoPlayerFactory.newSimpleInstance(renderersFactory, trackSelector, getLoadControl(), drmSessionManager);
+      player.addListener(this);
+      player.setPlayWhenReady(startAutoPlay);
+      player.addAnalyticsListener(new EventLogger(trackSelector));
+      if (playerView != null) {
+        if (playerDependencies() instanceof CustomPlayerDependencies && ((CustomPlayerDependencies)playerDependencies()).errorMessageProvider() != null) {
+          playerView.setErrorMessageProvider(((CustomPlayerDependencies)playerDependencies()).errorMessageProvider());
+        }
+        playerView.setPlayer(player);
+        playerView.setPlaybackPreparer(this);
+      }
+      if (debugTextView != null) {
+        debugViewHelper = new DebugTextViewHelper(player, debugTextView);
+        debugViewHelper.start();
+      }
+
+      MediaSource[] mediaSources = new MediaSource[uris.length];
+      for (int i = 0; i < uris.length; i++) {
+        mediaSources[i] = playerDependencies().mediaSourceBuilder().buildMediaSource(uris[i], extensions[i]);
+      }
+      mediaSource =
+          mediaSources.length == 1 ? mediaSources[0] : new ConcatenatingMediaSource(mediaSources);
+
+      // initialize AdsLoader
+      String adTagUriString = intent.getStringExtra(AD_TAG_URI_EXTRA);
+      if (adTagUriString != null && playerDependencies().adsMediaSourceBuilder() != null) {
+        Uri adTagUri = Uri.parse(adTagUriString);
+        if (!adTagUri.equals(loadedAdTagUri)) {
+          releaseAdsLoader();
+          loadedAdTagUri = adTagUri;
+        }
+        MediaSource adsMediaSource = playerDependencies().adsMediaSourceBuilder().createAdsMediaSource(mediaSource, Uri.parse(adTagUriString));
+        if (adsMediaSource != null) {
+          mediaSource = adsMediaSource;
+        } else {
+          onError(getContext().getString(R.string.ima_not_loaded), new IllegalStateException(getContext().getString(R.string.ima_not_loaded)));
+        }
+      } else {
+        releaseAdsLoader();
+      }
+    }
+    boolean haveStartPosition = startWindow != C.INDEX_UNSET;
+    if (haveStartPosition) {
+      player.seekTo(startWindow, startPosition);
+    }
+    player.prepare(mediaSource, !haveStartPosition, false);
+    updateButtonVisibilities();
+  }
+
+  @Override
+  public void releasePlayer() {
+    if (player != null) {
+      updateTrackSelectorParameters();
+      updateStartPosition();
+      if (debugViewHelper != null) {
+        debugViewHelper.stop();
+      }
+      debugViewHelper = null;
+      player.release();
+      player = null;
+      mediaSource = null;
+      trackSelector = null;
+    }
+  }
+
+  @Override
+  public void releaseAdsLoader() {
+    loadedAdTagUri = null;
+    if (playerDependencies().adsMediaSourceBuilder() != null) {
+      playerDependencies().adsMediaSourceBuilder().releaseAdsLoader();
+    }
+  }
+
+  // User controls
+  @Override
+  protected void updateButtonVisibilities() {
+    if (debugRootView != null) {
+      debugRootView.removeAllViews();
+    }
+
+    if (player == null) {
+      return;
+    }
+
+    MappedTrackInfo mappedTrackInfo = trackSelector.getCurrentMappedTrackInfo();
+    if (mappedTrackInfo == null) {
+      return;
+    }
+
+    for (int i = 0; i < mappedTrackInfo.getRendererCount(); i++) {
+      TrackGroupArray trackGroups = mappedTrackInfo.getTrackGroups(i);
+      if (trackGroups.length != 0) {
+        Button button = new Button(getContext());
+        int label;
+        switch (player.getRendererType(i)) {
+          case C.TRACK_TYPE_AUDIO:
+            label = R.string.exo_track_selection_title_audio;
+            break;
+          case C.TRACK_TYPE_VIDEO:
+            label = R.string.exo_track_selection_title_video;
+            break;
+          case C.TRACK_TYPE_TEXT:
+            label = R.string.exo_track_selection_title_text;
+            break;
+          default:
+            continue;
+        }
+        button.setText(label);
+        button.setTag(i);
+        button.setOnClickListener(this);
+        if (debugRootView != null) {
+          debugRootView.addView(button);
+        }
+      }
+    }
+  }
+
+  @Override
+  protected void showControls() {
+    setDebugRootVisibility(View.VISIBLE);
+  }
+
+  private void setDebugRootVisibility(int visibility) {
+    PlayerUtils.setDebugVisibility(debugRootView, debug(), visibility);
+  }
+
+  private void setDebugTextVisibility(int visibility) {
+    PlayerUtils.setDebugVisibility(debugTextView, debug(), visibility);
+  }
+
+  // Player.DefaultEventListener
+  @Override
+  @SuppressWarnings("ReferenceEquality")
+  public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray trackSelections) {
+    super.onTracksChanged(trackGroups, trackSelections);
+    if (trackGroups != lastSeenTrackGroupArray) {
+      MappingTrackSelector.MappedTrackInfo mappedTrackInfo = trackSelector.getCurrentMappedTrackInfo();
+      if (mappedTrackInfo != null) {
+        if (mappedTrackInfo.getTypeSupport(C.TRACK_TYPE_VIDEO)
+            == MappingTrackSelector.MappedTrackInfo.RENDERER_SUPPORT_UNSUPPORTED_TRACKS) {
+          onError(getContext().getString(R.string.error_unsupported_video));
+        }
+        if (mappedTrackInfo.getTypeSupport(C.TRACK_TYPE_AUDIO)
+            == MappingTrackSelector.MappedTrackInfo.RENDERER_SUPPORT_UNSUPPORTED_TRACKS) {
+          onError(getContext().getString(R.string.error_unsupported_audio));
+        }
+      }
+      lastSeenTrackGroupArray = trackGroups;
+    }
+  }
+
+  public LoadControl getLoadControl() {
+    if (playerDependencies() instanceof CustomPlayerDependencies &&
+            ((CustomPlayerDependencies)playerDependencies()).loadControl() != null) {
+      return ((CustomPlayerDependencies)playerDependencies()).loadControl();
+    } else {
+      return new DefaultLoadControl();
+    }
+  }
+
+  public class DefaultDataSourceBuilder implements DataSourceBuilder {
+    /*** Returns a new DataSource factory.*/
+    @Override
+    public DataSource.Factory buildDataSourceFactory(boolean useBandwidthMeter) {
+      // Optional
+      TransferListener<? super DataSource> listener = useBandwidthMeter ? BANDWIDTH_METER : null;
+      DefaultDataSourceFactory upstreamFactory =
+          new DefaultDataSourceFactory(getContext(), listener, buildHttpDataSourceFactory(listener));
+      return upstreamFactory;
+    }
+
+    /*** Returns a {@link HttpDataSource.Factory}.*/
+    @Override
+    public HttpDataSource.Factory buildHttpDataSourceFactory(
+        TransferListener<? super DataSource> listener) {
+      return new DefaultHttpDataSourceFactory(Util.getUserAgent(getContext(), USER_AGENT), listener);
+    }
+  }
+
+  public class DefaultMediaSourceBuilder implements MediaSourceBuilder {
+    @Override
+    public MediaSource buildMediaSource(Uri uri) {
+      return buildMediaSource(uri, null);
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public MediaSource buildMediaSource(Uri uri, @Nullable String overrideExtension) {
+      return PlayerUtils.buildSimpleMediaSource(
+          playerDependencies().dataSourceBuilder().buildDataSourceFactory(false),
+          mediaDataSourceFactory, uri, overrideExtension);
+    }
+  }
+
+  // Extend base initializePlayer() method dependency builder
+  public static class CustomPlayerDependencies<B extends CustomPlayerDependencies.Builder<B>> extends PlayerDependencies<B> {
+
+    private LoadControl loadControl;
+    private ErrorMessageProvider errorMessageProvider;
+
+    public CustomPlayerDependencies(Builder<B> builder) {
+      super(builder);
+      this.loadControl = builder.loadControl;
+      this.errorMessageProvider = builder.errorMessageProvider;
+    }
+
+    public LoadControl loadControl() {
+      return loadControl;
+    }
+
+    public ErrorMessageProvider errorMessageProvider() {
+      return errorMessageProvider;
+    }
+
+    public static class Builder<T extends Builder<T>> extends PlayerDependencies.Builder<T> {
+
+      private LoadControl loadControl;
+      private ErrorMessageProvider<ExoPlaybackException> errorMessageProvider;
+
+      public Builder(DataSourceBuilder dataSourceBuilder, MediaSourceBuilder mediaSourceBuilder) {
+        super(dataSourceBuilder, mediaSourceBuilder);
+      }
+
+      public T setLoadControl(LoadControl loadControl) {
+        this.loadControl = loadControl;
+        return (T)this;
+      }
+
+      public T setErrorMessageProvider(ErrorMessageProvider<ExoPlaybackException> errorMessageProvider) {
+        this.errorMessageProvider = errorMessageProvider;
+        return (T)this;
+      }
+
+      public CustomPlayerDependencies build() {
+        return new CustomPlayerDependencies(this);
+      }
+    }
+
+  }
+
+}
diff --git a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/util/ContextHelper.java b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/util/ContextHelper.java
new file mode 100644
index 0000000000..a216f23055
--- /dev/null
+++ b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/util/ContextHelper.java
@@ -0,0 +1,34 @@
+package com.dfbarone.android.exoplayer2.manager.util;
+
+import android.app.Activity;
+import android.app.Application;
+import android.app.Service;
+import android.content.Context;
+
+public final class ContextHelper {
+  public static boolean isActivity(Context context) {
+    return context instanceof Activity;
+  }
+
+  public static boolean isService(Context context) {
+    return context instanceof Service;
+  }
+
+  public static Activity getActivity(Context context) {
+    if (isActivity(context)) {
+      return ((Activity) context);
+    }
+    throw new RuntimeException("Context is not instanceof " + Activity.class.getSimpleName());
+  }
+
+  public static Service getService(Context context) {
+    if (isService(context)) {
+      return ((Service) context);
+    }
+    throw new RuntimeException("Context is not instanceof " + Service.class.getSimpleName());
+  }
+
+  public static Application getApplication(Context context) {
+    return isActivity(context) ? getActivity(context).getApplication() : getService(context).getApplication();
+  }
+}
diff --git a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/util/PlayerUtils.java b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/util/PlayerUtils.java
new file mode 100644
index 0000000000..742c8ff911
--- /dev/null
+++ b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/util/PlayerUtils.java
@@ -0,0 +1,87 @@
+package com.dfbarone.android.exoplayer2.manager.util;
+
+import android.net.Uri;
+import android.support.annotation.Nullable;
+import android.view.View;
+
+import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.ExoPlaybackException;
+import com.google.android.exoplayer2.source.BehindLiveWindowException;
+import com.google.android.exoplayer2.source.ExtractorMediaSource;
+import com.google.android.exoplayer2.source.MediaSource;
+import com.google.android.exoplayer2.source.dash.DashMediaSource;
+import com.google.android.exoplayer2.source.dash.DefaultDashChunkSource;
+import com.google.android.exoplayer2.source.hls.HlsMediaSource;
+import com.google.android.exoplayer2.source.smoothstreaming.DefaultSsChunkSource;
+import com.google.android.exoplayer2.source.smoothstreaming.SsMediaSource;
+import com.google.android.exoplayer2.upstream.DataSource;
+import com.google.android.exoplayer2.util.Util;
+
+import java.net.UnknownHostException;
+
+public class PlayerUtils {
+
+  public static boolean isBehindLiveWindow(ExoPlaybackException e) {
+    if (e.type != ExoPlaybackException.TYPE_SOURCE) {
+      return false;
+    }
+    Throwable cause = e.getSourceException();
+    while (cause != null) {
+      if (cause instanceof BehindLiveWindowException) {
+        return true;
+      }
+      cause = cause.getCause();
+    }
+    return false;
+  }
+
+  public static boolean isUnknownHost(ExoPlaybackException e) {
+    if (e.type != ExoPlaybackException.TYPE_SOURCE) {
+      return false;
+    }
+    Throwable cause = e.getSourceException();
+    while (cause != null) {
+      if (cause instanceof UnknownHostException) {
+        return true;
+      }
+      cause = cause.getCause();
+    }
+    return false;
+  }
+
+  public static MediaSource buildSimpleMediaSource(DataSource.Factory mediaDataSourceFactory,
+                                                   DataSource.Factory dataSourceFactory,
+                                                   Uri uri, @Nullable String overrideExtension) {
+    @C.ContentType int type = Util.inferContentType(uri, overrideExtension);
+    switch (type) {
+      case C.TYPE_DASH:
+        return new DashMediaSource.Factory(
+            new DefaultDashChunkSource.Factory(mediaDataSourceFactory), dataSourceFactory)
+            .createMediaSource(uri);
+      case C.TYPE_SS:
+        return new SsMediaSource.Factory(
+            new DefaultSsChunkSource.Factory(mediaDataSourceFactory), dataSourceFactory)
+            .createMediaSource(uri);
+      case C.TYPE_HLS:
+        return new HlsMediaSource.Factory(mediaDataSourceFactory)
+            .createMediaSource(uri);
+      case C.TYPE_OTHER:
+        return new ExtractorMediaSource.Factory(mediaDataSourceFactory).createMediaSource(uri);
+      default: {
+        throw new IllegalStateException("Unsupported type: " + type);
+      }
+    }
+  }
+
+  public static void setDebugVisibility(View view, boolean debug, int visibility) {
+    setVisibility(view, debug ? visibility : View.GONE);
+  }
+
+  public static void setVisibility(View view, int visibility) {
+    if (view != null) {
+      view.setVisibility(visibility);
+    }
+  }
+
+
+}
diff --git a/library/manager/src/main/res/values/ids.xml b/library/manager/src/main/res/values/ids.xml
new file mode 100644
index 0000000000..8a59ddfc4e
--- /dev/null
+++ b/library/manager/src/main/res/values/ids.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2016 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<resources>
+
+  <item name="player_view" type="id"/>
+  <item name="controls_root" type="id"/>
+  <item name="debug_text_view" type="id"/>
+
+</resources>
diff --git a/library/manager/src/main/res/values/strings.xml b/library/manager/src/main/res/values/strings.xml
new file mode 100644
index 0000000000..06d058384b
--- /dev/null
+++ b/library/manager/src/main/res/values/strings.xml
@@ -0,0 +1,60 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2016 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+
+  <string name="application_name">ExoPlayerManager</string>
+
+  <string name="unexpected_intent_action">Unexpected intent action: <xliff:g id="action">%1$s</xliff:g></string>
+
+  <string name="error_generic">Playback failed</string>
+
+  <string name="error_unrecognized_abr_algorithm">Unrecognized ABR algorithm</string>
+
+  <string name="error_drm_not_supported">Protected content not supported on API levels below 18</string>
+
+  <string name="error_drm_unsupported_scheme">This device does not support the required DRM scheme</string>
+
+  <string name="error_drm_unknown">An unknown DRM error occurred</string>
+
+  <string name="error_no_decoder">This device does not provide a decoder for <xliff:g id="mime_type">%1$s</xliff:g></string>
+
+  <string name="error_no_secure_decoder">This device does not provide a secure decoder for <xliff:g id="mime_type">%1$s</xliff:g></string>
+
+  <string name="error_querying_decoders">Unable to query device decoders</string>
+
+  <string name="error_instantiating_decoder">Unable to instantiate decoder <xliff:g id="decoder_name">%1$s</xliff:g></string>
+
+  <string name="error_unsupported_video">Media includes video tracks, but none are playable by this device</string>
+
+  <string name="error_unsupported_audio">Media includes audio tracks, but none are playable by this device</string>
+
+  <string name="storage_permission_denied">Permission to access storage was denied</string>
+
+  <string name="sample_list_load_error">One or more sample lists failed to load</string>
+
+  <string name="ima_not_loaded">Playing sample without ads, as the IMA extension was not loaded</string>
+
+  <string name="download_start_error">Failed to start download</string>
+
+  <string name="download_playlist_unsupported">This demo app does not support downloading playlists</string>
+
+  <string name="download_drm_unsupported">This demo app does not support downloading protected content</string>
+
+  <string name="download_scheme_unsupported">This demo app only supports downloading http streams</string>
+
+  <string name="download_ads_unsupported">IMA does not support offline ads</string>
+
+</resources>
diff --git a/library/manager/src/test/java/com/dfbarone/android/exoplayer2/manager/ExampleUnitTest.java b/library/manager/src/test/java/com/dfbarone/android/exoplayer2/manager/ExampleUnitTest.java
new file mode 100644
index 0000000000..331f466468
--- /dev/null
+++ b/library/manager/src/test/java/com/dfbarone/android/exoplayer2/manager/ExampleUnitTest.java
@@ -0,0 +1,17 @@
+package com.dfbarone.android.exoplayer2.manager;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * Example local unit test, which will execute on the development machine (host).
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+public class ExampleUnitTest {
+  @Test
+  public void addition_isCorrect() {
+    assertEquals(4, 2 + 2);
+  }
+}
\ No newline at end of file
diff --git a/library/manager/src/test/java/com/dfbarone/exoplayermanager/ExampleUnitTest.java b/library/manager/src/test/java/com/dfbarone/exoplayermanager/ExampleUnitTest.java
new file mode 100644
index 0000000000..0c7fde7a66
--- /dev/null
+++ b/library/manager/src/test/java/com/dfbarone/exoplayermanager/ExampleUnitTest.java
@@ -0,0 +1,17 @@
+package com.dfbarone.exoplayermanager;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * Example local unit test, which will execute on the development machine (host).
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+public class ExampleUnitTest {
+  @Test
+  public void addition_isCorrect() {
+    assertEquals(4, 2 + 2);
+  }
+}
\ No newline at end of file
diff --git a/settings.gradle b/settings.gradle
index d4530d67b7..3f3d7b0bd3 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -19,12 +19,14 @@ if (gradle.ext.has('exoplayerModulePrefix')) {
 }
 
 include modulePrefix + 'demo'
+include modulePrefix + 'demo-manager'
 include modulePrefix + 'demo-cast'
 include modulePrefix + 'demo-ima'
 include modulePrefix + 'playbacktests'
 project(modulePrefix + 'demo').projectDir = new File(rootDir, 'demos/main')
 project(modulePrefix + 'demo-cast').projectDir = new File(rootDir, 'demos/cast')
 project(modulePrefix + 'demo-ima').projectDir = new File(rootDir, 'demos/ima')
+project(modulePrefix + 'demo-manager').projectDir = new File(rootDir, 'demos/manager')
 project(modulePrefix + 'playbacktests').projectDir = new File(rootDir, 'playbacktests')
 
 apply from: 'core_settings.gradle'
