diff --git a/extensions/cronet/src/main/java/com/google/android/exoplayer/ext/cronet/CronetDataSource.java b/extensions/cronet/src/main/java/com/google/android/exoplayer/ext/cronet/CronetDataSource.java
index 875513a631..3ada123efa 100644
--- a/extensions/cronet/src/main/java/com/google/android/exoplayer/ext/cronet/CronetDataSource.java
+++ b/extensions/cronet/src/main/java/com/google/android/exoplayer/ext/cronet/CronetDataSource.java
@@ -18,6 +18,7 @@
 import android.os.ConditionVariable;
 import android.text.TextUtils;
 import android.util.Log;
+
 import com.google.android.exoplayer.C;
 import com.google.android.exoplayer.upstream.DataSpec;
 import com.google.android.exoplayer.upstream.HttpDataSource;
@@ -26,6 +27,7 @@
 import com.google.android.exoplayer.util.Clock;
 import com.google.android.exoplayer.util.Predicate;
 import com.google.android.exoplayer.util.TraceUtil;
+
 import java.io.IOException;
 import java.net.SocketTimeoutException;
 import java.net.UnknownHostException;
@@ -38,6 +40,7 @@
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+
 import org.chromium.net.CronetEngine;
 import org.chromium.net.UrlRequest;
 import org.chromium.net.UrlRequestException;
@@ -102,7 +105,6 @@ public Integer getCronetConnectionStatus() {
   private final int connectTimeoutMs;
   private final int readTimeoutMs;
   private final boolean resetTimeoutOnRedirects;
-  private final boolean useExtendableTimeoutOperation;
   private final Map<String, String> headers;
   private final ConditionVariable operation;
   private final ByteBuffer readBuffer;
@@ -114,7 +116,6 @@ public Integer getCronetConnectionStatus() {
 
   volatile ConnectionState connectionState;
   TimeoutCheckerRunnable timeoutCheckerRunnable;
-  ExtendableTimeoutConditionVariable extendableTimeoutOperation;
   private volatile String currentUrl;
   private volatile HttpDataSourceException exception;
   private volatile long contentLength;
@@ -123,6 +124,19 @@ public Integer getCronetConnectionStatus() {
   private volatile int connectionStatus;
   private volatile boolean responseFinished;
 
+  /**
+   * @param cronetEngine A CronetEngine.
+   * @param executor The {@link java.util.concurrent.Executor} that will perform the request.
+   * @param clock A {@link com.google.android.exoplayer.util.Clock} for keeping track of timeout
+   * @param contentTypePredicate A {@link Predicate}. If a content type is rejected by the
+   *     predicate then a
+   *     {@link com.google.android.exoplayer.upstream.HttpDataSource.InvalidContentTypeException}
+   *     is thrown from {@link #validateResponse(UrlResponseInfo)}.
+   * @param transferListener A listener.
+   * @param connectTimeoutMs The timeout to execute a connection.
+   * @param readTimeoutMs The timeout to execute a connection.
+   * @param resetTimeoutOnRedirects Allow to reset the timeout when redirects occur.
+   */
   public CronetDataSource(
       CronetEngine cronetEngine,
       Executor executor,
@@ -131,8 +145,7 @@ public CronetDataSource(
       TransferListener transferListener,
       int connectTimeoutMs,
       int readTimeoutMs,
-      boolean resetTimeoutOnRedirects,
-      boolean useExtendableTimeoutOperation) {
+      boolean resetTimeoutOnRedirects) {
     this.cronetEngine = Assertions.checkNotNull(cronetEngine);
     this.executor = Assertions.checkNotNull(executor);
     this.clock = Assertions.checkNotNull(clock);
@@ -141,15 +154,11 @@ public CronetDataSource(
     this.connectTimeoutMs = connectTimeoutMs;
     this.readTimeoutMs = readTimeoutMs;
     this.resetTimeoutOnRedirects = resetTimeoutOnRedirects;
-    this.useExtendableTimeoutOperation = useExtendableTimeoutOperation;
     this.headers = new HashMap<>();
     this.connectionState = ConnectionState.NEW;
     this.readBuffer = ByteBuffer.allocateDirect(READ_BUFFER_SIZE_BYTES);
     this.operation = new ConditionVariable();
     readBuffer.clear();
-    if (resetTimeoutOnRedirects && useExtendableTimeoutOperation) {
-      extendableTimeoutOperation = new ExtendableTimeoutConditionVariable();
-    }
   }
 
   @Override
@@ -187,17 +196,11 @@ public long open(DataSpec dataSpec) throws HttpDataSourceException {
       createRequest(dataSpec);
 
       if (resetTimeoutOnRedirects) {
-        if (useExtendableTimeoutOperation) {
-          extendableTimeoutOperation.extendTimeout(connectTimeoutMs);
-          currentUrlRequest.start();
-          extendableTimeoutOperation.block();
-        } else {
-          operation.close();
-          timeoutCheckerRunnable = new TimeoutCheckerRunnable();
-          executor.execute(timeoutCheckerRunnable);
-          currentUrlRequest.start();
-          operation.block();
-        }
+        operation.close();
+        timeoutCheckerRunnable = new TimeoutCheckerRunnable();
+        executor.execute(timeoutCheckerRunnable);
+        currentUrlRequest.start();
+        operation.block();
       } else {
         operation.close();
         currentUrlRequest.start();
@@ -288,11 +291,8 @@ public synchronized void onFailed(
         timeoutCheckerRunnable.cancel();
         timeoutCheckerRunnable = null;
       }
-      if (extendableTimeoutOperation != null) {
-        extendableTimeoutOperation.open();
-      } else {
-        operation.open();
-      }
+      operation.open();
+
     } else if (connectionState == ConnectionState.OPEN) {
       readBuffer.limit(0);
       exception = new HttpDataSourceException(
@@ -334,11 +334,7 @@ public synchronized void onResponseStarted(UrlRequest request, UrlResponseInfo i
         timeoutCheckerRunnable.cancel();
         timeoutCheckerRunnable = null;
       }
-      if (extendableTimeoutOperation != null) {
-        extendableTimeoutOperation.open();
-      } else {
-        operation.open();
-      }
+      operation.open();
       TraceUtil.endSection();
     }
   }
@@ -478,20 +474,13 @@ public void onRedirectReceived(UrlRequest request, UrlResponseInfo info, String
       if (responseCode == 307 || responseCode == 308) {
         exception = new OpenException(
             "POST request redirected with 307 or 308 response code.", currentDataSpec);
-        if (extendableTimeoutOperation != null) {
-          extendableTimeoutOperation.open();
-        } else {
-          operation.open();
-        }
+        operation.open();
         return;
       }
     }
     if (timeoutCheckerRunnable != null) {
       timeoutCheckerRunnable.resetTimeoutLimit();
     }
-    if (extendableTimeoutOperation != null) {
-      extendableTimeoutOperation.extendTimeout(connectTimeoutMs);
-    }
     request.followRedirect();
   }
 
@@ -562,42 +551,6 @@ private void log(int priority, String message) {
     }
   }
 
-  /**
-   * Similar to ConditionVariable but allows the timeout to be extended.
-   */
-  class ExtendableTimeoutConditionVariable {
-
-    ConditionVariable operation;
-    private volatile long timeoutElapsedTimeMs;
-
-    ExtendableTimeoutConditionVariable() {
-      operation = new ConditionVariable();
-    }
-
-    void block() {
-      while (true) {
-        long now = clock.elapsedRealtime();
-        if (now >= timeoutElapsedTimeMs) {
-          return;
-        }
-        long timeout = timeoutElapsedTimeMs - now;
-        if (operation.block(timeout)) {
-          return;
-        }
-      }
-    }
-
-    void extendTimeout(long timeout) {
-      operation.close();
-      timeoutElapsedTimeMs = Math.max(timeoutElapsedTimeMs, clock.elapsedRealtime() + timeout);
-    }
-
-    void open() {
-      operation.open();
-    }
-
-  }
-
   class TimeoutCheckerRunnable implements Runnable {
 
     private volatile long connectTimeoutElapsedTimeMs;
diff --git a/extensions/cronet/src/test/java/com/google/android/exoplayer/ext/cronet/CronetDataSourceTest.java b/extensions/cronet/src/test/java/com/google/android/exoplayer/ext/cronet/CronetDataSourceTest.java
index 7f74d50fa8..d7f7ef30cd 100644
--- a/extensions/cronet/src/test/java/com/google/android/exoplayer/ext/cronet/CronetDataSourceTest.java
+++ b/extensions/cronet/src/test/java/com/google/android/exoplayer/ext/cronet/CronetDataSourceTest.java
@@ -178,8 +178,7 @@ public void setUp() {
             mockTransferListener,
             TEST_CONNECT_TIMEOUT_MS,
             TEST_READ_TIMEOUT_MS,
-            true, // resetTimeoutOnRedirects
-            false)); // useExtendableTimeoutOperation
+            true));  // resetTimeoutOnRedirects
     when(mockContentTypePredicate.evaluate(anyString())).thenReturn(true);
     when(mockCronetEngine.createRequest(
         anyString(),
@@ -849,9 +848,7 @@ void createCronetDataSourceWithExtendableTimeoutConditionVariable() {
             mockTransferListener,
             TEST_CONNECT_TIMEOUT_MS,
             TEST_READ_TIMEOUT_MS,
-            true, // resetTimeoutOnRedirects
-            true)); // useExtendableTimeoutOperation
-    dataSourceUnderTest.extendableTimeoutOperation.operation = new FakeConditionVariable();
+            true)); // resetTimeoutOnRedirects
   }
 
   @Test
@@ -859,12 +856,6 @@ public void testConnectTimeoutWithTimeoutCheckerRunnable() {
     testConnectTimeout();
   }
 
-  @Test
-  public void testConnectTimeoutWithExtendableTimeoutConditionVariable() {
-    createCronetDataSourceWithExtendableTimeoutConditionVariable();
-    testConnectTimeout();
-  }
-
   void testConnectTimeout() {
     final ConditionVariable startOperation = new ConditionVariable();
     final ConditionVariable openOperation = new ConditionVariable();
@@ -926,12 +917,6 @@ public void testConnectResponseBeforeTimeoutWithTimeoutCheckerRunnable() {
     testConnectResponseBeforeTimeout();
   }
 
-  @Test
-  public void testConnectResponseBeforeTimeoutWithExtendableTimeoutConditionVariable() {
-    createCronetDataSourceWithExtendableTimeoutConditionVariable();
-    testConnectResponseBeforeTimeout();
-  }
-
   void testConnectResponseBeforeTimeout() {
     final ConditionVariable startOperation = new ConditionVariable();
     final ConditionVariable openOperation = new ConditionVariable();
@@ -990,12 +975,6 @@ public void testRedirectIncreasesConnectionTimeoutWithTimeoutCheckerRunnable() {
     testRedirectIncreasesConnectionTimeout();
   }
 
-  @Test
-  public void testRedirectIncreasesConnectionTimeoutWithExtendableTimeoutConditionVariable() {
-    createCronetDataSourceWithExtendableTimeoutConditionVariable();
-    testRedirectIncreasesConnectionTimeout();
-  }
-
   void testRedirectIncreasesConnectionTimeout() {
     final ConditionVariable startOperation = new ConditionVariable();
     final ConditionVariable openOperation = new ConditionVariable();
@@ -1074,12 +1053,6 @@ public void testMultipleRedirectConnectionTimeoutWithTimeoutCheckerRunnable() {
     testMultipleRedirectConnectionTimeout();
   }
 
-  @Test
-  public void testMultipleRedirectConnectionTimeoutWithExtendableTimeoutConditionVariable() {
-    createCronetDataSourceWithExtendableTimeoutConditionVariable();
-    testMultipleRedirectConnectionTimeout();
-  }
-
   void testMultipleRedirectConnectionTimeout() {
     final ConditionVariable startOperation = new ConditionVariable();
     final ConditionVariable openOperation = new ConditionVariable();
@@ -1199,64 +1172,6 @@ public void testExceptionFromTransferListener() throws HttpDataSourceException {
     dataSourceUnderTest.open(testDataSpec);
   }
 
-  @Test
-  public void testDataSourceReuseWithExtendableTimeoutConditionVariable()
-      throws HttpDataSourceException {
-    createCronetDataSourceWithExtendableTimeoutConditionVariable();
-    dataSourceUnderTest.open(testDataSpec);
-    dataSourceUnderTest.close();
-
-    // Reuse the same data source.
-    final ConditionVariable startOperation = new ConditionVariable();
-    final ConditionVariable openOperation = new ConditionVariable();
-    final AtomicInteger openExceptions = new AtomicInteger(0);
-    doAnswer(new Answer<Object>() {
-      @Override
-      public Object answer(InvocationOnMock invocation) throws Throwable {
-        startOperation.open();
-        return null;
-      }
-    }).when(mockUrlRequest).start();
-    when(mockClock.elapsedRealtime()).thenReturn(1000L);
-    new BlockingBackgroundExecutor().execute(
-        new Runnable() {
-          @Override
-          public void run() {
-            try {
-              Executor executor = Executors.newFixedThreadPool(2);
-              openOperation.close();
-              executor.execute(new Runnable() {
-                @Override
-                public void run() {
-                  try {
-                    dataSourceUnderTest.open(testDataSpec);
-                    fail(); // Exception expected.
-                  } catch (HttpDataSourceException e) {
-                    // Expected exception
-                    assertTrue(e instanceof CronetDataSource.OpenException);
-                    assertTrue(e.getCause() instanceof SocketTimeoutException);
-                    openExceptions.getAndIncrement();
-                  }
-                  openOperation.open();
-                }
-              });
-              startOperation.block();
-              assertEquals(
-                  CronetDataSource.ConnectionState.OPENING,
-                  dataSourceUnderTest.connectionState);
-              assertEquals(0, openExceptions.get());
-
-              // Exceeding the timeout at 1110.
-              when(mockClock.elapsedRealtime()).thenReturn(1110L);
-              openOperation.block();
-              assertEquals(1, openExceptions.get());
-            } catch (Exception e) {
-              fail(e.getMessage());
-            }
-          }
-        });
-  }
-
   @Test
   public void testReadFailure() throws HttpDataSourceException {
     doAnswer(
