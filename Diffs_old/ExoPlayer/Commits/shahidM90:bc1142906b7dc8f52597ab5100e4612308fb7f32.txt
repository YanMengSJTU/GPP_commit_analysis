diff --git a/demo_ext/src/main/java/com/google/android/exoplayer/demo/ext/PlayerActivity.java b/demo_ext/src/main/java/com/google/android/exoplayer/demo/ext/PlayerActivity.java
index 153cc27cdc..4982eb4fa6 100644
--- a/demo_ext/src/main/java/com/google/android/exoplayer/demo/ext/PlayerActivity.java
+++ b/demo_ext/src/main/java/com/google/android/exoplayer/demo/ext/PlayerActivity.java
@@ -28,7 +28,7 @@
 import com.google.android.exoplayer.ext.vp9.VpxDecoderException;
 import com.google.android.exoplayer.ext.vp9.VpxVideoSurfaceView;
 import com.google.android.exoplayer.extractor.ExtractorSampleSource;
-import com.google.android.exoplayer.extractor.ogg.OggFlacExtractor;
+import com.google.android.exoplayer.extractor.ogg.OggExtractor;
 import com.google.android.exoplayer.extractor.webm.WebmExtractor;
 import com.google.android.exoplayer.upstream.DefaultAllocator;
 import com.google.android.exoplayer.upstream.DefaultUriDataSource;
@@ -142,7 +142,7 @@ private void startBasicPlayback() {
         contentUri,
         new DefaultUriDataSource(this, Util.getUserAgent(this, "ExoPlayerExtWebMDemo")),
         new DefaultAllocator(BUFFER_SEGMENT_SIZE), BUFFER_SEGMENT_SIZE * BUFFER_SEGMENT_COUNT,
-        new WebmExtractor(), new FlacExtractor(), new OggFlacExtractor());
+        new WebmExtractor(), new FlacExtractor(), new OggExtractor());
     TrackRenderer videoRenderer =
         new LibvpxVideoTrackRenderer(sampleSource, true, handler, this, 50);
     if (useOpenGL) {
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggFlacExtractorTest.java b/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggExtractorTest.java
similarity index 81%
rename from library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggFlacExtractorTest.java
rename to library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggExtractorTest.java
index 8859621615..f75ffc08cf 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggFlacExtractorTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggExtractorTest.java
@@ -24,19 +24,27 @@
 import java.io.IOException;
 
 /**
- * Unit test for {@link OggFlacExtractor}.
+ * Unit test for {@link OggExtractor}.
  */
-public final class OggFlacExtractorTest extends TestCase {
+public final class OggExtractorTest extends TestCase {
 
-  private OggFlacExtractor extractor;
+  private OggExtractor extractor;
 
   @Override
   public void setUp() throws Exception {
     super.setUp();
-    extractor = new OggFlacExtractor();
+    extractor = new OggExtractor();
   }
 
-  public void testSniff() throws Exception {
+  public void testSniffVorbis() throws Exception {
+    byte[] data = TestUtil.joinByteArrays(
+        TestData.buildOggHeader(0x02, 0, 1000, 0x02),
+        TestUtil.createByteArray(120, 120),  // Laces
+        new byte[]{0x01, 'v', 'o', 'r', 'b', 'i', 's'});
+    assertTrue(sniff(createInput(data)));
+  }
+
+  public void testSniffFlac() throws Exception {
     byte[] data = TestUtil.joinByteArrays(
         TestData.buildOggHeader(0x02, 0, 1000, 0x02),
         TestUtil.createByteArray(120, 120),  // Laces
@@ -56,7 +64,7 @@ public void testSniffFailsInvalidOggHeader() throws Exception {
     assertFalse(sniff(createInput(data)));
   }
 
-  public void testSniffInvalidFlacHeader() throws Exception {
+  public void testSniffInvalidHeader() throws Exception {
     byte[] data = TestUtil.joinByteArrays(
         TestData.buildOggHeader(0x02, 0, 1000, 0x02),
         TestUtil.createByteArray(120, 120),  // Laces
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggReaderTest.java b/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggParserTest.java
similarity index 83%
rename from library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggReaderTest.java
rename to library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggParserTest.java
index f1270aeb2f..ebacfee144 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggReaderTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggParserTest.java
@@ -31,19 +31,19 @@
 import java.util.Random;
 
 /**
- * Unit test for {@link OggReader}.
+ * Unit test for {@link OggParser}.
  */
-public final class OggReaderTest extends TestCase {
+public final class OggParserTest extends TestCase {
 
   private Random random;
-  private OggReader oggReader;
+  private OggParser oggParser;
   private ParsableByteArray scratch;
 
   @Override
   public void setUp() throws Exception {
     super.setUp();
     random = new Random(0);
-    oggReader = new OggReader();
+    oggParser = new OggParser();
     scratch = new ParsableByteArray(new byte[255 * 255], 0);
   }
 
@@ -72,37 +72,37 @@ public void testReadPacketsWithEmptyPage() throws Exception {
             fourthPacket), true);
 
     assertReadPacket(input, firstPacket);
-    assertTrue((oggReader.getPageHeader().type & 0x02) == 0x02);
-    assertFalse((oggReader.getPageHeader().type & 0x04) == 0x04);
-    assertEquals(0x02, oggReader.getPageHeader().type);
-    assertEquals(27 + 1, oggReader.getPageHeader().headerSize);
-    assertEquals(8, oggReader.getPageHeader().bodySize);
-    assertEquals(0x00, oggReader.getPageHeader().revision);
-    assertEquals(1, oggReader.getPageHeader().pageSegmentCount);
-    assertEquals(1000, oggReader.getPageHeader().pageSequenceNumber);
-    assertEquals(4096, oggReader.getPageHeader().streamSerialNumber);
-    assertEquals(0, oggReader.getPageHeader().granulePosition);
+    assertTrue((oggParser.getPageHeader().type & 0x02) == 0x02);
+    assertFalse((oggParser.getPageHeader().type & 0x04) == 0x04);
+    assertEquals(0x02, oggParser.getPageHeader().type);
+    assertEquals(27 + 1, oggParser.getPageHeader().headerSize);
+    assertEquals(8, oggParser.getPageHeader().bodySize);
+    assertEquals(0x00, oggParser.getPageHeader().revision);
+    assertEquals(1, oggParser.getPageHeader().pageSegmentCount);
+    assertEquals(1000, oggParser.getPageHeader().pageSequenceNumber);
+    assertEquals(4096, oggParser.getPageHeader().streamSerialNumber);
+    assertEquals(0, oggParser.getPageHeader().granulePosition);
 
     assertReadPacket(input, secondPacket);
-    assertFalse((oggReader.getPageHeader().type & 0x02) == 0x02);
-    assertFalse((oggReader.getPageHeader().type & 0x04) == 0x04);
-    assertEquals(0, oggReader.getPageHeader().type);
-    assertEquals(27 + 2, oggReader.getPageHeader().headerSize);
-    assertEquals(255 + 17, oggReader.getPageHeader().bodySize);
-    assertEquals(2, oggReader.getPageHeader().pageSegmentCount);
-    assertEquals(1001, oggReader.getPageHeader().pageSequenceNumber);
-    assertEquals(16, oggReader.getPageHeader().granulePosition);
+    assertFalse((oggParser.getPageHeader().type & 0x02) == 0x02);
+    assertFalse((oggParser.getPageHeader().type & 0x04) == 0x04);
+    assertEquals(0, oggParser.getPageHeader().type);
+    assertEquals(27 + 2, oggParser.getPageHeader().headerSize);
+    assertEquals(255 + 17, oggParser.getPageHeader().bodySize);
+    assertEquals(2, oggParser.getPageHeader().pageSegmentCount);
+    assertEquals(1001, oggParser.getPageHeader().pageSequenceNumber);
+    assertEquals(16, oggParser.getPageHeader().granulePosition);
 
     assertReadPacket(input, thirdPacket);
-    assertFalse((oggReader.getPageHeader().type & 0x02) == 0x02);
-    assertTrue((oggReader.getPageHeader().type & 0x04) == 0x04);
-    assertEquals(4, oggReader.getPageHeader().type);
-    assertEquals(27 + 4, oggReader.getPageHeader().headerSize);
-    assertEquals(255 + 1 + 255 + 16, oggReader.getPageHeader().bodySize);
-    assertEquals(4, oggReader.getPageHeader().pageSegmentCount);
+    assertFalse((oggParser.getPageHeader().type & 0x02) == 0x02);
+    assertTrue((oggParser.getPageHeader().type & 0x04) == 0x04);
+    assertEquals(4, oggParser.getPageHeader().type);
+    assertEquals(27 + 4, oggParser.getPageHeader().headerSize);
+    assertEquals(255 + 1 + 255 + 16, oggParser.getPageHeader().bodySize);
+    assertEquals(4, oggParser.getPageHeader().pageSegmentCount);
     // Page 1002 is empty, so current page is 1003.
-    assertEquals(1003, oggReader.getPageHeader().pageSequenceNumber);
-    assertEquals(128, oggReader.getPageHeader().granulePosition);
+    assertEquals(1003, oggParser.getPageHeader().pageSequenceNumber);
+    assertEquals(128, oggParser.getPageHeader().granulePosition);
 
     assertReadPacket(input, fourthPacket);
 
@@ -140,9 +140,9 @@ public void testReadContinuedPacketOverTwoPages() throws Exception {
             Arrays.copyOfRange(firstPacket, 510, 510 + 8)), true);
 
     assertReadPacket(input, firstPacket);
-    assertTrue((oggReader.getPageHeader().type & 0x04) == 0x04);
-    assertFalse((oggReader.getPageHeader().type & 0x02) == 0x02);
-    assertEquals(1001, oggReader.getPageHeader().pageSequenceNumber);
+    assertTrue((oggParser.getPageHeader().type & 0x04) == 0x04);
+    assertFalse((oggParser.getPageHeader().type & 0x02) == 0x02);
+    assertEquals(1001, oggParser.getPageHeader().pageSequenceNumber);
 
     assertReadEof(input);
   }
@@ -170,9 +170,9 @@ public void testReadContinuedPacketOverFourPages() throws Exception {
             Arrays.copyOfRange(firstPacket, 510 + 255 + 255, 510 + 255 + 255 + 8)), true);
 
     assertReadPacket(input, firstPacket);
-    assertTrue((oggReader.getPageHeader().type & 0x04) == 0x04);
-    assertFalse((oggReader.getPageHeader().type & 0x02) == 0x02);
-    assertEquals(1003, oggReader.getPageHeader().pageSequenceNumber);
+    assertTrue((oggParser.getPageHeader().type & 0x04) == 0x04);
+    assertFalse((oggParser.getPageHeader().type & 0x02) == 0x02);
+    assertEquals(1003, oggParser.getPageHeader().pageSequenceNumber);
 
     assertReadEof(input);
   }
@@ -281,7 +281,7 @@ private void skipToPageOfGranule(ExtractorInput input, long granule,
       long elapsedSamplesExpected) throws IOException, InterruptedException {
     while (true) {
       try {
-        assertEquals(elapsedSamplesExpected, oggReader.skipToPageOfGranule(input, granule));
+        assertEquals(elapsedSamplesExpected, oggParser.skipToPageOfGranule(input, granule));
         return;
       } catch (FakeExtractorInput.SimulatedIOException e) {
         input.resetPeekPosition();
@@ -330,7 +330,7 @@ private void assertReadGranuleOfLastPage(FakeExtractorInput input, int expected)
       throws IOException, InterruptedException {
     while (true) {
       try {
-        assertEquals(expected, oggReader.readGranuleOfLastPage(input));
+        assertEquals(expected, oggParser.readGranuleOfLastPage(input));
         break;
       } catch (FakeExtractorInput.SimulatedIOException e) {
         // ignored
@@ -355,7 +355,7 @@ private boolean readPacket(FakeExtractorInput input, ParsableByteArray scratch)
       throws InterruptedException, IOException {
     while (true) {
       try {
-        return oggReader.readPacket(input, scratch);
+        return oggParser.readPacket(input, scratch);
       } catch (FakeExtractorInput.SimulatedIOException e) {
         // Ignore.
       }
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggVorbisExtractorTest.java b/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/VorbisReaderTest.java
similarity index 63%
rename from library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggVorbisExtractorTest.java
rename to library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/VorbisReaderTest.java
index 46f59200c3..a085372d2b 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/OggVorbisExtractorTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/extractor/ogg/VorbisReaderTest.java
@@ -15,10 +15,9 @@
  */
 package com.google.android.exoplayer.extractor.ogg;
 
-import com.google.android.exoplayer.extractor.ogg.OggVorbisExtractor.VorbisSetup;
+import com.google.android.exoplayer.extractor.ogg.VorbisReader.VorbisSetup;
 import com.google.android.exoplayer.testutil.FakeExtractorInput;
 import com.google.android.exoplayer.testutil.FakeExtractorInput.SimulatedIOException;
-import com.google.android.exoplayer.testutil.TestUtil;
 import com.google.android.exoplayer.util.ParsableByteArray;
 
 import junit.framework.TestCase;
@@ -26,57 +25,24 @@
 import java.io.IOException;
 
 /**
- * Unit test for {@link OggVorbisExtractor}.
+ * Unit test for {@link VorbisReader}.
  */
-public final class OggVorbisExtractorTest extends TestCase {
+public final class VorbisReaderTest extends TestCase {
 
-  private OggVorbisExtractor extractor;
+  private VorbisReader extractor;
   private ParsableByteArray scratch;
 
   @Override
   public void setUp() throws Exception {
     super.setUp();
-    extractor = new OggVorbisExtractor();
+    extractor = new VorbisReader();
     scratch = new ParsableByteArray(new byte[255 * 255], 0);
   }
 
-  public void testSniff() throws Exception {
-    byte[] data = TestUtil.joinByteArrays(
-        TestData.buildOggHeader(0x02, 0, 1000, 0x02),
-        TestUtil.createByteArray(120, 120),  // Laces
-        new byte[]{0x01, 'v', 'o', 'r', 'b', 'i', 's'});
-    assertTrue(sniff(createInput(data)));
-  }
-
-  public void testSniffFailsOpusFile() throws Exception {
-    byte[] data = TestUtil.joinByteArrays(
-        TestData.buildOggHeader(0x02, 0, 1000, 0x00),
-        new byte[]{'O', 'p', 'u', 's'});
-    assertFalse(sniff(createInput(data)));
-  }
-
-  public void testSniffFailsInvalidOggHeader() throws Exception {
-    byte[] data = TestData.buildOggHeader(0x00, 0, 1000, 0x00);
-    assertFalse(sniff(createInput(data)));
-  }
-
-  public void testSniffInvalidVorbisHeader() throws Exception {
-    byte[] data = TestUtil.joinByteArrays(
-        TestData.buildOggHeader(0x02, 0, 1000, 0x02),
-        TestUtil.createByteArray(120, 120),  // Laces
-        new byte[]{0x01, 'X', 'o', 'r', 'b', 'i', 's'});
-    assertFalse(sniff(createInput(data)));
-  }
-
-  public void testSniffFailsEOF() throws Exception {
-    byte[] data = TestData.buildOggHeader(0x02, 0, 1000, 0x00);
-    assertFalse(sniff(createInput(data)));
-  }
-
   public void testAppendNumberOfSamples() throws Exception {
     ParsableByteArray buffer = new ParsableByteArray(4);
     buffer.setLimit(0);
-    OggVorbisExtractor.appendNumberOfSamples(buffer, 0x01234567);
+    VorbisReader.appendNumberOfSamples(buffer, 0x01234567);
     assertEquals(4, buffer.limit());
     assertEquals(0x67, buffer.data[0]);
     assertEquals(0x45, buffer.data[1]);
@@ -86,7 +52,7 @@ public void testAppendNumberOfSamples() throws Exception {
 
   public void testReadSetupHeadersWithIOExceptions() throws IOException, InterruptedException {
     byte[] data = TestData.getVorbisHeaderPages();
-    OggVorbisExtractor.VorbisSetup vorbisSetup = readSetupHeaders(createInput(data));
+    VorbisReader.VorbisSetup vorbisSetup = readSetupHeaders(createInput(data));
 
     assertNotNull(vorbisSetup.idHeader);
     assertNotNull(vorbisSetup.commentHeader);
@@ -122,16 +88,6 @@ private static FakeExtractorInput createInput(byte[] data) {
         .setSimulateUnknownLength(true).setSimulatePartialReads(true).build();
   }
 
-  private boolean sniff(FakeExtractorInput input) throws InterruptedException, IOException {
-    while (true) {
-      try {
-        return extractor.sniff(input);
-      } catch (SimulatedIOException e) {
-        // Ignore.
-      }
-    }
-  }
-
   private VorbisSetup readSetupHeaders(FakeExtractorInput input)
       throws IOException, InterruptedException {
     while (true) {
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ExtractorSampleSource.java b/library/src/main/java/com/google/android/exoplayer/extractor/ExtractorSampleSource.java
index db640a5464..78ca511436 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ExtractorSampleSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ExtractorSampleSource.java
@@ -52,7 +52,7 @@
  * <li>MP4, including M4A ({@link com.google.android.exoplayer.extractor.mp4.Mp4Extractor})</li>
  * <li>fMP4 ({@link com.google.android.exoplayer.extractor.mp4.FragmentedMp4Extractor})</li>
  * <li>Matroska and WebM ({@link com.google.android.exoplayer.extractor.webm.WebmExtractor})</li>
- * <li>Ogg Vorbis ({@link com.google.android.exoplayer.extractor.ogg.OggVorbisExtractor}</li>
+ * <li>Ogg Vorbis/FLAC ({@link com.google.android.exoplayer.extractor.ogg.OggExtractor}</li>
  * <li>MP3 ({@link com.google.android.exoplayer.extractor.mp3.Mp3Extractor})</li>
  * <li>AAC ({@link com.google.android.exoplayer.extractor.ts.AdtsExtractor})</li>
  * <li>MPEG TS ({@link com.google.android.exoplayer.extractor.ts.TsExtractor})</li>
@@ -172,7 +172,7 @@ public UnrecognizedInputFormatException(Extractor[] extractors) {
     }
     try {
       DEFAULT_EXTRACTOR_CLASSES.add(
-          Class.forName("com.google.android.exoplayer.extractor.ogg.OggVorbisExtractor")
+          Class.forName("com.google.android.exoplayer.extractor.ogg.OggExtractor")
               .asSubclass(Extractor.class));
     } catch (ClassNotFoundException e) {
       // Extractor not found.
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggFlacExtractor.java b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/FlacReader.java
similarity index 84%
rename from library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggFlacExtractor.java
rename to library/src/main/java/com/google/android/exoplayer/extractor/ogg/FlacReader.java
index 57620d8a7d..d1a7f01820 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggFlacExtractor.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/FlacReader.java
@@ -19,13 +19,13 @@
 import com.google.android.exoplayer.MediaFormat;
 import com.google.android.exoplayer.extractor.Extractor;
 import com.google.android.exoplayer.extractor.ExtractorInput;
-import com.google.android.exoplayer.extractor.ExtractorOutput;
 import com.google.android.exoplayer.extractor.PositionHolder;
 import com.google.android.exoplayer.extractor.SeekMap;
 import com.google.android.exoplayer.util.FlacSeekTable;
 import com.google.android.exoplayer.util.FlacStreamInfo;
 import com.google.android.exoplayer.util.FlacUtil;
 import com.google.android.exoplayer.util.MimeTypes;
+import com.google.android.exoplayer.util.ParsableByteArray;
 
 import java.io.IOException;
 import java.util.Arrays;
@@ -33,9 +33,9 @@
 import java.util.List;
 
 /**
- * {@link Extractor} to extract Flac data out of Ogg byte stream.
+ * {@link StreamReader} to extract Flac data out of Ogg byte stream.
  */
-public final class OggFlacExtractor extends OggExtractor {
+/* package */ final class FlacReader extends StreamReader {
 
   private static final byte AUDIO_PACKET_TYPE = (byte) 0xFF;
   private static final byte SEEKTABLE_PACKET_TYPE = 0x03;
@@ -46,9 +46,9 @@
 
   private boolean firstAudioPacketProcessed;
 
-  @Override
-  public void init(ExtractorOutput output) {
-    super.init(output);
+  /* package */ static boolean verifyBitstreamType(ParsableByteArray data) {
+    return data.readUnsignedByte() == 0x7F && // packet type
+        data.readUnsignedInt() == 0x464C4143; // ASCII signature "FLAC"
   }
 
   @Override
@@ -56,8 +56,8 @@ public int read(ExtractorInput input, PositionHolder seekPosition)
       throws IOException, InterruptedException {
     long position = input.getPosition();
 
-    if (!oggReader.readPacket(input, scratch)) {
-      return RESULT_END_OF_INPUT;
+    if (!oggParser.readPacket(input, scratch)) {
+      return Extractor.RESULT_END_OF_INPUT;
     }
 
     byte[] data = scratch.data;
@@ -94,13 +94,7 @@ public int read(ExtractorInput input, PositionHolder seekPosition)
     }
 
     scratch.reset();
-    return RESULT_CONTINUE;
-  }
-
-  @Override
-  protected boolean verifyBitstreamType() {
-    return scratch.readUnsignedByte() == 0x7F && // packet type
-        scratch.readUnsignedInt() == 0x464C4143; // ASCII signature "FLAC"
+    return Extractor.RESULT_CONTINUE;
   }
 
 }
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggExtractor.java b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggExtractor.java
index f3605b5990..f41aa0bbc8 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggExtractor.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggExtractor.java
@@ -19,28 +19,23 @@
 import com.google.android.exoplayer.extractor.Extractor;
 import com.google.android.exoplayer.extractor.ExtractorInput;
 import com.google.android.exoplayer.extractor.ExtractorOutput;
+import com.google.android.exoplayer.extractor.PositionHolder;
 import com.google.android.exoplayer.extractor.TrackOutput;
 import com.google.android.exoplayer.util.ParsableByteArray;
 
 import java.io.IOException;
 
 /**
- * Abstract Ogg {@link Extractor}.
+ * Ogg {@link Extractor}.
  */
-public abstract class OggExtractor implements Extractor {
+public class OggExtractor implements Extractor {
 
-  protected final ParsableByteArray scratch = new ParsableByteArray(
-      new byte[OggReader.OGG_MAX_SEGMENT_SIZE * 255], 0);
-
-  protected final OggReader oggReader = new OggReader();
-
-  protected TrackOutput trackOutput;
-
-  protected ExtractorOutput extractorOutput;
+  private StreamReader streamReader;
 
   @Override
   public boolean sniff(ExtractorInput input) throws IOException, InterruptedException {
     try {
+      ParsableByteArray scratch = new ParsableByteArray(new byte[OggUtil.PAGE_HEADER_SIZE], 0);
       OggUtil.PageHeader header = new OggUtil.PageHeader();
       if (!OggUtil.populatePageHeader(input, header, scratch, true)
           || (header.type & 0x02) != 0x02 || header.bodySize < 7) {
@@ -48,26 +43,34 @@ public boolean sniff(ExtractorInput input) throws IOException, InterruptedExcept
       }
       scratch.reset();
       input.peekFully(scratch.data, 0, 7);
-      return verifyBitstreamType();
+      if (FlacReader.verifyBitstreamType(scratch)) {
+        streamReader = new FlacReader();
+      } else {
+        scratch.reset();
+        if (VorbisReader.verifyBitstreamType(scratch)) {
+          streamReader = new VorbisReader();
+        } else {
+          return false;
+        }
+      }
+      return true;
     } catch (ParserException e) {
       // does not happen
     } finally {
-      scratch.reset();
     }
     return false;
   }
 
   @Override
   public void init(ExtractorOutput output) {
-    trackOutput = output.track(0);
+    TrackOutput trackOutput = output.track(0);
     output.endTracks();
-    extractorOutput = output;
+    streamReader.init(output, trackOutput);
   }
 
   @Override
   public void seek() {
-    oggReader.reset();
-    scratch.reset();
+    streamReader.seek();
   }
 
   @Override
@@ -75,6 +78,9 @@ public void release() {
     // Do nothing
   }
 
-  protected abstract boolean verifyBitstreamType() throws ParserException;
-
+  @Override
+  public int read(ExtractorInput input, PositionHolder seekPosition)
+      throws IOException, InterruptedException {
+    return streamReader.read(input, seekPosition);
+  }
 }
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggReader.java b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggParser.java
similarity index 98%
rename from library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggReader.java
rename to library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggParser.java
index 3fb2ed473a..8bef5ab61e 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggReader.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggParser.java
@@ -27,7 +27,7 @@
 /**
  * Reads OGG packets from an {@link ExtractorInput}.
  */
-/* package */ final class OggReader {
+/* package */ final class OggParser {
 
   public static final int OGG_MAX_SEGMENT_SIZE = 255;
 
@@ -163,7 +163,7 @@ public long skipToPageOfGranule(ExtractorInput input, long targetGranule)
    * Returns the {@link OggUtil.PageHeader} of the current page. The header might not have been
    * populated if the first packet has yet to be read.
    * <p>
-   * Note that there is only a single instance of {@code OggReader.PageHeader} which is mutable.
+   * Note that there is only a single instance of {@code OggParser.PageHeader} which is mutable.
    * The value of the fields might be changed by the reader when reading the stream advances and
    * the next page is read (which implies reading and populating the next header).
    *
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggUtil.java b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggUtil.java
index d62ba6ef42..c17d4b61f3 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggUtil.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggUtil.java
@@ -29,6 +29,8 @@
  */
 /* package */ final class OggUtil {
 
+  public static final int PAGE_HEADER_SIZE = 27;
+
   private static final int TYPE_OGGS = Util.getIntegerCodeForString("OggS");
 
   /**
@@ -86,7 +88,7 @@ public static void skipToNextPage(ExtractorInput input)
    *
    * @param input the {@link ExtractorInput} to read from.
    * @param header the {@link PageHeader} to read from.
-   * @param scratch a scratch array temporary use.
+   * @param scratch a scratch array temporary use. Its size should be at least PAGE_HEADER_SIZE
    * @param quite if {@code true} no Exceptions are thrown but {@code false} is return if something
    *     goes wrong.
    * @return {@code true} if the read was successful. {@code false} if the end of the
@@ -100,8 +102,8 @@ public static boolean populatePageHeader(ExtractorInput input, PageHeader header
     scratch.reset();
     header.reset();
     boolean hasEnoughBytes = input.getLength() == C.LENGTH_UNBOUNDED
-        || input.getLength() - input.getPeekPosition() >= 27;
-    if (!hasEnoughBytes || !input.peekFully(scratch.data, 0, 27, true)) {
+        || input.getLength() - input.getPeekPosition() >= PAGE_HEADER_SIZE;
+    if (!hasEnoughBytes || !input.peekFully(scratch.data, 0, PAGE_HEADER_SIZE, true)) {
       if (quite) {
         return false;
       } else {
@@ -134,7 +136,7 @@ public static boolean populatePageHeader(ExtractorInput input, PageHeader header
 
     scratch.reset();
     // calculate total size of header including laces
-    header.headerSize = 27 + header.pageSegmentCount;
+    header.headerSize = PAGE_HEADER_SIZE + header.pageSegmentCount;
     input.peekFully(scratch.data, 0, header.pageSegmentCount);
     for (int i = 0; i < header.pageSegmentCount; i++) {
       header.laces[i] = scratch.readUnsignedByte();
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ogg/StreamReader.java b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/StreamReader.java
new file mode 100644
index 0000000000..af251cfd52
--- /dev/null
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/StreamReader.java
@@ -0,0 +1,44 @@
+package com.google.android.exoplayer.extractor.ogg;
+
+import com.google.android.exoplayer.extractor.Extractor;
+import com.google.android.exoplayer.extractor.ExtractorInput;
+import com.google.android.exoplayer.extractor.ExtractorOutput;
+import com.google.android.exoplayer.extractor.PositionHolder;
+import com.google.android.exoplayer.extractor.TrackOutput;
+import com.google.android.exoplayer.util.ParsableByteArray;
+
+import java.io.IOException;
+
+/**
+ * StreamReader abstract class.
+ */
+/* package */ abstract class StreamReader {
+
+  protected final ParsableByteArray scratch = new ParsableByteArray(
+      new byte[OggParser.OGG_MAX_SEGMENT_SIZE * 255], 0);
+
+  protected final OggParser oggParser = new OggParser();
+
+  protected TrackOutput trackOutput;
+
+  protected ExtractorOutput extractorOutput;
+
+  void init(ExtractorOutput output, TrackOutput trackOutput) {
+    this.extractorOutput = output;
+    this.trackOutput = trackOutput;
+  }
+
+  /**
+   * @see Extractor#seek()
+   */
+  void seek() {
+    oggParser.reset();
+    scratch.reset();
+  }
+
+  /**
+   * @see Extractor#read(ExtractorInput, PositionHolder)
+   */
+  abstract int read(ExtractorInput input, PositionHolder seekPosition)
+      throws IOException, InterruptedException;
+}
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggVorbisExtractor.java b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/VorbisReader.java
similarity index 90%
rename from library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggVorbisExtractor.java
rename to library/src/main/java/com/google/android/exoplayer/extractor/ogg/VorbisReader.java
index de8f5d37b7..7c9a3bb4ce 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/ogg/OggVorbisExtractor.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/ogg/VorbisReader.java
@@ -30,9 +30,9 @@
 import java.util.ArrayList;
 
 /**
- * {@link Extractor} to extract Vorbis data out of Ogg byte stream.
+ * {@link StreamReader} to extract Vorbis data out of Ogg byte stream.
  */
-public final class OggVorbisExtractor extends OggExtractor implements SeekMap {
+/* package */ final class VorbisReader extends StreamReader implements SeekMap {
 
   private VorbisSetup vorbisSetup;
   private int previousPacketBlockSize;
@@ -49,6 +49,14 @@
   private long totalSamples;
   private long duration;
 
+  /* package */ static boolean verifyBitstreamType(ParsableByteArray data) {
+    try {
+      return VorbisUtil.verifyVorbisHeaderCapturePattern(0x01, data, true);
+    } catch (ParserException e) {
+      return false;
+    }
+  }
+
   @Override
   public void seek() {
     super.seek();
@@ -71,11 +79,11 @@ public int read(ExtractorInput input, PositionHolder seekPosition)
         if (inputLength != C.LENGTH_UNBOUNDED) {
           // seek to the end just before the last page of stream to get the duration
           seekPosition.position = input.getLength() - 8000;
-          return RESULT_SEEK;
+          return Extractor.RESULT_SEEK;
         }
       }
       totalSamples = inputLength == C.LENGTH_UNBOUNDED ? -1
-          : oggReader.readGranuleOfLastPage(input);
+          : oggParser.readGranuleOfLastPage(input);
 
       ArrayList<byte[]> codecInitialisationData = new ArrayList<>();
       codecInitialisationData.add(vorbisSetup.idHeader.data);
@@ -84,7 +92,7 @@ public int read(ExtractorInput input, PositionHolder seekPosition)
       duration = inputLength == C.LENGTH_UNBOUNDED ? C.UNKNOWN_TIME_US
           : totalSamples * C.MICROS_PER_SECOND / vorbisSetup.idHeader.sampleRate;
       trackOutput.format(MediaFormat.createAudioFormat(null, MimeTypes.AUDIO_VORBIS,
-          this.vorbisSetup.idHeader.bitrateNominal, OggReader.OGG_MAX_SEGMENT_SIZE * 255, duration,
+          this.vorbisSetup.idHeader.bitrateNominal, OggParser.OGG_MAX_SEGMENT_SIZE * 255, duration,
           this.vorbisSetup.idHeader.channels, (int) this.vorbisSetup.idHeader.sampleRate,
           codecInitialisationData, null));
 
@@ -92,7 +100,7 @@ public int read(ExtractorInput input, PositionHolder seekPosition)
         oggSeeker.setup(inputLength - audioStartPosition, totalSamples);
         // seek back to resume from where we finished reading vorbis headers
         seekPosition.position = audioStartPosition;
-        return RESULT_SEEK;
+        return Extractor.RESULT_SEEK;
       }
     }
 
@@ -102,9 +110,9 @@ public int read(ExtractorInput input, PositionHolder seekPosition)
       long position = oggSeeker.getNextSeekPosition(targetGranule, input);
       if (position != -1) {
         seekPosition.position = position;
-        return RESULT_SEEK;
+        return Extractor.RESULT_SEEK;
       } else {
-        elapsedSamples = oggReader.skipToPageOfGranule(input, targetGranule);
+        elapsedSamples = oggParser.skipToPageOfGranule(input, targetGranule);
         previousPacketBlockSize = vorbisIdHeader.blockSize0;
         // we're never at the first packet after seeking
         seenFirstAudioPacket = true;
@@ -113,7 +121,7 @@ public int read(ExtractorInput input, PositionHolder seekPosition)
     }
 
     // playback
-    if (oggReader.readPacket(input, scratch)) {
+    if (oggParser.readPacket(input, scratch)) {
       // if this is an audio packet...
       if ((scratch.data[0] & 0x01) != 1) {
         // ... we need to decode the block size
@@ -137,9 +145,9 @@ public int read(ExtractorInput input, PositionHolder seekPosition)
         previousPacketBlockSize = packetBlockSize;
       }
       scratch.reset();
-      return RESULT_CONTINUE;
+      return Extractor.RESULT_CONTINUE;
     }
-    return RESULT_END_OF_INPUT;
+    return Extractor.RESULT_END_OF_INPUT;
   }
 
   //@VisibleForTesting
@@ -147,18 +155,18 @@ public int read(ExtractorInput input, PositionHolder seekPosition)
       throws IOException, InterruptedException {
 
     if (vorbisIdHeader == null) {
-      oggReader.readPacket(input, scratch);
+      oggParser.readPacket(input, scratch);
       vorbisIdHeader = VorbisUtil.readVorbisIdentificationHeader(scratch);
       scratch.reset();
     }
 
     if (commentHeader == null) {
-      oggReader.readPacket(input, scratch);
+      oggParser.readPacket(input, scratch);
       commentHeader = VorbisUtil.readVorbisCommentHeader(scratch);
       scratch.reset();
     }
 
-    oggReader.readPacket(input, scratch);
+    oggParser.readPacket(input, scratch);
     // the third packet contains the setup header
     byte[] setupHeaderData = new byte[scratch.limit()];
     // raw data of vorbis setup header has to be passed to decoder as CSD buffer #2
@@ -213,11 +221,6 @@ public long getPosition(long timeUs) {
         / duration) - 4000);
   }
 
-  @Override
-  protected boolean verifyBitstreamType() throws ParserException {
-    return VorbisUtil.verifyVorbisHeaderCapturePattern(0x01, scratch, true);
-  }
-
   /**
    * Class to hold all data read from Vorbis setup headers.
    */
