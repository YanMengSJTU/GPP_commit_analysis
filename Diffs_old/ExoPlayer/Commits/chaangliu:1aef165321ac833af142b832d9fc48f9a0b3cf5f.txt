diff --git a/.idea/codeStyleSettings.xml b/.idea/codeStyleSettings.xml
deleted file mode 100644
index 056b47a1e8..0000000000
--- a/.idea/codeStyleSettings.xml
+++ /dev/null
@@ -1,495 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectCodeStyleSettingsManager">
-    <option name="PER_PROJECT_SETTINGS">
-      <value>
-        <option name="OTHER_INDENT_OPTIONS">
-          <value>
-            <option name="INDENT_SIZE" value="2" />
-            <option name="CONTINUATION_INDENT_SIZE" value="4" />
-            <option name="TAB_SIZE" value="2" />
-            <option name="USE_TAB_CHARACTER" value="false" />
-            <option name="SMART_TABS" value="false" />
-            <option name="LABEL_INDENT_SIZE" value="0" />
-            <option name="LABEL_INDENT_ABSOLUTE" value="false" />
-            <option name="USE_RELATIVE_INDENTS" value="false" />
-          </value>
-        </option>
-        <option name="CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND" value="999" />
-        <option name="NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND" value="999" />
-        <option name="PACKAGES_TO_USE_IMPORT_ON_DEMAND">
-          <value />
-        </option>
-        <option name="IMPORT_LAYOUT_TABLE">
-          <value>
-            <package name="" withSubpackages="true" static="true" />
-            <emptyLine />
-            <package name="" withSubpackages="true" static="false" />
-          </value>
-        </option>
-        <option name="RIGHT_MARGIN" value="100" />
-        <option name="JD_ALIGN_PARAM_COMMENTS" value="false" />
-        <option name="JD_ALIGN_EXCEPTION_COMMENTS" value="false" />
-        <option name="JD_P_AT_EMPTY_LINES" value="false" />
-        <option name="JD_KEEP_EMPTY_PARAMETER" value="false" />
-        <option name="JD_KEEP_EMPTY_EXCEPTION" value="false" />
-        <option name="JD_KEEP_EMPTY_RETURN" value="false" />
-        <option name="KEEP_CONTROL_STATEMENT_IN_ONE_LINE" value="false" />
-        <option name="KEEP_BLANK_LINES_IN_CODE" value="1" />
-        <option name="KEEP_BLANK_LINES_BEFORE_RBRACE" value="0" />
-        <option name="ALIGN_MULTILINE_PARAMETERS" value="false" />
-        <option name="ALIGN_MULTILINE_FOR" value="false" />
-        <option name="SPACE_BEFORE_ARRAY_INITIALIZER_LBRACE" value="true" />
-        <option name="CALL_PARAMETERS_WRAP" value="1" />
-        <option name="METHOD_PARAMETERS_WRAP" value="1" />
-        <option name="EXTENDS_LIST_WRAP" value="1" />
-        <option name="THROWS_KEYWORD_WRAP" value="1" />
-        <option name="METHOD_CALL_CHAIN_WRAP" value="1" />
-        <option name="BINARY_OPERATION_WRAP" value="1" />
-        <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />
-        <option name="TERNARY_OPERATION_WRAP" value="1" />
-        <option name="TERNARY_OPERATION_SIGNS_ON_NEXT_LINE" value="true" />
-        <option name="FOR_STATEMENT_WRAP" value="1" />
-        <option name="ARRAY_INITIALIZER_WRAP" value="1" />
-        <option name="WRAP_COMMENTS" value="true" />
-        <option name="IF_BRACE_FORCE" value="3" />
-        <option name="DOWHILE_BRACE_FORCE" value="3" />
-        <option name="WHILE_BRACE_FORCE" value="3" />
-        <option name="FOR_BRACE_FORCE" value="3" />
-        <AndroidXmlCodeStyleSettings>
-          <option name="USE_CUSTOM_SETTINGS" value="true" />
-          <option name="LAYOUT_SETTINGS">
-            <value>
-              <option name="INSERT_BLANK_LINE_BEFORE_TAG" value="false" />
-            </value>
-          </option>
-        </AndroidXmlCodeStyleSettings>
-        <Objective-C>
-          <option name="INDENT_NAMESPACE_MEMBERS" value="0" />
-          <option name="INDENT_C_STRUCT_MEMBERS" value="2" />
-          <option name="INDENT_CLASS_MEMBERS" value="2" />
-          <option name="INDENT_VISIBILITY_KEYWORDS" value="1" />
-          <option name="INDENT_INSIDE_CODE_BLOCK" value="2" />
-          <option name="KEEP_STRUCTURES_IN_ONE_LINE" value="true" />
-          <option name="FUNCTION_PARAMETERS_WRAP" value="5" />
-          <option name="FUNCTION_CALL_ARGUMENTS_WRAP" value="5" />
-          <option name="TEMPLATE_CALL_ARGUMENTS_WRAP" value="5" />
-          <option name="TEMPLATE_CALL_ARGUMENTS_ALIGN_MULTILINE" value="true" />
-          <option name="ALIGN_INIT_LIST_IN_COLUMNS" value="false" />
-          <option name="SPACE_BEFORE_SUPERCLASS_COLON" value="false" />
-        </Objective-C>
-        <Objective-C-extensions>
-          <file>
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Import" />
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Macro" />
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Typedef" />
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Enum" />
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Constant" />
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Global" />
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Struct" />
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="FunctionPredecl" />
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Function" />
-          </file>
-          <class>
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Property" />
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Synthesize" />
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="InitMethod" />
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="StaticMethod" />
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="InstanceMethod" />
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="DeallocMethod" />
-          </class>
-          <extensions>
-            <pair source="cc" header="h" />
-            <pair source="c" header="h" />
-          </extensions>
-        </Objective-C-extensions>
-        <XML>
-          <option name="XML_ALIGN_ATTRIBUTES" value="false" />
-          <option name="XML_LEGACY_SETTINGS_IMPORTED" value="true" />
-        </XML>
-        <codeStyleSettings language="HTML">
-          <indentOptions>
-            <option name="INDENT_SIZE" value="2" />
-            <option name="CONTINUATION_INDENT_SIZE" value="4" />
-            <option name="TAB_SIZE" value="2" />
-          </indentOptions>
-        </codeStyleSettings>
-        <codeStyleSettings language="JAVA">
-          <option name="KEEP_CONTROL_STATEMENT_IN_ONE_LINE" value="false" />
-          <option name="KEEP_BLANK_LINES_IN_CODE" value="1" />
-          <option name="BLANK_LINES_AFTER_CLASS_HEADER" value="1" />
-          <option name="ALIGN_MULTILINE_PARAMETERS" value="false" />
-          <option name="ALIGN_MULTILINE_RESOURCES" value="false" />
-          <option name="ALIGN_MULTILINE_FOR" value="false" />
-          <option name="CALL_PARAMETERS_WRAP" value="1" />
-          <option name="METHOD_PARAMETERS_WRAP" value="1" />
-          <option name="EXTENDS_LIST_WRAP" value="1" />
-          <option name="THROWS_KEYWORD_WRAP" value="1" />
-          <option name="METHOD_CALL_CHAIN_WRAP" value="1" />
-          <option name="BINARY_OPERATION_WRAP" value="1" />
-          <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />
-          <option name="TERNARY_OPERATION_WRAP" value="1" />
-          <option name="TERNARY_OPERATION_SIGNS_ON_NEXT_LINE" value="true" />
-          <option name="FOR_STATEMENT_WRAP" value="1" />
-          <option name="ARRAY_INITIALIZER_WRAP" value="1" />
-          <option name="IF_BRACE_FORCE" value="3" />
-          <option name="DOWHILE_BRACE_FORCE" value="3" />
-          <option name="WHILE_BRACE_FORCE" value="3" />
-          <option name="FOR_BRACE_FORCE" value="3" />
-          <option name="PARENT_SETTINGS_INSTALLED" value="true" />
-          <indentOptions>
-            <option name="INDENT_SIZE" value="2" />
-            <option name="CONTINUATION_INDENT_SIZE" value="4" />
-            <option name="TAB_SIZE" value="2" />
-          </indentOptions>
-        </codeStyleSettings>
-        <codeStyleSettings language="JSON">
-          <indentOptions>
-            <option name="CONTINUATION_INDENT_SIZE" value="4" />
-            <option name="TAB_SIZE" value="2" />
-          </indentOptions>
-        </codeStyleSettings>
-        <codeStyleSettings language="ObjectiveC">
-          <option name="KEEP_BLANK_LINES_BEFORE_RBRACE" value="1" />
-          <option name="BLANK_LINES_BEFORE_IMPORTS" value="0" />
-          <option name="BLANK_LINES_AFTER_IMPORTS" value="0" />
-          <option name="BLANK_LINES_AROUND_CLASS" value="0" />
-          <option name="BLANK_LINES_AROUND_METHOD" value="0" />
-          <option name="BLANK_LINES_AROUND_METHOD_IN_INTERFACE" value="0" />
-          <option name="ALIGN_MULTILINE_BINARY_OPERATION" value="false" />
-          <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />
-          <option name="FOR_STATEMENT_WRAP" value="1" />
-          <option name="ASSIGNMENT_WRAP" value="1" />
-          <indentOptions>
-            <option name="INDENT_SIZE" value="2" />
-            <option name="CONTINUATION_INDENT_SIZE" value="4" />
-          </indentOptions>
-        </codeStyleSettings>
-        <codeStyleSettings language="XML">
-          <indentOptions>
-            <option name="INDENT_SIZE" value="2" />
-            <option name="CONTINUATION_INDENT_SIZE" value="2" />
-            <option name="TAB_SIZE" value="2" />
-          </indentOptions>
-          <arrangement>
-            <rules>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>xmlns:android</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>^$</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>xmlns:.*</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>^$</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                  <order>BY_NAME</order>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:id</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>style</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>^$</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>^$</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                  <order>BY_NAME</order>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:.*Style</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                  <order>BY_NAME</order>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:layout_width</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:layout_height</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:layout_weight</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:layout_margin</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:layout_marginTop</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:layout_marginBottom</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:layout_marginStart</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:layout_marginEnd</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:layout_marginLeft</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:layout_marginRight</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:layout_.*</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                  <order>BY_NAME</order>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:padding</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:paddingTop</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:paddingBottom</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:paddingStart</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:paddingEnd</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:paddingLeft</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:paddingRight</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*</NAME>
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                  <order>BY_NAME</order>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*</NAME>
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res-auto</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                  <order>BY_NAME</order>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*</NAME>
-                      <XML_NAMESPACE>http://schemas.android.com/tools</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                  <order>BY_NAME</order>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*</NAME>
-                      <XML_NAMESPACE>.*</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                  <order>BY_NAME</order>
-                </rule>
-              </section>
-            </rules>
-          </arrangement>
-        </codeStyleSettings>
-      </value>
-    </option>
-    <option name="USE_PER_PROJECT_SETTINGS" value="true" />
-  </component>
-</project>
diff --git a/demos/cast/src/main/res/layout/main_activity.xml b/demos/cast/src/main/res/layout/main_activity.xml
index 01e48cdea7..56d8c6f818 100644
--- a/demos/cast/src/main/res/layout/main_activity.xml
+++ b/demos/cast/src/main/res/layout/main_activity.xml
@@ -42,7 +42,10 @@
         android:layout_alignParentBottom="true"
         android:padding="30dp"/>
   </RelativeLayout>
-  <com.google.android.exoplayer2.ui.PlayerControlView android:id="@+id/cast_control_view"
+    <!--用controller_layout_id自定义controllerview-->
+    <!--app:controller_layout_id="@layout/small_video_exo_playback_control_view"-->
+
+    <com.google.android.exoplayer2.ui.PlayerControlView android:id="@+id/exo_controller"
       android:layout_width="match_parent"
       android:layout_height="0dp"
       android:layout_weight="2"
diff --git a/demos/main/src/main/AndroidManifest.xml b/demos/main/src/main/AndroidManifest.xml
index e80e37688d..973e5111e8 100644
--- a/demos/main/src/main/AndroidManifest.xml
+++ b/demos/main/src/main/AndroidManifest.xml
@@ -76,8 +76,9 @@
         <category android:name="android.intent.category.DEFAULT"/>
       </intent-filter>
     </activity>
+      <activity android:name=".PlayerActivityUntouched" />
 
-    <service android:name="com.google.android.exoplayer2.demo.DemoDownloadService"
+      <service android:name="com.google.android.exoplayer2.demo.DemoDownloadService"
         android:exported="false">
       <intent-filter>
         <action android:name="com.google.android.exoplayer.downloadService.action.RESTART"/>
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
index 483ab37369..06ac089783 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
@@ -23,14 +23,18 @@
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.util.DisplayMetrics;
 import android.util.Pair;
 import android.view.KeyEvent;
 import android.view.View;
 import android.view.View.OnClickListener;
+import android.view.ViewGroup;
 import android.widget.Button;
+import android.widget.FrameLayout;
 import android.widget.LinearLayout;
 import android.widget.TextView;
 import android.widget.Toast;
+
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.C.ContentType;
 import com.google.android.exoplayer2.DefaultRenderersFactory;
@@ -67,6 +71,7 @@
 import com.google.android.exoplayer2.trackselection.RandomTrackSelection;
 import com.google.android.exoplayer2.trackselection.TrackSelection;
 import com.google.android.exoplayer2.trackselection.TrackSelectionArray;
+import com.google.android.exoplayer2.ui.AspectRatioFrameLayout;
 import com.google.android.exoplayer2.ui.DebugTextViewHelper;
 import com.google.android.exoplayer2.ui.PlayerControlView;
 import com.google.android.exoplayer2.ui.PlayerView;
@@ -76,7 +81,10 @@
 import com.google.android.exoplayer2.upstream.HttpDataSource;
 import com.google.android.exoplayer2.util.ErrorMessageProvider;
 import com.google.android.exoplayer2.util.EventLogger;
+import com.google.android.exoplayer2.util.Log;
 import com.google.android.exoplayer2.util.Util;
+import com.google.android.exoplayer2.video.VideoListener;
+
 import java.lang.reflect.Constructor;
 import java.net.CookieHandler;
 import java.net.CookieManager;
@@ -84,686 +92,729 @@
 import java.util.List;
 import java.util.UUID;
 
-/** An activity that plays media using {@link SimpleExoPlayer}. */
+/**
+ * An activity that plays media using {@link SimpleExoPlayer}.
+ */
 public class PlayerActivity extends Activity
-    implements OnClickListener, PlaybackPreparer, PlayerControlView.VisibilityListener {
-
-  public static final String DRM_SCHEME_EXTRA = "drm_scheme";
-  public static final String DRM_LICENSE_URL_EXTRA = "drm_license_url";
-  public static final String DRM_KEY_REQUEST_PROPERTIES_EXTRA = "drm_key_request_properties";
-  public static final String DRM_MULTI_SESSION_EXTRA = "drm_multi_session";
-  public static final String PREFER_EXTENSION_DECODERS_EXTRA = "prefer_extension_decoders";
-
-  public static final String ACTION_VIEW = "com.google.android.exoplayer.demo.action.VIEW";
-  public static final String EXTENSION_EXTRA = "extension";
-
-  public static final String ACTION_VIEW_LIST =
-      "com.google.android.exoplayer.demo.action.VIEW_LIST";
-  public static final String URI_LIST_EXTRA = "uri_list";
-  public static final String EXTENSION_LIST_EXTRA = "extension_list";
-
-  public static final String AD_TAG_URI_EXTRA = "ad_tag_uri";
-
-  public static final String ABR_ALGORITHM_EXTRA = "abr_algorithm";
-  public static final String ABR_ALGORITHM_DEFAULT = "default";
-  public static final String ABR_ALGORITHM_RANDOM = "random";
-
-  public static final String SPHERICAL_STEREO_MODE_EXTRA = "spherical_stereo_mode";
-  public static final String SPHERICAL_STEREO_MODE_MONO = "mono";
-  public static final String SPHERICAL_STEREO_MODE_TOP_BOTTOM = "top_bottom";
-  public static final String SPHERICAL_STEREO_MODE_LEFT_RIGHT = "left_right";
-
-  // For backwards compatibility only.
-  private static final String DRM_SCHEME_UUID_EXTRA = "drm_scheme_uuid";
-
-  // Saved instance state keys.
-  private static final String KEY_TRACK_SELECTOR_PARAMETERS = "track_selector_parameters";
-  private static final String KEY_WINDOW = "window";
-  private static final String KEY_POSITION = "position";
-  private static final String KEY_AUTO_PLAY = "auto_play";
-
-  private static final CookieManager DEFAULT_COOKIE_MANAGER;
-  static {
-    DEFAULT_COOKIE_MANAGER = new CookieManager();
-    DEFAULT_COOKIE_MANAGER.setCookiePolicy(CookiePolicy.ACCEPT_ORIGINAL_SERVER);
-  }
-
-  private PlayerView playerView;
-  private LinearLayout debugRootView;
-  private TextView debugTextView;
-
-  private DataSource.Factory dataSourceFactory;
-  private SimpleExoPlayer player;
-  private FrameworkMediaDrm mediaDrm;
-  private MediaSource mediaSource;
-  private DefaultTrackSelector trackSelector;
-  private DefaultTrackSelector.Parameters trackSelectorParameters;
-  private DebugTextViewHelper debugViewHelper;
-  private TrackGroupArray lastSeenTrackGroupArray;
-
-  private boolean startAutoPlay;
-  private int startWindow;
-  private long startPosition;
-
-  // Fields used only for ad playback. The ads loader is loaded via reflection.
-
-  private AdsLoader adsLoader;
-  private Uri loadedAdTagUri;
-
-  // Activity lifecycle
-
-  @Override
-  public void onCreate(Bundle savedInstanceState) {
-    String sphericalStereoMode = getIntent().getStringExtra(SPHERICAL_STEREO_MODE_EXTRA);
-    if (sphericalStereoMode != null) {
-      setTheme(R.style.PlayerTheme_Spherical);
-    }
-    super.onCreate(savedInstanceState);
-    dataSourceFactory = buildDataSourceFactory();
-    if (CookieHandler.getDefault() != DEFAULT_COOKIE_MANAGER) {
-      CookieHandler.setDefault(DEFAULT_COOKIE_MANAGER);
-    }
-
-    setContentView(R.layout.player_activity);
-    View rootView = findViewById(R.id.root);
-    rootView.setOnClickListener(this);
-    debugRootView = findViewById(R.id.controls_root);
-    debugTextView = findViewById(R.id.debug_text_view);
-
-    playerView = findViewById(R.id.player_view);
-    playerView.setControllerVisibilityListener(this);
-    playerView.setErrorMessageProvider(new PlayerErrorMessageProvider());
-    playerView.requestFocus();
-    if (sphericalStereoMode != null) {
-      int stereoMode;
-      if (SPHERICAL_STEREO_MODE_MONO.equals(sphericalStereoMode)) {
-        stereoMode = C.STEREO_MODE_MONO;
-      } else if (SPHERICAL_STEREO_MODE_TOP_BOTTOM.equals(sphericalStereoMode)) {
-        stereoMode = C.STEREO_MODE_TOP_BOTTOM;
-      } else if (SPHERICAL_STEREO_MODE_LEFT_RIGHT.equals(sphericalStereoMode)) {
-        stereoMode = C.STEREO_MODE_LEFT_RIGHT;
-      } else {
-        showToast(R.string.error_unrecognized_stereo_mode);
-        finish();
-        return;
-      }
-      ((SphericalSurfaceView) playerView.getVideoSurfaceView()).setDefaultStereoMode(stereoMode);
-    }
-
-    if (savedInstanceState != null) {
-      trackSelectorParameters = savedInstanceState.getParcelable(KEY_TRACK_SELECTOR_PARAMETERS);
-      startAutoPlay = savedInstanceState.getBoolean(KEY_AUTO_PLAY);
-      startWindow = savedInstanceState.getInt(KEY_WINDOW);
-      startPosition = savedInstanceState.getLong(KEY_POSITION);
-    } else {
-      trackSelectorParameters = new DefaultTrackSelector.ParametersBuilder().build();
-      clearStartPosition();
-    }
-  }
-
-  @Override
-  public void onNewIntent(Intent intent) {
-    releasePlayer();
-    releaseAdsLoader();
-    clearStartPosition();
-    setIntent(intent);
-  }
-
-  @Override
-  public void onStart() {
-    super.onStart();
-    if (Util.SDK_INT > 23) {
-      initializePlayer();
-      if (playerView != null) {
-        playerView.onResume();
-      }
-    }
-  }
-
-  @Override
-  public void onResume() {
-    super.onResume();
-    if (Util.SDK_INT <= 23 || player == null) {
-      initializePlayer();
-      if (playerView != null) {
-        playerView.onResume();
-      }
-    }
-  }
-
-  @Override
-  public void onPause() {
-    super.onPause();
-    if (Util.SDK_INT <= 23) {
-      if (playerView != null) {
-        playerView.onPause();
-      }
-      releasePlayer();
-    }
-  }
-
-  @Override
-  public void onStop() {
-    super.onStop();
-    if (Util.SDK_INT > 23) {
-      if (playerView != null) {
-        playerView.onPause();
-      }
-      releasePlayer();
-    }
-  }
-
-  @Override
-  public void onDestroy() {
-    super.onDestroy();
-    releaseAdsLoader();
-  }
-
-  @Override
-  public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
-      @NonNull int[] grantResults) {
-    if (grantResults.length == 0) {
-      // Empty results are triggered if a permission is requested while another request was already
-      // pending and can be safely ignored in this case.
-      return;
-    }
-    if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
-      initializePlayer();
-    } else {
-      showToast(R.string.storage_permission_denied);
-      finish();
-    }
-  }
-
-  @Override
-  public void onSaveInstanceState(Bundle outState) {
-    updateTrackSelectorParameters();
-    updateStartPosition();
-    outState.putParcelable(KEY_TRACK_SELECTOR_PARAMETERS, trackSelectorParameters);
-    outState.putBoolean(KEY_AUTO_PLAY, startAutoPlay);
-    outState.putInt(KEY_WINDOW, startWindow);
-    outState.putLong(KEY_POSITION, startPosition);
-  }
-
-  // Activity input
-
-  @Override
-  public boolean dispatchKeyEvent(KeyEvent event) {
-    // See whether the player view wants to handle media or DPAD keys events.
-    return playerView.dispatchKeyEvent(event) || super.dispatchKeyEvent(event);
-  }
-
-  // OnClickListener methods
-
-  @Override
-  public void onClick(View view) {
-    if (view.getParent() == debugRootView) {
-      MappedTrackInfo mappedTrackInfo = trackSelector.getCurrentMappedTrackInfo();
-      if (mappedTrackInfo != null) {
-        CharSequence title = ((Button) view).getText();
-        int rendererIndex = (int) view.getTag();
-        int rendererType = mappedTrackInfo.getRendererType(rendererIndex);
-        boolean allowAdaptiveSelections =
-            rendererType == C.TRACK_TYPE_VIDEO
-                || (rendererType == C.TRACK_TYPE_AUDIO
-                    && mappedTrackInfo.getTypeSupport(C.TRACK_TYPE_VIDEO)
-                        == MappedTrackInfo.RENDERER_SUPPORT_NO_TRACKS);
-        Pair<AlertDialog, TrackSelectionView> dialogPair =
-            TrackSelectionView.getDialog(this, title, trackSelector, rendererIndex);
-        dialogPair.second.setShowDisableOption(true);
-        dialogPair.second.setAllowAdaptiveSelections(allowAdaptiveSelections);
-        dialogPair.first.show();
-      }
-    }
-  }
-
-  // PlaybackControlView.PlaybackPreparer implementation
-
-  @Override
-  public void preparePlayback() {
-    initializePlayer();
-  }
-
-  // PlaybackControlView.VisibilityListener implementation
-
-  @Override
-  public void onVisibilityChange(int visibility) {
-    debugRootView.setVisibility(visibility);
-  }
-
-  // Internal methods
-
-  private void initializePlayer() {
-    if (player == null) {
-      Intent intent = getIntent();
-      String action = intent.getAction();
-      Uri[] uris;
-      String[] extensions;
-      if (ACTION_VIEW.equals(action)) {
-        uris = new Uri[] {intent.getData()};
-        extensions = new String[] {intent.getStringExtra(EXTENSION_EXTRA)};
-      } else if (ACTION_VIEW_LIST.equals(action)) {
-        String[] uriStrings = intent.getStringArrayExtra(URI_LIST_EXTRA);
-        uris = new Uri[uriStrings.length];
-        for (int i = 0; i < uriStrings.length; i++) {
-          uris[i] = Uri.parse(uriStrings[i]);
+        implements OnClickListener, PlaybackPreparer, PlayerControlView.VisibilityListener {
+
+    public static final String DRM_SCHEME_EXTRA = "drm_scheme";
+    public static final String DRM_LICENSE_URL_EXTRA = "drm_license_url";
+    public static final String DRM_KEY_REQUEST_PROPERTIES_EXTRA = "drm_key_request_properties";
+    public static final String DRM_MULTI_SESSION_EXTRA = "drm_multi_session";
+    public static final String PREFER_EXTENSION_DECODERS_EXTRA = "prefer_extension_decoders";
+
+    public static final String ACTION_VIEW = "com.google.android.exoplayer.demo.action.VIEW";
+    public static final String EXTENSION_EXTRA = "extension";
+
+    public static final String ACTION_VIEW_LIST =
+            "com.google.android.exoplayer.demo.action.VIEW_LIST";
+    public static final String URI_LIST_EXTRA = "uri_list";
+    public static final String EXTENSION_LIST_EXTRA = "extension_list";
+
+    public static final String AD_TAG_URI_EXTRA = "ad_tag_uri";
+
+    public static final String ABR_ALGORITHM_EXTRA = "abr_algorithm";
+    public static final String ABR_ALGORITHM_DEFAULT = "default";
+    public static final String ABR_ALGORITHM_RANDOM = "random";
+
+    public static final String SPHERICAL_STEREO_MODE_EXTRA = "spherical_stereo_mode";
+    public static final String SPHERICAL_STEREO_MODE_MONO = "mono";
+    public static final String SPHERICAL_STEREO_MODE_TOP_BOTTOM = "top_bottom";
+    public static final String SPHERICAL_STEREO_MODE_LEFT_RIGHT = "left_right";
+
+    // For backwards compatibility only.
+    private static final String DRM_SCHEME_UUID_EXTRA = "drm_scheme_uuid";
+
+    // Saved instance state keys.
+    private static final String KEY_TRACK_SELECTOR_PARAMETERS = "track_selector_parameters";
+    private static final String KEY_WINDOW = "window";
+    private static final String KEY_POSITION = "position";
+    private static final String KEY_AUTO_PLAY = "auto_play";
+
+    private static final CookieManager DEFAULT_COOKIE_MANAGER;
+
+    static {
+        DEFAULT_COOKIE_MANAGER = new CookieManager();
+        DEFAULT_COOKIE_MANAGER.setCookiePolicy(CookiePolicy.ACCEPT_ORIGINAL_SERVER);
+    }
+
+    private PlayerView playerView;
+    private LinearLayout debugRootView;
+    private TextView debugTextView;
+
+    private DataSource.Factory dataSourceFactory;
+    private SimpleExoPlayer player;
+    private FrameworkMediaDrm mediaDrm;
+    private MediaSource mediaSource;
+    private DefaultTrackSelector trackSelector;
+    private DefaultTrackSelector.Parameters trackSelectorParameters;
+    private DebugTextViewHelper debugViewHelper;
+    private TrackGroupArray lastSeenTrackGroupArray;
+
+    private boolean startAutoPlay;
+    private int startWindow;
+    private long startPosition;
+
+    // Fields used only for ad playback. The ads loader is loaded via reflection.
+
+    private AdsLoader adsLoader;
+    private Uri loadedAdTagUri;
+
+    // Activity lifecycle
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        String sphericalStereoMode = getIntent().getStringExtra(SPHERICAL_STEREO_MODE_EXTRA);
+        if (sphericalStereoMode != null) {
+            setTheme(R.style.PlayerTheme_Spherical);
         }
-        extensions = intent.getStringArrayExtra(EXTENSION_LIST_EXTRA);
-        if (extensions == null) {
-          extensions = new String[uriStrings.length];
+        super.onCreate(savedInstanceState);
+        dataSourceFactory = buildDataSourceFactory();
+        if (CookieHandler.getDefault() != DEFAULT_COOKIE_MANAGER) {
+            CookieHandler.setDefault(DEFAULT_COOKIE_MANAGER);
         }
-      } else {
-        showToast(getString(R.string.unexpected_intent_action, action));
-        finish();
-        return;
-      }
-      if (!Util.checkCleartextTrafficPermitted(uris)) {
-        showToast(R.string.error_cleartext_not_permitted);
-        return;
-      }
-      if (Util.maybeRequestReadExternalStoragePermission(/* activity= */ this, uris)) {
-        // The player will be reinitialized if the permission is granted.
-        return;
-      }
-
-      DefaultDrmSessionManager<FrameworkMediaCrypto> drmSessionManager = null;
-      if (intent.hasExtra(DRM_SCHEME_EXTRA) || intent.hasExtra(DRM_SCHEME_UUID_EXTRA)) {
-        String drmLicenseUrl = intent.getStringExtra(DRM_LICENSE_URL_EXTRA);
-        String[] keyRequestPropertiesArray =
-            intent.getStringArrayExtra(DRM_KEY_REQUEST_PROPERTIES_EXTRA);
-        boolean multiSession = intent.getBooleanExtra(DRM_MULTI_SESSION_EXTRA, false);
-        int errorStringId = R.string.error_drm_unknown;
-        if (Util.SDK_INT < 18) {
-          errorStringId = R.string.error_drm_not_supported;
-        } else {
-          try {
-            String drmSchemeExtra = intent.hasExtra(DRM_SCHEME_EXTRA) ? DRM_SCHEME_EXTRA
-                : DRM_SCHEME_UUID_EXTRA;
-            UUID drmSchemeUuid = Util.getDrmUuid(intent.getStringExtra(drmSchemeExtra));
-            if (drmSchemeUuid == null) {
-              errorStringId = R.string.error_drm_unsupported_scheme;
+
+        setContentView(R.layout.player_activity);
+        View rootView = findViewById(R.id.root);
+        rootView.setOnClickListener(this);
+        debugRootView = findViewById(R.id.controls_root);
+        debugTextView = findViewById(R.id.debug_text_view);
+
+        playerView = findViewById(R.id.player_view);
+        playerView.setControllerVisibilityListener(this);
+        playerView.setErrorMessageProvider(new PlayerErrorMessageProvider());
+        playerView.requestFocus();
+        if (sphericalStereoMode != null) {
+            int stereoMode;
+            if (SPHERICAL_STEREO_MODE_MONO.equals(sphericalStereoMode)) {
+                stereoMode = C.STEREO_MODE_MONO;
+            } else if (SPHERICAL_STEREO_MODE_TOP_BOTTOM.equals(sphericalStereoMode)) {
+                stereoMode = C.STEREO_MODE_TOP_BOTTOM;
+            } else if (SPHERICAL_STEREO_MODE_LEFT_RIGHT.equals(sphericalStereoMode)) {
+                stereoMode = C.STEREO_MODE_LEFT_RIGHT;
             } else {
-              drmSessionManager =
-                  buildDrmSessionManagerV18(
-                      drmSchemeUuid, drmLicenseUrl, keyRequestPropertiesArray, multiSession);
+                showToast(R.string.error_unrecognized_stereo_mode);
+                finish();
+                return;
             }
-          } catch (UnsupportedDrmException e) {
-            errorStringId = e.reason == UnsupportedDrmException.REASON_UNSUPPORTED_SCHEME
-                ? R.string.error_drm_unsupported_scheme : R.string.error_drm_unknown;
-          }
-        }
-        if (drmSessionManager == null) {
-          showToast(errorStringId);
-          finish();
-          return;
+            ((SphericalSurfaceView) playerView.getVideoSurfaceView()).setDefaultStereoMode(stereoMode);
         }
-      }
-
-      TrackSelection.Factory trackSelectionFactory;
-      String abrAlgorithm = intent.getStringExtra(ABR_ALGORITHM_EXTRA);
-      if (abrAlgorithm == null || ABR_ALGORITHM_DEFAULT.equals(abrAlgorithm)) {
-        trackSelectionFactory = new AdaptiveTrackSelection.Factory();
-      } else if (ABR_ALGORITHM_RANDOM.equals(abrAlgorithm)) {
-        trackSelectionFactory = new RandomTrackSelection.Factory();
-      } else {
-        showToast(R.string.error_unrecognized_abr_algorithm);
-        finish();
-        return;
-      }
-
-      boolean preferExtensionDecoders =
-          intent.getBooleanExtra(PREFER_EXTENSION_DECODERS_EXTRA, false);
-      @DefaultRenderersFactory.ExtensionRendererMode int extensionRendererMode =
-          ((DemoApplication) getApplication()).useExtensionRenderers()
-              ? (preferExtensionDecoders ? DefaultRenderersFactory.EXTENSION_RENDERER_MODE_PREFER
-              : DefaultRenderersFactory.EXTENSION_RENDERER_MODE_ON)
-              : DefaultRenderersFactory.EXTENSION_RENDERER_MODE_OFF;
-      DefaultRenderersFactory renderersFactory =
-          new DefaultRenderersFactory(this, extensionRendererMode);
-
-      trackSelector = new DefaultTrackSelector(trackSelectionFactory);
-      trackSelector.setParameters(trackSelectorParameters);
-      lastSeenTrackGroupArray = null;
-
-      player =
-          ExoPlayerFactory.newSimpleInstance(
-              /* context= */ this, renderersFactory, trackSelector, drmSessionManager);
-      player.addListener(new PlayerEventListener());
-      player.setPlayWhenReady(startAutoPlay);
-      player.addAnalyticsListener(new EventLogger(trackSelector));
-      playerView.setPlayer(player);
-      playerView.setPlaybackPreparer(this);
-      debugViewHelper = new DebugTextViewHelper(player, debugTextView);
-      debugViewHelper.start();
-
-      MediaSource[] mediaSources = new MediaSource[uris.length];
-      for (int i = 0; i < uris.length; i++) {
-        mediaSources[i] = buildMediaSource(uris[i], extensions[i]);
-      }
-      mediaSource =
-          mediaSources.length == 1 ? mediaSources[0] : new ConcatenatingMediaSource(mediaSources);
-      String adTagUriString = intent.getStringExtra(AD_TAG_URI_EXTRA);
-      if (adTagUriString != null) {
-        Uri adTagUri = Uri.parse(adTagUriString);
-        if (!adTagUri.equals(loadedAdTagUri)) {
-          releaseAdsLoader();
-          loadedAdTagUri = adTagUri;
-        }
-        MediaSource adsMediaSource = createAdsMediaSource(mediaSource, Uri.parse(adTagUriString));
-        if (adsMediaSource != null) {
-          mediaSource = adsMediaSource;
+
+        if (savedInstanceState != null) {
+            trackSelectorParameters = savedInstanceState.getParcelable(KEY_TRACK_SELECTOR_PARAMETERS);
+            startAutoPlay = savedInstanceState.getBoolean(KEY_AUTO_PLAY);
+            startWindow = savedInstanceState.getInt(KEY_WINDOW);
+            startPosition = savedInstanceState.getLong(KEY_POSITION);
         } else {
-          showToast(R.string.ima_not_loaded);
+            trackSelectorParameters = new DefaultTrackSelector.ParametersBuilder().build();
+            clearStartPosition();
         }
-      } else {
+
+        DisplayMetrics displayMetrics = new DisplayMetrics();
+        getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
+        int screenHeight = displayMetrics.heightPixels;
+        int screenWidth = displayMetrics.widthPixels;
+
+//        playerView.setAspectRatioListener(new AspectRatioFrameLayout.AspectRatioListener() {
+//            @Override
+//            public void onAspectRatioUpdated(float targetAspectRatio, float naturalAspectRatio, boolean aspectRatioMismatch) {
+//                System.out.print("pixelAspectRatio is " + targetAspectRatio);
+//                System.out.print("naturalAspectRatio is " + naturalAspectRatio);
+//                System.out.print("aspectRatioMismatch is " + aspectRatioMismatch);
+//            }
+//        });
+
+        playerView.setLayoutParams(new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, (int) (screenWidth / 16 * 9)));
+    }
+
+    @Override
+    public void onNewIntent(Intent intent) {
+        releasePlayer();
         releaseAdsLoader();
-      }
-    }
-    boolean haveStartPosition = startWindow != C.INDEX_UNSET;
-    if (haveStartPosition) {
-      player.seekTo(startWindow, startPosition);
-    }
-    player.prepare(mediaSource, !haveStartPosition, false);
-    updateButtonVisibilities();
-  }
-
-  private MediaSource buildMediaSource(Uri uri) {
-    return buildMediaSource(uri, null);
-  }
-
-  private MediaSource buildMediaSource(Uri uri, @Nullable String overrideExtension) {
-    @ContentType int type = Util.inferContentType(uri, overrideExtension);
-    switch (type) {
-      case C.TYPE_DASH:
-        return new DashMediaSource.Factory(dataSourceFactory)
-            .setManifestParser(
-                new FilteringManifestParser<>(new DashManifestParser(), getOfflineStreamKeys(uri)))
-            .createMediaSource(uri);
-      case C.TYPE_SS:
-        return new SsMediaSource.Factory(dataSourceFactory)
-            .setManifestParser(
-                new FilteringManifestParser<>(new SsManifestParser(), getOfflineStreamKeys(uri)))
-            .createMediaSource(uri);
-      case C.TYPE_HLS:
-        return new HlsMediaSource.Factory(dataSourceFactory)
-            .setPlaylistParserFactory(
-                new DefaultHlsPlaylistParserFactory(getOfflineStreamKeys(uri)))
-            .createMediaSource(uri);
-      case C.TYPE_OTHER:
-        return new ExtractorMediaSource.Factory(dataSourceFactory).createMediaSource(uri);
-      default: {
-        throw new IllegalStateException("Unsupported type: " + type);
-      }
-    }
-  }
-
-  private List<StreamKey> getOfflineStreamKeys(Uri uri) {
-    return ((DemoApplication) getApplication()).getDownloadTracker().getOfflineStreamKeys(uri);
-  }
-
-  private DefaultDrmSessionManager<FrameworkMediaCrypto> buildDrmSessionManagerV18(
-      UUID uuid, String licenseUrl, String[] keyRequestPropertiesArray, boolean multiSession)
-      throws UnsupportedDrmException {
-    HttpDataSource.Factory licenseDataSourceFactory =
-        ((DemoApplication) getApplication()).buildHttpDataSourceFactory();
-    HttpMediaDrmCallback drmCallback =
-        new HttpMediaDrmCallback(licenseUrl, licenseDataSourceFactory);
-    if (keyRequestPropertiesArray != null) {
-      for (int i = 0; i < keyRequestPropertiesArray.length - 1; i += 2) {
-        drmCallback.setKeyRequestProperty(keyRequestPropertiesArray[i],
-            keyRequestPropertiesArray[i + 1]);
-      }
-    }
-    releaseMediaDrm();
-    mediaDrm = FrameworkMediaDrm.newInstance(uuid);
-    return new DefaultDrmSessionManager<>(uuid, mediaDrm, drmCallback, null, multiSession);
-  }
-
-  private void releasePlayer() {
-    if (player != null) {
-      updateTrackSelectorParameters();
-      updateStartPosition();
-      debugViewHelper.stop();
-      debugViewHelper = null;
-      player.release();
-      player = null;
-      mediaSource = null;
-      trackSelector = null;
-    }
-    if (adsLoader != null) {
-      adsLoader.setPlayer(null);
-    }
-    releaseMediaDrm();
-  }
-
-  private void releaseMediaDrm() {
-    if (mediaDrm != null) {
-      mediaDrm.release();
-      mediaDrm = null;
-    }
-  }
-
-  private void releaseAdsLoader() {
-    if (adsLoader != null) {
-      adsLoader.release();
-      adsLoader = null;
-      loadedAdTagUri = null;
-      playerView.getOverlayFrameLayout().removeAllViews();
-    }
-  }
-
-  private void updateTrackSelectorParameters() {
-    if (trackSelector != null) {
-      trackSelectorParameters = trackSelector.getParameters();
-    }
-  }
-
-  private void updateStartPosition() {
-    if (player != null) {
-      startAutoPlay = player.getPlayWhenReady();
-      startWindow = player.getCurrentWindowIndex();
-      startPosition = Math.max(0, player.getContentPosition());
-    }
-  }
-
-  private void clearStartPosition() {
-    startAutoPlay = true;
-    startWindow = C.INDEX_UNSET;
-    startPosition = C.TIME_UNSET;
-  }
-
-  /** Returns a new DataSource factory. */
-  private DataSource.Factory buildDataSourceFactory() {
-    return ((DemoApplication) getApplication()).buildDataSourceFactory();
-  }
-
-  /** Returns an ads media source, reusing the ads loader if one exists. */
-  private @Nullable MediaSource createAdsMediaSource(MediaSource mediaSource, Uri adTagUri) {
-    // Load the extension source using reflection so the demo app doesn't have to depend on it.
-    // The ads loader is reused for multiple playbacks, so that ad playback can resume.
-    try {
-      Class<?> loaderClass = Class.forName("com.google.android.exoplayer2.ext.ima.ImaAdsLoader");
-      if (adsLoader == null) {
-        // Full class names used so the LINT.IfChange rule triggers should any of the classes move.
-        // LINT.IfChange
-        Constructor<? extends AdsLoader> loaderConstructor =
-            loaderClass
-                .asSubclass(AdsLoader.class)
-                .getConstructor(android.content.Context.class, android.net.Uri.class);
-        // LINT.ThenChange(../../../../../../../../proguard-rules.txt)
-        adsLoader = loaderConstructor.newInstance(this, adTagUri);
-      }
-      adsLoader.setPlayer(player);
-      AdsMediaSource.MediaSourceFactory adMediaSourceFactory =
-          new AdsMediaSource.MediaSourceFactory() {
-            @Override
-            public MediaSource createMediaSource(Uri uri) {
-              return PlayerActivity.this.buildMediaSource(uri);
+        clearStartPosition();
+        setIntent(intent);
+    }
+
+    @Override
+    public void onStart() {
+        super.onStart();
+        if (Util.SDK_INT > 23) {
+            initializePlayer();
+            if (playerView != null) {
+                playerView.onResume();
             }
+        }
+    }
 
-            @Override
-            public int[] getSupportedTypes() {
-              return new int[] {C.TYPE_DASH, C.TYPE_SS, C.TYPE_HLS, C.TYPE_OTHER};
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (Util.SDK_INT <= 23 || player == null) {
+            initializePlayer();
+            if (playerView != null) {
+                playerView.onResume();
             }
-          };
-      return new AdsMediaSource(mediaSource, adMediaSourceFactory, adsLoader, playerView);
-    } catch (ClassNotFoundException e) {
-      // IMA extension not loaded.
-      return null;
-    } catch (Exception e) {
-      throw new RuntimeException(e);
-    }
-  }
-
-  // User controls
-
-  private void updateButtonVisibilities() {
-    debugRootView.removeAllViews();
-    if (player == null) {
-      return;
-    }
-
-    MappedTrackInfo mappedTrackInfo = trackSelector.getCurrentMappedTrackInfo();
-    if (mappedTrackInfo == null) {
-      return;
-    }
-
-    for (int i = 0; i < mappedTrackInfo.getRendererCount(); i++) {
-      TrackGroupArray trackGroups = mappedTrackInfo.getTrackGroups(i);
-      if (trackGroups.length != 0) {
-        Button button = new Button(this);
-        int label;
-        switch (player.getRendererType(i)) {
-          case C.TRACK_TYPE_AUDIO:
-            label = R.string.exo_track_selection_title_audio;
-            break;
-          case C.TRACK_TYPE_VIDEO:
-            label = R.string.exo_track_selection_title_video;
-            break;
-          case C.TRACK_TYPE_TEXT:
-            label = R.string.exo_track_selection_title_text;
-            break;
-          default:
-            continue;
         }
-        button.setText(label);
-        button.setTag(i);
-        button.setOnClickListener(this);
-        debugRootView.addView(button);
-      }
     }
-  }
 
-  private void showControls() {
-    debugRootView.setVisibility(View.VISIBLE);
-  }
+    @Override
+    public void onPause() {
+        super.onPause();
+        if (Util.SDK_INT <= 23) {
+            if (playerView != null) {
+                playerView.onPause();
+            }
+            releasePlayer();
+        }
+    }
 
-  private void showToast(int messageId) {
-    showToast(getString(messageId));
-  }
+    @Override
+    public void onStop() {
+        super.onStop();
+        if (Util.SDK_INT > 23) {
+            if (playerView != null) {
+                playerView.onPause();
+            }
+            releasePlayer();
+        }
+    }
 
-  private void showToast(String message) {
-    Toast.makeText(getApplicationContext(), message, Toast.LENGTH_LONG).show();
-  }
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        releaseAdsLoader();
+    }
 
-  private static boolean isBehindLiveWindow(ExoPlaybackException e) {
-    if (e.type != ExoPlaybackException.TYPE_SOURCE) {
-      return false;
+    @Override
+    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
+                                           @NonNull int[] grantResults) {
+        if (grantResults.length == 0) {
+            // Empty results are triggered if a permission is requested while another request was already
+            // pending and can be safely ignored in this case.
+            return;
+        }
+        if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+            initializePlayer();
+        } else {
+            showToast(R.string.storage_permission_denied);
+            finish();
+        }
     }
-    Throwable cause = e.getSourceException();
-    while (cause != null) {
-      if (cause instanceof BehindLiveWindowException) {
-        return true;
-      }
-      cause = cause.getCause();
+
+    @Override
+    public void onSaveInstanceState(Bundle outState) {
+        updateTrackSelectorParameters();
+        updateStartPosition();
+        outState.putParcelable(KEY_TRACK_SELECTOR_PARAMETERS, trackSelectorParameters);
+        outState.putBoolean(KEY_AUTO_PLAY, startAutoPlay);
+        outState.putInt(KEY_WINDOW, startWindow);
+        outState.putLong(KEY_POSITION, startPosition);
     }
-    return false;
-  }
 
-  private class PlayerEventListener implements Player.EventListener {
+    // Activity input
 
     @Override
-    public void onPlayerStateChanged(boolean playWhenReady, int playbackState) {
-      if (playbackState == Player.STATE_ENDED) {
-        showControls();
-      }
-      updateButtonVisibilities();
+    public boolean dispatchKeyEvent(KeyEvent event) {
+        // See whether the player view wants to handle media or DPAD keys events.
+        return playerView.dispatchKeyEvent(event) || super.dispatchKeyEvent(event);
     }
 
+    // OnClickListener methods
+
     @Override
-    public void onPositionDiscontinuity(@Player.DiscontinuityReason int reason) {
-      if (player.getPlaybackError() != null) {
-        // The user has performed a seek whilst in the error state. Update the resume position so
-        // that if the user then retries, playback resumes from the position to which they seeked.
-        updateStartPosition();
-      }
-    }
+    public void onClick(View view) {
+//        if (view.getParent() == debugRootView) {
+//            MappedTrackInfo mappedTrackInfo = trackSelector.getCurrentMappedTrackInfo();
+//            if (mappedTrackInfo != null) {
+//                CharSequence title = ((Button) view).getText();
+//                int rendererIndex = (int) view.getTag();
+//                int rendererType = mappedTrackInfo.getRendererType(rendererIndex);
+//                boolean allowAdaptiveSelections =
+//                        rendererType == C.TRACK_TYPE_VIDEO
+//                                || (rendererType == C.TRACK_TYPE_AUDIO
+//                                && mappedTrackInfo.getTypeSupport(C.TRACK_TYPE_VIDEO)
+//                                == MappedTrackInfo.RENDERER_SUPPORT_NO_TRACKS);
+//                Pair<AlertDialog, TrackSelectionView> dialogPair =
+//                        TrackSelectionView.getDialog(this, title, trackSelector, rendererIndex);
+//                dialogPair.second.setShowDisableOption(true);
+//                dialogPair.second.setAllowAdaptiveSelections(allowAdaptiveSelections);
+//                dialogPair.first.show();
+//            }
+//        }
+    }
+
+    // PlaybackControlView.PlaybackPreparer implementation
 
     @Override
-    public void onPlayerError(ExoPlaybackException e) {
-      if (isBehindLiveWindow(e)) {
-        clearStartPosition();
+    public void preparePlayback() {
         initializePlayer();
-      } else {
-        updateStartPosition();
-        updateButtonVisibilities();
-        showControls();
-      }
     }
 
+    // PlaybackControlView.VisibilityListener implementation
+
     @Override
-    @SuppressWarnings("ReferenceEquality")
-    public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray trackSelections) {
-      updateButtonVisibilities();
-      if (trackGroups != lastSeenTrackGroupArray) {
+    public void onVisibilityChange(int visibility) {
+//        debugRootView.setVisibility(visibility);
+        //调试信息
+        debugRootView.setVisibility(View.GONE);
+    }
+
+    // Internal methods
+
+    private void initializePlayer() {
+        if (player == null) {
+            Intent intent = getIntent();
+            String action = intent.getAction();
+            Uri[] uris;
+            String[] extensions;
+            if (ACTION_VIEW.equals(action)) {
+                uris = new Uri[]{intent.getData()};
+                extensions = new String[]{intent.getStringExtra(EXTENSION_EXTRA)};
+            } else if (ACTION_VIEW_LIST.equals(action)) {
+                String[] uriStrings = intent.getStringArrayExtra(URI_LIST_EXTRA);
+                uris = new Uri[uriStrings.length];
+                for (int i = 0; i < uriStrings.length; i++) {
+                    uris[i] = Uri.parse(uriStrings[i]);
+                }
+                extensions = intent.getStringArrayExtra(EXTENSION_LIST_EXTRA);
+                if (extensions == null) {
+                    extensions = new String[uriStrings.length];
+                }
+            } else {
+                showToast(getString(R.string.unexpected_intent_action, action));
+                finish();
+                return;
+            }
+            if (!Util.checkCleartextTrafficPermitted(uris)) {
+                showToast(R.string.error_cleartext_not_permitted);
+                return;
+            }
+            if (Util.maybeRequestReadExternalStoragePermission(/* activity= */ this, uris)) {
+                // The player will be reinitialized if the permission is granted.
+                return;
+            }
+
+            DefaultDrmSessionManager<FrameworkMediaCrypto> drmSessionManager = null;
+            if (intent.hasExtra(DRM_SCHEME_EXTRA) || intent.hasExtra(DRM_SCHEME_UUID_EXTRA)) {
+                String drmLicenseUrl = intent.getStringExtra(DRM_LICENSE_URL_EXTRA);
+                String[] keyRequestPropertiesArray =
+                        intent.getStringArrayExtra(DRM_KEY_REQUEST_PROPERTIES_EXTRA);
+                boolean multiSession = intent.getBooleanExtra(DRM_MULTI_SESSION_EXTRA, false);
+                int errorStringId = R.string.error_drm_unknown;
+                if (Util.SDK_INT < 18) {
+                    errorStringId = R.string.error_drm_not_supported;
+                } else {
+                    try {
+                        String drmSchemeExtra = intent.hasExtra(DRM_SCHEME_EXTRA) ? DRM_SCHEME_EXTRA
+                                : DRM_SCHEME_UUID_EXTRA;
+                        UUID drmSchemeUuid = Util.getDrmUuid(intent.getStringExtra(drmSchemeExtra));
+                        if (drmSchemeUuid == null) {
+                            errorStringId = R.string.error_drm_unsupported_scheme;
+                        } else {
+                            drmSessionManager =
+                                    buildDrmSessionManagerV18(
+                                            drmSchemeUuid, drmLicenseUrl, keyRequestPropertiesArray, multiSession);
+                        }
+                    } catch (UnsupportedDrmException e) {
+                        errorStringId = e.reason == UnsupportedDrmException.REASON_UNSUPPORTED_SCHEME
+                                ? R.string.error_drm_unsupported_scheme : R.string.error_drm_unknown;
+                    }
+                }
+                if (drmSessionManager == null) {
+                    showToast(errorStringId);
+                    finish();
+                    return;
+                }
+            }
+
+            TrackSelection.Factory trackSelectionFactory;
+            String abrAlgorithm = intent.getStringExtra(ABR_ALGORITHM_EXTRA);
+            if (abrAlgorithm == null || ABR_ALGORITHM_DEFAULT.equals(abrAlgorithm)) {
+                trackSelectionFactory = new AdaptiveTrackSelection.Factory();
+            } else if (ABR_ALGORITHM_RANDOM.equals(abrAlgorithm)) {
+                trackSelectionFactory = new RandomTrackSelection.Factory();
+            } else {
+                showToast(R.string.error_unrecognized_abr_algorithm);
+                finish();
+                return;
+            }
+
+            boolean preferExtensionDecoders =
+                    intent.getBooleanExtra(PREFER_EXTENSION_DECODERS_EXTRA, false);
+            @DefaultRenderersFactory.ExtensionRendererMode int extensionRendererMode =
+                    ((DemoApplication) getApplication()).useExtensionRenderers()
+                            ? (preferExtensionDecoders ? DefaultRenderersFactory.EXTENSION_RENDERER_MODE_PREFER
+                            : DefaultRenderersFactory.EXTENSION_RENDERER_MODE_ON)
+                            : DefaultRenderersFactory.EXTENSION_RENDERER_MODE_OFF;
+            DefaultRenderersFactory renderersFactory =
+                    new DefaultRenderersFactory(this, extensionRendererMode);
+
+            trackSelector = new DefaultTrackSelector(trackSelectionFactory);
+            trackSelector.setParameters(trackSelectorParameters);
+            lastSeenTrackGroupArray = null;
+
+            player =
+                    ExoPlayerFactory.newSimpleInstance(
+                            /* context= */ this, renderersFactory, trackSelector, drmSessionManager);
+            player.addListener(new PlayerEventListener());
+            player.addVideoListener(new VideoListener() {
+                @Override
+                public void onVideoSizeChanged(int width, int height, int unappliedRotationDegrees, float pixelWidthHeightRatio) {
+                    Log.d("ccc", "onVideoSizeChanged>>> width is " + width + ">>> unappliedRotationDegrees is " + unappliedRotationDegrees + ">>> pixelWidthHeightRatio is " + pixelWidthHeightRatio);
+                }
+
+                @Override
+                public void onSurfaceSizeChanged(int width, int height) {
+                    Log.d("ccc", "onSurfaceSizeChanged>>> width is " + width + ">>> height is " + height);
+                }
+
+                @Override
+                public void onRenderedFirstFrame() {
+                    Log.d("ccc","render first frame");
+                }
+            });
+            player.setPlayWhenReady(startAutoPlay);
+            player.addAnalyticsListener(new EventLogger(trackSelector));
+            playerView.setPlayer(player);
+            playerView.setPlaybackPreparer(this);
+            playerView.setResizeMode(AspectRatioFrameLayout.RESIZE_MODE_FIXED_HEIGHT);
+            debugViewHelper = new DebugTextViewHelper(player, debugTextView);
+            debugViewHelper.start();
+
+            MediaSource[] mediaSources = new MediaSource[uris.length];
+            for (int i = 0; i < uris.length; i++) {
+                mediaSources[i] = buildMediaSource(uris[i], extensions[i]);
+            }
+            mediaSource =
+                    mediaSources.length == 1 ? mediaSources[0] : new ConcatenatingMediaSource(mediaSources);
+            String adTagUriString = intent.getStringExtra(AD_TAG_URI_EXTRA);
+            if (adTagUriString != null) {
+                Uri adTagUri = Uri.parse(adTagUriString);
+                if (!adTagUri.equals(loadedAdTagUri)) {
+                    releaseAdsLoader();
+                    loadedAdTagUri = adTagUri;
+                }
+                MediaSource adsMediaSource = createAdsMediaSource(mediaSource, Uri.parse(adTagUriString));
+                if (adsMediaSource != null) {
+                    mediaSource = adsMediaSource;
+                } else {
+                    showToast(R.string.ima_not_loaded);
+                }
+            } else {
+                releaseAdsLoader();
+            }
+        }
+        boolean haveStartPosition = startWindow != C.INDEX_UNSET;
+        if (haveStartPosition) {
+            player.seekTo(startWindow, startPosition);
+        }
+        player.prepare(mediaSource, !haveStartPosition, false);
+        updateButtonVisibilities();
+    }
+
+    private MediaSource buildMediaSource(Uri uri) {
+        return buildMediaSource(uri, null);
+    }
+
+    private MediaSource buildMediaSource(Uri uri, @Nullable String overrideExtension) {
+        @ContentType int type = Util.inferContentType(uri, overrideExtension);
+        switch (type) {
+            case C.TYPE_DASH:
+                return new DashMediaSource.Factory(dataSourceFactory)
+                        .setManifestParser(
+                                new FilteringManifestParser<>(new DashManifestParser(), getOfflineStreamKeys(uri)))
+                        .createMediaSource(uri);
+            case C.TYPE_SS:
+                return new SsMediaSource.Factory(dataSourceFactory)
+                        .setManifestParser(
+                                new FilteringManifestParser<>(new SsManifestParser(), getOfflineStreamKeys(uri)))
+                        .createMediaSource(uri);
+            case C.TYPE_HLS:
+                return new HlsMediaSource.Factory(dataSourceFactory)
+                        .setPlaylistParserFactory(
+                                new DefaultHlsPlaylistParserFactory(getOfflineStreamKeys(uri)))
+                        .createMediaSource(uri);
+            case C.TYPE_OTHER:
+                return new ExtractorMediaSource.Factory(dataSourceFactory).createMediaSource(uri);
+            default: {
+                throw new IllegalStateException("Unsupported type: " + type);
+            }
+        }
+    }
+
+    private List<StreamKey> getOfflineStreamKeys(Uri uri) {
+        return ((DemoApplication) getApplication()).getDownloadTracker().getOfflineStreamKeys(uri);
+    }
+
+    private DefaultDrmSessionManager<FrameworkMediaCrypto> buildDrmSessionManagerV18(
+            UUID uuid, String licenseUrl, String[] keyRequestPropertiesArray, boolean multiSession)
+            throws UnsupportedDrmException {
+        HttpDataSource.Factory licenseDataSourceFactory =
+                ((DemoApplication) getApplication()).buildHttpDataSourceFactory();
+        HttpMediaDrmCallback drmCallback =
+                new HttpMediaDrmCallback(licenseUrl, licenseDataSourceFactory);
+        if (keyRequestPropertiesArray != null) {
+            for (int i = 0; i < keyRequestPropertiesArray.length - 1; i += 2) {
+                drmCallback.setKeyRequestProperty(keyRequestPropertiesArray[i],
+                        keyRequestPropertiesArray[i + 1]);
+            }
+        }
+        releaseMediaDrm();
+        mediaDrm = FrameworkMediaDrm.newInstance(uuid);
+        return new DefaultDrmSessionManager<>(uuid, mediaDrm, drmCallback, null, multiSession);
+    }
+
+    private void releasePlayer() {
+        if (player != null) {
+            updateTrackSelectorParameters();
+            updateStartPosition();
+            debugViewHelper.stop();
+            debugViewHelper = null;
+            player.release();
+            player = null;
+            mediaSource = null;
+            trackSelector = null;
+        }
+        if (adsLoader != null) {
+            adsLoader.setPlayer(null);
+        }
+        releaseMediaDrm();
+    }
+
+    private void releaseMediaDrm() {
+        if (mediaDrm != null) {
+            mediaDrm.release();
+            mediaDrm = null;
+        }
+    }
+
+    private void releaseAdsLoader() {
+        if (adsLoader != null) {
+            adsLoader.release();
+            adsLoader = null;
+            loadedAdTagUri = null;
+            playerView.getOverlayFrameLayout().removeAllViews();
+        }
+    }
+
+    private void updateTrackSelectorParameters() {
+        if (trackSelector != null) {
+            trackSelectorParameters = trackSelector.getParameters();
+        }
+    }
+
+    private void updateStartPosition() {
+        if (player != null) {
+            startAutoPlay = player.getPlayWhenReady();
+            startWindow = player.getCurrentWindowIndex();
+            startPosition = Math.max(0, player.getContentPosition());
+        }
+    }
+
+    private void clearStartPosition() {
+        startAutoPlay = true;
+        startWindow = C.INDEX_UNSET;
+        startPosition = C.TIME_UNSET;
+    }
+
+    /**
+     * Returns a new DataSource factory.
+     */
+    private DataSource.Factory buildDataSourceFactory() {
+        return ((DemoApplication) getApplication()).buildDataSourceFactory();
+    }
+
+    /**
+     * Returns an ads media source, reusing the ads loader if one exists.
+     */
+    private @Nullable
+    MediaSource createAdsMediaSource(MediaSource mediaSource, Uri adTagUri) {
+        // Load the extension source using reflection so the demo app doesn't have to depend on it.
+        // The ads loader is reused for multiple playbacks, so that ad playback can resume.
+        try {
+            Class<?> loaderClass = Class.forName("com.google.android.exoplayer2.ext.ima.ImaAdsLoader");
+            if (adsLoader == null) {
+                // Full class names used so the LINT.IfChange rule triggers should any of the classes move.
+                // LINT.IfChange
+                Constructor<? extends AdsLoader> loaderConstructor =
+                        loaderClass
+                                .asSubclass(AdsLoader.class)
+                                .getConstructor(android.content.Context.class, android.net.Uri.class);
+                // LINT.ThenChange(../../../../../../../../proguard-rules.txt)
+                adsLoader = loaderConstructor.newInstance(this, adTagUri);
+            }
+            adsLoader.setPlayer(player);
+            AdsMediaSource.MediaSourceFactory adMediaSourceFactory =
+                    new AdsMediaSource.MediaSourceFactory() {
+                        @Override
+                        public MediaSource createMediaSource(Uri uri) {
+                            return PlayerActivity.this.buildMediaSource(uri);
+                        }
+
+                        @Override
+                        public int[] getSupportedTypes() {
+                            return new int[]{C.TYPE_DASH, C.TYPE_SS, C.TYPE_HLS, C.TYPE_OTHER};
+                        }
+                    };
+            return new AdsMediaSource(mediaSource, adMediaSourceFactory, adsLoader, playerView);
+        } catch (ClassNotFoundException e) {
+            // IMA extension not loaded.
+            return null;
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    // User controls
+
+    private void updateButtonVisibilities() {
+        debugRootView.removeAllViews();
+        if (player == null) {
+            return;
+        }
+
         MappedTrackInfo mappedTrackInfo = trackSelector.getCurrentMappedTrackInfo();
-        if (mappedTrackInfo != null) {
-          if (mappedTrackInfo.getTypeSupport(C.TRACK_TYPE_VIDEO)
-              == MappedTrackInfo.RENDERER_SUPPORT_UNSUPPORTED_TRACKS) {
-            showToast(R.string.error_unsupported_video);
-          }
-          if (mappedTrackInfo.getTypeSupport(C.TRACK_TYPE_AUDIO)
-              == MappedTrackInfo.RENDERER_SUPPORT_UNSUPPORTED_TRACKS) {
-            showToast(R.string.error_unsupported_audio);
-          }
+        if (mappedTrackInfo == null) {
+            return;
+        }
+
+        for (int i = 0; i < mappedTrackInfo.getRendererCount(); i++) {
+            TrackGroupArray trackGroups = mappedTrackInfo.getTrackGroups(i);
+            if (trackGroups.length != 0) {
+                Button button = new Button(this);
+                int label;
+                switch (player.getRendererType(i)) {
+                    case C.TRACK_TYPE_AUDIO:
+                        label = R.string.exo_track_selection_title_audio;
+                        break;
+                    case C.TRACK_TYPE_VIDEO:
+                        label = R.string.exo_track_selection_title_video;
+                        break;
+                    case C.TRACK_TYPE_TEXT:
+                        label = R.string.exo_track_selection_title_text;
+                        break;
+                    default:
+                        continue;
+                }
+                button.setText(label);
+                button.setTag(i);
+                button.setOnClickListener(this);
+//                debugRootView.addView(button);
+            }
         }
-        lastSeenTrackGroupArray = trackGroups;
-      }
     }
-  }
 
-  private class PlayerErrorMessageProvider implements ErrorMessageProvider<ExoPlaybackException> {
+    private void showControls() {
+        debugRootView.setVisibility(View.VISIBLE);
+    }
 
-    @Override
-    public Pair<Integer, String> getErrorMessage(ExoPlaybackException e) {
-      String errorString = getString(R.string.error_generic);
-      if (e.type == ExoPlaybackException.TYPE_RENDERER) {
-        Exception cause = e.getRendererException();
-        if (cause instanceof DecoderInitializationException) {
-          // Special case for decoder initialization failures.
-          DecoderInitializationException decoderInitializationException =
-              (DecoderInitializationException) cause;
-          if (decoderInitializationException.decoderName == null) {
-            if (decoderInitializationException.getCause() instanceof DecoderQueryException) {
-              errorString = getString(R.string.error_querying_decoders);
-            } else if (decoderInitializationException.secureDecoderRequired) {
-              errorString =
-                  getString(
-                      R.string.error_no_secure_decoder, decoderInitializationException.mimeType);
+    private void showToast(int messageId) {
+        showToast(getString(messageId));
+    }
+
+    private void showToast(String message) {
+        Toast.makeText(getApplicationContext(), message, Toast.LENGTH_LONG).show();
+    }
+
+    private static boolean isBehindLiveWindow(ExoPlaybackException e) {
+        if (e.type != ExoPlaybackException.TYPE_SOURCE) {
+            return false;
+        }
+        Throwable cause = e.getSourceException();
+        while (cause != null) {
+            if (cause instanceof BehindLiveWindowException) {
+                return true;
+            }
+            cause = cause.getCause();
+        }
+        return false;
+    }
+
+    private class PlayerEventListener implements Player.EventListener {
+
+        @Override
+        public void onPlayerStateChanged(boolean playWhenReady, int playbackState) {
+            if (playbackState == Player.STATE_ENDED) {
+                showControls();
+            }
+            updateButtonVisibilities();
+        }
+
+        @Override
+        public void onPositionDiscontinuity(@Player.DiscontinuityReason int reason) {
+            if (player.getPlaybackError() != null) {
+                // The user has performed a seek whilst in the error state. Update the resume position so
+                // that if the user then retries, playback resumes from the position to which they seeked.
+                updateStartPosition();
+            }
+        }
+
+        @Override
+        public void onPlayerError(ExoPlaybackException e) {
+            if (isBehindLiveWindow(e)) {
+                clearStartPosition();
+                initializePlayer();
             } else {
-              errorString =
-                  getString(R.string.error_no_decoder, decoderInitializationException.mimeType);
+                updateStartPosition();
+                updateButtonVisibilities();
+                showControls();
+            }
+        }
+
+        @Override
+        @SuppressWarnings("ReferenceEquality")
+        public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray trackSelections) {
+            updateButtonVisibilities();
+            if (trackGroups != lastSeenTrackGroupArray) {
+                MappedTrackInfo mappedTrackInfo = trackSelector.getCurrentMappedTrackInfo();
+                if (mappedTrackInfo != null) {
+                    if (mappedTrackInfo.getTypeSupport(C.TRACK_TYPE_VIDEO)
+                            == MappedTrackInfo.RENDERER_SUPPORT_UNSUPPORTED_TRACKS) {
+                        showToast(R.string.error_unsupported_video);
+                    }
+                    if (mappedTrackInfo.getTypeSupport(C.TRACK_TYPE_AUDIO)
+                            == MappedTrackInfo.RENDERER_SUPPORT_UNSUPPORTED_TRACKS) {
+                        showToast(R.string.error_unsupported_audio);
+                    }
+                }
+                lastSeenTrackGroupArray = trackGroups;
+            }
+        }
+    }
+
+    private class PlayerErrorMessageProvider implements ErrorMessageProvider<ExoPlaybackException> {
+
+        @Override
+        public Pair<Integer, String> getErrorMessage(ExoPlaybackException e) {
+            String errorString = getString(R.string.error_generic);
+            if (e.type == ExoPlaybackException.TYPE_RENDERER) {
+                Exception cause = e.getRendererException();
+                if (cause instanceof DecoderInitializationException) {
+                    // Special case for decoder initialization failures.
+                    DecoderInitializationException decoderInitializationException =
+                            (DecoderInitializationException) cause;
+                    if (decoderInitializationException.decoderName == null) {
+                        if (decoderInitializationException.getCause() instanceof DecoderQueryException) {
+                            errorString = getString(R.string.error_querying_decoders);
+                        } else if (decoderInitializationException.secureDecoderRequired) {
+                            errorString =
+                                    getString(
+                                            R.string.error_no_secure_decoder, decoderInitializationException.mimeType);
+                        } else {
+                            errorString =
+                                    getString(R.string.error_no_decoder, decoderInitializationException.mimeType);
+                        }
+                    } else {
+                        errorString =
+                                getString(
+                                        R.string.error_instantiating_decoder,
+                                        decoderInitializationException.decoderName);
+                    }
+                }
             }
-          } else {
-            errorString =
-                getString(
-                    R.string.error_instantiating_decoder,
-                    decoderInitializationException.decoderName);
-          }
+            return Pair.create(0, errorString);
         }
-      }
-      return Pair.create(0, errorString);
     }
-  }
 
 }
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivityUntouched.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivityUntouched.java
new file mode 100644
index 0000000000..2b72f93dd4
--- /dev/null
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivityUntouched.java
@@ -0,0 +1,783 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.android.exoplayer2.demo;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.net.Uri;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.util.Pair;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.C.ContentType;
+import com.google.android.exoplayer2.DefaultRenderersFactory;
+import com.google.android.exoplayer2.ExoPlaybackException;
+import com.google.android.exoplayer2.ExoPlayerFactory;
+import com.google.android.exoplayer2.PlaybackPreparer;
+import com.google.android.exoplayer2.Player;
+import com.google.android.exoplayer2.SimpleExoPlayer;
+import com.google.android.exoplayer2.drm.DefaultDrmSessionManager;
+import com.google.android.exoplayer2.drm.FrameworkMediaCrypto;
+import com.google.android.exoplayer2.drm.FrameworkMediaDrm;
+import com.google.android.exoplayer2.drm.HttpMediaDrmCallback;
+import com.google.android.exoplayer2.drm.UnsupportedDrmException;
+import com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.DecoderInitializationException;
+import com.google.android.exoplayer2.mediacodec.MediaCodecUtil.DecoderQueryException;
+import com.google.android.exoplayer2.offline.FilteringManifestParser;
+import com.google.android.exoplayer2.offline.StreamKey;
+import com.google.android.exoplayer2.source.BehindLiveWindowException;
+import com.google.android.exoplayer2.source.ConcatenatingMediaSource;
+import com.google.android.exoplayer2.source.ExtractorMediaSource;
+import com.google.android.exoplayer2.source.MediaSource;
+import com.google.android.exoplayer2.source.TrackGroupArray;
+import com.google.android.exoplayer2.source.ads.AdsLoader;
+import com.google.android.exoplayer2.source.ads.AdsMediaSource;
+import com.google.android.exoplayer2.source.dash.DashMediaSource;
+import com.google.android.exoplayer2.source.dash.manifest.DashManifestParser;
+import com.google.android.exoplayer2.source.hls.HlsMediaSource;
+import com.google.android.exoplayer2.source.hls.playlist.DefaultHlsPlaylistParserFactory;
+import com.google.android.exoplayer2.source.smoothstreaming.SsMediaSource;
+import com.google.android.exoplayer2.source.smoothstreaming.manifest.SsManifestParser;
+import com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection;
+import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;
+import com.google.android.exoplayer2.trackselection.MappingTrackSelector.MappedTrackInfo;
+import com.google.android.exoplayer2.trackselection.RandomTrackSelection;
+import com.google.android.exoplayer2.trackselection.TrackSelection;
+import com.google.android.exoplayer2.trackselection.TrackSelectionArray;
+import com.google.android.exoplayer2.ui.DebugTextViewHelper;
+import com.google.android.exoplayer2.ui.PlayerControlView;
+import com.google.android.exoplayer2.ui.PlayerView;
+import com.google.android.exoplayer2.ui.TrackSelectionView;
+import com.google.android.exoplayer2.ui.spherical.SphericalSurfaceView;
+import com.google.android.exoplayer2.upstream.DataSource;
+import com.google.android.exoplayer2.upstream.HttpDataSource;
+import com.google.android.exoplayer2.util.ErrorMessageProvider;
+import com.google.android.exoplayer2.util.EventLogger;
+import com.google.android.exoplayer2.util.Util;
+
+import java.lang.reflect.Constructor;
+import java.net.CookieHandler;
+import java.net.CookieManager;
+import java.net.CookiePolicy;
+import java.util.List;
+import java.util.UUID;
+
+/**
+ * An activity that plays media using {@link SimpleExoPlayer}.
+ */
+public class PlayerActivityUntouched extends Activity
+        implements OnClickListener, PlaybackPreparer, PlayerControlView.VisibilityListener {
+
+    public static final String DRM_SCHEME_EXTRA = "drm_scheme";
+    public static final String DRM_LICENSE_URL_EXTRA = "drm_license_url";
+    public static final String DRM_KEY_REQUEST_PROPERTIES_EXTRA = "drm_key_request_properties";
+    public static final String DRM_MULTI_SESSION_EXTRA = "drm_multi_session";
+    public static final String PREFER_EXTENSION_DECODERS_EXTRA = "prefer_extension_decoders";
+
+    public static final String ACTION_VIEW = "com.google.android.exoplayer.demo.action.VIEW";
+    public static final String EXTENSION_EXTRA = "extension";
+
+    public static final String ACTION_VIEW_LIST =
+            "com.google.android.exoplayer.demo.action.VIEW_LIST";
+    public static final String URI_LIST_EXTRA = "uri_list";
+    public static final String EXTENSION_LIST_EXTRA = "extension_list";
+
+    public static final String AD_TAG_URI_EXTRA = "ad_tag_uri";
+
+    public static final String ABR_ALGORITHM_EXTRA = "abr_algorithm";
+    public static final String ABR_ALGORITHM_DEFAULT = "default";
+    public static final String ABR_ALGORITHM_RANDOM = "random";
+
+    public static final String SPHERICAL_STEREO_MODE_EXTRA = "spherical_stereo_mode";
+    public static final String SPHERICAL_STEREO_MODE_MONO = "mono";
+    public static final String SPHERICAL_STEREO_MODE_TOP_BOTTOM = "top_bottom";
+    public static final String SPHERICAL_STEREO_MODE_LEFT_RIGHT = "left_right";
+
+    // For backwards compatibility only.
+    private static final String DRM_SCHEME_UUID_EXTRA = "drm_scheme_uuid";
+
+    // Saved instance state keys.
+    private static final String KEY_TRACK_SELECTOR_PARAMETERS = "track_selector_parameters";
+    private static final String KEY_WINDOW = "window";
+    private static final String KEY_POSITION = "position";
+    private static final String KEY_AUTO_PLAY = "auto_play";
+
+    private static final CookieManager DEFAULT_COOKIE_MANAGER;
+
+    static {
+        DEFAULT_COOKIE_MANAGER = new CookieManager();
+        DEFAULT_COOKIE_MANAGER.setCookiePolicy(CookiePolicy.ACCEPT_ORIGINAL_SERVER);
+    }
+
+    private PlayerView playerView;
+    private LinearLayout debugRootView;
+    private TextView debugTextView;
+
+    private DataSource.Factory dataSourceFactory;
+    private SimpleExoPlayer player;
+    private FrameworkMediaDrm mediaDrm;
+    private MediaSource mediaSource;
+    private DefaultTrackSelector trackSelector;
+    private DefaultTrackSelector.Parameters trackSelectorParameters;
+    private DebugTextViewHelper debugViewHelper;
+    private TrackGroupArray lastSeenTrackGroupArray;
+
+    private boolean startAutoPlay;
+    private int startWindow;
+    private long startPosition;
+
+    // Fields used only for ad playback. The ads loader is loaded via reflection.
+
+    private AdsLoader adsLoader;
+    private Uri loadedAdTagUri;
+
+    // Activity lifecycle
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        String sphericalStereoMode = getIntent().getStringExtra(SPHERICAL_STEREO_MODE_EXTRA);
+        if (sphericalStereoMode != null) {
+            setTheme(R.style.PlayerTheme_Spherical);
+        }
+        super.onCreate(savedInstanceState);
+        dataSourceFactory = buildDataSourceFactory();
+        if (CookieHandler.getDefault() != DEFAULT_COOKIE_MANAGER) {
+            CookieHandler.setDefault(DEFAULT_COOKIE_MANAGER);
+        }
+
+        setContentView(R.layout.player_activity);
+        View rootView = findViewById(R.id.root);
+        rootView.setOnClickListener(this);
+        debugRootView = findViewById(R.id.controls_root);
+        debugTextView = findViewById(R.id.debug_text_view);
+
+        playerView = findViewById(R.id.player_view);
+        playerView.setControllerVisibilityListener(this);
+        playerView.setErrorMessageProvider(new PlayerErrorMessageProvider());
+        playerView.requestFocus();
+        if (sphericalStereoMode != null) {
+            int stereoMode;
+            if (SPHERICAL_STEREO_MODE_MONO.equals(sphericalStereoMode)) {
+                stereoMode = C.STEREO_MODE_MONO;
+            } else if (SPHERICAL_STEREO_MODE_TOP_BOTTOM.equals(sphericalStereoMode)) {
+                stereoMode = C.STEREO_MODE_TOP_BOTTOM;
+            } else if (SPHERICAL_STEREO_MODE_LEFT_RIGHT.equals(sphericalStereoMode)) {
+                stereoMode = C.STEREO_MODE_LEFT_RIGHT;
+            } else {
+                showToast(R.string.error_unrecognized_stereo_mode);
+                finish();
+                return;
+            }
+            ((SphericalSurfaceView) playerView.getVideoSurfaceView()).setDefaultStereoMode(stereoMode);
+        }
+
+        if (savedInstanceState != null) {
+            trackSelectorParameters = savedInstanceState.getParcelable(KEY_TRACK_SELECTOR_PARAMETERS);
+            startAutoPlay = savedInstanceState.getBoolean(KEY_AUTO_PLAY);
+            startWindow = savedInstanceState.getInt(KEY_WINDOW);
+            startPosition = savedInstanceState.getLong(KEY_POSITION);
+        } else {
+            trackSelectorParameters = new DefaultTrackSelector.ParametersBuilder().build();
+            clearStartPosition();
+        }
+
+        playerView.setLayoutParams(new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 100));
+    }
+
+    @Override
+    public void onNewIntent(Intent intent) {
+        releasePlayer();
+        releaseAdsLoader();
+        clearStartPosition();
+        setIntent(intent);
+    }
+
+    @Override
+    public void onStart() {
+        super.onStart();
+        if (Util.SDK_INT > 23) {
+            initializePlayer();
+            if (playerView != null) {
+                playerView.onResume();
+            }
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (Util.SDK_INT <= 23 || player == null) {
+            initializePlayer();
+            if (playerView != null) {
+                playerView.onResume();
+            }
+        }
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        if (Util.SDK_INT <= 23) {
+            if (playerView != null) {
+                playerView.onPause();
+            }
+            releasePlayer();
+        }
+    }
+
+    @Override
+    public void onStop() {
+        super.onStop();
+        if (Util.SDK_INT > 23) {
+            if (playerView != null) {
+                playerView.onPause();
+            }
+            releasePlayer();
+        }
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        releaseAdsLoader();
+    }
+
+    @Override
+    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
+                                           @NonNull int[] grantResults) {
+        if (grantResults.length == 0) {
+            // Empty results are triggered if a permission is requested while another request was already
+            // pending and can be safely ignored in this case.
+            return;
+        }
+        if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+            initializePlayer();
+        } else {
+            showToast(R.string.storage_permission_denied);
+            finish();
+        }
+    }
+
+    @Override
+    public void onSaveInstanceState(Bundle outState) {
+        updateTrackSelectorParameters();
+        updateStartPosition();
+        outState.putParcelable(KEY_TRACK_SELECTOR_PARAMETERS, trackSelectorParameters);
+        outState.putBoolean(KEY_AUTO_PLAY, startAutoPlay);
+        outState.putInt(KEY_WINDOW, startWindow);
+        outState.putLong(KEY_POSITION, startPosition);
+    }
+
+    // Activity input
+
+    @Override
+    public boolean dispatchKeyEvent(KeyEvent event) {
+        // See whether the player view wants to handle media or DPAD keys events.
+        return playerView.dispatchKeyEvent(event) || super.dispatchKeyEvent(event);
+    }
+
+    // OnClickListener methods
+
+    @Override
+    public void onClick(View view) {
+        if (view.getParent() == debugRootView) {
+            MappedTrackInfo mappedTrackInfo = trackSelector.getCurrentMappedTrackInfo();
+            if (mappedTrackInfo != null) {
+                CharSequence title = ((Button) view).getText();
+                int rendererIndex = (int) view.getTag();
+                int rendererType = mappedTrackInfo.getRendererType(rendererIndex);
+                boolean allowAdaptiveSelections =
+                        rendererType == C.TRACK_TYPE_VIDEO
+                                || (rendererType == C.TRACK_TYPE_AUDIO
+                                && mappedTrackInfo.getTypeSupport(C.TRACK_TYPE_VIDEO)
+                                == MappedTrackInfo.RENDERER_SUPPORT_NO_TRACKS);
+                Pair<AlertDialog, TrackSelectionView> dialogPair =
+                        TrackSelectionView.getDialog(this, title, trackSelector, rendererIndex);
+                dialogPair.second.setShowDisableOption(true);
+                dialogPair.second.setAllowAdaptiveSelections(allowAdaptiveSelections);
+                dialogPair.first.show();
+            }
+        }
+    }
+
+    // PlaybackControlView.PlaybackPreparer implementation
+
+    @Override
+    public void preparePlayback() {
+        initializePlayer();
+    }
+
+    // PlaybackControlView.VisibilityListener implementation
+
+    @Override
+    public void onVisibilityChange(int visibility) {
+        debugRootView.setVisibility(visibility);
+    }
+
+    // Internal methods
+
+    private void initializePlayer() {
+        if (player == null) {
+            Intent intent = getIntent();
+            String action = intent.getAction();
+            Uri[] uris;
+            String[] extensions;
+            if (ACTION_VIEW.equals(action)) {
+                uris = new Uri[]{intent.getData()};
+                extensions = new String[]{intent.getStringExtra(EXTENSION_EXTRA)};
+            } else if (ACTION_VIEW_LIST.equals(action)) {
+                String[] uriStrings = intent.getStringArrayExtra(URI_LIST_EXTRA);
+                uris = new Uri[uriStrings.length];
+                for (int i = 0; i < uriStrings.length; i++) {
+                    uris[i] = Uri.parse(uriStrings[i]);
+                }
+                extensions = intent.getStringArrayExtra(EXTENSION_LIST_EXTRA);
+                if (extensions == null) {
+                    extensions = new String[uriStrings.length];
+                }
+            } else {
+                showToast(getString(R.string.unexpected_intent_action, action));
+                finish();
+                return;
+            }
+            if (!Util.checkCleartextTrafficPermitted(uris)) {
+                showToast(R.string.error_cleartext_not_permitted);
+                return;
+            }
+            if (Util.maybeRequestReadExternalStoragePermission(/* activity= */ this, uris)) {
+                // The player will be reinitialized if the permission is granted.
+                return;
+            }
+
+            DefaultDrmSessionManager<FrameworkMediaCrypto> drmSessionManager = null;
+            if (intent.hasExtra(DRM_SCHEME_EXTRA) || intent.hasExtra(DRM_SCHEME_UUID_EXTRA)) {
+                String drmLicenseUrl = intent.getStringExtra(DRM_LICENSE_URL_EXTRA);
+                String[] keyRequestPropertiesArray =
+                        intent.getStringArrayExtra(DRM_KEY_REQUEST_PROPERTIES_EXTRA);
+                boolean multiSession = intent.getBooleanExtra(DRM_MULTI_SESSION_EXTRA, false);
+                int errorStringId = R.string.error_drm_unknown;
+                if (Util.SDK_INT < 18) {
+                    errorStringId = R.string.error_drm_not_supported;
+                } else {
+                    try {
+                        String drmSchemeExtra = intent.hasExtra(DRM_SCHEME_EXTRA) ? DRM_SCHEME_EXTRA
+                                : DRM_SCHEME_UUID_EXTRA;
+                        UUID drmSchemeUuid = Util.getDrmUuid(intent.getStringExtra(drmSchemeExtra));
+                        if (drmSchemeUuid == null) {
+                            errorStringId = R.string.error_drm_unsupported_scheme;
+                        } else {
+                            drmSessionManager =
+                                    buildDrmSessionManagerV18(
+                                            drmSchemeUuid, drmLicenseUrl, keyRequestPropertiesArray, multiSession);
+                        }
+                    } catch (UnsupportedDrmException e) {
+                        errorStringId = e.reason == UnsupportedDrmException.REASON_UNSUPPORTED_SCHEME
+                                ? R.string.error_drm_unsupported_scheme : R.string.error_drm_unknown;
+                    }
+                }
+                if (drmSessionManager == null) {
+                    showToast(errorStringId);
+                    finish();
+                    return;
+                }
+            }
+
+            TrackSelection.Factory trackSelectionFactory;
+            String abrAlgorithm = intent.getStringExtra(ABR_ALGORITHM_EXTRA);
+            if (abrAlgorithm == null || ABR_ALGORITHM_DEFAULT.equals(abrAlgorithm)) {
+                trackSelectionFactory = new AdaptiveTrackSelection.Factory();
+            } else if (ABR_ALGORITHM_RANDOM.equals(abrAlgorithm)) {
+                trackSelectionFactory = new RandomTrackSelection.Factory();
+            } else {
+                showToast(R.string.error_unrecognized_abr_algorithm);
+                finish();
+                return;
+            }
+
+            boolean preferExtensionDecoders =
+                    intent.getBooleanExtra(PREFER_EXTENSION_DECODERS_EXTRA, false);
+            @DefaultRenderersFactory.ExtensionRendererMode int extensionRendererMode =
+                    ((DemoApplication) getApplication()).useExtensionRenderers()
+                            ? (preferExtensionDecoders ? DefaultRenderersFactory.EXTENSION_RENDERER_MODE_PREFER
+                            : DefaultRenderersFactory.EXTENSION_RENDERER_MODE_ON)
+                            : DefaultRenderersFactory.EXTENSION_RENDERER_MODE_OFF;
+            DefaultRenderersFactory renderersFactory =
+                    new DefaultRenderersFactory(this, extensionRendererMode);
+
+            trackSelector = new DefaultTrackSelector(trackSelectionFactory);
+            trackSelector.setParameters(trackSelectorParameters);
+            lastSeenTrackGroupArray = null;
+
+            player =
+                    ExoPlayerFactory.newSimpleInstance(
+                            /* context= */ this, renderersFactory, trackSelector, drmSessionManager);
+            player.addListener(new PlayerEventListener());
+            player.setPlayWhenReady(startAutoPlay);
+            player.addAnalyticsListener(new EventLogger(trackSelector));
+            playerView.setPlayer(player);
+            playerView.setPlaybackPreparer(this);
+            debugViewHelper = new DebugTextViewHelper(player, debugTextView);
+            debugViewHelper.start();
+
+            MediaSource[] mediaSources = new MediaSource[uris.length];
+            for (int i = 0; i < uris.length; i++) {
+                mediaSources[i] = buildMediaSource(uris[i], extensions[i]);
+            }
+            mediaSource =
+                    mediaSources.length == 1 ? mediaSources[0] : new ConcatenatingMediaSource(mediaSources);
+            String adTagUriString = intent.getStringExtra(AD_TAG_URI_EXTRA);
+            if (adTagUriString != null) {
+                Uri adTagUri = Uri.parse(adTagUriString);
+                if (!adTagUri.equals(loadedAdTagUri)) {
+                    releaseAdsLoader();
+                    loadedAdTagUri = adTagUri;
+                }
+                MediaSource adsMediaSource = createAdsMediaSource(mediaSource, Uri.parse(adTagUriString));
+                if (adsMediaSource != null) {
+                    mediaSource = adsMediaSource;
+                } else {
+                    showToast(R.string.ima_not_loaded);
+                }
+            } else {
+                releaseAdsLoader();
+            }
+        }
+        boolean haveStartPosition = startWindow != C.INDEX_UNSET;
+        if (haveStartPosition) {
+            player.seekTo(startWindow, startPosition);
+        }
+        player.prepare(mediaSource, !haveStartPosition, false);
+        updateButtonVisibilities();
+    }
+
+    private MediaSource buildMediaSource(Uri uri) {
+        return buildMediaSource(uri, null);
+    }
+
+    private MediaSource buildMediaSource(Uri uri, @Nullable String overrideExtension) {
+        @ContentType int type = Util.inferContentType(uri, overrideExtension);
+        switch (type) {
+            case C.TYPE_DASH:
+                return new DashMediaSource.Factory(dataSourceFactory)
+                        .setManifestParser(
+                                new FilteringManifestParser<>(new DashManifestParser(), getOfflineStreamKeys(uri)))
+                        .createMediaSource(uri);
+            case C.TYPE_SS:
+                return new SsMediaSource.Factory(dataSourceFactory)
+                        .setManifestParser(
+                                new FilteringManifestParser<>(new SsManifestParser(), getOfflineStreamKeys(uri)))
+                        .createMediaSource(uri);
+            case C.TYPE_HLS:
+                return new HlsMediaSource.Factory(dataSourceFactory)
+                        .setPlaylistParserFactory(
+                                new DefaultHlsPlaylistParserFactory(getOfflineStreamKeys(uri)))
+                        .createMediaSource(uri);
+            case C.TYPE_OTHER:
+                return new ExtractorMediaSource.Factory(dataSourceFactory).createMediaSource(uri);
+            default: {
+                throw new IllegalStateException("Unsupported type: " + type);
+            }
+        }
+    }
+
+    private List<StreamKey> getOfflineStreamKeys(Uri uri) {
+        return ((DemoApplication) getApplication()).getDownloadTracker().getOfflineStreamKeys(uri);
+    }
+
+    private DefaultDrmSessionManager<FrameworkMediaCrypto> buildDrmSessionManagerV18(
+            UUID uuid, String licenseUrl, String[] keyRequestPropertiesArray, boolean multiSession)
+            throws UnsupportedDrmException {
+        HttpDataSource.Factory licenseDataSourceFactory =
+                ((DemoApplication) getApplication()).buildHttpDataSourceFactory();
+        HttpMediaDrmCallback drmCallback =
+                new HttpMediaDrmCallback(licenseUrl, licenseDataSourceFactory);
+        if (keyRequestPropertiesArray != null) {
+            for (int i = 0; i < keyRequestPropertiesArray.length - 1; i += 2) {
+                drmCallback.setKeyRequestProperty(keyRequestPropertiesArray[i],
+                        keyRequestPropertiesArray[i + 1]);
+            }
+        }
+        releaseMediaDrm();
+        mediaDrm = FrameworkMediaDrm.newInstance(uuid);
+        return new DefaultDrmSessionManager<>(uuid, mediaDrm, drmCallback, null, multiSession);
+    }
+
+    private void releasePlayer() {
+        if (player != null) {
+            updateTrackSelectorParameters();
+            updateStartPosition();
+            debugViewHelper.stop();
+            debugViewHelper = null;
+            player.release();
+            player = null;
+            mediaSource = null;
+            trackSelector = null;
+        }
+        if (adsLoader != null) {
+            adsLoader.setPlayer(null);
+        }
+        releaseMediaDrm();
+    }
+
+    private void releaseMediaDrm() {
+        if (mediaDrm != null) {
+            mediaDrm.release();
+            mediaDrm = null;
+        }
+    }
+
+    private void releaseAdsLoader() {
+        if (adsLoader != null) {
+            adsLoader.release();
+            adsLoader = null;
+            loadedAdTagUri = null;
+            playerView.getOverlayFrameLayout().removeAllViews();
+        }
+    }
+
+    private void updateTrackSelectorParameters() {
+        if (trackSelector != null) {
+            trackSelectorParameters = trackSelector.getParameters();
+        }
+    }
+
+    private void updateStartPosition() {
+        if (player != null) {
+            startAutoPlay = player.getPlayWhenReady();
+            startWindow = player.getCurrentWindowIndex();
+            startPosition = Math.max(0, player.getContentPosition());
+        }
+    }
+
+    private void clearStartPosition() {
+        startAutoPlay = true;
+        startWindow = C.INDEX_UNSET;
+        startPosition = C.TIME_UNSET;
+    }
+
+    /**
+     * Returns a new DataSource factory.
+     */
+    private DataSource.Factory buildDataSourceFactory() {
+        return ((DemoApplication) getApplication()).buildDataSourceFactory();
+    }
+
+    /**
+     * Returns an ads media source, reusing the ads loader if one exists.
+     */
+    private @Nullable
+    MediaSource createAdsMediaSource(MediaSource mediaSource, Uri adTagUri) {
+        // Load the extension source using reflection so the demo app doesn't have to depend on it.
+        // The ads loader is reused for multiple playbacks, so that ad playback can resume.
+        try {
+            Class<?> loaderClass = Class.forName("com.google.android.exoplayer2.ext.ima.ImaAdsLoader");
+            if (adsLoader == null) {
+                // Full class names used so the LINT.IfChange rule triggers should any of the classes move.
+                // LINT.IfChange
+                Constructor<? extends AdsLoader> loaderConstructor =
+                        loaderClass
+                                .asSubclass(AdsLoader.class)
+                                .getConstructor(android.content.Context.class, Uri.class);
+                // LINT.ThenChange(../../../../../../../../proguard-rules.txt)
+                adsLoader = loaderConstructor.newInstance(this, adTagUri);
+            }
+            adsLoader.setPlayer(player);
+            AdsMediaSource.MediaSourceFactory adMediaSourceFactory =
+                    new AdsMediaSource.MediaSourceFactory() {
+                        @Override
+                        public MediaSource createMediaSource(Uri uri) {
+                            return PlayerActivityUntouched.this.buildMediaSource(uri);
+                        }
+
+                        @Override
+                        public int[] getSupportedTypes() {
+                            return new int[]{C.TYPE_DASH, C.TYPE_SS, C.TYPE_HLS, C.TYPE_OTHER};
+                        }
+                    };
+            return new AdsMediaSource(mediaSource, adMediaSourceFactory, adsLoader, playerView);
+        } catch (ClassNotFoundException e) {
+            // IMA extension not loaded.
+            return null;
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    // User controls
+
+    private void updateButtonVisibilities() {
+        debugRootView.removeAllViews();
+        if (player == null) {
+            return;
+        }
+
+        MappedTrackInfo mappedTrackInfo = trackSelector.getCurrentMappedTrackInfo();
+        if (mappedTrackInfo == null) {
+            return;
+        }
+
+        for (int i = 0; i < mappedTrackInfo.getRendererCount(); i++) {
+            TrackGroupArray trackGroups = mappedTrackInfo.getTrackGroups(i);
+            if (trackGroups.length != 0) {
+                Button button = new Button(this);
+                int label;
+                switch (player.getRendererType(i)) {
+                    case C.TRACK_TYPE_AUDIO:
+                        label = R.string.exo_track_selection_title_audio;
+                        break;
+                    case C.TRACK_TYPE_VIDEO:
+                        label = R.string.exo_track_selection_title_video;
+                        break;
+                    case C.TRACK_TYPE_TEXT:
+                        label = R.string.exo_track_selection_title_text;
+                        break;
+                    default:
+                        continue;
+                }
+                button.setText(label);
+                button.setTag(i);
+                button.setOnClickListener(this);
+                debugRootView.addView(button);
+            }
+        }
+    }
+
+    private void showControls() {
+        debugRootView.setVisibility(View.VISIBLE);
+    }
+
+    private void showToast(int messageId) {
+        showToast(getString(messageId));
+    }
+
+    private void showToast(String message) {
+        Toast.makeText(getApplicationContext(), message, Toast.LENGTH_LONG).show();
+    }
+
+    private static boolean isBehindLiveWindow(ExoPlaybackException e) {
+        if (e.type != ExoPlaybackException.TYPE_SOURCE) {
+            return false;
+        }
+        Throwable cause = e.getSourceException();
+        while (cause != null) {
+            if (cause instanceof BehindLiveWindowException) {
+                return true;
+            }
+            cause = cause.getCause();
+        }
+        return false;
+    }
+
+    private class PlayerEventListener implements Player.EventListener {
+
+        @Override
+        public void onPlayerStateChanged(boolean playWhenReady, int playbackState) {
+            if (playbackState == Player.STATE_ENDED) {
+                showControls();
+            }
+            updateButtonVisibilities();
+        }
+
+        @Override
+        public void onPositionDiscontinuity(@Player.DiscontinuityReason int reason) {
+            if (player.getPlaybackError() != null) {
+                // The user has performed a seek whilst in the error state. Update the resume position so
+                // that if the user then retries, playback resumes from the position to which they seeked.
+                updateStartPosition();
+            }
+        }
+
+        @Override
+        public void onPlayerError(ExoPlaybackException e) {
+            if (isBehindLiveWindow(e)) {
+                clearStartPosition();
+                initializePlayer();
+            } else {
+                updateStartPosition();
+                updateButtonVisibilities();
+                showControls();
+            }
+        }
+
+        @Override
+        @SuppressWarnings("ReferenceEquality")
+        public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray trackSelections) {
+            updateButtonVisibilities();
+            if (trackGroups != lastSeenTrackGroupArray) {
+                MappedTrackInfo mappedTrackInfo = trackSelector.getCurrentMappedTrackInfo();
+                if (mappedTrackInfo != null) {
+                    if (mappedTrackInfo.getTypeSupport(C.TRACK_TYPE_VIDEO)
+                            == MappedTrackInfo.RENDERER_SUPPORT_UNSUPPORTED_TRACKS) {
+                        showToast(R.string.error_unsupported_video);
+                    }
+                    if (mappedTrackInfo.getTypeSupport(C.TRACK_TYPE_AUDIO)
+                            == MappedTrackInfo.RENDERER_SUPPORT_UNSUPPORTED_TRACKS) {
+                        showToast(R.string.error_unsupported_audio);
+                    }
+                }
+                lastSeenTrackGroupArray = trackGroups;
+            }
+        }
+    }
+
+    private class PlayerErrorMessageProvider implements ErrorMessageProvider<ExoPlaybackException> {
+
+        @Override
+        public Pair<Integer, String> getErrorMessage(ExoPlaybackException e) {
+            String errorString = getString(R.string.error_generic);
+            if (e.type == ExoPlaybackException.TYPE_RENDERER) {
+                Exception cause = e.getRendererException();
+                if (cause instanceof DecoderInitializationException) {
+                    // Special case for decoder initialization failures.
+                    DecoderInitializationException decoderInitializationException =
+                            (DecoderInitializationException) cause;
+                    if (decoderInitializationException.decoderName == null) {
+                        if (decoderInitializationException.getCause() instanceof DecoderQueryException) {
+                            errorString = getString(R.string.error_querying_decoders);
+                        } else if (decoderInitializationException.secureDecoderRequired) {
+                            errorString =
+                                    getString(
+                                            R.string.error_no_secure_decoder, decoderInitializationException.mimeType);
+                        } else {
+                            errorString =
+                                    getString(R.string.error_no_decoder, decoderInitializationException.mimeType);
+                        }
+                    } else {
+                        errorString =
+                                getString(
+                                        R.string.error_instantiating_decoder,
+                                        decoderInitializationException.decoderName);
+                    }
+                }
+            }
+            return Pair.create(0, errorString);
+        }
+    }
+
+}
diff --git a/demos/main/src/main/res/drawable-xxhdpi/baseline_fullscreen_white_18dp.png b/demos/main/src/main/res/drawable-xxhdpi/baseline_fullscreen_white_18dp.png
new file mode 100755
index 0000000000..c150cb58db
Binary files /dev/null and b/demos/main/src/main/res/drawable-xxhdpi/baseline_fullscreen_white_18dp.png differ
diff --git a/demos/main/src/main/res/layout/exo_simple_player_view.xml b/demos/main/src/main/res/layout/exo_simple_player_view.xml
new file mode 100644
index 0000000000..052e74a8fe
--- /dev/null
+++ b/demos/main/src/main/res/layout/exo_simple_player_view.xml
@@ -0,0 +1,90 @@
+<?xml version="1.0" encoding="utf-8"?><!-- Copyright (C) 2016 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<merge xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <com.google.android.exoplayer2.ui.AspectRatioFrameLayout
+        android:id="@id/exo_content_frame"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_gravity="center">
+
+        <!-- Video surface will be inserted as the first child of the content frame. -->
+
+        <View
+            android:id="@id/exo_shutter"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:background="@android:color/black" />
+
+        <ImageView
+            android:id="@id/exo_artwork"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:scaleType="fitXY" />
+
+        <com.google.android.exoplayer2.ui.SubtitleView
+            android:id="@id/exo_subtitles"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent" />
+
+        <ProgressBar
+            android:id="@id/exo_buffering"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"
+            android:indeterminate="true" />
+
+        <TextView
+            android:id="@id/exo_error_message"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:layout_gravity="center"
+            android:background="@color/exo_error_message_background_color"
+            android:gravity="center"
+            android:padding="16dp" />
+
+    </com.google.android.exoplayer2.ui.AspectRatioFrameLayout>
+
+    <FrameLayout
+        android:id="@id/exo_ad_overlay"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" />
+
+    <FrameLayout
+        android:id="@id/exo_overlay"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" />
+
+    <!--这边放exo_player_control_view.xml-->
+    <!--<View android:id="@id/exo_controller_placeholder"-->
+    <View
+        android:id="@id/exo_controller_placeholder"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" />
+
+    <!--用controller_layout_id自定义controllerview-->
+    <!--app:controller_layout_id="@layout/small_video_exo_playback_control_view"-->
+
+    <!--<com.google.android.exoplayer2.ui.PlayerControlView-->
+        <!--android:id="@+id/exo_controller"-->
+        <!--android:layout_width="match_parent"-->
+        <!--android:layout_height="match_parent"-->
+        <!--android:visibility="gone"-->
+        <!--app:controller_layout_id="@layout/small_video_exo_playback_control_view"-->
+        <!--app:repeat_toggle_modes="all|one"-->
+        <!--app:show_timeout="-1" />-->
+
+</merge>
diff --git a/demos/main/src/main/res/layout/player_activity.xml b/demos/main/src/main/res/layout/player_activity.xml
index 6b84033273..c72b850409 100644
--- a/demos/main/src/main/res/layout/player_activity.xml
+++ b/demos/main/src/main/res/layout/player_activity.xml
@@ -1,5 +1,4 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!-- Copyright (C) 2016 The Android Open Source Project
+<?xml version="1.0" encoding="UTF-8"?><!-- Copyright (C) 2016 The Android Open Source Project
 
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
@@ -14,36 +13,58 @@
      limitations under the License.
 -->
 <FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
     xmlns:tools="http://schemas.android.com/tools"
     android:id="@+id/root"
+    android:background="@android:color/white"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     android:keepScreenOn="true">
 
-  <com.google.android.exoplayer2.ui.PlayerView android:id="@+id/player_view"
-      android:layout_width="match_parent"
-      android:layout_height="match_parent"/>
-
-  <LinearLayout
-      android:layout_width="match_parent"
-      android:layout_height="wrap_content"
-      android:background="#88000000"
-      android:orientation="vertical">
-
-    <TextView android:id="@+id/debug_text_view"
+    <!--app:controller_layout_id="@layout/small_video_exo_playback_control_view"-->
+    <com.google.android.exoplayer2.ui.PlayerView
+        android:id="@+id/player_view"
+        app:player_layout_id="@layout/small_video_exo_player_view"
+        app:controller_layout_id="@layout/small_video_exo_playback_control_view"
         android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:paddingLeft="4dp"
-        android:paddingRight="4dp"
-        android:textSize="10sp"
-        tools:ignore="SmallSp"/>
+        android:background="@android:color/holo_blue_dark"
+        app:shutter_background_color="@android:color/holo_green_dark"
+        android:layout_height="match_parent" />
 
-    <LinearLayout android:id="@+id/controls_root"
+    <LinearLayout
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:orientation="horizontal"
-        android:visibility="gone"/>
+        android:visibility="gone"
+        android:background="#88ff0000"
+        android:orientation="vertical">
+
+        <TextView
+            android:id="@+id/debug_text_view"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:paddingLeft="4dp"
+            android:paddingRight="4dp"
+            android:textSize="10sp"
+            tools:ignore="SmallSp" />
+
+        <LinearLayout
+            android:id="@+id/controls_root"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal"
+            android:visibility="gone" />
+
+    </LinearLayout>
+
+    <!--&lt;!&ndash;用controller_layout_id自定义controllerview&ndash;&gt;-->
+    <!--&lt;!&ndash;app:controller_layout_id="@layout/small_video_exo_playback_control_view"&ndash;&gt;-->
 
-  </LinearLayout>
+    <!--<com.google.android.exoplayer2.ui.PlayerControlView-->
+        <!--android:id="@+id/cast_control_view"-->
+        <!--android:layout_width="match_parent"-->
+        <!--android:layout_height="match_parent"-->
+        <!--android:visibility="gone"-->
+        <!--app:repeat_toggle_modes="all|one"-->
+        <!--app:show_timeout="-1" />-->
 
 </FrameLayout>
diff --git a/demos/main/src/main/res/layout/small_video_exo_playback_control_view.xml b/demos/main/src/main/res/layout/small_video_exo_playback_control_view.xml
new file mode 100644
index 0000000000..7087378d32
--- /dev/null
+++ b/demos/main/src/main/res/layout/small_video_exo_playback_control_view.xml
@@ -0,0 +1,123 @@
+<?xml version="1.0" encoding="utf-8"?><!-- Copyright (C) 2016 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:layout_gravity="bottom"
+    android:background="#80000000"
+    android:layoutDirection="ltr"
+    android:orientation="vertical"
+    tools:targetApi="28">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_centerInParent="true"
+        android:gravity="center"
+        android:orientation="horizontal"
+        android:paddingTop="4dp">
+
+        <!--<ImageButton android:id="@id/exo_prev"-->
+        <!--style="@style/ExoMediaButton.Previous"/>-->
+
+        <!--<ImageButton android:id="@id/exo_rew"-->
+        <!--style="@style/ExoMediaButton.Rewind"/>-->
+
+        <!--<ImageButton android:id="@id/exo_shuffle"-->
+        <!--style="@style/ExoMediaButton.Shuffle"/>-->
+
+        <!--<ImageButton android:id="@id/exo_repeat_toggle"-->
+        <!--style="@style/ExoMediaButton"/>-->
+
+        <ImageButton
+            android:id="@id/exo_play"
+            style="@style/ExoMediaButton.Play" />
+
+        <ImageButton
+            android:id="@id/exo_pause"
+            style="@style/ExoMediaButton.Pause" />
+
+        <!--<ImageButton android:id="@id/exo_ffwd"-->
+        <!--style="@style/ExoMediaButton.FastForward"/>-->
+
+        <!--<ImageButton android:id="@id/exo_next"-->
+        <!--style="@style/ExoMediaButton.Next"/>-->
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        android:layout_marginTop="4dp"
+        android:gravity="center_vertical"
+        android:orientation="horizontal">
+
+        <TextView
+            android:id="@id/exo_position"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:includeFontPadding="false"
+            android:paddingLeft="4dp"
+            android:paddingRight="4dp"
+            android:textColor="#FFBEBEBE"
+            android:textSize="14sp"/>
+
+        <!--<com.google.android.exoplayer2.ui.DefaultTimeBar-->
+        <!--android:id="@id/exo_progress"-->
+        <!--android:layout_width="0dp"-->
+        <!--android:layout_weight="1"-->
+        <!--android:layout_height="26dp"/>-->
+
+        <com.google.android.exoplayer2.ui.DefaultTimeBar
+            android:id="@id/exo_progress"
+            android:layout_width="0dp"
+            android:layout_height="4dp"
+            android:layout_weight="1"
+            app:buffered_color="@android:color/holo_blue_bright"
+            app:played_color="#FFDE81"
+            app:unplayed_color="@android:color/holo_red_light" />
+
+        <TextView
+            android:id="@id/exo_duration"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:includeFontPadding="false"
+            android:paddingLeft="4dp"
+            android:paddingRight="4dp"
+            android:textColor="#FFBEBEBE"
+            android:textSize="14sp" />
+
+        <FrameLayout
+            android:id="@+id/exo_fullscreen_button"
+            android:layout_width="32dp"
+            android:layout_height="wrap_content"
+            android:layout_gravity="right">
+
+            <ImageView
+                android:id="@+id/exo_fullscreen_icon"
+                android:layout_width="40dp"
+                android:layout_height="40dp"
+                android:layout_gravity="center"
+                android:adjustViewBounds="true"
+                android:scaleType="fitCenter"
+                android:src="@drawable/exo_controls_fullscreen_enter" />
+
+        </FrameLayout>
+    </LinearLayout>
+
+</RelativeLayout>
diff --git a/demos/main/src/main/res/layout/small_video_exo_player_view.xml b/demos/main/src/main/res/layout/small_video_exo_player_view.xml
new file mode 100644
index 0000000000..d58e5f3858
--- /dev/null
+++ b/demos/main/src/main/res/layout/small_video_exo_player_view.xml
@@ -0,0 +1,90 @@
+<?xml version="1.0" encoding="utf-8"?><!-- Copyright (C) 2016 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<merge xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <com.google.android.exoplayer2.ui.AspectRatioFrameLayout
+        android:id="@id/exo_content_frame"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_gravity="center">
+
+        <!-- Video surface will be inserted as the first child of the content frame. -->
+
+        <View
+            android:id="@id/exo_shutter"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:background="@android:color/black" />
+
+        <ImageView
+            android:id="@id/exo_artwork"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:scaleType="fitXY" />
+
+        <com.google.android.exoplayer2.ui.SubtitleView
+            android:id="@id/exo_subtitles"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent" />
+
+        <ProgressBar
+            android:id="@id/exo_buffering"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"
+            android:indeterminate="true" />
+
+        <TextView
+            android:id="@id/exo_error_message"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:layout_gravity="center"
+            android:background="@color/exo_error_message_background_color"
+            android:gravity="center"
+            android:padding="16dp" />
+
+    </com.google.android.exoplayer2.ui.AspectRatioFrameLayout>
+
+    <FrameLayout
+        android:id="@id/exo_ad_overlay"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" />
+
+    <FrameLayout
+        android:id="@id/exo_overlay"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" />
+
+    <!--这边放exo_player_control_view.xml-->
+    <!--<View android:id="@id/exo_controller_placeholder"-->
+    <View
+        android:id="@id/exo_controller_placeholder"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" />
+
+    <!--用controller_layout_id自定义controllerview-->
+    <!--app:controller_layout_id="@layout/small_video_exo_playback_control_view"-->
+
+    <!--<com.google.android.exoplayer2.ui.PlayerControlView-->
+    <!--android:id="@+id/exo_controller"-->
+    <!--android:layout_width="match_parent"-->
+    <!--android:layout_height="match_parent"-->
+    <!--android:visibility="gone"-->
+    <!--app:controller_layout_id="@layout/small_video_exo_playback_control_view"-->
+    <!--app:repeat_toggle_modes="all|one"-->
+    <!--app:show_timeout="-1" />-->
+
+</merge>
diff --git a/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerView.java b/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerView.java
index 9d66289e94..278a73ef66 100644
--- a/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerView.java
+++ b/library/ui/src/main/java/com/google/android/exoplayer2/ui/PlayerView.java
@@ -64,6 +64,7 @@
 import com.google.android.exoplayer2.ui.spherical.SphericalSurfaceView;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.ErrorMessageProvider;
+import com.google.android.exoplayer2.util.Log;
 import com.google.android.exoplayer2.util.RepeatModeUtil;
 import com.google.android.exoplayer2.util.Util;
 import com.google.android.exoplayer2.video.VideoListener;
