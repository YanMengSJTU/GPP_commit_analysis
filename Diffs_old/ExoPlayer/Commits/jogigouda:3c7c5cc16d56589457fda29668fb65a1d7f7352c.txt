diff --git a/library/src/main/java/com/google/android/exoplayer/MediaCodecAudioTrackRenderer.java b/library/src/main/java/com/google/android/exoplayer/MediaCodecAudioTrackRenderer.java
index 55cecdc367..0468d1ed03 100644
--- a/library/src/main/java/com/google/android/exoplayer/MediaCodecAudioTrackRenderer.java
+++ b/library/src/main/java/com/google/android/exoplayer/MediaCodecAudioTrackRenderer.java
@@ -214,7 +214,7 @@ protected boolean handlesTrack(MediaCodecSelector mediaCodecSelector, MediaForma
       throws DecoderQueryException {
     String mimeType = mediaFormat.mimeType;
     return MimeTypes.isAudio(mimeType) && (MimeTypes.AUDIO_UNKNOWN.equals(mimeType)
-        || (allowPassthrough(mimeType) && mediaCodecSelector.getPassthroughDecoderName() != null)
+        || (allowPassthrough(mimeType) && mediaCodecSelector.getPassthroughDecoderInfo() != null)
         || mediaCodecSelector.getDecoderInfo(mimeType, false) != null);
   }
 
@@ -222,10 +222,10 @@ protected boolean handlesTrack(MediaCodecSelector mediaCodecSelector, MediaForma
   protected DecoderInfo getDecoderInfo(MediaCodecSelector mediaCodecSelector, String mimeType,
       boolean requiresSecureDecoder) throws DecoderQueryException {
     if (allowPassthrough(mimeType)) {
-      String passthroughDecoderName = mediaCodecSelector.getPassthroughDecoderName();
-      if (passthroughDecoderName != null) {
+      DecoderInfo passthroughDecoderInfo = mediaCodecSelector.getPassthroughDecoderInfo();
+      if (passthroughDecoderInfo != null) {
         passthroughEnabled = true;
-        return new DecoderInfo(passthroughDecoderName, null);
+        return passthroughDecoderInfo;
       }
     }
     passthroughEnabled = false;
diff --git a/library/src/main/java/com/google/android/exoplayer/MediaCodecSelector.java b/library/src/main/java/com/google/android/exoplayer/MediaCodecSelector.java
index 7341b989e0..292a405179 100644
--- a/library/src/main/java/com/google/android/exoplayer/MediaCodecSelector.java
+++ b/library/src/main/java/com/google/android/exoplayer/MediaCodecSelector.java
@@ -27,12 +27,7 @@
   /**
    * Default implementation of {@link MediaCodecSelector}.
    */
-  public static final MediaCodecSelector DEFAULT = new MediaCodecSelector() {
-
-    /**
-     * The name for the raw (passthrough) decoder OMX component.
-     */
-    private static final String RAW_DECODER_NAME = "OMX.google.raw.decoder";
+  MediaCodecSelector DEFAULT = new MediaCodecSelector() {
 
     @Override
     public DecoderInfo getDecoderInfo(String mimeType, boolean requiresSecureDecoder)
@@ -41,9 +36,8 @@ public DecoderInfo getDecoderInfo(String mimeType, boolean requiresSecureDecoder
     }
 
     @Override
-    public String getPassthroughDecoderName() throws DecoderQueryException {
-      // TODO: Return null if the raw decoder doesn't exist.
-      return RAW_DECODER_NAME;
+    public DecoderInfo getPassthroughDecoderInfo() throws DecoderQueryException {
+      return MediaCodecUtil.getPassthroughDecoderInfo();
     }
 
   };
@@ -53,20 +47,18 @@ public String getPassthroughDecoderName() throws DecoderQueryException {
    *
    * @param mimeType The mime type for which a decoder is required.
    * @param requiresSecureDecoder Whether a secure decoder is required.
-   * @return A {@link DecoderInfo} describing the decoder to instantiate, or null if no suitable
-   *     decoder exists.
+   * @return A {@link DecoderInfo} describing the decoder, or null if no suitable decoder exists.
    * @throws DecoderQueryException Thrown if there was an error querying decoders.
    */
   DecoderInfo getDecoderInfo(String mimeType, boolean requiresSecureDecoder)
       throws DecoderQueryException;
 
   /**
-   * Gets the name of a decoder suitable for audio passthrough.
+   * Selects a decoder to instantiate for audio passthrough.
    *
-   * @return The name of a decoder suitable for audio passthrough, or null if no suitable decoder
-   *     exists.
+   * @return A {@link DecoderInfo} describing the decoder, or null if no suitable decoder exists.
    * @throws DecoderQueryException Thrown if there was an error querying decoders.
    */
-  String getPassthroughDecoderName() throws DecoderQueryException;
+  DecoderInfo getPassthroughDecoderInfo() throws DecoderQueryException;
 
 }
diff --git a/library/src/main/java/com/google/android/exoplayer/MediaCodecUtil.java b/library/src/main/java/com/google/android/exoplayer/MediaCodecUtil.java
index abd97b22cf..4c49e06b1c 100644
--- a/library/src/main/java/com/google/android/exoplayer/MediaCodecUtil.java
+++ b/library/src/main/java/com/google/android/exoplayer/MediaCodecUtil.java
@@ -55,6 +55,8 @@ private DecoderQueryException(Throwable cause) {
   }
 
   private static final String TAG = "MediaCodecUtil";
+  private static final DecoderInfo PASSTHROUGH_DECODER_INFO =
+      new DecoderInfo("OMX.google.raw.decoder", null);
 
   private static final Map<CodecKey, List<DecoderInfo>> decoderInfosCache = new HashMap<>();
 
@@ -63,20 +65,6 @@ private DecoderQueryException(Throwable cause) {
 
   private MediaCodecUtil() {}
 
-  /**
-   * Get information about the decoder that will be used for a given mime type.
-   *
-   * @param mimeType The mime type.
-   * @param secure Whether the decoder is required to support secure decryption. Always pass false
-   *     unless secure decryption really is required.
-   * @return Information about the decoder that will be used, or null if no decoder exists.
-   */
-  public static DecoderInfo getDecoderInfo(String mimeType, boolean secure)
-      throws DecoderQueryException {
-    List<DecoderInfo> decoderInfos = getDecoderInfos(mimeType, secure);
-    return decoderInfos.isEmpty() ? null : decoderInfos.get(0);
-  }
-
   /**
    * Optional call to warm the codec cache for a given mime type.
    * <p>
@@ -96,12 +84,38 @@ public static void warmCodec(String mimeType, boolean secure) {
   }
 
   /**
-   * Returns all @{link DecoderInfo}s for the given mime type, in the order given by MediaCodecList.
+   * Gets information about a decoder suitable for audio passthrough.
+   **
+   * @return A {@link DecoderInfo} describing the decoder, or null if no suitable decoder exists.
+   */
+  public static DecoderInfo getPassthroughDecoderInfo() {
+    // TODO: Return null if the raw decoder doesn't exist.
+    return PASSTHROUGH_DECODER_INFO;
+  }
+
+  /**
+   * Get information about the preferred decoder for a given mime type.
    *
    * @param mimeType The mime type.
    * @param secure Whether the decoder is required to support secure decryption. Always pass false
    *     unless secure decryption really is required.
-   * @return A list of all @{link DecoderInfo}s for the given mime type,
+   * @return A {@link DecoderInfo} describing the decoder, or null if no suitable decoder exists.
+   */
+  public static DecoderInfo getDecoderInfo(String mimeType, boolean secure)
+      throws DecoderQueryException {
+    List<DecoderInfo> decoderInfos = getDecoderInfos(mimeType, secure);
+    return decoderInfos.isEmpty() ? null : decoderInfos.get(0);
+  }
+
+  /**
+   * Returns all @{link DecoderInfo}s for a given mime type, in the order given by
+   * {@link MediaCodecList}.
+   *
+   * @param mimeType The mime type.
+   * @param secure Whether the decoders are required to support secure decryption. Always pass false
+   *     unless secure decryption really is required.
+   * @return A list of all @{link DecoderInfo}s for the given mime type. May be empty if no suitable
+   *     decoders exist.
    */
   public static synchronized List<DecoderInfo> getDecoderInfos(String mimeType, boolean secure)
       throws DecoderQueryException {
