diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java
index f8698280ff..9f6f0d4fc4 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java
@@ -19,6 +19,7 @@
 import android.content.Context;
 import android.os.Environment;
 
+import com.google.android.exoplayer2.demo.offline.DownloadManager;
 import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.DefaultDataSourceFactory;
 import com.google.android.exoplayer2.upstream.DefaultHttpDataSourceFactory;
@@ -36,6 +37,7 @@
 
     public static String userAgent;
     public static Context instance;
+    public static DownloadManager downloadManager = null;
 
     @Override
     public void onCreate() {
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/DownloadActivity.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/DownloadActivity.java
index b042c3e4ac..353a805237 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/DownloadActivity.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/DownloadActivity.java
@@ -16,7 +16,6 @@
 import com.google.android.exoplayer2.source.dash.manifest.RepresentationKey;
 
 import static com.google.android.exoplayer2.demo.LocalBroadcastHelper.DOWNLOADING;
-import static com.google.android.exoplayer2.demo.offline.DownloadService.ACTION_PAUSE;
 import static com.google.android.exoplayer2.demo.offline.DownloadService.ACTION_START;
 import static com.google.android.exoplayer2.demo.offline.DownloadService.ACTION_STOP;
 
@@ -26,8 +25,11 @@
  */
 public class DownloadActivity extends Activity {
 
-    private final String url = "https://gymondo-adaptive-videos.akamaized.net/resources/237/music/608764_0f63fc4a7b2f55322085a8a481942a3f/608764.mpd?hdnts=exp=1524567082~acl=/*~hmac=817a3608318e559d199885c5a36dcabe6892397344a612ba5bab67176fb58922";
-    private Uri uri;
+    private final String url1 = "https://gymondo-adaptive-videos.akamaized.net/resources/237/music/608764_0f63fc4a7b2f55322085a8a481942a3f/608764.mpd?hdnts=exp=1524567082~acl=/*~hmac=817a3608318e559d199885c5a36dcabe6892397344a612ba5bab67176fb58922";
+    private final String url2 = "https://gymondo-adaptive-videos.akamaized.net/resources/298/music/569457_7c7c3d7b3a995c3d8fbe69c681b71856/569457.mpd?hdnts=exp=1525261376~acl=/*~hmac=050abf79b8a1516ea09142a8cd23a449ec0ba7e2f6498e151cdff5362c0cbb4b";
+
+    private Uri uri1;
+    private Uri uri2;
 
     private TextView txtStatus;
 
@@ -38,8 +40,9 @@ protected void onCreate(@Nullable Bundle savedInstanceState) {
 
         LocalBroadcastHelper.register(this, downloadBroadcastReceiver, DOWNLOADING);
 
-        // Create Uri
-        uri = Uri.parse(url);
+        // Create Uris
+        uri1 = Uri.parse(url1);
+        uri2 = Uri.parse(url2);
 
         Button btnStartDownload = findViewById(R.id.btn_start_download);
         btnStartDownload.setOnClickListener(new View.OnClickListener() {
@@ -86,25 +89,38 @@ public void onReceive(Context context, Intent intent) {
     };
 
     private void startDownload() {
+
         // 480p
         RepresentationKey[] downloadKeys = new RepresentationKey[2];
         downloadKeys[0] = new RepresentationKey(0, 0, 1);
         downloadKeys[1] = new RepresentationKey(0, 1, 0);
 
+        download(uri1, false, "1111", downloadKeys);
+        download(uri2, false, "2222", downloadKeys);
+    }
+
+    private void download(Uri uri, boolean removeAction, String data, RepresentationKey... downloadKeys) {
         // Remove action == remove all downloaded media
-        DashDownloadAction downloadAction = new DashDownloadAction(uri, false, null, downloadKeys);
+        DashDownloadAction downloadAction = new DashDownloadAction(uri, removeAction, data, downloadKeys);
         DownloadService.addDownloadAction(this, ExoDownloadService.class, downloadAction);
     }
 
+    private void removeDownload(Uri uri, String data) {
+        download(uri, true, data);
+    }
+
     private void cancelDownload() {
-        DashDownloadAction downloadAction = new DashDownloadAction(uri, true, null);
-        DownloadService.addDownloadAction(this, ExoDownloadService.class, downloadAction);
+        removeDownload(uri1, "1111");
+        removeDownload(uri2, "2222");
+
+//        DashDownloadAction downloadAction = new DashDownloadAction(uri1, true, null);
+//        DownloadService.addDownloadAction(this, ExoDownloadService.class, downloadAction);
     }
 
     private void pauseDownload() {
 
         Intent intent = new Intent(this, ExoDownloadService.class)
-                .setAction(ACTION_PAUSE);
+                .setAction(ACTION_STOP);
         startService(intent);
     }
 
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/ExoDownloadService.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/ExoDownloadService.java
index 112966bbae..0c79e13b48 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/ExoDownloadService.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/ExoDownloadService.java
@@ -1,16 +1,19 @@
 package com.google.android.exoplayer2.demo;
 
-import android.app.Notification;
 import android.app.PendingIntent;
+import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
 import android.os.Environment;
 import android.support.annotation.Nullable;
 import android.support.v4.app.NotificationCompat;
+import android.support.v4.app.NotificationManagerCompat;
 import android.util.Log;
+import android.util.SparseArray;
 
 import com.google.android.exoplayer2.demo.offline.DashDownloadAction;
 import com.google.android.exoplayer2.demo.offline.DownloadManager;
+import com.google.android.exoplayer2.demo.offline.DownloadManager.DownloadState;
 import com.google.android.exoplayer2.demo.offline.DownloadService;
 import com.google.android.exoplayer2.demo.scheduler.Requirements;
 import com.google.android.exoplayer2.demo.scheduler.Scheduler;
@@ -29,56 +32,145 @@
 
     public static final String ARG_DOWNLOAD_DATA = "arg_download_data";
     private static final int NOTIFICATION_ID = 1337;
+    private static final String CHANNEL_ID = "channel_id";
+    private SparseArray<NotificationCompat.Builder> builders = new SparseArray<>();
 
     public ExoDownloadService() {
         super(NOTIFICATION_ID);
     }
 
-    @Override
-    public int onStartCommand(Intent intent, int flags, int startId) {
+    private void updateNotification(int workoutId, float percent) {
+
+        NotificationManagerCompat notificationManager = NotificationManagerCompat.from(this);
+        NotificationCompat.Builder builder = getBuilder(workoutId);
+
+        builder.setProgress(100, Math.round(percent), false)
+                .setContentText("Downloading Workouts...");
+        notificationManager.notify(workoutId, builder.build());
+    }
+
+    private NotificationCompat.Builder getBuilder(int workoutId) {
 
         Intent notificationIntent = new Intent(this, DownloadActivity.class);
+        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, notificationIntent, 0);
+
+        NotificationCompat.Builder builder = builders.get(workoutId, null);
+        if (builder == null) {
+            builder = new NotificationCompat.Builder(this, CHANNEL_ID);
+            builder.setContentTitle("Gymondo")
+                    .setSmallIcon(R.mipmap.ic_launcher)
+                    .setWhen(0)
+                    .setPriority(NotificationCompat.PRIORITY_MAX)
+                    .setContentIntent(pendingIntent);
+
+            addActionButtons(builder, false);
+            builders.put(workoutId, builder);
+        }
+        return builder;
+    }
+
+    private void addActionButtons(NotificationCompat.Builder builder, boolean isPaused) {
 
-        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0,
-                notificationIntent, 0);
+        builder.mActions.clear();
 
-        Notification notification = new NotificationCompat.Builder(this, "channelId")
-                .setSmallIcon(R.mipmap.ic_launcher)
-                .setContentTitle("Gymondo")
-                .setContentText("Downloading Workouts...")
-                .setContentIntent(pendingIntent).build();
+        if (isPaused) {
+            Intent resumeIntent = new Intent(this, ExoDownloadService.class).setAction(ACTION_START);
+            PendingIntent resumePendingIntent = PendingIntent.getService(this, 0, resumeIntent, 0);
 
-        startForeground(notification);
+            builder.addAction(android.R.drawable.ic_media_play, "Resume", resumePendingIntent);
+            builder.addAction(android.R.drawable.ic_menu_close_clear_cancel, "Cancel", resumePendingIntent);
 
-        return super.onStartCommand(intent, flags, startId);
+        } else {
+            Intent pauseIntent = new Intent(this, ExoDownloadService.class).setAction(ACTION_STOP);
+            PendingIntent pausePendingIntent = PendingIntent.getService(this, 0, pauseIntent, 0);
+
+            builder.addAction(android.R.drawable.ic_media_pause, "Pause", pausePendingIntent);
+            builder.addAction(android.R.drawable.ic_menu_close_clear_cancel, "Cancel", pausePendingIntent);
+        }
     }
 
-    @Override
-    protected DownloadManager getDownloadManager() {
+    private static DownloadManager createDownloadManager(Context context) {
 
         Log.e("GYMONDO", "getDownloadManager");
-        File dir = getApplicationContext().getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS);
+        File dir = context.getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS);
         SimpleCache cache = new SimpleCache(dir, new NoOpCacheEvictor());
         DefaultHttpDataSourceFactory factory = new DefaultHttpDataSourceFactory("ExoPlayer", null);
         DownloaderConstructorHelper constructorHelper = new DownloaderConstructorHelper(cache, factory);
 
-        String actionFile = dir.getAbsolutePath() + "/action/action_file.txt";
+        String actionFile = dir.getAbsolutePath() + "/action/action_file.dat";
         DownloadManager downloadManager = new DownloadManager(constructorHelper, actionFile, DashDownloadAction.DESERIALIZER);
 
         return downloadManager;
     }
 
+    @Override
+    protected DownloadManager getDownloadManager() {
+        if (DemoApplication.downloadManager == null)
+            DemoApplication.downloadManager = createDownloadManager(getApplicationContext());
+
+        return DemoApplication.downloadManager;
+    }
+
     @Override
     protected void onProgressUpdate(DownloadManager.DownloadState[] activeDownloadTasks) {
-        if (activeDownloadTasks.length > 0) {
-            String downloadString = "Downloading: " + activeDownloadTasks[0].downloadPercentage + "%";
-            Log.e("GYMONDO", downloadString);
+
+        StringBuilder downloadString = new StringBuilder();
+
+        for (DownloadManager.DownloadState state : activeDownloadTasks) {
+            downloadString.append("Downloading: [TaskId: "
+                    + state.taskId + "] - [WorkoutId: "
+                    + state.downloadAction.getData() + "]"
+                    + state.downloadPercentage + "%\n");
+            if (state.downloadedBytes > 0)
+                updateNotification(Integer.parseInt(state.downloadAction.getData()), state.downloadPercentage);
+
+        }
+
+        if (downloadString.length() != 0) {
+            Log.e("GYMONDO", downloadString.toString());
             Bundle args = new Bundle(1);
-            args.putString(ARG_DOWNLOAD_DATA, downloadString);
+            args.putString(ARG_DOWNLOAD_DATA, downloadString.toString());
             LocalBroadcastHelper.sendMessage(this, LocalBroadcastHelper.DOWNLOADING, args);
         }
     }
 
+    @Override
+    public void onStateChange(DownloadManager downloadManager, DownloadState downloadState) {
+        super.onStateChange(downloadManager, downloadState);
+
+        NotificationManagerCompat notificationManager = NotificationManagerCompat.from(this);
+
+        if (downloadState.state == DownloadState.STATE_ENDED) {
+
+            int workoutId = Integer.parseInt(downloadState.downloadAction.getData());
+
+            if (downloadState.downloadAction.isRemoveAction()) {
+
+                notificationManager.cancel(workoutId);
+                builders.remove(workoutId);
+
+            } else {
+
+                NotificationCompat.Builder builder = getBuilder(workoutId);
+                builder.setContentText("Download complete").setProgress(0, 0, false);
+
+                notificationManager.notify(workoutId, builder.build());
+            }
+        } else if (getDownloadManager().isDownloadsStopped()) {
+
+            for (int i = 0; i < builders.size(); i++) {
+
+                int workoutId = builders.keyAt(i);
+
+                // get the object by the key.
+                NotificationCompat.Builder builder = builders.get(workoutId);
+                builder.setContentText("Download paused").setProgress(0, 0, false);
+                addActionButtons(builder, true);
+                notificationManager.notify(workoutId, builder.build());
+            }
+        }
+    }
+
     @Nullable
     @Override
     protected Requirements getRequirements() {
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/offline/DownloadManager.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/offline/DownloadManager.java
index 0af19e3130..8410fb2681 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/offline/DownloadManager.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/offline/DownloadManager.java
@@ -75,7 +75,7 @@
     /**
      * The default maximum number of simultaneous downloads.
      */
-    public static final int DEFAULT_MAX_SIMULTANEOUS_DOWNLOADS = 1;
+    public static final int DEFAULT_MAX_SIMULTANEOUS_DOWNLOADS = 5;
     /**
      * The default minimum number of times the downloads must be retried before failing.
      */
@@ -173,7 +173,8 @@ public DownloadManager(
     public void release() {
         released = true;
         for (int i = 0; i < tasks.size(); i++) {
-            tasks.get(i).stop();
+            DownloadTask task = tasks.get(i);
+            task.stop();
         }
         final ConditionVariable fileIOFinishedCondition = new ConditionVariable();
         fileIOHandler.post(new Runnable() {
@@ -193,6 +194,7 @@ public void run() {
     public void stopDownloads() {
         if (!downloadsStopped) {
             downloadsStopped = true;
+            log("STOPPING ACTIVE TASKS: " + activeDownloadTasks.size());
             for (int i = 0; i < activeDownloadTasks.size(); i++) {
                 activeDownloadTasks.get(i).stop();
             }
@@ -211,6 +213,10 @@ public void startDownloads() {
         }
     }
 
+    public boolean isDownloadsStopped() {
+        return downloadsStopped;
+    }
+
     /**
      * Adds a {@link DownloadListener}.
      *
@@ -332,20 +338,26 @@ public boolean isIdle() {
      * If the task is a remove action then preceding conflicting tasks are canceled.
      */
     private void maybeStartTasks() {
+        log("maybeStartTasks");
         if (released) {
+            log("released -> returning");
             return;
         }
 
         boolean skipDownloadActions = downloadsStopped
                 || activeDownloadTasks.size() == maxActiveDownloadTasks;
+
+        log("tasks: " + tasks.size());
         for (int i = 0; i < tasks.size(); i++) {
             DownloadTask downloadTask = tasks.get(i);
+            log("downloadTask: " + i + " " + downloadTask.getStateString());
             if (!downloadTask.canStart()) {
                 continue;
             }
 
             DownloadAction downloadAction = downloadTask.downloadAction;
             boolean removeAction = downloadAction.isRemoveAction();
+            log("downloadAction isRemoveAction1 " + removeAction);
             if (!removeAction && skipDownloadActions) {
                 continue;
             }
@@ -354,12 +366,14 @@ private void maybeStartTasks() {
             for (int j = 0; j < i; j++) {
                 DownloadTask task = tasks.get(j);
                 if (task.downloadAction.isSameMedia(downloadAction)) {
+                    log("downloadAction isSameMedia");
                     if (removeAction) {
                         canStartTask = false;
                         logd(downloadTask + " clashes with " + task);
                         task.cancel();
                         // Continue loop to cancel any other preceding clashing tasks.
                     } else if (task.downloadAction.isRemoveAction()) {
+                        log("downloadAction isRemoveAction2 = true");
                         canStartTask = false;
                         skipDownloadActions = true;
                         break;
@@ -368,11 +382,14 @@ private void maybeStartTasks() {
             }
 
             if (canStartTask) {
+                log("canStartTask = true");
                 downloadTask.start();
                 if (!removeAction) {
                     activeDownloadTasks.add(downloadTask);
                     skipDownloadActions = activeDownloadTasks.size() == maxActiveDownloadTasks;
                 }
+            } else {
+                log("canStartTask = false");
             }
         }
     }
@@ -461,7 +478,7 @@ private void saveActions() {
             public void run() {
                 try {
                     actionFile.store(actions);
-                    logd("Actions persisted.");
+                    logd("Actions saved.");
                 } catch (IOException e) {
                     Log.e(TAG, "Persisting actions failed.", e);
                 }
@@ -766,8 +783,11 @@ public void run() {
 
         private void stop() {
             if (changeStateAndNotify(STATE_STARTED, STATE_STARTED_STOPPING)) {
+                log("Stopping task: " + this);
                 downloadManager.logd("Stopping", this);
                 thread.interrupt();
+            } else {
+                log("NOT STOPPING task: " + this);
             }
         }
 
@@ -793,20 +813,25 @@ private boolean changeStateAndNotify(
 
         @Override
         public void run() {
+            log("DownloadTask: run");
             downloadManager.logd("Task is started", DownloadTask.this);
             Throwable error = null;
             try {
                 downloader = downloadAction.createDownloader(downloadManager.downloaderConstructorHelper);
                 if (downloadAction.isRemoveAction()) {
+                    log("REMOVING IS BAD");
                     downloader.remove();
                 } else {
                     int errorCount = 0;
                     long errorPosition = C.LENGTH_UNSET;
                     while (true) {
                         try {
+                            log("DownloadTask: downloading");
                             downloader.download(null);
                             break;
                         } catch (IOException e) {
+                            log("DownloadTask: IOException: " + e.getMessage());
+                            log("DownloadTask: CurrentState: " + currentState);
                             long downloadedBytes = downloader.getDownloadedBytes();
                             if (downloadedBytes != errorPosition) {
                                 downloadManager.logd(
@@ -823,6 +848,7 @@ public void run() {
                     }
                 }
             } catch (Throwable e) {
+                log("DownloadTask: error: " + e);
                 error = e;
             }
             final Throwable finalError = error;
@@ -836,6 +862,7 @@ public void run() {
                                     || changeStateAndNotify(STATE_STARTED_STOPPING, STATE_QUEUED)) {
                                 return;
                             }
+
                             throw new IllegalStateException();
                         }
                     });
@@ -846,4 +873,7 @@ private int getRetryDelayMillis(int errorCount) {
         }
     }
 
+    private static void log(String text) {
+        Log.e("GYMONDO", "DownloadManager: " + text);
+    }
 }
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/offline/DownloadService.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/offline/DownloadService.java
index 8c3655c629..261f078ceb 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/offline/DownloadService.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/offline/DownloadService.java
@@ -66,7 +66,7 @@
     /**
      * Use this action to make {@link DownloadManager} start download tasks.
      */
-    private static final String ACTION_START =
+    public static final String ACTION_START =
             "com.google.android.exoplayer.downloadService.action.START";
 
     /**
@@ -145,6 +145,7 @@ public static void addDownloadAction(
     @Override
     public void onCreate() {
         logd("onCreate");
+        log("CREATING! " + this.toString());
         downloadManager = getDownloadManager();
         downloadManager.addListener(this);
 
@@ -166,8 +167,10 @@ public void onCreate() {
     @Override
     public void onDestroy() {
         logd("onDestroy");
+        log("DESTROYING!");
         progressUpdater.stop();
         downloadManager.removeListener(this);
+        log("DESTROY with tasks: " + downloadManager.getTaskCount());
         if (downloadManager.getTaskCount() == 0) {
             if (requirementsWatcher != null) {
                 requirementsWatcher.stop();
@@ -222,6 +225,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {
                 break;
         }
         if (downloadManager.isIdle()) {
+            log("downloadManager.isIdle()");
             onIdle(null);
         }
         return START_STICKY;
@@ -424,4 +428,8 @@ private void startServiceWithAction(String action) {
             }
         }
     }
+
+    private static void log(String text) {
+        Log.e("GYMONDO", "DownloadService: " + text);
+    }
 }
diff --git a/demos/main/src/main/res/layout/download_activity.xml b/demos/main/src/main/res/layout/download_activity.xml
index 8da851c9e7..1db84b1c08 100644
--- a/demos/main/src/main/res/layout/download_activity.xml
+++ b/demos/main/src/main/res/layout/download_activity.xml
@@ -31,7 +31,8 @@
     <TextView
         android:id="@+id/txt_status"
         android:layout_width="wrap_content"
-        android:layout_height="50dp"
+        android:layout_height="wrap_content"
+        android:singleLine="false"
         android:text="Nothing happening here" />
 
 </LinearLayout>
\ No newline at end of file
