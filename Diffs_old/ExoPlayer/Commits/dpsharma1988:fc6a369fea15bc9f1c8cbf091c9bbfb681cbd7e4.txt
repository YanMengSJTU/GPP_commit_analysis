diff --git a/demos/main/src/main/assets/media.exolist.json b/demos/main/src/main/assets/media.exolist.json
index ed47b61631..c909b79088 100644
--- a/demos/main/src/main/assets/media.exolist.json
+++ b/demos/main/src/main/assets/media.exolist.json
@@ -24,7 +24,7 @@
       },
       {
         "name": "Encrypted Custom Small",
-        "uri": "https://vocatest-a40ab.firebaseapp.com/small_files/encrypted_without_key/index.m3u8"
+        "uri": "https://voca2hosting.firebaseapp.com/small_files/encrypted_without_key/index.m3u8"
       }
     ]
   }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/LicenceObtainer.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/LicenceObtainer.java
new file mode 100644
index 0000000000..ce4ca73233
--- /dev/null
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/LicenceObtainer.java
@@ -0,0 +1,107 @@
+package com.google.android.exoplayer2.offline;
+
+import android.util.Log;
+import com.google.android.exoplayer2.upstream.HttpDataSource;
+import com.google.android.exoplayer2.upstream.vocabimate_stream.VocaDataSourceHelper;
+import com.google.gson.Gson;
+import com.google.gson.JsonObject;
+
+import java.io.BufferedInputStream;
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.util.Map;
+
+public class LicenceObtainer {
+
+    private int connectTimeoutMillis;
+    private ILicenceData listener;
+    private int readTimeoutMillis;
+    private HttpDataSource.RequestProperties defaultRequestProperties;
+    private HttpDataSource.RequestProperties requestProperties;
+    private String userAgent;
+
+    public LicenceObtainer(int connectTimeoutMillis, ILicenceData listener) {
+        this.connectTimeoutMillis = connectTimeoutMillis;
+        this.listener = listener;
+    }
+
+    public void getLicence() throws IOException
+    {
+        String licenceUrl = "https://voca2hosting.firebaseapp.com/small_files/license_key_path_absolute.json";
+        URL url = new URL(licenceUrl);
+
+        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
+        urlConnection.setConnectTimeout(connectTimeoutMillis);
+        urlConnection.setReadTimeout(readTimeoutMillis);
+        /*if (defaultRequestProperties != null) {
+            for (Map.Entry<String, String> property : defaultRequestProperties.getSnapshot().entrySet()) {
+                connection.setRequestProperty(property.getKey(), property.getValue());
+            }
+        }
+        for (Map.Entry<String, String> property : requestProperties.getSnapshot().entrySet()) {
+            connection.setRequestProperty(property.getKey(), property.getValue());
+        }
+        connection.setRequestProperty("User-Agent", userAgent);
+        connection.setRequestMethod("GET");
+//    if(!TextUtils.isEmpty(TokenManager.getToken())) {
+//      connection.setRequestProperty("token", TokenManager.getToken());
+//    }
+        Log.d(TAG, "hisham: " + connection.getResponseCode());
+        return connection;*/
+        try {
+            urlConnection = (HttpURLConnection) url
+                    .openConnection();
+
+            InputStream in = urlConnection.getInputStream();
+
+            String result = readStream(in);
+            listener.onLicenceReceived(new Gson().fromJson(result, VocaDataSourceHelper.LicenceModel.class));
+
+            /*InputStreamReader isw = new InputStreamReader(in);
+            int data = isw.read();
+            while (data != -1) {
+                char current = (char) data;
+                data = isw.read();
+                System.out.print(current);
+            }*/
+        } catch (Exception e) {
+            e.printStackTrace();
+        } finally {
+            if (urlConnection != null) {
+                urlConnection.disconnect();
+            }
+        }
+    }
+
+    private String readStream(InputStream in) {
+        BufferedReader reader = null;
+        StringBuffer response = new StringBuffer();
+        try {
+            reader = new BufferedReader(new InputStreamReader(in));
+            String line = "";
+            while ((line = reader.readLine()) != null) {
+                response.append(line);
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+        } finally {
+            if (reader != null) {
+                try {
+                    reader.close();
+                } catch (IOException e) {
+                    e.printStackTrace();
+                }
+            }
+        }
+        return response.toString();
+    }
+
+
+    interface ILicenceData {
+        public void onLicenceReceived(VocaDataSourceHelper.LicenceModel licenceModel);
+    }
+}
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloader.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloader.java
index d84ddb3f1b..e9b88e4a60 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloader.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloader.java
@@ -43,6 +43,40 @@
 public abstract class SegmentDownloader<M extends FilterableManifest<M, K>, K>
     implements Downloader {
 
+  private VocaDataSourceHelper.LicenceModel licenceModel;
+  private Thread currentThread;
+  // A network thread to get the details of licence file
+  Thread lecenceThread = new Thread(new Runnable() {
+    @Override
+    public void run() {
+// TODO Network API Hit
+      LicenceObtainer licenceObtainer = new LicenceObtainer(800, new LicenceObtainer.ILicenceData() {
+        @Override
+        public void onLicenceReceived(VocaDataSourceHelper.LicenceModel model) {
+          // TODO Handle licence model and get the key_path from the same.
+          licenceModel = model;
+          try{
+            synchronized (currentThread) {
+              currentThread.notify();
+            }
+          }
+          catch (Exception e)
+          {
+            e.printStackTrace();
+          }
+//          notifyAll();
+        }
+      });
+
+      try {
+        licenceObtainer.getLicence();
+      } catch (IOException e) {
+        e.printStackTrace();
+      }
+    }
+  });
+
+
   /** Smallest unit of content to be downloaded. */
   protected static class Segment implements Comparable<Segment> {
     /** The start time of the segment in microseconds. */
@@ -223,9 +257,16 @@ public final void remove() throws InterruptedException {
 //    DataSpec licenceSpec = new DataSpec(Uri.parse("https://vocatest-a40ab.firebaseapp.com/license_key_path_absolute.json"));
 //    DataSource source = DataSource.Factory.createDataSource();
 
-    String licenceJson = "{ \"key_path\": \"https://vocatest-a40ab.firebaseapp.com/small_files/enc.key\" }";
+    // TODO Get the licence details via network API
+    currentThread = Thread.currentThread();
+    lecenceThread.start();
+    synchronized (currentThread) {
+      currentThread.wait();
+    }
+
+//    String licenceJson = "{ \"key_path\": \"https://vocatest-a40ab.firebaseapp.com/small_files/enc.key\" }";
 
-    VocaDataSourceHelper.LicenceModel model = new Gson().fromJson(licenceJson, VocaDataSourceHelper.LicenceModel.class);
+    VocaDataSourceHelper.LicenceModel model = licenceModel;
 
     Segment segLicence = new Segment(0, new DataSpec(Uri.parse(model.getPath())));
 
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/HttpDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/HttpDataSource.java
index 3725fc0052..6388594270 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/HttpDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/HttpDataSource.java
@@ -17,6 +17,8 @@
 
 import android.support.annotation.IntDef;
 import android.text.TextUtils;
+
+import com.google.android.exoplayer2.upstream.vocabimate_stream.AesEncryptionUtil;
 import com.google.android.exoplayer2.util.Predicate;
 import com.google.android.exoplayer2.util.Util;
 import java.io.IOException;
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsPlaylistParser.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsPlaylistParser.java
index 14a8b10b1f..e36d030b27 100644
--- a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsPlaylistParser.java
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsPlaylistParser.java
@@ -550,14 +550,14 @@ private static String parseOptionalStringAttr(String line, Pattern pattern) {
    */
   private static String parseStringAttr(String line, Pattern pattern) throws ParserException {
 
-    if(line != null && line.contains("custom://")){
-      String licenceJson = "{ \"key_path\": \"https://vocatest-a40ab.firebaseapp.com/enc.key\" }";
-
-//      VocaDataSourceHelper.LicenceModel model = new Gson().fromJson(licenceJson, VocaDataSourceHelper.LicenceModel.class);
-
-      return "https://vocatest-a40ab.firebaseapp.com/small_files/enc.key";
-
-    }
+//    if(line != null && line.contains("custom://")){
+//      String licenceJson = "{ \"key_path\": \"https://vocatest-a40ab.firebaseapp.com/enc.key\" }";
+//
+////      VocaDataSourceHelper.LicenceModel model = new Gson().fromJson(licenceJson, VocaDataSourceHelper.LicenceModel.class);
+//
+//      return "https://vocatest-a40ab.firebaseapp.com/small_files/enc.key";
+//
+//    }
 
     Matcher matcher = pattern.matcher(line);
     if (matcher.find() && matcher.groupCount() == 1) {
