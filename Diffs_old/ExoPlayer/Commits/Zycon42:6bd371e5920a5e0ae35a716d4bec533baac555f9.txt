diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadManager.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadManager.java
index 409f79f30b..379426c0e1 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadManager.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadManager.java
@@ -85,7 +85,7 @@
   private static final String TAG = "DownloadManager";
   private static final boolean DEBUG = false;
 
-  private final DownloaderConstructorHelper downloaderConstructorHelper;
+  private final DownloaderConstructorHelper.Factory downloaderConstructorHelperFactory;
   private final int maxActiveDownloadTasks;
   private final int minRetryCount;
   private final ActionFile actionFile;
@@ -118,7 +118,7 @@ public DownloadManager(
       File actionSaveFile,
       Deserializer... deserializers) {
     this(
-        new DownloaderConstructorHelper(cache, upstreamDataSourceFactory),
+        action -> new DownloaderConstructorHelper(cache, upstreamDataSourceFactory),
         actionSaveFile,
         deserializers);
   }
@@ -126,18 +126,18 @@ public DownloadManager(
   /**
    * Constructs a {@link DownloadManager}.
    *
-   * @param constructorHelper A {@link DownloaderConstructorHelper} to create {@link Downloader}s
-   *     for downloading data.
+   * @param constructorHelperFactory A {@link DownloaderConstructorHelper.Factory} that helps to create {@link Downloader}s
+   *    *     for downloading data.
    * @param actionFile The file in which active actions are saved.
    * @param deserializers Used to deserialize {@link DownloadAction}s. If empty, {@link
    *     DownloadAction#getDefaultDeserializers()} is used instead.
    */
   public DownloadManager(
-      DownloaderConstructorHelper constructorHelper,
+      DownloaderConstructorHelper.Factory constructorHelperFactory,
       File actionFile,
       Deserializer... deserializers) {
     this(
-        constructorHelper,
+        constructorHelperFactory,
         DEFAULT_MAX_SIMULTANEOUS_DOWNLOADS,
         DEFAULT_MIN_RETRY_COUNT,
         actionFile,
@@ -147,7 +147,7 @@ public DownloadManager(
   /**
    * Constructs a {@link DownloadManager}.
    *
-   * @param constructorHelper A {@link DownloaderConstructorHelper} to create {@link Downloader}s
+   * @param constructorHelperFactory A {@link DownloaderConstructorHelper.Factory} that helps to create {@link Downloader}s
    *     for downloading data.
    * @param maxSimultaneousDownloads The maximum number of simultaneous download tasks.
    * @param minRetryCount The minimum number of times a task must be retried before failing.
@@ -156,12 +156,12 @@ public DownloadManager(
    *     DownloadAction#getDefaultDeserializers()} is used instead.
    */
   public DownloadManager(
-      DownloaderConstructorHelper constructorHelper,
+      DownloaderConstructorHelper.Factory constructorHelperFactory,
       int maxSimultaneousDownloads,
       int minRetryCount,
       File actionFile,
       Deserializer... deserializers) {
-    this.downloaderConstructorHelper = constructorHelper;
+    this.downloaderConstructorHelperFactory = constructorHelperFactory;
     this.maxActiveDownloadTasks = maxSimultaneousDownloads;
     this.minRetryCount = minRetryCount;
     this.actionFile = new ActionFile(actionFile);
@@ -810,7 +810,9 @@ public void run() {
       logd("Task is started", this);
       Throwable error = null;
       try {
-        downloader = action.createDownloader(downloadManager.downloaderConstructorHelper);
+        downloader = action.createDownloader(
+          downloadManager.downloaderConstructorHelperFactory.createDownloaderConstructorHelper(action)
+        );
         if (action.isRemoveAction) {
           downloader.remove();
         } else {
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloaderConstructorHelper.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloaderConstructorHelper.java
index 18387b9d92..ba6fb678ea 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloaderConstructorHelper.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloaderConstructorHelper.java
@@ -19,7 +19,6 @@
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.upstream.DataSink;
 import com.google.android.exoplayer2.upstream.DataSource;
-import com.google.android.exoplayer2.upstream.DataSource.Factory;
 import com.google.android.exoplayer2.upstream.DummyDataSource;
 import com.google.android.exoplayer2.upstream.FileDataSource;
 import com.google.android.exoplayer2.upstream.PriorityDataSource;
@@ -32,17 +31,21 @@
 /** A helper class that holds necessary parameters for {@link Downloader} construction. */
 public final class DownloaderConstructorHelper {
 
+  public interface Factory {
+    DownloaderConstructorHelper createDownloaderConstructorHelper(DownloadAction action);
+  }
+
   private final Cache cache;
-  private final Factory upstreamDataSourceFactory;
-  private final Factory cacheReadDataSourceFactory;
+  private final DataSource.Factory upstreamDataSourceFactory;
+  private final DataSource.Factory cacheReadDataSourceFactory;
   private final DataSink.Factory cacheWriteDataSinkFactory;
   private final PriorityTaskManager priorityTaskManager;
 
   /**
    * @param cache Cache instance to be used to store downloaded data.
-   * @param upstreamDataSourceFactory A {@link Factory} for downloading data.
+   * @param upstreamDataSourceFactory A {@link DataSource.Factory} for downloading data.
    */
-  public DownloaderConstructorHelper(Cache cache, Factory upstreamDataSourceFactory) {
+  public DownloaderConstructorHelper(Cache cache, DataSource.Factory upstreamDataSourceFactory) {
     this(cache, upstreamDataSourceFactory, null, null, null);
   }
 
@@ -59,8 +62,8 @@ public DownloaderConstructorHelper(Cache cache, Factory upstreamDataSourceFactor
    */
   public DownloaderConstructorHelper(
       Cache cache,
-      Factory upstreamDataSourceFactory,
-      @Nullable Factory cacheReadDataSourceFactory,
+      DataSource.Factory upstreamDataSourceFactory,
+      @Nullable DataSource.Factory cacheReadDataSourceFactory,
       @Nullable DataSink.Factory cacheWriteDataSinkFactory,
       @Nullable PriorityTaskManager priorityTaskManager) {
     Assertions.checkNotNull(upstreamDataSourceFactory);
