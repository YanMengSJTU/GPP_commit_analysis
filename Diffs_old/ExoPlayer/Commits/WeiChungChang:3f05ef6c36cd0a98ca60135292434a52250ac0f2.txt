diff --git a/library/src/main/java/com/google/android/exoplayer2/ExoPlayer.java b/library/src/main/java/com/google/android/exoplayer2/ExoPlayer.java
index 083569416c..91217cd62c 100644
--- a/library/src/main/java/com/google/android/exoplayer2/ExoPlayer.java
+++ b/library/src/main/java/com/google/android/exoplayer2/ExoPlayer.java
@@ -463,4 +463,14 @@ public ExoPlayerMessage(ExoPlayerComponent target, int messageType, Object messa
    */
   boolean isCurrentWindowSeekable();
 
+  /**
+   * @return the speed factor: speed_of_playback / speed_of_real_clock
+   */
+  float getPlaybackSpeed();
+
+  /**
+   * @param speed the speed factor: speed_of_playback / speed_of_real_clock
+   */
+  void setPlaybackSpeed(float speed);
+
 }
diff --git a/library/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java b/library/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java
index d44d138091..ddb4337f3e 100644
--- a/library/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java
+++ b/library/src/main/java/com/google/android/exoplayer2/ExoPlayerImpl.java
@@ -312,6 +312,16 @@ public Timeline getCurrentTimeline() {
     return timeline;
   }
 
+  @Override
+  public float getPlaybackSpeed() { 
+    return internalPlayer.getPlaybackSpeed();
+  }
+
+  @Override
+  public void setPlaybackSpeed(float speed) { 
+    internalPlayer.setPlaybackSpeed(speed);
+  }
+
   @Override
   public Object getCurrentManifest() {
     return manifest;
diff --git a/library/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java b/library/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
index faf86087c9..5fbf343182 100644
--- a/library/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
+++ b/library/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
@@ -37,6 +37,8 @@
 import com.google.android.exoplayer2.util.TraceUtil;
 import java.io.IOException;
 
+import android.os.Build;
+import android.media.PlaybackParams;
 /**
  * Implements the internal behavior of {@link ExoPlayerImpl}.
  */
@@ -165,6 +167,7 @@ public SourceInfo(Timeline timeline, Object manifest, PlaybackInfo playbackInfo,
   private MediaPeriodHolder playingPeriodHolder;
 
   private Timeline timeline;
+  private float speed;
 
   public ExoPlayerImplInternal(Renderer[] renderers, TrackSelector trackSelector,
       LoadControl loadControl, boolean playWhenReady, Handler eventHandler,
@@ -222,6 +225,10 @@ public void sendMessages(ExoPlayerMessage... messages) {
     }
     customMessagesSent++;
     handler.obtainMessage(MSG_CUSTOM, messages).sendToTarget();
+
+    for (ExoPlayerMessage message : messages) {
+      maybeUpdatePlaybackSpeed(message);
+    }
   }
 
   public synchronized void blockingSendMessages(ExoPlayerMessage... messages) {
@@ -238,6 +245,9 @@ public synchronized void blockingSendMessages(ExoPlayerMessage... messages) {
         Thread.currentThread().interrupt();
       }
     }
+    for (ExoPlayerMessage message : messages) {
+      maybeUpdatePlaybackSpeed(message);
+    }
   }
 
   public synchronized void release() {
@@ -430,6 +440,9 @@ private void updatePlaybackPositions() throws ExoPlaybackException {
         rendererPositionUs = standaloneMediaClock.getPositionUs();
       }
       periodPositionUs = playingPeriodHolder.toPeriodTime(rendererPositionUs);
+      rendererPositionUs = rendererMediaClock.getPositionUs();
+      standaloneMediaClock.setPositionUs(rendererPositionUs);
+      periodPositionUs = rendererPositionUs - playingPeriodHolder.rendererPositionOffsetUs;
     }
     playbackInfo.positionUs = periodPositionUs;
     elapsedRealtimeUs = SystemClock.elapsedRealtime() * 1000;
@@ -1377,6 +1390,7 @@ private void enableRenderers(boolean[] rendererWasEnabledFlags, int enabledRende
                   new IllegalStateException("Multiple renderer media clocks enabled."));
             }
             rendererMediaClock = mediaClock;
+            rendererMediaClock.setPlaybackSpeed(speed);
             rendererMediaClockSource = renderer;
           }
           // Start the renderer if playing.
@@ -1388,6 +1402,40 @@ private void enableRenderers(boolean[] rendererWasEnabledFlags, int enabledRende
     }
   }
 
+  public float getPlaybackSpeed() {
+    return standaloneMediaClock.getPlaybackSpeed();
+  }
+
+  public void setPlaybackSpeed(float speed) {
+    this.speed = speed;
+
+    if ((Build.VERSION.SDK_INT >= 23) && (rendererMediaClockSource != null)) {
+      PlaybackParams params = new PlaybackParams();
+      params.setSpeed(speed);
+      ExoPlayerMessage[] messages = new ExoPlayerMessage[renderers.length];
+      for (int i = 0; i < renderers.length; i++) {
+        messages[i] = new ExoPlayerMessage(renderers[i], C.MSG_SET_PLAYBACK_PARAMS, params);
+      }
+      try {
+        sendMessagesInternal(messages);
+      } catch (ExoPlaybackException e) {
+        e.printStackTrace();
+      }
+    } else {
+      this.speed = speed;
+      standaloneMediaClock.setPlaybackSpeed(speed);
+      if (rendererMediaClock != null) {
+        rendererMediaClock.setPlaybackSpeed(speed);
+      }
+    }
+  }
+
+  private void maybeUpdatePlaybackSpeed(ExoPlayerMessage msg) {
+    if (Build.VERSION.SDK_INT >= 23 && msg.messageType == C.MSG_SET_PLAYBACK_PARAMS) {
+      standaloneMediaClock.setPlaybackSpeed(((PlaybackParams)msg.message).allowDefaults().getSpeed());
+    }
+  }
+
   /**
    * Holds a {@link MediaPeriod} with information required to play it as part of a timeline.
    */
diff --git a/library/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java b/library/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
index 4547ec7e08..8aad552036 100644
--- a/library/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
+++ b/library/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
@@ -1036,4 +1036,14 @@ public PlaybackParamsHolder(PlaybackParams params) {
 
   }
 
+  @Override
+  public float getPlaybackSpeed() {
+    return player.getPlaybackSpeed();
+  }
+
+  @Override
+  public void setPlaybackSpeed(float speed) {
+    player.setPlaybackSpeed(speed);
+  }
+
 }
diff --git a/library/src/main/java/com/google/android/exoplayer2/audio/AudioTrack.java b/library/src/main/java/com/google/android/exoplayer2/audio/AudioTrack.java
index cc3f91bc0a..b4e673a0a3 100644
--- a/library/src/main/java/com/google/android/exoplayer2/audio/AudioTrack.java
+++ b/library/src/main/java/com/google/android/exoplayer2/audio/AudioTrack.java
@@ -59,6 +59,10 @@
  */
 public final class AudioTrack {
 
+  public void setPlaybackSpeed(float speed) {
+    audioTrackUtil.setPlaybackSpeed(speed);
+  }
+
   /**
    * Listener for audio track events.
    */
@@ -1256,6 +1260,7 @@ private static void setVolumeInternalV3(android.media.AudioTrack audioTrack, flo
     private long stopTimestampUs;
     private long stopPlaybackHeadPosition;
     private long endPlaybackHeadPosition;
+    private float speed = 1.0f;
 
     /**
      * Reconfigures the audio track utility helper to use the specified {@code audioTrack}.
@@ -1410,9 +1415,12 @@ public void setPlaybackParams(PlaybackParams playbackParams) {
      * @return The speed factor used by the underlying {@link android.media.AudioTrack}.
      */
     public float getPlaybackSpeed() {
-      return 1.0f;
+      return speed;
     }
 
+    public void setPlaybackSpeed(float speed) {
+      this.speed = speed;
+    }
   }
 
   @TargetApi(19)
diff --git a/library/src/main/java/com/google/android/exoplayer2/audio/MediaCodecAudioRenderer.java b/library/src/main/java/com/google/android/exoplayer2/audio/MediaCodecAudioRenderer.java
index dc7cdf42c8..224e55e890 100644
--- a/library/src/main/java/com/google/android/exoplayer2/audio/MediaCodecAudioRenderer.java
+++ b/library/src/main/java/com/google/android/exoplayer2/audio/MediaCodecAudioRenderer.java
@@ -365,6 +365,11 @@ protected void onOutputStreamEnded() {
     audioTrack.handleEndOfStream();
   }
 
+  @Override
+  public void setPlaybackSpeed(float speed) {
+    audioTrack.setPlaybackSpeed(speed);
+  }
+
   @Override
   public void handleMessage(int messageType, Object message) throws ExoPlaybackException {
     switch (messageType) {
diff --git a/library/src/main/java/com/google/android/exoplayer2/audio/SimpleDecoderAudioRenderer.java b/library/src/main/java/com/google/android/exoplayer2/audio/SimpleDecoderAudioRenderer.java
index 9e75145626..d03f492dcf 100644
--- a/library/src/main/java/com/google/android/exoplayer2/audio/SimpleDecoderAudioRenderer.java
+++ b/library/src/main/java/com/google/android/exoplayer2/audio/SimpleDecoderAudioRenderer.java
@@ -563,6 +563,11 @@ private void onInputFormatChanged(Format newFormat) throws ExoPlaybackException
     eventDispatcher.inputFormatChanged(newFormat);
   }
 
+  @Override
+  public void setPlaybackSpeed(float speed) {
+    audioTrack.setPlaybackSpeed(speed);
+  }
+
   @Override
   public void handleMessage(int messageType, Object message) throws ExoPlaybackException {
     switch (messageType) {
diff --git a/library/src/main/java/com/google/android/exoplayer2/util/MediaClock.java b/library/src/main/java/com/google/android/exoplayer2/util/MediaClock.java
index 5f42a40e04..e526f49c0c 100644
--- a/library/src/main/java/com/google/android/exoplayer2/util/MediaClock.java
+++ b/library/src/main/java/com/google/android/exoplayer2/util/MediaClock.java
@@ -25,4 +25,8 @@
    */
   long getPositionUs();
 
+  /**
+   * Set the playback speed
+   */
+  void setPlaybackSpeed(float speed);
 }
diff --git a/library/src/main/java/com/google/android/exoplayer2/util/StandaloneMediaClock.java b/library/src/main/java/com/google/android/exoplayer2/util/StandaloneMediaClock.java
index 0ae9b40869..40d00eaa43 100644
--- a/library/src/main/java/com/google/android/exoplayer2/util/StandaloneMediaClock.java
+++ b/library/src/main/java/com/google/android/exoplayer2/util/StandaloneMediaClock.java
@@ -36,6 +36,21 @@
    */
   private long deltaUs;
 
+  /**
+   * The media time(ms) on last sync.
+   */
+  private double lastMediaTime;
+
+  /**
+   * The {@link SystemClock#elapsedRealtime()} (ms) on last sync.
+   */
+  private long lastRealTime;
+
+  /*
+   * speed ratio between media time and real time
+   */
+  private float speed = 1.0f;
+
   /**
    * Starts the clock. Does nothing if the clock is already started.
    */
@@ -60,17 +75,34 @@ public void stop() {
    * @param timeUs The position to set in microseconds.
    */
   public void setPositionUs(long timeUs) {
-    this.positionUs = timeUs;
-    deltaUs = elapsedRealtimeMinus(timeUs);
+    lastRealTime = SystemClock.elapsedRealtime();
+    lastMediaTime = timeUs / 1000.0;
   }
 
   @Override
   public long getPositionUs() {
-    return started ? elapsedRealtimeMinus(deltaUs) : positionUs;
+    updateMediaTime();
+    return (long)(lastMediaTime * 1000);
   }
 
   private long elapsedRealtimeMinus(long toSubtractUs) {
     return SystemClock.elapsedRealtime() * 1000 - toSubtractUs;
   }
 
+  public float getPlaybackSpeed() { 
+    return speed;
+  }
+
+  public void setPlaybackSpeed(float newSpeed) {
+    updateMediaTime();
+    speed = newSpeed;
+  }
+
+  private void updateMediaTime() {
+    if (!started) 
+      return;
+    long realTime = SystemClock.elapsedRealtime();
+    lastMediaTime = lastMediaTime + (realTime - lastRealTime) * speed;
+    lastRealTime = realTime;
+  }
 }
