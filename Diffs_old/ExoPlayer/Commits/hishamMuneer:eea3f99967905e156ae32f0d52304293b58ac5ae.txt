diff --git a/demo/src/main/java/com/novo/adapters/VideoAdapter.java b/demo/src/main/java/com/novo/adapters/VideoAdapter.java
index 2b9496a6f7..fd29304886 100644
--- a/demo/src/main/java/com/novo/adapters/VideoAdapter.java
+++ b/demo/src/main/java/com/novo/adapters/VideoAdapter.java
@@ -35,7 +35,7 @@
     private ItemListener listener;
 
     public interface ItemListener {
-        void onItemClicked(VideoModel model);
+        void onVideoPlayClicked(VideoModel model);
         void onDownloadClicked(VideoModel model, ImageView ivDownload);
         void onDeleteClicked(File directory, ImageView ivDownload);
 
@@ -132,7 +132,7 @@ public void onClick(DialogInterface dialog, int id) {
             @Override
             public void onClick(View v) {
                 if(listener != null)
-                    listener.onItemClicked(items.get(position));
+                    listener.onVideoPlayClicked(items.get(position));
             }
         });
 
diff --git a/demo/src/main/java/com/novo/main/MainActivity.java b/demo/src/main/java/com/novo/main/MainActivity.java
index cec3ece5f9..cdd2697686 100644
--- a/demo/src/main/java/com/novo/main/MainActivity.java
+++ b/demo/src/main/java/com/novo/main/MainActivity.java
@@ -4,6 +4,7 @@
 import android.content.Intent;
 import android.net.Uri;
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 import android.text.TextUtils;
 import android.util.Log;
 import android.view.View;
@@ -12,6 +13,7 @@
 import android.widget.ImageView;
 import android.widget.Toast;
 
+import com.google.android.exoplayer2.source.hls.HLSUtils;
 import com.google.android.exoplayer2.source.hls.KeyWriter;
 import com.google.android.exoplayer2.upstream.novo.TokenManager;
 import com.google.gson.Gson;
@@ -42,14 +44,11 @@
 
 import static com.novo.util.Utils.TAG;
 
-public class MainActivity extends Activity {
+public class MainActivity extends Activity implements VideoAdapter.ItemListener {
 
     private Button btnLogin;
-//    private ImageView iVDownload;
-//    private String videoId = "arc_single";
     private GridView lvAll;
 
-
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -59,127 +58,15 @@ protected void onCreate(Bundle savedInstanceState) {
 
     private void initStuff() {
         btnLogin = (Button) findViewById(R.id.btnLogin);
-        Button btnLocal = (Button) findViewById(R.id.btnLocal);
-//        iVDownload = (ImageView) findViewById(R.id.iVDownload);
         lvAll = (GridView) findViewById(R.id.lvAll);
         ServerHit.JSONTask task = new ServerHit.JSONTask(this, TokenManager.getToken(), "GET", null, null, new ServerHit.ServiceHitResponseListener() {
             @Override
             public void onDone(final String response) {
                 Log.d(TAG, "onDone: " + response);
+                VideoAdapter adapter = new VideoAdapter(MainActivity.this, R.layout.row_videos_grid, getVideoModelsFromResponse(response));
+                adapter.setItemListener(MainActivity.this);
+                lvAll.setAdapter(adapter);
 
-                try {
-                    JSONArray array = new JSONArray(response);
-                    List<VideoModel> items = new ArrayList<>();
-                    for (int i = 0; i < array.length(); i++) {
-                        JSONObject jsonObject = array.getJSONObject(i);
-                        VideoModel model = new Gson().fromJson(jsonObject.toString(), VideoModel.class);
-                        items.add(model);
-                    }
-                    // hit server, get items and pass into adapter
-                    VideoAdapter adapter = new VideoAdapter(MainActivity.this, R.layout.row_videos_grid, items);
-                    adapter.setItemListener(new VideoAdapter.ItemListener() {
-                        @Override
-                        public void onItemClicked(final VideoModel model) {
-                            File dir = new File(Utils.getStorageDirectoryExtracts() + model.getVideoId());
-                            File[] file = dir.listFiles();
-                            if(Utils.isFolderPresent(dir)){
-                                // trying to find my file
-                                Log.d(TAG, "onItemClicked: " + ZipHelper.searchFile(file, null));
-                                ZipHelper.searchFile(file, new ZipHelper.FileListener() {
-                                    @Override
-                                    public void onFileSearchComplete(boolean fileFound, String fileToPlay) {
-                                        if(fileFound && !TextUtils.isEmpty(fileToPlay)) {
-                                            Intent intent = new Intent(getApplicationContext(), PlayerActivity.class);
-                                            intent.setData(Uri.parse(fileToPlay));
-                                            intent.setAction(PlayerActivity.ACTION_VIEW);
-                                            startActivity(intent);
-                                        } else {
-                                            Toast.makeText(MainActivity.this, "Unable to play local video, playing stream.", Toast.LENGTH_SHORT).show();
-                                            playMediaFromServer(model);
-                                        }
-                                    }
-                                });
-                            } else { // if folder is not present locally, play via server
-                                playMediaFromServer(model);
-                            }
-                        }
-
-                        @Override
-                        public void onDownloadClicked(VideoModel model, final ImageView ivDownload) {
-                            String serverFileUrl = EndPoints.getBaseUrl() + "VocabimateContentServer/webapi/video/download?videoId=" + model.getVideoId();
-                            // todo problem with zip file, hardcoded
-                            final String keyFileUrl = EndPoints.getBaseUrl() + "VocabimateKeyServer/webapi/keys/getKey?videoId=" + model.getVideoId();
-                            String videoId;
-                            try {
-                                Map<String, String> params = Utils.splitQuery(new URL(serverFileUrl));
-                                if(params != null && params.size() > 0 && params.containsKey("videoId")) {
-                                    videoId = params.get("videoId");
-                                } else {
-                                    Toast.makeText(MainActivity.this, "Video id not found", Toast.LENGTH_SHORT).show();
-                                    return;
-                                }
-                            } catch (UnsupportedEncodingException | MalformedURLException e) {
-                                e.printStackTrace();
-                                return;
-                            }
-                            // execute this when the downloader must be fired
-                            final File sourceZipFile = new File(Utils.getStorageDirectoryZips() + videoId);
-                            String fileNameWithOutExt = FilenameUtils.removeExtension(sourceZipFile.getName());
-                            final File targetDirectory = new File(Utils.getStorageDirectoryExtracts() + fileNameWithOutExt);
-                            targetDirectory.mkdir();
-
-                            final DownloadTask downloadTask = new DownloadTask(MainActivity.this, TokenManager.getToken(), sourceZipFile.getAbsolutePath(), new DownloadTask.DownloadTaskListener() {
-                                @Override
-                                public void onFileDownload() {
-                                    new ZipHelper.ZipTask(MainActivity.this, new ZipHelper.ZipTaskListener() {
-                                        @Override
-                                        public void onUnzipped(String fileToPlay) {
-                                            Log.d(TAG, "onUnzipped: " + fileToPlay);
-                                            ivDownload.setImageResource(R.mipmap.ic_download_complete);
-                                        }
-                                    }).execute(sourceZipFile, targetDirectory);
-                                }
-                            });
-                            downloadTask.execute(serverFileUrl);
-
-                            final File tempKeyPath = new File(Utils.getTempDirectoryExtracts() + videoId);
-                            final DownloadTask keyTask = new DownloadTask(MainActivity.this, TokenManager.getToken(), tempKeyPath.toString(), new DownloadTask.DownloadTaskListener() {
-                                @Override
-                                public void onFileDownload() {
-                                    KeyWriter.writeByteToFile(KeyWriter.readByteToFileUnencryptedData(keyFileUrl, tempKeyPath), keyFileUrl);
-                                }
-                            });
-                            keyTask.execute(keyFileUrl);
-//                            ServerHit.JSONTask keyTask = new ServerHit.JSONTask(MainActivity.this, "GET", null, null, new ServerHit.ServiceHitResponseListener() {
-//                                @Override
-//                                public void onDone(String response) {
-//                                    KeyWriter.writeByteToFile(response.getBytes(), keyFileUrl);
-//                                }
-//
-//                                @Override
-//                                public void onError(String error) {
-//                                    Log.e(TAG, "keyTask: " + error);
-//                                }
-//                            });
-//                            keyTask.setToken(TokenManager.getToken());
-//                            keyTask.execute(keyFileUrl);
-                        }
-
-                        @Override
-                        public void onDeleteClicked(File directory, ImageView ivDownload) {
-                            try {
-                                FileUtils.deleteDirectory(directory);
-                                ivDownload.setImageResource(R.mipmap.ic_download);
-                            } catch (IOException e) {
-                                e.printStackTrace();
-                                Log.d(TAG, "onDeleteClicked: unable to delete directory" + e.getLocalizedMessage());
-                            }
-                        }
-                    });
-                    lvAll.setAdapter(adapter);
-                } catch (JSONException e) {
-                    e.printStackTrace();
-                }
 
             }
 
@@ -198,13 +85,13 @@ public void run() {
             }
         });
 
-        String url = EndPoints.getBaseUrl() +"VocabimateContentServer/webapi/video/fetchAll";
+        String url = EndPoints.getBaseUrl() + "VocabimateContentServer/webapi/video/fetchAll";
         task.execute(url);
 
         btnLogin.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                if(!TextUtils.isEmpty(TokenManager.getToken())) {
+                if (!TextUtils.isEmpty(TokenManager.getToken())) {
                     TokenManager.setToken(null);
                     loginButtonTextUpdate();
                     return;
@@ -215,16 +102,25 @@ public void onClick(View v) {
             }
         });
 
+    }
 
-
-
-        btnLocal.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-
+    @NonNull
+    private List<VideoModel> getVideoModelsFromResponse(String response) {
+        List<VideoModel> items = new ArrayList<>();
+        if (TextUtils.isEmpty(response)) {
+            return items;
+        }
+        try {
+            JSONArray array = new JSONArray(response);
+            for (int i = 0; i < array.length(); i++) {
+                JSONObject jsonObject = array.getJSONObject(i);
+                VideoModel model = new Gson().fromJson(jsonObject.toString(), VideoModel.class);
+                items.add(model);
             }
-        });
-
+        } catch (JSONException e) {
+            e.printStackTrace();
+        }
+        return items;
     }
 
     private void playMediaFromServer(VideoModel model) {
@@ -249,7 +145,7 @@ public void onError(String error) {
 
             }
         });
-        streamTask.execute(EndPoints.getBaseUrl() +"VocabimateContentServer/webapi/video/stream?videoId=" + model.getVideoId());
+        streamTask.execute(EndPoints.getBaseUrl() + "VocabimateContentServer/webapi/video/stream?videoId=" + model.getVideoId());
     }
 
     @Override
@@ -265,10 +161,87 @@ protected void onResume() {
     }
 
     private void loginButtonTextUpdate() {
-        if(!TextUtils.isEmpty(TokenManager.getToken())){
+        if (!TextUtils.isEmpty(TokenManager.getToken())) {
             btnLogin.setText("Logout");
         } else {
             btnLogin.setText("Login");
         }
     }
+
+    @Override
+    public void onVideoPlayClicked(final VideoModel model) {
+        File dir = new File(Utils.getStorageDirectoryExtracts() + model.getVideoId());
+        File[] file = dir.listFiles();
+        if (Utils.isFolderPresent(dir)) {
+            // trying to find my file
+            Log.d(TAG, "onVideoPlayClicked: " + ZipHelper.searchFile(file, null));
+            ZipHelper.searchFile(file, new ZipHelper.FileListener() {
+                @Override
+                public void onFileSearchComplete(boolean fileFound, String fileToPlay) {
+                    if (fileFound && !TextUtils.isEmpty(fileToPlay)) {
+                        Intent intent = new Intent(getApplicationContext(), PlayerActivity.class);
+                        intent.setData(Uri.parse(fileToPlay));
+                        intent.setAction(PlayerActivity.ACTION_VIEW);
+                        startActivity(intent);
+                    } else {
+                        Toast.makeText(MainActivity.this, "Unable to play local video, playing stream.", Toast.LENGTH_SHORT).show();
+                        playMediaFromServer(model);
+                    }
+                }
+            });
+        } else { // if folder is not present locally, play via server
+            playMediaFromServer(model);
+        }
+    }
+
+    @Override
+    public void onDownloadClicked(VideoModel model, final ImageView ivDownload) {
+        String serverFileUrl = EndPoints.getBaseUrl() + "VocabimateContentServer/webapi/video/download?videoId=" + model.getVideoId();
+        // todo problem with zip file, hardcoded
+        final String keyFileUrl = EndPoints.getBaseUrl() + "VocabimateKeyServer/webapi/keys/getKey?videoId=" + model.getVideoId();
+        String videoId = HLSUtils.getVideoIdFromUrl(serverFileUrl);
+        if(TextUtils.isEmpty(videoId)){
+            Toast.makeText(MainActivity.this, "Video id not found", Toast.LENGTH_SHORT).show();
+            return;
+        }
+        // execute this when the downloader must be fired
+        final File sourceZipFile = new File(Utils.getStorageDirectoryZips() + videoId);
+        String fileNameWithOutExt = FilenameUtils.removeExtension(sourceZipFile.getName());
+        final File targetDirectory = new File(Utils.getStorageDirectoryExtracts() + fileNameWithOutExt);
+        targetDirectory.mkdir();
+
+        final DownloadTask downloadTask = new DownloadTask(MainActivity.this, TokenManager.getToken(), sourceZipFile.getAbsolutePath(), new DownloadTask.DownloadTaskListener() {
+            @Override
+            public void onFileDownload() {
+                new ZipHelper.ZipTask(MainActivity.this, new ZipHelper.ZipTaskListener() {
+                    @Override
+                    public void onUnzipped(String fileToPlay) {
+                        Log.d(TAG, "onUnzipped: " + fileToPlay);
+                        ivDownload.setImageResource(R.mipmap.ic_download_complete);
+                    }
+                }).execute(sourceZipFile, targetDirectory);
+            }
+        });
+        downloadTask.execute(serverFileUrl);
+
+        final File tempKeyPath = new File(Utils.getTempDirectoryExtracts() + videoId);
+        final DownloadTask keyTask = new DownloadTask(MainActivity.this, TokenManager.getToken(), tempKeyPath.toString(), new DownloadTask.DownloadTaskListener() {
+            @Override
+            public void onFileDownload() {
+                KeyWriter.writeByteToFile(KeyWriter.readByteToFileUnencryptedData(keyFileUrl, tempKeyPath), keyFileUrl);
+            }
+        });
+        keyTask.execute(keyFileUrl);
+    }
+
+    @Override
+    public void onDeleteClicked(File directory, ImageView ivDownload) {
+        try {
+            FileUtils.deleteDirectory(directory);
+            ivDownload.setImageResource(R.mipmap.ic_download);
+        } catch (IOException e) {
+            e.printStackTrace();
+            Log.d(TAG, "onDeleteClicked: unable to delete directory" + e.getLocalizedMessage());
+        }
+    }
 }
diff --git a/demo/src/main/java/com/novo/util/Utils.java b/demo/src/main/java/com/novo/util/Utils.java
index c85e196099..1cced0cf02 100644
--- a/demo/src/main/java/com/novo/util/Utils.java
+++ b/demo/src/main/java/com/novo/util/Utils.java
@@ -65,30 +65,6 @@ public static boolean isNetworkAvailable(Context context) {
         NetworkInfo netInfo = cm.getActiveNetworkInfo();
         return netInfo != null && netInfo.isConnectedOrConnecting();
     }
+    private Utils() { }
 
-    public static Map<String, List<String>> splitQueryAdvanced(URL url) throws UnsupportedEncodingException {
-        final Map<String, List<String>> query_pairs = new LinkedHashMap<>();
-        final String[] pairs = url.getQuery().split("&");
-        for (String pair : pairs) {
-            final int idx = pair.indexOf("=");
-            final String key = idx > 0 ? URLDecoder.decode(pair.substring(0, idx), "UTF-8") : pair;
-            if (!query_pairs.containsKey(key)) {
-                query_pairs.put(key, new LinkedList<String>());
-            }
-            final String value = idx > 0 && pair.length() > idx + 1 ? URLDecoder.decode(pair.substring(idx + 1), "UTF-8") : null;
-            query_pairs.get(key).add(value);
-        }
-        return query_pairs;
-    }
-
-    public static Map<String, String> splitQuery(URL url) throws UnsupportedEncodingException {
-        Map<String, String> query_pairs = new LinkedHashMap<String, String>();
-        String query = url.getQuery();
-        String[] pairs = query.split("&");
-        for (String pair : pairs) {
-            int idx = pair.indexOf("=");
-            query_pairs.put(URLDecoder.decode(pair.substring(0, idx), "UTF-8"), URLDecoder.decode(pair.substring(idx + 1), "UTF-8"));
-        }
-        return query_pairs;
-    }
 }
diff --git a/demo/src/main/res/layout/activity_main.xml b/demo/src/main/res/layout/activity_main.xml
index 804de725cc..1c385fb18e 100644
--- a/demo/src/main/res/layout/activity_main.xml
+++ b/demo/src/main/res/layout/activity_main.xml
@@ -39,36 +39,6 @@
         android:text="Encrypted stream - Token Auth"
         android:textAllCaps="false" />
 
-    <RelativeLayout
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:layout_marginLeft="32dp"
-        android:layout_marginRight="32dp"
-        android:layout_gravity="center"
-        android:visibility="gone"
-        android:gravity="center"
-        android:layout_marginTop="16dp"
-        android:orientation="horizontal">
-
-
-        <Button
-            android:id="@+id/btnLocal"
-            android:layout_width="match_parent"
-            android:layout_toLeftOf="@+id/iVDownload"
-            android:layout_height="wrap_content"
-            android:text="Play Local"
-            android:textAllCaps="false" />
-
-        <ImageView
-            android:id="@+id/iVDownload"
-            android:layout_alignParentRight="true"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_weight="1"
-            android:src="@mipmap/ic_download" />
-
-    </RelativeLayout>
-
 
     <GridView
         android:layout_width="match_parent"
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HLSUtils.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HLSUtils.java
new file mode 100644
index 0000000000..d877323367
--- /dev/null
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HLSUtils.java
@@ -0,0 +1,67 @@
+package com.google.android.exoplayer2.source.hls;
+
+import java.io.UnsupportedEncodingException;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.net.URLDecoder;
+import java.util.LinkedHashMap;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Created by Hisham on 08/Sep/2017 - 15:10
+ */
+
+public class HLSUtils {
+
+    public static String getVideoIdFromUrl(String serverFileUrl) {
+        String videoId = null;
+        try {
+            Map<String, String> params = splitQuery(new URL(serverFileUrl));
+            if (params != null && params.size() > 0 && params.containsKey("videoId")) {
+                videoId = params.get("videoId");
+            }
+        } catch (UnsupportedEncodingException e) {
+            e.printStackTrace();
+        } catch (MalformedURLException e) {
+            e.printStackTrace();
+        }
+        return videoId;
+    }
+
+
+    /**
+     * Splits the query to get query parameters in a Map
+     * @param url
+     * @return
+     * @throws UnsupportedEncodingException
+     */
+    private static Map<String, String> splitQuery(URL url) throws UnsupportedEncodingException {
+        Map<String, String> query_pairs = new LinkedHashMap<String, String>();
+        String query = url.getQuery();
+        String[] pairs = query.split("&");
+        for (String pair : pairs) {
+            int idx = pair.indexOf("=");
+            query_pairs.put(URLDecoder.decode(pair.substring(0, idx), "UTF-8"), URLDecoder.decode(pair.substring(idx + 1), "UTF-8"));
+        }
+        return query_pairs;
+    }
+
+    public static Map<String, List<String>> splitQueryAdvanced(URL url) throws UnsupportedEncodingException {
+        final Map<String, List<String>> query_pairs = new LinkedHashMap<>();
+        final String[] pairs = url.getQuery().split("&");
+        for (String pair : pairs) {
+            final int idx = pair.indexOf("=");
+            final String key = idx > 0 ? URLDecoder.decode(pair.substring(0, idx), "UTF-8") : pair;
+            if (!query_pairs.containsKey(key)) {
+                query_pairs.put(key, new LinkedList<String>());
+            }
+            final String value = idx > 0 && pair.length() > idx + 1 ? URLDecoder.decode(pair.substring(idx + 1), "UTF-8") : null;
+            query_pairs.get(key).add(value);
+        }
+        return query_pairs;
+    }
+
+    private HLSUtils(){}
+}
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/KeyWriter.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/KeyWriter.java
index f4006e9d39..1826d2a71b 100644
--- a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/KeyWriter.java
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/KeyWriter.java
@@ -39,7 +39,7 @@
     public static byte[] readByteToFileUnencryptedData(String serverFileUrl, File tempKeyPath) {
         try {
             tempKeyPath.mkdirs();
-            String videoId = getVideoIdFromUrl(serverFileUrl);
+            String videoId = HLSUtils.getVideoIdFromUrl(serverFileUrl);
             if (videoId != null) {
                 return FileUtils.readFileToByteArray(new File(tempKeyPath.getAbsolutePath())); // decrypting
             }
@@ -54,7 +54,7 @@
         try {
             File keyFile = new File(keyStoragePath);
             keyFile.mkdirs();
-            String videoId = getVideoIdFromUrl(serverFileUrl);
+            String videoId = HLSUtils.getVideoIdFromUrl(serverFileUrl);
             if (videoId != null) {
                 byte[] decrypt = decrypt(FileUtils.readFileToByteArray(new File(keyFile.getAbsolutePath() + "/" + videoId)));
                 Log.d(TAG, "readByteToFileEncryptedData: read key from file: " + Arrays.toString(decrypt));
@@ -70,7 +70,7 @@ public static void writeByteToFile(byte[] keyBytes, String serverFileUrl) {
         try {
             File keyFile = new File(keyStoragePath);
             keyFile.mkdirs();
-            String videoId = getVideoIdFromUrl(serverFileUrl);
+            String videoId = HLSUtils.getVideoIdFromUrl(serverFileUrl);
             if (videoId != null){
                 byte[] encrypt = encrypt(keyBytes);
                 if (encrypt != null) {
@@ -85,30 +85,7 @@ public static void writeByteToFile(byte[] keyBytes, String serverFileUrl) {
         }
     }
 
-    private static String getVideoIdFromUrl(String serverFileUrl) {
-        String videoId = null;
-        try {
-            Map<String, String> params = splitQuery(new URL(serverFileUrl));
-            if (params != null && params.size() > 0 && params.containsKey("videoId")) {
-                videoId = params.get("videoId");
-            }
-        } catch (UnsupportedEncodingException | MalformedURLException e) {
-            e.printStackTrace();
-        }
-        return videoId;
-    }
-
 
-    private static Map<String, String> splitQuery(URL url) throws UnsupportedEncodingException {
-        Map<String, String> query_pairs = new LinkedHashMap<String, String>();
-        String query = url.getQuery();
-        String[] pairs = query.split("&");
-        for (String pair : pairs) {
-            int idx = pair.indexOf("=");
-            query_pairs.put(URLDecoder.decode(pair.substring(0, idx), "UTF-8"), URLDecoder.decode(pair.substring(idx + 1), "UTF-8"));
-        }
-        return query_pairs;
-    }
 
     private static byte[] encrypt(byte[] data) {
         try {
