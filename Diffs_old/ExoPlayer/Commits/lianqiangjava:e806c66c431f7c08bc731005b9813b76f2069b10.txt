diff --git a/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/OpusDecoder.java b/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/OpusDecoder.java
index 717bd724d7..02759bff19 100644
--- a/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/OpusDecoder.java
+++ b/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/OpusDecoder.java
@@ -162,7 +162,13 @@ public boolean decode(InputBuffer inputBuffer, OpusOutputBuffer outputBuffer) {
     SampleHolder sampleHolder = inputBuffer.sampleHolder;
     outputBuffer.timestampUs = sampleHolder.timeUs;
     sampleHolder.data.position(sampleHolder.data.position() - sampleHolder.size);
-    outputBuffer.init(sampleHolder.data.capacity() * 2);
+    int requiredOutputBufferSize =
+        opusGetRequiredOutputBufferSize(sampleHolder.data, sampleHolder.size, SAMPLE_RATE);
+    if (requiredOutputBufferSize < 0) {
+      exception = new OpusDecoderException("Error when computing required output buffer size.");
+      return false;
+    }
+    outputBuffer.init(requiredOutputBufferSize);
     int result = opusDecode(nativeDecoderContext, sampleHolder.data, sampleHolder.size,
         outputBuffer.data, outputBuffer.data.capacity());
     if (result < 0) {
@@ -202,6 +208,8 @@ private native long opusInit(int sampleRate, int channelCount, int numStreams, i
       int gain, byte[] streamMap);
   private native int opusDecode(long decoder, ByteBuffer inputBuffer, int inputSize,
       ByteBuffer outputBuffer, int outputSize);
+  private native int opusGetRequiredOutputBufferSize(
+      ByteBuffer inputBuffer, int inputSize, int sampleRate);
   private native void opusClose(long decoder);
   private native void opusReset(long decoder);
   private native String opusGetErrorMessage(int errorCode);
diff --git a/extensions/opus/src/main/jni/opus_jni.cc b/extensions/opus/src/main/jni/opus_jni.cc
index e4ee1c60e3..b15da26565 100644
--- a/extensions/opus/src/main/jni/opus_jni.cc
+++ b/extensions/opus/src/main/jni/opus_jni.cc
@@ -45,6 +45,7 @@ jint JNI_OnLoad(JavaVM* vm, void* reserved) {
   return JNI_VERSION_1_6;
 }
 
+static const int kBytesPerSample = 2;  // opus fixed point uses 16 bit samples.
 static int channelCount;
 
 FUNC(jlong, opusInit, jint sampleRate, jint channelCount, jint numStreams,
@@ -76,9 +77,19 @@ FUNC(jint, opusDecode, jlong jDecoder, jobject jInputBuffer, jint inputSize,
           env->GetDirectBufferAddress(jInputBuffer));
   int16_t* outputBuffer = reinterpret_cast<int16_t*>(
       env->GetDirectBufferAddress(jOutputBuffer));
-  int numFrames = opus_multistream_decode(decoder, inputBuffer, inputSize,
-                                          outputBuffer, outputSize, 0);
-  return (numFrames < 0) ? numFrames : numFrames * 2 * channelCount;
+  int sampleCount = opus_multistream_decode(decoder, inputBuffer, inputSize,
+                                            outputBuffer, outputSize, 0);
+  return (sampleCount < 0) ? sampleCount
+                           : sampleCount * kBytesPerSample * channelCount;
+}
+
+FUNC(jint, opusGetRequiredOutputBufferSize, jobject jInputBuffer,
+     jint inputSize, jint sampleRate) {
+  const uint8_t* inputBuffer = reinterpret_cast<const uint8_t*>(
+      env->GetDirectBufferAddress(jInputBuffer));
+  const int32_t sampleCount =
+      opus_packet_get_nb_samples(inputBuffer, inputSize, sampleRate);
+  return sampleCount * kBytesPerSample * channelCount;
 }
 
 FUNC(void, opusClose, jlong jDecoder) {
