diff --git a/library/src/androidTest/java/com/google/android/exoplayer/metadata/Id3ParserTest.java b/library/src/androidTest/java/com/google/android/exoplayer/metadata/Id3ParserTest.java
index 1dead0a139..cfa773ae89 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/metadata/Id3ParserTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/metadata/Id3ParserTest.java
@@ -18,6 +18,7 @@
 import junit.framework.TestCase;
 
 import java.util.Map;
+import java.util.Set;
 
 /**
  * Test for {@link Id3Parser}
@@ -26,18 +27,20 @@
 
   public void testParseTxxxFrames() {
     byte[] rawId3 = new byte[] { 73, 68, 51, 4, 0, 0, 0, 0, 0, 41, 84, 88, 88, 88, 0, 0, 0, 31,
-        0, 0, 3, 0, 109, 100, 105, 97, 108, 111, 103, 95, 86, 73, 78, 68, 73, 67, 79, 49, 53, 50,
-        55, 54, 54, 52, 95, 115, 116, 97, 114, 116, 0 };
+            0, 0, 3, 0, 109, 100, 105, 97, 108, 111, 103, 95, 86, 73, 78, 68, 73, 67, 79, 49, 53, 50,
+            55, 54, 54, 52, 95, 115, 116, 97, 114, 116, 0 };
 
     Id3Parser parser = new Id3Parser();
     try {
-      Map<String, Object> metadata = parser.parse(rawId3, rawId3.length);
-      assertNotNull(metadata);
-      assertEquals(1, metadata.size());
-      TxxxMetadata txxx = (TxxxMetadata) metadata.get(TxxxMetadata.TYPE);
-      assertNotNull(txxx);
-      assertEquals("", txxx.description);
-      assertEquals("mdialog_VINDICO1527664_start", txxx.value);
+      Id3Tag id3Tag = parser.parse(rawId3, rawId3.length);
+      assertNotNull(id3Tag);
+      assertEquals(1, id3Tag.size());
+      Set<TxxxMetadata> txxxFrames = id3Tag.getTxxxFrames();
+      assertEquals( 1, txxxFrames.size() );
+      TxxxMetadata txxxFrame = txxxFrames.toArray( new TxxxMetadata[1] )[1];
+      assertNotNull(txxxFrame);
+      assertEquals("", txxxFrame.description);
+      assertEquals("mdialog_VINDICO1527664_start", txxxFrame.value);
     } catch (Exception exception) {
       fail(exception.getMessage());
     }
diff --git a/library/src/main/java/com/google/android/exoplayer/metadata/Id3Parser.java b/library/src/main/java/com/google/android/exoplayer/metadata/Id3Parser.java
index 6b52cb5371..62cbc935fb 100644
--- a/library/src/main/java/com/google/android/exoplayer/metadata/Id3Parser.java
+++ b/library/src/main/java/com/google/android/exoplayer/metadata/Id3Parser.java
@@ -21,14 +21,12 @@
 
 import java.io.UnsupportedEncodingException;
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.Locale;
-import java.util.Map;
 
 /**
  * Extracts individual TXXX text frames from raw ID3 data.
  */
-public final class Id3Parser implements MetadataParser<Map<String, Object>> {
+public final class Id3Parser implements MetadataParser<Id3Tag> {
 
   private static final int ID3_TEXT_ENCODING_ISO_8859_1 = 0;
   private static final int ID3_TEXT_ENCODING_UTF_16 = 1;
@@ -41,9 +39,9 @@ public boolean canParse(String mimeType) {
   }
 
   @Override
-  public Map<String, Object> parse(byte[] data, int size)
-      throws UnsupportedEncodingException, ParserException {
-    Map<String, Object> metadata = new HashMap<>();
+  public Id3Tag parse(byte[] data, int size)
+          throws UnsupportedEncodingException, ParserException {
+    Id3Tag id3Tag = new Id3Tag();
     ParsableByteArray id3Data = new ParsableByteArray(data, size);
     int id3Size = parseId3Header(id3Data);
 
@@ -71,8 +69,8 @@ public boolean canParse(String mimeType) {
         int valueStartIndex = firstZeroIndex + delimiterLength(encoding);
         int valueEndIndex = indexOfEOS(frame, valueStartIndex, encoding);
         String value = new String(frame, valueStartIndex, valueEndIndex - valueStartIndex,
-            charset);
-        metadata.put(TxxxMetadata.TYPE, new TxxxMetadata(description, value));
+                charset);
+        id3Tag.addTxxxFrame( new TxxxMetadata(description, value));
       } else if (frameId0 == 'P' && frameId1 == 'R' && frameId2 == 'I' && frameId3 == 'V') {
         // Check frame ID == PRIV
         byte[] frame = new byte[frameSize];
@@ -82,7 +80,7 @@ public boolean canParse(String mimeType) {
         String owner = new String(frame, 0, firstZeroIndex, "ISO-8859-1");
         byte[] privateData = new byte[frameSize - firstZeroIndex - 1];
         System.arraycopy(frame, firstZeroIndex + 1, privateData, 0, frameSize - firstZeroIndex - 1);
-        metadata.put(PrivMetadata.TYPE, new PrivMetadata(owner, privateData));
+        id3Tag.put(PrivMetadata.TYPE, new PrivMetadata(owner, privateData));
       } else if (frameId0 == 'G' && frameId1 == 'E' && frameId2 == 'O' && frameId3 == 'B') {
         // Check frame ID == GEOB
         int encoding = id3Data.readUnsignedByte();
@@ -95,30 +93,30 @@ public boolean canParse(String mimeType) {
         int filenameStartIndex = firstZeroIndex + 1;
         int filenameEndIndex = indexOfEOS(frame, filenameStartIndex, encoding);
         String filename = new String(frame, filenameStartIndex,
-            filenameEndIndex - filenameStartIndex, charset);
+                filenameEndIndex - filenameStartIndex, charset);
         int descriptionStartIndex = filenameEndIndex + delimiterLength(encoding);
         int descriptionEndIndex = indexOfEOS(frame, descriptionStartIndex, encoding);
         String description = new String(frame, descriptionStartIndex,
-            descriptionEndIndex - descriptionStartIndex, charset);
+                descriptionEndIndex - descriptionStartIndex, charset);
 
         int objectDataSize = frameSize - 1 /* encoding byte */ - descriptionEndIndex
-            - delimiterLength(encoding);
+                - delimiterLength(encoding);
         byte[] objectData = new byte[objectDataSize];
         System.arraycopy(frame, descriptionEndIndex + delimiterLength(encoding), objectData, 0,
-            objectDataSize);
-        metadata.put(GeobMetadata.TYPE, new GeobMetadata(mimeType, filename,
-            description, objectData));
+                objectDataSize);
+        id3Tag.put(GeobMetadata.TYPE, new GeobMetadata(mimeType, filename,
+                description, objectData));
       } else {
         String type = String.format(Locale.US, "%c%c%c%c", frameId0, frameId1, frameId2, frameId3);
         byte[] frame = new byte[frameSize];
         id3Data.readBytes(frame, 0, frameSize);
-        metadata.put(type, frame);
+        id3Tag.put(type, frame);
       }
 
       id3Size -= frameSize + 10 /* header size */;
     }
 
-    return Collections.unmodifiableMap(metadata);
+    return ( Id3Tag ) Collections.unmodifiableMap(id3Tag);
   }
 
   private static int indexOf(byte[] data, int fromIndex, byte key) {
@@ -151,7 +149,7 @@ private static int indexOfEOS(byte[] data, int fromIndex, int encodingByte) {
 
   private static int delimiterLength(int encodingByte) {
     return (encodingByte == ID3_TEXT_ENCODING_ISO_8859_1
-        || encodingByte == ID3_TEXT_ENCODING_UTF_8) ? 1 : 2;
+            || encodingByte == ID3_TEXT_ENCODING_UTF_8) ? 1 : 2;
   }
 
   /**
@@ -167,7 +165,7 @@ private static int parseId3Header(ParsableByteArray id3Buffer) throws ParserExce
     int id3 = id3Buffer.readUnsignedByte();
     if (id1 != 'I' || id2 != 'D' || id3 != '3') {
       throw new ParserException(String.format(Locale.US,
-          "Unexpected ID3 file identifier, expected \"ID3\", actual \"%c%c%c\".", id1, id2, id3));
+              "Unexpected ID3 file identifier, expected \"ID3\", actual \"%c%c%c\".", id1, id2, id3));
     }
     id3Buffer.skipBytes(2); // Skip version.
 
diff --git a/library/src/main/java/com/google/android/exoplayer/metadata/Id3Tag.java b/library/src/main/java/com/google/android/exoplayer/metadata/Id3Tag.java
new file mode 100644
index 0000000000..6ac73dddaa
--- /dev/null
+++ b/library/src/main/java/com/google/android/exoplayer/metadata/Id3Tag.java
@@ -0,0 +1,97 @@
+package com.google.android.exoplayer.metadata;
+
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+
+
+public class Id3Tag implements Map<String, Object> {
+
+    private final Map<String, Object> frames;
+    private Set<TxxxMetadata> txxxFrames;
+
+    public Id3Tag() {
+        frames = new HashMap<>();
+        txxxFrames = new HashSet<>();
+    }
+
+    @Override
+    public void clear() {
+        frames.clear();
+    }
+
+    @Override
+    public boolean containsKey( Object key ) {
+        return frames.containsKey( key );
+    }
+
+    @Override
+    public boolean containsValue( Object value ) {
+        return frames.containsValue( value );
+    }
+
+    @Override
+    public Set<Entry<String, Object>> entrySet() {
+        return frames.entrySet();
+    }
+
+    @Override
+    public boolean equals( Object object ) {
+        return frames.equals( object );
+    }
+
+    @Override
+    public Object get( Object key ) {
+        return frames.get( key );
+    }
+
+    @Override
+    public int hashCode() {
+        return frames.hashCode();
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return frames.isEmpty();
+    }
+
+    @Override
+    public Set<String> keySet() {
+        return frames.keySet();
+    }
+
+    @Override
+    public Object put( String key, Object value ) {
+        return frames.put( key, value );
+    }
+
+    @Override
+    public void putAll( Map<? extends String, ?> map ) {
+        frames.putAll( map );
+    }
+
+    @Override
+    public Object remove( Object key ) {
+        return frames.remove( key );
+    }
+
+    @Override
+    public int size() {
+        return frames.size();
+    }
+
+    @Override
+    public Collection<Object> values() {
+        return frames.values();
+    }
+
+    public void addTxxxFrame( TxxxMetadata txxxMetadata ) {
+        txxxFrames.add( txxxMetadata );
+    }
+
+    public Set<TxxxMetadata> getTxxxFrames() {
+        return txxxFrames;
+    }
+}
