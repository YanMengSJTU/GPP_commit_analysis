diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
index c7d75e856d..80a6e66232 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
@@ -19,9 +19,6 @@
 import android.content.pm.PackageManager;
 import android.net.Uri;
 import android.os.Bundle;
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.appcompat.app.AppCompatActivity;
 import android.util.Pair;
 import android.view.KeyEvent;
 import android.view.View;
@@ -30,13 +27,13 @@
 import android.widget.LinearLayout;
 import android.widget.TextView;
 import android.widget.Toast;
+import androidx.annotation.NonNull;
+import androidx.appcompat.app.AppCompatActivity;
 import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.C.ContentType;
 import com.google.android.exoplayer2.ExoPlaybackException;
 import com.google.android.exoplayer2.ExoPlayerFactory;
 import com.google.android.exoplayer2.PlaybackPreparer;
 import com.google.android.exoplayer2.Player;
-import com.google.android.exoplayer2.RenderersFactory;
 import com.google.android.exoplayer2.SimpleExoPlayer;
 import com.google.android.exoplayer2.drm.DefaultDrmSessionManager;
 import com.google.android.exoplayer2.drm.FrameworkMediaCrypto;
@@ -48,20 +45,13 @@
 import com.google.android.exoplayer2.offline.DownloadHelper;
 import com.google.android.exoplayer2.offline.DownloadRequest;
 import com.google.android.exoplayer2.source.BehindLiveWindowException;
-import com.google.android.exoplayer2.source.ConcatenatingMediaSource;
 import com.google.android.exoplayer2.source.MediaSource;
 import com.google.android.exoplayer2.source.ProgressiveMediaSource;
 import com.google.android.exoplayer2.source.TrackGroupArray;
 import com.google.android.exoplayer2.source.ads.AdsLoader;
-import com.google.android.exoplayer2.source.ads.AdsMediaSource;
-import com.google.android.exoplayer2.source.dash.DashMediaSource;
-import com.google.android.exoplayer2.source.hls.HlsMediaSource;
-import com.google.android.exoplayer2.source.smoothstreaming.SsMediaSource;
 import com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection;
 import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;
 import com.google.android.exoplayer2.trackselection.MappingTrackSelector.MappedTrackInfo;
-import com.google.android.exoplayer2.trackselection.RandomTrackSelection;
-import com.google.android.exoplayer2.trackselection.TrackSelection;
 import com.google.android.exoplayer2.trackselection.TrackSelectionArray;
 import com.google.android.exoplayer2.ui.DebugTextViewHelper;
 import com.google.android.exoplayer2.ui.PlayerControlView;
@@ -72,13 +62,14 @@
 import com.google.android.exoplayer2.util.ErrorMessageProvider;
 import com.google.android.exoplayer2.util.EventLogger;
 import com.google.android.exoplayer2.util.Util;
-import java.lang.reflect.Constructor;
 import java.net.CookieHandler;
 import java.net.CookieManager;
 import java.net.CookiePolicy;
 import java.util.UUID;
 
-/** An activity that plays media using {@link SimpleExoPlayer}. */
+/**
+ * An activity that plays media using {@link SimpleExoPlayer}.
+ */
 public class PlayerActivity extends AppCompatActivity
     implements OnClickListener, PlaybackPreparer, PlayerControlView.VisibilityListener {
 
@@ -104,9 +95,6 @@
 
   public static final String SPHERICAL_STEREO_MODE_EXTRA = "spherical_stereo_mode";
 
-  // For backwards compatibility only.
-  private static final String DRM_SCHEME_UUID_EXTRA = "drm_scheme_uuid";
-
   // Saved instance state keys.
   private static final String KEY_TRACK_SELECTOR_PARAMETERS = "track_selector_parameters";
   private static final String KEY_WINDOW = "window";
@@ -114,6 +102,7 @@
   private static final String KEY_AUTO_PLAY = "auto_play";
 
   private static final CookieManager DEFAULT_COOKIE_MANAGER;
+
   static {
     DEFAULT_COOKIE_MANAGER = new CookieManager();
     DEFAULT_COOKIE_MANAGER.setCookiePolicy(CookiePolicy.ACCEPT_ORIGINAL_SERVER);
@@ -163,8 +152,10 @@ public void onCreate(Bundle savedInstanceState) {
     playerView.setControllerVisibilityListener(this);
     playerView.setErrorMessageProvider(new PlayerErrorMessageProvider());
     playerView.requestFocus();
-    if (sphericalStereoMode != null)
-      ((SphericalSurfaceView) playerView.getVideoSurfaceView()).setDefaultStereoMode(C.STEREO_MODE_MONO);
+    if (sphericalStereoMode != null) {
+      ((SphericalSurfaceView) playerView.getVideoSurfaceView())
+          .setDefaultStereoMode(C.STEREO_MODE_MONO);
+    }
 
     if (savedInstanceState != null) {
       trackSelectorParameters = savedInstanceState.getParcelable(KEY_TRACK_SELECTOR_PARAMETERS);
@@ -305,17 +296,14 @@ public void onVisibilityChange(int visibility) {
 
   private void initializePlayer() {
     if (player == null) {
-      Intent intent = getIntent();
-
-      boolean preferExtensionDecoders =
-          intent.getBooleanExtra(PREFER_EXTENSION_DECODERS_EXTRA, false);
-      RenderersFactory renderersFactory =
-          ((DemoApplication) getApplication()).buildRenderersFactory(preferExtensionDecoders);
-
       trackSelector = new DefaultTrackSelector(new AdaptiveTrackSelection.Factory());
       trackSelector.setParameters(trackSelectorParameters);
       lastSeenTrackGroupArray = null;
-      player = ExoPlayerFactory.newSimpleInstance(this, renderersFactory, trackSelector);
+      player = ExoPlayerFactory.newSimpleInstance(
+          this,
+          ((DemoApplication) getApplication()).buildRenderersFactory(
+              getIntent().getBooleanExtra(PREFER_EXTENSION_DECODERS_EXTRA, false)),
+          trackSelector);
       player.addListener(new PlayerEventListener());
       player.setPlayWhenReady(startAutoPlay);
       player.addAnalyticsListener(new EventLogger(trackSelector));
@@ -323,7 +311,8 @@ private void initializePlayer() {
       playerView.setPlaybackPreparer(this);
       debugViewHelper = new DebugTextViewHelper(player, debugTextView);
       debugViewHelper.start();
-      mediaSource = buildMediaSource(Uri.parse("https://firebasestorage.googleapis.com/v0/b/coinverse-media-staging.appspot.com/o/content%2Ffeeds%2Fen%2Faudio%2Fer-1142868678.mp3?alt=media"));
+      mediaSource = buildMediaSource(Uri.parse(
+          "https://firebasestorage.googleapis.com/v0/b/coinverse-media-staging.appspot.com/o/content%2Ffeeds%2Fen%2Faudio%2Fer-1142868678.mp3?alt=media"));
       releaseAdsLoader();
     }
     boolean haveStartPosition = startWindow != C.INDEX_UNSET;
@@ -340,24 +329,6 @@ private MediaSource buildMediaSource(Uri uri) {
     return new ProgressiveMediaSource.Factory(dataSourceFactory).createMediaSource(uri);
   }
 
-  private DefaultDrmSessionManager<FrameworkMediaCrypto> buildDrmSessionManagerV18(
-      UUID uuid, String licenseUrl, String[] keyRequestPropertiesArray, boolean multiSession)
-      throws UnsupportedDrmException {
-    HttpDataSource.Factory licenseDataSourceFactory =
-        ((DemoApplication) getApplication()).buildHttpDataSourceFactory();
-    HttpMediaDrmCallback drmCallback =
-        new HttpMediaDrmCallback(licenseUrl, licenseDataSourceFactory);
-    if (keyRequestPropertiesArray != null) {
-      for (int i = 0; i < keyRequestPropertiesArray.length - 1; i += 2) {
-        drmCallback.setKeyRequestProperty(keyRequestPropertiesArray[i],
-            keyRequestPropertiesArray[i + 1]);
-      }
-    }
-    releaseMediaDrm();
-    mediaDrm = FrameworkMediaDrm.newInstance(uuid);
-    return new DefaultDrmSessionManager<>(uuid, mediaDrm, drmCallback, null, multiSession);
-  }
-
   private void releasePlayer() {
     if (player != null) {
       updateTrackSelectorParameters();
@@ -410,7 +381,9 @@ private void clearStartPosition() {
     startPosition = C.TIME_UNSET;
   }
 
-  /** Returns a new DataSource factory. */
+  /**
+   * Returns a new DataSource factory.
+   */
   private DataSource.Factory buildDataSourceFactory() {
     return ((DemoApplication) getApplication()).buildDataSourceFactory();
   }
@@ -435,14 +408,10 @@ private void showToast(String message) {
   }
 
   private static boolean isBehindLiveWindow(ExoPlaybackException e) {
-    if (e.type != ExoPlaybackException.TYPE_SOURCE) {
-      return false;
-    }
+    if (e.type != ExoPlaybackException.TYPE_SOURCE) return false;
     Throwable cause = e.getSourceException();
     while (cause != null) {
-      if (cause instanceof BehindLiveWindowException) {
-        return true;
-      }
+      if (cause instanceof BehindLiveWindowException) return true;
       cause = cause.getCause();
     }
     return false;
@@ -471,23 +440,7 @@ public void onPlayerError(ExoPlaybackException e) {
 
     @Override
     @SuppressWarnings("ReferenceEquality")
-    public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray trackSelections) {
-      updateButtonVisibility();
-      if (trackGroups != lastSeenTrackGroupArray) {
-        MappedTrackInfo mappedTrackInfo = trackSelector.getCurrentMappedTrackInfo();
-        if (mappedTrackInfo != null) {
-          if (mappedTrackInfo.getTypeSupport(C.TRACK_TYPE_VIDEO)
-              == MappedTrackInfo.RENDERER_SUPPORT_UNSUPPORTED_TRACKS) {
-            showToast(R.string.error_unsupported_video);
-          }
-          if (mappedTrackInfo.getTypeSupport(C.TRACK_TYPE_AUDIO)
-              == MappedTrackInfo.RENDERER_SUPPORT_UNSUPPORTED_TRACKS) {
-            showToast(R.string.error_unsupported_audio);
-          }
-        }
-        lastSeenTrackGroupArray = trackGroups;
-      }
-    }
+    public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray trackSelections) { }
   }
 
   private class PlayerErrorMessageProvider implements ErrorMessageProvider<ExoPlaybackException> {
@@ -505,23 +458,15 @@ public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray tra
             if (decoderInitializationException.getCause() instanceof DecoderQueryException) {
               errorString = getString(R.string.error_querying_decoders);
             } else if (decoderInitializationException.secureDecoderRequired) {
-              errorString =
-                  getString(
+              errorString = getString(
                       R.string.error_no_secure_decoder, decoderInitializationException.mimeType);
-            } else {
-              errorString =
-                  getString(R.string.error_no_decoder, decoderInitializationException.mimeType);
-            }
-          } else {
-            errorString =
-                getString(
+            } else errorString = getString(R.string.error_no_decoder, decoderInitializationException.mimeType);
+          } else errorString = getString(
                     R.string.error_instantiating_decoder,
                     decoderInitializationException.decoderName);
-          }
         }
       }
       return Pair.create(0, errorString);
     }
   }
-
 }
\ No newline at end of file
