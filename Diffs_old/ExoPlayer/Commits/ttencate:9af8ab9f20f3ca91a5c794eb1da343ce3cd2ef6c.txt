diff --git a/README.md b/README.md
index 8ed742d69e..58b954f350 100644
--- a/README.md
+++ b/README.md
@@ -81,15 +81,3 @@ and copy `library.jar` to the libs folder of your new project.
 
 To develop ExoPlayer using Android Studio, simply open the ExoPlayer project in
 the root directory of the repository.
-
-#### Using Eclipse ####
-
-To develop ExoPlayer using Eclipse:
-
-  1. Install Eclipse and setup the [Android SDK][].
-  1. Open Eclipse and navigate to File->Import->General->Existing Projects into
-     Workspace.
-  1. Select the root directory of the repository.
-  1. Import the projects.
-
-[Android SDK]: http://developer.android.com/sdk/index.html
diff --git a/extensions/flac/README.md b/extensions/flac/README.md
index f89723d218..7d6abc9c8b 100644
--- a/extensions/flac/README.md
+++ b/extensions/flac/README.md
@@ -1,6 +1,6 @@
-# ExoPlayer Flac Extension
+# ExoPlayer Flac Extension #
 
-## Description
+## Description ##
 
 The Flac Extension is a [TrackRenderer][] implementation that helps you bundle
 libFLAC (the Flac decoding library) into your app and use it along with
@@ -8,19 +8,15 @@ ExoPlayer to play Flac audio on Android devices.
 
 [TrackRenderer]: https://google.github.io/ExoPlayer/doc/reference/com/google/android/exoplayer/TrackRenderer.html
 
-## Build Instructions (Android Studio and Eclipse)
+## Build Instructions ##
 
-Building the Flac Extension involves building libFLAC and JNI bindings using the
-Android NDK and linking it into your app. The following steps will tell you how
-to do that using Android Studio or Eclipse.
-
-*   Checkout ExoPlayer along with Extensions
+* Checkout ExoPlayer along with Extensions:
 
 ```
 git clone https://github.com/google/ExoPlayer.git
 ```
 
-*   Set the following environment variables:
+* Set the following environment variables:
 
 ```
 cd "<path to exoplayer checkout>"
@@ -28,8 +24,7 @@ EXOPLAYER_ROOT="$(pwd)"
 FLAC_EXT_PATH="${EXOPLAYER_ROOT}/extensions/flac/src/main"
 ```
 
-*   Download the [Android NDK][] and set its location in an environment
-    variable:
+* Download the [Android NDK][] and set its location in an environment variable:
 
 [Android NDK]: https://developer.android.com/tools/sdk/ndk/index.html
 
@@ -37,27 +32,22 @@ FLAC_EXT_PATH="${EXOPLAYER_ROOT}/extensions/flac/src/main"
 NDK_PATH="<path to Android NDK>"
 ```
 
-*   Download and extract flac-1.3.1 as "${FLAC_EXT_PATH}/jni/flac" folder
+* Download and extract flac-1.3.1 as "${FLAC_EXT_PATH}/jni/flac" folder:
 
 ```
 curl http://downloads.xiph.org/releases/flac/flac-1.3.1.tar.xz | tar xJ && \
 mv flac-1.3.1 flac
 ```
 
-### Android Studio
-
-For Android Studio, we build the native libraries from the command line and then
-Gradle will pick it up when building your app using Android Studio.
-
-*   Build the JNI native libraries
+* Build the JNI native libraries from the command line:
 
 ```
 cd "${FLAC_EXT_PATH}"/jni && \
 ${NDK_PATH}/ndk-build APP_ABI=all -j4
 ```
 
-*   In your project, you can add a dependency to the Flac Extension by using a
-    rule like this:
+* In your project, you can add a dependency to the Flac Extension by using a
+  rule like this:
 
 ```
 // in settings.gradle
@@ -71,21 +61,5 @@ dependencies {
 }
 ```
 
-*   Now, when you build your app, the Flac extension will be built and the
-    native libraries will be packaged along with the APK.
-
-### Eclipse
-
-To be completed...
-
-## Building for various Architectures
-
-### Android Studio
-
-The manual invocation of `ndk-build` will build the library for all
-architectures and the correct one will be picked up from the APK based on the
-device its running on.
-
-### Eclipse
-
-To be completed...
+* Now, when you build your app, the Flac extension will be built and the native
+  libraries will be packaged along with the APK.
diff --git a/extensions/okhttp/README.md b/extensions/okhttp/README.md
index 688bf8e08a..cf04ac106e 100644
--- a/extensions/okhttp/README.md
+++ b/extensions/okhttp/README.md
@@ -2,8 +2,8 @@
 
 ## Description ##
 
-The OkHttp Extension is an [HttpDataSource][] implementation using Square's [OkHttp][].
+The OkHttp Extension is an [HttpDataSource][] implementation using Square's
+[OkHttp][].
 
 [HttpDataSource]: https://google.github.io/ExoPlayer/doc/reference/com/google/android/exoplayer/upstream/HttpDataSource.html
 [OkHttp]: https://square.github.io/okhttp/
-
diff --git a/extensions/opus/README.md b/extensions/opus/README.md
index 571f4a05f0..8b1409c423 100644
--- a/extensions/opus/README.md
+++ b/extensions/opus/README.md
@@ -2,15 +2,15 @@
 
 ## Description ##
 
-The Opus Extension is a [TrackRenderer][] implementation that helps you bundle libopus (the Opus decoding library) into your app and use it along with ExoPlayer to play Opus audio on Android devices.
+The Opus Extension is a [TrackRenderer][] implementation that helps you bundle
+libopus (the Opus decoding library) into your app and use it along with
+ExoPlayer to play Opus audio on Android devices.
 
 [TrackRenderer]: https://google.github.io/ExoPlayer/doc/reference/com/google/android/exoplayer/TrackRenderer.html
 
-## Build Instructions (Android Studio and Eclipse) ##
+## Build Instructions ##
 
-Building the Opus Extension involves building libopus and JNI bindings using the Android NDK and linking it into your app. The following steps will tell you how to do that using Android Studio or Eclipse.
-
-* Checkout ExoPlayer along with Extensions
+* Checkout ExoPlayer along with Extensions:
 
 ```
 git clone https://github.com/google/ExoPlayer.git
@@ -30,31 +30,28 @@ OPUS_EXT_PATH="${EXOPLAYER_ROOT}/extensions/opus/src/main"
 NDK_PATH="<path to Android NDK>"
 ```
 
-* Fetch libopus
+* Fetch libopus:
 
 ```
 cd "${OPUS_EXT_PATH}/jni" && \
 git clone git://git.opus-codec.org/opus.git libopus
 ```
 
-* Run the script to convert arm assembly to NDK compatible format
+* Run the script to convert arm assembly to NDK compatible format:
 
 ```
 cd ${OPUS_EXT_PATH}/jni && ./convert_android_asm.sh
 ```
 
-### Android Studio ###
-
-For Android Studio, we build the native libraries from the command line and then Gradle will pick it up when building your app using Android Studio.
-
-* Build the JNI native libraries
+* Build the JNI native libraries from the command line:
 
 ```
 cd "${OPUS_EXT_PATH}"/jni && \
 ${NDK_PATH}/ndk-build APP_ABI=all -j4
 ```
 
-* In your project, you can add a dependency to the Opus Extension by using a rule like this:
+* In your project, you can add a dependency to the Opus Extension by using a
+rule like this:
 
 ```
 // in settings.gradle
@@ -68,64 +65,13 @@ dependencies {
 }
 ```
 
-* Now, when you build your app, the Opus extension will be built and the native libraries will be packaged along with the APK.
-
-### Eclipse ###
-
-* The following steps assume that you have installed Eclipse and configured it with the [Android SDK][] and [Android NDK ][]:
-  * Navigate to File->Import->General->Existing Projects into Workspace
-  * Select the root directory of the repository
-  * Import the following projects:
-    * ExoPlayerLib
-    * ExoPlayerExt-Opus
-    * If you are able to build ExoPlayerExt-Opus project, then you're all set.
-    * (Optional) To speed up the NDK build:
-      * Right click on ExoPlayerExt-Opus in the Project Explorer pane and choose Properties
-      * Click on C/C++ Build
-      * Uncheck `Use default build command`
-      * In `Build Command` enter: `ndk-build -j4` (adjust 4 to a reasonable number depending on the number of cores in your computer)
-      * Click Apply
-
-You can now create your own Android App project and add ExoPlayerLib along with ExoPlayerExt-Opus as a dependencies to use ExoPlayer along with the Opus Extension.
-
-
-[Android NDK]: https://developer.android.com/tools/sdk/ndk/index.html
-<!---
-Work around to point to two different links for the same text.
--->
-[Android NDK ]: http://tools.android.com/recent/usingthendkplugin
-[Android SDK]: http://developer.android.com/sdk/installing/index.html?pkg=tools
-
-## Building for various Architectures ##
-
-### Android Studio ###
-
-The manual invocation of `ndk-build` will build the library for all architectures and the correct one will be picked up from the APK based on the device its running on.
-
-### Eclipse  ###
-
-libopus can be built for the following architectures:
-
-* armeabi (the default - does not include neon optimizations)
-* armeabi-v7a (choose this to enable neon optimizations)
-* mips
-* x86
-* all (will result in a larger binary but will cover all architectures)
-
-You can build for a specific architecture in two ways:
-
-* Method 1 (edit `Application.mk`)
-  * Edit `${OPUS_EXT_PATH}/jni/Application.mk` and add the following line `APP_ABI := <arch>` (where `<arch>` is one of the above 4 architectures)
-* Method 2 (pass NDK build flag)
-  * Right click on ExoPlayerExt-Opus in the Project Explorer pane and choose Properties
-  * Click on C/C++ Build
-  * Uncheck `Use default build command`
-  * In `Build Command` enter: `ndk-build APP_ABI=<arch>` (where `<arch>` is one of the above 4 architectures)
-  * Click Apply
+* Now, when you build your app, the Opus extension will be built and the native
+  libraries will be packaged along with the APK.
 
-## Other Things to Note ##
+## Notes ##
 
 * Every time there is a change to the libopus checkout:
   * Arm assembly should be converted by running `convert_android_asm.sh`
   * Clean and re-build the project.
-* If you want to use your own version of libopus, place it in `${OPUS_EXT_PATH}/jni/libopus`.
+* If you want to use your own version of libopus, place it in
+  `${OPUS_EXT_PATH}/jni/libopus`.
diff --git a/extensions/vp9/README.md b/extensions/vp9/README.md
index 5d7bb1e848..28252fdfda 100644
--- a/extensions/vp9/README.md
+++ b/extensions/vp9/README.md
@@ -2,15 +2,15 @@
 
 ## Description ##
 
-The VP9 Extension is a [TrackRenderer][] implementation that helps you bundle libvpx (the VP9 decoding library) into your app and use it along with ExoPlayer to play VP9 video on Android devices.
+The VP9 Extension is a [TrackRenderer][] implementation that helps you bundle
+libvpx (the VP9 decoding library) into your app and use it along with ExoPlayer
+to play VP9 video on Android devices.
 
 [TrackRenderer]: https://google.github.io/ExoPlayer/doc/reference/com/google/android/exoplayer/TrackRenderer.html
 
-## Build Instructions (Android Studio and Eclipse) ##
+## Build Instructions ##
 
-Building the VP9 Extension involves building libvpx and JNI bindings using the Android NDK and linking it into your app. The following steps will tell you how to do that using Android Studio or Eclipse.
-
-* Checkout ExoPlayer along with Extensions
+* Checkout ExoPlayer along with Extensions:
 
 ```
 git clone https://github.com/google/ExoPlayer.git
@@ -30,7 +30,7 @@ VP9_EXT_PATH="${EXOPLAYER_ROOT}/extensions/vp9/src/main"
 NDK_PATH="<path to Android NDK>"
 ```
 
-* Fetch libvpx and libyuv
+* Fetch libvpx and libyuv:
 
 ```
 cd "${VP9_EXT_PATH}/jni" && \
@@ -38,25 +38,22 @@ git clone https://chromium.googlesource.com/webm/libvpx libvpx && \
 git clone https://chromium.googlesource.com/libyuv/libyuv libyuv
 ```
 
-* Run a script that generates necessary configuration files for libvpx
+* Run a script that generates necessary configuration files for libvpx:
 
 ```
 cd ${VP9_EXT_PATH}/jni && \
 ./generate_libvpx_android_configs.sh "${NDK_PATH}"
 ```
 
-### Android Studio ###
-
-For Android Studio, we build the native libraries from the command line and then Gradle will pick it up when building your app using Android Studio.
-
-* Build the JNI native libraries
+* Build the JNI native libraries from the command line:
 
 ```
 cd "${VP9_EXT_PATH}"/jni && \
 ${NDK_PATH}/ndk-build APP_ABI=all -j4
 ```
 
-* In your project, you can add a dependency to the VP9 Extension by using a the following rule
+* In your project, you can add a dependency to the VP9 Extension by using a the
+  following rule:
 
 ```
 // in settings.gradle
@@ -70,68 +67,15 @@ dependencies {
 }
 ```
 
-* Now, when you build your app, the VP9 extension will be built and the native libraries will be packaged along with the APK.
-
-### Eclipse ###
-
-* The following steps assume that you have installed Eclipse and configured it with the [Android SDK][] and [Android NDK ][]:
-  * Navigate to File->Import->General->Existing Projects into Workspace
-  * Select the root directory of the repository
-  * Import the following projects:
-    * ExoPlayerLib
-    * ExoPlayerExt-VP9
-    * If you are able to build ExoPlayerExt-VP9 project, then you're all set.
-    * (Optional) To speed up the NDK build:
-      * Right click on ExoPlayerExt-VP9 in the Project Explorer pane and choose Properties
-      * Click on C/C++ Build
-      * Uncheck `Use default build command`
-      * In `Build Command` enter: `ndk-build -j4` (adjust 4 to a reasonable number depending on the number of cores in your computer)
-      * Click Apply
-
-You can now create your own Android App project and add ExoPlayerLib along with ExoPlayerExt-VP9 as a dependencies to use ExoPlayer along with the VP9 Extension.
-
-
-[Android NDK]: https://developer.android.com/tools/sdk/ndk/index.html
-<!---
-Work around to point to two different links for the same text.
--->
-[Android NDK ]: http://tools.android.com/recent/usingthendkplugin
-[Android SDK]: http://developer.android.com/sdk/installing/index.html?pkg=tools
-
-## Building for various Architectures ##
-
-### Android Studio ###
-
-The manual invocation of `ndk-build` will build the library for all architectures and the correct one will be picked up from the APK based on the device its running on.
-
-### Eclipse  ###
-
-libvpx is optimized for various architectures (like neon, x86, etc.). The `generate_libvpx_android_configs.sh` script generates Android configurations for the following architectures:
-
-* armeabi (the default - does not include neon optimizations)
-* armeabi-v7a (choose this to enable neon optimizations)
-* mips
-* x86
-* arm64-v8a
-* mips64
-* x86_64
-* all (will result in a larger binary but will cover all architectures)
-
-You can build for a specific architecture in two ways:
-
-* Method 1 (edit `Application.mk`)
-  * Edit `${VP9_EXT_PATH}/jni/Application.mk` and add the following line `APP_ABI := <arch>` (where `<arch>` is one of the above 7 architectures)
-* Method 2 (pass NDK build flag)
-  * Right click on ExoPlayerExt-VP9 in the Project Explorer pane and choose Properties
-  * Click on C/C++ Build
-  * Uncheck `Use default build command`
-  * In `Build Command` enter: `ndk-build APP_ABI=<arch>` (where `<arch>` is one of the above 7 architectures)
-  * Click Apply
+* Now, when you build your app, the VP9 extension will be built and the native
+  libraries will be packaged along with the APK.
 
-## Other Things to Note ##
+## Notes ##
 
 * Every time there is a change to the libvpx checkout:
-  * Android config scripts should be re-generated by running `generate_libvpx_android_configs.sh`
+  * Android config scripts should be re-generated by running
+    `generate_libvpx_android_configs.sh`
   * Clean and re-build the project.
-* If you want to use your own version of libvpx or libyuv, place it in `${VP9_EXT_PATH}/jni/libvpx` or `${VP9_EXT_PATH}/jni/libyuv` respectively.
+* If you want to use your own version of libvpx or libyuv, place it in
+  `${VP9_EXT_PATH}/jni/libvpx` or `${VP9_EXT_PATH}/jni/libyuv` respectively.
 
