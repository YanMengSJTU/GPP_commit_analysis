diff --git a/demos/main/build.gradle b/demos/main/build.gradle
index 53d6892214..f798ce0693 100644
--- a/demos/main/build.gradle
+++ b/demos/main/build.gradle
@@ -70,4 +70,5 @@ dependencies {
     withExtensionsImplementation project(path: modulePrefix + 'extension-opus')
     withExtensionsImplementation project(path: modulePrefix + 'extension-vp9')
     withExtensionsImplementation project(path: modulePrefix + 'extension-rtmp')
+    implementation 'com.google.code.gson:gson:2.8.5'
 }
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java
index 7bd8cd7daa..ba97f6f596 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java
@@ -35,7 +35,7 @@
 import com.google.android.exoplayer2.upstream.cache.SimpleCache;
 import com.google.android.exoplayer2.upstream.vocabimate_stream.CustomDataSourceFactory;
 import com.google.android.exoplayer2.util.Util;
-import com.vocabimate.protocol.KeyHelperModel;
+import com.vocabimate.protocol.ILicenceTo;
 
 import java.io.File;
 
@@ -70,7 +70,7 @@ public void onCreate() {
   }
 
   /** Returns a {@link DataSource.Factory}. */
-  public DataSource.Factory buildDataSourceFactory(TransferListener<? super DataSource> listener, KeyHelperModel keyHelper) {
+  public DataSource.Factory buildDataSourceFactory(TransferListener<? super DataSource> listener, ILicenceTo keyHelper) {
     DefaultDataSourceFactory upstreamFactory =
         new DefaultDataSourceFactory(this, listener, buildHttpDataSourceFactory(listener, keyHelper));
     return buildReadOnlyCacheDataSource(upstreamFactory, getDownloadCache());
@@ -78,7 +78,7 @@ public void onCreate() {
 
   /** Returns a {@link HttpDataSource.Factory}. */
   public HttpDataSource.Factory buildHttpDataSourceFactory(TransferListener<? super DataSource> listener,
-      KeyHelperModel keyHelper) {
+                                                           ILicenceTo keyHelper) {
     return new CustomDataSourceFactory(userAgent, listener, keyHelper);
   }
 
@@ -97,13 +97,13 @@ public DownloadTracker getDownloadTracker() {
     return downloadTracker;
   }
 
-  public DownloadTracker getDownloadTracker(KeyHelperModel keyHelperModel){
+  public DownloadTracker getDownloadTracker(ILicenceTo keyHelperModel){
     initDownloadManager(keyHelperModel);
     return downloadTracker;
   }
 
   private synchronized void initDownloadManager(
-      KeyHelperModel keyHelper) {
+          ILicenceTo keyHelper) {
     if (downloadManager == null) {
       DownloaderConstructorHelper downloaderConstructorHelper =
           new DownloaderConstructorHelper(
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/DownloadTracker.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/DownloadTracker.java
index a48e63e62b..b67fe5532d 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/DownloadTracker.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/DownloadTracker.java
@@ -47,7 +47,7 @@
 import com.google.android.exoplayer2.ui.TrackNameProvider;
 import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.util.Util;
-import com.vocabimate.protocol.Dummy;
+import com.vocabimate.protocol.ILicenceTo;
 
 import java.io.File;
 import java.io.IOException;
@@ -124,13 +124,13 @@ public boolean isDownloaded(Uri uri) {
     return Collections.emptyList();
   }
 
-  private Dummy mDummy;
+  private ILicenceTo mKeyHelper;
 
-  public void toggleDownload(Activity activity, String name, Uri uri, String extension, Dummy dummy) {
-    this.mDummy = dummy;
+  public void toggleDownload(Activity activity, String name, Uri uri, String extension, ILicenceTo keyHelper) {
+    this.mKeyHelper = keyHelper;
     if (isDownloaded(uri)) {
       DownloadAction removeAction =
-          getDownloadHelper(uri, extension).getRemoveAction(Util.getUtf8Bytes(name), dummy);
+          getDownloadHelper(uri, extension).getRemoveAction(Util.getUtf8Bytes(name), keyHelper);
       startServiceWithAction(removeAction);
     } else {
       StartDownloadDialogHelper helper =
@@ -300,7 +300,7 @@ public void onClick(DialogInterface dialog, int which) {
       if (!selectedTrackKeys.isEmpty() || trackKeys.isEmpty()) {
         // We have selected keys, or we're dealing with single stream content.
         DownloadAction downloadAction =
-            downloadHelper.getDownloadAction(Util.getUtf8Bytes(name), selectedTrackKeys, mDummy);
+            downloadHelper.getDownloadAction(Util.getUtf8Bytes(name), selectedTrackKeys, mKeyHelper);
         startDownload(downloadAction);
       }
     }
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/LicenceBody.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/LicenceBody.java
new file mode 100644
index 0000000000..feca259015
--- /dev/null
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/LicenceBody.java
@@ -0,0 +1,47 @@
+package com.google.android.exoplayer2.demo;
+
+import com.google.gson.Gson;
+import com.google.gson.annotations.SerializedName;
+import com.vocabimate.protocol.KeyHelper;
+
+import java.io.Serializable;
+
+/**
+ * Created by Hisham on 18/Oct/2018 - 20:54
+ */
+public class LicenceBody extends KeyHelper implements Serializable {
+
+    @SerializedName("licenseTO")
+    private LicenceBodyInternal licenceBodyInternal;
+
+    public LicenceBody(int userId, int videoId, String delInd, String m3u8Path, String token, String licenceUrl) {
+        super(m3u8Path, token, licenceUrl);
+        licenceBodyInternal = new LicenceBodyInternal(userId, videoId, delInd);
+    }
+
+    @Override
+    public String jsonBody() {
+        return new Gson().toJson(this);
+    }
+
+    @Override
+    public String getType() {
+        return "POST";
+    }
+
+
+    private class LicenceBodyInternal implements Serializable {
+        @SerializedName("userId")
+        int userId;
+        @SerializedName("videoId")
+        int videoId;
+        @SerializedName("delInd")
+        String delInd;
+
+        public LicenceBodyInternal(int userId, int videoId, String delInd) {
+            this.userId = userId;
+            this.videoId = videoId;
+            this.delInd = delInd;
+        }
+    }
+}
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
index 3036bfc89b..97eebc45db 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
@@ -75,7 +75,7 @@
 import com.google.android.exoplayer2.util.ErrorMessageProvider;
 import com.google.android.exoplayer2.util.EventLogger;
 import com.google.android.exoplayer2.util.Util;
-import com.vocabimate.protocol.KeyHelperModel;
+import com.vocabimate.protocol.ILicenceTo;
 
 import java.lang.reflect.Constructor;
 import java.net.CookieHandler;
@@ -156,7 +156,7 @@ public void onCreate(Bundle savedInstanceState) {
 
     Intent intent = getIntent();
     if(intent.hasExtra("keyHelperModel")){
-      KeyHelperModel keyHelperModel = (KeyHelperModel) intent.getSerializableExtra("keyHelperModel");
+      ILicenceTo keyHelperModel = (ILicenceTo) intent.getSerializableExtra("keyHelperModel");
       mediaDataSourceFactory = buildDataSourceFactory(true, keyHelperModel);
     } else {
       throw new NullPointerException("keyHelperModel not found inside intent, forgot to call: intent.putExtra(\"keyHelperModel\", keyHelperModel);");
@@ -554,7 +554,7 @@ private void clearStartPosition() {
    * @param keyHelperModel
    * @return A new DataSource factory.
    */
-  private DataSource.Factory buildDataSourceFactory(boolean useBandwidthMeter, KeyHelperModel keyHelperModel) {
+  private DataSource.Factory buildDataSourceFactory(boolean useBandwidthMeter, ILicenceTo keyHelperModel) {
     return ((DemoApplication) getApplication())
         .buildDataSourceFactory(useBandwidthMeter ? BANDWIDTH_METER : null, keyHelperModel);
   }
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
index d858daffc5..35f23aa24a 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
@@ -41,8 +41,7 @@
 import com.google.android.exoplayer2.upstream.DefaultDataSource;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.Util;
-import com.vocabimate.protocol.Dummy;
-import com.vocabimate.protocol.KeyHelperModel;
+import com.vocabimate.protocol.ILicenceTo;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -139,13 +138,13 @@ public boolean onChildClick(ExpandableListView parent, View view, int groupPosit
     Sample sample = (Sample) view.getTag();
     Intent intent = sample.buildIntent(this);
 
-    KeyHelperModel keyHelperModel = getKeyHelper(id, (UriSample) sample);
+    ILicenceTo keyHelperModel = getKeyHelper(id, (UriSample) sample);
     intent.putExtra("keyHelperModel", keyHelperModel);
     startActivity(intent);
     return true;
   }
 
-  public KeyHelperModel getKeyHelper(long videoId, UriSample sample) {
+  public ILicenceTo getKeyHelper(long videoId, UriSample sample) {
 //    String key = null;
 //    if(sample.uri.toString().contains("tutorial")){
 //      key = "http://54.152.186.92:60801/drm/static/tutorial/tutorial.key";
@@ -162,26 +161,33 @@ public KeyHelperModel getKeyHelper(long videoId, UriSample sample) {
 //        .setKeyPath(key)
 //        .setM3u8Path(sample.uri.toString());
 //
-    if(sample.uri.toString().contains("https://voca2hosting.firebaseapp.com/small_files/encrypted_without_key/index.m3u8")) {
-      return new KeyHelperModel().setVideoId("videoId: " + videoId)
-              .setM3u8Path("https://voca2hosting.firebaseapp.com/small_files/encrypted_without_key/index.m3u8")
-              .setLicecnceUrl("https://vocatest-a40ab.firebaseapp.com/small_files/enc.key")
-              .setToken(null);
-    }
-
-    if(sample.uri.toString().contains("vid30")) {
-      return new KeyHelperModel().setVideoId("videoId: " + videoId)
-              .setM3u8Path("https://voca2hosting.firebaseapp.com/vid30/playlist.m3u8")
-              .setLicecnceUrl("https://voca2hosting.firebaseapp.com/vid30/licence")
-              .setToken("rmaC0c9VqdoDDCku3MsXLJw_LL2IM_62zw8lOwfJsLU=");
-    }
-
-
+//    if(sample.uri.toString().contains("http://54.152.186.92:60801/drm/videoServer/Video/inayat/vid3_seg/playlist.m3u8")) {
+      return new LicenceBody(32, 18, "N",
+              "http://54.152.186.92:60801/drm/videoServer/Video/inayat/vid3_seg/playlist.m3u8",
+              "PROCsVCsQpw8RNBq8YwuZnOrULeREGlW3G9PZukrZmU=",
+              "http://54.152.186.92:60801/license/create_license"
+              );
+//      .setVideoId("videoId: " + videoId)
+//              .setM3u8Path("http://54.152.186.92:60801/drm/videoServer/Video/inayat/vid3_seg/playlist.m3u8")
+//              .setLicecnceUrl("http://54.152.186.92:60801/license/create_license")
+//              .setToken("PROCsVCsQpw8RNBq8YwuZnOrULeREGlW3G9PZukrZmU=")
+//              .setLicenceTo(licenceBody);
+//    }
+//    return null;
 
-    return new KeyHelperModel().setVideoId("videoId: " + videoId)
-        .setM3u8Path("http://54.152.186.92:60801/drm/static/video/inayat/sample_category/vid5/playlist.m3u8")
-        .setLicecnceUrl("http://54.152.186.92:60801/drm/get_key_for_a_video/20")
-        .setToken("l8TmQpaBEdDGCtbefPfzTx54Bt4nOQLgaH8s3edJDhs=");
+//    if(sample.uri.toString().contains("vid30")) {
+//      return new KeyHelperModel().setVideoId("videoId: " + videoId)
+//              .setM3u8Path("https://voca2hosting.firebaseapp.com/vid30/playlist.m3u8")
+//              .setLicecnceUrl("https://voca2hosting.firebaseapp.com/vid30/licence")
+//              .setToken("rmaC0c9VqdoDDCku3MsXLJw_LL2IM_62zw8lOwfJsLU=");
+//    }
+//
+//
+//
+//    return new KeyHelperModel().setVideoId("videoId: " + videoId)
+//        .setM3u8Path("http://54.152.186.92:60801/drm/static/video/inayat/sample_category/vid5/playlist.m3u8")
+//        .setLicecnceUrl("http://54.152.186.92:60801/drm/get_key_for_a_video/20")
+//        .setToken("l8TmQpaBEdDGCtbefPfzTx54Bt4nOQLgaH8s3edJDhs=");
   }
 
   private void onSampleDownloadButtonClicked(Sample sample) {
@@ -191,9 +197,9 @@ private void onSampleDownloadButtonClicked(Sample sample) {
           .show();
     } else {
       UriSample uriSample = (UriSample) sample;
-      KeyHelperModel keyHelper = getKeyHelper(5, uriSample);
+      ILicenceTo keyHelper = getKeyHelper(5, uriSample);
       downloadTracker = ((DemoApplication)getApplication()).getDownloadTracker(keyHelper);
-      downloadTracker.toggleDownload(this, sample.name, uriSample.uri, uriSample.extension, new Dummy().setKeyHelper(keyHelper));
+      downloadTracker.toggleDownload(this, sample.name, uriSample.uri, uriSample.extension, keyHelper);
     }
   }
 
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadAction.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadAction.java
index 6b393faacc..8e272ecf54 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadAction.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadAction.java
@@ -18,7 +18,7 @@
 import android.net.Uri;
 import android.support.annotation.Nullable;
 
-import com.vocabimate.protocol.Dummy;
+import com.vocabimate.protocol.ILicenceTo;
 
 import java.io.ByteArrayOutputStream;
 import java.io.DataInputStream;
@@ -101,7 +101,7 @@ public static void serializeToStream(DownloadAction action, OutputStream output)
   public final boolean isRemoveAction;
   /** Custom data for this action. May be empty. */
   public final byte[] data;
-  public final Dummy mDummy;
+  public final ILicenceTo mKeyHelper;
 
   /**
    * @param type The type of the action.
@@ -109,15 +109,15 @@ public static void serializeToStream(DownloadAction action, OutputStream output)
    * @param uri The uri being downloaded or removed.
    * @param isRemoveAction Whether this is a remove action. If false, this is a download action.
    * @param data Optional custom data for this action.
-   * @param dummy
+   * @param keyHelper
    */
-  protected DownloadAction(String type, int version, Uri uri, boolean isRemoveAction, @Nullable byte[] data, Dummy dummy) {
+  protected DownloadAction(String type, int version, Uri uri, boolean isRemoveAction, @Nullable byte[] data, ILicenceTo keyHelper) {
     this.type = type;
     this.version = version;
     this.uri = uri;
     this.isRemoveAction = isRemoveAction;
     this.data = data != null ? data : new byte[0];
-    this.mDummy = dummy;
+    this.mKeyHelper = keyHelper;
   }
 
   /** Serializes itself into a byte array. */
@@ -141,7 +141,7 @@ public boolean isSameMedia(DownloadAction other) {
   protected abstract void writeToStream(DataOutputStream output) throws IOException;
 
   /** Creates a {@link Downloader} with the given parameters. */
-  protected abstract Downloader createDownloader(DownloaderConstructorHelper downloaderConstructorHelper, Dummy dummy);
+  protected abstract Downloader createDownloader(DownloaderConstructorHelper downloaderConstructorHelper, ILicenceTo keyHelper);
 
   @Override
   public boolean equals(@Nullable Object o) {
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
index 1b4dae5c76..8f528b7f3c 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
@@ -19,7 +19,7 @@
 import android.os.Looper;
 import android.support.annotation.Nullable;
 import com.google.android.exoplayer2.source.TrackGroupArray;
-import com.vocabimate.protocol.Dummy;
+import com.vocabimate.protocol.ILicenceTo;
 
 import java.io.IOException;
 import java.util.List;
@@ -110,17 +110,17 @@ public void run() {
    *
    * @param data Application provided data to store in {@link DownloadAction#data}.
    * @param trackKeys The selected tracks. If empty, all streams will be downloaded.
-   * @param dummy
+   * @param keyHelper
    * @return The built {@link DownloadAction}.
    */
-  public abstract DownloadAction getDownloadAction(@Nullable byte[] data, List<TrackKey> trackKeys, Dummy dummy);
+  public abstract DownloadAction getDownloadAction(@Nullable byte[] data, List<TrackKey> trackKeys, ILicenceTo keyHelper);
 
   /**
    * Builds a {@link DownloadAction} for removing the media. May be called in any state.
    *
    * @param data Application provided data to store in {@link DownloadAction#data}.
-   * @param dummy
+   * @param keyHelper
    * @return The built {@link DownloadAction}.
    */
-  public abstract DownloadAction getRemoveAction(@Nullable byte[] data, Dummy dummy);
+  public abstract DownloadAction getRemoveAction(@Nullable byte[] data, ILicenceTo keyHelper);
 }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadManager.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadManager.java
index 8d99d500db..066eb76f2e 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadManager.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadManager.java
@@ -809,7 +809,7 @@ public void run() {
       logd("Task is started", this);
       Throwable error = null;
       try {
-        downloader = action.createDownloader(downloadManager.downloaderConstructorHelper, action.mDummy);
+        downloader = action.createDownloader(downloadManager.downloaderConstructorHelper, action.mKeyHelper);
         if (action.isRemoveAction) {
           downloader.remove();
         } else {
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloaderConstructorHelper.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloaderConstructorHelper.java
index 7dfb9e00e1..a268a5fbf2 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloaderConstructorHelper.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloaderConstructorHelper.java
@@ -29,7 +29,7 @@
 import com.google.android.exoplayer2.upstream.vocabimate_stream.CustomDataSource;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.PriorityTaskManager;
-import com.vocabimate.protocol.Dummy;
+import com.vocabimate.protocol.ILicenceTo;
 
 /** A helper class that holds necessary parameters for {@link Downloader} construction. */
 public final class DownloaderConstructorHelper {
@@ -89,7 +89,7 @@ public PriorityTaskManager getPriorityTaskManager() {
    * Returns a new {@link CacheDataSource} instance. If {@code offline} is true, it can only read
    * data from the cache.
    */
-  public CacheDataSource buildCacheDataSource(boolean offline, Dummy dummy) {
+  public CacheDataSource buildCacheDataSource(boolean offline, ILicenceTo keyHelper) {
     DataSource cacheReadDataSource = cacheReadDataSourceFactory != null
         ? cacheReadDataSourceFactory.createDataSource() : new FileDataSource();
     if (offline) {
@@ -101,7 +101,7 @@ public CacheDataSource buildCacheDataSource(boolean offline, Dummy dummy) {
           : new CacheDataSink(cache, CacheDataSource.DEFAULT_MAX_CACHE_FILE_SIZE);
       DataSource upstream = upstreamDataSourceFactory.createDataSource();
       if(upstream instanceof CustomDataSource){
-        ((CustomDataSource) upstream).setKeyHelperModel(dummy.getKeyHelper());
+        ((CustomDataSource) upstream).setKeyHelperModel(keyHelper);
       }
       upstream = priorityTaskManager == null ? upstream
           : new PriorityDataSource(upstream, priorityTaskManager, C.PRIORITY_DOWNLOAD);
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloadAction.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloadAction.java
index b0d221288e..20fe834fec 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloadAction.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloadAction.java
@@ -19,7 +19,7 @@
 import android.support.annotation.Nullable;
 import com.google.android.exoplayer2.upstream.cache.CacheUtil;
 import com.google.android.exoplayer2.util.Util;
-import com.vocabimate.protocol.Dummy;
+import com.vocabimate.protocol.ILicenceTo;
 
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
@@ -44,9 +44,9 @@ public ProgressiveDownloadAction readFromStream(int version, DataInputStream inp
           int byteArrayLength = input.readInt();
           byte[] dummyBytes = new byte[byteArrayLength];
           input.readFully(dummyBytes);
-          Dummy dummy = (Dummy) Util.convertToObject(dummyBytes);
+          ILicenceTo keyHelper = (ILicenceTo) Util.convertToObject(dummyBytes);
           String customCacheKey = input.readBoolean() ? input.readUTF() : null;
-          return new ProgressiveDownloadAction(uri, isRemoveAction, data, customCacheKey, dummy);
+          return new ProgressiveDownloadAction(uri, isRemoveAction, data, customCacheKey, keyHelper);
         }
       };
 
@@ -57,17 +57,17 @@ public ProgressiveDownloadAction readFromStream(int version, DataInputStream inp
    * @param isRemoveAction Whether this is a remove action. If false, this is a download action.
    * @param data Optional custom data for this action.
    * @param customCacheKey A custom key that uniquely identifies the original stream. If not null it
-   * @param dummy
+   * @param keyHelper
    */
   public ProgressiveDownloadAction(
-          Uri uri, boolean isRemoveAction, @Nullable byte[] data, @Nullable String customCacheKey, Dummy dummy) {
-    super(TYPE, VERSION, uri, isRemoveAction, data, dummy);
+          Uri uri, boolean isRemoveAction, @Nullable byte[] data, @Nullable String customCacheKey, ILicenceTo keyHelper) {
+    super(TYPE, VERSION, uri, isRemoveAction, data, keyHelper);
     this.customCacheKey = customCacheKey;
   }
 
   @Override
-  protected ProgressiveDownloader createDownloader(DownloaderConstructorHelper constructorHelper, Dummy dummy) {
-    return new ProgressiveDownloader(uri, customCacheKey, constructorHelper, dummy);
+  protected ProgressiveDownloader createDownloader(DownloaderConstructorHelper constructorHelper, ILicenceTo keyHelper) {
+    return new ProgressiveDownloader(uri, customCacheKey, constructorHelper, keyHelper);
   }
 
   @Override
@@ -76,7 +76,7 @@ protected void writeToStream(DataOutputStream output) throws IOException {
     output.writeBoolean(isRemoveAction);
     output.writeInt(data.length);
     output.write(data);
-    byte[] dummyBytes = Util.convertToBytes(mDummy);
+    byte[] dummyBytes = Util.convertToBytes(mKeyHelper);
     output.writeInt(dummyBytes.length);
     output.write(dummyBytes);
     boolean customCacheKeySet = customCacheKey != null;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloadHelper.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloadHelper.java
index c9564ab0b5..5079bac6c9 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloadHelper.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloadHelper.java
@@ -18,7 +18,7 @@
 import android.net.Uri;
 import android.support.annotation.Nullable;
 import com.google.android.exoplayer2.source.TrackGroupArray;
-import com.vocabimate.protocol.Dummy;
+import com.vocabimate.protocol.ILicenceTo;
 
 import java.util.List;
 
@@ -53,12 +53,12 @@ public TrackGroupArray getTrackGroups(int periodIndex) {
   }
 
   @Override
-  public DownloadAction getDownloadAction(@Nullable byte[] data, List<TrackKey> trackKeys, Dummy dummy) {
-    return new ProgressiveDownloadAction(uri, false, data, customCacheKey, dummy);
+  public DownloadAction getDownloadAction(@Nullable byte[] data, List<TrackKey> trackKeys, ILicenceTo keyHelper) {
+    return new ProgressiveDownloadAction(uri, false, data, customCacheKey, keyHelper);
   }
 
   @Override
-  public DownloadAction getRemoveAction(@Nullable byte[] data, Dummy dummy) {
-    return new ProgressiveDownloadAction(uri, true, data, customCacheKey, dummy);
+  public DownloadAction getRemoveAction(@Nullable byte[] data, ILicenceTo keyHelper) {
+    return new ProgressiveDownloadAction(uri, true, data, customCacheKey, keyHelper);
   }
 }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloader.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloader.java
index 98a2569ce7..727f867fb5 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloader.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloader.java
@@ -23,7 +23,7 @@
 import com.google.android.exoplayer2.upstream.cache.CacheUtil;
 import com.google.android.exoplayer2.upstream.cache.CacheUtil.CachingCounters;
 import com.google.android.exoplayer2.util.PriorityTaskManager;
-import com.vocabimate.protocol.Dummy;
+import com.vocabimate.protocol.ILicenceTo;
 
 import java.io.IOException;
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -47,13 +47,13 @@
    * @param customCacheKey A custom key that uniquely identifies the original stream. Used for cache
    *     indexing. May be null.
    * @param constructorHelper A {@link DownloaderConstructorHelper} instance.
-   * @param dummy
+   * @param keyHelper
    */
   public ProgressiveDownloader(
-          Uri uri, String customCacheKey, DownloaderConstructorHelper constructorHelper, Dummy dummy) {
+          Uri uri, String customCacheKey, DownloaderConstructorHelper constructorHelper, ILicenceTo keyHelper) {
     this.dataSpec = new DataSpec(uri, 0, C.LENGTH_UNSET, customCacheKey, 0);
     this.cache = constructorHelper.getCache();
-    this.dataSource = constructorHelper.buildCacheDataSource(false, dummy);
+    this.dataSource = constructorHelper.buildCacheDataSource(false, keyHelper);
     this.priorityTaskManager = constructorHelper.getPriorityTaskManager();
     cachingCounters = new CachingCounters();
     isCanceled = new AtomicBoolean();
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloadAction.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloadAction.java
index 0f9e5dc605..0598ced749 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloadAction.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloadAction.java
@@ -19,17 +19,11 @@
 import android.support.annotation.Nullable;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.Util;
-import com.vocabimate.protocol.Dummy;
+import com.vocabimate.protocol.ILicenceTo;
 
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
-import java.io.ObjectInput;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutput;
-import java.io.ObjectOutputStream;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -63,14 +57,14 @@ public final DownloadAction readFromStream(int version, DataInputStream input)
       int byteArrayLength = input.readInt();
       byte[] dummyBytes = new byte[byteArrayLength];
       input.readFully(dummyBytes);
-      Dummy dummy = (Dummy) Util.convertToObject(dummyBytes);
+      ILicenceTo keyHelper = (ILicenceTo) Util.convertToObject(dummyBytes);
       int keyCount = input.readInt();
       List<K> keys = new ArrayList<>();
       for (int i = 0; i < keyCount; i++) {
         keys.add(readKey(input));
       }
 
-      return createDownloadAction(uri, isRemoveAction, data, keys, dummy);
+      return createDownloadAction(uri, isRemoveAction, data, keys, keyHelper);
     }
 
     /** Deserializes a key from the {@code input}. */
@@ -78,7 +72,7 @@ public final DownloadAction readFromStream(int version, DataInputStream input)
 
     /** Returns a {@link DownloadAction}. */
     protected abstract DownloadAction createDownloadAction(
-            Uri manifestUri, boolean isRemoveAction, byte[] data, List<K> keys, Dummy dummy);
+            Uri manifestUri, boolean isRemoveAction, byte[] data, List<K> keys, ILicenceTo keyHelper);
   }
 
   public final List<K> keys;
@@ -91,7 +85,7 @@ protected abstract DownloadAction createDownloadAction(
    * @param data Optional custom data for this action. If {@code null} an empty array will be used.
    * @param keys Keys of tracks to be downloaded. If empty, all tracks will be downloaded. If {@code
 *     removeAction} is true, {@code keys} must be empty.
-   * @param dummy
+   * @param keyHelper
    */
   protected SegmentDownloadAction(
           String type,
@@ -99,8 +93,8 @@ protected SegmentDownloadAction(
           Uri uri,
           boolean isRemoveAction,
           @Nullable byte[] data,
-          List<K> keys, Dummy dummy) {
-    super(type, version, uri, isRemoveAction, data, dummy);
+          List<K> keys, ILicenceTo keyHelper) {
+    super(type, version, uri, isRemoveAction, data, keyHelper);
     if (isRemoveAction) {
       Assertions.checkArgument(keys.isEmpty());
       this.keys = Collections.emptyList();
@@ -117,7 +111,7 @@ public final void writeToStream(DataOutputStream output) throws IOException {
     output.writeBoolean(isRemoveAction);
     output.writeInt(data.length);
     output.write(data);
-    byte[] dummyBytes = Util.convertToBytes(mDummy);
+    byte[] dummyBytes = Util.convertToBytes(mKeyHelper);
     output.writeInt(dummyBytes.length);
     output.write(dummyBytes);
     output.writeInt(keys.size());
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloader.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloader.java
index 19e8627b04..b46e0ea8ac 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloader.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloader.java
@@ -25,7 +25,7 @@
 import com.google.android.exoplayer2.upstream.cache.CacheUtil;
 import com.google.android.exoplayer2.upstream.cache.CacheUtil.CachingCounters;
 import com.google.android.exoplayer2.util.PriorityTaskManager;
-import com.vocabimate.protocol.Dummy;
+import com.vocabimate.protocol.ILicenceTo;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -116,15 +116,15 @@ public int compareTo(@NonNull Segment other) {
    * @param streamKeys Keys defining which streams in the manifest should be selected for download.
    *     If empty, all streams are downloaded.
    * @param constructorHelper A {@link DownloaderConstructorHelper} instance.
-   * @param dummy
+   * @param keyHelper
    */
   public SegmentDownloader(
-          Uri manifestUri, List<K> streamKeys, DownloaderConstructorHelper constructorHelper, Dummy dummy) {
+          Uri manifestUri, List<K> streamKeys, DownloaderConstructorHelper constructorHelper, ILicenceTo keyHelper) {
     this.manifestUri = manifestUri;
     this.streamKeys = new ArrayList<>(streamKeys);
     this.cache = constructorHelper.getCache();
-    this.dataSource = constructorHelper.buildCacheDataSource(false, dummy);
-    this.offlineDataSource = constructorHelper.buildCacheDataSource(true, dummy);
+    this.dataSource = constructorHelper.buildCacheDataSource(false, keyHelper);
+    this.offlineDataSource = constructorHelper.buildCacheDataSource(true, keyHelper);
     this.priorityTaskManager = constructorHelper.getPriorityTaskManager();
     totalSegments = C.LENGTH_UNSET;
     isCanceled = new AtomicBoolean();
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java
index 5c0fd71dc6..05c9ddeb56 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java
@@ -24,7 +24,8 @@
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.Predicate;
 import com.google.android.exoplayer2.util.Util;
-import com.vocabimate.protocol.KeyHelperModel;
+import com.vocabimate.protocol.ILicenceTo;
+import com.vocabimate.protocol.ILicenceTo;
 import com.vocabimate.protocol.VocabimateHttpUrlConnection;
 
 import java.io.EOFException;
@@ -406,7 +407,7 @@ private HttpURLConnection makeConnection(URL url, byte[] postBody, long position
     if (defaultRequestProperties != null) {
 
       if(this instanceof CustomDataSource){
-        KeyHelperModel keyHelperModel = ((CustomDataSource) this).getKeyHelperModel();
+        ILicenceTo keyHelperModel = ((CustomDataSource) this).getKeyHelperModel();
         if(connection instanceof VocabimateHttpUrlConnection){
           ((VocabimateHttpUrlConnection)connection).setKeyHelper(keyHelperModel);
         }
@@ -414,7 +415,7 @@ private HttpURLConnection makeConnection(URL url, byte[] postBody, long position
           String token = keyHelperModel.getToken();
           if(token != null && token.length() > 0) {
             defaultRequestProperties.set("access_token", token);
-            defaultRequestProperties.set("licence_url", keyHelperModel.getLicecnceUrl());
+            defaultRequestProperties.set("licence_url", keyHelperModel.getLicenceUrl());
           }
         }
       }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DummyDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DummyDataSource.java
index fa3e14f1c9..6b0fb83487 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DummyDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DummyDataSource.java
@@ -37,7 +37,7 @@ private DummyDataSource() {}
 
   @Override
   public long open(DataSpec dataSpec) throws IOException {
-    throw new IOException("Dummy source");
+    throw new IOException("ILicenceTo source");
   }
 
   @Override
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/vocabimate_stream/CustomDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/vocabimate_stream/CustomDataSource.java
index 52950f416f..d00210ce3b 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/vocabimate_stream/CustomDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/vocabimate_stream/CustomDataSource.java
@@ -4,17 +4,10 @@
 import com.google.android.exoplayer2.upstream.DefaultHttpDataSource;
 import com.google.android.exoplayer2.upstream.TransferListener;
 import com.google.android.exoplayer2.util.Predicate;
-import com.vocabimate.protocol.KeyHelperModel;
-import com.google.gson.Gson;
-import com.vocabimate.protocol.LicenceModel;
-import com.vocabimate.protocol.TokenDecryptionHelper;
+import com.vocabimate.protocol.ILicenceTo;
+import com.vocabimate.protocol.ILicenceTo;
 import com.vocabimate.protocol.VocabimateStreamHandlerFactory;
 
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.net.HttpURLConnection;
 import java.net.URL;
 import java.net.URLStreamHandlerFactory;
 
@@ -23,15 +16,15 @@
  */
 public final class CustomDataSource extends DefaultHttpDataSource {
 
-    private KeyHelperModel keyHelperModel;
+    private ILicenceTo licence;
 
-    public CustomDataSource setKeyHelperModel(KeyHelperModel keyHelperModel) {
-        this.keyHelperModel = keyHelperModel;
+    public CustomDataSource setKeyHelperModel(ILicenceTo licence) {
+        this.licence = licence;
         return this;
     }
 
-    public KeyHelperModel getKeyHelperModel() {
-        return keyHelperModel;
+    public ILicenceTo getKeyHelperModel() {
+        return licence;
     }
 
     @Override
@@ -144,8 +137,8 @@ public CustomDataSource(String userAgent, Predicate<String> contentTypePredicate
 //                    connection.setRequestMethod("GET");
 ////    if(!TextUtils.isEmpty(TokenManager.getToken())) {
 //                    if (this instanceof CustomDataSource) {
-//                        KeyHelperModel keyHelperModel = ((CustomDataSource) this).getKeyHelperModel();
-//                        if (keyHelperModel != null) {
+//                        KeyHelperModel licence = ((CustomDataSource) this).getKeyHelperModel();
+//                        if (licence != null) {
 //                            String token2 = keyHelper.getToken();
 //                            if(token2 != null && token2.length() > 0) {
 //                                connection.setRequestProperty("access_token", token2);
@@ -163,78 +156,78 @@ public CustomDataSource(String userAgent, Predicate<String> contentTypePredicate
 //    }
 
 
-    private int parseData(byte[] buffer) throws IOException {
-        KeyHelperModel keyHelper = ((CustomDataSource) this).getKeyHelperModel();
-        if (keyHelper != null) {
-            String videoId = keyHelper.getVideoId();
-            if (videoId == null) {
-                throw new NullPointerException("Video id is not set.");
-            }
-            String licenceUrl = keyHelper.getLicecnceUrl(); //"https://voca2hosting.firebaseapp.com/small_files/license_key_path_absolute.json";
-            URL url = new URL(licenceUrl);
-
-            // parse licence
-            HttpURLConnection licenseConnection = null;
-            try {
-                licenseConnection = (HttpURLConnection) url.openConnection();
-                String token = keyHelper.getToken();
-                if(token != null && token.length() > 0) {
-                    licenseConnection.setRequestProperty("access_token", token);
-                }
-                InputStream in = licenseConnection.getInputStream();
-                String result = readStream(in);
-                LicenceModel licenceModel = new Gson().fromJson(result, LicenceModel.class);
-                if(licenceModel != null && licenceModel.getLicenseFile().getDecryptionKey() != null) {
-                    TokenDecryptionHelper tokenDecryptionHelper = new TokenDecryptionHelper(keyHelper.getToken(), licenceModel.getLicenseFile().getDecryptionKey());
-                    byte[] decrypt = tokenDecryptionHelper.decrypt();
-                    for (int i = 0; i < decrypt.length; i++) {
-                        buffer[i] = decrypt[i];
-                    }
-                    return 16;
-                }
-
-        /*InputStreamReader isw = new InputStreamReader(in);
-        int data = isw.read();
-        while (data != -1) {
-            char current = (char) data;
-            data = isw.read();
-            System.out.print(current);
-        }*/
-            } catch (Exception e) {
-                e.printStackTrace();
-            } finally {
-                if (licenseConnection != null) {
-                    licenseConnection.disconnect();
-                }
-            }
-        }
-        return -1;
-    }
-
-
-
-    private String readStream(InputStream in) {
-        BufferedReader reader = null;
-        StringBuffer response = new StringBuffer();
-        try {
-            reader = new BufferedReader(new InputStreamReader(in));
-            String line = "";
-            while ((line = reader.readLine()) != null) {
-                response.append(line);
-            }
-        } catch (IOException e) {
-            e.printStackTrace();
-        } finally {
-            if (reader != null) {
-                try {
-                    reader.close();
-                } catch (IOException e) {
-                    e.printStackTrace();
-                }
-            }
-        }
-        return response.toString();
-    }
+//    private int parseData(byte[] buffer) throws IOException {
+//        KeyHelperModel keyHelper = ((CustomDataSource) this).getKeyHelperModel();
+//        if (keyHelper != null) {
+//            String videoId = keyHelper.getVideoId();
+//            if (videoId == null) {
+//                throw new NullPointerException("Video id is not set.");
+//            }
+//            String licenceUrl = keyHelper.getLicecnceUrl(); //"https://voca2hosting.firebaseapp.com/small_files/license_key_path_absolute.json";
+//            URL url = new URL(licenceUrl);
+//
+//            // parse licence
+//            HttpURLConnection licenseConnection = null;
+//            try {
+//                licenseConnection = (HttpURLConnection) url.openConnection();
+//                String token = keyHelper.getToken();
+//                if(token != null && token.length() > 0) {
+//                    licenseConnection.setRequestProperty("access_token", token);
+//                }
+//                InputStream in = licenseConnection.getInputStream();
+//                String result = readStream(in);
+//                LicenceModel licenceModel = new Gson().fromJson(result, LicenceModel.class);
+//                if(licenceModel != null && licenceModel.getLicenseFile().getDecryptionKey() != null) {
+//                    TokenDecryptionHelper tokenDecryptionHelper = new TokenDecryptionHelper(keyHelper.getToken(), licenceModel.getLicenseFile().getDecryptionKey());
+//                    byte[] decrypt = tokenDecryptionHelper.decrypt();
+//                    for (int i = 0; i < decrypt.length; i++) {
+//                        buffer[i] = decrypt[i];
+//                    }
+//                    return 16;
+//                }
+//
+//        /*InputStreamReader isw = new InputStreamReader(in);
+//        int data = isw.read();
+//        while (data != -1) {
+//            char current = (char) data;
+//            data = isw.read();
+//            System.out.print(current);
+//        }*/
+//            } catch (Exception e) {
+//                e.printStackTrace();
+//            } finally {
+//                if (licenseConnection != null) {
+//                    licenseConnection.disconnect();
+//                }
+//            }
+//        }
+//        return -1;
+//    }
+//
+//
+//
+//    private String readStream(InputStream in) {
+//        BufferedReader reader = null;
+//        StringBuffer response = new StringBuffer();
+//        try {
+//            reader = new BufferedReader(new InputStreamReader(in));
+//            String line = "";
+//            while ((line = reader.readLine()) != null) {
+//                response.append(line);
+//            }
+//        } catch (IOException e) {
+//            e.printStackTrace();
+//        } finally {
+//            if (reader != null) {
+//                try {
+//                    reader.close();
+//                } catch (IOException e) {
+//                    e.printStackTrace();
+//                }
+//            }
+//        }
+//        return response.toString();
+//    }
 
 
 }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/vocabimate_stream/CustomDataSourceFactory.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/vocabimate_stream/CustomDataSourceFactory.java
index fccbbeac02..36aa55edf8 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/vocabimate_stream/CustomDataSourceFactory.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/vocabimate_stream/CustomDataSourceFactory.java
@@ -21,7 +21,7 @@
 import com.google.android.exoplayer2.upstream.HttpDataSource.BaseFactory;
 import com.google.android.exoplayer2.upstream.HttpDataSource.Factory;
 import com.google.android.exoplayer2.upstream.TransferListener;
-import com.vocabimate.protocol.KeyHelperModel;
+import com.vocabimate.protocol.ILicenceTo;
 
 /**
  * A {@link Factory} that produces {@link DefaultHttpDataSource} instances.
@@ -33,7 +33,7 @@
     private final int connectTimeoutMillis;
     private final int readTimeoutMillis;
     private final boolean allowCrossProtocolRedirects;
-    private KeyHelperModel keyHelperModel;
+    private ILicenceTo licence;
 
     /**
      * Constructs a DefaultHttpDataSourceFactory. Sets {@link
@@ -43,8 +43,8 @@
      *
      * @param userAgent The User-Agent string that should be used.
      */
-    public CustomDataSourceFactory(String userAgent, KeyHelperModel keyHelperModel) {
-        this(userAgent, null, keyHelperModel);
+    public CustomDataSourceFactory(String userAgent, ILicenceTo licence) {
+        this(userAgent, null, licence);
     }
 
     /**
@@ -59,9 +59,9 @@ public CustomDataSourceFactory(String userAgent, KeyHelperModel keyHelperModel)
 
 
     public CustomDataSourceFactory(
-            String userAgent, TransferListener<? super DataSource> listener, KeyHelperModel keyHelperModel) {
+            String userAgent, TransferListener<? super DataSource> listener, ILicenceTo licence) {
         this(userAgent, listener, DefaultHttpDataSource.DEFAULT_CONNECT_TIMEOUT_MILLIS,
-                DefaultHttpDataSource.DEFAULT_READ_TIMEOUT_MILLIS, false, keyHelperModel);
+                DefaultHttpDataSource.DEFAULT_READ_TIMEOUT_MILLIS, false, licence);
     }
 
     /**
@@ -76,13 +76,13 @@ public CustomDataSourceFactory(
      */
     public CustomDataSourceFactory(String userAgent,
                                    TransferListener<? super DataSource> listener, int connectTimeoutMillis,
-                                   int readTimeoutMillis, boolean allowCrossProtocolRedirects, KeyHelperModel keyHelperModel) {
+                                   int readTimeoutMillis, boolean allowCrossProtocolRedirects, ILicenceTo licence) {
         this.userAgent = userAgent;
         this.listener = listener;
         this.connectTimeoutMillis = connectTimeoutMillis;
         this.readTimeoutMillis = readTimeoutMillis;
         this.allowCrossProtocolRedirects = allowCrossProtocolRedirects;
-        this.keyHelperModel = keyHelperModel;
+        this.licence = licence;
     }
 
     @Override
@@ -90,7 +90,7 @@ protected DefaultHttpDataSource createDataSourceInternal(
             HttpDataSource.RequestProperties defaultRequestProperties) {
         CustomDataSource defaultHttpDataSource = new CustomDataSource(userAgent, null,
                 listener, connectTimeoutMillis,
-                readTimeoutMillis, allowCrossProtocolRedirects, defaultRequestProperties).setKeyHelperModel(keyHelperModel);
+                readTimeoutMillis, allowCrossProtocolRedirects, defaultRequestProperties).setKeyHelperModel(licence);
         return defaultHttpDataSource;
     }
 
diff --git a/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloadAction.java b/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloadAction.java
index c2a2a6af00..86adc65ff1 100644
--- a/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloadAction.java
+++ b/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloadAction.java
@@ -21,7 +21,7 @@
 import com.google.android.exoplayer2.offline.DownloaderConstructorHelper;
 import com.google.android.exoplayer2.offline.SegmentDownloadAction;
 import com.google.android.exoplayer2.source.dash.manifest.RepresentationKey;
-import com.vocabimate.protocol.Dummy;
+import com.vocabimate.protocol.ILicenceTo;
 
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
@@ -44,8 +44,8 @@ protected RepresentationKey readKey(DataInputStream input) throws IOException {
 
         @Override
         protected DownloadAction createDownloadAction(
-                Uri uri, boolean isRemoveAction, byte[] data, List<RepresentationKey> keys, com.vocabimate.protocol.Dummy dummy) {
-          return new DashDownloadAction(uri, isRemoveAction, data, keys, dummy);
+                Uri uri, boolean isRemoveAction, byte[] data, List<RepresentationKey> keys, ILicenceTo keyHelper) {
+          return new DashDownloadAction(uri, isRemoveAction, data, keys, keyHelper);
         }
       };
 
@@ -55,16 +55,16 @@ protected DownloadAction createDownloadAction(
    * @param data Optional custom data for this action.
    * @param keys Keys of representations to be downloaded. If empty, all representations are
 *     downloaded. If {@code removeAction} is true, {@code keys} must be empty.
-   * @param dummy
+   * @param keyHelper
    */
   public DashDownloadAction(
-          Uri uri, boolean isRemoveAction, @Nullable byte[] data, List<RepresentationKey> keys, Dummy dummy) {
-    super(TYPE, VERSION, uri, isRemoveAction, data, keys, dummy);
+          Uri uri, boolean isRemoveAction, @Nullable byte[] data, List<RepresentationKey> keys, ILicenceTo keyHelper) {
+    super(TYPE, VERSION, uri, isRemoveAction, data, keys, keyHelper);
   }
 
   @Override
-  protected DashDownloader createDownloader(DownloaderConstructorHelper constructorHelper, Dummy dummy) {
-    return new DashDownloader(uri, keys, constructorHelper, dummy);
+  protected DashDownloader createDownloader(DownloaderConstructorHelper constructorHelper, ILicenceTo keyHelper) {
+    return new DashDownloader(uri, keys, constructorHelper, keyHelper);
   }
 
   @Override
diff --git a/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloadHelper.java b/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloadHelper.java
index ebd10bfa63..5136029e55 100644
--- a/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloadHelper.java
+++ b/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloadHelper.java
@@ -30,6 +30,8 @@
 import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.ParsingLoadable;
 import com.google.android.exoplayer2.util.Assertions;
+import com.vocabimate.protocol.ILicenceTo;
+
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -86,15 +88,15 @@ public TrackGroupArray getTrackGroups(int periodIndex) {
   }
 
   @Override
-  public DashDownloadAction getDownloadAction(@Nullable byte[] data, List<TrackKey> trackKeys, com.vocabimate.protocol.Dummy dummy) {
+  public DashDownloadAction getDownloadAction(@Nullable byte[] data, List<TrackKey> trackKeys, ILicenceTo keyHelper) {
     return new DashDownloadAction(
-        uri, /* isRemoveAction= */ false, data, toRepresentationKeys(trackKeys), dummy);
+        uri, /* isRemoveAction= */ false, data, toRepresentationKeys(trackKeys), keyHelper);
   }
 
   @Override
-  public DashDownloadAction getRemoveAction(@Nullable byte[] data, com.vocabimate.protocol.Dummy dummy) {
+  public DashDownloadAction getRemoveAction(@Nullable byte[] data, ILicenceTo keyHelper) {
     return new DashDownloadAction(
-        uri, /* isRemoveAction= */ true, data, Collections.<RepresentationKey>emptyList(), dummy);
+        uri, /* isRemoveAction= */ true, data, Collections.<RepresentationKey>emptyList(), keyHelper);
   }
 
   private static List<RepresentationKey> toRepresentationKeys(List<TrackKey> trackKeys) {
diff --git a/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloader.java b/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloader.java
index 453cd2f23c..e23606a18f 100644
--- a/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloader.java
+++ b/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloader.java
@@ -33,7 +33,7 @@
 import com.google.android.exoplayer2.source.dash.manifest.RepresentationKey;
 import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.DataSpec;
-import com.vocabimate.protocol.Dummy;
+import com.vocabimate.protocol.ILicenceTo;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -70,13 +70,13 @@
    * @param representationKeys Keys defining which representations in the manifest should be
    *     selected for download. If empty, all representations are downloaded.
    * @param constructorHelper A {@link DownloaderConstructorHelper} instance.
-   * @param dummy
+   * @param keyHelper
    */
   public DashDownloader(
           Uri manifestUri,
           List<RepresentationKey> representationKeys,
-          DownloaderConstructorHelper constructorHelper, Dummy dummy) {
-    super(manifestUri, representationKeys, constructorHelper, dummy);
+          DownloaderConstructorHelper constructorHelper, ILicenceTo keyHelper) {
+    super(manifestUri, representationKeys, constructorHelper, keyHelper);
   }
 
   @Override
diff --git a/library/dash/src/test/assets/sample_mpd_4_event_stream b/library/dash/src/test/assets/sample_mpd_4_event_stream
index cf96541ca0..6fab274a4f 100644
--- a/library/dash/src/test/assets/sample_mpd_4_event_stream
+++ b/library/dash/src/test/assets/sample_mpd_4_event_stream
@@ -33,13 +33,13 @@
    <Role schemeIdUri="urn:mpeg:DASH:role:2011" value="main"/>
    <Representation id="140" codecs="mp4a.40.2" audioSamplingRate="48000" startWithSAP="1" bandwidth="144000">
     <AudioChannelConfiguration schemeIdUri="urn:mpeg:dash:23003:3:audio_channel_configuration:2011" value="2"/>
-    <BaseURL>http://www.dummy.url/</BaseURL>
+    <BaseURL>http://www.keyHelper.url/</BaseURL>
    </Representation>
   </AdaptationSet>
   <AdaptationSet id="1" mimeType="video/mp4" subsegmentAlignment="true">
    <Role schemeIdUri="urn:mpeg:DASH:role:2011" value="main"/>
    <Representation id="133" codecs="avc1.4d4015" width="426" height="240" startWithSAP="1" maxPlayoutRate="1" bandwidth="258000" frameRate="30">
-    <BaseURL>http://www.dummy.url/</BaseURL>
+    <BaseURL>http://www.keyHelper.url/</BaseURL>
    </Representation>
   </AdaptationSet>
  </Period>
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloadAction.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloadAction.java
index b58717b91a..2563a657d3 100644
--- a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloadAction.java
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloadAction.java
@@ -21,7 +21,7 @@
 import com.google.android.exoplayer2.offline.DownloaderConstructorHelper;
 import com.google.android.exoplayer2.offline.SegmentDownloadAction;
 import com.google.android.exoplayer2.source.hls.playlist.RenditionKey;
-import com.vocabimate.protocol.Dummy;
+import com.vocabimate.protocol.ILicenceTo;
 
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
@@ -46,8 +46,8 @@ protected RenditionKey readKey(DataInputStream input) throws IOException {
 
         @Override
         protected DownloadAction createDownloadAction(
-                Uri uri, boolean isRemoveAction, byte[] data, List<RenditionKey> keys, Dummy dummy) {
-          return new HlsDownloadAction(uri, isRemoveAction, data, keys, dummy);
+                Uri uri, boolean isRemoveAction, byte[] data, List<RenditionKey> keys, ILicenceTo keyHelper) {
+          return new HlsDownloadAction(uri, isRemoveAction, data, keys, keyHelper);
         }
       };
 
@@ -57,16 +57,16 @@ protected DownloadAction createDownloadAction(
    * @param data Optional custom data for this action.
    * @param keys Keys of renditions to be downloaded. If empty, all renditions are downloaded. If
 *     {@code removeAction} is true, {@code keys} must empty.
-   * @param dummy
+   * @param keyHelper
    */
   public HlsDownloadAction(
-          Uri uri, boolean isRemoveAction, @Nullable byte[] data, List<RenditionKey> keys, Dummy dummy) {
-    super(TYPE, VERSION, uri, isRemoveAction, data, keys, dummy);
+          Uri uri, boolean isRemoveAction, @Nullable byte[] data, List<RenditionKey> keys, ILicenceTo keyHelper) {
+    super(TYPE, VERSION, uri, isRemoveAction, data, keys, keyHelper);
   }
 
   @Override
-  protected HlsDownloader createDownloader(DownloaderConstructorHelper constructorHelper, Dummy dummy) {
-    return new HlsDownloader(uri, keys, constructorHelper, dummy);
+  protected HlsDownloader createDownloader(DownloaderConstructorHelper constructorHelper, ILicenceTo keyHelper) {
+    return new HlsDownloader(uri, keys, constructorHelper, keyHelper);
   }
 
   @Override
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloadHelper.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloadHelper.java
index 0a1b20bebf..fdd8ad180c 100644
--- a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloadHelper.java
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloadHelper.java
@@ -30,7 +30,7 @@
 import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.ParsingLoadable;
 import com.google.android.exoplayer2.util.Assertions;
-import com.vocabimate.protocol.Dummy;
+import com.vocabimate.protocol.ILicenceTo;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -99,16 +99,16 @@ public TrackGroupArray getTrackGroups(int periodIndex) {
   }
 
   @Override
-  public HlsDownloadAction getDownloadAction(@Nullable byte[] data, List<TrackKey> trackKeys, Dummy dummy) {
+  public HlsDownloadAction getDownloadAction(@Nullable byte[] data, List<TrackKey> trackKeys, ILicenceTo keyHelper) {
     Assertions.checkNotNull(renditionTypes);
     return new HlsDownloadAction(
-        uri, /* isRemoveAction= */ false, data, toRenditionKeys(trackKeys, renditionTypes), dummy);
+        uri, /* isRemoveAction= */ false, data, toRenditionKeys(trackKeys, renditionTypes), keyHelper);
   }
 
   @Override
-  public HlsDownloadAction getRemoveAction(@Nullable byte[] data, Dummy dummy) {
+  public HlsDownloadAction getRemoveAction(@Nullable byte[] data, ILicenceTo keyHelper) {
     return new HlsDownloadAction(
-        uri, /* isRemoveAction= */ true, data, Collections.<RenditionKey>emptyList(), dummy);
+        uri, /* isRemoveAction= */ true, data, Collections.<RenditionKey>emptyList(), keyHelper);
   }
 
   private static Format[] toFormats(List<HlsMasterPlaylist.HlsUrl> hlsUrls) {
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloader.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloader.java
index 757a95eac6..c775dd7956 100644
--- a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloader.java
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloader.java
@@ -29,7 +29,7 @@
 import com.google.android.exoplayer2.upstream.DataSpec;
 import com.google.android.exoplayer2.upstream.ParsingLoadable;
 import com.google.android.exoplayer2.util.UriUtil;
-import com.vocabimate.protocol.Dummy;
+import com.vocabimate.protocol.ILicenceTo;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -66,13 +66,13 @@
    * @param renditionKeys Keys defining which renditions in the playlist should be selected for
    *     download. If empty, all renditions are downloaded.
    * @param constructorHelper A {@link DownloaderConstructorHelper} instance.
-   * @param dummy
+   * @param keyHelper
    */
   public HlsDownloader(
           Uri playlistUri,
           List<RenditionKey> renditionKeys,
-          DownloaderConstructorHelper constructorHelper, Dummy dummy) {
-    super(playlistUri, renditionKeys, constructorHelper, dummy);
+          DownloaderConstructorHelper constructorHelper, ILicenceTo keyHelper) {
+    super(playlistUri, renditionKeys, constructorHelper, keyHelper);
   }
 
   @Override
diff --git a/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloadAction.java b/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloadAction.java
index 57962dfa5e..a914daf14b 100644
--- a/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloadAction.java
+++ b/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloadAction.java
@@ -21,7 +21,7 @@
 import com.google.android.exoplayer2.offline.DownloaderConstructorHelper;
 import com.google.android.exoplayer2.offline.SegmentDownloadAction;
 import com.google.android.exoplayer2.source.smoothstreaming.manifest.StreamKey;
-import com.vocabimate.protocol.Dummy;
+import com.vocabimate.protocol.ILicenceTo;
 
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
@@ -44,8 +44,8 @@ protected StreamKey readKey(DataInputStream input) throws IOException {
 
         @Override
         protected DownloadAction createDownloadAction(
-                Uri uri, boolean isRemoveAction, byte[] data, List<StreamKey> keys, com.vocabimate.protocol.Dummy dummy) {
-          return new SsDownloadAction(uri, isRemoveAction, data, keys, dummy);
+                Uri uri, boolean isRemoveAction, byte[] data, List<StreamKey> keys, ILicenceTo keyHelper) {
+          return new SsDownloadAction(uri, isRemoveAction, data, keys, keyHelper);
         }
       };
 
@@ -55,16 +55,16 @@ protected DownloadAction createDownloadAction(
    * @param data Optional custom data for this action.
    * @param keys Keys of streams to be downloaded. If empty, all streams are downloaded. If {@code
 *     removeAction} is true, {@code keys} must be empty.
-   * @param dummy
+   * @param keyHelper
    */
   public SsDownloadAction(
-          Uri uri, boolean isRemoveAction, @Nullable byte[] data, List<StreamKey> keys, Dummy dummy) {
-    super(TYPE, VERSION, uri, isRemoveAction, data, keys, dummy);
+          Uri uri, boolean isRemoveAction, @Nullable byte[] data, List<StreamKey> keys, ILicenceTo keyHelper) {
+    super(TYPE, VERSION, uri, isRemoveAction, data, keys, keyHelper);
   }
 
   @Override
-  protected SsDownloader createDownloader(DownloaderConstructorHelper constructorHelper, Dummy dummy) {
-    return new SsDownloader(uri, keys, constructorHelper, dummy);
+  protected SsDownloader createDownloader(DownloaderConstructorHelper constructorHelper, ILicenceTo keyHelper) {
+    return new SsDownloader(uri, keys, constructorHelper, keyHelper);
   }
 
   @Override
diff --git a/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloadHelper.java b/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloadHelper.java
index 098075b01b..93ce444cd7 100644
--- a/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloadHelper.java
+++ b/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloadHelper.java
@@ -27,6 +27,8 @@
 import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.ParsingLoadable;
 import com.google.android.exoplayer2.util.Assertions;
+import com.vocabimate.protocol.ILicenceTo;
+
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -76,14 +78,14 @@ public TrackGroupArray getTrackGroups(int periodIndex) {
   }
 
   @Override
-  public SsDownloadAction getDownloadAction(@Nullable byte[] data, List<TrackKey> trackKeys, com.vocabimate.protocol.Dummy dummy) {
-    return new SsDownloadAction(uri, /* isRemoveAction= */ false, data, toStreamKeys(trackKeys), dummy);
+  public SsDownloadAction getDownloadAction(@Nullable byte[] data, List<TrackKey> trackKeys, ILicenceTo keyHelper) {
+    return new SsDownloadAction(uri, /* isRemoveAction= */ false, data, toStreamKeys(trackKeys), keyHelper);
   }
 
   @Override
-  public SsDownloadAction getRemoveAction(@Nullable byte[] data, com.vocabimate.protocol.Dummy dummy) {
+  public SsDownloadAction getRemoveAction(@Nullable byte[] data, ILicenceTo keyHelper) {
     return new SsDownloadAction(
-        uri, /* isRemoveAction= */ true, data, Collections.<StreamKey>emptyList(), dummy);
+        uri, /* isRemoveAction= */ true, data, Collections.<StreamKey>emptyList(), keyHelper);
   }
 
   private static List<StreamKey> toStreamKeys(List<TrackKey> trackKeys) {
diff --git a/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloader.java b/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloader.java
index b51db072e2..3de0d3ffab 100644
--- a/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloader.java
+++ b/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloader.java
@@ -27,7 +27,7 @@
 import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.DataSpec;
 import com.google.android.exoplayer2.upstream.ParsingLoadable;
-import com.vocabimate.protocol.Dummy;
+import com.vocabimate.protocol.ILicenceTo;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -63,11 +63,11 @@
    * @param streamKeys Keys defining which streams in the manifest should be selected for download.
    *     If empty, all streams are downloaded.
    * @param constructorHelper A {@link DownloaderConstructorHelper} instance.
-   * @param dummy
+   * @param keyHelper
    */
   public SsDownloader(
-          Uri manifestUri, List<StreamKey> streamKeys, DownloaderConstructorHelper constructorHelper, Dummy dummy) {
-    super(SsUtil.fixManifestUri(manifestUri), streamKeys, constructorHelper, dummy);
+          Uri manifestUri, List<StreamKey> streamKeys, DownloaderConstructorHelper constructorHelper, ILicenceTo keyHelper) {
+    super(SsUtil.fixManifestUri(manifestUri), streamKeys, constructorHelper, keyHelper);
   }
 
   @Override
diff --git a/protocol/src/main/java/com/vocabimate/protocol/Dummy.java b/protocol/src/main/java/com/vocabimate/protocol/Dummy.java
deleted file mode 100644
index 78182bd206..0000000000
--- a/protocol/src/main/java/com/vocabimate/protocol/Dummy.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.vocabimate.protocol;
-
-import java.io.Serializable;
-
-/**
- * Created by Hisham on 18/Oct/2018 - 15:18
- */
-public class Dummy implements Serializable{
-    private KeyHelperModel keyHelper;
-
-    public Dummy setKeyHelper(KeyHelperModel keyHelper) {
-        this.keyHelper = keyHelper;
-        return this;
-    }
-
-    public KeyHelperModel getKeyHelper() {
-        return keyHelper;
-    }
-}
diff --git a/protocol/src/main/java/com/vocabimate/protocol/ILicenceTo.java b/protocol/src/main/java/com/vocabimate/protocol/ILicenceTo.java
new file mode 100644
index 0000000000..435f60a182
--- /dev/null
+++ b/protocol/src/main/java/com/vocabimate/protocol/ILicenceTo.java
@@ -0,0 +1,14 @@
+package com.vocabimate.protocol;
+
+import java.io.Serializable;
+
+/**
+ * Created by Hisham on 18/Oct/2018 - 20:37
+ */
+public interface ILicenceTo extends Serializable {
+    String jsonBody();
+    String getType();
+    String getToken();
+    String getLicenceUrl();
+    String getM3U8Path();
+}
diff --git a/protocol/src/main/java/com/vocabimate/protocol/KeyHelper.java b/protocol/src/main/java/com/vocabimate/protocol/KeyHelper.java
new file mode 100644
index 0000000000..62d715f744
--- /dev/null
+++ b/protocol/src/main/java/com/vocabimate/protocol/KeyHelper.java
@@ -0,0 +1,34 @@
+package com.vocabimate.protocol;
+
+import java.io.Serializable;
+
+/**
+ * Created by Hisham on 18/Oct/2018 - 15:18
+ */
+public abstract class KeyHelper implements Serializable, ILicenceTo{
+
+    private String m3u8Path;
+    private String token;
+    private String licenceUrl;
+
+    public KeyHelper(String m3u8Path, String token, String licenceUrl) {
+        this.m3u8Path = m3u8Path;
+        this.token = token;
+        this.licenceUrl = licenceUrl;
+    }
+
+    @Override
+    public String getToken() {
+        return token;
+    }
+
+    @Override
+    public String getLicenceUrl() {
+        return licenceUrl;
+    }
+
+    @Override
+    public String getM3U8Path() {
+        return m3u8Path;
+    }
+}
diff --git a/protocol/src/main/java/com/vocabimate/protocol/KeyHelperModel.java b/protocol/src/main/java/com/vocabimate/protocol/KeyHelperModel.java
deleted file mode 100644
index 70a9ab7cbf..0000000000
--- a/protocol/src/main/java/com/vocabimate/protocol/KeyHelperModel.java
+++ /dev/null
@@ -1,64 +0,0 @@
-package com.vocabimate.protocol;
-
-import java.io.Serializable;
-
-/**
- * Created by Hisham on 10/Oct/2018 - 17:29
- */
-public class KeyHelperModel implements Serializable {
-
-  private String m3u8Path;
-  private String token;
-  private String videoId;
-  private String licecnceUrl;
-  private String keyPath;
-
-  public KeyHelperModel(){
-
-  }
-
-  public String getM3u8Path() {
-    return m3u8Path;
-  }
-
-  public KeyHelperModel setM3u8Path(String m3u8Path) {
-    this.m3u8Path = m3u8Path;
-    return this;
-  }
-
-  public String getToken() {
-    return token;
-  }
-
-  public KeyHelperModel setToken(String token) {
-    this.token = token;
-    return this;
-  }
-
-  public String getVideoId() {
-    return videoId;
-  }
-
-  public KeyHelperModel setVideoId(String videoId) {
-    this.videoId = videoId;
-    return this;
-  }
-
-  public String getLicecnceUrl() {
-    return licecnceUrl;
-  }
-
-  public KeyHelperModel setLicecnceUrl(String licecnceUrl) {
-    this.licecnceUrl = licecnceUrl;
-    return this;
-  }
-
-  public String getKeyPath() {
-    return keyPath;
-  }
-
-  public KeyHelperModel setKeyPath(String keyPath) {
-    this.keyPath = keyPath;
-    return this;
-  }
-}
diff --git a/protocol/src/main/java/com/vocabimate/protocol/VocabimateHttpUrlConnection.java b/protocol/src/main/java/com/vocabimate/protocol/VocabimateHttpUrlConnection.java
index a8cdf2522f..49a11c986f 100644
--- a/protocol/src/main/java/com/vocabimate/protocol/VocabimateHttpUrlConnection.java
+++ b/protocol/src/main/java/com/vocabimate/protocol/VocabimateHttpUrlConnection.java
@@ -7,6 +7,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.io.OutputStreamWriter;
 import java.net.HttpURLConnection;
 import java.net.URL;
 
@@ -16,7 +17,7 @@
 public class VocabimateHttpUrlConnection extends HttpURLConnection {
 
     protected VocAbsInputStream vocAbsInputStream;
-    private KeyHelperModel keyHelper;
+    private ILicenceTo licence;
 
     /**
      * @see com.vocabimate.protocol.VocabimateInputStream VocabimateInputStream
@@ -35,8 +36,8 @@ public VocabimateHttpUrlConnection(URL url) throws IOException {
     public void connect() throws IOException {
 
         // todo Need to fix things here, not getting token and licence url on older phones.
-        String licence_url = keyHelper.getLicecnceUrl();//getRequestProperty("licence_url");
-        String token = keyHelper.getToken();//getRequestProperty("access_token");
+        String licence_url = licence.getLicenceUrl();//getRequestProperty("licence_url");
+        String token = licence.getToken();//getRequestProperty("access_token");
 //        if (licence_url == null) {
 //            throw new Error("Licence url is not provided in header, please set 'licence_url' just like access_token");
 //        }
@@ -45,10 +46,22 @@ public void connect() throws IOException {
 //        }
         URL url = new URL(licence_url);
         HttpURLConnection connection = (HttpURLConnection) url.openConnection();
-
-        if (token == null) {
-            vocAbsInputStream.setInputStream(connection.getInputStream());
+        if(licence.getType() == null) {
+            connection.setRequestMethod("POST"); // default
+        } else {
+            connection.setRequestMethod(licence.getType());
+        }
+        connection.setDoInput(true);
+        connection.setDoOutput(true);
+        connection.setRequestProperty("access_token", token);
+        connection.setRequestProperty("Content-Type", "application/json");
+
+        if(licence.jsonBody() != null) {
+            OutputStreamWriter wr = new OutputStreamWriter(connection.getOutputStream());
+            wr.write(licence.jsonBody());
+            wr.flush();
         }
+
         if (token != null) {
             String result = readStream(connection.getInputStream());
             LicenceModel licenceModel = new Gson().fromJson(result, LicenceModel.class);
@@ -118,11 +131,7 @@ public InputStream getInputStream() throws IOException {
         return vocAbsInputStream;
     }
 
-    public KeyHelperModel getKeyHelper() {
-        return keyHelper;
-    }
-
-    public void setKeyHelper(KeyHelperModel keyHelper) {
-        this.keyHelper = keyHelper;
+    public void setKeyHelper(ILicenceTo licence) {
+        this.licence = licence;
     }
 }
