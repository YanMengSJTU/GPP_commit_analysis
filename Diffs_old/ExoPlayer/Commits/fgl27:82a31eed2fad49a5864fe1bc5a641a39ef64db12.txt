diff --git a/library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSession.java b/library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSession.java
index 8f04e91f7c..e6364dbedb 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSession.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSession.java
@@ -106,6 +106,7 @@ public UnexpectedDrmSessionException(Throwable cause) {
   private final ProvisioningManager<T> provisioningManager;
   private final ReleaseCallback<T> releaseCallback;
   private final @DefaultDrmSessionManager.Mode int mode;
+  private final boolean isPlaceholderSession;
   @Nullable private final HashMap<String, String> optionalKeyRequestParameters;
   private final EventDispatcher<DefaultDrmSessionEventListener> eventDispatcher;
   private final LoadErrorHandlingPolicy loadErrorHandlingPolicy;
@@ -134,8 +135,9 @@ public UnexpectedDrmSessionException(Throwable cause) {
    * @param provisioningManager The manager for provisioning.
    * @param releaseCallback The {@link ReleaseCallback}.
    * @param schemeDatas DRM scheme datas for this session, or null if an {@code
-   *     offlineLicenseKeySetId} is provided.
-   * @param mode The DRM mode.
+   *     offlineLicenseKeySetId} is provided or if {@code isPlaceholderSession} is true.
+   * @param mode The DRM mode. Ignored if {@code isPlaceholderSession} is true.
+   * @param isPlaceholderSession Whether this session is not expected to acquire any keys.
    * @param offlineLicenseKeySetId The offline license key set identifier, or null when not using
    *     offline keys.
    * @param optionalKeyRequestParameters The optional key request parameters.
@@ -152,6 +154,7 @@ public DefaultDrmSession(
       ReleaseCallback<T> releaseCallback,
       @Nullable List<SchemeData> schemeDatas,
       @DefaultDrmSessionManager.Mode int mode,
+      boolean isPlaceholderSession,
       @Nullable byte[] offlineLicenseKeySetId,
       @Nullable HashMap<String, String> optionalKeyRequestParameters,
       MediaDrmCallback callback,
@@ -167,6 +170,7 @@ public DefaultDrmSession(
     this.releaseCallback = releaseCallback;
     this.mediaDrm = mediaDrm;
     this.mode = mode;
+    this.isPlaceholderSession = isPlaceholderSession;
     if (offlineLicenseKeySetId != null) {
       this.offlineLicenseKeySetId = offlineLicenseKeySetId;
       this.schemeDatas = null;
@@ -342,6 +346,10 @@ private void onProvisionResponse(Object request, Object response) {
 
   @RequiresNonNull("sessionId")
   private void doLicense(boolean allowRetry) {
+    if (isPlaceholderSession) {
+      state = STATE_OPENED_WITH_KEYS;
+      return;
+    }
     byte[] sessionId = Util.castNonNull(this.sessionId);
     switch (mode) {
       case DefaultDrmSessionManager.MODE_PLAYBACK:
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSessionManager.java b/library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSessionManager.java
index 0757ad12e0..780ee5aac4 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSessionManager.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/drm/DefaultDrmSessionManager.java
@@ -442,6 +442,7 @@ public boolean canAcquireSession(DrmInitData drmInitData) {
               /* releaseCallback= */ this::onSessionReleased,
               schemeDatas,
               mode,
+              /* isPlaceholderSession= */ false,
               offlineLicenseKeySetId,
               optionalKeyRequestParameters,
               callback,
