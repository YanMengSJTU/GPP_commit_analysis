diff --git a/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoPlayerManager.java b/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoPlayerManager.java
index dee81dd892..2b91dfff52 100644
--- a/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoPlayerManager.java
+++ b/demos/manager/src/main/java/com/google/android/exoplayer2/managerdemo/DemoPlayerManager.java
@@ -36,11 +36,6 @@
 
 public class DemoPlayerManager extends SimpleExoPlayerManager {
 
-  public static final String DRM_SCHEME_EXTRA = "drm_scheme";
-  public static final String DRM_LICENSE_URL_EXTRA = "drm_license_url";
-  public static final String DRM_KEY_REQUEST_PROPERTIES_EXTRA = "drm_key_request_properties";
-  public static final String DRM_MULTI_SESSION_EXTRA = "drm_multi_session";
-
   public static final String SPHERICAL_STEREO_MODE_EXTRA = "spherical_stereo_mode";
   public static final String SPHERICAL_STEREO_MODE_MONO = "mono";
   public static final String SPHERICAL_STEREO_MODE_TOP_BOTTOM = "top_bottom";
@@ -98,21 +93,7 @@ public void onRequestPermissionsResult(int requestCode, @NonNull String[] permis
 
   private class DemoDrmSessionManagerBuilder implements DrmSessionManagerBuilder {
     @Override
-    public DefaultDrmSessionManager<FrameworkMediaCrypto> buildDrmSessionManager() throws UnsupportedDrmException {
-      Intent intent = getIntent();
-      String drmLicenseUrl = intent.getStringExtra(DRM_LICENSE_URL_EXTRA);
-      String[] keyRequestPropertiesArray = intent.getStringArrayExtra(DRM_KEY_REQUEST_PROPERTIES_EXTRA);
-      boolean multiSession = intent.getBooleanExtra(DRM_MULTI_SESSION_EXTRA, false);
-      String drmSchemeExtra = intent.hasExtra(DRM_SCHEME_EXTRA) ? DRM_SCHEME_EXTRA : DRM_SCHEME_UUID_EXTRA;
-      UUID drmSchemeUuid = Util.getDrmUuid(intent.getStringExtra(drmSchemeExtra));
-      if (drmSchemeUuid != null) {
-        return buildDrmSessionManagerV18(drmSchemeUuid, drmLicenseUrl, keyRequestPropertiesArray, multiSession);
-      } else {
-        return null;
-      }
-    }
-
-    private DefaultDrmSessionManager<FrameworkMediaCrypto> buildDrmSessionManagerV18(
+    public DefaultDrmSessionManager<FrameworkMediaCrypto> buildDrmSessionManagerV18(
         UUID uuid, String licenseUrl, String[] keyRequestPropertiesArray, boolean multiSession)
         throws UnsupportedDrmException {
       HttpDataSource.Factory licenseDataSourceFactory =
@@ -130,6 +111,15 @@ public void onRequestPermissionsResult(int requestCode, @NonNull String[] permis
       return new DefaultDrmSessionManager<>(
           uuid, mediaDrm, drmCallback, null, multiSession);
     }
+
+    @Override
+    public void releaseMediaDrm() {
+      if (mediaDrm != null) {
+        mediaDrm.release();
+        mediaDrm = null;
+      }
+    }
+
   }
 
   private class DemoAdsMediaSourceBuilder implements AdsMediaSourceBuilder {
diff --git a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/PlayerManager.java b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/PlayerManager.java
index 3e82871eda..e42cf60f4a 100644
--- a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/PlayerManager.java
+++ b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/PlayerManager.java
@@ -16,6 +16,7 @@
 import com.google.android.exoplayer2.upstream.HttpDataSource;
 import com.google.android.exoplayer2.upstream.TransferListener;
 import com.google.android.exoplayer2.util.ErrorMessageProvider;
+import java.util.UUID;
 
 /**
  * Created by dfbarone on 5/17/2018.
@@ -157,8 +158,11 @@ public void setPlayerDependencies(PlayerDependencies dependencies) {
 
   /** Drm builder methods */
   public interface DrmSessionManagerBuilder {
-    DefaultDrmSessionManager<FrameworkMediaCrypto> buildDrmSessionManager()
+    DefaultDrmSessionManager<FrameworkMediaCrypto> buildDrmSessionManagerV18(
+        UUID uuid, String licenseUrl, String[] keyRequestPropertiesArray, boolean multiSession)
         throws UnsupportedDrmException;
+
+     void releaseMediaDrm();
   }
 
   /** Ads builder methods */
diff --git a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/SimpleExoPlayerManager.java b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/SimpleExoPlayerManager.java
index 6c7ca3973b..913c27304b 100644
--- a/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/SimpleExoPlayerManager.java
+++ b/library/manager/src/main/java/com/dfbarone/android/exoplayer2/manager/SimpleExoPlayerManager.java
@@ -70,6 +70,7 @@
 import java.net.CookieHandler;
 import java.net.CookieManager;
 import java.net.CookiePolicy;
+import java.util.UUID;
 
 /**
  * An class that plays media using {@link SimpleExoPlayer}.
@@ -91,6 +92,11 @@
   public static final String EXTENSION_LIST_EXTRA = "extension_list";
 
   public static final String DRM_SCHEME_EXTRA = "drm_scheme";
+  public static final String DRM_LICENSE_URL_EXTRA = "drm_license_url";
+  public static final String DRM_KEY_REQUEST_PROPERTIES_EXTRA = "drm_key_request_properties";
+  public static final String DRM_MULTI_SESSION_EXTRA = "drm_multi_session";
+  // For backwards compatibility only.
+  private static final String DRM_SCHEME_UUID_EXTRA = "drm_scheme_uuid";
 
   public static final String PREFER_EXTENSION_DECODERS_EXTRA = "prefer_extension_decoders";
 
@@ -247,33 +253,43 @@ protected void buildPlayer() {
       }
     } else {
       onError(getContext().getString(R.string.unexpected_intent_action, action),
-              new IllegalStateException(
-                      getContext().getString(R.string.unexpected_intent_action, action)));
+          new IllegalStateException(
+              getContext().getString(R.string.unexpected_intent_action, action)));
       //finish(getContext().getString(R.string.unexpected_intent_action, action));
       return;
     }
 
     // initialize drm
     DefaultDrmSessionManager<FrameworkMediaCrypto> drmSessionManager = null;
-    if ((intent.hasExtra(DRM_SCHEME_EXTRA) &&
-            !TextUtils.isEmpty(intent.getStringExtra(DRM_SCHEME_EXTRA)))) {
+    if (intent.hasExtra(DRM_SCHEME_EXTRA) || intent.hasExtra(DRM_SCHEME_UUID_EXTRA)) {
       int errorStringId = R.string.error_drm_unknown;
       if (Util.SDK_INT < 18) {
         errorStringId = R.string.error_drm_not_supported;
       } else {
         try {
-          drmSessionManager =
-                  playerDependencies().drmSessionManagerBuilder().buildDrmSessionManager();
+          String drmLicenseUrl = intent.getStringExtra(DRM_LICENSE_URL_EXTRA);
+          String[] keyRequestPropertiesArray =
+              intent.getStringArrayExtra(DRM_KEY_REQUEST_PROPERTIES_EXTRA);
+          boolean multiSession = intent.getBooleanExtra(DRM_MULTI_SESSION_EXTRA, false);
+          String drmSchemeExtra =
+              intent.hasExtra(DRM_SCHEME_EXTRA) ? DRM_SCHEME_EXTRA : DRM_SCHEME_UUID_EXTRA;
+          UUID drmSchemeUuid = Util.getDrmUuid(intent.getStringExtra(drmSchemeExtra));
+          if (drmSchemeUuid != null) {
+            drmSessionManager =
+                playerDependencies().drmSessionManagerBuilder()
+                    .buildDrmSessionManagerV18(drmSchemeUuid, drmLicenseUrl,
+                        keyRequestPropertiesArray, multiSession);
+          }
         } catch (UnsupportedDrmException e) {
           errorStringId = e.reason == UnsupportedDrmException.REASON_UNSUPPORTED_SCHEME
-                  ? R.string.error_drm_unsupported_scheme : R.string.error_drm_unknown;
+              ? R.string.error_drm_unsupported_scheme : R.string.error_drm_unknown;
         } catch (Exception e) {
 
         }
       }
       if (drmSessionManager == null) {
         onError(getContext().getString(errorStringId),
-                new IllegalStateException(getContext().getString(errorStringId)));
+            new IllegalStateException(getContext().getString(errorStringId)));
         //finish(getContext().getString(errorStringId));
         return;
       }
@@ -288,39 +304,39 @@ protected void buildPlayer() {
       trackSelectionFactory = new RandomTrackSelection.Factory();
     } else {
       onError(getContext().getString(R.string.error_unrecognized_abr_algorithm),
-              new IllegalStateException(
-                      getContext().getString(R.string.error_unrecognized_abr_algorithm)));
+          new IllegalStateException(
+              getContext().getString(R.string.error_unrecognized_abr_algorithm)));
       //finish(getContext().getString(R.string.error_unrecognized_abr_algorithm));
       return;
     }
 
     @DefaultRenderersFactory.ExtensionRendererMode int extensionRendererMode =
-            DefaultRenderersFactory.EXTENSION_RENDERER_MODE_OFF;
+        DefaultRenderersFactory.EXTENSION_RENDERER_MODE_OFF;
     if (intent.hasExtra(PREFER_EXTENSION_DECODERS_EXTRA)) {
       boolean preferExtensionDecoders =
-              intent.getBooleanExtra(PREFER_EXTENSION_DECODERS_EXTRA, false);
+          intent.getBooleanExtra(PREFER_EXTENSION_DECODERS_EXTRA, false);
       extensionRendererMode =
-              preferExtensionDecoders ? DefaultRenderersFactory.EXTENSION_RENDERER_MODE_PREFER
-                      : DefaultRenderersFactory.EXTENSION_RENDERER_MODE_ON;
+          preferExtensionDecoders ? DefaultRenderersFactory.EXTENSION_RENDERER_MODE_PREFER
+              : DefaultRenderersFactory.EXTENSION_RENDERER_MODE_ON;
     }
 
     DefaultRenderersFactory renderersFactory =
-            new DefaultRenderersFactory(getContext(), extensionRendererMode);
+        new DefaultRenderersFactory(getContext(), extensionRendererMode);
 
     trackSelector = new DefaultTrackSelector(trackSelectionFactory);
     trackSelector.setParameters(trackSelectorParameters);
     lastSeenTrackGroupArray = null;
 
     player = ExoPlayerFactory.newSimpleInstance(getContext(), renderersFactory, trackSelector,
-            getLoadControl(), drmSessionManager, BANDWIDTH_METER);
+        getLoadControl(), drmSessionManager, BANDWIDTH_METER);
     player.addListener(this);
     player.setPlayWhenReady(startAutoPlay);
     player.addAnalyticsListener(new EventLogger(trackSelector));
     if (playerView != null) {
       if (playerDependencies() instanceof CustomPlayerDependencies
-              && ((CustomPlayerDependencies) playerDependencies()).errorMessageProvider() != null) {
+          && ((CustomPlayerDependencies) playerDependencies()).errorMessageProvider() != null) {
         playerView.setErrorMessageProvider(
-                ((CustomPlayerDependencies) playerDependencies()).errorMessageProvider());
+            ((CustomPlayerDependencies) playerDependencies()).errorMessageProvider());
       }
       playerView.setPlayer(player);
       playerView.setPlaybackPreparer(this);
@@ -333,10 +349,10 @@ protected void buildPlayer() {
     MediaSource[] mediaSources = new MediaSource[uris.length];
     for (int i = 0; i < uris.length; i++) {
       mediaSources[i] =
-              playerDependencies().mediaSourceBuilder().buildMediaSource(uris[i], extensions[i]);
+          playerDependencies().mediaSourceBuilder().buildMediaSource(uris[i], extensions[i]);
     }
     mediaSource =
-            mediaSources.length == 1 ? mediaSources[0] : new ConcatenatingMediaSource(mediaSources);
+        mediaSources.length == 1 ? mediaSources[0] : new ConcatenatingMediaSource(mediaSources);
 
     // initialize AdsLoader
     String adTagUriString = intent.getStringExtra(AD_TAG_URI_EXTRA);
@@ -347,12 +363,12 @@ protected void buildPlayer() {
         loadedAdTagUri = adTagUri;
       }
       MediaSource adsMediaSource = playerDependencies().adsMediaSourceBuilder()
-              .createAdsMediaSource(mediaSource, Uri.parse(adTagUriString));
+          .createAdsMediaSource(mediaSource, Uri.parse(adTagUriString));
       if (adsMediaSource != null) {
         mediaSource = adsMediaSource;
       } else {
         onError(getContext().getString(R.string.ima_not_loaded),
-                new IllegalStateException(getContext().getString(R.string.ima_not_loaded)));
+            new IllegalStateException(getContext().getString(R.string.ima_not_loaded)));
       }
     } else {
       releaseAdsLoader();
@@ -381,9 +397,8 @@ public void releasePlayer() {
 
   @Override
   public void releaseMediaDrm() {
-    if (mediaDrm != null) {
-      mediaDrm.release();
-      mediaDrm = null;
+    if (playerDependencies().drmSessionManagerBuilder() != null) {
+      playerDependencies().drmSessionManagerBuilder().releaseMediaDrm();
     }
   }
 
