diff --git a/library/core/src/test/java/com/google/android/exoplayer2/drm/OfflineLicenseHelperTest.java b/library/core/src/test/java/com/google/android/exoplayer2/drm/OfflineLicenseHelperTest.java
index 886be4c476..c371389483 100644
--- a/library/core/src/test/java/com/google/android/exoplayer2/drm/OfflineLicenseHelperTest.java
+++ b/library/core/src/test/java/com/google/android/exoplayer2/drm/OfflineLicenseHelperTest.java
@@ -19,7 +19,6 @@
 import static org.junit.Assert.fail;
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.anyInt;
-import static org.mockito.ArgumentMatchers.nullable;
 import static org.mockito.Mockito.when;
 
 import android.util.Pair;
@@ -27,7 +26,6 @@
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.drm.DrmInitData.SchemeData;
 import java.util.HashMap;
-import java.util.List;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -49,8 +47,7 @@
   public void setUp() throws Exception {
     MockitoAnnotations.initMocks(this);
     when(mediaDrm.openSession()).thenReturn(new byte[] {1, 2, 3});
-    when(mediaDrm.getKeyRequest(
-            nullable(byte[].class), nullable(List.class), anyInt(), nullable(HashMap.class)))
+    when(mediaDrm.getKeyRequest(any(), any(), anyInt(), any()))
         .thenReturn(
             new ExoMediaDrm.KeyRequest(/* data= */ new byte[0], /* licenseServerUrl= */ ""));
     offlineLicenseHelper =
diff --git a/library/core/src/test/java/com/google/android/exoplayer2/extractor/DefaultExtractorsFactoryTest.java b/library/core/src/test/java/com/google/android/exoplayer2/extractor/DefaultExtractorsFactoryTest.java
index be9100cb9d..43ff7d8f51 100644
--- a/library/core/src/test/java/com/google/android/exoplayer2/extractor/DefaultExtractorsFactoryTest.java
+++ b/library/core/src/test/java/com/google/android/exoplayer2/extractor/DefaultExtractorsFactoryTest.java
@@ -45,13 +45,13 @@ public void testCreateExtractors_returnExpectedClasses() {
     DefaultExtractorsFactory defaultExtractorsFactory = new DefaultExtractorsFactory();
 
     Extractor[] extractors = defaultExtractorsFactory.createExtractors();
-    List<Class> listCreatedExtractorClasses = new ArrayList<>();
+    List<Class<?>> listCreatedExtractorClasses = new ArrayList<>();
     for (Extractor extractor : extractors) {
       listCreatedExtractorClasses.add(extractor.getClass());
     }
 
-    Class[] expectedExtractorClassses =
-        new Class[] {
+    Class<?>[] expectedExtractorClassses =
+        new Class<?>[] {
           MatroskaExtractor.class,
           FragmentedMp4Extractor.class,
           Mp4Extractor.class,
