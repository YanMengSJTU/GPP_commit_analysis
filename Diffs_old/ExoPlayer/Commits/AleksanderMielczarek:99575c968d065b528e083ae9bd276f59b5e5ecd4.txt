diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloadAction.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloadAction.java
index 403b4e797b..db38d7d2ad 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloadAction.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloadAction.java
@@ -40,6 +40,7 @@ public final DownloadAction readFromStream(int version, DataInputStream input)
         throws IOException {
       Uri uri = Uri.parse(input.readUTF());
       boolean isRemoveAction = input.readBoolean();
+      boolean paused = input.readBoolean();
       int dataLength = input.readInt();
       byte[] data = new byte[dataLength];
       input.readFully(data);
@@ -48,7 +49,7 @@ public final DownloadAction readFromStream(int version, DataInputStream input)
       for (int i = 0; i < keyCount; i++) {
         keys.add(readKey(version, input));
       }
-      return createDownloadAction(uri, isRemoveAction, data, keys);
+      return createDownloadAction(uri, isRemoveAction, paused, data, keys);
     }
 
     /** Deserializes a key from the {@code input}. */
@@ -61,7 +62,7 @@ protected StreamKey readKey(int version, DataInputStream input) throws IOExcepti
 
     /** Returns a {@link DownloadAction}. */
     protected abstract DownloadAction createDownloadAction(
-        Uri manifestUri, boolean isRemoveAction, byte[] data, List<StreamKey> keys);
+        Uri manifestUri, boolean isRemoveAction, boolean paused, byte[] data, List<StreamKey> keys);
   }
 
   public final List<StreamKey> keys;
@@ -80,9 +81,10 @@ protected SegmentDownloadAction(
       int version,
       Uri uri,
       boolean isRemoveAction,
+      boolean paused,
       @Nullable byte[] data,
       List<StreamKey> keys) {
-    super(type, version, uri, isRemoveAction, data);
+    super(type, version, uri, isRemoveAction, paused, data);
     if (isRemoveAction) {
       Assertions.checkArgument(keys.isEmpty());
       this.keys = Collections.emptyList();
@@ -102,6 +104,7 @@ protected SegmentDownloadAction(
   public final void writeToStream(DataOutputStream output) throws IOException {
     output.writeUTF(uri.toString());
     output.writeBoolean(isRemoveAction);
+    output.writeBoolean(paused);
     output.writeInt(data.length);
     output.write(data);
     output.writeInt(keys.size());
diff --git a/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloadAction.java b/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloadAction.java
index f36a018e5b..8fb7a712f8 100644
--- a/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloadAction.java
+++ b/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloadAction.java
@@ -34,8 +34,8 @@
       new SegmentDownloadActionDeserializer(TYPE, VERSION) {
         @Override
         protected DownloadAction createDownloadAction(
-            Uri uri, boolean isRemoveAction, byte[] data, List<StreamKey> keys) {
-          return new DashDownloadAction(uri, isRemoveAction, data, keys);
+            Uri uri, boolean isRemoveAction, boolean paused, byte[] data, List<StreamKey> keys) {
+          return new DashDownloadAction(uri, isRemoveAction, paused, data, keys);
         }
       };
 
@@ -48,7 +48,7 @@ protected DownloadAction createDownloadAction(
    */
   public static DashDownloadAction createDownloadAction(
       Uri uri, @Nullable byte[] data, List<StreamKey> keys) {
-    return new DashDownloadAction(uri, /* isRemoveAction= */ false, data, keys);
+    return new DashDownloadAction(uri, /* isRemoveAction= */ false, false, data, keys);
   }
 
   /**
@@ -58,7 +58,7 @@ public static DashDownloadAction createDownloadAction(
    * @param data Optional custom data for this action. If {@code null} an empty array will be used.
    */
   public static DashDownloadAction createRemoveAction(Uri uri, @Nullable byte[] data) {
-    return new DashDownloadAction(uri, /* isRemoveAction= */ true, data, Collections.emptyList());
+    return new DashDownloadAction(uri, /* isRemoveAction= */ true, false, data, Collections.emptyList());
   }
 
   /**
@@ -72,8 +72,8 @@ public static DashDownloadAction createRemoveAction(Uri uri, @Nullable byte[] da
    */
   @Deprecated
   public DashDownloadAction(
-      Uri uri, boolean isRemoveAction, @Nullable byte[] data, List<StreamKey> keys) {
-    super(TYPE, VERSION, uri, isRemoveAction, data, keys);
+      Uri uri, boolean isRemoveAction, boolean paused, @Nullable byte[] data, List<StreamKey> keys) {
+    super(TYPE, VERSION, uri, isRemoveAction,paused, data, keys);
   }
 
   @Override
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloadAction.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloadAction.java
index c54a9a7dd3..d1b433a832 100644
--- a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloadAction.java
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloadAction.java
@@ -47,8 +47,8 @@ protected StreamKey readKey(int version, DataInputStream input) throws IOExcepti
 
         @Override
         protected DownloadAction createDownloadAction(
-            Uri uri, boolean isRemoveAction, byte[] data, List<StreamKey> keys) {
-          return new HlsDownloadAction(uri, isRemoveAction, data, keys);
+            Uri uri, boolean isRemoveAction, boolean paused, byte[] data, List<StreamKey> keys) {
+          return new HlsDownloadAction(uri, isRemoveAction, paused, data, keys);
         }
       };
 
@@ -61,7 +61,7 @@ protected DownloadAction createDownloadAction(
    */
   public static HlsDownloadAction createDownloadAction(
       Uri uri, @Nullable byte[] data, List<StreamKey> keys) {
-    return new HlsDownloadAction(uri, /* isRemoveAction= */ false, data, keys);
+    return new HlsDownloadAction(uri, /* isRemoveAction= */ false, false, data, keys);
   }
 
   /**
@@ -71,7 +71,7 @@ public static HlsDownloadAction createDownloadAction(
    * @param data Optional custom data for this action. If {@code null} an empty array will be used.
    */
   public static HlsDownloadAction createRemoveAction(Uri uri, @Nullable byte[] data) {
-    return new HlsDownloadAction(uri, /* isRemoveAction= */ true, data, Collections.emptyList());
+    return new HlsDownloadAction(uri, /* isRemoveAction= */ true, false, data, Collections.emptyList());
   }
 
   /**
@@ -85,8 +85,8 @@ public static HlsDownloadAction createRemoveAction(Uri uri, @Nullable byte[] dat
    */
   @Deprecated
   public HlsDownloadAction(
-      Uri uri, boolean isRemoveAction, @Nullable byte[] data, List<StreamKey> keys) {
-    super(TYPE, VERSION, uri, isRemoveAction, data, keys);
+      Uri uri, boolean isRemoveAction, boolean paused, @Nullable byte[] data, List<StreamKey> keys) {
+    super(TYPE, VERSION, uri, isRemoveAction, paused, data, keys);
   }
 
   @Override
diff --git a/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloadAction.java b/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloadAction.java
index ad2196fd74..889662a388 100644
--- a/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloadAction.java
+++ b/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloadAction.java
@@ -47,8 +47,8 @@ protected StreamKey readKey(int version, DataInputStream input) throws IOExcepti
 
         @Override
         protected DownloadAction createDownloadAction(
-            Uri uri, boolean isRemoveAction, byte[] data, List<StreamKey> keys) {
-          return new SsDownloadAction(uri, isRemoveAction, data, keys);
+            Uri uri, boolean isRemoveAction, boolean paused, byte[] data, List<StreamKey> keys) {
+          return new SsDownloadAction(uri, isRemoveAction, paused, data, keys);
         }
       };
 
@@ -61,7 +61,7 @@ protected DownloadAction createDownloadAction(
    */
   public static SsDownloadAction createDownloadAction(
       Uri uri, @Nullable byte[] data, List<StreamKey> keys) {
-    return new SsDownloadAction(uri, /* isRemoveAction= */ false, data, keys);
+    return new SsDownloadAction(uri, /* isRemoveAction= */ false, false, data, keys);
   }
 
   /**
@@ -71,7 +71,7 @@ public static SsDownloadAction createDownloadAction(
    * @param data Optional custom data for this action. If {@code null} an empty array will be used.
    */
   public static SsDownloadAction createRemoveAction(Uri uri, @Nullable byte[] data) {
-    return new SsDownloadAction(uri, /* isRemoveAction= */ true, data, Collections.emptyList());
+    return new SsDownloadAction(uri, /* isRemoveAction= */ true, false, data, Collections.emptyList());
   }
 
   /**
@@ -85,8 +85,8 @@ public static SsDownloadAction createRemoveAction(Uri uri, @Nullable byte[] data
    */
   @Deprecated
   public SsDownloadAction(
-      Uri uri, boolean isRemoveAction, @Nullable byte[] data, List<StreamKey> keys) {
-    super(TYPE, VERSION, uri, isRemoveAction, data, keys);
+      Uri uri, boolean isRemoveAction, boolean paused, @Nullable byte[] data, List<StreamKey> keys) {
+    super(TYPE, VERSION, uri, isRemoveAction,paused, data, keys);
   }
 
   @Override
