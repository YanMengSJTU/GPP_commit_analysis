diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/ScriptTagPayloadReader.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/ScriptTagPayloadReader.java
index eb1cc8f336..806cc9fad4 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/ScriptTagPayloadReader.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/ScriptTagPayloadReader.java
@@ -15,8 +15,10 @@
  */
 package com.google.android.exoplayer2.extractor.flv;
 
+import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.ParserException;
+import com.google.android.exoplayer2.extractor.DummyTrackOutput;
 import com.google.android.exoplayer2.util.ParsableByteArray;
 import java.util.ArrayList;
 import java.util.Date;
@@ -44,7 +46,7 @@
   private long durationUs;
 
   public ScriptTagPayloadReader() {
-    super(null);
+    super(new DummyTrackOutput());
     durationUs = C.TIME_UNSET;
   }
 
@@ -138,7 +140,10 @@ private static String readAmfString(ParsableByteArray data) {
     ArrayList<Object> list = new ArrayList<>(count);
     for (int i = 0; i < count; i++) {
       int type = readAmfType(data);
-      list.add(readAmfData(data, type));
+      Object value = readAmfData(data, type);
+      if (value != null) {
+        list.add(value);
+      }
     }
     return list;
   }
@@ -157,7 +162,10 @@ private static String readAmfString(ParsableByteArray data) {
       if (type == AMF_TYPE_END_MARKER) {
         break;
       }
-      array.put(key, readAmfData(data, type));
+      Object value = readAmfData(data, type);
+      if (value != null) {
+        array.put(key, value);
+      }
     }
     return array;
   }
@@ -174,7 +182,10 @@ private static String readAmfString(ParsableByteArray data) {
     for (int i = 0; i < count; i++) {
       String key = readAmfString(data);
       int type = readAmfType(data);
-      array.put(key, readAmfData(data, type));
+      Object value = readAmfData(data, type);
+      if (value != null) {
+        array.put(key, value);
+      }
     }
     return array;
   }
@@ -191,6 +202,7 @@ private static Date readAmfDate(ParsableByteArray data) {
     return date;
   }
 
+  @Nullable
   private static Object readAmfData(ParsableByteArray data, int type) {
     switch (type) {
       case AMF_TYPE_NUMBER:
@@ -208,8 +220,8 @@ private static Object readAmfData(ParsableByteArray data, int type) {
       case AMF_TYPE_DATE:
         return readAmfDate(data);
       default:
+        // We don't log a warning because there are types that we knowingly don't support.
         return null;
     }
   }
-
 }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/mp4/Track.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/mp4/Track.java
index 9d3635e8b3..7676926c4d 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/mp4/Track.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/mp4/Track.java
@@ -123,6 +123,7 @@ public Track(int id, int type, long timescale, long movieTimescale, long duratio
    * @return The {@link TrackEncryptionBox} for the given sample description index. Maybe null if no
    *     such entry exists.
    */
+  @Nullable
   public TrackEncryptionBox getSampleDescriptionEncryptionBox(int sampleDescriptionIndex) {
     return sampleDescriptionEncryptionBoxes == null ? null
         : sampleDescriptionEncryptionBoxes[sampleDescriptionIndex];
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/mp4/TrackEncryptionBox.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/mp4/TrackEncryptionBox.java
index 5bd29c6e75..a35d211aa4 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/mp4/TrackEncryptionBox.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/mp4/TrackEncryptionBox.java
@@ -52,7 +52,7 @@
    * If {@link #perSampleIvSize} is 0, holds the default initialization vector as defined in the
    * track encryption box or sample group description box. Null otherwise.
    */
-  public final byte[] defaultInitializationVector;
+  @Nullable public final byte[] defaultInitializationVector;
 
   /**
    * @param isEncrypted See {@link #isEncrypted}.
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/text/Cue.java b/library/core/src/main/java/com/google/android/exoplayer2/text/Cue.java
index 29facdb210..39359a9367 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/text/Cue.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/text/Cue.java
@@ -29,9 +29,10 @@
  */
 public class Cue {
 
-  /**
-   * An unset position or width.
-   */
+  /** The empty cue. */
+  public static final Cue EMPTY = new Cue("");
+
+  /** An unset position or width. */
   public static final float DIMEN_UNSET = Float.MIN_VALUE;
 
   /**
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/text/SimpleSubtitleDecoder.java b/library/core/src/main/java/com/google/android/exoplayer2/text/SimpleSubtitleDecoder.java
index 38d6ff25cb..bd561afaf8 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/text/SimpleSubtitleDecoder.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/text/SimpleSubtitleDecoder.java
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer2.text;
 
+import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.decoder.SimpleDecoder;
 import java.nio.ByteBuffer;
@@ -69,6 +70,7 @@ protected final void releaseOutputBuffer(SubtitleOutputBuffer buffer) {
 
   @SuppressWarnings("ByteBufferBackingArray")
   @Override
+  @Nullable
   protected final SubtitleDecoderException decode(
       SubtitleInputBuffer inputBuffer, SubtitleOutputBuffer outputBuffer, boolean reset) {
     try {
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/text/SubtitleOutputBuffer.java b/library/core/src/main/java/com/google/android/exoplayer2/text/SubtitleOutputBuffer.java
index b34628b922..1dcdecf95f 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/text/SubtitleOutputBuffer.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/text/SubtitleOutputBuffer.java
@@ -18,6 +18,7 @@
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.decoder.OutputBuffer;
+import com.google.android.exoplayer2.util.Assertions;
 import java.util.List;
 
 /**
@@ -46,22 +47,22 @@ public void setContent(long timeUs, Subtitle subtitle, long subsampleOffsetUs) {
 
   @Override
   public int getEventTimeCount() {
-    return subtitle.getEventTimeCount();
+    return Assertions.checkNotNull(subtitle).getEventTimeCount();
   }
 
   @Override
   public long getEventTime(int index) {
-    return subtitle.getEventTime(index) + subsampleOffsetUs;
+    return Assertions.checkNotNull(subtitle).getEventTime(index) + subsampleOffsetUs;
   }
 
   @Override
   public int getNextEventTimeIndex(long timeUs) {
-    return subtitle.getNextEventTimeIndex(timeUs - subsampleOffsetUs);
+    return Assertions.checkNotNull(subtitle).getNextEventTimeIndex(timeUs - subsampleOffsetUs);
   }
 
   @Override
   public List<Cue> getCues(long timeUs) {
-    return subtitle.getCues(timeUs - subsampleOffsetUs);
+    return Assertions.checkNotNull(subtitle).getCues(timeUs - subsampleOffsetUs);
   }
 
   @Override
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/text/pgs/PgsDecoder.java b/library/core/src/main/java/com/google/android/exoplayer2/text/pgs/PgsDecoder.java
index 091bda49f3..9ef3556c8f 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/text/pgs/PgsDecoder.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/text/pgs/PgsDecoder.java
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.text.pgs;
 
 import android.graphics.Bitmap;
+import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.text.Cue;
 import com.google.android.exoplayer2.text.SimpleSubtitleDecoder;
 import com.google.android.exoplayer2.text.Subtitle;
@@ -41,7 +42,7 @@
   private final ParsableByteArray inflatedBuffer;
   private final CueBuilder cueBuilder;
 
-  private Inflater inflater;
+  @Nullable private Inflater inflater;
 
   public PgsDecoder() {
     super("PgsDecoder");
@@ -76,6 +77,7 @@ private void maybeInflateData(ParsableByteArray buffer) {
     }
   }
 
+  @Nullable
   private static Cue readNextSection(ParsableByteArray buffer, CueBuilder cueBuilder) {
     int limit = buffer.limit();
     int sectionType = buffer.readUnsignedByte();
@@ -197,6 +199,7 @@ private void parseIdentifierSection(ParsableByteArray buffer, int sectionLength)
       bitmapY = buffer.readUnsignedShort();
     }
 
+    @Nullable
     public Cue build() {
       if (planeWidth == 0
           || planeHeight == 0
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/text/ssa/SsaDecoder.java b/library/core/src/main/java/com/google/android/exoplayer2/text/ssa/SsaDecoder.java
index d701f99d73..e305259cbc 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/text/ssa/SsaDecoder.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/text/ssa/SsaDecoder.java
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer2.text.ssa;
 
+import androidx.annotation.Nullable;
 import android.text.TextUtils;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.text.Cue;
@@ -50,7 +51,7 @@
   private int formatTextIndex;
 
   public SsaDecoder() {
-    this(null);
+    this(/* initializationData= */ null);
   }
 
   /**
@@ -59,7 +60,7 @@ public SsaDecoder() {
    *     format line. The second must contain an SSA header that will be assumed common to all
    *     samples.
    */
-  public SsaDecoder(List<byte[]> initializationData) {
+  public SsaDecoder(@Nullable List<byte[]> initializationData) {
     super("SsaDecoder");
     if (initializationData != null && !initializationData.isEmpty()) {
       haveInitializationData = true;
@@ -202,7 +203,7 @@ private void parseDialogueLine(String dialogueLine, List<Cue> cues, LongArray cu
     cues.add(new Cue(text));
     cueTimesUs.add(startTimeUs);
     if (endTimeUs != C.TIME_UNSET) {
-      cues.add(null);
+      cues.add(Cue.EMPTY);
       cueTimesUs.add(endTimeUs);
     }
   }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/text/ssa/SsaSubtitle.java b/library/core/src/main/java/com/google/android/exoplayer2/text/ssa/SsaSubtitle.java
index 339119ed6b..9a3756194f 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/text/ssa/SsaSubtitle.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/text/ssa/SsaSubtitle.java
@@ -32,7 +32,7 @@
   private final long[] cueTimesUs;
 
   /**
-   * @param cues The cues in the subtitle. Null entries may be used to represent empty cues.
+   * @param cues The cues in the subtitle.
    * @param cueTimesUs The cue times, in microseconds.
    */
   public SsaSubtitle(Cue[] cues, long[] cueTimesUs) {
@@ -61,7 +61,7 @@ public long getEventTime(int index) {
   @Override
   public List<Cue> getCues(long timeUs) {
     int index = Util.binarySearchFloor(cueTimesUs, timeUs, true, false);
-    if (index == -1 || cues[index] == null) {
+    if (index == -1 || cues[index] == Cue.EMPTY) {
       // timeUs is earlier than the start of the first cue, or we have an empty cue.
       return Collections.emptyList();
     } else {
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/text/subrip/SubripDecoder.java b/library/core/src/main/java/com/google/android/exoplayer2/text/subrip/SubripDecoder.java
index cf174283ec..eb2b704bee 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/text/subrip/SubripDecoder.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/text/subrip/SubripDecoder.java
@@ -112,11 +112,13 @@ protected Subtitle decode(byte[] bytes, int length, boolean reset) {
       // Read and parse the text and tags.
       textBuilder.setLength(0);
       tags.clear();
-      while (!TextUtils.isEmpty(currentLine = subripData.readLine())) {
+      currentLine = subripData.readLine();
+      while (!TextUtils.isEmpty(currentLine)) {
         if (textBuilder.length() > 0) {
           textBuilder.append("<br>");
         }
         textBuilder.append(processLine(currentLine, tags));
+        currentLine = subripData.readLine();
       }
 
       Spanned text = Html.fromHtml(textBuilder.toString());
@@ -133,7 +135,7 @@ protected Subtitle decode(byte[] bytes, int length, boolean reset) {
       cues.add(buildCue(text, alignmentTag));
 
       if (haveEndTimecode) {
-        cues.add(null);
+        cues.add(Cue.EMPTY);
       }
     }
 
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/text/subrip/SubripSubtitle.java b/library/core/src/main/java/com/google/android/exoplayer2/text/subrip/SubripSubtitle.java
index a79df478e5..01ed1711a9 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/text/subrip/SubripSubtitle.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/text/subrip/SubripSubtitle.java
@@ -32,7 +32,7 @@
   private final long[] cueTimesUs;
 
   /**
-   * @param cues The cues in the subtitle. Null entries may be used to represent empty cues.
+   * @param cues The cues in the subtitle.
    * @param cueTimesUs The cue times, in microseconds.
    */
   public SubripSubtitle(Cue[] cues, long[] cueTimesUs) {
@@ -61,7 +61,7 @@ public long getEventTime(int index) {
   @Override
   public List<Cue> getCues(long timeUs) {
     int index = Util.binarySearchFloor(cueTimesUs, timeUs, true, false);
-    if (index == -1 || cues[index] == null) {
+    if (index == -1 || cues[index] == Cue.EMPTY) {
       // timeUs is earlier than the start of the first cue, or we have an empty cue.
       return Collections.emptyList();
     } else {
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/text/tx3g/Tx3gDecoder.java b/library/core/src/main/java/com/google/android/exoplayer2/text/tx3g/Tx3gDecoder.java
index 89017a40c0..c8f2979c58 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/text/tx3g/Tx3gDecoder.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/text/tx3g/Tx3gDecoder.java
@@ -65,6 +65,7 @@
   private static final float DEFAULT_VERTICAL_PLACEMENT = 0.85f;
 
   private final ParsableByteArray parsableByteArray;
+
   private boolean customVerticalPlacement;
   private int defaultFontFace;
   private int defaultColorRgba;
@@ -80,10 +81,7 @@
   public Tx3gDecoder(List<byte[]> initializationData) {
     super("Tx3gDecoder");
     parsableByteArray = new ParsableByteArray();
-    decodeInitializationData(initializationData);
-  }
 
-  private void decodeInitializationData(List<byte[]> initializationData) {
     if (initializationData != null && initializationData.size() == 1
         && (initializationData.get(0).length == 48 || initializationData.get(0).length == 53)) {
       byte[] initializationBytes = initializationData.get(0);
@@ -151,8 +149,16 @@ protected Subtitle decode(byte[] bytes, int length, boolean reset)
       }
       parsableByteArray.setPosition(position + atomSize);
     }
-    return new Tx3gSubtitle(new Cue(cueText, null, verticalPlacement, Cue.LINE_TYPE_FRACTION,
-        Cue.ANCHOR_TYPE_START, Cue.DIMEN_UNSET, Cue.TYPE_UNSET, Cue.DIMEN_UNSET));
+    return new Tx3gSubtitle(
+        new Cue(
+            cueText,
+            /* textAlignment= */ null,
+            verticalPlacement,
+            Cue.LINE_TYPE_FRACTION,
+            Cue.ANCHOR_TYPE_START,
+            Cue.DIMEN_UNSET,
+            Cue.TYPE_UNSET,
+            Cue.DIMEN_UNSET));
   }
 
   private static String readSubtitleText(ParsableByteArray parsableByteArray)
