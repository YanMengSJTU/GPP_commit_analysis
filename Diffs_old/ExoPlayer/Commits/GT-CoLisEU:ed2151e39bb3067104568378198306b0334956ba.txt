diff --git a/demo/src/main/java/br/rnp/futebol/vocoliseu/pojo/BinaryQuestion.java b/demo/src/main/java/br/rnp/futebol/vocoliseu/pojo/BinaryQuestion.java
new file mode 100644
index 0000000000..a58409f23b
--- /dev/null
+++ b/demo/src/main/java/br/rnp/futebol/vocoliseu/pojo/BinaryQuestion.java
@@ -0,0 +1,67 @@
+package br.rnp.futebol.vocoliseu.pojo;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.Serializable;
+
+/**
+ * Created by camargo on 23/11/16.
+ */
+public class BinaryQuestion implements Serializable {
+
+    private String question, answer1, answer2;
+    private final String[] ATTRIBUTES = {"question", "answer1", "answer2"};
+
+
+    public String getQuestion() {
+        return question;
+    }
+
+    public void setQuestion(String question) {
+        this.question = question;
+    }
+
+    public String getAnswer1() {
+        return answer1;
+    }
+
+    public void setAnswer1(String answer1) {
+        this.answer1 = answer1;
+    }
+
+    public String getAnswer2() {
+        return answer2;
+    }
+
+    public void setAnswer2(String answer2) {
+        this.answer2 = answer2;
+    }
+
+    public JSONObject toJson() {
+        int cont = 0;
+        JSONObject json = new JSONObject();
+        try {
+            json.put(ATTRIBUTES[cont++], this.getQuestion());
+            json.put(ATTRIBUTES[cont++], this.getAnswer1());
+            json.put(ATTRIBUTES[cont], this.getAnswer2());
+        } catch (JSONException e) {
+            return null;
+        }
+        return json;
+    }
+
+    public BinaryQuestion fromJson(JSONObject json) {
+        int cont = 0;
+        try {
+            this.question = json.getString(ATTRIBUTES[cont++]);
+            this.answer1 = json.getString(ATTRIBUTES[cont++]);
+            this.answer2 = json.getString(ATTRIBUTES[cont]);
+        } catch (Exception e) {
+            return null;
+        }
+        return this;
+    }
+
+}
diff --git a/demo/src/main/java/br/rnp/futebol/vocoliseu/pojo/TExperiment.java b/demo/src/main/java/br/rnp/futebol/vocoliseu/pojo/TExperiment.java
index 1adfe82ef5..24c65936ca 100644
--- a/demo/src/main/java/br/rnp/futebol/vocoliseu/pojo/TExperiment.java
+++ b/demo/src/main/java/br/rnp/futebol/vocoliseu/pojo/TExperiment.java
@@ -17,6 +17,7 @@
     private String name;
     private String filename;
     private boolean askInfo;
+    private boolean usedAux;
     private String instruction;
     private ArrayList<Integer> qosMetrics;
     private ArrayList<Integer> objectiveQoeMetrics;
@@ -47,6 +48,14 @@ public void setAskInfo(boolean askInfo) {
         this.askInfo = askInfo;
     }
 
+    public boolean isUsedAux() {
+        return usedAux;
+    }
+
+    public void setUsedAux(boolean usedAux) {
+        this.usedAux = usedAux;
+    }
+
     public String getInstruction() {
         return instruction;
     }
@@ -119,11 +128,11 @@ public JSONObject toJson() {
             json.put(ATTRIBUTES[cont++], this.getFilename());
             json.put(ATTRIBUTES[cont++], this.isAskInfo());
             json.put(ATTRIBUTES[cont++], this.getInstruction());
-            for (Integer i: this.getQosMetrics())
+            for (Integer i : this.getQosMetrics())
                 qos.put(i);
-            for (Integer i: this.getObjectiveQoeMetrics())
+            for (Integer i : this.getObjectiveQoeMetrics())
                 qoe.put(i);
-            for (TScript s: this.getScripts())
+            for (TScript s : this.getScripts())
                 scripts.put(s.toJson());
             json.put(ATTRIBUTES[cont++], qos);
             json.put(ATTRIBUTES[cont++], qoe);
@@ -137,5 +146,4 @@ public JSONObject toJson() {
 //    "name", "filename", "askinfo", "instruction", "qosMetrics", "objQoeMetrics", "scripts"
 
 
-
 }
diff --git a/demo/src/main/java/br/rnp/futebol/vocoliseu/pojo/TScript.java b/demo/src/main/java/br/rnp/futebol/vocoliseu/pojo/TScript.java
index 850e28e6be..143ea73b3a 100644
--- a/demo/src/main/java/br/rnp/futebol/vocoliseu/pojo/TScript.java
+++ b/demo/src/main/java/br/rnp/futebol/vocoliseu/pojo/TScript.java
@@ -17,7 +17,8 @@
     private String address;
     private boolean useDash, isUsedAux;
     private ArrayList<Integer> subjectiveQoeMetrics;
-    private final String[] ATTRIBUTES = {"video", "extension", "address", "useDash", "subjectiveQoeMetrics"};
+    private BinaryQuestion question;
+    private final String[] ATTRIBUTES = {"video", "extension", "address", "useDash", "subjectiveQoeMetrics", "question"};
 
     public String getVideo() {
         return video;
@@ -98,7 +99,9 @@ public JSONObject toJson() {
             json.put(ATTRIBUTES[cont++], this.isUseDash());
             for (Integer i : this.getSubjectiveQoeMetrics())
                 array.put(i);
-            json.put(ATTRIBUTES[cont], array);
+            json.put(ATTRIBUTES[cont++], array);
+            if (this.question != null)
+                json.put(ATTRIBUTES[cont], this.question.toJson());
         } catch (JSONException e) {
             return null;
         }
@@ -113,7 +116,9 @@ public JSONObject toSimpleJson() {
             json.put(ATTRIBUTES[cont++], this.isUseDash());
             for (Integer i : this.getSubjectiveQoeMetrics())
                 array.put(i);
-            json.put(ATTRIBUTES[cont], array);
+            json.put(ATTRIBUTES[cont++], array);
+            if (this.question != null)
+                json.put(ATTRIBUTES[cont], this.question.toJson());
         } catch (JSONException e) {
             return null;
         }
@@ -127,11 +132,13 @@ public TScript fromSimplesJson(JSONObject json) {
             this.useDash = json.getBoolean(ATTRIBUTES[cont++]);
 
             this.subjectiveQoeMetrics = new ArrayList<>();
-            JSONArray qoe = json.getJSONArray(ATTRIBUTES[cont]);
+            JSONArray qoe = json.getJSONArray(ATTRIBUTES[cont++]);
 
             for (int i = 0; i < qoe.length(); i++)
                 subjectiveQoeMetrics.add((Integer) qoe.get(i));
 
+            this.question = new BinaryQuestion().fromJson(json.getJSONObject(ATTRIBUTES[cont]));
+
         } catch (JSONException e) {
             return null;
         }
@@ -142,5 +149,11 @@ public String getProvider() {
         return this.getAddress().concat("/").concat(this.getVideo()).concat(".").concat(this.getExtension());
     }
 
+    public BinaryQuestion getQuestion() {
+        return question;
+    }
 
+    public void setQuestion(BinaryQuestion question) {
+        this.question = question;
+    }
 }
diff --git a/demo/src/main/java/br/rnp/futebol/vocoliseu/util/ReadyMetrics.java b/demo/src/main/java/br/rnp/futebol/vocoliseu/util/ReadyMetrics.java
index 1f523813a6..a329c8e75a 100644
--- a/demo/src/main/java/br/rnp/futebol/vocoliseu/util/ReadyMetrics.java
+++ b/demo/src/main/java/br/rnp/futebol/vocoliseu/util/ReadyMetrics.java
@@ -10,6 +10,7 @@
 public class ReadyMetrics {
 
     public static ArrayList<Metric> QOS_METRICS, S_QOE_METRICS, O_QOE_METRICS;
+    public static int BINARY_QUESTION_ID;
 
     public static void init() {
         int id = 0;
@@ -23,9 +24,16 @@ public static void init() {
 
         S_QOE_METRICS.add(new Metric(++id, "ACR scale", Metric.S_QOE));
         S_QOE_METRICS.add(new Metric(++id, "DCR scale", Metric.S_QOE));
+        S_QOE_METRICS.add(new Metric(++id, "Binary Question", Metric.S_QOE));
+        BINARY_QUESTION_ID = id;
 
         O_QOE_METRICS.add(new Metric(++id, "Number of Freezes", Metric.O_QOE));
-        O_QOE_METRICS.add(new Metric(++id, "Bitrate switchs", Metric.O_QOE));
+        O_QOE_METRICS.add(new Metric(++id, "Duration of Freezes", Metric.O_QOE));
+        O_QOE_METRICS.add(new Metric(++id, "Playback start time", Metric.O_QOE));
+        O_QOE_METRICS.add(new Metric(++id, "Initial and Final Resolution (DASH)", Metric.O_QOE));
+        O_QOE_METRICS.add(new Metric(++id, "Initial and Final Bitrate (DASH)", Metric.O_QOE));
+        O_QOE_METRICS.add(new Metric(++id, "Bitrate switches (DASH)", Metric.O_QOE));
+
     }
 
 
diff --git a/demo/src/main/java/br/rnp/futebol/vocoliseu/util/adapter/SelectableExperimentAdapter.java b/demo/src/main/java/br/rnp/futebol/vocoliseu/util/adapter/SelectableExperimentAdapter.java
new file mode 100644
index 0000000000..38f6cd8e83
--- /dev/null
+++ b/demo/src/main/java/br/rnp/futebol/vocoliseu/util/adapter/SelectableExperimentAdapter.java
@@ -0,0 +1,65 @@
+package br.rnp.futebol.vocoliseu.util.adapter;
+
+import android.content.Context;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import android.widget.CheckBox;
+import android.widget.TextView;
+
+import com.google.android.exoplayer2.demo.R;
+
+import java.util.List;
+
+import br.rnp.futebol.vocoliseu.pojo.TExperiment;
+
+public class SelectableExperimentAdapter extends BaseAdapter {
+
+    private Context ctx;
+    private TextView tvName, tvFilename;
+    private CheckBox cbUsed;
+    private TExperiment exp;
+    private List<TExperiment> exps;
+
+
+    public SelectableExperimentAdapter() {
+    }
+
+    public SelectableExperimentAdapter(Context context, List<TExperiment> exps) {
+        super();
+        this.ctx = context;
+        this.exps = exps;
+    }
+
+    @Override
+    public View getView(int position, View convertView, ViewGroup parent) {
+        View view = LayoutInflater.from(ctx).inflate(R.layout.exp_item_with_checkbox, parent, false);
+        exp = exps.get(position);
+
+        tvName = (TextView) view.findViewById(R.id.tv_exp_item_name_selected);
+        tvFilename = (TextView) view.findViewById(R.id.tv_exp_item_filename_selected);
+        cbUsed = (CheckBox) view.findViewById(R.id.cb_selected);
+
+        tvName.setText(exp.getName());
+        tvFilename.setText(exp.getFilename().concat(".txt"));
+        cbUsed.setChecked(exp.isUsedAux());
+
+        return view;
+    }
+
+    @Override
+    public long getItemId(int position) {
+        return position;
+    }
+
+    @Override
+    public Object getItem(int position) {
+        return exps.get(position);
+    }
+
+    @Override
+    public int getCount() {
+        return exps.size();
+    }
+}
diff --git a/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/activity/MainActivity.java b/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/activity/MainActivity.java
index cb8d8f42d0..5f25289051 100644
--- a/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/activity/MainActivity.java
+++ b/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/activity/MainActivity.java
@@ -1,11 +1,16 @@
 package br.rnp.futebol.vocoliseu.visual.activity;
 
 import android.Manifest;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.pm.PackageManager;
+import android.database.Cursor;
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
+import android.os.Environment;
 import android.support.design.widget.FloatingActionButton;
 import android.support.design.widget.NavigationView;
 import android.support.design.widget.Snackbar;
@@ -14,29 +19,44 @@
 import android.support.v7.app.ActionBarDrawerToggle;
 import android.support.v7.app.AppCompatActivity;
 import android.support.v7.widget.Toolbar;
+import android.util.Log;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
 import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
 import android.widget.ListView;
+import android.widget.Toast;
 
 import com.google.android.exoplayer2.demo.PlayerActivity;
 import com.google.android.exoplayer2.demo.R;
 
+import org.json.JSONObject;
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
+import java.net.URISyntaxException;
 import java.util.ArrayList;
+import java.util.List;
 
 import br.rnp.futebol.vocoliseu.dao.TExpForListDAO;
+import br.rnp.futebol.vocoliseu.pojo.Metric;
 import br.rnp.futebol.vocoliseu.pojo.TExperiment;
 import br.rnp.futebol.vocoliseu.pojo.TScript;
 import br.rnp.futebol.vocoliseu.util.adapter.ExperimentAdapter;
 import br.rnp.futebol.vocoliseu.util.adapter.MetricAdapter;
+import br.rnp.futebol.vocoliseu.util.adapter.SelectableExperimentAdapter;
 
 public class MainActivity extends AppCompatActivity
         implements NavigationView.OnNavigationItemSelectedListener {
 
-    private ListView lvExperiments;
+    private ListView lvExperiments, lvAux;
     private ExperimentAdapter adapter;
     private ArrayList<TExperiment> exps;
+    private TExpForListDAO dao;
+    private final int SELECT_FILE_CODE = 7;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -48,17 +68,17 @@ protected void onCreate(Bundle savedInstanceState) {
         checkPerm();
 
         lvExperiments = (ListView) findViewById(R.id.lv_main_experiments);
+        lvAux = new ListView(this);
 
-//        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab_video);
+//        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab_experiment);
 //        fab.setOnClickListener(new View.OnClickListener() {
 //            @Override
 //            public void onClick(View view) {
-//                startActivity(new Intent(getBaseContext(), ExperimentGeneralInfoActivity.class));
+//
 //            }
 //        });
 
-
-        TExpForListDAO dao = new TExpForListDAO(getBaseContext());
+        dao = new TExpForListDAO(getBaseContext());
         exps = dao.getExpsByNames(dao.getExpsNames());
 
         lvExperiments.setOnItemClickListener(new AdapterView.OnItemClickListener() {
@@ -104,6 +124,76 @@ public boolean onItemLongClick(AdapterView<?> parent, View view, int position, l
         navigationView.setNavigationItemSelectedListener(this);
     }
 
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        switch (requestCode) {
+            case SELECT_FILE_CODE:
+                if (resultCode == RESULT_OK) {
+                    Uri uri = data.getData();
+                    importExp(getPath(this, uri));
+                }
+                break;
+        }
+        super.onActivityResult(requestCode, resultCode, data);
+    }
+
+    public String getPath(Context context, Uri uri) {
+        if ("content".equalsIgnoreCase(uri.getScheme())) {
+            String[] projection = {"_data"};
+            Cursor cursor = null;
+
+            try {
+                cursor = context.getContentResolver().query(uri, projection, null, null, null);
+                if (cursor != null) {
+                    int column_index = cursor.getColumnIndexOrThrow("_data");
+                    if (cursor.moveToFirst())
+                        return cursor.getString(column_index);
+                }
+            } catch (Exception e) {
+                // Eat it
+            } finally {
+                if (cursor != null)
+                    cursor.close();
+            }
+        } else if ("file".equalsIgnoreCase(uri.getScheme())) {
+            return uri.getPath();
+        }
+
+        return null;
+    }
+
+    private void importExp(String path) {
+        String json = read(path);
+        boolean success = false;
+        try {
+            TExperiment experiment = new TExperiment().fromJson(new JSONObject(json));
+            if (experiment != null) {
+                TExpForListDAO dao = new TExpForListDAO(getBaseContext());
+                dao.insert(experiment);
+                dao.close();
+                refreshList();
+                success = true;
+            }
+        } catch (Exception e) {
+            // eat it
+        }
+        Toast.makeText(getBaseContext(), success ? "Success!" : "Could not lad the file.", Toast.LENGTH_SHORT).show();
+    }
+
+    private String read(String file) {
+        try {
+//            String csv = Environment.getExternalStorageDirectory().getAbsolutePath().concat(file);
+            BufferedReader reader = new BufferedReader(new FileReader(file));
+            String text = "", line;
+            while ((line = reader.readLine()) != null) {
+                text += line.concat(" ");
+            }
+            return text;
+        } catch (IOException e) {
+            return "";
+        }
+    }
+
     @Override
     protected void onResume() {
         super.onResume();
@@ -121,6 +211,7 @@ public void onBackPressed() {
     }
 
     private void refreshList() {
+        exps = dao.getExpsByNames(dao.getExpsNames());
         if (exps != null) {
             adapter = new ExperimentAdapter(getBaseContext(), exps);
             lvExperiments.setAdapter(adapter);
@@ -132,6 +223,9 @@ private void checkPerm() {
             if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
                 requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1);
             }
+            if (checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
+                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, 1);
+            }
         }
     }
 
@@ -166,6 +260,14 @@ public boolean onNavigationItemSelected(MenuItem item) {
             case (R.id.navigation_item_video):
                 startActivity(new Intent(this, ScriptControllerActivity.class));
                 break;
+            case (R.id.navigation_item_import):
+                Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
+                intent.setType("text/plain");
+                startActivityForResult(intent, SELECT_FILE_CODE);
+                break;
+            case (R.id.navigation_item_export):
+                exportExps();
+                break;
             default:
                 break;
 
@@ -175,4 +277,76 @@ public boolean onNavigationItemSelected(MenuItem item) {
         drawer.closeDrawer(GravityCompat.START);
         return true;
     }
+
+
+    private void refreshExportList(ArrayList<TExperiment> exps, ArrayList<TExperiment> exps2) {
+        for (TExperiment te : exps2)
+            te.setUsedAux(false);
+        for (TExperiment e: exps)
+            for (TExperiment te : exps2)
+                if (te.getFilename().equals(e.getFilename()))
+                    te.setUsedAux(true);
+
+        SelectableExperimentAdapter selAdapter = new SelectableExperimentAdapter(getBaseContext(), exps2);
+        lvAux.setAdapter(selAdapter);
+    }
+
+    private void exportExps() {
+        final AlertDialog.Builder builder = new AlertDialog.Builder(this);
+        final ArrayList<TExperiment> experiments = new ArrayList<>();
+        final ArrayList<TExperiment> auxExps = exps;
+
+        refreshExportList(experiments, auxExps);
+        lvAux.setOnItemClickListener(new ListView.OnItemClickListener() {
+            public void onItemClick(AdapterView<?> listView, View itemView, int position, long itemId) {
+                boolean added = false;
+                int count = 0;
+                for (TExperiment e : experiments)
+                    if (e.getFilename().equals(exps.get(position).getFilename()))
+                        added = true;
+                    else
+                        count++;
+                if (!added)
+                    experiments.add(exps.get(position));
+                else
+                    experiments.remove(count);
+                refreshExportList(experiments, auxExps);
+            }
+        });
+
+        builder.setNegativeButton(
+                "cancel",
+                new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        dialog.cancel();
+                        dialog.dismiss();
+                    }
+                });
+
+        builder.setPositiveButton("send", new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                Intent emailIntent = new Intent(Intent.ACTION_SEND_MULTIPLE);
+                ArrayList<Uri> uris = new ArrayList<>();
+                for (TExperiment e : experiments) {
+                    File filelocation = new File(Environment.getExternalStorageDirectory().getAbsolutePath(), e.getFilename().concat(".txt"));
+//                    filelocation.setReadable(true, false);
+                    Uri path = Uri.fromFile(filelocation);
+                    uris.add(path);
+                }
+                emailIntent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, uris);
+//                emailIntent.putExtra(Intent.EXTRA_STREAM, uris.get(0));
+                emailIntent.putExtra(Intent.EXTRA_SUBJECT, "VO-CoLisEU experiment(s)");
+                emailIntent.setType("file/*");
+                startActivity(emailIntent);
+                dialog.cancel();
+                dialog.dismiss();
+            }
+        });
+
+        builder.setTitle("Select one or more experiments:");
+        builder.setView(lvAux);
+        builder.show();
+    }
 }
diff --git a/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/fragment/ExperimentScriptsFragment.java b/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/fragment/ExperimentScriptsFragment.java
index daad77974c..4567999984 100644
--- a/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/fragment/ExperimentScriptsFragment.java
+++ b/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/fragment/ExperimentScriptsFragment.java
@@ -81,16 +81,18 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
                     experiment.getScripts().add(scripts.get(position));
                 else {
                     boolean aux = false;
-                    int cont = 0;
+                    int cont = 0, pos = -1;
                     for (TScript s : experiment.getScripts()) {
                         if (compareScripts(s, scripts.get(position))) {
-                            experiment.getScripts().remove(cont);
+                            pos = cont;
                             aux = true;
                         }
                         cont++;
                     }
                     if (!aux)
                         experiment.getScripts().add(scripts.get(position));
+                    else
+                        experiment.getScripts().remove(pos);
                 }
                 refreshList();
             }
diff --git a/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/fragment/ScriptMetricsFragment.java b/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/fragment/ScriptMetricsFragment.java
index 406eaf3bbb..ec797359a3 100644
--- a/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/fragment/ScriptMetricsFragment.java
+++ b/demo/src/main/java/br/rnp/futebol/vocoliseu/visual/fragment/ScriptMetricsFragment.java
@@ -15,12 +15,15 @@
  */
 package br.rnp.futebol.vocoliseu.visual.fragment;
 
+import android.app.AlertDialog;
+import android.content.DialogInterface;
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
+import android.widget.EditText;
 import android.widget.ListView;
 
 import com.google.android.exoplayer2.demo.R;
@@ -28,12 +31,11 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import br.rnp.futebol.vocoliseu.pojo.BinaryQuestion;
 import br.rnp.futebol.vocoliseu.pojo.Metric;
-import br.rnp.futebol.vocoliseu.pojo.TExperiment;
 import br.rnp.futebol.vocoliseu.pojo.TScript;
 import br.rnp.futebol.vocoliseu.util.ReadyMetrics;
 import br.rnp.futebol.vocoliseu.util.adapter.MetricAdapter;
-import br.rnp.futebol.vocoliseu.visual.activity.ExperimentControllerActivity;
 import br.rnp.futebol.vocoliseu.visual.activity.ScriptControllerActivity;
 
 /**
@@ -47,6 +49,8 @@
     private List<Metric> metrics;
     private MetricAdapter adapter;
     private TScript script;
+    private BinaryQuestion question = null;
+    boolean deleted;
 
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
@@ -66,12 +70,83 @@ public void onItemClick(AdapterView<?> parent, View view, int position, long id)
     }
 
     private void operateMetricsList(ArrayList<Integer> metricsIds, int position) {
+        boolean triedToDelete = false;
+        if (ReadyMetrics.S_QOE_METRICS.get(position).getId() == ReadyMetrics.BINARY_QUESTION_ID)
+            if (!metricsIds.contains(ReadyMetrics.BINARY_QUESTION_ID))
+                insertBinaryQuestion();
+            else {
+                deleteBinaryQuestion(metricsIds, position);
+                triedToDelete = true;
+            }
+        if ((!triedToDelete) || (deleted))
+            operateAux(metricsIds, position);
+
+    }
+
+    private void operateAux(ArrayList<Integer> metricsIds, int position) {
         if (metricsIds.contains(metrics.get(position).getId())) {
             for (int i = 0; i < metricsIds.size(); i++)
                 if (metricsIds.get(i) == metrics.get(position).getId())
                     metricsIds.remove(i);
         } else
             metricsIds.add(metrics.get(position).getId());
+        refreshList();
+    }
+
+    private boolean deleteBinaryQuestion(final ArrayList<Integer> metricsIds, final int position) {
+        AlertDialog.Builder alert = new AlertDialog.Builder(getActivity());
+        deleted = false;
+        alert.setTitle("Be careful!");
+        alert.setMessage("Unchecking this option will delete the previous inserted question. Are you sure?");
+        alert.setPositiveButton("save", new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                question = null;
+                script.setQuestion(null);
+                deleted = true;
+                dialog.dismiss();
+                operateAux(metricsIds, position);
+            }
+        });
+        alert.setNegativeButton("cancel", new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                dialog.dismiss();
+            }
+        });
+        alert.show();
+        return deleted;
+    }
+
+    private void insertBinaryQuestion() {
+        AlertDialog.Builder alert = new AlertDialog.Builder(getActivity());
+        LayoutInflater inflater = getActivity().getLayoutInflater();
+        View view = inflater.inflate(R.layout.binary_question_form, null);
+        final EditText etQuestion = (EditText) view.findViewById(R.id.et_binary_question);
+        final EditText etAnswer1 = (EditText) view.findViewById(R.id.et_binary_answer_1);
+        final EditText etAnswer2 = (EditText) view.findViewById(R.id.et_binary_answer_2);
+
+        alert.setView(view);
+        alert.setTitle("Type your question and answers");
+        alert.setPositiveButton("save", new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                question = new BinaryQuestion();
+                question.setQuestion(etQuestion.getText().toString());
+                question.setAnswer1(etAnswer1.getText().toString());
+                question.setAnswer2(etAnswer2.getText().toString());
+                script.setQuestion(question);
+                dialog.dismiss();
+            }
+        });
+        alert.setNegativeButton("cancel", new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                dialog.dismiss();
+            }
+        });
+        alert.show();
+
     }
 
     private void init() {
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/VODebugTextViewHelper.java b/demo/src/main/java/com/google/android/exoplayer2/demo/VODebugTextViewHelper.java
index 2a32bb55e9..ff1742f5ee 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/VODebugTextViewHelper.java
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/VODebugTextViewHelper.java
@@ -1,193 +1,3 @@
-///*
-// * Copyright (C) 2016 The Android Open Source Project
-// *
-// * Licensed under the Apache License, Version 2.0 (the "License");
-// * you may not use this file except in compliance with the License.
-// * You may obtain a copy of the License at
-// *
-// *      http://www.apache.org/licenses/LICENSE-2.0
-// *
-// * Unless required by applicable law or agreed to in writing, software
-// * distributed under the License is distributed on an "AS IS" BASIS,
-// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// * See the License for the specific language governing permissions and
-// * limitations under the License.
-// */
-//package com.google.android.exoplayer2.ui;
-//
-//import android.widget.TextView;
-//import com.google.android.exoplayer2.ExoPlaybackException;
-//import com.google.android.exoplayer2.ExoPlayer;
-//import com.google.android.exoplayer2.Format;
-//import com.google.android.exoplayer2.SimpleExoPlayer;
-//import com.google.android.exoplayer2.Timeline;
-//import com.google.android.exoplayer2.decoder.DecoderCounters;
-//
-///**
-// * A helper class for periodically updating a {@link TextView} with debug information obtained from
-// * a {@link SimpleExoPlayer}.
-// */
-//public final class DebugTextViewHelper implements Runnable, ExoPlayer.EventListener {
-//
-//  private static final int REFRESH_INTERVAL_MS = 1000;
-//
-//  private final SimpleExoPlayer player;
-//  private final TextView textView;
-//
-//  private boolean started;
-//
-//  /**
-//   * @param player The {@link SimpleExoPlayer} from which debug information should be obtained.
-//   * @param textView The {@link TextView} that should be updated to display the information.
-//   */
-//  public DebugTextViewHelper(SimpleExoPlayer player, TextView textView) {
-//    this.player = player;
-//    this.textView = textView;
-//  }
-//
-//  /**
-//   * Starts periodic updates of the {@link TextView}. Must be called from the application's main
-//   * thread.
-//   */
-//  public void start() {
-//    if (started) {
-//      return;
-//    }
-//    started = true;
-//    player.addListener(this);
-//    updateAndPost();
-//  }
-//
-//  /**
-//   * Stops periodic updates of the {@link TextView}. Must be called from the application's main
-//   * thread.
-//   */
-//  public void stop() {
-//    if (!started) {
-//      return;
-//    }
-//    started = false;
-//    player.removeListener(this);
-//    textView.removeCallbacks(this);
-//  }
-//
-//  // ExoPlayer.EventListener implementation.
-//
-//  @Override
-//  public void onLoadingChanged(boolean isLoading) {
-//    // Do nothing.
-//  }
-//
-//  @Override
-//  public void onPlayerStateChanged(boolean playWhenReady, int playbackState) {
-//    updateAndPost();
-//  }
-//
-//  @Override
-//  public void onPositionDiscontinuity() {
-//    updateAndPost();
-//  }
-//
-//  @Override
-//  public void onTimelineChanged(Timeline timeline, Object manifest) {
-//    // Do nothing.
-//  }
-//
-//  @Override
-//  public void onPlayerError(ExoPlaybackException error) {
-//    // Do nothing.
-//  }
-//
-//  // Runnable implementation.
-//
-//  @Override
-//  public void run() {
-//    updateAndPost();
-//  }
-//
-//  // Private methods.
-//
-//  private void updateAndPost() {
-//    textView.setText(getPlayerStateString() + getPlayerWindowIndexString() + getVideoString()
-//        + getAudioString());
-//    textView.removeCallbacks(this);
-//    textView.postDelayed(this, REFRESH_INTERVAL_MS);
-//  }
-//
-//  private String getPlayerStateString() {
-//    String text = "playWhenReady:" + player.getPlayWhenReady() + " playbackState:";
-//    switch (player.getPlaybackState()) {
-//      case ExoPlayer.STATE_BUFFERING:
-//        text += "buffering";
-//        break;
-//      case ExoPlayer.STATE_ENDED:
-//        text += "ended";
-//        break;
-//      case ExoPlayer.STATE_IDLE:
-//        text += "idle";
-//        break;
-//      case ExoPlayer.STATE_READY:
-//        text += "ready";
-//        break;
-//      default:
-//        text += "unknown";
-//        break;
-//    }
-//    return text;
-//  }
-//
-//  private String getPlayerWindowIndexString() {
-//    return " window:" + player.getCurrentWindowIndex();
-//  }
-//
-//  private String getVideoString() {
-//    Format format = player.getVideoFormat();
-//    if (format == null) {
-//      return "";
-//    }
-//    return "\n" + format.sampleMimeType + "(id:" + format.id + " r:" + format.width + "x"
-//        + format.height + getDecoderCountersBufferCountString(player.getVideoDecoderCounters())
-//        + ")";
-//  }
-//
-//  private String getAudioString() {
-//    Format format = player.getAudioFormat();
-//    if (format == null) {
-//      return "";
-//    }
-//    return "\n" + format.sampleMimeType + "(id:" + format.id + " hz:" + format.sampleRate + " ch:"
-//        + format.channelCount
-//        + getDecoderCountersBufferCountString(player.getAudioDecoderCounters()) + ")";
-//  }
-//
-//  private static String getDecoderCountersBufferCountString(DecoderCounters counters) {
-//    if (counters == null) {
-//      return "";
-//    }
-//    counters.ensureUpdated();
-//    return " rb:" + counters.renderedOutputBufferCount
-//        + " sb:" + counters.skippedOutputBufferCount
-//        + " db:" + counters.droppedOutputBufferCount
-//        + " mcdb:" + counters.maxConsecutiveDroppedOutputBufferCount;
-//  }
-//
-//}
-
-/*
- * Copyright (C) 2016 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
 package com.google.android.exoplayer2.demo;
 
 import android.app.AlertDialog;
@@ -199,6 +9,7 @@
 import android.os.Environment;
 import android.util.Log;
 import android.widget.TextView;
+import android.widget.Toast;
 
 import com.google.android.exoplayer2.ExoPlaybackException;
 import com.google.android.exoplayer2.ExoPlayer;
@@ -212,6 +23,7 @@
 import java.io.FileWriter;
 import java.io.IOException;
 import java.text.SimpleDateFormat;
+import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Date;
 
@@ -331,6 +143,8 @@ private void updateAndPost() {
 //    textView.setText(getPlayerStateString() + getPlayerWindowIndexString() + getVideoString() + getAudioString());
 //    textView.setText(getPlayerStateString() + "Buffer Percentage: " + player.getBufferedPercentage() + "%\n" +
 //                     "Buffer Position: " + player.getBufferedPosition() + "\n");
+        Log.i("PLAYBACKSTATE", player.getPlaybackState() + "");
+//        Toast.makeText(ctx, "" + player.getPlaybackState(), Toast.LENGTH_SHORT).show();
         if (!(player.getPlaybackState() == ExoPlayer.STATE_ENDED)) {
             textView.setText(getLogString());
             textView.removeCallbacks(this);
@@ -382,13 +196,21 @@ public void onClick(DialogInterface dialog, int which) {
     }
 
     private String buildCsvText() {
+        ArrayList<Integer> metrics = experiment.getObjectiveQoeMetrics();
         Format format = player.getVideoFormat();
         SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy-HH:mm:ss");
         String txt = sdf.format(new Date()) + ",";
-        txt += initialBR + "," + format.bitrate + "" + ",";
-        txt += initialRes + "," + format.width + "x" + format.height + ",";
-        txt += player.getStalls() + "," + player.getStallsDuration() + ",";
-        txt += playbackStartTime;
+        if (metrics.contains(6))
+            txt += player.getStalls() + ",";
+        if (metrics.contains(7))
+            txt += player.getStallsDuration() + ",";
+        if (metrics.contains(8))
+            txt += playbackStartTime + ",";
+        if (metrics.contains(9))
+            txt += initialRes + "," + format.width + "x" + format.height + ",";
+        if (metrics.contains(10))
+            txt += initialBR + "," + format.bitrate;
+        txt += "";
         return txt;
     }
 
@@ -429,7 +251,20 @@ private String getPlayerStateString() {
     }
 
     private String getHeader() {
-        return "Timestamp, Initial Bitrate, Final Bitrate, Initial Res, Final Res, Freezes, Freezes Duration, Playback Start Time";
+        ArrayList<Integer> metrics = experiment.getObjectiveQoeMetrics();
+        String txt = "Timestamp,";
+        if (metrics.contains(6))
+            txt += "Freezes,";
+        if (metrics.contains(7))
+            txt += "Freezes Duration,";
+        if (metrics.contains(8))
+            txt += "Playback Start Time,";
+        if (metrics.contains(9))
+            txt += "Initial Res, Final Res,";
+        if (metrics.contains(10))
+            txt += "Initial Bitrate, Final Bitrate,";
+        txt += "";
+        return txt;
     }
 
     public AlertDialog makeDialog(String title, String message, Context myContext, DialogInterface.OnClickListener listener) {
@@ -549,4 +384,4 @@ private String getDecoderCountersBufferCountString(String type, DecoderCounters
                 + " mcdb:" + counters.maxConsecutiveDroppedOutputBufferCount;
     }
 
-}
+}
\ No newline at end of file
diff --git a/demo/src/main/res/layout/binary_question_form.xml b/demo/src/main/res/layout/binary_question_form.xml
new file mode 100644
index 0000000000..ca3d07f3d0
--- /dev/null
+++ b/demo/src/main/res/layout/binary_question_form.xml
@@ -0,0 +1,55 @@
+<?xml version="1.0" encoding="UTF-8"?><!-- Copyright (C) 2016 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical">
+
+
+    <EditText
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id="@+id/et_binary_question"
+        android:gravity="center"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentRight="true"
+        android:layout_marginLeft="30dp"
+        android:layout_marginRight="30dp"
+        android:hint="Did you like this video?"
+        android:layout_alignParentTop="true"
+        android:layout_centerHorizontal="true" />
+
+    <EditText
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignLeft="@+id/et_binary_question"
+        android:layout_alignRight="@+id/et_binary_question"
+        android:id="@+id/et_binary_answer_1"
+        android:hint="Yes"
+        android:gravity="center"
+        android:layout_below="@+id/et_binary_question"
+        android:layout_centerHorizontal="true" />
+
+    <EditText
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignLeft="@+id/et_binary_question"
+        android:layout_alignRight="@+id/et_binary_question"
+        android:id="@+id/et_binary_answer_2"
+        android:hint="No"
+        android:gravity="center"
+        android:layout_below="@+id/et_binary_answer_1"
+        android:layout_centerHorizontal="true" />
+</RelativeLayout>
\ No newline at end of file
diff --git a/demo/src/main/res/layout/exp_item_with_checkbox.xml b/demo/src/main/res/layout/exp_item_with_checkbox.xml
new file mode 100644
index 0000000000..89604a4c5f
--- /dev/null
+++ b/demo/src/main/res/layout/exp_item_with_checkbox.xml
@@ -0,0 +1,62 @@
+<?xml version="1.0" encoding="UTF-8"?><!-- Copyright (C) 2016 The Android Open Source Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+          http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical">
+
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/name"
+        android:layout_toRightOf="@+id/cb_selected"
+        android:id="@+id/tv_exp_item_name_selected"
+        android:layout_marginStart="10dp"
+        android:layout_marginTop="7dp"
+        android:textSize="16sp"
+        android:layout_alignParentTop="true" />
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/filename"
+        android:id="@+id/tv_exp_item_filename_selected"
+        android:layout_below="@+id/tv_exp_item_name_selected"
+        android:layout_alignStart="@+id/tv_exp_item_name_selected" />
+
+    <CheckBox
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginTop="10dp"
+        android:layout_marginLeft="15dp"
+        android:clickable="false"
+        android:focusable="false"
+        android:layout_alignParentStart="true"
+        android:id="@+id/cb_selected"/>
+
+    <!--<CheckBox-->
+        <!--android:layout_width="wrap_content"-->
+        <!--android:layout_height="wrap_content"-->
+        <!--android:text="Used"-->
+        <!--android:clickable="false"-->
+        <!--android:focusable="false"-->
+        <!--android:id="@+id/cb_metric_item_used"-->
+        <!--android:layout_alignBottom="@+id/tv_metric_item_name"-->
+        <!--android:layout_alignParentRight="true"-->
+        <!--android:layout_alignParentEnd="true"-->
+        <!--android:layout_marginRight="40dp"-->
+        <!--android:layout_marginEnd="40dp" />-->
+</RelativeLayout>
\ No newline at end of file
diff --git a/demo/src/main/res/menu/nav_drawer_menu.xml b/demo/src/main/res/menu/nav_drawer_menu.xml
index 0850f6d45c..93e03a79a4 100644
--- a/demo/src/main/res/menu/nav_drawer_menu.xml
+++ b/demo/src/main/res/menu/nav_drawer_menu.xml
@@ -6,6 +6,14 @@
             android:id="@+id/navigation_item_experiment"
             android:icon="@drawable/ic_experiment_icon"
             android:title="New Experiment" />
+        <item
+            android:id="@+id/navigation_item_import"
+            android:icon="@android:drawable/ic_menu_revert"
+            android:title="Import Experiment" />
+        <item
+            android:id="@+id/navigation_item_export"
+            android:icon="@android:drawable/ic_menu_directions"
+            android:title="Export Experiment" />
         <item
             android:id="@+id/navigation_item_video"
             android:icon="@drawable/ic_temp_icon_white"
