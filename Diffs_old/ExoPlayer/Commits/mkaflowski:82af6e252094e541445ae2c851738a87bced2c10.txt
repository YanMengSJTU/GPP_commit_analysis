diff --git a/extensions/cast/src/main/java/com/google/android/exoplayer2/ext/cast/CastPlayer.java b/extensions/cast/src/main/java/com/google/android/exoplayer2/ext/cast/CastPlayer.java
index 50c883c3f6..bb24ca4f2a 100644
--- a/extensions/cast/src/main/java/com/google/android/exoplayer2/ext/cast/CastPlayer.java
+++ b/extensions/cast/src/main/java/com/google/android/exoplayer2/ext/cast/CastPlayer.java
@@ -87,7 +87,7 @@
   private static final int RENDERER_INDEX_TEXT = 2;
   private static final long PROGRESS_REPORT_PERIOD_MS = 1000;
   private static final TrackSelectionArray EMPTY_TRACK_SELECTION_ARRAY =
-      new TrackSelectionArray(null, null, null);
+          new TrackSelectionArray(null, null, null);
   private static final long[] EMPTY_TRACK_ID_ARRAY = new long[0];
 
   private final CastContext castContext;
@@ -145,6 +145,15 @@ public CastPlayer(CastContext castContext) {
     pendingSeekWindowIndex = C.INDEX_UNSET;
     pendingSeekPositionMs = C.TIME_UNSET;
     updateInternalState();
+
+    if (remoteMediaClient != null) {
+      try {
+        remoteMediaClient.addListener(statusListener);
+        remoteMediaClient.addProgressListener(statusListener, PROGRESS_REPORT_PERIOD_MS);
+        updateInternalState();
+      } catch (NullPointerException ignored) {
+      }
+    }
   }
 
   // Media Queue manipulation methods.
@@ -152,35 +161,41 @@ public CastPlayer(CastContext castContext) {
   /**
    * Loads a single item media queue. If no session is available, does nothing.
    *
-   * @param item The item to load.
+   * @param item       The item to load.
    * @param positionMs The position at which the playback should start in milliseconds relative to
-   *     the start of the item at {@code startIndex}. If {@link C#TIME_UNSET} is passed, playback
-   *     starts at position 0.
+   *                   the start of the item at {@code startIndex}. If {@link C#TIME_UNSET} is passed, playback
+   *                   starts at position 0.
    * @return The Cast {@code PendingResult}, or null if no session is available.
    */
   public PendingResult<MediaChannelResult> loadItem(MediaQueueItem item, long positionMs) {
-    return loadItems(new MediaQueueItem[] {item}, 0, positionMs, REPEAT_MODE_OFF);
+    pendingSeekWindowIndex = 0;
+    currentWindowIndex = 0;
+    return loadItems(new MediaQueueItem[]{item}, 0, positionMs, REPEAT_MODE_OFF);
   }
 
   /**
    * Loads a media queue. If no session is available, does nothing.
    *
-   * @param items The items to load.
+   * @param items      The items to load.
    * @param startIndex The index of the item at which playback should start.
    * @param positionMs The position at which the playback should start in milliseconds relative to
-   *     the start of the item at {@code startIndex}. If {@link C#TIME_UNSET} is passed, playback
-   *     starts at position 0.
+   *                   the start of the item at {@code startIndex}. If {@link C#TIME_UNSET} is passed, playback
+   *                   starts at position 0.
    * @param repeatMode The repeat mode for the created media queue.
    * @return The Cast {@code PendingResult}, or null if no session is available.
    */
   public PendingResult<MediaChannelResult> loadItems(MediaQueueItem[] items, int startIndex,
-      long positionMs, @RepeatMode int repeatMode) {
+                                                     long positionMs, @RepeatMode int repeatMode) {
     if (remoteMediaClient != null) {
       positionMs = positionMs != C.TIME_UNSET ? positionMs : 0;
       waitingForInitialTimeline = true;
+      pendingSeekWindowIndex = startIndex;
+      currentWindowIndex = startIndex;
       return remoteMediaClient.queueLoad(items, startIndex, getCastRepeatMode(repeatMode),
-          positionMs, null);
+              positionMs, null);
     }
+
+
     return null;
   }
 
@@ -199,14 +214,14 @@ public CastPlayer(CastContext castContext) {
    * periodId} exist, does nothing.
    *
    * @param periodId The id of the period ({@link #getCurrentTimeline}) that corresponds to the item
-   *     that will follow immediately after the inserted items.
-   * @param items The items to insert.
+   *                 that will follow immediately after the inserted items.
+   * @param items    The items to insert.
    * @return The Cast {@code PendingResult}, or null if no media queue or no period with id {@code
-   *     periodId} exist.
+   * periodId} exist.
    */
   public PendingResult<MediaChannelResult> addItems(int periodId, MediaQueueItem... items) {
     if (getMediaStatus() != null && (periodId == MediaQueueItem.INVALID_ITEM_ID
-        || currentTimeline.getIndexOfPeriod(periodId) != C.INDEX_UNSET)) {
+            || currentTimeline.getIndexOfPeriod(periodId) != C.INDEX_UNSET)) {
       return remoteMediaClient.queueInsertItems(items, periodId, null);
     }
     return null;
@@ -217,9 +232,9 @@ public CastPlayer(CastContext castContext) {
    * exist, does nothing.
    *
    * @param periodId The id of the period ({@link #getCurrentTimeline}) that corresponds to the item
-   *     to remove.
+   *                 to remove.
    * @return The Cast {@code PendingResult}, or null if no media queue or no period with id {@code
-   *     periodId} exist.
+   * periodId} exist.
    */
   public PendingResult<MediaChannelResult> removeItem(int periodId) {
     if (getMediaStatus() != null && currentTimeline.getIndexOfPeriod(periodId) != C.INDEX_UNSET) {
@@ -233,11 +248,11 @@ public CastPlayer(CastContext castContext) {
    * periodId} exist, does nothing.
    *
    * @param periodId The id of the period ({@link #getCurrentTimeline}) that corresponds to the item
-   *     to move.
+   *                 to move.
    * @param newIndex The target index of the item in the media queue. Must be in the range 0 &lt;=
-   *     index &lt; {@link Timeline#getPeriodCount()}, as provided by {@link #getCurrentTimeline()}.
+   *                 index &lt; {@link Timeline#getPeriodCount()}, as provided by {@link #getCurrentTimeline()}.
    * @return The Cast {@code PendingResult}, or null if no media queue or no period with id {@code
-   *     periodId} exist.
+   * periodId} exist.
    */
   public PendingResult<MediaChannelResult> moveItem(int periodId, int newIndex) {
     Assertions.checkArgument(newIndex >= 0 && newIndex < currentTimeline.getPeriodCount());
@@ -252,14 +267,14 @@ public CastPlayer(CastContext castContext) {
    * period with id {@code periodId} exist.
    *
    * @param periodId The id of the period ({@link #getCurrentTimeline}) that corresponds to the item
-   *     to get.
+   *                 to get.
    * @return The item that corresponds to the period with the given id, or null if no media queue or
-   *     period with id {@code periodId} exist.
+   * period with id {@code periodId} exist.
    */
   public MediaQueueItem getItem(int periodId) {
     MediaStatus mediaStatus = getMediaStatus();
     return mediaStatus != null && currentTimeline.getIndexOfPeriod(periodId) != C.INDEX_UNSET
-        ? mediaStatus.getItemById(periodId) : null;
+            ? mediaStatus.getItemById(periodId) : null;
   }
 
   // CastSession methods.
@@ -348,7 +363,7 @@ public void seekTo(int windowIndex, long positionMs) {
     if (mediaStatus != null) {
       if (getCurrentWindowIndex() != windowIndex) {
         remoteMediaClient.queueJumpToItem((int) currentTimeline.getPeriod(windowIndex, period).uid,
-            positionMs, null).setResultCallback(seekResultCallback);
+                positionMs, null).setResultCallback(seekResultCallback);
       } else {
         remoteMediaClient.seek(positionMs).setResultCallback(seekResultCallback);
       }
@@ -424,7 +439,8 @@ public void setRepeatMode(@RepeatMode int repeatMode) {
   }
 
   @Override
-  @RepeatMode public int getRepeatMode() {
+  @RepeatMode
+  public int getRepeatMode() {
     return repeatMode;
   }
 
@@ -455,7 +471,8 @@ public Timeline getCurrentTimeline() {
   }
 
   @Override
-  @Nullable public Object getCurrentManifest() {
+  @Nullable
+  public Object getCurrentManifest() {
     return null;
   }
 
@@ -472,13 +489,13 @@ public int getCurrentWindowIndex() {
   @Override
   public int getNextWindowIndex() {
     return currentTimeline.isEmpty() ? C.INDEX_UNSET
-        : currentTimeline.getNextWindowIndex(getCurrentWindowIndex(), repeatMode, false);
+            : currentTimeline.getNextWindowIndex(getCurrentWindowIndex(), repeatMode, false);
   }
 
   @Override
   public int getPreviousWindowIndex() {
     return currentTimeline.isEmpty() ? C.INDEX_UNSET
-        : currentTimeline.getPreviousWindowIndex(getCurrentWindowIndex(), repeatMode, false);
+            : currentTimeline.getPreviousWindowIndex(getCurrentWindowIndex(), repeatMode, false);
   }
 
   // TODO: Fill the cast timeline information with ProgressListener's duration updates.
@@ -486,14 +503,15 @@ public int getPreviousWindowIndex() {
   @Override
   public long getDuration() {
     return currentTimeline.isEmpty() ? C.TIME_UNSET
-        : currentTimeline.getWindow(getCurrentWindowIndex(), window).getDurationMs();
+            : currentTimeline.getWindow(getCurrentWindowIndex() < 0 ? 0 : getCurrentWindowIndex(),
+            window).getDurationMs();
   }
 
   @Override
   public long getCurrentPosition() {
     return pendingSeekPositionMs != C.TIME_UNSET
-        ? pendingSeekPositionMs
-        : remoteMediaClient != null
+            ? pendingSeekPositionMs
+            : remoteMediaClient != null
             ? remoteMediaClient.getApproximateStreamPosition()
             : lastReportedPositionMs;
   }
@@ -508,20 +526,20 @@ public int getBufferedPercentage() {
     long position = getBufferedPosition();
     long duration = getDuration();
     return position == C.TIME_UNSET || duration == C.TIME_UNSET
-        ? 0
-        : duration == 0 ? 100 : Util.constrainValue((int) ((position * 100) / duration), 0, 100);
+            ? 0
+            : duration == 0 ? 100 : Util.constrainValue((int) ((position * 100) / duration), 0, 100);
   }
 
   @Override
   public boolean isCurrentWindowDynamic() {
     return !currentTimeline.isEmpty()
-        && currentTimeline.getWindow(getCurrentWindowIndex(), window).isDynamic;
+            && currentTimeline.getWindow(getCurrentWindowIndex() < 0 ? 0 : getCurrentWindowIndex(), window).isDynamic;
   }
 
   @Override
   public boolean isCurrentWindowSeekable() {
     return !currentTimeline.isEmpty()
-        && currentTimeline.getWindow(getCurrentWindowIndex(), window).isSeekable;
+            && currentTimeline.getWindow(getCurrentWindowIndex() < 0 ? 0 : getCurrentWindowIndex(), window).isSeekable;
   }
 
   @Override
@@ -560,7 +578,7 @@ public void updateInternalState() {
     int playbackState = fetchPlaybackState(remoteMediaClient);
     boolean playWhenReady = !remoteMediaClient.isPaused();
     if (this.playbackState != playbackState
-        || this.playWhenReady != playWhenReady) {
+            || this.playWhenReady != playWhenReady) {
       this.playbackState = playbackState;
       this.playWhenReady = playWhenReady;
       for (EventListener listener : listeners) {
@@ -592,7 +610,7 @@ public void updateInternalState() {
   private void maybeUpdateTimelineAndNotify() {
     if (updateTimeline()) {
       @Player.TimelineChangeReason int reason = waitingForInitialTimeline
-          ? Player.TIMELINE_CHANGE_REASON_PREPARED : Player.TIMELINE_CHANGE_REASON_DYNAMIC;
+              ? Player.TIMELINE_CHANGE_REASON_PREPARED : Player.TIMELINE_CHANGE_REASON_DYNAMIC;
       waitingForInitialTimeline = false;
       for (EventListener listener : listeners) {
         listener.onTimelineChanged(currentTimeline, null, reason);
@@ -607,7 +625,7 @@ private boolean updateTimeline() {
     CastTimeline oldTimeline = currentTimeline;
     MediaStatus status = getMediaStatus();
     currentTimeline =
-        status != null ? timelineTracker.getCastTimeline(status) : CastTimeline.EMPTY_CAST_TIMELINE;
+            status != null ? timelineTracker.getCastTimeline(status) : CastTimeline.EMPTY_CAST_TIMELINE;
     return !oldTimeline.equals(currentTimeline);
   }
 
@@ -644,7 +662,7 @@ private boolean updateTracksAndSelections() {
       int trackType = MimeTypes.getTrackType(mediaTrack.getContentType());
       int rendererIndex = getRendererIndexForTrackType(trackType);
       if (isTrackActive(id, activeTrackIds) && rendererIndex != C.INDEX_UNSET
-          && trackSelections[rendererIndex] == null) {
+              && trackSelections[rendererIndex] == null) {
         trackSelections[rendererIndex] = new FixedTrackSelection(trackGroups[i], 0);
       }
     }
@@ -652,7 +670,7 @@ private boolean updateTracksAndSelections() {
     TrackSelectionArray newTrackSelections = new TrackSelectionArray(trackSelections);
 
     if (!newTrackGroups.equals(currentTrackGroups)
-        || !newTrackSelections.equals(currentTrackSelection)) {
+            || !newTrackSelections.equals(currentTrackSelection)) {
       currentTrackSelection = new TrackSelectionArray(trackSelections);
       currentTrackGroups = new TrackGroupArray(trackGroups);
       return true;
@@ -684,7 +702,8 @@ private void setRemoteMediaClient(@Nullable RemoteMediaClient remoteMediaClient)
     }
   }
 
-  private @Nullable MediaStatus getMediaStatus() {
+  private @Nullable
+  MediaStatus getMediaStatus() {
     return remoteMediaClient != null ? remoteMediaClient.getMediaStatus() : null;
   }
 
@@ -734,12 +753,12 @@ private static int fetchRepeatMode(RemoteMediaClient remoteMediaClient) {
 
   /**
    * Retrieves the current item index from {@code mediaStatus} and maps it into a window index. If
-   * there is no media session, returns 0.
+   * there is no media session, returns -1.
    */
   private static int fetchCurrentWindowIndex(@Nullable MediaStatus mediaStatus) {
     Integer currentItemId = mediaStatus != null
-        ? mediaStatus.getIndexById(mediaStatus.getCurrentItemId()) : null;
-    return currentItemId != null ? currentItemId : 0;
+            ? mediaStatus.getIndexById(mediaStatus.getCurrentItemId()) : null;
+    return currentItemId != null ? currentItemId : -1;
   }
 
   private static boolean isTrackActive(long id, long[] activeTrackIds) {
@@ -753,8 +772,8 @@ private static boolean isTrackActive(long id, long[] activeTrackIds) {
 
   private static int getRendererIndexForTrackType(int trackType) {
     return trackType == C.TRACK_TYPE_VIDEO
-        ? RENDERER_INDEX_VIDEO
-        : trackType == C.TRACK_TYPE_AUDIO
+            ? RENDERER_INDEX_VIDEO
+            : trackType == C.TRACK_TYPE_AUDIO
             ? RENDERER_INDEX_AUDIO
             : trackType == C.TRACK_TYPE_TEXT ? RENDERER_INDEX_TEXT : C.INDEX_UNSET;
   }
@@ -773,7 +792,7 @@ private static int getCastRepeatMode(@RepeatMode int repeatMode) {
   }
 
   private final class StatusListener implements RemoteMediaClient.Listener,
-      SessionManagerListener<CastSession>, RemoteMediaClient.ProgressListener {
+          SessionManagerListener<CastSession>, RemoteMediaClient.ProgressListener {
 
     // RemoteMediaClient.ProgressListener implementation.
 
@@ -790,7 +809,8 @@ public void onStatusUpdated() {
     }
 
     @Override
-    public void onMetadataUpdated() {}
+    public void onMetadataUpdated() {
+    }
 
     @Override
     public void onQueueStatusUpdated() {
@@ -798,13 +818,16 @@ public void onQueueStatusUpdated() {
     }
 
     @Override
-    public void onPreloadStatusUpdated() {}
+    public void onPreloadStatusUpdated() {
+    }
 
     @Override
-    public void onSendingRemoteMediaRequest() {}
+    public void onSendingRemoteMediaRequest() {
+    }
 
     @Override
-    public void onAdBreakStatusUpdated() {}
+    public void onAdBreakStatusUpdated() {
+    }
 
 
     // SessionManagerListener implementation.
@@ -832,7 +855,7 @@ public void onSessionSuspended(CastSession castSession, int i) {
     @Override
     public void onSessionResumeFailed(CastSession castSession, int statusCode) {
       Log.e(TAG, "Session resume failed. Error code " + statusCode + ": "
-          + CastUtils.getLogString(statusCode));
+              + CastUtils.getLogString(statusCode));
     }
 
     @Override
@@ -843,7 +866,7 @@ public void onSessionStarting(CastSession castSession) {
     @Override
     public void onSessionStartFailed(CastSession castSession, int statusCode) {
       Log.e(TAG, "Session start failed. Error code " + statusCode + ": "
-          + CastUtils.getLogString(statusCode));
+              + CastUtils.getLogString(statusCode));
     }
 
     @Override
@@ -867,7 +890,7 @@ public void onResult(@NonNull MediaChannelResult result) {
       int statusCode = result.getStatus().getStatusCode();
       if (statusCode != CastStatusCodes.SUCCESS && statusCode != CastStatusCodes.REPLACED) {
         Log.e(TAG, "Seek failed. Error code " + statusCode + ": "
-            + CastUtils.getLogString(statusCode));
+                + CastUtils.getLogString(statusCode));
       }
       if (--pendingSeekCount == 0) {
         pendingSeekWindowIndex = C.INDEX_UNSET;
@@ -879,4 +902,4 @@ public void onResult(@NonNull MediaChannelResult result) {
     }
   }
 
-}
+}
\ No newline at end of file
