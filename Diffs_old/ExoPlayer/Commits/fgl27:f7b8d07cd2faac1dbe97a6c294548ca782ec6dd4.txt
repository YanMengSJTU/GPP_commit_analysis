diff --git a/RELEASENOTES.md b/RELEASENOTES.md
index 50418ded28..83997fe3c7 100644
--- a/RELEASENOTES.md
+++ b/RELEASENOTES.md
@@ -89,6 +89,8 @@
   [#5973](https://github.com/google/ExoPlayer/issues/5973)).
 * Expose the raw ICY metadata through `IcyInfo`
   ([#6476](https://github.com/google/ExoPlayer/issues/6476)).
+* Fail more explicitly when local-file Uris contain invalid parts (e.g.
+  fragment) ([#6470](https://github.com/google/ExoPlayer/issues/6470)).
 
 ### 2.10.5 (2019-09-20) ###
 
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/FileDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/FileDataSource.java
index e329dc722e..38b4a1da03 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/FileDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/FileDataSource.java
@@ -18,10 +18,12 @@
 import static com.google.android.exoplayer2.util.Util.castNonNull;
 
 import android.net.Uri;
+import android.text.TextUtils;
 import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.util.Assertions;
 import java.io.EOFException;
+import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.RandomAccessFile;
 
@@ -37,6 +39,9 @@ public FileDataSourceException(IOException cause) {
       super(cause);
     }
 
+    public FileDataSourceException(String message, IOException cause) {
+      super(message, cause);
+    }
   }
 
   @Nullable private RandomAccessFile file;
@@ -55,8 +60,8 @@ public long open(DataSpec dataSpec) throws FileDataSourceException {
       this.uri = uri;
 
       transferInitializing(dataSpec);
-      RandomAccessFile file = new RandomAccessFile(Assertions.checkNotNull(uri.getPath()), "r");
-      this.file = file;
+
+      this.file = openLocalFile(uri);
 
       file.seek(dataSpec.position);
       bytesRemaining = dataSpec.length == C.LENGTH_UNSET ? file.length() - dataSpec.position
@@ -74,6 +79,23 @@ public long open(DataSpec dataSpec) throws FileDataSourceException {
     return bytesRemaining;
   }
 
+  private static RandomAccessFile openLocalFile(Uri uri) throws FileDataSourceException {
+    try {
+      return new RandomAccessFile(Assertions.checkNotNull(uri.getPath()), "r");
+    } catch (FileNotFoundException e) {
+      if (!TextUtils.isEmpty(uri.getQuery()) || !TextUtils.isEmpty(uri.getFragment())) {
+        throw new FileDataSourceException(
+            String.format(
+                "uri has query and/or fragment, which are not supported. Did you call Uri.parse()"
+                    + " on a string containing '?' or '#'? Use Uri.fromFile(new File(path)) to"
+                    + " avoid this. path=%s,query=%s,fragment=%s",
+                uri.getPath(), uri.getQuery(), uri.getFragment()),
+            e);
+      }
+      throw new FileDataSourceException(e);
+    }
+  }
+
   @Override
   public int read(byte[] buffer, int offset, int readLength) throws FileDataSourceException {
     if (readLength == 0) {
