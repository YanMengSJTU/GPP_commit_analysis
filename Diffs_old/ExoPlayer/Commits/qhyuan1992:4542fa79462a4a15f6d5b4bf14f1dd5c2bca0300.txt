diff --git a/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/LibvpxVideoTrackRenderer.java b/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/LibvpxVideoTrackRenderer.java
index be4359c3fe..fe3a32dd3f 100644
--- a/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/LibvpxVideoTrackRenderer.java
+++ b/extensions/vp9/src/main/java/com/google/android/exoplayer/ext/vp9/LibvpxVideoTrackRenderer.java
@@ -34,7 +34,7 @@
 /**
  * Decodes and renders video using the native VP9 decoder.
  */
-public final class LibvpxVideoTrackRenderer extends SampleSourceTrackRenderer {
+public class LibvpxVideoTrackRenderer extends SampleSourceTrackRenderer {
 
   /**
    * Interface definition for a callback to be notified of {@link LibvpxVideoTrackRenderer} events.
@@ -273,9 +273,9 @@ private boolean processOutputBuffer(long positionUs)
       return false;
     }
 
-    // Drop frame only if we have the next frame and that's also late, otherwise render whatever we
-    // have.
-    if (nextOutputBuffer != null && nextOutputBuffer.timestampUs < positionUs) {
+    final long nextOutputBufferTimestampUs = nextOutputBuffer != null
+        ? nextOutputBuffer.timestampUs : UNKNOWN_TIME_US;
+    if (shouldDropOutputBuffer(outputBuffer.timestampUs, nextOutputBufferTimestampUs, positionUs)) {
       // Drop frame if we are too late.
       codecCounters.droppedOutputBufferCount++;
       droppedFrameCount++;
@@ -302,6 +302,22 @@ private boolean processOutputBuffer(long positionUs)
     return false;
   }
 
+  /**
+   * Returns whether the current frame should be dropped.
+   *
+   * @param outputBufferTimestampUs The timestamp of the current output buffer.
+   * @param nextOutputBufferTimestampUs The timestamp of the next output buffer or
+   *     {@link UNKNOWN_TIME_US} if the next output buffer is unavailable.
+   * @param positionUs The current playback position.
+   * @return Whether to drop the current output buffer.
+   */
+  protected boolean shouldDropOutputBuffer(
+      long outputBufferTimestampUs, long nextOutputBufferTimestampUs, long positionUs) {
+    // Drop frame only if we have the next frame and that's also late.
+    return nextOutputBufferTimestampUs != UNKNOWN_TIME_US
+        && nextOutputBufferTimestampUs < positionUs;
+  }
+
   private void renderBuffer() {
     codecCounters.renderedOutputBufferCount++;
     notifyIfVideoSizeChanged(outputBuffer.width, outputBuffer.height);
