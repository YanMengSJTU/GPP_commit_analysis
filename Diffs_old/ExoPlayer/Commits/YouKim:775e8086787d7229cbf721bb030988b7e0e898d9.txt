diff --git a/gradle.properties b/gradle.properties
old mode 100644
new mode 100755
index b55575bc3b..cb4bd66b89
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,3 +1,4 @@
 ## Project-wide Gradle settings.
 android.useDeprecatedNdk=true
 buildDir=buildout
+org.gradle.jvmargs=-Xmx1536M
\ No newline at end of file
diff --git a/twelve/build.gradle b/twelve/build.gradle
index 76c49ec254..7fffdfbecb 100755
--- a/twelve/build.gradle
+++ b/twelve/build.gradle
@@ -24,6 +24,7 @@ android {
         debug {
             shrinkResources false
             minifyEnabled false
+            debuggable true
             jniDebuggable = true
         }
     }
diff --git a/twelve/src/main/AndroidManifest.xml b/twelve/src/main/AndroidManifest.xml
index 6d09c87aa5..65ac2390f1 100755
--- a/twelve/src/main/AndroidManifest.xml
+++ b/twelve/src/main/AndroidManifest.xml
@@ -34,7 +34,7 @@
     <uses-permission android:name="com.android.launcher.permission.INSTALL_SHORTCUT" />
     <!-- Used to check if the app is in the background -->
     <uses-permission android:name="android.permission.REAL_GET_TASKS" />
-    <!-- Allows Eleven to read from External Storage -->
+    <!-- Allows Twelve to read from External Storage -->
     <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
 
     <!-- Audio Visualizer Permissions -->
@@ -45,15 +45,16 @@
     <uses-feature android:name="android.hardware.sensor.accelerometer" />
 
     <application
-        android:name=".ElevenApplication"
+        android:name=".TwelveApplication"
         android:allowBackup="true"
         android:allowTaskReparenting="true"
         android:hardwareAccelerated="@bool/config_hardwareAccelerated"
-        android:icon="@mipmap/ic_launcher_eleven"
+        android:icon="@mipmap/ic_launcher_twelve"
         android:label="@string/app_name"
         android:largeHeap="@bool/config_largeHeap"
         android:taskAffinity="com.dolzzo.twelve.task"
-        android:theme="@style/AppTheme.NoActionBar">
+        android:theme="@style/AppTheme.NoActionBar"
+        android:extractNativeLibs="false">
 
         <!-- Searchable -->
         <meta-data
diff --git a/twelve/src/main/aidl/com/dolzzo/twelve/IElevenService.aidl b/twelve/src/main/aidl/com/dolzzo/twelve/ITwelveService.aidl
similarity index 98%
rename from twelve/src/main/aidl/com/dolzzo/twelve/IElevenService.aidl
rename to twelve/src/main/aidl/com/dolzzo/twelve/ITwelveService.aidl
index 7ad2fcb9a9..9663e53e9e 100755
--- a/twelve/src/main/aidl/com/dolzzo/twelve/IElevenService.aidl
+++ b/twelve/src/main/aidl/com/dolzzo/twelve/ITwelveService.aidl
@@ -2,7 +2,7 @@ package com.dolzzo.twelve;
 
 import com.dolzzo.twelve.service.MusicPlaybackTrack;
 
-interface IElevenService
+interface ITwelveService
 {
     void openFile(String path);
     void open(in long [] list, int position, long sourceId, int sourceType);
diff --git a/twelve/src/main/java/com/dolzzo/twelve/Config.java b/twelve/src/main/java/com/dolzzo/twelve/Config.java
index 13469026b6..bfab47d9f1 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/Config.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/Config.java
@@ -67,7 +67,7 @@
     public Config() {
     }
 
-    public static enum SmartPlaylistType {
+    public enum SmartPlaylistType {
         LastAdded(-1, R.string.playlist_last_added),
         RecentlyPlayed(-2, R.string.playlist_recently_played),
         TopTracks(-3, R.string.playlist_top_tracks);
@@ -95,7 +95,7 @@ public static SmartPlaylistType getTypeById(long id) {
      * This helps identify where an id has come from.  Mainly used to determine when a user
      * clicks a song where that song came from (artist/album/playlist)
      */
-    public static enum IdType {
+    public enum IdType {
         NA(0),
         Artist(1),
         Album(2),
diff --git a/twelve/src/main/java/com/dolzzo/twelve/MediaButtonIntentReceiver.java b/twelve/src/main/java/com/dolzzo/twelve/MediaButtonIntentReceiver.java
index ad221f3a0c..ea52c3ce7e 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/MediaButtonIntentReceiver.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/MediaButtonIntentReceiver.java
@@ -33,7 +33,7 @@
  */
 public class MediaButtonIntentReceiver extends WakefulBroadcastReceiver {
     private static final boolean DEBUG = false;
-    private static final String TAG = "MediaButtonIntentReceiver";
+    private static final String TAG = "MBIR";
 
     private static final int MSG_LONGPRESS_TIMEOUT = 1;
     private static final int MSG_HEADSET_DOUBLE_CLICK_TIMEOUT = 2;
@@ -109,7 +109,7 @@ private static void acquireWakeLockAndSendMessage(Context context, Message msg,
         if (mWakeLock == null) {
             Context appContext = context.getApplicationContext();
             PowerManager pm = (PowerManager) appContext.getSystemService(Context.POWER_SERVICE);
-            mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "Eleven headset button");
+            mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "Twelve headset button");
             mWakeLock.setReferenceCounted(false);
         }
         if (DEBUG) Log.v(TAG, "Acquiring wake lock and sending " + msg.what);
diff --git a/twelve/src/main/java/com/dolzzo/twelve/MusicPlaybackService.java b/twelve/src/main/java/com/dolzzo/twelve/MusicPlaybackService.java
index c9c84ebea8..a9f01627bd 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/MusicPlaybackService.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/MusicPlaybackService.java
@@ -94,7 +94,6 @@
 import com.google.android.exoplayer2.util.Util;
 
 import java.io.File;
-import java.io.IOException;
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 import java.util.LinkedList;
@@ -246,7 +245,7 @@
      */
     public static final int MAX_HISTORY_SIZE = 1000;
     private static final String TAG = "MusicPlaybackService";
-    private static final boolean D = false;
+    private static final boolean D = BuildConfig.DEBUG;
     /**
      * Used by the alarm intent to shutdown the service after being idle
      */
@@ -280,6 +279,11 @@
      * Notifies that there is a new timed text string
      */
     private static final int LYRICS = 7;
+
+    /**
+     * Notifies that next command.
+     */
+    private static final int CMD_NEXT = 1001;
     /**
      * Idle time before stopping the foreground notfication (5 minutes)
      */
@@ -651,7 +655,7 @@ public void onCreate() {
     }
 
     private void setUpMediaSession() {
-        mSession = new MediaSessionCompat(this, "Eleven");
+        mSession = new MediaSessionCompat(this, "Twelve");
         mSession.setCallback(new MediaSessionCompat.Callback() {
             @Override
             public void onPause() {
@@ -1564,7 +1568,7 @@ private Notification buildNotification() {
         return builder.build();
     }
 
-    private final PendingIntent retrievePlaybackAction(final String action) {
+    private PendingIntent retrievePlaybackAction(final String action) {
         final ComponentName serviceName = new ComponentName(this, MusicPlaybackService.class);
         Intent intent = new Intent(action);
         intent.setComponent(serviceName);
@@ -3246,7 +3250,7 @@ public void onPlaybackParametersChanged(PlaybackParameters playbackParameters) {
 
     }
 
-    private static final class ServiceStub extends IElevenService.Stub {
+    private static final class ServiceStub extends ITwelveService.Stub {
 
         private final WeakReference<MusicPlaybackService> mService;
 
diff --git a/twelve/src/main/java/com/dolzzo/twelve/ElevenApplication.java b/twelve/src/main/java/com/dolzzo/twelve/TwelveApplication.java
similarity index 96%
rename from twelve/src/main/java/com/dolzzo/twelve/ElevenApplication.java
rename to twelve/src/main/java/com/dolzzo/twelve/TwelveApplication.java
index b4572c7b66..9cf625f501 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/ElevenApplication.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/TwelveApplication.java
@@ -28,7 +28,7 @@
  *
  * @author Andrew Neal (andrewdneal@gmail.com)
  */
-public class ElevenApplication extends Application {
+public class TwelveApplication extends Application {
     private static final boolean DEBUG = false;
 
     /**
@@ -36,6 +36,7 @@
      */
     @Override
     public void onCreate() {
+        super.onCreate();
         // Enable strict mode logging
         enableStrictMode();
         // Turn off logging for jaudiotagger.
diff --git a/twelve/src/main/java/com/dolzzo/twelve/adapters/AlbumAdapter.java b/twelve/src/main/java/com/dolzzo/twelve/adapters/AlbumAdapter.java
index b2c26382f2..99fb49d59b 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/adapters/AlbumAdapter.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/adapters/AlbumAdapter.java
@@ -34,7 +34,7 @@
 
 /**
  * This {@link ArrayAdapter} is used to display all of the albums on a user's
- * device for {@link RecentsFragment} and {@link AlbumsFragment}.
+ * device for {@link RecentsFragment} and {@link AlbumFragment}.
  *
  * @author Andrew Neal (andrewdneal@gmail.com)
  */
@@ -74,8 +74,6 @@
      *
      * @param context  The {@link Context} to use.
      * @param layoutId The resource Id of the view to inflate.
-     * @param style    Determines which layout to use and therefore which items to
-     *                 load.
      */
     public AlbumAdapter(final Activity context, final int layoutId) {
         mContext = context;
@@ -170,7 +168,7 @@ public long getItemId(int pos) {
      * is to cache everything before {@code #getView(int, View, ViewGroup)} is
      * called.
      */
-    public void buildCache() {
+    private void buildCache() {
         mData = new DataHolder[mAlbums.size()];
         int i = 0;
         for (Album album : mAlbums) {
diff --git a/twelve/src/main/java/com/dolzzo/twelve/adapters/AlbumArtPagerAdapter.java b/twelve/src/main/java/com/dolzzo/twelve/adapters/AlbumArtPagerAdapter.java
index 52ec8cc266..28c54f4cd7 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/adapters/AlbumArtPagerAdapter.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/adapters/AlbumArtPagerAdapter.java
@@ -177,7 +177,7 @@ public void onCreate(final Bundle savedInstanceState) {
 
         @Override
         public View onCreateView(final LayoutInflater inflater, final ViewGroup container, final Bundle savedInstanceState) {
-            mRootView = inflater.inflate(R.layout.album_art_fragment, null);
+            mRootView = View.inflate(getContext(), R.layout.album_art_fragment, null);
             return mRootView;
         }
 
diff --git a/twelve/src/main/java/com/dolzzo/twelve/adapters/ArtistAdapter.java b/twelve/src/main/java/com/dolzzo/twelve/adapters/ArtistAdapter.java
index 5434bfadc9..9ea82effe3 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/adapters/ArtistAdapter.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/adapters/ArtistAdapter.java
@@ -15,6 +15,7 @@
 
 import android.app.Activity;
 import android.content.Context;
+import android.support.v4.content.ContextCompat;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -36,10 +37,6 @@
  *
  * @author Andrew Neal (andrewdneal@gmail.com)
  */
-
-/**
- * @author Andrew Neal (andrewdneal@gmail.com)
- */
 public class ArtistAdapter extends ArrayAdapter<Artist> implements BasicAdapter, IPopupMenuCallback {
 
     /**
@@ -85,7 +82,7 @@ public ArtistAdapter(final Activity context, final int layoutId) {
         // Initialize the cache & image fetcher
         mImageFetcher = ApolloUtils.getImageFetcher(context);
         // Cache the transparent overlay
-        mOverlay = context.getResources().getColor(R.color.list_item_background);
+        mOverlay = ContextCompat.getColor(context, R.color.list_item_background);
     }
 
     /**
diff --git a/twelve/src/main/java/com/dolzzo/twelve/adapters/PagerAdapter.java b/twelve/src/main/java/com/dolzzo/twelve/adapters/PagerAdapter.java
index fd8e84bbef..cbe0999d61 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/adapters/PagerAdapter.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/adapters/PagerAdapter.java
@@ -109,9 +109,8 @@ public Object instantiateItem(final ViewGroup container, final int position) {
     @Override
     public Fragment getItem(final int position) {
         final Holder mCurrentHolder = mHolderList.get(position);
-        final Fragment mFragment = Fragment.instantiate(mContext,
+        return  Fragment.instantiate(mContext,
                 mCurrentHolder.mClassName, mCurrentHolder.mParams);
-        return mFragment;
     }
 
     /**
@@ -189,14 +188,14 @@ protected void setCurrentPage(final int currentPage) {
          *
          * @param fragmentClass The fragment class
          */
-        private MusicFragments(final Class<? extends Fragment> fragmentClass) {
+        MusicFragments(final Class<? extends Fragment> fragmentClass) {
             mFragmentClass = fragmentClass;
         }
 
         /**
          * Method that returns the fragment class.
          *
-         * @return Class<? extends Fragment> The fragment class.
+         * @return Class&lt;? extends Fragment&gt; The fragment class.
          */
         public Class<? extends Fragment> getFragmentClass() {
             return mFragmentClass;
diff --git a/twelve/src/main/java/com/dolzzo/twelve/adapters/SongAdapter.java b/twelve/src/main/java/com/dolzzo/twelve/adapters/SongAdapter.java
index 8fa90203a0..d9732d10fc 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/adapters/SongAdapter.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/adapters/SongAdapter.java
@@ -174,14 +174,10 @@ public View getView(final int position, View convertView, final ViewGroup parent
      * @return true if we want to show the indicator
      */
     protected boolean showNowPlayingIndicator(final Song song, final int position) {
-        if (mCurrentlyPlayingTrack != null
+        return (mCurrentlyPlayingTrack != null
                 && mCurrentlyPlayingTrack.mSourceId == mSourceId
                 && mCurrentlyPlayingTrack.mSourceType == mSourceType
-                && mCurrentlyPlayingTrack.mId == song.mSongId) {
-            return true;
-        }
-
-        return false;
+                && mCurrentlyPlayingTrack.mId == song.mSongId);
     }
 
     /**
diff --git a/twelve/src/main/java/com/dolzzo/twelve/appwidgets/AppWidgetLarge.java b/twelve/src/main/java/com/dolzzo/twelve/appwidgets/AppWidgetLarge.java
index 14d2c99c7f..ca133c2df5 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/appwidgets/AppWidgetLarge.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/appwidgets/AppWidgetLarge.java
@@ -26,6 +26,8 @@
 import com.dolzzo.twelve.R;
 import com.dolzzo.twelve.ui.activities.HomeActivity;
 
+import java.lang.ref.WeakReference;
+
 /**
  * 4x2 App-Widget
  *
@@ -36,13 +38,19 @@
 
     public static final String CMDAPPWIDGETUPDATE = "app_widget_large_update";
 
-    private static AppWidgetLarge mInstance;
+    private static WeakReference<AppWidgetLarge> sInstance;
 
     public static synchronized AppWidgetLarge getInstance() {
-        if (mInstance == null) {
-            mInstance = new AppWidgetLarge();
+        if (sInstance != null) {
+            AppWidgetLarge ref = sInstance.get();
+            if (ref != null) {
+                return ref;
+            }
         }
-        return mInstance;
+
+        AppWidgetLarge ref = new AppWidgetLarge();
+        sInstance = new WeakReference<AppWidgetLarge>(ref);
+        return ref;
     }
 
     /**
diff --git a/twelve/src/main/java/com/dolzzo/twelve/appwidgets/AppWidgetLargeAlternate.java b/twelve/src/main/java/com/dolzzo/twelve/appwidgets/AppWidgetLargeAlternate.java
index 59a3f93f5b..5b3a6f304d 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/appwidgets/AppWidgetLargeAlternate.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/appwidgets/AppWidgetLargeAlternate.java
@@ -28,6 +28,8 @@
 import com.dolzzo.twelve.widgets.RepeatButton;
 import com.dolzzo.twelve.widgets.ShuffleButton;
 
+import java.lang.ref.WeakReference;
+
 /**
  * 4x2 App-Widget
  *
@@ -38,13 +40,19 @@
 
     public static final String CMDAPPWIDGETUPDATE = "app_widget_large_alternate_update";
 
-    private static AppWidgetLargeAlternate mInstance;
+    private static WeakReference<AppWidgetLargeAlternate> sInstance;
 
     public static synchronized AppWidgetLargeAlternate getInstance() {
-        if (mInstance == null) {
-            mInstance = new AppWidgetLargeAlternate();
+        if (sInstance != null) {
+            AppWidgetLargeAlternate ref = sInstance.get();
+            if (ref != null) {
+                return ref;
+            }
         }
-        return mInstance;
+
+        AppWidgetLargeAlternate ref = new AppWidgetLargeAlternate();
+        sInstance = new WeakReference<AppWidgetLargeAlternate>(ref);
+        return ref;
     }
 
     /**
diff --git a/twelve/src/main/java/com/dolzzo/twelve/appwidgets/AppWidgetSmall.java b/twelve/src/main/java/com/dolzzo/twelve/appwidgets/AppWidgetSmall.java
index 81a1df29c2..90bad6d7f6 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/appwidgets/AppWidgetSmall.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/appwidgets/AppWidgetSmall.java
@@ -28,6 +28,8 @@
 import com.dolzzo.twelve.R;
 import com.dolzzo.twelve.ui.activities.HomeActivity;
 
+import java.lang.ref.WeakReference;
+
 /**
  * 4x1 App-Widget
  *
@@ -38,13 +40,19 @@
 
     public static final String CMDAPPWIDGETUPDATE = "app_widget_small_update";
 
-    private static AppWidgetSmall mInstance;
+    private static WeakReference<AppWidgetSmall> sInstance;
 
     public static synchronized AppWidgetSmall getInstance() {
-        if (mInstance == null) {
-            mInstance = new AppWidgetSmall();
+        if (sInstance != null) {
+            AppWidgetSmall ref = sInstance.get();
+            if (ref != null) {
+                return ref;
+            }
         }
-        return mInstance;
+
+        AppWidgetSmall ref = new AppWidgetSmall();
+        sInstance = new WeakReference<AppWidgetSmall>(ref);
+        return ref;
     }
 
     /**
diff --git a/twelve/src/main/java/com/dolzzo/twelve/cache/BlurBitmapWorkerTask.java b/twelve/src/main/java/com/dolzzo/twelve/cache/BlurBitmapWorkerTask.java
index b909c54a9d..e58551262c 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/cache/BlurBitmapWorkerTask.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/cache/BlurBitmapWorkerTask.java
@@ -96,7 +96,7 @@ protected ResultContainer doInBackground(final String... params) {
             if (input.getWidth() < MIN_BITMAP_SIZE || input.getHeight() < MIN_BITMAP_SIZE) {
                 float multiplier = Math.max(MIN_BITMAP_SIZE / (float) input.getWidth(),
                         MIN_BITMAP_SIZE / (float) input.getHeight());
-                input = input.createScaledBitmap(bitmap, (int) (input.getWidth() * multiplier),
+                input = Bitmap.createScaledBitmap(bitmap, (int) (input.getWidth() * multiplier),
                         (int) (input.getHeight() * multiplier), true);
                 // since we created a new bitmap, we can re-use the bitmap for our output
                 output = input;
diff --git a/twelve/src/main/java/com/dolzzo/twelve/cache/DiskLruCache.java b/twelve/src/main/java/com/dolzzo/twelve/cache/DiskLruCache.java
index f3e68ba8f6..151de57337 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/cache/DiskLruCache.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/cache/DiskLruCache.java
@@ -930,7 +930,7 @@ private Entry(final String key) {
             lengths = new long[valueCount];
         }
 
-        public String getLengths() throws IOException {
+        public String getLengths() {
             final StringBuilder result = new StringBuilder();
             for (final long size : lengths) {
                 result.append(' ').append(size);
diff --git a/twelve/src/main/java/com/dolzzo/twelve/cache/ImageCache.java b/twelve/src/main/java/com/dolzzo/twelve/cache/ImageCache.java
index 778fb46306..264f4ca62a 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/cache/ImageCache.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/cache/ImageCache.java
@@ -41,6 +41,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.lang.ref.WeakReference;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.util.HashSet;
@@ -81,7 +82,7 @@
      * Image compression quality
      */
     private static final int COMPRESS_QUALITY = 98;
-    private static ImageCache sInstance;
+    private static WeakReference<ImageCache> sInstance;
 
     static {
         mArtworkUri = Uri.parse("content://media/external/audio/albumart");
@@ -120,11 +121,17 @@ public ImageCache(final Context context) {
      * @param context The {@link Context} to use
      * @return A new instance of this class.
      */
-    public final static ImageCache getInstance(final Context context) {
-        if (sInstance == null) {
-            sInstance = new ImageCache(context.getApplicationContext());
+    public static synchronized ImageCache getInstance(final Context context) {
+        if (sInstance != null) {
+            ImageCache ref = sInstance.get();
+            if (ref != null) {
+                return ref;
+            }
         }
-        return sInstance;
+
+        ImageCache ref = new ImageCache(context.getApplicationContext());
+        sInstance = new WeakReference<ImageCache>(ref);
+        return ref;
     }
 
     /**
@@ -136,7 +143,7 @@ public final static ImageCache getInstance(final Context context) {
      * @return An existing retained ImageCache object or a new one if one did
      * not exist
      */
-    public static final ImageCache findOrCreateCache(final Activity activity) {
+    public static ImageCache findOrCreateCache(final Activity activity) {
 
         // Search for, or create an instance of the non-UI RetainFragment
         final RetainFragment retainFragment = findOrCreateRetainFragment(
@@ -161,7 +168,7 @@ public static final ImageCache findOrCreateCache(final Activity activity) {
      * @return The existing instance of the {@link Fragment} or the new instance
      * if just created
      */
-    public static final RetainFragment findOrCreateRetainFragment(final FragmentManager fm) {
+    public static RetainFragment findOrCreateRetainFragment(final FragmentManager fm) {
         // Check to see if we have retained the worker fragment
         RetainFragment retainFragment = (RetainFragment) fm.findFragmentByTag(TAG);
 
@@ -181,7 +188,7 @@ public static final RetainFragment findOrCreateRetainFragment(final FragmentMana
      *                   directory
      * @return The cache directory
      */
-    public static final File getDiskCacheDir(final Context context, final String uniqueName) {
+    public static File getDiskCacheDir(final Context context, final String uniqueName) {
         // getExternalCacheDir(context) returns null if external storage is not ready
         final String cachePath = getExternalCacheDir(context) != null
                 ? getExternalCacheDir(context).getPath()
@@ -195,7 +202,7 @@ public static final File getDiskCacheDir(final Context context, final String uni
      * @return True if external storage is removable (like an SD card), false
      * otherwise
      */
-    public static final boolean isExternalStorageRemovable() {
+    public static boolean isExternalStorageRemovable() {
         return Environment.isExternalStorageRemovable();
     }
 
@@ -205,7 +212,7 @@ public static final boolean isExternalStorageRemovable() {
      * @param context The {@link Context} to use
      * @return The external cache directory
      */
-    public static final File getExternalCacheDir(final Context context) {
+    public static File getExternalCacheDir(final Context context) {
         return context.getExternalCacheDir();
     }
 
@@ -215,7 +222,7 @@ public static final File getExternalCacheDir(final Context context) {
      * @param path The path to check
      * @return The space available in bytes
      */
-    public static final long getUsableSpace(final File path) {
+    public static long getUsableSpace(final File path) {
         return path.getUsableSpace();
     }
 
@@ -225,7 +232,7 @@ public static final long getUsableSpace(final File path) {
      *
      * @param key The key used to store the file
      */
-    public static final String hashKeyForDisk(final String key) {
+    public static String hashKeyForDisk(final String key) {
         String cacheKey;
         try {
             final MessageDigest digest = MessageDigest.getInstance("MD5");
@@ -244,7 +251,7 @@ public static final String hashKeyForDisk(final String key) {
      * @return A {@link String} converted from the bytes of a hashable key used
      * to store a filename on the disk, to hex digits.
      */
-    private static final String bytesToHexString(final byte[] bytes) {
+    private static String bytesToHexString(final byte[] bytes) {
         final StringBuilder builder = new StringBuilder();
         for (final byte b : bytes) {
             final String hex = Integer.toHexString(0xFF & b);
@@ -260,7 +267,6 @@ private static final String bytesToHexString(final byte[] bytes) {
      * Initialize the cache, providing all parameters.
      *
      * @param context     The {@link Context} to use
-     * @param cacheParams The cache parameters to initialize the cache
      */
     private void init(final Context context) {
         ApolloUtils.execute(false, new AsyncTask<Void, Void, Void>() {
@@ -558,7 +564,7 @@ public final Bitmap getCachedArtwork(final Context context, final String data, f
      * Used to fetch the artwork for an album locally from the user's device
      *
      * @param context The {@link Context} to use
-     * @param albumID The ID of the album to find artwork for
+     * @param albumId The ID of the album to find artwork for
      * @return The artwork for an album
      */
     public final Bitmap getArtworkFromFile(final Context context, final long albumId) {
@@ -806,7 +812,7 @@ public MemoryCache(final int maxSize) {
         /**
          * Get the size in bytes of a bitmap.
          */
-        public static final int getBitmapSize(final Bitmap bitmap) {
+        public static int getBitmapSize(final Bitmap bitmap) {
             return bitmap.getByteCount();
         }
 
diff --git a/twelve/src/main/java/com/dolzzo/twelve/cache/ImageFetcher.java b/twelve/src/main/java/com/dolzzo/twelve/cache/ImageFetcher.java
index 629b89bc67..ae8a093855 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/cache/ImageFetcher.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/cache/ImageFetcher.java
@@ -31,6 +31,7 @@
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
+import java.lang.ref.WeakReference;
 
 /**
  * A subclass of {@link ImageWorker} that fetches images from a URL.
@@ -41,7 +42,7 @@
 
     private static final int DEFAULT_MAX_IMAGE_WIDTH = 1024;
 
-    private static ImageFetcher sInstance = null;
+    private static WeakReference<ImageFetcher> sInstance = null;
 
     /**
      * Creates a new instance of {@link ImageFetcher}.
@@ -58,11 +59,17 @@ public ImageFetcher(final Context context) {
      * @param context The {@link Context} to use
      * @return A new instance of this class.
      */
-    public static final ImageFetcher getInstance(final Context context) {
-        if (sInstance == null) {
-            sInstance = new ImageFetcher(context.getApplicationContext());
+    public static synchronized ImageFetcher getInstance(final Context context) {
+        if (sInstance != null) {
+            ImageFetcher ref = sInstance.get();
+            if (ref != null) {
+                return ref;
+            }
         }
-        return sInstance;
+
+        ImageFetcher ref = new ImageFetcher(context.getApplicationContext());
+        sInstance = new WeakReference<ImageFetcher>(ref);
+        return ref;
     }
 
     public static String getCurrentCacheKey() {
@@ -142,7 +149,7 @@ public static Bitmap decodeSampledBitmapFromUri(ContentResolver cr, final Uri se
      * @param reqHeight The requested height of the resulting bitmap
      * @return The value to be used for inSampleSize
      */
-    public static final int calculateInSampleSize(final BitmapFactory.Options options,
+    public static int calculateInSampleSize(final BitmapFactory.Options options,
                                                   final int reqWidth, final int reqHeight) {
         /* Raw height and width of image */
         final int height = options.outHeight;
diff --git a/twelve/src/main/java/com/dolzzo/twelve/cache/ImageWorker.java b/twelve/src/main/java/com/dolzzo/twelve/cache/ImageWorker.java
index 8b8c050024..3903f970d6 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/cache/ImageWorker.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/cache/ImageWorker.java
@@ -227,7 +227,7 @@ public static TransitionDrawable createPaletteTransition(BlurScrimImage scrimIma
      *
      * @param image ImageView/BlurScrimImage to check
      */
-    public static final void cancelWork(final View image) {
+    public static void cancelWork(final View image) {
         Object tag = image.getTag();
         if (tag != null && tag instanceof AsyncTaskContainer) {
             AsyncTaskContainer asyncTaskContainer = (AsyncTaskContainer) tag;
@@ -245,7 +245,7 @@ public static final void cancelWork(final View image) {
      * Returns false if the existing async task is loading the same key value
      * Returns true otherwise and also cancels the async task if one exists
      */
-    public static final boolean executePotentialWork(final String key, final View view) {
+    public static boolean executePotentialWork(final String key, final View view) {
         final AsyncTaskContainer asyncTaskContainer = getAsyncTaskContainer(view);
         if (asyncTaskContainer != null) {
             // we are trying to reload the same image, return false to indicate no work is needed
@@ -268,7 +268,7 @@ public static final boolean executePotentialWork(final String key, final View vi
      * @return Retrieve the AsyncTaskContainer assigned to the {@link View}. null if there is no
      * such task.
      */
-    public static final AsyncTaskContainer getAsyncTaskContainer(final View view) {
+    public static AsyncTaskContainer getAsyncTaskContainer(final View view) {
         if (view != null) {
             if (view.getTag() instanceof AsyncTaskContainer) {
                 return (AsyncTaskContainer) view.getTag();
@@ -287,7 +287,7 @@ public static final AsyncTaskContainer getAsyncTaskContainer(final View view) {
      * @return Retrieve the currently active work task (if any) associated with
      * this {@link View}. null if there is no such task.
      */
-    public static final BitmapWorkerTask getBitmapWorkerTask(final View view) {
+    public static BitmapWorkerTask getBitmapWorkerTask(final View view) {
         AsyncTaskContainer asyncTask = getAsyncTaskContainer(view);
         if (asyncTask != null) {
             return asyncTask.getBitmapWorkerTask();
diff --git a/twelve/src/main/java/com/dolzzo/twelve/dragdrop/DragSortListView.java b/twelve/src/main/java/com/dolzzo/twelve/dragdrop/DragSortListView.java
index e3f52f5452..fb149a39e6 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/dragdrop/DragSortListView.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/dragdrop/DragSortListView.java
@@ -18,6 +18,7 @@
 import android.graphics.Point;
 import android.graphics.drawable.Drawable;
 import android.os.SystemClock;
+import android.support.v4.content.ContextCompat;
 import android.util.AttributeSet;
 import android.view.Gravity;
 import android.view.MotionEvent;
@@ -331,8 +332,7 @@ public DragSortListView(final Context context, final AttributeSet attrs) {
                 DragSortController.ON_DOWN, DragSortController.FLING_RIGHT_REMOVE);
         mController.setRemoveEnabled(true);
         mController.setSortEnabled(true);
-        mController
-                .setBackgroundColor(getResources().getColor(R.color.accent));
+        mController.setBackgroundColor(ContextCompat.getColor(context, R.color.accent));
 
         mFloatViewManager = mController;
         setOnTouchListener(mController);
@@ -601,7 +601,7 @@ private int getShuffleEdge(final int position, final int top) {
      *
      * @param position
      * @param top
-     * @param height   Height of item at position. If -1, this function calculates
+     * @param heights   Height of item at position. If -1, this function calculates
      *                 this height.
      * @return Shuffle line between position-1 and position (for the given view
      * of the list; that is, for when top of item at position has
diff --git a/twelve/src/main/java/com/dolzzo/twelve/format/Capitalize.java b/twelve/src/main/java/com/dolzzo/twelve/format/Capitalize.java
index ecd65d6be1..0839fb17a2 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/format/Capitalize.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/format/Capitalize.java
@@ -9,7 +9,7 @@
     public Capitalize() {
     }
 
-    public static final String capitalize(String str) {
+    public static String capitalize(String str) {
         return capitalize(str, null);
     }
 
@@ -20,7 +20,7 @@ public static final String capitalize(String str) {
      * @param delimiters The delimiters
      * @return A captitalized string
      */
-    public static final String capitalize(String str, char... delimiters) {
+    public static String capitalize(String str, char... delimiters) {
         final int delimLen = delimiters == null ? -1 : delimiters.length;
         if (TextUtils.isEmpty(str) || delimLen == 0) {
             return str;
@@ -46,7 +46,7 @@ public static final String capitalize(String str, char... delimiters) {
      * @param delimiters the delimiters
      * @return true if it is a delimiter
      */
-    private static final boolean isDelimiter(char ch, char[] delimiters) {
+    private static boolean isDelimiter(char ch, char[] delimiters) {
         if (delimiters == null) {
             return Character.isWhitespace(ch);
         }
diff --git a/twelve/src/main/java/com/dolzzo/twelve/format/PrefixHighlighter.java b/twelve/src/main/java/com/dolzzo/twelve/format/PrefixHighlighter.java
index a607ad546f..c5d1ef9a39 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/format/PrefixHighlighter.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/format/PrefixHighlighter.java
@@ -30,7 +30,7 @@
     private ForegroundColorSpan mPrefixColorSpan;
 
     /**
-     * @param prefixHighlightColor The color used to highlight the prefixes.
+     * @param context Context
      */
     public PrefixHighlighter(final Context context) {
         mPrefixHighlightColor = PreferenceUtils.getInstance(context).getDefaultThemeColor(context);
diff --git a/twelve/src/main/java/com/dolzzo/twelve/loaders/AlbumLoader.java b/twelve/src/main/java/com/dolzzo/twelve/loaders/AlbumLoader.java
index c7e6e948e3..90c5a9c7d0 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/loaders/AlbumLoader.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/loaders/AlbumLoader.java
@@ -74,7 +74,7 @@ public AlbumLoader(final Context context, final Long artistId) {
      * @param artistId The artistId we want to find albums for or null if we want all albums
      * @return The {@link Cursor} used to run the album query.
      */
-    public static final Cursor makeAlbumCursor(final Context context, final Long artistId) {
+    public static Cursor makeAlbumCursor(final Context context, final Long artistId) {
         if (MusicUtils.isPermissionGranted(context) == false) {
             return null;
         }
@@ -85,7 +85,7 @@ public static final Cursor makeAlbumCursor(final Context context, final Long art
             uri = MediaStore.Audio.Artists.Albums.getContentUri("external", artistId);
         }
 
-        Cursor cursor = context.getContentResolver().query(uri,
+        return context.getContentResolver().query(uri,
                 new String[]{
                         /* 0 */
                         BaseColumns._ID,
@@ -98,8 +98,6 @@ public static final Cursor makeAlbumCursor(final Context context, final Long art
                         /* 4 */
                         AlbumColumns.FIRST_YEAR
                 }, null, null, albumSortOrder);
-
-        return cursor;
     }
 
     /**
diff --git a/twelve/src/main/java/com/dolzzo/twelve/loaders/AlbumSongLoader.java b/twelve/src/main/java/com/dolzzo/twelve/loaders/AlbumSongLoader.java
index e41514ea6e..1a75783aa5 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/loaders/AlbumSongLoader.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/loaders/AlbumSongLoader.java
@@ -64,7 +64,7 @@ public AlbumSongLoader(final Context context, final Long albumId) {
      * @param albumId The Id of the album the songs belong to.
      * @return The {@link Cursor} used to run the query.
      */
-    public static final Cursor makeAlbumSongCursor(final Context context, final Long albumId) {
+    public static Cursor makeAlbumSongCursor(final Context context, final Long albumId) {
         if (MusicUtils.isPermissionGranted(context) == false) {
             return null;
         }
diff --git a/twelve/src/main/java/com/dolzzo/twelve/loaders/ArtistLoader.java b/twelve/src/main/java/com/dolzzo/twelve/loaders/ArtistLoader.java
index 87c668d80a..67dd9e032a 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/loaders/ArtistLoader.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/loaders/ArtistLoader.java
@@ -60,7 +60,7 @@ public ArtistLoader(final Context context) {
      * @param context The {@link Context} to use.
      * @return The {@link Cursor} used to run the artist query.
      */
-    public static final Cursor makeArtistCursor(final Context context) {
+    public static Cursor makeArtistCursor(final Context context) {
         if (MusicUtils.isPermissionGranted(context)  == false) {
             return null;
         }
@@ -68,7 +68,7 @@ public static final Cursor makeArtistCursor(final Context context) {
         // requested artist ordering
         final String artistSortOrder = PreferenceUtils.getInstance(context).getArtistSortOrder();
 
-        Cursor cursor = context.getContentResolver().query(Artists.EXTERNAL_CONTENT_URI,
+        return context.getContentResolver().query(Artists.EXTERNAL_CONTENT_URI,
                 new String[]{
                         /* 0 */
                         Artists._ID,
@@ -79,8 +79,6 @@ public static final Cursor makeArtistCursor(final Context context) {
                         /* 3 */
                         Artists.NUMBER_OF_TRACKS
                 }, null, null, artistSortOrder);
-
-        return cursor;
     }
 
     /**
diff --git a/twelve/src/main/java/com/dolzzo/twelve/loaders/LastAddedLoader.java b/twelve/src/main/java/com/dolzzo/twelve/loaders/LastAddedLoader.java
index ed420af934..cfb3b2c35c 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/loaders/LastAddedLoader.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/loaders/LastAddedLoader.java
@@ -57,7 +57,7 @@ public LastAddedLoader(final Context context) {
      * @param context The {@link Context} to use.
      * @return The {@link Cursor} used to run the song query.
      */
-    public static final Cursor makeLastAddedCursor(final Context context) {
+    public static Cursor makeLastAddedCursor(final Context context) {
         // timestamp of four weeks ago
         long fourWeeksAgo = (System.currentTimeMillis() / 1000) - (4 * 3600 * 24 * 7);
         // possible saved timestamp caused by user "clearing" the last added playlist
diff --git a/twelve/src/main/java/com/dolzzo/twelve/loaders/NowPlayingCursor.java b/twelve/src/main/java/com/dolzzo/twelve/loaders/NowPlayingCursor.java
index ad68dc1095..595ce74e52 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/loaders/NowPlayingCursor.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/loaders/NowPlayingCursor.java
@@ -268,7 +268,6 @@ private void makeNowPlayingCursor() {
             mSize = mNowPlaying.length;
             if (mSize == 0) {
                 mCursorIndexes = null;
-                return;
             }
         }
     }
diff --git a/twelve/src/main/java/com/dolzzo/twelve/loaders/PlaylistLoader.java b/twelve/src/main/java/com/dolzzo/twelve/loaders/PlaylistLoader.java
index 5846ca48c7..c04cd30dfa 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/loaders/PlaylistLoader.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/loaders/PlaylistLoader.java
@@ -61,7 +61,7 @@ public PlaylistLoader(final Context context) {
      * @param context The {@link Context} to use.
      * @return The {@link Cursor} used to run the playlist query.
      */
-    public static final Cursor makePlaylistCursor(final Context context) {
+    public static Cursor makePlaylistCursor(final Context context) {
         if (MusicUtils.isPermissionGranted(context) == false) {
             return null;
         }
diff --git a/twelve/src/main/java/com/dolzzo/twelve/loaders/PlaylistSongLoader.java b/twelve/src/main/java/com/dolzzo/twelve/loaders/PlaylistSongLoader.java
index 29ab6a6172..da1a6c0d5a 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/loaders/PlaylistSongLoader.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/loaders/PlaylistSongLoader.java
@@ -152,7 +152,7 @@ private static int countPlaylist(final Context context, final long playlistId) {
      * @param playlistID The playlist the songs belong to.
      * @return The {@link Cursor} used to run the song query.
      */
-    public static final Cursor makePlaylistSongCursor(final Context context, final Long playlistID) {
+    public static Cursor makePlaylistSongCursor(final Context context, final Long playlistID) {
         String mSelection = (AudioColumns.IS_MUSIC + "=1") +
                 " AND " + AudioColumns.TITLE + " != ''";
         return context.getContentResolver().query(
diff --git a/twelve/src/main/java/com/dolzzo/twelve/loaders/QueueLoader.java b/twelve/src/main/java/com/dolzzo/twelve/loaders/QueueLoader.java
index 4711ade34b..a1d7e7785e 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/loaders/QueueLoader.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/loaders/QueueLoader.java
@@ -54,7 +54,7 @@ public QueueLoader(final Context context) {
      * @param context The {@link Context} to use.
      * @return The {@link Cursor} used to run the song query.
      */
-    public static final Cursor makeQueueCursor(final Context context) {
+    public static Cursor makeQueueCursor(final Context context) {
         return new NowPlayingCursor(context);
     }
 
diff --git a/twelve/src/main/java/com/dolzzo/twelve/loaders/SearchLoader.java b/twelve/src/main/java/com/dolzzo/twelve/loaders/SearchLoader.java
index fb39b83fcf..6451dda579 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/loaders/SearchLoader.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/loaders/SearchLoader.java
@@ -59,7 +59,7 @@ public SearchLoader(final Context context, final String query) {
      * @param query The user's query.
      * @return The {@link Cursor} used to perform the search.
      */
-    public static final Cursor makeSearchCursor(final Context context, final String query) {
+    public static Cursor makeSearchCursor(final Context context, final String query) {
         return context.getContentResolver().query(
                 Uri.parse("content://media/external/audio/search/fancy/" + Uri.encode(query)),
                 new String[]{
diff --git a/twelve/src/main/java/com/dolzzo/twelve/loaders/SongLoader.java b/twelve/src/main/java/com/dolzzo/twelve/loaders/SongLoader.java
index a0fb384ea6..1c442a0540 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/loaders/SongLoader.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/loaders/SongLoader.java
@@ -75,7 +75,7 @@ public SongLoader(final Context context, final String selection) {
      * @param selection Additional selection statement to use
      * @return The {@link Cursor} used to run the song query.
      */
-    public static final Cursor makeSongCursor(final Context context, final String selection) {
+    public static Cursor makeSongCursor(final Context context, final String selection) {
         return makeSongCursor(context, selection, true);
     }
 
@@ -89,7 +89,7 @@ public static final Cursor makeSongCursor(final Context context, final String se
      *                  in false for a boost in perf
      * @return The {@link Cursor} used to run the song query.
      */
-    public static final Cursor makeSongCursor(final Context context, final String selection,
+    public static Cursor makeSongCursor(final Context context, final String selection,
                                               final boolean runSort) {
         if (MusicUtils.isPermissionGranted(context) == false) {
             return null;
@@ -102,7 +102,7 @@ public static final Cursor makeSongCursor(final Context context, final String se
 
         final String songSortOrder = PreferenceUtils.getInstance(context).getSongSortOrder();
 
-        Cursor cursor = context.getContentResolver().query(Audio.Media.EXTERNAL_CONTENT_URI,
+        return context.getContentResolver().query(Audio.Media.EXTERNAL_CONTENT_URI,
                 new String[]{
                         /* 0 */
                         Audio.Media._ID,
@@ -119,8 +119,6 @@ public static final Cursor makeSongCursor(final Context context, final String se
                         /* 6 */
                         Audio.Media.YEAR,
                 }, selectionStatement, null, songSortOrder);
-
-        return cursor;
     }
 
     /**
diff --git a/twelve/src/main/java/com/dolzzo/twelve/loaders/SortedCursor.java b/twelve/src/main/java/com/dolzzo/twelve/loaders/SortedCursor.java
index 631d056e15..15ef318947 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/loaders/SortedCursor.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/loaders/SortedCursor.java
@@ -46,7 +46,7 @@
      * @param columnName the column name of the id to look up in the internal cursor
      */
     public SortedCursor(final Cursor cursor, final long[] order, final String columnName,
-                        final List<? extends Object> extraData) {
+                        final List<?> extraData) {
         if (cursor == null) {
             throw new IllegalArgumentException("Non-null cursor is needed");
         }
@@ -64,7 +64,7 @@ public SortedCursor(final Cursor cursor, final long[] order, final String column
      * @return returns the ids that aren't found in the underlying cursor
      */
     private ArrayList<Long> buildCursorPositionMapping(final long[] order,
-                                                       final String columnName, final List<? extends Object> extraData) {
+                                                       final String columnName, final List<?> extraData) {
         ArrayList<Long> missingIds = new ArrayList<Long>();
 
         mOrderedPositions = new ArrayList<Integer>(mCursor.getCount());
diff --git a/twelve/src/main/java/com/dolzzo/twelve/loaders/TopTracksLoader.java b/twelve/src/main/java/com/dolzzo/twelve/loaders/TopTracksLoader.java
index 7f3fb719d7..cefe8a2e07 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/loaders/TopTracksLoader.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/loaders/TopTracksLoader.java
@@ -47,7 +47,7 @@ public TopTracksLoader(final Context context, QueryType type) {
      * @param context Android context
      * @return sorted cursor
      */
-    public static final SortedCursor makeTopTracksCursor(final Context context) {
+    public static SortedCursor makeTopTracksCursor(final Context context) {
         // first get the top results ids from the internal database
         Cursor songs = SongPlayCount.getInstance(context).getTopPlayedResults(NUMBER_OF_SONGS);
 
@@ -68,7 +68,7 @@ public static final SortedCursor makeTopTracksCursor(final Context context) {
      * @param context Android context
      * @return sorted cursor
      */
-    public static final SortedCursor makeRecentTracksCursor(final Context context) {
+    public static SortedCursor makeRecentTracksCursor(final Context context) {
         // first get the top results ids from the internal database
         Cursor songs = RecentStore.getInstance(context).queryRecentIds(null);
 
@@ -91,7 +91,7 @@ public static final SortedCursor makeRecentTracksCursor(final Context context) {
      * @param idColumn the id column index of the cursor
      * @return a Sorted Cursor of songs
      */
-    public static final SortedCursor makeSortedCursor(final Context context, final Cursor cursor,
+    public static SortedCursor makeSortedCursor(final Context context, final Cursor cursor,
                                                       final int idColumn) {
         if (cursor != null && cursor.moveToFirst()) {
             // create the list of ids to select against
@@ -142,7 +142,7 @@ protected Cursor getCursor() {
             if (missingIds != null && missingIds.size() > 0) {
                 // for each unfound id, remove it from the database
                 // this codepath should only really be hit if the user removes songs
-                // outside of the Eleven app
+                // outside of the Twelve app
                 for (long id : missingIds) {
                     if (mQueryType == QueryType.TopTracks) {
                         SongPlayCount.getInstance(mContext).removeItem(id);
diff --git a/twelve/src/main/java/com/dolzzo/twelve/menu/ConfirmDialog.java b/twelve/src/main/java/com/dolzzo/twelve/menu/ConfirmDialog.java
index 6dac6eab04..500195f61e 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/menu/ConfirmDialog.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/menu/ConfirmDialog.java
@@ -37,7 +37,8 @@ public ConfirmDialog() {
     }
 
     /**
-     * @param title describes action user is confirming
+     * @param requestCode describes action user is confirming
+     * @param titleId text for title
      * @param okId  text for Ok button
      */
     public static void show(Fragment target, int requestCode, int titleId, int okId) {
@@ -74,6 +75,6 @@ public void onClick(final DialogInterface dialog, final int which) {
     }
 
     public interface ConfirmCallback {
-        public void confirmOk(int requestCode);
+        void confirmOk(int requestCode);
     }
 }
\ No newline at end of file
diff --git a/twelve/src/main/java/com/dolzzo/twelve/menu/CreateNewPlaylist.java b/twelve/src/main/java/com/dolzzo/twelve/menu/CreateNewPlaylist.java
index 671a214ccd..fad512e45b 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/menu/CreateNewPlaylist.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/menu/CreateNewPlaylist.java
@@ -66,8 +66,9 @@ public void initObjects(final Bundle savedInstanceState) {
             getDialog().dismiss();
             return;
         }
-        final String prromptformat = getString(R.string.create_playlist_prompt);
-        mPrompt = String.format(prromptformat, mDefaultname);
+        final String promptFormat = getString(R.string.create_playlist_prompt);
+        //mPrompt = String.format(promptFormat, mDefaultname);
+        mPrompt = promptFormat;
     }
 
     @Override
diff --git a/twelve/src/main/java/com/dolzzo/twelve/menu/DeleteDialog.java b/twelve/src/main/java/com/dolzzo/twelve/menu/DeleteDialog.java
index e8dd2d4062..6bc7747e40 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/menu/DeleteDialog.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/menu/DeleteDialog.java
@@ -108,6 +108,6 @@ public void onClick(final DialogInterface dialog, final int which) {
     }
 
     public interface DeleteDialogCallback {
-        public void onDelete(long[] id);
+        void onDelete(long[] id);
     }
 }
diff --git a/twelve/src/main/java/com/dolzzo/twelve/menu/RenamePlaylist.java b/twelve/src/main/java/com/dolzzo/twelve/menu/RenamePlaylist.java
index 941c541575..a636620e1f 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/menu/RenamePlaylist.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/menu/RenamePlaylist.java
@@ -71,8 +71,9 @@ public void initObjects(final Bundle savedInstanceState) {
             getDialog().dismiss();
             return;
         }
-        final String promptformat = getString(R.string.create_playlist_prompt);
-        mPrompt = String.format(promptformat, mOriginalName, mDefaultname);
+        final String promptFormat = getString(R.string.create_playlist_prompt);
+        //mPrompt = String.format(promptFormat, mOriginalName, mDefaultname);
+        mPrompt = promptFormat;
     }
 
     /**
diff --git a/twelve/src/main/java/com/dolzzo/twelve/model/Album.java b/twelve/src/main/java/com/dolzzo/twelve/model/Album.java
index 3b6397285d..118e09c560 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/model/Album.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/model/Album.java
@@ -114,10 +114,8 @@ public boolean equals(final Object obj) {
         if (mSongNumber != other.mSongNumber) {
             return false;
         }
-        if (!TextUtils.equals(mYear, other.mYear)) {
-            return false;
-        }
-        return true;
+
+        return TextUtils.equals(mYear, other.mYear);
     }
 
     /**
diff --git a/twelve/src/main/java/com/dolzzo/twelve/model/Artist.java b/twelve/src/main/java/com/dolzzo/twelve/model/Artist.java
index 43124364e9..4b008923fc 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/model/Artist.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/model/Artist.java
@@ -102,10 +102,8 @@ public boolean equals(final Object obj) {
         if (!TextUtils.equals(mArtistName, other.mArtistName)) {
             return false;
         }
-        if (mSongNumber != other.mSongNumber) {
-            return false;
-        }
-        return true;
+
+        return (mSongNumber == other.mSongNumber);
     }
 
     /**
diff --git a/twelve/src/main/java/com/dolzzo/twelve/model/SearchResult.java b/twelve/src/main/java/com/dolzzo/twelve/model/SearchResult.java
index 0e7eb09979..1611e19f7f 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/model/SearchResult.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/model/SearchResult.java
@@ -24,7 +24,7 @@
 import java.util.Comparator;
 
 public class SearchResult {
-    public static final Comparator COMPARATOR = new Comparator<SearchResult>() {
+    public static final Comparator<SearchResult> COMPARATOR = new Comparator<SearchResult>() {
         @Override
         public int compare(final SearchResult lhs, final SearchResult rhs) {
             return lhs.mType.ordinal() - rhs.mType.ordinal();
@@ -93,7 +93,7 @@ public static SearchResult createPlaylistResult(final Cursor cursor) {
         return result;
     }
 
-    public static enum ResultType {
+    public enum ResultType {
         Song,
         Artist,
         Album,
diff --git a/twelve/src/main/java/com/dolzzo/twelve/model/Song.java b/twelve/src/main/java/com/dolzzo/twelve/model/Song.java
index ca38ccd13b..c0d3c77be0 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/model/Song.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/model/Song.java
@@ -135,11 +135,7 @@ public boolean equals(final Object obj) {
             return false;
         }
 
-        if (mYear != other.mYear) {
-            return false;
-        }
-
-        return true;
+        return (mYear == other.mYear);
     }
 
     /**
diff --git a/twelve/src/main/java/com/dolzzo/twelve/provider/MusicDB.java b/twelve/src/main/java/com/dolzzo/twelve/provider/MusicDB.java
index a636a76402..828b732aa9 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/provider/MusicDB.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/provider/MusicDB.java
@@ -20,6 +20,8 @@
 import android.database.sqlite.SQLiteOpenHelper;
 import android.util.Log;
 
+import java.lang.ref.WeakReference;
+
 public class MusicDB extends SQLiteOpenHelper {
     /* Name of database file */
     public static final String DATABASENAME = "musicdb.db";
@@ -38,7 +40,7 @@
 
     /* Version constant to increment when the database should be rebuilt */
     private static final int VERSION = 4;
-    private static MusicDB sInstance = null;
+    private static WeakReference<MusicDB> sInstance = null;
 
     private final Context mContext;
 
@@ -52,11 +54,17 @@ public MusicDB(final Context context) {
      * @param context The {@link android.content.Context} to use
      * @return A new instance of this class.
      */
-    public static final synchronized MusicDB getInstance(final Context context) {
-        if (sInstance == null) {
-            sInstance = new MusicDB(context.getApplicationContext());
+    public static synchronized MusicDB getInstance(final Context context) {
+        if (sInstance != null) {
+            MusicDB ref = sInstance.get();
+            if (ref != null) {
+                return ref;
+            }
         }
-        return sInstance;
+
+        MusicDB ref = new MusicDB(context.getApplicationContext());
+        sInstance = new WeakReference<MusicDB>(ref);
+        return ref;
     }
 
     @Override
diff --git a/twelve/src/main/java/com/dolzzo/twelve/provider/MusicPlaybackState.java b/twelve/src/main/java/com/dolzzo/twelve/provider/MusicPlaybackState.java
index ef8a12b5f1..c603a94bb7 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/provider/MusicPlaybackState.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/provider/MusicPlaybackState.java
@@ -24,6 +24,7 @@
 import com.dolzzo.twelve.service.MusicPlaybackTrack;
 import com.dolzzo.twelve.utils.Lists;
 
+import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.LinkedList;
@@ -32,7 +33,7 @@
  * This keeps track of the music playback and history state of the playback service
  */
 public class MusicPlaybackState {
-    private static MusicPlaybackState sInstance = null;
+    private static WeakReference<MusicPlaybackState> sInstance = null;
 
     private MusicDB mMusicDatabase = null;
 
@@ -49,11 +50,17 @@ public MusicPlaybackState(final Context context) {
      * @param context The {@link android.content.Context} to use
      * @return A new instance of this class.
      */
-    public static final synchronized MusicPlaybackState getInstance(final Context context) {
-        if (sInstance == null) {
-            sInstance = new MusicPlaybackState(context.getApplicationContext());
+    public static synchronized MusicPlaybackState getInstance(final Context context) {
+        if (sInstance != null) {
+            MusicPlaybackState ref = sInstance.get();
+            if (ref != null) {
+                return ref;
+            }
         }
-        return sInstance;
+
+        MusicPlaybackState ref = new MusicPlaybackState(context.getApplicationContext());
+        sInstance = new WeakReference<MusicPlaybackState>(ref);
+        return ref;
     }
 
     public void onCreate(final SQLiteDatabase db) {
diff --git a/twelve/src/main/java/com/dolzzo/twelve/provider/PlaylistArtworkStore.java b/twelve/src/main/java/com/dolzzo/twelve/provider/PlaylistArtworkStore.java
index 7b2b4d1c63..5b1b32ddef 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/provider/PlaylistArtworkStore.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/provider/PlaylistArtworkStore.java
@@ -22,6 +22,8 @@
 
 import com.dolzzo.twelve.utils.MusicUtils;
 
+import java.lang.ref.WeakReference;
+
 /**
  * This db stores the details to generate the playlist artwork including when it was
  * last updated and the # of songs in the playlist when it last updated
@@ -29,7 +31,7 @@
 public class PlaylistArtworkStore {
     private static final long ONE_DAY_IN_MS = 1000 * 60 * 60 * 24;
 
-    private static PlaylistArtworkStore sInstance = null;
+    private static WeakReference<PlaylistArtworkStore> sInstance = null;
     private final Context mContext;
     private MusicDB mMusicDatabase = null;
 
@@ -48,18 +50,24 @@ public PlaylistArtworkStore(final Context context) {
      * @param context The {@link android.content.Context} to use
      * @return A new instance of this class.
      */
-    public static final synchronized PlaylistArtworkStore getInstance(final Context context) {
-        if (sInstance == null) {
-            sInstance = new PlaylistArtworkStore(context.getApplicationContext());
+    public static synchronized PlaylistArtworkStore getInstance(final Context context) {
+        if (sInstance != null) {
+            PlaylistArtworkStore ref = sInstance.get();
+            if (ref != null) {
+                return ref;
+            }
         }
-        return sInstance;
+
+        PlaylistArtworkStore ref = new PlaylistArtworkStore(context.getApplicationContext());
+        sInstance = new WeakReference<PlaylistArtworkStore>(ref);
+        return ref;
     }
 
     /**
      * @param playlistId playlist identifier
      * @return the key used for the imagae cache for the cover art
      */
-    public static final String getCoverCacheKey(final long playlistId) {
+    public static String getCoverCacheKey(final long playlistId) {
         return "playlist_cover_" + playlistId;
     }
 
@@ -67,7 +75,7 @@ public static final String getCoverCacheKey(final long playlistId) {
      * @param playlistId playlist identifier
      * @return the key used for the imagae cache for the top artist image
      */
-    public static final String getArtistCacheKey(final long playlistId) {
+    public static String getArtistCacheKey(final long playlistId) {
         return "playlist_artist_" + playlistId;
     }
 
diff --git a/twelve/src/main/java/com/dolzzo/twelve/provider/PropertiesStore.java b/twelve/src/main/java/com/dolzzo/twelve/provider/PropertiesStore.java
index f00bea8c93..fc7d95e264 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/provider/PropertiesStore.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/provider/PropertiesStore.java
@@ -21,19 +21,27 @@
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 
+import java.lang.ref.WeakReference;
+
 public class PropertiesStore {
-    private static PropertiesStore sInstance = null;
+    private static WeakReference<PropertiesStore> sInstance = null;
     private final MusicDB mMusicDatabase;
 
     private PropertiesStore(final Context context) {
         mMusicDatabase = MusicDB.getInstance(context);
     }
 
-    public static final synchronized PropertiesStore getInstance(final Context context) {
-        if (sInstance == null) {
-            sInstance = new PropertiesStore(context.getApplicationContext());
+    public static synchronized PropertiesStore getInstance(final Context context) {
+        if (sInstance != null) {
+            PropertiesStore ref = sInstance.get();
+            if (ref != null) {
+                return ref;
+            }
         }
-        return sInstance;
+
+        PropertiesStore ref = new PropertiesStore(context.getApplicationContext());
+        sInstance = new WeakReference<PropertiesStore>(ref);
+        return ref;
     }
 
     public void onCreate(final SQLiteDatabase db) {
diff --git a/twelve/src/main/java/com/dolzzo/twelve/provider/RecentStore.java b/twelve/src/main/java/com/dolzzo/twelve/provider/RecentStore.java
index 7a60df30a3..c7326bb7b8 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/provider/RecentStore.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/provider/RecentStore.java
@@ -18,11 +18,13 @@
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 
+import java.lang.ref.WeakReference;
+
 public class RecentStore {
     /* Maximum # of items in the db */
     private static final int MAX_ITEMS_IN_DB = 100;
 
-    private static RecentStore sInstance = null;
+    private static WeakReference<RecentStore> sInstance = null;
 
     private MusicDB mMusicDatabase = null;
 
@@ -39,11 +41,17 @@ public RecentStore(final Context context) {
      * @param context The {@link Context} to use
      * @return A new instance of this class.
      */
-    public static final synchronized RecentStore getInstance(final Context context) {
-        if (sInstance == null) {
-            sInstance = new RecentStore(context.getApplicationContext());
+    public static synchronized RecentStore getInstance(final Context context) {
+        if (sInstance != null) {
+            RecentStore ref = sInstance.get();
+            if (ref != null) {
+                return ref;
+            }
         }
-        return sInstance;
+
+        RecentStore ref = new RecentStore(context.getApplicationContext());
+        sInstance = new WeakReference<RecentStore>(ref);
+        return ref;
     }
 
     public void onCreate(final SQLiteDatabase db) {
diff --git a/twelve/src/main/java/com/dolzzo/twelve/provider/SearchHistory.java b/twelve/src/main/java/com/dolzzo/twelve/provider/SearchHistory.java
index 7e87a40fb4..7d689ce892 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/provider/SearchHistory.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/provider/SearchHistory.java
@@ -20,13 +20,14 @@
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 
+import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 
 public class SearchHistory {
     /* Maximum # of items in the db */
     private static final int MAX_ITEMS_IN_DB = 25;
 
-    private static SearchHistory sInstance = null;
+    private static WeakReference<SearchHistory> sInstance = null;
 
     private MusicDB mMusicDatabase = null;
 
@@ -38,11 +39,17 @@ public SearchHistory(final Context context) {
      * @param context The {@link android.content.Context} to use
      * @return A new instance of this class.
      */
-    public static final synchronized SearchHistory getInstance(final Context context) {
-        if (sInstance == null) {
-            sInstance = new SearchHistory(context.getApplicationContext());
+    public static synchronized SearchHistory getInstance(final Context context) {
+        if (sInstance != null) {
+            SearchHistory ref = sInstance.get();
+            if (ref != null) {
+                return ref;
+            }
         }
-        return sInstance;
+
+        SearchHistory ref = new SearchHistory(context.getApplicationContext());
+        sInstance = new WeakReference<SearchHistory>(ref);
+        return ref;
     }
 
     public void onCreate(final SQLiteDatabase db) {
diff --git a/twelve/src/main/java/com/dolzzo/twelve/provider/SongPlayCount.java b/twelve/src/main/java/com/dolzzo/twelve/provider/SongPlayCount.java
index a9453412ac..fbf92599f5 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/provider/SongPlayCount.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/provider/SongPlayCount.java
@@ -23,6 +23,7 @@
 import android.view.animation.AccelerateInterpolator;
 import android.view.animation.Interpolator;
 
+import java.lang.ref.WeakReference;
 import java.util.HashSet;
 import java.util.Iterator;
 
@@ -33,7 +34,7 @@
 public class SongPlayCount {
     // how many weeks worth of playback to track
     private static final int NUM_WEEKS = 52;
-    private static SongPlayCount sInstance = null;
+    private static WeakReference<SongPlayCount> sInstance = null;
     // interpolator curve applied for measuring the curve
     private static Interpolator sInterpolator = new AccelerateInterpolator(1.5f);
     // how high to multiply the interpolation curve
@@ -67,11 +68,17 @@ public SongPlayCount(final Context context) {
      * @param context The {@link android.content.Context} to use
      * @return A new instance of this class.
      */
-    public static final synchronized SongPlayCount getInstance(final Context context) {
-        if (sInstance == null) {
-            sInstance = new SongPlayCount(context.getApplicationContext());
+    public static synchronized SongPlayCount getInstance(final Context context) {
+        if (sInstance != null) {
+            SongPlayCount ref = sInstance.get();
+            if (ref != null) {
+                return ref;
+            }
         }
-        return sInstance;
+
+        SongPlayCount ref = new SongPlayCount(context.getApplicationContext());
+        sInstance = new WeakReference<SongPlayCount>(ref);
+        return ref;
     }
 
     /**
diff --git a/twelve/src/main/java/com/dolzzo/twelve/service/MusicPlaybackTrack.java b/twelve/src/main/java/com/dolzzo/twelve/service/MusicPlaybackTrack.java
index 1839fc5cee..06ffcec65d 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/service/MusicPlaybackTrack.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/service/MusicPlaybackTrack.java
@@ -91,14 +91,10 @@ public boolean equals(Object o) {
         if (o instanceof MusicPlaybackTrack) {
             MusicPlaybackTrack other = (MusicPlaybackTrack) o;
             if (other != null) {
-                if (mId == other.mId
+                return (mId == other.mId
                         && mSourceId == other.mSourceId
                         && mSourceType == other.mSourceType
-                        && mSourcePosition == other.mSourcePosition) {
-                    return true;
-                }
-
-                return false;
+                        && mSourcePosition == other.mSourcePosition);
             }
         }
 
diff --git a/twelve/src/main/java/com/dolzzo/twelve/ui/activities/BaseActivity.java b/twelve/src/main/java/com/dolzzo/twelve/ui/activities/BaseActivity.java
index c254b8b903..951265ceaa 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/ui/activities/BaseActivity.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/ui/activities/BaseActivity.java
@@ -28,6 +28,7 @@
 import android.os.Bundle;
 import android.os.IBinder;
 import android.support.v4.app.FragmentActivity;
+import android.support.v4.content.ContextCompat;
 import android.support.v7.app.AppCompatActivity;
 import android.support.v7.widget.Toolbar;
 import android.util.TypedValue;
@@ -38,7 +39,7 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
-import com.dolzzo.twelve.IElevenService;
+import com.dolzzo.twelve.ITwelveService;
 import com.dolzzo.twelve.MusicPlaybackService;
 import com.dolzzo.twelve.MusicStateListener;
 import com.dolzzo.twelve.R;
@@ -152,7 +153,7 @@ protected void onCreate(final Bundle savedInstanceState) {
         }
 
         // Set the layout
-        setContentView(setContentView());
+        setContentView(getContentView());
 
         getActionBarToolbar();
 
@@ -160,7 +161,7 @@ protected void onCreate(final Bundle savedInstanceState) {
 
         // set the background on the root view
         getWindow().getDecorView().getRootView().setBackgroundColor(
-                getResources().getColor(R.color.background_color));
+                ContextCompat.getColor(this, R.color.background_color));
         // Initialze the bottom action bar
         initBottomActionBar();
 
@@ -198,7 +199,7 @@ public void onRequestPermissionsResult(
      */
     @Override
     public void onServiceConnected(final ComponentName name, final IBinder service) {
-        mService = IElevenService.Stub.asInterface(service);
+        mService = ITwelveService.Stub.asInterface(service);
         // Set the playback drawables
         updatePlaybackControls();
         // Current info
@@ -337,7 +338,7 @@ public void setupActionBar(String title) {
         setActionBarTitle(title);
 
         if (mActionBarBackground == null) {
-            final int actionBarColor = getResources().getColor(R.color.header_action_bar_color);
+            final int actionBarColor = ContextCompat.getColor(this, R.color.header_action_bar_color);
             mActionBarBackground = new ColorDrawable(actionBarColor);
             mToolBar.setBackgroundDrawable(mActionBarBackground);
         }
@@ -469,7 +470,7 @@ public void onCacheUnpaused() {
     /**
      * @return The resource ID to be inflated.
      */
-    public abstract int setContentView();
+    public abstract int getContentView();
 
     /**
      * handle pending playback requests
diff --git a/twelve/src/main/java/com/dolzzo/twelve/ui/activities/HomeActivity.java b/twelve/src/main/java/com/dolzzo/twelve/ui/activities/HomeActivity.java
index 0173dd0aaf..82014c47d5 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/ui/activities/HomeActivity.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/ui/activities/HomeActivity.java
@@ -15,22 +15,20 @@
  */
 package com.dolzzo.twelve.ui.activities;
 
-import android.Manifest;
 import android.animation.ArgbEvaluator;
 import android.animation.ObjectAnimator;
 import android.content.Intent;
-import android.content.pm.PackageManager;
 import android.graphics.Bitmap;
 import android.graphics.Color;
 import android.net.Uri;
 import android.os.AsyncTask;
-import android.os.Build;
 import android.os.Bundle;
 import android.os.Handler;
 import android.provider.MediaStore;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.FragmentManager;
 import android.support.v4.app.FragmentTransaction;
+import android.support.v4.content.ContextCompat;
 import android.text.TextUtils;
 import android.util.Log;
 import android.view.MenuItem;
@@ -214,7 +212,7 @@ protected void onPostExecute(BitmapWithColors bmc) {
 
     private void updateVisualizerColor(int color) {
         if (color == Color.TRANSPARENT) {
-            color = getResources().getColor(R.color.visualizer_fill_color);
+            color = ContextCompat.getColor(this, R.color.visualizer_fill_color);
         }
 
         // check for null since updatestatusBarColor is a async task
@@ -227,7 +225,7 @@ private void updateVisualizerColor(int color) {
     private void updateStatusBarColor(int color) {
         if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {
             if (color == Color.TRANSPARENT) {
-                color = getResources().getColor(R.color.primary_dark);
+                color = ContextCompat.getColor(this, R.color.primary_dark);
             }
             final Window window = getWindow();
             ObjectAnimator animator = ObjectAnimator.ofInt(window,
@@ -450,6 +448,7 @@ private long parseIdFromIntent(Intent intent, String longKey,
                     id = Long.parseLong(idString);
                 } catch (NumberFormatException e) {
                     Log.e(TAG, e.getMessage());
+                    return defaultId;
                 }
             }
         }
diff --git a/twelve/src/main/java/com/dolzzo/twelve/ui/activities/SearchActivity.java b/twelve/src/main/java/com/dolzzo/twelve/ui/activities/SearchActivity.java
index c2df1b614b..9f0c89b50a 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/ui/activities/SearchActivity.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/ui/activities/SearchActivity.java
@@ -27,6 +27,7 @@
 import android.provider.BaseColumns;
 import android.provider.MediaStore;
 import android.support.v4.app.LoaderManager.LoaderCallbacks;
+import android.support.v4.content.ContextCompat;
 import android.support.v4.content.Loader;
 import android.support.v4.view.MenuItemCompat;
 import android.support.v7.app.AppCompatActivity;
@@ -47,7 +48,7 @@
 import android.widget.ListView;
 
 import com.dolzzo.twelve.Config;
-import com.dolzzo.twelve.IElevenService;
+import com.dolzzo.twelve.ITwelveService;
 import com.dolzzo.twelve.R;
 import com.dolzzo.twelve.adapters.SummarySearchAdapter;
 import com.dolzzo.twelve.loaders.WrappedAsyncTaskLoader;
@@ -295,7 +296,7 @@ public void run() {
             }
         }
 
-        final int actionBarColor = getResources().getColor(R.color.header_action_bar_color);
+        final int actionBarColor =  ContextCompat.getColor(this, R.color.header_action_bar_color);
         ColorDrawable mActionBarBackground = new ColorDrawable(actionBarColor);
         mToolBar.setBackgroundDrawable(mActionBarBackground);
 
@@ -677,7 +678,7 @@ public void onItemClick(final AdapterView<?> parent, final View view, final int
      */
     @Override
     public void onServiceConnected(final ComponentName name, final IBinder service) {
-        mService = IElevenService.Stub.asInterface(service);
+        mService = ITwelveService.Stub.asInterface(service);
     }
 
     /**
diff --git a/twelve/src/main/java/com/dolzzo/twelve/ui/activities/SlidingPanelActivity.java b/twelve/src/main/java/com/dolzzo/twelve/ui/activities/SlidingPanelActivity.java
index 9d49922b6c..156b93a23f 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/ui/activities/SlidingPanelActivity.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/ui/activities/SlidingPanelActivity.java
@@ -177,7 +177,7 @@ protected void onPause() {
      * {@inheritDoc}
      */
     @Override
-    public int setContentView() {
+    public int getContentView() {
         return R.layout.activity_base;
     }
 
diff --git a/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/AlbumDetailFragment.java b/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/AlbumDetailFragment.java
index 94726c6596..942310007d 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/AlbumDetailFragment.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/AlbumDetailFragment.java
@@ -183,14 +183,14 @@ public void onPopupMenuClicked(View v, int position) {
      * called back by song loader
      */
     public void update(List<Song> songs) {
-        /** compute total run time for album */
+        /* compute total run time for album */
         int duration = 0;
         for (Song s : songs) {
             duration += s.mDuration;
         }
         mAlbumDuration.setText(MusicUtils.makeLongTimeString(getActivity(), duration));
 
-        /** use the first song on the album to get a genre */
+        /* use the first song on the album to get a genre */
         if (!songs.isEmpty()) {
             GenreFetcher.fetch(getActivity(), (int) songs.get(0).mSongId, mGenre);
         }
diff --git a/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/AlbumFragment.java b/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/AlbumFragment.java
index b69be9dbcc..34cbc35e86 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/AlbumFragment.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/AlbumFragment.java
@@ -119,7 +119,7 @@ public void onPopupMenuClicked(View v, int position) {
     @Override
     public View onCreateView(final LayoutInflater inflater, final ViewGroup container,
                              final Bundle savedInstanceState) {
-        mRootView = (ViewGroup) inflater.inflate(R.layout.grid_base, null);
+        mRootView = (ViewGroup) View.inflate(getContext(), R.layout.grid_base, null);
         initGridView();
 
         // Register the music status listener
diff --git a/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/ArtistFragment.java b/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/ArtistFragment.java
index c8f5dce2cd..826153bd93 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/ArtistFragment.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/ArtistFragment.java
@@ -127,7 +127,7 @@ public void onPopupMenuClicked(View v, int position) {
     public View onCreateView(final LayoutInflater inflater, final ViewGroup container,
                              final Bundle savedInstanceState) {
         // The View for the fragment's UI
-        mRootView = (ViewGroup) inflater.inflate(R.layout.list_base, null);
+        mRootView = (ViewGroup) View.inflate(getContext(), R.layout.list_base, null);
         initListView();
 
         // Register the music status listener
diff --git a/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/AudioPlayerFragment.java b/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/AudioPlayerFragment.java
index 0bbb227a58..058f522661 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/AudioPlayerFragment.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/AudioPlayerFragment.java
@@ -30,6 +30,7 @@
 import android.os.Message;
 import android.os.PowerManager;
 import android.support.v4.app.Fragment;
+import android.support.v4.content.ContextCompat;
 import android.support.v4.view.ViewPager;
 import android.text.Html;
 import android.text.Spanned;
@@ -187,7 +188,7 @@ public void onActivityCreated(Bundle savedInstanceState) {
     public View onCreateView(final LayoutInflater inflater, final ViewGroup container,
                              final Bundle savedInstanceState) {
         // The View for the fragment's UI
-        mRootView = (ViewGroup) inflater.inflate(R.layout.activity_player_fragment, null);
+        mRootView = (ViewGroup) View.inflate(getContext(), R.layout.activity_player_fragment, null);
 
         // Header title values
         initHeaderBar();
@@ -239,7 +240,8 @@ public void onStart() {
         // Listen for lyrics text for the audio track
         filter.addAction(MusicPlaybackService.NEW_LYRICS);
         // Listen for power save mode changed
-        filter.addAction(PowerManager.ACTION_POWER_SAVE_MODE_CHANGED);
+        filter.addAction("android.os.action.POWER_SAVE_MODE_CHANGED");
+       // filter.addAction(PowerManager.ACTION_POWER_SAVE_MODE_CHANGED); Require API 21
         // Register the intent filters
         getActivity().registerReceiver(mPlaybackStatus, filter);
         // Refresh the current time
@@ -407,7 +409,7 @@ public void onPageSelected(int position) {
     }
 
     private void setupNoResultsContainer(NoResultsContainer empty) {
-        int color = getResources().getColor(R.color.no_results_light);
+        int color = ContextCompat.getColor(getContext(), R.color.no_results_light);
         empty.setTextColor(color);
         empty.setMainText(R.string.empty_queue_main);
         empty.setSecondaryText(R.string.empty_queue_secondary);
@@ -826,7 +828,8 @@ public void onReceive(final Context context, final Intent intent) {
                 audioPlayerFragment.createAndSetAdapter();
             } else if (action.equals(MusicPlaybackService.NEW_LYRICS)) {
                 audioPlayerFragment.onLyrics(intent.getStringExtra("lyrics"));
-            } else if (action.equals(PowerManager.ACTION_POWER_SAVE_MODE_CHANGED)) {
+            } else if (action.equals("android.os.action.POWER_SAVE_MODE_CHANGED")) {
+            //} else if (action.equals(PowerManager.ACTION_POWER_SAVE_MODE_CHANGED)) { API21
                 audioPlayerFragment.updateVisualizerPowerSaveMode();
             }
         }
diff --git a/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/BaseFragment.java b/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/BaseFragment.java
index 915236272f..ff2a3e7ab0 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/BaseFragment.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/BaseFragment.java
@@ -17,6 +17,7 @@
 
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
+import android.support.v4.content.ContextCompat;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
@@ -62,7 +63,7 @@ public final View onCreateView(LayoutInflater inflater, ViewGroup container, Bun
         // The View for the fragment's UI
         mRootView = (ViewGroup) inflater.inflate(getLayoutToInflate(), null);
         // set the background color
-        mRootView.setBackgroundColor(getResources().getColor(R.color.background_color));
+        mRootView.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.background_color));
         // eat any touches that fall through to the root so they aren't
         // passed on to fragments "behind" the current one.
         mRootView.setOnTouchListener(new View.OnTouchListener() {
diff --git a/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/PlaylistFragment.java b/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/PlaylistFragment.java
index 61a0439a17..9eb2367ffd 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/PlaylistFragment.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/PlaylistFragment.java
@@ -112,7 +112,7 @@ public void onPopupMenuClicked(View v, int position) {
     public View onCreateView(final LayoutInflater inflater, final ViewGroup container,
                              final Bundle savedInstanceState) {
         // The View for the fragment's UI
-        final ViewGroup rootView = (ViewGroup) inflater.inflate(R.layout.list_base, null);
+        final ViewGroup rootView = (ViewGroup) View.inflate(getContext(), R.layout.list_base, null);
         // Initialize the list
         mListView = (ListView) rootView.findViewById(R.id.list_base);
         // Set the data behind the grid
diff --git a/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/QueueFragment.java b/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/QueueFragment.java
index 71cd5f27a5..bd4ee4cb1f 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/QueueFragment.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/QueueFragment.java
@@ -24,6 +24,7 @@
 import android.provider.MediaStore;
 import android.support.v4.app.Fragment;
 import android.support.v4.app.LoaderManager.LoaderCallbacks;
+import android.support.v4.content.ContextCompat;
 import android.support.v4.content.Loader;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -214,7 +215,7 @@ public void onPopupMenuClicked(View v, int position) {
     public View onCreateView(final LayoutInflater inflater, final ViewGroup container,
                              final Bundle savedInstanceState) {
         // The View for the fragment's UI
-        mRootView = (ViewGroup) inflater.inflate(R.layout.list_base, null);
+        mRootView = (ViewGroup) View.inflate(getContext(), R.layout.list_base, null);
         // Initialize the list
         mListView = (DragSortListView) mRootView.findViewById(R.id.list_base);
         // Set the data behind the list
@@ -442,7 +443,7 @@ public void refreshQueue() {
     }
 
     private void setupNoResultsContainer(NoResultsContainer empty) {
-        int color = getResources().getColor(R.color.no_results_light);
+        int color =  ContextCompat.getColor(getContext(), R.color.no_results_light);
         empty.setTextColor(color);
         empty.setMainText(R.string.empty_queue_main);
         empty.setSecondaryText(R.string.empty_queue_secondary);
diff --git a/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/phone/MusicBrowserFragment.java b/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/phone/MusicBrowserFragment.java
index 20df383cf9..b6f0046e81 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/phone/MusicBrowserFragment.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/phone/MusicBrowserFragment.java
@@ -33,11 +33,11 @@ public LoaderManager getContainingLoaderManager() {
         return getParentFragment().getLoaderManager();
     }
 
-    protected void initLoader(Bundle args, LoaderCallbacks<? extends Object> callback) {
+    protected void initLoader(Bundle args, LoaderCallbacks<?> callback) {
         getContainingLoaderManager().initLoader(getLoaderId(), args, callback);
     }
 
-    protected void restartLoader(Bundle args, LoaderCallbacks<? extends Object> callback) {
+    protected void restartLoader(Bundle args, LoaderCallbacks<?> callback) {
         getContainingLoaderManager().restartLoader(getLoaderId(), args, callback);
     }
 }
diff --git a/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/phone/MusicBrowserPhoneFragment.java b/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/phone/MusicBrowserPhoneFragment.java
index fae4fcf954..ea0aa18fbb 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/phone/MusicBrowserPhoneFragment.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/phone/MusicBrowserPhoneFragment.java
@@ -39,7 +39,7 @@
  * s for phones.
  *
  * @author Andrew Neal (andrewdneal@gmail.com)
- * @NOTE: The reason the sort orders are taken care of in this fragment rather
+ * NOTE: The reason the sort orders are taken care of in this fragment rather
  * than the individual fragments is to keep from showing all of the menu
  * items on tablet interfaces. That being said, I have a tablet interface
  * worked out, but I'm going to keep it in the Play Store version of
diff --git a/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/profile/BasicSongFragment.java b/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/profile/BasicSongFragment.java
index 1a7dd2bfb3..0127e666da 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/profile/BasicSongFragment.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/ui/fragments/profile/BasicSongFragment.java
@@ -18,6 +18,7 @@
 import android.support.v4.app.Fragment;
 import android.support.v4.app.LoaderManager;
 import android.support.v4.app.LoaderManager.LoaderCallbacks;
+import android.support.v4.content.ContextCompat;
 import android.support.v4.content.Loader;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -143,9 +144,9 @@ protected void updateMenuIds(TreeSet<Integer> set) {
     public View onCreateView(final LayoutInflater inflater, final ViewGroup container,
                              final Bundle savedInstanceState) {
         // The View for the fragment's UI
-        mRootView = (ViewGroup) inflater.inflate(R.layout.list_base, null);
+        mRootView = (ViewGroup) View.inflate(getContext(), R.layout.list_base, null);
         // set the background on the root view
-        mRootView.setBackgroundColor(getResources().getColor(R.color.background_color));
+        mRootView.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.background_color));
         // Initialize the list
         mListView = (ListView) mRootView.findViewById(R.id.list_base);
         // Set the data behind the list
diff --git a/twelve/src/main/java/com/dolzzo/twelve/utils/ApolloUtils.java b/twelve/src/main/java/com/dolzzo/twelve/utils/ApolloUtils.java
index 02fc2f4892..5b6b1ce617 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/utils/ApolloUtils.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/utils/ApolloUtils.java
@@ -70,7 +70,7 @@ public ApolloUtils() {
      * @param context The {@link Context} to use.
      * @return True if the device is a tablet, false otherwise.
      */
-    public static final boolean isTablet(final Context context) {
+    public static boolean isTablet(final Context context) {
         final int layout = context.getResources().getConfiguration().screenLayout;
         return (layout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_LARGE;
     }
@@ -81,7 +81,7 @@ public static final boolean isTablet(final Context context) {
      * @param context The {@link Context} to use.
      * @return True if the device is in landscape mode, false otherwise.
      */
-    public static final boolean isLandscape(final Context context) {
+    public static boolean isLandscape(final Context context) {
         final int orientation = context.getResources().getConfiguration().orientation;
         return orientation == Configuration.ORIENTATION_LANDSCAPE;
     }
@@ -119,7 +119,7 @@ public static final boolean isLandscape(final Context context) {
      * settings, the mobile data and other network connections aren't
      * returned at all
      */
-    public static final boolean isOnline(final Context context) {
+    public static boolean isOnline(final Context context) {
         /*
          * This sort of handles a sudden configuration change, but I think it
          * should be dealt with in a more professional way.
@@ -206,7 +206,7 @@ public static void showCheatSheet(final View view) {
      *
      * @see {@literal http://en.wikipedia.org/wiki/HSV_color_space%23Lightness}
      */
-    public static final boolean isColorDark(final int color) {
+    public static boolean isColorDark(final int color) {
         return (30 * Color.red(color) + 59 * Color.green(color) + 11 * Color.blue(color)) / 100 <= BRIGHTNESS_THRESHOLD;
     }
 
@@ -236,7 +236,7 @@ public void onGlobalLayout() {
      * @param activity The {@link Activity} to use.
      * @return A new {@link ImageFetcher} used to fetch images asynchronously.
      */
-    public static final ImageFetcher getImageFetcher(final Activity activity) {
+    public static ImageFetcher getImageFetcher(final Activity activity) {
         final ImageFetcher imageFetcher = ImageFetcher.getInstance(activity);
         imageFetcher.setImageCache(ImageCache.findOrCreateCache(activity));
         return imageFetcher;
diff --git a/twelve/src/main/java/com/dolzzo/twelve/utils/ImageUtils.java b/twelve/src/main/java/com/dolzzo/twelve/utils/ImageUtils.java
index d2f6cb1d2b..4a7c3b482d 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/utils/ImageUtils.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/utils/ImageUtils.java
@@ -90,8 +90,6 @@ public static String processImageUrl(final Context context, final String artistN
     /**
      * Downloads the bitmap from the url and returns it after some processing
      *
-     * @param key The key to identify which image to process, as provided by
-     *            {@link ImageWorker#loadImage(mKey, android.widget.ImageView)}
      * @return The processed {@link Bitmap}.
      */
     public static Bitmap processBitmap(final Context context, final String url) {
@@ -115,8 +113,6 @@ public static Bitmap processBitmap(final Context context, final String url) {
      * width and height.
      *
      * @param filename  The full path of the file to decode
-     * @param reqWidth  The requested width of the resulting bitmap
-     * @param reqHeight The requested height of the resulting bitmap
      * @return A {@link Bitmap} sampled down from the original with the same
      * aspect ratio and dimensions that are equal to or greater than the
      * requested width and height
@@ -154,7 +150,7 @@ public static Bitmap decodeSampledBitmapFromFile(final String filename) {
      * @param reqHeight The requested height of the resulting bitmap
      * @return The value to be used for inSampleSize
      */
-    public static final int calculateInSampleSize(final BitmapFactory.Options options,
+    public static int calculateInSampleSize(final BitmapFactory.Options options,
                                                   final int reqWidth, final int reqHeight) {
         /* Raw height and width of image */
         final int height = options.outHeight;
@@ -195,7 +191,7 @@ public static final int calculateInSampleSize(final BitmapFactory.Options option
      * @param urlString The URL to fetch
      * @return A {@link File} pointing to the fetched bitmap
      */
-    public static final File downloadBitmapToFile(final Context context, final String urlString,
+    public static File downloadBitmapToFile(final Context context, final String urlString,
                                                   final String uniqueName) {
         final File cacheDir = ImageCache.getDiskCacheDir(context, uniqueName);
 
diff --git a/twelve/src/main/java/com/dolzzo/twelve/utils/Lists.java b/twelve/src/main/java/com/dolzzo/twelve/utils/Lists.java
index 1f60632026..5d983dd044 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/utils/Lists.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/utils/Lists.java
@@ -35,7 +35,7 @@ public Lists() {
      *
      * @return a newly-created, initially-empty {@code ArrayList}
      */
-    public static final <E> ArrayList<E> newArrayList() {
+    public static <E> ArrayList<E> newArrayList() {
         return new ArrayList<E>();
     }
 
@@ -47,7 +47,7 @@ public Lists() {
      *
      * @return a newly-created, initially-empty {@code LinkedList}
      */
-    public static final <E> LinkedList<E> newLinkedList() {
+    public static <E> LinkedList<E> newLinkedList() {
         return new LinkedList<E>();
     }
 
diff --git a/twelve/src/main/java/com/dolzzo/twelve/utils/MusicUtils.java b/twelve/src/main/java/com/dolzzo/twelve/utils/MusicUtils.java
index b07678374e..08c1b02f16 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/utils/MusicUtils.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/utils/MusicUtils.java
@@ -26,7 +26,6 @@
 import android.content.pm.PackageManager;
 import android.database.Cursor;
 import android.net.Uri;
-import android.os.Build;
 import android.os.IBinder;
 import android.os.RemoteException;
 import android.os.SystemClock;
@@ -45,7 +44,7 @@
 
 import com.dolzzo.twelve.Config.IdType;
 import com.dolzzo.twelve.Config.SmartPlaylistType;
-import com.dolzzo.twelve.IElevenService;
+import com.dolzzo.twelve.ITwelveService;
 import com.dolzzo.twelve.MusicPlaybackService;
 import com.dolzzo.twelve.R;
 import com.dolzzo.twelve.cache.ImageFetcher;
@@ -80,7 +79,7 @@
     private static final WeakHashMap<Context, ServiceBinder> mConnectionMap;
     private static final long[] sEmptyList;
     private static final int MIN_VALID_YEAR = 1900; // used to remove invalid years from metadata
-    public static IElevenService mService = null;
+    public static ITwelveService mService = null;
     private static ContentValues[] mContentValuesCache = null;
 
     static {
@@ -93,19 +92,19 @@ public MusicUtils() {
     }
 
     /**
-     * @param context  The {@link Context} to use
+     * @param activity  The {@link Activity} to use
      * @param callback The {@link ServiceConnection} to use
      * @return The new instance of {@link ServiceToken}
      */
-    public static final ServiceToken bindToService(final Context context,
+    public static ServiceToken bindToService(final Activity activity,
                                                    final ServiceConnection callback) {
-        if (!isPermissionGranted(context)) {
+        if (!isPermissionGranted(activity)) {
             return null;
         }
 
-        Activity realActivity = ((Activity) context).getParent();
+        Activity realActivity = activity.getParent();
         if (realActivity == null) {
-            realActivity = (Activity) context;
+            realActivity = activity;
         }
         final ContextWrapper contextWrapper = new ContextWrapper(realActivity);
         contextWrapper.startService(new Intent(contextWrapper, MusicPlaybackService.class));
@@ -121,12 +120,8 @@ public static final ServiceToken bindToService(final Context context,
 
     public static boolean isPermissionGranted(Context context) {
 
-        if (context.checkCallingOrSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE)
-                != PackageManager.PERMISSION_GRANTED) {
-            return false;
-        }
-
-        return true;
+        return (context.checkCallingOrSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE)
+                == PackageManager.PERMISSION_GRANTED);
     }
 
     /**
@@ -147,7 +142,7 @@ public static void unbindFromService(final ServiceToken token) {
         }
     }
 
-    public static final boolean isPlaybackServiceConnected() {
+    public static boolean isPlaybackServiceConnected() {
         return mService != null;
     }
 
@@ -161,7 +156,7 @@ public static final boolean isPlaybackServiceConnected() {
      * @return A {@link String} used as a label for the number of artists,
      * albums, songs, genres, and playlists.
      */
-    public static final String makeLabel(final Context context, final int pluralInt,
+    public static String makeLabel(final Context context, final int pluralInt,
                                          final int number) {
         return context.getResources().getQuantityString(pluralInt, number, number);
     }
@@ -173,7 +168,7 @@ public static final String makeLabel(final Context context, final int pluralInt,
      * @param secs    The track in seconds.
      * @return Duration of a track that's properly formatted.
      */
-    public static final String makeShortTimeString(final Context context, long secs) {
+    public static String makeShortTimeString(final Context context, long secs) {
         long hours, mins;
 
         hours = secs / 3600;
@@ -193,7 +188,7 @@ public static final String makeShortTimeString(final Context context, long secs)
      * @param secs    The duration seconds.
      * @return Duration properly formatted in #h #m format
      */
-    public static final String makeLongTimeString(final Context context, long secs) {
+    public static String makeLongTimeString(final Context context, long secs) {
         long hours, mins;
 
         hours = secs / 3600;
@@ -221,7 +216,7 @@ public static final String makeLongTimeString(final Context context, long secs)
      * @param second  string to combine
      * @return the combined string
      */
-    public static final String makeCombinedString(final Context context, final String first,
+    public static String makeCombinedString(final Context context, final String first,
                                                   final String second) {
         final String formatter = context.getResources().getString(R.string.combine_two_strings);
         return String.format(formatter, first, second);
@@ -285,7 +280,7 @@ public static void asyncNext(final Context context) {
     /**
      * Changes to the previous track.
      *
-     * @NOTE The AIDL isn't used here in order to properly use the previous
+     * NOTE The AIDL isn't used here in order to properly use the previous
      * action. When the user is shuffling, because {@link
      * MusicPlaybackService.#openCurrentAndNext()} is used, the user won't
      * be able to travel to the previously skipped track. To remedy this,
@@ -377,7 +372,7 @@ public static void cycleShuffle() {
     /**
      * @return True if we're playing music, false otherwise.
      */
-    public static final boolean isPlaying() {
+    public static boolean isPlaying() {
         if (mService != null) {
             try {
                 return mService.isPlaying();
@@ -390,7 +385,7 @@ public static final boolean isPlaying() {
     /**
      * @return The current shuffle mode.
      */
-    public static final int getShuffleMode() {
+    public static int getShuffleMode() {
         if (mService != null) {
             try {
                 return mService.getShuffleMode();
@@ -403,7 +398,7 @@ public static final int getShuffleMode() {
     /**
      * @return The current repeat mode.
      */
-    public static final int getRepeatMode() {
+    public static int getRepeatMode() {
         if (mService != null) {
             try {
                 return mService.getRepeatMode();
@@ -416,7 +411,7 @@ public static final int getRepeatMode() {
     /**
      * @return The current track name.
      */
-    public static final String getTrackName() {
+    public static String getTrackName() {
         if (mService != null) {
             try {
                 return mService.getTrackName();
@@ -429,7 +424,7 @@ public static final String getTrackName() {
     /**
      * @return The current artist name.
      */
-    public static final String getArtistName() {
+    public static String getArtistName() {
         if (mService != null) {
             try {
                 return mService.getArtistName();
@@ -442,7 +437,7 @@ public static final String getArtistName() {
     /**
      * @return The current album name.
      */
-    public static final String getAlbumName() {
+    public static String getAlbumName() {
         if (mService != null) {
             try {
                 return mService.getAlbumName();
@@ -455,7 +450,7 @@ public static final String getAlbumName() {
     /**
      * @return The current album Id.
      */
-    public static final long getCurrentAlbumId() {
+    public static long getCurrentAlbumId() {
         if (mService != null) {
             try {
                 return mService.getAlbumId();
@@ -468,7 +463,7 @@ public static final long getCurrentAlbumId() {
     /**
      * @return The current song Id.
      */
-    public static final long getCurrentAudioId() {
+    public static long getCurrentAudioId() {
         if (mService != null) {
             try {
                 return mService.getAudioId();
@@ -481,7 +476,7 @@ public static final long getCurrentAudioId() {
     /**
      * @return The current Music Playback Track
      */
-    public static final MusicPlaybackTrack getCurrentTrack() {
+    public static MusicPlaybackTrack getCurrentTrack() {
         if (mService != null) {
             try {
                 return mService.getCurrentTrack();
@@ -494,7 +489,7 @@ public static final MusicPlaybackTrack getCurrentTrack() {
     /**
      * @return The Music Playback Track at the specified index
      */
-    public static final MusicPlaybackTrack getTrack(int index) {
+    public static MusicPlaybackTrack getTrack(int index) {
         if (mService != null) {
             try {
                 return mService.getTrack(index);
@@ -507,7 +502,7 @@ public static final MusicPlaybackTrack getTrack(int index) {
     /**
      * @return The next song Id.
      */
-    public static final long getNextAudioId() {
+    public static long getNextAudioId() {
         if (mService != null) {
             try {
                 return mService.getNextAudioId();
@@ -520,7 +515,7 @@ public static final long getNextAudioId() {
     /**
      * @return The previous song Id.
      */
-    public static final long getPreviousAudioId() {
+    public static long getPreviousAudioId() {
         if (mService != null) {
             try {
                 return mService.getPreviousAudioId();
@@ -533,7 +528,7 @@ public static final long getPreviousAudioId() {
     /**
      * @return The current artist Id.
      */
-    public static final long getCurrentArtistId() {
+    public static long getCurrentArtistId() {
         if (mService != null) {
             try {
                 return mService.getArtistId();
@@ -546,7 +541,7 @@ public static final long getCurrentArtistId() {
     /**
      * @return The audio session Id.
      */
-    public static final int getAudioSessionId() {
+    public static int getAudioSessionId() {
         if (mService != null) {
             try {
                 return mService.getAudioSessionId();
@@ -559,7 +554,7 @@ public static final int getAudioSessionId() {
     /**
      * @return The queue.
      */
-    public static final long[] getQueue() {
+    public static long[] getQueue() {
         try {
             if (mService != null) {
                 return mService.getQueue();
@@ -574,7 +569,7 @@ public static final int getAudioSessionId() {
      * @param position
      * @return the id of the track in the queue at the given position
      */
-    public static final long getQueueItemAtPosition(int position) {
+    public static long getQueueItemAtPosition(int position) {
         try {
             if (mService != null) {
                 return mService.getQueueItemAtPosition(position);
@@ -588,7 +583,7 @@ public static final long getQueueItemAtPosition(int position) {
     /**
      * @return the current queue size
      */
-    public static final int getQueueSize() {
+    public static int getQueueSize() {
         try {
             if (mService != null) {
                 return mService.getQueueSize();
@@ -602,7 +597,7 @@ public static final int getQueueSize() {
     /**
      * @return The position of the current track in the queue.
      */
-    public static final int getQueuePosition() {
+    public static int getQueuePosition() {
         try {
             if (mService != null) {
                 return mService.getQueuePosition();
@@ -627,7 +622,7 @@ public static void setQueuePosition(final int position) {
     /**
      * @return The queue history size
      */
-    public static final int getQueueHistorySize() {
+    public static int getQueueHistorySize() {
         if (mService != null) {
             try {
                 return mService.getQueueHistorySize();
@@ -640,7 +635,7 @@ public static final int getQueueHistorySize() {
     /**
      * @return The queue history position at the position
      */
-    public static final int getQueueHistoryPosition(int position) {
+    public static int getQueueHistoryPosition(int position) {
         if (mService != null) {
             try {
                 return mService.getQueueHistoryPosition(position);
@@ -653,7 +648,7 @@ public static final int getQueueHistoryPosition(int position) {
     /**
      * @return The queue history
      */
-    public static final int[] getQueueHistoryList() {
+    public static int[] getQueueHistoryList() {
         if (mService != null) {
             try {
                 return mService.getQueueHistoryList();
@@ -667,7 +662,7 @@ public static final int getQueueHistoryPosition(int position) {
      * @param id The ID of the track to remove.
      * @return removes track from a playlist or the queue.
      */
-    public static final int removeTrack(final long id) {
+    public static int removeTrack(final long id) {
         try {
             if (mService != null) {
                 return mService.removeTrack(id);
@@ -684,7 +679,7 @@ public static final int removeTrack(final long id) {
      * @param position The position of the song
      * @return true if successful, false otherwise
      */
-    public static final boolean removeTrackAtPosition(final long id, final int position) {
+    public static boolean removeTrackAtPosition(final long id, final int position) {
         try {
             if (mService != null) {
                 return mService.removeTrackAtPosition(id, position);
@@ -698,7 +693,7 @@ public static final boolean removeTrackAtPosition(final long id, final int posit
      * @param cursor The {@link Cursor} used to perform our query.
      * @return The song list for a MIME type.
      */
-    public static final long[] getSongListForCursor(Cursor cursor) {
+    public static long[] getSongListForCursor(Cursor cursor) {
         if (cursor == null) {
             return sEmptyList;
         }
@@ -725,7 +720,7 @@ public static final boolean removeTrackAtPosition(final long id, final int posit
      * @param id      The ID of the artist.
      * @return The song list for an artist.
      */
-    public static final long[] getSongListForArtist(final Context context, final long id) {
+    public static long[] getSongListForArtist(final Context context, final long id) {
         if (isPermissionGranted(context) == false) {
             return sEmptyList;
         }
@@ -752,7 +747,7 @@ public static final boolean removeTrackAtPosition(final long id, final int posit
      * @param id      The ID of the album.
      * @return The song list for an album.
      */
-    public static final long[] getSongListForAlbum(final Context context, final long id) {
+    public static long[] getSongListForAlbum(final Context context, final long id) {
         if (isPermissionGranted(context) == false) {
             return sEmptyList;
         }
@@ -793,7 +788,7 @@ public static void playArtist(final Context context, final long artistId, int po
      * @param id      The ID of the genre.
      * @return The song list for an genre.
      */
-    public static final long[] getSongListForGenre(final Context context, final long id) {
+    public static long[] getSongListForGenre(final Context context, final long id) {
         final String[] projection = new String[]{
                 BaseColumns._ID
         };
@@ -912,7 +907,7 @@ public static void shuffleAll(final Context context) {
      * @param name    The name of the playlist.
      * @return The ID for a playlist.
      */
-    public static final long getIdForPlaylist(final Context context, final String name) {
+    public static long getIdForPlaylist(final Context context, final String name) {
         if (isPermissionGranted(context) == false) {
             return -1;
         }
@@ -940,7 +935,7 @@ public static final long getIdForPlaylist(final Context context, final String na
      * @param id      The id of the playlist.
      * @return The name for a playlist.
      */
-    public static final String getNameForPlaylist(final Context context, final long id) {
+    public static String getNameForPlaylist(final Context context, final long id) {
         if (isPermissionGranted(context) == false) {
             return null;
         }
@@ -971,7 +966,7 @@ public static final String getNameForPlaylist(final Context context, final long
      * @param name    The name of the artist.
      * @return The ID for an artist.
      */
-    public static final long getIdForArtist(final Context context, final String name) {
+    public static long getIdForArtist(final Context context, final String name) {
         if (isPermissionGranted(context) == false) {
             return -1;
         }
@@ -1002,7 +997,7 @@ public static final long getIdForArtist(final Context context, final String name
      * @param artistName The name of the artist
      * @return The ID for an album.
      */
-    public static final long getIdForAlbum(final Context context, final String albumName,
+    public static long getIdForAlbum(final Context context, final String albumName,
                                            final String artistName) {
         if (isPermissionGranted(context) == false) {
             return -1;
@@ -1063,7 +1058,7 @@ public static void makeInsertItems(final long[] ids, final int offset, int len,
      * @param name    The name of the new playlist.
      * @return A new playlist ID.
      */
-    public static final long createPlaylist(final Context context, final String name) {
+    public static long createPlaylist(final Context context, final String name) {
         if (name != null && name.length() > 0) {
             if (isPermissionGranted(context) == false) {
                 return -1;
@@ -1099,7 +1094,6 @@ public static final long createPlaylist(final Context context, final String name
     public static void clearPlaylist(final Context context, final int playlistId) {
         final Uri uri = MediaStore.Audio.Playlists.Members.getContentUri("external", playlistId);
         context.getContentResolver().delete(uri, null, null);
-        return;
     }
 
     /**
@@ -1159,7 +1153,7 @@ public static void addToPlaylist(final Context context, final long[] ids, final
         }
         final String message = context.getResources().getQuantityString(
                 R.plurals.NNNtrackstoplaylist, numinserted, numinserted);
-        Toast.makeText((Activity) context, message, Toast.LENGTH_SHORT).show();
+        Toast.makeText(context, message, Toast.LENGTH_SHORT).show();
         playlistChanged();
     }
 
@@ -1179,7 +1173,7 @@ public static void removeFromPlaylist(final Context context, final long id,
         });
         final String message = context.getResources().getQuantityString(
                 R.plurals.NNNtracksfromplaylist, 1, 1);
-        Toast.makeText((Activity) context, message, Toast.LENGTH_SHORT).show();
+        Toast.makeText(context, message, Toast.LENGTH_SHORT).show();
         playlistChanged();
     }
 
@@ -1195,7 +1189,7 @@ public static void addToQueue(final Context context, final long[] list, long sou
         try {
             mService.enqueue(list, MusicPlaybackService.LAST, sourceId, sourceType.mId);
             final String message = makeLabel(context, R.plurals.NNNtrackstoqueue, list.length);
-            Toast.makeText((Activity) context, message, Toast.LENGTH_SHORT).show();
+            Toast.makeText(context, message, Toast.LENGTH_SHORT).show();
         } catch (final RemoteException ignored) {
         }
     }
@@ -1233,7 +1227,7 @@ public static void setRingtone(final Context context, final long id) {
                 Settings.System.putString(resolver, Settings.System.RINGTONE, uri.toString());
                 final String message = context.getString(R.string.set_as_ringtone,
                         cursor.getString(2));
-                Toast.makeText((Activity) context, message, Toast.LENGTH_SHORT).show();
+                Toast.makeText(context, message, Toast.LENGTH_SHORT).show();
             }
         } finally {
             if (cursor != null) {
@@ -1248,7 +1242,7 @@ public static void setRingtone(final Context context, final long id) {
      * @param id      The id of the album.
      * @return The song count for an album.
      */
-    public static final int getSongCountForAlbumInt(final Context context, final long id) {
+    public static int getSongCountForAlbumInt(final Context context, final long id) {
         int songCount = 0;
         if (id == -1) {
             return songCount;
@@ -1282,7 +1276,7 @@ public static final int getSongCountForAlbumInt(final Context context, final lon
      * @param playlistId the id of the playlist
      * @return the # of songs in the playlist
      */
-    public static final int getSongCountForPlaylist(final Context context, final long playlistId) {
+    public static int getSongCountForPlaylist(final Context context, final long playlistId) {
         Cursor c = context.getContentResolver().query(
                 MediaStore.Audio.Playlists.Members.getContentUri("external", playlistId),
                 new String[]{BaseColumns._ID}, MusicUtils.MUSIC_ONLY_SELECTION, null, null);
@@ -1300,7 +1294,7 @@ public static final int getSongCountForPlaylist(final Context context, final lon
         return 0;
     }
 
-    public static final AlbumArtistDetails getAlbumArtDetails(final Context context, final long trackId) {
+    public static AlbumArtistDetails getAlbumArtDetails(final Context context, final long trackId) {
         if (isPermissionGranted(context) == false) {
             return null;
         }
@@ -1340,7 +1334,7 @@ public static final AlbumArtistDetails getAlbumArtDetails(final Context context,
      * @param id      The id of the album.
      * @return The release date for an album.
      */
-    public static final String getReleaseDateForAlbum(final Context context, final long id) {
+    public static String getReleaseDateForAlbum(final Context context, final long id) {
         if (id == -1) {
             return null;
         }
@@ -1368,7 +1362,7 @@ public static final String getReleaseDateForAlbum(final Context context, final l
     /**
      * @return The path to the currently playing file as {@link String}
      */
-    public static final String getFilePath() {
+    public static String getFilePath() {
         try {
             if (mService != null) {
                 return mService.getPath();
@@ -1397,7 +1391,7 @@ public static void moveQueueItem(final int from, final int to) {
      * @param playlistId The playlist Id
      * @return The track list for a playlist
      */
-    public static final long[] getSongListForPlaylist(final Context context, final long playlistId) {
+    public static long[] getSongListForPlaylist(final Context context, final long playlistId) {
         Cursor cursor = PlaylistSongLoader.makePlaylistSongCursor(context, playlistId);
 
         if (cursor != null) {
@@ -1427,7 +1421,7 @@ public static void playPlaylist(final Context context, final long playlistId, bo
      * @param type    The Smart Playlist Type
      * @return The song list for the last added playlist
      */
-    public static final long[] getSongListForSmartPlaylist(final Context context,
+    public static long[] getSongListForSmartPlaylist(final Context context,
                                                            final SmartPlaylistType type) {
         Cursor cursor = null;
         try {
@@ -1556,7 +1550,7 @@ public static void seekRelative(final long deltaInMs) {
     /**
      * @return The current position time of the track
      */
-    public static final long position() {
+    public static long position() {
         if (mService != null) {
             try {
                 return mService.position();
@@ -1574,7 +1568,7 @@ public static final long position() {
     /**
      * @return The total length of the current track
      */
-    public static final long duration() {
+    public static long duration() {
         if (mService != null) {
             try {
                 return mService.duration();
@@ -1665,7 +1659,7 @@ public static void deleteTracks(final Context context, final long[] list) {
 
         final String message = makeLabel(context, R.plurals.NNNtracksdeleted, list.length);
 
-        Toast.makeText((Activity) context, message, Toast.LENGTH_SHORT).show();
+        Toast.makeText(context, message, Toast.LENGTH_SHORT).show();
         // We deleted a number of tracks, which could affect any number of
         // things
         // in the media content domain, so update everything.
@@ -1788,7 +1782,7 @@ public static boolean isSortOrderDesending(String sortOrder) {
      * @param items collection of items
      * @return comma-separted list of items
      */
-    public static final <E> String buildCollectionAsString(Collection<E> items) {
+    public static <E> String buildCollectionAsString(Collection<E> items) {
         Iterator<E> iterator = items.iterator();
         StringBuilder str = new StringBuilder();
         if (iterator.hasNext()) {
@@ -1818,7 +1812,7 @@ public ServiceBinder(final ServiceConnection callback, final Context context) {
 
         @Override
         public void onServiceConnected(final ComponentName className, final IBinder service) {
-            mService = IElevenService.Stub.asInterface(service);
+            mService = ITwelveService.Stub.asInterface(service);
             if (mCallback != null) {
                 mCallback.onServiceConnected(className, service);
             }
diff --git a/twelve/src/main/java/com/dolzzo/twelve/utils/PlaylistPopupMenuHelper.java b/twelve/src/main/java/com/dolzzo/twelve/utils/PlaylistPopupMenuHelper.java
index f057810952..841ce23aae 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/utils/PlaylistPopupMenuHelper.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/utils/PlaylistPopupMenuHelper.java
@@ -90,7 +90,7 @@ protected long getId() {
      * @param playlistId   The ID of the playlist being deleted
      * @return A new {@link AlertDialog} used to delete playlists
      */
-    private final AlertDialog buildDeleteDialog(final long playlistId, final String playlistName) {
+    private AlertDialog buildDeleteDialog(final long playlistId, final String playlistName) {
         return new AlertDialog.Builder(mActivity)
                 .setTitle(mActivity.getString(R.string.delete_dialog_title, playlistName))
                 .setPositiveButton(R.string.context_menu_delete, new OnClickListener() {
diff --git a/twelve/src/main/java/com/dolzzo/twelve/utils/PopupMenuHelper.java b/twelve/src/main/java/com/dolzzo/twelve/utils/PopupMenuHelper.java
index 1d4b6c678f..b6d0a2f031 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/utils/PopupMenuHelper.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/utils/PopupMenuHelper.java
@@ -389,7 +389,7 @@ public void onMenuModeChange(MenuBuilder menu) {
     }
 
     // the different types of pop up menus
-    public static enum PopupMenuType {
+    public enum PopupMenuType {
         Artist,
         Album,
         Song,
diff --git a/twelve/src/main/java/com/dolzzo/twelve/utils/PreferenceUtils.java b/twelve/src/main/java/com/dolzzo/twelve/utils/PreferenceUtils.java
index d06ec375c4..b01ef2e881 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/utils/PreferenceUtils.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/utils/PreferenceUtils.java
@@ -18,6 +18,7 @@
 import android.content.SharedPreferences.OnSharedPreferenceChangeListener;
 import android.os.AsyncTask;
 import android.preference.PreferenceManager;
+import android.support.v4.content.ContextCompat;
 
 import com.dolzzo.twelve.R;
 import com.dolzzo.twelve.ui.fragments.AlbumFragment;
@@ -25,6 +26,8 @@
 import com.dolzzo.twelve.ui.fragments.SongFragment;
 import com.dolzzo.twelve.ui.fragments.phone.MusicBrowserPhoneFragment;
 
+import java.lang.ref.WeakReference;
+
 /**
  * A collection of helpers designed to get and set various preferences across
  * Apollo.
@@ -84,7 +87,7 @@
     // show/hide album art on lockscreen
     public static final String SHOW_ALBUM_ART_ON_LOCKSCREEN = "lockscreen_album_art";
 
-    private static PreferenceUtils sInstance;
+    private static WeakReference<PreferenceUtils> sInstance;
 
     private final SharedPreferences mPreferences;
 
@@ -101,11 +104,17 @@ public PreferenceUtils(final Context context) {
      * @param context The {@link Context} to use.
      * @return A singleton of this class
      */
-    public static final PreferenceUtils getInstance(final Context context) {
-        if (sInstance == null) {
-            sInstance = new PreferenceUtils(context.getApplicationContext());
+    public static synchronized PreferenceUtils getInstance(final Context context) {
+        if (sInstance != null) {
+            PreferenceUtils ref = sInstance.get();
+            if (ref != null) {
+                return ref;
+            }
         }
-        return sInstance;
+
+        PreferenceUtils ref = new PreferenceUtils(context.getApplicationContext());
+        sInstance = new WeakReference<PreferenceUtils>(ref);
+        return ref;
     }
 
     /**
@@ -171,7 +180,7 @@ protected Void doInBackground(final Void... unused) {
      */
     public final int getDefaultThemeColor(final Context context) {
         return mPreferences.getInt(DEFAULT_THEME_COLOR,
-                context.getResources().getColor(R.color.blue));
+                ContextCompat.getColor(context, R.color.blue));
     }
 
     /**
@@ -324,10 +333,10 @@ public long getLastAddedCutoff() {
     }
 
     /**
-     * @parm lastAddedMillis timestamp in millis used as a cutoff for last added playlist
+     * @param lastAddedMillis timestamp in millis used as a cutoff for last added playlist
      */
     public void setLastAddedCutoff(long lastAddedMillis) {
-        mPreferences.edit().putLong(LAST_ADDED_CUTOFF, lastAddedMillis).commit();
+        mPreferences.edit().putLong(LAST_ADDED_CUTOFF, lastAddedMillis).apply();
     }
 
     /**
diff --git a/twelve/src/main/java/com/dolzzo/twelve/utils/ShakeDetector.java b/twelve/src/main/java/com/dolzzo/twelve/utils/ShakeDetector.java
index 4949d168a7..353901d1db 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/utils/ShakeDetector.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/utils/ShakeDetector.java
@@ -56,7 +56,7 @@ public ShakeDetector(Listener listener) {
     /**
      * Starts listening for shakes on devices with appropriate hardware.
      *
-     * @returns true if the device supports shake detection.
+     * @return true if the device supports shake detection.
      */
     public boolean start(SensorManager sensorManager) {
         // Already started?
diff --git a/twelve/src/main/java/com/dolzzo/twelve/utils/SrtManager.java b/twelve/src/main/java/com/dolzzo/twelve/utils/SrtManager.java
index d72d2dfc58..09504c809d 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/utils/SrtManager.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/utils/SrtManager.java
@@ -15,13 +15,11 @@
 */
 package com.dolzzo.twelve.utils;
 
-import android.media.MediaPlayer;
 import android.os.Handler;
 import android.os.HandlerThread;
 import android.os.Message;
 import android.util.Log;
 
-import com.google.android.exoplayer2.ExoPlayer;
 import com.google.android.exoplayer2.SimpleExoPlayer;
 
 import java.io.File;
diff --git a/twelve/src/main/java/com/dolzzo/twelve/widgets/AudioButton.java b/twelve/src/main/java/com/dolzzo/twelve/widgets/AudioButton.java
index d006c36e5c..8366871045 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/widgets/AudioButton.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/widgets/AudioButton.java
@@ -2,17 +2,17 @@
 
 import android.content.Context;
 import android.os.Build;
+import android.support.v7.widget.AppCompatImageButton;
 import android.text.TextUtils;
 import android.util.AttributeSet;
 import android.view.View;
 import android.view.View.OnClickListener;
 import android.view.View.OnLongClickListener;
-import android.widget.ImageButton;
 
 import com.dolzzo.twelve.R;
 import com.dolzzo.twelve.utils.ApolloUtils;
 
-public abstract class AudioButton extends ImageButton implements OnClickListener, OnLongClickListener {
+public abstract class AudioButton extends AppCompatImageButton implements OnClickListener, OnLongClickListener {
     public static float ACTIVE_ALPHA = 1.0f;
     public static float INACTIVE_ALPHA = 0.4f;
 
diff --git a/twelve/src/main/java/com/dolzzo/twelve/widgets/LayoutSuppressingImageView.java b/twelve/src/main/java/com/dolzzo/twelve/widgets/LayoutSuppressingImageView.java
index 5f65d70798..977e6f4038 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/widgets/LayoutSuppressingImageView.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/widgets/LayoutSuppressingImageView.java
@@ -12,6 +12,7 @@
 package com.dolzzo.twelve.widgets;
 
 import android.content.Context;
+import android.support.v7.widget.AppCompatImageView;
 import android.util.AttributeSet;
 import android.widget.ImageView;
 
@@ -20,7 +21,7 @@
  * requestLayout() to its parent, taking advantage of knowing that image size
  * won't change once set.
  */
-public class LayoutSuppressingImageView extends ImageView {
+public class LayoutSuppressingImageView extends AppCompatImageView {
 
     /**
      * @param context The {@link Context} to use
diff --git a/twelve/src/main/java/com/dolzzo/twelve/widgets/LetterTileDrawable.java b/twelve/src/main/java/com/dolzzo/twelve/widgets/LetterTileDrawable.java
index 325cd90af4..0170b7ed79 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/widgets/LetterTileDrawable.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/widgets/LetterTileDrawable.java
@@ -28,6 +28,7 @@
 import android.graphics.Rect;
 import android.graphics.Typeface;
 import android.graphics.drawable.Drawable;
+import android.support.v4.content.ContextCompat;
 import android.text.TextUtils;
 
 import com.dolzzo.twelve.R;
@@ -80,15 +81,15 @@ public LetterTileDrawable(final Context context) {
         mPaint.setDither(true);
         res = context.getResources();
 
-        initializeStaticVariables(res);
+        initializeStaticVariables(res, context);
     }
 
-    private static synchronized void initializeStaticVariables(final Resources res) {
+    private static synchronized void initializeStaticVariables(final Resources res, final Context context) {
         if (sColors == null) {
             sColors = res.obtainTypedArray(R.array.letter_tile_colors);
             sVibrantDarkColors = res.obtainTypedArray(R.array.letter_tile_vibrant_dark_colors);
-            sDefaultColor = res.getColor(R.color.letter_tile_default_color);
-            sTileFontColor = res.getColor(R.color.letter_tile_font_color);
+            sDefaultColor = ContextCompat.getColor(context, R.color.letter_tile_default_color);
+            sTileFontColor =  ContextCompat.getColor(context, R.color.letter_tile_font_color);
             sLetterToTileRatio = res.getFraction(R.dimen.letter_to_tile_ratio, 1, 1);
             DEFAULT_ARTIST = BitmapFactory.decodeResource(res, R.drawable.ic_artist);
             DEFAULT_ARTIST_LARGE = BitmapFactory.decodeResource(res, R.drawable.ic_artist_lg);
@@ -202,7 +203,7 @@ private static void drawBitmap(final Bitmap bitmap, final int width, final int h
      */
     public static BitmapWithColors createDefaultBitmap(Context context, String identifier,
                                                        ImageType type, boolean isCircle, boolean smallArtwork) {
-        initializeStaticVariables(context.getResources());
+        initializeStaticVariables(context.getResources(), context);
 
         identifier = MusicUtils.getTrimmedName(identifier);
 
diff --git a/twelve/src/main/java/com/dolzzo/twelve/widgets/PlayPauseButton.java b/twelve/src/main/java/com/dolzzo/twelve/widgets/PlayPauseButton.java
index 1d34d9796b..495e018482 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/widgets/PlayPauseButton.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/widgets/PlayPauseButton.java
@@ -16,6 +16,7 @@
 import android.animation.Animator;
 import android.content.Context;
 import android.os.Build;
+import android.support.v7.widget.AppCompatImageView;
 import android.text.TextUtils;
 import android.util.AttributeSet;
 import android.view.View;
@@ -33,7 +34,7 @@
  *
  * @author Andrew Neal (andrewdneal@gmail.com)
  */
-public class PlayPauseButton extends ImageButton implements OnClickListener, OnLongClickListener {
+public class PlayPauseButton extends AppCompatImageView implements OnClickListener, OnLongClickListener {
 
     /**
      * Play button theme resource
diff --git a/twelve/src/main/java/com/dolzzo/twelve/widgets/PopupMenuButton.java b/twelve/src/main/java/com/dolzzo/twelve/widgets/PopupMenuButton.java
index a9d1dd68ba..7884ec2323 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/widgets/PopupMenuButton.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/widgets/PopupMenuButton.java
@@ -18,13 +18,14 @@
 
 import android.content.Context;
 import android.os.Build;
+import android.support.v7.widget.AppCompatImageView;
 import android.util.AttributeSet;
 import android.view.View;
 import android.widget.ImageView;
 
 import com.dolzzo.twelve.R;
 
-public class PopupMenuButton extends ImageView implements IPopupMenuCallback,
+public class PopupMenuButton extends AppCompatImageView implements IPopupMenuCallback,
         View.OnClickListener {
     protected int mPosition = -1;
     protected IListener mClickListener = null;
@@ -32,7 +33,7 @@
     public PopupMenuButton(Context context, AttributeSet attrs) {
         super(context, attrs);
 
-        setScaleType(ScaleType.CENTER_INSIDE);
+        setScaleType(ImageView.ScaleType.CENTER_INSIDE);
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
             setBackground(getResources().getDrawable(R.drawable.selectable_background_light));
         } else {
diff --git a/twelve/src/main/java/com/dolzzo/twelve/widgets/RepeatingImageButton.java b/twelve/src/main/java/com/dolzzo/twelve/widgets/RepeatingImageButton.java
index 92010a4fe6..1d717adb37 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/widgets/RepeatingImageButton.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/widgets/RepeatingImageButton.java
@@ -14,23 +14,23 @@
 import android.content.Context;
 import android.os.Build;
 import android.os.SystemClock;
+import android.support.v7.widget.AppCompatImageButton;
 import android.util.AttributeSet;
 import android.view.KeyEvent;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.View.OnClickListener;
-import android.widget.ImageButton;
 
 import com.dolzzo.twelve.R;
 import com.dolzzo.twelve.utils.ApolloUtils;
 import com.dolzzo.twelve.utils.MusicUtils;
 
 /**
- * A {@link ImageButton} that will repeatedly call a 'listener' method as long
+ * A {@link AppCompatImageButton} that will repeatedly call a 'listener' method as long
  * as the button is pressed, otherwise functions like a typecal
- * {@link ImageButton}
+ * {@link AppCompatImageButton}
  */
-public class RepeatingImageButton extends ImageButton implements OnClickListener {
+public class RepeatingImageButton extends AppCompatImageButton implements OnClickListener {
 
     private static final long sInterval = 400;
 
@@ -89,7 +89,6 @@ public void onClick(final View view) {
      * interval in milliseconds with which it will be called.
      *
      * @param l        The listener that will be called
-     * @param interval The interval in milliseconds for calls
      */
     public void setRepeatListener(final RepeatListener l) {
         mListener = l;
diff --git a/twelve/src/main/java/com/dolzzo/twelve/widgets/ViewPagerTabStrip.java b/twelve/src/main/java/com/dolzzo/twelve/widgets/ViewPagerTabStrip.java
index 2f0c49b270..735a611532 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/widgets/ViewPagerTabStrip.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/widgets/ViewPagerTabStrip.java
@@ -20,6 +20,7 @@
 import android.content.res.Resources;
 import android.graphics.Canvas;
 import android.graphics.Paint;
+import android.support.v4.content.ContextCompat;
 import android.util.AttributeSet;
 import android.view.View;
 import android.widget.LinearLayout;
@@ -43,8 +44,8 @@ public ViewPagerTabStrip(Context context, AttributeSet attrs) {
 
         mSelectedUnderlineThickness =
                 res.getDimensionPixelSize(R.dimen.tab_selected_underline_height);
-        int underlineColor = res.getColor(R.color.tab_selected_underline_color);
-        int backgroundColor = res.getColor(R.color.header_action_bar_color);
+        int underlineColor = ContextCompat.getColor(context, R.color.tab_selected_underline_color);
+        int backgroundColor = ContextCompat.getColor(context, R.color.header_action_bar_color);
 
         mSelectedUnderlinePaint = new Paint();
         mSelectedUnderlinePaint.setColor(underlineColor);
diff --git a/twelve/src/main/java/com/dolzzo/twelve/widgets/VisualizerView.java b/twelve/src/main/java/com/dolzzo/twelve/widgets/VisualizerView.java
index ec36dc74ec..74b3598ad3 100755
--- a/twelve/src/main/java/com/dolzzo/twelve/widgets/VisualizerView.java
+++ b/twelve/src/main/java/com/dolzzo/twelve/widgets/VisualizerView.java
@@ -24,6 +24,7 @@
 import android.media.audiofx.Visualizer;
 import android.os.AsyncTask;
 import android.os.Build;
+import android.support.v4.content.ContextCompat;
 import android.util.AttributeSet;
 import android.view.View;
 
@@ -135,7 +136,7 @@ protected void onDraw(Canvas canvas) {
     }
 
     public void initialize(Context context) {
-        mColor = context.getResources().getColor(R.color.visualizer_fill_color);
+        mColor = ContextCompat.getColor(context, R.color.visualizer_fill_color);
 
         mPaint = new Paint();
         mPaint.setAntiAlias(true);
diff --git a/twelve/src/main/res/layout/list_item_queue.xml b/twelve/src/main/res/layout/list_item_queue.xml
index b3a41b957f..05ef08c5a6 100755
--- a/twelve/src/main/res/layout/list_item_queue.xml
+++ b/twelve/src/main/res/layout/list_item_queue.xml
@@ -64,8 +64,7 @@
         <include
             layout="@layout/play_pause_progress_button"
             android:layout_width="@dimen/list_item_progress_width"
-            android:layout_height="@dimen/list_item_progress_height"
-            android:layout_centerVertical="true" />
+            android:layout_height="@dimen/list_item_progress_height" />
     </FrameLayout>
 
     <com.dolzzo.twelve.widgets.PopupMenuButton
diff --git a/twelve/src/main/res/mipmap-hdpi/ic_launcher_eleven.png b/twelve/src/main/res/mipmap-hdpi/ic_launcher_twelve.png
similarity index 100%
rename from twelve/src/main/res/mipmap-hdpi/ic_launcher_eleven.png
rename to twelve/src/main/res/mipmap-hdpi/ic_launcher_twelve.png
diff --git a/twelve/src/main/res/mipmap-mdpi/ic_launcher_eleven.png b/twelve/src/main/res/mipmap-mdpi/ic_launcher_twelve.png
similarity index 100%
rename from twelve/src/main/res/mipmap-mdpi/ic_launcher_eleven.png
rename to twelve/src/main/res/mipmap-mdpi/ic_launcher_twelve.png
diff --git a/twelve/src/main/res/mipmap-xhdpi/ic_launcher_eleven.png b/twelve/src/main/res/mipmap-xhdpi/ic_launcher_twelve.png
similarity index 100%
rename from twelve/src/main/res/mipmap-xhdpi/ic_launcher_eleven.png
rename to twelve/src/main/res/mipmap-xhdpi/ic_launcher_twelve.png
diff --git a/twelve/src/main/res/mipmap-xxhdpi/ic_launcher_eleven.png b/twelve/src/main/res/mipmap-xxhdpi/ic_launcher_twelve.png
similarity index 100%
rename from twelve/src/main/res/mipmap-xxhdpi/ic_launcher_eleven.png
rename to twelve/src/main/res/mipmap-xxhdpi/ic_launcher_twelve.png
diff --git a/twelve/src/main/res/mipmap-xxxhdpi/ic_launcher_eleven.png b/twelve/src/main/res/mipmap-xxxhdpi/ic_launcher_twelve.png
similarity index 100%
rename from twelve/src/main/res/mipmap-xxxhdpi/ic_launcher_eleven.png
rename to twelve/src/main/res/mipmap-xxxhdpi/ic_launcher_twelve.png
