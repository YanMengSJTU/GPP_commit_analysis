diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadAction.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadAction.java
index e9868ceea0..2e087493ef 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadAction.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadAction.java
@@ -142,6 +142,7 @@ public static void serializeToStream(DownloadAction action, OutputStream output)
   public final Uri uri;
   /** Whether this is a remove action. If false, this is a download action. */
   public final boolean isRemoveAction;
+  public final boolean paused;
   /** Custom data for this action. May be empty. */
   public final byte[] data;
 
@@ -153,11 +154,12 @@ public static void serializeToStream(DownloadAction action, OutputStream output)
    * @param data Optional custom data for this action.
    */
   protected DownloadAction(
-      String type, int version, Uri uri, boolean isRemoveAction, @Nullable byte[] data) {
+      String type, int version, Uri uri, boolean isRemoveAction, boolean paused, @Nullable byte[] data) {
     this.type = type;
     this.version = version;
     this.uri = uri;
     this.isRemoveAction = isRemoveAction;
+    this.paused = paused;
     this.data = data != null ? data : Util.EMPTY_BYTE_ARRAY;
   }
 
@@ -201,6 +203,7 @@ public boolean equals(@Nullable Object o) {
         && version == that.version
         && uri.equals(that.uri)
         && isRemoveAction == that.isRemoveAction
+        && paused == that.paused
         && Arrays.equals(data, that.data);
   }
 
@@ -208,6 +211,7 @@ public boolean equals(@Nullable Object o) {
   public int hashCode() {
     int result = uri.hashCode();
     result = 31 * result + (isRemoveAction ? 1 : 0);
+    result = 31 * result + (paused ? 1 : 0);
     result = 31 * result + Arrays.hashCode(data);
     return result;
   }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadManager.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadManager.java
index 409f79f30b..a7e1d9d190 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadManager.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadManager.java
@@ -18,6 +18,7 @@
 import static com.google.android.exoplayer2.offline.DownloadManager.TaskState.STATE_CANCELED;
 import static com.google.android.exoplayer2.offline.DownloadManager.TaskState.STATE_COMPLETED;
 import static com.google.android.exoplayer2.offline.DownloadManager.TaskState.STATE_FAILED;
+import static com.google.android.exoplayer2.offline.DownloadManager.TaskState.STATE_PAUSED;
 import static com.google.android.exoplayer2.offline.DownloadManager.TaskState.STATE_QUEUED;
 import static com.google.android.exoplayer2.offline.DownloadManager.TaskState.STATE_STARTED;
 
@@ -228,6 +229,36 @@ public void stopDownloads() {
     }
   }
 
+  public void pauseDownload(DownloadAction action) {
+    Assertions.checkState(!released);
+    if (!downloadsStopped) {
+      for (int i = 0; i < activeDownloadTasks.size(); i++) {
+        Task task = activeDownloadTasks.get(i);
+        if (task.action.equals(action)) {
+          task.pause();
+        }
+      }
+      logd("Download is pausing");
+    }
+  }
+
+  public void resumeDownload(DownloadAction action) {
+    Assertions.checkState(!released);
+    if (!downloadsStopped) {
+      for (int i = 0; i < tasks.size(); i++) {
+        Task task = tasks.get(i);
+        if (task.action.equals(action)) {
+          Task resumedTask = task.getResumedTask();
+          replaceTask(task, resumedTask);
+          saveActions();
+          resumedTask.resume();
+        }
+      }
+      maybeStartTasks();
+      logd("Download is resuming");
+    }
+  }
+
   /**
    * Deserializes an action from {@code actionData}, and calls {@link
    * #handleAction(DownloadAction)}.
@@ -371,10 +402,9 @@ private void maybeStartTasks() {
         || activeDownloadTasks.size() == maxActiveDownloadTasks;
     for (int i = 0; i < tasks.size(); i++) {
       Task task = tasks.get(i);
-      if (!task.canStart()) {
+      if (!task.canStart())  {
         continue;
       }
-
       DownloadAction action = task.action;
       boolean isRemoveAction = action.isRemoveAction;
       if (!isRemoveAction && skipDownloadActions) {
@@ -431,12 +461,22 @@ private void onTaskStateChange(Task task) {
       tasks.remove(task);
       saveActions();
     }
+    if (task.isPaused()) {
+      Task pausedTask = task.getPausedTask();
+      replaceTask(task, pausedTask);
+      saveActions();
+    }
     if (stopped) {
       maybeStartTasks();
       maybeNotifyListenersIdle();
     }
   }
 
+  private void replaceTask(Task oldTask, Task newTask) {
+    int index = tasks.indexOf(oldTask);
+    tasks.add(index, newTask);
+  }
+
   private void notifyListenersTaskStateChange(Task task) {
     logd("Task state is changed", task);
     TaskState taskState = task.getDownloadState();
@@ -535,7 +575,7 @@ private static void logd(String message, Task task) {
      */
     @Documented
     @Retention(RetentionPolicy.SOURCE)
-    @IntDef({STATE_QUEUED, STATE_STARTED, STATE_COMPLETED, STATE_CANCELED, STATE_FAILED})
+    @IntDef({STATE_QUEUED, STATE_STARTED, STATE_COMPLETED, STATE_PAUSED, STATE_CANCELED, STATE_FAILED})
     public @interface State {}
     /** The task is waiting to be started. */
     public static final int STATE_QUEUED = 0;
@@ -543,10 +583,11 @@ private static void logd(String message, Task task) {
     public static final int STATE_STARTED = 1;
     /** The task completed. */
     public static final int STATE_COMPLETED = 2;
+    public static final int STATE_PAUSED = 3;
     /** The task was canceled. */
-    public static final int STATE_CANCELED = 3;
+    public static final int STATE_CANCELED = 4;
     /** The task failed. */
-    public static final int STATE_FAILED = 4;
+    public static final int STATE_FAILED = 5;
 
     /** Returns the state string for the given state value. */
     public static String getStateString(@State int state) {
@@ -557,6 +598,8 @@ public static String getStateString(@State int state) {
           return "STARTED";
         case STATE_COMPLETED:
           return "COMPLETED";
+        case STATE_PAUSED:
+          return "PAUSED";
         case STATE_CANCELED:
           return "CANCELED";
         case STATE_FAILED:
@@ -629,19 +672,22 @@ private TaskState(
       STATE_QUEUED,
       STATE_STARTED,
       STATE_COMPLETED,
+      STATE_PAUSED,
       STATE_CANCELED,
       STATE_FAILED,
       STATE_QUEUED_CANCELING,
+      STATE_STARTED_PAUSING,
       STATE_STARTED_CANCELING,
       STATE_STARTED_STOPPING
     })
     public @interface InternalState {}
+    public static final int STATE_QUEUED_CANCELING = 6;
     /** The task is about to be canceled. */
-    public static final int STATE_QUEUED_CANCELING = 5;
+    public static final int STATE_STARTED_PAUSING = 7;
     /** The task is about to be canceled. */
-    public static final int STATE_STARTED_CANCELING = 6;
+    public static final int STATE_STARTED_CANCELING = 8;
     /** The task is about to be stopped. */
-    public static final int STATE_STARTED_STOPPING = 7;
+    public static final int STATE_STARTED_STOPPING = 9;
 
     private final int id;
     private final DownloadManager downloadManager;
@@ -661,6 +707,23 @@ private Task(
       this.minRetryCount = minRetryCount;
     }
 
+    private Task getPausedTask() {
+      return withAction(action.pause());
+    }
+
+    private Task getResumedTask() {
+      return withAction(action.resume());
+    }
+
+    private Task withAction(DownloadAction action){
+      Task task = new Task(id, downloadManager, downloaderFactory, action, minRetryCount);
+      task.downloader = downloader;
+      task.thread = thread;
+      task.error = error;
+      task.currentState = currentState;
+      return task;
+    }
+
     public TaskState getDownloadState() {
       int externalState = getExternalState();
       return new TaskState(
@@ -682,6 +745,10 @@ public boolean isActive() {
           || currentState == STATE_STARTED_CANCELING;
     }
 
+    public boolean isPaused() {
+      return currentState == STATE_PAUSED;
+    }
+
     /**
      * Returns the estimated download percentage, or {@link C#PERCENTAGE_UNSET} if no estimate is
      * available.
@@ -724,11 +791,14 @@ private String getStateString() {
           return "CANCELING";
         case STATE_STARTED_STOPPING:
           return "STOPPING";
+        case STATE_STARTED_PAUSING:
+          return "PAUSING";
         case STATE_QUEUED:
         case STATE_STARTED:
         case STATE_COMPLETED:
         case STATE_CANCELED:
         case STATE_FAILED:
+        case STATE_PAUSED:
         default:
           return TaskState.getStateString(currentState);
       }
@@ -739,6 +809,8 @@ private int getExternalState() {
         case STATE_QUEUED_CANCELING:
           return STATE_QUEUED;
         case STATE_STARTED_CANCELING:
+        case STATE_STARTED_PAUSING:
+          return STATE_STARTED;
         case STATE_STARTED_STOPPING:
           return STATE_STARTED;
         case STATE_QUEUED:
@@ -746,6 +818,7 @@ private int getExternalState() {
         case STATE_COMPLETED:
         case STATE_CANCELED:
         case STATE_FAILED:
+        case STATE_PAUSED:
         default:
           return currentState;
       }
@@ -778,6 +851,17 @@ private void stop() {
       }
     }
 
+    private void pause() {
+      if (changeStateAndNotify(STATE_STARTED, STATE_STARTED_PAUSING)) {
+        logd("Pausing", this);
+        cancelDownload();
+      }
+    }
+
+    private void resume() {
+      changeStateAndNotify(STATE_PAUSED, STATE_QUEUED);
+    }
+
     private boolean changeStateAndNotify(@InternalState int oldState, @InternalState int newState) {
       return changeStateAndNotify(oldState, newState, null);
     }
@@ -813,7 +897,7 @@ public void run() {
         downloader = action.createDownloader(downloadManager.downloaderConstructorHelper);
         if (action.isRemoveAction) {
           downloader.remove();
-        } else {
+        } else if (!action.paused){
           int errorCount = 0;
           long errorPosition = C.LENGTH_UNSET;
           while (!Thread.interrupted()) {
@@ -841,8 +925,8 @@ public void run() {
       final Throwable finalError = error;
       downloadManager.handler.post(
           () -> {
-            if (changeStateAndNotify(
-                    STATE_STARTED, finalError != null ? STATE_FAILED : STATE_COMPLETED, finalError)
+            if (changeStateAndNotify(STATE_STARTED_PAUSING, STATE_PAUSED)
+                || changeStateAndNotify(STATE_STARTED, finalError != null ? STATE_FAILED : STATE_COMPLETED, finalError)
                 || changeStateAndNotify(STATE_STARTED_CANCELING, STATE_CANCELED)
                 || changeStateAndNotify(STATE_STARTED_STOPPING, STATE_QUEUED)) {
               return;
