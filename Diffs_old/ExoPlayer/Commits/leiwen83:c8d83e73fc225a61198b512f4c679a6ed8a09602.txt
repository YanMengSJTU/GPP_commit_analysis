diff --git a/library/src/main/java/com/google/android/exoplayer/ExoPlayer.java b/library/src/main/java/com/google/android/exoplayer/ExoPlayer.java
index 59bbe0487d..bdec60ce89 100644
--- a/library/src/main/java/com/google/android/exoplayer/ExoPlayer.java
+++ b/library/src/main/java/com/google/android/exoplayer/ExoPlayer.java
@@ -54,7 +54,7 @@
  * <p>The figure below shows the {@link ExoPlayer} threading model.</p>
  * <p align="center"><img src="doc-files/exoplayer-threading-model.png"
  *     alt="MediaPlayer state diagram"
- *     border="0"/></p>
+ *     border="0"></p>
  *
  * <ul>
  * <li>It is recommended that instances are created and accessed from a single application thread.
@@ -81,14 +81,14 @@
  * completing on the playback thread, as illustrated below.</p>
  * <p align="center"><img src="doc-files/exoplayer-state.png"
  *     alt="ExoPlayer state"
- *     border="0"/></p>
+ *     border="0"></p>
  *
  * <p>The possible playback state transitions are shown below. Transitions can be triggered either
  * by changes in the state of the {@link TrackRenderer}s being used, or as a result of
  * {@link #prepare(TrackRenderer[])}, {@link #stop()} or {@link #release()} being invoked.</p>
  * <p align="center"><img src="doc-files/exoplayer-playbackstate.png"
  *     alt="ExoPlayer playback state transitions"
- *     border="0"/></p>
+ *     border="0"></p>
  */
 public interface ExoPlayer {
 
diff --git a/library/src/main/java/com/google/android/exoplayer/TrackRenderer.java b/library/src/main/java/com/google/android/exoplayer/TrackRenderer.java
index fd6fc0e2d7..cf4504dc1d 100644
--- a/library/src/main/java/com/google/android/exoplayer/TrackRenderer.java
+++ b/library/src/main/java/com/google/android/exoplayer/TrackRenderer.java
@@ -27,7 +27,7 @@
  * transition.
  * <p align="center"><img src="doc-files/trackrenderer-states.png"
  *     alt="TrackRenderer state transitions"
- *     border="0"/></p>
+ *     border="0"></p>
  */
 public abstract class TrackRenderer implements ExoPlayerComponent {
 
diff --git a/library/src/main/java/com/google/android/exoplayer/audio/AudioTrack.java b/library/src/main/java/com/google/android/exoplayer/audio/AudioTrack.java
index 2c4b2d6488..39c4afe9a0 100644
--- a/library/src/main/java/com/google/android/exoplayer/audio/AudioTrack.java
+++ b/library/src/main/java/com/google/android/exoplayer/audio/AudioTrack.java
@@ -168,7 +168,7 @@ public InvalidAudioTrackTimestampException(String message) {
 
   /**
    * Whether to enable a workaround for an issue where an audio effect does not keep its session
-   * active across releasing/initializing a new audio track, on platform API version before 21.
+   * active across releasing/initializing a new audio track, on platform API version &lt; 21.
    * <p>
    * The flag must be set before creating a player.
    */
@@ -693,10 +693,10 @@ public boolean hasPendingData() {
   }
 
   /**
-   * Sets the playback parameters. Only available for SDK_INT >= 23
+   * Sets the playback parameters. Only available for SDK_INT &gt;= 23
    *
    * @throws UnsupportedOperationException if the Playback Parameters are not supported. That is,
-   *     SDK_INT < 23.
+   *     SDK_INT &lt; 23.
    */
   public void setPlaybackParams(PlaybackParams playbackParams) {
     audioTrackUtil.setPlaybackParameters(playbackParams);
@@ -1225,7 +1225,7 @@ public long getTimestampFramePosition() {
      *
      * @param playbackParams to be used by the {@link android.media.AudioTrack}.
      * @throws UnsupportedOperationException If Playback Parameters are not supported
-     *     (i.e. SDK_INT < 23).
+     *     (i.e. SDK_INT &lt; 23).
      */
     public void setPlaybackParameters(PlaybackParams playbackParams) {
       throw new UnsupportedOperationException();
diff --git a/library/src/main/java/com/google/android/exoplayer/drm/ExoMediaDrm.java b/library/src/main/java/com/google/android/exoplayer/drm/ExoMediaDrm.java
index e5596907b9..30855dfb86 100644
--- a/library/src/main/java/com/google/android/exoplayer/drm/ExoMediaDrm.java
+++ b/library/src/main/java/com/google/android/exoplayer/drm/ExoMediaDrm.java
@@ -99,17 +99,17 @@ KeyRequest getKeyRequest(byte[] scope, byte[] init, String mimeType, int keyType
   void provideProvisionResponse(byte[] response) throws DeniedByServerException;
 
   /**
-   * @see android.media.MediaDrm#queryKeyStatus(byte[]).
+   * @see android.media.MediaDrm#queryKeyStatus(byte[])
    */
   Map<String, String> queryKeyStatus(byte[] sessionId);
 
   /**
-   * @see android.media.MediaDrm#release().
+   * @see android.media.MediaDrm#release()
    */
   void release();
 
   /**
-   * @see android.media.MediaDrm#restoreKeys(byte[], byte[]).
+   * @see android.media.MediaDrm#restoreKeys(byte[], byte[])
    */
   void restoreKeys(byte[] sessionId, byte[] keySetId);
 
diff --git a/library/src/main/java/com/google/android/exoplayer/metadata/MetadataParser.java b/library/src/main/java/com/google/android/exoplayer/metadata/MetadataParser.java
index 1596abe777..e9ffdb4a88 100644
--- a/library/src/main/java/com/google/android/exoplayer/metadata/MetadataParser.java
+++ b/library/src/main/java/com/google/android/exoplayer/metadata/MetadataParser.java
@@ -33,11 +33,11 @@
   public boolean canParse(String mimeType);
 
   /**
-   * Parses metadata objects of type <T> from the provided binary data.
+   * Parses a metadata object from the provided binary data.
    *
    * @param data The raw binary data from which to parse the metadata.
    * @param size The size of the input data.
-   * @return @return A parsed metadata object of type <T>.
+   * @return @return A parsed metadata object.
    * @throws ParserException If a problem occurred parsing the data.
    */
   public T parse(byte[] data, int size) throws ParserException;
