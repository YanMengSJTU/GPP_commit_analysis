diff --git a/demo/src/main/AndroidManifest.xml b/demo/src/main/AndroidManifest.xml
index 5caa91f39c..c34f60915a 100644
--- a/demo/src/main/AndroidManifest.xml
+++ b/demo/src/main/AndroidManifest.xml
@@ -55,9 +55,6 @@
                 <category android:name="android.intent.category.LAUNCHER" />
             </intent-filter>
         </activity>
-        <activity
-            android:name=".main.MainActivity"
-            android:theme="@android:style/Theme.Holo.Light"></activity>
         <activity
             android:name=".main.SampleChooserActivity"
             android:configChanges="keyboardHidden"
diff --git a/demo/src/main/java/com/novo/adapters/VideoAdapter.java b/demo/src/main/java/com/novo/adapters/VideoAdapter.java
index 03f21a48b5..34a05b9eb9 100644
--- a/demo/src/main/java/com/novo/adapters/VideoAdapter.java
+++ b/demo/src/main/java/com/novo/adapters/VideoAdapter.java
@@ -76,12 +76,12 @@ public View getView(final int position, @Nullable View convertView, @NonNull Vie
         final ImageView ivDownload = (ImageView) v.findViewById(R.id.ivDownload);
         TextView tvTitle = (TextView) v.findViewById(R.id.tvTitle);
 
-         File dir = new File(Utils.getStorageDirectoryExtracts() + items.get(position).getVideoId());
+         File dir = new File(new Utils(activity).getStorageDirectoryExtracts() + items.get(position).getVideoId());
          File[] file = dir.listFiles();
         if(Utils.isFolderPresent(dir) && ZipHelper.searchFile(file, null)){
-            ivDownload.setImageResource(R.mipmap.ic_download_complete);
+            ivDownload.setImageResource(R.drawable.ic_delete_black_24dp);
         } else {
-            ivDownload.setImageResource(R.mipmap.ic_download);
+            ivDownload.setImageResource(R.drawable.ic_file_download_black_24dp);
         }
 
 
@@ -92,7 +92,7 @@ public View getView(final int position, @Nullable View convertView, @NonNull Vie
             @Override
             public void onClick(View v) {
                 if(listener != null) {
-                    final File dir = new File(Utils.getStorageDirectoryExtracts() + items.get(position).getVideoId());
+                    final File dir = new File(new Utils(activity).getStorageDirectoryExtracts() + items.get(position).getVideoId());
                     final File[] file = dir.listFiles();
                     if (Utils.isFolderPresent(dir) && ZipHelper.searchFile(file, null)) { // if file is present
                         AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(activity);
diff --git a/demo/src/main/java/com/novo/main/HomeActivity.java b/demo/src/main/java/com/novo/main/HomeActivity.java
index e567952137..2572517e20 100644
--- a/demo/src/main/java/com/novo/main/HomeActivity.java
+++ b/demo/src/main/java/com/novo/main/HomeActivity.java
@@ -54,6 +54,7 @@
     private HomeActivity activity;
     private BroadcastReceiver receiver;
     private List<VideoModel> videoModelsList;
+    private VideoAdapter adapter;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -87,23 +88,23 @@ public void onReceive(Context context, Intent intent) {
                         switch (downloadModel.getStatus()) {
                             case DOWNLOADING:
                                 if (downloadModel.getProgress() == -1) {
-                                    tvPercentage.setText("Downloading...");
+                                    tvPercentage.setText(R.string.downloading);
                                 } else {
                                     tvPercentage.setText(downloadModel.getProgress() + "%");
                                 }
                                 break;
                             case DOWNLOADED:
-                                tvPercentage.setText("Completed.");
+                                tvPercentage.setText(R.string.completed);
                                 break;
                             case UNZIPPING:
-                                tvPercentage.setText("Processing...");
+                                tvPercentage.setText(R.string.processing);
                                 break;
                             case UNZIPPED:
-                                tvPercentage.setText("Downloaded.");
-                                ivDownload.setImageResource(R.mipmap.ic_download_complete);
+                                tvPercentage.setText("");
+                                ivDownload.setImageResource(R.drawable.ic_delete_black_24dp);
                                 break;
                             case ERROR:
-                                tvPercentage.setText("Unable to download.");
+                                tvPercentage.setText(R.string.unable_to_download);
                                 break;
                         }
                         break;
@@ -129,7 +130,7 @@ private void initStuff() {
             public void onDone(final String response) {
                 Log.d(TAG, "onDone: " + response);
                 videoModelsList = getVideoModelsFromResponse(response);
-                VideoAdapter adapter = new VideoAdapter(activity, R.layout.row_videos_grid, videoModelsList);
+                adapter = new VideoAdapter(activity, R.layout.row_videos_grid, videoModelsList);
                 adapter.setItemListener(activity);
                 lvAll.setAdapter(adapter);
 
@@ -157,9 +158,10 @@ public void run() {
         btnLogin.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                if (!TextUtils.isEmpty(TokenManager.getToken())) {
-                    TokenManager.setToken(null);
+                if (!TextUtils.isEmpty(TokenManager.getToken())) { // logging user out
+                    LogoutHelper.cleanup(activity);
                     loginButtonTextUpdate();
+                    refreshList();
                     return;
                 }
                 Intent intent = new Intent(getApplicationContext(), LoginActivity.class);
@@ -170,6 +172,10 @@ public void onClick(View v) {
 
     }
 
+    private void refreshList() {
+        adapter.notifyDataSetChanged();
+    }
+
     @NonNull
     private List<VideoModel> getVideoModelsFromResponse(String response) {
         List<VideoModel> items = new ArrayList<>();
@@ -236,9 +242,9 @@ private void loginButtonTextUpdate() {
 
     @Override
     public void onVideoPlayClicked(final VideoModel model) {
-        File dir = new File(Utils.getStorageDirectoryExtracts() + model.getVideoId());
-        File[] file = dir.listFiles();
+        File dir = new File(new Utils(activity).getStorageDirectoryExtracts() + model.getVideoId());
         if (Utils.isFolderPresent(dir)) {
+            File[] file = dir.listFiles();
             // trying to find my file
             Log.d(TAG, "onVideoPlayClicked: " + ZipHelper.searchFile(file, null));
             ZipHelper.searchFile(file, new ZipHelper.FileListener() {
@@ -271,9 +277,9 @@ public void onDownloadClicked(VideoModel model, final ImageView ivDownload) {
             return;
         }
         // execute this when the downloader must be fired
-        final File sourceZipFile = new File(Utils.getStorageDirectoryZips() + videoId);
+        final File sourceZipFile = new File(new Utils(activity).getStorageDirectoryZips() + videoId);
         String fileNameWithOutExt = FilenameUtils.removeExtension(sourceZipFile.getName());
-        final File targetDirectory = new File(Utils.getStorageDirectoryExtracts() + fileNameWithOutExt);
+        final File targetDirectory = new File(new Utils(activity).getStorageDirectoryExtracts() + fileNameWithOutExt);
         targetDirectory.mkdir();
 
 
@@ -282,8 +288,8 @@ public void onDownloadClicked(VideoModel model, final ImageView ivDownload) {
                 .setVideoId(model.getVideoId())
                 .setVideoTitle(model.getName())
                 .setToken(TokenManager.getToken())
-//                .setLink("https://drmdemo-94ea7.firebaseapp.com/arc.zip")
-                .setLink(serverFileUrl)
+                .setLink("https://drmdemo-94ea7.firebaseapp.com/arc.zip") // todo hard code
+//                .setLink(serverFileUrl)
                 .setFilePath(sourceZipFile.getAbsolutePath())
                 .setTargetDirectoryPath(targetDirectory.getAbsolutePath())
                 .setCallBackIntent("progress_callback");
@@ -317,11 +323,13 @@ public void onDownloadClicked(VideoModel model, final ImageView ivDownload) {
 //        });
 //        downloadTask.execute(serverFileUrl);
 //
-        final File tempKeyPath = new File(Utils.getTempDirectoryExtracts() + videoId);
-        final DownloadTask keyTask = new DownloadTask(activity, TokenManager.getToken(), tempKeyPath.toString(), new DownloadTask.DownloadTaskListener() {
+        final File tempKeyFile = new File(new Utils(activity).getTempDirectoryExtracts() + videoId);
+        final DownloadTask keyTask = new DownloadTask(activity, "KEY", TokenManager.getToken(), tempKeyFile.getAbsolutePath(), new DownloadTask.DownloadTaskListener() {
             @Override
             public void onFileDownload() {
-                KeyWriter.writeByteToFile(KeyWriter.readByteToFileUnencryptedData(keyFileUrl, tempKeyPath), keyFileUrl);
+                KeyWriter writer = new KeyWriter(activity);
+                writer.writeByteToFile(writer.readByteToFileUnencryptedData(keyFileUrl, tempKeyFile), keyFileUrl);
+                writer.deleteTempKey(tempKeyFile);
             }
         });
         keyTask.execute(keyFileUrl);
@@ -331,7 +339,7 @@ public void onFileDownload() {
     public void onDeleteClicked(File directory, ImageView ivDownload) {
         try {
             FileUtils.deleteDirectory(directory);
-            ivDownload.setImageResource(R.mipmap.ic_download);
+            ivDownload.setImageResource(R.drawable.ic_file_download_black_24dp);
         } catch (IOException e) {
             e.printStackTrace();
             Log.d(TAG, "onDeleteClicked: unable to delete directory" + e.getLocalizedMessage());
diff --git a/demo/src/main/java/com/novo/main/LogoutHelper.java b/demo/src/main/java/com/novo/main/LogoutHelper.java
new file mode 100644
index 0000000000..84a163fcc7
--- /dev/null
+++ b/demo/src/main/java/com/novo/main/LogoutHelper.java
@@ -0,0 +1,21 @@
+package com.novo.main;
+
+import android.app.Activity;
+
+import com.google.android.exoplayer2.source.hls.KeyWriter;
+import com.google.android.exoplayer2.upstream.novo.TokenManager;
+import com.novo.util.Utils;
+
+/**
+ * Created by Hisham on 11/Sep/2017 - 20:44
+ */
+
+public class LogoutHelper {
+    public static void cleanup(Activity activity) {
+        TokenManager.setToken(null);
+        Utils utils = new Utils(activity);
+        utils.deleteAllDirectories();
+        KeyWriter writer = new KeyWriter(activity);
+        writer.deleteAllKeys();
+    }
+}
diff --git a/demo/src/main/java/com/novo/main/MainActivity.java b/demo/src/main/java/com/novo/main/MainActivity.java
deleted file mode 100644
index aa05e7fca7..0000000000
--- a/demo/src/main/java/com/novo/main/MainActivity.java
+++ /dev/null
@@ -1,240 +0,0 @@
-package com.novo.main;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.text.TextUtils;
-import android.util.Log;
-import android.view.View;
-import android.widget.Button;
-import android.widget.GridView;
-import android.widget.ImageView;
-import android.widget.Toast;
-
-import com.google.android.exoplayer2.source.hls.HLSUtils;
-import com.google.android.exoplayer2.source.hls.KeyWriter;
-import com.google.android.exoplayer2.upstream.novo.TokenManager;
-import com.google.gson.Gson;
-
-import org.apache.commons.io.FileUtils;
-import org.apache.commons.io.FilenameUtils;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.File;
-import java.io.IOException;
-import java.io.UnsupportedEncodingException;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-
-import com.novo.R;
-import com.novo.adapters.VideoAdapter;
-import com.novo.models.VideoModel;
-import com.novo.network.DownloadTask;
-import com.novo.network.EndPoints;
-import com.novo.network.ServerHit;
-import com.novo.network.ZipHelper;
-import com.novo.util.Utils;
-
-import static com.novo.util.Utils.TAG;
-
-public class MainActivity extends Activity implements VideoAdapter.ItemListener {
-
-    private Button btnLogin;
-    private GridView lvAll;
-
-    private void initStuff() {
-        btnLogin = (Button) findViewById(R.id.btnLogin);
-        lvAll = (GridView) findViewById(R.id.lvAll);
-        ServerHit.JSONTask task = new ServerHit.JSONTask(this, TokenManager.getToken(), "GET", null, null, new ServerHit.ServiceHitResponseListener() {
-            @Override
-            public void onDone(final String response) {
-                Log.d(TAG, "onDone: " + response);
-                VideoAdapter adapter = new VideoAdapter(MainActivity.this, R.layout.row_videos_grid, getVideoModelsFromResponse(response));
-                adapter.setItemListener(MainActivity.this);
-                lvAll.setAdapter(adapter);
-
-
-            }
-
-            @Override
-            public void onError(String error) {
-
-                runOnUiThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        String response = "[ {  \"thumbnail\" : \"http://35.154.11.202/VocabimateContentServer/thumbnails/thumbnail.jpg\",  \"name\" : \"Encrypted Stream - Open Policy\",  \"videoId\" : \"Gear_640x360_750k_open\"}, {  \"thumbnail\" : \"http://35.154.11.202/VocabimateContentServer/thumbnails/thumbnail.jpg\",  \"name\" : \"Encrypted Stream - Token Auth policy\",  \"videoId\" : \"Gear_640x360_750k_auth\"} ]";
-                        onDone(response);
-                    }
-                });
-
-
-            }
-        });
-
-        String url = EndPoints.getBaseUrl() + "VocabimateContentServer/webapi/video/fetchAll";
-        task.execute(url);
-
-        btnLogin.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                if (!TextUtils.isEmpty(TokenManager.getToken())) {
-                    TokenManager.setToken(null);
-                    loginButtonTextUpdate();
-                    return;
-                }
-                Intent intent = new Intent(getApplicationContext(), LoginActivity.class);
-                Bundle bundle = new Bundle();
-                startActivity(intent.putExtras(bundle));
-            }
-        });
-
-    }
-
-    @NonNull
-    private List<VideoModel> getVideoModelsFromResponse(String response) {
-        List<VideoModel> items = new ArrayList<>();
-        if (TextUtils.isEmpty(response)) {
-            return items;
-        }
-        try {
-            JSONArray array = new JSONArray(response);
-            for (int i = 0; i < array.length(); i++) {
-                JSONObject jsonObject = array.getJSONObject(i);
-                VideoModel model = new Gson().fromJson(jsonObject.toString(), VideoModel.class);
-                items.add(model);
-            }
-        } catch (JSONException e) {
-            e.printStackTrace();
-        }
-        return items;
-    }
-
-    private void playMediaFromServer(VideoModel model) {
-        ServerHit.JSONTask streamTask = new ServerHit.JSONTask(this, TokenManager.getToken(), "GET", null, null, new ServerHit.ServiceHitResponseListener() {
-            @Override
-            public void onDone(String response) {
-                try {
-                    JSONObject object = new JSONObject(response);
-                    String videoUrl = object.getString("videoUrl");
-                    // send to player
-                    Intent intent = new Intent(getApplicationContext(), PlayerActivity.class);
-                    intent.setData(Uri.parse(videoUrl));
-                    intent.setAction(PlayerActivity.ACTION_VIEW);
-                    startActivity(intent);
-                } catch (JSONException e) {
-                    e.printStackTrace();
-                }
-            }
-
-            @Override
-            public void onError(String error) {
-
-            }
-        });
-        streamTask.execute(EndPoints.getBaseUrl() + "VocabimateContentServer/webapi/video/stream?videoId=" + model.getVideoId());
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        loginButtonTextUpdate();
-//        File dir = new File(storageDirectoryZips + videoId);
-//        if(isFolderPresent(dir)){
-//            iVDownload.setImageResource(R.mipmap.ic_download_complete);
-//        } else {
-//            iVDownload.setImageResource(R.mipmap.ic_download);
-//        }
-    }
-
-    private void loginButtonTextUpdate() {
-        if (!TextUtils.isEmpty(TokenManager.getToken())) {
-            btnLogin.setText("Logout");
-        } else {
-            btnLogin.setText("Login");
-        }
-    }
-
-    @Override
-    public void onVideoPlayClicked(final VideoModel model) {
-        File dir = new File(Utils.getStorageDirectoryExtracts() + model.getVideoId());
-        File[] file = dir.listFiles();
-        if (Utils.isFolderPresent(dir)) {
-            // trying to find my file
-            Log.d(TAG, "onVideoPlayClicked: " + ZipHelper.searchFile(file, null));
-            ZipHelper.searchFile(file, new ZipHelper.FileListener() {
-                @Override
-                public void onFileSearchComplete(boolean fileFound, String fileToPlay) {
-                    if (fileFound && !TextUtils.isEmpty(fileToPlay)) {
-                        Intent intent = new Intent(getApplicationContext(), PlayerActivity.class);
-                        intent.setData(Uri.parse(fileToPlay));
-                        intent.setAction(PlayerActivity.ACTION_VIEW);
-                        startActivity(intent);
-                    } else {
-                        Toast.makeText(MainActivity.this, "Unable to play local video, playing stream.", Toast.LENGTH_SHORT).show();
-                        playMediaFromServer(model);
-                    }
-                }
-            });
-        } else { // if folder is not present locally, play via server
-            playMediaFromServer(model);
-        }
-    }
-
-    @Override
-    public void onDownloadClicked(VideoModel model, final ImageView ivDownload) {
-        String serverFileUrl = EndPoints.getBaseUrl() + "VocabimateContentServer/webapi/video/download?videoId=" + model.getVideoId();
-        // todo problem with zip file, hardcoded
-        final String keyFileUrl = EndPoints.getBaseUrl() + "VocabimateKeyServer/webapi/keys/getKey?videoId=" + model.getVideoId();
-        String videoId = HLSUtils.getVideoIdFromUrl(serverFileUrl);
-        if(TextUtils.isEmpty(videoId)){
-            Toast.makeText(MainActivity.this, "Video id not found", Toast.LENGTH_SHORT).show();
-            return;
-        }
-        // execute this when the downloader must be fired
-        final File sourceZipFile = new File(Utils.getStorageDirectoryZips() + videoId);
-        String fileNameWithOutExt = FilenameUtils.removeExtension(sourceZipFile.getName());
-        final File targetDirectory = new File(Utils.getStorageDirectoryExtracts() + fileNameWithOutExt);
-        targetDirectory.mkdir();
-
-        final DownloadTask downloadTask = new DownloadTask(MainActivity.this, TokenManager.getToken(), sourceZipFile.getAbsolutePath(), new DownloadTask.DownloadTaskListener() {
-            @Override
-            public void onFileDownload() {
-                new ZipHelper.ZipTask(MainActivity.this, new ZipHelper.ZipTaskListener() {
-                    @Override
-                    public void onUnzipped(String fileToPlay) {
-                        Log.d(TAG, "onUnzipped: " + fileToPlay);
-                        ivDownload.setImageResource(R.mipmap.ic_download_complete);
-                    }
-                }).execute(sourceZipFile, targetDirectory);
-            }
-        });
-        downloadTask.execute(serverFileUrl);
-
-        final File tempKeyPath = new File(Utils.getTempDirectoryExtracts() + videoId);
-        final DownloadTask keyTask = new DownloadTask(MainActivity.this, TokenManager.getToken(), tempKeyPath.toString(), new DownloadTask.DownloadTaskListener() {
-            @Override
-            public void onFileDownload() {
-                KeyWriter.writeByteToFile(KeyWriter.readByteToFileUnencryptedData(keyFileUrl, tempKeyPath), keyFileUrl);
-            }
-        });
-        keyTask.execute(keyFileUrl);
-    }
-
-    @Override
-    public void onDeleteClicked(File directory, ImageView ivDownload) {
-        try {
-            FileUtils.deleteDirectory(directory);
-            ivDownload.setImageResource(R.mipmap.ic_download);
-        } catch (IOException e) {
-            e.printStackTrace();
-            Log.d(TAG, "onDeleteClicked: unable to delete directory" + e.getLocalizedMessage());
-        }
-    }
-}
diff --git a/demo/src/main/java/com/novo/network/DownloadTask.java b/demo/src/main/java/com/novo/network/DownloadTask.java
index 3bcfdbda54..d23151c719 100644
--- a/demo/src/main/java/com/novo/network/DownloadTask.java
+++ b/demo/src/main/java/com/novo/network/DownloadTask.java
@@ -29,6 +29,7 @@
 
     private final String filePath;
     private final DownloadTaskListener listener;
+    private final String key;
     private Activity activity;
     private PowerManager.WakeLock mWakeLock;
     private String token;
@@ -37,11 +38,12 @@
         void onFileDownload();
     }
 
-    public DownloadTask(Activity activity, String token, String filePath, DownloadTaskListener listener) {
+    public DownloadTask(Activity activity, String key, String token, String filePath, DownloadTaskListener listener) {
         this.activity = activity;
         this.filePath = filePath;
         this.listener = listener;
         this.token = token;
+        this.key = key;
     }
 
     // declare the dialog as a member field of your activity
@@ -111,44 +113,44 @@ protected String doInBackground(String... sUrl) {
     @Override
     protected void onPreExecute() {
         super.onPreExecute();
-        // take CPU lock to prevent CPU from going off if the user
-        // presses the power button during download
-        PowerManager pm = (PowerManager) activity.getSystemService(Context.POWER_SERVICE);
-        mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, getClass().getName());
-        mWakeLock.acquire();
-        // instantiate it within the onCreate method
-        mProgressDialog = new ProgressDialog(activity);
-        mProgressDialog.setMessage("Downloading video for offline use...");
-        mProgressDialog.setIndeterminate(true);
-        mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
-        mProgressDialog.setCancelable(true);
-        mProgressDialog.show();
-
-        mProgressDialog.setOnCancelListener(new DialogInterface.OnCancelListener() {
-            @Override
-            public void onCancel(DialogInterface dialog) {
-                cancel(true);
-            }
-        });
+//        // take CPU lock to prevent CPU from going off if the user
+//        // presses the power button during download
+//        PowerManager pm = (PowerManager) activity.getSystemService(Context.POWER_SERVICE);
+//        mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, getClass().getName());
+//        mWakeLock.acquire();
+//        // instantiate it within the onCreate method
+//        mProgressDialog = new ProgressDialog(activity);
+//        mProgressDialog.setMessage("Downloading video for offline use...");
+//        mProgressDialog.setIndeterminate(true);
+//        mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
+//        mProgressDialog.setCancelable(true);
+//        mProgressDialog.show();
+//
+//        mProgressDialog.setOnCancelListener(new DialogInterface.OnCancelListener() {
+//            @Override
+//            public void onCancel(DialogInterface dialog) {
+//                cancel(true);
+//            }
+//        });
     }
 
     @Override
     protected void onProgressUpdate(Integer... progress) {
         super.onProgressUpdate(progress);
-        // if we get here, length is known, now set indeterminate to false
-        mProgressDialog.setIndeterminate(false);
-        mProgressDialog.setMax(100);
-        mProgressDialog.setProgress(progress[0]);
+//        // if we get here, length is known, now set indeterminate to false
+//        mProgressDialog.setIndeterminate(false);
+//        mProgressDialog.setMax(100);
+//        mProgressDialog.setProgress(progress[0]);
     }
 
     @Override
     protected void onPostExecute(String result) {
-        mWakeLock.release();
-        mProgressDialog.dismiss();
-        if (result != null)
-            Toast.makeText(activity,"Download error: "+result, Toast.LENGTH_LONG).show();
-        else {
-            Toast.makeText(activity, "File downloaded", Toast.LENGTH_SHORT).show();
+//        mWakeLock.release();
+//        mProgressDialog.dismiss();
+        if (result != null) {
+            Toast.makeText(activity, "Unable to Download key - error: " + result, Toast.LENGTH_LONG).show();
+        } else {
+            Toast.makeText(activity, "Key downloaded", Toast.LENGTH_SHORT).show();
             listener.onFileDownload();
         }
     }
diff --git a/demo/src/main/java/com/novo/network/EndPoints.java b/demo/src/main/java/com/novo/network/EndPoints.java
index 1dfd930625..ff1f0037ba 100644
--- a/demo/src/main/java/com/novo/network/EndPoints.java
+++ b/demo/src/main/java/com/novo/network/EndPoints.java
@@ -5,8 +5,8 @@
  */
 
 public class EndPoints {
-//    private static final String baseUrl = "http://35.154.11.202/";
-    private static final String baseUrl = "http://192.168.0.94:8080/";
+    private static final String baseUrl = "http://35.154.11.202/";
+//    private static final String baseUrl = "http://192.168.0.94:8080/";
     public static String getBaseUrl() {
         return baseUrl;
     }
diff --git a/demo/src/main/java/com/novo/util/Utils.java b/demo/src/main/java/com/novo/util/Utils.java
index 1cced0cf02..beb6c15f9f 100644
--- a/demo/src/main/java/com/novo/util/Utils.java
+++ b/demo/src/main/java/com/novo/util/Utils.java
@@ -4,15 +4,14 @@
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
 import android.os.Environment;
+import android.util.Log;
+
+import com.novo.R;
+
+import org.apache.commons.io.FileUtils;
 
 import java.io.File;
-import java.io.UnsupportedEncodingException;
-import java.net.URL;
-import java.net.URLDecoder;
-import java.util.LinkedHashMap;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
+import java.io.IOException;
 
 /**
  * Created by Hisham on 01/Sep/2017 - 16:49
@@ -20,32 +19,56 @@
 
 public class Utils {
 
-    private static final String storageDirectoryZips = Environment.getExternalStorageDirectory() + "/voca/zips/";
-    private static final String storageDirectoryExtracts = Environment.getExternalStorageDirectory() + "/voca/extracts/";
-    private static final String tempDirectoryExtracts = Environment.getExternalStorageDirectory() + "/voca/temp/";
-    public static final String TAG = "Novo";
+    private final Context context;
 
-    public static String getTempDirectoryExtracts() {
-        File tempDirectory = new File(tempDirectoryExtracts);
-        if (!tempDirectory.exists()) {
-            tempDirectory.mkdirs();
+    public Utils(Context context) {
+        this.context = context;
+
+        File externalFilesDir = context.getExternalFilesDir(null);
+        if (externalFilesDir == null) {
+            Log.e(TAG, "Utils: externalFilesDir is null.");
+            storageDirectoryZips = null;
+            storageDirectoryExtracts = null;
+            tempDirectoryExtracts = null;
+        } else {
+            String vocaRoot = externalFilesDir.getAbsolutePath() + "/voca/";
+            storageDirectoryZips = vocaRoot + "zips/";
+            storageDirectoryExtracts = vocaRoot + "extracts/";
+            tempDirectoryExtracts = vocaRoot + "temp/";
+            File tempDirectory = new File(tempDirectoryExtracts);
+            if (!tempDirectory.exists()) {
+                tempDirectory.mkdirs();
+            }
+
+            File fileZips = new File(storageDirectoryZips);
+            if (!fileZips.exists()) {
+                fileZips.mkdirs();
+            }
+
+            File fileExtracts = new File(storageDirectoryExtracts);
+            if (!fileExtracts.exists()) {
+                fileExtracts.mkdirs();
+            }
         }
+    }
+
+    private final String storageDirectoryZips;
+    //    private final String storageDirectoryZips =Environment.getExternalStorageDirectory() + "/voca/zips/";
+    private final String storageDirectoryExtracts;
+    //    private final String storageDirectoryExtracts = Environment.getExternalStorageDirectory() + "/voca/extracts/";
+    private final String tempDirectoryExtracts;
+    //    private final String tempDirectoryExtracts = Environment.getExternalStorageDirectory() + "/voca/temp/";
+    public static final String TAG = "Novo";
+
+    public String getTempDirectoryExtracts() {
         return tempDirectoryExtracts;
     }
 
-    public static String getStorageDirectoryZips() {
-        File fileZips = new File(storageDirectoryZips);
-        if (!fileZips.exists()) {
-            fileZips.mkdirs();
-        }
+    public String getStorageDirectoryZips() {
         return storageDirectoryZips;
     }
 
-    public static String getStorageDirectoryExtracts() {
-        File fileExtracts = new File(storageDirectoryExtracts);
-        if (!fileExtracts.exists()) {
-            fileExtracts.mkdirs();
-        }
+    public String getStorageDirectoryExtracts() {
         return storageDirectoryExtracts;
     }
 
@@ -65,6 +88,21 @@ public static boolean isNetworkAvailable(Context context) {
         NetworkInfo netInfo = cm.getActiveNetworkInfo();
         return netInfo != null && netInfo.isConnectedOrConnecting();
     }
-    private Utils() { }
+
+
+    public void deleteAllDirectories() {
+        try {
+            File tempDirectory = new File(tempDirectoryExtracts);
+            File fileZips = new File(storageDirectoryZips);
+            File fileExtracts = new File(storageDirectoryExtracts);
+            FileUtils.deleteDirectory(tempDirectory);
+            FileUtils.deleteDirectory(fileZips);
+            FileUtils.deleteDirectory(fileExtracts);
+        } catch (IOException e) {
+            e.printStackTrace();
+            Log.d(TAG, "onDeleteClicked: unable to delete directory" + e.getLocalizedMessage());
+        }
+
+    }
 
 }
diff --git a/demo/src/main/res/drawable/ic_delete_black_24dp.xml b/demo/src/main/res/drawable/ic_delete_black_24dp.xml
new file mode 100644
index 0000000000..0e52b4d513
--- /dev/null
+++ b/demo/src/main/res/drawable/ic_delete_black_24dp.xml
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24.0"
+        android:viewportHeight="24.0">
+    <path
+        android:fillColor="@color/secondary"
+        android:pathData="M6,19c0,1.1 0.9,2 2,2h8c1.1,0 2,-0.9 2,-2V7H6v12zM19,4h-3.5l-1,-1h-5l-1,1H5v2h14V4z"/>
+</vector>
diff --git a/demo/src/main/res/drawable/ic_file_download_black_24dp.xml b/demo/src/main/res/drawable/ic_file_download_black_24dp.xml
new file mode 100644
index 0000000000..081d9cb2cf
--- /dev/null
+++ b/demo/src/main/res/drawable/ic_file_download_black_24dp.xml
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24.0"
+        android:viewportHeight="24.0">
+    <path
+        android:fillColor="@color/primary"
+        android:pathData="M19,9h-4V3H9v6H5l7,7 7,-7zM5,18v2h14v-2H5z"/>
+</vector>
diff --git a/demo/src/main/res/layout/row_videos.xml b/demo/src/main/res/layout/row_videos.xml
index 265af0bdda..d292a21417 100644
--- a/demo/src/main/res/layout/row_videos.xml
+++ b/demo/src/main/res/layout/row_videos.xml
@@ -43,5 +43,5 @@
         android:layout_alignParentEnd="true"
         android:layout_alignParentRight="true"
         android:layout_alignParentTop="true"
-        android:src="@mipmap/ic_download" />
+        />
 </RelativeLayout>
\ No newline at end of file
diff --git a/demo/src/main/res/layout/row_videos_grid.xml b/demo/src/main/res/layout/row_videos_grid.xml
index 0e8cfbcc95..2f4e5fd704 100644
--- a/demo/src/main/res/layout/row_videos_grid.xml
+++ b/demo/src/main/res/layout/row_videos_grid.xml
@@ -45,7 +45,6 @@
         android:id="@+id/ivDownload"
         android:layout_width="48dp"
         android:layout_height="48dp"
-        android:src="@mipmap/ic_download"
         android:layout_below="@+id/ivThumb"
         android:layout_alignParentRight="true"
         android:layout_alignParentEnd="true" />
diff --git a/demo/src/main/res/values/strings.xml b/demo/src/main/res/values/strings.xml
index e969e6de2e..b1eea17111 100644
--- a/demo/src/main/res/values/strings.xml
+++ b/demo/src/main/res/values/strings.xml
@@ -62,5 +62,9 @@
     <string name="title_library">Library</string>
     <string name="title_others">Others</string>
     <string name="title_notifications">Notifications</string>
+    <string name="downloading">Downloading...</string>
+    <string name="completed">Completed.</string>
+    <string name="processing">Processing...</string>
+    <string name="unable_to_download">Unable to download.</string>
 
 </resources>
diff --git a/demo/src/main/res/values/styles.xml b/demo/src/main/res/values/styles.xml
index 4bf99b8734..6eb4c0f8a1 100644
--- a/demo/src/main/res/values/styles.xml
+++ b/demo/src/main/res/values/styles.xml
@@ -21,21 +21,26 @@
     <item name="android:windowBackground">@android:color/black</item>
   </style>
 
+
+  <color name="primary">@color/md_blue_500</color>
+  <color name="primaryDark">@color/md_blue_700</color>
+  <color name="secondary">@color/md_pink_800</color>
+
   <!-- Base application theme. -->
   <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
     <!-- Customize your theme here. -->
     <item name="android:windowContentOverlay">@null</item>
-    <item name="colorPrimary">@color/md_blue_500</item>
-    <item name="colorPrimaryDark">@color/md_blue_700</item>
-    <item name="colorAccent">@color/md_yellow_500</item>
+    <item name="colorPrimary">@color/primary</item>
+    <item name="colorPrimaryDark">@color/primaryDark</item>
+    <item name="colorAccent">@color/secondary</item>
   </style>
 
   <style name="AppThemeLight" parent="Theme.AppCompat.Light">
     <!-- Customize your theme here. -->
     <item name="android:windowContentOverlay">@null</item>
-    <item name="colorPrimary">@color/md_blue_500</item>
-    <item name="colorPrimaryDark">@color/md_blue_700</item>
-    <item name="colorAccent">@color/md_yellow_500</item>
+    <item name="colorPrimary">@color/primary</item>
+    <item name="colorPrimaryDark">@color/primaryDark</item>
+    <item name="colorAccent">@color/secondary</item>
   </style>
 
   <!-- Base application theme. -->
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/KeyWriter.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/KeyWriter.java
index 14024a7abb..f76922c665 100644
--- a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/KeyWriter.java
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/KeyWriter.java
@@ -124,4 +124,24 @@ private Key generateKey() throws Exception {
         return new SecretKeySpec(keyValue, ALGO);
     }
 
+    public void deleteTempKey(File tempKeyFile) {
+        if(!BuildConfig.DEBUG) { // if not debugging - delete zip file
+            String absolutePath = tempKeyFile.getAbsolutePath();
+            if (tempKeyFile.delete()) {
+                Log.d(TAG, "zip file deleted: " + absolutePath);
+            } else {
+                Log.d(TAG, "Error deleting zip file : " + absolutePath);
+            }
+        }
+    }
+
+    public void deleteAllKeys() {
+        try {
+            File keyDirectory = new File(keyStoragePath);
+            FileUtils.deleteDirectory(keyDirectory);
+        } catch (IOException e) {
+            e.printStackTrace();
+            Log.d(TAG, "onDeleteClicked: unable to delete directory" + e.getLocalizedMessage());
+        }
+    }
 }
