diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloaderConstructorHelper.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloaderConstructorHelper.java
index 28e898216d..74b918c06d 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloaderConstructorHelper.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloaderConstructorHelper.java
@@ -27,12 +27,14 @@
 import com.google.android.exoplayer2.upstream.cache.CacheDataSource;
 import com.google.android.exoplayer2.upstream.cache.CacheDataSourceFactory;
 import com.google.android.exoplayer2.upstream.cache.CacheKeyFactory;
+import com.google.android.exoplayer2.upstream.cache.CacheUtil;
 import com.google.android.exoplayer2.util.PriorityTaskManager;
 
 /** A helper class that holds necessary parameters for {@link Downloader} construction. */
 public final class DownloaderConstructorHelper {
 
   private final Cache cache;
+  @Nullable private final CacheKeyFactory cacheKeyFactory;
   @Nullable private final PriorityTaskManager priorityTaskManager;
   private final CacheDataSourceFactory onlineCacheDataSourceFactory;
   private final CacheDataSourceFactory offlineCacheDataSourceFactory;
@@ -130,6 +132,7 @@ public DownloaderConstructorHelper(
             cacheKeyFactory);
     this.cache = cache;
     this.priorityTaskManager = priorityTaskManager;
+    this.cacheKeyFactory = cacheKeyFactory;
   }
 
   /** Returns the {@link Cache} instance. */
@@ -137,6 +140,11 @@ public Cache getCache() {
     return cache;
   }
 
+  /** Returns the {@link CacheKeyFactory}. */
+  public CacheKeyFactory getCacheKeyFactory() {
+    return cacheKeyFactory != null ? cacheKeyFactory : CacheUtil.DEFAULT_CACHE_KEY_FACTORY;
+  }
+
   /** Returns a {@link PriorityTaskManager} instance. */
   public PriorityTaskManager getPriorityTaskManager() {
     // Return a dummy PriorityTaskManager if none is provided. Create a new PriorityTaskManager
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloader.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloader.java
index adb1c80b0e..49263233b4 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloader.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloader.java
@@ -20,6 +20,7 @@
 import com.google.android.exoplayer2.upstream.DataSpec;
 import com.google.android.exoplayer2.upstream.cache.Cache;
 import com.google.android.exoplayer2.upstream.cache.CacheDataSource;
+import com.google.android.exoplayer2.upstream.cache.CacheKeyFactory;
 import com.google.android.exoplayer2.upstream.cache.CacheUtil;
 import com.google.android.exoplayer2.upstream.cache.CacheUtil.CachingCounters;
 import com.google.android.exoplayer2.util.PriorityTaskManager;
@@ -36,6 +37,7 @@
   private final DataSpec dataSpec;
   private final Cache cache;
   private final CacheDataSource dataSource;
+  private final CacheKeyFactory cacheKeyFactory;
   private final PriorityTaskManager priorityTaskManager;
   private final CacheUtil.CachingCounters cachingCounters;
   private final AtomicBoolean isCanceled;
@@ -47,10 +49,13 @@
    * @param constructorHelper A {@link DownloaderConstructorHelper} instance.
    */
   public ProgressiveDownloader(
-      Uri uri, String customCacheKey, DownloaderConstructorHelper constructorHelper) {
-    this.dataSpec = new DataSpec(uri, 0, C.LENGTH_UNSET, customCacheKey, 0);
+      Uri uri, @Nullable String customCacheKey, DownloaderConstructorHelper constructorHelper) {
+    this.dataSpec =
+        new DataSpec(
+            uri, /* absoluteStreamPosition= */ 0, C.LENGTH_UNSET, customCacheKey, /* flags= */ 0);
     this.cache = constructorHelper.getCache();
     this.dataSource = constructorHelper.createCacheDataSource();
+    this.cacheKeyFactory = constructorHelper.getCacheKeyFactory();
     this.priorityTaskManager = constructorHelper.getPriorityTaskManager();
     cachingCounters = new CachingCounters();
     isCanceled = new AtomicBoolean();
@@ -63,6 +68,7 @@ public void download() throws InterruptedException, IOException {
       CacheUtil.cache(
           dataSpec,
           cache,
+          cacheKeyFactory,
           dataSource,
           new byte[BUFFER_SIZE_BYTES],
           priorityTaskManager,
@@ -95,6 +101,6 @@ public float getDownloadPercentage() {
 
   @Override
   public void remove() {
-    CacheUtil.remove(cache, CacheUtil.getKey(dataSpec));
+    CacheUtil.remove(dataSpec, cache, cacheKeyFactory);
   }
 }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloader.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloader.java
index 2fdaaa4cbd..1a449e4d3f 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloader.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloader.java
@@ -22,6 +22,7 @@
 import com.google.android.exoplayer2.upstream.DataSpec;
 import com.google.android.exoplayer2.upstream.cache.Cache;
 import com.google.android.exoplayer2.upstream.cache.CacheDataSource;
+import com.google.android.exoplayer2.upstream.cache.CacheKeyFactory;
 import com.google.android.exoplayer2.upstream.cache.CacheUtil;
 import com.google.android.exoplayer2.upstream.cache.CacheUtil.CachingCounters;
 import com.google.android.exoplayer2.util.PriorityTaskManager;
@@ -62,10 +63,11 @@ public int compareTo(@NonNull Segment other) {
   private static final int BUFFER_SIZE_BYTES = 128 * 1024;
 
   private final Uri manifestUri;
-  private final PriorityTaskManager priorityTaskManager;
   private final Cache cache;
   private final CacheDataSource dataSource;
   private final CacheDataSource offlineDataSource;
+  private final CacheKeyFactory cacheKeyFactory;
+  private final PriorityTaskManager priorityTaskManager;
   private final ArrayList<StreamKey> streamKeys;
   private final AtomicBoolean isCanceled;
 
@@ -86,6 +88,7 @@ public SegmentDownloader(
     this.cache = constructorHelper.getCache();
     this.dataSource = constructorHelper.createCacheDataSource();
     this.offlineDataSource = constructorHelper.createOfflineCacheDataSource();
+    this.cacheKeyFactory = constructorHelper.getCacheKeyFactory();
     this.priorityTaskManager = constructorHelper.getPriorityTaskManager();
     totalSegments = C.LENGTH_UNSET;
     isCanceled = new AtomicBoolean();
@@ -115,6 +118,7 @@ public final void download() throws IOException, InterruptedException {
           CacheUtil.cache(
               segments.get(i).dataSpec,
               cache,
+              cacheKeyFactory,
               dataSource,
               buffer,
               priorityTaskManager,
@@ -159,13 +163,13 @@ public final void remove() throws InterruptedException {
       M manifest = getManifest(offlineDataSource, manifestUri);
       List<Segment> segments = getSegments(offlineDataSource, manifest, true);
       for (int i = 0; i < segments.size(); i++) {
-        removeUri(segments.get(i).dataSpec.uri);
+        removeDataSpec(segments.get(i).dataSpec);
       }
     } catch (IOException e) {
       // Ignore exceptions when removing.
     } finally {
       // Always attempt to remove the manifest.
-      removeUri(manifestUri);
+      removeDataSpec(new DataSpec(manifestUri));
     }
   }
 
@@ -213,7 +217,7 @@ public final void remove() throws InterruptedException {
     downloadedBytes = 0;
     for (int i = segments.size() - 1; i >= 0; i--) {
       Segment segment = segments.get(i);
-      CacheUtil.getCached(segment.dataSpec, cache, cachingCounters);
+      CacheUtil.getCached(segment.dataSpec, cache, cacheKeyFactory, cachingCounters);
       downloadedBytes += cachingCounters.alreadyCachedBytes;
       if (cachingCounters.alreadyCachedBytes == cachingCounters.contentLength) {
         // The segment is fully downloaded.
@@ -224,8 +228,8 @@ public final void remove() throws InterruptedException {
     return segments;
   }
 
-  private void removeUri(Uri uri) {
-    CacheUtil.remove(cache, CacheUtil.generateKey(uri));
+  private void removeDataSpec(DataSpec dataSpec) {
+    CacheUtil.remove(dataSpec, cache, cacheKeyFactory);
   }
 
 }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/cache/CacheUtil.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/cache/CacheUtil.java
index cee22375a9..1a44fb3144 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/cache/CacheUtil.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/cache/CacheUtil.java
@@ -54,8 +54,9 @@ public long totalCachedBytes() {
   /** Default buffer size to be used while caching. */
   public static final int DEFAULT_BUFFER_SIZE_BYTES = 128 * 1024;
 
-  /** Default {@link CacheKeyFactory} that calls through to {@link #getKey}. */
-  public static final CacheKeyFactory DEFAULT_CACHE_KEY_FACTORY = CacheUtil::getKey;
+  /** Default {@link CacheKeyFactory}. */
+  public static final CacheKeyFactory DEFAULT_CACHE_KEY_FACTORY =
+      (dataSpec) -> dataSpec.key != null ? dataSpec.key : generateKey(dataSpec.uri);
 
   /**
    * Generates a cache key out of the given {@link Uri}.
@@ -67,26 +68,21 @@ public static String generateKey(Uri uri) {
   }
 
   /**
-   * Returns the {@code dataSpec.key} if not null, otherwise generates a cache key out of {@code
-   * dataSpec.uri}
-   *
-   * @param dataSpec Defines a content which the requested key is for.
-   */
-  public static String getKey(DataSpec dataSpec) {
-    return dataSpec.key != null ? dataSpec.key : generateKey(dataSpec.uri);
-  }
-
-  /**
-   * Sets a {@link CachingCounters} to contain the number of bytes already downloaded and the
-   * length for the content defined by a {@code dataSpec}. {@link CachingCounters#newlyCachedBytes}
-   * is reset to 0.
+   * Sets a {@link CachingCounters} to contain the number of bytes already downloaded and the length
+   * for the content defined by a {@code dataSpec}. {@link CachingCounters#newlyCachedBytes} is
+   * reset to 0.
    *
    * @param dataSpec Defines the data to be checked.
    * @param cache A {@link Cache} which has the data.
+   * @param cacheKeyFactory An optional factory for cache keys.
    * @param counters The {@link CachingCounters} to update.
    */
-  public static void getCached(DataSpec dataSpec, Cache cache, CachingCounters counters) {
-    String key = getKey(dataSpec);
+  public static void getCached(
+      DataSpec dataSpec,
+      Cache cache,
+      @Nullable CacheKeyFactory cacheKeyFactory,
+      CachingCounters counters) {
+    String key = buildCacheKey(dataSpec, cacheKeyFactory);
     long start = dataSpec.absoluteStreamPosition;
     long left = dataSpec.length != C.LENGTH_UNSET ? dataSpec.length : cache.getContentLength(key);
     counters.contentLength = left;
@@ -114,6 +110,7 @@ public static void getCached(DataSpec dataSpec, Cache cache, CachingCounters cou
    *
    * @param dataSpec Defines the data to be cached.
    * @param cache A {@link Cache} to store the data.
+   * @param cacheKeyFactory An optional factory for cache keys.
    * @param upstream A {@link DataSource} for reading data not in the cache.
    * @param counters If not null, updated during caching.
    * @param isCanceled An optional flag that will interrupt caching if set to true.
@@ -123,6 +120,7 @@ public static void getCached(DataSpec dataSpec, Cache cache, CachingCounters cou
   public static void cache(
       DataSpec dataSpec,
       Cache cache,
+      @Nullable CacheKeyFactory cacheKeyFactory,
       DataSource upstream,
       @Nullable CachingCounters counters,
       @Nullable AtomicBoolean isCanceled)
@@ -130,6 +128,7 @@ public static void cache(
     cache(
         dataSpec,
         cache,
+        cacheKeyFactory,
         new CacheDataSource(cache, upstream),
         new byte[DEFAULT_BUFFER_SIZE_BYTES],
         /* priorityTaskManager= */ null,
@@ -151,6 +150,7 @@ public static void cache(
    *
    * @param dataSpec Defines the data to be cached.
    * @param cache A {@link Cache} to store the data.
+   * @param cacheKeyFactory An optional factory for cache keys.
    * @param dataSource A {@link CacheDataSource} that works on the {@code cache}.
    * @param buffer The buffer to be used while caching.
    * @param priorityTaskManager If not null it's used to check whether it is allowed to proceed with
@@ -166,6 +166,7 @@ public static void cache(
   public static void cache(
       DataSpec dataSpec,
       Cache cache,
+      @Nullable CacheKeyFactory cacheKeyFactory,
       CacheDataSource dataSource,
       byte[] buffer,
       PriorityTaskManager priorityTaskManager,
@@ -179,13 +180,13 @@ public static void cache(
 
     if (counters != null) {
       // Initialize the CachingCounter values.
-      getCached(dataSpec, cache, counters);
+      getCached(dataSpec, cache, cacheKeyFactory, counters);
     } else {
       // Dummy CachingCounters. No need to initialize as they will not be visible to the caller.
       counters = new CachingCounters();
     }
 
-    String key = getKey(dataSpec);
+    String key = buildCacheKey(dataSpec, cacheKeyFactory);
     long start = dataSpec.absoluteStreamPosition;
     long left = dataSpec.length != C.LENGTH_UNSET ? dataSpec.length : cache.getContentLength(key);
     while (left != 0) {
@@ -296,18 +297,41 @@ private static long readAndDiscard(
     }
   }
 
-  /** Removes all of the data in the {@code cache} pointed by the {@code key}. */
+  /**
+   * Removes all of the data specified by the {@code dataSpec}.
+   *
+   * @param dataSpec Defines the data to be removed.
+   * @param cache A {@link Cache} to store the data.
+   * @param cacheKeyFactory An optional factory for cache keys.
+   */
+  public static void remove(
+      DataSpec dataSpec, Cache cache, @Nullable CacheKeyFactory cacheKeyFactory) {
+    remove(cache, buildCacheKey(dataSpec, cacheKeyFactory));
+  }
+
+  /**
+   * Removes all of the data specified by the {@code key}.
+   *
+   * @param cache A {@link Cache} to store the data.
+   * @param key The key whose data should be removed.
+   */
   public static void remove(Cache cache, String key) {
     NavigableSet<CacheSpan> cachedSpans = cache.getCachedSpans(key);
     for (CacheSpan cachedSpan : cachedSpans) {
       try {
         cache.removeSpan(cachedSpan);
       } catch (Cache.CacheException e) {
-        // do nothing
+        // Do nothing.
       }
     }
   }
 
+  private static String buildCacheKey(
+      DataSpec dataSpec, @Nullable CacheKeyFactory cacheKeyFactory) {
+    return (cacheKeyFactory != null ? cacheKeyFactory : DEFAULT_CACHE_KEY_FACTORY)
+        .buildCacheKey(dataSpec);
+  }
+
   private static void throwExceptionIfInterruptedOrCancelled(AtomicBoolean isCanceled)
       throws InterruptedException {
     if (Thread.interrupted() || (isCanceled != null && isCanceled.get())) {
diff --git a/library/core/src/test/java/com/google/android/exoplayer2/upstream/cache/CacheDataSourceTest.java b/library/core/src/test/java/com/google/android/exoplayer2/upstream/cache/CacheDataSourceTest.java
index 55d05eb7d4..13a31ddae2 100644
--- a/library/core/src/test/java/com/google/android/exoplayer2/upstream/cache/CacheDataSourceTest.java
+++ b/library/core/src/test/java/com/google/android/exoplayer2/upstream/cache/CacheDataSourceTest.java
@@ -381,7 +381,13 @@ public void testSwitchToCacheSourceWithReadOnlyCacheDataSource() throws Exceptio
                 .newDefaultData()
                 .appendReadData(1024 * 1024)
                 .endData());
-    CacheUtil.cache(dataSpec, cache, upstream2, /* counters= */ null, /* isCanceled= */ null);
+    CacheUtil.cache(
+        unboundedDataSpec,
+        cache,
+        /* cacheKeyFactory= */ null,
+        upstream2,
+        /* counters= */ null,
+        /* isCanceled= */ null);
 
     // Read the rest of the data.
     TestUtil.readToEnd(cacheDataSource);
@@ -426,7 +432,13 @@ public void testSwitchToCacheSourceWithNonBlockingCacheDataSource() throws Excep
                 .newDefaultData()
                 .appendReadData(1024 * 1024)
                 .endData());
-    CacheUtil.cache(dataSpec, cache, upstream2, /* counters= */ null, /* isCanceled= */ null);
+    CacheUtil.cache(
+        unboundedDataSpec,
+        cache,
+        /* cacheKeyFactory= */ null,
+        upstream2,
+        /* counters= */ null,
+        /* isCanceled= */ null);
 
     // Read the rest of the data.
     TestUtil.readToEnd(cacheDataSource);
@@ -441,8 +453,15 @@ public void testDeleteCachedWhileReadingFromUpstreamWithReadOnlyCacheDataSourceD
     upstream.getDataSet().newDefaultData().appendReadData(1024).endData();
 
     // Cache the latter half of the data.
-    DataSpec dataSpec = new DataSpec(testDataUri, 512, C.LENGTH_UNSET, fixedCacheKey);
-    CacheUtil.cache(dataSpec, cache, upstream, /* counters= */ null, /* isCanceled= */ null);
+    int halfDataLength = 512;
+    DataSpec dataSpec = buildDataSpec(halfDataLength, C.LENGTH_UNSET);
+    CacheUtil.cache(
+        dataSpec,
+        cache,
+        /* cacheKeyFactory= */ null,
+        upstream,
+        /* counters= */ null,
+        /* isCanceled= */ null);
 
     // Create cache read-only CacheDataSource.
     CacheDataSource cacheDataSource =
@@ -454,7 +473,7 @@ public void testDeleteCachedWhileReadingFromUpstreamWithReadOnlyCacheDataSourceD
     TestUtil.readExactly(cacheDataSource, 100);
 
     // Delete cached data.
-    CacheUtil.remove(cache, expectedCacheKey);
+    CacheUtil.remove(unboundedDataSpec, cache, /* cacheKeyFactory= */ null);
     assertCacheEmpty(cache);
 
     // Read the rest of the data.
@@ -472,8 +491,14 @@ public void testDeleteCachedWhileReadingFromUpstreamWithBlockingCacheDataSourceD
 
     // Cache the latter half of the data.
     int halfDataLength = 512;
-    DataSpec dataSpec = new DataSpec(testDataUri, halfDataLength, C.LENGTH_UNSET, fixedCacheKey);
-    CacheUtil.cache(dataSpec, cache, upstream, /* counters= */ null, /* isCanceled= */ null);
+    DataSpec dataSpec = buildDataSpec(/* position= */ 0, halfDataLength);
+    CacheUtil.cache(
+        dataSpec,
+        cache,
+        /* cacheKeyFactory= */ null,
+        upstream,
+        /* counters= */ null,
+        /* isCanceled= */ null);
 
     // Create blocking CacheDataSource.
     CacheDataSource cacheDataSource =
diff --git a/library/core/src/test/java/com/google/android/exoplayer2/upstream/cache/CacheUtilTest.java b/library/core/src/test/java/com/google/android/exoplayer2/upstream/cache/CacheUtilTest.java
index 36fb78894f..d0bdfa2b83 100644
--- a/library/core/src/test/java/com/google/android/exoplayer2/upstream/cache/CacheUtilTest.java
+++ b/library/core/src/test/java/com/google/android/exoplayer2/upstream/cache/CacheUtilTest.java
@@ -15,13 +15,9 @@
  */
 package com.google.android.exoplayer2.upstream.cache;
 
-import static android.net.Uri.EMPTY;
-import static android.net.Uri.parse;
 import static com.google.android.exoplayer2.C.LENGTH_UNSET;
-import static com.google.android.exoplayer2.upstream.cache.CacheAsserts.assertCacheEmpty;
-import static com.google.android.exoplayer2.upstream.cache.CacheAsserts.assertCachedData;
-import static com.google.android.exoplayer2.upstream.cache.CacheUtil.generateKey;
-import static com.google.android.exoplayer2.upstream.cache.CacheUtil.getKey;
+import static com.google.android.exoplayer2.testutil.CacheAsserts.assertCacheEmpty;
+import static com.google.android.exoplayer2.testutil.CacheAsserts.assertCachedData;
 import static com.google.common.truth.Truth.assertThat;
 import static org.junit.Assert.fail;
 
@@ -107,50 +103,40 @@ public void tearDown() throws Exception {
 
   @Test
   public void testGenerateKey() throws Exception {
-    assertThat(generateKey(EMPTY)).isNotNull();
+    assertThat(CacheUtil.generateKey(Uri.EMPTY)).isNotNull();
 
     Uri testUri = Uri.parse("test");
     String key = CacheUtil.generateKey(testUri);
     assertThat(key).isNotNull();
 
-    // Should generate the same key for the same input
-    assertThat(generateKey(testUri)).isEqualTo(key);
+    // Should generate the same key for the same input.
+    assertThat(CacheUtil.generateKey(testUri)).isEqualTo(key);
 
-    // Should generate different key for different input
-    assertThat(key.equals(generateKey(parse("test2")))).isFalse();
-  }
-
-  @Test
-  public void testGetKey() throws Exception {
-    Uri testUri = Uri.parse("test");
-    String key = "key";
-    // If DataSpec.key is present, returns it
-    assertThat(getKey(new DataSpec(testUri, 0, LENGTH_UNSET, key))).isEqualTo(key);
-    // If not generates a new one using DataSpec.uri
-    assertThat(getKey(new DataSpec(testUri, 0, LENGTH_UNSET, null)))
-        .isEqualTo(generateKey(testUri));
+    // Should generate different key for different input.
+    assertThat(key.equals(CacheUtil.generateKey(Uri.parse("test2")))).isFalse();
   }
 
   @Test
   public void testDefaultCacheKeyFactory_buildCacheKey() throws Exception {
     Uri testUri = Uri.parse("test");
     String key = "key";
-    // If DataSpec.key is present, returns it
+    // If DataSpec.key is present, returns it.
     assertThat(
             CacheUtil.DEFAULT_CACHE_KEY_FACTORY.buildCacheKey(
                 new DataSpec(testUri, 0, LENGTH_UNSET, key)))
         .isEqualTo(key);
-    // If not generates a new one using DataSpec.uri
+    // If not generates a new one using DataSpec.uri.
     assertThat(
             CacheUtil.DEFAULT_CACHE_KEY_FACTORY.buildCacheKey(
                 new DataSpec(testUri, 0, LENGTH_UNSET, null)))
-        .isEqualTo(generateKey(testUri));
+        .isEqualTo(testUri.toString());
   }
 
   @Test
   public void testGetCachedNoData() throws Exception {
     CachingCounters counters = new CachingCounters();
-    CacheUtil.getCached(new DataSpec(Uri.parse("test")), mockCache, counters);
+    CacheUtil.getCached(
+        new DataSpec(Uri.parse("test")), mockCache, /* cacheKeyFactory= */ null, counters);
 
     assertCounters(counters, 0, 0, C.LENGTH_UNSET);
   }
@@ -160,7 +146,8 @@ public void testGetCachedDataUnknownLength() throws Exception {
     // Mock there is 100 bytes cached at the beginning
     mockCache.spansAndGaps = new int[] {100};
     CachingCounters counters = new CachingCounters();
-    CacheUtil.getCached(new DataSpec(Uri.parse("test")), mockCache, counters);
+    CacheUtil.getCached(
+        new DataSpec(Uri.parse("test")), mockCache, /* cacheKeyFactory= */ null, counters);
 
     assertCounters(counters, 100, 0, C.LENGTH_UNSET);
   }
@@ -169,7 +156,8 @@ public void testGetCachedDataUnknownLength() throws Exception {
   public void testGetCachedNoDataKnownLength() throws Exception {
     mockCache.contentLength = 1000;
     CachingCounters counters = new CachingCounters();
-    CacheUtil.getCached(new DataSpec(Uri.parse("test")), mockCache, counters);
+    CacheUtil.getCached(
+        new DataSpec(Uri.parse("test")), mockCache, /* cacheKeyFactory= */ null, counters);
 
     assertCounters(counters, 0, 0, 1000);
   }
@@ -179,7 +167,8 @@ public void testGetCached() throws Exception {
     mockCache.contentLength = 1000;
     mockCache.spansAndGaps = new int[] {100, 100, 200};
     CachingCounters counters = new CachingCounters();
-    CacheUtil.getCached(new DataSpec(Uri.parse("test")), mockCache, counters);
+    CacheUtil.getCached(
+        new DataSpec(Uri.parse("test")), mockCache, /* cacheKeyFactory= */ null, counters);
 
     assertCounters(counters, 300, 0, 1000);
   }
@@ -191,7 +180,12 @@ public void testCache() throws Exception {
 
     CachingCounters counters = new CachingCounters();
     CacheUtil.cache(
-        new DataSpec(Uri.parse("test_data")), cache, dataSource, counters, /* isCanceled= */ null);
+        new DataSpec(Uri.parse("test_data")),
+        cache,
+        /* cacheKeyFactory= */ null,
+        dataSource,
+        counters,
+        /* isCanceled= */ null);
 
     assertCounters(counters, 0, 100, 100);
     assertCachedData(cache, fakeDataSet);
@@ -205,11 +199,18 @@ public void testCacheSetOffsetAndLength() throws Exception {
     Uri testUri = Uri.parse("test_data");
     DataSpec dataSpec = new DataSpec(testUri, 10, 20, null);
     CachingCounters counters = new CachingCounters();
-    CacheUtil.cache(dataSpec, cache, dataSource, counters, /* isCanceled= */ null);
+    CacheUtil.cache(
+        dataSpec, cache, /* cacheKeyFactory= */ null, dataSource, counters, /* isCanceled= */ null);
 
     assertCounters(counters, 0, 20, 20);
 
-    CacheUtil.cache(new DataSpec(testUri), cache, dataSource, counters, /* isCanceled= */ null);
+    CacheUtil.cache(
+        new DataSpec(testUri),
+        cache,
+        /* cacheKeyFactory= */ null,
+        dataSource,
+        counters,
+        /* isCanceled= */ null);
 
     assertCounters(counters, 20, 80, 100);
     assertCachedData(cache, fakeDataSet);
@@ -224,7 +225,8 @@ public void testCacheUnknownLength() throws Exception {
 
     DataSpec dataSpec = new DataSpec(Uri.parse("test_data"));
     CachingCounters counters = new CachingCounters();
-    CacheUtil.cache(dataSpec, cache, dataSource, counters, /* isCanceled= */ null);
+    CacheUtil.cache(
+        dataSpec, cache, /* cacheKeyFactory= */ null, dataSource, counters, /* isCanceled= */ null);
 
     assertCounters(counters, 0, 100, 100);
     assertCachedData(cache, fakeDataSet);
@@ -240,11 +242,18 @@ public void testCacheUnknownLengthPartialCaching() throws Exception {
     Uri testUri = Uri.parse("test_data");
     DataSpec dataSpec = new DataSpec(testUri, 10, 20, null);
     CachingCounters counters = new CachingCounters();
-    CacheUtil.cache(dataSpec, cache, dataSource, counters, /* isCanceled= */ null);
+    CacheUtil.cache(
+        dataSpec, cache, /* cacheKeyFactory= */ null, dataSource, counters, /* isCanceled= */ null);
 
     assertCounters(counters, 0, 20, 20);
 
-    CacheUtil.cache(new DataSpec(testUri), cache, dataSource, counters, /* isCanceled= */ null);
+    CacheUtil.cache(
+        new DataSpec(testUri),
+        cache,
+        /* cacheKeyFactory= */ null,
+        dataSource,
+        counters,
+        /* isCanceled= */ null);
 
     assertCounters(counters, 20, 80, 100);
     assertCachedData(cache, fakeDataSet);
@@ -258,7 +267,8 @@ public void testCacheLengthExceedsActualDataLength() throws Exception {
     Uri testUri = Uri.parse("test_data");
     DataSpec dataSpec = new DataSpec(testUri, 0, 1000, null);
     CachingCounters counters = new CachingCounters();
-    CacheUtil.cache(dataSpec, cache, dataSource, counters, /* isCanceled= */ null);
+    CacheUtil.cache(
+        dataSpec, cache, /* cacheKeyFactory= */ null, dataSource, counters, /* isCanceled= */ null);
 
     assertCounters(counters, 0, 100, 1000);
     assertCachedData(cache, fakeDataSet);
@@ -276,6 +286,7 @@ public void testCacheThrowEOFException() throws Exception {
       CacheUtil.cache(
           dataSpec,
           cache,
+          /* cacheKeyFactory= */ null,
           new CacheDataSource(cache, dataSource),
           new byte[CacheUtil.DEFAULT_BUFFER_SIZE_BYTES],
           /* priorityTaskManager= */ null,
@@ -304,7 +315,12 @@ public void testCachePolling() throws Exception {
     FakeDataSource dataSource = new FakeDataSource(fakeDataSet);
 
     CacheUtil.cache(
-        new DataSpec(Uri.parse("test_data")), cache, dataSource, counters, /* isCanceled= */ null);
+        new DataSpec(Uri.parse("test_data")),
+        cache,
+        /* cacheKeyFactory= */ null,
+        dataSource,
+        counters,
+        /* isCanceled= */ null);
 
     assertCounters(counters, 0, 300, 300);
     assertCachedData(cache, fakeDataSet);
@@ -316,10 +332,12 @@ public void testRemove() throws Exception {
     FakeDataSource dataSource = new FakeDataSource(fakeDataSet);
 
     Uri uri = Uri.parse("test_data");
+    DataSpec dataSpec = new DataSpec(uri);
     CacheUtil.cache(
-        new DataSpec(uri),
+        dataSpec,
         cache,
-        // set maxCacheFileSize to 10 to make sure there are multiple spans
+        /* cacheKeyFactory= */ null,
+        // Set maxCacheFileSize to 10 to make sure there are multiple spans.
         new CacheDataSource(cache, dataSource, 0, 10),
         new byte[CacheUtil.DEFAULT_BUFFER_SIZE_BYTES],
         /* priorityTaskManager= */ null,
@@ -327,7 +345,7 @@ public void testRemove() throws Exception {
         /* counters= */ null,
         /* isCanceled= */ null,
         true);
-    CacheUtil.remove(cache, CacheUtil.generateKey(uri));
+    CacheUtil.remove(dataSpec, cache, /* cacheKeyFactory= */ null);
 
     assertCacheEmpty(cache);
   }
@@ -338,5 +356,4 @@ private static void assertCounters(CachingCounters counters, int alreadyCachedBy
     assertThat(counters.newlyCachedBytes).isEqualTo(newlyCachedBytes);
     assertThat(counters.contentLength).isEqualTo(contentLength);
   }
-
 }
