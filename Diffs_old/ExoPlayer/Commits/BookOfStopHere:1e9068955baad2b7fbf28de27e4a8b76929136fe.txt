diff --git a/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacDecoder.java b/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacDecoder.java
index f053d4d869..7881b45ecd 100644
--- a/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacDecoder.java
+++ b/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacDecoder.java
@@ -29,7 +29,7 @@
     SimpleDecoder<InputBuffer, FlacOutputBuffer, FlacDecoderException> {
 
   private final int maxOutputBufferSize;
-  private final NativeFlacDecoder decoder;
+  private final FlacJni decoder;
   /**
    * Creates a Flac decoder.
    *
@@ -45,7 +45,7 @@ public FlacDecoder(int numInputBuffers, int numOutputBuffers, List<byte[]> initi
       throw new FlacDecoderException("Wrong number of initialization data");
     }
 
-    decoder = new NativeFlacDecoder();
+    decoder = new FlacJni();
 
     ByteBuffer metadata = ByteBuffer.wrap(initializationData.get(0));
     decoder.setData(metadata);
diff --git a/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacExtractor.java b/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacExtractor.java
index e47d91f48b..7090a36a1a 100644
--- a/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacExtractor.java
+++ b/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacExtractor.java
@@ -42,26 +42,34 @@
 
   private TrackOutput output;
 
-  private NativeFlacDecoder decoder;
+  private FlacJni decoder;
 
-  private boolean metadataNotParsed;
+  private boolean metadataParsed;
 
   private ParsableByteArray outputBuffer;
   private ByteBuffer outputByteBuffer;
 
-  public FlacExtractor() {
-    metadataNotParsed = true;
-  }
+  private boolean isSeekable;
 
   @Override
   public void init(ExtractorOutput output) {
     this.output = output.track(0);
     output.endTracks();
-    //TODO implement seekable
-    output.seekMap(SeekMap.UNSEEKABLE);
+
+    output.seekMap(new SeekMap() {
+      @Override
+      public boolean isSeekable() {
+        return isSeekable;
+      }
+
+      @Override
+      public long getPosition(long timeUs) {
+        return isSeekable ? decoder.getSeekPosition(timeUs) : 0;
+      }
+    });
 
     try {
-      decoder = new NativeFlacDecoder();
+      decoder = new FlacJni();
     } catch (FlacDecoderException e) {
       throw new RuntimeException(e);
     }
@@ -79,12 +87,13 @@ public int read(final ExtractorInput input, PositionHolder seekPosition)
       throws IOException, InterruptedException {
     decoder.setData(input);
 
-    if (metadataNotParsed) {
+    if (!metadataParsed) {
       FlacStreamInfo streamInfo = decoder.decodeMetadata();
       if (streamInfo == null) {
         throw new IOException("Metadata decoding failed");
       }
-      metadataNotParsed = false;
+      metadataParsed = true;
+      isSeekable = decoder.getSeekPosition(0) != -1;
 
       MediaFormat mediaFormat = MediaFormat.createAudioFormat(null, MimeTypes.AUDIO_RAW,
               MediaFormat.NO_VALUE, streamInfo.bitRate(), streamInfo.durationUs(),
@@ -109,15 +118,7 @@ public int read(final ExtractorInput input, PositionHolder seekPosition)
 
   @Override
   public void seek() {
-    if (!metadataNotParsed) {
-      decoder.release();
-      try {
-        decoder = new NativeFlacDecoder();
-      } catch (FlacDecoderException e) {
-        throw new RuntimeException(e);
-      }
-      metadataNotParsed = true;
-    }
+    decoder.flush();
   }
 
   @Override
diff --git a/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/NativeFlacDecoder.java b/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacJni.java
similarity index 85%
rename from extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/NativeFlacDecoder.java
rename to extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacJni.java
index 6ec97714a6..aa594ef2bf 100644
--- a/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/NativeFlacDecoder.java
+++ b/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacJni.java
@@ -24,7 +24,7 @@
 /**
  * JNI wrapper for the libflac Flac decoder.
  */
-/* package */ final class NativeFlacDecoder {
+/* package */ final class FlacJni {
 
   /**
    * Whether the underlying libflac library is available.
@@ -41,7 +41,7 @@
     IS_AVAILABLE = isAvailable;
   }
 
-  private static final int TEMP_BUFFER_SIZE = 8192;
+  private static final int TEMP_BUFFER_SIZE = 8192; // The same buffer size which libflac has
 
   private final long nativeDecoderContext;
 
@@ -51,7 +51,7 @@
   private boolean endOfExtractorInput;
   private byte[] tempBuffer;
 
-  public NativeFlacDecoder() throws FlacDecoderException {
+  public FlacJni() throws FlacDecoderException {
     nativeDecoderContext = flacInit();
     if (nativeDecoderContext == 0) {
       throw new FlacDecoderException("Failed to initialize decoder");
@@ -138,6 +138,22 @@ public long getLastSampleTimestamp() {
     return flacGetLastTimestamp(nativeDecoderContext);
   }
 
+  /**
+   * Maps a seek position in microseconds to a corresponding position (byte offset) in the flac
+   * stream.
+   *
+   * @param timeUs A seek position in microseconds.
+   * @return The corresponding position (byte offset) in the flac stream or -1 if the stream doesn't
+   * have a seek table.
+   */
+  public long getSeekPosition(long timeUs) {
+    return flacGetSeekPosition(nativeDecoderContext, timeUs);
+  }
+
+  public void flush() {
+    flacFlush(nativeDecoderContext);
+  }
+
   public void release() {
     flacRelease(nativeDecoderContext);
   }
@@ -152,6 +168,10 @@ public void release() {
 
   private native long flacGetLastTimestamp(long context);
 
+  private native long flacGetSeekPosition(long context, long timeUs);
+
+  private native void flacFlush(long context);
+
   private native void flacRelease(long context);
 
 }
diff --git a/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/LibflacAudioTrackRenderer.java b/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/LibflacAudioTrackRenderer.java
index 662f8ba2b7..e1b07e2162 100644
--- a/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/LibflacAudioTrackRenderer.java
+++ b/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/LibflacAudioTrackRenderer.java
@@ -123,7 +123,7 @@ public LibflacAudioTrackRenderer(SampleSource source, Handler eventHandler,
    * Returns whether the underlying libflac library is available.
    */
   public static boolean isLibflacAvailable() {
-    return NativeFlacDecoder.IS_AVAILABLE;
+    return FlacJni.IS_AVAILABLE;
   }
 
   @Override
diff --git a/extensions/flac/src/main/jni/flac_jni.cc b/extensions/flac/src/main/jni/flac_jni.cc
index 4ee18dde62..7fe1887971 100644
--- a/extensions/flac/src/main/jni/flac_jni.cc
+++ b/extensions/flac/src/main/jni/flac_jni.cc
@@ -22,7 +22,7 @@
 
 #include "include/flac_parser.h"
 
-#define LOG_TAG "NativeFlacDecoderJNI"
+#define LOG_TAG "FlacJniJNI"
 #define ALOGE(...) \
   ((void)__android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__))
 #define ALOGV(...) \
@@ -31,20 +31,20 @@
 #define FUNC(RETURN_TYPE, NAME, ...)                                       \
   extern "C" {                                                             \
   JNIEXPORT RETURN_TYPE                                                    \
-      Java_com_google_android_exoplayer_ext_flac_NativeFlacDecoder_##NAME( \
+      Java_com_google_android_exoplayer_ext_flac_FlacJni_##NAME( \
           JNIEnv *env, jobject thiz, ##__VA_ARGS__);                       \
   }                                                                        \
   JNIEXPORT RETURN_TYPE                                                    \
-      Java_com_google_android_exoplayer_ext_flac_NativeFlacDecoder_##NAME( \
+      Java_com_google_android_exoplayer_ext_flac_FlacJni_##NAME( \
           JNIEnv *env, jobject thiz, ##__VA_ARGS__)
 
 class JavaDataSource : public DataSource {
  public:
-  void setNativeFlacDecoder(JNIEnv *env, jobject nativeFlacDecoder) {
+  void setFlacJni(JNIEnv *env, jobject flacJni) {
     this->env = env;
-    this->nativeFlacDecoder = nativeFlacDecoder;
+    this->flacJni = flacJni;
     if (mid == NULL) {
-      jclass cls = env->GetObjectClass(nativeFlacDecoder);
+      jclass cls = env->GetObjectClass(flacJni);
       mid = env->GetMethodID(cls, "read", "(Ljava/nio/ByteBuffer;)I");
       env->DeleteLocalRef(cls);
     }
@@ -52,7 +52,7 @@ class JavaDataSource : public DataSource {
 
   ssize_t readAt(off64_t offset, void *const data, size_t size) {
     jobject byteBuffer = env->NewDirectByteBuffer(data, size);
-    int result = env->CallIntMethod(nativeFlacDecoder, mid, byteBuffer);
+    int result = env->CallIntMethod(flacJni, mid, byteBuffer);
     if (env->ExceptionOccurred()) {
       result = -1;
     }
@@ -62,7 +62,7 @@ class JavaDataSource : public DataSource {
 
  private:
   JNIEnv *env;
-  jobject nativeFlacDecoder;
+  jobject flacJni;
   jmethodID mid;
 };
 
@@ -80,7 +80,7 @@ FUNC(jlong, flacInit) {
 
 FUNC(jobject, flacDecodeMetadata, jlong jContext) {
   Context *context = reinterpret_cast<Context *>(jContext);
-  context->source->setNativeFlacDecoder(env, thiz);
+  context->source->setFlacJni(env, thiz);
   if (!context->parser->init()) {
     return NULL;
   }
@@ -102,7 +102,7 @@ FUNC(jobject, flacDecodeMetadata, jlong jContext) {
 
 FUNC(jint, flacDecodeToBuffer, jlong jContext, jobject jOutputBuffer) {
   Context *context = reinterpret_cast<Context *>(jContext);
-  context->source->setNativeFlacDecoder(env, thiz);
+  context->source->setFlacJni(env, thiz);
   void *outputBuffer = env->GetDirectBufferAddress(jOutputBuffer);
   jint outputSize = env->GetDirectBufferCapacity(jOutputBuffer);
   return context->parser->readBuffer(outputBuffer, outputSize);
@@ -110,7 +110,7 @@ FUNC(jint, flacDecodeToBuffer, jlong jContext, jobject jOutputBuffer) {
 
 FUNC(jint, flacDecodeToArray, jlong jContext, jbyteArray jOutputArray) {
   Context *context = reinterpret_cast<Context *>(jContext);
-  context->source->setNativeFlacDecoder(env, thiz);
+  context->source->setFlacJni(env, thiz);
   jbyte *outputBuffer = env->GetByteArrayElements(jOutputArray, NULL);
   jint outputSize = env->GetArrayLength(jOutputArray);
   int count = context->parser->readBuffer(outputBuffer, outputSize);
@@ -123,6 +123,16 @@ FUNC(jlong, flacGetLastTimestamp, jlong jContext) {
   return context->parser->getLastTimestamp();
 }
 
+FUNC(jlong, flacGetSeekPosition, jlong jContext, jlong timeUs) {
+  Context *context = reinterpret_cast<Context *>(jContext);
+  return context->parser->getSeekPosition(timeUs);
+}
+
+FUNC(void, flacFlush, jlong jContext) {
+  Context *context = reinterpret_cast<Context *>(jContext);
+  context->parser->flush();
+}
+
 FUNC(void, flacRelease, jlong jContext) {
   Context *context = reinterpret_cast<Context *>(jContext);
   delete context->parser;
diff --git a/extensions/flac/src/main/jni/flac_parser.cc b/extensions/flac/src/main/jni/flac_parser.cc
index 49128be0c5..b6658444cb 100644
--- a/extensions/flac/src/main/jni/flac_parser.cc
+++ b/extensions/flac/src/main/jni/flac_parser.cc
@@ -165,11 +165,8 @@ void FLACParser::metadataCallback(const FLAC__StreamMetadata *metadata) {
         ALOGE("FLACParser::metadataCallback unexpected STREAMINFO");
       }
       break;
-    case FLAC__METADATA_TYPE_VORBIS_COMMENT:
-      // do nothing
-      break;
-    case FLAC__METADATA_TYPE_PICTURE:
-      // do nothing
+    case FLAC__METADATA_TYPE_SEEKTABLE:
+      mSeekTable = &metadata->data.seek_table;
       break;
     default:
       ALOGE("FLACParser::metadataCallback unexpected type %u", metadata->type);
@@ -305,9 +302,7 @@ bool FLACParser::init() {
   FLAC__stream_decoder_set_metadata_respond(mDecoder,
                                             FLAC__METADATA_TYPE_STREAMINFO);
   FLAC__stream_decoder_set_metadata_respond(mDecoder,
-                                            FLAC__METADATA_TYPE_PICTURE);
-  FLAC__stream_decoder_set_metadata_respond(mDecoder,
-                                            FLAC__METADATA_TYPE_VORBIS_COMMENT);
+                                            FLAC__METADATA_TYPE_SEEKTABLE);
   FLAC__StreamDecoderInitStatus initStatus;
   initStatus = FLAC__stream_decoder_init_stream(
       mDecoder, read_callback, seek_callback, tell_callback, length_callback,
@@ -324,6 +319,9 @@ bool FLACParser::init() {
     ALOGE("end_of_metadata failed");
     return false;
   }
+  // store first frame offset
+  FLAC__stream_decoder_get_decode_position(mDecoder, &firstFrameOffset);
+
   if (mStreamInfoValid) {
     // check channel count
     if (getChannels() == 0 || getChannels() > 8) {
@@ -388,11 +386,16 @@ size_t FLACParser::readBuffer(void *output, size_t output_size) {
   mWriteCompleted = false;
 
   if (!FLAC__stream_decoder_process_single(mDecoder)) {
-    ALOGE("FLACParser::readBuffer process_single failed");
+    ALOGE("FLACParser::readBuffer process_single failed. Status: %s",
+            FLAC__stream_decoder_get_resolved_state_string(mDecoder));
     return -1;
   }
   if (!mWriteCompleted) {
-    ALOGE("FLACParser::readBuffer write did not complete");
+    if (FLAC__stream_decoder_get_state(mDecoder) !=
+        FLAC__STREAM_DECODER_END_OF_STREAM) {
+      ALOGE("FLACParser::readBuffer write did not complete. Status: %s",
+            FLAC__stream_decoder_get_resolved_state_string(mDecoder));
+    }
     return -1;
   }
 
@@ -432,3 +435,22 @@ size_t FLACParser::readBuffer(void *output, size_t output_size) {
 
   return bufferSize;
 }
+
+int64_t FLACParser::getSeekPosition(int64_t timeUs) {
+  if (!mSeekTable) {
+    return -1;
+  }
+
+  int64_t sample = (timeUs * getSampleRate()) / 1000000LL;
+  if (sample >= getTotalSamples()) {
+      sample = getTotalSamples();
+  }
+
+  FLAC__StreamMetadata_SeekPoint* points = mSeekTable->points;
+  for (unsigned i = mSeekTable->num_points - 1; i >= 0; i--) {
+    if (points[i].sample_number <= sample) {
+      return firstFrameOffset + points[i].stream_offset;
+    }
+  }
+  return firstFrameOffset;
+}
diff --git a/extensions/flac/src/main/jni/include/flac_parser.h b/extensions/flac/src/main/jni/include/flac_parser.h
index 7739815c49..22c17f7cff 100644
--- a/extensions/flac/src/main/jni/include/flac_parser.h
+++ b/extensions/flac/src/main/jni/include/flac_parser.h
@@ -39,7 +39,8 @@ class FLACParser {
   unsigned getChannels() const { return mStreamInfo.channels; }
   unsigned getBitsPerSample() const { return mStreamInfo.bits_per_sample; }
   FLAC__uint64 getTotalSamples() const { return mStreamInfo.total_samples; }
-  const FLAC__StreamMetadata_StreamInfo &getStreamInfo() const {
+
+  const FLAC__StreamMetadata_StreamInfo& getStreamInfo() const {
     return mStreamInfo;
   }
 
@@ -49,6 +50,14 @@ class FLACParser {
 
   size_t readBuffer(void *output, size_t output_size);
 
+  int64_t getSeekPosition(int64_t timeUs);
+
+  void flush() {
+    if (mDecoder != NULL) {
+      FLAC__stream_decoder_flush(mDecoder);
+    }
+  }
+
  private:
   DataSource *mDataSource;
 
@@ -66,6 +75,9 @@ class FLACParser {
   FLAC__StreamMetadata_StreamInfo mStreamInfo;
   bool mStreamInfoValid;
 
+  const FLAC__StreamMetadata_SeekTable *mSeekTable;
+  uint64_t firstFrameOffset;
+
   // cached when a decoded PCM block is "written" by libFLAC parser
   bool mWriteRequested;
   bool mWriteCompleted;
diff --git a/extensions/flac/src/main/proguard.cfg b/extensions/flac/src/main/proguard.cfg
index 971663d76e..d951cd9496 100644
--- a/extensions/flac/src/main/proguard.cfg
+++ b/extensions/flac/src/main/proguard.cfg
@@ -6,6 +6,6 @@
 }
 
 # Some members of this class are being accessed from native methods. Keep them unobfuscated.
--keep class com.google.android.exoplayer.ext.flac.NativeFlacDecoder {
+-keep class com.google.android.exoplayer.ext.flac.FlacJni {
     *;
 }
