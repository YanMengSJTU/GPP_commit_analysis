diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/webm/WebmExtractor.java b/library/src/main/java/com/google/android/exoplayer/extractor/webm/WebmExtractor.java
index c95deab41a..aa316b2fa2 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/webm/WebmExtractor.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/webm/WebmExtractor.java
@@ -151,7 +151,9 @@
   private static final int ID_CUE_TRACK_POSITIONS = 0xB7;
   private static final int ID_CUE_CLUSTER_POSITION = 0xF1;
   private static final int ID_LANGUAGE = 0x22B59C;
-
+  private static final int ID_PROJECTION = 0x7670;
+  private static final int ID_PROJECTION_PRIVATE = 0x7672;
+  private static final int ID_STEREO_MODE = 0x53B8;
   private static final int LACING_NONE = 0;
   private static final int LACING_XIPH = 1;
   private static final int LACING_FIXED_SIZE = 2;
@@ -350,6 +352,7 @@ public int read(ExtractorInput input, PositionHolder seekPosition) throws IOExce
       case ID_CUE_POINT:
       case ID_CUE_TRACK_POSITIONS:
       case ID_BLOCK_GROUP:
+      case ID_PROJECTION:
         return EbmlReader.TYPE_MASTER;
       case ID_EBML_READ_VERSION:
       case ID_DOC_TYPE_READ_VERSION:
@@ -377,6 +380,7 @@ public int read(ExtractorInput input, PositionHolder seekPosition) throws IOExce
       case ID_CUE_TIME:
       case ID_CUE_CLUSTER_POSITION:
       case ID_REFERENCE_BLOCK:
+      case ID_STEREO_MODE:
         return EbmlReader.TYPE_UNSIGNED_INT;
       case ID_DOC_TYPE:
       case ID_CODEC_ID:
@@ -388,6 +392,7 @@ public int read(ExtractorInput input, PositionHolder seekPosition) throws IOExce
       case ID_SIMPLE_BLOCK:
       case ID_BLOCK:
       case ID_CODEC_PRIVATE:
+      case ID_PROJECTION_PRIVATE:
         return EbmlReader.TYPE_BINARY;
       case ID_DURATION:
       case ID_SAMPLING_FREQUENCY:
@@ -638,6 +643,22 @@ public int read(ExtractorInput input, PositionHolder seekPosition) throws IOExce
       case ID_BLOCK_DURATION:
         blockDurationUs = scaleTimecodeToUs(value);
         return;
+      case ID_STEREO_MODE:
+        int layout = (int) value;
+        switch (layout) {
+          case 0:
+            currentTrack.stereoMode = C.STEREO_MODE_MONO;
+            break;
+          case 1:
+            currentTrack.stereoMode = C.STEREO_MODE_LEFT_RIGHT;
+            break;
+          case 3:
+            currentTrack.stereoMode = C.STEREO_MODE_TOP_BOTTOM;
+            break;
+          default:
+            break;
+        }
+        return;
       default:
         return;
     }
@@ -688,6 +709,10 @@ public int read(ExtractorInput input, PositionHolder seekPosition) throws IOExce
         currentTrack.codecPrivate = new byte[contentSize];
         input.readFully(currentTrack.codecPrivate, 0, contentSize);
         return;
+      case ID_PROJECTION_PRIVATE:
+        currentTrack.projectionData = new byte[contentSize];
+        input.readFully(currentTrack.projectionData, 0, contentSize);
+        return;
       case ID_CONTENT_COMPRESSION_SETTINGS:
         // This extractor only supports header stripping, so the payload is the stripped bytes.
         currentTrack.sampleStrippedBytes = new byte[contentSize];
@@ -1276,6 +1301,8 @@ public void binaryElement(int id, int contentsSize, ExtractorInput input)
     public int displayWidth = MediaFormat.NO_VALUE;
     public int displayHeight = MediaFormat.NO_VALUE;
     public int displayUnit = DISPLAY_UNIT_PIXELS;
+    public byte[] projectionData = null;
+    public int stereoMode = MediaFormat.NO_VALUE;
 
     // Audio elements. Initially set to their default values.
     public int channelCount = 1;
@@ -1427,7 +1454,7 @@ public void initializeOutput(ExtractorOutput output, int trackId, long durationU
         }
         format = MediaFormat.createVideoFormat(Integer.toString(trackId), mimeType,
             MediaFormat.NO_VALUE, maxInputSize, durationUs, width, height, initializationData,
-            MediaFormat.NO_VALUE, pixelWidthHeightRatio);
+            MediaFormat.NO_VALUE, pixelWidthHeightRatio, projectionData, stereoMode);
       } else if (MimeTypes.APPLICATION_SUBRIP.equals(mimeType)) {
         format = MediaFormat.createTextFormat(Integer.toString(trackId), mimeType,
             MediaFormat.NO_VALUE, durationUs, language);
