diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java
index 66036b7a84..6eba0cb7e6 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java
@@ -164,6 +164,7 @@ public DefaultHttpDataSource(
     this.defaultRequestProperties = defaultRequestProperties;
   }
 
+
   /**
    * @param userAgent The User-Agent string that should be used.
    * @param contentTypePredicate An optional {@link Predicate}. If a content type is rejected by the
@@ -275,12 +276,21 @@ public void clearAllRequestProperties() {
     requestProperties.clear();
   }
 
+  public interface HLSUrlListener{
+
+    public void urlOpened(String url);
+  }
+  private HLSUrlListener hlsUrlListener;
+  public void setHlsUrlListener(HLSUrlListener hlsUrlListener){
+    this.hlsUrlListener=hlsUrlListener;
+  }
   @Override
   public long open(DataSpec dataSpec) throws HttpDataSourceException {
     this.dataSpec = dataSpec;
     this.bytesRead = 0;
     this.bytesSkipped = 0;
     transferInitializing(dataSpec);
+
     try {
       connection = makeConnection(dataSpec);
     } catch (IOException e) {
@@ -290,6 +300,9 @@ public long open(DataSpec dataSpec) throws HttpDataSourceException {
 
     int responseCode;
     String responseMessage;
+    if(hlsUrlListener!=null) {
+      hlsUrlListener.urlOpened(dataSpec.uri.toString());
+    }
     try {
       responseCode = connection.getResponseCode();
       responseMessage = connection.getResponseMessage();
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSourceFactory.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSourceFactory.java
index 371343857f..eb9baa33c5 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSourceFactory.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSourceFactory.java
@@ -28,6 +28,7 @@
   private final int connectTimeoutMillis;
   private final int readTimeoutMillis;
   private final boolean allowCrossProtocolRedirects;
+  private DefaultHttpDataSource.HLSUrlListener hlsUrlListener;
 
   /**
    * Constructs a DefaultHttpDataSourceFactory. Sets {@link
@@ -89,16 +90,27 @@ public DefaultHttpDataSourceFactory(
    *     to HTTPS and vice versa) are enabled.
    */
   public DefaultHttpDataSourceFactory(
-      String userAgent,
-      @Nullable TransferListener listener,
-      int connectTimeoutMillis,
-      int readTimeoutMillis,
-      boolean allowCrossProtocolRedirects) {
+          String userAgent,
+          @Nullable TransferListener listener,
+          int connectTimeoutMillis,
+          int readTimeoutMillis,
+          boolean allowCrossProtocolRedirects) {
     this.userAgent = Assertions.checkNotEmpty(userAgent);
     this.listener = listener;
     this.connectTimeoutMillis = connectTimeoutMillis;
     this.readTimeoutMillis = readTimeoutMillis;
     this.allowCrossProtocolRedirects = allowCrossProtocolRedirects;
+
+  }
+  public DefaultHttpDataSourceFactory(
+          String userAgent,
+          @Nullable TransferListener listener,
+          int connectTimeoutMillis,
+          int readTimeoutMillis,
+          boolean allowCrossProtocolRedirects,
+          DefaultHttpDataSource.HLSUrlListener hlsUrlListener) {
+    this(userAgent,listener,connectTimeoutMillis,readTimeoutMillis,allowCrossProtocolRedirects);
+    this.hlsUrlListener=hlsUrlListener;
   }
 
   @Override
@@ -115,6 +127,9 @@ protected DefaultHttpDataSource createDataSourceInternal(
     if (listener != null) {
       dataSource.addTransferListener(listener);
     }
+    if(hlsUrlListener!=null) {
+      dataSource.setHlsUrlListener(hlsUrlListener);
+    }
     return dataSource;
   }
 }
