diff --git a/demo/src/main/AndroidManifest.xml b/demo/src/main/AndroidManifest.xml
index c34f60915a..e877819979 100644
--- a/demo/src/main/AndroidManifest.xml
+++ b/demo/src/main/AndroidManifest.xml
@@ -113,6 +113,11 @@
             android:name=".services.DownloaderService"
             android:enabled="true"
             android:exported="false"></service>
+
+        <receiver android:name=".services.StopServiceReceiver"
+            android:enabled="true"
+            android:process=":remote"/>
+
     </application>
 
 </manifest>
\ No newline at end of file
diff --git a/demo/src/main/java/com/novo/adapters/VideoAdapter.java b/demo/src/main/java/com/novo/adapters/VideoAdapter.java
index 34a05b9eb9..0fbbcce65a 100644
--- a/demo/src/main/java/com/novo/adapters/VideoAdapter.java
+++ b/demo/src/main/java/com/novo/adapters/VideoAdapter.java
@@ -33,6 +33,7 @@
     private final int resource;
     private final List<VideoModel> items;
     private ItemListener listener;
+    private final LayoutInflater inflater;
 
     public interface ItemListener {
         void onVideoPlayClicked(VideoModel model);
@@ -54,6 +55,7 @@ public VideoAdapter(@NonNull Activity activity, @LayoutRes int resource, @NonNul
         this.activity = activity;
         this.resource = resource;
         this.items = objects;
+        inflater = (LayoutInflater) activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
     }
 
     @Nullable
@@ -66,29 +68,34 @@ public VideoModel getItem(int position) {
     @Override
     public View getView(final int position, @Nullable View convertView, @NonNull ViewGroup parent) {
 
-        View v = convertView;
-//        if (v == null) {
-        LayoutInflater inflater = (LayoutInflater) activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-        v = inflater.inflate(resource, parent, false);
-//        }
+        final ViewHolder viewHolder;
+        if (convertView == null) {
+            viewHolder = new ViewHolder();
+            convertView = inflater.inflate(resource, parent, false);
+            viewHolder.ivThumb = (ImageView) convertView.findViewById(R.id.ivThumb);
+            viewHolder.ivDownload = (ImageView) convertView.findViewById(R.id.ivDownload);
+            viewHolder.tvTitle = (TextView) convertView.findViewById(R.id.tvTitle);
+            viewHolder.tvPercentage = (TextView) convertView.findViewById(R.id.tvPercentage);
+            convertView.setTag(viewHolder);
+        } else {
+            viewHolder = (ViewHolder) convertView.getTag();
+        }
 
-        ImageView ivThumb = (ImageView) v.findViewById(R.id.ivThumb);
-        final ImageView ivDownload = (ImageView) v.findViewById(R.id.ivDownload);
-        TextView tvTitle = (TextView) v.findViewById(R.id.tvTitle);
+        viewHolder.tvPercentage.setText("");
 
-         File dir = new File(new Utils(activity).getStorageDirectoryExtracts() + items.get(position).getVideoId());
-         File[] file = dir.listFiles();
+        File dir = new File(new Utils(activity).getStorageDirectoryExtracts() + items.get(position).getVideoId());
+        File[] file = dir.listFiles();
         if(Utils.isFolderPresent(dir) && ZipHelper.searchFile(file, null)){
-            ivDownload.setImageResource(R.drawable.ic_delete_black_24dp);
+            viewHolder.ivDownload.setImageResource(R.drawable.ic_delete_black_24dp);
         } else {
-            ivDownload.setImageResource(R.drawable.ic_file_download_black_24dp);
+            viewHolder.ivDownload.setImageResource(R.drawable.ic_file_download_black_24dp);
         }
 
 
-        Glide.with(activity).load(items.get(position).getThumbnail()).into(ivThumb);
-        tvTitle.setText(items.get(position).getName());
+        Glide.with(activity).load(items.get(position).getThumbnail()).into(viewHolder.ivThumb);
+        viewHolder.tvTitle.setText(items.get(position).getName());
 
-        ivDownload.setOnClickListener(new View.OnClickListener() {
+        viewHolder.ivDownload.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
                 if(listener != null) {
@@ -96,15 +103,15 @@ public void onClick(View v) {
                     final File[] file = dir.listFiles();
                     if (Utils.isFolderPresent(dir) && ZipHelper.searchFile(file, null)) { // if file is present
                         AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(activity);
-                        alertDialogBuilder.setTitle("Delete"); // set title
-                        alertDialogBuilder.setMessage("Do you want to delete this offline video?") // set dialog message
+                        alertDialogBuilder.setTitle(R.string.delete); // set title
+                        alertDialogBuilder.setMessage(R.string.do_you_want_to_delete) // set dialog message
                                 .setCancelable(false)
-                                .setPositiveButton("Yes", new DialogInterface.OnClickListener() {
+                                .setPositiveButton(R.string.yes, new DialogInterface.OnClickListener() {
                                     public void onClick(DialogInterface dialog, int id) {
-                                        listener.onDeleteClicked(dir, ivDownload);
+                                        listener.onDeleteClicked(dir, viewHolder.ivDownload);
                                     }
                                 })
-                                .setNegativeButton("No", new DialogInterface.OnClickListener() {
+                                .setNegativeButton(R.string.no, new DialogInterface.OnClickListener() {
                                     public void onClick(DialogInterface dialog, int id) {
                                         dialog.cancel();
                                     }
@@ -113,15 +120,15 @@ public void onClick(DialogInterface dialog, int id) {
                         alertDialog.show(); // show it
                     } else {
                         AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(activity);
-                        alertDialogBuilder.setTitle("Download"); // set title
-                        alertDialogBuilder.setMessage("Do you want to download this video?") // set dialog message
+                        alertDialogBuilder.setTitle(R.string.download); // set title
+                        alertDialogBuilder.setMessage(R.string.do_you_want_to_download) // set dialog message
                                 .setCancelable(false)
-                                .setPositiveButton("Yes", new DialogInterface.OnClickListener() {
+                                .setPositiveButton(R.string.yes, new DialogInterface.OnClickListener() {
                                     public void onClick(DialogInterface dialog, int id) {
-                                        listener.onDownloadClicked(items.get(position), ivDownload);
+                                        listener.onDownloadClicked(items.get(position), viewHolder.ivDownload);
                                     }
                                 })
-                                .setNegativeButton("No", new DialogInterface.OnClickListener() {
+                                .setNegativeButton(R.string.no, new DialogInterface.OnClickListener() {
                                     public void onClick(DialogInterface dialog, int id) {
                                         dialog.cancel();
                                     }
@@ -134,7 +141,7 @@ public void onClick(DialogInterface dialog, int id) {
             }
         });
 
-        v.setOnClickListener(new View.OnClickListener() {
+        convertView.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
                 if(listener != null)
@@ -142,6 +149,14 @@ public void onClick(View v) {
             }
         });
 
-        return v;
+        return convertView;
     }
+
+    public class ViewHolder {
+        ImageView ivThumb;
+        ImageView ivDownload;
+        TextView tvTitle;
+        TextView tvPercentage;
+    }
+
 }
diff --git a/demo/src/main/java/com/novo/downloadmgr/DownloadHelper.java b/demo/src/main/java/com/novo/downloadmgr/DownloadHelper.java
new file mode 100644
index 0000000000..adda3125bd
--- /dev/null
+++ b/demo/src/main/java/com/novo/downloadmgr/DownloadHelper.java
@@ -0,0 +1,198 @@
+package com.novo.downloadmgr;
+
+import android.app.DownloadManager;
+import android.content.Context;
+import android.database.Cursor;
+import android.net.Uri;
+import android.util.Log;
+import android.view.View;
+
+import com.novo.models.FileDownloadModel;
+import com.novo.util.Utils;
+
+import static android.content.Context.DOWNLOAD_SERVICE;
+import static com.novo.util.Utils.TAG;
+
+/**
+ * Created by Hisham on 12/Sep/2017 - 13:31
+ */
+
+public class DownloadHelper {
+
+    private final Context context;
+    private DownloadManager downloadManager;
+
+    public DownloadHelper(Context context) {
+        this.context = context;
+        downloadManager = (DownloadManager) context.getSystemService(DOWNLOAD_SERVICE);
+    }
+
+    public long downloadFiles(FileDownloadModel downloadModel, View v) {
+
+        long downloadReference;
+
+        // Create request for android download manager
+        DownloadManager.Request request = new DownloadManager.Request(Uri.parse(downloadModel.getLink()));
+
+        //Setting title of request
+        request.setTitle(downloadModel.getVideoTitle());
+
+        //Setting description of request
+//        request.setDescription(downloadModel.getVideoTitle());
+
+        //Set the local destination for the downloaded file to a path
+        //within the application's external files directory
+//        if(v.getId() == R.id.DownloadMusic)
+        request.setDestinationInExternalFilesDir(context, new Utils(context).getPathForDownloadManager(), downloadModel.getVideoId());
+//        else if(v.getId() == R.id.DownloadImage)
+//            request.setDestinationInExternalFilesDir(context, Environment.DIRECTORY_DOWNLOADS,"AndroidTutorialPoint.jpg");
+
+        //Enqueue download and save into referenceId
+        downloadReference = downloadManager.enqueue(request);
+
+//        Button downloadStatus = (Button) findViewById(R.id.downloadStatus);
+//        downloadStatus.setEnabled(true);
+//        Button CancelDownload = (Button) findViewById(R.id.CancelDownload);
+//        CancelDownload.setEnabled(true);
+        request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);
+//        request.addRequestHeader("token", token) // todo will be used later
+
+        return downloadReference;
+    }
+
+    public void checkDownloadStatus(long downloadReference) {
+
+        DownloadManager.Query ImageDownloadQuery = new DownloadManager.Query();
+        //set the query filter to our previously Enqueued download
+        ImageDownloadQuery.setFilterById(downloadReference);
+
+        //Query the download manager about downloads that have been requested.
+        Cursor cursor = downloadManager.query(ImageDownloadQuery);
+        if (cursor.moveToFirst()) {
+            downloadStatus(cursor, downloadReference);
+        }
+    }
+
+    private void downloadStatus(Cursor cursor, long downloadReference) {
+
+        //column for download  status
+        int columnIndex = cursor.getColumnIndex(DownloadManager.COLUMN_STATUS);
+        int status = cursor.getInt(columnIndex);
+        //column for reason code if the download failed or paused
+        int columnReason = cursor.getColumnIndex(DownloadManager.COLUMN_REASON);
+        int reason = cursor.getInt(columnReason);
+        //get the download filename
+        int filenameIndex = cursor.getColumnIndex(DownloadManager.COLUMN_LOCAL_FILENAME);
+        String filename = cursor.getString(filenameIndex);
+
+        int sizeIndex = cursor.getColumnIndex(DownloadManager.COLUMN_TOTAL_SIZE_BYTES);
+        int downloadedIndex = cursor.getColumnIndex(DownloadManager.COLUMN_BYTES_DOWNLOADED_SO_FAR);
+        long size = cursor.getInt(sizeIndex);
+        long downloaded = cursor.getInt(downloadedIndex);
+        double progress = 0.0;
+        if (size != -1) progress = downloaded * 100.0 / size;
+        // At this point you have the progress as a percentage.
+
+        String statusText = "";
+        String reasonText = "";
+
+        switch (status) {
+            case DownloadManager.STATUS_FAILED:
+                statusText = "STATUS_FAILED";
+                switch (reason) {
+                    case DownloadManager.ERROR_CANNOT_RESUME:
+                        reasonText = "ERROR_CANNOT_RESUME";
+                        break;
+                    case DownloadManager.ERROR_DEVICE_NOT_FOUND:
+                        reasonText = "ERROR_DEVICE_NOT_FOUND";
+                        break;
+                    case DownloadManager.ERROR_FILE_ALREADY_EXISTS:
+                        reasonText = "ERROR_FILE_ALREADY_EXISTS";
+                        break;
+                    case DownloadManager.ERROR_FILE_ERROR:
+                        reasonText = "ERROR_FILE_ERROR";
+                        break;
+                    case DownloadManager.ERROR_HTTP_DATA_ERROR:
+                        reasonText = "ERROR_HTTP_DATA_ERROR";
+                        break;
+                    case DownloadManager.ERROR_INSUFFICIENT_SPACE:
+                        reasonText = "ERROR_INSUFFICIENT_SPACE";
+                        break;
+                    case DownloadManager.ERROR_TOO_MANY_REDIRECTS:
+                        reasonText = "ERROR_TOO_MANY_REDIRECTS";
+                        break;
+                    case DownloadManager.ERROR_UNHANDLED_HTTP_CODE:
+                        reasonText = "ERROR_UNHANDLED_HTTP_CODE";
+                        break;
+                    case DownloadManager.ERROR_UNKNOWN:
+                        reasonText = "ERROR_UNKNOWN";
+                        break;
+                }
+                break;
+            case DownloadManager.STATUS_PAUSED:
+                statusText = "STATUS_PAUSED";
+                switch (reason) {
+                    case DownloadManager.PAUSED_QUEUED_FOR_WIFI:
+                        reasonText = "PAUSED_QUEUED_FOR_WIFI";
+                        break;
+                    case DownloadManager.PAUSED_UNKNOWN:
+                        reasonText = "PAUSED_UNKNOWN";
+                        break;
+                    case DownloadManager.PAUSED_WAITING_FOR_NETWORK:
+                        reasonText = "PAUSED_WAITING_FOR_NETWORK";
+                        break;
+                    case DownloadManager.PAUSED_WAITING_TO_RETRY:
+                        reasonText = "PAUSED_WAITING_TO_RETRY";
+                        break;
+                }
+                break;
+            case DownloadManager.STATUS_PENDING:
+                statusText = "STATUS_PENDING";
+                break;
+            case DownloadManager.STATUS_RUNNING:
+                statusText = "STATUS_RUNNING";
+                break;
+            case DownloadManager.STATUS_SUCCESSFUL:
+                statusText = "STATUS_SUCCESSFUL";
+                reasonText = "Filename:\n" + filename;
+                break;
+        }
+
+        Log.d(TAG, "downloadStatus: " + "Music Download Status:" + "\n" + statusText + "\n" +
+                reasonText);
+
+//        if(downloadReference == Music_DownloadId) {
+//
+//            Toast toast = Toast.makeText(MainActivity.this,
+//                    "Music Download Status:" + "\n" + statusText + "\n" +
+//                            reasonText,
+//                    Toast.LENGTH_LONG);
+//            toast.setGravity(Gravity.TOP, 25, 400);
+//            toast.show();
+//
+//        }
+//        else {
+//
+//            Toast toast = Toast.makeText(MainActivity.this,
+//                    "Image Download Status:"+ "\n" + statusText + "\n" +
+//                            reasonText,
+//                    Toast.LENGTH_LONG);
+//            toast.setGravity(Gravity.TOP, 25, 400);
+//            toast.show();
+//
+//            // Make a delay of 3 seconds so that next toast (Music Status) will not merge with this one.
+//            final Handler handler = new Handler();
+//            handler.postDelayed(new Runnable() {
+//                @Override
+//                public void run() {
+//                }
+//            }, 3000);
+//        }
+        cursor.close();
+    }
+
+    public void deleteFile(long fileId) {
+        downloadManager.remove(fileId);
+    }
+
+}
diff --git a/demo/src/main/java/com/novo/main/HomeActivity.java b/demo/src/main/java/com/novo/main/HomeActivity.java
index 2572517e20..2fad3519df 100644
--- a/demo/src/main/java/com/novo/main/HomeActivity.java
+++ b/demo/src/main/java/com/novo/main/HomeActivity.java
@@ -1,5 +1,6 @@
 package com.novo.main;
 
+import android.app.DownloadManager;
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
@@ -11,6 +12,7 @@
 import android.support.v7.app.AppCompatActivity;
 import android.text.TextUtils;
 import android.util.Log;
+import android.view.Gravity;
 import android.view.MenuItem;
 import android.view.View;
 import android.widget.Button;
@@ -73,6 +75,7 @@ protected void onCreate(Bundle savedInstanceState) {
         receiver = new BroadcastReceiver() {
             @Override
             public void onReceive(Context context, Intent intent) {
+                long startTime = System.currentTimeMillis();
                 //do something based on the intent's action
                 Bundle b = intent.getExtras();
                 FileDownloadModel downloadModel = (FileDownloadModel) b.getSerializable("fileDownloadModelReturned");
@@ -81,8 +84,8 @@ public void onReceive(Context context, Intent intent) {
 
                 for (int i = 0; i < lvAll.getAdapter().getCount(); i++) {
                     View child = lvAll.getChildAt(i);
-                    if(videoModelsList.get(i).getVideoId().equalsIgnoreCase(downloadModel.getVideoId())) {
-                        TextView tvPercentage = (TextView) child.findViewById(R.id.tvPercentage);
+                    if (child != null && videoModelsList.get(i).getVideoId().equalsIgnoreCase(downloadModel.getVideoId())) {
+                        TextView tvPercentage = (TextView) child.findViewById(R.id.tvPercentage); // todo fix getting a crash here sometimes null pointer
                         ImageView ivDownload = (ImageView) child.findViewById(R.id.ivDownload);
 
                         switch (downloadModel.getStatus()) {
@@ -106,11 +109,14 @@ public void onReceive(Context context, Intent intent) {
                             case ERROR:
                                 tvPercentage.setText(R.string.unable_to_download);
                                 break;
+                            case CANCELLED:
+                                tvPercentage.setText("");
+                                break;
                         }
                         break;
                     }
                 }
-
+                Log.d(TAG, "onReceive: Time taken to search views in videoModelsList = " + (System.currentTimeMillis() - startTime) + " ms");
             }
         };
         registerReceiver(receiver, filter);
@@ -127,8 +133,55 @@ private void initStuff() {
         lvAll = (GridView) findViewById(R.id.lvAll);
         ServerHit.JSONTask task = new ServerHit.JSONTask(this, TokenManager.getToken(), "GET", null, null, new ServerHit.ServiceHitResponseListener() {
             @Override
-            public void onDone(final String response) {
+            public void onDone(String response) {
                 Log.d(TAG, "onDone: " + response);
+                response = "[\n" +
+                        "  {\n" +
+                        "    \"thumbnail\": \"http://35.154.11.202/VocabimateContentServer/thumbnails/thumbnail.jpg\",\n" +
+                        "    \"name\": \"Encrypted Stream - Open Policy\",\n" +
+                        "    \"videoId\": \"Gear_640x3642340_750k_open\"\n" +
+                        "  },\n" +
+                        "  {\n" +
+                        "    \"thumbnail\": \"http://35.154.11.202/VocabimateContentServer/thumbnails/thumbnail.jpg\",\n" +
+                        "    \"name\": \"Encrypted Stream - Token Auth policy\",\n" +
+                        "    \"videoId\": \"Gear_640x3612340_750k_auth\"\n" +
+                        "  },\n" +
+                        "  {\n" +
+                        "    \"thumbnail\": \"http://35.154.11.202/VocabimateContentServer/thumbnails/thumbnail.jpg\",\n" +
+                        "    \"name\": \"Gear\",\n" +
+                        "    \"videoId\": \"5WT9g212m4outw\"\n" +
+                        "  },\n" +
+                        "  {\n" +
+                        "    \"thumbnail\": \"http://35.154.11.202/VocabimateContentServer/thumbnails/thumbnail.jpg\",\n" +
+                        "    \"name\": \"Encrypted Stream - Open Policy\",\n" +
+                        "    \"videoId\": \"Gear_640x369870_750k_open\"\n" +
+                        "  },\n" +
+                        "  {\n" +
+                        "    \"thumbnail\": \"http://35.154.11.202/VocabimateContentServer/thumbnails/thumbnail.jpg\",\n" +
+                        "    \"name\": \"Encrypted Stream - Token Auth policy\",\n" +
+                        "    \"videoId\": \"Gear_640x8360_750k_auth\"\n" +
+                        "  },\n" +
+                        "  {\n" +
+                        "    \"thumbnail\": \"http://35.154.11.202/VocabimateContentServer/thumbnails/thumbnail.jpg\",\n" +
+                        "    \"name\": \"Gear\",\n" +
+                        "    \"videoId\": \"5WT9gm654outw\"\n" +
+                        "  },\n" +
+                        "  {\n" +
+                        "    \"thumbnail\": \"http://35.154.11.202/VocabimateContentServer/thumbnails/thumbnail.jpg\",\n" +
+                        "    \"name\": \"Encrypted Stream - Open Policy\",\n" +
+                        "    \"videoId\": \"Gear_54640x360_750k_open\"\n" +
+                        "  },\n" +
+                        "  {\n" +
+                        "    \"thumbnail\": \"http://35.154.11.202/VocabimateContentServer/thumbnails/thumbnail.jpg\",\n" +
+                        "    \"name\": \"Encrypted Stream - Token Auth policy\",\n" +
+                        "    \"videoId\": \"Gear_63440x360_750k_auth\"\n" +
+                        "  },\n" +
+                        "  {\n" +
+                        "    \"thumbnail\": \"http://35.154.11.202/VocabimateContentServer/thumbnails/thumbnail.jpg\",\n" +
+                        "    \"name\": \"Gear\",\n" +
+                        "    \"videoId\": \"5WT9gm234outw\"\n" +
+                        "  }\n" +
+                        "]";
                 videoModelsList = getVideoModelsFromResponse(response);
                 adapter = new VideoAdapter(activity, R.layout.row_videos_grid, videoModelsList);
                 adapter.setItemListener(activity);
@@ -224,12 +277,6 @@ public void onError(String error) {
     protected void onResume() {
         super.onResume();
         loginButtonTextUpdate();
-//        File dir = new File(storageDirectoryZips + videoId);
-//        if(isFolderPresent(dir)){
-//            iVDownload.setImageResource(R.mipmap.ic_download_complete);
-//        } else {
-//            iVDownload.setImageResource(R.mipmap.ic_download);
-//        }
     }
 
     private void loginButtonTextUpdate() {
@@ -304,10 +351,7 @@ public void onDownloadClicked(VideoModel model, final ImageView ivDownload) {
 //        bundle.putString("filePath", sourceZipFile.getAbsolutePath());
 //        bundle.putString("targetDirectoryPath", targetDirectory.getAbsolutePath());
 //        bundle.putString("CallbackString", "progress_callback");
-        startService(intent.putExtras(bundle));
-
-
-
+        startService(intent.putExtras(bundle)); // todo uncomment
 
 //        final DownloadTask downloadTask = new DownloadTask(activity, TokenManager.getToken(), sourceZipFile.getAbsolutePath(), new DownloadTask.DownloadTaskListener() {
 //            @Override
diff --git a/demo/src/main/java/com/novo/models/FileDownloadModel.java b/demo/src/main/java/com/novo/models/FileDownloadModel.java
index 6c7acfb28f..ed73da23ab 100644
--- a/demo/src/main/java/com/novo/models/FileDownloadModel.java
+++ b/demo/src/main/java/com/novo/models/FileDownloadModel.java
@@ -1,5 +1,7 @@
 package com.novo.models;
 
+import android.text.TextUtils;
+
 import java.io.Serializable;
 
 /**
@@ -9,7 +11,7 @@
 public class FileDownloadModel implements Serializable {
 
     public enum Status {
-        DOWNLOADING, DOWNLOADED, UNZIPPING, UNZIPPED, ERROR
+        DOWNLOADING, DOWNLOADED, UNZIPPING, UNZIPPED, CANCELLED, ERROR
     }
 
     private String videoId;
@@ -105,4 +107,14 @@ public FileDownloadModel setCallBackIntent(String callBackIntent) {
         this.callBackIntent = callBackIntent;
         return this;
     }
+
+    @Override
+    public boolean equals(Object obj) {
+        FileDownloadModel model = (FileDownloadModel) obj;
+        if(!TextUtils.isEmpty(videoId) && videoId.equalsIgnoreCase(model.getVideoId()) &&
+                !TextUtils.isEmpty(videoTitle) && videoTitle.equalsIgnoreCase(model.getVideoTitle())){
+            return true;
+        }
+        return super.equals(obj);
+    }
 }
diff --git a/demo/src/main/java/com/novo/services/DownloaderService.java b/demo/src/main/java/com/novo/services/DownloaderService.java
index 3633fc565f..cfcecf126a 100644
--- a/demo/src/main/java/com/novo/services/DownloaderService.java
+++ b/demo/src/main/java/com/novo/services/DownloaderService.java
@@ -1,6 +1,5 @@
 package com.novo.services;
 
-import android.app.Notification;
 import android.app.PendingIntent;
 import android.app.Service;
 import android.content.Intent;
@@ -25,6 +24,8 @@
 import java.io.OutputStream;
 import java.net.HttpURLConnection;
 import java.net.URL;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipInputStream;
 
@@ -40,31 +41,78 @@ public DownloaderService() {
     @Override
     public void onCreate() {
         super.onCreate();
-        Intent notificationIntent = new Intent(this, HomeActivity.class);
-
         PendingIntent pendingIntent = PendingIntent.getActivity(this, 0,
-                notificationIntent, 0);
+                new Intent(this, HomeActivity.class), 0);
+
+        PendingIntent dismissPendingIntent = PendingIntent.getBroadcast(this, (int) System.currentTimeMillis(),
+                new Intent(this, StopServiceReceiver.class), PendingIntent.FLAG_CANCEL_CURRENT);
 
         builder = new NotificationCompat.Builder(this);
         builder.setSmallIcon(R.mipmap.ic_launcher)
-                .setContentTitle("Downloading...")
+                .setContentTitle(getString(R.string.downloading))
                 .setContentIntent(pendingIntent);
+        builder.addAction(R.drawable.ic_cancel_black_24dp, "Cancel", dismissPendingIntent);
 //        Notification notification = builder.build();
 //        startForeground(1337, notification);
     }
 
+    private boolean cancelled = false; // means cancel everything
+    private boolean isDownloading = false;
+    private final List<FileDownloadModel> fileDownloadList = new ArrayList<>();
+    private int counter = 0;
+    private Thread thread;
     @Override
     public int onStartCommand(Intent intent, int flags, int startId) {
         if (intent != null && intent.hasExtra("fileDownloadModel")) {
             final FileDownloadModel fileDownloadModel = (FileDownloadModel) intent.getSerializableExtra("fileDownloadModel");
-            new Thread(new Runnable() {
-                @Override
-                public void run() {
-                    startDownload(fileDownloadModel, builder);
-                }
-            }).start();
+            if(!fileDownloadList.contains(fileDownloadModel)){
+                fileDownloadList.add(fileDownloadModel);
+            }
+
+            if(thread == null || !thread.isAlive()) { // if thread is not running, start it. to maintain only one background thread is running at all time.
+                thread = new Thread(new Runnable() {
+                    @Override
+                    public void run() {
+                        synchronized (fileDownloadList) { // avoiding race condition
+                            while (fileDownloadList.size() > 0) {
+                                Log.d(TAG, "service while loop counter : " + ++counter);
+                                if (fileDownloadList.size() > 0) {
+                                    if (!isDownloading) {
+                                        isDownloading = true;
+                                        startDownload(fileDownloadList.get(0), builder);
+                                    }
+                                } else {
+                                    stopEverything(false); // stop the service as nothing to download
+                                }
+                                try {
+                                    Thread.sleep(1000);
+                                } catch (InterruptedException e) {
+                                    e.printStackTrace();
+                                }
+                            }
+
+                            if (!isDownloading) {
+                                stopEverything(false);
+                            }
+                        }
+                    }
+                });
+                thread.start();
+            }
+
+            Log.d(TAG, "Thread Information: " + thread.toString());
+
+        }
+        return START_REDELIVER_INTENT;
+    }
+
+    private void stopEverything(boolean fromDestroy) {
+        cancelled = true;
+        fileDownloadList.clear();
+        isDownloading = false;
+        if(!fromDestroy) {
+            stopSelf();
         }
-        return super.onStartCommand(intent, flags, startId);
     }
 
     @Override
@@ -104,11 +152,12 @@ private String startDownload(FileDownloadModel fileDownloadModel, NotificationCo
             int count;
             int updateCounter = 0;
             while ((count = input.read(data)) != -1) {
-//                // allow canceling with back button
-//                if (isCancelled()) {
-//                    input.close();
-//                    return null;
-//                }
+                // allow canceling with back button
+                if (isCancelled()) {
+                    input.close();
+                    updateProgressInNotification(fileDownloadModel.setStatus(FileDownloadModel.Status.CANCELLED), builder, fileLength, total);
+                    return null;
+                }
                 total += count;
                 updateCounter++; // counter for updating progress
                 if (updateCounter % 200 == 0) {
@@ -124,7 +173,7 @@ private String startDownload(FileDownloadModel fileDownloadModel, NotificationCo
             updateProgressInNotification(fileDownloadModel.setStatus(FileDownloadModel.Status.UNZIPPING), builder, fileLength, total);
             unzip(new File(fileDownloadModel.getFilePath()), new File(fileDownloadModel.getTargetDirectoryPath()));
             updateProgressInNotification(fileDownloadModel.setStatus(FileDownloadModel.Status.UNZIPPED), builder, fileLength, total);
-
+            fileDownloadList.remove(fileDownloadModel); // removing from list
         } catch (Exception e) {
             sendCallback(fileDownloadModel.setProgress(-1).setStatus(FileDownloadModel.Status.ERROR));
             return e.toString();
@@ -134,7 +183,6 @@ private String startDownload(FileDownloadModel fileDownloadModel, NotificationCo
             builder.setContentText("Download complete");
             // Removes the progress bar
 //                    builder.setProgress(0,0,false);
-            stopSelf();
             try {
                 if (output != null)
                     output.close();
@@ -201,8 +249,14 @@ private void updateProgressInNotification(FileDownloadModel fileDownloadModel, N
             long totalMB = fileLength / (1024 * 1024);
             long currentMB = total / (1024 * 1024);
             builder.setProgress(100, percentage, false);
-            builder.setContentText(percentage + "%")
-                    .setContentInfo(currentMB + "MB / " + totalMB + "MB");
+
+            if(fileDownloadList.size() > 1){
+                int queue = fileDownloadList.size() - 1;
+                builder.setContentText(queue + " more " + ((queue == 1) ? "file" : "files") + " in queue.");
+            } else {
+                builder.setContentText(percentage + "%");
+            }
+                builder.setContentInfo(currentMB + "MB / " + totalMB + "MB");
         } else {
             builder.setProgress(100, 0, true);
         }
@@ -211,11 +265,34 @@ private void updateProgressInNotification(FileDownloadModel fileDownloadModel, N
         startForeground(1337, builder.build());
     }
 
-    private void sendCallback(FileDownloadModel fileDownloadModel) {
-        Intent i = new Intent(fileDownloadModel.getCallBackIntent());
-        i.putExtra("fileDownloadModelReturned", fileDownloadModel);
+    private void sendCallback(FileDownloadModel downloadModel) {
+        switch (downloadModel.getStatus()) {
+            case DOWNLOADING:
+                break;
+            case DOWNLOADED:
+                break;
+            case UNZIPPING:
+                break;
+            case UNZIPPED:
+            case ERROR:
+                fileDownloadList.remove(downloadModel); // removing from list
+                isDownloading = false;
+                break;
+        }
+
+        Intent i = new Intent(downloadModel.getCallBackIntent());
+        i.putExtra("fileDownloadModelReturned", downloadModel);
         sendBroadcast(i);
     }
 
 
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        stopEverything(true);
+    }
 }
diff --git a/demo/src/main/java/com/novo/services/StopServiceReceiver.java b/demo/src/main/java/com/novo/services/StopServiceReceiver.java
new file mode 100644
index 0000000000..ee30591434
--- /dev/null
+++ b/demo/src/main/java/com/novo/services/StopServiceReceiver.java
@@ -0,0 +1,17 @@
+package com.novo.services;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+
+/**
+ * Created by Hisham on 12/Sep/2017 - 20:32
+ */
+
+public class StopServiceReceiver extends BroadcastReceiver{
+    @Override
+    public void onReceive(Context context, Intent intent) {
+        Intent service = new Intent(context, DownloaderService.class);
+        context.stopService(service);
+    }
+}
diff --git a/demo/src/main/java/com/novo/util/Utils.java b/demo/src/main/java/com/novo/util/Utils.java
index beb6c15f9f..34ba7a5520 100644
--- a/demo/src/main/java/com/novo/util/Utils.java
+++ b/demo/src/main/java/com/novo/util/Utils.java
@@ -20,6 +20,7 @@
 public class Utils {
 
     private final Context context;
+    private final String pathForDownloadManager = "/voca/zips/";
 
     public Utils(Context context) {
         this.context = context;
@@ -105,4 +106,7 @@ public void deleteAllDirectories() {
 
     }
 
+    public String getPathForDownloadManager() {
+        return pathForDownloadManager;
+    }
 }
diff --git a/demo/src/main/res/drawable/ic_cancel_black_24dp.xml b/demo/src/main/res/drawable/ic_cancel_black_24dp.xml
new file mode 100644
index 0000000000..05c972ed7e
--- /dev/null
+++ b/demo/src/main/res/drawable/ic_cancel_black_24dp.xml
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24.0"
+        android:viewportHeight="24.0">
+    <path
+        android:fillColor="@color/secondary"
+        android:pathData="M12,2C6.47,2 2,6.47 2,12s4.47,10 10,10 10,-4.47 10,-10S17.53,2 12,2zM17,15.59L15.59,17 12,13.41 8.41,17 7,15.59 10.59,12 7,8.41 8.41,7 12,10.59 15.59,7 17,8.41 13.41,12 17,15.59z"/>
+</vector>
diff --git a/demo/src/main/res/values/strings.xml b/demo/src/main/res/values/strings.xml
index b1eea17111..66f71f1361 100644
--- a/demo/src/main/res/values/strings.xml
+++ b/demo/src/main/res/values/strings.xml
@@ -66,5 +66,11 @@
     <string name="completed">Completed.</string>
     <string name="processing">Processing...</string>
     <string name="unable_to_download">Unable to download.</string>
+    <string name="delete">Delete</string>
+    <string name="do_you_want_to_delete">Do you want to delete this offline video?</string>
+    <string name="yes">Yes</string>
+    <string name="no">No</string>
+    <string name="download">Download</string>
+    <string name="do_you_want_to_download">Do you want to download this video?</string>
 
 </resources>
