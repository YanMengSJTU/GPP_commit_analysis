diff --git a/library/src/androidTest/java/com/google/android/exoplayer/dash/DashChunkSourceTest.java b/library/src/androidTest/java/com/google/android/exoplayer/dash/DashChunkSourceTest.java
index b9b778226e..7882833509 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/dash/DashChunkSourceTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/dash/DashChunkSourceTest.java
@@ -149,42 +149,41 @@ public void testSegmentRequestSequenceOnMultiPeriodLiveWithTemplate() {
   public void testLiveEdgeLatency() {
     long availableRangeStartMs = 0;
     long availableRangeEndMs = LIVE_DURATION_MS;
-    long seekPositionMs = LIVE_DURATION_MS;
 
     long chunkStartTimeMs = 4000;
     long chunkEndTimeMs = 5000;
     // Test with 1-1000ms latency.
     long liveEdgeLatency = 1;
-    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, availableRangeStartMs,
+        availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
     liveEdgeLatency = 1000;
-    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, availableRangeStartMs,
+        availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
 
     chunkStartTimeMs = 3000;
     chunkEndTimeMs = 4000;
     // Test with 1001-2000ms latency.
     liveEdgeLatency = 1001;
-    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, availableRangeStartMs,
+        availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
     liveEdgeLatency = 2000;
-    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, availableRangeStartMs,
+        availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
 
     chunkStartTimeMs = 0;
     chunkEndTimeMs = 1000;
     // Test with 9001-10000 latency.
     liveEdgeLatency = 9001;
-    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, availableRangeStartMs,
+        availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
     liveEdgeLatency = 10000;
-    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, availableRangeStartMs,
+        availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
 
     // Test with 10001 latency. Seek position will be bounded to the first chunk.
     liveEdgeLatency = 10001;
-    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(LIVE_DURATION_MS, 0, liveEdgeLatency, availableRangeStartMs,
+        availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
   }
 
   // Private methods.
@@ -338,56 +337,54 @@ private static void checkAvailableRange(TimeRange seekRange, long startTimeUs, l
   }
 
   private static void checkLiveEdgeConsistency(long durationMs, long timelineStartMs,
-      long liveEdgeLatencyMs, long seekPositionMs, long availableRangeStartMs,
-      long availableRangeEndMs, long chunkStartTimeMs, long chunkEndTimeMs) {
+      long liveEdgeLatencyMs, long availableRangeStartMs, long availableRangeEndMs,
+      long chunkStartTimeMs, long chunkEndTimeMs) {
     checkLiveEdgeConsistencyWithTimeline(durationMs, timelineStartMs, liveEdgeLatencyMs,
-        seekPositionMs, availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs,
-        chunkEndTimeMs);
+        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
     checkLiveEdgeConsistencyWithTemplateAndUnlimitedTimeshift(durationMs, liveEdgeLatencyMs,
-        seekPositionMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
     checkLiveEdgeConsistencyWithTemplateAndLimitedTimeshift(durationMs, liveEdgeLatencyMs,
-        seekPositionMs, availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs,
-        chunkEndTimeMs);
+        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
   }
 
   private static void checkLiveEdgeConsistencyWithTimeline(long durationMs, long timelineStartMs,
-      long liveEdgeLatencyMs, long seekPositionMs, long availableRangeStartMs,
-      long availableRangeEndMs, long chunkStartTimeMs, long chunkEndTimeMs) {
+      long liveEdgeLatencyMs, long availableRangeStartMs, long availableRangeEndMs,
+      long chunkStartTimeMs, long chunkEndTimeMs) {
     MediaPresentationDescription mpd = buildLiveMpdWithTimeline(durationMs, timelineStartMs);
-    checkLiveEdgeConsistency(mpd, liveEdgeLatencyMs, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(mpd, liveEdgeLatencyMs, availableRangeStartMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
   }
 
   private static void checkLiveEdgeConsistencyWithTemplateAndUnlimitedTimeshift(long durationMs,
       long liveEdgeLatencyMs, long availablePositionMs, long availableRangeEndMs,
       long chunkStartTimeMs, long chunkEndTimeMs) {
     MediaPresentationDescription mpd = buildLiveMpdWithTemplate(durationMs, false);
-    checkLiveEdgeConsistency(mpd, liveEdgeLatencyMs, availablePositionMs, 0,
-        availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(mpd, liveEdgeLatencyMs, availablePositionMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
   }
 
   private static void checkLiveEdgeConsistencyWithTemplateAndLimitedTimeshift(long durationMs,
-      long liveEdgeLatencyMs, long seekPositionMs, long availableRangeStartMs,
-      long availableRangeEndMs, long chunkStartTimeMs, long chunkEndTimeMs) {
+      long liveEdgeLatencyMs, long availableRangeStartMs, long availableRangeEndMs,
+      long chunkStartTimeMs, long chunkEndTimeMs) {
     MediaPresentationDescription mpd = buildLiveMpdWithTemplate(durationMs, true);
-    checkLiveEdgeConsistency(mpd, liveEdgeLatencyMs, seekPositionMs, availableRangeStartMs,
-        availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(mpd, liveEdgeLatencyMs, availableRangeStartMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
   }
 
   private static void checkLiveEdgeConsistency(MediaPresentationDescription mpd,
-      long liveEdgeLatencyMs, long seekPositionMs, long availableRangeStartMs,
-      long availableRangeEndMs, long chunkStartTimeMs, long chunkEndTimeMs) {
+      long liveEdgeLatencyMs, long availableRangeStartMs, long availableRangeEndMs,
+      long chunkStartTimeMs, long chunkEndTimeMs) {
     DashChunkSource chunkSource = buildDashChunkSource(mpd, true, liveEdgeLatencyMs);
     List<MediaChunk> queue = new ArrayList<>();
     ChunkOperationHolder out = new ChunkOperationHolder();
-    checkLiveEdgeConsistency(chunkSource, queue, out, seekPositionMs, availableRangeStartMs,
-        availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(chunkSource, queue, out, availableRangeStartMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
   }
 
   private static void checkLiveEdgeConsistency(DashChunkSource chunkSource, List<MediaChunk> queue,
-      ChunkOperationHolder out, long seekPositionMs, long availableRangeStartMs,
-      long availableRangeEndMs, long chunkStartTimeMs, long chunkEndTimeMs) {
-    chunkSource.getChunkOperation(queue, seekPositionMs * 1000, out);
+      ChunkOperationHolder out, long availableRangeStartMs, long availableRangeEndMs,
+      long chunkStartTimeMs, long chunkEndTimeMs) {
+    chunkSource.getChunkOperation(queue, 0, out);
     TimeRange availableRange = chunkSource.getAvailableRange();
     checkAvailableRange(availableRange, availableRangeStartMs * 1000, availableRangeEndMs * 1000);
     if (chunkStartTimeMs < availableRangeEndMs) {
@@ -410,80 +407,80 @@ private static void checkSegmentRequestSequenceOnMultiPeriodLive(DashChunkSource
     long chunkEndTimeMs = 1000;
 
     // request first chunk
-    checkLiveEdgeConsistency(chunkSource, queue, out, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(chunkSource, queue, out, availableRangeStartMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
     queue.add((MediaChunk) out.chunk);
 
     // request second chunk
     chunkStartTimeMs += 1000;
     chunkEndTimeMs += 1000;
     out.chunk = null;
-    checkLiveEdgeConsistency(chunkSource, queue, out, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(chunkSource, queue, out, availableRangeStartMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
     queue.add((MediaChunk) out.chunk);
 
     // request third chunk
     chunkStartTimeMs += 1000;
     chunkEndTimeMs += 1000;
     out.chunk = null;
-    checkLiveEdgeConsistency(chunkSource, queue, out, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(chunkSource, queue, out, availableRangeStartMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
     queue.add((MediaChunk) out.chunk);
 
     // request fourth chunk
     chunkStartTimeMs += 1000;
     chunkEndTimeMs += 1000;
     out.chunk = null;
-    checkLiveEdgeConsistency(chunkSource, queue, out, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(chunkSource, queue, out, availableRangeStartMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
     queue.add((MediaChunk) out.chunk);
 
     // request fifth chunk
     chunkStartTimeMs += 1000;
     chunkEndTimeMs += 1000;
     out.chunk = null;
-    checkLiveEdgeConsistency(chunkSource, queue, out, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(chunkSource, queue, out, availableRangeStartMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
     queue.add((MediaChunk) out.chunk);
 
     // request sixth chunk; this is the first chunk in the 2nd period
     chunkStartTimeMs += 1000;
     chunkEndTimeMs += 1000;
     out.chunk = null;
-    checkLiveEdgeConsistency(chunkSource, queue, out, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(chunkSource, queue, out, availableRangeStartMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
     queue.add((MediaChunk) out.chunk);
 
     // request seventh chunk;
     chunkStartTimeMs += 1000;
     chunkEndTimeMs += 1000;
     out.chunk = null;
-    checkLiveEdgeConsistency(chunkSource, queue, out, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(chunkSource, queue, out, availableRangeStartMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
     queue.add((MediaChunk) out.chunk);
 
     // request eigth chunk
     chunkStartTimeMs += 1000;
     chunkEndTimeMs += 1000;
     out.chunk = null;
-    checkLiveEdgeConsistency(chunkSource, queue, out, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(chunkSource, queue, out, availableRangeStartMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
     queue.add((MediaChunk) out.chunk);
 
     // request ninth chunk
     chunkStartTimeMs += 1000;
     chunkEndTimeMs += 1000;
     out.chunk = null;
-    checkLiveEdgeConsistency(chunkSource, queue, out, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(chunkSource, queue, out, availableRangeStartMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
     queue.add((MediaChunk) out.chunk);
 
     // request tenth chunk
     chunkStartTimeMs += 1000;
     chunkEndTimeMs += 1000;
     out.chunk = null;
-    checkLiveEdgeConsistency(chunkSource, queue, out, seekPositionMs,
-        availableRangeStartMs, availableRangeEndMs, chunkStartTimeMs, chunkEndTimeMs);
+    checkLiveEdgeConsistency(chunkSource, queue, out, availableRangeStartMs, availableRangeEndMs,
+        chunkStartTimeMs, chunkEndTimeMs);
     queue.add((MediaChunk) out.chunk);
 
     // request "eleventh" chunk; this chunk isn't available yet, so we should get null
diff --git a/library/src/main/java/com/google/android/exoplayer/dash/DashChunkSource.java b/library/src/main/java/com/google/android/exoplayer/dash/DashChunkSource.java
index da45eb3b8b..8d05aae1ce 100644
--- a/library/src/main/java/com/google/android/exoplayer/dash/DashChunkSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/dash/DashChunkSource.java
@@ -394,6 +394,10 @@ public final void getChunkOperation(List<? extends MediaChunk> queue, long playb
     availableRange.getCurrentBoundsUs(availableRangeValues);
     if (queue.isEmpty()) {
       if (live) {
+        if (playbackPositionUs != 0) {
+          // If the position is non-zero then assume the client knows where it's seeking.
+          startAtLiveEdge = false;
+        }
         if (startAtLiveEdge) {
           // We want live streams to start at the live edge instead of the beginning of the
           // manifest
