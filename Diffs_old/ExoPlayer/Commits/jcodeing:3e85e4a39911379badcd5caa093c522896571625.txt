diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
deleted file mode 100644
index 43c4809480..0000000000
--- a/CONTRIBUTING.md
+++ /dev/null
@@ -1,44 +0,0 @@
-# How to contribute #
-
-## Reporting issues ##
-
-We use the [GitHub issue tracker](https://github.com/google/ExoPlayer/issues)
-to track bugs, feature requests and questions.
-
-Before filing a new issue, please search the tracker to check if it's already
-covered by an existing report. Avoiding duplicates helps us maximize the time we
-can spend fixing bugs and adding new features.
-
-When filing an issue, be sure to provide enough information for us to
-efficiently diagnose and reproduce the problem. In particular, please include
-all of the information requested in the issue template.
-
-## Pull requests ##
-
-We will also consider high quality pull requests. These should normally merge
-into the `dev-vX` branch with the highest major version number. Bug fixes may
-be suitable for merging into older `dev-vX` branches. Before a pull request can
-be accepted you must submit a Contributor License Agreement, as described below.
-
-[dev]: https://github.com/google/ExoPlayer/tree/dev
-
-## Contributor license agreement ##
-
-Contributions to any Google project must be accompanied by a Contributor
-License Agreement. This is not a copyright **assignment**, it simply gives
-Google permission to use and redistribute your contributions as part of the
-project.
-
-  * If you are an individual writing original source code and you're sure you
-    own the intellectual property, then you'll need to sign an [individual
-    CLA][].
-
-  * If you work for a company that wants to allow you to contribute your work,
-    then you'll need to sign a [corporate CLA][].
-
-You generally only need to submit a CLA once, so if you've already submitted
-one (even if it was for a different project), you probably don't need to do it
-again.
-
-[individual CLA]: https://developers.google.com/open-source/cla/individual
-[corporate CLA]: https://developers.google.com/open-source/cla/corporate
diff --git a/ISSUE_TEMPLATE b/ISSUE_TEMPLATE
deleted file mode 100644
index 1b912312d1..0000000000
--- a/ISSUE_TEMPLATE
+++ /dev/null
@@ -1,44 +0,0 @@
-*** ISSUES THAT IGNORE THIS TEMPLATE WILL BE CLOSED WITHOUT INVESTIGATION ***
-
-Before filing an issue:
------------------------
-- Search existing issues, including issues that are closed.
-- Consult our FAQs, supported devices and supported formats pages. These can be
-  found at https://google.github.io/ExoPlayer/.
-- Rule out issues in your own code. A good way to do this is to try and
-  reproduce the issue in the ExoPlayer demo app.
-- This issue tracker is intended for bugs, feature requests and ExoPlayer
-  specific questions. If you're asking a general Android development question,
-  please do so on Stack Overflow.
-
-When reporting a bug:
------------------------
-Fill out the sections below, leaving the headers but replacing the content. If
-you're unable to provide certain information, please explain why in the relevant
-section. We may close issues if they do not include sufficient information.
-
-### Issue description
-Describe the issue in detail, including observed and expected behavior.
-
-### Reproduction steps
-Describe how the issue can be reproduced, ideally using the ExoPlayer demo app.
-
-### Link to test content
-Provide a link to media that reproduces the issue. If you don't wish to post it
-publicly, please submit the issue, then email the link to
-dev.exoplayer@gmail.com including the issue number in the subject line.
-
-### Version of ExoPlayer being used
-Specify the absolute version number. Avoid using terms such as "latest".
-
-### Device(s) and version(s) of Android being used
-Specify the devices and versions of Android on which the issue can be
-reproduced, and how easily it reproduces. If possible, please test on multiple
-devices and Android versions.
-
-### A full bug report captured from the device
-Capture a full bug report using "adb bugreport". Output from "adb logcat" or a
-log snippet is NOT sufficient. Please attach the captured bug report as a file.
-If you don't wish to post it publicly, please submit the issue, then email the
-bug report to dev.exoplayer@gmail.com including the issue number in the subject
-line.
diff --git a/README.md b/README.md
deleted file mode 100644
index 92b15d7c62..0000000000
--- a/README.md
+++ /dev/null
@@ -1,124 +0,0 @@
-# ExoPlayer #
-
-ExoPlayer is an application level media player for Android. It provides an
-alternative to Android’s MediaPlayer API for playing audio and video both
-locally and over the Internet. ExoPlayer supports features not currently
-supported by Android’s MediaPlayer API, including DASH and SmoothStreaming
-adaptive playbacks. Unlike the MediaPlayer API, ExoPlayer is easy to customize
-and extend, and can be updated through Play Store application updates.
-
-## Documentation ##
-
-* The [developer guide][] provides a wealth of information.
-* The [class reference][] documents ExoPlayer classes.
-* The [release notes][] document the major changes in each release.
-* Follow our [developer blog][] to keep up to date with the latest ExoPlayer
-  developments!
-
-[developer guide]: https://google.github.io/ExoPlayer/guide.html
-[class reference]: https://google.github.io/ExoPlayer/doc/reference
-[release notes]: https://github.com/google/ExoPlayer/blob/release-v2/RELEASENOTES.md
-[developer blog]: https://medium.com/google-exoplayer
-
-## Using ExoPlayer ##
-
-ExoPlayer modules can be obtained from JCenter. It's also possible to clone the
-repository and depend on the modules locally.
-
-### From JCenter ###
-
-The easiest way to get started using ExoPlayer is to add it as a gradle
-dependency. You need to make sure you have the JCenter and Google repositories
-included in the `build.gradle` file in the root of your project:
-
-```gradle
-repositories {
-    jcenter()
-    google()
-}
-```
-
-Next add a gradle compile dependency to the `build.gradle` file of your app
-module. The following will add a dependency to the full library:
-
-```gradle
-compile 'com.google.android.exoplayer:exoplayer:r2.X.X'
-```
-
-where `r2.X.X` is your preferred version. Alternatively, you can depend on only
-the library modules that you actually need. For example the following will add
-dependencies on the Core, DASH and UI library modules, as might be required for
-an app that plays DASH content:
-
-```gradle
-compile 'com.google.android.exoplayer:exoplayer-core:r2.X.X'
-compile 'com.google.android.exoplayer:exoplayer-dash:r2.X.X'
-compile 'com.google.android.exoplayer:exoplayer-ui:r2.X.X'
-```
-
-The available library modules are listed below. Adding a dependency to the full
-library is equivalent to adding dependencies on all of the library modules
-individually.
-
-* `exoplayer-core`: Core functionality (required).
-* `exoplayer-dash`: Support for DASH content.
-* `exoplayer-hls`: Support for HLS content.
-* `exoplayer-smoothstreaming`: Support for SmoothStreaming content.
-* `exoplayer-ui`: UI components and resources for use with ExoPlayer.
-
-In addition to library modules, ExoPlayer has multiple extension modules that
-depend on external libraries to provide additional functionality. Some
-extensions are available from JCenter, whereas others must be built manaully.
-Browse the [extensions directory] and their individual READMEs for details.
-
-More information on the library and extension modules that are available from
-JCenter can be found on [Bintray][].
-
-[extensions directory]: https://github.com/google/ExoPlayer/tree/release-v2/extensions/
-[Bintray]: https://bintray.com/google/exoplayer
-
-### Locally ###
-
-Cloning the repository and depending on the modules locally is required when
-using some ExoPlayer extension modules. It's also a suitable approach if you
-want to make local changes to ExoPlayer, or if you want to use a development
-branch.
-
-First, clone the repository into a local directory and checkout the desired
-branch:
-
-```sh
-git clone https://github.com/google/ExoPlayer.git
-git checkout release-v2
-```
-
-Next, add the following to your project's `settings.gradle` file, replacing
-`path/to/exoplayer` with the path to your local copy:
-
-```gradle
-gradle.ext.exoplayerRoot = 'path/to/exoplayer'
-gradle.ext.exoplayerModulePrefix = 'exoplayer-'
-apply from: new File(gradle.ext.exoplayerRoot, 'core_settings.gradle')
-```
-
-You should now see the ExoPlayer modules appear as part of your project. You can
-depend on them as you would on any other local module, for example:
-
-```gradle
-compile project(':exoplayer-library-core')
-compile project(':exoplayer-library-dash')
-compile project(':exoplayer-library-ui')
-```
-
-## Developing ExoPlayer ##
-
-#### Project branches ####
-
-* Development work happens on the `dev-v2` branch. Pull requests should
-  normally be made to this branch.
-* The `release-v2` branch holds the most recent release.
-
-#### Using Android Studio ####
-
-To develop ExoPlayer using Android Studio, simply open the ExoPlayer project in
-the root directory of the repository.
diff --git a/RELEASENOTES.md b/RELEASENOTES.md
deleted file mode 100644
index c63a20ba94..0000000000
--- a/RELEASENOTES.md
+++ /dev/null
@@ -1,699 +0,0 @@
-# Release notes #
-
-### r2.5.3 ###
-
-* IMA extension: Support skipping of skippable ads on AndroidTV and other
-  non-touch devices ([#3258](https://github.com/google/ExoPlayer/issues/3258)).
-* HLS: Fix broken WebVTT captions when PTS wraps around
-  ([#2928](https://github.com/google/ExoPlayer/issues/2928)).
-* Captions: Fix issues rendering CEA-608 captions
-  ([#3250](https://github.com/google/ExoPlayer/issues/3250)).
-* Workaround broken AAC decoders on Galaxy S6
-  ([#3249](https://github.com/google/ExoPlayer/issues/3249)).
-* Caching: Fix infinite loop when cache eviction fails
-  ([#3260](https://github.com/google/ExoPlayer/issues/3260)).
-* Caching: Force use of BouncyCastle on JellyBean to fix decryption issue
-  ([#2755](https://github.com/google/ExoPlayer/issues/2755)).
-
-### r2.5.2 ###
-
-* IMA extension: Fix issue where ad playback could end prematurely for some
-  content types ([#3180](https://github.com/google/ExoPlayer/issues/3180)).
-* RTMP extension: Fix SIGABRT on fast RTMP stream restart
-  ([#3156](https://github.com/google/ExoPlayer/issues/3156)).
-* UI: Allow app to manually specify ad markers
-  ([#3184](https://github.com/google/ExoPlayer/issues/3184)).
-* DASH: Expose segment indices to subclasses of DefaultDashChunkSource
-  ([#3037](https://github.com/google/ExoPlayer/issues/3037)).
-* Captions: Added robustness against malformed WebVTT captions
-  ([#3228](https://github.com/google/ExoPlayer/issues/3228)).
-* DRM: Support forcing a specific license URL.
-* Fix playback error when seeking in media loaded through content:// URIs
-  ([#3216](https://github.com/google/ExoPlayer/issues/3216)).
-* Fix issue playing MP4s in which the last atom specifies a size of zero
-  ([#3191](https://github.com/google/ExoPlayer/issues/3191)).
-* Workaround playback failures on some Xiaomi devices
-  ([#3171](https://github.com/google/ExoPlayer/issues/3171)).
-* Workaround SIGSEGV issue on some devices when setting and swapping surface for
-  secure playbacks ([#3215](https://github.com/google/ExoPlayer/issues/3215)).
-* Workaround for Nexus 7 issue when swapping output surface
-  ([#3236](https://github.com/google/ExoPlayer/issues/3236)).
-* Workaround for SimpleExoPlayerView's surface not being hidden properly
-  ([#3160](https://github.com/google/ExoPlayer/issues/3160)).
-
-### r2.5.1 ###
-
-* Fix an issue that could cause the reported playback position to stop advancing
-  in some cases.
-* Fix an issue where a Surface could be released whilst still in use by the
-  player.
-
-### r2.5.0 ###
-
-* IMA extension: Wraps the Google Interactive Media Ads (IMA) SDK to provide an
-  easy and seamless way of incorporating display ads into ExoPlayer playbacks.
-  You can read more about the IMA extension
-  [here](https://medium.com/google-exoplayer/playing-ads-with-exoplayer-and-ima-868dfd767ea).
-* MediaSession extension: Provides an easy to to connect ExoPlayer with
-  MediaSessionCompat in the Android Support Library.
-* RTMP extension: An extension for playing streams over RTMP.
-* Build: Made it easier for application developers to depend on a local checkout
-  of ExoPlayer. You can learn how to do this
-  [here](https://medium.com/google-exoplayer/howto-2-depend-on-a-local-checkout-of-exoplayer-bcd7f8531720).
-* Core playback improvements:
-  * Eliminated re-buffering when changing audio and text track selections during
-    playback of progressive streams
-    ([#2926](https://github.com/google/ExoPlayer/issues/2926)).
-  * New DynamicConcatenatingMediaSource class to support playback of dynamic
-    playlists.
-  * New ExoPlayer.setRepeatMode method for dynamic toggling of repeat mode
-    during playback. Use of setRepeatMode should be preferred to
-    LoopingMediaSource for most looping use cases. You can read more about
-    setRepeatMode
-    [here](https://medium.com/google-exoplayer/repeat-modes-in-exoplayer-19dd85f036d3).
-  * Eliminated jank when switching video playback from one Surface to another on
-    API level 23+ for unencrypted content, and on devices that support the
-    EGL_EXT_protected_content OpenGL extension for protected content
-    ([#677](https://github.com/google/ExoPlayer/issues/677)).
-  * Enabled ExoPlayer instantiation on background threads without Loopers.
-    Events from such players are delivered on the application's main thread.
-* HLS improvements:
-  * Optimized adaptive switches for playlists that specify the
-    EXT-X-INDEPENDENT-SEGMENTS tag.
-  * Optimized in-buffer seeking
-    ([#551](https://github.com/google/ExoPlayer/issues/551)).
-  * Eliminated re-buffering when changing audio and text track selections during
-    playback, provided the new selection does not require switching to different
-    renditions ([#2718](https://github.com/google/ExoPlayer/issues/2718)).
-  * Exposed all media playlist tags in ExoPlayer's MediaPlaylist object.
-* DASH: Support for seamless switching across streams in different AdaptationSet
-  elements ([#2431](https://github.com/google/ExoPlayer/issues/2431)).
-* DRM: Support for additional crypto schemes (cbc1, cbcs and cens) on
-  API level 24+ ([#1989](https://github.com/google/ExoPlayer/issues/1989)).
-* Captions: Initial support for SSA/ASS subtitles
-  ([#889](https://github.com/google/ExoPlayer/issues/889)).
-* AndroidTV: Fixed issue where tunneled video playback would not start on some
-  devices ([#2985](https://github.com/google/ExoPlayer/issues/2985)).
-* MPEG-TS: Fixed segmentation issue when parsing H262
-  ([#2891](https://github.com/google/ExoPlayer/issues/2891)).
-* Cronet extension: Support for a user-defined fallback if Cronet library is not
-  present.
-* Fix buffer too small IllegalStateException issue affecting some composite
-  media playbacks ([#2900](https://github.com/google/ExoPlayer/issues/2900)).
-* Misc bugfixes.
-
-### r2.4.4 ###
-
-* HLS/MPEG-TS: Some initial optimizations of MPEG-TS extractor performance
-  ([#3040](https://github.com/google/ExoPlayer/issues/3040)).
-* HLS: Fix propagation of format identifier for CEA-608
-  ([#3033](https://github.com/google/ExoPlayer/issues/3033)).
-* HLS: Detect playlist stuck and reset conditions
-  ([#2872](https://github.com/google/ExoPlayer/issues/2872)).
-* Video: Fix video dimension reporting on some devices
-  ([#3007](https://github.com/google/ExoPlayer/issues/3007)).
-
-### r2.4.3 ###
-
-* Audio: Workaround custom audio decoders misreporting their maximum supported
-  channel counts ([#2940](https://github.com/google/ExoPlayer/issues/2940)).
-* Audio: Workaround for broken MediaTek raw decoder on some devices
-  ([#2873](https://github.com/google/ExoPlayer/issues/2873)).
-* Captions: Fix TTML captions appearing at the top of the screen
-  ([#2953](https://github.com/google/ExoPlayer/issues/2953)).
-* Captions: Fix handling of some DVB subtitles
-  ([#2957](https://github.com/google/ExoPlayer/issues/2957)).
-* Track selection: Fix setSelectionOverride(index, tracks, null)
-  ([#2988](https://github.com/google/ExoPlayer/issues/2988)).
-* GVR extension: Add support for mono input
-  ([#2710](https://github.com/google/ExoPlayer/issues/2710)).
-* FLAC extension: Fix failing build
-  ([#2977](https://github.com/google/ExoPlayer/pull/2977)).
-* Misc bugfixes.
-
-### r2.4.2 ###
-
-* Stability: Work around Nexus 10 reboot when playing certain content
-  ([#2806](https://github.com/google/ExoPlayer/issues/2806)).
-* MP3: Correctly treat MP3s with INFO headers as constant bitrate
-  ([#2895](https://github.com/google/ExoPlayer/issues/2895)).
-* HLS: Use average rather than peak bandwidth when available
-  ([#2863](https://github.com/google/ExoPlayer/issues/2863)).
-* SmoothStreaming: Fix timeline for live streams
-  ([#2760](https://github.com/google/ExoPlayer/issues/2760)).
-* UI: Fix DefaultTimeBar invalidation
-  ([#2871](https://github.com/google/ExoPlayer/issues/2871)).
-* Misc bugfixes.
-
-### r2.4.1 ###
-
-* Stability: Avoid OutOfMemoryError in extractors when parsing malformed media
-  ([#2780](https://github.com/google/ExoPlayer/issues/2780)).
-* Stability: Avoid native crash on Galaxy Nexus. Avoid unnecessarily large codec
-  input buffer allocations on all devices
-  ([#2607](https://github.com/google/ExoPlayer/issues/2607)).
-* Variable speed playback: Fix interpolation for rate/pitch adjustment
-  ([#2774](https://github.com/google/ExoPlayer/issues/2774)).
-* HLS: Include EXT-X-DATERANGE tags in HlsMediaPlaylist.
-* HLS: Don't expose CEA-608 track if CLOSED-CAPTIONS=NONE
-  ([#2743](https://github.com/google/ExoPlayer/issues/2743)).
-* HLS: Correctly propagate errors loading the media playlist
-  ([#2623](https://github.com/google/ExoPlayer/issues/2623)).
-* UI: DefaultTimeBar enhancements and bug fixes
-  ([#2740](https://github.com/google/ExoPlayer/issues/2740)).
-* Ogg: Fix failure to play some Ogg files
-  ([#2782](https://github.com/google/ExoPlayer/issues/2782)).
-* Captions: Don't select text tack with no language by default.
-* Captions: TTML positioning fixes
-  ([#2824](https://github.com/google/ExoPlayer/issues/2824)).
-* Misc bugfixes.
-
-### r2.4.0 ###
-
-* New modular library structure. You can read more about depending on individual
-  library modules
-  [here](https://medium.com/google-exoplayer/exoplayers-new-modular-structure-a916c0874907).
-* Variable speed playback support on API level 16+. You can read more about
-  changing the playback speed
-  [here](https://medium.com/google-exoplayer/variable-speed-playback-with-exoplayer-e6e6a71e0343)
-  ([#26](https://github.com/google/ExoPlayer/issues/26)).
-* New time bar view, including support for displaying ad break markers.
-* Support DVB subtitles in MPEG-TS and MKV.
-* Support adaptive playback for audio only DASH, HLS and SmoothStreaming
-  ([#1975](https://github.com/google/ExoPlayer/issues/1975)).
-* Support for setting extractor flags on DefaultExtractorsFactory
-  ([#2657](https://github.com/google/ExoPlayer/issues/2657)).
-* Support injecting custom renderers into SimpleExoPlayer using a new
-  RenderersFactory interface.
-* Correctly set ExoPlayer's internal thread priority to `THREAD_PRIORITY_AUDIO`.
-* TX3G: Support styling and positioning.
-* FLV:
-  * Support MP3 in FLV.
-  * Skip unhandled metadata rather than failing
-    ([#2634](https://github.com/google/ExoPlayer/issues/2634)).
-  * Fix potential OutOfMemory errors.
-* ID3: Better handle malformed ID3 data
-  ([#2604](https://github.com/google/ExoPlayer/issues/2604),
-  [#2663](https://github.com/google/ExoPlayer/issues/2663)).
-* FFmpeg extension: Fixed build instructions
-  ([#2561](https://github.com/google/ExoPlayer/issues/2561)).
-* VP9 extension: Reduced binary size.
-* FLAC extension: Enabled 64 bit targets.
-* Misc bugfixes.
-
-### r2.3.1 ###
-
-* Fix NPE enabling WebVTT subtitles in DASH streams
-  ([#2596](https://github.com/google/ExoPlayer/issues/2596)).
-* Fix skipping to keyframes when MediaCodecVideoRenderer is enabled but without
-  a Surface ([#2575](https://github.com/google/ExoPlayer/issues/2575)).
-* Minor fix for CEA-708 decoder
-  ([#2595](https://github.com/google/ExoPlayer/issues/2595)).
-
-### r2.3.0 ###
-
-* GVR extension: Wraps the Google VR Audio SDK to provide spatial audio
-  rendering. You can read more about the GVR extension
-  [here](https://medium.com/google-exoplayer/spatial-audio-with-exoplayer-and-gvr-cecb00e9da5f#.xdjebjd7g).
-* DASH improvements:
-  * Support embedded CEA-608 closed captions
-    ([#2362](https://github.com/google/ExoPlayer/issues/2362)).
-  * Support embedded EMSG events
-    ([#2176](https://github.com/google/ExoPlayer/issues/2176)).
-  * Support mspr:pro manifest element
-    ([#2386](https://github.com/google/ExoPlayer/issues/2386)).
-  * Correct handling of empty segment indices at the start of live events
-    ([#1865](https://github.com/google/ExoPlayer/issues/1865)).
-* HLS improvements:
-  * Respect initial track selection
-    ([#2353](https://github.com/google/ExoPlayer/issues/2353)).
-  * Reduced frequency of media playlist requests when playback position is close
-    to the live edge ([#2548](https://github.com/google/ExoPlayer/issues/2548)).
-  * Exposed the master playlist through ExoPlayer.getCurrentManifest()
-    ([#2537](https://github.com/google/ExoPlayer/issues/2537)).
-  * Support CLOSED-CAPTIONS #EXT-X-MEDIA type
-    ([#341](https://github.com/google/ExoPlayer/issues/341)).
-  * Fixed handling of negative values in #EXT-X-SUPPORT
-    ([#2495](https://github.com/google/ExoPlayer/issues/2495)).
-  * Fixed potential endless buffering state for streams with WebVTT subtitles
-    ([#2424](https://github.com/google/ExoPlayer/issues/2424)).
-* MPEG-TS improvements:
-  * Support for multiple programs.
-  * Support for multiple closed captions and caption service descriptors
-   ([#2161](https://github.com/google/ExoPlayer/issues/2161)).
-* MP3: Add `FLAG_ENABLE_CONSTANT_BITRATE_SEEKING` extractor option to enable
-  constant bitrate seeking in MP3 files that would otherwise be unseekable
-  ([#2445](https://github.com/google/ExoPlayer/issues/2445)).
-* ID3: Better handle malformed ID3 data
-  ([#2486](https://github.com/google/ExoPlayer/issues/2486)).
-* Track selection: Added maxVideoBitrate parameter to DefaultTrackSelector.
-* DRM: Add support for CENC ClearKey on API level 21+
-  ([#2361](https://github.com/google/ExoPlayer/issues/2361)).
-* DRM: Support dynamic setting of key request headers
-  ([#1924](https://github.com/google/ExoPlayer/issues/1924)).
-* SmoothStreaming: Fixed handling of start_time placeholder
-  ([#2447](https://github.com/google/ExoPlayer/issues/2447)).
-* FLAC extension: Fix proguard configuration
-  ([#2427](https://github.com/google/ExoPlayer/issues/2427)).
-* Misc bugfixes.
-
-### r2.2.0 ###
-
-* Demo app: Automatic recovery from BehindLiveWindowException, plus improved
-  handling of pausing and resuming live streams
-  ([#2344](https://github.com/google/ExoPlayer/issues/2344)).
-* AndroidTV: Added Support for tunneled video playback
-  ([#1688](https://github.com/google/ExoPlayer/issues/1688)).
-* DRM: Renamed StreamingDrmSessionManager to DefaultDrmSessionManager and
-  added support for using offline licenses
-  ([#876](https://github.com/google/ExoPlayer/issues/876)).
-* DRM: Introduce OfflineLicenseHelper to help with offline license acquisition,
-  renewal and release.
-* UI: Updated player control assets. Added vector drawables for use on API level
-  21 and above.
-* UI: Made player control seek bar work correctly with key events if focusable
-  ([#2278](https://github.com/google/ExoPlayer/issues/2278)).
-* HLS: Improved support for streams that use EXT-X-DISCONTINUITY without
-  EXT-X-DISCONTINUITY-SEQUENCE
-  ([#1789](https://github.com/google/ExoPlayer/issues/1789)).
-* HLS: Support for EXT-X-START tag
-  ([#1544](https://github.com/google/ExoPlayer/issues/1544)).
-* HLS: Check #EXTM3U header is present when parsing the playlist. Fail
-  gracefully if not ([#2301](https://github.com/google/ExoPlayer/issues/2301)).
-* HLS: Fix memory leak
-  ([#2319](https://github.com/google/ExoPlayer/issues/2319)).
-* HLS: Fix non-seamless first adaptation where master playlist omits resolution
-  tags ([#2096](https://github.com/google/ExoPlayer/issues/2096)).
-* HLS: Fix handling of WebVTT subtitle renditions with non-standard segment file
-  extensions ([#2025](https://github.com/google/ExoPlayer/issues/2025) and
-  [#2355](https://github.com/google/ExoPlayer/issues/2355)).
-* HLS: Better handle inconsistent HLS playlist update
-  ([#2249](https://github.com/google/ExoPlayer/issues/2249)).
-* DASH: Don't overflow when dealing with large segment numbers
-  ([#2311](https://github.com/google/ExoPlayer/issues/2311)).
-* DASH: Fix propagation of language from the manifest
-  ([#2335](https://github.com/google/ExoPlayer/issues/2335)).
-* SmoothStreaming: Work around "Offset to sample data was negative" failures
-  ([#2292](https://github.com/google/ExoPlayer/issues/2292),
-  [#2101](https://github.com/google/ExoPlayer/issues/2101) and
-  [#1152](https://github.com/google/ExoPlayer/issues/1152)).
-* MP3/ID3: Added support for parsing Chapter and URL link frames
-  ([#2316](https://github.com/google/ExoPlayer/issues/2316)).
-* MP3/ID3: Handle ID3 frames that end with empty text field
-  ([#2309](https://github.com/google/ExoPlayer/issues/2309)).
-* Added ClippingMediaSource for playing clipped portions of media
-  ([#1988](https://github.com/google/ExoPlayer/issues/1988)).
-* Added convenience methods to query whether the current window is dynamic and
-  seekable ([#2320](https://github.com/google/ExoPlayer/issues/2320)).
-* Support setting of default headers on HttpDataSource.Factory implementations
-  ([#2166](https://github.com/google/ExoPlayer/issues/2166)).
-* Fixed cache failures when using an encrypted cache content index.
-* Fix visual artifacts when switching output surface
-  ([#2093](https://github.com/google/ExoPlayer/issues/2093)).
-* Fix gradle + proguard configurations.
-* Fix player position when replacing the MediaSource
-  ([#2369](https://github.com/google/ExoPlayer/issues/2369)).
-* Misc bug fixes, including
-  [#2330](https://github.com/google/ExoPlayer/issues/2330),
-  [#2269](https://github.com/google/ExoPlayer/issues/2269),
-  [#2252](https://github.com/google/ExoPlayer/issues/2252),
-  [#2264](https://github.com/google/ExoPlayer/issues/2264) and
-  [#2290](https://github.com/google/ExoPlayer/issues/2290).
-
-### r2.1.1 ###
-
-* Fix some subtitle types (e.g. WebVTT) being displayed out of sync
-  ([#2208](https://github.com/google/ExoPlayer/issues/2208)).
-* Fix incorrect position reporting for on-demand HLS media that includes
-  EXT-X-PROGRAM-DATE-TIME tags
-  ([#2224](https://github.com/google/ExoPlayer/issues/2224)).
-* Fix issue where playbacks could get stuck in the initial buffering state if
-  over 1MB of data needs to be read to initialize the playback.
-
-### r2.1.0 ###
-
-* HLS: Support for seeking in live streams
-  ([#87](https://github.com/google/ExoPlayer/issues/87)).
-* HLS: Improved support:
-  * Support for EXT-X-PROGRAM-DATE-TIME
-    ([#747](https://github.com/google/ExoPlayer/issues/747)).
-  * Improved handling of sample timestamps and their alignment across variants
-    and renditions.
-  * Fix issue that could cause playbacks to get stuck in an endless initial
-    buffering state.
-  * Correctly propagate BehindLiveWindowException instead of
-    IndexOutOfBoundsException exception
-    ([#1695](https://github.com/google/ExoPlayer/issues/1695)).
-* MP3/MP4: Support for ID3 metadata, including embedded album art
-  ([#979](https://github.com/google/ExoPlayer/issues/979)).
-* Improved customization of UI components. You can read about customization of
-  ExoPlayer's UI components
-  [here](https://medium.com/google-exoplayer/customizing-exoplayers-ui-components-728cf55ee07a#.9ewjg7avi).
-* Robustness improvements when handling MediaSource timeline changes and
-  MediaPeriod transitions.
-* EIA608: Support for caption styling and positioning.
-* MPEG-TS: Improved support:
-  * Support injection of custom TS payload readers.
-  * Support injection of custom section payload readers.
-  * Support SCTE-35 splice information messages.
-  * Support multiple table sections in a single PSI section.
-  * Fix NullPointerException when an unsupported stream type is encountered
-    ([#2149](https://github.com/google/ExoPlayer/issues/2149)).
-  * Avoid failure when expected ID3 header not found
-    ([#1966](https://github.com/google/ExoPlayer/issues/1966)).
-* Improvements to the upstream cache package.
-  * Support caching of media segments for DASH, HLS and SmoothStreaming. Note
-    that caching of manifest and playlist files is still not supported in the
-    (normal) case where the corresponding responses are compressed.
-  * Support caching for ExtractorMediaSource based playbacks.
-* Improved flexibility of SimpleExoPlayer
-  ([#2102](https://github.com/google/ExoPlayer/issues/2102)).
-* Fix issue where only the audio of a video would play due to capability
-  detection issues ([#2007](https://github.com/google/ExoPlayer/issues/2007),
-  [#2034](https://github.com/google/ExoPlayer/issues/2034) and
-  [#2157](https://github.com/google/ExoPlayer/issues/2157)).
-* Fix issues that could cause ExtractorMediaSource based playbacks to get stuck
-  buffering ([#1962](https://github.com/google/ExoPlayer/issues/1962)).
-* Correctly set SimpleExoPlayerView surface aspect ratio when an active player
-  is attached ([#2077](https://github.com/google/ExoPlayer/issues/2077)).
-* OGG: Fix playback of short OGG files
-  ([#1976](https://github.com/google/ExoPlayer/issues/1976)).
-* MP4: Support `.mp3` tracks
-  ([#2066](https://github.com/google/ExoPlayer/issues/2066)).
-* SubRip: Don't fail playbacks if SubRip file contains negative timestamps
-  ([#2145](https://github.com/google/ExoPlayer/issues/2145)).
-* Misc bugfixes.
-
-### r2.0.4 ###
-
-* Fix crash on Jellybean devices when using playback controls
-  ([#1965](https://github.com/google/ExoPlayer/issues/1965)).
-
-### r2.0.3 ###
-
-* Fixed NullPointerException in ExtractorMediaSource
-  ([#1914](https://github.com/google/ExoPlayer/issues/1914)).
-* Fixed NullPointerException in HlsMediaPeriod
-  ([#1907](https://github.com/google/ExoPlayer/issues/1907)).
-* Fixed memory leak in PlaybackControlView
-  ([#1908](https://github.com/google/ExoPlayer/issues/1908)).
-* Fixed strict mode violation when using
-  SimpleExoPlayer.setVideoPlayerTextureView().
-* Fixed L3 Widevine provisioning
-  ([#1925](https://github.com/google/ExoPlayer/issues/1925)).
-* Fixed hiding of controls with use_controller="false"
-  ([#1919](https://github.com/google/ExoPlayer/issues/1919)).
-* Improvements to Cronet network stack extension.
-* Misc bug fixes.
-
-### r2.0.2 ###
-
-* Fixes for MergingMediaSource and sideloaded subtitles.
-  ([#1882](https://github.com/google/ExoPlayer/issues/1882),
-  [#1854](https://github.com/google/ExoPlayer/issues/1854),
-  [#1900](https://github.com/google/ExoPlayer/issues/1900)).
-* Reduced effect of application code leaking player references
-  ([#1855](https://github.com/google/ExoPlayer/issues/1855)).
-* Initial support for fragmented MP4 in HLS.
-* Misc bug fixes and minor features.
-
-### r2.0.1 ###
-
-* Fix playback of short duration content
-  ([#1837](https://github.com/google/ExoPlayer/issues/1837)).
-* Fix MergingMediaSource preparation issue
-  ([#1853](https://github.com/google/ExoPlayer/issues/1853)).
-* Fix live stream buffering (out of memory) issue
-  ([#1825](https://github.com/google/ExoPlayer/issues/1825)).
-
-### r2.0.0 ###
-
-ExoPlayer 2.x is a major iteration of the library. It includes significant API
-and architectural changes, new features and many bug fixes. You can read about
-some of the motivations behind ExoPlayer 2.x
-[here](https://medium.com/google-exoplayer/exoplayer-2-x-why-what-and-when-74fd9cb139#.am7h8nytm).
-
-* Root package name changed to `com.google.android.exoplayer2`. The library
-  structure and class names have also been sanitized. Read more
-  [here](https://medium.com/google-exoplayer/exoplayer-2-x-new-package-and-class-names-ef8e1d9ba96f#.lv8sd4nez).
-* Key architectural changes:
-  * Late binding between rendering and media source components. Allows the same
-    rendering components to be re-used from one playback to another. Enables
-    features such as gapless playback through playlists and DASH multi-period
-    support.
-  * Improved track selection design. More details can be found
-    [here](https://medium.com/google-exoplayer/exoplayer-2-x-track-selection-2b62ff712cc9#.n00zo76b6).
-  * LoadControl now used to control buffering and loading across all playback
-    types.
-  * Media source components given additional structure. A new MediaSource class
-    has been introduced. MediaSources expose Timelines that describe the media
-    they expose, and can consist of multiple MediaPeriods. This enables features
-    such as seeking in live playbacks and DASH multi-period support.
-  * Responsibility for loading the initial DASH/SmoothStreaming/HLS manifest is
-    promoted to the corresponding MediaSource components and is no longer the
-    application's responsibility.
-  * Higher level abstractions such as SimpleExoPlayer have been added to the
-    library. These make the library easier to use for common use cases. The demo
-    app is halved in size as a result, whilst at the same time gaining more
-    functionality. Read more
-    [here](https://medium.com/google-exoplayer/exoplayer-2-x-improved-demo-app-d97171aaaaa1).
-  * Enhanced library support for implementing audio extensions. Read more
-    [here](https://medium.com/google-exoplayer/exoplayer-2-x-new-audio-features-cfb26c2883a#.ua75vu4s3).
-  * Format and MediaFormat are replaced by a single Format class.
-* Key new features:
-  * Playlist support. Includes support for gapless playback between playlist
-    items and consistent application of LoadControl and TrackSelector policies
-    when transitioning between items
-    ([#1270](https://github.com/google/ExoPlayer/issues/1270)).
-  * Seeking in live playbacks for DASH and SmoothStreaming
-    ([#291](https://github.com/google/ExoPlayer/issues/291)).
-  * DASH multi-period support
-    ([#557](https://github.com/google/ExoPlayer/issues/557)).
-  * MediaSource composition allows MediaSources to be concatenated into a
-    playlist, merged and looped. Read more
-    [here](https://medium.com/google-exoplayer/exoplayer-2-x-mediasource-composition-6c285fcbca1f#.zfha8qupz).
-  * Looping support (see above)
-    ([#490](https://github.com/google/ExoPlayer/issues/490)).
-  * Ability to query information about all tracks in a piece of media (including
-    those not supported by the device)
-    ([#1121](https://github.com/google/ExoPlayer/issues/1121)).
-  * Improved player controls.
-  * Support for PSSH in fMP4 moof atoms
-    ([#1143](https://github.com/google/ExoPlayer/issues/1143)).
-  * Support for Opus in Ogg
-    ([#1447](https://github.com/google/ExoPlayer/issues/1447)).
-  * CacheDataSource support for standalone media file playbacks (mp3, mp4 etc).
-  * FFMPEG extension (for audio only).
-* Key bug fixes:
-  * Removed unnecessary secondary requests when playing standalone media files
-    ([#1041](https://github.com/google/ExoPlayer/issues/1041)).
-  * Fixed playback of video only (i.e. no audio) live streams
-    ([#758](https://github.com/google/ExoPlayer/issues/758)).
-  * Fixed silent failure when media buffer is too small
-    ([#583](https://github.com/google/ExoPlayer/issues/583)).
-  * Suppressed "Sending message to a Handler on a dead thread" warnings
-    ([#426](https://github.com/google/ExoPlayer/issues/426)).
-
-# Legacy release notes #
-
-Note: Since ExoPlayer V1 is still being maintained alongside V2, there is some
-overlap between these notes and the notes above. r2.0.0 followed from r1.5.11,
-and hence it can be assumed that all changes in r1.5.11 and earlier are included
-in all V2 releases. This cannot be assumed for changes in r1.5.12 and later,
-however it can be assumed that all such changes are included in the most recent
-V2 release.
-
-### r1.5.16 ###
-
-* VP9 extension: Reduced binary size.
-* FLAC extension: Enabled 64 bit targets and fixed proguard config.
-* Misc bugfixes.
-
-### r1.5.15 ###
-
-* SmoothStreaming: Fixed handling of start_time placeholder
-  ([#2447](https://github.com/google/ExoPlayer/issues/2447)).
-* Misc bugfixes.
-
-### r1.5.14 ###
-
-* Fixed cache failures when using an encrypted cache content index.
-* SmoothStreaming: Work around "Offset to sample data was negative" failures
-  ([#2292](https://github.com/google/ExoPlayer/issues/2292),
-  [#2101](https://github.com/google/ExoPlayer/issues/2101) and
-  [#1152](https://github.com/google/ExoPlayer/issues/1152)).
-
-### r1.5.13 ###
-
-* Improvements to the upstream cache package.
-* MP4: Support `.mp3` tracks
-  ([#2066](https://github.com/google/ExoPlayer/issues/2066)).
-* SubRip: Don't fail playbacks if SubRip file contains negative timestamps
-  ([#2145](https://github.com/google/ExoPlayer/issues/2145)).
-* MPEG-TS: Avoid failure when expected ID3 header not found
-  ([#1966](https://github.com/google/ExoPlayer/issues/1966)).
-* Misc bugfixes.
-
-### r1.5.12 ###
-
-* Improvements to Cronet network stack extension.
-* Fix bug in demo app introduced in r1.5.11 that caused L3 Widevine
-  provisioning requests to fail.
-* Misc bugfixes.
-
-### r1.5.11 ###
-
-* Cronet network stack extension.
-* HLS: Fix propagation of language for alternative audio renditions
-  ([#1784](https://github.com/google/ExoPlayer/issues/1784)).
-* WebM: Support for subsample encryption.
-* ID3: Fix EOS detection for 2-byte encodings
-  ([#1774](https://github.com/google/ExoPlayer/issues/1774)).
-* MPEG-TS: Support multiple tracks of the same type.
-* MPEG-TS: Work toward robust handling of stream corruption.
-* Fix ContentDataSource failures triggered by garbage collector
-  ([#1759](https://github.com/google/ExoPlayer/issues/1759)).
-
-### r1.5.10 ###
-
-* HLS: Stability fixes.
-* MP4: Support for stz2 Atoms.
-* Enable 4K format selection on Sony AndroidTV + nVidia SHIELD.
-* TX3G caption fixes.
-
-### r1.5.9 ###
-
-* MP4: Fixed incorrect sniffing in some cases (#1523).
-* MP4: Improved file compatibility (#1567).
-* ID3: Support for TIT2 and APIC frames.
-* Fixed querying of platform decoders on some devices.
-* Misc bug fixes.
-
-### r1.5.8 ###
-
-* HLS: Fix handling of HTTP redirects.
-* Audio: Minor adjustment to improve A/V sync.
-* OGG: Support FLAC in OGG.
-* TTML: Support regions.
-* WAV/PCM: Support 8, 24 and 32-bit WAV and PCM audio.
-* Misc bug fixes and performance optimizations.
-
-### r1.5.7 ###
-
-* OGG: Support added for OGG.
-* FLAC: Support for FLAC extraction and playback (via an extension).
-* HLS: Multiple audio track support (via Renditions).
-* FMP4: Support multiple tracks in fragmented MP4 (not applicable to
-  DASH/SmoothStreaming).
-* WAV: Support for 16-bit WAV files.
-* MKV: Support non-square pixel formats.
-* Misc bug fixes.
-
-### r1.5.6 ###
-
-* MP3: Fix mono streams playing at 2x speed on some MediaTek based devices
-  (#801).
-* MP3: Fix playback of some streams when stream length is unknown.
-* ID3: Support multiple frames of the same type in a single tag.
-* EIA608: Correctly handle repeated control characters, fixing an issue in which
-  captions would immediately disappear.
-* AVC3: Fix decoder failures on some MediaTek devices in the case where the
-  first buffer fed to the decoder does not start with SPS/PPS NAL units.
-* Misc bug fixes.
-
-### r1.5.5 ###
-
-* DASH: Enable MP4 embedded WebVTT playback (#1185)
-* HLS: Fix handling of extended ID3 tags in MPEG-TS (#1181)
-* MP3: Fix incorrect position calculation in VBRI header (#1197)
-* Fix issue seeking backward using SingleSampleSource (#1193)
-
-### r1.5.4 ###
-
-* HLS: Support for variant selection and WebVtt subtitles.
-* MP4: Support for embedded WebVtt.
-* Improved device compatibility.
-* Fix for resource leak (Issue #1066).
-* Misc bug fixes + minor features.
-
-### r1.5.3 ###
-
-* Support for FLV (without seeking).
-* MP4: Fix for playback of media containing basic edit lists.
-* QuickTime: Fix parsing of QuickTime style audio sample entry.
-* HLS: Add H262 support for devices that have an H262 decoder.
-* Allow AudioTrack PlaybackParams (e.g. speed/pitch) on API level 23+.
-* Correctly detect 4K displays on API level 23+.
-* Misc bug fixes.
-
-### r1.5.2 ###
-
-* MPEG-TS/HLS: Fix frame drops playing H265 video.
-* SmoothStreaming: Fix parsing of ProtectionHeader.
-
-### r1.5.1 ###
-
-* Enable smooth frame release by default.
-* Added OkHttpDataSource extension.
-* AndroidTV: Correctly detect 4K display size on Bravia devices.
-* FMP4: Handle non-sample data in mdat boxes.
-* TTML: Fix parsing of some colors on Jellybean.
-* SmoothStreaming: Ignore tfdt boxes.
-* Misc bug fixes.
-
-### r1.5.0 ###
-
-* Multi-track support.
-* DASH: Limited support for multi-period manifests.
-* HLS: Smoother format adaptation.
-* HLS: Support for MP3 media segments.
-* TTML: Support for most embedded TTML styling.
-* WebVTT: Enhanced positioning support.
-* Initial playback tests.
-* Misc bug fixes.
-
-### r1.4.2 ###
-
-* Implemented automatic format detection for regular container formats.
-* Added UdpDataSource for connecting to multicast streams.
-* Improved robustness for MP4 playbacks.
-* Misc bug fixes.
-
-### r1.4.1 ###
-
-* HLS: Fix premature playback failures that could occur in some cases.
-
-### r1.4.0 ###
-
-* Support for extracting Matroska streams (implemented by WebmExtractor).
-* Support for tx3g captions in MP4 streams.
-* Support for H.265 in MPEG-TS streams on supported devices.
-* HLS: Added support for MPEG audio (e.g. MP3) in TS media segments.
-* HLS: Improved robustness against missing chunks and variants.
-* MP4: Added support for embedded MPEG audio (e.g. MP3).
-* TTML: Improved handling of whitespace.
-* DASH: Support Mpd.Location element.
-* Add option to TsExtractor to allow non-IDR keyframes.
-* Added MulticastDataSource for connecting to multicast streams.
-* (WorkInProgress) - First steps to supporting seeking in DASH DVR window.
-* (WorkInProgress) - First steps to supporting styled + positioned subtitles.
-* Misc bug fixes.
-
-### r1.3.3 ###
-
-* HLS: Fix failure when playing HLS AAC streams.
-* Misc bug fixes.
-
-### r1.3.2 ###
-
-* DataSource improvements: `DefaultUriDataSource` now handles http://, https://,
-  file://, asset:// and content:// URIs automatically. It also handles
-  file:///android_asset/* URIs, and file paths like /path/to/media.mp4 where the
-  scheme is omitted.
-* HLS: Fix for some ID3 events being dropped.
-* HLS: Correctly handle 0x0 and floating point RESOLUTION tags.
-* Mp3Extractor: robustness improvements.
-
-### r1.3.1 ###
-
-* No notes provided.
diff --git a/build.gradle b/build.gradle
deleted file mode 100644
index 8ec24a6e82..0000000000
--- a/build.gradle
+++ /dev/null
@@ -1,52 +0,0 @@
-// Copyright (C) 2016 The Android Open Source Project
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-buildscript {
-    repositories {
-        jcenter()
-        maven {
-            url "https://maven.google.com"
-        }
-    }
-    dependencies {
-        classpath 'com.android.tools.build:gradle:3.0.0-beta4'
-        classpath 'com.novoda:bintray-release:0.5.0'
-    }
-    // Workaround for the following test coverage issue. Remove when fixed:
-    // https://code.google.com/p/android/issues/detail?id=226070
-    configurations.all {
-        resolutionStrategy {
-            force 'org.jacoco:org.jacoco.report:0.7.4.201502262128'
-            force 'org.jacoco:org.jacoco.core:0.7.4.201502262128'
-        }
-    }
-}
-allprojects {
-    repositories {
-        jcenter()
-        maven {
-            url "https://maven.google.com"
-        }
-    }
-    project.ext {
-        exoplayerPublishEnabled = true
-    }
-    if (it.hasProperty('externalBuildDir')) {
-        if (!new File(externalBuildDir).isAbsolute()) {
-            externalBuildDir = new File(rootDir, externalBuildDir)
-        }
-        buildDir = "${externalBuildDir}/${project.name}"
-    }
-}
-
-apply from: 'javadoc_combined.gradle'
diff --git a/core_settings.gradle b/core_settings.gradle
deleted file mode 100644
index 20e7b235a2..0000000000
--- a/core_settings.gradle
+++ /dev/null
@@ -1,58 +0,0 @@
-// Copyright (C) 2017 The Android Open Source Project
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-def rootDir = gradle.ext.exoplayerRoot
-def modulePrefix = ':'
-if (gradle.ext.has('exoplayerModulePrefix')) {
-    modulePrefix += gradle.ext.exoplayerModulePrefix
-}
-
-include modulePrefix + 'library'
-include modulePrefix + 'library-core'
-include modulePrefix + 'library-dash'
-include modulePrefix + 'library-hls'
-include modulePrefix + 'library-smoothstreaming'
-include modulePrefix + 'library-ui'
-include modulePrefix + 'testutils'
-include modulePrefix + 'extension-ffmpeg'
-include modulePrefix + 'extension-flac'
-include modulePrefix + 'extension-gvr'
-include modulePrefix + 'extension-ima'
-include modulePrefix + 'extension-mediasession'
-include modulePrefix + 'extension-okhttp'
-include modulePrefix + 'extension-opus'
-include modulePrefix + 'extension-vp9'
-include modulePrefix + 'extension-rtmp'
-
-project(modulePrefix + 'library').projectDir = new File(rootDir, 'library/all')
-project(modulePrefix + 'library-core').projectDir = new File(rootDir, 'library/core')
-project(modulePrefix + 'library-dash').projectDir = new File(rootDir, 'library/dash')
-project(modulePrefix + 'library-hls').projectDir = new File(rootDir, 'library/hls')
-project(modulePrefix + 'library-smoothstreaming').projectDir = new File(rootDir, 'library/smoothstreaming')
-project(modulePrefix + 'library-ui').projectDir = new File(rootDir, 'library/ui')
-project(modulePrefix + 'testutils').projectDir = new File(rootDir, 'testutils')
-project(modulePrefix + 'extension-ffmpeg').projectDir = new File(rootDir, 'extensions/ffmpeg')
-project(modulePrefix + 'extension-flac').projectDir = new File(rootDir, 'extensions/flac')
-project(modulePrefix + 'extension-gvr').projectDir = new File(rootDir, 'extensions/gvr')
-project(modulePrefix + 'extension-ima').projectDir = new File(rootDir, 'extensions/ima')
-project(modulePrefix + 'extension-mediasession').projectDir = new File(rootDir, 'extensions/mediasession')
-project(modulePrefix + 'extension-okhttp').projectDir = new File(rootDir, 'extensions/okhttp')
-project(modulePrefix + 'extension-opus').projectDir = new File(rootDir, 'extensions/opus')
-project(modulePrefix + 'extension-vp9').projectDir = new File(rootDir, 'extensions/vp9')
-project(modulePrefix + 'extension-rtmp').projectDir = new File(rootDir, 'extensions/rtmp')
-
-if (gradle.ext.has('exoplayerIncludeCronetExtension')
-        && gradle.ext.exoplayerIncludeCronetExtension) {
-    include modulePrefix + 'extension-cronet'
-    project(modulePrefix + 'extension-cronet').projectDir = new File(rootDir, 'extensions/cronet')
-}
diff --git a/demo/README.md b/demo/README.md
deleted file mode 100644
index bdb04e5ba8..0000000000
--- a/demo/README.md
+++ /dev/null
@@ -1,5 +0,0 @@
-# ExoPlayer main demo #
-
-This is the main ExoPlayer demo application. It uses ExoPlayer to play a number
-of test streams. It can be used as a starting point or reference project when
-developing other applications that make use of the ExoPlayer library.
diff --git a/demo/build.gradle b/demo/build.gradle
deleted file mode 100644
index e0874e3147..0000000000
--- a/demo/build.gradle
+++ /dev/null
@@ -1,66 +0,0 @@
-// Copyright (C) 2016 The Android Open Source Project
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-apply from: '../constants.gradle'
-apply plugin: 'com.android.application'
-
-android {
-    compileSdkVersion project.ext.compileSdkVersion
-    buildToolsVersion project.ext.buildToolsVersion
-
-    defaultConfig {
-        minSdkVersion 16
-        targetSdkVersion project.ext.targetSdkVersion
-    }
-
-    buildTypes {
-        release {
-            shrinkResources true
-            minifyEnabled true
-            proguardFiles getDefaultProguardFile('proguard-android.txt')
-        }
-        debug {
-            jniDebuggable = true
-        }
-    }
-
-    lintOptions {
-        // The demo app does not have translations.
-        disable 'MissingTranslation'
-    }
-
-    flavorDimensions "extensions"
-
-    productFlavors {
-        noExtensions {
-            dimension "extensions"
-        }
-        withExtensions {
-            dimension "extensions"
-        }
-    }
-}
-
-dependencies {
-    compile project(modulePrefix + 'library-core')
-    compile project(modulePrefix + 'library-dash')
-    compile project(modulePrefix + 'library-hls')
-    compile project(modulePrefix + 'library-smoothstreaming')
-    compile project(modulePrefix + 'library-ui')
-    withExtensionsCompile project(path: modulePrefix + 'extension-ffmpeg')
-    withExtensionsCompile project(path: modulePrefix + 'extension-flac')
-    withExtensionsCompile project(path: modulePrefix + 'extension-ima')
-    withExtensionsCompile project(path: modulePrefix + 'extension-opus')
-    withExtensionsCompile project(path: modulePrefix + 'extension-vp9')
-    withExtensionsCompile project(path: modulePrefix + 'extension-rtmp')
-}
diff --git a/demo/src/main/AndroidManifest.xml b/demo/src/main/AndroidManifest.xml
deleted file mode 100644
index 612044762f..0000000000
--- a/demo/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,80 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2016 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.google.android.exoplayer2.demo"
-    android:versionCode="2503"
-    android:versionName="2.5.3">
-
-  <uses-permission android:name="android.permission.INTERNET"/>
-  <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
-  <uses-feature android:name="android.software.leanback" android:required="false"/>
-  <uses-feature android:name="android.hardware.touchscreen" android:required="false"/>
-  <uses-sdk android:minSdkVersion="16" android:targetSdkVersion="25"/>
-
-  <application
-      android:label="@string/application_name"
-      android:icon="@mipmap/ic_launcher"
-      android:banner="@drawable/ic_banner"
-      android:largeHeap="true"
-      android:allowBackup="false"
-      android:name="com.google.android.exoplayer2.demo.DemoApplication">
-
-    <activity android:name="com.google.android.exoplayer2.demo.SampleChooserActivity"
-        android:configChanges="keyboardHidden"
-        android:label="@string/application_name">
-      <intent-filter>
-        <action android:name="android.intent.action.MAIN"/>
-        <category android:name="android.intent.category.LAUNCHER"/>
-        <category android:name="android.intent.category.LEANBACK_LAUNCHER"/>
-      </intent-filter>
-      <intent-filter>
-        <action android:name="android.intent.action.VIEW"/>
-        <category android:name="android.intent.category.DEFAULT"/>
-        <category android:name="android.intent.category.BROWSABLE"/>
-        <data android:scheme="http"/>
-        <data android:scheme="https"/>
-        <data android:scheme="content"/>
-        <data android:scheme="asset"/>
-        <data android:scheme="file"/>
-        <data android:host="*"/>
-        <data android:pathPattern=".*\\.exolist\\.json"/>
-      </intent-filter>
-    </activity>
-
-    <activity android:name="com.google.android.exoplayer2.demo.PlayerActivity"
-        android:configChanges="keyboard|keyboardHidden|orientation|screenSize|screenLayout|smallestScreenSize|uiMode"
-        android:launchMode="singleTop"
-        android:label="@string/application_name"
-        android:theme="@style/PlayerTheme">
-      <intent-filter>
-        <action android:name="com.google.android.exoplayer.demo.action.VIEW"/>
-        <category android:name="android.intent.category.DEFAULT"/>
-        <data android:scheme="http"/>
-        <data android:scheme="https"/>
-        <data android:scheme="content"/>
-        <data android:scheme="asset"/>
-        <data android:scheme="file"/>
-      </intent-filter>
-      <intent-filter>
-        <action android:name="com.google.android.exoplayer.demo.action.VIEW_LIST"/>
-        <category android:name="android.intent.category.DEFAULT"/>
-      </intent-filter>
-    </activity>
-
-  </application>
-
-</manifest>
diff --git a/demo/src/main/assets/media.exolist.json b/demo/src/main/assets/media.exolist.json
deleted file mode 100644
index 59d8259d37..0000000000
--- a/demo/src/main/assets/media.exolist.json
+++ /dev/null
@@ -1,572 +0,0 @@
-[
-  {
-    "name": "YouTube DASH",
-    "samples": [
-      {
-        "name": "Google Glass (MP4,H264)",
-        "uri": "http://www.youtube.com/api/manifest/dash/id/bf5bb2419360daf1/source/youtube?as=fmp4_audio_clear,fmp4_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=51AF5F39AB0CEC3E5497CD9C900EBFEAECCCB5C7.8506521BFC350652163895D4C26DEE124209AA9E&key=ik0",
-        "extension": "mpd"
-      },
-      {
-        "name": "Google Play (MP4,H264)",
-        "uri": "http://www.youtube.com/api/manifest/dash/id/3aa39fa2cc27967f/source/youtube?as=fmp4_audio_clear,fmp4_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=A2716F75795F5D2AF0E88962FFCD10DB79384F29.84308FF04844498CE6FBCE4731507882B8307798&key=ik0",
-        "extension": "mpd"
-      },
-      {
-        "name": "Google Glass (WebM,VP9)",
-        "uri": "http://www.youtube.com/api/manifest/dash/id/bf5bb2419360daf1/source/youtube?as=fmp4_audio_clear,webm2_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=249B04F79E984D7F86B4D8DB48AE6FAF41C17AB3.7B9F0EC0505E1566E59B8E488E9419F253DDF413&key=ik0",
-        "extension": "mpd"
-      },
-      {
-        "name": "Google Play (WebM,VP9)",
-        "uri": "http://www.youtube.com/api/manifest/dash/id/3aa39fa2cc27967f/source/youtube?as=fmp4_audio_clear,webm2_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=B1C2A74783AC1CC4865EB312D7DD2D48230CC9FD.BD153B9882175F1F94BFE5141A5482313EA38E8D&key=ik0",
-        "extension": "mpd"
-      }
-    ]
-  },
-  {
-    "name": "Widevine DASH Policy Tests (GTS)",
-    "samples": [
-      {
-        "name": "WV: HDCP not specified",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=d286538032258a1c&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP not required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=48fcc369939ac96c&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=e06c39f1151da3df&provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure video path required (MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=0894c7c8719b28a0&provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure video path required (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=0894c7c8719b28a0&provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure video path required (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/hevc/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=0894c7c8719b28a0&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP + secure video path required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=efd045b1eb61888a&provider=widevine_test"
-      },
-      {
-        "name": "WV: 30s license duration (fails at ~30s)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=f9a34cab7b05881a&provider=widevine_test"
-      }
-    ]
-  },
-  {
-    "name": "Widevine HDCP Capabilities Tests",
-    "samples": [
-      {
-        "name": "WV: HDCP: None (not required)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_None&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP: 1.0 required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_V1&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP: 2.0 required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_V2&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP: 2.1 required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_V2_1&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP: 2.2 required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_V2_2&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP: No digital output",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_NO_DIGTAL_OUTPUT&provider=widevine_test"
-      }
-    ]
-  },
-  {
-    "name": "Widevine DASH: MP4,H264",
-    "samples": [
-      {
-        "name": "WV: Clear SD & HD (MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/h264/tears/tears.mpd"
-      },
-      {
-        "name": "WV: Clear SD (MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/h264/tears/tears_sd.mpd"
-      },
-      {
-        "name": "WV: Clear HD (MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/h264/tears/tears_hd.mpd"
-      },
-      {
-        "name": "WV: Clear UHD (MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/h264/tears/tears_uhd.mpd"
-      },
-      {
-        "name": "WV: Secure SD & HD (cenc,MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure SD (cenc,MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_sd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure HD (cenc,MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_hd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure UHD (cenc,MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_uhd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure SD & HD (cbc1,MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cbc1/h264/tears/tears_aes_cbc1.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure SD (cbc1,MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cbc1/h264/tears/tears_aes_cbc1_sd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure HD (cbc1,MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cbc1/h264/tears/tears_aes_cbc1_hd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure UHD (cbc1,MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cbc1/h264/tears/tears_aes_cbc1_uhd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure SD & HD (cbcs,MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cbcs/h264/tears/tears_aes_cbcs.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure SD (cbcs,MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cbcs/h264/tears/tears_aes_cbcs_sd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure HD (cbcs,MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cbcs/h264/tears/tears_aes_cbcs_hd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure UHD (cbcs,MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cbcs/h264/tears/tears_aes_cbcs_uhd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      }
-    ]
-  },
-  {
-    "name": "Widevine DASH: WebM,VP9",
-    "samples": [
-      {
-        "name": "WV: Clear SD & HD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/vp9/tears/tears.mpd"
-      },
-      {
-        "name": "WV: Clear SD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/vp9/tears/tears_sd.mpd"
-      },
-      {
-        "name": "WV: Clear HD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/vp9/tears/tears_hd.mpd"
-      },
-      {
-        "name": "WV: Clear UHD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/vp9/tears/tears_uhd.mpd"
-      },
-      {
-        "name": "WV: Secure Fullsample SD & HD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure Fullsample SD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/tears/tears_sd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure Fullsample HD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/tears/tears_hd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure Fullsample UHD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/tears/tears_uhd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure Subsample SD & HD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/subsample/24fps/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure Subsample SD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/subsample/24fps/tears/tears_sd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure Subsample HD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/subsample/24fps/tears/tears_hd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure Subsample UHD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/subsample/24fps/tears/tears_uhd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      }
-    ]
-  },
-  {
-    "name": "Widevine DASH: MP4,H265",
-    "samples": [
-      {
-        "name": "WV: Clear SD & HD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/hevc/tears/tears.mpd"
-      },
-      {
-        "name": "WV: Clear SD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/hevc/tears/tears_sd.mpd"
-      },
-      {
-        "name": "WV: Clear HD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/hevc/tears/tears_hd.mpd"
-      },
-      {
-        "name": "WV: Clear UHD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/hevc/tears/tears_uhd.mpd"
-      },
-      {
-        "name": "WV: Secure SD & HD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/hevc/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure SD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/hevc/tears/tears_sd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure HD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/hevc/tears/tears_hd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure UHD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/hevc/tears/tears_uhd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      }
-    ]
-  },
-  {
-    "name": "SmoothStreaming",
-    "samples": [
-      {
-        "name": "Super speed",
-        "uri": "http://playready.directtaps.net/smoothstreaming/SSWSS720H264/SuperSpeedway_720.ism"
-      },
-      {
-        "name": "Super speed (PlayReady)",
-        "uri": "http://playready.directtaps.net/smoothstreaming/SSWSS720H264PR/SuperSpeedway_720.ism",
-        "drm_scheme": "playready"
-      }
-    ]
-  },
-  {
-    "name": "HLS",
-    "samples": [
-      {
-        "name": "Apple 4x3 basic stream",
-        "uri": "https://devimages.apple.com.edgekey.net/streaming/examples/bipbop_4x3/bipbop_4x3_variant.m3u8"
-      },
-      {
-        "name": "Apple 16x9 basic stream",
-        "uri": "https://devimages.apple.com.edgekey.net/streaming/examples/bipbop_16x9/bipbop_16x9_variant.m3u8"
-      },
-      {
-        "name": "Apple master playlist advanced (TS)",
-        "uri": "https://tungsten.aaplimg.com/VOD/bipbop_adv_example_v2/master.m3u8"
-      },
-      {
-        "name": "Apple master playlist advanced (fMP4)",
-        "uri": "https://tungsten.aaplimg.com/VOD/bipbop_adv_fmp4_example/master.m3u8"
-      },
-      {
-        "name": "Apple TS media playlist",
-        "uri": "https://devimages.apple.com.edgekey.net/streaming/examples/bipbop_4x3/gear1/prog_index.m3u8"
-      },
-      {
-        "name": "Apple AAC media playlist",
-        "uri": "https://devimages.apple.com.edgekey.net/streaming/examples/bipbop_4x3/gear0/prog_index.m3u8"
-      },
-      {
-        "name": "Apple ID3 metadata",
-        "uri": "http://devimages.apple.com/samplecode/adDemo/ad.m3u8"
-      }
-    ]
-  },
-  {
-    "name": "Misc",
-    "samples": [
-      {
-        "name": "Dizzy",
-        "uri": "https://html5demos.com/assets/dizzy.mp4"
-      },
-      {
-        "name": "Apple AAC 10s",
-        "uri": "https://devimages.apple.com.edgekey.net/streaming/examples/bipbop_4x3/gear0/fileSequence0.aac"
-      },
-      {
-        "name": "Apple TS 10s",
-        "uri": "https://devimages.apple.com.edgekey.net/streaming/examples/bipbop_4x3/gear1/fileSequence0.ts"
-      },
-      {
-        "name": "Android screens (Matroska)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv"
-      },
-      {
-        "name": "Big Buck Bunny (MP4 Video)",
-        "uri": "http://redirector.c.youtube.com/videoplayback?id=604ed5ce52eda7ee&itag=22&source=youtube&sparams=ip,ipbits,expire,source,id&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=513F28C7FDCBEC60A66C86C9A393556C99DC47FB.04C88036EEE12565A1ED864A875A58F15D8B5300&key=ik0"
-      },
-      {
-        "name": "Screens 360P (WebM,VP9,No Audio)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/video-vp9-360.webm"
-      },
-      {
-        "name": "Screens 480p (FMP4,H264,No Audio)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/video-avc-baseline-480.mp4"
-      },
-      {
-        "name": "Screens 1080p (FMP4,H264, No Audio)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/video-137.mp4"
-      },
-      {
-        "name": "Screens (FMP4,AAC Audio)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/audio-141.mp4"
-      },
-      {
-        "name": "Google Play (MP3 Audio)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-0/play.mp3"
-      },
-      {
-        "name": "Google Play (Ogg/Vorbis Audio)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/ogg/play.ogg"
-      },
-      {
-        "name": "Google Glass (WebM Video with Vorbis Audio)",
-        "uri": "http://demos.webmproject.org/exoplayer/glass_vp9_vorbis.webm"
-      },
-      {
-        "name": "Google Glass (VP9 in MP4/ISO-BMFF)",
-        "uri": "http://demos.webmproject.org/exoplayer/glass.mp4"
-      },
-      {
-        "name": "Google Glass DASH - VP9 and Opus",
-        "uri": "http://demos.webmproject.org/dash/201410/vp9_glass/manifest_vp9_opus.mpd"
-      },
-      {
-        "name": "Big Buck Bunny (FLV Video)",
-        "uri": "http://vod.leasewebcdn.com/bbb.flv?ri=1024&rs=150&start=0"
-      }
-    ]
-  },
-  {
-    "name": "Playlists",
-    "samples": [
-      {
-        "name": "Cats -> Dogs",
-        "playlist": [
-          {
-            "uri": "https://html5demos.com/assets/dizzy.mp4"
-          },
-          {
-            "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv"
-          }
-        ]
-      },
-      {
-        "name": "Audio -> Video -> Audio",
-        "playlist": [
-          {
-            "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/audio-141.mp4"
-          },
-          {
-            "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv"
-          },
-          {
-            "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/audio-141.mp4"
-          }
-        ]
-      },
-      {
-        "name": "Clear -> Enc -> Clear -> Enc -> Enc",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test",
-        "playlist": [
-          {
-            "uri": "https://html5demos.com/assets/dizzy.mp4"
-          },
-          {
-            "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_sd.mpd"
-          },
-          {
-            "uri": "https://html5demos.com/assets/dizzy.mp4"
-          },
-          {
-            "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_sd.mpd"
-          },
-          {
-            "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_sd.mpd"
-          }
-        ]
-      }
-    ]
-  },
-  {
-    "name": "IMA sample ad tags",
-    "samples": [
-      {
-        "name": "Single inline linear",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/single_ad_samples&ciu_szs=300x250&impl=s&gdfp_req=1&env=vp&output=vast&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ct%3Dlinear&correlator="
-      },
-      {
-        "name": "Single skippable inline",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/single_ad_samples&ciu_szs=300x250&impl=s&gdfp_req=1&env=vp&output=vast&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ct%3Dskippablelinear&correlator="
-      },
-      {
-        "name": "Single redirect linear",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/single_ad_samples&ciu_szs=300x250&impl=s&gdfp_req=1&env=vp&output=vast&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ct%3Dredirectlinear&correlator="
-      },
-      {
-        "name": "Single redirect error",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/single_ad_samples&ciu_szs=300x250&impl=s&gdfp_req=1&env=vp&output=vast&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ct%3Dredirecterror&nofb=1&correlator="
-      },
-      {
-        "name": "Single redirect broken (fallback)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/single_ad_samples&ciu_szs=300x250&impl=s&gdfp_req=1&env=vp&output=vast&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ct%3Dredirecterror&correlator="
-      },
-      {
-        "name": "VMAP pre-roll",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpreonly&cmsid=496&vid=short_onecue&correlator="
-      },
-      {
-        "name": "VMAP pre-roll + bumper",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpreonlybumper&cmsid=496&vid=short_onecue&correlator="
-      },
-      {
-        "name": "VMAP post-roll",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpostonly&cmsid=496&vid=short_onecue&correlator="
-      },
-      {
-        "name": "VMAP post-roll + bumper",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpostonlybumper&cmsid=496&vid=short_onecue&correlator="
-      },
-      {
-        "name": "VMAP pre-, mid- and post-rolls, single ads",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/single_ad_samples&ciu_szs=300x250&impl=s&gdfp_req=1&env=vp&output=vast&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ct%3Dlinear&correlator="
-      },
-      {
-        "name": "VMAP pre-roll single ad, mid-roll standard pod with 3 ads, post-roll single ad",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpremidpostpod&cmsid=496&vid=short_onecue&correlator="
-      },
-      {
-        "name": "VMAP pre-roll single ad, mid-roll optimized pod with 3 ads, post-roll single ad",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpremidpostoptimizedpod&cmsid=496&vid=short_onecue&correlator="
-      },
-      {
-        "name": "VMAP pre-roll single ad, mid-roll standard pod with 3 ads, post-roll single ad (bumpers around all ad breaks)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpremidpostpodbumper&cmsid=496&vid=short_onecue&correlator="
-      },
-      {
-        "name": "VMAP pre-roll single ad, mid-roll optimized pod with 3 ads, post-roll single ad (bumpers around all ad breaks)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpremidpostoptimizedpodbumper&cmsid=496&vid=short_onecue&correlator="
-      },
-      {
-        "name": "VMAP pre-roll single ad, mid-roll standard pods with 5 ads every 10 seconds for 1:40, post-roll single ad",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpremidpostlongpod&cmsid=496&vid=short_tencue&correlator="
-      }
-    ]
-  }
-]
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java b/demo/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java
deleted file mode 100644
index b5db4c018d..0000000000
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * Copyright (C) 2016 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.demo;
-
-import android.app.Application;
-import com.google.android.exoplayer2.upstream.DataSource;
-import com.google.android.exoplayer2.upstream.DefaultBandwidthMeter;
-import com.google.android.exoplayer2.upstream.DefaultDataSourceFactory;
-import com.google.android.exoplayer2.upstream.DefaultHttpDataSourceFactory;
-import com.google.android.exoplayer2.upstream.HttpDataSource;
-import com.google.android.exoplayer2.util.Util;
-
-/**
- * Placeholder application to facilitate overriding Application methods for debugging and testing.
- */
-public class DemoApplication extends Application {
-
-  protected String userAgent;
-
-  @Override
-  public void onCreate() {
-    super.onCreate();
-    userAgent = Util.getUserAgent(this, "ExoPlayerDemo");
-  }
-
-  public DataSource.Factory buildDataSourceFactory(DefaultBandwidthMeter bandwidthMeter) {
-    return new DefaultDataSourceFactory(this, bandwidthMeter,
-        buildHttpDataSourceFactory(bandwidthMeter));
-  }
-
-  public HttpDataSource.Factory buildHttpDataSourceFactory(DefaultBandwidthMeter bandwidthMeter) {
-    return new DefaultHttpDataSourceFactory(userAgent, bandwidthMeter);
-  }
-
-  public boolean useExtensionRenderers() {
-    return BuildConfig.FLAVOR.equals("withExtensions");
-  }
-
-}
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/DemoUtil.java b/demo/src/main/java/com/google/android/exoplayer2/demo/DemoUtil.java
deleted file mode 100644
index f9e9c34158..0000000000
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/DemoUtil.java
+++ /dev/null
@@ -1,86 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.demo;
-
-import android.text.TextUtils;
-import com.google.android.exoplayer2.Format;
-import com.google.android.exoplayer2.util.MimeTypes;
-import java.util.Locale;
-
-/**
- * Utility methods for demo application.
- */
-/*package*/ final class DemoUtil {
-
-  /**
-   * Builds a track name for display.
-   *
-   * @param format {@link Format} of the track.
-   * @return a generated name specific to the track.
-   */
-  public static String buildTrackName(Format format) {
-    String trackName;
-    if (MimeTypes.isVideo(format.sampleMimeType)) {
-      trackName = joinWithSeparator(joinWithSeparator(joinWithSeparator(
-          buildResolutionString(format), buildBitrateString(format)), buildTrackIdString(format)),
-          buildSampleMimeTypeString(format));
-    } else if (MimeTypes.isAudio(format.sampleMimeType)) {
-      trackName = joinWithSeparator(joinWithSeparator(joinWithSeparator(joinWithSeparator(
-          buildLanguageString(format), buildAudioPropertyString(format)),
-          buildBitrateString(format)), buildTrackIdString(format)),
-          buildSampleMimeTypeString(format));
-    } else {
-      trackName = joinWithSeparator(joinWithSeparator(joinWithSeparator(buildLanguageString(format),
-          buildBitrateString(format)), buildTrackIdString(format)),
-          buildSampleMimeTypeString(format));
-    }
-    return trackName.length() == 0 ? "unknown" : trackName;
-  }
-
-  private static String buildResolutionString(Format format) {
-    return format.width == Format.NO_VALUE || format.height == Format.NO_VALUE
-        ? "" : format.width + "x" + format.height;
-  }
-
-  private static String buildAudioPropertyString(Format format) {
-    return format.channelCount == Format.NO_VALUE || format.sampleRate == Format.NO_VALUE
-        ? "" : format.channelCount + "ch, " + format.sampleRate + "Hz";
-  }
-
-  private static String buildLanguageString(Format format) {
-    return TextUtils.isEmpty(format.language) || "und".equals(format.language) ? ""
-        : format.language;
-  }
-
-  private static String buildBitrateString(Format format) {
-    return format.bitrate == Format.NO_VALUE ? ""
-        : String.format(Locale.US, "%.2fMbit", format.bitrate / 1000000f);
-  }
-
-  private static String joinWithSeparator(String first, String second) {
-    return first.length() == 0 ? second : (second.length() == 0 ? first : first + ", " + second);
-  }
-
-  private static String buildTrackIdString(Format format) {
-    return format.id == null ? "" : ("id:" + format.id);
-  }
-
-  private static String buildSampleMimeTypeString(Format format) {
-    return format.sampleMimeType == null ? "" : format.sampleMimeType;
-  }
-
-  private DemoUtil() {}
-}
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/EventLogger.java b/demo/src/main/java/com/google/android/exoplayer2/demo/EventLogger.java
deleted file mode 100644
index 2ea4b5b7cf..0000000000
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/EventLogger.java
+++ /dev/null
@@ -1,483 +0,0 @@
-/*
- * Copyright (C) 2016 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.demo;
-
-import android.os.SystemClock;
-import android.util.Log;
-import android.view.Surface;
-import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.ExoPlaybackException;
-import com.google.android.exoplayer2.Format;
-import com.google.android.exoplayer2.PlaybackParameters;
-import com.google.android.exoplayer2.Player;
-import com.google.android.exoplayer2.RendererCapabilities;
-import com.google.android.exoplayer2.Timeline;
-import com.google.android.exoplayer2.audio.AudioRendererEventListener;
-import com.google.android.exoplayer2.decoder.DecoderCounters;
-import com.google.android.exoplayer2.drm.DefaultDrmSessionManager;
-import com.google.android.exoplayer2.metadata.Metadata;
-import com.google.android.exoplayer2.metadata.MetadataRenderer;
-import com.google.android.exoplayer2.metadata.emsg.EventMessage;
-import com.google.android.exoplayer2.metadata.id3.ApicFrame;
-import com.google.android.exoplayer2.metadata.id3.CommentFrame;
-import com.google.android.exoplayer2.metadata.id3.GeobFrame;
-import com.google.android.exoplayer2.metadata.id3.Id3Frame;
-import com.google.android.exoplayer2.metadata.id3.PrivFrame;
-import com.google.android.exoplayer2.metadata.id3.TextInformationFrame;
-import com.google.android.exoplayer2.metadata.id3.UrlLinkFrame;
-import com.google.android.exoplayer2.source.AdaptiveMediaSourceEventListener;
-import com.google.android.exoplayer2.source.ExtractorMediaSource;
-import com.google.android.exoplayer2.source.TrackGroup;
-import com.google.android.exoplayer2.source.TrackGroupArray;
-import com.google.android.exoplayer2.trackselection.MappingTrackSelector;
-import com.google.android.exoplayer2.trackselection.MappingTrackSelector.MappedTrackInfo;
-import com.google.android.exoplayer2.trackselection.TrackSelection;
-import com.google.android.exoplayer2.trackselection.TrackSelectionArray;
-import com.google.android.exoplayer2.upstream.DataSpec;
-import com.google.android.exoplayer2.video.VideoRendererEventListener;
-import java.io.IOException;
-import java.text.NumberFormat;
-import java.util.Locale;
-
-/**
- * Logs player events using {@link Log}.
- */
-/* package */ final class EventLogger implements Player.EventListener, AudioRendererEventListener,
-    VideoRendererEventListener, AdaptiveMediaSourceEventListener,
-    ExtractorMediaSource.EventListener, DefaultDrmSessionManager.EventListener,
-    MetadataRenderer.Output {
-
-  private static final String TAG = "EventLogger";
-  private static final int MAX_TIMELINE_ITEM_LINES = 3;
-  private static final NumberFormat TIME_FORMAT;
-  static {
-    TIME_FORMAT = NumberFormat.getInstance(Locale.US);
-    TIME_FORMAT.setMinimumFractionDigits(2);
-    TIME_FORMAT.setMaximumFractionDigits(2);
-    TIME_FORMAT.setGroupingUsed(false);
-  }
-
-  private final MappingTrackSelector trackSelector;
-  private final Timeline.Window window;
-  private final Timeline.Period period;
-  private final long startTimeMs;
-
-  public EventLogger(MappingTrackSelector trackSelector) {
-    this.trackSelector = trackSelector;
-    window = new Timeline.Window();
-    period = new Timeline.Period();
-    startTimeMs = SystemClock.elapsedRealtime();
-  }
-
-  // Player.EventListener
-
-  @Override
-  public void onLoadingChanged(boolean isLoading) {
-    Log.d(TAG, "loading [" + isLoading + "]");
-  }
-
-  @Override
-  public void onPlayerStateChanged(boolean playWhenReady, int state) {
-    Log.d(TAG, "state [" + getSessionTimeString() + ", " + playWhenReady + ", "
-        + getStateString(state) + "]");
-  }
-
-  @Override
-  public void onRepeatModeChanged(@Player.RepeatMode int repeatMode) {
-    Log.d(TAG, "repeatMode [" + getRepeatModeString(repeatMode) + "]");
-  }
-
-  @Override
-  public void onPositionDiscontinuity() {
-    Log.d(TAG, "positionDiscontinuity");
-  }
-
-  @Override
-  public void onPlaybackParametersChanged(PlaybackParameters playbackParameters) {
-    Log.d(TAG, "playbackParameters " + String.format(
-        "[speed=%.2f, pitch=%.2f]", playbackParameters.speed, playbackParameters.pitch));
-  }
-
-  @Override
-  public void onTimelineChanged(Timeline timeline, Object manifest) {
-    int periodCount = timeline.getPeriodCount();
-    int windowCount = timeline.getWindowCount();
-    Log.d(TAG, "sourceInfo [periodCount=" + periodCount + ", windowCount=" + windowCount);
-    for (int i = 0; i < Math.min(periodCount, MAX_TIMELINE_ITEM_LINES); i++) {
-      timeline.getPeriod(i, period);
-      Log.d(TAG, "  " +  "period [" + getTimeString(period.getDurationMs()) + "]");
-    }
-    if (periodCount > MAX_TIMELINE_ITEM_LINES) {
-      Log.d(TAG, "  ...");
-    }
-    for (int i = 0; i < Math.min(windowCount, MAX_TIMELINE_ITEM_LINES); i++) {
-      timeline.getWindow(i, window);
-      Log.d(TAG, "  " +  "window [" + getTimeString(window.getDurationMs()) + ", "
-          + window.isSeekable + ", " + window.isDynamic + "]");
-    }
-    if (windowCount > MAX_TIMELINE_ITEM_LINES) {
-      Log.d(TAG, "  ...");
-    }
-    Log.d(TAG, "]");
-  }
-
-  @Override
-  public void onPlayerError(ExoPlaybackException e) {
-    Log.e(TAG, "playerFailed [" + getSessionTimeString() + "]", e);
-  }
-
-  @Override
-  public void onTracksChanged(TrackGroupArray ignored, TrackSelectionArray trackSelections) {
-    MappedTrackInfo mappedTrackInfo = trackSelector.getCurrentMappedTrackInfo();
-    if (mappedTrackInfo == null) {
-      Log.d(TAG, "Tracks []");
-      return;
-    }
-    Log.d(TAG, "Tracks [");
-    // Log tracks associated to renderers.
-    for (int rendererIndex = 0; rendererIndex < mappedTrackInfo.length; rendererIndex++) {
-      TrackGroupArray rendererTrackGroups = mappedTrackInfo.getTrackGroups(rendererIndex);
-      TrackSelection trackSelection = trackSelections.get(rendererIndex);
-      if (rendererTrackGroups.length > 0) {
-        Log.d(TAG, "  Renderer:" + rendererIndex + " [");
-        for (int groupIndex = 0; groupIndex < rendererTrackGroups.length; groupIndex++) {
-          TrackGroup trackGroup = rendererTrackGroups.get(groupIndex);
-          String adaptiveSupport = getAdaptiveSupportString(trackGroup.length,
-              mappedTrackInfo.getAdaptiveSupport(rendererIndex, groupIndex, false));
-          Log.d(TAG, "    Group:" + groupIndex + ", adaptive_supported=" + adaptiveSupport + " [");
-          for (int trackIndex = 0; trackIndex < trackGroup.length; trackIndex++) {
-            String status = getTrackStatusString(trackSelection, trackGroup, trackIndex);
-            String formatSupport = getFormatSupportString(
-                mappedTrackInfo.getTrackFormatSupport(rendererIndex, groupIndex, trackIndex));
-            Log.d(TAG, "      " + status + " Track:" + trackIndex + ", "
-                + Format.toLogString(trackGroup.getFormat(trackIndex))
-                + ", supported=" + formatSupport);
-          }
-          Log.d(TAG, "    ]");
-        }
-        // Log metadata for at most one of the tracks selected for the renderer.
-        if (trackSelection != null) {
-          for (int selectionIndex = 0; selectionIndex < trackSelection.length(); selectionIndex++) {
-            Metadata metadata = trackSelection.getFormat(selectionIndex).metadata;
-            if (metadata != null) {
-              Log.d(TAG, "    Metadata [");
-              printMetadata(metadata, "      ");
-              Log.d(TAG, "    ]");
-              break;
-            }
-          }
-        }
-        Log.d(TAG, "  ]");
-      }
-    }
-    // Log tracks not associated with a renderer.
-    TrackGroupArray unassociatedTrackGroups = mappedTrackInfo.getUnassociatedTrackGroups();
-    if (unassociatedTrackGroups.length > 0) {
-      Log.d(TAG, "  Renderer:None [");
-      for (int groupIndex = 0; groupIndex < unassociatedTrackGroups.length; groupIndex++) {
-        Log.d(TAG, "    Group:" + groupIndex + " [");
-        TrackGroup trackGroup = unassociatedTrackGroups.get(groupIndex);
-        for (int trackIndex = 0; trackIndex < trackGroup.length; trackIndex++) {
-          String status = getTrackStatusString(false);
-          String formatSupport = getFormatSupportString(
-              RendererCapabilities.FORMAT_UNSUPPORTED_TYPE);
-          Log.d(TAG, "      " + status + " Track:" + trackIndex + ", "
-              + Format.toLogString(trackGroup.getFormat(trackIndex))
-              + ", supported=" + formatSupport);
-        }
-        Log.d(TAG, "    ]");
-      }
-      Log.d(TAG, "  ]");
-    }
-    Log.d(TAG, "]");
-  }
-
-  // MetadataRenderer.Output
-
-  @Override
-  public void onMetadata(Metadata metadata) {
-    Log.d(TAG, "onMetadata [");
-    printMetadata(metadata, "  ");
-    Log.d(TAG, "]");
-  }
-
-  // AudioRendererEventListener
-
-  @Override
-  public void onAudioEnabled(DecoderCounters counters) {
-    Log.d(TAG, "audioEnabled [" + getSessionTimeString() + "]");
-  }
-
-  @Override
-  public void onAudioSessionId(int audioSessionId) {
-    Log.d(TAG, "audioSessionId [" + audioSessionId + "]");
-  }
-
-  @Override
-  public void onAudioDecoderInitialized(String decoderName, long elapsedRealtimeMs,
-      long initializationDurationMs) {
-    Log.d(TAG, "audioDecoderInitialized [" + getSessionTimeString() + ", " + decoderName + "]");
-  }
-
-  @Override
-  public void onAudioInputFormatChanged(Format format) {
-    Log.d(TAG, "audioFormatChanged [" + getSessionTimeString() + ", " + Format.toLogString(format)
-        + "]");
-  }
-
-  @Override
-  public void onAudioDisabled(DecoderCounters counters) {
-    Log.d(TAG, "audioDisabled [" + getSessionTimeString() + "]");
-  }
-
-  @Override
-  public void onAudioTrackUnderrun(int bufferSize, long bufferSizeMs, long elapsedSinceLastFeedMs) {
-    printInternalError("audioTrackUnderrun [" + bufferSize + ", " + bufferSizeMs + ", "
-        + elapsedSinceLastFeedMs + "]", null);
-  }
-
-  // VideoRendererEventListener
-
-  @Override
-  public void onVideoEnabled(DecoderCounters counters) {
-    Log.d(TAG, "videoEnabled [" + getSessionTimeString() + "]");
-  }
-
-  @Override
-  public void onVideoDecoderInitialized(String decoderName, long elapsedRealtimeMs,
-      long initializationDurationMs) {
-    Log.d(TAG, "videoDecoderInitialized [" + getSessionTimeString() + ", " + decoderName + "]");
-  }
-
-  @Override
-  public void onVideoInputFormatChanged(Format format) {
-    Log.d(TAG, "videoFormatChanged [" + getSessionTimeString() + ", " + Format.toLogString(format)
-        + "]");
-  }
-
-  @Override
-  public void onVideoDisabled(DecoderCounters counters) {
-    Log.d(TAG, "videoDisabled [" + getSessionTimeString() + "]");
-  }
-
-  @Override
-  public void onDroppedFrames(int count, long elapsed) {
-    Log.d(TAG, "droppedFrames [" + getSessionTimeString() + ", " + count + "]");
-  }
-
-  @Override
-  public void onVideoSizeChanged(int width, int height, int unappliedRotationDegrees,
-      float pixelWidthHeightRatio) {
-    Log.d(TAG, "videoSizeChanged [" + width + ", " + height + "]");
-  }
-
-  @Override
-  public void onRenderedFirstFrame(Surface surface) {
-    Log.d(TAG, "renderedFirstFrame [" + surface + "]");
-  }
-
-  // DefaultDrmSessionManager.EventListener
-
-  @Override
-  public void onDrmSessionManagerError(Exception e) {
-    printInternalError("drmSessionManagerError", e);
-  }
-
-  @Override
-  public void onDrmKeysRestored() {
-    Log.d(TAG, "drmKeysRestored [" + getSessionTimeString() + "]");
-  }
-
-  @Override
-  public void onDrmKeysRemoved() {
-    Log.d(TAG, "drmKeysRemoved [" + getSessionTimeString() + "]");
-  }
-
-  @Override
-  public void onDrmKeysLoaded() {
-    Log.d(TAG, "drmKeysLoaded [" + getSessionTimeString() + "]");
-  }
-
-  // ExtractorMediaSource.EventListener
-
-  @Override
-  public void onLoadError(IOException error) {
-    printInternalError("loadError", error);
-  }
-
-  // AdaptiveMediaSourceEventListener
-
-  @Override
-  public void onLoadStarted(DataSpec dataSpec, int dataType, int trackType, Format trackFormat,
-      int trackSelectionReason, Object trackSelectionData, long mediaStartTimeMs,
-      long mediaEndTimeMs, long elapsedRealtimeMs) {
-    // Do nothing.
-  }
-
-  @Override
-  public void onLoadError(DataSpec dataSpec, int dataType, int trackType, Format trackFormat,
-      int trackSelectionReason, Object trackSelectionData, long mediaStartTimeMs,
-      long mediaEndTimeMs, long elapsedRealtimeMs, long loadDurationMs, long bytesLoaded,
-      IOException error, boolean wasCanceled) {
-    printInternalError("loadError", error);
-  }
-
-  @Override
-  public void onLoadCanceled(DataSpec dataSpec, int dataType, int trackType, Format trackFormat,
-      int trackSelectionReason, Object trackSelectionData, long mediaStartTimeMs,
-      long mediaEndTimeMs, long elapsedRealtimeMs, long loadDurationMs, long bytesLoaded) {
-    // Do nothing.
-  }
-
-  @Override
-  public void onLoadCompleted(DataSpec dataSpec, int dataType, int trackType, Format trackFormat,
-      int trackSelectionReason, Object trackSelectionData, long mediaStartTimeMs,
-      long mediaEndTimeMs, long elapsedRealtimeMs, long loadDurationMs, long bytesLoaded) {
-    // Do nothing.
-  }
-
-  @Override
-  public void onUpstreamDiscarded(int trackType, long mediaStartTimeMs, long mediaEndTimeMs) {
-    // Do nothing.
-  }
-
-  @Override
-  public void onDownstreamFormatChanged(int trackType, Format trackFormat, int trackSelectionReason,
-      Object trackSelectionData, long mediaTimeMs) {
-    // Do nothing.
-  }
-
-  // Internal methods
-
-  private void printInternalError(String type, Exception e) {
-    Log.e(TAG, "internalError [" + getSessionTimeString() + ", " + type + "]", e);
-  }
-
-  private void printMetadata(Metadata metadata, String prefix) {
-    for (int i = 0; i < metadata.length(); i++) {
-      Metadata.Entry entry = metadata.get(i);
-      if (entry instanceof TextInformationFrame) {
-        TextInformationFrame textInformationFrame = (TextInformationFrame) entry;
-        Log.d(TAG, prefix + String.format("%s: value=%s", textInformationFrame.id,
-            textInformationFrame.value));
-      } else if (entry instanceof UrlLinkFrame) {
-        UrlLinkFrame urlLinkFrame = (UrlLinkFrame) entry;
-        Log.d(TAG, prefix + String.format("%s: url=%s", urlLinkFrame.id, urlLinkFrame.url));
-      } else if (entry instanceof PrivFrame) {
-        PrivFrame privFrame = (PrivFrame) entry;
-        Log.d(TAG, prefix + String.format("%s: owner=%s", privFrame.id, privFrame.owner));
-      } else if (entry instanceof GeobFrame) {
-        GeobFrame geobFrame = (GeobFrame) entry;
-        Log.d(TAG, prefix + String.format("%s: mimeType=%s, filename=%s, description=%s",
-            geobFrame.id, geobFrame.mimeType, geobFrame.filename, geobFrame.description));
-      } else if (entry instanceof ApicFrame) {
-        ApicFrame apicFrame = (ApicFrame) entry;
-        Log.d(TAG, prefix + String.format("%s: mimeType=%s, description=%s",
-            apicFrame.id, apicFrame.mimeType, apicFrame.description));
-      } else if (entry instanceof CommentFrame) {
-        CommentFrame commentFrame = (CommentFrame) entry;
-        Log.d(TAG, prefix + String.format("%s: language=%s, description=%s", commentFrame.id,
-            commentFrame.language, commentFrame.description));
-      } else if (entry instanceof Id3Frame) {
-        Id3Frame id3Frame = (Id3Frame) entry;
-        Log.d(TAG, prefix + String.format("%s", id3Frame.id));
-      } else if (entry instanceof EventMessage) {
-        EventMessage eventMessage = (EventMessage) entry;
-        Log.d(TAG, prefix + String.format("EMSG: scheme=%s, id=%d, value=%s",
-            eventMessage.schemeIdUri, eventMessage.id, eventMessage.value));
-      }
-    }
-  }
-
-  private String getSessionTimeString() {
-    return getTimeString(SystemClock.elapsedRealtime() - startTimeMs);
-  }
-
-  private static String getTimeString(long timeMs) {
-    return timeMs == C.TIME_UNSET ? "?" : TIME_FORMAT.format((timeMs) / 1000f);
-  }
-
-  private static String getStateString(int state) {
-    switch (state) {
-      case Player.STATE_BUFFERING:
-        return "B";
-      case Player.STATE_ENDED:
-        return "E";
-      case Player.STATE_IDLE:
-        return "I";
-      case Player.STATE_READY:
-        return "R";
-      default:
-        return "?";
-    }
-  }
-
-  private static String getFormatSupportString(int formatSupport) {
-    switch (formatSupport) {
-      case RendererCapabilities.FORMAT_HANDLED:
-        return "YES";
-      case RendererCapabilities.FORMAT_EXCEEDS_CAPABILITIES:
-        return "NO_EXCEEDS_CAPABILITIES";
-      case RendererCapabilities.FORMAT_UNSUPPORTED_DRM:
-        return "NO_UNSUPPORTED_DRM";
-      case RendererCapabilities.FORMAT_UNSUPPORTED_SUBTYPE:
-        return "NO_UNSUPPORTED_TYPE";
-      case RendererCapabilities.FORMAT_UNSUPPORTED_TYPE:
-        return "NO";
-      default:
-        return "?";
-    }
-  }
-
-  private static String getAdaptiveSupportString(int trackCount, int adaptiveSupport) {
-    if (trackCount < 2) {
-      return "N/A";
-    }
-    switch (adaptiveSupport) {
-      case RendererCapabilities.ADAPTIVE_SEAMLESS:
-        return "YES";
-      case RendererCapabilities.ADAPTIVE_NOT_SEAMLESS:
-        return "YES_NOT_SEAMLESS";
-      case RendererCapabilities.ADAPTIVE_NOT_SUPPORTED:
-        return "NO";
-      default:
-        return "?";
-    }
-  }
-
-  private static String getTrackStatusString(TrackSelection selection, TrackGroup group,
-      int trackIndex) {
-    return getTrackStatusString(selection != null && selection.getTrackGroup() == group
-        && selection.indexOf(trackIndex) != C.INDEX_UNSET);
-  }
-
-  private static String getTrackStatusString(boolean enabled) {
-    return enabled ? "[X]" : "[ ]";
-  }
-
-  private static String getRepeatModeString(@Player.RepeatMode int repeatMode) {
-    switch (repeatMode) {
-      case Player.REPEAT_MODE_OFF:
-        return "OFF";
-      case Player.REPEAT_MODE_ONE:
-        return "ONE";
-      case Player.REPEAT_MODE_ALL:
-        return "ALL";
-      default:
-        return "?";
-    }
-  }
-}
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java b/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
deleted file mode 100644
index 6416cd5aa2..0000000000
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
+++ /dev/null
@@ -1,652 +0,0 @@
-/*
- * Copyright (C) 2016 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.demo;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.net.Uri;
-import android.os.Bundle;
-import android.os.Handler;
-import android.support.annotation.NonNull;
-import android.text.TextUtils;
-import android.view.KeyEvent;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.view.ViewGroup;
-import android.widget.Button;
-import android.widget.FrameLayout;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-import android.widget.Toast;
-import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.DefaultRenderersFactory;
-import com.google.android.exoplayer2.ExoPlaybackException;
-import com.google.android.exoplayer2.ExoPlayerFactory;
-import com.google.android.exoplayer2.PlaybackParameters;
-import com.google.android.exoplayer2.Player;
-import com.google.android.exoplayer2.Player.EventListener;
-import com.google.android.exoplayer2.SimpleExoPlayer;
-import com.google.android.exoplayer2.Timeline;
-import com.google.android.exoplayer2.drm.DefaultDrmSessionManager;
-import com.google.android.exoplayer2.drm.DrmSessionManager;
-import com.google.android.exoplayer2.drm.FrameworkMediaCrypto;
-import com.google.android.exoplayer2.drm.FrameworkMediaDrm;
-import com.google.android.exoplayer2.drm.HttpMediaDrmCallback;
-import com.google.android.exoplayer2.drm.UnsupportedDrmException;
-import com.google.android.exoplayer2.extractor.DefaultExtractorsFactory;
-import com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.DecoderInitializationException;
-import com.google.android.exoplayer2.mediacodec.MediaCodecUtil.DecoderQueryException;
-import com.google.android.exoplayer2.source.BehindLiveWindowException;
-import com.google.android.exoplayer2.source.ConcatenatingMediaSource;
-import com.google.android.exoplayer2.source.ExtractorMediaSource;
-import com.google.android.exoplayer2.source.MediaSource;
-import com.google.android.exoplayer2.source.TrackGroupArray;
-import com.google.android.exoplayer2.source.dash.DashMediaSource;
-import com.google.android.exoplayer2.source.dash.DefaultDashChunkSource;
-import com.google.android.exoplayer2.source.hls.HlsMediaSource;
-import com.google.android.exoplayer2.source.smoothstreaming.DefaultSsChunkSource;
-import com.google.android.exoplayer2.source.smoothstreaming.SsMediaSource;
-import com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection;
-import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;
-import com.google.android.exoplayer2.trackselection.MappingTrackSelector.MappedTrackInfo;
-import com.google.android.exoplayer2.trackselection.TrackSelection;
-import com.google.android.exoplayer2.trackselection.TrackSelectionArray;
-import com.google.android.exoplayer2.ui.DebugTextViewHelper;
-import com.google.android.exoplayer2.ui.PlaybackControlView;
-import com.google.android.exoplayer2.ui.SimpleExoPlayerView;
-import com.google.android.exoplayer2.upstream.DataSource;
-import com.google.android.exoplayer2.upstream.DefaultBandwidthMeter;
-import com.google.android.exoplayer2.upstream.HttpDataSource;
-import com.google.android.exoplayer2.util.Util;
-import java.lang.reflect.Constructor;
-import java.lang.reflect.Method;
-import java.net.CookieHandler;
-import java.net.CookieManager;
-import java.net.CookiePolicy;
-import java.util.UUID;
-
-/**
- * An activity that plays media using {@link SimpleExoPlayer}.
- */
-public class PlayerActivity extends Activity implements OnClickListener, EventListener,
-    PlaybackControlView.VisibilityListener {
-
-  public static final String DRM_SCHEME_UUID_EXTRA = "drm_scheme_uuid";
-  public static final String DRM_LICENSE_URL = "drm_license_url";
-  public static final String DRM_KEY_REQUEST_PROPERTIES = "drm_key_request_properties";
-  public static final String PREFER_EXTENSION_DECODERS = "prefer_extension_decoders";
-
-  public static final String ACTION_VIEW = "com.google.android.exoplayer.demo.action.VIEW";
-  public static final String EXTENSION_EXTRA = "extension";
-
-  public static final String ACTION_VIEW_LIST =
-      "com.google.android.exoplayer.demo.action.VIEW_LIST";
-  public static final String URI_LIST_EXTRA = "uri_list";
-  public static final String EXTENSION_LIST_EXTRA = "extension_list";
-  public static final String AD_TAG_URI_EXTRA = "ad_tag_uri";
-
-  private static final DefaultBandwidthMeter BANDWIDTH_METER = new DefaultBandwidthMeter();
-  private static final CookieManager DEFAULT_COOKIE_MANAGER;
-  static {
-    DEFAULT_COOKIE_MANAGER = new CookieManager();
-    DEFAULT_COOKIE_MANAGER.setCookiePolicy(CookiePolicy.ACCEPT_ORIGINAL_SERVER);
-  }
-
-  private Handler mainHandler;
-  private EventLogger eventLogger;
-  private SimpleExoPlayerView simpleExoPlayerView;
-  private LinearLayout debugRootView;
-  private TextView debugTextView;
-  private Button retryButton;
-
-  private DataSource.Factory mediaDataSourceFactory;
-  private SimpleExoPlayer player;
-  private DefaultTrackSelector trackSelector;
-  private TrackSelectionHelper trackSelectionHelper;
-  private DebugTextViewHelper debugViewHelper;
-  private boolean inErrorState;
-  private TrackGroupArray lastSeenTrackGroupArray;
-
-  private boolean shouldAutoPlay;
-  private int resumeWindow;
-  private long resumePosition;
-
-  // Fields used only for ad playback. The ads loader is loaded via reflection.
-
-  private Object imaAdsLoader; // com.google.android.exoplayer2.ext.ima.ImaAdsLoader
-  private Uri loadedAdTagUri;
-  private ViewGroup adOverlayViewGroup;
-
-  // Activity lifecycle
-
-  @Override
-  public void onCreate(Bundle savedInstanceState) {
-    super.onCreate(savedInstanceState);
-    shouldAutoPlay = true;
-    clearResumePosition();
-    mediaDataSourceFactory = buildDataSourceFactory(true);
-    mainHandler = new Handler();
-    if (CookieHandler.getDefault() != DEFAULT_COOKIE_MANAGER) {
-      CookieHandler.setDefault(DEFAULT_COOKIE_MANAGER);
-    }
-
-    setContentView(R.layout.player_activity);
-    View rootView = findViewById(R.id.root);
-    rootView.setOnClickListener(this);
-    debugRootView = (LinearLayout) findViewById(R.id.controls_root);
-    debugTextView = (TextView) findViewById(R.id.debug_text_view);
-    retryButton = (Button) findViewById(R.id.retry_button);
-    retryButton.setOnClickListener(this);
-
-    simpleExoPlayerView = (SimpleExoPlayerView) findViewById(R.id.player_view);
-    simpleExoPlayerView.setControllerVisibilityListener(this);
-    simpleExoPlayerView.requestFocus();
-  }
-
-  @Override
-  public void onNewIntent(Intent intent) {
-    releasePlayer();
-    shouldAutoPlay = true;
-    clearResumePosition();
-    setIntent(intent);
-  }
-
-  @Override
-  public void onStart() {
-    super.onStart();
-    if (Util.SDK_INT > 23) {
-      initializePlayer();
-    }
-  }
-
-  @Override
-  public void onResume() {
-    super.onResume();
-    if ((Util.SDK_INT <= 23 || player == null)) {
-      initializePlayer();
-    }
-  }
-
-  @Override
-  public void onPause() {
-    super.onPause();
-    if (Util.SDK_INT <= 23) {
-      releasePlayer();
-    }
-  }
-
-  @Override
-  public void onStop() {
-    super.onStop();
-    if (Util.SDK_INT > 23) {
-      releasePlayer();
-    }
-  }
-
-  @Override
-  public void onDestroy() {
-    super.onDestroy();
-    releaseAdsLoader();
-  }
-
-  @Override
-  public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
-      @NonNull int[] grantResults) {
-    if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
-      initializePlayer();
-    } else {
-      showToast(R.string.storage_permission_denied);
-      finish();
-    }
-  }
-
-  // Activity input
-
-  @Override
-  public boolean dispatchKeyEvent(KeyEvent event) {
-    // If the event was not handled then see if the player view can handle it.
-    return super.dispatchKeyEvent(event) || simpleExoPlayerView.dispatchKeyEvent(event);
-  }
-
-  // OnClickListener methods
-
-  @Override
-  public void onClick(View view) {
-    if (view == retryButton) {
-      initializePlayer();
-    } else if (view.getParent() == debugRootView) {
-      MappedTrackInfo mappedTrackInfo = trackSelector.getCurrentMappedTrackInfo();
-      if (mappedTrackInfo != null) {
-        trackSelectionHelper.showSelectionDialog(this, ((Button) view).getText(),
-            trackSelector.getCurrentMappedTrackInfo(), (int) view.getTag());
-      }
-    }
-  }
-
-  // PlaybackControlView.VisibilityListener implementation
-
-  @Override
-  public void onVisibilityChange(int visibility) {
-    debugRootView.setVisibility(visibility);
-  }
-
-  // Internal methods
-
-  private void initializePlayer() {
-    Intent intent = getIntent();
-    boolean needNewPlayer = player == null;
-    if (needNewPlayer) {
-      TrackSelection.Factory adaptiveTrackSelectionFactory =
-          new AdaptiveTrackSelection.Factory(BANDWIDTH_METER);
-      trackSelector = new DefaultTrackSelector(adaptiveTrackSelectionFactory);
-      trackSelectionHelper = new TrackSelectionHelper(trackSelector, adaptiveTrackSelectionFactory);
-      lastSeenTrackGroupArray = null;
-      eventLogger = new EventLogger(trackSelector);
-
-      UUID drmSchemeUuid = intent.hasExtra(DRM_SCHEME_UUID_EXTRA)
-          ? UUID.fromString(intent.getStringExtra(DRM_SCHEME_UUID_EXTRA)) : null;
-      DrmSessionManager<FrameworkMediaCrypto> drmSessionManager = null;
-      if (drmSchemeUuid != null) {
-        String drmLicenseUrl = intent.getStringExtra(DRM_LICENSE_URL);
-        String[] keyRequestPropertiesArray = intent.getStringArrayExtra(DRM_KEY_REQUEST_PROPERTIES);
-        int errorStringId = R.string.error_drm_unknown;
-        if (Util.SDK_INT < 18) {
-          errorStringId = R.string.error_drm_not_supported;
-        } else {
-          try {
-            drmSessionManager = buildDrmSessionManagerV18(drmSchemeUuid, drmLicenseUrl,
-                keyRequestPropertiesArray);
-          } catch (UnsupportedDrmException e) {
-            errorStringId = e.reason == UnsupportedDrmException.REASON_UNSUPPORTED_SCHEME
-                ? R.string.error_drm_unsupported_scheme : R.string.error_drm_unknown;
-          }
-        }
-        if (drmSessionManager == null) {
-          showToast(errorStringId);
-          return;
-        }
-      }
-
-      boolean preferExtensionDecoders = intent.getBooleanExtra(PREFER_EXTENSION_DECODERS, false);
-      @DefaultRenderersFactory.ExtensionRendererMode int extensionRendererMode =
-          ((DemoApplication) getApplication()).useExtensionRenderers()
-              ? (preferExtensionDecoders ? DefaultRenderersFactory.EXTENSION_RENDERER_MODE_PREFER
-              : DefaultRenderersFactory.EXTENSION_RENDERER_MODE_ON)
-              : DefaultRenderersFactory.EXTENSION_RENDERER_MODE_OFF;
-      DefaultRenderersFactory renderersFactory = new DefaultRenderersFactory(this,
-          drmSessionManager, extensionRendererMode);
-
-      player = ExoPlayerFactory.newSimpleInstance(renderersFactory, trackSelector);
-      player.addListener(this);
-      player.addListener(eventLogger);
-      player.addMetadataOutput(eventLogger);
-      player.setAudioDebugListener(eventLogger);
-      player.setVideoDebugListener(eventLogger);
-
-      simpleExoPlayerView.setPlayer(player);
-      player.setPlayWhenReady(shouldAutoPlay);
-      debugViewHelper = new DebugTextViewHelper(player, debugTextView);
-      debugViewHelper.start();
-    }
-    String action = intent.getAction();
-    Uri[] uris;
-    String[] extensions;
-    if (ACTION_VIEW.equals(action)) {
-      uris = new Uri[]{intent.getData()};
-      extensions = new String[]{intent.getStringExtra(EXTENSION_EXTRA)};
-    } else if (ACTION_VIEW_LIST.equals(action)) {
-      String[] uriStrings = intent.getStringArrayExtra(URI_LIST_EXTRA);
-      uris = new Uri[uriStrings.length];
-      for (int i = 0; i < uriStrings.length; i++) {
-        uris[i] = Uri.parse(uriStrings[i]);
-      }
-      extensions = intent.getStringArrayExtra(EXTENSION_LIST_EXTRA);
-      if (extensions == null) {
-        extensions = new String[uriStrings.length];
-      }
-    } else {
-      showToast(getString(R.string.unexpected_intent_action, action));
-      return;
-    }
-    if (Util.maybeRequestReadExternalStoragePermission(this, uris)) {
-      // The player will be reinitialized if the permission is granted.
-      return;
-    }
-    MediaSource[] mediaSources = new MediaSource[uris.length];
-    for (int i = 0; i < uris.length; i++) {
-      mediaSources[i] = buildMediaSource(uris[i], extensions[i]);
-    }
-    MediaSource mediaSource = mediaSources.length == 1 ? mediaSources[0]
-        : new ConcatenatingMediaSource(mediaSources);
-    String adTagUriString = intent.getStringExtra(AD_TAG_URI_EXTRA);
-    if (adTagUriString != null) {
-      Uri adTagUri = Uri.parse(adTagUriString);
-      if (!adTagUri.equals(loadedAdTagUri)) {
-        releaseAdsLoader();
-        loadedAdTagUri = adTagUri;
-      }
-      try {
-        mediaSource = createAdsMediaSource(mediaSource, Uri.parse(adTagUriString));
-      } catch (Exception e) {
-        showToast(R.string.ima_not_loaded);
-      }
-    } else {
-      releaseAdsLoader();
-    }
-    boolean haveResumePosition = resumeWindow != C.INDEX_UNSET;
-    if (haveResumePosition) {
-      player.seekTo(resumeWindow, resumePosition);
-    }
-    player.prepare(mediaSource, !haveResumePosition, false);
-    inErrorState = false;
-    updateButtonVisibilities();
-  }
-
-  private MediaSource buildMediaSource(Uri uri, String overrideExtension) {
-    int type = TextUtils.isEmpty(overrideExtension) ? Util.inferContentType(uri)
-        : Util.inferContentType("." + overrideExtension);
-    switch (type) {
-      case C.TYPE_SS:
-        return new SsMediaSource(uri, buildDataSourceFactory(false),
-            new DefaultSsChunkSource.Factory(mediaDataSourceFactory), mainHandler, eventLogger);
-      case C.TYPE_DASH:
-        return new DashMediaSource(uri, buildDataSourceFactory(false),
-            new DefaultDashChunkSource.Factory(mediaDataSourceFactory), mainHandler, eventLogger);
-      case C.TYPE_HLS:
-        return new HlsMediaSource(uri, mediaDataSourceFactory, mainHandler, eventLogger);
-      case C.TYPE_OTHER:
-        return new ExtractorMediaSource(uri, mediaDataSourceFactory, new DefaultExtractorsFactory(),
-            mainHandler, eventLogger);
-      default: {
-        throw new IllegalStateException("Unsupported type: " + type);
-      }
-    }
-  }
-
-  private DrmSessionManager<FrameworkMediaCrypto> buildDrmSessionManagerV18(UUID uuid,
-      String licenseUrl, String[] keyRequestPropertiesArray) throws UnsupportedDrmException {
-    HttpMediaDrmCallback drmCallback = new HttpMediaDrmCallback(licenseUrl,
-        buildHttpDataSourceFactory(false));
-    if (keyRequestPropertiesArray != null) {
-      for (int i = 0; i < keyRequestPropertiesArray.length - 1; i += 2) {
-        drmCallback.setKeyRequestProperty(keyRequestPropertiesArray[i],
-            keyRequestPropertiesArray[i + 1]);
-      }
-    }
-    return new DefaultDrmSessionManager<>(uuid, FrameworkMediaDrm.newInstance(uuid), drmCallback,
-        null, mainHandler, eventLogger);
-  }
-
-  private void releasePlayer() {
-    if (player != null) {
-      debugViewHelper.stop();
-      debugViewHelper = null;
-      shouldAutoPlay = player.getPlayWhenReady();
-      updateResumePosition();
-      player.release();
-      player = null;
-      trackSelector = null;
-      trackSelectionHelper = null;
-      eventLogger = null;
-    }
-  }
-
-  private void updateResumePosition() {
-    resumeWindow = player.getCurrentWindowIndex();
-    resumePosition = Math.max(0, player.getContentPosition());
-  }
-
-  private void clearResumePosition() {
-    resumeWindow = C.INDEX_UNSET;
-    resumePosition = C.TIME_UNSET;
-  }
-
-  /**
-   * Returns a new DataSource factory.
-   *
-   * @param useBandwidthMeter Whether to set {@link #BANDWIDTH_METER} as a listener to the new
-   *     DataSource factory.
-   * @return A new DataSource factory.
-   */
-  private DataSource.Factory buildDataSourceFactory(boolean useBandwidthMeter) {
-    return ((DemoApplication) getApplication())
-        .buildDataSourceFactory(useBandwidthMeter ? BANDWIDTH_METER : null);
-  }
-
-  /**
-   * Returns a new HttpDataSource factory.
-   *
-   * @param useBandwidthMeter Whether to set {@link #BANDWIDTH_METER} as a listener to the new
-   *     DataSource factory.
-   * @return A new HttpDataSource factory.
-   */
-  private HttpDataSource.Factory buildHttpDataSourceFactory(boolean useBandwidthMeter) {
-    return ((DemoApplication) getApplication())
-        .buildHttpDataSourceFactory(useBandwidthMeter ? BANDWIDTH_METER : null);
-  }
-
-  /**
-   * Returns an ads media source, reusing the ads loader if one exists.
-   *
-   * @throws Exception Thrown if it was not possible to create an ads media source, for example, due
-   *     to a missing dependency.
-   */
-  private MediaSource createAdsMediaSource(MediaSource mediaSource, Uri adTagUri) throws Exception {
-    // Load the extension source using reflection so the demo app doesn't have to depend on it.
-    // The ads loader is reused for multiple playbacks, so that ad playback can resume.
-    Class<?> loaderClass = Class.forName("com.google.android.exoplayer2.ext.ima.ImaAdsLoader");
-    if (imaAdsLoader == null) {
-      imaAdsLoader = loaderClass.getConstructor(Context.class, Uri.class)
-          .newInstance(this, adTagUri);
-      adOverlayViewGroup = new FrameLayout(this);
-      // The demo app has a non-null overlay frame layout.
-      simpleExoPlayerView.getOverlayFrameLayout().addView(adOverlayViewGroup);
-    }
-    Class<?> sourceClass =
-        Class.forName("com.google.android.exoplayer2.ext.ima.ImaAdsMediaSource");
-    Constructor<?> constructor = sourceClass.getConstructor(MediaSource.class,
-        DataSource.Factory.class, loaderClass, ViewGroup.class);
-    return (MediaSource) constructor.newInstance(mediaSource, mediaDataSourceFactory, imaAdsLoader,
-        adOverlayViewGroup);
-  }
-
-  private void releaseAdsLoader() {
-    if (imaAdsLoader != null) {
-      try {
-        Class<?> loaderClass = Class.forName("com.google.android.exoplayer2.ext.ima.ImaAdsLoader");
-        Method releaseMethod = loaderClass.getMethod("release");
-        releaseMethod.invoke(imaAdsLoader);
-      } catch (Exception e) {
-        // Should never happen.
-        throw new IllegalStateException(e);
-      }
-      imaAdsLoader = null;
-      loadedAdTagUri = null;
-      simpleExoPlayerView.getOverlayFrameLayout().removeAllViews();
-    }
-  }
-
-  // Player.EventListener implementation
-
-  @Override
-  public void onLoadingChanged(boolean isLoading) {
-    // Do nothing.
-  }
-
-  @Override
-  public void onPlayerStateChanged(boolean playWhenReady, int playbackState) {
-    if (playbackState == Player.STATE_ENDED) {
-      showControls();
-    }
-    updateButtonVisibilities();
-  }
-
-  @Override
-  public void onRepeatModeChanged(int repeatMode) {
-    // Do nothing.
-  }
-
-  @Override
-  public void onPositionDiscontinuity() {
-    if (inErrorState) {
-      // This will only occur if the user has performed a seek whilst in the error state. Update the
-      // resume position so that if the user then retries, playback will resume from the position to
-      // which they seeked.
-      updateResumePosition();
-    }
-  }
-
-  @Override
-  public void onPlaybackParametersChanged(PlaybackParameters playbackParameters) {
-    // Do nothing.
-  }
-
-  @Override
-  public void onTimelineChanged(Timeline timeline, Object manifest) {
-    // Do nothing.
-  }
-
-  @Override
-  public void onPlayerError(ExoPlaybackException e) {
-    String errorString = null;
-    if (e.type == ExoPlaybackException.TYPE_RENDERER) {
-      Exception cause = e.getRendererException();
-      if (cause instanceof DecoderInitializationException) {
-        // Special case for decoder initialization failures.
-        DecoderInitializationException decoderInitializationException =
-            (DecoderInitializationException) cause;
-        if (decoderInitializationException.decoderName == null) {
-          if (decoderInitializationException.getCause() instanceof DecoderQueryException) {
-            errorString = getString(R.string.error_querying_decoders);
-          } else if (decoderInitializationException.secureDecoderRequired) {
-            errorString = getString(R.string.error_no_secure_decoder,
-                decoderInitializationException.mimeType);
-          } else {
-            errorString = getString(R.string.error_no_decoder,
-                decoderInitializationException.mimeType);
-          }
-        } else {
-          errorString = getString(R.string.error_instantiating_decoder,
-              decoderInitializationException.decoderName);
-        }
-      }
-    }
-    if (errorString != null) {
-      showToast(errorString);
-    }
-    inErrorState = true;
-    if (isBehindLiveWindow(e)) {
-      clearResumePosition();
-      initializePlayer();
-    } else {
-      updateResumePosition();
-      updateButtonVisibilities();
-      showControls();
-    }
-  }
-
-  @Override
-  @SuppressWarnings("ReferenceEquality")
-  public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray trackSelections) {
-    updateButtonVisibilities();
-    if (trackGroups != lastSeenTrackGroupArray) {
-      MappedTrackInfo mappedTrackInfo = trackSelector.getCurrentMappedTrackInfo();
-      if (mappedTrackInfo != null) {
-        if (mappedTrackInfo.getTrackTypeRendererSupport(C.TRACK_TYPE_VIDEO)
-            == MappedTrackInfo.RENDERER_SUPPORT_UNSUPPORTED_TRACKS) {
-          showToast(R.string.error_unsupported_video);
-        }
-        if (mappedTrackInfo.getTrackTypeRendererSupport(C.TRACK_TYPE_AUDIO)
-            == MappedTrackInfo.RENDERER_SUPPORT_UNSUPPORTED_TRACKS) {
-          showToast(R.string.error_unsupported_audio);
-        }
-      }
-      lastSeenTrackGroupArray = trackGroups;
-    }
-  }
-
-  // User controls
-
-  private void updateButtonVisibilities() {
-    debugRootView.removeAllViews();
-
-    retryButton.setVisibility(inErrorState ? View.VISIBLE : View.GONE);
-    debugRootView.addView(retryButton);
-
-    if (player == null) {
-      return;
-    }
-
-    MappedTrackInfo mappedTrackInfo = trackSelector.getCurrentMappedTrackInfo();
-    if (mappedTrackInfo == null) {
-      return;
-    }
-
-    for (int i = 0; i < mappedTrackInfo.length; i++) {
-      TrackGroupArray trackGroups = mappedTrackInfo.getTrackGroups(i);
-      if (trackGroups.length != 0) {
-        Button button = new Button(this);
-        int label;
-        switch (player.getRendererType(i)) {
-          case C.TRACK_TYPE_AUDIO:
-            label = R.string.audio;
-            break;
-          case C.TRACK_TYPE_VIDEO:
-            label = R.string.video;
-            break;
-          case C.TRACK_TYPE_TEXT:
-            label = R.string.text;
-            break;
-          default:
-            continue;
-        }
-        button.setText(label);
-        button.setTag(i);
-        button.setOnClickListener(this);
-        debugRootView.addView(button, debugRootView.getChildCount() - 1);
-      }
-    }
-  }
-
-  private void showControls() {
-    debugRootView.setVisibility(View.VISIBLE);
-  }
-
-  private void showToast(int messageId) {
-    showToast(getString(messageId));
-  }
-
-  private void showToast(String message) {
-    Toast.makeText(getApplicationContext(), message, Toast.LENGTH_LONG).show();
-  }
-
-  private static boolean isBehindLiveWindow(ExoPlaybackException e) {
-    if (e.type != ExoPlaybackException.TYPE_SOURCE) {
-      return false;
-    }
-    Throwable cause = e.getSourceException();
-    while (cause != null) {
-      if (cause instanceof BehindLiveWindowException) {
-        return true;
-      }
-      cause = cause.getCause();
-    }
-    return false;
-  }
-
-}
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java b/demo/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
deleted file mode 100644
index 87b8e92e83..0000000000
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
+++ /dev/null
@@ -1,458 +0,0 @@
-/*
- * Copyright (C) 2016 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.demo;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.res.AssetManager;
-import android.net.Uri;
-import android.os.AsyncTask;
-import android.os.Bundle;
-import android.util.JsonReader;
-import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.BaseExpandableListAdapter;
-import android.widget.ExpandableListView;
-import android.widget.ExpandableListView.OnChildClickListener;
-import android.widget.TextView;
-import android.widget.Toast;
-import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.ParserException;
-import com.google.android.exoplayer2.upstream.DataSource;
-import com.google.android.exoplayer2.upstream.DataSourceInputStream;
-import com.google.android.exoplayer2.upstream.DataSpec;
-import com.google.android.exoplayer2.upstream.DefaultDataSource;
-import com.google.android.exoplayer2.util.Assertions;
-import com.google.android.exoplayer2.util.Util;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import java.util.UUID;
-
-/**
- * An activity for selecting from a list of samples.
- */
-public class SampleChooserActivity extends Activity {
-
-  private static final String TAG = "SampleChooserActivity";
-
-  @Override
-  public void onCreate(Bundle savedInstanceState) {
-    super.onCreate(savedInstanceState);
-    setContentView(R.layout.sample_chooser_activity);
-    Intent intent = getIntent();
-    String dataUri = intent.getDataString();
-    String[] uris;
-    if (dataUri != null) {
-      uris = new String[] {dataUri};
-    } else {
-      ArrayList<String> uriList = new ArrayList<>();
-      AssetManager assetManager = getAssets();
-      try {
-        for (String asset : assetManager.list("")) {
-          if (asset.endsWith(".exolist.json")) {
-            uriList.add("asset:///" + asset);
-          }
-        }
-      } catch (IOException e) {
-        Toast.makeText(getApplicationContext(), R.string.sample_list_load_error, Toast.LENGTH_LONG)
-            .show();
-      }
-      uris = new String[uriList.size()];
-      uriList.toArray(uris);
-      Arrays.sort(uris);
-    }
-    SampleListLoader loaderTask = new SampleListLoader();
-    loaderTask.execute(uris);
-  }
-
-  private void onSampleGroups(final List<SampleGroup> groups, boolean sawError) {
-    if (sawError) {
-      Toast.makeText(getApplicationContext(), R.string.sample_list_load_error, Toast.LENGTH_LONG)
-          .show();
-    }
-    ExpandableListView sampleList = (ExpandableListView) findViewById(R.id.sample_list);
-    sampleList.setAdapter(new SampleAdapter(this, groups));
-    sampleList.setOnChildClickListener(new OnChildClickListener() {
-      @Override
-      public boolean onChildClick(ExpandableListView parent, View view, int groupPosition,
-          int childPosition, long id) {
-        onSampleSelected(groups.get(groupPosition).samples.get(childPosition));
-        return true;
-      }
-    });
-  }
-
-  private void onSampleSelected(Sample sample) {
-    startActivity(sample.buildIntent(this));
-  }
-
-  private final class SampleListLoader extends AsyncTask<String, Void, List<SampleGroup>> {
-
-    private boolean sawError;
-
-    @Override
-    protected List<SampleGroup> doInBackground(String... uris) {
-      List<SampleGroup> result = new ArrayList<>();
-      Context context = getApplicationContext();
-      String userAgent = Util.getUserAgent(context, "ExoPlayerDemo");
-      DataSource dataSource = new DefaultDataSource(context, null, userAgent, false);
-      for (String uri : uris) {
-        DataSpec dataSpec = new DataSpec(Uri.parse(uri));
-        InputStream inputStream = new DataSourceInputStream(dataSource, dataSpec);
-        try {
-          readSampleGroups(new JsonReader(new InputStreamReader(inputStream, "UTF-8")), result);
-        } catch (Exception e) {
-          Log.e(TAG, "Error loading sample list: " + uri, e);
-          sawError = true;
-        } finally {
-          Util.closeQuietly(dataSource);
-        }
-      }
-      return result;
-    }
-
-    @Override
-    protected void onPostExecute(List<SampleGroup> result) {
-      onSampleGroups(result, sawError);
-    }
-
-    private void readSampleGroups(JsonReader reader, List<SampleGroup> groups) throws IOException {
-      reader.beginArray();
-      while (reader.hasNext()) {
-        readSampleGroup(reader, groups);
-      }
-      reader.endArray();
-    }
-
-    private void readSampleGroup(JsonReader reader, List<SampleGroup> groups) throws IOException {
-      String groupName = "";
-      ArrayList<Sample> samples = new ArrayList<>();
-
-      reader.beginObject();
-      while (reader.hasNext()) {
-        String name = reader.nextName();
-        switch (name) {
-          case "name":
-            groupName = reader.nextString();
-            break;
-          case "samples":
-            reader.beginArray();
-            while (reader.hasNext()) {
-              samples.add(readEntry(reader, false));
-            }
-            reader.endArray();
-            break;
-          case "_comment":
-            reader.nextString(); // Ignore.
-            break;
-          default:
-            throw new ParserException("Unsupported name: " + name);
-        }
-      }
-      reader.endObject();
-
-      SampleGroup group = getGroup(groupName, groups);
-      group.samples.addAll(samples);
-    }
-
-    private Sample readEntry(JsonReader reader, boolean insidePlaylist) throws IOException {
-      String sampleName = null;
-      String uri = null;
-      String extension = null;
-      UUID drmUuid = null;
-      String drmLicenseUrl = null;
-      String[] drmKeyRequestProperties = null;
-      boolean preferExtensionDecoders = false;
-      ArrayList<UriSample> playlistSamples = null;
-      String adTagUri = null;
-
-      reader.beginObject();
-      while (reader.hasNext()) {
-        String name = reader.nextName();
-        switch (name) {
-          case "name":
-            sampleName = reader.nextString();
-            break;
-          case "uri":
-            uri = reader.nextString();
-            break;
-          case "extension":
-            extension = reader.nextString();
-            break;
-          case "drm_scheme":
-            Assertions.checkState(!insidePlaylist, "Invalid attribute on nested item: drm_scheme");
-            drmUuid = getDrmUuid(reader.nextString());
-            break;
-          case "drm_license_url":
-            Assertions.checkState(!insidePlaylist,
-                "Invalid attribute on nested item: drm_license_url");
-            drmLicenseUrl = reader.nextString();
-            break;
-          case "drm_key_request_properties":
-            Assertions.checkState(!insidePlaylist,
-                "Invalid attribute on nested item: drm_key_request_properties");
-            ArrayList<String> drmKeyRequestPropertiesList = new ArrayList<>();
-            reader.beginObject();
-            while (reader.hasNext()) {
-              drmKeyRequestPropertiesList.add(reader.nextName());
-              drmKeyRequestPropertiesList.add(reader.nextString());
-            }
-            reader.endObject();
-            drmKeyRequestProperties = drmKeyRequestPropertiesList.toArray(new String[0]);
-            break;
-          case "prefer_extension_decoders":
-            Assertions.checkState(!insidePlaylist,
-                "Invalid attribute on nested item: prefer_extension_decoders");
-            preferExtensionDecoders = reader.nextBoolean();
-            break;
-          case "playlist":
-            Assertions.checkState(!insidePlaylist, "Invalid nesting of playlists");
-            playlistSamples = new ArrayList<>();
-            reader.beginArray();
-            while (reader.hasNext()) {
-              playlistSamples.add((UriSample) readEntry(reader, true));
-            }
-            reader.endArray();
-            break;
-          case "ad_tag_uri":
-            adTagUri = reader.nextString();
-            break;
-          default:
-            throw new ParserException("Unsupported attribute name: " + name);
-        }
-      }
-      reader.endObject();
-
-      if (playlistSamples != null) {
-        UriSample[] playlistSamplesArray = playlistSamples.toArray(
-            new UriSample[playlistSamples.size()]);
-        return new PlaylistSample(sampleName, drmUuid, drmLicenseUrl, drmKeyRequestProperties,
-            preferExtensionDecoders, playlistSamplesArray);
-      } else {
-        return new UriSample(sampleName, drmUuid, drmLicenseUrl, drmKeyRequestProperties,
-            preferExtensionDecoders, uri, extension, adTagUri);
-      }
-    }
-
-    private SampleGroup getGroup(String groupName, List<SampleGroup> groups) {
-      for (int i = 0; i < groups.size(); i++) {
-        if (Util.areEqual(groupName, groups.get(i).title)) {
-          return groups.get(i);
-        }
-      }
-      SampleGroup group = new SampleGroup(groupName);
-      groups.add(group);
-      return group;
-    }
-
-    private UUID getDrmUuid(String typeString) throws ParserException {
-      switch (Util.toLowerInvariant(typeString)) {
-        case "widevine":
-          return C.WIDEVINE_UUID;
-        case "playready":
-          return C.PLAYREADY_UUID;
-        case "cenc":
-          return C.CLEARKEY_UUID;
-        default:
-          try {
-            return UUID.fromString(typeString);
-          } catch (RuntimeException e) {
-            throw new ParserException("Unsupported drm type: " + typeString);
-          }
-      }
-    }
-
-  }
-
-  private static final class SampleAdapter extends BaseExpandableListAdapter {
-
-    private final Context context;
-    private final List<SampleGroup> sampleGroups;
-
-    public SampleAdapter(Context context, List<SampleGroup> sampleGroups) {
-      this.context = context;
-      this.sampleGroups = sampleGroups;
-    }
-
-    @Override
-    public Sample getChild(int groupPosition, int childPosition) {
-      return getGroup(groupPosition).samples.get(childPosition);
-    }
-
-    @Override
-    public long getChildId(int groupPosition, int childPosition) {
-      return childPosition;
-    }
-
-    @Override
-    public View getChildView(int groupPosition, int childPosition, boolean isLastChild,
-        View convertView, ViewGroup parent) {
-      View view = convertView;
-      if (view == null) {
-        view = LayoutInflater.from(context).inflate(android.R.layout.simple_list_item_1, parent,
-            false);
-      }
-      ((TextView) view).setText(getChild(groupPosition, childPosition).name);
-      return view;
-    }
-
-    @Override
-    public int getChildrenCount(int groupPosition) {
-      return getGroup(groupPosition).samples.size();
-    }
-
-    @Override
-    public SampleGroup getGroup(int groupPosition) {
-      return sampleGroups.get(groupPosition);
-    }
-
-    @Override
-    public long getGroupId(int groupPosition) {
-      return groupPosition;
-    }
-
-    @Override
-    public View getGroupView(int groupPosition, boolean isExpanded, View convertView,
-        ViewGroup parent) {
-      View view = convertView;
-      if (view == null) {
-        view = LayoutInflater.from(context).inflate(android.R.layout.simple_expandable_list_item_1,
-            parent, false);
-      }
-      ((TextView) view).setText(getGroup(groupPosition).title);
-      return view;
-    }
-
-    @Override
-    public int getGroupCount() {
-      return sampleGroups.size();
-    }
-
-    @Override
-    public boolean hasStableIds() {
-      return false;
-    }
-
-    @Override
-    public boolean isChildSelectable(int groupPosition, int childPosition) {
-      return true;
-    }
-
-  }
-
-  private static final class SampleGroup {
-
-    public final String title;
-    public final List<Sample> samples;
-
-    public SampleGroup(String title) {
-      this.title = title;
-      this.samples = new ArrayList<>();
-    }
-
-  }
-
-  private abstract static class Sample {
-
-    public final String name;
-    public final boolean preferExtensionDecoders;
-    public final UUID drmSchemeUuid;
-    public final String drmLicenseUrl;
-    public final String[] drmKeyRequestProperties;
-
-    public Sample(String name, UUID drmSchemeUuid, String drmLicenseUrl,
-        String[] drmKeyRequestProperties, boolean preferExtensionDecoders) {
-      this.name = name;
-      this.drmSchemeUuid = drmSchemeUuid;
-      this.drmLicenseUrl = drmLicenseUrl;
-      this.drmKeyRequestProperties = drmKeyRequestProperties;
-      this.preferExtensionDecoders = preferExtensionDecoders;
-    }
-
-    public Intent buildIntent(Context context) {
-      Intent intent = new Intent(context, PlayerActivity.class);
-      intent.putExtra(PlayerActivity.PREFER_EXTENSION_DECODERS, preferExtensionDecoders);
-      if (drmSchemeUuid != null) {
-        intent.putExtra(PlayerActivity.DRM_SCHEME_UUID_EXTRA, drmSchemeUuid.toString());
-        intent.putExtra(PlayerActivity.DRM_LICENSE_URL, drmLicenseUrl);
-        intent.putExtra(PlayerActivity.DRM_KEY_REQUEST_PROPERTIES, drmKeyRequestProperties);
-      }
-      return intent;
-    }
-
-  }
-
-  private static final class UriSample extends Sample {
-
-    public final String uri;
-    public final String extension;
-    public final String adTagUri;
-
-    public UriSample(String name, UUID drmSchemeUuid, String drmLicenseUrl,
-        String[] drmKeyRequestProperties, boolean preferExtensionDecoders, String uri,
-        String extension, String adTagUri) {
-      super(name, drmSchemeUuid, drmLicenseUrl, drmKeyRequestProperties, preferExtensionDecoders);
-      this.uri = uri;
-      this.extension = extension;
-      this.adTagUri = adTagUri;
-    }
-
-    @Override
-    public Intent buildIntent(Context context) {
-      return super.buildIntent(context)
-          .setData(Uri.parse(uri))
-          .putExtra(PlayerActivity.EXTENSION_EXTRA, extension)
-          .putExtra(PlayerActivity.AD_TAG_URI_EXTRA, adTagUri)
-          .setAction(PlayerActivity.ACTION_VIEW);
-    }
-
-  }
-
-  private static final class PlaylistSample extends Sample {
-
-    public final UriSample[] children;
-
-    public PlaylistSample(String name, UUID drmSchemeUuid, String drmLicenseUrl,
-        String[] drmKeyRequestProperties, boolean preferExtensionDecoders,
-        UriSample... children) {
-      super(name, drmSchemeUuid, drmLicenseUrl, drmKeyRequestProperties, preferExtensionDecoders);
-      this.children = children;
-    }
-
-    @Override
-    public Intent buildIntent(Context context) {
-      String[] uris = new String[children.length];
-      String[] extensions = new String[children.length];
-      for (int i = 0; i < children.length; i++) {
-        uris[i] = children[i].uri;
-        extensions[i] = children[i].extension;
-      }
-      return super.buildIntent(context)
-          .putExtra(PlayerActivity.URI_LIST_EXTRA, uris)
-          .putExtra(PlayerActivity.EXTENSION_LIST_EXTRA, extensions)
-          .setAction(PlayerActivity.ACTION_VIEW_LIST);
-    }
-
-  }
-
-}
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/TrackSelectionHelper.java b/demo/src/main/java/com/google/android/exoplayer2/demo/TrackSelectionHelper.java
deleted file mode 100644
index fb7217f8fd..0000000000
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/TrackSelectionHelper.java
+++ /dev/null
@@ -1,290 +0,0 @@
-/*
- * Copyright (C) 2016 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.demo;
-
-import android.annotation.SuppressLint;
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.res.TypedArray;
-import android.util.Pair;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.CheckedTextView;
-import com.google.android.exoplayer2.RendererCapabilities;
-import com.google.android.exoplayer2.source.TrackGroup;
-import com.google.android.exoplayer2.source.TrackGroupArray;
-import com.google.android.exoplayer2.trackselection.FixedTrackSelection;
-import com.google.android.exoplayer2.trackselection.MappingTrackSelector;
-import com.google.android.exoplayer2.trackselection.MappingTrackSelector.MappedTrackInfo;
-import com.google.android.exoplayer2.trackselection.MappingTrackSelector.SelectionOverride;
-import com.google.android.exoplayer2.trackselection.RandomTrackSelection;
-import com.google.android.exoplayer2.trackselection.TrackSelection;
-import java.util.Arrays;
-
-/**
- * Helper class for displaying track selection dialogs.
- */
-/* package */ final class TrackSelectionHelper implements View.OnClickListener,
-    DialogInterface.OnClickListener {
-
-  private static final TrackSelection.Factory FIXED_FACTORY = new FixedTrackSelection.Factory();
-  private static final TrackSelection.Factory RANDOM_FACTORY = new RandomTrackSelection.Factory();
-
-  private final MappingTrackSelector selector;
-  private final TrackSelection.Factory adaptiveTrackSelectionFactory;
-
-  private MappedTrackInfo trackInfo;
-  private int rendererIndex;
-  private TrackGroupArray trackGroups;
-  private boolean[] trackGroupsAdaptive;
-  private boolean isDisabled;
-  private SelectionOverride override;
-
-  private CheckedTextView disableView;
-  private CheckedTextView defaultView;
-  private CheckedTextView enableRandomAdaptationView;
-  private CheckedTextView[][] trackViews;
-
-  /**
-   * @param selector The track selector.
-   * @param adaptiveTrackSelectionFactory A factory for adaptive {@link TrackSelection}s, or null
-   *     if the selection helper should not support adaptive tracks.
-   */
-  public TrackSelectionHelper(MappingTrackSelector selector,
-      TrackSelection.Factory adaptiveTrackSelectionFactory) {
-    this.selector = selector;
-    this.adaptiveTrackSelectionFactory = adaptiveTrackSelectionFactory;
-  }
-
-  /**
-   * Shows the selection dialog for a given renderer.
-   *
-   * @param activity The parent activity.
-   * @param title The dialog's title.
-   * @param trackInfo The current track information.
-   * @param rendererIndex The index of the renderer.
-   */
-  public void showSelectionDialog(Activity activity, CharSequence title, MappedTrackInfo trackInfo,
-      int rendererIndex) {
-    this.trackInfo = trackInfo;
-    this.rendererIndex = rendererIndex;
-
-    trackGroups = trackInfo.getTrackGroups(rendererIndex);
-    trackGroupsAdaptive = new boolean[trackGroups.length];
-    for (int i = 0; i < trackGroups.length; i++) {
-      trackGroupsAdaptive[i] = adaptiveTrackSelectionFactory != null
-          && trackInfo.getAdaptiveSupport(rendererIndex, i, false)
-              != RendererCapabilities.ADAPTIVE_NOT_SUPPORTED
-          && trackGroups.get(i).length > 1;
-    }
-    isDisabled = selector.getRendererDisabled(rendererIndex);
-    override = selector.getSelectionOverride(rendererIndex, trackGroups);
-
-    AlertDialog.Builder builder = new AlertDialog.Builder(activity);
-    builder.setTitle(title)
-        .setView(buildView(builder.getContext()))
-        .setPositiveButton(android.R.string.ok, this)
-        .setNegativeButton(android.R.string.cancel, null)
-        .create()
-        .show();
-  }
-
-  @SuppressLint("InflateParams")
-  private View buildView(Context context) {
-    LayoutInflater inflater = LayoutInflater.from(context);
-    View view = inflater.inflate(R.layout.track_selection_dialog, null);
-    ViewGroup root = (ViewGroup) view.findViewById(R.id.root);
-
-    TypedArray attributeArray = context.getTheme().obtainStyledAttributes(
-        new int[] {android.R.attr.selectableItemBackground});
-    int selectableItemBackgroundResourceId = attributeArray.getResourceId(0, 0);
-    attributeArray.recycle();
-
-    // View for disabling the renderer.
-    disableView = (CheckedTextView) inflater.inflate(
-        android.R.layout.simple_list_item_single_choice, root, false);
-    disableView.setBackgroundResource(selectableItemBackgroundResourceId);
-    disableView.setText(R.string.selection_disabled);
-    disableView.setFocusable(true);
-    disableView.setOnClickListener(this);
-    root.addView(disableView);
-
-    // View for clearing the override to allow the selector to use its default selection logic.
-    defaultView = (CheckedTextView) inflater.inflate(
-        android.R.layout.simple_list_item_single_choice, root, false);
-    defaultView.setBackgroundResource(selectableItemBackgroundResourceId);
-    defaultView.setText(R.string.selection_default);
-    defaultView.setFocusable(true);
-    defaultView.setOnClickListener(this);
-    root.addView(inflater.inflate(R.layout.list_divider, root, false));
-    root.addView(defaultView);
-
-    // Per-track views.
-    boolean haveAdaptiveTracks = false;
-    trackViews = new CheckedTextView[trackGroups.length][];
-    for (int groupIndex = 0; groupIndex < trackGroups.length; groupIndex++) {
-      TrackGroup group = trackGroups.get(groupIndex);
-      boolean groupIsAdaptive = trackGroupsAdaptive[groupIndex];
-      haveAdaptiveTracks |= groupIsAdaptive;
-      trackViews[groupIndex] = new CheckedTextView[group.length];
-      for (int trackIndex = 0; trackIndex < group.length; trackIndex++) {
-        if (trackIndex == 0) {
-          root.addView(inflater.inflate(R.layout.list_divider, root, false));
-        }
-        int trackViewLayoutId = groupIsAdaptive ? android.R.layout.simple_list_item_multiple_choice
-            : android.R.layout.simple_list_item_single_choice;
-        CheckedTextView trackView = (CheckedTextView) inflater.inflate(
-            trackViewLayoutId, root, false);
-        trackView.setBackgroundResource(selectableItemBackgroundResourceId);
-        trackView.setText(DemoUtil.buildTrackName(group.getFormat(trackIndex)));
-        if (trackInfo.getTrackFormatSupport(rendererIndex, groupIndex, trackIndex)
-            == RendererCapabilities.FORMAT_HANDLED) {
-          trackView.setFocusable(true);
-          trackView.setTag(Pair.create(groupIndex, trackIndex));
-          trackView.setOnClickListener(this);
-        } else {
-          trackView.setFocusable(false);
-          trackView.setEnabled(false);
-        }
-        trackViews[groupIndex][trackIndex] = trackView;
-        root.addView(trackView);
-      }
-    }
-
-    if (haveAdaptiveTracks) {
-      // View for using random adaptation.
-      enableRandomAdaptationView = (CheckedTextView) inflater.inflate(
-          android.R.layout.simple_list_item_multiple_choice, root, false);
-      enableRandomAdaptationView.setBackgroundResource(selectableItemBackgroundResourceId);
-      enableRandomAdaptationView.setText(R.string.enable_random_adaptation);
-      enableRandomAdaptationView.setOnClickListener(this);
-      root.addView(inflater.inflate(R.layout.list_divider, root, false));
-      root.addView(enableRandomAdaptationView);
-    }
-
-    updateViews();
-    return view;
-  }
-
-  private void updateViews() {
-    disableView.setChecked(isDisabled);
-    defaultView.setChecked(!isDisabled && override == null);
-    for (int i = 0; i < trackViews.length; i++) {
-      for (int j = 0; j < trackViews[i].length; j++) {
-        trackViews[i][j].setChecked(override != null && override.groupIndex == i
-            && override.containsTrack(j));
-      }
-    }
-    if (enableRandomAdaptationView != null) {
-      boolean enableView = !isDisabled && override != null && override.length > 1;
-      enableRandomAdaptationView.setEnabled(enableView);
-      enableRandomAdaptationView.setFocusable(enableView);
-      if (enableView) {
-        enableRandomAdaptationView.setChecked(!isDisabled
-            && override.factory instanceof RandomTrackSelection.Factory);
-      }
-    }
-  }
-
-  // DialogInterface.OnClickListener
-
-  @Override
-  public void onClick(DialogInterface dialog, int which) {
-    selector.setRendererDisabled(rendererIndex, isDisabled);
-    if (override != null) {
-      selector.setSelectionOverride(rendererIndex, trackGroups, override);
-    } else {
-      selector.clearSelectionOverrides(rendererIndex);
-    }
-  }
-
-  // View.OnClickListener
-
-  @Override
-  public void onClick(View view) {
-    if (view == disableView) {
-      isDisabled = true;
-      override = null;
-    } else if (view == defaultView) {
-      isDisabled = false;
-      override = null;
-    } else if (view == enableRandomAdaptationView) {
-      setOverride(override.groupIndex, override.tracks, !enableRandomAdaptationView.isChecked());
-    } else {
-      isDisabled = false;
-      @SuppressWarnings("unchecked")
-      Pair<Integer, Integer> tag = (Pair<Integer, Integer>) view.getTag();
-      int groupIndex = tag.first;
-      int trackIndex = tag.second;
-      if (!trackGroupsAdaptive[groupIndex] || override == null
-          || override.groupIndex != groupIndex) {
-        override = new SelectionOverride(FIXED_FACTORY, groupIndex, trackIndex);
-      } else {
-        // The group being modified is adaptive and we already have a non-null override.
-        boolean isEnabled = ((CheckedTextView) view).isChecked();
-        int overrideLength = override.length;
-        if (isEnabled) {
-          // Remove the track from the override.
-          if (overrideLength == 1) {
-            // The last track is being removed, so the override becomes empty.
-            override = null;
-            isDisabled = true;
-          } else {
-            setOverride(groupIndex, getTracksRemoving(override, trackIndex),
-                enableRandomAdaptationView.isChecked());
-          }
-        } else {
-          // Add the track to the override.
-          setOverride(groupIndex, getTracksAdding(override, trackIndex),
-              enableRandomAdaptationView.isChecked());
-        }
-      }
-    }
-    // Update the views with the new state.
-    updateViews();
-  }
-
-  private void setOverride(int group, int[] tracks, boolean enableRandomAdaptation) {
-    TrackSelection.Factory factory = tracks.length == 1 ? FIXED_FACTORY
-        : (enableRandomAdaptation ? RANDOM_FACTORY : adaptiveTrackSelectionFactory);
-    override = new SelectionOverride(factory, group, tracks);
-  }
-
-  // Track array manipulation.
-
-  private static int[] getTracksAdding(SelectionOverride override, int addedTrack) {
-    int[] tracks = override.tracks;
-    tracks = Arrays.copyOf(tracks, tracks.length + 1);
-    tracks[tracks.length - 1] = addedTrack;
-    return tracks;
-  }
-
-  private static int[] getTracksRemoving(SelectionOverride override, int removedTrack) {
-    int[] tracks = new int[override.length - 1];
-    int trackCount = 0;
-    for (int i = 0; i < tracks.length + 1; i++) {
-      int track = override.tracks[i];
-      if (track != removedTrack) {
-        tracks[trackCount++] = track;
-      }
-    }
-    return tracks;
-  }
-
-}
diff --git a/demo/src/main/res/drawable-xhdpi/ic_banner.png b/demo/src/main/res/drawable-xhdpi/ic_banner.png
deleted file mode 100644
index 520d83cc3b..0000000000
Binary files a/demo/src/main/res/drawable-xhdpi/ic_banner.png and /dev/null differ
diff --git a/demo/src/main/res/layout/list_divider.xml b/demo/src/main/res/layout/list_divider.xml
deleted file mode 100644
index 0382999160..0000000000
--- a/demo/src/main/res/layout/list_divider.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!-- Copyright (C) 2016 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-<View xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="1px"
-    android:background="?android:attr/listDivider"/>
diff --git a/demo/src/main/res/layout/player_activity.xml b/demo/src/main/res/layout/player_activity.xml
deleted file mode 100644
index 3f8cdaa7d6..0000000000
--- a/demo/src/main/res/layout/player_activity.xml
+++ /dev/null
@@ -1,57 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!-- Copyright (C) 2016 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:tools="http://schemas.android.com/tools"
-    android:id="@+id/root"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    android:keepScreenOn="true">
-
-  <com.google.android.exoplayer2.ui.SimpleExoPlayerView android:id="@+id/player_view"
-      android:layout_width="match_parent"
-      android:layout_height="match_parent"/>
-
-  <LinearLayout
-      android:layout_width="match_parent"
-      android:layout_height="wrap_content"
-      android:background="#88000000"
-      android:orientation="vertical">
-
-    <TextView android:id="@+id/debug_text_view"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:paddingLeft="4dp"
-        android:paddingRight="4dp"
-        android:textSize="10sp"
-        tools:ignore="SmallSp"/>
-
-    <LinearLayout android:id="@+id/controls_root"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:orientation="horizontal"
-        android:visibility="gone">
-
-      <Button android:id="@+id/retry_button"
-          android:layout_width="wrap_content"
-          android:layout_height="wrap_content"
-          android:text="@string/retry"
-          android:visibility="gone"/>
-
-    </LinearLayout>
-
-  </LinearLayout>
-
-</FrameLayout>
diff --git a/demo/src/main/res/layout/sample_chooser_activity.xml b/demo/src/main/res/layout/sample_chooser_activity.xml
deleted file mode 100644
index 4d968c7497..0000000000
--- a/demo/src/main/res/layout/sample_chooser_activity.xml
+++ /dev/null
@@ -1,25 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!-- Copyright (C) 2016 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    android:orientation="vertical">
-
-  <ExpandableListView android:id="@+id/sample_list"
-      android:layout_width="match_parent"
-      android:layout_height="match_parent"/>
-
-</LinearLayout>
diff --git a/demo/src/main/res/layout/track_selection_dialog.xml b/demo/src/main/res/layout/track_selection_dialog.xml
deleted file mode 100644
index d7e9369e8b..0000000000
--- a/demo/src/main/res/layout/track_selection_dialog.xml
+++ /dev/null
@@ -1,25 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!-- Copyright (C) 2016 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="wrap_content"
-    android:layout_height="match_parent">
-
-  <LinearLayout android:id="@+id/root"
-      android:orientation="vertical"
-      android:layout_width="wrap_content"
-      android:layout_height="wrap_content"/>
-
-</ScrollView>
diff --git a/demo/src/main/res/mipmap-hdpi/ic_launcher.png b/demo/src/main/res/mipmap-hdpi/ic_launcher.png
deleted file mode 100644
index 6e8b5499de..0000000000
Binary files a/demo/src/main/res/mipmap-hdpi/ic_launcher.png and /dev/null differ
diff --git a/demo/src/main/res/mipmap-mdpi/ic_launcher.png b/demo/src/main/res/mipmap-mdpi/ic_launcher.png
deleted file mode 100644
index 26fe2f0782..0000000000
Binary files a/demo/src/main/res/mipmap-mdpi/ic_launcher.png and /dev/null differ
diff --git a/demo/src/main/res/mipmap-xhdpi/ic_launcher.png b/demo/src/main/res/mipmap-xhdpi/ic_launcher.png
deleted file mode 100644
index d3251491ce..0000000000
Binary files a/demo/src/main/res/mipmap-xhdpi/ic_launcher.png and /dev/null differ
diff --git a/demo/src/main/res/mipmap-xxhdpi/ic_launcher.png b/demo/src/main/res/mipmap-xxhdpi/ic_launcher.png
deleted file mode 100644
index b5a12d35f3..0000000000
Binary files a/demo/src/main/res/mipmap-xxhdpi/ic_launcher.png and /dev/null differ
diff --git a/demo/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/demo/src/main/res/mipmap-xxxhdpi/ic_launcher.png
deleted file mode 100644
index 9c26192c32..0000000000
Binary files a/demo/src/main/res/mipmap-xxxhdpi/ic_launcher.png and /dev/null differ
diff --git a/demo/src/main/res/values/strings.xml b/demo/src/main/res/values/strings.xml
deleted file mode 100644
index cc6357c574..0000000000
--- a/demo/src/main/res/values/strings.xml
+++ /dev/null
@@ -1,61 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2016 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-
-<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
-
-  <string name="application_name">ExoPlayer</string>
-
-  <string name="video">Video</string>
-
-  <string name="audio">Audio</string>
-
-  <string name="text">Text</string>
-
-  <string name="retry">Retry</string>
-
-  <string name="selection_disabled">Disabled</string>
-
-  <string name="selection_default">Default</string>
-
-  <string name="unexpected_intent_action">Unexpected intent action: <xliff:g id="action">%1$s</xliff:g></string>
-
-  <string name="enable_random_adaptation">Enable random adaptation</string>
-
-  <string name="error_drm_not_supported">Protected content not supported on API levels below 18</string>
-
-  <string name="error_drm_unsupported_scheme">This device does not support the required DRM scheme</string>
-
-  <string name="error_drm_unknown">An unknown DRM error occurred</string>
-
-  <string name="error_no_decoder">This device does not provide a decoder for <xliff:g id="mime_type">%1$s</xliff:g></string>
-
-  <string name="error_no_secure_decoder">This device does not provide a secure decoder for <xliff:g id="mime_type">%1$s</xliff:g></string>
-
-  <string name="error_querying_decoders">Unable to query device decoders</string>
-
-  <string name="error_instantiating_decoder">Unable to instantiate decoder <xliff:g id="decoder_name">%1$s</xliff:g></string>
-
-  <string name="error_unsupported_video">Media includes video tracks, but none are playable by this device</string>
-
-  <string name="error_unsupported_audio">Media includes audio tracks, but none are playable by this device</string>
-
-  <string name="storage_permission_denied">Permission to access storage was denied</string>
-
-  <string name="sample_list_load_error">One or more sample lists failed to load</string>
-
-  <string name="ima_not_loaded">Playing sample without ads, as the IMA extension was not loaded</string>
-
-</resources>
diff --git a/demo/src/main/res/values/styles.xml b/demo/src/main/res/values/styles.xml
deleted file mode 100644
index 751a224210..0000000000
--- a/demo/src/main/res/values/styles.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2016 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-
-<resources xmlns:android="http://schemas.android.com/apk/res/android">
-
-  <style name="PlayerTheme" parent="android:Theme.Holo">
-    <item name="android:windowNoTitle">true</item>
-    <item name="android:windowBackground">@android:color/black</item>
-  </style>
-
-</resources>
diff --git a/gradle.properties b/gradle.properties
deleted file mode 100644
index b55575bc3b..0000000000
--- a/gradle.properties
+++ /dev/null
@@ -1,3 +0,0 @@
-## Project-wide Gradle settings.
-android.useDeprecatedNdk=true
-buildDir=buildout
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
deleted file mode 100644
index 747bb13173..0000000000
Binary files a/gradle/wrapper/gradle-wrapper.jar and /dev/null differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
deleted file mode 100644
index 32ec7e3327..0000000000
--- a/gradle/wrapper/gradle-wrapper.properties
+++ /dev/null
@@ -1,6 +0,0 @@
-#Tue Sep 05 13:43:42 BST 2017
-distributionBase=GRADLE_USER_HOME
-distributionPath=wrapper/dists
-zipStoreBase=GRADLE_USER_HOME
-zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip
diff --git a/gradlew b/gradlew
deleted file mode 100755
index 91a7e269e1..0000000000
--- a/gradlew
+++ /dev/null
@@ -1,164 +0,0 @@
-#!/usr/bin/env bash
-
-##############################################################################
-##
-##  Gradle start up script for UN*X
-##
-##############################################################################
-
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""
-
-APP_NAME="Gradle"
-APP_BASE_NAME=`basename "$0"`
-
-# Use the maximum available, or set MAX_FD != -1 to use that value.
-MAX_FD="maximum"
-
-warn ( ) {
-    echo "$*"
-}
-
-die ( ) {
-    echo
-    echo "$*"
-    echo
-    exit 1
-}
-
-# OS specific support (must be 'true' or 'false').
-cygwin=false
-msys=false
-darwin=false
-case "`uname`" in
-  CYGWIN* )
-    cygwin=true
-    ;;
-  Darwin* )
-    darwin=true
-    ;;
-  MINGW* )
-    msys=true
-    ;;
-esac
-
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-fi
-
-# Attempt to set APP_HOME
-# Resolve links: $0 may be a link
-PRG="$0"
-# Need this for relative symlinks.
-while [ -h "$PRG" ] ; do
-    ls=`ls -ld "$PRG"`
-    link=`expr "$ls" : '.*-> \(.*\)$'`
-    if expr "$link" : '/.*' > /dev/null; then
-        PRG="$link"
-    else
-        PRG=`dirname "$PRG"`"/$link"
-    fi
-done
-SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >&-
-APP_HOME="`pwd -P`"
-cd "$SAVED" >&-
-
-CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
-
-# Determine the Java command to use to start the JVM.
-if [ -n "$JAVA_HOME" ] ; then
-    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
-        # IBM's JDK on AIX uses strange locations for the executables
-        JAVACMD="$JAVA_HOME/jre/sh/java"
-    else
-        JAVACMD="$JAVA_HOME/bin/java"
-    fi
-    if [ ! -x "$JAVACMD" ] ; then
-        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
-
-Please set the JAVA_HOME variable in your environment to match the
-location of your Java installation."
-    fi
-else
-    JAVACMD="java"
-    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-
-Please set the JAVA_HOME variable in your environment to match the
-location of your Java installation."
-fi
-
-# Increase the maximum file descriptors if we can.
-if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
-    MAX_FD_LIMIT=`ulimit -H -n`
-    if [ $? -eq 0 ] ; then
-        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
-            MAX_FD="$MAX_FD_LIMIT"
-        fi
-        ulimit -n $MAX_FD
-        if [ $? -ne 0 ] ; then
-            warn "Could not set maximum file descriptor limit: $MAX_FD"
-        fi
-    else
-        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
-    fi
-fi
-
-# For Darwin, add options to specify how the application appears in the dock
-if $darwin; then
-    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
-fi
-
-# For Cygwin, switch paths to Windows format before running java
-if $cygwin ; then
-    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
-    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
-
-    # We build the pattern for arguments to be converted via cygpath
-    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
-    SEP=""
-    for dir in $ROOTDIRSRAW ; do
-        ROOTDIRS="$ROOTDIRS$SEP$dir"
-        SEP="|"
-    done
-    OURCYGPATTERN="(^($ROOTDIRS))"
-    # Add a user-defined pattern to the cygpath arguments
-    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
-        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
-    fi
-    # Now convert the arguments - kludge to limit ourselves to /bin/sh
-    i=0
-    for arg in "$@" ; do
-        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
-        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
-
-        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
-            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
-        else
-            eval `echo args$i`="\"$arg\""
-        fi
-        i=$((i+1))
-    done
-    case $i in
-        (0) set -- ;;
-        (1) set -- "$args0" ;;
-        (2) set -- "$args0" "$args1" ;;
-        (3) set -- "$args0" "$args1" "$args2" ;;
-        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
-        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
-        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
-        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
-        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
-        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
-    esac
-fi
-
-# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
-function splitJvmOpts() {
-    JVM_OPTS=("$@")
-}
-eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
-JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
-
-exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/gradlew.bat b/gradlew.bat
deleted file mode 100644
index 8a0b282aa6..0000000000
--- a/gradlew.bat
+++ /dev/null
@@ -1,90 +0,0 @@
-@if "%DEBUG%" == "" @echo off
-@rem ##########################################################################
-@rem
-@rem  Gradle startup script for Windows
-@rem
-@rem ##########################################################################
-
-@rem Set local scope for the variables with windows NT shell
-if "%OS%"=="Windows_NT" setlocal
-
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
-set DIRNAME=%~dp0
-if "%DIRNAME%" == "" set DIRNAME=.
-set APP_BASE_NAME=%~n0
-set APP_HOME=%DIRNAME%
-
-@rem Find java.exe
-if defined JAVA_HOME goto findJavaFromJavaHome
-
-set JAVA_EXE=java.exe
-%JAVA_EXE% -version >NUL 2>&1
-if "%ERRORLEVEL%" == "0" goto init
-
-echo.
-echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:findJavaFromJavaHome
-set JAVA_HOME=%JAVA_HOME:"=%
-set JAVA_EXE=%JAVA_HOME%/bin/java.exe
-
-if exist "%JAVA_EXE%" goto init
-
-echo.
-echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:init
-@rem Get command-line arguments, handling Windowz variants
-
-if not "%OS%" == "Windows_NT" goto win9xME_args
-if "%@eval[2+2]" == "4" goto 4NT_args
-
-:win9xME_args
-@rem Slurp the command line arguments.
-set CMD_LINE_ARGS=
-set _SKIP=2
-
-:win9xME_args_slurp
-if "x%~1" == "x" goto execute
-
-set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
-
-:execute
-@rem Setup the command line
-
-set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
-
-@rem Execute Gradle
-"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
-
-:end
-@rem End local scope for the variables with windows NT shell
-if "%ERRORLEVEL%"=="0" goto mainEnd
-
-:fail
-rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
-rem the _cmd.exe /c_ return code!
-if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
-exit /b 1
-
-:mainEnd
-if "%OS%"=="Windows_NT" endlocal
-
-:omega
diff --git a/javadoc_combined.gradle b/javadoc_combined.gradle
deleted file mode 100644
index 1fec48ca25..0000000000
--- a/javadoc_combined.gradle
+++ /dev/null
@@ -1,68 +0,0 @@
-// Copyright (C) 2017 The Android Open Source Project
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-class CombinedJavadocPlugin implements Plugin<Project> {
-
-  static final String TASK_NAME = "generateCombinedJavadoc"
-
-  @Override
-  void apply(Project project) {
-    project.gradle.projectsEvaluated {
-      Set<Project> libraryModules = getLibraryModules(project)
-      if (!libraryModules.isEmpty()) {
-        String sdkDirectory = getSdkDirectory(libraryModules)
-        project.task(TASK_NAME, type: Javadoc) {
-          description = "Generates combined Javadoc."
-          title = "ExoPlayer library"
-          source = libraryModules.generateJavadoc.source
-          classpath = project.files(libraryModules.generateJavadoc.classpath)
-          destinationDir = project.file("$project.buildDir/docs/javadoc")
-          options {
-            links "http://docs.oracle.com/javase/7/docs/api/"
-            linksOffline "https://developer.android.com/reference",
-                         "${sdkDirectory}/docs/reference"
-            encoding = "UTF-8"
-          }
-          exclude "**/BuildConfig.java"
-          exclude "**/R.java"
-          destinationDir project.file("$project.buildDir/docs/javadoc")
-          doLast {
-            libraryModules.each { libraryModule ->
-              project.copy {
-                from "${libraryModule.projectDir}/src/main/javadoc"
-                into "${project.buildDir}/docs/javadoc"
-              }
-            }
-          }
-        }
-      }
-    }
-  }
-
-  // Returns Android library modules that declare a generateJavadoc task.
-  private Set<Project> getLibraryModules(Project project) {
-    project.subprojects.findAll {
-      it.plugins.findPlugin("com.android.library") &&
-      it.tasks.findByName("generateJavadoc")
-    }
-  }
-
-  // Returns the Android SDK directory given a set of Android library modules.
-  private String getSdkDirectory(Set<Project> libraryModules) {
-    // We can retrieve the Android SDK directory from any module.
-    return libraryModules.iterator().next().android.sdkDirectory
-  }
-
-}
-
-apply plugin: CombinedJavadocPlugin
diff --git a/javadoc_library.gradle b/javadoc_library.gradle
deleted file mode 100644
index ea193e661c..0000000000
--- a/javadoc_library.gradle
+++ /dev/null
@@ -1,40 +0,0 @@
-// Copyright (C) 2017 The Android Open Source Project
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-android.libraryVariants.all { variant ->
-    def name = variant.buildType.name
-    if (!name.equals("release")) {
-        return; // Skip non-release builds.
-    }
-    task("generateJavadoc", type: Javadoc) {
-        description = "Generates Javadoc for the ${javadocTitle}."
-        title = "ExoPlayer ${javadocTitle}"
-        source = variant.javaCompile.source
-        classpath = files(variant.javaCompile.classpath.files,
-	                  project.android.getBootClasspath())
-        options {
-            links "http://docs.oracle.com/javase/7/docs/api/"
-            linksOffline "https://developer.android.com/reference",
-                         "${android.sdkDirectory}/docs/reference"
-            encoding = "UTF-8"
-        }
-        exclude "**/BuildConfig.java"
-        exclude "**/R.java"
-        doLast {
-            copy {
-                from "src/main/javadoc"
-                into "$buildDir/docs/javadoc"
-            }
-        }
-    }
-}
diff --git a/playbacktests/build.gradle b/playbacktests/build.gradle
deleted file mode 100644
index 6cd56868f9..0000000000
--- a/playbacktests/build.gradle
+++ /dev/null
@@ -1,32 +0,0 @@
-// Copyright (C) 2016 The Android Open Source Project
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-apply from: '../constants.gradle'
-apply plugin: 'com.android.library'
-
-android {
-    compileSdkVersion project.ext.compileSdkVersion
-    buildToolsVersion project.ext.buildToolsVersion
-
-    defaultConfig {
-        minSdkVersion project.ext.minSdkVersion
-        targetSdkVersion project.ext.targetSdkVersion
-    }
-}
-
-dependencies {
-    androidTestCompile project(modulePrefix + 'library-core')
-    androidTestCompile project(modulePrefix + 'library-dash')
-    androidTestCompile project(modulePrefix + 'library-hls')
-    androidTestCompile project(modulePrefix + 'testutils')
-}
diff --git a/playbacktests/src/androidTest/AndroidManifest.xml b/playbacktests/src/androidTest/AndroidManifest.xml
deleted file mode 100644
index 053fe4e61c..0000000000
--- a/playbacktests/src/androidTest/AndroidManifest.xml
+++ /dev/null
@@ -1,41 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2016 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:tools="http://schemas.android.com/tools"
-    package="com.google.android.exoplayer2.playbacktests">
-
-  <uses-permission android:name="android.permission.INTERNET"/>
-  <uses-permission android:name="android.permission.WAKE_LOCK"/>
-
-  <uses-sdk android:minSdkVersion="9" android:targetSdkVersion="24"/>
-
-  <application android:debuggable="true"
-      android:allowBackup="false"
-      tools:ignore="MissingApplicationIcon,HardcodedDebugMode">
-    <uses-library android:name="android.test.runner"/>
-
-    <activity android:name="com.google.android.exoplayer2.testutil.HostActivity"
-        android:configChanges="keyboardHidden|orientation|screenSize"
-        android:label="ExoPlayerTest"/>
-
-  </application>
-
-  <instrumentation
-      android:targetPackage="com.google.android.exoplayer2.playbacktests"
-      android:name="android.test.InstrumentationTestRunner"/>
-
-</manifest>
diff --git a/playbacktests/src/androidTest/java/com/google/android/exoplayer2/playbacktests/gts/CommonEncryptionDrmTest.java b/playbacktests/src/androidTest/java/com/google/android/exoplayer2/playbacktests/gts/CommonEncryptionDrmTest.java
deleted file mode 100644
index 3f84b9ea85..0000000000
--- a/playbacktests/src/androidTest/java/com/google/android/exoplayer2/playbacktests/gts/CommonEncryptionDrmTest.java
+++ /dev/null
@@ -1,96 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.playbacktests.gts;
-
-import android.test.ActivityInstrumentationTestCase2;
-import com.google.android.exoplayer2.testutil.ActionSchedule;
-import com.google.android.exoplayer2.testutil.HostActivity;
-import com.google.android.exoplayer2.util.MimeTypes;
-import com.google.android.exoplayer2.util.Util;
-
-/**
- * Test playback of encrypted DASH streams using different CENC scheme types.
- */
-public final class CommonEncryptionDrmTest extends ActivityInstrumentationTestCase2<HostActivity> {
-
-  private static final String TAG = "CencDrmTest";
-
-  private static final String URL_cenc =
-      "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd";
-  private static final String URL_cbc1 =
-      "https://storage.googleapis.com/wvmedia/cbc1/h264/tears/tears_aes_cbc1.mpd";
-  private static final String URL_cbcs =
-      "https://storage.googleapis.com/wvmedia/cbcs/h264/tears/tears_aes_cbcs.mpd";
-  private static final String ID_AUDIO = "0";
-  private static final String[] IDS_VIDEO = new String[] {"1", "2"};
-
-  // Seeks help reproduce playback issues in certain devices.
-  private static final ActionSchedule ACTION_SCHEDULE_WITH_SEEKS = new ActionSchedule.Builder(TAG)
-      .delay(30000).seek(300000).delay(10000).seek(270000).delay(10000).seek(200000).delay(10000)
-      .stop().build();
-
-  private DashTestRunner testRunner;
-
-  public CommonEncryptionDrmTest() {
-    super(HostActivity.class);
-  }
-
-  @Override
-  protected void setUp() throws Exception {
-    super.setUp();
-
-    testRunner = new DashTestRunner(TAG, getActivity(), getInstrumentation())
-        .setWidevineInfo(MimeTypes.VIDEO_H264, false)
-        .setActionSchedule(ACTION_SCHEDULE_WITH_SEEKS)
-        .setAudioVideoFormats(ID_AUDIO, IDS_VIDEO)
-        .setCanIncludeAdditionalVideoFormats(true);
-  }
-
-  @Override
-  protected void tearDown() throws Exception {
-    testRunner = null;
-    super.tearDown();
-  }
-
-  public void testCencSchemeType() {
-    if (Util.SDK_INT < 18) {
-      // Pass.
-      return;
-    }
-    testRunner.setStreamName("test_widevine_h264_scheme_cenc").setManifestUrl(URL_cenc).run();
-  }
-
-  public void testCbc1SchemeType() {
-    if (Util.SDK_INT < 24) {
-      // Pass.
-      return;
-    }
-    testRunner.setStreamName("test_widevine_h264_scheme_cbc1").setManifestUrl(URL_cbc1).run();
-  }
-
-  public void testCbcsSchemeType() {
-    if (Util.SDK_INT < 24) {
-      // Pass.
-      return;
-    }
-    testRunner.setStreamName("test_widevine_h264_scheme_cbcs").setManifestUrl(URL_cbcs).run();
-  }
-
-  public void testCensSchemeType() {
-    // TODO: Implement once content is available. Track [internal: b/31219813].
-  }
-
-}
diff --git a/playbacktests/src/androidTest/java/com/google/android/exoplayer2/playbacktests/gts/DashStreamingTest.java b/playbacktests/src/androidTest/java/com/google/android/exoplayer2/playbacktests/gts/DashStreamingTest.java
deleted file mode 100644
index 529f57582e..0000000000
--- a/playbacktests/src/androidTest/java/com/google/android/exoplayer2/playbacktests/gts/DashStreamingTest.java
+++ /dev/null
@@ -1,607 +0,0 @@
-/*
- * Copyright (C) 2016 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.playbacktests.gts;
-
-import android.test.ActivityInstrumentationTestCase2;
-import com.google.android.exoplayer2.ExoPlayer;
-import com.google.android.exoplayer2.mediacodec.MediaCodecInfo;
-import com.google.android.exoplayer2.mediacodec.MediaCodecUtil;
-import com.google.android.exoplayer2.mediacodec.MediaCodecUtil.DecoderQueryException;
-import com.google.android.exoplayer2.testutil.ActionSchedule;
-import com.google.android.exoplayer2.testutil.HostActivity;
-import com.google.android.exoplayer2.util.MimeTypes;
-import com.google.android.exoplayer2.util.Util;
-
-/**
- * Tests DASH playbacks using {@link ExoPlayer}.
- */
-public final class DashStreamingTest extends ActivityInstrumentationTestCase2<HostActivity> {
-
-  private static final String TAG = "DashStreamingTest";
-
-  private static final ActionSchedule SEEKING_SCHEDULE = new ActionSchedule.Builder(TAG)
-      .delay(10000).seek(15000)
-      .delay(10000).seek(30000).seek(31000).seek(32000).seek(33000).seek(34000)
-      .delay(1000).pause().delay(1000).play()
-      .delay(1000).pause().seek(120000).delay(1000).play()
-      .build();
-  private static final ActionSchedule RENDERER_DISABLING_SCHEDULE = new ActionSchedule.Builder(TAG)
-      // Wait 10 seconds, disable the video renderer, wait another 10 seconds and enable it again.
-      .delay(10000).disableRenderer(DashTestRunner.VIDEO_RENDERER_INDEX)
-      .delay(10000).enableRenderer(DashTestRunner.VIDEO_RENDERER_INDEX)
-      // Ditto for the audio renderer.
-      .delay(10000).disableRenderer(DashTestRunner.AUDIO_RENDERER_INDEX)
-      .delay(10000).enableRenderer(DashTestRunner.AUDIO_RENDERER_INDEX)
-      // Wait 10 seconds, then disable and enable the video renderer 5 times in quick succession.
-      .delay(10000).disableRenderer(DashTestRunner.VIDEO_RENDERER_INDEX)
-      .enableRenderer(DashTestRunner.VIDEO_RENDERER_INDEX)
-      .disableRenderer(DashTestRunner.VIDEO_RENDERER_INDEX)
-      .enableRenderer(DashTestRunner.VIDEO_RENDERER_INDEX)
-      .disableRenderer(DashTestRunner.VIDEO_RENDERER_INDEX)
-      .enableRenderer(DashTestRunner.VIDEO_RENDERER_INDEX)
-      .disableRenderer(DashTestRunner.VIDEO_RENDERER_INDEX)
-      .enableRenderer(DashTestRunner.VIDEO_RENDERER_INDEX)
-      .disableRenderer(DashTestRunner.VIDEO_RENDERER_INDEX)
-      .enableRenderer(DashTestRunner.VIDEO_RENDERER_INDEX)
-      // Ditto for the audio renderer.
-      .delay(10000).disableRenderer(DashTestRunner.AUDIO_RENDERER_INDEX)
-      .enableRenderer(DashTestRunner.AUDIO_RENDERER_INDEX)
-      .disableRenderer(DashTestRunner.AUDIO_RENDERER_INDEX)
-      .enableRenderer(DashTestRunner.AUDIO_RENDERER_INDEX)
-      .disableRenderer(DashTestRunner.AUDIO_RENDERER_INDEX)
-      .enableRenderer(DashTestRunner.AUDIO_RENDERER_INDEX)
-      .disableRenderer(DashTestRunner.AUDIO_RENDERER_INDEX)
-      .enableRenderer(DashTestRunner.AUDIO_RENDERER_INDEX)
-      .disableRenderer(DashTestRunner.AUDIO_RENDERER_INDEX)
-      .enableRenderer(DashTestRunner.AUDIO_RENDERER_INDEX)
-      // Wait 10 seconds, detach the surface, wait another 10 seconds and attach it again.
-      .delay(10000).clearVideoSurface()
-      .delay(10000).setVideoSurface()
-      // Wait 10 seconds, then seek to near end.
-      .delay(10000).seek(120000)
-      .build();
-  
-  private DashTestRunner testRunner;
-
-  public DashStreamingTest() {
-    super(HostActivity.class);
-  }
-
-  @Override
-  protected void setUp() throws Exception {
-    super.setUp();
-    testRunner = new DashTestRunner(TAG, getActivity(), getInstrumentation());
-  }
-
-  @Override
-  protected void tearDown() throws Exception {
-    testRunner = null;
-    super.tearDown();
-  }
-
-  // H264 CDD.
-
-  public void testH264Fixed() {
-    if (Util.SDK_INT < 16) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_h264_fixed")
-        .setManifestUrl(DashTestData.H264_MANIFEST)
-        .setFullPlaybackNoSeeking(true)
-        .setCanIncludeAdditionalVideoFormats(false)
-        .setAudioVideoFormats(DashTestData.AAC_AUDIO_REPRESENTATION_ID, DashTestData.H264_CDD_FIXED)
-        .run();
-  }
-
-  public void testH264Adaptive() throws DecoderQueryException {
-    if (Util.SDK_INT < 16 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_H264)) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_h264_adaptive")
-        .setManifestUrl(DashTestData.H264_MANIFEST)
-        .setFullPlaybackNoSeeking(true)
-        .setCanIncludeAdditionalVideoFormats(true)
-        .setAudioVideoFormats(DashTestData.AAC_AUDIO_REPRESENTATION_ID,
-            DashTestData.H264_CDD_ADAPTIVE)
-        .run();
-  }
-
-  public void testH264AdaptiveWithSeeking() throws DecoderQueryException {
-    if (Util.SDK_INT < 16 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_H264)) {
-      // Pass.
-      return;
-    }
-    final String streamName = "test_h264_adaptive_with_seeking";
-    testRunner
-        .setStreamName(streamName)
-        .setManifestUrl(DashTestData.H264_MANIFEST)
-        .setFullPlaybackNoSeeking(false)
-        .setCanIncludeAdditionalVideoFormats(true)
-        .setActionSchedule(SEEKING_SCHEDULE)
-        .setAudioVideoFormats(DashTestData.AAC_AUDIO_REPRESENTATION_ID,
-            DashTestData.H264_CDD_ADAPTIVE)
-        .run();
-  }
-
-  public void testH264AdaptiveWithRendererDisabling() throws DecoderQueryException {
-    if (Util.SDK_INT < 16 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_H264)) {
-      // Pass.
-      return;
-    }
-    final String streamName = "test_h264_adaptive_with_renderer_disabling";
-    testRunner
-        .setStreamName(streamName)
-        .setManifestUrl(DashTestData.H264_MANIFEST)
-        .setFullPlaybackNoSeeking(false)
-        .setCanIncludeAdditionalVideoFormats(true)
-        .setActionSchedule(RENDERER_DISABLING_SCHEDULE)
-        .setAudioVideoFormats(DashTestData.AAC_AUDIO_REPRESENTATION_ID,
-            DashTestData.H264_CDD_ADAPTIVE)
-        .run();
-  }
-
-  // H265 CDD.
-
-  public void testH265Fixed() {
-    if (Util.SDK_INT < 23) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_h265_fixed")
-        .setManifestUrl(DashTestData.H265_MANIFEST)
-        .setFullPlaybackNoSeeking(true)
-        .setCanIncludeAdditionalVideoFormats(false)
-        .setAudioVideoFormats(DashTestData.AAC_AUDIO_REPRESENTATION_ID, DashTestData.H265_CDD_FIXED)
-        .run();
-  }
-
-  public void testH265Adaptive() throws DecoderQueryException {
-    if (Util.SDK_INT < 24 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_H265)) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_h265_adaptive")
-        .setManifestUrl(DashTestData.H265_MANIFEST)
-        .setFullPlaybackNoSeeking(true)
-        .setCanIncludeAdditionalVideoFormats(true)
-        .setAudioVideoFormats(DashTestData.AAC_AUDIO_REPRESENTATION_ID,
-            DashTestData.H265_CDD_ADAPTIVE)
-        .run();
-  }
-
-  public void testH265AdaptiveWithSeeking() throws DecoderQueryException {
-    if (Util.SDK_INT < 24 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_H265)) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_h265_adaptive_with_seeking")
-        .setManifestUrl(DashTestData.H265_MANIFEST)
-        .setFullPlaybackNoSeeking(false)
-        .setCanIncludeAdditionalVideoFormats(true)
-        .setActionSchedule(SEEKING_SCHEDULE)
-        .setAudioVideoFormats(DashTestData.AAC_AUDIO_REPRESENTATION_ID,
-            DashTestData.H265_CDD_ADAPTIVE)
-        .run();
-  }
-
-  public void testH265AdaptiveWithRendererDisabling() throws DecoderQueryException {
-    if (Util.SDK_INT < 24 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_H265)) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_h265_adaptive_with_renderer_disabling")
-        .setManifestUrl(DashTestData.H265_MANIFEST)
-        .setFullPlaybackNoSeeking(false)
-        .setCanIncludeAdditionalVideoFormats(true)
-        .setActionSchedule(RENDERER_DISABLING_SCHEDULE)
-        .setAudioVideoFormats(DashTestData.AAC_AUDIO_REPRESENTATION_ID,
-            DashTestData.H265_CDD_ADAPTIVE)
-        .run();
-  }
-
-  // VP9 (CDD).
-
-  public void testVp9Fixed360p() {
-    if (Util.SDK_INT < 23) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_vp9_fixed_360p")
-        .setManifestUrl(DashTestData.VP9_MANIFEST)
-        .setFullPlaybackNoSeeking(true)
-        .setCanIncludeAdditionalVideoFormats(false)
-        .setAudioVideoFormats(DashTestData.VP9_VORBIS_AUDIO_REPRESENTATION_ID,
-            DashTestData.VP9_CDD_FIXED)
-        .run();
-  }
-
-  public void testVp9Adaptive() throws DecoderQueryException {
-    if (Util.SDK_INT < 24 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_VP9)) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_vp9_adaptive")
-        .setManifestUrl(DashTestData.VP9_MANIFEST)
-        .setFullPlaybackNoSeeking(true)
-        .setCanIncludeAdditionalVideoFormats(true)
-        .setAudioVideoFormats(DashTestData.VP9_VORBIS_AUDIO_REPRESENTATION_ID,
-            DashTestData.VP9_CDD_ADAPTIVE)
-        .run();
-  }
-
-  public void testVp9AdaptiveWithSeeking() throws DecoderQueryException {
-    if (Util.SDK_INT < 24 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_VP9)) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_vp9_adaptive_with_seeking")
-        .setManifestUrl(DashTestData.VP9_MANIFEST)
-        .setFullPlaybackNoSeeking(false)
-        .setCanIncludeAdditionalVideoFormats(true)
-        .setActionSchedule(SEEKING_SCHEDULE)
-        .setAudioVideoFormats(DashTestData.VP9_VORBIS_AUDIO_REPRESENTATION_ID,
-            DashTestData.VP9_CDD_ADAPTIVE)
-        .run();
-  }
-
-  public void testVp9AdaptiveWithRendererDisabling() throws DecoderQueryException {
-    if (Util.SDK_INT < 24 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_VP9)) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_vp9_adaptive_with_renderer_disabling")
-        .setManifestUrl(DashTestData.VP9_MANIFEST)
-        .setFullPlaybackNoSeeking(false)
-        .setCanIncludeAdditionalVideoFormats(true)
-        .setActionSchedule(RENDERER_DISABLING_SCHEDULE)
-        .setAudioVideoFormats(DashTestData.VP9_VORBIS_AUDIO_REPRESENTATION_ID,
-            DashTestData.VP9_CDD_ADAPTIVE)
-        .run();
-  }
-
-  // H264: Other frame-rates for output buffer count assertions.
-
-  // 23.976 fps.
-  public void test23FpsH264Fixed() {
-    if (Util.SDK_INT < 23) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_23fps_h264_fixed")
-        .setManifestUrl(DashTestData.H264_23_MANIFEST)
-        .setFullPlaybackNoSeeking(true)
-        .setCanIncludeAdditionalVideoFormats(false)
-        .setAudioVideoFormats(DashTestData.AAC_AUDIO_REPRESENTATION_ID,
-            DashTestData.H264_BASELINE_480P_23FPS_VIDEO_REPRESENTATION_ID)
-        .run();
-  }
-
-  // 24 fps.
-  public void test24FpsH264Fixed() {
-    if (Util.SDK_INT < 23) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_24fps_h264_fixed")
-        .setManifestUrl(DashTestData.H264_24_MANIFEST)
-        .setFullPlaybackNoSeeking(true)
-        .setCanIncludeAdditionalVideoFormats(false)
-        .setAudioVideoFormats(DashTestData.AAC_AUDIO_REPRESENTATION_ID,
-            DashTestData.H264_BASELINE_480P_24FPS_VIDEO_REPRESENTATION_ID)
-        .run();
-  }
-
-  // 29.97 fps.
-  public void test29FpsH264Fixed() {
-    if (Util.SDK_INT < 23) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_29fps_h264_fixed")
-        .setManifestUrl(DashTestData.H264_29_MANIFEST)
-        .setFullPlaybackNoSeeking(true)
-        .setCanIncludeAdditionalVideoFormats(false)
-        .setAudioVideoFormats(DashTestData.AAC_AUDIO_REPRESENTATION_ID,
-            DashTestData.H264_BASELINE_480P_29FPS_VIDEO_REPRESENTATION_ID)
-        .run();
-  }
-
-  // Widevine encrypted media tests.
-  // H264 CDD.
-
-  public void testWidevineH264Fixed() throws DecoderQueryException {
-    if (Util.SDK_INT < 18) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_widevine_h264_fixed")
-        .setManifestUrl(DashTestData.WIDEVINE_H264_MANIFEST)
-        .setWidevineInfo(MimeTypes.VIDEO_H264, true)
-        .setFullPlaybackNoSeeking(true)
-        .setCanIncludeAdditionalVideoFormats(false)
-        .setAudioVideoFormats(DashTestData.WIDEVINE_AAC_AUDIO_REPRESENTATION_ID,
-            DashTestData.WIDEVINE_H264_CDD_FIXED)
-        .run();
-  }
-
-  public void testWidevineH264Adaptive() throws DecoderQueryException {
-    if (Util.SDK_INT < 18 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_H264)) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_widevine_h264_adaptive")
-        .setManifestUrl(DashTestData.WIDEVINE_H264_MANIFEST)
-        .setWidevineInfo(MimeTypes.VIDEO_H264, true)
-        .setFullPlaybackNoSeeking(true)
-        .setCanIncludeAdditionalVideoFormats(true)
-        .setAudioVideoFormats(DashTestData.WIDEVINE_AAC_AUDIO_REPRESENTATION_ID,
-            DashTestData.WIDEVINE_H264_CDD_ADAPTIVE)
-        .run();
-  }
-
-  public void testWidevineH264AdaptiveWithSeeking() throws DecoderQueryException {
-    if (Util.SDK_INT < 18 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_H264)) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_widevine_h264_adaptive_with_seeking")
-        .setManifestUrl(DashTestData.WIDEVINE_H264_MANIFEST)
-        .setWidevineInfo(MimeTypes.VIDEO_H264, true)
-        .setFullPlaybackNoSeeking(false)
-        .setCanIncludeAdditionalVideoFormats(true)
-        .setActionSchedule(SEEKING_SCHEDULE)
-        .setAudioVideoFormats(DashTestData.WIDEVINE_AAC_AUDIO_REPRESENTATION_ID,
-            DashTestData.WIDEVINE_H264_CDD_ADAPTIVE)
-        .run();
-  }
-
-  public void testWidevineH264AdaptiveWithRendererDisabling() throws DecoderQueryException {
-    if (Util.SDK_INT < 18 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_H264)) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_widevine_h264_adaptive_with_renderer_disabling")
-        .setManifestUrl(DashTestData.WIDEVINE_H264_MANIFEST)
-        .setWidevineInfo(MimeTypes.VIDEO_H264, true)
-        .setFullPlaybackNoSeeking(false)
-        .setCanIncludeAdditionalVideoFormats(true)
-        .setActionSchedule(RENDERER_DISABLING_SCHEDULE)
-        .setAudioVideoFormats(DashTestData.WIDEVINE_AAC_AUDIO_REPRESENTATION_ID,
-            DashTestData.WIDEVINE_H264_CDD_ADAPTIVE)
-        .run();
-  }
-
-  // H265 CDD.
-
-  public void testWidevineH265Fixed() throws DecoderQueryException {
-    if (Util.SDK_INT < 23) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_widevine_h265_fixed")
-        .setManifestUrl(DashTestData.WIDEVINE_H265_MANIFEST)
-        .setWidevineInfo(MimeTypes.VIDEO_H265, true)
-        .setFullPlaybackNoSeeking(true)
-        .setCanIncludeAdditionalVideoFormats(false)
-        .setAudioVideoFormats(DashTestData.WIDEVINE_AAC_AUDIO_REPRESENTATION_ID,
-            DashTestData.WIDEVINE_H265_CDD_FIXED)
-        .run();
-  }
-
-  public void testWidevineH265Adaptive() throws DecoderQueryException {
-    if (Util.SDK_INT < 24 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_H265)) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_widevine_h265_adaptive")
-        .setManifestUrl(DashTestData.WIDEVINE_H265_MANIFEST)
-        .setWidevineInfo(MimeTypes.VIDEO_H265, true)
-        .setFullPlaybackNoSeeking(true)
-        .setCanIncludeAdditionalVideoFormats(true)
-        .setAudioVideoFormats(DashTestData.WIDEVINE_AAC_AUDIO_REPRESENTATION_ID,
-            DashTestData.WIDEVINE_H265_CDD_ADAPTIVE)
-        .run();
-  }
-
-  public void testWidevineH265AdaptiveWithSeeking() throws DecoderQueryException {
-    if (Util.SDK_INT < 24 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_H265)) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_widevine_h265_adaptive_with_seeking")
-        .setManifestUrl(DashTestData.WIDEVINE_H265_MANIFEST)
-        .setWidevineInfo(MimeTypes.VIDEO_H265, true)
-        .setFullPlaybackNoSeeking(false)
-        .setCanIncludeAdditionalVideoFormats(true)
-        .setActionSchedule(SEEKING_SCHEDULE)
-        .setAudioVideoFormats(DashTestData.WIDEVINE_AAC_AUDIO_REPRESENTATION_ID,
-            DashTestData.WIDEVINE_H265_CDD_ADAPTIVE)
-        .run();
-  }
-
-  public void testWidevineH265AdaptiveWithRendererDisabling() throws DecoderQueryException {
-    if (Util.SDK_INT < 24 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_H265)) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_widevine_h265_adaptive_with_renderer_disabling")
-        .setManifestUrl(DashTestData.WIDEVINE_H265_MANIFEST)
-        .setWidevineInfo(MimeTypes.VIDEO_H265, true)
-        .setFullPlaybackNoSeeking(false)
-        .setCanIncludeAdditionalVideoFormats(true)
-        .setActionSchedule(RENDERER_DISABLING_SCHEDULE)
-        .setAudioVideoFormats(DashTestData.WIDEVINE_AAC_AUDIO_REPRESENTATION_ID,
-            DashTestData.WIDEVINE_H265_CDD_ADAPTIVE)
-        .run();
-  }
-
-  // VP9 (CDD).
-
-  public void testWidevineVp9Fixed360p() throws DecoderQueryException {
-    if (Util.SDK_INT < 23) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_widevine_vp9_fixed_360p")
-        .setManifestUrl(DashTestData.WIDEVINE_VP9_MANIFEST)
-        .setWidevineInfo(MimeTypes.VIDEO_VP9, true)
-        .setFullPlaybackNoSeeking(true)
-        .setCanIncludeAdditionalVideoFormats(false)
-        .setAudioVideoFormats(DashTestData.WIDEVINE_VP9_AAC_AUDIO_REPRESENTATION_ID,
-            DashTestData.WIDEVINE_VP9_CDD_FIXED)
-        .run();
-  }
-
-  public void testWidevineVp9Adaptive() throws DecoderQueryException {
-    if (Util.SDK_INT < 24 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_VP9)) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_widevine_vp9_adaptive")
-        .setManifestUrl(DashTestData.WIDEVINE_VP9_MANIFEST)
-        .setWidevineInfo(MimeTypes.VIDEO_VP9, true)
-        .setFullPlaybackNoSeeking(true)
-        .setCanIncludeAdditionalVideoFormats(true)
-        .setAudioVideoFormats(DashTestData.WIDEVINE_VP9_AAC_AUDIO_REPRESENTATION_ID,
-            DashTestData.WIDEVINE_VP9_CDD_ADAPTIVE)
-        .run();
-  }
-
-  public void testWidevineVp9AdaptiveWithSeeking() throws DecoderQueryException {
-    if (Util.SDK_INT < 24 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_VP9)) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_widevine_vp9_adaptive_with_seeking")
-        .setManifestUrl(DashTestData.WIDEVINE_VP9_MANIFEST)
-        .setWidevineInfo(MimeTypes.VIDEO_VP9, true)
-        .setFullPlaybackNoSeeking(false)
-        .setCanIncludeAdditionalVideoFormats(true)
-        .setActionSchedule(SEEKING_SCHEDULE)
-        .setAudioVideoFormats(DashTestData.WIDEVINE_VP9_AAC_AUDIO_REPRESENTATION_ID,
-            DashTestData.WIDEVINE_VP9_CDD_ADAPTIVE)
-        .run();
-  }
-
-  public void testWidevineVp9AdaptiveWithRendererDisabling() throws DecoderQueryException {
-    if (Util.SDK_INT < 24 || shouldSkipAdaptiveTest(MimeTypes.VIDEO_VP9)) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_widevine_vp9_adaptive_with_renderer_disabling")
-        .setManifestUrl(DashTestData.WIDEVINE_VP9_MANIFEST)
-        .setWidevineInfo(MimeTypes.VIDEO_VP9, true)
-        .setFullPlaybackNoSeeking(false)
-        .setCanIncludeAdditionalVideoFormats(true)
-        .setActionSchedule(RENDERER_DISABLING_SCHEDULE)
-        .setAudioVideoFormats(DashTestData.WIDEVINE_VP9_AAC_AUDIO_REPRESENTATION_ID,
-            DashTestData.WIDEVINE_VP9_CDD_ADAPTIVE)
-        .run();
-  }
-
-  // H264: Other frame-rates for output buffer count assertions.
-
-  // 23.976 fps.
-  public void testWidevine23FpsH264Fixed() throws DecoderQueryException {
-    if (Util.SDK_INT < 23) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_widevine_23fps_h264_fixed")
-        .setManifestUrl(DashTestData.WIDEVINE_H264_23_MANIFEST)
-        .setWidevineInfo(MimeTypes.VIDEO_H264, true)
-        .setFullPlaybackNoSeeking(true)
-        .setCanIncludeAdditionalVideoFormats(false)
-        .setAudioVideoFormats(DashTestData.WIDEVINE_AAC_AUDIO_REPRESENTATION_ID,
-            DashTestData.WIDEVINE_H264_BASELINE_480P_23FPS_VIDEO_REPRESENTATION_ID)
-        .run();
-  }
-
-  // 24 fps.
-  public void testWidevine24FpsH264Fixed() throws DecoderQueryException {
-    if (Util.SDK_INT < 23) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_widevine_24fps_h264_fixed")
-        .setManifestUrl(DashTestData.WIDEVINE_H264_24_MANIFEST)
-        .setWidevineInfo(MimeTypes.VIDEO_H264, true)
-        .setFullPlaybackNoSeeking(true)
-        .setCanIncludeAdditionalVideoFormats(false)
-        .setAudioVideoFormats(DashTestData.WIDEVINE_AAC_AUDIO_REPRESENTATION_ID,
-            DashTestData.WIDEVINE_H264_BASELINE_480P_24FPS_VIDEO_REPRESENTATION_ID)
-        .run();
-  }
-
-  // 29.97 fps.
-  public void testWidevine29FpsH264Fixed() throws DecoderQueryException {
-    if (Util.SDK_INT < 23) {
-      // Pass.
-      return;
-    }
-    testRunner
-        .setStreamName("test_widevine_29fps_h264_fixed")
-        .setManifestUrl(DashTestData.WIDEVINE_H264_29_MANIFEST)
-        .setWidevineInfo(MimeTypes.VIDEO_H264, true)
-        .setFullPlaybackNoSeeking(true)
-        .setCanIncludeAdditionalVideoFormats(false)
-        .setAudioVideoFormats(DashTestData.WIDEVINE_AAC_AUDIO_REPRESENTATION_ID,
-            DashTestData.WIDEVINE_H264_BASELINE_480P_29FPS_VIDEO_REPRESENTATION_ID)
-        .run();
-  }
-
-  // Internal.
-
-  private static boolean shouldSkipAdaptiveTest(String mimeType) throws DecoderQueryException {
-    MediaCodecInfo decoderInfo = MediaCodecUtil.getDecoderInfo(mimeType, false);
-    assertNotNull(decoderInfo);
-    if (decoderInfo.adaptive) {
-      return false;
-    }
-    assertTrue(Util.SDK_INT < 21);
-    return true;
-  }
-
-}
diff --git a/playbacktests/src/androidTest/java/com/google/android/exoplayer2/playbacktests/gts/DashTestData.java b/playbacktests/src/androidTest/java/com/google/android/exoplayer2/playbacktests/gts/DashTestData.java
deleted file mode 100644
index 33e24aaa13..0000000000
--- a/playbacktests/src/androidTest/java/com/google/android/exoplayer2/playbacktests/gts/DashTestData.java
+++ /dev/null
@@ -1,158 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.playbacktests.gts;
-
-import com.google.android.exoplayer2.util.Util;
-
-/**
- * Test data for DASH tests.
- */
-public final class DashTestData {
-
-  private static final String BASE_URL = "https://storage.googleapis.com/exoplayer-test-media-1/"
-      + "gen-4/screens/dash-vod-single-segment/";
-  // Clear content manifests.
-  public static final String H264_MANIFEST = BASE_URL + "manifest-h264.mpd";
-  public static final String H265_MANIFEST = BASE_URL + "manifest-h265.mpd";
-  public static final String VP9_MANIFEST = BASE_URL + "manifest-vp9.mpd";
-  public static final String H264_23_MANIFEST = BASE_URL + "manifest-h264-23.mpd";
-  public static final String H264_24_MANIFEST = BASE_URL + "manifest-h264-24.mpd";
-  public static final String H264_29_MANIFEST = BASE_URL + "manifest-h264-29.mpd";
-  // Widevine encrypted content manifests.
-  public static final String WIDEVINE_H264_MANIFEST = BASE_URL + "manifest-h264-enc.mpd";
-  public static final String WIDEVINE_H265_MANIFEST = BASE_URL + "manifest-h265-enc.mpd";
-  public static final String WIDEVINE_VP9_MANIFEST = BASE_URL + "manifest-vp9-enc.mpd";
-  public static final String WIDEVINE_H264_23_MANIFEST = BASE_URL + "manifest-h264-23-enc.mpd";
-  public static final String WIDEVINE_H264_24_MANIFEST = BASE_URL + "manifest-h264-24-enc.mpd";
-  public static final String WIDEVINE_H264_29_MANIFEST = BASE_URL + "manifest-h264-29-enc.mpd";
-
-  public static final String AAC_AUDIO_REPRESENTATION_ID = "141";
-  public static final String H264_BASELINE_240P_VIDEO_REPRESENTATION_ID = "avc-baseline-240";
-  public static final String H264_BASELINE_480P_VIDEO_REPRESENTATION_ID = "avc-baseline-480";
-  public static final String H264_MAIN_240P_VIDEO_REPRESENTATION_ID = "avc-main-240";
-  public static final String H264_MAIN_480P_VIDEO_REPRESENTATION_ID = "avc-main-480";
-  // The highest quality H264 format mandated by the Android CDD.
-  public static final String H264_CDD_FIXED = Util.SDK_INT < 23
-      ? H264_BASELINE_480P_VIDEO_REPRESENTATION_ID : H264_MAIN_480P_VIDEO_REPRESENTATION_ID;
-  // Multiple H264 formats mandated by the Android CDD. Note: The CDD actually mandated main profile
-  // support from API level 23, but we opt to test only from 24 due to known issues on API level 23
-  // when switching between baseline and main profiles on certain devices.
-  public static final String[] H264_CDD_ADAPTIVE = Util.SDK_INT < 24
-      ? new String[] {
-          H264_BASELINE_240P_VIDEO_REPRESENTATION_ID,
-          H264_BASELINE_480P_VIDEO_REPRESENTATION_ID}
-      : new String[] {
-          H264_BASELINE_240P_VIDEO_REPRESENTATION_ID,
-          H264_BASELINE_480P_VIDEO_REPRESENTATION_ID,
-          H264_MAIN_240P_VIDEO_REPRESENTATION_ID,
-          H264_MAIN_480P_VIDEO_REPRESENTATION_ID};
-
-  public static final String H264_BASELINE_480P_23FPS_VIDEO_REPRESENTATION_ID =
-      "avc-baseline-480-23";
-  public static final String H264_BASELINE_480P_24FPS_VIDEO_REPRESENTATION_ID =
-      "avc-baseline-480-24";
-  public static final String H264_BASELINE_480P_29FPS_VIDEO_REPRESENTATION_ID =
-      "avc-baseline-480-29";
-
-  public static final String H265_BASELINE_288P_VIDEO_REPRESENTATION_ID = "hevc-main-288";
-  public static final String H265_BASELINE_360P_VIDEO_REPRESENTATION_ID = "hevc-main-360";
-  // The highest quality H265 format mandated by the Android CDD.
-  public static final String H265_CDD_FIXED = H265_BASELINE_360P_VIDEO_REPRESENTATION_ID;
-  // Multiple H265 formats mandated by the Android CDD.
-  public static final String[] H265_CDD_ADAPTIVE =
-      new String[] {
-          H265_BASELINE_288P_VIDEO_REPRESENTATION_ID,
-          H265_BASELINE_360P_VIDEO_REPRESENTATION_ID};
-
-  public static final String VP9_VORBIS_AUDIO_REPRESENTATION_ID = "4";
-  public static final String VP9_180P_VIDEO_REPRESENTATION_ID = "0";
-  public static final String VP9_360P_VIDEO_REPRESENTATION_ID = "1";
-  // The highest quality VP9 format mandated by the Android CDD.
-  public static final String VP9_CDD_FIXED = VP9_360P_VIDEO_REPRESENTATION_ID;
-  // Multiple VP9 formats mandated by the Android CDD.
-  public static final String[] VP9_CDD_ADAPTIVE =
-      new String[] {
-          VP9_180P_VIDEO_REPRESENTATION_ID,
-          VP9_360P_VIDEO_REPRESENTATION_ID};
-
-  // Widevine encrypted content representation ids.
-  public static final String WIDEVINE_AAC_AUDIO_REPRESENTATION_ID = "0";
-  public static final String WIDEVINE_H264_BASELINE_240P_VIDEO_REPRESENTATION_ID = "2";
-  public static final String WIDEVINE_H264_BASELINE_480P_VIDEO_REPRESENTATION_ID = "3";
-  public static final String WIDEVINE_H264_MAIN_240P_VIDEO_REPRESENTATION_ID = "4";
-  public static final String WIDEVINE_H264_MAIN_480P_VIDEO_REPRESENTATION_ID = "5";
-  // The highest quality H264 format mandated by the Android CDD.
-  public static final String WIDEVINE_H264_CDD_FIXED = Util.SDK_INT < 23
-      ? WIDEVINE_H264_BASELINE_480P_VIDEO_REPRESENTATION_ID
-      : WIDEVINE_H264_MAIN_480P_VIDEO_REPRESENTATION_ID;
-  // Multiple H264 formats mandated by the Android CDD. Note: The CDD actually mandated main profile
-  // support from API level 23, but we opt to test only from 24 due to known issues on API level 23
-  // when switching between baseline and main profiles on certain devices.
-  public static final String[] WIDEVINE_H264_CDD_ADAPTIVE = Util.SDK_INT < 24
-      ? new String[] {
-          WIDEVINE_H264_BASELINE_240P_VIDEO_REPRESENTATION_ID,
-          WIDEVINE_H264_BASELINE_480P_VIDEO_REPRESENTATION_ID}
-      : new String[] {
-          WIDEVINE_H264_BASELINE_240P_VIDEO_REPRESENTATION_ID,
-          WIDEVINE_H264_BASELINE_480P_VIDEO_REPRESENTATION_ID,
-          WIDEVINE_H264_MAIN_240P_VIDEO_REPRESENTATION_ID,
-          WIDEVINE_H264_MAIN_480P_VIDEO_REPRESENTATION_ID};
-
-  public static final String WIDEVINE_H264_BASELINE_480P_23FPS_VIDEO_REPRESENTATION_ID = "3";
-  public static final String WIDEVINE_H264_BASELINE_480P_24FPS_VIDEO_REPRESENTATION_ID = "3";
-  public static final String WIDEVINE_H264_BASELINE_480P_29FPS_VIDEO_REPRESENTATION_ID = "3";
-
-  public static final String WIDEVINE_H265_BASELINE_288P_VIDEO_REPRESENTATION_ID = "2";
-  public static final String WIDEVINE_H265_BASELINE_360P_VIDEO_REPRESENTATION_ID = "3";
-  // The highest quality H265 format mandated by the Android CDD.
-  public static final String WIDEVINE_H265_CDD_FIXED =
-      WIDEVINE_H265_BASELINE_360P_VIDEO_REPRESENTATION_ID;
-  // Multiple H265 formats mandated by the Android CDD.
-  public static final String[] WIDEVINE_H265_CDD_ADAPTIVE =
-      new String[] {
-          WIDEVINE_H265_BASELINE_288P_VIDEO_REPRESENTATION_ID,
-          WIDEVINE_H265_BASELINE_360P_VIDEO_REPRESENTATION_ID};
-
-  public static final String WIDEVINE_VP9_AAC_AUDIO_REPRESENTATION_ID = "0";
-  public static final String WIDEVINE_VP9_180P_VIDEO_REPRESENTATION_ID = "2";
-  public static final String WIDEVINE_VP9_360P_VIDEO_REPRESENTATION_ID = "3";
-  // The highest quality VP9 format mandated by the Android CDD.
-  public static final String WIDEVINE_VP9_CDD_FIXED = WIDEVINE_VP9_360P_VIDEO_REPRESENTATION_ID;
-  // Multiple VP9 formats mandated by the Android CDD.
-  public static final String[] WIDEVINE_VP9_CDD_ADAPTIVE =
-      new String[] {
-          WIDEVINE_VP9_180P_VIDEO_REPRESENTATION_ID,
-          WIDEVINE_VP9_360P_VIDEO_REPRESENTATION_ID};
-
-  private static final String WIDEVINE_LICENSE_URL =
-      "https://proxy.uat.widevine.com/proxy?provider=widevine_test";
-  private static final String WIDEVINE_SW_CRYPTO_CONTENT_ID = "&video_id=exoplayer_test_1";
-  private static final String WIDEVINE_HW_SECURE_DECODE_CONTENT_ID = "&video_id=exoplayer_test_2";
-
-  public static String getWidevineLicenseUrl(boolean videoIdRequiredInLicenseUrl,
-      boolean useL1Widevine) {
-    if (!videoIdRequiredInLicenseUrl) {
-      return WIDEVINE_LICENSE_URL;
-    } else {
-      return WIDEVINE_LICENSE_URL
-          + (useL1Widevine ? WIDEVINE_HW_SECURE_DECODE_CONTENT_ID : WIDEVINE_SW_CRYPTO_CONTENT_ID);
-    }
-  }
-
-  private DashTestData() {
-  }
-
-}
diff --git a/playbacktests/src/androidTest/java/com/google/android/exoplayer2/playbacktests/gts/DashTestRunner.java b/playbacktests/src/androidTest/java/com/google/android/exoplayer2/playbacktests/gts/DashTestRunner.java
deleted file mode 100644
index 9b8d6483b9..0000000000
--- a/playbacktests/src/androidTest/java/com/google/android/exoplayer2/playbacktests/gts/DashTestRunner.java
+++ /dev/null
@@ -1,460 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.playbacktests.gts;
-
-import static com.google.android.exoplayer2.C.WIDEVINE_UUID;
-
-import android.annotation.TargetApi;
-import android.app.Instrumentation;
-import android.media.MediaDrm;
-import android.media.UnsupportedSchemeException;
-import android.net.Uri;
-import android.util.Log;
-import android.view.Surface;
-import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.ExoPlaybackException;
-import com.google.android.exoplayer2.ExoPlayerFactory;
-import com.google.android.exoplayer2.Format;
-import com.google.android.exoplayer2.RendererCapabilities;
-import com.google.android.exoplayer2.SimpleExoPlayer;
-import com.google.android.exoplayer2.decoder.DecoderCounters;
-import com.google.android.exoplayer2.drm.DefaultDrmSessionManager;
-import com.google.android.exoplayer2.drm.DrmSessionManager;
-import com.google.android.exoplayer2.drm.FrameworkMediaCrypto;
-import com.google.android.exoplayer2.drm.HttpMediaDrmCallback;
-import com.google.android.exoplayer2.drm.MediaDrmCallback;
-import com.google.android.exoplayer2.drm.UnsupportedDrmException;
-import com.google.android.exoplayer2.mediacodec.MediaCodecUtil;
-import com.google.android.exoplayer2.source.MediaSource;
-import com.google.android.exoplayer2.source.TrackGroup;
-import com.google.android.exoplayer2.source.TrackGroupArray;
-import com.google.android.exoplayer2.source.dash.DashMediaSource;
-import com.google.android.exoplayer2.source.dash.DefaultDashChunkSource;
-import com.google.android.exoplayer2.testutil.ActionSchedule;
-import com.google.android.exoplayer2.testutil.DebugRenderersFactory;
-import com.google.android.exoplayer2.testutil.DecoderCountersUtil;
-import com.google.android.exoplayer2.testutil.ExoHostedTest;
-import com.google.android.exoplayer2.testutil.HostActivity;
-import com.google.android.exoplayer2.testutil.HostActivity.HostedTest;
-import com.google.android.exoplayer2.testutil.MetricsLogger;
-import com.google.android.exoplayer2.trackselection.FixedTrackSelection;
-import com.google.android.exoplayer2.trackselection.MappingTrackSelector;
-import com.google.android.exoplayer2.trackselection.RandomTrackSelection;
-import com.google.android.exoplayer2.trackselection.TrackSelection;
-import com.google.android.exoplayer2.upstream.BandwidthMeter;
-import com.google.android.exoplayer2.upstream.DataSource;
-import com.google.android.exoplayer2.upstream.DefaultDataSourceFactory;
-import com.google.android.exoplayer2.upstream.DefaultHttpDataSourceFactory;
-import com.google.android.exoplayer2.upstream.TransferListener;
-import com.google.android.exoplayer2.util.Assertions;
-import com.google.android.exoplayer2.util.Util;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import junit.framework.AssertionFailedError;
-
-/** {@link DashHostedTest} builder. */
-public final class DashTestRunner {
-
-  static final int VIDEO_RENDERER_INDEX = 0;
-  static final int AUDIO_RENDERER_INDEX = 1;
-
-  private static final long TEST_TIMEOUT_MS = 5 * 60 * 1000;
-
-  private static final String REPORT_NAME = "GtsExoPlayerTestCases";
-  private static final String REPORT_OBJECT_NAME = "playbacktest";
-
-  // Whether adaptive tests should enable video formats beyond those mandated by the Android CDD
-  // if the device advertises support for them.
-  private static final boolean ALLOW_ADDITIONAL_VIDEO_FORMATS = Util.SDK_INT >= 24;
-
-  private static final String AUDIO_TAG_SUFFIX = ":Audio";
-  private static final String VIDEO_TAG_SUFFIX = ":Video";
-
-  private static final int MIN_LOADABLE_RETRY_COUNT = 10;
-  private static final int MAX_CONSECUTIVE_DROPPED_VIDEO_FRAMES = 10;
-  private static final float MAX_DROPPED_VIDEO_FRAME_FRACTION = 0.01f;
-
-  private static final String WIDEVINE_SECURITY_LEVEL_1 = "L1";
-  private static final String WIDEVINE_SECURITY_LEVEL_3 = "L3";
-  private static final String SECURITY_LEVEL_PROPERTY = "securityLevel";
-
-  private final String tag;
-  private final HostActivity activity;
-  private final Instrumentation instrumentation;
-
-  private String streamName;
-  private boolean fullPlaybackNoSeeking;
-  private String audioFormat;
-  private boolean canIncludeAdditionalVideoFormats;
-  private ActionSchedule actionSchedule;
-  private byte[] offlineLicenseKeySetId;
-  private String[] videoFormats;
-  private String manifestUrl;
-  private boolean useL1Widevine;
-  private String widevineLicenseUrl;
-  private DataSource.Factory dataSourceFactory;
-
-  @TargetApi(18)
-  @SuppressWarnings("ResourceType")
-  public static boolean isL1WidevineAvailable(String mimeType) {
-    try {
-      // Force L3 if secure decoder is not available.
-      if (MediaCodecUtil.getDecoderInfo(mimeType, true) == null) {
-        return false;
-      }
-      MediaDrm mediaDrm = new MediaDrm(WIDEVINE_UUID);
-      String securityProperty = mediaDrm.getPropertyString(SECURITY_LEVEL_PROPERTY);
-      mediaDrm.release();
-      return WIDEVINE_SECURITY_LEVEL_1.equals(securityProperty);
-    } catch (MediaCodecUtil.DecoderQueryException | UnsupportedSchemeException e) {
-      throw new IllegalStateException(e);
-    }
-  }
-
-  public DashTestRunner(String tag, HostActivity activity, Instrumentation instrumentation) {
-    this.tag = tag;
-    this.activity = activity;
-    this.instrumentation = instrumentation;
-  }
-
-  public DashTestRunner setStreamName(String streamName) {
-    this.streamName = streamName;
-    return this;
-  }
-
-  public DashTestRunner setFullPlaybackNoSeeking(boolean fullPlaybackNoSeeking) {
-    this.fullPlaybackNoSeeking = fullPlaybackNoSeeking;
-    return this;
-  }
-
-  public DashTestRunner setCanIncludeAdditionalVideoFormats(
-      boolean canIncludeAdditionalVideoFormats) {
-    this.canIncludeAdditionalVideoFormats = canIncludeAdditionalVideoFormats
-        && ALLOW_ADDITIONAL_VIDEO_FORMATS;
-    return this;
-  }
-
-  public DashTestRunner setActionSchedule(ActionSchedule actionSchedule) {
-    this.actionSchedule = actionSchedule;
-    return this;
-  }
-
-  public DashTestRunner setOfflineLicenseKeySetId(byte[] offlineLicenseKeySetId) {
-    this.offlineLicenseKeySetId = offlineLicenseKeySetId;
-    return this;
-  }
-
-  public DashTestRunner setAudioVideoFormats(String audioFormat, String... videoFormats) {
-    this.audioFormat = audioFormat;
-    this.videoFormats = videoFormats;
-    return this;
-  }
-
-  public DashTestRunner setManifestUrl(String manifestUrl) {
-    this.manifestUrl = manifestUrl;
-    return this;
-  }
-
-  public DashTestRunner setWidevineInfo(String mimeType, boolean videoIdRequiredInLicenseUrl) {
-    this.useL1Widevine = isL1WidevineAvailable(mimeType);
-    this.widevineLicenseUrl = DashTestData.getWidevineLicenseUrl(videoIdRequiredInLicenseUrl,
-        useL1Widevine);
-    return this;
-  }
-
-  public DashTestRunner setDataSourceFactory(DataSource.Factory dataSourceFactory) {
-    this.dataSourceFactory = dataSourceFactory;
-    return this;
-  }
-
-  public void run() {
-    DashHostedTest test = createDashHostedTest(canIncludeAdditionalVideoFormats, false,
-        instrumentation);
-    activity.runTest(test, TEST_TIMEOUT_MS);
-    // Retry test exactly once if adaptive test fails due to excessive dropped buffers when
-    // playing non-CDD required formats (b/28220076).
-    if (test.needsCddLimitedRetry) {
-      activity.runTest(createDashHostedTest(false, true, instrumentation), TEST_TIMEOUT_MS);
-    }
-  }
-
-  private DashHostedTest createDashHostedTest(boolean canIncludeAdditionalVideoFormats,
-      boolean isCddLimitedRetry, Instrumentation instrumentation) {
-    MetricsLogger metricsLogger = MetricsLogger.Factory.createDefault(instrumentation, tag,
-        REPORT_NAME, REPORT_OBJECT_NAME);
-    return new DashHostedTest(tag, streamName, manifestUrl, metricsLogger, fullPlaybackNoSeeking,
-        audioFormat, canIncludeAdditionalVideoFormats, isCddLimitedRetry, actionSchedule,
-        offlineLicenseKeySetId, widevineLicenseUrl, useL1Widevine, dataSourceFactory,
-        videoFormats);
-  }
-
-  /**
-   * A {@link HostedTest} for DASH playback tests.
-   */
-  @TargetApi(16)
-  private static final class DashHostedTest extends ExoHostedTest {
-
-    private final String streamName;
-    private final String manifestUrl;
-    private final MetricsLogger metricsLogger;
-    private final boolean fullPlaybackNoSeeking;
-    private final boolean isCddLimitedRetry;
-    private final DashTestTrackSelector trackSelector;
-    private final byte[] offlineLicenseKeySetId;
-    private final String widevineLicenseUrl;
-    private final boolean useL1Widevine;
-    private final DataSource.Factory dataSourceFactory;
-
-    private boolean needsCddLimitedRetry;
-
-    /**
-     * @param tag A tag to use for logging.
-     * @param streamName The name of the test stream for metric logging.
-     * @param manifestUrl The manifest url.
-     * @param metricsLogger Logger to log metrics from the test.
-     * @param fullPlaybackNoSeeking Whether the test will play the entire source with no seeking.
-     * @param audioFormat The audio format.
-     * @param canIncludeAdditionalVideoFormats Whether to use video formats in addition to those
-     *     listed in the videoFormats argument, if the device is capable of playing them.
-     * @param isCddLimitedRetry Whether this is a CDD limited retry following a previous failure.
-     * @param actionSchedule The action schedule for the test.
-     * @param offlineLicenseKeySetId The key set id of the license to be used.
-     * @param widevineLicenseUrl If the video is Widevine encrypted, this is the license url
-     *     otherwise null.
-     * @param useL1Widevine Whether to use L1 Widevine.
-     * @param dataSourceFactory If not null, used to load manifest and media.
-     * @param videoFormats The video formats.
-     */
-    private DashHostedTest(String tag, String streamName, String manifestUrl,
-        MetricsLogger metricsLogger, boolean fullPlaybackNoSeeking, String audioFormat,
-        boolean canIncludeAdditionalVideoFormats, boolean isCddLimitedRetry,
-        ActionSchedule actionSchedule, byte[] offlineLicenseKeySetId, String widevineLicenseUrl,
-        boolean useL1Widevine, DataSource.Factory dataSourceFactory, String... videoFormats) {
-      super(tag, fullPlaybackNoSeeking);
-      Assertions.checkArgument(!(isCddLimitedRetry && canIncludeAdditionalVideoFormats));
-      this.streamName = streamName;
-      this.manifestUrl = manifestUrl;
-      this.metricsLogger = metricsLogger;
-      this.fullPlaybackNoSeeking = fullPlaybackNoSeeking;
-      this.isCddLimitedRetry = isCddLimitedRetry;
-      this.offlineLicenseKeySetId = offlineLicenseKeySetId;
-      this.widevineLicenseUrl = widevineLicenseUrl;
-      this.useL1Widevine = useL1Widevine;
-      this.dataSourceFactory = dataSourceFactory;
-      trackSelector = new DashTestTrackSelector(tag, audioFormat, videoFormats,
-          canIncludeAdditionalVideoFormats);
-      if (actionSchedule != null) {
-        setSchedule(actionSchedule);
-      }
-    }
-
-    @Override
-    protected MappingTrackSelector buildTrackSelector(HostActivity host,
-        BandwidthMeter bandwidthMeter) {
-      return trackSelector;
-    }
-
-    @Override
-    protected DefaultDrmSessionManager<FrameworkMediaCrypto> buildDrmSessionManager(
-        final String userAgent) {
-      if (widevineLicenseUrl == null) {
-        return null;
-      }
-      try {
-        MediaDrmCallback drmCallback = new HttpMediaDrmCallback(widevineLicenseUrl,
-            new DefaultHttpDataSourceFactory(userAgent));
-        DefaultDrmSessionManager<FrameworkMediaCrypto> drmSessionManager =
-            DefaultDrmSessionManager.newWidevineInstance(drmCallback, null, null, null);
-        if (!useL1Widevine) {
-          drmSessionManager.setPropertyString(
-              SECURITY_LEVEL_PROPERTY, WIDEVINE_SECURITY_LEVEL_3);
-        }
-        if (offlineLicenseKeySetId != null) {
-          drmSessionManager.setMode(DefaultDrmSessionManager.MODE_PLAYBACK,
-              offlineLicenseKeySetId);
-        }
-        return drmSessionManager;
-      } catch (UnsupportedDrmException e) {
-        throw new IllegalStateException(e);
-      }
-    }
-
-    @Override
-    protected SimpleExoPlayer buildExoPlayer(HostActivity host, Surface surface,
-        MappingTrackSelector trackSelector,
-        DrmSessionManager<FrameworkMediaCrypto> drmSessionManager) {
-      SimpleExoPlayer player = ExoPlayerFactory.newSimpleInstance(
-          new DebugRenderersFactory(host, drmSessionManager), trackSelector);
-      player.setVideoSurface(surface);
-      return player;
-    }
-
-    @Override
-    protected MediaSource buildSource(HostActivity host, String userAgent,
-        TransferListener<? super DataSource> mediaTransferListener) {
-      DataSource.Factory manifestDataSourceFactory = dataSourceFactory != null
-          ? dataSourceFactory : new DefaultDataSourceFactory(host, userAgent);
-      DataSource.Factory mediaDataSourceFactory = dataSourceFactory != null
-          ? dataSourceFactory
-          : new DefaultDataSourceFactory(host, userAgent, mediaTransferListener);
-      Uri manifestUri = Uri.parse(manifestUrl);
-      DefaultDashChunkSource.Factory chunkSourceFactory = new DefaultDashChunkSource.Factory(
-          mediaDataSourceFactory);
-      return new DashMediaSource(manifestUri, manifestDataSourceFactory, chunkSourceFactory,
-          MIN_LOADABLE_RETRY_COUNT, 0 /* livePresentationDelayMs */, null, null);
-    }
-
-    @Override
-    protected void logMetrics(DecoderCounters audioCounters, DecoderCounters videoCounters) {
-      metricsLogger.logMetric(MetricsLogger.KEY_TEST_NAME, streamName);
-      metricsLogger.logMetric(MetricsLogger.KEY_IS_CDD_LIMITED_RETRY, isCddLimitedRetry);
-      metricsLogger.logMetric(MetricsLogger.KEY_FRAMES_DROPPED_COUNT,
-          videoCounters.droppedOutputBufferCount);
-      metricsLogger.logMetric(MetricsLogger.KEY_MAX_CONSECUTIVE_FRAMES_DROPPED_COUNT,
-          videoCounters.maxConsecutiveDroppedOutputBufferCount);
-      metricsLogger.logMetric(MetricsLogger.KEY_FRAMES_SKIPPED_COUNT,
-          videoCounters.skippedOutputBufferCount);
-      metricsLogger.logMetric(MetricsLogger.KEY_FRAMES_RENDERED_COUNT,
-          videoCounters.renderedOutputBufferCount);
-      metricsLogger.close();
-    }
-
-    @Override
-    protected void assertPassed(DecoderCounters audioCounters, DecoderCounters videoCounters) {
-      if (fullPlaybackNoSeeking) {
-        // We shouldn't have skipped any output buffers.
-        DecoderCountersUtil
-            .assertSkippedOutputBufferCount(tag + AUDIO_TAG_SUFFIX, audioCounters, 0);
-        DecoderCountersUtil
-            .assertSkippedOutputBufferCount(tag + VIDEO_TAG_SUFFIX, videoCounters, 0);
-        // We allow one fewer output buffer due to the way that MediaCodecRenderer and the
-        // underlying decoders handle the end of stream. This should be tightened up in the future.
-        DecoderCountersUtil.assertTotalOutputBufferCount(tag + AUDIO_TAG_SUFFIX, audioCounters,
-            audioCounters.inputBufferCount - 1, audioCounters.inputBufferCount);
-        DecoderCountersUtil.assertTotalOutputBufferCount(tag + VIDEO_TAG_SUFFIX, videoCounters,
-            videoCounters.inputBufferCount - 1, videoCounters.inputBufferCount);
-      }
-      try {
-        int droppedFrameLimit = (int) Math.ceil(MAX_DROPPED_VIDEO_FRAME_FRACTION
-            * DecoderCountersUtil.getTotalOutputBuffers(videoCounters));
-        // Assert that performance is acceptable.
-        // Assert that total dropped frames were within limit.
-        DecoderCountersUtil.assertDroppedOutputBufferLimit(tag + VIDEO_TAG_SUFFIX, videoCounters,
-            droppedFrameLimit);
-        // Assert that consecutive dropped frames were within limit.
-        DecoderCountersUtil.assertConsecutiveDroppedOutputBufferLimit(tag + VIDEO_TAG_SUFFIX,
-            videoCounters, MAX_CONSECUTIVE_DROPPED_VIDEO_FRAMES);
-      } catch (AssertionFailedError e) {
-        if (trackSelector.includedAdditionalVideoFormats) {
-          // Retry limiting to CDD mandated formats (b/28220076).
-          Log.e(tag, "Too many dropped or consecutive dropped frames.", e);
-          needsCddLimitedRetry = true;
-        } else {
-          throw e;
-        }
-      }
-    }
-
-  }
-
-  private static final class DashTestTrackSelector extends MappingTrackSelector {
-
-    private final String tag;
-    private final String audioFormatId;
-    private final String[] videoFormatIds;
-    private final boolean canIncludeAdditionalVideoFormats;
-
-    public boolean includedAdditionalVideoFormats;
-
-    private DashTestTrackSelector(String tag, String audioFormatId, String[] videoFormatIds,
-        boolean canIncludeAdditionalVideoFormats) {
-      this.tag = tag;
-      this.audioFormatId = audioFormatId;
-      this.videoFormatIds = videoFormatIds;
-      this.canIncludeAdditionalVideoFormats = canIncludeAdditionalVideoFormats;
-    }
-
-    @Override
-    protected TrackSelection[] selectTracks(RendererCapabilities[] rendererCapabilities,
-        TrackGroupArray[] rendererTrackGroupArrays, int[][][] rendererFormatSupports)
-        throws ExoPlaybackException {
-      Assertions.checkState(rendererCapabilities[VIDEO_RENDERER_INDEX].getTrackType()
-          == C.TRACK_TYPE_VIDEO);
-      Assertions.checkState(rendererCapabilities[AUDIO_RENDERER_INDEX].getTrackType()
-          == C.TRACK_TYPE_AUDIO);
-      Assertions.checkState(rendererTrackGroupArrays[VIDEO_RENDERER_INDEX].length == 1);
-      Assertions.checkState(rendererTrackGroupArrays[AUDIO_RENDERER_INDEX].length == 1);
-      TrackSelection[] selections = new TrackSelection[rendererCapabilities.length];
-      selections[VIDEO_RENDERER_INDEX] = new RandomTrackSelection(
-          rendererTrackGroupArrays[VIDEO_RENDERER_INDEX].get(0),
-          getVideoTrackIndices(rendererTrackGroupArrays[VIDEO_RENDERER_INDEX].get(0),
-              rendererFormatSupports[VIDEO_RENDERER_INDEX][0], videoFormatIds,
-              canIncludeAdditionalVideoFormats),
-          0 /* seed */);
-      selections[AUDIO_RENDERER_INDEX] = new FixedTrackSelection(
-          rendererTrackGroupArrays[AUDIO_RENDERER_INDEX].get(0),
-          getTrackIndex(rendererTrackGroupArrays[AUDIO_RENDERER_INDEX].get(0), audioFormatId));
-      includedAdditionalVideoFormats =
-          selections[VIDEO_RENDERER_INDEX].length() > videoFormatIds.length;
-      return selections;
-    }
-
-    private int[] getVideoTrackIndices(TrackGroup trackGroup, int[] formatSupport,
-        String[] formatIds, boolean canIncludeAdditionalFormats) {
-      List<Integer> trackIndices = new ArrayList<>();
-
-      // Always select explicitly listed representations.
-      for (String formatId : formatIds) {
-        int trackIndex = getTrackIndex(trackGroup, formatId);
-        Log.d(tag, "Adding base video format: "
-            + Format.toLogString(trackGroup.getFormat(trackIndex)));
-        trackIndices.add(trackIndex);
-      }
-
-      // Select additional video representations, if supported by the device.
-      if (canIncludeAdditionalFormats) {
-        for (int i = 0; i < trackGroup.length; i++) {
-          if (!trackIndices.contains(i) && isFormatHandled(formatSupport[i])) {
-            Log.d(tag, "Adding extra video format: "
-                + Format.toLogString(trackGroup.getFormat(i)));
-            trackIndices.add(i);
-          }
-        }
-      }
-
-      int[] trackIndicesArray = Util.toArray(trackIndices);
-      Arrays.sort(trackIndicesArray);
-      return trackIndicesArray;
-    }
-
-    private static int getTrackIndex(TrackGroup trackGroup, String formatId) {
-      for (int i = 0; i < trackGroup.length; i++) {
-        if (trackGroup.getFormat(i).id.equals(formatId)) {
-          return i;
-        }
-      }
-      throw new IllegalStateException("Format " + formatId + " not found.");
-    }
-
-    private static boolean isFormatHandled(int formatSupport) {
-      return (formatSupport & RendererCapabilities.FORMAT_SUPPORT_MASK)
-          == RendererCapabilities.FORMAT_HANDLED;
-    }
-
-  }
-
-}
diff --git a/playbacktests/src/androidTest/java/com/google/android/exoplayer2/playbacktests/gts/DashWidevineOfflineTest.java b/playbacktests/src/androidTest/java/com/google/android/exoplayer2/playbacktests/gts/DashWidevineOfflineTest.java
deleted file mode 100644
index c2b102d1ec..0000000000
--- a/playbacktests/src/androidTest/java/com/google/android/exoplayer2/playbacktests/gts/DashWidevineOfflineTest.java
+++ /dev/null
@@ -1,186 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.playbacktests.gts;
-
-import android.media.MediaDrm.MediaDrmStateException;
-import android.test.ActivityInstrumentationTestCase2;
-import android.util.Pair;
-import com.google.android.exoplayer2.drm.DrmInitData;
-import com.google.android.exoplayer2.drm.DrmSession.DrmSessionException;
-import com.google.android.exoplayer2.drm.FrameworkMediaCrypto;
-import com.google.android.exoplayer2.drm.OfflineLicenseHelper;
-import com.google.android.exoplayer2.source.dash.DashUtil;
-import com.google.android.exoplayer2.source.dash.manifest.DashManifest;
-import com.google.android.exoplayer2.testutil.ActionSchedule;
-import com.google.android.exoplayer2.testutil.HostActivity;
-import com.google.android.exoplayer2.upstream.DataSource;
-import com.google.android.exoplayer2.upstream.DefaultHttpDataSourceFactory;
-import com.google.android.exoplayer2.util.MimeTypes;
-import com.google.android.exoplayer2.util.Util;
-import java.io.IOException;
-import junit.framework.Assert;
-
-/**
- * Tests Widevine encrypted DASH playbacks using offline keys.
- */
-public final class DashWidevineOfflineTest extends ActivityInstrumentationTestCase2<HostActivity> {
-
-  private static final String TAG = "DashWidevineOfflineTest";
-  private static final String USER_AGENT = "ExoPlayerPlaybackTests";
-
-  private DashTestRunner testRunner;
-  private DefaultHttpDataSourceFactory httpDataSourceFactory;
-  private OfflineLicenseHelper<FrameworkMediaCrypto> offlineLicenseHelper;
-  private byte[] offlineLicenseKeySetId;
-
-  public DashWidevineOfflineTest() {
-    super(HostActivity.class);
-  }
-
-  @Override
-  protected void setUp() throws Exception {
-    super.setUp();
-    testRunner = new DashTestRunner(TAG, getActivity(), getInstrumentation())
-        .setStreamName("test_widevine_h264_fixed_offline")
-        .setManifestUrl(DashTestData.WIDEVINE_H264_MANIFEST)
-        .setWidevineInfo(MimeTypes.VIDEO_H264, true)
-        .setFullPlaybackNoSeeking(true)
-        .setCanIncludeAdditionalVideoFormats(false)
-        .setAudioVideoFormats(DashTestData.WIDEVINE_AAC_AUDIO_REPRESENTATION_ID,
-            DashTestData.WIDEVINE_H264_CDD_FIXED);
-
-    boolean useL1Widevine = DashTestRunner.isL1WidevineAvailable(MimeTypes.VIDEO_H264);
-    String widevineLicenseUrl = DashTestData.getWidevineLicenseUrl(true, useL1Widevine);
-    httpDataSourceFactory = new DefaultHttpDataSourceFactory(USER_AGENT);
-    offlineLicenseHelper = OfflineLicenseHelper.newWidevineInstance(widevineLicenseUrl,
-        httpDataSourceFactory);
-  }
-
-  @Override
-  protected void tearDown() throws Exception {
-    testRunner = null;
-    if (offlineLicenseKeySetId != null) {
-      releaseLicense();
-    }
-    if (offlineLicenseHelper != null) {
-      offlineLicenseHelper.release();
-    }
-    offlineLicenseHelper = null;
-    httpDataSourceFactory = null;
-    super.tearDown();
-  }
-
-  // Offline license tests
-
-  public void testWidevineOfflineLicense() throws Exception {
-    if (Util.SDK_INT < 22) {
-      return; // Pass.
-    }
-    downloadLicense();
-    testRunner.run();
-
-    // Renew license after playback should still work
-    offlineLicenseKeySetId = offlineLicenseHelper.renewLicense(offlineLicenseKeySetId);
-    Assert.assertNotNull(offlineLicenseKeySetId);
-  }
-
-  public void testWidevineOfflineReleasedLicense() throws Throwable {
-    if (Util.SDK_INT < 22) {
-      return; // Pass.
-    }
-    downloadLicense();
-    releaseLicense(); // keySetId no longer valid.
-
-    try {
-      testRunner.run();
-      fail("Playback should fail because the license has been released.");
-    } catch (Throwable e) {
-      // Get the root cause
-      while (true) {
-        Throwable cause = e.getCause();
-        if (cause == null || cause == e) {
-          break;
-        }
-        e = cause;
-      }
-      // It should be a MediaDrmStateException instance
-      if (!(e instanceof MediaDrmStateException)) {
-        throw e;
-      }
-    }
-  }
-
-  public void testWidevineOfflineExpiredLicense() throws Exception {
-    if (Util.SDK_INT < 22) {
-      return; // Pass.
-    }
-    downloadLicense();
-
-    // Wait until the license expires
-    long licenseDuration =
-        offlineLicenseHelper.getLicenseDurationRemainingSec(offlineLicenseKeySetId).first;
-    assertTrue("License duration should be less than 30 sec. "
-        + "Server settings might have changed.", licenseDuration < 30);
-    while (licenseDuration > 0) {
-      synchronized (this) {
-        wait(licenseDuration * 1000 + 2000);
-      }
-      long previousDuration = licenseDuration;
-      licenseDuration =
-          offlineLicenseHelper.getLicenseDurationRemainingSec(offlineLicenseKeySetId).first;
-      assertTrue("License duration should be decreasing.", previousDuration > licenseDuration);
-    }
-
-    // DefaultDrmSessionManager should renew the license and stream play fine
-    testRunner.run();
-  }
-
-  public void testWidevineOfflineLicenseExpiresOnPause() throws Exception {
-    if (Util.SDK_INT < 22) {
-      return; // Pass.
-    }
-    downloadLicense();
-
-    // During playback pause until the license expires then continue playback
-    Pair<Long, Long> licenseDurationRemainingSec =
-        offlineLicenseHelper.getLicenseDurationRemainingSec(offlineLicenseKeySetId);
-    long licenseDuration = licenseDurationRemainingSec.first;
-    assertTrue("License duration should be less than 30 sec. "
-        + "Server settings might have changed.", licenseDuration < 30);
-    ActionSchedule schedule = new ActionSchedule.Builder(TAG)
-        .delay(3000).pause().delay(licenseDuration * 1000 + 2000).play().build();
-
-    // DefaultDrmSessionManager should renew the license and stream play fine
-    testRunner.setActionSchedule(schedule).run();
-  }
-
-  private void downloadLicense() throws InterruptedException, DrmSessionException, IOException {
-    DataSource dataSource = httpDataSourceFactory.createDataSource();
-    DashManifest dashManifest = DashUtil.loadManifest(dataSource,
-        DashTestData.WIDEVINE_H264_MANIFEST);
-    DrmInitData drmInitData = DashUtil.loadDrmInitData(dataSource, dashManifest.getPeriod(0));
-    offlineLicenseKeySetId = offlineLicenseHelper.downloadLicense(drmInitData);
-    Assert.assertNotNull(offlineLicenseKeySetId);
-    Assert.assertTrue(offlineLicenseKeySetId.length > 0);
-    testRunner.setOfflineLicenseKeySetId(offlineLicenseKeySetId);
-  }
-
-  private void releaseLicense() throws DrmSessionException {
-    offlineLicenseHelper.releaseLicense(offlineLicenseKeySetId);
-    offlineLicenseKeySetId = null;
-  }
-
-}
diff --git a/playbacktests/src/main/AndroidManifest.xml b/playbacktests/src/main/AndroidManifest.xml
deleted file mode 100644
index 8df75b0da1..0000000000
--- a/playbacktests/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2016 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-
-<manifest package="com.google.android.exoplayer2.playbacktests"/>
diff --git a/publish.gradle b/publish.gradle
deleted file mode 100644
index ca1a2cfd8b..0000000000
--- a/publish.gradle
+++ /dev/null
@@ -1,32 +0,0 @@
-// Copyright (C) 2017 The Android Open Source Project
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-if (project.ext.has("exoplayerPublishEnabled")
-        && project.ext.exoplayerPublishEnabled) {
-    apply plugin: 'bintray-release'
-    publish {
-        artifactId = releaseArtifact
-        description = releaseDescription
-        version = releaseVersion
-        repoName = getBintrayRepo()
-        userOrg = 'google'
-        groupId = 'com.google.android.exoplayer'
-        website = 'https://github.com/google/ExoPlayer'
-    }
-}
-
-def getBintrayRepo() {
-    boolean publicRepo = hasProperty('publicRepo') &&
-        property('publicRepo').toBoolean()
-    return publicRepo ? 'exoplayer' : 'exoplayer-test'
-}
diff --git a/settings.gradle b/settings.gradle
deleted file mode 100644
index fb31055f5e..0000000000
--- a/settings.gradle
+++ /dev/null
@@ -1,26 +0,0 @@
-// Copyright (C) 2016 The Android Open Source Project
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-gradle.ext.exoplayerRoot = settingsDir
-
-def modulePrefix = ':'
-if (gradle.ext.has('exoplayerModulePrefix')) {
-    modulePrefix += gradle.ext.exoplayerModulePrefix
-}
-
-include modulePrefix + 'demo'
-include modulePrefix + 'playbacktests'
-project(modulePrefix + 'demo').projectDir = new File(rootDir, 'demo')
-project(modulePrefix + 'playbacktests').projectDir = new File(rootDir, 'playbacktests')
-
-apply from: 'core_settings.gradle'
diff --git a/testutils/build.gradle b/testutils/build.gradle
deleted file mode 100644
index db8462b1fd..0000000000
--- a/testutils/build.gradle
+++ /dev/null
@@ -1,30 +0,0 @@
-// Copyright (C) 2017 The Android Open Source Project
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//      http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-apply from: '../constants.gradle'
-apply plugin: 'com.android.library'
-
-android {
-    compileSdkVersion project.ext.compileSdkVersion
-    buildToolsVersion project.ext.buildToolsVersion
-
-    defaultConfig {
-        minSdkVersion project.ext.minSdkVersion
-        targetSdkVersion project.ext.targetSdkVersion
-    }
-}
-
-dependencies {
-    compile project(modulePrefix + 'library-core')
-    compile 'org.mockito:mockito-core:' + mockitoVersion
-}
diff --git a/testutils/src/main/AndroidManifest.xml b/testutils/src/main/AndroidManifest.xml
deleted file mode 100644
index ef1411d737..0000000000
--- a/testutils/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2016 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-
-<manifest package="com.google.android.exoplayer2.testutil"/>
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/Action.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/Action.java
deleted file mode 100644
index b1c6f081cf..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/Action.java
+++ /dev/null
@@ -1,201 +0,0 @@
-/*
- * Copyright (C) 2016 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import android.util.Log;
-import android.view.Surface;
-import com.google.android.exoplayer2.ExoPlayer;
-import com.google.android.exoplayer2.SimpleExoPlayer;
-import com.google.android.exoplayer2.trackselection.MappingTrackSelector;
-
-/**
- * Base class for actions to perform during playback tests.
- */
-public abstract class Action {
-
-  private final String tag;
-  private final String description;
-
-  /**
-   * @param tag A tag to use for logging.
-   * @param description A description to be logged when the action is executed.
-   */
-  public Action(String tag, String description) {
-    this.tag = tag;
-    this.description = description;
-  }
-
-  /**
-   * Executes the action.
-   *
-   * @param player The player to which the action should be applied.
-   * @param trackSelector The track selector to which the action should be applied.
-   * @param surface The surface to use when applying actions.
-   */
-  public final void doAction(SimpleExoPlayer player, MappingTrackSelector trackSelector,
-      Surface surface) {
-    Log.i(tag, description);
-    doActionImpl(player, trackSelector, surface);
-  }
-
-  /**
-   * Called by {@link #doAction(SimpleExoPlayer, MappingTrackSelector, Surface)} do perform the
-   * action.
-   *
-   * @param player The player to which the action should be applied.
-   * @param trackSelector The track selector to which the action should be applied.
-   * @param surface The surface to use when applying actions.
-   */
-  protected abstract void doActionImpl(SimpleExoPlayer player, MappingTrackSelector trackSelector,
-      Surface surface);
-
-  /**
-   * Calls {@link ExoPlayer#seekTo(long)}.
-   */
-  public static final class Seek extends Action {
-
-    private final long positionMs;
-
-    /**
-     * @param tag A tag to use for logging.
-     * @param positionMs The seek position.
-     */
-    public Seek(String tag, long positionMs) {
-      super(tag, "Seek:" + positionMs);
-      this.positionMs = positionMs;
-    }
-
-    @Override
-    protected void doActionImpl(SimpleExoPlayer player, MappingTrackSelector trackSelector,
-        Surface surface) {
-      player.seekTo(positionMs);
-    }
-
-  }
-
-  /**
-   * Calls {@link ExoPlayer#stop()}.
-   */
-  public static final class Stop extends Action {
-
-    /**
-     * @param tag A tag to use for logging.
-     */
-    public Stop(String tag) {
-      super(tag, "Stop");
-    }
-
-    @Override
-    protected void doActionImpl(SimpleExoPlayer player, MappingTrackSelector trackSelector,
-        Surface surface) {
-      player.stop();
-    }
-
-  }
-
-  /**
-   * Calls {@link ExoPlayer#setPlayWhenReady(boolean)}.
-   */
-  public static final class SetPlayWhenReady extends Action {
-
-    private final boolean playWhenReady;
-
-    /**
-     * @param tag A tag to use for logging.
-     * @param playWhenReady The value to pass.
-     */
-    public SetPlayWhenReady(String tag, boolean playWhenReady) {
-      super(tag, playWhenReady ? "Play" : "Pause");
-      this.playWhenReady = playWhenReady;
-    }
-
-    @Override
-    protected void doActionImpl(SimpleExoPlayer player, MappingTrackSelector trackSelector,
-        Surface surface) {
-      player.setPlayWhenReady(playWhenReady);
-    }
-
-  }
-
-  /**
-   * Calls {@link MappingTrackSelector#setRendererDisabled(int, boolean)}.
-   */
-  public static final class SetRendererDisabled extends Action {
-
-    private final int rendererIndex;
-    private final boolean disabled;
-
-    /**
-     * @param tag A tag to use for logging.
-     * @param rendererIndex The index of the renderer.
-     * @param disabled Whether the renderer should be disabled.
-     */
-    public SetRendererDisabled(String tag, int rendererIndex, boolean disabled) {
-      super(tag, "SetRendererDisabled:" + rendererIndex + ":" + disabled);
-      this.rendererIndex = rendererIndex;
-      this.disabled = disabled;
-    }
-
-    @Override
-    protected void doActionImpl(SimpleExoPlayer player, MappingTrackSelector trackSelector,
-        Surface surface) {
-      trackSelector.setRendererDisabled(rendererIndex, disabled);
-    }
-
-  }
-
-  /**
-   * Calls {@link SimpleExoPlayer#clearVideoSurface()}.
-   */
-  public static final class ClearVideoSurface extends Action {
-
-    /**
-     * @param tag A tag to use for logging.
-     */
-    public ClearVideoSurface(String tag) {
-      super(tag, "ClearVideoSurface");
-    }
-
-    @Override
-    protected void doActionImpl(SimpleExoPlayer player, MappingTrackSelector trackSelector,
-        Surface surface) {
-      player.clearVideoSurface();
-    }
-
-  }
-
-  /**
-   * Calls {@link SimpleExoPlayer#setVideoSurface(Surface)}.
-   */
-  public static final class SetVideoSurface extends Action {
-
-    /**
-     * @param tag A tag to use for logging.
-     */
-    public SetVideoSurface(String tag) {
-      super(tag, "SetVideoSurface");
-    }
-
-    @Override
-    protected void doActionImpl(SimpleExoPlayer player, MappingTrackSelector trackSelector,
-        Surface surface) {
-      player.setVideoSurface(surface);
-    }
-
-  }
-
-
-}
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/ActionSchedule.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/ActionSchedule.java
deleted file mode 100644
index 66f7ebca95..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/ActionSchedule.java
+++ /dev/null
@@ -1,288 +0,0 @@
-/*
- * Copyright (C) 2016 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import android.os.Handler;
-import android.view.Surface;
-import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.SimpleExoPlayer;
-import com.google.android.exoplayer2.testutil.Action.ClearVideoSurface;
-import com.google.android.exoplayer2.testutil.Action.Seek;
-import com.google.android.exoplayer2.testutil.Action.SetPlayWhenReady;
-import com.google.android.exoplayer2.testutil.Action.SetRendererDisabled;
-import com.google.android.exoplayer2.testutil.Action.SetVideoSurface;
-import com.google.android.exoplayer2.testutil.Action.Stop;
-import com.google.android.exoplayer2.trackselection.MappingTrackSelector;
-
-/**
- * Schedules a sequence of {@link Action}s for execution during a test.
- */
-public final class ActionSchedule {
-
-  private final ActionNode rootNode;
-
-  /**
-   * @param rootNode The first node in the sequence.
-   */
-  private ActionSchedule(ActionNode rootNode) {
-    this.rootNode = rootNode;
-  }
-
-  /**
-   * Starts execution of the schedule.
-   *
-   * @param player The player to which actions should be applied.
-   * @param trackSelector The track selector to which actions should be applied.
-   * @param surface The surface to use when applying actions.
-   * @param mainHandler A handler associated with the main thread of the host activity.
-   */
-  /* package */ void start(SimpleExoPlayer player, MappingTrackSelector trackSelector,
-      Surface surface, Handler mainHandler) {
-    rootNode.schedule(player, trackSelector, surface, mainHandler);
-  }
-
-  /**
-   * A builder for {@link ActionSchedule} instances.
-   */
-  public static final class Builder {
-
-    private final String tag;
-    private final ActionNode rootNode;
-    private long currentDelayMs;
-
-    private ActionNode previousNode;
-
-    /**
-     * @param tag A tag to use for logging.
-     */
-    public Builder(String tag) {
-      this.tag = tag;
-      rootNode = new ActionNode(new RootAction(tag), 0);
-      previousNode = rootNode;
-    }
-
-    /**
-     * Schedules a delay between executing any previous actions and any subsequent ones.
-     *
-     * @param delayMs The delay in milliseconds.
-     * @return The builder, for convenience.
-     */
-    public Builder delay(long delayMs) {
-      currentDelayMs += delayMs;
-      return this;
-    }
-
-    /**
-     * Schedules an action to be executed.
-     *
-     * @param action The action to schedule.
-     * @return The builder, for convenience.
-     */
-    public Builder apply(Action action) {
-      return appendActionNode(new ActionNode(action, currentDelayMs));
-    }
-
-    /**
-     * Schedules an action to be executed repeatedly.
-     *
-     * @param action The action to schedule.
-     * @param intervalMs The interval between each repetition in milliseconds.
-     * @return The builder, for convenience.
-     */
-    public Builder repeat(Action action, long intervalMs) {
-      return appendActionNode(new ActionNode(action, currentDelayMs, intervalMs));
-    }
-
-    /**
-     * Schedules a seek action to be executed.
-     *
-     * @param positionMs The seek position.
-     * @return The builder, for convenience.
-     */
-    public Builder seek(long positionMs) {
-      return apply(new Seek(tag, positionMs));
-    }
-
-    /**
-     * Schedules a stop action to be executed.
-     *
-     * @return The builder, for convenience.
-     */
-    public Builder stop() {
-      return apply(new Stop(tag));
-    }
-
-    /**
-     * Schedules a play action to be executed.
-     *
-     * @return The builder, for convenience.
-     */
-    public Builder play() {
-      return apply(new SetPlayWhenReady(tag, true));
-    }
-
-    /**
-     * Schedules a pause action to be executed.
-     *
-     * @return The builder, for convenience.
-     */
-    public Builder pause() {
-      return apply(new SetPlayWhenReady(tag, false));
-    }
-
-    /**
-     * Schedules a renderer enable action to be executed.
-     *
-     * @return The builder, for convenience.
-     */
-    public Builder enableRenderer(int index) {
-      return apply(new SetRendererDisabled(tag, index, false));
-    }
-
-    /**
-     * Schedules a renderer disable action to be executed.
-     *
-     * @return The builder, for convenience.
-     */
-    public Builder disableRenderer(int index) {
-      return apply(new SetRendererDisabled(tag, index, true));
-    }
-
-    /**
-     * Schedules a clear video surface action to be executed.
-     *
-     * @return The builder, for convenience.
-     */
-    public Builder clearVideoSurface() {
-      return apply(new ClearVideoSurface(tag));
-    }
-
-    /**
-     * Schedules a set video surface action to be executed.
-     *
-     * @return The builder, for convenience.
-     */
-    public Builder setVideoSurface() {
-      return apply(new SetVideoSurface(tag));
-    }
-
-    public ActionSchedule build() {
-      return new ActionSchedule(rootNode);
-    }
-
-    private Builder appendActionNode(ActionNode actionNode) {
-      previousNode.setNext(actionNode);
-      previousNode = actionNode;
-      currentDelayMs = 0;
-      return this;
-    }
-
-  }
-
-  /**
-   * Wraps an {@link Action}, allowing a delay and a next {@link Action} to be specified.
-   */
-  private static final class ActionNode implements Runnable {
-
-    private final Action action;
-    private final long delayMs;
-    private final long repeatIntervalMs;
-
-    private ActionNode next;
-
-    private SimpleExoPlayer player;
-    private MappingTrackSelector trackSelector;
-    private Surface surface;
-    private Handler mainHandler;
-
-    /**
-     * @param action The wrapped action.
-     * @param delayMs The delay between the node being scheduled and the action being executed.
-     */
-    public ActionNode(Action action, long delayMs) {
-      this(action, delayMs, C.TIME_UNSET);
-    }
-
-    /**
-     * @param action The wrapped action.
-     * @param delayMs The delay between the node being scheduled and the action being executed.
-     * @param repeatIntervalMs The interval between one execution and the next repetition. If set to
-     *     {@link C#TIME_UNSET}, the action is executed once only.
-     */
-    public ActionNode(Action action, long delayMs, long repeatIntervalMs) {
-      this.action = action;
-      this.delayMs = delayMs;
-      this.repeatIntervalMs = repeatIntervalMs;
-    }
-
-    /**
-     * Sets the next action.
-     *
-     * @param next The next {@link Action}.
-     */
-    public void setNext(ActionNode next) {
-      this.next = next;
-    }
-
-    /**
-     * Schedules {@link #action} to be executed after {@link #delayMs}. The {@link #next} node
-     * will be scheduled immediately after {@link #action} is executed.
-     *
-     * @param player The player to which actions should be applied.
-     * @param trackSelector The track selector to which actions should be applied.
-     * @param surface The surface to use when applying actions.
-     * @param mainHandler A handler associated with the main thread of the host activity.
-     */
-    public void schedule(SimpleExoPlayer player, MappingTrackSelector trackSelector,
-        Surface surface, Handler mainHandler) {
-      this.player = player;
-      this.trackSelector = trackSelector;
-      this.surface = surface;
-      this.mainHandler = mainHandler;
-      mainHandler.postDelayed(this, delayMs);
-    }
-
-    @Override
-    public void run() {
-      action.doAction(player, trackSelector, surface);
-      if (next != null) {
-        next.schedule(player, trackSelector, surface, mainHandler);
-      }
-      if (repeatIntervalMs != C.TIME_UNSET) {
-        mainHandler.postDelayed(this, repeatIntervalMs);
-      }
-    }
-
-  }
-
-  /**
-   * A no-op root action.
-   */
-  private static final class RootAction extends Action {
-
-    public RootAction(String tag) {
-      super(tag, "Root");
-    }
-
-    @Override
-    protected void doActionImpl(SimpleExoPlayer player, MappingTrackSelector trackSelector,
-        Surface surface) {
-      // Do nothing.
-    }
-
-  }
-
-}
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/CacheAsserts.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/CacheAsserts.java
deleted file mode 100644
index c8ead5dcba..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/CacheAsserts.java
+++ /dev/null
@@ -1,109 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import static junit.framework.Assert.assertEquals;
-
-import android.net.Uri;
-import android.test.MoreAsserts;
-import com.google.android.exoplayer2.testutil.FakeDataSet.FakeData;
-import com.google.android.exoplayer2.upstream.DataSourceInputStream;
-import com.google.android.exoplayer2.upstream.DataSpec;
-import com.google.android.exoplayer2.upstream.DummyDataSource;
-import com.google.android.exoplayer2.upstream.cache.Cache;
-import com.google.android.exoplayer2.upstream.cache.CacheDataSource;
-import com.google.android.exoplayer2.upstream.cache.CacheUtil;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.util.ArrayList;
-import junit.framework.Assert;
-
-/**
- * Assertion methods for {@link Cache}.
- */
-public final class CacheAsserts {
-
-  /** Asserts that the cache content is equal to the data in the {@code fakeDataSet}. */
-  public static void assertCachedData(Cache cache, FakeDataSet fakeDataSet) throws IOException {
-    ArrayList<FakeData> allData = fakeDataSet.getAllData();
-    String[] uriStrings = new String[allData.size()];
-    for (int i = 0; i < allData.size(); i++) {
-      uriStrings[i] = allData.get(i).uri;
-    }
-    assertCachedData(cache, fakeDataSet, uriStrings);
-  }
-
-  /**
-   * Asserts that the cache content is equal to the given subset of data in the {@code fakeDataSet}.
-   */
-  public static void assertCachedData(Cache cache, FakeDataSet fakeDataSet, String... uriStrings)
-      throws IOException {
-    int totalLength = 0;
-    for (String uriString : uriStrings) {
-      byte[] data = fakeDataSet.getData(uriString).getData();
-      assertDataCached(cache, uriString, data);
-      totalLength += data.length;
-    }
-    assertEquals(totalLength, cache.getCacheSpace());
-  }
-
-  /** Asserts that the cache contains the given subset of data in the {@code fakeDataSet}. */
-  public static void assertDataCached(Cache cache, FakeDataSet fakeDataSet, String... uriStrings)
-      throws IOException {
-    for (String uriString : uriStrings) {
-      assertDataCached(cache, uriString, fakeDataSet.getData(uriString).getData());
-    }
-  }
-
-  /** Asserts that the cache contains the given data for {@code uriString}. */
-  public static void assertDataCached(Cache cache, String uriString, byte[] expected)
-      throws IOException {
-    CacheDataSource dataSource = new CacheDataSource(cache, DummyDataSource.INSTANCE, 0);
-    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
-    DataSourceInputStream inputStream = new DataSourceInputStream(dataSource,
-        new DataSpec(Uri.parse(uriString), DataSpec.FLAG_ALLOW_CACHING_UNKNOWN_LENGTH));
-    try {
-      inputStream.open();
-      byte[] buffer = new byte[1024];
-      int bytesRead;
-      while ((bytesRead = inputStream.read(buffer)) != -1) {
-        outputStream.write(buffer, 0, bytesRead);
-      }
-    } catch (IOException e) {
-      // Ignore
-    } finally {
-      inputStream.close();
-    }
-    MoreAsserts.assertEquals("Cached data doesn't match expected for '" + uriString + "',",
-        expected, outputStream.toByteArray());
-  }
-
-  /** Asserts that there is no cache content for the given {@code uriStrings}. */
-  public static void assertDataNotCached(Cache cache, String... uriStrings) {
-    for (String uriString : uriStrings) {
-      Assert.assertNull("There is cached data for '" + uriString + "',",
-          cache.getCachedSpans(CacheUtil.generateKey(Uri.parse(uriString))));
-    }
-  }
-
-  /** Asserts that the cache is empty. */
-  public static void assertCacheEmpty(Cache cache) {
-    assertEquals(0, cache.getCacheSpace());
-  }
-
-  private CacheAsserts() {}
-
-}
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/DebugRenderersFactory.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/DebugRenderersFactory.java
deleted file mode 100644
index af7c1a3e2a..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/DebugRenderersFactory.java
+++ /dev/null
@@ -1,154 +0,0 @@
-/*
- * Copyright (C) 2016 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import android.annotation.TargetApi;
-import android.content.Context;
-import android.os.Handler;
-import com.google.android.exoplayer2.DefaultRenderersFactory;
-import com.google.android.exoplayer2.ExoPlaybackException;
-import com.google.android.exoplayer2.Format;
-import com.google.android.exoplayer2.Renderer;
-import com.google.android.exoplayer2.decoder.DecoderInputBuffer;
-import com.google.android.exoplayer2.drm.DrmSessionManager;
-import com.google.android.exoplayer2.drm.FrameworkMediaCrypto;
-import com.google.android.exoplayer2.mediacodec.MediaCodecSelector;
-import com.google.android.exoplayer2.video.MediaCodecVideoRenderer;
-import com.google.android.exoplayer2.video.VideoRendererEventListener;
-import java.util.ArrayList;
-
-/**
- * A debug extension of {@link DefaultRenderersFactory}. Provides a video renderer that performs
- * video buffer timestamp assertions.
- */
-@TargetApi(16)
-public class DebugRenderersFactory extends DefaultRenderersFactory {
-
-  public DebugRenderersFactory(Context context,
-      DrmSessionManager<FrameworkMediaCrypto> drmSessionManager) {
-    super(context, drmSessionManager, DefaultRenderersFactory.EXTENSION_RENDERER_MODE_OFF, 0);
-  }
-
-  @Override
-  protected void buildVideoRenderers(Context context,
-      DrmSessionManager<FrameworkMediaCrypto> drmSessionManager, long allowedVideoJoiningTimeMs,
-      Handler eventHandler, VideoRendererEventListener eventListener,
-      @ExtensionRendererMode int extensionRendererMode, ArrayList<Renderer> out) {
-    out.add(new DebugMediaCodecVideoRenderer(context, MediaCodecSelector.DEFAULT,
-        allowedVideoJoiningTimeMs, drmSessionManager, eventHandler, eventListener,
-        MAX_DROPPED_VIDEO_FRAME_COUNT_TO_NOTIFY));
-  }
-
-  /**
-   * Decodes and renders video using {@link MediaCodecVideoRenderer}. Provides buffer timestamp
-   * assertions.
-   */
-  private static class DebugMediaCodecVideoRenderer extends MediaCodecVideoRenderer {
-
-    private static final int ARRAY_SIZE = 1000;
-
-    private final long[] timestampsList = new long[ARRAY_SIZE];
-
-    private int startIndex;
-    private int queueSize;
-    private int bufferCount;
-    private int minimumInsertIndex;
-
-    public DebugMediaCodecVideoRenderer(Context context, MediaCodecSelector mediaCodecSelector,
-        long allowedJoiningTimeMs, DrmSessionManager<FrameworkMediaCrypto> drmSessionManager,
-        Handler eventHandler, VideoRendererEventListener eventListener,
-        int maxDroppedFrameCountToNotify) {
-      super(context, mediaCodecSelector, allowedJoiningTimeMs, drmSessionManager, false,
-          eventHandler, eventListener, maxDroppedFrameCountToNotify);
-    }
-
-    @Override
-    protected void releaseCodec() {
-      super.releaseCodec();
-      clearTimestamps();
-    }
-
-    @Override
-    protected void flushCodec() throws ExoPlaybackException {
-      super.flushCodec();
-      clearTimestamps();
-    }
-
-    @Override
-    protected void onInputFormatChanged(Format newFormat) throws ExoPlaybackException {
-      super.onInputFormatChanged(newFormat);
-      // Ensure timestamps of buffers queued after this format change are never inserted into the
-      // queue of expected output timestamps before those of buffers that have already been queued.
-      minimumInsertIndex = startIndex + queueSize;
-    }
-
-    @Override
-    protected void onQueueInputBuffer(DecoderInputBuffer buffer) {
-      super.onQueueInputBuffer(buffer);
-      insertTimestamp(buffer.timeUs);
-      maybeShiftTimestampsList();
-    }
-
-    @Override
-    protected void onProcessedOutputBuffer(long presentationTimeUs) {
-      super.onProcessedOutputBuffer(presentationTimeUs);
-      bufferCount++;
-      long expectedTimestampUs = dequeueTimestamp();
-      if (expectedTimestampUs != presentationTimeUs) {
-        throw new IllegalStateException("Expected to dequeue video buffer with presentation "
-            + "timestamp: " + expectedTimestampUs + ". Instead got: " + presentationTimeUs
-            + " (Processed buffers since last flush: " + bufferCount + ").");
-      }
-    }
-
-    private void clearTimestamps() {
-      startIndex = 0;
-      queueSize = 0;
-      bufferCount = 0;
-      minimumInsertIndex = 0;
-    }
-
-    private void insertTimestamp(long presentationTimeUs) {
-      for (int i = startIndex + queueSize - 1; i >= minimumInsertIndex; i--) {
-        if (presentationTimeUs >= timestampsList[i]) {
-          timestampsList[i + 1] = presentationTimeUs;
-          queueSize++;
-          return;
-        }
-        timestampsList[i + 1] = timestampsList[i];
-      }
-      timestampsList[minimumInsertIndex] = presentationTimeUs;
-      queueSize++;
-    }
-
-    private void maybeShiftTimestampsList() {
-      if (startIndex + queueSize == ARRAY_SIZE) {
-        System.arraycopy(timestampsList, startIndex, timestampsList, 0, queueSize);
-        minimumInsertIndex -= startIndex;
-        startIndex = 0;
-      }
-    }
-
-    private long dequeueTimestamp() {
-      queueSize--;
-      startIndex++;
-      minimumInsertIndex = Math.max(minimumInsertIndex, startIndex);
-      return timestampsList[startIndex - 1];
-    }
-
-  }
-
-}
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/DecoderCountersUtil.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/DecoderCountersUtil.java
deleted file mode 100644
index 448ec79c2d..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/DecoderCountersUtil.java
+++ /dev/null
@@ -1,71 +0,0 @@
-/*
- * Copyright (C) 2016 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import com.google.android.exoplayer2.decoder.DecoderCounters;
-import junit.framework.TestCase;
-
-/**
- * Assertions for {@link DecoderCounters}.
- */
-public final class DecoderCountersUtil {
-
-  private DecoderCountersUtil() {}
-
-  /**
-   * Returns the sum of the skipped, dropped and rendered buffers.
-   *
-   * @param counters The counters for which the total should be calculated.
-   * @return The sum of the skipped, dropped and rendered buffers.
-   */
-  public static int getTotalOutputBuffers(DecoderCounters counters) {
-    return counters.skippedOutputBufferCount + counters.droppedOutputBufferCount
-        + counters.renderedOutputBufferCount;
-  }
-
-  public static void assertSkippedOutputBufferCount(String name, DecoderCounters counters,
-      int expected) {
-    counters.ensureUpdated();
-    int actual = counters.skippedOutputBufferCount;
-    TestCase.assertEquals("Codec(" + name + ") skipped " + actual + " buffers. Expected "
-        + expected + ".", expected, actual);
-  }
-
-  public static void assertTotalOutputBufferCount(String name, DecoderCounters counters,
-      int minCount, int maxCount) {
-    counters.ensureUpdated();
-    int actual = getTotalOutputBuffers(counters);
-    TestCase.assertTrue("Codec(" + name + ") output " + actual + " buffers. Expected in range ["
-        + minCount + ", " + maxCount + "].", minCount <= actual && actual <= maxCount);
-  }
-
-  public static void assertDroppedOutputBufferLimit(String name, DecoderCounters counters,
-      int limit) {
-    counters.ensureUpdated();
-    int actual = counters.droppedOutputBufferCount;
-    TestCase.assertTrue("Codec(" + name + ") was late decoding: " + actual + " buffers. "
-        + "Limit: " + limit + ".", actual <= limit);
-  }
-
-  public static void assertConsecutiveDroppedOutputBufferLimit(String name,
-      DecoderCounters counters, int limit) {
-    counters.ensureUpdated();
-    int actual = counters.maxConsecutiveDroppedOutputBufferCount;
-    TestCase.assertTrue("Codec(" + name + ") was late decoding: " + actual
-        + " buffers consecutively. " + "Limit: " + limit + ".", actual <= limit);
-  }
-
-}
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/Dumper.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/Dumper.java
deleted file mode 100644
index e3461224c2..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/Dumper.java
+++ /dev/null
@@ -1,90 +0,0 @@
-/*
- * Copyright (C) 2016 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import com.google.android.exoplayer2.C;
-import java.util.Arrays;
-import java.util.Locale;
-
-/**
- * Helper utility to dump field values.
- */
-public final class Dumper {
-
-  /**
-   * Provides custom dump method.
-   */
-  public interface Dumpable {
-    /**
-     * Dumps the fields of the object using the {@code dumper}.
-     * @param dumper The {@link Dumper} to be used to dump fields.
-     */
-    void dump(Dumper dumper);
-  }
-
-  private static final int INDENT_SIZE_IN_SPACES = 2;
-
-  private final StringBuilder sb;
-  private int indent;
-
-  public Dumper() {
-    sb = new StringBuilder();
-  }
-
-  public Dumper add(String field, Object value) {
-    return addString(field + " = " + value + '\n');
-  }
-
-  public Dumper add(Dumpable object) {
-    object.dump(this);
-    return this;
-  }
-
-  public Dumper add(String field, byte[] value) {
-    String string = String.format(Locale.US, "%s = length %d, hash %X\n", field, value.length,
-        Arrays.hashCode(value));
-    return addString(string);
-  }
-
-  public Dumper addTime(String field, long time) {
-    return add(field, time == C.TIME_UNSET ? "UNSET TIME" : time);
-  }
-
-  public Dumper startBlock(String name) {
-    addString(name + ":\n");
-    indent += INDENT_SIZE_IN_SPACES;
-    return this;
-  }
-
-  public Dumper endBlock() {
-    indent -= INDENT_SIZE_IN_SPACES;
-    return this;
-  }
-
-  @Override
-  public String toString() {
-    return sb.toString();
-  }
-
-  private Dumper addString(String string) {
-    for (int i = 0; i < indent; i++) {
-      sb.append(' ');
-    }
-    sb.append(string);
-    return this;
-  }
-
-}
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/ExoHostedTest.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/ExoHostedTest.java
deleted file mode 100644
index b61b484e32..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/ExoHostedTest.java
+++ /dev/null
@@ -1,376 +0,0 @@
-/*
- * Copyright (C) 2016 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import android.os.Handler;
-import android.os.SystemClock;
-import android.util.Log;
-import android.view.Surface;
-import com.google.android.exoplayer2.DefaultRenderersFactory;
-import com.google.android.exoplayer2.ExoPlaybackException;
-import com.google.android.exoplayer2.ExoPlayer;
-import com.google.android.exoplayer2.ExoPlayerFactory;
-import com.google.android.exoplayer2.Format;
-import com.google.android.exoplayer2.PlaybackParameters;
-import com.google.android.exoplayer2.Player;
-import com.google.android.exoplayer2.RenderersFactory;
-import com.google.android.exoplayer2.SimpleExoPlayer;
-import com.google.android.exoplayer2.Timeline;
-import com.google.android.exoplayer2.audio.AudioRendererEventListener;
-import com.google.android.exoplayer2.audio.AudioTrack;
-import com.google.android.exoplayer2.decoder.DecoderCounters;
-import com.google.android.exoplayer2.drm.DrmSessionManager;
-import com.google.android.exoplayer2.drm.FrameworkMediaCrypto;
-import com.google.android.exoplayer2.source.MediaSource;
-import com.google.android.exoplayer2.source.TrackGroupArray;
-import com.google.android.exoplayer2.testutil.HostActivity.HostedTest;
-import com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection;
-import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;
-import com.google.android.exoplayer2.trackselection.MappingTrackSelector;
-import com.google.android.exoplayer2.trackselection.TrackSelectionArray;
-import com.google.android.exoplayer2.upstream.BandwidthMeter;
-import com.google.android.exoplayer2.upstream.DataSource;
-import com.google.android.exoplayer2.upstream.DefaultBandwidthMeter;
-import com.google.android.exoplayer2.upstream.TransferListener;
-import com.google.android.exoplayer2.util.Util;
-import com.google.android.exoplayer2.video.VideoRendererEventListener;
-import junit.framework.Assert;
-
-/**
- * A {@link HostedTest} for {@link ExoPlayer} playback tests.
- */
-public abstract class ExoHostedTest implements HostedTest, Player.EventListener,
-    AudioRendererEventListener, VideoRendererEventListener {
-
-  static {
-    // ExoPlayer's AudioTrack class is able to work around spurious timestamps reported by the
-    // platform (by ignoring them). Disable this workaround, since we're interested in testing
-    // that the underlying platform is behaving correctly.
-    AudioTrack.failOnSpuriousAudioTimestamp = true;
-  }
-
-  public static final long MAX_PLAYING_TIME_DISCREPANCY_MS = 2000;
-  public static final long EXPECTED_PLAYING_TIME_MEDIA_DURATION_MS = -2;
-  public static final long EXPECTED_PLAYING_TIME_UNSET = -1;
-
-  protected final String tag;
-
-  private final boolean failOnPlayerError;
-  private final long expectedPlayingTimeMs;
-  private final DecoderCounters videoDecoderCounters;
-  private final DecoderCounters audioDecoderCounters;
-
-  private ActionSchedule pendingSchedule;
-  private Handler actionHandler;
-  private MappingTrackSelector trackSelector;
-  private SimpleExoPlayer player;
-  private Surface surface;
-  private ExoPlaybackException playerError;
-  private Player.EventListener playerEventListener;
-  private boolean playerWasPrepared;
-  private boolean playerFinished;
-  private boolean playing;
-  private long totalPlayingTimeMs;
-  private long lastPlayingStartTimeMs;
-  private long sourceDurationMs;
-
-  /**
-   * @param tag A tag to use for logging.
-   * @param fullPlaybackNoSeeking Whether the test will play the target media in full without
-   *     seeking. If set to true, the test will assert that the total time spent playing the media
-   *     was within {@link #MAX_PLAYING_TIME_DISCREPANCY_MS} of the media duration. If set to false,
-   *     the test will not assert an expected playing time.
-   */
-  public ExoHostedTest(String tag, boolean fullPlaybackNoSeeking) {
-    this(tag, fullPlaybackNoSeeking ? EXPECTED_PLAYING_TIME_MEDIA_DURATION_MS
-        : EXPECTED_PLAYING_TIME_UNSET, true);
-  }
-
-  /**
-   * @param tag A tag to use for logging.
-   * @param expectedPlayingTimeMs The expected playing time. If set to a non-negative value, the
-   *     test will assert that the total time spent playing the media was within
-   *     {@link #MAX_PLAYING_TIME_DISCREPANCY_MS} of the specified value.
-   *     {@link #EXPECTED_PLAYING_TIME_MEDIA_DURATION_MS} should be passed to assert that the
-   *     expected playing time equals the duration of the media being played. Else
-   *     {@link #EXPECTED_PLAYING_TIME_UNSET} should be passed to indicate that the test should not
-   *     assert an expected playing time.
-   * @param failOnPlayerError Whether a player error should be considered a test failure.
-   */
-  public ExoHostedTest(String tag, long expectedPlayingTimeMs, boolean failOnPlayerError) {
-    this.tag = tag;
-    this.expectedPlayingTimeMs = expectedPlayingTimeMs;
-    this.failOnPlayerError = failOnPlayerError;
-    videoDecoderCounters = new DecoderCounters();
-    audioDecoderCounters = new DecoderCounters();
-  }
-
-  /**
-   * Sets a schedule to be applied during the test.
-   *
-   * @param schedule The schedule.
-   */
-  public final void setSchedule(ActionSchedule schedule) {
-    if (player == null) {
-      pendingSchedule = schedule;
-    } else {
-      schedule.start(player, trackSelector, surface, actionHandler);
-    }
-  }
-
-  /**
-   * Sets an {@link Player.EventListener} to listen for ExoPlayer events during the test.
-   */
-  public final void setEventListener(Player.EventListener eventListener) {
-    this.playerEventListener = eventListener;
-    if (player != null) {
-      player.addListener(eventListener);
-    }
-  }
-
-  // HostedTest implementation
-
-  @Override
-  public final void onStart(HostActivity host, Surface surface) {
-    this.surface = surface;
-    // Build the player.
-    DefaultBandwidthMeter bandwidthMeter = new DefaultBandwidthMeter();
-    trackSelector = buildTrackSelector(host, bandwidthMeter);
-    String userAgent = "ExoPlayerPlaybackTests";
-    DrmSessionManager<FrameworkMediaCrypto> drmSessionManager = buildDrmSessionManager(userAgent);
-    player = buildExoPlayer(host, surface, trackSelector, drmSessionManager);
-    player.prepare(buildSource(host, Util.getUserAgent(host, userAgent), bandwidthMeter));
-    if (playerEventListener != null) {
-      player.addListener(playerEventListener);
-    }
-    player.addListener(this);
-    player.setAudioDebugListener(this);
-    player.setVideoDebugListener(this);
-    player.setPlayWhenReady(true);
-    actionHandler = new Handler();
-    // Schedule any pending actions.
-    if (pendingSchedule != null) {
-      pendingSchedule.start(player, trackSelector, surface, actionHandler);
-      pendingSchedule = null;
-    }
-  }
-
-  @Override
-  public final boolean canStop() {
-    return playerFinished;
-  }
-
-  @Override
-  public final void onStop() {
-    actionHandler.removeCallbacksAndMessages(null);
-    sourceDurationMs = player.getDuration();
-    player.release();
-    player = null;
-  }
-
-  @Override
-  public final void onFinished() {
-    if (failOnPlayerError && playerError != null) {
-      throw new Error(playerError);
-    }
-    logMetrics(audioDecoderCounters, videoDecoderCounters);
-    if (expectedPlayingTimeMs != EXPECTED_PLAYING_TIME_UNSET) {
-      long playingTimeToAssertMs = expectedPlayingTimeMs == EXPECTED_PLAYING_TIME_MEDIA_DURATION_MS
-          ? sourceDurationMs : expectedPlayingTimeMs;
-      // Assert that the playback spanned the correct duration of time.
-      long minAllowedActualPlayingTimeMs = playingTimeToAssertMs - MAX_PLAYING_TIME_DISCREPANCY_MS;
-      long maxAllowedActualPlayingTimeMs = playingTimeToAssertMs + MAX_PLAYING_TIME_DISCREPANCY_MS;
-      Assert.assertTrue("Total playing time: " + totalPlayingTimeMs + ". Expected: "
-          + playingTimeToAssertMs, minAllowedActualPlayingTimeMs <= totalPlayingTimeMs
-          && totalPlayingTimeMs <= maxAllowedActualPlayingTimeMs);
-    }
-    // Make any additional assertions.
-    assertPassed(audioDecoderCounters, videoDecoderCounters);
-  }
-
-  // Player.EventListener
-
-  @Override
-  public void onLoadingChanged(boolean isLoading) {
-    // Do nothing.
-  }
-
-  @Override
-  public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray trackSelections) {
-    // Do nothing.
-  }
-
-  @Override
-  public final void onPlayerStateChanged(boolean playWhenReady, int playbackState) {
-    Log.d(tag, "state [" + playWhenReady + ", " + playbackState + "]");
-    playerWasPrepared |= playbackState != Player.STATE_IDLE;
-    if (playbackState == Player.STATE_ENDED
-        || (playbackState == Player.STATE_IDLE && playerWasPrepared)) {
-      playerFinished = true;
-    }
-    boolean playing = playWhenReady && playbackState == Player.STATE_READY;
-    if (!this.playing && playing) {
-      lastPlayingStartTimeMs = SystemClock.elapsedRealtime();
-    } else if (this.playing && !playing) {
-      totalPlayingTimeMs += SystemClock.elapsedRealtime() - lastPlayingStartTimeMs;
-    }
-    this.playing = playing;
-  }
-
-  @Override
-  public void onRepeatModeChanged(int repeatMode) {
-    // Do nothing.
-  }
-
-  @Override
-  public final void onPlayerError(ExoPlaybackException error) {
-    playerWasPrepared = true;
-    playerError = error;
-    onPlayerErrorInternal(error);
-  }
-
-  @Override
-  public final void onPositionDiscontinuity() {
-    // Do nothing.
-  }
-
-  @Override
-  public final void onPlaybackParametersChanged(PlaybackParameters playbackParameters) {
-    // Do nothing.
-  }
-
-  @Override
-  public final void onTimelineChanged(Timeline timeline, Object manifest) {
-    // Do nothing.
-  }
-
-  // AudioRendererEventListener
-
-  @Override
-  public void onAudioEnabled(DecoderCounters counters) {
-    Log.d(tag, "audioEnabled");
-  }
-
-  @Override
-  public void onAudioSessionId(int audioSessionId) {
-    Log.d(tag, "audioSessionId [" + audioSessionId + "]");
-  }
-
-  @Override
-  public void onAudioDecoderInitialized(String decoderName, long elapsedRealtimeMs,
-      long initializationDurationMs) {
-    Log.d(tag, "audioDecoderInitialized [" + decoderName + "]");
-  }
-
-  @Override
-  public void onAudioInputFormatChanged(Format format) {
-    Log.d(tag, "audioFormatChanged [" + Format.toLogString(format) + "]");
-  }
-
-  @Override
-  public void onAudioDisabled(DecoderCounters counters) {
-    Log.d(tag, "audioDisabled");
-    audioDecoderCounters.merge(counters);
-  }
-
-  @Override
-  public void onAudioTrackUnderrun(int bufferSize, long bufferSizeMs, long elapsedSinceLastFeedMs) {
-    Log.e(tag, "audioTrackUnderrun [" + bufferSize + ", " + bufferSizeMs + ", "
-        + elapsedSinceLastFeedMs + "]", null);
-  }
-
-  // VideoRendererEventListener
-
-  @Override
-  public void onVideoEnabled(DecoderCounters counters) {
-    Log.d(tag, "videoEnabled");
-  }
-
-  @Override
-  public void onVideoDecoderInitialized(String decoderName, long elapsedRealtimeMs,
-      long initializationDurationMs) {
-    Log.d(tag, "videoDecoderInitialized [" + decoderName + "]");
-  }
-
-  @Override
-  public void onVideoInputFormatChanged(Format format) {
-    Log.d(tag, "videoFormatChanged [" + Format.toLogString(format) + "]");
-  }
-
-  @Override
-  public void onVideoDisabled(DecoderCounters counters) {
-    Log.d(tag, "videoDisabled");
-    videoDecoderCounters.merge(counters);
-  }
-
-  @Override
-  public void onDroppedFrames(int count, long elapsed) {
-    Log.d(tag, "droppedFrames [" + count + "]");
-  }
-
-  @Override
-  public void onVideoSizeChanged(int width, int height, int unappliedRotationDegrees,
-      float pixelWidthHeightRatio) {
-    // Do nothing.
-  }
-
-  @Override
-  public void onRenderedFirstFrame(Surface surface) {
-    // Do nothing.
-  }
-
-  // Internal logic
-
-  protected DrmSessionManager<FrameworkMediaCrypto> buildDrmSessionManager(String userAgent) {
-    // Do nothing. Interested subclasses may override.
-    return null;
-  }
-
-  @SuppressWarnings("unused")
-  protected MappingTrackSelector buildTrackSelector(HostActivity host,
-      BandwidthMeter bandwidthMeter) {
-    return new DefaultTrackSelector(new AdaptiveTrackSelection.Factory(bandwidthMeter));
-  }
-
-  @SuppressWarnings("unused")
-  protected SimpleExoPlayer buildExoPlayer(HostActivity host, Surface surface,
-      MappingTrackSelector trackSelector,
-      DrmSessionManager<FrameworkMediaCrypto> drmSessionManager) {
-    RenderersFactory renderersFactory = new DefaultRenderersFactory(host, drmSessionManager,
-        DefaultRenderersFactory.EXTENSION_RENDERER_MODE_OFF, 0);
-    SimpleExoPlayer player = ExoPlayerFactory.newSimpleInstance(renderersFactory, trackSelector);
-    player.setVideoSurface(surface);
-    return player;
-  }
-
-  @SuppressWarnings("unused")
-  protected abstract MediaSource buildSource(HostActivity host, String userAgent,
-      TransferListener<? super DataSource> mediaTransferListener);
-
-  @SuppressWarnings("unused")
-  protected void onPlayerErrorInternal(ExoPlaybackException error) {
-    // Do nothing. Interested subclasses may override.
-  }
-
-  protected void logMetrics(DecoderCounters audioCounters, DecoderCounters videoCounters) {
-    // Do nothing. Subclasses may override to log metrics.
-  }
-
-  protected void assertPassed(DecoderCounters audioCounters, DecoderCounters videoCounters) {
-    // Do nothing. Subclasses may override to add additional assertions.
-  }
-
-}
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/ExoPlayerWrapper.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/ExoPlayerWrapper.java
deleted file mode 100644
index ab247283e6..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/ExoPlayerWrapper.java
+++ /dev/null
@@ -1,192 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import android.os.Handler;
-import android.os.HandlerThread;
-import android.util.Pair;
-import com.google.android.exoplayer2.ExoPlaybackException;
-import com.google.android.exoplayer2.ExoPlayer;
-import com.google.android.exoplayer2.ExoPlayerFactory;
-import com.google.android.exoplayer2.PlaybackParameters;
-import com.google.android.exoplayer2.Player;
-import com.google.android.exoplayer2.Renderer;
-import com.google.android.exoplayer2.Timeline;
-import com.google.android.exoplayer2.source.MediaSource;
-import com.google.android.exoplayer2.source.TrackGroupArray;
-import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;
-import com.google.android.exoplayer2.trackselection.TrackSelectionArray;
-import java.util.LinkedList;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.TimeoutException;
-import junit.framework.Assert;
-
-/**
- * Wraps a player with its own handler thread.
- */
-public class ExoPlayerWrapper implements Player.EventListener {
-
-  private final CountDownLatch sourceInfoCountDownLatch;
-  private final CountDownLatch endedCountDownLatch;
-  private final HandlerThread playerThread;
-  private final Handler handler;
-  private final LinkedList<Pair<Timeline, Object>> sourceInfos;
-
-  public ExoPlayer player;
-  public TrackGroupArray trackGroups;
-  public Exception exception;
-
-  // Written only on the main thread.
-  public volatile int positionDiscontinuityCount;
-
-  public ExoPlayerWrapper() {
-    sourceInfoCountDownLatch = new CountDownLatch(1);
-    endedCountDownLatch = new CountDownLatch(1);
-    playerThread = new HandlerThread("ExoPlayerTest thread");
-    playerThread.start();
-    handler = new Handler(playerThread.getLooper());
-    sourceInfos = new LinkedList<>();
-  }
-
-  // Called on the test thread.
-
-  public void blockUntilEnded(long timeoutMs) throws Exception {
-    if (!endedCountDownLatch.await(timeoutMs, TimeUnit.MILLISECONDS)) {
-      exception = new TimeoutException("Test playback timed out waiting for playback to end.");
-    }
-    release();
-    // Throw any pending exception (from playback, timing out or releasing).
-    if (exception != null) {
-      throw exception;
-    }
-  }
-
-  public void blockUntilSourceInfoRefreshed(long timeoutMs) throws Exception {
-    if (!sourceInfoCountDownLatch.await(timeoutMs, TimeUnit.MILLISECONDS)) {
-      throw new TimeoutException("Test playback timed out waiting for source info.");
-    }
-  }
-
-  public void setup(final MediaSource mediaSource, final Renderer... renderers) {
-    handler.post(new Runnable() {
-      @Override
-      public void run() {
-        try {
-          player = ExoPlayerFactory.newInstance(renderers, new DefaultTrackSelector());
-          player.addListener(ExoPlayerWrapper.this);
-          player.setPlayWhenReady(true);
-          player.prepare(mediaSource);
-        } catch (Exception e) {
-          handleError(e);
-        }
-      }
-    });
-  }
-
-  public void prepare(final MediaSource mediaSource) {
-    handler.post(new Runnable() {
-      @Override
-      public void run() {
-        try {
-          player.prepare(mediaSource);
-        } catch (Exception e) {
-          handleError(e);
-        }
-      }
-    });
-  }
-
-  public void release() throws InterruptedException {
-    handler.post(new Runnable() {
-      @Override
-      public void run() {
-        try {
-          if (player != null) {
-            player.release();
-          }
-        } catch (Exception e) {
-          handleError(e);
-        } finally {
-          playerThread.quit();
-        }
-      }
-    });
-    playerThread.join();
-  }
-
-  private void handleError(Exception exception) {
-    if (this.exception == null) {
-      this.exception = exception;
-    }
-    endedCountDownLatch.countDown();
-  }
-
-  @SafeVarargs
-  public final void assertSourceInfosEquals(Pair<Timeline, Object>... sourceInfos) {
-    Assert.assertEquals(sourceInfos.length, this.sourceInfos.size());
-    for (Pair<Timeline, Object> sourceInfo : sourceInfos) {
-      Assert.assertEquals(sourceInfo, this.sourceInfos.remove());
-    }
-  }
-
-  // Player.EventListener implementation.
-
-  @Override
-  public void onLoadingChanged(boolean isLoading) {
-    // Do nothing.
-  }
-
-  @Override
-  public void onPlayerStateChanged(boolean playWhenReady, int playbackState) {
-    if (playbackState == Player.STATE_ENDED) {
-      endedCountDownLatch.countDown();
-    }
-  }
-
-  @Override
-  public void onRepeatModeChanged(int repeatMode) {
-    // Do nothing.
-  }
-
-  @Override
-  public void onTimelineChanged(Timeline timeline, Object manifest) {
-    sourceInfos.add(Pair.create(timeline, manifest));
-    sourceInfoCountDownLatch.countDown();
-  }
-
-  @Override
-  public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray trackSelections) {
-    this.trackGroups = trackGroups;
-  }
-
-  @Override
-  public void onPlayerError(ExoPlaybackException exception) {
-    handleError(exception);
-  }
-
-  @SuppressWarnings("NonAtomicVolatileUpdate")
-  @Override
-  public void onPositionDiscontinuity() {
-    positionDiscontinuityCount++;
-  }
-
-  @Override
-  public void onPlaybackParametersChanged(PlaybackParameters playbackParameters) {
-    // Do nothing.
-  }
-
-}
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/ExtractorAsserts.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/ExtractorAsserts.java
deleted file mode 100644
index db63662c45..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/ExtractorAsserts.java
+++ /dev/null
@@ -1,289 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import android.app.Instrumentation;
-import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.extractor.Extractor;
-import com.google.android.exoplayer2.extractor.ExtractorInput;
-import com.google.android.exoplayer2.extractor.ExtractorOutput;
-import com.google.android.exoplayer2.extractor.PositionHolder;
-import com.google.android.exoplayer2.extractor.SeekMap;
-import com.google.android.exoplayer2.testutil.FakeExtractorInput.SimulatedIOException;
-import com.google.android.exoplayer2.util.Assertions;
-import java.io.IOException;
-import java.util.Arrays;
-import junit.framework.Assert;
-
-/**
- * Assertion methods for {@link Extractor}.
- */
-public final class ExtractorAsserts {
-
-  /**
-   * A factory for {@link Extractor} instances.
-   */
-  public interface ExtractorFactory {
-    Extractor create();
-  }
-
-  private static final String DUMP_EXTENSION = ".dump";
-  private static final String UNKNOWN_LENGTH_EXTENSION = ".unklen" + DUMP_EXTENSION;
-
-  /**
-   * Asserts that an extractor behaves correctly given valid input data:
-   * <ul>
-   *   <li>Calls {@link Extractor#seek(long, long)} and {@link Extractor#release()} without calling
-   *   {@link Extractor#init(ExtractorOutput)} to check these calls do not fail.</li>
-   *   <li>Calls {@link #assertOutput(Extractor, String, byte[], Instrumentation, boolean, boolean,
-   *   boolean, boolean)} with all possible combinations of "simulate" parameters.</li>
-   * </ul>
-   *
-   * @param factory An {@link ExtractorFactory} which creates instances of the {@link Extractor}
-   *     class which is to be tested.
-   * @param file The path to the input sample.
-   * @param instrumentation To be used to load the sample file.
-   * @throws IOException If reading from the input fails.
-   * @throws InterruptedException If interrupted while reading from the input.
-   */
-  public static void assertBehavior(ExtractorFactory factory, String file,
-      Instrumentation instrumentation) throws IOException, InterruptedException {
-    // Check behavior prior to initialization.
-    Extractor extractor = factory.create();
-    extractor.seek(0, 0);
-    extractor.release();
-    // Assert output.
-    byte[] fileData = TestUtil.getByteArray(instrumentation, file);
-    assertOutput(factory, file, fileData, instrumentation);
-  }
-
-  /**
-   * Calls {@link #assertOutput(Extractor, String, byte[], Instrumentation, boolean, boolean,
-   * boolean, boolean)} with all possible combinations of "simulate" parameters with
-   * {@code sniffFirst} set to true, and makes one additional call with the "simulate" and
-   * {@code sniffFirst} parameters all set to false.
-   *
-   * @param factory An {@link ExtractorFactory} which creates instances of the {@link Extractor}
-   *     class which is to be tested.
-   * @param file The path to the input sample.
-   * @param data Content of the input file.
-   * @param instrumentation To be used to load the sample file.
-   * @throws IOException If reading from the input fails.
-   * @throws InterruptedException If interrupted while reading from the input.
-   */
-  public static void assertOutput(ExtractorFactory factory, String file, byte[] data,
-      Instrumentation instrumentation) throws IOException, InterruptedException {
-    assertOutput(factory.create(), file, data, instrumentation,  true, false, false, false);
-    assertOutput(factory.create(), file, data, instrumentation,  true, false, false,  true);
-    assertOutput(factory.create(), file, data, instrumentation,  true, false,  true, false);
-    assertOutput(factory.create(), file, data, instrumentation,  true, false,  true,  true);
-    assertOutput(factory.create(), file, data, instrumentation,  true,  true, false, false);
-    assertOutput(factory.create(), file, data, instrumentation,  true,  true, false,  true);
-    assertOutput(factory.create(), file, data, instrumentation,  true,  true,  true, false);
-    assertOutput(factory.create(), file, data, instrumentation,  true,  true,  true,  true);
-    assertOutput(factory.create(), file, data, instrumentation, false, false, false, false);
-  }
-
-  /**
-   * Asserts that {@code extractor} consumes {@code sampleFile} successfully and its output equals
-   * to a prerecorded output dump file with the name {@code sampleFile} + "{@value
-   * #DUMP_EXTENSION}". If {@code simulateUnknownLength} is true and {@code sampleFile} + "{@value
-   * #UNKNOWN_LENGTH_EXTENSION}" exists, it's preferred.
-   *
-   * @param extractor The {@link Extractor} to be tested.
-   * @param file The path to the input sample.
-   * @param data Content of the input file.
-   * @param instrumentation To be used to load the sample file.
-   * @param sniffFirst Whether to sniff the data by calling {@link Extractor#sniff(ExtractorInput)}
-   *     prior to consuming it.
-   * @param simulateIOErrors Whether to simulate IO errors.
-   * @param simulateUnknownLength Whether to simulate unknown input length.
-   * @param simulatePartialReads Whether to simulate partial reads.
-   * @return The {@link FakeExtractorOutput} used in the test.
-   * @throws IOException If reading from the input fails.
-   * @throws InterruptedException If interrupted while reading from the input.
-   */
-  public static FakeExtractorOutput assertOutput(Extractor extractor, String file, byte[] data,
-      Instrumentation instrumentation, boolean sniffFirst, boolean simulateIOErrors,
-      boolean simulateUnknownLength, boolean simulatePartialReads) throws IOException,
-      InterruptedException {
-    FakeExtractorInput input = new FakeExtractorInput.Builder().setData(data)
-        .setSimulateIOErrors(simulateIOErrors)
-        .setSimulateUnknownLength(simulateUnknownLength)
-        .setSimulatePartialReads(simulatePartialReads).build();
-
-    if (sniffFirst) {
-      Assert.assertTrue(TestUtil.sniffTestData(extractor, input));
-      input.resetPeekPosition();
-    }
-
-    FakeExtractorOutput extractorOutput = consumeTestData(extractor, input, 0, true);
-    if (simulateUnknownLength
-        && assetExists(instrumentation, file + UNKNOWN_LENGTH_EXTENSION)) {
-      extractorOutput.assertOutput(instrumentation, file + UNKNOWN_LENGTH_EXTENSION);
-    } else {
-      extractorOutput.assertOutput(instrumentation, file + ".0" + DUMP_EXTENSION);
-    }
-
-    SeekMap seekMap = extractorOutput.seekMap;
-    if (seekMap.isSeekable()) {
-      long durationUs = seekMap.getDurationUs();
-      for (int j = 0; j < 4; j++) {
-        long timeUs = (durationUs * j) / 3;
-        long position = seekMap.getPosition(timeUs);
-        input.setPosition((int) position);
-        for (int i = 0; i < extractorOutput.numberOfTracks; i++) {
-          extractorOutput.trackOutputs.valueAt(i).clear();
-        }
-
-        consumeTestData(extractor, input, timeUs, extractorOutput, false);
-        extractorOutput.assertOutput(instrumentation, file + '.' + j + DUMP_EXTENSION);
-      }
-    }
-
-    return extractorOutput;
-  }
-
-  /**
-   * Calls {@link #assertThrows(Extractor, byte[], Class, boolean, boolean, boolean)} with all
-   * possible combinations of "simulate" parameters.
-   *
-   * @param factory An {@link ExtractorFactory} which creates instances of the {@link Extractor}
-   *     class which is to be tested.
-   * @param sampleFile The path to the input sample.
-   * @param instrumentation To be used to load the sample file.
-   * @param expectedThrowable Expected {@link Throwable} class.
-   * @throws IOException If reading from the input fails.
-   * @throws InterruptedException If interrupted while reading from the input.
-   * @see #assertThrows(Extractor, byte[], Class, boolean, boolean, boolean)
-   */
-  public static void assertThrows(ExtractorFactory factory, String sampleFile,
-      Instrumentation instrumentation, Class<? extends Throwable> expectedThrowable)
-      throws IOException, InterruptedException {
-    byte[] fileData = TestUtil.getByteArray(instrumentation, sampleFile);
-    assertThrows(factory, fileData, expectedThrowable);
-  }
-
-  /**
-   * Calls {@link #assertThrows(Extractor, byte[], Class, boolean, boolean, boolean)} with all
-   * possible combinations of "simulate" parameters.
-   *
-   * @param factory An {@link ExtractorFactory} which creates instances of the {@link Extractor}
-   *     class which is to be tested.
-   * @param fileData Content of the input file.
-   * @param expectedThrowable Expected {@link Throwable} class.
-   * @throws IOException If reading from the input fails.
-   * @throws InterruptedException If interrupted while reading from the input.
-   * @see #assertThrows(Extractor, byte[], Class, boolean, boolean, boolean)
-   */
-  public static void assertThrows(ExtractorFactory factory, byte[] fileData,
-      Class<? extends Throwable> expectedThrowable) throws IOException, InterruptedException {
-    assertThrows(factory.create(), fileData, expectedThrowable, false, false, false);
-    assertThrows(factory.create(), fileData, expectedThrowable,  true, false, false);
-    assertThrows(factory.create(), fileData, expectedThrowable, false,  true, false);
-    assertThrows(factory.create(), fileData, expectedThrowable,  true,  true, false);
-    assertThrows(factory.create(), fileData, expectedThrowable, false, false,  true);
-    assertThrows(factory.create(), fileData, expectedThrowable,  true, false,  true);
-    assertThrows(factory.create(), fileData, expectedThrowable, false,  true,  true);
-    assertThrows(factory.create(), fileData, expectedThrowable,  true,  true,  true);
-  }
-
-  /**
-   * Asserts {@code extractor} throws {@code expectedThrowable} while consuming {@code sampleFile}.
-   *
-   * @param extractor The {@link Extractor} to be tested.
-   * @param fileData Content of the input file.
-   * @param expectedThrowable Expected {@link Throwable} class.
-   * @param simulateIOErrors If true simulates IOErrors.
-   * @param simulateUnknownLength If true simulates unknown input length.
-   * @param simulatePartialReads If true simulates partial reads.
-   * @throws IOException If reading from the input fails.
-   * @throws InterruptedException If interrupted while reading from the input.
-   */
-  public static void assertThrows(Extractor extractor, byte[] fileData,
-      Class<? extends Throwable> expectedThrowable, boolean simulateIOErrors,
-      boolean simulateUnknownLength, boolean simulatePartialReads) throws IOException,
-      InterruptedException {
-    FakeExtractorInput input = new FakeExtractorInput.Builder().setData(fileData)
-        .setSimulateIOErrors(simulateIOErrors)
-        .setSimulateUnknownLength(simulateUnknownLength)
-        .setSimulatePartialReads(simulatePartialReads).build();
-    try {
-      consumeTestData(extractor, input, 0, true);
-      throw new AssertionError(expectedThrowable.getSimpleName() + " expected but not thrown");
-    } catch (Throwable throwable) {
-      if (expectedThrowable.equals(throwable.getClass())) {
-        return; // Pass!
-      }
-      throw throwable;
-    }
-  }
-
-  private ExtractorAsserts() {}
-
-  private static FakeExtractorOutput consumeTestData(Extractor extractor, FakeExtractorInput input,
-      long timeUs, boolean retryFromStartIfLive) throws IOException, InterruptedException {
-    FakeExtractorOutput output = new FakeExtractorOutput();
-    extractor.init(output);
-    consumeTestData(extractor, input, timeUs, output, retryFromStartIfLive);
-    return output;
-  }
-
-  private static void consumeTestData(Extractor extractor, FakeExtractorInput input, long timeUs,
-      FakeExtractorOutput output, boolean retryFromStartIfLive)
-      throws IOException, InterruptedException {
-    extractor.seek(input.getPosition(), timeUs);
-    PositionHolder seekPositionHolder = new PositionHolder();
-    int readResult = Extractor.RESULT_CONTINUE;
-    while (readResult != Extractor.RESULT_END_OF_INPUT) {
-      try {
-        // Extractor.read should not read seekPositionHolder.position. Set it to a value that's
-        // likely to cause test failure if a read does occur.
-        seekPositionHolder.position = Long.MIN_VALUE;
-        readResult = extractor.read(input, seekPositionHolder);
-        if (readResult == Extractor.RESULT_SEEK) {
-          long seekPosition = seekPositionHolder.position;
-          Assertions.checkState(0 <= seekPosition && seekPosition <= Integer.MAX_VALUE);
-          input.setPosition((int) seekPosition);
-        }
-      } catch (SimulatedIOException e) {
-        if (!retryFromStartIfLive) {
-          continue;
-        }
-        boolean isOnDemand = input.getLength() != C.LENGTH_UNSET
-            || (output.seekMap != null && output.seekMap.getDurationUs() != C.TIME_UNSET);
-        if (isOnDemand) {
-          continue;
-        }
-        input.setPosition(0);
-        for (int i = 0; i < output.numberOfTracks; i++) {
-          output.trackOutputs.valueAt(i).clear();
-        }
-        extractor.seek(0, 0);
-      }
-    }
-  }
-
-  private static boolean assetExists(Instrumentation instrumentation, String fileName)
-      throws IOException {
-    int i = fileName.lastIndexOf('/');
-    String path = i >= 0 ? fileName.substring(0, i) : "";
-    String file = i >= 0 ? fileName.substring(i + 1) : fileName;
-    return Arrays.asList(instrumentation.getContext().getResources().getAssets().list(path))
-        .contains(file);
-  }
-
-}
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeAdaptiveDataSet.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeAdaptiveDataSet.java
deleted file mode 100644
index f4476ddf93..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeAdaptiveDataSet.java
+++ /dev/null
@@ -1,93 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.Format;
-import com.google.android.exoplayer2.trackselection.TrackSelection;
-
-/**
- * Fake data set emulating the data of an adaptive media source.
- * It provides chunk data for all {@link Format}s in the given {@link TrackSelection}.
- */
-public final class FakeAdaptiveDataSet extends FakeDataSet {
-
-  /**
-   * Factory for {@link FakeAdaptiveDataSet}s.
-   */
-  public static final class Factory {
-
-    private final long chunkDurationUs;
-
-    public Factory(long chunkDurationUs) {
-      this.chunkDurationUs = chunkDurationUs;
-    }
-
-    public FakeAdaptiveDataSet createDataSet(TrackSelection trackSelection, long mediaDurationUs) {
-      return new FakeAdaptiveDataSet(trackSelection, mediaDurationUs, chunkDurationUs);
-    }
-
-  }
-
-  private final long chunkCount;
-  private final long chunkDurationUs;
-  private final long lastChunkDurationUs;
-
-  public FakeAdaptiveDataSet(TrackSelection trackSelection, long mediaDurationUs,
-      long chunkDurationUs) {
-    this.chunkDurationUs = chunkDurationUs;
-    int selectionCount = trackSelection.length();
-    long lastChunkDurationUs = mediaDurationUs % chunkDurationUs;
-    int fullChunks = (int) (mediaDurationUs / chunkDurationUs);
-    for (int i = 0; i < selectionCount; i++) {
-      String uri = getUri(i);
-      Format format = trackSelection.getFormat(i);
-      int chunkLength = (int) (format.bitrate * chunkDurationUs / (8 * C.MICROS_PER_SECOND));
-      FakeData newData = this.newData(uri);
-      for (int j = 0; j < fullChunks; j++) {
-        newData.appendReadData(chunkLength);
-      }
-      if (lastChunkDurationUs > 0) {
-        int lastChunkLength = (int) (format.bitrate * (mediaDurationUs % chunkDurationUs)
-            / (8 * C.MICROS_PER_SECOND));
-        newData.appendReadData(lastChunkLength);
-      }
-    }
-    this.lastChunkDurationUs = lastChunkDurationUs == 0 ? chunkDurationUs : lastChunkDurationUs;
-    this.chunkCount = lastChunkDurationUs == 0 ? fullChunks : fullChunks + 1;
-  }
-
-  public long getChunkCount() {
-    return chunkCount;
-  }
-
-  public String getUri(int trackSelectionIndex) {
-    return "fake://adaptive.media/" + Integer.toString(trackSelectionIndex);
-  }
-
-  public long getChunkDuration(int chunkIndex) {
-    return chunkIndex == getChunkCount() - 1 ? lastChunkDurationUs : chunkDurationUs;
-  }
-
-  public long getStartTime(int chunkIndex) {
-    return chunkIndex * chunkDurationUs;
-  }
-
-  public int getChunkIndexByPosition(long positionUs) {
-    return (int) (positionUs / chunkDurationUs);
-  }
-
-}
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeChunkSource.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeChunkSource.java
deleted file mode 100644
index 0c970caa15..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeChunkSource.java
+++ /dev/null
@@ -1,115 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import android.net.Uri;
-import com.google.android.exoplayer2.Format;
-import com.google.android.exoplayer2.source.chunk.Chunk;
-import com.google.android.exoplayer2.source.chunk.ChunkHolder;
-import com.google.android.exoplayer2.source.chunk.ChunkSource;
-import com.google.android.exoplayer2.source.chunk.MediaChunk;
-import com.google.android.exoplayer2.source.chunk.SingleSampleMediaChunk;
-import com.google.android.exoplayer2.testutil.FakeDataSet.FakeData.Segment;
-import com.google.android.exoplayer2.trackselection.TrackSelection;
-import com.google.android.exoplayer2.upstream.DataSource;
-import com.google.android.exoplayer2.upstream.DataSpec;
-import com.google.android.exoplayer2.util.MimeTypes;
-import java.io.IOException;
-import java.util.List;
-
-/**
- * Fake {@link ChunkSource} with adaptive media chunks of a given duration.
- */
-public final class FakeChunkSource implements ChunkSource {
-
-  /**
-   * Factory for a {@link FakeChunkSource}.
-   */
-  public static final class Factory {
-
-    private final FakeAdaptiveDataSet.Factory dataSetFactory;
-    private final FakeDataSource.Factory dataSourceFactory;
-
-    public Factory(FakeAdaptiveDataSet.Factory dataSetFactory,
-        FakeDataSource.Factory dataSourceFactory) {
-      this.dataSetFactory = dataSetFactory;
-      this.dataSourceFactory = dataSourceFactory;
-    }
-
-    public FakeChunkSource createChunkSource(TrackSelection trackSelection, long durationUs) {
-      FakeAdaptiveDataSet dataSet = dataSetFactory.createDataSet(trackSelection, durationUs);
-      dataSourceFactory.setFakeDataSet(dataSet);
-      DataSource dataSource = dataSourceFactory.createDataSource();
-      return new FakeChunkSource(trackSelection, dataSource, dataSet);
-    }
-
-  }
-
-  private final TrackSelection trackSelection;
-  private final DataSource dataSource;
-  private final FakeAdaptiveDataSet dataSet;
-
-  public FakeChunkSource(TrackSelection trackSelection, DataSource dataSource,
-      FakeAdaptiveDataSet dataSet) {
-    this.trackSelection = trackSelection;
-    this.dataSource = dataSource;
-    this.dataSet = dataSet;
-  }
-
-  @Override
-  public void maybeThrowError() throws IOException {
-    // Do nothing.
-  }
-
-  @Override
-  public int getPreferredQueueSize(long playbackPositionUs, List<? extends MediaChunk> queue) {
-    return trackSelection.evaluateQueueSize(playbackPositionUs, queue);
-  }
-
-  @Override
-  public void getNextChunk(MediaChunk previous, long playbackPositionUs, ChunkHolder out) {
-    long bufferedDurationUs = previous != null ? (previous.endTimeUs - playbackPositionUs) : 0;
-    trackSelection.updateSelectedTrack(bufferedDurationUs);
-    int chunkIndex = previous == null ? dataSet.getChunkIndexByPosition(playbackPositionUs)
-        : previous.getNextChunkIndex();
-    if (chunkIndex >= dataSet.getChunkCount()) {
-      out.endOfStream = true;
-    } else {
-      Format selectedFormat = trackSelection.getSelectedFormat();
-      long startTimeUs = dataSet.getStartTime(chunkIndex);
-      long endTimeUs = startTimeUs + dataSet.getChunkDuration(chunkIndex);
-      String uri = dataSet.getUri(trackSelection.getSelectedIndex());
-      Segment fakeDataChunk = dataSet.getData(uri).getSegments().get(chunkIndex);
-      DataSpec dataSpec = new DataSpec(Uri.parse(uri), fakeDataChunk.byteOffset,
-          fakeDataChunk.length, null);
-      int trackType = MimeTypes.getTrackType(selectedFormat.sampleMimeType);
-      out.chunk = new SingleSampleMediaChunk(dataSource, dataSpec, selectedFormat,
-          trackSelection.getSelectionReason(), trackSelection.getSelectionData(), startTimeUs,
-          endTimeUs, chunkIndex, trackType, selectedFormat);
-    }
-  }
-
-  @Override
-  public void onChunkLoadCompleted(Chunk chunk) {
-    // Do nothing.
-  }
-
-  @Override
-  public boolean onChunkLoadError(Chunk chunk, boolean cancelable, Exception e) {
-    return false;
-  }
-
-}
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeClock.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeClock.java
deleted file mode 100644
index 36ce4b5c3e..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeClock.java
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import com.google.android.exoplayer2.util.Clock;
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Fake {@link Clock} implementation independent of {@link android.os.SystemClock}.
- */
-public final class FakeClock implements Clock {
-
-  private long currentTimeMs;
-  private final List<Long> wakeUpTimes;
-
-  /**
-   * Create {@link FakeClock} with an arbitrary initial timestamp.
-   *
-   * @param initialTimeMs Initial timestamp in milliseconds.
-   */
-  public FakeClock(long initialTimeMs) {
-    this.currentTimeMs = initialTimeMs;
-    this.wakeUpTimes = new ArrayList<>();
-  }
-
-  /**
-   * Advance timestamp of {@link FakeClock} by the specified duration.
-   *
-   * @param timeDiffMs The amount of time to add to the timestamp in milliseconds.
-   */
-  public synchronized void advanceTime(long timeDiffMs) {
-    currentTimeMs += timeDiffMs;
-    for (Long wakeUpTime : wakeUpTimes) {
-      if (wakeUpTime <= currentTimeMs) {
-        notifyAll();
-        break;
-      }
-    }
-  }
-
-  @Override
-  public long elapsedRealtime() {
-    return currentTimeMs;
-  }
-
-  @Override
-  public synchronized void sleep(long sleepTimeMs) {
-    if (sleepTimeMs <= 0) {
-      return;
-    }
-    Long wakeUpTimeMs = currentTimeMs + sleepTimeMs;
-    wakeUpTimes.add(wakeUpTimeMs);
-    while (currentTimeMs < wakeUpTimeMs) {
-      try {
-        wait();
-      } catch (InterruptedException e) {
-        // Ignore InterruptedException as SystemClock.sleep does too.
-      }
-    }
-    wakeUpTimes.remove(wakeUpTimeMs);
-  }
-
-}
-
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeDataSet.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeDataSet.java
deleted file mode 100644
index 2580205361..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeDataSet.java
+++ /dev/null
@@ -1,267 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import android.support.annotation.Nullable;
-import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.upstream.DataSpec;
-import com.google.android.exoplayer2.util.Assertions;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-
-/**
- * Collection of {@link FakeData} to be served by a {@link FakeDataSource}.
- *
- * <p>Multiple fake data can be defined by {@link FakeDataSet#setData(String, byte[])} and {@link
- * FakeDataSet#newData(String)} methods. It's also possible to define a default data by {@link
- * FakeDataSet#newDefaultData()}.
- *
- * <p>{@link FakeDataSet#newData(String)} and {@link FakeDataSet#newDefaultData()} return a {@link
- * FakeData} instance which can be used to define specific results during
- * {@link FakeDataSource#read(byte[], int, int)} calls.
- *
- * <p>The data that will be read from the source can be constructed by calling {@link
- * FakeData#appendReadData(byte[])} Calls to {@link FakeDataSource#read(byte[], int, int)} will not
- * span the boundaries between arrays passed to successive calls, and hence the boundaries control
- * the positions at which read requests to the source may only be partially satisfied.
- *
- * <p>Errors can be inserted by calling {@link FakeData#appendReadError(IOException)}. An inserted
- * error will be thrown from the first call to {@link FakeDataSource#read(byte[], int, int)} that
- * attempts to read from the corresponding position, and from all subsequent calls to
- * {@link FakeDataSource#read(byte[], int, int)} until the source is closed. If the source is closed
- * and re-opened having encountered an error, that error will not be thrown again.
- *
- * <p>Actions are inserted by calling {@link FakeData#appendReadAction(Runnable)}. An actions is
- * triggered when the reading reaches action's position. This can be used to make sure the code is
- * in a certain state while testing.
- *
- * <p>Example usage:
- *
- * <pre>
- *   // Create a FakeDataSource then add default data and two FakeData
- *   // "test_file" throws an IOException when tried to be read until closed and reopened.
- *   FakeDataSource fakeDataSource = new FakeDataSource();
- *   fakeDataSource.getDataSet()
- *       .newDefaultData()
- *         .appendReadData(defaultData)
- *         .endData()
- *       .setData("http://1", data1)
- *       .newData("test_file")
- *         .appendReadError(new IOException())
- *         .appendReadData(data2)
- *         .endData();
- * </pre>
- */
-public class FakeDataSet {
-
-  /** Container of fake data to be served by a {@link FakeDataSource}. */
-  public static final class FakeData {
-
-    /**
-     * A segment of {@link FakeData}. May consist of an action or exception instead of actual data.
-     */
-    public static final class Segment {
-
-      public @Nullable final IOException exception;
-      public @Nullable final byte[] data;
-      public final int length;
-      public final long byteOffset;
-      public @Nullable final Runnable action;
-
-      public boolean exceptionThrown;
-      public boolean exceptionCleared;
-      public int bytesRead;
-
-      private Segment(byte[] data, Segment previousSegment) {
-        this(data, data.length, null, null, previousSegment);
-      }
-
-      private Segment(int length, Segment previousSegment) {
-        this(null, length, null, null, previousSegment);
-      }
-
-      private Segment(IOException exception, Segment previousSegment) {
-        this(null, 0, exception, null, previousSegment);
-      }
-
-      private Segment(Runnable action, Segment previousSegment) {
-        this(null, 0, null, action, previousSegment);
-      }
-
-      private Segment(byte[] data, int length, IOException exception, Runnable action,
-          Segment previousSegment) {
-        this.exception = exception;
-        this.action = action;
-        this.data = data;
-        this.length = length;
-        this.byteOffset = previousSegment == null ? 0
-            : previousSegment.byteOffset + previousSegment.length;
-      }
-
-      public boolean isErrorSegment() {
-        return exception != null;
-      }
-
-      public boolean isActionSegment() {
-        return action != null;
-      }
-
-    }
-
-    /** Uri of the data or null if this is the default FakeData. */
-    public final String uri;
-    private final ArrayList<Segment> segments;
-    private final FakeDataSet dataSet;
-    private boolean simulateUnknownLength;
-
-    private FakeData(FakeDataSet dataSet, String uri) {
-      this.uri = uri;
-      this.segments = new ArrayList<>();
-      this.dataSet = dataSet;
-    }
-
-    /** Returns the {@link FakeDataSet} this FakeData belongs to. */
-    public FakeDataSet endData() {
-      return dataSet;
-    }
-
-    /**
-     * When set, {@link FakeDataSource#open(DataSpec)} will behave as though the source is unable to
-     * determine the length of the underlying data. Hence the return value will always be equal to
-     * the {@link DataSpec#length} of the argument, including the case where the length is equal to
-     * {@link C#LENGTH_UNSET}.
-     */
-    public FakeData setSimulateUnknownLength(boolean simulateUnknownLength) {
-      this.simulateUnknownLength = simulateUnknownLength;
-      return this;
-    }
-
-    /**
-     * Appends to the underlying data.
-     */
-    public FakeData appendReadData(byte[] data) {
-      Assertions.checkState(data != null && data.length > 0);
-      segments.add(new Segment(data, getLastSegment()));
-      return this;
-    }
-
-    /**
-     * Appends data of the specified length. No actual data is available and this data should not
-     * be read.
-     */
-    public FakeData appendReadData(int length) {
-      Assertions.checkState(length > 0);
-      segments.add(new Segment(length, getLastSegment()));
-      return this;
-    }
-
-    /**
-     * Appends an error in the underlying data.
-     */
-    public FakeData appendReadError(IOException exception) {
-      segments.add(new Segment(exception, getLastSegment()));
-      return this;
-    }
-
-    /**
-     * Appends an action.
-     */
-    public FakeData appendReadAction(Runnable action) {
-      segments.add(new Segment(action, getLastSegment()));
-      return this;
-    }
-
-    /** Returns the whole data added by {@link #appendReadData(byte[])}. */
-    public byte[] getData() {
-      ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
-      for (Segment segment : segments) {
-        if (segment.data != null) {
-          try {
-            outputStream.write(segment.data);
-          } catch (IOException e) {
-            throw new IllegalStateException(e);
-          }
-        }
-      }
-      return outputStream.toByteArray();
-    }
-
-    /** Returns the list of {@link Segment}s. */
-    public List<Segment> getSegments() {
-      return segments;
-    }
-
-    /** Retuns whether unknown length is simulated */
-    public boolean isSimulatingUnknownLength() {
-      return simulateUnknownLength;
-    }
-
-    private Segment getLastSegment() {
-      int count = segments.size();
-      return count > 0 ? segments.get(count - 1) : null;
-    }
-
-  }
-
-  private final HashMap<String, FakeData> dataMap;
-  private FakeData defaultData;
-
-  public FakeDataSet() {
-    dataMap = new HashMap<>();
-  }
-
-  /** Sets the default data, overwrites if there is one already. */
-  public FakeData newDefaultData() {
-    defaultData = new FakeData(this, null);
-    return defaultData;
-  }
-
-  /** Sets random data with the given {@code length} for the given {@code uri}. */
-  public FakeDataSet setRandomData(String uri, int length) {
-    return setData(uri, TestUtil.buildTestData(length));
-  }
-
-  /** Sets the given {@code data} for the given {@code uri}. */
-  public FakeDataSet setData(String uri, byte[] data) {
-    return newData(uri).appendReadData(data).endData();
-  }
-
-  /** Returns a new {@link FakeData} with the given {@code uri}. */
-  public FakeData newData(String uri) {
-    FakeData data = new FakeData(this, uri);
-    dataMap.put(uri, data);
-    return data;
-  }
-
-  /** Returns the data for the given {@code uri}, or {@code defaultData} if no data is set. */
-  public FakeData getData(String uri) {
-    FakeData data = dataMap.get(uri);
-    return data != null ? data : defaultData;
-  }
-
-  /** Returns a list of all data including {@code defaultData}. */
-  public ArrayList<FakeData> getAllData() {
-    ArrayList<FakeData> fakeDatas = new ArrayList<>(dataMap.values());
-    if (defaultData != null) {
-      fakeDatas.add(defaultData);
-    }
-    return fakeDatas;
-  }
-
-}
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeDataSource.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeDataSource.java
deleted file mode 100644
index 6180a8aa77..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeDataSource.java
+++ /dev/null
@@ -1,223 +0,0 @@
-/*
- * Copyright (C) 2016 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import android.net.Uri;
-import android.support.annotation.Nullable;
-import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.testutil.FakeDataSet.FakeData;
-import com.google.android.exoplayer2.testutil.FakeDataSet.FakeData.Segment;
-import com.google.android.exoplayer2.upstream.DataSource;
-import com.google.android.exoplayer2.upstream.DataSourceException;
-import com.google.android.exoplayer2.upstream.DataSpec;
-import com.google.android.exoplayer2.upstream.TransferListener;
-import com.google.android.exoplayer2.util.Assertions;
-import java.io.IOException;
-import java.util.ArrayList;
-
-/**
- * A fake {@link DataSource} capable of simulating various scenarios. It uses a {@link FakeDataSet}
- * instance which determines the response to data access calls.
- */
-public class FakeDataSource implements DataSource {
-
-  /**
-   * Factory to create a {@link FakeDataSource}.
-   */
-  public static class Factory implements DataSource.Factory {
-
-    protected final TransferListener<? super FakeDataSource> transferListener;
-    protected FakeDataSet fakeDataSet;
-
-    public Factory(@Nullable TransferListener<? super FakeDataSource> transferListener) {
-      this.transferListener = transferListener;
-    }
-
-    public final Factory setFakeDataSet(FakeDataSet fakeDataSet) {
-      this.fakeDataSet = fakeDataSet;
-      return this;
-    }
-
-    @Override
-    public DataSource createDataSource() {
-      return new FakeDataSource(fakeDataSet, transferListener);
-    }
-
-  }
-
-  private final FakeDataSet fakeDataSet;
-  private final TransferListener<? super FakeDataSource> transferListener;
-  private final ArrayList<DataSpec> openedDataSpecs;
-
-  private Uri uri;
-  private boolean opened;
-  private FakeData fakeData;
-  private int currentSegmentIndex;
-  private long bytesRemaining;
-
-  public FakeDataSource() {
-    this(new FakeDataSet());
-  }
-
-  public FakeDataSource(FakeDataSet fakeDataSet) {
-    this(fakeDataSet, null);
-  }
-
-  public FakeDataSource(FakeDataSet fakeDataSet,
-      @Nullable TransferListener<? super FakeDataSource> transferListener) {
-    Assertions.checkNotNull(fakeDataSet);
-    this.fakeDataSet = fakeDataSet;
-    this.transferListener = transferListener;
-    this.openedDataSpecs = new ArrayList<>();
-  }
-
-  public final FakeDataSet getDataSet() {
-    return fakeDataSet;
-  }
-
-  @Override
-  public final long open(DataSpec dataSpec) throws IOException {
-    Assertions.checkState(!opened);
-    // DataSpec requires a matching close call even if open fails.
-    opened = true;
-    uri = dataSpec.uri;
-    openedDataSpecs.add(dataSpec);
-
-    fakeData = fakeDataSet.getData(uri.toString());
-    if (fakeData == null) {
-      throw new IOException("Data not found: " + dataSpec.uri);
-    }
-
-    long totalLength = 0;
-    for (Segment segment : fakeData.getSegments()) {
-      totalLength += segment.length;
-    }
-
-    if (totalLength == 0) {
-      throw new IOException("Data is empty: " + dataSpec.uri);
-    }
-
-    // If the source knows that the request is unsatisfiable then fail.
-    if (dataSpec.position >= totalLength || (dataSpec.length != C.LENGTH_UNSET
-        && (dataSpec.position + dataSpec.length > totalLength))) {
-      throw new DataSourceException(DataSourceException.POSITION_OUT_OF_RANGE);
-    }
-    // Scan through the segments, configuring them for the current read.
-    boolean findingCurrentSegmentIndex = true;
-    currentSegmentIndex = 0;
-    int scannedLength = 0;
-    for (Segment segment : fakeData.getSegments()) {
-      segment.bytesRead =
-          (int) Math.min(Math.max(0, dataSpec.position - scannedLength), segment.length);
-      scannedLength += segment.length;
-      findingCurrentSegmentIndex &= segment.isErrorSegment() ? segment.exceptionCleared
-          : (!segment.isActionSegment() && segment.bytesRead == segment.length);
-      if (findingCurrentSegmentIndex) {
-        currentSegmentIndex++;
-      }
-    }
-    if (transferListener != null) {
-      transferListener.onTransferStart(this, dataSpec);
-    }
-    // Configure bytesRemaining, and return.
-    if (dataSpec.length == C.LENGTH_UNSET) {
-      bytesRemaining = totalLength - dataSpec.position;
-      return fakeData.isSimulatingUnknownLength() ? C.LENGTH_UNSET : bytesRemaining;
-    } else {
-      bytesRemaining = dataSpec.length;
-      return bytesRemaining;
-    }
-  }
-
-  @Override
-  public final int read(byte[] buffer, int offset, int readLength) throws IOException {
-    Assertions.checkState(opened);
-    while (true) {
-      if (currentSegmentIndex == fakeData.getSegments().size() || bytesRemaining == 0) {
-        return C.RESULT_END_OF_INPUT;
-      }
-      Segment current = fakeData.getSegments().get(currentSegmentIndex);
-      if (current.isErrorSegment()) {
-        if (!current.exceptionCleared) {
-          current.exceptionThrown = true;
-          throw (IOException) current.exception.fillInStackTrace();
-        } else {
-          currentSegmentIndex++;
-        }
-      } else if (current.isActionSegment()) {
-        currentSegmentIndex++;
-        current.action.run();
-      } else {
-        // Read at most bytesRemaining.
-        readLength = (int) Math.min(readLength, bytesRemaining);
-        // Do not allow crossing of the segment boundary.
-        readLength = Math.min(readLength, current.length - current.bytesRead);
-        // Perform the read and return.
-        if (current.data != null) {
-          System.arraycopy(current.data, current.bytesRead, buffer, offset, readLength);
-        }
-        onDataRead(readLength);
-        if (transferListener != null) {
-          transferListener.onBytesTransferred(this, readLength);
-        }
-        bytesRemaining -= readLength;
-        current.bytesRead += readLength;
-        if (current.bytesRead == current.length) {
-          currentSegmentIndex++;
-        }
-        return readLength;
-      }
-    }
-  }
-
-  @Override
-  public final Uri getUri() {
-    return uri;
-  }
-
-  @Override
-  public final void close() throws IOException {
-    Assertions.checkState(opened);
-    opened = false;
-    uri = null;
-    if (fakeData != null && currentSegmentIndex < fakeData.getSegments().size()) {
-      Segment current = fakeData.getSegments().get(currentSegmentIndex);
-      if (current.isErrorSegment() && current.exceptionThrown) {
-        current.exceptionCleared = true;
-      }
-    }
-    if (transferListener != null) {
-      transferListener.onTransferEnd(this);
-    }
-    fakeData = null;
-  }
-
-  /**
-   * Returns the {@link DataSpec} instances passed to {@link #open(DataSpec)} since the last call to
-   * this method.
-   */
-  public final DataSpec[] getAndClearOpenedDataSpecs() {
-    DataSpec[] dataSpecs = new DataSpec[openedDataSpecs.size()];
-    openedDataSpecs.toArray(dataSpecs);
-    openedDataSpecs.clear();
-    return dataSpecs;
-  }
-
-  protected void onDataRead(int bytesRead) {
-    // Do nothing. Can be overridden.
-  }
-
-}
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeExtractorInput.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeExtractorInput.java
deleted file mode 100644
index 5cb11fdd81..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeExtractorInput.java
+++ /dev/null
@@ -1,274 +0,0 @@
-/*
- * Copyright (C) 2016 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import android.util.SparseBooleanArray;
-import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.extractor.ExtractorInput;
-import java.io.EOFException;
-import java.io.IOException;
-import junit.framework.Assert;
-
-/**
- * A fake {@link ExtractorInput} capable of simulating various scenarios.
- * <p>
- * Read, skip and peek errors can be simulated using {@link Builder#setSimulateIOErrors}. When
- * enabled each read and skip will throw a {@link SimulatedIOException} unless one has already been
- * thrown from the current position. Each peek will throw {@link SimulatedIOException} unless one
- * has already been thrown from the current peek position. When a {@link SimulatedIOException} is
- * thrown the read position is left unchanged and the peek position is reset back to the read
- * position.
- * <p>
- * Partial reads and skips can be simulated using {@link Builder#setSimulatePartialReads}. When
- * enabled, {@link #read(byte[], int, int)} and {@link #skip(int)} calls will only read or skip a
- * single byte unless a partial read or skip has already been performed that had the same target
- * position. For example, a first read request for 10 bytes will be partially satisfied by reading
- * a single byte and advancing the position to 1. If the following read request attempts to read 9
- * bytes then it will be fully satisfied, since it has the same target position of 10.
- * <p>
- * Unknown data length can be simulated using {@link Builder#setSimulateUnknownLength}. When enabled
- * {@link #getLength()} will return {@link C#LENGTH_UNSET} rather than the length of the data.
- */
-public final class FakeExtractorInput implements ExtractorInput {
-
-  /**
-   * Thrown when simulating an {@link IOException}.
-   */
-  public static final class SimulatedIOException extends IOException {
-
-    public SimulatedIOException(String message) {
-      super(message);
-    }
-
-  }
-
-  private final byte[] data;
-  private final boolean simulateUnknownLength;
-  private final boolean simulatePartialReads;
-  private final boolean simulateIOErrors;
-
-  private int readPosition;
-  private int peekPosition;
-
-  private final SparseBooleanArray partiallySatisfiedTargetPositions;
-  private final SparseBooleanArray failedReadPositions;
-  private final SparseBooleanArray failedPeekPositions;
-
-  private FakeExtractorInput(byte[] data, boolean simulateUnknownLength,
-      boolean simulatePartialReads, boolean simulateIOErrors) {
-    this.data = data;
-    this.simulateUnknownLength = simulateUnknownLength;
-    this.simulatePartialReads = simulatePartialReads;
-    this.simulateIOErrors = simulateIOErrors;
-    partiallySatisfiedTargetPositions = new SparseBooleanArray();
-    failedReadPositions = new SparseBooleanArray();
-    failedPeekPositions = new SparseBooleanArray();
-  }
-
-  /**
-   * Sets the read and peek positions.
-   *
-   * @param position The position to set.
-   */
-  public void setPosition(int position) {
-    Assert.assertTrue(0 <= position && position <= data.length);
-    readPosition = position;
-    peekPosition = position;
-  }
-
-  @Override
-  public int read(byte[] target, int offset, int length) throws IOException {
-    length = getReadLength(length);
-    if (readFully(target, offset, length, true)) {
-      return length;
-    }
-    return C.RESULT_END_OF_INPUT;
-  }
-
-  @Override
-  public boolean readFully(byte[] target, int offset, int length, boolean allowEndOfInput)
-      throws IOException {
-    if (!checkXFully(allowEndOfInput, readPosition, length, failedReadPositions)) {
-      return false;
-    }
-    System.arraycopy(data, readPosition, target, offset, length);
-    readPosition += length;
-    peekPosition = readPosition;
-    return true;
-  }
-
-  @Override
-  public void readFully(byte[] target, int offset, int length) throws IOException {
-    readFully(target, offset, length, false);
-  }
-
-  @Override
-  public int skip(int length) throws IOException {
-    length = getReadLength(length);
-    if (skipFully(length, true)) {
-      return length;
-    }
-    return C.RESULT_END_OF_INPUT;
-  }
-
-  @Override
-  public boolean skipFully(int length, boolean allowEndOfInput) throws IOException {
-    if (!checkXFully(allowEndOfInput, readPosition, length, failedReadPositions)) {
-      return false;
-    }
-    readPosition += length;
-    peekPosition = readPosition;
-    return true;
-  }
-
-  @Override
-  public void skipFully(int length) throws IOException {
-    skipFully(length, false);
-  }
-
-  @Override
-  public boolean peekFully(byte[] target, int offset, int length, boolean allowEndOfInput)
-      throws IOException {
-    if (!checkXFully(allowEndOfInput, peekPosition, length, failedPeekPositions)) {
-      return false;
-    }
-    System.arraycopy(data, peekPosition, target, offset, length);
-    peekPosition += length;
-    return true;
-  }
-
-  @Override
-  public void peekFully(byte[] target, int offset, int length) throws IOException {
-    peekFully(target, offset, length, false);
-  }
-
-  @Override
-  public boolean advancePeekPosition(int length, boolean allowEndOfInput) throws IOException {
-    if (!checkXFully(allowEndOfInput, peekPosition, length, failedPeekPositions)) {
-      return false;
-    }
-    peekPosition += length;
-    return true;
-  }
-
-  @Override
-  public void advancePeekPosition(int length) throws IOException {
-    advancePeekPosition(length, false);
-  }
-
-  @Override
-  public void resetPeekPosition() {
-    peekPosition = readPosition;
-  }
-
-  @Override
-  public long getPeekPosition() {
-    return peekPosition;
-  }
-
-  @Override
-  public long getPosition() {
-    return readPosition;
-  }
-
-  @Override
-  public long getLength() {
-    return simulateUnknownLength ? C.LENGTH_UNSET : data.length;
-  }
-
-  @Override
-  public <E extends Throwable> void setRetryPosition(long position, E e) throws E {
-    Assert.assertTrue(position >= 0);
-    readPosition = (int) position;
-    throw e;
-  }
-
-  private boolean checkXFully(boolean allowEndOfInput, int position, int length,
-      SparseBooleanArray failedPositions) throws IOException {
-    if (simulateIOErrors && !failedPositions.get(position)) {
-      failedPositions.put(position, true);
-      peekPosition = readPosition;
-      throw new SimulatedIOException("Simulated IO error at position: " + position);
-    }
-    if (length > 0 && position == data.length) {
-      if (allowEndOfInput) {
-        return false;
-      }
-      throw new EOFException();
-    }
-    if (position + length > data.length) {
-      throw new EOFException("Attempted to move past end of data: (" + position + " + "
-          + length + ") > " + data.length);
-    }
-    return true;
-  }
-
-  private int getReadLength(int requestedLength) {
-    if (readPosition == data.length) {
-      // If the requested length is non-zero, the end of the input will be read.
-      return requestedLength == 0 ? 0 : Integer.MAX_VALUE;
-    }
-    int targetPosition = readPosition + requestedLength;
-    if (simulatePartialReads && requestedLength > 1
-        && !partiallySatisfiedTargetPositions.get(targetPosition)) {
-      partiallySatisfiedTargetPositions.put(targetPosition, true);
-      return 1;
-    }
-    return Math.min(requestedLength, data.length - readPosition);
-  }
-
-  /**
-   * Builder of {@link FakeExtractorInput} instances.
-   */
-  public static final class Builder {
-
-    private byte[] data;
-    private boolean simulateUnknownLength;
-    private boolean simulatePartialReads;
-    private boolean simulateIOErrors;
-
-    public Builder() {
-      data = new byte[0];
-    }
-
-    public Builder setData(byte[] data) {
-      this.data = data;
-      return this;
-    }
-
-    public Builder setSimulateUnknownLength(boolean simulateUnknownLength) {
-      this.simulateUnknownLength = simulateUnknownLength;
-      return this;
-    }
-
-    public Builder setSimulatePartialReads(boolean simulatePartialReads) {
-      this.simulatePartialReads = simulatePartialReads;
-      return this;
-    }
-
-    public Builder setSimulateIOErrors(boolean simulateIOErrors) {
-      this.simulateIOErrors = simulateIOErrors;
-      return this;
-    }
-
-    public FakeExtractorInput build() {
-      return new FakeExtractorInput(data, simulateUnknownLength, simulatePartialReads,
-          simulateIOErrors);
-    }
-
-  }
-
-}
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeExtractorOutput.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeExtractorOutput.java
deleted file mode 100644
index ee8927ea21..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeExtractorOutput.java
+++ /dev/null
@@ -1,132 +0,0 @@
-/*
- * Copyright (C) 2016 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import android.app.Instrumentation;
-import android.util.SparseArray;
-import com.google.android.exoplayer2.extractor.ExtractorOutput;
-import com.google.android.exoplayer2.extractor.SeekMap;
-import java.io.File;
-import java.io.IOException;
-import java.io.PrintWriter;
-import junit.framework.Assert;
-
-/**
- * A fake {@link ExtractorOutput}.
- */
-public final class FakeExtractorOutput implements ExtractorOutput, Dumper.Dumpable {
-
-  /**
-   * If true, makes {@link #assertOutput(Instrumentation, String)} method write dump result to
-   * {@code /sdcard/Android/data/apk_package/ + dumpfile} file instead of comparing it with an
-   * existing file.
-   */
-  private static final boolean WRITE_DUMP = false;
-
-  public final SparseArray<FakeTrackOutput> trackOutputs;
-
-  public int numberOfTracks;
-  public boolean tracksEnded;
-  public SeekMap seekMap;
-
-  public FakeExtractorOutput() {
-    trackOutputs = new SparseArray<>();
-  }
-
-  @Override
-  public FakeTrackOutput track(int id, int type) {
-    FakeTrackOutput output = trackOutputs.get(id);
-    if (output == null) {
-      Assert.assertFalse(tracksEnded);
-      numberOfTracks++;
-      output = new FakeTrackOutput();
-      trackOutputs.put(id, output);
-    }
-    return output;
-  }
-
-  @Override
-  public void endTracks() {
-    tracksEnded = true;
-  }
-
-  @Override
-  public void seekMap(SeekMap seekMap) {
-    this.seekMap = seekMap;
-  }
-
-  public void assertEquals(FakeExtractorOutput expected) {
-    Assert.assertEquals(expected.numberOfTracks, numberOfTracks);
-    Assert.assertEquals(expected.tracksEnded, tracksEnded);
-    if (expected.seekMap == null) {
-      Assert.assertNull(seekMap);
-    } else {
-      // TODO: Bulk up this check if possible.
-      Assert.assertNotNull(seekMap);
-      Assert.assertEquals(expected.seekMap.getClass(), seekMap.getClass());
-      Assert.assertEquals(expected.seekMap.isSeekable(), seekMap.isSeekable());
-      Assert.assertEquals(expected.seekMap.getPosition(0), seekMap.getPosition(0));
-    }
-    for (int i = 0; i < numberOfTracks; i++) {
-      Assert.assertEquals(expected.trackOutputs.keyAt(i), trackOutputs.keyAt(i));
-      trackOutputs.valueAt(i).assertEquals(expected.trackOutputs.valueAt(i));
-    }
-  }
-
-  /**
-   * Asserts that dump of this {@link FakeExtractorOutput} is equal to expected dump which is read
-   * from {@code dumpFile}.
-   *
-   * <p>If assertion fails because of an intended change in the output or a new dump file needs to
-   * be created, set {@link #WRITE_DUMP} flag to true and run the test again. Instead of assertion,
-   * actual dump will be written to {@code dumpFile}. This new dump file needs to be copied to the
-   * project, {@code library/src/androidTest/assets} folder manually.
-   */
-  public void assertOutput(Instrumentation instrumentation, String dumpFile) throws IOException {
-    String actual = new Dumper().add(this).toString();
-
-    if (WRITE_DUMP) {
-      File directory = instrumentation.getContext().getExternalFilesDir(null);
-      File file = new File(directory, dumpFile);
-      file.getParentFile().mkdirs();
-      PrintWriter out = new PrintWriter(file);
-      out.print(actual);
-      out.close();
-    } else {
-      String expected = TestUtil.getString(instrumentation, dumpFile);
-      Assert.assertEquals(dumpFile, expected, actual);
-    }
-  }
-
-  @Override
-  public void dump(Dumper dumper) {
-    if (seekMap != null) {
-      dumper.startBlock("seekMap")
-          .add("isSeekable", seekMap.isSeekable())
-          .addTime("duration", seekMap.getDurationUs())
-          .add("getPosition(0)", seekMap.getPosition(0))
-          .endBlock();
-    }
-    dumper.add("numberOfTracks", numberOfTracks);
-    for (int i = 0; i < numberOfTracks; i++) {
-      dumper.startBlock("track " + trackOutputs.keyAt(i))
-          .add(trackOutputs.valueAt(i))
-          .endBlock();
-    }
-    dumper.add("tracksEnded", tracksEnded);
-  }
-
-}
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeMediaClockRenderer.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeMediaClockRenderer.java
deleted file mode 100644
index 4d118f9288..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeMediaClockRenderer.java
+++ /dev/null
@@ -1,36 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import com.google.android.exoplayer2.Format;
-import com.google.android.exoplayer2.Renderer;
-import com.google.android.exoplayer2.util.MediaClock;
-
-/**
- * Fake abstract {@link Renderer} which is also a {@link MediaClock}.
- */
-public abstract class FakeMediaClockRenderer extends FakeRenderer implements MediaClock {
-
-  public FakeMediaClockRenderer(Format... expectedFormats) {
-    super(expectedFormats);
-  }
-
-  @Override
-  public MediaClock getMediaClock() {
-    return this;
-  }
-
-}
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeMediaPeriod.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeMediaPeriod.java
deleted file mode 100644
index d8e501a298..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeMediaPeriod.java
+++ /dev/null
@@ -1,126 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.Format;
-import com.google.android.exoplayer2.source.MediaPeriod;
-import com.google.android.exoplayer2.source.SampleStream;
-import com.google.android.exoplayer2.source.TrackGroup;
-import com.google.android.exoplayer2.source.TrackGroupArray;
-import com.google.android.exoplayer2.trackselection.TrackSelection;
-import java.io.IOException;
-import junit.framework.Assert;
-
-/**
- * Fake {@link MediaPeriod} that provides one track with a given {@link Format}. Selecting that
- * track will give the player a {@link FakeSampleStream}.
- */
-public final class FakeMediaPeriod implements MediaPeriod {
-
-  private final TrackGroupArray trackGroupArray;
-
-  private boolean preparedPeriod;
-
-  public FakeMediaPeriod(TrackGroupArray trackGroupArray) {
-    this.trackGroupArray = trackGroupArray;
-  }
-
-  public void release() {
-    preparedPeriod = false;
-  }
-
-  @Override
-  public void prepare(Callback callback, long positionUs) {
-    Assert.assertFalse(preparedPeriod);
-    Assert.assertEquals(0, positionUs);
-    preparedPeriod = true;
-    callback.onPrepared(this);
-  }
-
-  @Override
-  public void maybeThrowPrepareError() throws IOException {
-    Assert.assertTrue(preparedPeriod);
-  }
-
-  @Override
-  public TrackGroupArray getTrackGroups() {
-    Assert.assertTrue(preparedPeriod);
-    return trackGroupArray;
-  }
-
-  @Override
-  public long selectTracks(TrackSelection[] selections, boolean[] mayRetainStreamFlags,
-      SampleStream[] streams, boolean[] streamResetFlags, long positionUs) {
-    Assert.assertTrue(preparedPeriod);
-    int rendererCount = selections.length;
-    for (int i = 0; i < rendererCount; i++) {
-      if (streams[i] != null && (selections[i] == null || !mayRetainStreamFlags[i])) {
-        streams[i] = null;
-      }
-    }
-    for (int i = 0; i < rendererCount; i++) {
-      if (streams[i] == null && selections[i] != null) {
-        TrackSelection selection = selections[i];
-        Assert.assertTrue(1 <= selection.length());
-        TrackGroup trackGroup = selection.getTrackGroup();
-        Assert.assertTrue(trackGroupArray.indexOf(trackGroup) != C.INDEX_UNSET);
-        int indexInTrackGroup = selection.getIndexInTrackGroup(selection.getSelectedIndex());
-        Assert.assertTrue(0 <= indexInTrackGroup);
-        Assert.assertTrue(indexInTrackGroup < trackGroup.length);
-        streams[i] = new FakeSampleStream(selection.getSelectedFormat());
-        streamResetFlags[i] = true;
-      }
-    }
-    return 0;
-  }
-
-  @Override
-  public void discardBuffer(long positionUs) {
-    // Do nothing.
-  }
-
-  @Override
-  public long readDiscontinuity() {
-    Assert.assertTrue(preparedPeriod);
-    return C.TIME_UNSET;
-  }
-
-  @Override
-  public long getBufferedPositionUs() {
-    Assert.assertTrue(preparedPeriod);
-    return C.TIME_END_OF_SOURCE;
-  }
-
-  @Override
-  public long seekToUs(long positionUs) {
-    Assert.assertTrue(preparedPeriod);
-    return positionUs;
-  }
-
-  @Override
-  public long getNextLoadPositionUs() {
-    Assert.assertTrue(preparedPeriod);
-    return C.TIME_END_OF_SOURCE;
-  }
-
-  @Override
-  public boolean continueLoading(long positionUs) {
-    Assert.assertTrue(preparedPeriod);
-    return false;
-  }
-
-}
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeMediaSource.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeMediaSource.java
deleted file mode 100644
index a2c1e9879e..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeMediaSource.java
+++ /dev/null
@@ -1,114 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import com.google.android.exoplayer2.ExoPlayer;
-import com.google.android.exoplayer2.Format;
-import com.google.android.exoplayer2.Timeline;
-import com.google.android.exoplayer2.source.MediaPeriod;
-import com.google.android.exoplayer2.source.MediaSource;
-import com.google.android.exoplayer2.source.TrackGroup;
-import com.google.android.exoplayer2.source.TrackGroupArray;
-import com.google.android.exoplayer2.upstream.Allocator;
-import com.google.android.exoplayer2.util.Assertions;
-import java.io.IOException;
-import java.util.ArrayList;
-import junit.framework.Assert;
-
-/**
- * Fake {@link MediaSource} that provides a given timeline. Creating the period will return a
- * {@link FakeMediaPeriod} with a {@link TrackGroupArray} using the given {@link Format}s.
- */
-public class FakeMediaSource implements MediaSource {
-
-  private final Timeline timeline;
-  private final Object manifest;
-  private final TrackGroupArray trackGroupArray;
-  private final ArrayList<FakeMediaPeriod> activeMediaPeriods;
-
-  private boolean preparedSource;
-  private boolean releasedSource;
-
-  /**
-   * Creates a {@link FakeMediaSource}. This media source creates {@link FakeMediaPeriod}s with a
-   * {@link TrackGroupArray} using the given {@link Format}s.
-   */
-  public FakeMediaSource(Timeline timeline, Object manifest, Format... formats) {
-    this(timeline, manifest, buildTrackGroupArray(formats));
-  }
-
-  /**
-   * Creates a {@link FakeMediaSource}. This media source creates {@link FakeMediaPeriod}s with the
-   * given {@link TrackGroupArray}.
-   */
-  public FakeMediaSource(Timeline timeline, Object manifest, TrackGroupArray trackGroupArray) {
-    this.timeline = timeline;
-    this.manifest = manifest;
-    this.activeMediaPeriods = new ArrayList<>();
-    this.trackGroupArray = trackGroupArray;
-  }
-
-  public void assertReleased() {
-    Assert.assertTrue(releasedSource);
-  }
-
-  @Override
-  public void prepareSource(ExoPlayer player, boolean isTopLevelSource, Listener listener) {
-    Assert.assertFalse(preparedSource);
-    preparedSource = true;
-    listener.onSourceInfoRefreshed(timeline, manifest);
-  }
-
-  @Override
-  public void maybeThrowSourceInfoRefreshError() throws IOException {
-    Assert.assertTrue(preparedSource);
-  }
-
-  @Override
-  public MediaPeriod createPeriod(MediaPeriodId id, Allocator allocator) {
-    Assertions.checkIndex(id.periodIndex, 0, timeline.getPeriodCount());
-    Assert.assertTrue(preparedSource);
-    Assert.assertFalse(releasedSource);
-    FakeMediaPeriod mediaPeriod = new FakeMediaPeriod(trackGroupArray);
-    activeMediaPeriods.add(mediaPeriod);
-    return mediaPeriod;
-  }
-
-  @Override
-  public void releasePeriod(MediaPeriod mediaPeriod) {
-    Assert.assertTrue(preparedSource);
-    Assert.assertFalse(releasedSource);
-    FakeMediaPeriod fakeMediaPeriod = (FakeMediaPeriod) mediaPeriod;
-    Assert.assertTrue(activeMediaPeriods.remove(fakeMediaPeriod));
-    fakeMediaPeriod.release();
-  }
-
-  @Override
-  public void releaseSource() {
-    Assert.assertTrue(preparedSource);
-    Assert.assertFalse(releasedSource);
-    Assert.assertTrue(activeMediaPeriods.isEmpty());
-    releasedSource = true;
-  }
-
-  private static TrackGroupArray buildTrackGroupArray(Format... formats) {
-    TrackGroup[] trackGroups = new TrackGroup[formats.length];
-    for (int i = 0; i < formats.length; i++) {
-      trackGroups[i] = new TrackGroup(formats[i]);
-    }
-    return new TrackGroupArray(trackGroups);
-  }
-}
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeRenderer.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeRenderer.java
deleted file mode 100644
index a66043b77f..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeRenderer.java
+++ /dev/null
@@ -1,94 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import com.google.android.exoplayer2.BaseRenderer;
-import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.ExoPlaybackException;
-import com.google.android.exoplayer2.Format;
-import com.google.android.exoplayer2.FormatHolder;
-import com.google.android.exoplayer2.Renderer;
-import com.google.android.exoplayer2.decoder.DecoderInputBuffer;
-import com.google.android.exoplayer2.util.MimeTypes;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-import junit.framework.Assert;
-
-/**
- * Fake {@link Renderer} that supports any format with the matching MIME type. The renderer
- * verifies that it reads one of the given {@link Format}s.
- */
-public class FakeRenderer extends BaseRenderer {
-
-  private final List<Format> expectedFormats;
-  private final DecoderInputBuffer buffer;
-
-  public int positionResetCount;
-  public int formatReadCount;
-  public int bufferReadCount;
-  public boolean isEnded;
-  public boolean isReady;
-
-  public FakeRenderer(Format... expectedFormats) {
-    super(expectedFormats.length == 0 ? C.TRACK_TYPE_UNKNOWN
-        : MimeTypes.getTrackType(expectedFormats[0].sampleMimeType));
-    this.expectedFormats = Collections.unmodifiableList(Arrays.asList(expectedFormats));
-    this.buffer = new DecoderInputBuffer(DecoderInputBuffer.BUFFER_REPLACEMENT_MODE_NORMAL);
-  }
-
-  @Override
-  protected void onPositionReset(long positionUs, boolean joining) throws ExoPlaybackException {
-    positionResetCount++;
-    isEnded = false;
-  }
-
-  @Override
-  public void render(long positionUs, long elapsedRealtimeUs) throws ExoPlaybackException {
-    if (!isEnded) {
-      // Verify the format matches the expected format.
-      FormatHolder formatHolder = new FormatHolder();
-      int result = readSource(formatHolder, buffer, false);
-      if (result == C.RESULT_FORMAT_READ) {
-        formatReadCount++;
-        Assert.assertTrue(expectedFormats.contains(formatHolder.format));
-      } else if (result == C.RESULT_BUFFER_READ) {
-        bufferReadCount++;
-        if (buffer.isEndOfStream()) {
-          isEnded = true;
-        }
-      }
-    }
-    isReady = buffer.timeUs >= positionUs;
-  }
-
-  @Override
-  public boolean isReady() {
-    return isReady || isSourceReady();
-  }
-
-  @Override
-  public boolean isEnded() {
-    return isEnded;
-  }
-
-  @Override
-  public int supportsFormat(Format format) throws ExoPlaybackException {
-    return getTrackType() == MimeTypes.getTrackType(format.sampleMimeType)
-        ? (FORMAT_HANDLED | ADAPTIVE_SEAMLESS) : FORMAT_UNSUPPORTED_TYPE;
-  }
-
-}
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeSampleStream.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeSampleStream.java
deleted file mode 100644
index 4e1e32980f..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeSampleStream.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.Format;
-import com.google.android.exoplayer2.FormatHolder;
-import com.google.android.exoplayer2.decoder.DecoderInputBuffer;
-import com.google.android.exoplayer2.source.SampleStream;
-import java.io.IOException;
-
-/**
- * Fake {@link SampleStream} that outputs a given {@link Format} then sets the end of stream flag
- * on its input buffer.
- */
-public final class FakeSampleStream implements SampleStream {
-
-  private final Format format;
-
-  private boolean readFormat;
-
-  public FakeSampleStream(Format format) {
-    this.format = format;
-  }
-
-  @Override
-  public boolean isReady() {
-    return true;
-  }
-
-  @Override
-  public int readData(FormatHolder formatHolder, DecoderInputBuffer buffer,
-      boolean formatRequired) {
-    if (formatRequired || !readFormat) {
-      formatHolder.format = format;
-      readFormat = true;
-      return C.RESULT_FORMAT_READ;
-    } else {
-      buffer.setFlags(C.BUFFER_FLAG_END_OF_STREAM);
-      return C.RESULT_BUFFER_READ;
-    }
-  }
-
-  @Override
-  public void maybeThrowError() throws IOException {
-    // Do nothing.
-  }
-
-  @Override
-  public void skipData(long positionUs) {
-    // Do nothing.
-  }
-
-}
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTimeline.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTimeline.java
deleted file mode 100644
index 040782264b..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTimeline.java
+++ /dev/null
@@ -1,111 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.Timeline;
-import com.google.android.exoplayer2.util.Util;
-
-/**
- * Fake {@link Timeline} which can be setup to return custom {@link TimelineWindowDefinition}s.
- */
-public final class FakeTimeline extends Timeline {
-
-  /**
-   * Definition used to define a {@link FakeTimeline}.
-   */
-  public static final class TimelineWindowDefinition {
-
-    private static final int WINDOW_DURATION_US = 100000;
-
-    public final int periodCount;
-    public final Object id;
-    public final boolean isSeekable;
-    public final boolean isDynamic;
-    public final long durationUs;
-
-    public TimelineWindowDefinition(int periodCount, Object id) {
-      this(periodCount, id, true, false, WINDOW_DURATION_US);
-    }
-
-    public TimelineWindowDefinition(boolean isSeekable, boolean isDynamic, long durationUs) {
-      this(1, 0, isSeekable, isDynamic, durationUs);
-    }
-
-    public TimelineWindowDefinition(int periodCount, Object id, boolean isSeekable,
-        boolean isDynamic, long durationUs) {
-      this.periodCount = periodCount;
-      this.id = id;
-      this.isSeekable = isSeekable;
-      this.isDynamic = isDynamic;
-      this.durationUs = durationUs;
-    }
-
-  }
-
-  private final TimelineWindowDefinition[] windowDefinitions;
-  private final int[] periodOffsets;
-
-  public FakeTimeline(TimelineWindowDefinition... windowDefinitions) {
-    this.windowDefinitions = windowDefinitions;
-    periodOffsets = new int[windowDefinitions.length + 1];
-    periodOffsets[0] = 0;
-    for (int i = 0; i < windowDefinitions.length; i++) {
-      periodOffsets[i + 1] = periodOffsets[i] + windowDefinitions[i].periodCount;
-    }
-  }
-
-  @Override
-  public int getWindowCount() {
-    return windowDefinitions.length;
-  }
-
-  @Override
-  public Window getWindow(int windowIndex, Window window, boolean setIds,
-      long defaultPositionProjectionUs) {
-    TimelineWindowDefinition windowDefinition = windowDefinitions[windowIndex];
-    Object id = setIds ? windowDefinition.id : null;
-    return window.set(id, C.TIME_UNSET, C.TIME_UNSET, windowDefinition.isSeekable,
-        windowDefinition.isDynamic, 0, windowDefinition.durationUs, periodOffsets[windowIndex],
-        periodOffsets[windowIndex + 1] - 1, 0);
-  }
-
-  @Override
-  public int getPeriodCount() {
-    return periodOffsets[periodOffsets.length - 1];
-  }
-
-  @Override
-  public Period getPeriod(int periodIndex, Period period, boolean setIds) {
-    int windowIndex = Util.binarySearchFloor(periodOffsets, periodIndex, true, false);
-    int windowPeriodIndex = periodIndex - periodOffsets[windowIndex];
-    TimelineWindowDefinition windowDefinition = windowDefinitions[windowIndex];
-    Object id = setIds ? windowPeriodIndex : null;
-    Object uid = setIds ? periodIndex : null;
-    long periodDurationUs = windowDefinition.durationUs / windowDefinition.periodCount;
-    return period.set(id, uid, windowIndex, periodDurationUs, periodDurationUs * windowPeriodIndex);
-  }
-
-  @Override
-  public int getIndexOfPeriod(Object uid) {
-    if (!(uid instanceof Integer)) {
-      return C.INDEX_UNSET;
-    }
-    int index = (Integer) uid;
-    return index >= 0 && index < getPeriodCount() ? index : C.INDEX_UNSET;
-  }
-
-}
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTrackOutput.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTrackOutput.java
deleted file mode 100644
index b14e6f60ef..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTrackOutput.java
+++ /dev/null
@@ -1,179 +0,0 @@
-/*
- * Copyright (C) 2016 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import android.test.MoreAsserts;
-import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.Format;
-import com.google.android.exoplayer2.extractor.ExtractorInput;
-import com.google.android.exoplayer2.extractor.TrackOutput;
-import com.google.android.exoplayer2.util.ParsableByteArray;
-import java.io.EOFException;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import junit.framework.Assert;
-
-/**
- * A fake {@link TrackOutput}.
- */
-public final class FakeTrackOutput implements TrackOutput, Dumper.Dumpable {
-
-  private final ArrayList<Long> sampleTimesUs;
-  private final ArrayList<Integer> sampleFlags;
-  private final ArrayList<Integer> sampleStartOffsets;
-  private final ArrayList<Integer> sampleEndOffsets;
-  private final ArrayList<CryptoData> cryptoDatas;
-
-  private byte[] sampleData;
-  public Format format;
-
-  public FakeTrackOutput() {
-    sampleData = new byte[0];
-    sampleTimesUs = new ArrayList<>();
-    sampleFlags = new ArrayList<>();
-    sampleStartOffsets = new ArrayList<>();
-    sampleEndOffsets = new ArrayList<>();
-    cryptoDatas = new ArrayList<>();
-  }
-
-  public void clear() {
-    sampleData = new byte[0];
-    sampleTimesUs.clear();
-    sampleFlags.clear();
-    sampleStartOffsets.clear();
-    sampleEndOffsets.clear();
-    cryptoDatas.clear();
-  }
-
-  @Override
-  public void format(Format format) {
-    this.format = format;
-  }
-
-  @Override
-  public int sampleData(ExtractorInput input, int length, boolean allowEndOfInput)
-      throws IOException, InterruptedException {
-    byte[] newData = new byte[length];
-    int bytesAppended = input.read(newData, 0, length);
-    if (bytesAppended == C.RESULT_END_OF_INPUT) {
-      if (allowEndOfInput) {
-        return C.RESULT_END_OF_INPUT;
-      }
-      throw new EOFException();
-    }
-    newData = Arrays.copyOf(newData, bytesAppended);
-    sampleData = TestUtil.joinByteArrays(sampleData, newData);
-    return bytesAppended;
-  }
-
-  @Override
-  public void sampleData(ParsableByteArray data, int length) {
-    byte[] newData = new byte[length];
-    data.readBytes(newData, 0, length);
-    sampleData = TestUtil.joinByteArrays(sampleData, newData);
-  }
-
-  @Override
-  public void sampleMetadata(long timeUs, @C.BufferFlags int flags, int size, int offset,
-      CryptoData cryptoData) {
-    sampleTimesUs.add(timeUs);
-    sampleFlags.add(flags);
-    sampleStartOffsets.add(sampleData.length - offset - size);
-    sampleEndOffsets.add(sampleData.length - offset);
-    cryptoDatas.add(cryptoData);
-  }
-
-  public void assertSampleCount(int count) {
-    Assert.assertEquals(count, sampleTimesUs.size());
-  }
-
-  public void assertSample(int index, byte[] data, long timeUs, int flags, CryptoData cryptoData) {
-    byte[] actualData = getSampleData(index);
-    MoreAsserts.assertEquals(data, actualData);
-    Assert.assertEquals(timeUs, (long) sampleTimesUs.get(index));
-    Assert.assertEquals(flags, (int) sampleFlags.get(index));
-    Assert.assertEquals(cryptoData, cryptoDatas.get(index));
-  }
-
-  public byte[] getSampleData(int index) {
-    return Arrays.copyOfRange(sampleData, sampleStartOffsets.get(index),
-        sampleEndOffsets.get(index));
-  }
-
-  public void assertEquals(FakeTrackOutput expected) {
-    Assert.assertEquals(expected.format, format);
-    Assert.assertEquals(expected.sampleTimesUs.size(), sampleTimesUs.size());
-    MoreAsserts.assertEquals(expected.sampleData, sampleData);
-    for (int i = 0; i < sampleTimesUs.size(); i++) {
-      Assert.assertEquals(expected.sampleTimesUs.get(i), sampleTimesUs.get(i));
-      Assert.assertEquals(expected.sampleFlags.get(i), sampleFlags.get(i));
-      Assert.assertEquals(expected.sampleStartOffsets.get(i), sampleStartOffsets.get(i));
-      Assert.assertEquals(expected.sampleEndOffsets.get(i), sampleEndOffsets.get(i));
-      if (expected.cryptoDatas.get(i) == null) {
-        Assert.assertNull(cryptoDatas.get(i));
-      } else {
-        Assert.assertEquals(expected.cryptoDatas.get(i), cryptoDatas.get(i));
-      }
-    }
-  }
-
-  @Override
-  public void dump(Dumper dumper) {
-    dumper.startBlock("format")
-        .add("bitrate", format.bitrate)
-        .add("id", format.id)
-        .add("containerMimeType", format.containerMimeType)
-        .add("sampleMimeType", format.sampleMimeType)
-        .add("maxInputSize", format.maxInputSize)
-        .add("width", format.width)
-        .add("height", format.height)
-        .add("frameRate", format.frameRate)
-        .add("rotationDegrees", format.rotationDegrees)
-        .add("pixelWidthHeightRatio", format.pixelWidthHeightRatio)
-        .add("channelCount", format.channelCount)
-        .add("sampleRate", format.sampleRate)
-        .add("pcmEncoding", format.pcmEncoding)
-        .add("encoderDelay", format.encoderDelay)
-        .add("encoderPadding", format.encoderPadding)
-        .add("subsampleOffsetUs", format.subsampleOffsetUs)
-        .add("selectionFlags", format.selectionFlags)
-        .add("language", format.language)
-        .add("drmInitData", format.drmInitData != null ? format.drmInitData.hashCode() : "-");
-
-    dumper.startBlock("initializationData");
-    for (int i = 0; i < format.initializationData.size(); i++) {
-      dumper.add("data", format.initializationData.get(i));
-    }
-    dumper.endBlock().endBlock();
-
-    dumper.add("sample count", sampleTimesUs.size());
-
-    for (int i = 0; i < sampleTimesUs.size(); i++) {
-      dumper.startBlock("sample " + i)
-          .add("time", sampleTimesUs.get(i))
-          .add("flags", sampleFlags.get(i))
-          .add("data", getSampleData(i));
-      CryptoData cryptoData = cryptoDatas.get(i);
-      if (cryptoData != null) {
-        dumper.add("crypto mode", cryptoData.cryptoMode);
-        dumper.add("encryption key", cryptoData.encryptionKey);
-      }
-      dumper.endBlock();
-    }
-  }
-
-}
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/HostActivity.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/HostActivity.java
deleted file mode 100644
index 831344aa8b..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/HostActivity.java
+++ /dev/null
@@ -1,274 +0,0 @@
-/*
- * Copyright (C) 2016 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import static junit.framework.Assert.fail;
-
-import android.annotation.SuppressLint;
-import android.app.Activity;
-import android.content.Context;
-import android.net.wifi.WifiManager;
-import android.net.wifi.WifiManager.WifiLock;
-import android.os.Bundle;
-import android.os.ConditionVariable;
-import android.os.Handler;
-import android.os.PowerManager;
-import android.os.PowerManager.WakeLock;
-import android.util.Log;
-import android.view.Surface;
-import android.view.SurfaceHolder;
-import android.view.SurfaceView;
-import android.view.Window;
-import com.google.android.exoplayer2.util.Assertions;
-import com.google.android.exoplayer2.util.Util;
-
-/**
- * A host activity for performing playback tests.
- */
-public final class HostActivity extends Activity implements SurfaceHolder.Callback {
-
-  /**
-   * Interface for tests that run inside of a {@link HostActivity}.
-   */
-  public interface HostedTest {
-
-    /**
-     * Called on the main thread when the test is started.
-     * <p>
-     * The test will not be started until the {@link HostActivity} has been resumed and its
-     * {@link Surface} has been created.
-     *
-     * @param host The {@link HostActivity} in which the test is being run.
-     * @param surface The {@link Surface}.
-     */
-    void onStart(HostActivity host, Surface surface);
-
-    /**
-     * Called on the main thread to check whether the test is ready to be stopped.
-     *
-     * @return Whether the test is ready to be stopped.
-     */
-    boolean canStop();
-
-    /**
-     * Called on the main thread when the test is stopped.
-     * <p>
-     * The test will be stopped if {@link #canStop()} returns true, if the {@link HostActivity} has
-     * been paused, or if the {@link HostActivity}'s {@link Surface} has been destroyed.
-     */
-    void onStop();
-
-    /**
-     * Called on the test thread after the test has finished and been stopped.
-     * <p>
-     * Implementations may use this method to assert that test criteria were met.
-     */
-    void onFinished();
-
-  }
-
-  private static final String TAG = "HostActivity";
-
-  private WakeLock wakeLock;
-  private WifiLock wifiLock;
-  private SurfaceView surfaceView;
-  private Handler mainHandler;
-  private CheckCanStopRunnable checkCanStopRunnable;
-
-  private HostedTest hostedTest;
-  private ConditionVariable hostedTestStoppedCondition;
-  private boolean hostedTestStarted;
-  private boolean hostedTestFinished;
-
-  /**
-   * Executes a {@link HostedTest} inside the host.
-   *
-   * @param hostedTest The test to execute.
-   * @param timeoutMs The number of milliseconds to wait for the test to finish. If the timeout
-   *     is exceeded then the test will fail.
-   */
-  public void runTest(final HostedTest hostedTest, long timeoutMs) {
-    runTest(hostedTest, timeoutMs, true);
-  }
-
-  /**
-   * Executes a {@link HostedTest} inside the host.
-   *
-   * @param hostedTest The test to execute.
-   * @param timeoutMs The number of milliseconds to wait for the test to finish.
-   * @param failOnTimeout Whether the test fails when the timeout is exceeded.
-   */
-  public void runTest(final HostedTest hostedTest, long timeoutMs, boolean failOnTimeout) {
-    Assertions.checkArgument(timeoutMs > 0);
-    Assertions.checkState(Thread.currentThread() != getMainLooper().getThread());
-
-    Assertions.checkState(this.hostedTest == null);
-    this.hostedTest = Assertions.checkNotNull(hostedTest);
-    hostedTestStoppedCondition = new ConditionVariable();
-    hostedTestStarted = false;
-    hostedTestFinished = false;
-
-    runOnUiThread(new Runnable() {
-      @Override
-      public void run() {
-        maybeStartHostedTest();
-      }
-    });
-
-    if (hostedTestStoppedCondition.block(timeoutMs)) {
-      if (hostedTestFinished) {
-        Log.d(TAG, "Test finished. Checking pass conditions.");
-        hostedTest.onFinished();
-        Log.d(TAG, "Pass conditions checked.");
-      } else {
-        String message = "Test released before it finished. Activity may have been paused whilst "
-            + "test was in progress.";
-        Log.e(TAG, message);
-        fail(message);
-      }
-    } else {
-      String message = "Test timed out after " + timeoutMs + " ms.";
-      Log.e(TAG, message);
-      if (failOnTimeout) {
-        fail(message);
-      }
-      maybeStopHostedTest();
-      hostedTestStoppedCondition.block();
-    }
-  }
-
-  // Activity lifecycle
-
-  @Override
-  public void onCreate(Bundle savedInstanceState) {
-    super.onCreate(savedInstanceState);
-    requestWindowFeature(Window.FEATURE_NO_TITLE);
-    setContentView(getResources().getIdentifier("host_activity", "layout", getPackageName()));
-    surfaceView = (SurfaceView) findViewById(
-        getResources().getIdentifier("surface_view", "id", getPackageName()));
-    surfaceView.getHolder().addCallback(this);
-    mainHandler = new Handler();
-    checkCanStopRunnable = new CheckCanStopRunnable();
-  }
-
-  @Override
-  public void onStart() {
-    Context appContext = getApplicationContext();
-    WifiManager wifiManager = (WifiManager) appContext.getSystemService(Context.WIFI_SERVICE);
-    wifiLock = wifiManager.createWifiLock(getWifiLockMode(), TAG);
-    wifiLock.acquire();
-    PowerManager powerManager = (PowerManager) appContext.getSystemService(Context.POWER_SERVICE);
-    wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, TAG);
-    wakeLock.acquire();
-    super.onStart();
-  }
-
-  @Override
-  public void onResume() {
-    super.onResume();
-    maybeStartHostedTest();
-  }
-
-  @Override
-  public void onPause() {
-    super.onPause();
-    maybeStopHostedTest();
-  }
-
-  @Override
-  public void onStop() {
-    super.onStop();
-    wakeLock.release();
-    wakeLock = null;
-    wifiLock.release();
-    wifiLock = null;
-  }
-
-  // SurfaceHolder.Callback
-
-  @Override
-  public void surfaceCreated(SurfaceHolder holder) {
-    maybeStartHostedTest();
-  }
-
-  @Override
-  public void surfaceDestroyed(SurfaceHolder holder) {
-    maybeStopHostedTest();
-  }
-
-  @Override
-  public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
-    // Do nothing.
-  }
-
-  // Internal logic
-
-  private void maybeStartHostedTest() {
-    if (hostedTest == null || hostedTestStarted) {
-      return;
-    }
-    Surface surface = surfaceView.getHolder().getSurface();
-    if (surface != null && surface.isValid()) {
-      hostedTestStarted = true;
-      Log.d(TAG, "Starting test.");
-      hostedTest.onStart(this, surface);
-      checkCanStopRunnable.startChecking();
-    }
-  }
-
-  private void maybeStopHostedTest() {
-    if (hostedTest != null && hostedTestStarted) {
-      hostedTest.onStop();
-      hostedTest = null;
-      mainHandler.removeCallbacks(checkCanStopRunnable);
-      // We post opening of the stopped condition so that any events posted to the main thread as a
-      // result of hostedTest.onStop() are guaranteed to be handled before hostedTest.onFinished()
-      // is called from runTest.
-      mainHandler.post(new Runnable() {
-        @Override
-        public void run() {
-          hostedTestStoppedCondition.open();
-        }
-      });
-    }
-  }
-
-  @SuppressLint("InlinedApi")
-  private static int getWifiLockMode() {
-    return Util.SDK_INT < 12 ? WifiManager.WIFI_MODE_FULL : WifiManager.WIFI_MODE_FULL_HIGH_PERF;
-  }
-
-  private final class CheckCanStopRunnable implements Runnable {
-
-    private static final long CHECK_INTERVAL_MS = 1000;
-
-    private void startChecking() {
-      mainHandler.post(this);
-    }
-
-    @Override
-    public void run() {
-      if (hostedTest.canStop()) {
-        hostedTestFinished = true;
-        maybeStopHostedTest();
-      } else {
-        mainHandler.postDelayed(this, CHECK_INTERVAL_MS);
-      }
-    }
-
-  }
-
-}
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/LogcatMetricsLogger.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/LogcatMetricsLogger.java
deleted file mode 100644
index fdff47dd2c..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/LogcatMetricsLogger.java
+++ /dev/null
@@ -1,56 +0,0 @@
-/*
- * Copyright (C) 2016 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import android.util.Log;
-
-/**
- * Implementation of {@link MetricsLogger} that prints the metrics to logcat.
- */
-public final class LogcatMetricsLogger implements MetricsLogger {
-
-  private final String tag;
-
-  public LogcatMetricsLogger(String tag) {
-    this.tag = tag;
-  }
-
-  @Override
-  public void logMetric(String key, int value) {
-    Log.d(tag, key + ": " + value);
-  }
-
-  @Override
-  public void logMetric(String key, double value) {
-    Log.d(tag, key + ": " + value);
-  }
-
-  @Override
-  public void logMetric(String key, String value) {
-    Log.d(tag, key + ": " + value);
-  }
-
-  @Override
-  public void logMetric(String key, boolean value) {
-    Log.d(tag, key + ": " + value);
-  }
-
-  @Override
-  public void close() {
-    // Do nothing.
-  }
-
-}
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/MetricsLogger.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/MetricsLogger.java
deleted file mode 100644
index 64d1944927..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/MetricsLogger.java
+++ /dev/null
@@ -1,90 +0,0 @@
-/*
- * Copyright (C) 2016 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import android.app.Instrumentation;
-
-/**
- * Metric Logging interface for ExoPlayer playback tests.
- */
-public interface MetricsLogger {
-
-  String KEY_FRAMES_DROPPED_COUNT = "frames_dropped_count";
-  String KEY_FRAMES_RENDERED_COUNT = "frames_rendered_count";
-  String KEY_FRAMES_SKIPPED_COUNT = "frames_skipped_count";
-  String KEY_MAX_CONSECUTIVE_FRAMES_DROPPED_COUNT = "maximum_consecutive_frames_dropped_count";
-  String KEY_TEST_NAME = "test_name";
-  String KEY_IS_CDD_LIMITED_RETRY = "is_cdd_limited_retry";
-
-  /**
-   * Logs an int metric provided from a test.
-   *
-   * @param key The key of the metric to be logged.
-   * @param value The value of the metric to be logged.
-   */
-  void logMetric(String key, int value);
-
-  /**
-   * Logs a double metric provided from a test.
-   *
-   * @param key The key of the metric to be logged.
-   * @param value The value of the metric to be logged.
-   */
-  void logMetric(String key, double value);
-
-  /**
-   * Logs a string metric provided from a test.
-   *
-   * @param key The key of the metric to be logged.
-   * @param value The value of the metric to be logged.
-   */
-  void logMetric(String key, String value);
-
-  /**
-   * Logs a boolean metric provided from a test.
-   *
-   * @param key The key of the metric to be logged.
-   * @param value The value of the metric to be logged.
-   */
-  void logMetric(String key, boolean value);
-
-  /**
-   * Closes the logger.
-   */
-  void close();
-
-  /**
-   * A factory for instantiating {@link MetricsLogger} instances.
-   */
-  final class Factory {
-
-    private Factory() {}
-
-    /**
-     * Obtains a new instance of {@link MetricsLogger}.
-     *
-     * @param instrumentation The test instrumentation.
-     * @param tag The tag to be used for logcat logs.
-     * @param reportName The name of the report log.
-     * @param streamName The name of the stream of metrics.
-     */
-    public static MetricsLogger createDefault(Instrumentation instrumentation, String tag,
-        String reportName, String streamName) {
-      return new LogcatMetricsLogger(tag);
-    }
-  }
-
-}
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/TestUtil.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/TestUtil.java
deleted file mode 100644
index 2e59b33c0b..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/TestUtil.java
+++ /dev/null
@@ -1,192 +0,0 @@
-/*
- * Copyright (C) 2016 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import android.app.Instrumentation;
-import android.test.InstrumentationTestCase;
-import android.test.MoreAsserts;
-import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.Timeline;
-import com.google.android.exoplayer2.extractor.Extractor;
-import com.google.android.exoplayer2.source.MediaSource;
-import com.google.android.exoplayer2.source.MediaSource.Listener;
-import com.google.android.exoplayer2.testutil.FakeExtractorInput.SimulatedIOException;
-import com.google.android.exoplayer2.upstream.DataSource;
-import com.google.android.exoplayer2.upstream.DataSpec;
-import com.google.android.exoplayer2.util.Assertions;
-import com.google.android.exoplayer2.util.Util;
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.Arrays;
-import java.util.Random;
-import junit.framework.Assert;
-import org.mockito.MockitoAnnotations;
-
-/**
- * Utility methods for tests.
- */
-public class TestUtil {
-
-  private TestUtil() {}
-
-  public static boolean sniffTestData(Extractor extractor, FakeExtractorInput input)
-      throws IOException, InterruptedException {
-    while (true) {
-      try {
-        return extractor.sniff(input);
-      } catch (SimulatedIOException e) {
-        // Ignore.
-      }
-    }
-  }
-
-  public static byte[] readToEnd(DataSource dataSource) throws IOException {
-    byte[] data = new byte[1024];
-    int position = 0;
-    int bytesRead = 0;
-    while (bytesRead != C.RESULT_END_OF_INPUT) {
-      if (position == data.length) {
-        data = Arrays.copyOf(data, data.length * 2);
-      }
-      bytesRead = dataSource.read(data, position, data.length - position);
-      if (bytesRead != C.RESULT_END_OF_INPUT) {
-        position += bytesRead;
-      }
-    }
-    return Arrays.copyOf(data, position);
-  }
-
-  public static byte[] buildTestData(int length) {
-    return buildTestData(length, length);
-  }
-
-  public static byte[] buildTestData(int length, int seed) {
-    return buildTestData(length, new Random(seed));
-  }
-
-  public static byte[] buildTestData(int length, Random random) {
-    byte[] source = new byte[length];
-    random.nextBytes(source);
-    return source;
-  }
-
-  public static String buildTestString(int maxLength, Random random) {
-    int length = random.nextInt(maxLength);
-    StringBuilder builder = new StringBuilder(length);
-    for (int i = 0; i < length; i++) {
-      builder.append((char) random.nextInt());
-    }
-    return builder.toString();
-  }
-
-  /**
-   * Converts an array of integers in the range [0, 255] into an equivalent byte array.
-   *
-   * @param intArray An array of integers, all of which must be in the range [0, 255].
-   * @return The equivalent byte array.
-   */
-  public static byte[] createByteArray(int... intArray) {
-    byte[] byteArray = new byte[intArray.length];
-    for (int i = 0; i < byteArray.length; i++) {
-      Assertions.checkState(0x00 <= intArray[i] && intArray[i] <= 0xFF);
-      byteArray[i] = (byte) intArray[i];
-    }
-    return byteArray;
-  }
-
-  public static byte[] joinByteArrays(byte[]... byteArrays) {
-    int length = 0;
-    for (byte[] byteArray : byteArrays) {
-      length += byteArray.length;
-    }
-    byte[] joined = new byte[length];
-    length = 0;
-    for (byte[] byteArray : byteArrays) {
-      System.arraycopy(byteArray, 0, joined, length, byteArray.length);
-      length += byteArray.length;
-    }
-    return joined;
-  }
-
-  public static void setUpMockito(InstrumentationTestCase instrumentationTestCase) {
-    // Workaround for https://code.google.com/p/dexmaker/issues/detail?id=2.
-    System.setProperty("dexmaker.dexcache",
-        instrumentationTestCase.getInstrumentation().getTargetContext().getCacheDir().getPath());
-    MockitoAnnotations.initMocks(instrumentationTestCase);
-  }
-
-  public static byte[] getByteArray(Instrumentation instrumentation, String fileName)
-      throws IOException {
-    return Util.toByteArray(getInputStream(instrumentation, fileName));
-  }
-
-  public static InputStream getInputStream(Instrumentation instrumentation, String fileName)
-      throws IOException {
-    return instrumentation.getContext().getResources().getAssets().open(fileName);
-  }
-
-  public static String getString(Instrumentation instrumentation, String fileName)
-      throws IOException {
-    return new String(getByteArray(instrumentation, fileName));
-  }
-
-  /**
-   * Extracts the timeline from a media source.
-   */
-  public static Timeline extractTimelineFromMediaSource(MediaSource mediaSource) {
-    class TimelineListener implements Listener {
-      private Timeline timeline;
-      @Override
-      public synchronized void onSourceInfoRefreshed(Timeline timeline, Object manifest) {
-        this.timeline = timeline;
-        this.notify();
-      }
-    }
-    TimelineListener listener = new TimelineListener();
-    mediaSource.prepareSource(null, true, listener);
-    synchronized (listener) {
-      while (listener.timeline == null) {
-        try {
-          listener.wait();
-        } catch (InterruptedException e) {
-          Assert.fail(e.getMessage());
-        }
-      }
-    }
-    return listener.timeline;
-  }
-
-  /**
-   * Asserts that data read from a {@link DataSource} matches {@code expected}.
-   *
-   * @param dataSource The {@link DataSource} through which to read.
-   * @param dataSpec The {@link DataSpec} to use when opening the {@link DataSource}.
-   * @param expectedData The expected data.
-   * @throws IOException If an error occurs reading fom the {@link DataSource}.
-   */
-  public static void assertDataSourceContent(DataSource dataSource, DataSpec dataSpec,
-      byte[] expectedData) throws IOException {
-    try {
-      long length = dataSource.open(dataSpec);
-      Assert.assertEquals(expectedData.length, length);
-      byte[] readData = TestUtil.readToEnd(dataSource);
-      MoreAsserts.assertEquals(expectedData, readData);
-    } finally {
-      dataSource.close();
-    }
-  }
-
-}
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/TimelineAsserts.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/TimelineAsserts.java
deleted file mode 100644
index 8357ce70c7..0000000000
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/TimelineAsserts.java
+++ /dev/null
@@ -1,148 +0,0 @@
-/*
- * Copyright (C) 2017 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.google.android.exoplayer2.testutil;
-
-import static junit.framework.Assert.assertEquals;
-
-import com.google.android.exoplayer2.C;
-import com.google.android.exoplayer2.Player;
-import com.google.android.exoplayer2.Timeline;
-import com.google.android.exoplayer2.Timeline.Period;
-import com.google.android.exoplayer2.Timeline.Window;
-
-/**
- * Unit test for {@link Timeline}.
- */
-public final class TimelineAsserts {
-
-  private TimelineAsserts() {}
-
-  /**
-   * Assert that timeline is empty (i.e. has no windows or periods).
-   */
-  public static void assertEmpty(Timeline timeline) {
-    assertWindowIds(timeline);
-    assertPeriodCounts(timeline);
-  }
-
-  /**
-   * Asserts that window IDs are set correctly.
-   *
-   * @param expectedWindowIds A list of expected window IDs. If an ID is unknown or not important
-   *     {@code null} can be passed to skip this window.
-   */
-  public static void assertWindowIds(Timeline timeline, Object... expectedWindowIds) {
-    Window window = new Window();
-    assertEquals(expectedWindowIds.length, timeline.getWindowCount());
-    for (int i = 0; i < timeline.getWindowCount(); i++) {
-      timeline.getWindow(i, window, true);
-      if (expectedWindowIds[i] != null) {
-        assertEquals(expectedWindowIds[i], window.id);
-      }
-    }
-  }
-
-  /**
-   * Asserts that window properties {@link Window}.isDynamic are set correctly..
-   */
-  public static void assertWindowIsDynamic(Timeline timeline, boolean... windowIsDynamic) {
-    Window window = new Window();
-    for (int i = 0; i < timeline.getWindowCount(); i++) {
-      timeline.getWindow(i, window, true);
-      assertEquals(windowIsDynamic[i], window.isDynamic);
-    }
-  }
-
-  /**
-   * Asserts that previous window indices for each window are set correctly depending on the repeat
-   * mode.
-   */
-  public static void assertPreviousWindowIndices(Timeline timeline,
-      @Player.RepeatMode int repeatMode, int... expectedPreviousWindowIndices) {
-    for (int i = 0; i < timeline.getWindowCount(); i++) {
-      assertEquals(expectedPreviousWindowIndices[i],
-          timeline.getPreviousWindowIndex(i, repeatMode));
-    }
-  }
-
-  /**
-   * Asserts that next window indices for each window are set correctly depending on the repeat
-   * mode.
-   */
-  public static void assertNextWindowIndices(Timeline timeline, @Player.RepeatMode int repeatMode,
-      int... expectedNextWindowIndices) {
-    for (int i = 0; i < timeline.getWindowCount(); i++) {
-      assertEquals(expectedNextWindowIndices[i],
-          timeline.getNextWindowIndex(i, repeatMode));
-    }
-  }
-
-  /**
-   * Asserts that period counts for each window are set correctly. Also asserts that
-   * {@link Window#firstPeriodIndex} and {@link Window#lastPeriodIndex} are set correctly, and it
-   * asserts the correct behavior of {@link Timeline#getNextWindowIndex(int, int)}.
-   */
-  public static void assertPeriodCounts(Timeline timeline, int... expectedPeriodCounts) {
-    int windowCount = timeline.getWindowCount();
-    int[] accumulatedPeriodCounts = new int[windowCount + 1];
-    accumulatedPeriodCounts[0] = 0;
-    for (int i = 0; i < windowCount; i++) {
-      accumulatedPeriodCounts[i + 1] = accumulatedPeriodCounts[i] + expectedPeriodCounts[i];
-    }
-    assertEquals(accumulatedPeriodCounts[accumulatedPeriodCounts.length - 1],
-        timeline.getPeriodCount());
-    Window window = new Window();
-    Period period = new Period();
-    for (int i = 0; i < windowCount; i++) {
-      timeline.getWindow(i, window, true);
-      assertEquals(accumulatedPeriodCounts[i], window.firstPeriodIndex);
-      assertEquals(accumulatedPeriodCounts[i + 1] - 1, window.lastPeriodIndex);
-    }
-    int expectedWindowIndex = 0;
-    for (int i = 0; i < timeline.getPeriodCount(); i++) {
-      timeline.getPeriod(i, period, true);
-      while (i >= accumulatedPeriodCounts[expectedWindowIndex + 1]) {
-        expectedWindowIndex++;
-      }
-      assertEquals(expectedWindowIndex, period.windowIndex);
-      if (i < accumulatedPeriodCounts[expectedWindowIndex + 1] - 1) {
-        assertEquals(i + 1, timeline.getNextPeriodIndex(i, period, window, Player.REPEAT_MODE_OFF));
-        assertEquals(i + 1, timeline.getNextPeriodIndex(i, period, window, Player.REPEAT_MODE_ONE));
-        assertEquals(i + 1, timeline.getNextPeriodIndex(i, period, window, Player.REPEAT_MODE_ALL));
-      } else {
-        int nextWindowOff = timeline.getNextWindowIndex(expectedWindowIndex,
-            Player.REPEAT_MODE_OFF);
-        int nextWindowOne = timeline.getNextWindowIndex(expectedWindowIndex,
-            Player.REPEAT_MODE_ONE);
-        int nextWindowAll = timeline.getNextWindowIndex(expectedWindowIndex,
-            Player.REPEAT_MODE_ALL);
-        int nextPeriodOff = nextWindowOff == C.INDEX_UNSET ? C.INDEX_UNSET
-            : accumulatedPeriodCounts[nextWindowOff];
-        int nextPeriodOne = nextWindowOne == C.INDEX_UNSET ? C.INDEX_UNSET
-            : accumulatedPeriodCounts[nextWindowOne];
-        int nextPeriodAll = nextWindowAll == C.INDEX_UNSET ? C.INDEX_UNSET
-            : accumulatedPeriodCounts[nextWindowAll];
-        assertEquals(nextPeriodOff, timeline.getNextPeriodIndex(i, period, window,
-            Player.REPEAT_MODE_OFF));
-        assertEquals(nextPeriodOne, timeline.getNextPeriodIndex(i, period, window,
-            Player.REPEAT_MODE_ONE));
-        assertEquals(nextPeriodAll, timeline.getNextPeriodIndex(i, period, window,
-            Player.REPEAT_MODE_ALL));
-      }
-    }
-  }
-
-}
diff --git a/testutils/src/main/res/layout/host_activity.xml b/testutils/src/main/res/layout/host_activity.xml
deleted file mode 100644
index e0988d4c1f..0000000000
--- a/testutils/src/main/res/layout/host_activity.xml
+++ /dev/null
@@ -1,28 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!-- Copyright (C) 2016 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:id="@+id/root"
-    android:focusable="true"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    android:keepScreenOn="true">
-
-  <SurfaceView android:id="@+id/surface_view"
-      android:layout_width="match_parent"
-      android:layout_height="match_parent"
-      android:layout_gravity="center"/>
-
-</FrameLayout>
