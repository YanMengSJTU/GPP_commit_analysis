diff --git a/build.gradle b/build.gradle
index 8ec24a6e82..6d87ac42d3 100644
--- a/build.gradle
+++ b/build.gradle
@@ -40,6 +40,23 @@ allprojects {
     }
     project.ext {
         exoplayerPublishEnabled = true
+        // Important: ExoPlayer specifies a minSdkVersion of 9 because various
+        // components provided by the library may be of use on older devices.
+        // However, please note that the core media playback functionality
+        // provided by the library requires API level 16 or greater.
+        minSdkVersion = 21
+        compileSdkVersion = 25
+        targetSdkVersion = 25
+        buildToolsVersion = '25'
+        testSupportLibraryVersion = '0.5'
+        supportLibraryVersion = '25.3.1'
+        dexmakerVersion = '1.2'
+        mockitoVersion = '1.9.5'
+        releaseRepoName = getBintrayRepo()
+        releaseUserOrg = 'google'
+        releaseGroupId = 'com.google.android.exoplayer'
+        releaseVersion = 'r2.4.1'
+        releaseWebsite = 'https://github.com/google/ExoPlayer'
     }
     if (it.hasProperty('externalBuildDir')) {
         if (!new File(externalBuildDir).isAbsolute()) {
diff --git a/demo/src/main/assets/media.exolist.json b/demo/src/main/assets/media.exolist.json
index 532d95064a..109eb030fd 100644
--- a/demo/src/main/assets/media.exolist.json
+++ b/demo/src/main/assets/media.exolist.json
@@ -8,6 +8,23 @@
       }
     ]
   },
+  {
+    "name": "Local 4K Test",
+    "samples": [
+      {
+        "name": "Local Faye(Framed, 216 Mbps VBR TS GOP=25, 'Faye_framed_seci.ts')",
+        "uri": "file:///storage/emulated/0/Movies/Faye_framed_seci.ts"
+      },
+      {
+        "name": "Local Faye(Framed, 16.9 Mbps VBR TS, 'Faye_framed_gop_no_change.ts')",
+        "uri": "file:///storage/emulated/0/Movies/Faye_framed_gop_no_change.ts"
+      },
+      {
+        "name": "Local Faye(Original, 29.7 Mbps VBR TS, 'Faye.ts')",
+        "uri": "file:///storage/emulated/0/Movies/Faye.ts"
+      }
+    ]
+  },
   {
     "name": "YouTube DASH",
     "samples": [
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java b/demo/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java
index 19d5efca98..6a19473e28 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java
@@ -30,6 +30,7 @@
 import com.google.android.exoplayer2.upstream.cache.SimpleCache;
 import com.google.android.exoplayer2.util.Util;
 
+
 /**
  * Placeholder application to facilitate overriding Application methods for debugging and testing.
  */
@@ -48,11 +49,15 @@ public void onCreate() {
   }
 
   public DataSource.Factory buildDataSourceFactory(Uri uri, DefaultBandwidthMeter bandwidthMeter) {
+    return this.buildDataSourceFactory(uri, bandwidthMeter, null);
+  }
+
+  public DataSource.Factory buildDataSourceFactory(Uri uri, DefaultBandwidthMeter bandwidthMeter, UdpDataSource.EventListener eventListener) {
     DataSource.Factory dataSourceFactory;
     switch(uri.getScheme()) {
       case "udp":
         dataSourceFactory = new DefaultDataSourceFactory(this, bandwidthMeter,
-                buildUdpDataSourceFactory(bandwidthMeter));
+                buildUdpDataSourceFactory(bandwidthMeter, eventListener));
         break;
       case "http":
       default:
@@ -68,7 +73,11 @@ public void onCreate() {
   }
 
   public UdpDataSource.Factory buildUdpDataSourceFactory(DefaultBandwidthMeter bandwidthMeter) {
-    return new DefaultDataSourceFactory(this, bandwidthMeter, new UdpDataSourceFactory(bandwidthMeter));
+    return this.buildUdpDataSourceFactory(bandwidthMeter, null);
+  }
+
+  public UdpDataSource.Factory buildUdpDataSourceFactory(DefaultBandwidthMeter bandwidthMeter, UdpDataSource.EventListener eventListener) {
+    return new DefaultDataSourceFactory(this, bandwidthMeter, new UdpDataSourceFactory(bandwidthMeter, eventListener));
   }
 
   public boolean useExtensionRenderers() {
@@ -81,14 +90,16 @@ public boolean useExtensionRenderers() {
   public class UdpDataSourceFactory implements DataSource.Factory {
 
     private DefaultBandwidthMeter bandwidthMeter;
+    private UdpDataSource.EventListener eventListener;
 
-    public UdpDataSourceFactory(DefaultBandwidthMeter bandwidthMeter) {
+    public UdpDataSourceFactory(DefaultBandwidthMeter bandwidthMeter, UdpDataSource.EventListener eventListener) {
       this.bandwidthMeter = bandwidthMeter;
+      this.eventListener = eventListener;
     }
 
     @Override
     public DataSource createDataSource() {
-      return new UdpDataSource(bandwidthMeter);
+      return new UdpDataSource(bandwidthMeter, eventListener);
     }
   }
 
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/EventLogger.java b/demo/src/main/java/com/google/android/exoplayer2/demo/EventLogger.java
index 2ea4b5b7cf..cb840c1cd6 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/EventLogger.java
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/EventLogger.java
@@ -47,6 +47,7 @@
 import com.google.android.exoplayer2.trackselection.TrackSelection;
 import com.google.android.exoplayer2.trackselection.TrackSelectionArray;
 import com.google.android.exoplayer2.upstream.DataSpec;
+import com.google.android.exoplayer2.upstream.UdpDataSource;
 import com.google.android.exoplayer2.video.VideoRendererEventListener;
 import java.io.IOException;
 import java.text.NumberFormat;
@@ -58,7 +59,7 @@
 /* package */ final class EventLogger implements Player.EventListener, AudioRendererEventListener,
     VideoRendererEventListener, AdaptiveMediaSourceEventListener,
     ExtractorMediaSource.EventListener, DefaultDrmSessionManager.EventListener,
-    MetadataRenderer.Output {
+    MetadataRenderer.Output, UdpDataSource.EventListener {
 
   private static final String TAG = "EventLogger";
   private static final int MAX_TIMELINE_ITEM_LINES = 3;
@@ -480,4 +481,20 @@ private static String getRepeatModeString(@Player.RepeatMode int repeatMode) {
         return "?";
     }
   }
+
+  @Override
+  public void onReceivedPacket() {
+    Log.d(TAG, "UDP Packet received.");
+  }
+
+  @Override
+  public void onOpen() {
+    Log.d(TAG, "UDP datagream open.");
+  }
+
+  @Override
+  public void onError(Exception e) {
+    Log.d(TAG, "UDP Error: " + e.toString());
+    e.printStackTrace();
+  }
 }
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java b/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
index 563025b85c..24ed4b4c05 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
@@ -478,7 +478,7 @@ private void clearResumePosition() {
    */
   private DataSource.Factory buildDataSourceFactory(Uri uri, boolean useBandwidthMeter) {
     return ((DemoApplication) getApplication())
-        .buildDataSourceFactory(uri, useBandwidthMeter ? BANDWIDTH_METER : null);
+        .buildDataSourceFactory(uri, useBandwidthMeter ? BANDWIDTH_METER : null, eventLogger);
   }
 
   /**
diff --git a/extensions/gvr/build.gradle b/extensions/gvr/build.gradle
index 66665576bb..4fa4c50f7c 100644
--- a/extensions/gvr/build.gradle
+++ b/extensions/gvr/build.gradle
@@ -19,7 +19,7 @@ android {
     buildToolsVersion project.ext.buildToolsVersion
 
     defaultConfig {
-        minSdkVersion 19
+        minSdkVersion project.ext.minSdkVersion
         targetSdkVersion project.ext.targetSdkVersion
     }
 }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/C.java b/library/core/src/main/java/com/google/android/exoplayer2/C.java
index d7d0ed40aa..568057b6aa 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/C.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/C.java
@@ -550,12 +550,12 @@ private C() {}
   /**
    * A default size in bytes for an individual allocation that forms part of a larger buffer.
    */
-  public static final int DEFAULT_BUFFER_SEGMENT_SIZE = 64 * 1024;
+  public static final int DEFAULT_BUFFER_SEGMENT_SIZE = 128 * 1024;
 
   /**
    * A default size in bytes for a video buffer.
    */
-  public static final int DEFAULT_VIDEO_BUFFER_SIZE = 200 * DEFAULT_BUFFER_SEGMENT_SIZE;
+  public static final int DEFAULT_VIDEO_BUFFER_SIZE = 2000 * DEFAULT_BUFFER_SEGMENT_SIZE;
 
   /**
    * A default size in bytes for an audio buffer.
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java b/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
index 1570c909bc..e517bfe90f 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/ExoPlayerImplInternal.java
@@ -555,17 +555,19 @@ private void updatePlaybackPositions() throws ExoPlaybackException {
   }
 
   private void doSomeWork() throws ExoPlaybackException, IOException {
+    TraceUtil.beginSection("ExoPlayerImplInternal.doSomeWork");
     long operationStartTimeMs = SystemClock.elapsedRealtime();
+//    Log.d(TAG, "doSomeWork[Start, opStartTime=" + operationStartTimeMs + "]");
     updatePeriods();
     if (playingPeriodHolder == null) {
       // We're still waiting for the first period to be prepared.
       maybeThrowPeriodPrepareError();
+//      Log.d(TAG, "scheduleNextWork[PeriodHolder=null, opStartTime=" + operationStartTimeMs + "]");
       scheduleNextWork(operationStartTimeMs, PREPARING_SOURCE_INTERVAL_MS);
+      TraceUtil.endSection();
       return;
     }
 
-    TraceUtil.beginSection("ExoPlayerImplInternal.doSomeWork");
-
     updatePlaybackPositions();
     playingPeriodHolder.mediaPeriod.discardBuffer(playbackInfo.positionUs);
 
@@ -644,14 +646,17 @@ private void doSomeWork() throws ExoPlaybackException, IOException {
     } else {
       handler.removeMessages(MSG_DO_SOME_WORK);
     }
-
+//    Log.d(TAG, "doSomeWork[FIN, opStartTime=" + operationStartTimeMs + "]");
     TraceUtil.endSection();
   }
 
   private void scheduleNextWork(long thisOperationStartTimeMs, long intervalMs) {
+    long currentSystemTimeMs = SystemClock.elapsedRealtime();
     handler.removeMessages(MSG_DO_SOME_WORK);
     long nextOperationStartTimeMs = thisOperationStartTimeMs + intervalMs;
-    long nextOperationDelayMs = nextOperationStartTimeMs - SystemClock.elapsedRealtime();
+//    long nextOperationDelayMs = nextOperationStartTimeMs - SystemClock.elapsedRealtime();
+    long nextOperationDelayMs = nextOperationStartTimeMs - currentSystemTimeMs;
+//    Log.d(TAG, "scheduleNextWork[operationSTMs=" + thisOperationStartTimeMs + ", currSTMs=" + currentSystemTimeMs + ", nextSTMs=" + nextOperationDelayMs + "]");
     if (nextOperationDelayMs <= 0) {
       handler.sendEmptyMessage(MSG_DO_SOME_WORK);
     } else {
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/DefaultTrackOutput.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/DefaultTrackOutput.java
index fe92401a3b..48dd9bfee7 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/DefaultTrackOutput.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/DefaultTrackOutput.java
@@ -1019,7 +1019,7 @@ public synchronized void commitSample(long timeUs, @C.BufferFlags int sampleFlag
       // Increment the write index.
       queueSize++;
       frameCount  = frameCount + 1;
-//      Log.d(TAG, "commitSample[format=" + upstreamFormat.sampleMimeType + ", timeUs="+timeUs+", relWrIndex="+relativeWriteIndex+ ", offset="+offset+", size="+size+", queueSize="+ queueSize + ", frameCount=" + frameCount + ", sampleFlags="+sampleFlags+"]");
+      Log.d(TAG, "commitSample[format=" + upstreamFormat.sampleMimeType + ", timeUs="+timeUs+", relWrIndex="+relativeWriteIndex+ ", offset="+offset+", size="+size+", queueSize="+ queueSize + ", frameCount=" + frameCount + ", sampleFlags="+sampleFlags+"]");
       if (queueSize == capacity) {
         // Increase the capacity.
         int newCapacity = capacity + SAMPLE_CAPACITY_INCREMENT;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/source/ExtractorMediaPeriod.java b/library/core/src/main/java/com/google/android/exoplayer2/source/ExtractorMediaPeriod.java
index 7c3901af0f..01188a171d 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/source/ExtractorMediaPeriod.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/source/ExtractorMediaPeriod.java
@@ -115,9 +115,9 @@
   private boolean loadingFinished;
   private boolean released;
   private final String TAG = "ExtractorMediaPeriod";
-  private final boolean makeSureConstantLatency = false;
-  private final int frameSize = 10;
-  private final long defaultFrameRate = 25;
+  private final boolean makeSureConstantLatency = true;
+  private final int frameSize = 8;
+  private final long defaultFrameRate = 30;
 
   /**
    * @param uri The {@link Uri} of the media stream.
@@ -732,8 +732,8 @@ private void limitLatency(int frameSize) {
         long videoFrameRate = (long)getBufferedVideoFrameRate();
         videoFrameRate = Long.compare(videoFrameRate, -1) == 0 ? defaultFrameRate : videoFrameRate;
         long nextPositionUs = largestQueuedTimestampUs - (1000000 / (videoFrameRate) * (frameSize + 1));
-//        String logMessage= "extractor.load[SKIP, queuedFrameSize=" + currentQueuedFrameSize +", largestQueuedTimestampUs=" + largestQueuedTimestampUs + ", nextPositionUs=" +nextPositionUs+ "]";
-//        Log.d(TAG, logMessage);
+        String logMessage= "extractor.load[queuedFrameSize=" + currentQueuedFrameSize +", largestQueuedTimestampUs=" + largestQueuedTimestampUs + ", nextPositionUs=" +nextPositionUs+ "]";
+        Log.d(TAG, logMessage);
         int track = sampleQueues.size();
         for(int index = 0; index < track; index++) {
           // Note: Maybe keep trackIsAudioVideoFlags[index] consideration.
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/UdpDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/UdpDataSource.java
index 68a04d9182..62de8ffaf6 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/UdpDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/UdpDataSource.java
@@ -30,6 +30,15 @@
  */
 public final class UdpDataSource implements DataSource {
 
+  public interface EventListener {
+
+    void onReceivedPacket();
+
+    void onOpen();
+
+    void onError(Exception e);
+  }
+
   /**
    * Thrown when an error is encountered when trying to read from a {@link UdpDataSource}.
    */
@@ -62,6 +71,7 @@ public UdpDataSourceException(IOException cause) {
   private InetAddress address;
   private InetSocketAddress socketAddress;
   private boolean opened;
+  private final EventListener eventListener;
 
   private int packetRemaining;
 
@@ -69,15 +79,19 @@ public UdpDataSourceException(IOException cause) {
    * @param listener An optional listener.
    */
   public UdpDataSource(TransferListener<? super UdpDataSource> listener) {
-    this(listener, DEFAULT_MAX_PACKET_SIZE);
+    this(listener, DEFAULT_MAX_PACKET_SIZE, null);
+  }
+
+  public UdpDataSource(TransferListener<? super UdpDataSource> listener, EventListener eventListener) {
+    this(listener, DEFAULT_MAX_PACKET_SIZE, eventListener);
   }
 
   /**
    * @param listener An optional listener.
    * @param maxPacketSize The maximum datagram packet size, in bytes.
    */
-  public UdpDataSource(TransferListener<? super UdpDataSource> listener, int maxPacketSize) {
-    this(listener, maxPacketSize, DEAFULT_SOCKET_TIMEOUT_MILLIS);
+  public UdpDataSource(TransferListener<? super UdpDataSource> listener, int maxPacketSize, EventListener eventListener) {
+    this(listener, maxPacketSize, DEAFULT_SOCKET_TIMEOUT_MILLIS, eventListener);
   }
 
   /**
@@ -87,15 +101,17 @@ public UdpDataSource(TransferListener<? super UdpDataSource> listener, int maxPa
    *     as an infinite timeout.
    */
   public UdpDataSource(TransferListener<? super UdpDataSource> listener, int maxPacketSize,
-      int socketTimeoutMillis) {
+      int socketTimeoutMillis, EventListener eventListener) {
     this.listener = listener;
     this.socketTimeoutMillis = socketTimeoutMillis;
+    this.eventListener = eventListener;
     packetBuffer = new byte[maxPacketSize];
     packet = new DatagramPacket(packetBuffer, 0, maxPacketSize);
   }
 
   @Override
   public long open(DataSpec dataSpec) throws UdpDataSourceException {
+    eventListener.onOpen();
     uri = dataSpec.uri;
     String host = uri.getHost();
     int port = uri.getPort();
