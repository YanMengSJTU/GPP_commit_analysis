diff --git a/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacExtractor.java b/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacExtractor.java
index 7090a36a1a..9fe76c3e71 100644
--- a/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacExtractor.java
+++ b/extensions/flac/src/main/java/com/google/android/exoplayer/ext/flac/FlacExtractor.java
@@ -40,7 +40,8 @@
    */
   private static final byte[] FLAC_SIGNATURE = {'f', 'L', 'a', 'C', 0, 0, 0, 0x22};
 
-  private TrackOutput output;
+  private ExtractorOutput output;
+  private TrackOutput trackOutput;
 
   private FlacJni decoder;
 
@@ -49,25 +50,12 @@
   private ParsableByteArray outputBuffer;
   private ByteBuffer outputByteBuffer;
 
-  private boolean isSeekable;
-
   @Override
   public void init(ExtractorOutput output) {
-    this.output = output.track(0);
+    this.output = output;
+    this.trackOutput = output.track(0);
     output.endTracks();
 
-    output.seekMap(new SeekMap() {
-      @Override
-      public boolean isSeekable() {
-        return isSeekable;
-      }
-
-      @Override
-      public long getPosition(long timeUs) {
-        return isSeekable ? decoder.getSeekPosition(timeUs) : 0;
-      }
-    });
-
     try {
       decoder = new FlacJni();
     } catch (FlacDecoderException e) {
@@ -93,12 +81,25 @@ public int read(final ExtractorInput input, PositionHolder seekPosition)
         throw new IOException("Metadata decoding failed");
       }
       metadataParsed = true;
-      isSeekable = decoder.getSeekPosition(0) != -1;
+
+      output.seekMap(new SeekMap() {
+        final boolean isSeekable = decoder.getSeekPosition(0) != -1;
+
+        @Override
+        public boolean isSeekable() {
+          return isSeekable;
+        }
+
+        @Override
+        public long getPosition(long timeUs) {
+          return isSeekable ? decoder.getSeekPosition(timeUs) : 0;
+        }
+      });
 
       MediaFormat mediaFormat = MediaFormat.createAudioFormat(null, MimeTypes.AUDIO_RAW,
               MediaFormat.NO_VALUE, streamInfo.bitRate(), streamInfo.durationUs(),
               streamInfo.channels, streamInfo.sampleRate, null, null);
-      output.format(mediaFormat);
+      trackOutput.format(mediaFormat);
 
       outputBuffer = new ParsableByteArray(streamInfo.maxDecodedFrameSize());
       outputByteBuffer = ByteBuffer.wrap(outputBuffer.data);
@@ -109,9 +110,9 @@ public int read(final ExtractorInput input, PositionHolder seekPosition)
     if (size <= 0) {
       return RESULT_END_OF_INPUT;
     }
-    output.sampleData(outputBuffer, size);
+    trackOutput.sampleData(outputBuffer, size);
 
-    output.sampleMetadata(decoder.getLastSampleTimestamp(), C.SAMPLE_FLAG_SYNC, size, 0, null);
+    trackOutput.sampleMetadata(decoder.getLastSampleTimestamp(), C.SAMPLE_FLAG_SYNC, size, 0, null);
 
     return decoder.isEndOfData() ? RESULT_END_OF_INPUT : RESULT_CONTINUE;
   }
diff --git a/extensions/flac/src/main/jni/flac_parser.cc b/extensions/flac/src/main/jni/flac_parser.cc
index b6658444cb..329288169a 100644
--- a/extensions/flac/src/main/jni/flac_parser.cc
+++ b/extensions/flac/src/main/jni/flac_parser.cc
@@ -267,6 +267,8 @@ FLACParser::FLACParser(DataSource *source)
     : mDataSource(source),
       mCopy(copyTrespass),
       mDecoder(NULL),
+      mSeekTable(NULL),
+      firstFrameOffset(0LL),
       mCurrentPos(0LL),
       mEOF(false),
       mStreamInfoValid(false),
