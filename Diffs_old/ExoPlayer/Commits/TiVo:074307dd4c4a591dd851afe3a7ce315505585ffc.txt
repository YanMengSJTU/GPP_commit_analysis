diff --git a/library/core/src/main/java/com/google/android/exoplayer2/MediaPeriodQueue.java b/library/core/src/main/java/com/google/android/exoplayer2/MediaPeriodQueue.java
index 0dacd4df30..2597cd9b3f 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/MediaPeriodQueue.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/MediaPeriodQueue.java
@@ -277,8 +277,8 @@ public void clear(boolean keepFrontPeriodUid) {
     if (front != null) {
       oldFrontPeriodUid = keepFrontPeriodUid ? front.uid : null;
       oldFrontPeriodWindowSequenceNumber = front.info.id.windowSequenceNumber;
-      front.release();
       removeAfter(front);
+      front.release();
     } else if (!keepFrontPeriodUid) {
       oldFrontPeriodUid = null;
     }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/analytics/AnalyticsCollector.java b/library/core/src/main/java/com/google/android/exoplayer2/analytics/AnalyticsCollector.java
index de0f177342..091696f8bf 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/analytics/AnalyticsCollector.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/analytics/AnalyticsCollector.java
@@ -686,6 +686,7 @@ private EventTime generateMediaPeriodEventTime(
     private final HashMap<MediaPeriodId, MediaPeriodInfo> mediaPeriodIdToInfo;
     private final Period period;
 
+    @Nullable private MediaPeriodInfo lastPlayingMediaPeriod;
     @Nullable private MediaPeriodInfo lastReportedPlayingMediaPeriod;
     @Nullable private MediaPeriodInfo readingMediaPeriod;
     private Timeline timeline;
@@ -780,7 +781,7 @@ public MediaPeriodInfo tryResolveWindowIndex(int windowIndex) {
 
     /** Updates the queue with a reported position discontinuity . */
     public void onPositionDiscontinuity(@Player.DiscontinuityReason int reason) {
-      updateLastReportedPlayingMediaPeriod();
+      lastReportedPlayingMediaPeriod = lastPlayingMediaPeriod;
     }
 
     /** Updates the queue with a reported timeline change. */
@@ -795,7 +796,7 @@ public void onTimelineChanged(Timeline timeline) {
         readingMediaPeriod = updateMediaPeriodInfoToNewTimeline(readingMediaPeriod, timeline);
       }
       this.timeline = timeline;
-      updateLastReportedPlayingMediaPeriod();
+      lastReportedPlayingMediaPeriod = lastPlayingMediaPeriod;
     }
 
     /** Updates the queue with a reported start of seek. */
@@ -806,7 +807,7 @@ public void onSeekStarted() {
     /** Updates the queue with a reported processed seek. */
     public void onSeekProcessed() {
       isSeeking = false;
-      updateLastReportedPlayingMediaPeriod();
+      lastReportedPlayingMediaPeriod = lastPlayingMediaPeriod;
     }
 
     /** Updates the queue with a newly created media period. */
@@ -816,8 +817,9 @@ public void onMediaPeriodCreated(int windowIndex, MediaPeriodId mediaPeriodId) {
           new MediaPeriodInfo(mediaPeriodId, isInTimeline ? timeline : Timeline.EMPTY, windowIndex);
       mediaPeriodInfoQueue.add(mediaPeriodInfo);
       mediaPeriodIdToInfo.put(mediaPeriodId, mediaPeriodInfo);
+      lastPlayingMediaPeriod = mediaPeriodInfoQueue.get(0);
       if (mediaPeriodInfoQueue.size() == 1 && !timeline.isEmpty()) {
-        updateLastReportedPlayingMediaPeriod();
+        lastReportedPlayingMediaPeriod = lastPlayingMediaPeriod;
       }
     }
 
@@ -835,6 +837,9 @@ public boolean onMediaPeriodReleased(MediaPeriodId mediaPeriodId) {
       if (readingMediaPeriod != null && mediaPeriodId.equals(readingMediaPeriod.mediaPeriodId)) {
         readingMediaPeriod = mediaPeriodInfoQueue.isEmpty() ? null : mediaPeriodInfoQueue.get(0);
       }
+      if (!mediaPeriodInfoQueue.isEmpty()) {
+        lastPlayingMediaPeriod = mediaPeriodInfoQueue.get(0);
+      }
       return true;
     }
 
@@ -843,12 +848,6 @@ public void onReadingStarted(MediaPeriodId mediaPeriodId) {
       readingMediaPeriod = mediaPeriodIdToInfo.get(mediaPeriodId);
     }
 
-    private void updateLastReportedPlayingMediaPeriod() {
-      if (!mediaPeriodInfoQueue.isEmpty()) {
-        lastReportedPlayingMediaPeriod = mediaPeriodInfoQueue.get(0);
-      }
-    }
-
     private MediaPeriodInfo updateMediaPeriodInfoToNewTimeline(
         MediaPeriodInfo info, Timeline newTimeline) {
       int newPeriodIndex = newTimeline.getIndexOfPeriod(info.mediaPeriodId.periodUid);
