diff --git a/demo/src/main/java/com/google/android/exoplayer/demo/PlayerActivity.java b/demo/src/main/java/com/google/android/exoplayer/demo/PlayerActivity.java
index a104cc04e4..478898618e 100644
--- a/demo/src/main/java/com/google/android/exoplayer/demo/PlayerActivity.java
+++ b/demo/src/main/java/com/google/android/exoplayer/demo/PlayerActivity.java
@@ -30,9 +30,12 @@
 import com.google.android.exoplayer.demo.player.HlsRendererBuilder;
 import com.google.android.exoplayer.demo.player.SmoothStreamingRendererBuilder;
 import com.google.android.exoplayer.drm.UnsupportedDrmException;
+import com.google.android.exoplayer.metadata.id3.ApicFrame;
+import com.google.android.exoplayer.metadata.id3.BinaryFrame;
 import com.google.android.exoplayer.metadata.id3.GeobFrame;
 import com.google.android.exoplayer.metadata.id3.Id3Frame;
 import com.google.android.exoplayer.metadata.id3.PrivFrame;
+import com.google.android.exoplayer.metadata.id3.Tit2Frame;
 import com.google.android.exoplayer.metadata.id3.TxxxFrame;
 import com.google.android.exoplayer.text.CaptionStyleCompat;
 import com.google.android.exoplayer.text.Cue;
@@ -646,6 +649,13 @@ public void onId3Metadata(List<Id3Frame> id3Frames) {
         GeobFrame geobFrame = (GeobFrame) id3Frame;
         Log.i(TAG, String.format("ID3 TimedMetadata %s: mimeType=%s, filename=%s, description=%s",
             geobFrame.id, geobFrame.mimeType, geobFrame.filename, geobFrame.description));
+      } else if (id3Frame instanceof ApicFrame){
+        ApicFrame apicFrame = (ApicFrame) id3Frame;
+        Log.i(TAG, String.format("ID3 TimedMetadata %s: mimeType=%s, description=%s",
+                apicFrame.id, apicFrame.mimeType, apicFrame.description));
+      } else if (id3Frame instanceof Tit2Frame){
+        Tit2Frame tit2Frame = (Tit2Frame) id3Frame;
+        Log.i(TAG, String.format("ID3 TimedMetadata %s: description=%s", tit2Frame.id, tit2Frame.description));
       } else {
         Log.i(TAG, String.format("ID3 TimedMetadata %s", id3Frame.id));
       }
diff --git a/library/src/androidTest/java/com/google/android/exoplayer/metadata/id3/Id3ParserTest.java b/library/src/androidTest/java/com/google/android/exoplayer/metadata/id3/Id3ParserTest.java
index 6946ba3b07..b256eaffc7 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/metadata/id3/Id3ParserTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/metadata/id3/Id3ParserTest.java
@@ -41,4 +41,43 @@ public void testParseTxxxFrames() {
     }
   }
 
+  public void testParseApicFrames() {
+    byte[] rawId3 = new byte[] {73, 68, 51, 4, 0, 0, 0, 0, 0, 45, 65, 80, 73, 67, 0, 0, 0, 35, 0, 0,
+        3, 105, 109, 97, 103, 101, 47, 106, 112, 101, 103, 0,
+        16, 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100,
+        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0};
+    Id3Parser parser = new Id3Parser();
+    try {
+      List<Id3Frame> id3Frames = parser.parse(rawId3, rawId3.length);
+      assertNotNull(id3Frames);
+      assertEquals(1, id3Frames.size());
+      ApicFrame apicFrame = (ApicFrame) id3Frames.get(0);
+      assertEquals("image/jpeg", apicFrame.mimeType);
+      assertEquals(16, apicFrame.pictureType);
+      assertEquals("Hello World", apicFrame.description);
+      assertEquals(10, apicFrame.pictureData.length);
+      byte[] dataArray = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 0};
+      for (int i=0; i<apicFrame.pictureData.length; i++) {
+        assertEquals(dataArray[i], apicFrame.pictureData[i]);
+      }
+    } catch (Exception exception) {
+      fail(exception.getMessage());
+    }
+  }
+
+  public void testParseTit2Frames() {
+    byte[] rawId3 = new byte[] {73, 68, 51, 4, 0, 0, 0, 0, 0, 23, 84, 73, 84, 50, 0, 0, 0, 13, 0, 0,
+        3, 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 0};
+    Id3Parser parser = new Id3Parser();
+    try {
+      List<Id3Frame> id3Frames = parser.parse(rawId3, rawId3.length);
+      assertNotNull(id3Frames);
+      assertEquals(1, id3Frames.size());
+      Tit2Frame tit2Frame = (Tit2Frame) id3Frames.get(0);
+      assertEquals("Hello World", tit2Frame.description);
+    } catch (Exception exception) {
+      fail(exception.getMessage());
+    }
+  }
+
 }
diff --git a/library/src/main/java/com/google/android/exoplayer/metadata/id3/ApicFrame.java b/library/src/main/java/com/google/android/exoplayer/metadata/id3/ApicFrame.java
new file mode 100644
index 0000000000..f5e2ed8041
--- /dev/null
+++ b/library/src/main/java/com/google/android/exoplayer/metadata/id3/ApicFrame.java
@@ -0,0 +1,38 @@
+/*
+ * Copyright (C) 2014 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.android.exoplayer.metadata.id3;
+
+/**
+ * APIC (Attached Picture) ID3 frame.
+ */
+public final class ApicFrame extends Id3Frame {
+  public static final String ID = "APIC";
+
+  public final String mimeType;
+  public final byte pictureType;
+  public final String description;
+  public final byte[] pictureData;
+
+  public ApicFrame(String mimeType, byte pictureType, String description, byte[] pictureData) {
+    super(ID);
+    this.mimeType = mimeType;
+    this.pictureType = pictureType;
+    this.description = description;
+    this.pictureData = pictureData;
+  }
+
+
+}
diff --git a/library/src/main/java/com/google/android/exoplayer/metadata/id3/Id3Parser.java b/library/src/main/java/com/google/android/exoplayer/metadata/id3/Id3Parser.java
index deac62d8e5..80064eafcf 100644
--- a/library/src/main/java/com/google/android/exoplayer/metadata/id3/Id3Parser.java
+++ b/library/src/main/java/com/google/android/exoplayer/metadata/id3/Id3Parser.java
@@ -107,6 +107,41 @@ public boolean canParse(String mimeType) {
         System.arraycopy(frame, descriptionEndIndex + delimiterLength(encoding), objectData, 0,
             objectDataSize);
         id3Frames.add(new GeobFrame(mimeType, filename, description, objectData));
+
+      } else if (frameId0 == 'A' && frameId1 == 'P' && frameId2 == 'I' && frameId3 == 'C') {
+        // Check frame ID == APIC
+        int encoding = id3Data.readUnsignedByte();
+        String charset = getCharsetName(encoding);
+
+        byte[] frame = new byte[frameSize - 1];
+        id3Data.readBytes(frame, 0, frameSize - 1);
+
+        int firstZeroIndex = indexOf(frame, 0, (byte) 0);
+        String mimeType = new String(frame, 0, firstZeroIndex, "ISO-8859-1");
+        byte pictureType = frame[firstZeroIndex+1];
+
+        int descriptionStartIndex = firstZeroIndex + 2;
+        int descriptionEndIndex = indexOfEOS(frame, descriptionStartIndex, encoding);
+        String description = new String(frame, descriptionStartIndex,
+                descriptionEndIndex - descriptionStartIndex, charset);
+
+        int objectDataSize = frameSize - 1 /* encoding byte */ - descriptionEndIndex
+                - delimiterLength(encoding);
+        byte[] objectData = new byte[objectDataSize];
+        System.arraycopy(frame, descriptionEndIndex + delimiterLength(encoding), objectData, 0,
+                objectDataSize);
+        id3Frames.add(new ApicFrame(mimeType, pictureType, description, objectData));
+      } else if (frameId0 == 'T' && frameId1 == 'I' && frameId2 == 'T' && frameId3 == '2') {
+        // Check frame ID == TIT2
+        int encoding = id3Data.readUnsignedByte();
+        String charset = getCharsetName(encoding);
+
+        byte[] frame = new byte[frameSize - 1];
+        id3Data.readBytes(frame, 0, frameSize - 1);
+
+        String description = new String(frame, 0, indexOfEOS(frame, 0, encoding), charset);
+
+        id3Frames.add(new Tit2Frame(description));
       } else {
         String type = String.format(Locale.US, "%c%c%c%c", frameId0, frameId1, frameId2, frameId3);
         byte[] frame = new byte[frameSize];
diff --git a/library/src/main/java/com/google/android/exoplayer/metadata/id3/Tit2Frame.java b/library/src/main/java/com/google/android/exoplayer/metadata/id3/Tit2Frame.java
new file mode 100644
index 0000000000..ea1c6d5337
--- /dev/null
+++ b/library/src/main/java/com/google/android/exoplayer/metadata/id3/Tit2Frame.java
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2014 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.android.exoplayer.metadata.id3;
+
+/**
+ * TIT2 (Title/songname/content description) ID3 frame.
+ */
+public final class Tit2Frame extends Id3Frame {
+
+  public static final String ID = "TIT2";
+
+  public final String description;
+
+  public Tit2Frame(String data) {
+    super(ID);
+    this.description = data;
+  }
+
+}
