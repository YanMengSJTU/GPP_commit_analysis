diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/ExoDownloadService.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/ExoDownloadService.java
index 0c79e13b48..50437e2c34 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/ExoDownloadService.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/ExoDownloadService.java
@@ -39,17 +39,22 @@ public ExoDownloadService() {
         super(NOTIFICATION_ID);
     }
 
-    private void updateNotification(int workoutId, float percent) {
+    private void updateNotification(DownloadState state) {
+
+        int workoutId = Integer.parseInt(state.downloadAction.getData());
 
         NotificationManagerCompat notificationManager = NotificationManagerCompat.from(this);
-        NotificationCompat.Builder builder = getBuilder(workoutId);
+        NotificationCompat.Builder builder = getBuilder(state);
 
-        builder.setProgress(100, Math.round(percent), false)
+        builder.setProgress(100, Math.round(state.downloadPercentage), false)
                 .setContentText("Downloading Workouts...");
         notificationManager.notify(workoutId, builder.build());
     }
 
-    private NotificationCompat.Builder getBuilder(int workoutId) {
+    private NotificationCompat.Builder getBuilder(DownloadState state) {
+
+        DashDownloadAction action = (DashDownloadAction) state.downloadAction;
+        int workoutId = Integer.parseInt(action.getData());
 
         Intent notificationIntent = new Intent(this, DownloadActivity.class);
         PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, notificationIntent, 0);
@@ -63,30 +68,40 @@ private void updateNotification(int workoutId, float percent) {
                     .setPriority(NotificationCompat.PRIORITY_MAX)
                     .setContentIntent(pendingIntent);
 
-            addActionButtons(builder, false);
+            // Pause button
+            setPauseResumeActionButton(builder, false);
+
+            // Cancel button
+            DashDownloadAction downloadAction = new DashDownloadAction(action.getManifestUri(), true, action.getData());
+            Intent cancelIntent = new Intent(this, ExoDownloadService.class).setAction(ACTION_ADD).putExtra(DOWNLOAD_ACTION, downloadAction.toByteArray());
+            PendingIntent cancelPendingIntent = PendingIntent.getService(this, 0, cancelIntent, 0);
+            builder.addAction(android.R.drawable.ic_menu_close_clear_cancel, "Cancel", cancelPendingIntent);
+
             builders.put(workoutId, builder);
         }
         return builder;
     }
 
-    private void addActionButtons(NotificationCompat.Builder builder, boolean isPaused) {
+    private void setPauseResumeActionButton(NotificationCompat.Builder builder, boolean isPaused) {
 
-        builder.mActions.clear();
+        NotificationCompat.Action action;
 
         if (isPaused) {
             Intent resumeIntent = new Intent(this, ExoDownloadService.class).setAction(ACTION_START);
             PendingIntent resumePendingIntent = PendingIntent.getService(this, 0, resumeIntent, 0);
-
-            builder.addAction(android.R.drawable.ic_media_play, "Resume", resumePendingIntent);
-            builder.addAction(android.R.drawable.ic_menu_close_clear_cancel, "Cancel", resumePendingIntent);
+            action = new NotificationCompat.Action(android.R.drawable.ic_media_play, "Resume", resumePendingIntent);
 
         } else {
             Intent pauseIntent = new Intent(this, ExoDownloadService.class).setAction(ACTION_STOP);
             PendingIntent pausePendingIntent = PendingIntent.getService(this, 0, pauseIntent, 0);
 
-            builder.addAction(android.R.drawable.ic_media_pause, "Pause", pausePendingIntent);
-            builder.addAction(android.R.drawable.ic_menu_close_clear_cancel, "Cancel", pausePendingIntent);
+            action = new NotificationCompat.Action(android.R.drawable.ic_media_pause, "Pause", pausePendingIntent);
         }
+
+        if (builder.mActions.isEmpty())
+            builder.addAction(action);
+        else
+            builder.mActions.set(0, action);
     }
 
     private static DownloadManager createDownloadManager(Context context) {
@@ -122,7 +137,7 @@ protected void onProgressUpdate(DownloadManager.DownloadState[] activeDownloadTa
                     + state.downloadAction.getData() + "]"
                     + state.downloadPercentage + "%\n");
             if (state.downloadedBytes > 0)
-                updateNotification(Integer.parseInt(state.downloadAction.getData()), state.downloadPercentage);
+                updateNotification(state);
 
         }
 
@@ -151,7 +166,7 @@ public void onStateChange(DownloadManager downloadManager, DownloadState downloa
 
             } else {
 
-                NotificationCompat.Builder builder = getBuilder(workoutId);
+                NotificationCompat.Builder builder = getBuilder(downloadState);
                 builder.setContentText("Download complete").setProgress(0, 0, false);
 
                 notificationManager.notify(workoutId, builder.build());
@@ -165,7 +180,7 @@ public void onStateChange(DownloadManager downloadManager, DownloadState downloa
                 // get the object by the key.
                 NotificationCompat.Builder builder = builders.get(workoutId);
                 builder.setContentText("Download paused").setProgress(0, 0, false);
-                addActionButtons(builder, true);
+                setPauseResumeActionButton(builder, true);
                 notificationManager.notify(workoutId, builder.build());
             }
         }
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/offline/DashDownloadAction.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/offline/DashDownloadAction.java
index a9761b6b59..a125ca5a01 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/offline/DashDownloadAction.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/offline/DashDownloadAction.java
@@ -72,6 +72,10 @@ protected String getType() {
         return TYPE;
     }
 
+    public Uri getManifestUri() {
+        return manifestUri;
+    }
+
     @Override
     protected DashDownloader createDownloader(DownloaderConstructorHelper constructorHelper) {
         DashDownloader downloader = new DashDownloader(manifestUri, constructorHelper);
