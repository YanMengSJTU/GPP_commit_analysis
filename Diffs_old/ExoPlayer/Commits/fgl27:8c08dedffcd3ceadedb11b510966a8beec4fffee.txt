diff --git a/RELEASENOTES.md b/RELEASENOTES.md
index fc0b0bb088..b3efe1ae55 100644
--- a/RELEASENOTES.md
+++ b/RELEASENOTES.md
@@ -84,6 +84,8 @@
     `C.MSG_SET_OUTPUT_BUFFER_RENDERER`.
   * Use `VideoDecoderRenderer` as an implementation of
     `VideoDecoderOutputBufferRenderer`, instead of `VideoDecoderSurfaceView`.
+* Add automatic audio becoming noisy handling to `SimpleExoPlayer`,
+  available through `SimpleExoPlayer.setHandleAudioBecomingNoisy`.
 * Add `Timeline.Window.isLive` to indicate that a window is a live stream
   ([#2668](https://github.com/google/ExoPlayer/issues/2668) and
   [#5973](https://github.com/google/ExoPlayer/issues/5973)).
diff --git a/demos/gvr/src/main/AndroidManifest.xml b/demos/gvr/src/main/AndroidManifest.xml
index d582433471..ccdcae9cae 100644
--- a/demos/gvr/src/main/AndroidManifest.xml
+++ b/demos/gvr/src/main/AndroidManifest.xml
@@ -36,29 +36,15 @@
         <action android:name="android.intent.action.MAIN"/>
         <category android:name="android.intent.category.LAUNCHER"/>
       </intent-filter>
-      <intent-filter>
-        <action android:name="android.intent.action.VIEW"/>
-
-        <category android:name="android.intent.category.DEFAULT"/>
-        <category android:name="android.intent.category.BROWSABLE"/>
-
-        <data android:scheme="http"/>
-        <data android:scheme="https"/>
-        <data android:scheme="content"/>
-        <data android:scheme="asset"/>
-        <data android:scheme="file"/>
-        <data android:host="*"/>
-        <data android:pathPattern=".*\\.exolist\\.json"/>
-      </intent-filter>
     </activity>
 
     <activity
         android:name="com.google.android.exoplayer2.gvrdemo.PlayerActivity"
         android:configChanges="density|keyboardHidden|navigation|orientation|screenSize|uiMode"
-        android:enableVrMode="@string/gvr_vr_mode_component"
         android:exported="false"
         android:label="@string/application_name"
         android:launchMode="singleTask"
+        android:enableVrMode="@string/gvr_vr_mode_component"
         android:resizeableActivity="false"
         android:screenOrientation="landscape"
         android:theme="@style/VrActivityTheme">
diff --git a/demos/gvr/src/main/java/com/google/android/exoplayer2/gvrdemo/PlayerActivity.java b/demos/gvr/src/main/java/com/google/android/exoplayer2/gvrdemo/PlayerActivity.java
index 7023693d03..e236c85a26 100644
--- a/demos/gvr/src/main/java/com/google/android/exoplayer2/gvrdemo/PlayerActivity.java
+++ b/demos/gvr/src/main/java/com/google/android/exoplayer2/gvrdemo/PlayerActivity.java
@@ -24,7 +24,6 @@
 import com.google.android.exoplayer2.C.ContentType;
 import com.google.android.exoplayer2.DefaultRenderersFactory;
 import com.google.android.exoplayer2.ExoPlaybackException;
-import com.google.android.exoplayer2.PlaybackPreparer;
 import com.google.android.exoplayer2.Player;
 import com.google.android.exoplayer2.SimpleExoPlayer;
 import com.google.android.exoplayer2.ext.gvr.GvrPlayerActivity;
@@ -37,14 +36,13 @@
 import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;
 import com.google.android.exoplayer2.trackselection.MappingTrackSelector.MappedTrackInfo;
 import com.google.android.exoplayer2.trackselection.TrackSelectionArray;
-import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.DefaultDataSourceFactory;
 import com.google.android.exoplayer2.upstream.DefaultHttpDataSourceFactory;
 import com.google.android.exoplayer2.util.EventLogger;
 import com.google.android.exoplayer2.util.Util;
 
 /** An activity that plays media using {@link SimpleExoPlayer}. */
-public class PlayerActivity extends GvrPlayerActivity implements PlaybackPreparer {
+public class PlayerActivity extends GvrPlayerActivity {
 
   public static final String EXTENSION_EXTRA = "extension";
 
@@ -53,24 +51,16 @@
   public static final String SPHERICAL_STEREO_MODE_TOP_BOTTOM = "top_bottom";
   public static final String SPHERICAL_STEREO_MODE_LEFT_RIGHT = "left_right";
 
-  private DataSource.Factory dataSourceFactory;
   private SimpleExoPlayer player;
-  private MediaSource mediaSource;
   private DefaultTrackSelector trackSelector;
   private TrackGroupArray lastSeenTrackGroupArray;
-
   private boolean startAutoPlay;
   private int startWindow;
   private long startPosition;
 
-  // Activity lifecycle
-
   @Override
   public void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
-    String userAgent = Util.getUserAgent(this, "ExoPlayerDemo");
-    dataSourceFactory =
-        new DefaultDataSourceFactory(this, new DefaultHttpDataSourceFactory(userAgent));
 
     String sphericalStereoMode = getIntent().getStringExtra(SPHERICAL_STEREO_MODE_EXTRA);
     if (sphericalStereoMode != null) {
@@ -93,68 +83,34 @@ public void onCreate(Bundle savedInstanceState) {
   }
 
   @Override
-  public void onResume() {
-    super.onResume();
-    if (Util.SDK_INT <= 23 || player == null) {
-      initializePlayer();
-    }
-  }
-
-  @Override
-  public void onPause() {
-    super.onPause();
-    if (Util.SDK_INT <= 23) {
-      releasePlayer();
-    }
-  }
-
-  @Override
-  public void onDestroy() {
-    super.onDestroy();
-  }
-
-  // PlaybackControlView.PlaybackPreparer implementation
-
-  @Override
-  public void preparePlayback() {
-    initializePlayer();
-  }
-
-  // Internal methods
-
-  private void initializePlayer() {
-    if (player == null) {
-      Intent intent = getIntent();
-      Uri uri = intent.getData();
-      if (!Util.checkCleartextTrafficPermitted(uri)) {
-        showToast(R.string.error_cleartext_not_permitted);
-        return;
-      }
-
-      DefaultRenderersFactory renderersFactory = new DefaultRenderersFactory(this);
-
-      trackSelector = new DefaultTrackSelector(/* context= */ this);
-      lastSeenTrackGroupArray = null;
-
-      player =
-          new SimpleExoPlayer.Builder(/* context= */ this, renderersFactory)
-              .setTrackSelector(trackSelector)
-              .build();
-      player.addListener(new PlayerEventListener());
-      player.setPlayWhenReady(startAutoPlay);
-      player.addAnalyticsListener(new EventLogger(trackSelector));
-      setPlayer(player);
-
-      mediaSource = buildMediaSource(uri, intent.getStringExtra(EXTENSION_EXTRA));
-    }
+  protected Player createPlayer() {
+    Intent intent = getIntent();
+    Uri uri = intent.getData();
+    DefaultRenderersFactory renderersFactory = new DefaultRenderersFactory(this);
+
+    trackSelector = new DefaultTrackSelector(/* context= */ this);
+    lastSeenTrackGroupArray = null;
+
+    player =
+        new SimpleExoPlayer.Builder(/* context= */ this, renderersFactory)
+            .setTrackSelector(trackSelector)
+            .build();
+    player.addListener(new PlayerEventListener());
+    player.setPlayWhenReady(startAutoPlay);
+    player.addAnalyticsListener(new EventLogger(trackSelector));
+    MediaSource mediaSource = buildMediaSource(uri, intent.getStringExtra(EXTENSION_EXTRA));
     boolean haveStartPosition = startWindow != C.INDEX_UNSET;
     if (haveStartPosition) {
       player.seekTo(startWindow, startPosition);
     }
     player.prepare(mediaSource, !haveStartPosition, false);
+    return player;
   }
 
   private MediaSource buildMediaSource(Uri uri, @Nullable String overrideExtension) {
+    String userAgent = Util.getUserAgent(this, "ExoPlayerVrDemo");
+    DefaultDataSourceFactory dataSourceFactory =
+        new DefaultDataSourceFactory(this, new DefaultHttpDataSourceFactory(userAgent));
     @ContentType int type = Util.inferContentType(uri, overrideExtension);
     switch (type) {
       case C.TYPE_DASH:
@@ -170,16 +126,6 @@ private MediaSource buildMediaSource(Uri uri, @Nullable String overrideExtension
     }
   }
 
-  private void releasePlayer() {
-    if (player != null) {
-      updateStartPosition();
-      player.release();
-      player = null;
-      mediaSource = null;
-      trackSelector = null;
-    }
-  }
-
   private void updateStartPosition() {
     if (player != null) {
       startAutoPlay = player.getPlayWhenReady();
diff --git a/demos/gvr/src/main/java/com/google/android/exoplayer2/gvrdemo/SampleChooserActivity.java b/demos/gvr/src/main/java/com/google/android/exoplayer2/gvrdemo/SampleChooserActivity.java
index 1ddf5c1517..0694f072ee 100644
--- a/demos/gvr/src/main/java/com/google/android/exoplayer2/gvrdemo/SampleChooserActivity.java
+++ b/demos/gvr/src/main/java/com/google/android/exoplayer2/gvrdemo/SampleChooserActivity.java
@@ -44,47 +44,6 @@
             "Iceland (360 top-bottom stereo ts)",
             "https://storage.googleapis.com/exoplayer-test-media-1/360/iceland0.ts",
             SPHERICAL_STEREO_MODE_TOP_BOTTOM),
-        new Sample(
-            "Camera motion metadata test",
-            "https://storage.googleapis.com/exoplayer-test-media-internal-"
-                + "63834241aced7884c2544af1a3452e01/vr180/synthetic_with_camm.mp4",
-            SPHERICAL_STEREO_MODE_TOP_BOTTOM),
-        new Sample(
-            "actual_camera_cat",
-            "https://storage.googleapis.com/exoplayer-test-media-internal-"
-                + "63834241aced7884c2544af1a3452e01/vr180/actual_camera_cat.mp4",
-            SPHERICAL_STEREO_MODE_TOP_BOTTOM),
-        new Sample(
-            "johnny_stitched",
-            "https://storage.googleapis.com/exoplayer-test-media-internal-"
-                + "63834241aced7884c2544af1a3452e01/vr180/johnny_stitched.mp4",
-            SPHERICAL_STEREO_MODE_TOP_BOTTOM),
-        new Sample(
-            "lenovo_birds.vr",
-            "https://storage.googleapis.com/exoplayer-test-media-internal-"
-                + "63834241aced7884c2544af1a3452e01/vr180/lenovo_birds.vr.mp4",
-            SPHERICAL_STEREO_MODE_TOP_BOTTOM),
-        new Sample(
-            "mono_v1_sample",
-            "https://storage.googleapis.com/exoplayer-test-media-internal-"
-                + "63834241aced7884c2544af1a3452e01/vr180/mono_v1_sample.mp4",
-            SPHERICAL_STEREO_MODE_MONO),
-        new Sample(
-            "not_vr180_actually_shot_with_moto_mod",
-            "https://storage.googleapis.com/exoplayer-test-media-internal-"
-                + "63834241aced7884c2544af1a3452e01/vr180/"
-                + "not_vr180_actually_shot_with_moto_mod.mp4",
-            SPHERICAL_STEREO_MODE_TOP_BOTTOM),
-        new Sample(
-            "stereo_v1_sample",
-            "https://storage.googleapis.com/exoplayer-test-media-internal-"
-                + "63834241aced7884c2544af1a3452e01/vr180/stereo_v1_sample.mp4",
-            SPHERICAL_STEREO_MODE_TOP_BOTTOM),
-        new Sample(
-            "yi_giraffes.vr",
-            "https://storage.googleapis.com/exoplayer-test-media-internal-"
-                + "63834241aced7884c2544af1a3452e01/vr180/yi_giraffes.vr.mp4",
-            SPHERICAL_STEREO_MODE_TOP_BOTTOM),
       };
 
   @Override
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
index 1dc56bfbc9..eaf1829d6a 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
@@ -107,12 +107,14 @@
 
   public static final String URI_EXTRA = "uri";
   public static final String EXTENSION_EXTRA = "extension";
+  public static final String IS_LIVE_EXTRA = "is_live";
 
   public static final String DRM_SCHEME_EXTRA = "drm_scheme";
   public static final String DRM_LICENSE_URL_EXTRA = "drm_license_url";
   public static final String DRM_KEY_REQUEST_PROPERTIES_EXTRA = "drm_key_request_properties";
   public static final String DRM_MULTI_SESSION_EXTRA = "drm_multi_session";
   public static final String PREFER_EXTENSION_DECODERS_EXTRA = "prefer_extension_decoders";
+  public static final String TUNNELING = "tunneling";
   public static final String AD_TAG_URI_EXTRA = "ad_tag_uri";
   // For backwards compatibility only.
   public static final String DRM_SCHEME_UUID_EXTRA = "drm_scheme_uuid";
@@ -200,7 +202,13 @@ public void onCreate(Bundle savedInstanceState) {
       startWindow = savedInstanceState.getInt(KEY_WINDOW);
       startPosition = savedInstanceState.getLong(KEY_POSITION);
     } else {
-      trackSelectorParameters = DefaultTrackSelector.Parameters.getDefaults(/* context= */ this);
+      DefaultTrackSelector.ParametersBuilder builder =
+          new DefaultTrackSelector.ParametersBuilder(/* context= */ this);
+      boolean tunneling = intent.getBooleanExtra(TUNNELING, false);
+      if (tunneling) {
+        builder.setTunnelingAudioSessionId(C.generateAudioSessionIdV21(/* context= */ this));
+      }
+      trackSelectorParameters = builder.build();
       clearStartPosition();
     }
   }
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/Sample.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/Sample.java
index 4497b9a984..40c20c298c 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/Sample.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/Sample.java
@@ -23,6 +23,7 @@
 import static com.google.android.exoplayer2.demo.PlayerActivity.DRM_SCHEME_EXTRA;
 import static com.google.android.exoplayer2.demo.PlayerActivity.DRM_SCHEME_UUID_EXTRA;
 import static com.google.android.exoplayer2.demo.PlayerActivity.EXTENSION_EXTRA;
+import static com.google.android.exoplayer2.demo.PlayerActivity.IS_LIVE_EXTRA;
 import static com.google.android.exoplayer2.demo.PlayerActivity.URI_EXTRA;
 
 import android.content.Intent;
@@ -40,32 +41,38 @@
     public static UriSample createFromIntent(Uri uri, Intent intent, String extrasKeySuffix) {
       String extension = intent.getStringExtra(EXTENSION_EXTRA + extrasKeySuffix);
       String adsTagUriString = intent.getStringExtra(AD_TAG_URI_EXTRA + extrasKeySuffix);
+      boolean isLive =
+          intent.getBooleanExtra(IS_LIVE_EXTRA + extrasKeySuffix, /* defaultValue= */ false);
       Uri adTagUri = adsTagUriString != null ? Uri.parse(adsTagUriString) : null;
       return new UriSample(
           /* name= */ null,
-          DrmInfo.createFromIntent(intent, extrasKeySuffix),
           uri,
           extension,
+          isLive,
+          DrmInfo.createFromIntent(intent, extrasKeySuffix),
           adTagUri,
           /* sphericalStereoMode= */ null);
     }
 
     public final Uri uri;
     public final String extension;
+    public final boolean isLive;
     public final DrmInfo drmInfo;
     public final Uri adTagUri;
-    public final String sphericalStereoMode;
+    @Nullable public final String sphericalStereoMode;
 
     public UriSample(
         String name,
-        DrmInfo drmInfo,
         Uri uri,
         String extension,
+        boolean isLive,
+        DrmInfo drmInfo,
         Uri adTagUri,
-        String sphericalStereoMode) {
+        @Nullable String sphericalStereoMode) {
       super(name);
       this.uri = uri;
       this.extension = extension;
+      this.isLive = isLive;
       this.drmInfo = drmInfo;
       this.adTagUri = adTagUri;
       this.sphericalStereoMode = sphericalStereoMode;
@@ -74,12 +81,14 @@ public UriSample(
     @Override
     public void addToIntent(Intent intent) {
       intent.setAction(PlayerActivity.ACTION_VIEW).setData(uri);
+      intent.putExtra(PlayerActivity.IS_LIVE_EXTRA, isLive);
       intent.putExtra(PlayerActivity.SPHERICAL_STEREO_MODE_EXTRA, sphericalStereoMode);
       addPlayerConfigToIntent(intent, /* extrasKeySuffix= */ "");
     }
 
     public void addToPlaylistIntent(Intent intent, String extrasKeySuffix) {
       intent.putExtra(PlayerActivity.URI_EXTRA + extrasKeySuffix, uri.toString());
+      intent.putExtra(PlayerActivity.IS_LIVE_EXTRA + extrasKeySuffix, isLive);
       addPlayerConfigToIntent(intent, extrasKeySuffix);
     }
 
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
index 3920cd3a80..11ed258c42 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
@@ -68,6 +68,7 @@
   private SampleAdapter sampleAdapter;
   private MenuItem preferExtensionDecodersMenuItem;
   private MenuItem randomAbrMenuItem;
+  private MenuItem tunnelingMenuItem;
 
   @Override
   public void onCreate(Bundle savedInstanceState) {
@@ -125,6 +126,7 @@ public boolean onCreateOptionsMenu(Menu menu) {
     preferExtensionDecodersMenuItem = menu.findItem(R.id.prefer_extension_decoders);
     preferExtensionDecodersMenuItem.setVisible(useExtensionRenderers);
     randomAbrMenuItem = menu.findItem(R.id.random_abr);
+    tunnelingMenuItem = menu.findItem(R.id.tunneling);
     return true;
   }
 
@@ -173,6 +175,7 @@ public boolean onChildClick(
             ? PlayerActivity.ABR_ALGORITHM_RANDOM
             : PlayerActivity.ABR_ALGORITHM_DEFAULT;
     intent.putExtra(PlayerActivity.ABR_ALGORITHM_EXTRA, abrAlgorithm);
+    intent.putExtra(PlayerActivity.TUNNELING, isNonNullAndChecked(tunnelingMenuItem));
     sample.addToIntent(intent);
     startActivity(intent);
     return true;
@@ -205,6 +208,9 @@ private int getDownloadUnsupportedStringId(Sample sample) {
     if (uriSample.drmInfo != null) {
       return R.string.download_drm_unsupported;
     }
+    if (uriSample.isLive) {
+      return R.string.download_live_unsupported;
+    }
     if (uriSample.adTagUri != null) {
       return R.string.download_ads_unsupported;
     }
@@ -294,6 +300,7 @@ private Sample readEntry(JsonReader reader, boolean insidePlaylist) throws IOExc
       String sampleName = null;
       Uri uri = null;
       String extension = null;
+      boolean isLive = false;
       String drmScheme = null;
       String drmLicenseUrl = null;
       String[] drmKeyRequestProperties = null;
@@ -318,6 +325,9 @@ private Sample readEntry(JsonReader reader, boolean insidePlaylist) throws IOExc
           case "drm_scheme":
             drmScheme = reader.nextString();
             break;
+          case "is_live":
+            isLive = reader.nextBoolean();
+            break;
           case "drm_license_url":
             drmLicenseUrl = reader.nextString();
             break;
@@ -370,9 +380,10 @@ private Sample readEntry(JsonReader reader, boolean insidePlaylist) throws IOExc
       } else {
         return new UriSample(
             sampleName,
-            drmInfo,
             uri,
             extension,
+            isLive,
+            drmInfo,
             adTagUri != null ? Uri.parse(adTagUri) : null,
             sphericalStereoMode);
       }
@@ -486,7 +497,7 @@ private void initializeChildView(View view, Sample sample) {
       ImageButton downloadButton = view.findViewById(R.id.download_button);
       downloadButton.setTag(sample);
       downloadButton.setColorFilter(
-          canDownload ? (isDownloaded ? 0xFF42A5F5 : 0xFFBDBDBD) : 0xFFEEEEEE);
+          canDownload ? (isDownloaded ? 0xFF42A5F5 : 0xFFBDBDBD) : 0xFF666666);
       downloadButton.setImageResource(
           isDownloaded ? R.drawable.ic_download_done : R.drawable.ic_download);
     }
diff --git a/demos/main/src/main/res/menu/sample_chooser_menu.xml b/demos/main/src/main/res/menu/sample_chooser_menu.xml
index 9934e9db95..f95c0b6460 100644
--- a/demos/main/src/main/res/menu/sample_chooser_menu.xml
+++ b/demos/main/src/main/res/menu/sample_chooser_menu.xml
@@ -23,4 +23,8 @@
       android:title="@string/random_abr"
       android:checkable="true"
       app:showAsAction="never"/>
+  <item android:id="@+id/tunneling"
+      android:title="@string/tunneling"
+      android:checkable="true"
+      app:showAsAction="never"/>
 </menu>
diff --git a/demos/main/src/main/res/values/strings.xml b/demos/main/src/main/res/values/strings.xml
index c39fffa65d..671303a522 100644
--- a/demos/main/src/main/res/values/strings.xml
+++ b/demos/main/src/main/res/values/strings.xml
@@ -63,10 +63,14 @@
 
   <string name="download_scheme_unsupported">This demo app only supports downloading http streams</string>
 
+  <string name="download_live_unsupported">This demo app does not support downloading live content</string>
+
   <string name="download_ads_unsupported">IMA does not support offline ads</string>
 
   <string name="prefer_extension_decoders">Prefer extension decoders</string>
 
   <string name="random_abr">Enable random ABR</string>
 
+  <string name="tunneling">Request multimedia tunneling</string>
+
 </resources>
diff --git a/extensions/cast/src/main/java/com/google/android/exoplayer2/ext/cast/CastTimeline.java b/extensions/cast/src/main/java/com/google/android/exoplayer2/ext/cast/CastTimeline.java
index 54ff7e6777..a3bdc5e415 100644
--- a/extensions/cast/src/main/java/com/google/android/exoplayer2/ext/cast/CastTimeline.java
+++ b/extensions/cast/src/main/java/com/google/android/exoplayer2/ext/cast/CastTimeline.java
@@ -39,9 +39,14 @@
      * The default start position of the item in microseconds, or {@link C#TIME_UNSET} if unknown.
      */
     public final long defaultPositionUs;
+    /** Whether the item is live content, or {@code false} if unknown. */
+    public final boolean isLive;
 
     private ItemData() {
-      this(/* durationUs= */ C.TIME_UNSET, /* defaultPositionUs */ C.TIME_UNSET);
+      this(
+          /* durationUs= */ C.TIME_UNSET, /* defaultPositionUs */
+          C.TIME_UNSET,
+          /* isLive= */ false);
     }
 
     /**
@@ -49,26 +54,29 @@ private ItemData() {
      *
      * @param durationUs See {@link #durationsUs}.
      * @param defaultPositionUs See {@link #defaultPositionUs}.
+     * @param isLive See {@link #isLive}.
      */
-    public ItemData(long durationUs, long defaultPositionUs) {
+    public ItemData(long durationUs, long defaultPositionUs, boolean isLive) {
       this.durationUs = durationUs;
       this.defaultPositionUs = defaultPositionUs;
+      this.isLive = isLive;
     }
 
-    /** Returns an instance with the given {@link #durationsUs}. */
-    public ItemData copyWithDurationUs(long durationUs) {
-      if (durationUs == this.durationUs) {
-        return this;
-      }
-      return new ItemData(durationUs, defaultPositionUs);
-    }
-
-    /** Returns an instance with the given {@link #defaultPositionsUs}. */
-    public ItemData copyWithDefaultPositionUs(long defaultPositionUs) {
-      if (defaultPositionUs == this.defaultPositionUs) {
+    /**
+     * Returns a copy of this instance with the given values.
+     *
+     * @param durationUs The duration in microseconds, or {@link C#TIME_UNSET} if unknown.
+     * @param defaultPositionUs The default start position in microseconds, or {@link C#TIME_UNSET}
+     *     if unknown.
+     * @param isLive Whether the item is live, or {@code false} if unknown.
+     */
+    public ItemData copyWithNewValues(long durationUs, long defaultPositionUs, boolean isLive) {
+      if (durationUs == this.durationUs
+          && defaultPositionUs == this.defaultPositionUs
+          && isLive == this.isLive) {
         return this;
       }
-      return new ItemData(durationUs, defaultPositionUs);
+      return new ItemData(durationUs, defaultPositionUs, isLive);
     }
   }
 
@@ -80,6 +88,7 @@ public ItemData copyWithDefaultPositionUs(long defaultPositionUs) {
   private final int[] ids;
   private final long[] durationsUs;
   private final long[] defaultPositionsUs;
+  private final boolean[] isLive;
 
   /**
    * Creates a Cast timeline from the given data.
@@ -93,12 +102,14 @@ public CastTimeline(int[] itemIds, SparseArray<ItemData> itemIdToData) {
     ids = Arrays.copyOf(itemIds, itemCount);
     durationsUs = new long[itemCount];
     defaultPositionsUs = new long[itemCount];
+    isLive = new boolean[itemCount];
     for (int i = 0; i < ids.length; i++) {
       int id = ids[i];
       idsToIndex.put(id, i);
       ItemData data = itemIdToData.get(id, ItemData.EMPTY);
       durationsUs[i] = data.durationUs;
-      defaultPositionsUs[i] = data.defaultPositionUs;
+      defaultPositionsUs[i] = data.defaultPositionUs == C.TIME_UNSET ? 0 : data.defaultPositionUs;
+      isLive[i] = data.isLive;
     }
   }
 
@@ -121,7 +132,7 @@ public Window getWindow(int windowIndex, Window window, long defaultPositionProj
         /* windowStartTimeMs= */ C.TIME_UNSET,
         /* isSeekable= */ !isDynamic,
         isDynamic,
-        /* isLive= */ isDynamic,
+        isLive[windowIndex],
         defaultPositionsUs[windowIndex],
         durationUs,
         /* firstPeriodIndex= */ windowIndex,
@@ -162,7 +173,8 @@ public boolean equals(@Nullable Object other) {
     CastTimeline that = (CastTimeline) other;
     return Arrays.equals(ids, that.ids)
         && Arrays.equals(durationsUs, that.durationsUs)
-        && Arrays.equals(defaultPositionsUs, that.defaultPositionsUs);
+        && Arrays.equals(defaultPositionsUs, that.defaultPositionsUs)
+        && Arrays.equals(isLive, that.isLive);
   }
 
   @Override
@@ -170,6 +182,7 @@ public int hashCode() {
     int result = Arrays.hashCode(ids);
     result = 31 * result + Arrays.hashCode(durationsUs);
     result = 31 * result + Arrays.hashCode(defaultPositionsUs);
+    result = 31 * result + Arrays.hashCode(isLive);
     return result;
   }
 
diff --git a/extensions/cast/src/main/java/com/google/android/exoplayer2/ext/cast/CastTimelineTracker.java b/extensions/cast/src/main/java/com/google/android/exoplayer2/ext/cast/CastTimelineTracker.java
index 40c93a115a..3ebd89c8fc 100644
--- a/extensions/cast/src/main/java/com/google/android/exoplayer2/ext/cast/CastTimelineTracker.java
+++ b/extensions/cast/src/main/java/com/google/android/exoplayer2/ext/cast/CastTimelineTracker.java
@@ -16,7 +16,9 @@
 package com.google.android.exoplayer2.ext.cast;
 
 import android.util.SparseArray;
+import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
+import com.google.android.gms.cast.MediaInfo;
 import com.google.android.gms.cast.MediaQueueItem;
 import com.google.android.gms.cast.MediaStatus;
 import com.google.android.gms.cast.framework.media.RemoteMediaClient;
@@ -61,25 +63,33 @@ public CastTimeline getCastTimeline(RemoteMediaClient remoteMediaClient) {
     }
 
     int currentItemId = mediaStatus.getCurrentItemId();
-    long durationUs = CastUtils.getStreamDurationUs(mediaStatus.getMediaInfo());
-    itemIdToData.put(
-        currentItemId,
-        itemIdToData
-            .get(currentItemId, CastTimeline.ItemData.EMPTY)
-            .copyWithDurationUs(durationUs));
+    updateItemData(
+        currentItemId, mediaStatus.getMediaInfo(), /* defaultPositionUs= */ C.TIME_UNSET);
 
     for (MediaQueueItem item : mediaStatus.getQueueItems()) {
-      int itemId = item.getItemId();
-      itemIdToData.put(
-          itemId,
-          itemIdToData
-              .get(itemId, CastTimeline.ItemData.EMPTY)
-              .copyWithDefaultPositionUs((long) (item.getStartTime() * C.MICROS_PER_SECOND)));
+      long defaultPositionUs = (long) (item.getStartTime() * C.MICROS_PER_SECOND);
+      updateItemData(item.getItemId(), item.getMedia(), defaultPositionUs);
     }
 
     return new CastTimeline(itemIds, itemIdToData);
   }
 
+  private void updateItemData(int itemId, @Nullable MediaInfo mediaInfo, long defaultPositionUs) {
+    CastTimeline.ItemData previousData = itemIdToData.get(itemId, CastTimeline.ItemData.EMPTY);
+    long durationUs = CastUtils.getStreamDurationUs(mediaInfo);
+    if (durationUs == C.TIME_UNSET) {
+      durationUs = previousData.durationUs;
+    }
+    boolean isLive =
+        mediaInfo == null
+            ? previousData.isLive
+            : mediaInfo.getStreamType() == MediaInfo.STREAM_TYPE_LIVE;
+    if (defaultPositionUs == C.TIME_UNSET) {
+      defaultPositionUs = previousData.defaultPositionUs;
+    }
+    itemIdToData.put(itemId, previousData.copyWithNewValues(durationUs, defaultPositionUs, isLive));
+  }
+
   private void removeUnusedItemDataEntries(int[] itemIds) {
     HashSet<Integer> scratchItemIds = new HashSet<>(/* initialCapacity= */ itemIds.length * 2);
     for (int id : itemIds) {
diff --git a/extensions/ffmpeg/README.md b/extensions/ffmpeg/README.md
index 3348f7cffb..cc9ea2a8c7 100644
--- a/extensions/ffmpeg/README.md
+++ b/extensions/ffmpeg/README.md
@@ -21,14 +21,14 @@ for more information).
 In addition, it's necessary to build the extension's native components as
 follows:
 
-* Set the following environment variables:
+* Set the following shell variable:
 
 ```
 cd "<path to exoplayer checkout>"
 FFMPEG_EXT_PATH="$(pwd)/extensions/ffmpeg/src/main/jni"
 ```
 
-* Download the [Android NDK][] and set its location in an environment variable.
+* Download the [Android NDK][] and set its location in a shell variable.
   Only versions up to NDK 15c are supported currently.
 
 ```
@@ -41,70 +41,21 @@ NDK_PATH="<path to Android NDK>"
 HOST_PLATFORM="linux-x86_64"
 ```
 
-* Fetch and build FFmpeg. The configuration flags determine which formats will
-  be supported. See the [Supported formats][] page for more details of the
-  available flags.
+* Configure the formats supported by adapting the following variable if needed
+  and by setting it. See the [Supported formats][] page for more details of the
+  formats.
 
-For example, to fetch and build FFmpeg release 4.0 for armeabi-v7a,
-  arm64-v8a and x86 on Linux x86_64:
+```
+ENABLED_DECODERS=(vorbis opus flac)
+```
+
+* Fetch and build FFmpeg. For example, executing script `build_ffmpeg.sh` will
+  fetch and build FFmpeg release 4.0 for armeabi-v7a, arm64-v8a and x86:
 
 ```
-COMMON_OPTIONS="\
-    --target-os=android \
-    --disable-static \
-    --enable-shared \
-    --disable-doc \
-    --disable-programs \
-    --disable-everything \
-    --disable-avdevice \
-    --disable-avformat \
-    --disable-swscale \
-    --disable-postproc \
-    --disable-avfilter \
-    --disable-symver \
-    --disable-swresample \
-    --enable-avresample \
-    --enable-decoder=vorbis \
-    --enable-decoder=opus \
-    --enable-decoder=flac \
-    " && \
 cd "${FFMPEG_EXT_PATH}" && \
-(git -C ffmpeg pull || git clone git://source.ffmpeg.org/ffmpeg ffmpeg) && \
-cd ffmpeg && git checkout release/4.0 && \
-./configure \
-    --libdir=android-libs/armeabi-v7a \
-    --arch=arm \
-    --cpu=armv7-a \
-    --cross-prefix="${NDK_PATH}/toolchains/arm-linux-androideabi-4.9/prebuilt/${HOST_PLATFORM}/bin/arm-linux-androideabi-" \
-    --sysroot="${NDK_PATH}/platforms/android-9/arch-arm/" \
-    --extra-cflags="-march=armv7-a -mfloat-abi=softfp" \
-    --extra-ldflags="-Wl,--fix-cortex-a8" \
-    --extra-ldexeflags=-pie \
-    ${COMMON_OPTIONS} \
-    && \
-make -j4 && make install-libs && \
-make clean && ./configure \
-    --libdir=android-libs/arm64-v8a \
-    --arch=aarch64 \
-    --cpu=armv8-a \
-    --cross-prefix="${NDK_PATH}/toolchains/aarch64-linux-android-4.9/prebuilt/${HOST_PLATFORM}/bin/aarch64-linux-android-" \
-    --sysroot="${NDK_PATH}/platforms/android-21/arch-arm64/" \
-    --extra-ldexeflags=-pie \
-    ${COMMON_OPTIONS} \
-    && \
-make -j4 && make install-libs && \
-make clean && ./configure \
-    --libdir=android-libs/x86 \
-    --arch=x86 \
-    --cpu=i686 \
-    --cross-prefix="${NDK_PATH}/toolchains/x86-4.9/prebuilt/${HOST_PLATFORM}/bin/i686-linux-android-" \
-    --sysroot="${NDK_PATH}/platforms/android-9/arch-x86/" \
-    --extra-ldexeflags=-pie \
-    --disable-asm \
-    ${COMMON_OPTIONS} \
-    && \
-make -j4 && make install-libs && \
-make clean
+./build_ffmpeg.sh \
+  "${FFMPEG_EXT_PATH}" "${NDK_PATH}" "${HOST_PLATFORM}" "${ENABLED_DECODERS[@]}"
 ```
 
 * Build the JNI native libraries, setting `APP_ABI` to include the architectures
diff --git a/extensions/ffmpeg/src/main/jni/build_ffmpeg.sh b/extensions/ffmpeg/src/main/jni/build_ffmpeg.sh
new file mode 100755
index 0000000000..358d2a2b8f
--- /dev/null
+++ b/extensions/ffmpeg/src/main/jni/build_ffmpeg.sh
@@ -0,0 +1,81 @@
+#!/bin/bash
+#
+# Copyright (C) 2019 The Android Open Source Project
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+FFMPEG_EXT_PATH=$1
+NDK_PATH=$2
+HOST_PLATFORM=$3
+ENABLED_DECODERS=("${@:4}")
+COMMON_OPTIONS="
+    --target-os=android
+    --disable-static
+    --enable-shared
+    --disable-doc
+    --disable-programs
+    --disable-everything
+    --disable-avdevice
+    --disable-avformat
+    --disable-swscale
+    --disable-postproc
+    --disable-avfilter
+    --disable-symver
+    --disable-swresample
+    --enable-avresample
+    "
+for decoder in "${ENABLED_DECODERS[@]}"
+do
+    COMMON_OPTIONS="${COMMON_OPTIONS} --enable-decoder=${decoder}"
+done
+cd "${FFMPEG_EXT_PATH}"
+(git -C ffmpeg pull || git clone git://source.ffmpeg.org/ffmpeg ffmpeg)
+cd ffmpeg
+git checkout release/4.0
+./configure \
+    --libdir=android-libs/armeabi-v7a \
+    --arch=arm \
+    --cpu=armv7-a \
+    --cross-prefix="${NDK_PATH}/toolchains/arm-linux-androideabi-4.9/prebuilt/${HOST_PLATFORM}/bin/arm-linux-androideabi-" \
+    --sysroot="${NDK_PATH}/platforms/android-9/arch-arm/" \
+    --extra-cflags="-march=armv7-a -mfloat-abi=softfp" \
+    --extra-ldflags="-Wl,--fix-cortex-a8" \
+    --extra-ldexeflags=-pie \
+    ${COMMON_OPTIONS}
+make -j4
+make install-libs
+make clean
+./configure \
+    --libdir=android-libs/arm64-v8a \
+    --arch=aarch64 \
+    --cpu=armv8-a \
+    --cross-prefix="${NDK_PATH}/toolchains/aarch64-linux-android-4.9/prebuilt/${HOST_PLATFORM}/bin/aarch64-linux-android-" \
+    --sysroot="${NDK_PATH}/platforms/android-21/arch-arm64/" \
+    --extra-ldexeflags=-pie \
+    ${COMMON_OPTIONS}
+make -j4
+make install-libs
+make clean
+./configure \
+    --libdir=android-libs/x86 \
+    --arch=x86 \
+    --cpu=i686 \
+    --cross-prefix="${NDK_PATH}/toolchains/x86-4.9/prebuilt/${HOST_PLATFORM}/bin/i686-linux-android-" \
+    --sysroot="${NDK_PATH}/platforms/android-9/arch-x86/" \
+    --extra-ldexeflags=-pie \
+    --disable-asm \
+    ${COMMON_OPTIONS}
+make -j4
+make install-libs
+make clean
diff --git a/extensions/gvr/src/main/java/com/google/android/exoplayer2/ext/gvr/GvrPlayerActivity.java b/extensions/gvr/src/main/java/com/google/android/exoplayer2/ext/gvr/GvrPlayerActivity.java
index 06b9fac487..6722eba843 100644
--- a/extensions/gvr/src/main/java/com/google/android/exoplayer2/ext/gvr/GvrPlayerActivity.java
+++ b/extensions/gvr/src/main/java/com/google/android/exoplayer2/ext/gvr/GvrPlayerActivity.java
@@ -13,7 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package com.google.android.exoplayer2.ext.gvr;
 
 import android.content.Context;
@@ -21,8 +20,6 @@
 import android.graphics.SurfaceTexture;
 import android.opengl.Matrix;
 import android.os.Bundle;
-import android.os.Handler;
-import android.os.Looper;
 import android.view.ContextThemeWrapper;
 import android.view.MotionEvent;
 import android.view.Surface;
@@ -37,7 +34,6 @@
 import com.google.android.exoplayer2.ui.spherical.PointerRenderer;
 import com.google.android.exoplayer2.ui.spherical.SceneRenderer;
 import com.google.android.exoplayer2.util.Assertions;
-import com.google.android.exoplayer2.util.Util;
 import com.google.vr.ndk.base.DaydreamApi;
 import com.google.vr.sdk.base.AndroidCompat;
 import com.google.vr.sdk.base.Eye;
@@ -47,57 +43,46 @@
 import com.google.vr.sdk.base.Viewport;
 import com.google.vr.sdk.controller.Controller;
 import com.google.vr.sdk.controller.ControllerManager;
+import com.google.vr.sdk.controller.Orientation;
 import javax.microedition.khronos.egl.EGLConfig;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 
-/**
- * Base activity for VR 360 video playback. Before starting the video playback a player needs to be
- * set using {@link #setPlayer(Player)}.
- */
+/** Base activity for VR 360 video playback. */
 public abstract class GvrPlayerActivity extends GvrActivity {
 
   private static final int EXIT_FROM_VR_REQUEST_CODE = 42;
 
-  private final Handler mainHandler;
-
   @Nullable private Player player;
-  private @MonotonicNonNull GlViewGroup glView;
   private @MonotonicNonNull ControllerManager controllerManager;
   private @MonotonicNonNull SurfaceTexture surfaceTexture;
   private @MonotonicNonNull Surface surface;
-  private @MonotonicNonNull SceneRenderer scene;
-  private @MonotonicNonNull PlayerControlView playerControl;
-
-  public GvrPlayerActivity() {
-    mainHandler = new Handler(Looper.getMainLooper());
-  }
+  private @MonotonicNonNull SceneRenderer sceneRenderer;
+  private @MonotonicNonNull PlayerControlView playerControlView;
 
+  @CallSuper
   @Override
   protected void onCreate(@Nullable Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setScreenAlwaysOn(true);
 
-    GvrView gvrView = new GvrView(this);
-    // Since videos typically have fewer pixels per degree than the phones, reducing the render
-    // target scaling factor reduces the work required to render the scene.
-    gvrView.setRenderTargetScale(.5f);
+    GvrView gvrView = new GvrView(/* context= */ this);
+    gvrView.setRenderTargetScale(getRenderTargetScale());
 
     // If a custom theme isn't specified, the Context's theme is used. For VR Activities, this is
     // the old Android default theme rather than a modern theme. Override this with a custom theme.
-    Context theme = new ContextThemeWrapper(this, R.style.VrTheme);
-    glView = new GlViewGroup(theme, R.layout.vr_ui);
+    Context theme = new ContextThemeWrapper(this, R.style.ExoVrTheme);
+    GlViewGroup glViewGroup = new GlViewGroup(theme, R.layout.exo_vr_ui);
 
-    playerControl = Assertions.checkNotNull(glView.findViewById(R.id.controller));
-    playerControl.setShowVrButton(true);
-    playerControl.setVrButtonListener(v -> exit());
+    playerControlView = Assertions.checkNotNull(glViewGroup.findViewById(R.id.controller));
+    playerControlView.setShowVrButton(true);
+    playerControlView.setVrButtonListener(v -> exit());
 
+    sceneRenderer = new SceneRenderer();
     PointerRenderer pointerRenderer = new PointerRenderer();
-    scene = new SceneRenderer();
-    Renderer renderer = new Renderer(scene, glView, pointerRenderer);
-
-    // Attach glView to gvrView in order to properly handle UI events.
-    gvrView.addView(glView, 0);
+    Renderer renderer = new Renderer(sceneRenderer, pointerRenderer, glViewGroup);
 
+    // Attach glViewGroup to gvrView in order to properly handle UI events.
+    gvrView.addView(glViewGroup);
     // Standard GvrView configuration
     gvrView.setEGLConfigChooser(
         8, 8, 8, 8, // RGBA bits.
@@ -106,80 +91,23 @@ protected void onCreate(@Nullable Bundle savedInstanceState) {
     gvrView.setRenderer(renderer);
     setContentView(gvrView);
 
-    // Most Daydream phones can render a 4k video at 60fps in sustained performance mode. These
-    // options can be tweaked along with the render target scale.
     if (gvrView.setAsyncReprojectionEnabled(true)) {
-      AndroidCompat.setSustainedPerformanceMode(this, true);
+      AndroidCompat.setSustainedPerformanceMode(/* activity= */ this, true);
     }
 
     // Handle the user clicking on the 'X' in the top left corner. Since this is done when the user
     // has taken the headset out of VR, it should launch the app's exit flow directly rather than
-    // using the transition flow.
+    // using Daydream's exit transition.
     gvrView.setOnCloseButtonListener(this::finish);
 
-    ControllerManager.EventListener listener =
-        new ControllerManager.EventListener() {
-          @Override
-          public void onApiStatusChanged(int status) {
-            // Do nothing.
-          }
-
-          @Override
-          public void onRecentered() {
-            // TODO if in cardboard mode call gvrView.recenterHeadTracker();
-            glView.post(() -> Util.castNonNull(playerControl).show());
-          }
-        };
-    controllerManager = new ControllerManager(this, listener);
-
+    controllerManager =
+        new ControllerManager(/* context= */ this, new ControllerManagerEventListener());
     Controller controller = controllerManager.getController();
     ControllerEventListener controllerEventListener =
-        new ControllerEventListener(controller, pointerRenderer, glView);
+        new ControllerEventListener(controller, pointerRenderer, glViewGroup);
     controller.setEventListener(controllerEventListener);
   }
 
-  /**
-   * Sets the {@link Player} to use.
-   *
-   * @param newPlayer The {@link Player} to use, or {@code null} to detach the current player.
-   */
-  protected void setPlayer(@Nullable Player newPlayer) {
-    Assertions.checkNotNull(scene);
-    if (player == newPlayer) {
-      return;
-    }
-    if (player != null) {
-      Player.VideoComponent videoComponent = player.getVideoComponent();
-      if (videoComponent != null) {
-        if (surface != null) {
-          videoComponent.clearVideoSurface(surface);
-        }
-        videoComponent.clearVideoFrameMetadataListener(scene);
-        videoComponent.clearCameraMotionListener(scene);
-      }
-    }
-    player = newPlayer;
-    if (player != null) {
-      Player.VideoComponent videoComponent = player.getVideoComponent();
-      if (videoComponent != null) {
-        videoComponent.setVideoFrameMetadataListener(scene);
-        videoComponent.setCameraMotionListener(scene);
-        videoComponent.setVideoSurface(surface);
-      }
-    }
-    Assertions.checkNotNull(playerControl).setPlayer(player);
-  }
-
-  /**
-   * Sets the default stereo mode. If the played video doesn't contain a stereo mode the default one
-   * is used.
-   *
-   * @param stereoMode A {@link C.StereoMode} value.
-   */
-  protected void setDefaultStereoMode(@C.StereoMode int stereoMode) {
-    Assertions.checkNotNull(scene).setDefaultStereoMode(stereoMode);
-  }
-
   @CallSuper
   @Override
   protected void onActivityResult(int requestCode, int resultCode, Intent unused) {
@@ -188,34 +116,72 @@ protected void onActivityResult(int requestCode, int resultCode, Intent unused)
     }
   }
 
+  @CallSuper
   @Override
   protected void onResume() {
     super.onResume();
-    Util.castNonNull(controllerManager).start();
+    player = createPlayer();
+    Player.VideoComponent videoComponent = player.getVideoComponent();
+    if (videoComponent != null) {
+      videoComponent.setVideoFrameMetadataListener(Assertions.checkNotNull(sceneRenderer));
+      videoComponent.setCameraMotionListener(sceneRenderer);
+      videoComponent.setVideoSurface(surface);
+    }
+    Assertions.checkNotNull(playerControlView).setPlayer(player);
+    Assertions.checkNotNull(controllerManager).start();
   }
 
+  @CallSuper
   @Override
   protected void onPause() {
-    Util.castNonNull(controllerManager).stop();
+    Assertions.checkNotNull(controllerManager).stop();
+    Assertions.checkNotNull(playerControlView).setPlayer(null);
+    Assertions.checkNotNull(player).release();
+    player = null;
     super.onPause();
   }
 
+  @CallSuper
   @Override
   protected void onDestroy() {
-    setPlayer(null);
     releaseSurface(surfaceTexture, surface);
     super.onDestroy();
   }
 
+  /**
+   * Called by {@link #onCreate(Bundle)} to get the render target scale value that will be passed to
+   * {@link GvrView#setRenderTargetScale(float)}. Since videos typically have fewer pixels per
+   * degree than the phone displays, the target can normally be lower than 1 to reduce the amount of
+   * work required to render the scene. The default value is 0.5.
+   *
+   * @return The render target scale value that will be passed to {@link
+   *     GvrView#setRenderTargetScale(float)}.
+   */
+  protected float getRenderTargetScale() {
+    return 0.5f;
+  }
+
+  /** Called by {@link #onResume()} to create a player instance for this activity to use. */
+  protected abstract Player createPlayer();
+
+  /**
+   * Sets the stereo mode that will be used for video content that does not specify its own mode.
+   *
+   * @param stereoMode The default {@link C.StereoMode}.
+   */
+  protected void setDefaultStereoMode(@C.StereoMode int stereoMode) {
+    Assertions.checkNotNull(sceneRenderer).setDefaultStereoMode(stereoMode);
+  }
+
   /** Tries to exit gracefully from VR using a VR transition dialog. */
   @SuppressWarnings("nullness:argument.type.incompatible")
   protected void exit() {
-    // This needs to use GVR's exit transition to avoid disorienting the user.
-    DaydreamApi api = DaydreamApi.create(this);
-    if (api != null) {
-      api.exitFromVr(this, EXIT_FROM_VR_REQUEST_CODE, null);
-      // Eventually, the Activity's onActivityResult will be called.
-      api.close();
+    DaydreamApi daydreamApi = DaydreamApi.create(this);
+    if (daydreamApi != null) {
+      // Use Daydream's exit transition to avoid disorienting the user. This will cause
+      // onActivityResult to be called.
+      daydreamApi.exitFromVr(/* activity= */ this, EXIT_FROM_VR_REQUEST_CODE, /* data= */ null);
+      daydreamApi.close();
     } else {
       finish();
     }
@@ -224,16 +190,16 @@ protected void exit() {
   /** Toggles PlayerControl visibility. */
   @UiThread
   protected void togglePlayerControlVisibility() {
-    if (Assertions.checkNotNull(playerControl).isVisible()) {
-      playerControl.hide();
+    if (Assertions.checkNotNull(playerControlView).isVisible()) {
+      playerControlView.hide();
     } else {
-      playerControl.show();
+      playerControlView.show();
     }
   }
 
-  // Called on GL thread.
   private void onSurfaceTextureAvailable(SurfaceTexture surfaceTexture) {
-    mainHandler.post(
+    // Called on the GL thread. Post to the main thread.
+    runOnUiThread(
         () -> {
           SurfaceTexture oldSurfaceTexture = this.surfaceTexture;
           Surface oldSurface = this.surface;
@@ -260,18 +226,20 @@ private static void releaseSurface(
   }
 
   private class Renderer implements GvrView.StereoRenderer {
-    private static final float Z_NEAR = .1f;
+    private static final float Z_NEAR = 0.1f;
     private static final float Z_FAR = 100;
 
-    private final float[] viewProjectionMatrix = new float[16];
-    private final SceneRenderer scene;
-    private final GlViewGroup glView;
+    private final SceneRenderer sceneRenderer;
     private final PointerRenderer pointerRenderer;
+    private final GlViewGroup glViewGroup;
+    private final float[] viewProjectionMatrix;
 
-    public Renderer(SceneRenderer scene, GlViewGroup glView, PointerRenderer pointerRenderer) {
-      this.scene = scene;
-      this.glView = glView;
+    public Renderer(
+        SceneRenderer sceneRenderer, PointerRenderer pointerRenderer, GlViewGroup glViewGroup) {
+      this.sceneRenderer = sceneRenderer;
       this.pointerRenderer = pointerRenderer;
+      this.glViewGroup = glViewGroup;
+      viewProjectionMatrix = new float[16];
     }
 
     @Override
@@ -281,9 +249,9 @@ public void onNewFrame(HeadTransform headTransform) {}
     public void onDrawEye(Eye eye) {
       Matrix.multiplyMM(
           viewProjectionMatrix, 0, eye.getPerspective(Z_NEAR, Z_FAR), 0, eye.getEyeView(), 0);
-      scene.drawFrame(viewProjectionMatrix, eye.getType() == Eye.Type.RIGHT);
-      if (glView.isVisible()) {
-        glView.getRenderer().draw(viewProjectionMatrix);
+      sceneRenderer.drawFrame(viewProjectionMatrix, eye.getType() == Eye.Type.RIGHT);
+      if (glViewGroup.isVisible()) {
+        glViewGroup.getRenderer().draw(viewProjectionMatrix);
         pointerRenderer.draw(viewProjectionMatrix);
       }
     }
@@ -293,8 +261,8 @@ public void onFinishFrame(Viewport viewport) {}
 
     @Override
     public void onSurfaceCreated(EGLConfig config) {
-      onSurfaceTextureAvailable(scene.init());
-      glView.getRenderer().init();
+      onSurfaceTextureAvailable(sceneRenderer.init());
+      glViewGroup.getRenderer().init();
       pointerRenderer.init();
     }
 
@@ -303,9 +271,9 @@ public void onSurfaceChanged(int width, int height) {}
 
     @Override
     public void onRendererShutdown() {
-      glView.getRenderer().shutdown();
+      glViewGroup.getRenderer().shutdown();
       pointerRenderer.shutdown();
-      scene.shutdown();
+      sceneRenderer.shutdown();
     }
   }
 
@@ -313,16 +281,16 @@ public void onRendererShutdown() {
 
     private final Controller controller;
     private final PointerRenderer pointerRenderer;
-    private final GlViewGroup glView;
+    private final GlViewGroup glViewGroup;
     private final float[] controllerOrientationMatrix;
     private boolean clickButtonDown;
     private boolean appButtonDown;
 
     public ControllerEventListener(
-        Controller controller, PointerRenderer pointerRenderer, GlViewGroup glView) {
+        Controller controller, PointerRenderer pointerRenderer, GlViewGroup glViewGroup) {
       this.controller = controller;
       this.pointerRenderer = pointerRenderer;
-      this.glView = glView;
+      this.glViewGroup = glViewGroup;
       controllerOrientationMatrix = new float[16];
     }
 
@@ -330,7 +298,8 @@ public ControllerEventListener(
     @BinderThread
     public void onUpdate() {
       controller.update();
-      controller.orientation.toRotationMatrix(controllerOrientationMatrix);
+      Orientation orientation = controller.orientation;
+      orientation.toRotationMatrix(controllerOrientationMatrix);
       pointerRenderer.setControllerOrientation(controllerOrientationMatrix);
 
       if (clickButtonDown || controller.clickButtonState) {
@@ -341,18 +310,33 @@ public void onUpdate() {
         } else {
           action = MotionEvent.ACTION_MOVE;
         }
-        glView.post(
-            () -> {
-              float[] angles = controller.orientation.toYawPitchRollRadians(new float[3]);
-              boolean clickedOnView = glView.simulateClick(action, angles[0], angles[1]);
-              if (action == MotionEvent.ACTION_DOWN && !clickedOnView) {
-                togglePlayerControlVisibility();
-              }
-            });
+        float[] yawPitchRoll = orientation.toYawPitchRollRadians(new float[3]);
+        runOnUiThread(() -> dispatchClick(action, yawPitchRoll[0], yawPitchRoll[1]));
       } else if (!appButtonDown && controller.appButtonState) {
-        glView.post(GvrPlayerActivity.this::togglePlayerControlVisibility);
+        runOnUiThread(GvrPlayerActivity.this::togglePlayerControlVisibility);
       }
       appButtonDown = controller.appButtonState;
     }
+
+    private void dispatchClick(int action, float yaw, float pitch) {
+      boolean clickedOnView = glViewGroup.simulateClick(action, yaw, pitch);
+      if (action == MotionEvent.ACTION_DOWN && !clickedOnView) {
+        togglePlayerControlVisibility();
+      }
+    }
+  }
+
+  private final class ControllerManagerEventListener implements ControllerManager.EventListener {
+
+    @Override
+    public void onApiStatusChanged(int status) {
+      // Do nothing.
+    }
+
+    @Override
+    public void onRecentered() {
+      // TODO: If in cardboard mode call gvrView.recenterHeadTracker().
+      runOnUiThread(() -> Assertions.checkNotNull(playerControlView).show());
+    }
   }
 }
diff --git a/extensions/gvr/src/main/res/values-v21/styles.xml b/extensions/gvr/src/main/res/layout/exo_vr_ui.xml
similarity index 74%
rename from extensions/gvr/src/main/res/values-v21/styles.xml
rename to extensions/gvr/src/main/res/layout/exo_vr_ui.xml
index 276db1b42d..6863da9578 100644
--- a/extensions/gvr/src/main/res/values-v21/styles.xml
+++ b/extensions/gvr/src/main/res/layout/exo_vr_ui.xml
@@ -13,6 +13,8 @@
      See the License for the specific language governing permissions and
      limitations under the License.
 -->
-<resources>
-  <style name="VrTheme" parent="android:Theme.Material"/>
-</resources>
+<com.google.android.exoplayer2.ui.PlayerControlView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/controller"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"/>
diff --git a/extensions/gvr/src/main/res/layout/vr_ui.xml b/extensions/gvr/src/main/res/layout/vr_ui.xml
deleted file mode 100644
index e84ee31fe6..0000000000
--- a/extensions/gvr/src/main/res/layout/vr_ui.xml
+++ /dev/null
@@ -1,28 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2018 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-<merge xmlns:android="http://schemas.android.com/apk/res/android"
-  xmlns:tools="http://schemas.android.com/tools"
-  android:id="@+id/video_ui_view"
-  android:layout_width="match_parent"
-  android:layout_height="wrap_content"
-  android:background="@android:color/black"
-  android:orientation="horizontal"
-  tools:ignore="Overdraw">
-  <com.google.android.exoplayer2.ui.PlayerControlView
-    android:id="@+id/controller"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"/>
-</merge>
diff --git a/extensions/gvr/src/main/res/values/styles.xml b/extensions/gvr/src/main/res/values/styles.xml
index ab5fde106a..2affbb2f05 100644
--- a/extensions/gvr/src/main/res/values/styles.xml
+++ b/extensions/gvr/src/main/res/values/styles.xml
@@ -14,5 +14,5 @@
      limitations under the License.
 -->
 <resources>
-  <style name="VrTheme" parent="android:Theme.Holo"/>
+  <style name="ExoVrTheme" parent="android:Theme.DeviceDefault"/>
 </resources>
diff --git a/extensions/opus/src/androidTest/AndroidManifest.xml b/extensions/opus/src/androidTest/AndroidManifest.xml
index 031960636d..7f75cbccea 100644
--- a/extensions/opus/src/androidTest/AndroidManifest.xml
+++ b/extensions/opus/src/androidTest/AndroidManifest.xml
@@ -29,6 +29,6 @@
 
   <instrumentation
       android:targetPackage="com.google.android.exoplayer2.ext.opus.test"
-    android:name="androidx.test.runner.AndroidJUnitRunner"/>
+      android:name="androidx.test.runner.AndroidJUnitRunner"/>
 
 </manifest>
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/AudioBecomingNoisyManager.java b/library/core/src/main/java/com/google/android/exoplayer2/AudioBecomingNoisyManager.java
new file mode 100644
index 0000000000..667ef9c290
--- /dev/null
+++ b/library/core/src/main/java/com/google/android/exoplayer2/AudioBecomingNoisyManager.java
@@ -0,0 +1,71 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.google.android.exoplayer2;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.media.AudioManager;
+
+/* package */ final class AudioBecomingNoisyManager {
+
+  private final Context context;
+  private final AudioBecomingNoisyReceiver receiver;
+  private boolean receiverRegistered;
+
+  public interface EventListener {
+    void onAudioBecomingNoisy();
+  }
+
+  public AudioBecomingNoisyManager(Context context, EventListener listener) {
+    this.context = context.getApplicationContext();
+    this.receiver = new AudioBecomingNoisyReceiver(listener);
+  }
+
+  /**
+   * Enables the {@link AudioBecomingNoisyManager} which calls {@link
+   * EventListener#onAudioBecomingNoisy()} upon receiving an intent of {@link
+   * AudioManager#ACTION_AUDIO_BECOMING_NOISY}.
+   *
+   * @param enabled True if the listener should be notified when audio is becoming noisy.
+   */
+  public void setEnabled(boolean enabled) {
+    if (enabled && !receiverRegistered) {
+      context.registerReceiver(
+          receiver, new IntentFilter(AudioManager.ACTION_AUDIO_BECOMING_NOISY));
+      receiverRegistered = true;
+    } else if (!enabled && receiverRegistered) {
+      context.unregisterReceiver(receiver);
+      receiverRegistered = false;
+    }
+  }
+
+  private static final class AudioBecomingNoisyReceiver extends BroadcastReceiver {
+    private final EventListener listener;
+
+    public AudioBecomingNoisyReceiver(EventListener listener) {
+      this.listener = listener;
+    }
+
+    @Override
+    public void onReceive(Context context, Intent intent) {
+      if (AudioManager.ACTION_AUDIO_BECOMING_NOISY.equals(intent.getAction())) {
+        listener.onAudioBecomingNoisy();
+      }
+    }
+  }
+}
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/Player.java b/library/core/src/main/java/com/google/android/exoplayer2/Player.java
index c0039b67c1..fba4676eaf 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/Player.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/Player.java
@@ -533,9 +533,8 @@ public void onTimelineChanged(Timeline timeline, @Nullable Object manifest) {
   int STATE_ENDED = 4;
 
   /**
-   * Reason why playback is suppressed even if {@link #getPlaybackState()} is {@link #STATE_READY}
-   * and {@link #getPlayWhenReady()} is {@code true}. One of {@link
-   * #PLAYBACK_SUPPRESSION_REASON_NONE} or {@link
+   * Reason why playback is suppressed even though {@link #getPlayWhenReady()} is {@code true}. One
+   * of {@link #PLAYBACK_SUPPRESSION_REASON_NONE} or {@link
    * #PLAYBACK_SUPPRESSION_REASON_TRANSIENT_AUDIO_FOCUS_LOSS}.
    */
   @Documented
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java b/library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
index 9e59448c2d..1f7802ac72 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
@@ -322,6 +322,7 @@ public SimpleExoPlayer build() {
   private final BandwidthMeter bandwidthMeter;
   private final AnalyticsCollector analyticsCollector;
 
+  private final AudioBecomingNoisyManager audioBecomingNoisyManager;
   private final AudioFocusManager audioFocusManager;
   private final WakeLockManager wakeLockManager;
 
@@ -453,6 +454,7 @@ protected SimpleExoPlayer(
     if (drmSessionManager instanceof DefaultDrmSessionManager) {
       ((DefaultDrmSessionManager) drmSessionManager).addListener(eventHandler, analyticsCollector);
     }
+    audioBecomingNoisyManager = new AudioBecomingNoisyManager(context, componentListener);
     audioFocusManager = new AudioFocusManager(context, componentListener);
     wakeLockManager = new WakeLockManager(context);
   }
@@ -765,6 +767,18 @@ public void removeAnalyticsListener(AnalyticsListener listener) {
     analyticsCollector.removeListener(listener);
   }
 
+  /**
+   * Sets whether the player should pause automatically when audio is rerouted from a headset to
+   * device speakers. See the <a
+   * href="https://developer.android.com/guide/topics/media-apps/volume-and-earphones#becoming-noisy">audio
+   * becoming noisy</a> documentation for more information.
+   *
+   * @param handleAudioBecomingNoisy True if the player should handle audio becoming noisy.
+   */
+  public void setHandleAudioBecomingNoisy(boolean handleAudioBecomingNoisy) {
+    audioBecomingNoisyManager.setEnabled(handleAudioBecomingNoisy);
+  }
+
   /**
    * Sets a {@link PriorityTaskManager}, or null to clear a previously set priority task manager.
    *
@@ -1476,6 +1490,7 @@ private void verifyApplicationThread() {
           SurfaceHolder.Callback,
           TextureView.SurfaceTextureListener,
           AudioFocusManager.PlayerControl,
+          AudioBecomingNoisyManager.EventListener,
           Player.EventListener {
 
     // VideoRendererEventListener implementation
@@ -1687,6 +1702,13 @@ public void executePlayerCommand(@AudioFocusManager.PlayerCommand int playerComm
       updatePlayWhenReady(getPlayWhenReady(), playerCommand);
     }
 
+    // AudioBecomingNoisyManager.EventListener implementation.
+
+    @Override
+    public void onAudioBecomingNoisy() {
+      setPlayWhenReady(false);
+    }
+
     // Player.EventListener implementation.
 
     @Override
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecInfo.java b/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecInfo.java
index 1726648793..25b1473263 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecInfo.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/mediacodec/MediaCodecInfo.java
@@ -433,18 +433,13 @@ public boolean isVideoSizeAndRateSupportedV21(int width, int height, double fram
   @TargetApi(21)
   public Point alignVideoSizeV21(int width, int height) {
     if (capabilities == null) {
-      logNoSupport("align.caps");
       return null;
     }
     VideoCapabilities videoCapabilities = capabilities.getVideoCapabilities();
     if (videoCapabilities == null) {
-      logNoSupport("align.vCaps");
       return null;
     }
-    int widthAlignment = videoCapabilities.getWidthAlignment();
-    int heightAlignment = videoCapabilities.getHeightAlignment();
-    return new Point(Util.ceilDivide(width, widthAlignment) * widthAlignment,
-        Util.ceilDivide(height, heightAlignment) * heightAlignment);
+    return alignVideoSizeV21(videoCapabilities, width, height);
   }
 
   /**
@@ -575,6 +570,11 @@ private static boolean isSecureV21(CodecCapabilities capabilities) {
   @TargetApi(21)
   private static boolean areSizeAndRateSupportedV21(VideoCapabilities capabilities, int width,
       int height, double frameRate) {
+    // Don't ever fail due to alignment. See: https://github.com/google/ExoPlayer/issues/6551.
+    Point alignedSize = alignVideoSizeV21(capabilities, width, height);
+    width = alignedSize.x;
+    height = alignedSize.y;
+
     if (frameRate == Format.NO_VALUE || frameRate <= 0) {
       return capabilities.isSizeSupported(width, height);
     } else {
@@ -586,6 +586,15 @@ private static boolean areSizeAndRateSupportedV21(VideoCapabilities capabilities
     }
   }
 
+  @TargetApi(21)
+  private static Point alignVideoSizeV21(VideoCapabilities capabilities, int width, int height) {
+    int widthAlignment = capabilities.getWidthAlignment();
+    int heightAlignment = capabilities.getHeightAlignment();
+    return new Point(
+        Util.ceilDivide(width, widthAlignment) * widthAlignment,
+        Util.ceilDivide(height, heightAlignment) * heightAlignment);
+  }
+
   @TargetApi(23)
   private static int getMaxSupportedInstancesV23(CodecCapabilities capabilities) {
     return capabilities.getMaxSupportedInstances();
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/source/chunk/DataChunk.java b/library/core/src/main/java/com/google/android/exoplayer2/source/chunk/DataChunk.java
index 7ea2521eb2..f3bea8aeb5 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/source/chunk/DataChunk.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/source/chunk/DataChunk.java
@@ -15,6 +15,7 @@
  */
 package com.google.android.exoplayer2.source.chunk;
 
+import androidx.annotation.Nullable;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.upstream.DataSource;
@@ -44,8 +45,14 @@
    * @param trackSelectionData See {@link #trackSelectionData}.
    * @param data An optional recycled array that can be used as a holder for the data.
    */
-  public DataChunk(DataSource dataSource, DataSpec dataSpec, int type, Format trackFormat,
-      int trackSelectionReason, Object trackSelectionData, byte[] data) {
+  public DataChunk(
+      DataSource dataSource,
+      DataSpec dataSpec,
+      int type,
+      Format trackFormat,
+      int trackSelectionReason,
+      @Nullable Object trackSelectionData,
+      byte[] data) {
     super(dataSource, dataSpec, type, trackFormat, trackSelectionReason, trackSelectionData,
         C.TIME_UNSET, C.TIME_UNSET);
     this.data = data;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/util/EventLogger.java b/library/core/src/main/java/com/google/android/exoplayer2/util/EventLogger.java
index 88f6b97e5c..a4e8e311ca 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/util/EventLogger.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/util/EventLogger.java
@@ -525,8 +525,9 @@ private String getEventTimeString(EventTime eventTime) {
         windowPeriodString += ", ad=" + eventTime.mediaPeriodId.adIndexInAdGroup;
       }
     }
-    return getTimeString(eventTime.realtimeMs - startTimeMs)
-        + ", "
+    return "eventTime="
+        + getTimeString(eventTime.realtimeMs - startTimeMs)
+        + ", mediaPos="
         + getTimeString(eventTime.currentPlaybackPositionMs)
         + ", "
         + windowPeriodString;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java b/library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
index c8f13cb6de..b19ffac773 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/video/MediaCodecVideoRenderer.java
@@ -1562,7 +1562,8 @@ protected boolean codecNeedsSetOutputSurfaceWorkaround(String name) {
           // https://github.com/google/ExoPlayer/issues/4419,
           // https://github.com/google/ExoPlayer/issues/4460,
           // https://github.com/google/ExoPlayer/issues/4468,
-          // https://github.com/google/ExoPlayer/issues/5312.
+          // https://github.com/google/ExoPlayer/issues/5312,
+          // https://github.com/google/ExoPlayer/issues/6503.
           switch (Util.DEVICE) {
             case "1601":
             case "1713":
@@ -1629,6 +1630,7 @@ protected boolean codecNeedsSetOutputSurfaceWorkaround(String name) {
             case "JGZ":
             case "K50a40":
             case "kate":
+            case "l5460":
             case "le_x6":
             case "LS-5017":
             case "M5c":
@@ -1698,6 +1700,7 @@ protected boolean codecNeedsSetOutputSurfaceWorkaround(String name) {
           switch (Util.MODEL) {
             case "AFTA":
             case "AFTN":
+            case "JSN-L21":
               deviceNeedsSetOutputSurfaceWorkaround = true;
               break;
             default:
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
index 370d79edc7..f907499f8b 100644
--- a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
@@ -44,10 +44,9 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 
-/**
- * Source of Hls (possibly adaptive) chunks.
- */
+/** Source of Hls (possibly adaptive) chunks. */
 /* package */ class HlsChunkSource {
 
   /**
@@ -95,13 +94,13 @@ public void clear() {
   private final Format[] playlistFormats;
   private final HlsPlaylistTracker playlistTracker;
   private final TrackGroup trackGroup;
-  private final List<Format> muxedCaptionFormats;
+  @Nullable private final List<Format> muxedCaptionFormats;
   private final FullSegmentEncryptionKeyCache keyCache;
 
   private boolean isTimestampMaster;
   private byte[] scratchSpace;
-  private IOException fatalError;
-  private Uri expectedPlaylistUrl;
+  @Nullable private IOException fatalError;
+  @Nullable private Uri expectedPlaylistUrl;
   private boolean independentSegments;
 
   // Note: The track group in the selection is typically *not* equal to trackGroup. This is due to
@@ -144,6 +143,7 @@ public HlsChunkSource(
     this.timestampAdjusterProvider = timestampAdjusterProvider;
     this.muxedCaptionFormats = muxedCaptionFormats;
     keyCache = new FullSegmentEncryptionKeyCache();
+    scratchSpace = Util.EMPTY_BYTE_ARRAY;
     liveEdgeInPeriodTimeUs = C.TIME_UNSET;
     mediaDataSource = dataSourceFactory.createDataSource(C.DATA_TYPE_MEDIA);
     if (mediaTransferListener != null) {
@@ -271,6 +271,8 @@ public void getNextChunk(
     }
     HlsMediaPlaylist mediaPlaylist =
         playlistTracker.getPlaylistSnapshot(selectedPlaylistUrl, /* isForPlayback= */ true);
+    // playlistTracker snapshot is valid (checked by if() above), so mediaPlaylist must be non-null.
+    Assertions.checkNotNull(mediaPlaylist);
     independentSegments = mediaPlaylist.hasIndependentSegments;
 
     updateLiveEdgeTimeUs(mediaPlaylist);
@@ -286,8 +288,11 @@ public void getNextChunk(
         // behind the live window.
         selectedTrackIndex = oldTrackIndex;
         selectedPlaylistUrl = playlistUrls[selectedTrackIndex];
-        mediaPlaylist =
-            playlistTracker.getPlaylistSnapshot(selectedPlaylistUrl, /* isForPlayback= */ true);
+      mediaPlaylist =
+          playlistTracker.getPlaylistSnapshot(selectedPlaylistUrl, /* isForPlayback= */ true);
+      // playlistTracker snapshot is valid (checked by if() above), so mediaPlaylist must be
+      // non-null.
+      Assertions.checkNotNull(mediaPlaylist);
         startOfPlaylistInPeriodUs =
             mediaPlaylist.startTimeUs - playlistTracker.getInitialStartTimeUs();
         chunkMediaSequence = previous.getNextChunkIndex();
@@ -362,7 +367,8 @@ public void onChunkLoadCompleted(Chunk chunk) {
     if (chunk instanceof EncryptionKeyChunk) {
       EncryptionKeyChunk encryptionKeyChunk = (EncryptionKeyChunk) chunk;
       scratchSpace = encryptionKeyChunk.getDataHolder();
-      keyCache.put(encryptionKeyChunk.dataSpec.uri, encryptionKeyChunk.getResult());
+      keyCache.put(
+          encryptionKeyChunk.dataSpec.uri, Assertions.checkNotNull(encryptionKeyChunk.getResult()));
     }
   }
 
@@ -428,6 +434,8 @@ public boolean onPlaylistError(Uri playlistUrl, long blacklistDurationMs) {
       }
       HlsMediaPlaylist playlist =
           playlistTracker.getPlaylistSnapshot(playlistUrl, /* isForPlayback= */ false);
+      // Playlist snapshot is valid (checked by if() above) so playlist must be non-null.
+      Assertions.checkNotNull(playlist);
       long startOfPlaylistInPeriodUs =
           playlist.startTimeUs - playlistTracker.getInitialStartTimeUs();
       boolean switchingTrack = trackIndex != oldTrackIndex;
@@ -505,11 +513,13 @@ private Chunk maybeCreateEncryptionChunkFor(@Nullable Uri keyUri, int selectedTr
     if (keyUri == null) {
       return null;
     }
-    if (keyCache.containsKey(keyUri)) {
-      // The key is present in the key cache. We re-insert it to prevent it from being evicted by
+
+    byte[] encryptionKey = keyCache.remove(keyUri);
+    if (encryptionKey != null) {
+      // The key was present in the key cache. We re-insert it to prevent it from being evicted by
       // the following key addition. Note that removal of the key is necessary to affect the
       // eviction order.
-      keyCache.put(keyUri, keyCache.remove(keyUri));
+      keyCache.put(keyUri, encryptionKey);
       return null;
     }
     DataSpec dataSpec = new DataSpec(keyUri, 0, C.LENGTH_UNSET, null, DataSpec.FLAG_ALLOW_GZIP);
@@ -577,6 +587,7 @@ public int getSelectionReason() {
     }
 
     @Override
+    @Nullable
     public Object getSelectionData() {
       return null;
     }
@@ -585,14 +596,14 @@ public Object getSelectionData() {
 
   private static final class EncryptionKeyChunk extends DataChunk {
 
-    private byte[] result;
+    private byte @MonotonicNonNull [] result;
 
     public EncryptionKeyChunk(
         DataSource dataSource,
         DataSpec dataSpec,
         Format trackFormat,
         int trackSelectionReason,
-        Object trackSelectionData,
+        @Nullable Object trackSelectionData,
         byte[] scratchSpace) {
       super(dataSource, dataSpec, C.DATA_TYPE_DRM, trackFormat, trackSelectionReason,
           trackSelectionData, scratchSpace);
@@ -603,6 +614,8 @@ protected void consume(byte[] data, int limit) {
       result = Arrays.copyOf(data, limit);
     }
 
+    /** Return the result of this chunk, or null if loading is not complete. */
+    @Nullable
     public byte[] getResult() {
       return result;
     }
@@ -660,29 +673,63 @@ public long getChunkEndTimeUs() {
    * addition, once the cache's size exceeds {@link #KEY_CACHE_SIZE}, the oldest item (according to
    * insertion order) is removed.
    */
-  private static final class FullSegmentEncryptionKeyCache extends LinkedHashMap<Uri, byte[]> {
+  private static final class FullSegmentEncryptionKeyCache {
+
+    private final LinkedHashMap<Uri, byte[]> backingMap;
 
     public FullSegmentEncryptionKeyCache() {
-      super(
-          /* initialCapacity= */ KEY_CACHE_SIZE * 2, /* loadFactor= */ 1, /* accessOrder= */ false);
+      backingMap =
+          new LinkedHashMap<Uri, byte[]>(
+              /* initialCapacity= */ KEY_CACHE_SIZE + 1,
+              /* loadFactor= */ 1,
+              /* accessOrder= */ false) {
+            @Override
+            protected boolean removeEldestEntry(Map.Entry<Uri, byte[]> eldest) {
+              return size() > KEY_CACHE_SIZE;
+            }
+          };
     }
 
-    @Override
-    public byte[] get(Object keyUri) {
-      if (keyUri == null) {
+    /**
+     * Returns the {@code encryptionKey} cached against this {@code uri}, or null if {@code uri} is
+     * null or not present in the cache.
+     */
+    @Nullable
+    public byte[] get(@Nullable Uri uri) {
+      if (uri == null) {
         return null;
       }
-      return super.get(keyUri);
+      return backingMap.get(uri);
     }
 
-    @Override
-    public byte[] put(Uri keyUri, byte[] key) {
-      return super.put(keyUri, Assertions.checkNotNull(key));
+    /**
+     * Inserts an entry into the cache.
+     *
+     * @throws NullPointerException if {@code uri} or {@code encryptionKey} are null.
+     */
+    @Nullable
+    public byte[] put(Uri uri, byte[] encryptionKey) {
+      return backingMap.put(Assertions.checkNotNull(uri), Assertions.checkNotNull(encryptionKey));
     }
 
-    @Override
-    protected boolean removeEldestEntry(Map.Entry<Uri, byte[]> entry) {
-      return size() > KEY_CACHE_SIZE;
+    /**
+     * Returns true if {@code uri} is present in the cache.
+     *
+     * @throws NullPointerException if {@code uri} is null.
+     */
+    public boolean containsUri(Uri uri) {
+      return backingMap.containsKey(Assertions.checkNotNull(uri));
+    }
+
+    /**
+     * Removes {@code uri} from the cache. If {@code uri} was present in the cahce, this returns the
+     * corresponding {@code encryptionKey}, otherwise null.
+     *
+     * @throws NullPointerException if {@code uri} is null.
+     */
+    @Nullable
+    public byte[] remove(Uri uri) {
+      return backingMap.remove(Assertions.checkNotNull(uri));
     }
   }
 }
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaPeriod.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaPeriod.java
index 8b57cb7aa6..08a4f97a9f 100644
--- a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaPeriod.java
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaPeriod.java
@@ -735,7 +735,7 @@ private HlsSampleStreamWrapper buildSampleStreamWrapper(
       Uri[] playlistUrls,
       Format[] playlistFormats,
       Format muxedAudioFormat,
-      List<Format> muxedCaptionFormats,
+      @Nullable List<Format> muxedCaptionFormats,
       Map<String, DrmInitData> overridingDrmInitData,
       long positionUs) {
     HlsChunkSource defaultChunkSource =
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsSampleStreamWrapper.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsSampleStreamWrapper.java
index 6aaf204c2c..f833cd6785 100644
--- a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsSampleStreamWrapper.java
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsSampleStreamWrapper.java
@@ -66,6 +66,7 @@
 import java.util.Map;
 import java.util.Set;
 import org.checkerframework.checker.nullness.compatqual.NullableType;
+import org.checkerframework.checker.nullness.qual.EnsuresNonNull;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
 import org.checkerframework.checker.nullness.qual.RequiresNonNull;
 
@@ -233,7 +234,6 @@ public void continuePreparing() {
    */
   public void prepareWithMasterPlaylistInfo(
       TrackGroup[] trackGroups, int primaryTrackGroupIndex, int... optionalTrackGroupsIndices) {
-    prepared = true;
     this.trackGroups = createTrackGroupArrayWithDrmInfo(trackGroups);
     optionalTrackGroups = new HashSet<>();
     for (int optionalTrackGroupIndex : optionalTrackGroupsIndices) {
@@ -241,6 +241,7 @@ public void prepareWithMasterPlaylistInfo(
     }
     this.primaryTrackGroupIndex = primaryTrackGroupIndex;
     handler.post(callback::onPrepared);
+    setIsPrepared();
   }
 
   public void maybeThrowPrepareError() throws IOException {
@@ -251,6 +252,7 @@ public void maybeThrowPrepareError() throws IOException {
   }
 
   public TrackGroupArray getTrackGroups() {
+    assertIsPrepared();
     return trackGroups;
   }
 
@@ -259,6 +261,8 @@ public int getPrimaryTrackGroupIndex() {
   }
 
   public int bindSampleQueueToSampleStream(int trackGroupIndex) {
+    assertIsPrepared();
+
     int sampleQueueIndex = trackGroupToSampleQueueIndex[trackGroupIndex];
     if (sampleQueueIndex == C.INDEX_UNSET) {
       return optionalTrackGroups.contains(trackGroups.get(trackGroupIndex))
@@ -274,6 +278,7 @@ public int bindSampleQueueToSampleStream(int trackGroupIndex) {
   }
 
   public void unbindSampleQueue(int trackGroupIndex) {
+    assertIsPrepared();
     int sampleQueueIndex = trackGroupToSampleQueueIndex[trackGroupIndex];
     Assertions.checkState(sampleQueuesEnabledStates[sampleQueueIndex]);
     sampleQueuesEnabledStates[sampleQueueIndex] = false;
@@ -303,7 +308,7 @@ public boolean selectTracks(
       boolean[] streamResetFlags,
       long positionUs,
       boolean forceReset) {
-    Assertions.checkState(prepared);
+    assertIsPrepared();
     int oldEnabledTrackGroupCount = enabledTrackGroupCount;
     // Deselect old tracks.
     for (int i = 0; i < selections.length; i++) {
@@ -1001,7 +1006,7 @@ private void maybeFinishPrepare() {
     } else {
       // Tracks are created using media segment information.
       buildTracksFromSampleStreams();
-      prepared = true;
+      setIsPrepared();
       callback.onPrepared();
     }
   }
@@ -1173,6 +1178,18 @@ private boolean seekInsideBufferUs(long positionUs) {
     return true;
   }
 
+  @RequiresNonNull({"trackGroups", "optionalTrackGroups"})
+  private void setIsPrepared() {
+    prepared = true;
+  }
+
+  @EnsuresNonNull({"trackGroups", "optionalTrackGroups"})
+  private void assertIsPrepared() {
+    Assertions.checkState(prepared);
+    Assertions.checkNotNull(trackGroups);
+    Assertions.checkNotNull(optionalTrackGroups);
+  }
+
   /**
    * Scores a track type. Where multiple tracks are muxed into a container, the track with the
    * highest score is the primary track.
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsMasterPlaylist.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsMasterPlaylist.java
index 1660324a34..f96c7dfa92 100644
--- a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsMasterPlaylist.java
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsMasterPlaylist.java
@@ -180,7 +180,7 @@ public Rendition(@Nullable Uri url, Format format, String groupId, String name)
    * explicitly declares no captions are available, or null if the playlist does not declare any
    * captions information.
    */
-  public final List<Format> muxedCaptionFormats;
+  @Nullable public final List<Format> muxedCaptionFormats;
   /** Contains variable definitions, as defined by the #EXT-X-DEFINE tag. */
   public final Map<String, String> variableDefinitions;
   /** DRM initialization data derived from #EXT-X-SESSION-KEY tags. */
@@ -209,7 +209,7 @@ public HlsMasterPlaylist(
       List<Rendition> subtitles,
       List<Rendition> closedCaptions,
       @Nullable Format muxedAudioFormat,
-      List<Format> muxedCaptionFormats,
+      @Nullable List<Format> muxedCaptionFormats,
       boolean hasIndependentSegments,
       Map<String, String> variableDefinitions,
       List<DrmInitData> sessionKeyDrmInitData) {
@@ -258,7 +258,7 @@ public static HlsMasterPlaylist createSingleVariantMasterPlaylist(String variant
     List<Variant> variant =
         Collections.singletonList(Variant.createMediaPlaylistVariantUrl(Uri.parse(variantUrl)));
     return new HlsMasterPlaylist(
-        /* baseUri= */ null,
+        /* baseUri= */ "",
         /* tags= */ Collections.emptyList(),
         variant,
         /* videos= */ Collections.emptyList(),
diff --git a/library/ui/src/main/java/com/google/android/exoplayer2/ui/spherical/CanvasRenderer.java b/library/ui/src/main/java/com/google/android/exoplayer2/ui/spherical/CanvasRenderer.java
index ed9be4ea7e..82a9f48d04 100644
--- a/library/ui/src/main/java/com/google/android/exoplayer2/ui/spherical/CanvasRenderer.java
+++ b/library/ui/src/main/java/com/google/android/exoplayer2/ui/spherical/CanvasRenderer.java
@@ -13,7 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package com.google.android.exoplayer2.ui.spherical;
 
 import static com.google.android.exoplayer2.util.GlUtil.checkGlError;
diff --git a/library/ui/src/main/java/com/google/android/exoplayer2/ui/spherical/GlViewGroup.java b/library/ui/src/main/java/com/google/android/exoplayer2/ui/spherical/GlViewGroup.java
index 37ac8e98d0..3be8c3d6d7 100644
--- a/library/ui/src/main/java/com/google/android/exoplayer2/ui/spherical/GlViewGroup.java
+++ b/library/ui/src/main/java/com/google/android/exoplayer2/ui/spherical/GlViewGroup.java
@@ -13,7 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package com.google.android.exoplayer2.ui.spherical;
 
 import android.content.Context;
diff --git a/library/ui/src/main/java/com/google/android/exoplayer2/ui/spherical/PointerRenderer.java b/library/ui/src/main/java/com/google/android/exoplayer2/ui/spherical/PointerRenderer.java
index fa7118a0fb..c8773a2838 100644
--- a/library/ui/src/main/java/com/google/android/exoplayer2/ui/spherical/PointerRenderer.java
+++ b/library/ui/src/main/java/com/google/android/exoplayer2/ui/spherical/PointerRenderer.java
@@ -13,7 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package com.google.android.exoplayer2.ui.spherical;
 
 import static com.google.android.exoplayer2.util.GlUtil.checkGlError;
@@ -26,7 +25,7 @@
 /** Renders a pointer. */
 public final class PointerRenderer {
   // The pointer quad is 2 * SIZE units.
-  private static final float SIZE = .01f;
+  private static final float SIZE = 0.01f;
   private static final float DISTANCE = 1;
 
   // Standard vertex shader.
diff --git a/library/ui/src/main/java/com/google/android/exoplayer2/ui/spherical/SphericalSurfaceView.java b/library/ui/src/main/java/com/google/android/exoplayer2/ui/spherical/SphericalSurfaceView.java
index 419f31436a..d2089759f6 100644
--- a/library/ui/src/main/java/com/google/android/exoplayer2/ui/spherical/SphericalSurfaceView.java
+++ b/library/ui/src/main/java/com/google/android/exoplayer2/ui/spherical/SphericalSurfaceView.java
@@ -55,7 +55,7 @@
 
   // Arbitrary vertical field of view.
   private static final int FIELD_OF_VIEW_DEGREES = 90;
-  private static final float Z_NEAR = .1f;
+  private static final float Z_NEAR = 0.1f;
   private static final float Z_FAR = 100;
 
   // TODO Calculate this depending on surface size and field of view.
@@ -84,7 +84,7 @@ public SphericalSurfaceView(Context context, @Nullable AttributeSet attributeSet
     // Configure sensors and touch.
     sensorManager =
         (SensorManager) Assertions.checkNotNull(context.getSystemService(Context.SENSOR_SERVICE));
-    Sensor orientationSensor = null;
+    @Nullable Sensor orientationSensor = null;
     if (Util.SDK_INT >= 18) {
       // TYPE_GAME_ROTATION_VECTOR is the easiest sensor since it handles all the complex math for
       // fusion. It's used instead of TYPE_ROTATION_VECTOR since the latter uses the magnetometer on
