diff --git a/library/src/androidTest/java/com/google/android/exoplayer/testutil/FakeExtractorInput.java b/library/src/androidTest/java/com/google/android/exoplayer/testutil/FakeExtractorInput.java
index 4ed060845c..8b2c43746d 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/testutil/FakeExtractorInput.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/testutil/FakeExtractorInput.java
@@ -28,7 +28,7 @@
 /**
  * A fake {@link ExtractorInput} capable of simulating various scenarios.
  * <p>
- * Read, skip and peek errors can be simulated using {@link Builder#setSimulateIOErrors)}. When
+ * Read, skip and peek errors can be simulated using {@link Builder#setSimulateIOErrors}. When
  * enabled each read and skip will throw a {@link SimulatedIOException} unless one has already been
  * thrown from the current position. Each peek will throw {@link SimulatedIOException} unless one
  * has already been thrown from the current peek position. When a {@link SimulatedIOException} is
@@ -43,7 +43,7 @@
  * bytes then it will be fully satisfied, since it has the same target position of 10.
  * <p>
  * Unknown data length can be simulated using {@link Builder#setSimulateUnknownLength}. When enabled
- * {@link getLength()} will return {@link C#LENGTH_UNBOUNDED} rather than the length of the data.
+ * {@link #getLength()} will return {@link C#LENGTH_UNBOUNDED} rather than the length of the data.
  */
 public final class FakeExtractorInput implements ExtractorInput {
 
