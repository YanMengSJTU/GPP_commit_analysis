diff --git a/demo/src/main/AndroidManifest.xml b/demo/src/main/AndroidManifest.xml
index 1f66822dc7..27abc24d21 100644
--- a/demo/src/main/AndroidManifest.xml
+++ b/demo/src/main/AndroidManifest.xml
@@ -1,5 +1,5 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2016 The Android Open Source Project
+<?xml version="1.0" encoding="utf-8"?><!--
+ Copyright (C) 2016 The Android Open Source Project
 
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
@@ -13,68 +13,92 @@
      See the License for the specific language governing permissions and
      limitations under the License.
 -->
-
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.google.android.exoplayer2.demo"
     android:versionCode="2501"
     android:versionName="2.5.1">
 
-  <uses-permission android:name="android.permission.INTERNET"/>
-  <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
-  <uses-feature android:name="android.software.leanback" android:required="false"/>
-  <uses-feature android:name="android.hardware.touchscreen" android:required="false"/>
-  <uses-sdk android:minSdkVersion="16" android:targetSdkVersion="25"/>
+  <uses-sdk
+      android:minSdkVersion="16"
+      android:targetSdkVersion="25" />
+
+  <uses-permission android:name="android.permission.INTERNET" />
+  <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
+
+  <uses-feature
+      android:name="android.software.leanback"
+      android:required="false" />
+  <uses-feature
+      android:name="android.hardware.touchscreen"
+      android:required="false" />
+
+  <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+  <uses-permission android:name="android.permission.READ_PHONE_STATE" />
 
   <application
-      android:label="@string/application_name"
-      android:icon="@mipmap/ic_launcher"
-      android:banner="@drawable/ic_banner"
-      android:largeHeap="true"
+      android:name=".DemoApplication"
       android:allowBackup="false"
-      android:name="com.google.android.exoplayer2.demo.DemoApplication">
+      android:banner="@drawable/ic_banner"
+      android:icon="@mipmap/ic_launcher"
+      android:label="@string/application_name"
+      android:largeHeap="true">
+    <activity android:name=".MainActivity">
+      <intent-filter>
+        <action android:name="android.intent.action.MAIN" />
 
-    <activity android:name="com.google.android.exoplayer2.demo.SampleChooserActivity"
+        <category android:name="android.intent.category.LEANBACK_LAUNCHER" />
+        <category android:name="android.intent.category.LAUNCHER" />
+      </intent-filter>
+    </activity>
+    <activity
+        android:name=".SampleChooserActivity"
         android:configChanges="keyboardHidden"
         android:label="@string/application_name">
+      <!--<intent-filter>-->
+      <!--<action android:name="android.intent.action.MAIN" />-->
+
+      <!--<category android:name="android.intent.category.LAUNCHER" />-->
+      <!--<category android:name="android.intent.category.LEANBACK_LAUNCHER" />-->
+      <!--</intent-filter>-->
       <intent-filter>
-        <action android:name="android.intent.action.MAIN"/>
-        <category android:name="android.intent.category.LAUNCHER"/>
-        <category android:name="android.intent.category.LEANBACK_LAUNCHER"/>
-      </intent-filter>
-      <intent-filter>
-        <action android:name="android.intent.action.VIEW"/>
-        <category android:name="android.intent.category.DEFAULT"/>
-        <category android:name="android.intent.category.BROWSABLE"/>
-        <data android:scheme="http"/>
-        <data android:scheme="https"/>
-        <data android:scheme="content"/>
-        <data android:scheme="asset"/>
-        <data android:scheme="file"/>
-        <data android:host="*"/>
-        <data android:pathPattern=".*\\.exolist\\.json"/>
+        <action android:name="android.intent.action.VIEW" />
+
+        <category android:name="android.intent.category.DEFAULT" />
+        <category android:name="android.intent.category.BROWSABLE" />
+
+        <data android:scheme="http" />
+        <data android:scheme="https" />
+        <data android:scheme="content" />
+        <data android:scheme="asset" />
+        <data android:scheme="file" />
+        <data android:host="*" />
+        <data android:pathPattern=".*\\.exolist\\.json" />
       </intent-filter>
     </activity>
-
-    <activity android:name="com.google.android.exoplayer2.demo.PlayerActivity"
+    <activity
+        android:name=".PlayerActivity"
         android:configChanges="keyboard|keyboardHidden|orientation|screenSize|screenLayout|smallestScreenSize|uiMode"
-        android:launchMode="singleTop"
         android:label="@string/application_name"
+        android:launchMode="singleTop"
         android:theme="@style/PlayerTheme">
       <intent-filter>
-        <action android:name="com.google.android.exoplayer.demo.action.VIEW"/>
-        <category android:name="android.intent.category.DEFAULT"/>
-        <data android:scheme="http"/>
-        <data android:scheme="https"/>
-        <data android:scheme="content"/>
-        <data android:scheme="asset"/>
-        <data android:scheme="file"/>
+        <action android:name="com.google.android.exoplayer.demo.action.VIEW" />
+
+        <category android:name="android.intent.category.DEFAULT" />
+
+        <data android:scheme="http" />
+        <data android:scheme="https" />
+        <data android:scheme="content" />
+        <data android:scheme="asset" />
+        <data android:scheme="file" />
       </intent-filter>
       <intent-filter>
-        <action android:name="com.google.android.exoplayer.demo.action.VIEW_LIST"/>
-        <category android:name="android.intent.category.DEFAULT"/>
+        <action android:name="com.google.android.exoplayer.demo.action.VIEW_LIST" />
+
+        <category android:name="android.intent.category.DEFAULT" />
       </intent-filter>
     </activity>
-
+    <activity android:name=".LoginActivity"></activity>
   </application>
 
-</manifest>
+</manifest>
\ No newline at end of file
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/LoginActivity.java b/demo/src/main/java/com/google/android/exoplayer2/demo/LoginActivity.java
new file mode 100644
index 0000000000..858bb76231
--- /dev/null
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/LoginActivity.java
@@ -0,0 +1,55 @@
+package com.google.android.exoplayer2.demo;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.Toast;
+
+import com.google.android.exoplayer2.upstream.novo.TokenManager;
+
+public class LoginActivity extends Activity {
+
+    private EditText etUserName;
+    private EditText etPass;
+    private Button btnLogin;
+
+    private static final String TAG = LoginActivity.class.getSimpleName();
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_login);
+
+        initStuff();
+
+        btnLogin.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                String url = "http://35.154.11.202/VocabimateLoginServer/webapi/myresource/login";
+                String body = "username=" + etUserName.getText().toString()+"&password="+etPass.getText().toString();
+                ServerHit.JSONTask task = new ServerHit.JSONTask(body, new ServerHit.ServiceHitResponseListener() {
+                    @Override
+                    public void onDone(String response) {
+                        TokenManager.setToken(response);
+                        finish();
+                        Toast.makeText(LoginActivity.this, "Login Success", Toast.LENGTH_SHORT).show();
+                    }
+
+                    @Override
+                    public void onError(String error) {
+                        Toast.makeText(LoginActivity.this, "Something went wrong", Toast.LENGTH_SHORT).show();
+                    }
+                });
+                task.execute(url);
+            }
+        });
+    }
+
+    private void initStuff() {
+        etUserName = (EditText) findViewById(R.id.etUserName);
+        etPass = (EditText) findViewById(R.id.etPass);
+        btnLogin = (Button) findViewById(R.id.btnLogin);
+    }
+}
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/MainActivity.java b/demo/src/main/java/com/google/android/exoplayer2/demo/MainActivity.java
new file mode 100644
index 0000000000..58078f4131
--- /dev/null
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/MainActivity.java
@@ -0,0 +1,79 @@
+package com.google.android.exoplayer2.demo;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.text.TextUtils;
+import android.view.View;
+import android.widget.Button;
+import android.widget.Toast;
+
+import com.google.android.exoplayer2.upstream.novo.TokenManager;
+
+public class MainActivity extends Activity {
+
+    private Button btnLogin;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+
+        initStuff();
+    }
+
+    private void initStuff() {
+        btnLogin = (Button) findViewById(R.id.btnLogin);
+        Button btnOpen = (Button) findViewById(R.id.btnOpen);
+        Button btnRestricted = (Button) findViewById(R.id.btnRestricted);
+
+        btnLogin.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if(!TextUtils.isEmpty(TokenManager.getToken())) {
+                    TokenManager.setToken(null);
+                    loginButtonTextUpdate();
+                    return;
+                }
+                Intent intent = new Intent(getApplicationContext(), LoginActivity.class);
+                Bundle bundle = new Bundle();
+                startActivity(intent.putExtras(bundle));
+            }
+        });
+
+        btnOpen.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                Intent intent = new Intent(getApplicationContext(), PlayerActivity.class);
+                intent.setData(Uri.parse("http://35.154.11.202/VocabimateContentServer/m3u8-encrypted-open/master.m3u8"));
+                intent.setAction(PlayerActivity.ACTION_VIEW);
+                startActivity(intent);
+            }
+        });
+
+        btnRestricted.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                Intent intent = new Intent(getApplicationContext(), PlayerActivity.class);
+                intent.setData(Uri.parse("http://35.154.11.202/VocabimateContentServer/m3u8-encrypted-auth/master.m3u8"));
+                intent.setAction(PlayerActivity.ACTION_VIEW);
+                startActivity(intent);
+            }
+        });
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        loginButtonTextUpdate();
+    }
+
+    private void loginButtonTextUpdate() {
+        if(!TextUtils.isEmpty(TokenManager.getToken())){
+            btnLogin.setText("Logout");
+        } else {
+            btnLogin.setText("Login");
+        }
+    }
+}
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/ServerHit.java b/demo/src/main/java/com/google/android/exoplayer2/demo/ServerHit.java
new file mode 100644
index 0000000000..9ebefbc28c
--- /dev/null
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/ServerHit.java
@@ -0,0 +1,102 @@
+package com.google.android.exoplayer2.demo;
+
+import android.os.AsyncTask;
+import android.util.Log;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.OutputStream;
+import java.net.HttpURLConnection;
+import java.net.URL;
+
+/**
+ * Created by Hisham on 25/Aug/2017 - 20:01
+ */
+
+public class ServerHit {
+
+    public interface ServiceHitResponseListener{
+        void onDone(String response);
+        void onError(String error);
+    }
+
+
+    public static class JSONTask extends AsyncTask<String,String, String > {
+
+        private final ServiceHitResponseListener listener;
+        private String body;
+
+        public JSONTask(String body, ServiceHitResponseListener listener){
+            this.body = body;
+            this.listener = listener;
+        }
+
+        @Override
+        protected void onPreExecute() {
+            super.onPreExecute();
+        }
+
+        @Override
+        protected String doInBackground(String... params) {
+            HttpURLConnection connection = null;
+            BufferedReader reader = null;
+
+            try {
+                URL url = new URL(params[0]);
+                connection = (HttpURLConnection) url.openConnection();
+                connection.setRequestMethod("POST");
+                connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
+
+                if(body != null) {
+                    byte[] outputInBytes = body.getBytes("UTF-8");
+                    OutputStream os = connection.getOutputStream();
+                    os.write(outputInBytes);
+                    os.close();
+                }
+
+                connection.connect();
+                InputStream stream = connection.getInputStream();
+                reader = new BufferedReader(new InputStreamReader(stream));
+                StringBuffer buffer = new StringBuffer();
+                String line ="";
+                while ((line = reader.readLine()) != null){
+                    buffer.append(line);
+                }
+
+                return buffer.toString();
+
+            } catch (IOException e) {
+                e.printStackTrace();
+                listener.onError(e.getMessage());
+            } finally {
+                if(connection != null) {
+                    connection.disconnect();
+                }
+                try {
+                    if(reader != null) {
+                        reader.close();
+                    }
+                } catch (IOException e) {
+                    e.printStackTrace();
+                }
+            }
+            return  null;
+        }
+
+        @Override
+        protected void onPostExecute(final String result) {
+            super.onPostExecute(result);
+            if(result != null) {
+                Log.d(TAG, "onPostExecute: " + result);
+                listener.onDone(result);
+            } else {
+                listener.onError(null);
+//                Toast.makeText(getApplicationContext(), "Not able to fetch data from server, please check url.", Toast.LENGTH_SHORT).show();
+            }
+        }
+    }
+
+    private static final String TAG = ServerHit.class.getSimpleName();
+}
diff --git a/demo/src/main/res/layout/activity_login.xml b/demo/src/main/res/layout/activity_login.xml
new file mode 100644
index 0000000000..68c5980881
--- /dev/null
+++ b/demo/src/main/res/layout/activity_login.xml
@@ -0,0 +1,42 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context="com.google.android.exoplayer2.demo.LoginActivity">
+
+    <EditText
+        android:id="@+id/etUserName"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        android:layout_centerHorizontal="true"
+        android:layout_marginTop="28dp"
+        android:ems="10"
+        android:text="test"
+        android:inputType="textPersonName"
+        android:hint="Username" />
+
+    <EditText
+        android:id="@+id/etPass"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginTop="16dp"
+        android:ems="10"
+        android:text="test"
+        android:hint="Enter Password"
+        android:inputType="textPassword"
+        android:layout_below="@+id/etUserName"
+        android:layout_alignLeft="@+id/etUserName"
+        android:layout_alignStart="@+id/etUserName" />
+
+    <Button
+        android:id="@+id/btnLogin"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Login"
+        android:layout_below="@+id/etPass"
+        android:layout_centerHorizontal="true"
+        android:layout_marginTop="16dp" />
+</RelativeLayout>
diff --git a/demo/src/main/res/layout/activity_main.xml b/demo/src/main/res/layout/activity_main.xml
new file mode 100644
index 0000000000..76284ae1c4
--- /dev/null
+++ b/demo/src/main/res/layout/activity_main.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:gravity="center_horizontal"
+    android:orientation="vertical"
+    tools:context="com.google.android.exoplayer2.demo.MainActivity">
+
+    <Button
+        android:id="@+id/btnLogin"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="right"
+        android:layout_marginRight="4dp"
+        android:layout_marginTop="4dp"
+        android:text="Login"
+        android:textAllCaps="false" />
+
+    <Button
+        android:id="@+id/btnOpen"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_marginLeft="32dp"
+        android:layout_marginRight="32dp"
+        android:layout_marginTop="64dp"
+        android:text="Encrypted stream - Open"
+        android:textAllCaps="false" />
+
+    <Button
+        android:id="@+id/btnRestricted"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_marginLeft="32dp"
+        android:layout_marginRight="32dp"
+        android:layout_marginTop="16dp"
+        android:text="Encrypted stream - Token Auth"
+        android:textAllCaps="false" />
+</LinearLayout>
diff --git a/demo/src/main/res/values/strings.xml b/demo/src/main/res/values/strings.xml
index cc6357c574..5ee613b59a 100644
--- a/demo/src/main/res/values/strings.xml
+++ b/demo/src/main/res/values/strings.xml
@@ -16,7 +16,7 @@
 
 <resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
 
-  <string name="application_name">ExoPlayer</string>
+  <string name="application_name">Vocabimate Demo</string>
 
   <string name="video">Video</string>
 
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java
index 599cdddeb9..da1f4a09fe 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java
@@ -19,6 +19,7 @@
 import android.text.TextUtils;
 import android.util.Log;
 import com.google.android.exoplayer2.C;
+import com.google.android.exoplayer2.upstream.novo.TokenManager;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.Predicate;
 import com.google.android.exoplayer2.util.Util;
@@ -61,7 +62,7 @@
   private static final int MAX_REDIRECTS = 20; // Same limit as okhttp.
   private static final long MAX_BYTES_TO_DRAIN = 2048;
   private static final Pattern CONTENT_RANGE_HEADER =
-      Pattern.compile("^bytes (\\d+)-(\\d+)/(\\d+)$");
+          Pattern.compile("^bytes (\\d+)-(\\d+)/(\\d+)$");
   private static final AtomicReference<byte[]> skipBufferReference = new AtomicReference<>();
 
   private final boolean allowCrossProtocolRedirects;
@@ -102,9 +103,9 @@ public DefaultHttpDataSource(String userAgent, Predicate<String> contentTypePred
    * @param listener An optional listener.
    */
   public DefaultHttpDataSource(String userAgent, Predicate<String> contentTypePredicate,
-      TransferListener<? super DefaultHttpDataSource> listener) {
+                               TransferListener<? super DefaultHttpDataSource> listener) {
     this(userAgent, contentTypePredicate, listener, DEFAULT_CONNECT_TIMEOUT_MILLIS,
-        DEFAULT_READ_TIMEOUT_MILLIS);
+            DEFAULT_READ_TIMEOUT_MILLIS);
   }
 
   /**
@@ -119,10 +120,10 @@ public DefaultHttpDataSource(String userAgent, Predicate<String> contentTypePred
    *     as an infinite timeout.
    */
   public DefaultHttpDataSource(String userAgent, Predicate<String> contentTypePredicate,
-      TransferListener<? super DefaultHttpDataSource> listener, int connectTimeoutMillis,
-      int readTimeoutMillis) {
+                               TransferListener<? super DefaultHttpDataSource> listener, int connectTimeoutMillis,
+                               int readTimeoutMillis) {
     this(userAgent, contentTypePredicate, listener, connectTimeoutMillis, readTimeoutMillis, false,
-        null);
+            null);
   }
 
   /**
@@ -142,9 +143,9 @@ public DefaultHttpDataSource(String userAgent, Predicate<String> contentTypePred
    *     HTTP headers or {@code null} if not required.
    */
   public DefaultHttpDataSource(String userAgent, Predicate<String> contentTypePredicate,
-      TransferListener<? super DefaultHttpDataSource> listener, int connectTimeoutMillis,
-      int readTimeoutMillis, boolean allowCrossProtocolRedirects,
-      RequestProperties defaultRequestProperties) {
+                               TransferListener<? super DefaultHttpDataSource> listener, int connectTimeoutMillis,
+                               int readTimeoutMillis, boolean allowCrossProtocolRedirects,
+                               RequestProperties defaultRequestProperties) {
     this.userAgent = Assertions.checkNotEmpty(userAgent);
     this.contentTypePredicate = contentTypePredicate;
     this.listener = listener;
@@ -192,7 +193,7 @@ public long open(DataSpec dataSpec) throws HttpDataSourceException {
       connection = makeConnection(dataSpec);
     } catch (IOException e) {
       throw new HttpDataSourceException("Unable to connect to " + dataSpec.uri.toString(), e,
-          dataSpec, HttpDataSourceException.TYPE_OPEN);
+              dataSpec, HttpDataSourceException.TYPE_OPEN);
     }
 
     int responseCode;
@@ -201,15 +202,20 @@ public long open(DataSpec dataSpec) throws HttpDataSourceException {
     } catch (IOException e) {
       closeConnectionQuietly();
       throw new HttpDataSourceException("Unable to connect to " + dataSpec.uri.toString(), e,
-          dataSpec, HttpDataSourceException.TYPE_OPEN);
+              dataSpec, HttpDataSourceException.TYPE_OPEN);
     }
 
-    // Check for a valid response code.
-    if (responseCode < 200 || responseCode > 299) {
+    if(responseCode == 500) { // for custom server hisham
+      try {
+        connection = makeConnectionCustom(new URL(dataSpec.uri.toString()));
+      } catch (IOException e) {
+        e.printStackTrace();
+      }
+    } else  if (responseCode < 200 || responseCode > 299) { // Check for a valid response code.
       Map<String, List<String>> headers = connection.getHeaderFields();
       closeConnectionQuietly();
       InvalidResponseCodeException exception =
-          new InvalidResponseCodeException(responseCode, headers, dataSpec);
+              new InvalidResponseCodeException(responseCode, headers, dataSpec);
       if (responseCode == 416) {
         exception.initCause(new DataSourceException(DataSourceException.POSITION_OUT_OF_RANGE));
       }
@@ -235,7 +241,7 @@ public long open(DataSpec dataSpec) throws HttpDataSourceException {
       } else {
         long contentLength = getContentLength(connection);
         bytesToRead = contentLength != C.LENGTH_UNSET ? (contentLength - bytesToSkip)
-            : C.LENGTH_UNSET;
+                : C.LENGTH_UNSET;
       }
     } else {
       // Gzip is enabled. If the server opts to use gzip then the content length in the response
@@ -260,6 +266,52 @@ public long open(DataSpec dataSpec) throws HttpDataSourceException {
     return bytesToRead;
   }
 
+  private HttpURLConnection makeConnectionCustom(URL url) throws IOException {
+    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
+    connection.setConnectTimeout(connectTimeoutMillis);
+    connection.setReadTimeout(readTimeoutMillis);
+    if (defaultRequestProperties != null) {
+      for (Map.Entry<String, String> property : defaultRequestProperties.getSnapshot().entrySet()) {
+        connection.setRequestProperty(property.getKey(), property.getValue());
+      }
+    }
+    for (Map.Entry<String, String> property : requestProperties.getSnapshot().entrySet()) {
+      connection.setRequestProperty(property.getKey(), property.getValue());
+    }
+//    if (!(position == 0 && length == C.LENGTH_UNSET)) {
+//      String rangeRequest = "bytes=" + position + "-";
+//      if (length != C.LENGTH_UNSET) {
+//        rangeRequest += (position + length - 1);
+//      }
+//      connection.setRequestProperty("Range", rangeRequest);
+//    }
+    connection.setRequestProperty("User-Agent", userAgent);
+//    if (!allowGzip) {
+//      connection.setRequestProperty("Accept-Encoding", "identity");
+//    }
+//    connection.setInstanceFollowRedirects(followRedirects);
+//    connection.setDoOutput(postBody != null);
+//    if (postBody != null) {
+    connection.setRequestMethod("GET");
+    if(!TextUtils.isEmpty(TokenManager.getToken())) {
+      connection.setRequestProperty("token", TokenManager.getToken());
+    }
+    Log.d(TAG, "hisham: " + connection.getResponseCode());
+//      if (postBody.length == 0) {
+//        connection.connect();
+//      } else  {
+//        connection.setFixedLengthStreamingMode(postBody.length);
+//        connection.connect();
+//        OutputStream os = connection.getOutputStream();
+//        os.write(postBody);
+//        os.close();
+//      }
+//    } else {
+//      connection.connect();
+//    }
+    return connection;
+  }
+
   @Override
   public int read(byte[] buffer, int offset, int readLength) throws HttpDataSourceException {
     try {
@@ -354,15 +406,15 @@ private HttpURLConnection makeConnection(DataSpec dataSpec) throws IOException {
     int redirectCount = 0;
     while (redirectCount++ <= MAX_REDIRECTS) {
       HttpURLConnection connection = makeConnection(
-          url, postBody, position, length, allowGzip, false /* followRedirects */);
+              url, postBody, position, length, allowGzip, false /* followRedirects */);
       int responseCode = connection.getResponseCode();
       if (responseCode == HttpURLConnection.HTTP_MULT_CHOICE
-          || responseCode == HttpURLConnection.HTTP_MOVED_PERM
-          || responseCode == HttpURLConnection.HTTP_MOVED_TEMP
-          || responseCode == HttpURLConnection.HTTP_SEE_OTHER
-          || (postBody == null
+              || responseCode == HttpURLConnection.HTTP_MOVED_PERM
+              || responseCode == HttpURLConnection.HTTP_MOVED_TEMP
+              || responseCode == HttpURLConnection.HTTP_SEE_OTHER
+              || (postBody == null
               && (responseCode == 307 /* HTTP_TEMP_REDIRECT */
-                  || responseCode == 308 /* HTTP_PERM_REDIRECT */))) {
+              || responseCode == 308 /* HTTP_PERM_REDIRECT */))) {
         // For 300, 301, 302, and 303 POST requests follow the redirect and are transformed into
         // GET requests. For 307 and 308 POST requests are not redirected.
         postBody = null;
@@ -389,7 +441,7 @@ private HttpURLConnection makeConnection(DataSpec dataSpec) throws IOException {
    * @param followRedirects Whether to follow redirects.
    */
   private HttpURLConnection makeConnection(URL url, byte[] postBody, long position,
-      long length, boolean allowGzip, boolean followRedirects) throws IOException {
+                                           long length, boolean allowGzip, boolean followRedirects) throws IOException {
     HttpURLConnection connection = (HttpURLConnection) url.openConnection();
     connection.setConnectTimeout(connectTimeoutMillis);
     connection.setReadTimeout(readTimeoutMillis);
@@ -482,7 +534,7 @@ private static long getContentLength(HttpURLConnection connection) {
       if (matcher.find()) {
         try {
           long contentLengthFromRange =
-              Long.parseLong(matcher.group(2)) - Long.parseLong(matcher.group(1)) + 1;
+                  Long.parseLong(matcher.group(2)) - Long.parseLong(matcher.group(1)) + 1;
           if (contentLength < 0) {
             // Some proxy servers strip the Content-Length header. Fall back to the length
             // calculated here in this case.
@@ -493,7 +545,7 @@ private static long getContentLength(HttpURLConnection connection) {
             // change one of them to reduce the size of a request, but it is unlikely anybody would
             // increase it.
             Log.w(TAG, "Inconsistent headers [" + contentLengthHeader + "] [" + contentRangeHeader
-                + "]");
+                    + "]");
             contentLength = Math.max(contentLength, contentLengthFromRange);
           }
         } catch (NumberFormatException e) {
@@ -614,8 +666,8 @@ private static void maybeTerminateInputStream(HttpURLConnection connection, long
       }
       String className = inputStream.getClass().getName();
       if (className.equals("com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream")
-          || className.equals(
-          "com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream")) {
+              || className.equals(
+              "com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream")) {
         Class<?> superclass = inputStream.getClass().getSuperclass();
         Method unexpectedEndOfInput = superclass.getDeclaredMethod("unexpectedEndOfInput");
         unexpectedEndOfInput.setAccessible(true);
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/novo/TokenManager.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/novo/TokenManager.java
new file mode 100644
index 0000000000..4f55fba8f6
--- /dev/null
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/novo/TokenManager.java
@@ -0,0 +1,18 @@
+package com.google.android.exoplayer2.upstream.novo;
+
+/**
+ * Created by Hisham on 8/28/2017.
+ */
+
+public class TokenManager {
+
+    private static String token = null;
+
+    public static String getToken() {
+        return token;
+    }
+
+    public static void setToken(String token) {
+        TokenManager.token = token;
+    }
+}
