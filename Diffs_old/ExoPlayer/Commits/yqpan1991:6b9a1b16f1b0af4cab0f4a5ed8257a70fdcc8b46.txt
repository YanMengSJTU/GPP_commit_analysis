diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/flv/AudioTagPayloadReader.java b/library/src/main/java/com/google/android/exoplayer/extractor/flv/AudioTagPayloadReader.java
index 239fe69b7d..957755cb58 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/flv/AudioTagPayloadReader.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/flv/AudioTagPayloadReader.java
@@ -20,7 +20,6 @@
 import com.google.android.exoplayer.extractor.TrackOutput;
 import com.google.android.exoplayer.util.CodecSpecificDataUtil;
 import com.google.android.exoplayer.util.MimeTypes;
-import com.google.android.exoplayer.util.ParsableBitArray;
 import com.google.android.exoplayer.util.ParsableByteArray;
 
 import android.util.Pair;
@@ -83,21 +82,13 @@ protected void parsePayload(ParsableByteArray data, long timeUs) {
     int packetType = data.readUnsignedByte();
     // Parse sequence header just in case it was not done before.
     if (packetType == AAC_PACKET_TYPE_SEQUENCE_HEADER && !hasOutputFormat) {
-      ParsableBitArray adtsScratch = new ParsableBitArray(new byte[data.bytesLeft()]);
-      data.readBytes(adtsScratch.data, 0, data.bytesLeft());
-
-      int audioObjectType = adtsScratch.readBits(5);
-      int sampleRateIndex = adtsScratch.readBits(4);
-      int channelConfig = adtsScratch.readBits(4);
-
-      byte[] audioSpecificConfig = CodecSpecificDataUtil.buildAacAudioSpecificConfig(
-          audioObjectType, sampleRateIndex, channelConfig);
+      byte[] audioSpecifiConfig = new byte[data.bytesLeft()];
+      data.readBytes(audioSpecifiConfig, 0, audioSpecifiConfig.length);
       Pair<Integer, Integer> audioParams = CodecSpecificDataUtil.parseAacAudioSpecificConfig(
-          audioSpecificConfig);
-
+          audioSpecifiConfig);
       MediaFormat mediaFormat = MediaFormat.createAudioFormat(null, MimeTypes.AUDIO_AAC,
           MediaFormat.NO_VALUE, MediaFormat.NO_VALUE, getDurationUs(), audioParams.second,
-          audioParams.first, Collections.singletonList(audioSpecificConfig), null);
+          audioParams.first, Collections.singletonList(audioSpecifiConfig), null);
       output.format(mediaFormat);
       hasOutputFormat = true;
     } else if (packetType == AAC_PACKET_TYPE_AAC_RAW) {
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/flv/ScriptTagPayloadReader.java b/library/src/main/java/com/google/android/exoplayer/extractor/flv/ScriptTagPayloadReader.java
index b28f422d67..0f71be791c 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/flv/ScriptTagPayloadReader.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/flv/ScriptTagPayloadReader.java
@@ -81,7 +81,9 @@ protected void parsePayload(ParsableByteArray data, long timeUs) throws ParserEx
     Map<String, Object> metadata = readAmfEcmaArray(data);
     if (metadata.containsKey(KEY_DURATION)) {
       double durationSeconds = (double) metadata.get(KEY_DURATION);
-      setDurationUs((long) (durationSeconds * C.MICROS_PER_SECOND));
+      if (durationSeconds > 0.0) {
+        setDurationUs((long) (durationSeconds * C.MICROS_PER_SECOND));
+      }
     }
   }
 
