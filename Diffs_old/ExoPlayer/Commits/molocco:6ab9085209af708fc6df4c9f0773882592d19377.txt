diff --git a/build.gradle b/build.gradle
index 3813a241e0..fd9560cbb2 100644
--- a/build.gradle
+++ b/build.gradle
@@ -17,7 +17,7 @@ buildscript {
         google()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:3.1.0'
+        classpath 'com.android.tools.build:gradle:3.1.1'
         classpath 'com.novoda:bintray-release:0.8.1'
     }
     // Workaround for the following test coverage issue. Remove when fixed:
diff --git a/demos/main/gradle/wrapper/gradle-wrapper.jar b/demos/main/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 0000000000..7a3265ee94
Binary files /dev/null and b/demos/main/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/demos/main/gradle/wrapper/gradle-wrapper.properties b/demos/main/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 0000000000..928755431f
--- /dev/null
+++ b/demos/main/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Wed Apr 11 12:57:03 CEST 2018
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.4-all.zip
diff --git a/demos/main/gradlew b/demos/main/gradlew
new file mode 100644
index 0000000000..cccdd3d517
--- /dev/null
+++ b/demos/main/gradlew
@@ -0,0 +1,172 @@
+#!/usr/bin/env sh
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn () {
+    echo "$*"
+}
+
+die () {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Escape application args
+save () {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
+}
+APP_ARGS=$(save "$@")
+
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
+if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
+  cd "$(dirname "$0")"
+fi
+
+exec "$JAVACMD" "$@"
diff --git a/demos/main/gradlew.bat b/demos/main/gradlew.bat
new file mode 100644
index 0000000000..e95643d6a2
--- /dev/null
+++ b/demos/main/gradlew.bat
@@ -0,0 +1,84 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windows variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/demos/main/src/main/assets/media.exolist.json b/demos/main/src/main/assets/media.exolist.json
index 7052e7c436..9df74a6f19 100644
--- a/demos/main/src/main/assets/media.exolist.json
+++ b/demos/main/src/main/assets/media.exolist.json
@@ -1,581 +1,10 @@
 [
   {
-    "name": "YouTube DASH",
-    "samples": [
-      {
-        "name": "Google Glass (MP4,H264)",
-        "uri": "http://www.youtube.com/api/manifest/dash/id/bf5bb2419360daf1/source/youtube?as=fmp4_audio_clear,fmp4_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=51AF5F39AB0CEC3E5497CD9C900EBFEAECCCB5C7.8506521BFC350652163895D4C26DEE124209AA9E&key=ik0",
-        "extension": "mpd"
-      },
-      {
-        "name": "Google Play (MP4,H264)",
-        "uri": "http://www.youtube.com/api/manifest/dash/id/3aa39fa2cc27967f/source/youtube?as=fmp4_audio_clear,fmp4_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=A2716F75795F5D2AF0E88962FFCD10DB79384F29.84308FF04844498CE6FBCE4731507882B8307798&key=ik0",
-        "extension": "mpd"
-      },
-      {
-        "name": "Google Glass (WebM,VP9)",
-        "uri": "http://www.youtube.com/api/manifest/dash/id/bf5bb2419360daf1/source/youtube?as=fmp4_audio_clear,webm2_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=249B04F79E984D7F86B4D8DB48AE6FAF41C17AB3.7B9F0EC0505E1566E59B8E488E9419F253DDF413&key=ik0",
-        "extension": "mpd"
-      },
-      {
-        "name": "Google Play (WebM,VP9)",
-        "uri": "http://www.youtube.com/api/manifest/dash/id/3aa39fa2cc27967f/source/youtube?as=fmp4_audio_clear,webm2_sd_hd_clear&sparams=ip,ipbits,expire,source,id,as&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=B1C2A74783AC1CC4865EB312D7DD2D48230CC9FD.BD153B9882175F1F94BFE5141A5482313EA38E8D&key=ik0",
-        "extension": "mpd"
-      }
-    ]
-  },
-  {
-    "name": "Widevine DASH Policy Tests (GTS)",
-    "samples": [
-      {
-        "name": "WV: HDCP not specified",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=d286538032258a1c&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP not required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=48fcc369939ac96c&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=e06c39f1151da3df&provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure video path required (MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=0894c7c8719b28a0&provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure video path required (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=0894c7c8719b28a0&provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure video path required (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/hevc/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=0894c7c8719b28a0&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP + secure video path required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=efd045b1eb61888a&provider=widevine_test"
-      },
-      {
-        "name": "WV: 30s license duration (fails at ~30s)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=f9a34cab7b05881a&provider=widevine_test"
-      }
-    ]
-  },
-  {
-    "name": "Widevine HDCP Capabilities Tests",
-    "samples": [
-      {
-        "name": "WV: HDCP: None (not required)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_None&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP: 1.0 required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_V1&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP: 2.0 required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_V2&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP: 2.1 required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_V2_1&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP: 2.2 required",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_V2_2&provider=widevine_test"
-      },
-      {
-        "name": "WV: HDCP: No digital output",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?video_id=HDCP_NO_DIGTAL_OUTPUT&provider=widevine_test"
-      }
-    ]
-  },
-  {
-    "name": "Widevine DASH: MP4,H264",
-    "samples": [
-      {
-        "name": "WV: Clear SD & HD (MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/h264/tears/tears.mpd"
-      },
-      {
-        "name": "WV: Clear SD (MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/h264/tears/tears_sd.mpd"
-      },
-      {
-        "name": "WV: Clear HD (MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/h264/tears/tears_hd.mpd"
-      },
-      {
-        "name": "WV: Clear UHD (MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/h264/tears/tears_uhd.mpd"
-      },
-      {
-        "name": "WV: Secure SD & HD (cenc,MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure SD (cenc,MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_sd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure HD (cenc,MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_hd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure UHD (cenc,MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_uhd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure SD & HD (cbc1,MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cbc1/h264/tears/tears_aes_cbc1.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure SD (cbc1,MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cbc1/h264/tears/tears_aes_cbc1_sd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure HD (cbc1,MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cbc1/h264/tears/tears_aes_cbc1_hd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure UHD (cbc1,MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cbc1/h264/tears/tears_aes_cbc1_uhd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure SD & HD (cbcs,MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cbcs/h264/tears/tears_aes_cbcs.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure SD (cbcs,MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cbcs/h264/tears/tears_aes_cbcs_sd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure HD (cbcs,MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cbcs/h264/tears/tears_aes_cbcs_hd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure UHD (cbcs,MP4,H264)",
-        "uri": "https://storage.googleapis.com/wvmedia/cbcs/h264/tears/tears_aes_cbcs_uhd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      }
-    ]
-  },
-  {
-    "name": "Widevine DASH: WebM,VP9",
-    "samples": [
-      {
-        "name": "WV: Clear SD & HD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/vp9/tears/tears.mpd"
-      },
-      {
-        "name": "WV: Clear SD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/vp9/tears/tears_sd.mpd"
-      },
-      {
-        "name": "WV: Clear HD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/vp9/tears/tears_hd.mpd"
-      },
-      {
-        "name": "WV: Clear UHD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/vp9/tears/tears_uhd.mpd"
-      },
-      {
-        "name": "WV: Secure Fullsample SD & HD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure Fullsample SD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/tears/tears_sd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure Fullsample HD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/tears/tears_hd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure Fullsample UHD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/tears/tears_uhd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure Subsample SD & HD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/subsample/24fps/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure Subsample SD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/subsample/24fps/tears/tears_sd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure Subsample HD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/subsample/24fps/tears/tears_hd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure Subsample UHD (WebM,VP9)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/vp9/subsample/24fps/tears/tears_uhd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      }
-    ]
-  },
-  {
-    "name": "Widevine DASH: MP4,H265",
+    "name": "DASH: MP4,H265",
     "samples": [
       {
         "name": "WV: Clear SD & HD (MP4,H265)",
         "uri": "https://storage.googleapis.com/wvmedia/clear/hevc/tears/tears.mpd"
-      },
-      {
-        "name": "WV: Clear SD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/hevc/tears/tears_sd.mpd"
-      },
-      {
-        "name": "WV: Clear HD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/hevc/tears/tears_hd.mpd"
-      },
-      {
-        "name": "WV: Clear UHD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/clear/hevc/tears/tears_uhd.mpd"
-      },
-      {
-        "name": "WV: Secure SD & HD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/hevc/tears/tears.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure SD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/hevc/tears/tears_sd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure HD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/hevc/tears/tears_hd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      },
-      {
-        "name": "WV: Secure UHD (MP4,H265)",
-        "uri": "https://storage.googleapis.com/wvmedia/cenc/hevc/tears/tears_uhd.mpd",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test"
-      }
-    ]
-  },
-  {
-    "name": "SmoothStreaming",
-    "samples": [
-      {
-        "name": "Super speed",
-        "uri": "http://playready.directtaps.net/smoothstreaming/SSWSS720H264/SuperSpeedway_720.ism"
-      },
-      {
-        "name": "Super speed (PlayReady)",
-        "uri": "http://playready.directtaps.net/smoothstreaming/SSWSS720H264PR/SuperSpeedway_720.ism",
-        "drm_scheme": "playready"
-      }
-    ]
-  },
-  {
-    "name": "HLS",
-    "samples": [
-      {
-        "name": "Apple 4x3 basic stream",
-        "uri": "https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_4x3/bipbop_4x3_variant.m3u8"
-      },
-      {
-        "name": "Apple 16x9 basic stream",
-        "uri": "https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/bipbop_16x9_variant.m3u8"
-      },
-      {
-        "name": "Apple master playlist advanced (TS)",
-        "uri": "https://tungsten.aaplimg.com/VOD/bipbop_adv_example_v2/master.m3u8"
-      },
-      {
-        "name": "Apple master playlist advanced (fMP4)",
-        "uri": "https://tungsten.aaplimg.com/VOD/bipbop_adv_fmp4_example/master.m3u8"
-      },
-      {
-        "name": "Apple TS media playlist",
-        "uri": "https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_4x3/gear1/prog_index.m3u8"
-      },
-      {
-        "name": "Apple AAC media playlist",
-        "uri": "https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_4x3/gear0/prog_index.m3u8"
-      },
-      {
-        "name": "Apple ID3 metadata",
-        "uri": "http://devimages.apple.com/samplecode/adDemo/ad.m3u8"
-      }
-    ]
-  },
-  {
-    "name": "Misc",
-    "samples": [
-      {
-        "name": "Dizzy",
-        "uri": "https://html5demos.com/assets/dizzy.mp4"
-      },
-      {
-        "name": "Apple AAC 10s",
-        "uri": "https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_4x3/gear0/fileSequence0.aac"
-      },
-      {
-        "name": "Apple TS 10s",
-        "uri": "https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_4x3/gear1/fileSequence0.ts"
-      },
-      {
-        "name": "Android screens (Matroska)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv"
-      },
-      {
-        "name": "Big Buck Bunny (MP4 Video)",
-        "uri": "http://redirector.c.youtube.com/videoplayback?id=604ed5ce52eda7ee&itag=22&source=youtube&sparams=ip,ipbits,expire,source,id&ip=0.0.0.0&ipbits=0&expire=19000000000&signature=513F28C7FDCBEC60A66C86C9A393556C99DC47FB.04C88036EEE12565A1ED864A875A58F15D8B5300&key=ik0"
-      },
-      {
-        "name": "Screens 360P (WebM,VP9,No Audio)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/video-vp9-360.webm"
-      },
-      {
-        "name": "Screens 480p (FMP4,H264,No Audio)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/video-avc-baseline-480.mp4"
-      },
-      {
-        "name": "Screens 1080p (FMP4,H264, No Audio)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/video-137.mp4"
-      },
-      {
-        "name": "Screens (FMP4,AAC Audio)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/audio-141.mp4"
-      },
-      {
-        "name": "Google Play (MP3 Audio)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-0/play.mp3"
-      },
-      {
-        "name": "Google Play (Ogg/Vorbis Audio)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/ogg/play.ogg"
-      },
-      {
-        "name": "Google Glass (WebM Video with Vorbis Audio)",
-        "uri": "http://demos.webmproject.org/exoplayer/glass_vp9_vorbis.webm"
-      },
-      {
-        "name": "Google Glass (VP9 in MP4/ISO-BMFF)",
-        "uri": "http://demos.webmproject.org/exoplayer/glass.mp4"
-      },
-      {
-        "name": "Google Glass DASH - VP9 and Opus",
-        "uri": "http://demos.webmproject.org/dash/201410/vp9_glass/manifest_vp9_opus.mpd"
-      },
-      {
-        "name": "Big Buck Bunny (FLV Video)",
-        "uri": "http://vod.leasewebcdn.com/bbb.flv?ri=1024&rs=150&start=0"
-      }
-    ]
-  },
-  {
-    "name": "Playlists",
-    "samples": [
-      {
-        "name": "Cats -> Dogs",
-        "playlist": [
-          {
-            "uri": "https://html5demos.com/assets/dizzy.mp4"
-          },
-          {
-            "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv"
-          }
-        ]
-      },
-      {
-        "name": "Audio -> Video -> Audio",
-        "playlist": [
-          {
-            "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/audio-141.mp4"
-          },
-          {
-            "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv"
-          },
-          {
-            "uri": "https://storage.googleapis.com/exoplayer-test-media-1/gen-3/screens/dash-vod-single-segment/audio-141.mp4"
-          }
-        ]
-      },
-      {
-        "name": "Clear -> Enc -> Clear -> Enc -> Enc",
-        "drm_scheme": "widevine",
-        "drm_license_url": "https://proxy.uat.widevine.com/proxy?provider=widevine_test",
-        "playlist": [
-          {
-            "uri": "https://html5demos.com/assets/dizzy.mp4"
-          },
-          {
-            "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_sd.mpd"
-          },
-          {
-            "uri": "https://html5demos.com/assets/dizzy.mp4"
-          },
-          {
-            "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_sd.mpd"
-          },
-          {
-            "uri": "https://storage.googleapis.com/wvmedia/cenc/h264/tears/tears_sd.mpd"
-          }
-        ]
-      }
-    ]
-  },
-  {
-    "name": "IMA sample ad tags",
-    "samples": [
-      {
-        "name": "Single inline linear",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/single_ad_samples&ciu_szs=300x250&impl=s&gdfp_req=1&env=vp&output=vast&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ct%3Dlinear&correlator="
-      },
-      {
-        "name": "Single skippable inline",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/single_ad_samples&ciu_szs=300x250&impl=s&gdfp_req=1&env=vp&output=vast&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ct%3Dskippablelinear&correlator="
-      },
-      {
-        "name": "Single redirect linear",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/single_ad_samples&ciu_szs=300x250&impl=s&gdfp_req=1&env=vp&output=vast&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ct%3Dredirectlinear&correlator="
-      },
-      {
-        "name": "Single redirect error",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/single_ad_samples&ciu_szs=300x250&impl=s&gdfp_req=1&env=vp&output=vast&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ct%3Dredirecterror&nofb=1&correlator="
-      },
-      {
-        "name": "Single redirect broken (fallback)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/single_ad_samples&ciu_szs=300x250&impl=s&gdfp_req=1&env=vp&output=vast&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ct%3Dredirecterror&correlator="
-      },
-      {
-        "name": "VMAP pre-roll",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpreonly&cmsid=496&vid=short_onecue&correlator="
-      },
-      {
-        "name": "VMAP pre-roll + bumper",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpreonlybumper&cmsid=496&vid=short_onecue&correlator="
-      },
-      {
-        "name": "VMAP post-roll",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpostonly&cmsid=496&vid=short_onecue&correlator="
-      },
-      {
-        "name": "VMAP post-roll + bumper",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpostonlybumper&cmsid=496&vid=short_onecue&correlator="
-      },
-      {
-        "name": "VMAP pre-, mid- and post-rolls, single ads",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpremidpost&cmsid=496&vid=short_onecue&correlator="
-      },
-      {
-        "name": "VMAP pre-roll single ad, mid-roll standard pod with 3 ads, post-roll single ad",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpremidpostpod&cmsid=496&vid=short_onecue&correlator="
-      },
-      {
-        "name": "VMAP pre-roll single ad, mid-roll optimized pod with 3 ads, post-roll single ad",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpremidpostoptimizedpod&cmsid=496&vid=short_onecue&correlator="
-      },
-      {
-        "name": "VMAP pre-roll single ad, mid-roll standard pod with 3 ads, post-roll single ad (bumpers around all ad breaks)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpremidpostpodbumper&cmsid=496&vid=short_onecue&correlator="
-      },
-      {
-        "name": "VMAP pre-roll single ad, mid-roll optimized pod with 3 ads, post-roll single ad (bumpers around all ad breaks)",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpremidpostoptimizedpodbumper&cmsid=496&vid=short_onecue&correlator="
-      },
-      {
-        "name": "VMAP pre-roll single ad, mid-roll standard pods with 5 ads every 10 seconds for 1:40, post-roll single ad",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/ad_rule_samples&ciu_szs=300x250&ad_rule=1&impl=s&gdfp_req=1&env=vp&output=vmap&unviewed_position_start=1&cust_params=deployment%3Ddevsite%26sample_ar%3Dpremidpostlongpod&cmsid=496&vid=short_tencue&correlator="
-      },
-      {
-        "name": "VMAP empty midroll",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "http://vastsynthesizer.appspot.com/empty-midroll"
-      },
-      {
-        "name": "VMAP full, empty, full midrolls",
-        "uri": "https://storage.googleapis.com/exoplayer-test-media-1/mkv/android-screens-lavf-56.36.100-aac-avc-main-1280x720.mkv",
-        "ad_tag_uri": "http://vastsynthesizer.appspot.com/empty-midroll-2"
       }
     ]
   }
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java
index 5d019e4c53..f8698280ff 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java
@@ -16,11 +16,17 @@
 package com.google.android.exoplayer2.demo;
 
 import android.app.Application;
+import android.content.Context;
+import android.os.Environment;
+
 import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.DefaultDataSourceFactory;
 import com.google.android.exoplayer2.upstream.DefaultHttpDataSourceFactory;
 import com.google.android.exoplayer2.upstream.HttpDataSource;
 import com.google.android.exoplayer2.upstream.TransferListener;
+import com.google.android.exoplayer2.upstream.cache.CacheDataSourceFactory;
+import com.google.android.exoplayer2.upstream.cache.NoOpCacheEvictor;
+import com.google.android.exoplayer2.upstream.cache.SimpleCache;
 import com.google.android.exoplayer2.util.Util;
 
 /**
@@ -28,27 +34,34 @@
  */
 public class DemoApplication extends Application {
 
-  protected String userAgent;
+    public static String userAgent;
+    public static Context instance;
 
-  @Override
-  public void onCreate() {
-    super.onCreate();
-    userAgent = Util.getUserAgent(this, "ExoPlayerDemo");
-  }
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        instance = this;
+        userAgent = Util.getUserAgent(this, "ExoPlayerDemo");
+    }
 
-  /** Returns a {@link DataSource.Factory}. */
-  public DataSource.Factory buildDataSourceFactory(TransferListener<? super DataSource> listener) {
-    return new DefaultDataSourceFactory(this, listener, buildHttpDataSourceFactory(listener));
-  }
+    /**
+     * Returns a {@link DataSource.Factory}.
+     */
+    public DataSource.Factory buildDataSourceFactory(TransferListener<? super DataSource> listener) {
+        SimpleCache simpleCache = new SimpleCache(this.getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS), new NoOpCacheEvictor());
+        return new CacheDataSourceFactory(simpleCache, buildUpstreamFactory(listener));
+    }
 
-  /** Returns a {@link HttpDataSource.Factory}. */
-  public HttpDataSource.Factory buildHttpDataSourceFactory(
-      TransferListener<? super DataSource> listener) {
-    return new DefaultHttpDataSourceFactory(userAgent, listener);
-  }
+    public DataSource.Factory buildUpstreamFactory(TransferListener<? super DataSource> listener) {
+        return new DefaultDataSourceFactory(this, listener, buildHttpDataSourceFactory(listener));
+    }
 
-  public boolean useExtensionRenderers() {
-    return BuildConfig.FLAVOR.equals("withExtensions");
-  }
+    /**
+     * Returns a {@link HttpDataSource.Factory}.
+     */
+    public HttpDataSource.Factory buildHttpDataSourceFactory(
+            TransferListener<? super DataSource> listener) {
+        return new DefaultHttpDataSourceFactory(userAgent, listener);
+    }
 
 }
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
index 058133895e..265688ffcc 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
@@ -19,20 +19,21 @@
 import android.content.Intent;
 import android.content.pm.PackageManager;
 import android.net.Uri;
+import android.os.AsyncTask;
 import android.os.Bundle;
+import android.os.Environment;
 import android.os.Handler;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-import android.text.TextUtils;
+import android.util.Log;
 import android.view.KeyEvent;
 import android.view.View;
 import android.view.View.OnClickListener;
-import android.view.ViewGroup;
 import android.widget.Button;
-import android.widget.FrameLayout;
 import android.widget.LinearLayout;
 import android.widget.TextView;
 import android.widget.Toast;
+
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.C.ContentType;
 import com.google.android.exoplayer2.DefaultRenderersFactory;
@@ -41,27 +42,21 @@
 import com.google.android.exoplayer2.PlaybackPreparer;
 import com.google.android.exoplayer2.Player;
 import com.google.android.exoplayer2.SimpleExoPlayer;
-import com.google.android.exoplayer2.drm.DefaultDrmSessionManager;
-import com.google.android.exoplayer2.drm.DrmSessionManager;
-import com.google.android.exoplayer2.drm.FrameworkMediaCrypto;
-import com.google.android.exoplayer2.drm.FrameworkMediaDrm;
-import com.google.android.exoplayer2.drm.HttpMediaDrmCallback;
-import com.google.android.exoplayer2.drm.UnsupportedDrmException;
 import com.google.android.exoplayer2.mediacodec.MediaCodecRenderer.DecoderInitializationException;
 import com.google.android.exoplayer2.mediacodec.MediaCodecUtil.DecoderQueryException;
+import com.google.android.exoplayer2.offline.Downloader;
+import com.google.android.exoplayer2.offline.DownloaderConstructorHelper;
 import com.google.android.exoplayer2.source.BehindLiveWindowException;
 import com.google.android.exoplayer2.source.ConcatenatingMediaSource;
-import com.google.android.exoplayer2.source.ExtractorMediaSource;
 import com.google.android.exoplayer2.source.MediaSource;
 import com.google.android.exoplayer2.source.MediaSourceEventListener;
 import com.google.android.exoplayer2.source.TrackGroupArray;
-import com.google.android.exoplayer2.source.ads.AdsLoader;
-import com.google.android.exoplayer2.source.ads.AdsMediaSource;
 import com.google.android.exoplayer2.source.dash.DashMediaSource;
 import com.google.android.exoplayer2.source.dash.DefaultDashChunkSource;
-import com.google.android.exoplayer2.source.hls.HlsMediaSource;
-import com.google.android.exoplayer2.source.smoothstreaming.DefaultSsChunkSource;
-import com.google.android.exoplayer2.source.smoothstreaming.SsMediaSource;
+import com.google.android.exoplayer2.source.dash.manifest.DashManifest;
+import com.google.android.exoplayer2.source.dash.manifest.DashManifestParser;
+import com.google.android.exoplayer2.source.dash.manifest.RepresentationKey;
+import com.google.android.exoplayer2.source.dash.offline.DashDownloader;
 import com.google.android.exoplayer2.trackselection.AdaptiveTrackSelection;
 import com.google.android.exoplayer2.trackselection.DefaultTrackSelector;
 import com.google.android.exoplayer2.trackselection.MappingTrackSelector.MappedTrackInfo;
@@ -72,594 +67,500 @@
 import com.google.android.exoplayer2.ui.PlayerView;
 import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.DefaultBandwidthMeter;
+import com.google.android.exoplayer2.upstream.DefaultHttpDataSourceFactory;
 import com.google.android.exoplayer2.upstream.HttpDataSource;
+import com.google.android.exoplayer2.upstream.cache.NoOpCacheEvictor;
+import com.google.android.exoplayer2.upstream.cache.SimpleCache;
 import com.google.android.exoplayer2.util.EventLogger;
 import com.google.android.exoplayer2.util.Util;
-import java.lang.reflect.Constructor;
+
+import java.io.File;
+import java.io.IOException;
 import java.net.CookieHandler;
 import java.net.CookieManager;
 import java.net.CookiePolicy;
-import java.util.UUID;
+import java.util.ArrayList;
+import java.util.Arrays;
 
-/** An activity that plays media using {@link SimpleExoPlayer}. */
+/**
+ * An activity that plays media using {@link SimpleExoPlayer}.
+ */
 public class PlayerActivity extends Activity
-    implements OnClickListener, PlaybackPreparer, PlayerControlView.VisibilityListener {
-
-  public static final String DRM_SCHEME_EXTRA = "drm_scheme";
-  public static final String DRM_LICENSE_URL = "drm_license_url";
-  public static final String DRM_KEY_REQUEST_PROPERTIES = "drm_key_request_properties";
-  public static final String DRM_MULTI_SESSION = "drm_multi_session";
-  public static final String PREFER_EXTENSION_DECODERS = "prefer_extension_decoders";
-
-  public static final String ACTION_VIEW = "com.google.android.exoplayer.demo.action.VIEW";
-  public static final String EXTENSION_EXTRA = "extension";
-
-  public static final String ACTION_VIEW_LIST =
-      "com.google.android.exoplayer.demo.action.VIEW_LIST";
-  public static final String URI_LIST_EXTRA = "uri_list";
-  public static final String EXTENSION_LIST_EXTRA = "extension_list";
-  public static final String AD_TAG_URI_EXTRA = "ad_tag_uri";
-
-  // For backwards compatibility.
-  private static final String DRM_SCHEME_UUID_EXTRA = "drm_scheme_uuid";
-
-  private static final DefaultBandwidthMeter BANDWIDTH_METER = new DefaultBandwidthMeter();
-  private static final CookieManager DEFAULT_COOKIE_MANAGER;
-  static {
-    DEFAULT_COOKIE_MANAGER = new CookieManager();
-    DEFAULT_COOKIE_MANAGER.setCookiePolicy(CookiePolicy.ACCEPT_ORIGINAL_SERVER);
-  }
-
-  private Handler mainHandler;
-  private EventLogger eventLogger;
-  private PlayerView playerView;
-  private LinearLayout debugRootView;
-  private TextView debugTextView;
-
-  private DataSource.Factory mediaDataSourceFactory;
-  private SimpleExoPlayer player;
-  private DefaultTrackSelector trackSelector;
-  private TrackSelectionHelper trackSelectionHelper;
-  private DebugTextViewHelper debugViewHelper;
-  private boolean inErrorState;
-  private TrackGroupArray lastSeenTrackGroupArray;
-
-  private boolean shouldAutoPlay;
-  private int resumeWindow;
-  private long resumePosition;
-
-  // Fields used only for ad playback. The ads loader is loaded via reflection.
-
-  private AdsLoader adsLoader;
-  private Uri loadedAdTagUri;
-  private ViewGroup adUiViewGroup;
-
-  // Activity lifecycle
-
-  @Override
-  public void onCreate(Bundle savedInstanceState) {
-    super.onCreate(savedInstanceState);
-    shouldAutoPlay = true;
-    clearResumePosition();
-    mediaDataSourceFactory = buildDataSourceFactory(true);
-    mainHandler = new Handler();
-    if (CookieHandler.getDefault() != DEFAULT_COOKIE_MANAGER) {
-      CookieHandler.setDefault(DEFAULT_COOKIE_MANAGER);
+        implements OnClickListener, PlaybackPreparer, PlayerControlView.VisibilityListener {
+
+    public static final String ACTION_VIEW = "com.google.android.exoplayer.demo.action.VIEW";
+
+    private static final DefaultBandwidthMeter BANDWIDTH_METER = new DefaultBandwidthMeter();
+    private static final CookieManager DEFAULT_COOKIE_MANAGER;
+
+    static {
+        DEFAULT_COOKIE_MANAGER = new CookieManager();
+        DEFAULT_COOKIE_MANAGER.setCookiePolicy(CookiePolicy.ACCEPT_ORIGINAL_SERVER);
     }
 
-    setContentView(R.layout.player_activity);
-    View rootView = findViewById(R.id.root);
-    rootView.setOnClickListener(this);
-    debugRootView = findViewById(R.id.controls_root);
-    debugTextView = findViewById(R.id.debug_text_view);
-
-    playerView = findViewById(R.id.player_view);
-    playerView.setControllerVisibilityListener(this);
-    playerView.requestFocus();
-  }
-
-  @Override
-  public void onNewIntent(Intent intent) {
-    releasePlayer();
-    shouldAutoPlay = true;
-    clearResumePosition();
-    setIntent(intent);
-  }
-
-  @Override
-  public void onStart() {
-    super.onStart();
-    if (Util.SDK_INT > 23) {
-      initializePlayer();
+    private Handler mainHandler;
+    private EventLogger eventLogger;
+    private PlayerView playerView;
+    private LinearLayout debugRootView;
+    private TextView debugTextView;
+
+    private DataSource.Factory mediaDataSourceFactory;
+    private SimpleExoPlayer player;
+    private DefaultTrackSelector trackSelector;
+    private TrackSelectionHelper trackSelectionHelper;
+    private DebugTextViewHelper debugViewHelper;
+    private boolean inErrorState;
+    private TrackGroupArray lastSeenTrackGroupArray;
+
+    private boolean shouldAutoPlay;
+    private int resumeWindow;
+    private long resumePosition;
+
+    private OnClickListener downloadClickedListener;
+    private Uri[] uris;
+    //only for offline
+    private boolean trackChanged = false;
+
+    // Activity lifecycle
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        shouldAutoPlay = true;
+        clearResumePosition();
+        mediaDataSourceFactory = buildDataSourceFactory(true);
+        mainHandler = new Handler();
+        if (CookieHandler.getDefault() != DEFAULT_COOKIE_MANAGER) {
+            CookieHandler.setDefault(DEFAULT_COOKIE_MANAGER);
+        }
+
+        setContentView(R.layout.player_activity);
+        View rootView = findViewById(R.id.root);
+        rootView.setOnClickListener(this);
+        debugRootView = findViewById(R.id.controls_root);
+        debugTextView = findViewById(R.id.debug_text_view);
+
+        playerView = findViewById(R.id.player_view);
+        playerView.setControllerVisibilityListener(this);
+        playerView.requestFocus();
     }
-  }
 
-  @Override
-  public void onResume() {
-    super.onResume();
-    if (Util.SDK_INT <= 23 || player == null) {
-      initializePlayer();
+    @Override
+    public void onNewIntent(Intent intent) {
+        releasePlayer();
+        shouldAutoPlay = true;
+        clearResumePosition();
+        setIntent(intent);
     }
-  }
 
-  @Override
-  public void onPause() {
-    super.onPause();
-    if (Util.SDK_INT <= 23) {
-      releasePlayer();
+    @Override
+    public void onStart() {
+        super.onStart();
+        if (Util.SDK_INT > 23) {
+            initializePlayer();
+        }
     }
-  }
 
-  @Override
-  public void onStop() {
-    super.onStop();
-    if (Util.SDK_INT > 23) {
-      releasePlayer();
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (Util.SDK_INT <= 23 || player == null) {
+            initializePlayer();
+        }
     }
-  }
-
-  @Override
-  public void onDestroy() {
-    super.onDestroy();
-    releaseAdsLoader();
-  }
-
-  @Override
-  public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
-      @NonNull int[] grantResults) {
-    if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
-      initializePlayer();
-    } else {
-      showToast(R.string.storage_permission_denied);
-      finish();
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        if (Util.SDK_INT <= 23) {
+            releasePlayer();
+        }
     }
-  }
-
-  // Activity input
-
-  @Override
-  public boolean dispatchKeyEvent(KeyEvent event) {
-    // See whether the player view wants to handle media or DPAD keys events.
-    return playerView.dispatchKeyEvent(event) || super.dispatchKeyEvent(event);
-  }
-
-  // OnClickListener methods
-
-  @Override
-  public void onClick(View view) {
-    if (view.getParent() == debugRootView) {
-      MappedTrackInfo mappedTrackInfo = trackSelector.getCurrentMappedTrackInfo();
-      if (mappedTrackInfo != null) {
-        trackSelectionHelper.showSelectionDialog(
-            this, ((Button) view).getText(), mappedTrackInfo, (int) view.getTag());
-      }
+
+    @Override
+    public void onStop() {
+        super.onStop();
+        if (Util.SDK_INT > 23) {
+            releasePlayer();
+        }
     }
-  }
-
-  // PlaybackControlView.PlaybackPreparer implementation
-
-  @Override
-  public void preparePlayback() {
-    initializePlayer();
-  }
-
-  // PlaybackControlView.VisibilityListener implementation
-
-  @Override
-  public void onVisibilityChange(int visibility) {
-    debugRootView.setVisibility(visibility);
-  }
-
-  // Internal methods
-
-  private void initializePlayer() {
-    Intent intent = getIntent();
-    boolean needNewPlayer = player == null;
-    if (needNewPlayer) {
-      TrackSelection.Factory adaptiveTrackSelectionFactory =
-          new AdaptiveTrackSelection.Factory(BANDWIDTH_METER);
-      trackSelector = new DefaultTrackSelector(adaptiveTrackSelectionFactory);
-      trackSelectionHelper = new TrackSelectionHelper(trackSelector, adaptiveTrackSelectionFactory);
-      lastSeenTrackGroupArray = null;
-      eventLogger = new EventLogger(trackSelector);
-
-      DrmSessionManager<FrameworkMediaCrypto> drmSessionManager = null;
-      if (intent.hasExtra(DRM_SCHEME_EXTRA) || intent.hasExtra(DRM_SCHEME_UUID_EXTRA)) {
-        String drmLicenseUrl = intent.getStringExtra(DRM_LICENSE_URL);
-        String[] keyRequestPropertiesArray = intent.getStringArrayExtra(DRM_KEY_REQUEST_PROPERTIES);
-        boolean multiSession = intent.getBooleanExtra(DRM_MULTI_SESSION, false);
-        int errorStringId = R.string.error_drm_unknown;
-        if (Util.SDK_INT < 18) {
-          errorStringId = R.string.error_drm_not_supported;
+
+    @Override
+    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
+                                           @NonNull int[] grantResults) {
+        if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+            initializePlayer();
         } else {
-          try {
-            String drmSchemeExtra = intent.hasExtra(DRM_SCHEME_EXTRA) ? DRM_SCHEME_EXTRA
-                : DRM_SCHEME_UUID_EXTRA;
-            UUID drmSchemeUuid = Util.getDrmUuid(intent.getStringExtra(drmSchemeExtra));
-            if (drmSchemeUuid == null) {
-              errorStringId = R.string.error_drm_unsupported_scheme;
-            } else {
-              drmSessionManager =
-                  buildDrmSessionManagerV18(
-                      drmSchemeUuid, drmLicenseUrl, keyRequestPropertiesArray, multiSession);
-            }
-          } catch (UnsupportedDrmException e) {
-            errorStringId = e.reason == UnsupportedDrmException.REASON_UNSUPPORTED_SCHEME
-                ? R.string.error_drm_unsupported_scheme : R.string.error_drm_unknown;
-          }
+            showToast(R.string.storage_permission_denied);
+            finish();
         }
-        if (drmSessionManager == null) {
-          showToast(errorStringId);
-          return;
-        }
-      }
-
-      boolean preferExtensionDecoders = intent.getBooleanExtra(PREFER_EXTENSION_DECODERS, false);
-      @DefaultRenderersFactory.ExtensionRendererMode int extensionRendererMode =
-          ((DemoApplication) getApplication()).useExtensionRenderers()
-              ? (preferExtensionDecoders ? DefaultRenderersFactory.EXTENSION_RENDERER_MODE_PREFER
-              : DefaultRenderersFactory.EXTENSION_RENDERER_MODE_ON)
-              : DefaultRenderersFactory.EXTENSION_RENDERER_MODE_OFF;
-      DefaultRenderersFactory renderersFactory = new DefaultRenderersFactory(this,
-          drmSessionManager, extensionRendererMode);
-
-      player = ExoPlayerFactory.newSimpleInstance(renderersFactory, trackSelector);
-      player.addListener(new PlayerEventListener());
-      player.addListener(eventLogger);
-      player.addMetadataOutput(eventLogger);
-      player.addAudioDebugListener(eventLogger);
-      player.addVideoDebugListener(eventLogger);
-      player.setPlayWhenReady(shouldAutoPlay);
-
-      playerView.setPlayer(player);
-      playerView.setPlaybackPreparer(this);
-      debugViewHelper = new DebugTextViewHelper(player, debugTextView);
-      debugViewHelper.start();
-    }
-    String action = intent.getAction();
-    Uri[] uris;
-    String[] extensions;
-    if (ACTION_VIEW.equals(action)) {
-      uris = new Uri[]{intent.getData()};
-      extensions = new String[]{intent.getStringExtra(EXTENSION_EXTRA)};
-    } else if (ACTION_VIEW_LIST.equals(action)) {
-      String[] uriStrings = intent.getStringArrayExtra(URI_LIST_EXTRA);
-      uris = new Uri[uriStrings.length];
-      for (int i = 0; i < uriStrings.length; i++) {
-        uris[i] = Uri.parse(uriStrings[i]);
-      }
-      extensions = intent.getStringArrayExtra(EXTENSION_LIST_EXTRA);
-      if (extensions == null) {
-        extensions = new String[uriStrings.length];
-      }
-    } else {
-      showToast(getString(R.string.unexpected_intent_action, action));
-      return;
-    }
-    if (Util.maybeRequestReadExternalStoragePermission(this, uris)) {
-      // The player will be reinitialized if the permission is granted.
-      return;
     }
-    MediaSource[] mediaSources = new MediaSource[uris.length];
-    for (int i = 0; i < uris.length; i++) {
-      mediaSources[i] = buildMediaSource(uris[i], extensions[i], mainHandler, eventLogger);
-    }
-    MediaSource mediaSource = mediaSources.length == 1 ? mediaSources[0]
-        : new ConcatenatingMediaSource(mediaSources);
-    String adTagUriString = intent.getStringExtra(AD_TAG_URI_EXTRA);
-    if (adTagUriString != null) {
-      Uri adTagUri = Uri.parse(adTagUriString);
-      if (!adTagUri.equals(loadedAdTagUri)) {
-        releaseAdsLoader();
-        loadedAdTagUri = adTagUri;
-      }
-      MediaSource adsMediaSource = createAdsMediaSource(mediaSource, Uri.parse(adTagUriString));
-      if (adsMediaSource != null) {
-        mediaSource = adsMediaSource;
-      } else {
-        showToast(R.string.ima_not_loaded);
-      }
-    } else {
-      releaseAdsLoader();
+
+    // Activity input
+
+    @Override
+    public boolean dispatchKeyEvent(KeyEvent event) {
+        // See whether the player view wants to handle media or DPAD keys events.
+        return playerView.dispatchKeyEvent(event) || super.dispatchKeyEvent(event);
     }
-    boolean haveResumePosition = resumeWindow != C.INDEX_UNSET;
-    if (haveResumePosition) {
-      player.seekTo(resumeWindow, resumePosition);
+
+    // OnClickListener methods
+
+    @Override
+    public void onClick(View view) {
+        if (view.getParent() == debugRootView) {
+            MappedTrackInfo mappedTrackInfo = trackSelector.getCurrentMappedTrackInfo();
+            if (mappedTrackInfo != null) {
+                trackSelectionHelper.showSelectionDialog(
+                        this, ((Button) view).getText(), mappedTrackInfo, (int) view.getTag());
+            }
+        }
     }
-    player.prepare(mediaSource, !haveResumePosition, false);
-    inErrorState = false;
-    updateButtonVisibilities();
-  }
-
-  private MediaSource buildMediaSource(
-      Uri uri,
-      String overrideExtension,
-      @Nullable Handler handler,
-      @Nullable MediaSourceEventListener listener) {
-    @ContentType int type = TextUtils.isEmpty(overrideExtension) ? Util.inferContentType(uri)
-        : Util.inferContentType("." + overrideExtension);
-    switch (type) {
-      case C.TYPE_DASH:
-        return new DashMediaSource.Factory(
-                new DefaultDashChunkSource.Factory(mediaDataSourceFactory),
-                buildDataSourceFactory(false))
-            .createMediaSource(uri, handler, listener);
-      case C.TYPE_SS:
-        return new SsMediaSource.Factory(
-                new DefaultSsChunkSource.Factory(mediaDataSourceFactory),
-                buildDataSourceFactory(false))
-            .createMediaSource(uri, handler, listener);
-      case C.TYPE_HLS:
-        return new HlsMediaSource.Factory(mediaDataSourceFactory)
-            .createMediaSource(uri, handler, listener);
-      case C.TYPE_OTHER:
-        return new ExtractorMediaSource.Factory(mediaDataSourceFactory)
-            .createMediaSource(uri, handler, listener);
-      default: {
-        throw new IllegalStateException("Unsupported type: " + type);
-      }
+
+    // PlaybackControlView.PlaybackPreparer implementation
+
+    @Override
+    public void preparePlayback() {
+        initializePlayer();
     }
-  }
-
-  private DrmSessionManager<FrameworkMediaCrypto> buildDrmSessionManagerV18(UUID uuid,
-      String licenseUrl, String[] keyRequestPropertiesArray, boolean multiSession)
-      throws UnsupportedDrmException {
-    HttpMediaDrmCallback drmCallback = new HttpMediaDrmCallback(licenseUrl,
-        buildHttpDataSourceFactory(false));
-    if (keyRequestPropertiesArray != null) {
-      for (int i = 0; i < keyRequestPropertiesArray.length - 1; i += 2) {
-        drmCallback.setKeyRequestProperty(keyRequestPropertiesArray[i],
-            keyRequestPropertiesArray[i + 1]);
-      }
+
+    // PlaybackControlView.VisibilityListener implementation
+
+    @Override
+    public void onVisibilityChange(int visibility) {
+        debugRootView.setVisibility(visibility);
     }
-    return new DefaultDrmSessionManager<>(uuid, FrameworkMediaDrm.newInstance(uuid), drmCallback,
-        null, mainHandler, eventLogger, multiSession);
-  }
-
-  private void releasePlayer() {
-    if (player != null) {
-      debugViewHelper.stop();
-      debugViewHelper = null;
-      shouldAutoPlay = player.getPlayWhenReady();
-      updateResumePosition();
-      player.release();
-      player = null;
-      trackSelector = null;
-      trackSelectionHelper = null;
-      eventLogger = null;
+
+    // Internal methods
+
+    private void initializePlayer() {
+        Intent intent = getIntent();
+        boolean needNewPlayer = player == null;
+        if (needNewPlayer) {
+            TrackSelection.Factory adaptiveTrackSelectionFactory =
+                    new AdaptiveTrackSelection.Factory(BANDWIDTH_METER);
+            trackSelector = new DefaultTrackSelector(adaptiveTrackSelectionFactory);
+            trackSelectionHelper = new TrackSelectionHelper(trackSelector, adaptiveTrackSelectionFactory);
+
+            lastSeenTrackGroupArray = null;
+            eventLogger = new EventLogger(trackSelector);
+
+            @DefaultRenderersFactory.ExtensionRendererMode int extensionRendererMode = DefaultRenderersFactory.EXTENSION_RENDERER_MODE_OFF;
+            DefaultRenderersFactory renderersFactory = new DefaultRenderersFactory(this,
+                    null, extensionRendererMode);
+
+            player = ExoPlayerFactory.newSimpleInstance(renderersFactory, trackSelector);
+            player.addListener(new PlayerEventListener());
+            player.addListener(eventLogger);
+            player.addMetadataOutput(eventLogger);
+            player.addAudioDebugListener(eventLogger);
+            player.addVideoDebugListener(eventLogger);
+            player.setPlayWhenReady(shouldAutoPlay);
+
+            playerView.setPlayer(player);
+            playerView.setPlaybackPreparer(this);
+            debugViewHelper = new DebugTextViewHelper(player, debugTextView);
+            debugViewHelper.start();
+        }
+        String action = intent.getAction();
+
+        if (ACTION_VIEW.equals(action)) {
+            uris = new Uri[]{intent.getData()};
+        } else {
+            showToast(getString(R.string.unexpected_intent_action, action));
+            return;
+        }
+        if (Util.maybeRequestReadExternalStoragePermission(this, uris)) {
+            // The player will be reinitialized if the permission is granted.
+            return;
+        }
+        MediaSource[] mediaSources = new MediaSource[uris.length];
+        for (int i = 0; i < uris.length; i++) {
+            mediaSources[i] = buildMediaSource(uris[i], mainHandler, eventLogger);
+        }
+        MediaSource mediaSource = mediaSources.length == 1 ? mediaSources[0]
+                : new ConcatenatingMediaSource(mediaSources);
+
+
+        boolean haveResumePosition = resumeWindow != C.INDEX_UNSET;
+        if (haveResumePosition) {
+            player.seekTo(resumeWindow, resumePosition);
+        }
+        player.prepare(mediaSource, !haveResumePosition, false);
+        inErrorState = false;
+        updateButtonVisibilities();
     }
-  }
-
-  private void updateResumePosition() {
-    resumeWindow = player.getCurrentWindowIndex();
-    resumePosition = Math.max(0, player.getContentPosition());
-  }
-
-  private void clearResumePosition() {
-    resumeWindow = C.INDEX_UNSET;
-    resumePosition = C.TIME_UNSET;
-  }
-
-  /**
-   * Returns a new DataSource factory.
-   *
-   * @param useBandwidthMeter Whether to set {@link #BANDWIDTH_METER} as a listener to the new
-   *     DataSource factory.
-   * @return A new DataSource factory.
-   */
-  private DataSource.Factory buildDataSourceFactory(boolean useBandwidthMeter) {
-    return ((DemoApplication) getApplication())
-        .buildDataSourceFactory(useBandwidthMeter ? BANDWIDTH_METER : null);
-  }
-
-  /**
-   * Returns a new HttpDataSource factory.
-   *
-   * @param useBandwidthMeter Whether to set {@link #BANDWIDTH_METER} as a listener to the new
-   *     DataSource factory.
-   * @return A new HttpDataSource factory.
-   */
-  private HttpDataSource.Factory buildHttpDataSourceFactory(boolean useBandwidthMeter) {
-    return ((DemoApplication) getApplication())
-        .buildHttpDataSourceFactory(useBandwidthMeter ? BANDWIDTH_METER : null);
-  }
-
-  /** Returns an ads media source, reusing the ads loader if one exists. */
-  private @Nullable MediaSource createAdsMediaSource(MediaSource mediaSource, Uri adTagUri) {
-    // Load the extension source using reflection so the demo app doesn't have to depend on it.
-    // The ads loader is reused for multiple playbacks, so that ad playback can resume.
-    try {
-      Class<?> loaderClass = Class.forName("com.google.android.exoplayer2.ext.ima.ImaAdsLoader");
-      if (adsLoader == null) {
-        // Full class names used so the LINT.IfChange rule triggers should any of the classes move.
-        // LINT.IfChange
-        Constructor<? extends AdsLoader> loaderConstructor =
-            loaderClass
-                .asSubclass(AdsLoader.class)
-                .getConstructor(android.content.Context.class, android.net.Uri.class);
-        // LINT.ThenChange(../../../../../../../../proguard-rules.txt)
-        adsLoader = loaderConstructor.newInstance(this, adTagUri);
-        adUiViewGroup = new FrameLayout(this);
-        // The demo app has a non-null overlay frame layout.
-        playerView.getOverlayFrameLayout().addView(adUiViewGroup);
-      }
-      AdsMediaSource.MediaSourceFactory adMediaSourceFactory =
-          new AdsMediaSource.MediaSourceFactory() {
-            @Override
-            public MediaSource createMediaSource(
-                Uri uri, @Nullable Handler handler, @Nullable MediaSourceEventListener listener) {
-              return PlayerActivity.this.buildMediaSource(
-                  uri, /* overrideExtension= */ null, handler, listener);
-            }
 
-            @Override
-            public int[] getSupportedTypes() {
-              return new int[] {C.TYPE_DASH, C.TYPE_SS, C.TYPE_HLS, C.TYPE_OTHER};
-            }
-          };
-      return new AdsMediaSource(
-          mediaSource, adMediaSourceFactory, adsLoader, adUiViewGroup, mainHandler, eventLogger);
-    } catch (ClassNotFoundException e) {
-      // IMA extension not loaded.
-      return null;
-    } catch (Exception e) {
-      throw new RuntimeException(e);
+    private MediaSource buildMediaSource(
+            Uri uri,
+            @Nullable Handler handler,
+            @Nullable MediaSourceEventListener listener) {
+        @ContentType int type = Util.inferContentType(uri);
+        if (type == C.TYPE_DASH) {
+            return new DashMediaSource.Factory(
+                    new DefaultDashChunkSource.Factory(mediaDataSourceFactory),
+                    buildDataSourceFactory(false))
+                    .createMediaSource(uri, handler, listener);
+        } else {
+            throw new IllegalStateException("Unsupported type: " + type);
+        }
     }
-  }
-
-  private void releaseAdsLoader() {
-    if (adsLoader != null) {
-      adsLoader.release();
-      adsLoader = null;
-      loadedAdTagUri = null;
-      playerView.getOverlayFrameLayout().removeAllViews();
+
+    private void releasePlayer() {
+        if (player != null) {
+            debugViewHelper.stop();
+            debugViewHelper = null;
+            shouldAutoPlay = player.getPlayWhenReady();
+            updateResumePosition();
+            player.release();
+            player = null;
+            trackSelector = null;
+            trackSelectionHelper = null;
+            eventLogger = null;
+        }
     }
-  }
 
-  // User controls
+    private void updateResumePosition() {
+        resumeWindow = player.getCurrentWindowIndex();
+        resumePosition = Math.max(0, player.getContentPosition());
+    }
 
-  private void updateButtonVisibilities() {
-    debugRootView.removeAllViews();
-    if (player == null) {
-      return;
+    private void clearResumePosition() {
+        resumeWindow = C.INDEX_UNSET;
+        resumePosition = C.TIME_UNSET;
     }
 
-    MappedTrackInfo mappedTrackInfo = trackSelector.getCurrentMappedTrackInfo();
-    if (mappedTrackInfo == null) {
-      return;
+    /**
+     * Returns a new DataSource factory.
+     *
+     * @param useBandwidthMeter Whether to set {@link #BANDWIDTH_METER} as a listener to the new
+     *                          DataSource factory.
+     * @return A new DataSource factory.
+     */
+    private DataSource.Factory buildDataSourceFactory(boolean useBandwidthMeter) {
+        return ((DemoApplication) getApplication())
+                .buildDataSourceFactory(useBandwidthMeter ? BANDWIDTH_METER : null);
     }
 
-    for (int i = 0; i < mappedTrackInfo.length; i++) {
-      TrackGroupArray trackGroups = mappedTrackInfo.getTrackGroups(i);
-      if (trackGroups.length != 0) {
-        Button button = new Button(this);
-        int label;
-        switch (player.getRendererType(i)) {
-          case C.TRACK_TYPE_AUDIO:
-            label = R.string.audio;
-            break;
-          case C.TRACK_TYPE_VIDEO:
-            label = R.string.video;
-            break;
-          case C.TRACK_TYPE_TEXT:
-            label = R.string.text;
-            break;
-          default:
-            continue;
-        }
-        button.setText(label);
-        button.setTag(i);
-        button.setOnClickListener(this);
-        debugRootView.addView(button);
-      }
+    /**
+     * Returns a new HttpDataSource factory.
+     *
+     * @param useBandwidthMeter Whether to set {@link #BANDWIDTH_METER} as a listener to the new
+     *                          DataSource factory.
+     * @return A new HttpDataSource factory.
+     */
+    private HttpDataSource.Factory buildHttpDataSourceFactory(boolean useBandwidthMeter) {
+        return ((DemoApplication) getApplication())
+                .buildHttpDataSourceFactory(useBandwidthMeter ? BANDWIDTH_METER : null);
     }
-  }
 
-  private void showControls() {
-    debugRootView.setVisibility(View.VISIBLE);
-  }
+    // User controls
 
-  private void showToast(int messageId) {
-    showToast(getString(messageId));
-  }
+    private void updateButtonVisibilities() {
+        debugRootView.removeAllViews();
+        if (player == null) {
+            return;
+        }
 
-  private void showToast(String message) {
-    Toast.makeText(getApplicationContext(), message, Toast.LENGTH_LONG).show();
-  }
+        MappedTrackInfo mappedTrackInfo = trackSelector.getCurrentMappedTrackInfo();
+        if (mappedTrackInfo == null) {
+            return;
+        }
 
-  private static boolean isBehindLiveWindow(ExoPlaybackException e) {
-    if (e.type != ExoPlaybackException.TYPE_SOURCE) {
-      return false;
+        for (int i = 0; i < mappedTrackInfo.length; i++) {
+            TrackGroupArray trackGroups = mappedTrackInfo.getTrackGroups(i);
+            if (trackGroups.length != 0) {
+                Button button = new Button(this);
+                int label;
+                switch (player.getRendererType(i)) {
+                    case C.TRACK_TYPE_AUDIO:
+                        label = R.string.audio;
+                        break;
+                    case C.TRACK_TYPE_VIDEO:
+                        label = R.string.video;
+                        break;
+                    case C.TRACK_TYPE_TEXT:
+                        label = R.string.text;
+                        break;
+                    default:
+                        continue;
+                }
+                button.setText(label);
+                button.setTag(i);
+                button.setOnClickListener(this);
+                debugRootView.addView(button);
+            }
+        }
+        downloadClickedListener = new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                new DashDownload().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, uris[0]);
+            }
+        };
+        Button button = new Button(this);
+        button.setText("Download");
+        button.setOnClickListener(downloadClickedListener);
+        debugRootView.addView(button);
     }
-    Throwable cause = e.getSourceException();
-    while (cause != null) {
-      if (cause instanceof BehindLiveWindowException) {
-        return true;
-      }
-      cause = cause.getCause();
+
+    private void showControls() {
+        debugRootView.setVisibility(View.VISIBLE);
     }
-    return false;
-  }
 
-  private class PlayerEventListener extends Player.DefaultEventListener {
+    private void showToast(int messageId) {
+        showToast(getString(messageId));
+    }
 
-    @Override
-    public void onPlayerStateChanged(boolean playWhenReady, int playbackState) {
-      if (playbackState == Player.STATE_ENDED) {
-        showControls();
-      }
-      updateButtonVisibilities();
+    private void showToast(String message) {
+        Toast.makeText(getApplicationContext(), message, Toast.LENGTH_LONG).show();
     }
 
-    @Override
-    public void onPositionDiscontinuity(@Player.DiscontinuityReason int reason) {
-      if (inErrorState) {
-        // This will only occur if the user has performed a seek whilst in the error state. Update
-        // the resume position so that if the user then retries, playback will resume from the
-        // position to which they seeked.
-        updateResumePosition();
-      }
+    private static boolean isBehindLiveWindow(ExoPlaybackException e) {
+        if (e.type != ExoPlaybackException.TYPE_SOURCE) {
+            return false;
+        }
+        Throwable cause = e.getSourceException();
+        while (cause != null) {
+            if (cause instanceof BehindLiveWindowException) {
+                return true;
+            }
+            cause = cause.getCause();
+        }
+        return false;
     }
 
-    @Override
-    public void onPlayerError(ExoPlaybackException e) {
-      String errorString = null;
-      if (e.type == ExoPlaybackException.TYPE_RENDERER) {
-        Exception cause = e.getRendererException();
-        if (cause instanceof DecoderInitializationException) {
-          // Special case for decoder initialization failures.
-          DecoderInitializationException decoderInitializationException =
-              (DecoderInitializationException) cause;
-          if (decoderInitializationException.decoderName == null) {
-            if (decoderInitializationException.getCause() instanceof DecoderQueryException) {
-              errorString = getString(R.string.error_querying_decoders);
-            } else if (decoderInitializationException.secureDecoderRequired) {
-              errorString = getString(R.string.error_no_secure_decoder,
-                  decoderInitializationException.mimeType);
+    private class PlayerEventListener extends Player.DefaultEventListener {
+
+        @Override
+        public void onPlayerStateChanged(boolean playWhenReady, int playbackState) {
+            if (playbackState == Player.STATE_ENDED) {
+                showControls();
+            }
+            updateButtonVisibilities();
+            changeTrack();
+        }
+
+        @Override
+        public void onPositionDiscontinuity(@Player.DiscontinuityReason int reason) {
+            if (inErrorState) {
+                // This will only occur if the user has performed a seek whilst in the error state. Update
+                // the resume position so that if the user then retries, playback will resume from the
+                // position to which they seeked.
+                updateResumePosition();
+            }
+        }
+
+        @Override
+        public void onPlayerError(ExoPlaybackException e) {
+            String errorString = null;
+            if (e.type == ExoPlaybackException.TYPE_RENDERER) {
+                Exception cause = e.getRendererException();
+                if (cause instanceof DecoderInitializationException) {
+                    // Special case for decoder initialization failures.
+                    DecoderInitializationException decoderInitializationException =
+                            (DecoderInitializationException) cause;
+                    if (decoderInitializationException.decoderName == null) {
+                        if (decoderInitializationException.getCause() instanceof DecoderQueryException) {
+                            errorString = getString(R.string.error_querying_decoders);
+                        } else if (decoderInitializationException.secureDecoderRequired) {
+                            errorString = getString(R.string.error_no_secure_decoder,
+                                    decoderInitializationException.mimeType);
+                        } else {
+                            errorString = getString(R.string.error_no_decoder,
+                                    decoderInitializationException.mimeType);
+                        }
+                    } else {
+                        errorString = getString(R.string.error_instantiating_decoder,
+                                decoderInitializationException.decoderName);
+                    }
+                }
+            }
+            if (errorString != null) {
+                showToast(errorString);
+            }
+            inErrorState = true;
+            if (isBehindLiveWindow(e)) {
+                clearResumePosition();
+                initializePlayer();
             } else {
-              errorString = getString(R.string.error_no_decoder,
-                  decoderInitializationException.mimeType);
+                updateResumePosition();
+                updateButtonVisibilities();
+                showControls();
             }
-          } else {
-            errorString = getString(R.string.error_instantiating_decoder,
-                decoderInitializationException.decoderName);
-          }
         }
-      }
-      if (errorString != null) {
-        showToast(errorString);
-      }
-      inErrorState = true;
-      if (isBehindLiveWindow(e)) {
-        clearResumePosition();
-        initializePlayer();
-      } else {
-        updateResumePosition();
-        updateButtonVisibilities();
-        showControls();
-      }
+
+        @Override
+        @SuppressWarnings("ReferenceEquality")
+        public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray trackSelections) {
+            updateButtonVisibilities();
+            if (trackGroups != lastSeenTrackGroupArray) {
+                MappedTrackInfo mappedTrackInfo = trackSelector.getCurrentMappedTrackInfo();
+                if (mappedTrackInfo != null) {
+                    if (mappedTrackInfo.getTrackTypeRendererSupport(C.TRACK_TYPE_VIDEO)
+                            == MappedTrackInfo.RENDERER_SUPPORT_UNSUPPORTED_TRACKS) {
+                        showToast(R.string.error_unsupported_video);
+                    }
+                    if (mappedTrackInfo.getTrackTypeRendererSupport(C.TRACK_TYPE_AUDIO)
+                            == MappedTrackInfo.RENDERER_SUPPORT_UNSUPPORTED_TRACKS) {
+                        showToast(R.string.error_unsupported_audio);
+                    }
+                }
+                lastSeenTrackGroupArray = trackGroups;
+            }
+        }
+
     }
 
-    @Override
-    @SuppressWarnings("ReferenceEquality")
-    public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray trackSelections) {
-      updateButtonVisibilities();
-      if (trackGroups != lastSeenTrackGroupArray) {
-        MappedTrackInfo mappedTrackInfo = trackSelector.getCurrentMappedTrackInfo();
-        if (mappedTrackInfo != null) {
-          if (mappedTrackInfo.getTrackTypeRendererSupport(C.TRACK_TYPE_VIDEO)
-              == MappedTrackInfo.RENDERER_SUPPORT_UNSUPPORTED_TRACKS) {
-            showToast(R.string.error_unsupported_video);
-          }
-          if (mappedTrackInfo.getTrackTypeRendererSupport(C.TRACK_TYPE_AUDIO)
-              == MappedTrackInfo.RENDERER_SUPPORT_UNSUPPORTED_TRACKS) {
-            showToast(R.string.error_unsupported_audio);
-          }
+    private void changeTrack() {
+        if (trackChanged) {
+            trackSelectionHelper.selectTrack(0, 0);
+            trackSelectionHelper.selectTrack(1, 0);
+            trackChanged = true;
         }
-        lastSeenTrackGroupArray = trackGroups;
-      }
     }
 
-  }
 
+    class DashDownload extends AsyncTask<Uri, Void, Void> {
+
+        @Override
+        protected Void doInBackground(Uri... videos) {
+
+            File dir = getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS);
+            SimpleCache cache = new SimpleCache(dir, new NoOpCacheEvictor());
+            DefaultHttpDataSourceFactory factory = new DefaultHttpDataSourceFactory("ExoPlayer", null);
+            DownloaderConstructorHelper constructorHelper = new DownloaderConstructorHelper(cache, factory);
+
+            DashDownloader dashDownloader = new DashDownloader(videos[0], constructorHelper);
+
+            try {
+                RepresentationKey[] keys = dashDownloader.getAllRepresentationKeys();
+                RepresentationKey[] downloadKeys = new RepresentationKey[2];
+                for (RepresentationKey key : keys) {
+                    if (key.adaptationSetIndex == 1 && key.representationIndex == 0) {
+                        downloadKeys[1] = key;
+                    } else if (key.adaptationSetIndex == 0 && key.representationIndex == 0) {
+                        downloadKeys[0] = key;
+                    }
+                }
+                DashManifest newManifest = dashDownloader.getManifest().copy(Arrays.asList(downloadKeys));
+
+                dashDownloader.selectRepresentations(downloadKeys);
+                dashDownloader.download(new Downloader.ProgressListener() {
+                    @Override
+                    public void onDownloadProgress(Downloader downloader, float downloadPercentage, long downloadedBytes) {
+                        Log.d("Downloading", downloadPercentage + " % ");
+
+                        if (downloadPercentage == 100F) {
+                            Log.d("Downloading", "Finished");
+                        }
+                    }
+                });
+            } catch (IOException e) {
+                e.printStackTrace();
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+            }
+            return null;
+        }
+    }
 }
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
index 3895ad8e84..eef20e16a0 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
@@ -32,6 +32,7 @@
 import android.widget.ExpandableListView.OnChildClickListener;
 import android.widget.TextView;
 import android.widget.Toast;
+
 import com.google.android.exoplayer2.ParserException;
 import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.DataSourceInputStream;
@@ -39,6 +40,7 @@
 import com.google.android.exoplayer2.upstream.DefaultDataSource;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.Util;
+
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
@@ -52,410 +54,295 @@
  */
 public class SampleChooserActivity extends Activity {
 
-  private static final String TAG = "SampleChooserActivity";
-
-  @Override
-  public void onCreate(Bundle savedInstanceState) {
-    super.onCreate(savedInstanceState);
-    setContentView(R.layout.sample_chooser_activity);
-    Intent intent = getIntent();
-    String dataUri = intent.getDataString();
-    String[] uris;
-    if (dataUri != null) {
-      uris = new String[] {dataUri};
-    } else {
-      ArrayList<String> uriList = new ArrayList<>();
-      AssetManager assetManager = getAssets();
-      try {
-        for (String asset : assetManager.list("")) {
-          if (asset.endsWith(".exolist.json")) {
-            uriList.add("asset:///" + asset);
-          }
+    private static final String TAG = "SampleChooserActivity";
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.sample_chooser_activity);
+        Intent intent = getIntent();
+        String dataUri = intent.getDataString();
+        String[] uris;
+        if (dataUri != null) {
+            uris = new String[]{dataUri};
+        } else {
+            ArrayList<String> uriList = new ArrayList<>();
+            AssetManager assetManager = getAssets();
+            try {
+                for (String asset : assetManager.list("")) {
+                    if (asset.endsWith(".exolist.json")) {
+                        uriList.add("asset:///" + asset);
+                    }
+                }
+            } catch (IOException e) {
+                Toast.makeText(getApplicationContext(), R.string.sample_list_load_error, Toast.LENGTH_LONG)
+                        .show();
+            }
+            uris = new String[uriList.size()];
+            uriList.toArray(uris);
+            Arrays.sort(uris);
         }
-      } catch (IOException e) {
-        Toast.makeText(getApplicationContext(), R.string.sample_list_load_error, Toast.LENGTH_LONG)
-            .show();
-      }
-      uris = new String[uriList.size()];
-      uriList.toArray(uris);
-      Arrays.sort(uris);
+        SampleListLoader loaderTask = new SampleListLoader();
+        loaderTask.postExecuteCallback(new SampleListLoaderCallback());
+        loaderTask.execute(uris);
     }
-    SampleListLoader loaderTask = new SampleListLoader();
-    loaderTask.execute(uris);
-  }
-
-  private void onSampleGroups(final List<SampleGroup> groups, boolean sawError) {
-    if (sawError) {
-      Toast.makeText(getApplicationContext(), R.string.sample_list_load_error, Toast.LENGTH_LONG)
-          .show();
-    }
-    ExpandableListView sampleList = findViewById(R.id.sample_list);
-    sampleList.setAdapter(new SampleAdapter(this, groups));
-    sampleList.setOnChildClickListener(new OnChildClickListener() {
-      @Override
-      public boolean onChildClick(ExpandableListView parent, View view, int groupPosition,
-          int childPosition, long id) {
-        onSampleSelected(groups.get(groupPosition).samples.get(childPosition));
-        return true;
-      }
-    });
-  }
-
-  private void onSampleSelected(Sample sample) {
-    startActivity(sample.buildIntent(this));
-  }
-
-  private final class SampleListLoader extends AsyncTask<String, Void, List<SampleGroup>> {
-
-    private boolean sawError;
 
-    @Override
-    protected List<SampleGroup> doInBackground(String... uris) {
-      List<SampleGroup> result = new ArrayList<>();
-      Context context = getApplicationContext();
-      String userAgent = Util.getUserAgent(context, "ExoPlayerDemo");
-      DataSource dataSource = new DefaultDataSource(context, null, userAgent, false);
-      for (String uri : uris) {
-        DataSpec dataSpec = new DataSpec(Uri.parse(uri));
-        InputStream inputStream = new DataSourceInputStream(dataSource, dataSpec);
-        try {
-          readSampleGroups(new JsonReader(new InputStreamReader(inputStream, "UTF-8")), result);
-        } catch (Exception e) {
-          Log.e(TAG, "Error loading sample list: " + uri, e);
-          sawError = true;
-        } finally {
-          Util.closeQuietly(dataSource);
+    private class SampleListLoaderCallback {
+
+        private void postExecuteCallback(final List<SampleGroup> groups, boolean sawError) {
+            onSampleGroups(groups, sawError);
         }
-      }
-      return result;
+
     }
 
-    @Override
-    protected void onPostExecute(List<SampleGroup> result) {
-      onSampleGroups(result, sawError);
+    private void onSampleGroups(final List<SampleGroup> groups, boolean sawError) {
+        if (sawError) {
+            Toast.makeText(getApplicationContext(), R.string.sample_list_load_error, Toast.LENGTH_LONG)
+                    .show();
+        }
+        ExpandableListView sampleList = findViewById(R.id.sample_list);
+        sampleList.setAdapter(new SampleAdapter(this, groups));
+        sampleList.setOnChildClickListener(new OnChildClickListener() {
+            @Override
+            public boolean onChildClick(ExpandableListView parent, View view, int groupPosition,
+                                        int childPosition, long id) {
+                onSampleSelected(groups.get(groupPosition).samples.get(childPosition));
+                return true;
+            }
+        });
     }
 
-    private void readSampleGroups(JsonReader reader, List<SampleGroup> groups) throws IOException {
-      reader.beginArray();
-      while (reader.hasNext()) {
-        readSampleGroup(reader, groups);
-      }
-      reader.endArray();
+    private void onSampleSelected(Sample sample) {
+        startActivity(sample.buildIntent(this));
     }
 
-    private void readSampleGroup(JsonReader reader, List<SampleGroup> groups) throws IOException {
-      String groupName = "";
-      ArrayList<Sample> samples = new ArrayList<>();
-
-      reader.beginObject();
-      while (reader.hasNext()) {
-        String name = reader.nextName();
-        switch (name) {
-          case "name":
-            groupName = reader.nextString();
-            break;
-          case "samples":
+    private final static class SampleListLoader extends AsyncTask<String, Void, List<SampleGroup>> {
+
+        private boolean sawError;
+        private SampleListLoaderCallback sampleListLoaderCallback;
+
+        @Override
+        protected List<SampleGroup> doInBackground(String... uris) {
+            List<SampleGroup> result = new ArrayList<>();
+
+            String userAgent = DemoApplication.userAgent;
+            DataSource dataSource = new DefaultDataSource(DemoApplication.instance, null, userAgent, false);
+            for (String uri : uris) {
+                DataSpec dataSpec = new DataSpec(Uri.parse(uri));
+                InputStream inputStream = new DataSourceInputStream(dataSource, dataSpec);
+                try {
+                    readSampleGroups(new JsonReader(new InputStreamReader(inputStream, "UTF-8")), result);
+                } catch (Exception e) {
+                    Log.e(TAG, "Error loading sample list: " + uri, e);
+                    sawError = true;
+                } finally {
+                    Util.closeQuietly(dataSource);
+                }
+            }
+            return result;
+        }
+
+        @Override
+        protected void onPostExecute(List<SampleGroup> result) {
+            if (sampleListLoaderCallback != null)
+                sampleListLoaderCallback.postExecuteCallback(result, sawError);
+        }
+
+        private void readSampleGroups(JsonReader reader, List<SampleGroup> groups) throws IOException {
             reader.beginArray();
             while (reader.hasNext()) {
-              samples.add(readEntry(reader, false));
+                readSampleGroup(reader, groups);
             }
             reader.endArray();
-            break;
-          case "_comment":
-            reader.nextString(); // Ignore.
-            break;
-          default:
-            throw new ParserException("Unsupported name: " + name);
         }
-      }
-      reader.endObject();
 
-      SampleGroup group = getGroup(groupName, groups);
-      group.samples.addAll(samples);
-    }
+        private void readSampleGroup(JsonReader reader, List<SampleGroup> groups) throws IOException {
+            String groupName = "";
+            ArrayList<Sample> samples = new ArrayList<>();
 
-    private Sample readEntry(JsonReader reader, boolean insidePlaylist) throws IOException {
-      String sampleName = null;
-      String uri = null;
-      String extension = null;
-      UUID drmUuid = null;
-      String drmLicenseUrl = null;
-      String[] drmKeyRequestProperties = null;
-      boolean drmMultiSession = false;
-      boolean preferExtensionDecoders = false;
-      ArrayList<UriSample> playlistSamples = null;
-      String adTagUri = null;
-
-      reader.beginObject();
-      while (reader.hasNext()) {
-        String name = reader.nextName();
-        switch (name) {
-          case "name":
-            sampleName = reader.nextString();
-            break;
-          case "uri":
-            uri = reader.nextString();
-            break;
-          case "extension":
-            extension = reader.nextString();
-            break;
-          case "drm_scheme":
-            Assertions.checkState(!insidePlaylist, "Invalid attribute on nested item: drm_scheme");
-            String drmScheme = reader.nextString();
-            drmUuid = Util.getDrmUuid(drmScheme);
-            Assertions.checkState(drmUuid != null, "Invalid drm_scheme: " + drmScheme);
-            break;
-          case "drm_license_url":
-            Assertions.checkState(!insidePlaylist,
-                "Invalid attribute on nested item: drm_license_url");
-            drmLicenseUrl = reader.nextString();
-            break;
-          case "drm_key_request_properties":
-            Assertions.checkState(!insidePlaylist,
-                "Invalid attribute on nested item: drm_key_request_properties");
-            ArrayList<String> drmKeyRequestPropertiesList = new ArrayList<>();
             reader.beginObject();
             while (reader.hasNext()) {
-              drmKeyRequestPropertiesList.add(reader.nextName());
-              drmKeyRequestPropertiesList.add(reader.nextString());
+                String name = reader.nextName();
+                switch (name) {
+                    case "name":
+                        groupName = reader.nextString();
+                        break;
+                    case "samples":
+                        reader.beginArray();
+                        while (reader.hasNext()) {
+                            samples.add(readEntry(reader));
+                        }
+                        reader.endArray();
+                        break;
+                    default:
+                        throw new ParserException("Unsupported name: " + name);
+                }
             }
             reader.endObject();
-            drmKeyRequestProperties = drmKeyRequestPropertiesList.toArray(new String[0]);
-            break;
-          case "drm_multi_session":
-            drmMultiSession = reader.nextBoolean();
-            break;
-          case "prefer_extension_decoders":
-            Assertions.checkState(!insidePlaylist,
-                "Invalid attribute on nested item: prefer_extension_decoders");
-            preferExtensionDecoders = reader.nextBoolean();
-            break;
-          case "playlist":
-            Assertions.checkState(!insidePlaylist, "Invalid nesting of playlists");
-            playlistSamples = new ArrayList<>();
-            reader.beginArray();
-            while (reader.hasNext()) {
-              playlistSamples.add((UriSample) readEntry(reader, true));
-            }
-            reader.endArray();
-            break;
-          case "ad_tag_uri":
-            adTagUri = reader.nextString();
-            break;
-          default:
-            throw new ParserException("Unsupported attribute name: " + name);
-        }
-      }
-      reader.endObject();
-      DrmInfo drmInfo = drmUuid == null ? null : new DrmInfo(drmUuid, drmLicenseUrl,
-          drmKeyRequestProperties, drmMultiSession);
-      if (playlistSamples != null) {
-        UriSample[] playlistSamplesArray = playlistSamples.toArray(
-            new UriSample[playlistSamples.size()]);
-        return new PlaylistSample(sampleName, preferExtensionDecoders, drmInfo,
-            playlistSamplesArray);
-      } else {
-        return new UriSample(sampleName, preferExtensionDecoders, drmInfo, uri, extension,
-            adTagUri);
-      }
-    }
 
-    private SampleGroup getGroup(String groupName, List<SampleGroup> groups) {
-      for (int i = 0; i < groups.size(); i++) {
-        if (Util.areEqual(groupName, groups.get(i).title)) {
-          return groups.get(i);
+            SampleGroup group = getGroup(groupName, groups);
+            group.samples.addAll(samples);
         }
-      }
-      SampleGroup group = new SampleGroup(groupName);
-      groups.add(group);
-      return group;
-    }
 
-  }
+        private Sample readEntry(JsonReader reader) throws IOException {
+            String sampleName = null;
+            String uri = null;
 
-  private static final class SampleAdapter extends BaseExpandableListAdapter {
 
-    private final Context context;
-    private final List<SampleGroup> sampleGroups;
-
-    public SampleAdapter(Context context, List<SampleGroup> sampleGroups) {
-      this.context = context;
-      this.sampleGroups = sampleGroups;
-    }
-
-    @Override
-    public Sample getChild(int groupPosition, int childPosition) {
-      return getGroup(groupPosition).samples.get(childPosition);
-    }
+            reader.beginObject();
+            while (reader.hasNext()) {
+                String name = reader.nextName();
+                switch (name) {
+                    case "name":
+                        sampleName = reader.nextString();
+                        break;
+                    case "uri":
+                        uri = reader.nextString();
+                        break;
+                    default:
+                        throw new ParserException("Unsupported attribute name: " + name);
+                }
+            }
+            reader.endObject();
 
-    @Override
-    public long getChildId(int groupPosition, int childPosition) {
-      return childPosition;
-    }
+            return new UriSample(sampleName, uri);
+        }
 
-    @Override
-    public View getChildView(int groupPosition, int childPosition, boolean isLastChild,
-        View convertView, ViewGroup parent) {
-      View view = convertView;
-      if (view == null) {
-        view = LayoutInflater.from(context).inflate(android.R.layout.simple_list_item_1, parent,
-            false);
-      }
-      ((TextView) view).setText(getChild(groupPosition, childPosition).name);
-      return view;
-    }
+        private SampleGroup getGroup(String groupName, List<SampleGroup> groups) {
+            for (int i = 0; i < groups.size(); i++) {
+                if (Util.areEqual(groupName, groups.get(i).title)) {
+                    return groups.get(i);
+                }
+            }
+            SampleGroup group = new SampleGroup(groupName);
+            groups.add(group);
+            return group;
+        }
 
-    @Override
-    public int getChildrenCount(int groupPosition) {
-      return getGroup(groupPosition).samples.size();
+        void postExecuteCallback(SampleListLoaderCallback sampleListLoaderCallback) {
+            this.sampleListLoaderCallback = sampleListLoaderCallback;
+        }
     }
 
-    @Override
-    public SampleGroup getGroup(int groupPosition) {
-      return sampleGroups.get(groupPosition);
-    }
+    private static final class SampleAdapter extends BaseExpandableListAdapter {
 
-    @Override
-    public long getGroupId(int groupPosition) {
-      return groupPosition;
-    }
+        private final Context context;
+        private final List<SampleGroup> sampleGroups;
 
-    @Override
-    public View getGroupView(int groupPosition, boolean isExpanded, View convertView,
-        ViewGroup parent) {
-      View view = convertView;
-      if (view == null) {
-        view = LayoutInflater.from(context).inflate(android.R.layout.simple_expandable_list_item_1,
-            parent, false);
-      }
-      ((TextView) view).setText(getGroup(groupPosition).title);
-      return view;
-    }
+        SampleAdapter(Context context, List<SampleGroup> sampleGroups) {
+            this.context = context;
+            this.sampleGroups = sampleGroups;
+        }
 
-    @Override
-    public int getGroupCount() {
-      return sampleGroups.size();
-    }
+        @Override
+        public Sample getChild(int groupPosition, int childPosition) {
+            return getGroup(groupPosition).samples.get(childPosition);
+        }
 
-    @Override
-    public boolean hasStableIds() {
-      return false;
-    }
+        @Override
+        public long getChildId(int groupPosition, int childPosition) {
+            return childPosition;
+        }
 
-    @Override
-    public boolean isChildSelectable(int groupPosition, int childPosition) {
-      return true;
-    }
+        @Override
+        public View getChildView(int groupPosition, int childPosition, boolean isLastChild,
+                                 View convertView, ViewGroup parent) {
+            View view = convertView;
+            if (view == null) {
+                view = LayoutInflater.from(context).inflate(android.R.layout.simple_list_item_1, parent,
+                        false);
+            }
+            ((TextView) view).setText(getChild(groupPosition, childPosition).name);
+            return view;
+        }
 
-  }
+        @Override
+        public int getChildrenCount(int groupPosition) {
+            return getGroup(groupPosition).samples.size();
+        }
 
-  private static final class SampleGroup {
+        @Override
+        public SampleGroup getGroup(int groupPosition) {
+            return sampleGroups.get(groupPosition);
+        }
 
-    public final String title;
-    public final List<Sample> samples;
+        @Override
+        public long getGroupId(int groupPosition) {
+            return groupPosition;
+        }
 
-    public SampleGroup(String title) {
-      this.title = title;
-      this.samples = new ArrayList<>();
-    }
+        @Override
+        public View getGroupView(int groupPosition, boolean isExpanded, View convertView,
+                                 ViewGroup parent) {
+            View view = convertView;
+            if (view == null) {
+                view = LayoutInflater.from(context).inflate(android.R.layout.simple_expandable_list_item_1,
+                        parent, false);
+            }
+            ((TextView) view).setText(getGroup(groupPosition).title);
+            return view;
+        }
 
-  }
+        @Override
+        public int getGroupCount() {
+            return sampleGroups.size();
+        }
 
-  private static final class DrmInfo {
-    public final UUID drmSchemeUuid;
-    public final String drmLicenseUrl;
-    public final String[] drmKeyRequestProperties;
-    public final boolean drmMultiSession;
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
 
-    public DrmInfo(UUID drmSchemeUuid, String drmLicenseUrl,
-        String[] drmKeyRequestProperties, boolean drmMultiSession) {
-      this.drmSchemeUuid = drmSchemeUuid;
-      this.drmLicenseUrl = drmLicenseUrl;
-      this.drmKeyRequestProperties = drmKeyRequestProperties;
-      this.drmMultiSession = drmMultiSession;
-    }
+        @Override
+        public boolean isChildSelectable(int groupPosition, int childPosition) {
+            return true;
+        }
 
-    public void updateIntent(Intent intent) {
-      Assertions.checkNotNull(intent);
-      intent.putExtra(PlayerActivity.DRM_SCHEME_EXTRA, drmSchemeUuid.toString());
-      intent.putExtra(PlayerActivity.DRM_LICENSE_URL, drmLicenseUrl);
-      intent.putExtra(PlayerActivity.DRM_KEY_REQUEST_PROPERTIES, drmKeyRequestProperties);
-      intent.putExtra(PlayerActivity.DRM_MULTI_SESSION, drmMultiSession);
     }
-  }
 
-  private abstract static class Sample {
-    public final String name;
-    public final boolean preferExtensionDecoders;
-    public final DrmInfo drmInfo;
+    private static final class SampleGroup {
 
-    public Sample(String name, boolean preferExtensionDecoders, DrmInfo drmInfo) {
-      this.name = name;
-      this.preferExtensionDecoders = preferExtensionDecoders;
-      this.drmInfo = drmInfo;
-    }
+        public final String title;
+        public final List<Sample> samples;
 
-    public Intent buildIntent(Context context) {
-      Intent intent = new Intent(context, PlayerActivity.class);
-      intent.putExtra(PlayerActivity.PREFER_EXTENSION_DECODERS, preferExtensionDecoders);
-      if (drmInfo != null) {
-        drmInfo.updateIntent(intent);
-      }
+        SampleGroup(String title) {
+            this.title = title;
+            this.samples = new ArrayList<>();
+        }
 
-      return intent;
     }
 
-  }
 
-  private static final class UriSample extends Sample {
+    private abstract static class Sample {
+        public final String name;
 
-    public final String uri;
-    public final String extension;
-    public final String adTagUri;
+        Sample(String name) {
+            this.name = name;
+        }
 
-    public UriSample(String name, boolean preferExtensionDecoders, DrmInfo drmInfo, String uri,
-        String extension, String adTagUri) {
-      super(name, preferExtensionDecoders, drmInfo);
-      this.uri = uri;
-      this.extension = extension;
-      this.adTagUri = adTagUri;
-    }
+        public Intent buildIntent(Context context) {
+            return new Intent(context, PlayerActivity.class);
+        }
 
-    @Override
-    public Intent buildIntent(Context context) {
-      return super.buildIntent(context)
-          .setData(Uri.parse(uri))
-          .putExtra(PlayerActivity.EXTENSION_EXTRA, extension)
-          .putExtra(PlayerActivity.AD_TAG_URI_EXTRA, adTagUri)
-          .setAction(PlayerActivity.ACTION_VIEW);
     }
 
-  }
+    private static final class UriSample extends Sample {
 
-  private static final class PlaylistSample extends Sample {
+        final String uri;
 
-    public final UriSample[] children;
+        UriSample(String name, String uri) {
+            super(name);
+            this.uri = uri;
+        }
 
-    public PlaylistSample(String name, boolean preferExtensionDecoders, DrmInfo drmInfo,
-        UriSample... children) {
-      super(name, preferExtensionDecoders, drmInfo);
-      this.children = children;
-    }
+        @Override
+        public Intent buildIntent(Context context) {
+            return super.buildIntent(context)
+                    .setData(Uri.parse(uri))
+                    .setAction(PlayerActivity.ACTION_VIEW);
+        }
 
-    @Override
-    public Intent buildIntent(Context context) {
-      String[] uris = new String[children.length];
-      String[] extensions = new String[children.length];
-      for (int i = 0; i < children.length; i++) {
-        uris[i] = children[i].uri;
-        extensions[i] = children[i].extension;
-      }
-      return super.buildIntent(context)
-          .putExtra(PlayerActivity.URI_LIST_EXTRA, uris)
-          .putExtra(PlayerActivity.EXTENSION_LIST_EXTRA, extensions)
-          .setAction(PlayerActivity.ACTION_VIEW_LIST);
     }
 
-  }
 
 }
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/TrackSelectionHelper.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/TrackSelectionHelper.java
index e033b91eef..706cc33d4e 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/TrackSelectionHelper.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/TrackSelectionHelper.java
@@ -26,6 +26,7 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.CheckedTextView;
+
 import com.google.android.exoplayer2.RendererCapabilities;
 import com.google.android.exoplayer2.source.TrackGroup;
 import com.google.android.exoplayer2.source.TrackGroupArray;
@@ -35,256 +36,261 @@
 import com.google.android.exoplayer2.trackselection.MappingTrackSelector.SelectionOverride;
 import com.google.android.exoplayer2.trackselection.RandomTrackSelection;
 import com.google.android.exoplayer2.trackselection.TrackSelection;
+
 import java.util.Arrays;
 
 /**
  * Helper class for displaying track selection dialogs.
  */
 /* package */ final class TrackSelectionHelper implements View.OnClickListener,
-    DialogInterface.OnClickListener {
+        DialogInterface.OnClickListener {
+
+    private static final TrackSelection.Factory FIXED_FACTORY = new FixedTrackSelection.Factory();
+    private static final TrackSelection.Factory RANDOM_FACTORY = new RandomTrackSelection.Factory();
 
-  private static final TrackSelection.Factory FIXED_FACTORY = new FixedTrackSelection.Factory();
-  private static final TrackSelection.Factory RANDOM_FACTORY = new RandomTrackSelection.Factory();
+    private final MappingTrackSelector selector;
+    private final TrackSelection.Factory adaptiveTrackSelectionFactory;
 
-  private final MappingTrackSelector selector;
-  private final TrackSelection.Factory adaptiveTrackSelectionFactory;
+    private MappedTrackInfo trackInfo;
+    private int rendererIndex;
+    private TrackGroupArray trackGroups;
+    private boolean[] trackGroupsAdaptive;
+    private boolean isDisabled;
+    private SelectionOverride override;
 
-  private MappedTrackInfo trackInfo;
-  private int rendererIndex;
-  private TrackGroupArray trackGroups;
-  private boolean[] trackGroupsAdaptive;
-  private boolean isDisabled;
-  private SelectionOverride override;
+    private CheckedTextView disableView;
+    private CheckedTextView defaultView;
+    private CheckedTextView enableRandomAdaptationView;
+    private CheckedTextView[][] trackViews;
 
-  private CheckedTextView disableView;
-  private CheckedTextView defaultView;
-  private CheckedTextView enableRandomAdaptationView;
-  private CheckedTextView[][] trackViews;
+    /**
+     * @param selector                      The track selector.
+     * @param adaptiveTrackSelectionFactory A factory for adaptive {@link TrackSelection}s, or null
+     *                                      if the selection helper should not support adaptive tracks.
+     */
+    public TrackSelectionHelper(MappingTrackSelector selector,
+                                TrackSelection.Factory adaptiveTrackSelectionFactory) {
+        this.selector = selector;
+        this.adaptiveTrackSelectionFactory = adaptiveTrackSelectionFactory;
+    }
 
-  /**
-   * @param selector The track selector.
-   * @param adaptiveTrackSelectionFactory A factory for adaptive {@link TrackSelection}s, or null
-   *     if the selection helper should not support adaptive tracks.
-   */
-  public TrackSelectionHelper(MappingTrackSelector selector,
-      TrackSelection.Factory adaptiveTrackSelectionFactory) {
-    this.selector = selector;
-    this.adaptiveTrackSelectionFactory = adaptiveTrackSelectionFactory;
-  }
+    /**
+     * Shows the selection dialog for a given renderer.
+     *
+     * @param activity      The parent activity.
+     * @param title         The dialog's title.
+     * @param trackInfo     The current track information.
+     * @param rendererIndex The index of the renderer.
+     */
+    public void showSelectionDialog(Activity activity, CharSequence title, MappedTrackInfo trackInfo,
+                                    int rendererIndex) {
+        this.trackInfo = trackInfo;
+        this.rendererIndex = rendererIndex;
 
-  /**
-   * Shows the selection dialog for a given renderer.
-   *
-   * @param activity The parent activity.
-   * @param title The dialog's title.
-   * @param trackInfo The current track information.
-   * @param rendererIndex The index of the renderer.
-   */
-  public void showSelectionDialog(Activity activity, CharSequence title, MappedTrackInfo trackInfo,
-      int rendererIndex) {
-    this.trackInfo = trackInfo;
-    this.rendererIndex = rendererIndex;
+        trackGroups = trackInfo.getTrackGroups(rendererIndex);
+        trackGroupsAdaptive = new boolean[trackGroups.length];
+        for (int i = 0; i < trackGroups.length; i++) {
+            trackGroupsAdaptive[i] = adaptiveTrackSelectionFactory != null
+                    && trackInfo.getAdaptiveSupport(rendererIndex, i, false)
+                    != RendererCapabilities.ADAPTIVE_NOT_SUPPORTED
+                    && trackGroups.get(i).length > 1;
+        }
+        isDisabled = selector.getRendererDisabled(rendererIndex);
+        override = selector.getSelectionOverride(rendererIndex, trackGroups);
 
-    trackGroups = trackInfo.getTrackGroups(rendererIndex);
-    trackGroupsAdaptive = new boolean[trackGroups.length];
-    for (int i = 0; i < trackGroups.length; i++) {
-      trackGroupsAdaptive[i] = adaptiveTrackSelectionFactory != null
-          && trackInfo.getAdaptiveSupport(rendererIndex, i, false)
-              != RendererCapabilities.ADAPTIVE_NOT_SUPPORTED
-          && trackGroups.get(i).length > 1;
+        AlertDialog.Builder builder = new AlertDialog.Builder(activity);
+        builder.setTitle(title)
+                .setView(buildView(builder.getContext()))
+                .setPositiveButton(android.R.string.ok, this)
+                .setNegativeButton(android.R.string.cancel, null)
+                .create()
+                .show();
     }
-    isDisabled = selector.getRendererDisabled(rendererIndex);
-    override = selector.getSelectionOverride(rendererIndex, trackGroups);
-
-    AlertDialog.Builder builder = new AlertDialog.Builder(activity);
-    builder.setTitle(title)
-        .setView(buildView(builder.getContext()))
-        .setPositiveButton(android.R.string.ok, this)
-        .setNegativeButton(android.R.string.cancel, null)
-        .create()
-        .show();
-  }
 
-  @SuppressLint("InflateParams")
-  private View buildView(Context context) {
-    LayoutInflater inflater = LayoutInflater.from(context);
-    View view = inflater.inflate(R.layout.track_selection_dialog, null);
-    ViewGroup root = view.findViewById(R.id.root);
+    @SuppressLint("InflateParams")
+    private View buildView(Context context) {
+        LayoutInflater inflater = LayoutInflater.from(context);
+        View view = inflater.inflate(R.layout.track_selection_dialog, null);
+        ViewGroup root = view.findViewById(R.id.root);
 
-    TypedArray attributeArray = context.getTheme().obtainStyledAttributes(
-        new int[] {android.R.attr.selectableItemBackground});
-    int selectableItemBackgroundResourceId = attributeArray.getResourceId(0, 0);
-    attributeArray.recycle();
+        TypedArray attributeArray = context.getTheme().obtainStyledAttributes(
+                new int[]{android.R.attr.selectableItemBackground});
+        int selectableItemBackgroundResourceId = attributeArray.getResourceId(0, 0);
+        attributeArray.recycle();
 
-    // View for disabling the renderer.
-    disableView = (CheckedTextView) inflater.inflate(
-        android.R.layout.simple_list_item_single_choice, root, false);
-    disableView.setBackgroundResource(selectableItemBackgroundResourceId);
-    disableView.setText(R.string.selection_disabled);
-    disableView.setFocusable(true);
-    disableView.setOnClickListener(this);
-    root.addView(disableView);
+        // View for disabling the renderer.
+        disableView = (CheckedTextView) inflater.inflate(
+                android.R.layout.simple_list_item_single_choice, root, false);
+        disableView.setBackgroundResource(selectableItemBackgroundResourceId);
+        disableView.setText(R.string.selection_disabled);
+        disableView.setFocusable(true);
+        disableView.setOnClickListener(this);
+        root.addView(disableView);
 
-    // View for clearing the override to allow the selector to use its default selection logic.
-    defaultView = (CheckedTextView) inflater.inflate(
-        android.R.layout.simple_list_item_single_choice, root, false);
-    defaultView.setBackgroundResource(selectableItemBackgroundResourceId);
-    defaultView.setText(R.string.selection_default);
-    defaultView.setFocusable(true);
-    defaultView.setOnClickListener(this);
-    root.addView(inflater.inflate(R.layout.list_divider, root, false));
-    root.addView(defaultView);
+        // View for clearing the override to allow the selector to use its default selection logic.
+        defaultView = (CheckedTextView) inflater.inflate(
+                android.R.layout.simple_list_item_single_choice, root, false);
+        defaultView.setBackgroundResource(selectableItemBackgroundResourceId);
+        defaultView.setText(R.string.selection_default);
+        defaultView.setFocusable(true);
+        defaultView.setOnClickListener(this);
+        root.addView(inflater.inflate(R.layout.list_divider, root, false));
+        root.addView(defaultView);
 
-    // Per-track views.
-    boolean haveAdaptiveTracks = false;
-    trackViews = new CheckedTextView[trackGroups.length][];
-    for (int groupIndex = 0; groupIndex < trackGroups.length; groupIndex++) {
-      TrackGroup group = trackGroups.get(groupIndex);
-      boolean groupIsAdaptive = trackGroupsAdaptive[groupIndex];
-      haveAdaptiveTracks |= groupIsAdaptive;
-      trackViews[groupIndex] = new CheckedTextView[group.length];
-      for (int trackIndex = 0; trackIndex < group.length; trackIndex++) {
-        if (trackIndex == 0) {
-          root.addView(inflater.inflate(R.layout.list_divider, root, false));
+        // Per-track views.
+        boolean haveAdaptiveTracks = false;
+        trackViews = new CheckedTextView[trackGroups.length][];
+        for (int groupIndex = 0; groupIndex < trackGroups.length; groupIndex++) {
+            TrackGroup group = trackGroups.get(groupIndex);
+            boolean groupIsAdaptive = trackGroupsAdaptive[groupIndex];
+            haveAdaptiveTracks |= groupIsAdaptive;
+            trackViews[groupIndex] = new CheckedTextView[group.length];
+            for (int trackIndex = 0; trackIndex < group.length; trackIndex++) {
+                if (trackIndex == 0) {
+                    root.addView(inflater.inflate(R.layout.list_divider, root, false));
+                }
+                int trackViewLayoutId = groupIsAdaptive ? android.R.layout.simple_list_item_multiple_choice
+                        : android.R.layout.simple_list_item_single_choice;
+                CheckedTextView trackView = (CheckedTextView) inflater.inflate(
+                        trackViewLayoutId, root, false);
+                trackView.setBackgroundResource(selectableItemBackgroundResourceId);
+                trackView.setText(DemoUtil.buildTrackName(group.getFormat(trackIndex)));
+                if (trackInfo.getTrackFormatSupport(rendererIndex, groupIndex, trackIndex)
+                        == RendererCapabilities.FORMAT_HANDLED) {
+                    trackView.setFocusable(true);
+                    trackView.setTag(Pair.create(groupIndex, trackIndex));
+                    trackView.setOnClickListener(this);
+                } else {
+                    trackView.setFocusable(false);
+                    trackView.setEnabled(false);
+                }
+                trackViews[groupIndex][trackIndex] = trackView;
+                root.addView(trackView);
+            }
         }
-        int trackViewLayoutId = groupIsAdaptive ? android.R.layout.simple_list_item_multiple_choice
-            : android.R.layout.simple_list_item_single_choice;
-        CheckedTextView trackView = (CheckedTextView) inflater.inflate(
-            trackViewLayoutId, root, false);
-        trackView.setBackgroundResource(selectableItemBackgroundResourceId);
-        trackView.setText(DemoUtil.buildTrackName(group.getFormat(trackIndex)));
-        if (trackInfo.getTrackFormatSupport(rendererIndex, groupIndex, trackIndex)
-            == RendererCapabilities.FORMAT_HANDLED) {
-          trackView.setFocusable(true);
-          trackView.setTag(Pair.create(groupIndex, trackIndex));
-          trackView.setOnClickListener(this);
-        } else {
-          trackView.setFocusable(false);
-          trackView.setEnabled(false);
+
+        if (haveAdaptiveTracks) {
+            // View for using random adaptation.
+            enableRandomAdaptationView = (CheckedTextView) inflater.inflate(
+                    android.R.layout.simple_list_item_multiple_choice, root, false);
+            enableRandomAdaptationView.setBackgroundResource(selectableItemBackgroundResourceId);
+            enableRandomAdaptationView.setText(R.string.enable_random_adaptation);
+            enableRandomAdaptationView.setOnClickListener(this);
+            root.addView(inflater.inflate(R.layout.list_divider, root, false));
+            root.addView(enableRandomAdaptationView);
         }
-        trackViews[groupIndex][trackIndex] = trackView;
-        root.addView(trackView);
-      }
-    }
 
-    if (haveAdaptiveTracks) {
-      // View for using random adaptation.
-      enableRandomAdaptationView = (CheckedTextView) inflater.inflate(
-          android.R.layout.simple_list_item_multiple_choice, root, false);
-      enableRandomAdaptationView.setBackgroundResource(selectableItemBackgroundResourceId);
-      enableRandomAdaptationView.setText(R.string.enable_random_adaptation);
-      enableRandomAdaptationView.setOnClickListener(this);
-      root.addView(inflater.inflate(R.layout.list_divider, root, false));
-      root.addView(enableRandomAdaptationView);
+        updateViews();
+        return view;
     }
 
-    updateViews();
-    return view;
-  }
-
-  private void updateViews() {
-    disableView.setChecked(isDisabled);
-    defaultView.setChecked(!isDisabled && override == null);
-    for (int i = 0; i < trackViews.length; i++) {
-      for (int j = 0; j < trackViews[i].length; j++) {
-        trackViews[i][j].setChecked(override != null && override.groupIndex == i
-            && override.containsTrack(j));
-      }
-    }
-    if (enableRandomAdaptationView != null) {
-      boolean enableView = !isDisabled && override != null && override.length > 1;
-      enableRandomAdaptationView.setEnabled(enableView);
-      enableRandomAdaptationView.setFocusable(enableView);
-      if (enableView) {
-        enableRandomAdaptationView.setChecked(!isDisabled
-            && override.factory instanceof RandomTrackSelection.Factory);
-      }
+    private void updateViews() {
+        disableView.setChecked(isDisabled);
+        defaultView.setChecked(!isDisabled && override == null);
+        for (int i = 0; i < trackViews.length; i++) {
+            for (int j = 0; j < trackViews[i].length; j++) {
+                trackViews[i][j].setChecked(override != null && override.groupIndex == i
+                        && override.containsTrack(j));
+            }
+        }
+        if (enableRandomAdaptationView != null) {
+            boolean enableView = !isDisabled && override != null && override.length > 1;
+            enableRandomAdaptationView.setEnabled(enableView);
+            enableRandomAdaptationView.setFocusable(enableView);
+            if (enableView) {
+                enableRandomAdaptationView.setChecked(!isDisabled
+                        && override.factory instanceof RandomTrackSelection.Factory);
+            }
+        }
     }
-  }
 
-  // DialogInterface.OnClickListener
+    // DialogInterface.OnClickListener
 
-  @Override
-  public void onClick(DialogInterface dialog, int which) {
-    selector.setRendererDisabled(rendererIndex, isDisabled);
-    if (override != null) {
-      selector.setSelectionOverride(rendererIndex, trackGroups, override);
-    } else {
-      selector.clearSelectionOverrides(rendererIndex);
+    @Override
+    public void onClick(DialogInterface dialog, int which) {
+        selector.setRendererDisabled(rendererIndex, isDisabled);
+        if (override != null) {
+            selector.setSelectionOverride(rendererIndex, trackGroups, override);
+        } else {
+            selector.clearSelectionOverrides(rendererIndex);
+        }
     }
-  }
 
-  // View.OnClickListener
+    // View.OnClickListener
 
-  @Override
-  public void onClick(View view) {
-    if (view == disableView) {
-      isDisabled = true;
-      override = null;
-    } else if (view == defaultView) {
-      isDisabled = false;
-      override = null;
-    } else if (view == enableRandomAdaptationView) {
-      setOverride(override.groupIndex, override.tracks, !enableRandomAdaptationView.isChecked());
-    } else {
-      isDisabled = false;
-      @SuppressWarnings("unchecked")
-      Pair<Integer, Integer> tag = (Pair<Integer, Integer>) view.getTag();
-      int groupIndex = tag.first;
-      int trackIndex = tag.second;
-      if (!trackGroupsAdaptive[groupIndex] || override == null
-          || override.groupIndex != groupIndex) {
-        override = new SelectionOverride(FIXED_FACTORY, groupIndex, trackIndex);
-      } else {
-        // The group being modified is adaptive and we already have a non-null override.
-        boolean isEnabled = ((CheckedTextView) view).isChecked();
-        int overrideLength = override.length;
-        if (isEnabled) {
-          // Remove the track from the override.
-          if (overrideLength == 1) {
-            // The last track is being removed, so the override becomes empty.
-            override = null;
+    @Override
+    public void onClick(View view) {
+        if (view == disableView) {
             isDisabled = true;
-          } else {
-            setOverride(groupIndex, getTracksRemoving(override, trackIndex),
-                enableRandomAdaptationView.isChecked());
-          }
+            override = null;
+        } else if (view == defaultView) {
+            isDisabled = false;
+            override = null;
+        } else if (view == enableRandomAdaptationView) {
+            setOverride(override.groupIndex, override.tracks, !enableRandomAdaptationView.isChecked());
         } else {
-          // Add the track to the override.
-          setOverride(groupIndex, getTracksAdding(override, trackIndex),
-              enableRandomAdaptationView.isChecked());
+            isDisabled = false;
+            @SuppressWarnings("unchecked")
+            Pair<Integer, Integer> tag = (Pair<Integer, Integer>) view.getTag();
+            int groupIndex = tag.first;
+            int trackIndex = tag.second;
+            if (!trackGroupsAdaptive[groupIndex] || override == null
+                    || override.groupIndex != groupIndex) {
+                override = new SelectionOverride(FIXED_FACTORY, groupIndex, trackIndex);
+            } else {
+                // The group being modified is adaptive and we already have a non-null override.
+                boolean isEnabled = ((CheckedTextView) view).isChecked();
+                int overrideLength = override.length;
+                if (isEnabled) {
+                    // Remove the track from the override.
+                    if (overrideLength == 1) {
+                        // The last track is being removed, so the override becomes empty.
+                        override = null;
+                        isDisabled = true;
+                    } else {
+                        setOverride(groupIndex, getTracksRemoving(override, trackIndex),
+                                enableRandomAdaptationView.isChecked());
+                    }
+                } else {
+                    // Add the track to the override.
+                    setOverride(groupIndex, getTracksAdding(override, trackIndex),
+                            enableRandomAdaptationView.isChecked());
+                }
+            }
         }
-      }
+        // Update the views with the new state.
+        updateViews();
     }
-    // Update the views with the new state.
-    updateViews();
-  }
 
-  private void setOverride(int group, int[] tracks, boolean enableRandomAdaptation) {
-    TrackSelection.Factory factory = tracks.length == 1 ? FIXED_FACTORY
-        : (enableRandomAdaptation ? RANDOM_FACTORY : adaptiveTrackSelectionFactory);
-    override = new SelectionOverride(factory, group, tracks);
-  }
+    private void setOverride(int group, int[] tracks, boolean enableRandomAdaptation) {
+        TrackSelection.Factory factory = tracks.length == 1 ? FIXED_FACTORY
+                : (enableRandomAdaptation ? RANDOM_FACTORY : adaptiveTrackSelectionFactory);
+        override = new SelectionOverride(factory, group, tracks);
+    }
 
-  // Track array manipulation.
+    // Track array manipulation.
 
-  private static int[] getTracksAdding(SelectionOverride override, int addedTrack) {
-    int[] tracks = override.tracks;
-    tracks = Arrays.copyOf(tracks, tracks.length + 1);
-    tracks[tracks.length - 1] = addedTrack;
-    return tracks;
-  }
+    private static int[] getTracksAdding(SelectionOverride override, int addedTrack) {
+        int[] tracks = override.tracks;
+        tracks = Arrays.copyOf(tracks, tracks.length + 1);
+        tracks[tracks.length - 1] = addedTrack;
+        return tracks;
+    }
 
-  private static int[] getTracksRemoving(SelectionOverride override, int removedTrack) {
-    int[] tracks = new int[override.length - 1];
-    int trackCount = 0;
-    for (int i = 0; i < tracks.length + 1; i++) {
-      int track = override.tracks[i];
-      if (track != removedTrack) {
-        tracks[trackCount++] = track;
-      }
+    private static int[] getTracksRemoving(SelectionOverride override, int removedTrack) {
+        int[] tracks = new int[override.length - 1];
+        int trackCount = 0;
+        for (int i = 0; i < tracks.length + 1; i++) {
+            int track = override.tracks[i];
+            if (track != removedTrack) {
+                tracks[trackCount++] = track;
+            }
+        }
+        return tracks;
     }
-    return tracks;
-  }
 
+    public void selectTrack(int group, int trackIndex) {
+        override = new SelectionOverride(FIXED_FACTORY, group, trackIndex);
+        selector.setSelectionOverride(rendererIndex, trackGroups, override);
+    }
 }
