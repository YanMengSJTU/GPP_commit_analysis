diff --git a/demo/src/main/assets/media.exolist.json b/demo/src/main/assets/media.exolist.json
index d977da64f0..abb531f79f 100644
--- a/demo/src/main/assets/media.exolist.json
+++ b/demo/src/main/assets/media.exolist.json
@@ -1,26 +1,21 @@
 [
   {
-    "name": "demo test",
+    "name": "Pano Demo",
     "samples": [
       {
-        "name": "Remote  File",
+        "name": "Play Remote File",
         "uri": "/sdcard/Movies/fake.mp4",
         "extension": "mp4"
       }
     ]
   },
   {
-    "name": "local",
+    "name": "Local Files",
     "samples": [
       {
-        "name": "test2",
+        "name": "Only for Test-->Push video file to /sdcard/Movies and rename to test.mp4",
         "uri": "/sdcard/Movies/test.mp4",
         "extension": "mp4"
-      },
-      {
-        "name": "animal",
-        "uri": "/sdcard/Movies/animal.mp4",
-        "extension": "mp4"
       }
     ]
   },
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/FileDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/FileDataSource.java
index aedfc652f8..c568127dcf 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/FileDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/FileDataSource.java
@@ -243,17 +243,17 @@ public void makeConnection() {
                         inCmdStream = new DataInputStream(socketRec.getInputStream());
 
                       while (inCmdStream != null && fileTotalLength == C.LENGTH_UNSET) {
-                        // a channel is ready for reading
-                        message_buffer_info messageCmd = new message_buffer_info(0, 0, 0);
-                        cmdPacketBuffer = new byte[CMD_LENGTH];
-                        inCmdStream.readFully(cmdPacketBuffer, 0, CMD_LENGTH);
-                        messageCmd = messageCmd.fromByteArray(cmdPacketBuffer);
-
-                        if (messageCmd.type == postvideo) {
-                            listensock = socketRec;
-                            fileTotalLength = messageCmd.length;
-                            break;
-                        }
+                            // a channel is ready for reading
+                            message_buffer_info messageCmd = new message_buffer_info(0, 0, 0);
+                            cmdPacketBuffer = new byte[CMD_LENGTH];
+                            inCmdStream.readFully(cmdPacketBuffer, 0, CMD_LENGTH);
+                            messageCmd = messageCmd.fromByteArray(cmdPacketBuffer);
+
+                            if (messageCmd.type == postvideo) {
+                                listensock = socketRec;
+                                fileTotalLength = messageCmd.length;
+                                break;
+                            }
                     }
                 }
             } catch (IOException e) {
@@ -386,7 +386,9 @@ private InetAddress getInetAddress_bak()
     }
     return null;
   }
-    public int readRemote(byte[] buffer, int offset, int readLength) {
+
+
+  public int readRemote(byte[] buffer, int offset, int readLength) {
         int bytesRead = 0;
         if (listensock == null) {
             return bytesRead;
@@ -460,6 +462,8 @@ public int readRemote(byte[] buffer, int offset, int readLength) {
                 try {
                     listensock.getOutputStream().close();
                     listensock.close();
+                    listensock = null;
+                    socketRec  = null;
                 } catch (IOException e) {
                     e.printStackTrace();
                 }
@@ -482,52 +486,24 @@ public int readRemote(byte[] buffer, int offset, int readLength) {
             if (recvCmd.offset != (int) fileOffset) {
                 Log.d(LOGTAG, "drop for offset = " + recvCmd.offset);
             }
-            //                  Log.d(LOGTAG, "remote package  arrive" +
-            //                          " length =" + recvCmd.length +
-            //                          " offset = " + recvCmd.offset);
+            //   Log.d(LOGTAG, "remote package  arrive" +
+            //          " length =" + recvCmd.length +
+            //          " offset = " + recvCmd.offset);
 
             PacketBufferLength += recvCmd.length;
             bytesRemaining -= recvCmd.length;
             packetRemaining = PacketBufferLength;
         }
 
-   /*
-            int readCount = (recvCmd.length % DEFAULT_RECV_PACKET_SIZE == 0) ? (recvCmd.length / DEFAULT_RECV_PACKET_SIZE) :
-                    (recvCmd.length / DEFAULT_RECV_PACKET_SIZE + 1);
-
-            while (((readCount--) > 0) && (recvCmd.length > 0)) {
-                        int readL = Math.min(recvCmd.length, DEFAULT_RECV_PACKET_SIZE);
-                        recvCmd.length -= readL;
-                        try {
-                            inFileStream.readFully(packetBuffer, (int) PacketBufferLength, readL);
-                        } catch (IOException e) {
-                            e.printStackTrace();
-                        }
-                        if (recvCmd.offset != (int) fileOffset) {
-                            Log.d(LOGTAG, "drop for offset = " + recvCmd.offset);
-                        }
-                        //                  Log.d(LOGTAG, "remote package  arrive" +
-                        //                          " length =" + recvCmd.length +
-                        //                          " offset = " + recvCmd.offset);
-
-                        PacketBufferLength += readL;
-                        bytesRemaining -= readL;
-                        packetRemaining = PacketBufferLength;
-
-                        //Log.d(LOGTAG, "======remote bytesRemaining = " + bytesRemaining);
-
-                    }
 
-            }
-            */
-            if (packetRemaining > 0) {
-                int packetOffset = (int) (PacketBufferLength - packetRemaining);
-                bytesRead = (int) (Math.min(packetRemaining, readLength));
-                System.arraycopy(packetBuffer, packetOffset, buffer, offset, bytesRead);
-                packetRemaining -= bytesRead;
-                sendLocalAll += bytesRead;
-            }
-            return bytesRead;
+        if (packetRemaining > 0) {
+            int packetOffset = (int) (PacketBufferLength - packetRemaining);
+            bytesRead = (int) (Math.min(packetRemaining, readLength));
+            System.arraycopy(packetBuffer, packetOffset, buffer, offset, bytesRead);
+            packetRemaining -= bytesRead;
+            sendLocalAll += bytesRead;
+        }
+        return bytesRead;
     }
     /*
   private class SocketHandleThread implements Runnable {
