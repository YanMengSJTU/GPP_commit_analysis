diff --git a/library/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java b/library/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
index f9ca67b60a..a9a5e634e0 100644
--- a/library/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
+++ b/library/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
@@ -18,6 +18,8 @@
 import android.net.Uri;
 import android.os.SystemClock;
 import android.text.TextUtils;
+import android.util.Log;
+
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.Timeline;
@@ -281,6 +283,9 @@ public void getNextChunk(HlsMediaChunk previous, long playbackPositionUs, HlsChu
         }
       }
       return;
+    } else if(chunkIndex < 0) {
+      Log.i(this.getClass().getName(), "Chunk index is negative - moving to chunk zero in playlist. This suggests a discontinuity in the upload to the server");
+      chunkIndex = 0;
     }
 
     HlsMediaPlaylist.Segment segment = mediaPlaylist.segments.get(chunkIndex);
@@ -396,48 +401,6 @@ public void getNextChunk(HlsMediaChunk previous, long playbackPositionUs, HlsChu
         encryptionKey, encryptionIv);
   }
 
-  /**
-   * Returns the media sequence number of a chunk in a new variant for a live stream variant switch.
-   *
-   * @param previousChunkIndex The index of the last chunk in the old variant.
-   * @param oldVariantIndex The index of the old variant.
-   * @param newVariantIndex The index of the new variant.
-   * @return Media sequence number of the chunk to switch to in a live stream in the variant that
-   *     corresponds to the given {@code newVariantIndex}.
-   */
-  private int getLiveNextChunkSequenceNumber(int previousChunkIndex, int oldVariantIndex,
-      int newVariantIndex) {
-    if (oldVariantIndex == newVariantIndex) {
-      return previousChunkIndex + 1;
-    }
-    HlsMediaPlaylist oldMediaPlaylist = variantPlaylists[oldVariantIndex];
-    HlsMediaPlaylist newMediaPlaylist = variantPlaylists[newVariantIndex];
-    double offsetToLiveInstantSecs = 0;
-    for (int i = previousChunkIndex - oldMediaPlaylist.mediaSequence;
-         i < oldMediaPlaylist.segments.size(); i++) {
-      offsetToLiveInstantSecs += oldMediaPlaylist.segments.get(i).durationSecs;
-    }
-    long currentTimeMs = SystemClock.elapsedRealtime();
-    offsetToLiveInstantSecs +=
-        (double) (currentTimeMs - variantLastPlaylistLoadTimesMs[oldVariantIndex]) / 1000;
-    offsetToLiveInstantSecs += LIVE_VARIANT_SWITCH_SAFETY_EXTRA_SECS;
-    offsetToLiveInstantSecs -=
-        (double) (currentTimeMs - variantLastPlaylistLoadTimesMs[newVariantIndex]) / 1000;
-    if (offsetToLiveInstantSecs < 0) {
-      // The instant we are looking for is not contained in the playlist, we need it to be
-      // refreshed.
-      return newMediaPlaylist.mediaSequence + newMediaPlaylist.segments.size() + 1;
-    }
-    for (int i = newMediaPlaylist.segments.size() - 1; i >= 0; i--) {
-      offsetToLiveInstantSecs -= newMediaPlaylist.segments.get(i).durationSecs;
-      if (offsetToLiveInstantSecs < 0) {
-        return newMediaPlaylist.mediaSequence + i;
-      }
-    }
-    // We have fallen behind the live window.
-    return newMediaPlaylist.mediaSequence - 1;
-  }
-
   /**
    * Called when the {@link HlsSampleStreamWrapper} has finished loading a chunk obtained from this
    * source.
