diff --git a/library/src/androidTest/java/com/google/android/exoplayer/extractor/mp4/AtomParsersTest.java b/library/src/androidTest/java/com/google/android/exoplayer/extractor/mp4/AtomParsersTest.java
index 3a9fc3735f..005f3c486b 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/extractor/mp4/AtomParsersTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/extractor/mp4/AtomParsersTest.java
@@ -20,15 +20,18 @@
 
 import junit.framework.TestCase;
 
-public class AtomParsersTest extends TestCase {
+/**
+ * Tests for {@link AtomParsers}.
+ */
+public final class AtomParsersTest extends TestCase {
 
-  private final String ATOM_HEADER = "000000000000000000000000";
-  private final String SAMPLE_COUNT = "00000004";
-  private final byte[] FOUR_BIT_STZ2 = Util.getBytesFromHexString(ATOM_HEADER + "00000004"
+  private static final String ATOM_HEADER = "000000000000000000000000";
+  private static final String SAMPLE_COUNT = "00000004";
+  private static final byte[] FOUR_BIT_STZ2 = Util.getBytesFromHexString(ATOM_HEADER + "00000004"
       + SAMPLE_COUNT + "1234");
-  private final byte[] EIGHT_BIT_STZ2 = Util.getBytesFromHexString(ATOM_HEADER + "00000008"
+  private static final byte[] EIGHT_BIT_STZ2 = Util.getBytesFromHexString(ATOM_HEADER + "00000008"
       + SAMPLE_COUNT + "01020304");
-  private final byte[] SIXTEEN_BIT_STZ2 = Util.getBytesFromHexString(ATOM_HEADER + "00000010"
+  private static final byte[] SIXTEEN_BIT_STZ2 = Util.getBytesFromHexString(ATOM_HEADER + "00000010"
       + SAMPLE_COUNT + "0001000200030004");
 
   public void testStz2Parsing4BitFieldSize() {
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/AtomParsers.java b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/AtomParsers.java
index 01b99d8695..ec36518450 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/AtomParsers.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/AtomParsers.java
@@ -102,7 +102,11 @@ public static TrackSampleTable parseStbl(Track track, Atom.ContainerAtom stblAto
       }
       sampleSizeBox = new Stz2SampleSizeBox(stz2Atom);
     }
+
     int sampleCount = sampleSizeBox.getSampleCount();
+    if (sampleCount == 0) {
+      return new TrackSampleTable(new long[0], new int[0], 0, new long[0], new int[0]);
+    }
 
     // Entries are byte offsets of chunks.
     boolean chunkOffsetsAreLongs = false;
@@ -123,10 +127,6 @@ public static TrackSampleTable parseStbl(Track track, Atom.ContainerAtom stblAto
     Atom.LeafAtom cttsAtom = stblAtom.getLeafAtomOfType(Atom.TYPE_ctts);
     ParsableByteArray ctts = cttsAtom != null ? cttsAtom.data : null;
 
-    if (sampleCount == 0) {
-      return new TrackSampleTable(new long[0], new int[0], 0, new long[0], new int[0]);
-    }
-
     // Prepare to read chunk information.
     ChunkIterator chunkIterator = new ChunkIterator(stsc, chunkOffsets, chunkOffsetsAreLongs);
 
