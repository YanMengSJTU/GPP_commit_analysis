diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java
index 599cdddeb9..0e65d9f15c 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java
@@ -206,10 +206,21 @@ public long open(DataSpec dataSpec) throws HttpDataSourceException {
 
     // Check for a valid response code.
     if (responseCode < 200 || responseCode > 299) {
+
+      String errMsg = null;
+      try {
+        errMsg = Util.toString(connection.getErrorStream());
+      } catch (IOException e) {
+        //ignore.
+      }
+
       Map<String, List<String>> headers = connection.getHeaderFields();
+
+      dataSpec.toString();
+
       closeConnectionQuietly();
       InvalidResponseCodeException exception =
-          new InvalidResponseCodeException(responseCode, headers, dataSpec);
+          new InvalidResponseCodeException(responseCode, errMsg, headers, dataSpec);
       if (responseCode == 416) {
         exception.initCause(new DataSourceException(DataSourceException.POSITION_OUT_OF_RANGE));
       }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/HttpDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/HttpDataSource.java
index 3725fc0052..4065e9a284 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/HttpDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/HttpDataSource.java
@@ -296,6 +296,11 @@ public InvalidContentTypeException(String contentType, DataSpec dataSpec) {
      */
     public final int responseCode;
 
+    /**
+     * The response message that came with response code.
+     */
+    public final String errMsg;
+
     /**
      * An unmodifiable map of the response header fields and values.
      */
@@ -303,7 +308,14 @@ public InvalidContentTypeException(String contentType, DataSpec dataSpec) {
 
     public InvalidResponseCodeException(int responseCode, Map<String, List<String>> headerFields,
         DataSpec dataSpec) {
-      super("Response code: " + responseCode, dataSpec, TYPE_OPEN);
+      this(responseCode, null, headerFields, dataSpec);
+    }
+
+    public InvalidResponseCodeException(int responseCode, String errMsg, Map<String, List<String>> headerFields,
+                                        DataSpec dataSpec) {
+
+      super("Response code: " + responseCode + ", Response Message:" + errMsg + " Data: "+ new String(dataSpec.postBody), dataSpec, TYPE_OPEN);
+      this.errMsg = errMsg;
       this.responseCode = responseCode;
       this.headerFields = headerFields;
     }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/util/Util.java b/library/core/src/main/java/com/google/android/exoplayer2/util/Util.java
index 2761cc3ce6..216950bd16 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/util/Util.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/util/Util.java
@@ -36,11 +36,14 @@
 import com.google.android.exoplayer2.ParserException;
 import com.google.android.exoplayer2.SeekParameters;
 import com.google.android.exoplayer2.upstream.DataSource;
+
+import java.io.BufferedReader;
 import java.io.ByteArrayOutputStream;
 import java.io.Closeable;
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.lang.reflect.Method;
 import java.math.BigDecimal;
 import java.nio.charset.Charset;
@@ -127,6 +130,26 @@ private Util() {}
     return outputStream.toByteArray();
   }
 
+  /**
+   * Converts the entirety of an {@link InputStream} to a String.
+   *
+   * @param inputStream the {@link InputStream} to be read. The input stream is not closed by this
+   *    method.
+   * @return a byte array containing all of the inputStream's bytes.
+   * @throws IOException if an error occurs reading from the stream.
+   */
+  public static String toString(InputStream inputStream) throws IOException {
+
+    StringBuilder sb = new StringBuilder();
+
+    BufferedReader br = new BufferedReader(new InputStreamReader(inputStream));
+    String inputLine;
+    while ((inputLine = br.readLine()) != null) {
+      sb.append(inputLine);
+    }
+    return sb.toString();
+  }
+
   /**
    * Checks whether it's necessary to request the {@link permission#READ_EXTERNAL_STORAGE}
    * permission read the specified {@link Uri}s, requesting the permission if necessary.
