diff --git a/demo/src/main/assets/media.exolist.json b/demo/src/main/assets/media.exolist.json
index 38a0c577ae..532d95064a 100644
--- a/demo/src/main/assets/media.exolist.json
+++ b/demo/src/main/assets/media.exolist.json
@@ -1,4 +1,13 @@
 [
+  {
+    "name": "UDP Live Test",
+    "samples" : [
+      {
+        "name": "localhost MP4,H264 (0.0.0.0:10230)",
+        "uri": "udp://0.0.0.0:10230"
+      }
+    ]
+  },
   {
     "name": "YouTube DASH",
     "samples": [
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java b/demo/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java
index b5db4c018d..19d5efca98 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java
@@ -16,11 +16,18 @@
 package com.google.android.exoplayer2.demo;
 
 import android.app.Application;
+import android.net.Uri;
+
 import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.DefaultBandwidthMeter;
+import com.google.android.exoplayer2.upstream.DefaultDataSource;
 import com.google.android.exoplayer2.upstream.DefaultDataSourceFactory;
 import com.google.android.exoplayer2.upstream.DefaultHttpDataSourceFactory;
 import com.google.android.exoplayer2.upstream.HttpDataSource;
+import com.google.android.exoplayer2.upstream.UdpDataSource;
+import com.google.android.exoplayer2.upstream.cache.Cache;
+import com.google.android.exoplayer2.upstream.cache.CacheDataSourceFactory;
+import com.google.android.exoplayer2.upstream.cache.SimpleCache;
 import com.google.android.exoplayer2.util.Util;
 
 /**
@@ -37,16 +44,52 @@ public void onCreate() {
   }
 
   public DataSource.Factory buildDataSourceFactory(DefaultBandwidthMeter bandwidthMeter) {
-    return new DefaultDataSourceFactory(this, bandwidthMeter,
-        buildHttpDataSourceFactory(bandwidthMeter));
+    return buildDataSourceFactory(Uri.parse("http://127.0.0.1"), bandwidthMeter );
+  }
+
+  public DataSource.Factory buildDataSourceFactory(Uri uri, DefaultBandwidthMeter bandwidthMeter) {
+    DataSource.Factory dataSourceFactory;
+    switch(uri.getScheme()) {
+      case "udp":
+        dataSourceFactory = new DefaultDataSourceFactory(this, bandwidthMeter,
+                buildUdpDataSourceFactory(bandwidthMeter));
+        break;
+      case "http":
+      default:
+        dataSourceFactory = new DefaultDataSourceFactory(this, bandwidthMeter,
+                buildHttpDataSourceFactory(bandwidthMeter));
+        break;
+    }
+    return dataSourceFactory;
   }
 
   public HttpDataSource.Factory buildHttpDataSourceFactory(DefaultBandwidthMeter bandwidthMeter) {
     return new DefaultHttpDataSourceFactory(userAgent, bandwidthMeter);
   }
 
+  public UdpDataSource.Factory buildUdpDataSourceFactory(DefaultBandwidthMeter bandwidthMeter) {
+    return new DefaultDataSourceFactory(this, bandwidthMeter, new UdpDataSourceFactory(bandwidthMeter));
+  }
+
   public boolean useExtensionRenderers() {
     return BuildConfig.FLAVOR.equals("withExtensions");
   }
 
+  /**
+   * Class UdpDataSourceFactory for UDP data source.
+   */
+  public class UdpDataSourceFactory implements DataSource.Factory {
+
+    private DefaultBandwidthMeter bandwidthMeter;
+
+    public UdpDataSourceFactory(DefaultBandwidthMeter bandwidthMeter) {
+      this.bandwidthMeter = bandwidthMeter;
+    }
+
+    @Override
+    public DataSource createDataSource() {
+      return new UdpDataSource(bandwidthMeter);
+    }
+  }
+
 }
diff --git a/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java b/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
index 6416cd5aa2..8c96293d0c 100644
--- a/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
+++ b/demo/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
@@ -362,15 +362,15 @@ private MediaSource buildMediaSource(Uri uri, String overrideExtension) {
         : Util.inferContentType("." + overrideExtension);
     switch (type) {
       case C.TYPE_SS:
-        return new SsMediaSource(uri, buildDataSourceFactory(false),
+        return new SsMediaSource(uri, buildDataSourceFactory(uri, false),
             new DefaultSsChunkSource.Factory(mediaDataSourceFactory), mainHandler, eventLogger);
       case C.TYPE_DASH:
-        return new DashMediaSource(uri, buildDataSourceFactory(false),
+        return new DashMediaSource(uri, buildDataSourceFactory(uri, false),
             new DefaultDashChunkSource.Factory(mediaDataSourceFactory), mainHandler, eventLogger);
       case C.TYPE_HLS:
         return new HlsMediaSource(uri, mediaDataSourceFactory, mainHandler, eventLogger);
       case C.TYPE_OTHER:
-        return new ExtractorMediaSource(uri, mediaDataSourceFactory, new DefaultExtractorsFactory(),
+        return new ExtractorMediaSource(uri, buildDataSourceFactory(uri, false), new DefaultExtractorsFactory(),
             mainHandler, eventLogger);
       default: {
         throw new IllegalStateException("Unsupported type: " + type);
@@ -425,7 +425,20 @@ private void clearResumePosition() {
    */
   private DataSource.Factory buildDataSourceFactory(boolean useBandwidthMeter) {
     return ((DemoApplication) getApplication())
-        .buildDataSourceFactory(useBandwidthMeter ? BANDWIDTH_METER : null);
+            .buildDataSourceFactory(useBandwidthMeter ? BANDWIDTH_METER : null);
+  }
+
+  /**
+   * Returns a new DataSource factory.
+   *
+   * @param uri
+   * @param useBandwidthMeter Whether to set {@link #BANDWIDTH_METER} as a listener to the new
+   *     DataSource factory.
+   * @return A new DataSource factory.
+   */
+  private DataSource.Factory buildDataSourceFactory(Uri uri, boolean useBandwidthMeter) {
+    return ((DemoApplication) getApplication())
+        .buildDataSourceFactory(uri, useBandwidthMeter ? BANDWIDTH_METER : null);
   }
 
   /**
