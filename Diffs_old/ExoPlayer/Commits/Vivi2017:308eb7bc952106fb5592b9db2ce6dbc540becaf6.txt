diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/FileDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/FileDataSource.java
index 4499a47fc9..55ba429b20 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/FileDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/FileDataSource.java
@@ -98,7 +98,8 @@ public FileDataSourceException(IOException cause) {
     public final int byebyebye = 1004;
     public final int seekfile = 1005;
     public static final int DEFAULT_MAX_PACKET_SIZE = 2000;
-    public static final int DEFAULT_READ_PACKET_SIZE = 1460;//1460
+    public static final int DEFAULT_READ_PACKET_SIZE = 1460*5;//1460
+    public static final int DEFAULT_RECV_PACKET_SIZE = 1460;//1460
     public static final int CMD_LENGTH = 12;
     public static final int MAX_QUEUE_SIZE = 1;
     public int testTHread = 0;
@@ -115,8 +116,8 @@ public FileDataSource() {
      */
     public FileDataSource(TransferListener<? super FileDataSource> listener) {
         this.listener = listener;
-        packetBuffer = new byte[DEFAULT_MAX_PACKET_SIZE];
-        localPacketBuffer = new byte[DEFAULT_MAX_PACKET_SIZE];
+        packetBuffer = new byte[DEFAULT_READ_PACKET_SIZE];
+       // localPacketBuffer = new byte[DEFAULT_MAX_PACKET_SIZE];
         cmdPacketBuffer = new byte[CMD_LENGTH];
     }
 
@@ -403,10 +404,9 @@ private InetAddress getInetAddress()
     }
     return null;
   }
-    public int readRemote(byte[] buffer, int offset, int readLength)
-    {
+    public int readRemote(byte[] buffer, int offset, int readLength) {
         int bytesRead = 0;
-        if (listensock == null){
+        if (listensock == null) {
             return bytesRead;
         }
         if (localRemaining == sendLocalAll && localRemaining > 0) {
@@ -420,9 +420,11 @@ public int readRemote(byte[] buffer, int offset, int readLength)
             packetRemaining -= bytesRead;
             sendLocalAll += bytesRead;
             return bytesRead;
+        } else {
+            PacketBufferLength = 0;
         }
 
-       // Log.d(LOGTAG, " ======local out, request a package from remote");
+        // Log.d(LOGTAG, " ======local out, request a package from remote");
         message_buffer_info messageCmdSend = new message_buffer_info(getfile, fileOffset, DEFAULT_READ_PACKET_SIZE);
         byte[] sendBuffer = messageCmdSend.toByteArray();
 
@@ -455,43 +457,7 @@ public int readRemote(byte[] buffer, int offset, int readLength)
         }
         recvCmd = recvCmd.fromByteArray(cmdPacketBuffer);
 
-        if ((recvCmd.type == sendfile) && (recvCmd.length > 0)) {
-            if (inFileStream == null) {
-                try {
-                    inFileStream = new DataInputStream(listensock.getInputStream());
-                } catch (IOException e1) {
-                    e1.printStackTrace();
-                }
-            }
-            if (inFileStream != null) {
-                try {
-                    inFileStream.readFully(packetBuffer, 0, recvCmd.length);
-                    if (recvCmd.offset != (int) fileOffset) {
-                        Log.d(LOGTAG, "drop for offset = " + recvCmd.offset);
-                    }
-  //                  Log.d(LOGTAG, "remote package  arrive" +
-  //                          " length =" + recvCmd.length +
-  //                          " offset = " + recvCmd.offset);
-
-                    PacketBufferLength = recvCmd.length;
-                    bytesRemaining -= recvCmd.length;
-                    packetRemaining = PacketBufferLength;
-
-                    //Log.d(LOGTAG, "======remote bytesRemaining = " + bytesRemaining);
-
-                    if (packetRemaining > 0) {
-                        int packetOffset = (int) (PacketBufferLength - packetRemaining);
-                        bytesRead = (int) (Math.min(packetRemaining, readLength));
-                        System.arraycopy(packetBuffer, packetOffset, buffer, offset, bytesRead);
-                        packetRemaining -= bytesRead;
-                        sendLocalAll += bytesRead;
-                        return bytesRead;
-                    }
-                } catch (IOException e1) {
-                    e1.printStackTrace();
-                }
-            }
-        } else if ((recvCmd.type == byebyebye) && (recvCmd.length == 0)) {
+        if ((recvCmd.type == byebyebye) && (recvCmd.length == 0)) {
             Log.d(LOGTAG, "remote send byebye");
             if (inCmdStream != null)
                 try {
@@ -515,11 +481,53 @@ public int readRemote(byte[] buffer, int offset, int readLength)
                 } catch (IOException e) {
                     e.printStackTrace();
                 }
+            return bytesRead;
         }
 
-        return bytesRead;
-    }
+        if ((recvCmd.type == sendfile) && (recvCmd.length > 0)) {
+            if (inFileStream == null) {
+                try {
+                    inFileStream = new DataInputStream(listensock.getInputStream());
+                } catch (IOException e1) {
+                    e1.printStackTrace();
+                }
+            }
+            int readCount = (recvCmd.length % DEFAULT_RECV_PACKET_SIZE == 0) ? (recvCmd.length / DEFAULT_RECV_PACKET_SIZE) :
+                    (recvCmd.length / DEFAULT_RECV_PACKET_SIZE + 1);
+
+            while (((readCount--) > 0) && (recvCmd.length > 0)) {
+                        int readL = Math.min(recvCmd.length, DEFAULT_RECV_PACKET_SIZE);
+                        recvCmd.length -= readL;
+                        try {
+                            inFileStream.readFully(packetBuffer, (int) PacketBufferLength, readL);
+                        } catch (IOException e) {
+                            e.printStackTrace();
+                        }
+                        if (recvCmd.offset != (int) fileOffset) {
+                            Log.d(LOGTAG, "drop for offset = " + recvCmd.offset);
+                        }
+                        //                  Log.d(LOGTAG, "remote package  arrive" +
+                        //                          " length =" + recvCmd.length +
+                        //                          " offset = " + recvCmd.offset);
+
+                        PacketBufferLength += readL;
+                        bytesRemaining -= readL;
+                        packetRemaining = PacketBufferLength;
+
+                        //Log.d(LOGTAG, "======remote bytesRemaining = " + bytesRemaining);
+
+                    }
 
+            }
+            if (packetRemaining > 0) {
+                int packetOffset = (int) (PacketBufferLength - packetRemaining);
+                bytesRead = (int) (Math.min(packetRemaining, readLength));
+                System.arraycopy(packetBuffer, packetOffset, buffer, offset, bytesRead);
+                packetRemaining -= bytesRead;
+                sendLocalAll += bytesRead;
+            }
+            return bytesRead;
+    }
     /*
   private class SocketHandleThread implements Runnable {
 
