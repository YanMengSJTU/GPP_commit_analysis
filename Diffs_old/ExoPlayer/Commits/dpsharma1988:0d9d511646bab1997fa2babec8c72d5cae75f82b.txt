diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java
index cb1b40a035..7bd8cd7daa 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/DemoApplication.java
@@ -48,8 +48,6 @@
   private static final String DOWNLOAD_TRACKER_ACTION_FILE = "tracked_actions";
   private static final String DOWNLOAD_CONTENT_DIRECTORY = "downloads";
   private static final int MAX_SIMULTANEOUS_DOWNLOADS = 2;
-  private KeyHelperModel keyHelperModel;
-
   private static final Deserializer[] DOWNLOAD_DESERIALIZERS =
       new Deserializer[] {
         DashDownloadAction.DESERIALIZER,
@@ -81,8 +79,7 @@ public void onCreate() {
   /** Returns a {@link HttpDataSource.Factory}. */
   public HttpDataSource.Factory buildHttpDataSourceFactory(TransferListener<? super DataSource> listener,
       KeyHelperModel keyHelper) {
-    return  new CustomDataSourceFactory("Exo", listener, keyHelper);
-
+    return new CustomDataSourceFactory(userAgent, listener, keyHelper);
   }
 
   /** Returns whether extension renderers should be used. */
@@ -102,7 +99,6 @@ public DownloadTracker getDownloadTracker() {
 
   public DownloadTracker getDownloadTracker(KeyHelperModel keyHelperModel){
     initDownloadManager(keyHelperModel);
-    this.keyHelperModel = keyHelperModel;
     return downloadTracker;
   }
 
@@ -126,13 +122,6 @@ private synchronized void initDownloadManager(
               new File(getDownloadDirectory(), DOWNLOAD_TRACKER_ACTION_FILE),
               DOWNLOAD_DESERIALIZERS);
       downloadManager.addListener(downloadTracker);
-
-    }
-    else
-    {
-      DownloaderConstructorHelper downloaderConstructorHelper =    new DownloaderConstructorHelper(
-              getDownloadCache(), buildHttpDataSourceFactory(/* listener= */ null,  this.keyHelperModel ));
-      downloadManager.setDownloaderConstructorHelper(downloaderConstructorHelper);
     }
   }
 
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/DownloadTracker.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/DownloadTracker.java
index b4bce01c7a..a48e63e62b 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/DownloadTracker.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/DownloadTracker.java
@@ -47,6 +47,8 @@
 import com.google.android.exoplayer2.ui.TrackNameProvider;
 import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.util.Util;
+import com.vocabimate.protocol.Dummy;
+
 import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
@@ -122,10 +124,13 @@ public boolean isDownloaded(Uri uri) {
     return Collections.emptyList();
   }
 
-  public void toggleDownload(Activity activity, String name, Uri uri, String extension) {
+  private Dummy mDummy;
+
+  public void toggleDownload(Activity activity, String name, Uri uri, String extension, Dummy dummy) {
+    this.mDummy = dummy;
     if (isDownloaded(uri)) {
       DownloadAction removeAction =
-          getDownloadHelper(uri, extension).getRemoveAction(Util.getUtf8Bytes(name));
+          getDownloadHelper(uri, extension).getRemoveAction(Util.getUtf8Bytes(name), dummy);
       startServiceWithAction(removeAction);
     } else {
       StartDownloadDialogHelper helper =
@@ -295,7 +300,7 @@ public void onClick(DialogInterface dialog, int which) {
       if (!selectedTrackKeys.isEmpty() || trackKeys.isEmpty()) {
         // We have selected keys, or we're dealing with single stream content.
         DownloadAction downloadAction =
-            downloadHelper.getDownloadAction(Util.getUtf8Bytes(name), selectedTrackKeys);
+            downloadHelper.getDownloadAction(Util.getUtf8Bytes(name), selectedTrackKeys, mDummy);
         startDownload(downloadAction);
       }
     }
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
index cf519736cc..d858daffc5 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
@@ -41,6 +41,7 @@
 import com.google.android.exoplayer2.upstream.DefaultDataSource;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.Util;
+import com.vocabimate.protocol.Dummy;
 import com.vocabimate.protocol.KeyHelperModel;
 
 import java.io.IOException;
@@ -192,7 +193,7 @@ private void onSampleDownloadButtonClicked(Sample sample) {
       UriSample uriSample = (UriSample) sample;
       KeyHelperModel keyHelper = getKeyHelper(5, uriSample);
       downloadTracker = ((DemoApplication)getApplication()).getDownloadTracker(keyHelper);
-      downloadTracker.toggleDownload(this, sample.name, uriSample.uri, uriSample.extension);
+      downloadTracker.toggleDownload(this, sample.name, uriSample.uri, uriSample.extension, new Dummy().setKeyHelper(keyHelper));
     }
   }
 
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadAction.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadAction.java
index 98360b909c..6b393faacc 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadAction.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadAction.java
@@ -17,6 +17,9 @@
 
 import android.net.Uri;
 import android.support.annotation.Nullable;
+
+import com.vocabimate.protocol.Dummy;
+
 import java.io.ByteArrayOutputStream;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
@@ -98,6 +101,7 @@ public static void serializeToStream(DownloadAction action, OutputStream output)
   public final boolean isRemoveAction;
   /** Custom data for this action. May be empty. */
   public final byte[] data;
+  public final Dummy mDummy;
 
   /**
    * @param type The type of the action.
@@ -105,14 +109,15 @@ public static void serializeToStream(DownloadAction action, OutputStream output)
    * @param uri The uri being downloaded or removed.
    * @param isRemoveAction Whether this is a remove action. If false, this is a download action.
    * @param data Optional custom data for this action.
+   * @param dummy
    */
-  protected DownloadAction(
-      String type, int version, Uri uri, boolean isRemoveAction, @Nullable byte[] data) {
+  protected DownloadAction(String type, int version, Uri uri, boolean isRemoveAction, @Nullable byte[] data, Dummy dummy) {
     this.type = type;
     this.version = version;
     this.uri = uri;
     this.isRemoveAction = isRemoveAction;
     this.data = data != null ? data : new byte[0];
+    this.mDummy = dummy;
   }
 
   /** Serializes itself into a byte array. */
@@ -136,8 +141,7 @@ public boolean isSameMedia(DownloadAction other) {
   protected abstract void writeToStream(DataOutputStream output) throws IOException;
 
   /** Creates a {@link Downloader} with the given parameters. */
-  protected abstract Downloader createDownloader(
-      DownloaderConstructorHelper downloaderConstructorHelper);
+  protected abstract Downloader createDownloader(DownloaderConstructorHelper downloaderConstructorHelper, Dummy dummy);
 
   @Override
   public boolean equals(@Nullable Object o) {
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
index f6157c1dc3..1b4dae5c76 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadHelper.java
@@ -19,6 +19,8 @@
 import android.os.Looper;
 import android.support.annotation.Nullable;
 import com.google.android.exoplayer2.source.TrackGroupArray;
+import com.vocabimate.protocol.Dummy;
+
 import java.io.IOException;
 import java.util.List;
 
@@ -108,15 +110,17 @@ public void run() {
    *
    * @param data Application provided data to store in {@link DownloadAction#data}.
    * @param trackKeys The selected tracks. If empty, all streams will be downloaded.
+   * @param dummy
    * @return The built {@link DownloadAction}.
    */
-  public abstract DownloadAction getDownloadAction(@Nullable byte[] data, List<TrackKey> trackKeys);
+  public abstract DownloadAction getDownloadAction(@Nullable byte[] data, List<TrackKey> trackKeys, Dummy dummy);
 
   /**
    * Builds a {@link DownloadAction} for removing the media. May be called in any state.
    *
    * @param data Application provided data to store in {@link DownloadAction#data}.
+   * @param dummy
    * @return The built {@link DownloadAction}.
    */
-  public abstract DownloadAction getRemoveAction(@Nullable byte[] data);
+  public abstract DownloadAction getRemoveAction(@Nullable byte[] data, Dummy dummy);
 }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadManager.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadManager.java
index 75a23dca56..8d99d500db 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadManager.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloadManager.java
@@ -84,7 +84,7 @@
   private static final String TAG = "DownloadManager";
   private static final boolean DEBUG = false;
 
-  private DownloaderConstructorHelper downloaderConstructorHelper;
+  private final DownloaderConstructorHelper downloaderConstructorHelper;
   private final int maxActiveDownloadTasks;
   private final int minRetryCount;
   private final ActionFile actionFile;
@@ -110,8 +110,6 @@
    * @param actionSaveFile File to save active actions.
    * @param deserializers Used to deserialize {@link DownloadAction}s.
    */
-
-
   public DownloadManager(
       Cache cache,
       DataSource.Factory upstreamDataSourceFactory,
@@ -123,16 +121,6 @@ public DownloadManager(
         deserializers);
   }
 
-
-  public DownloaderConstructorHelper getDownloaderConstrucorHelper()
-  {
-    return this.downloaderConstructorHelper;
-  }
-
-  public void setDownloaderConstructorHelper(DownloaderConstructorHelper downloaderConstructorHelper) {
-    this.downloaderConstructorHelper = downloaderConstructorHelper;
-  }
-
   /**
    * Constructs a {@link DownloadManager}.
    *
@@ -821,7 +809,7 @@ public void run() {
       logd("Task is started", this);
       Throwable error = null;
       try {
-        downloader = action.createDownloader(downloadManager.downloaderConstructorHelper);
+        downloader = action.createDownloader(downloadManager.downloaderConstructorHelper, action.mDummy);
         if (action.isRemoveAction) {
           downloader.remove();
         } else {
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloaderConstructorHelper.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloaderConstructorHelper.java
index 18387b9d92..7dfb9e00e1 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloaderConstructorHelper.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/DownloaderConstructorHelper.java
@@ -26,8 +26,10 @@
 import com.google.android.exoplayer2.upstream.cache.Cache;
 import com.google.android.exoplayer2.upstream.cache.CacheDataSink;
 import com.google.android.exoplayer2.upstream.cache.CacheDataSource;
+import com.google.android.exoplayer2.upstream.vocabimate_stream.CustomDataSource;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.PriorityTaskManager;
+import com.vocabimate.protocol.Dummy;
 
 /** A helper class that holds necessary parameters for {@link Downloader} construction. */
 public final class DownloaderConstructorHelper {
@@ -87,7 +89,7 @@ public PriorityTaskManager getPriorityTaskManager() {
    * Returns a new {@link CacheDataSource} instance. If {@code offline} is true, it can only read
    * data from the cache.
    */
-  public CacheDataSource buildCacheDataSource(boolean offline) {
+  public CacheDataSource buildCacheDataSource(boolean offline, Dummy dummy) {
     DataSource cacheReadDataSource = cacheReadDataSourceFactory != null
         ? cacheReadDataSourceFactory.createDataSource() : new FileDataSource();
     if (offline) {
@@ -98,6 +100,9 @@ public CacheDataSource buildCacheDataSource(boolean offline) {
           ? cacheWriteDataSinkFactory.createDataSink()
           : new CacheDataSink(cache, CacheDataSource.DEFAULT_MAX_CACHE_FILE_SIZE);
       DataSource upstream = upstreamDataSourceFactory.createDataSource();
+      if(upstream instanceof CustomDataSource){
+        ((CustomDataSource) upstream).setKeyHelperModel(dummy.getKeyHelper());
+      }
       upstream = priorityTaskManager == null ? upstream
           : new PriorityDataSource(upstream, priorityTaskManager, C.PRIORITY_DOWNLOAD);
       return new CacheDataSource(cache, upstream, cacheReadDataSource,
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloadAction.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloadAction.java
index d8db6f96c2..b0d221288e 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloadAction.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloadAction.java
@@ -19,6 +19,8 @@
 import android.support.annotation.Nullable;
 import com.google.android.exoplayer2.upstream.cache.CacheUtil;
 import com.google.android.exoplayer2.util.Util;
+import com.vocabimate.protocol.Dummy;
+
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
@@ -39,8 +41,12 @@ public ProgressiveDownloadAction readFromStream(int version, DataInputStream inp
           int dataLength = input.readInt();
           byte[] data = new byte[dataLength];
           input.readFully(data);
+          int byteArrayLength = input.readInt();
+          byte[] dummyBytes = new byte[byteArrayLength];
+          input.readFully(dummyBytes);
+          Dummy dummy = (Dummy) Util.convertToObject(dummyBytes);
           String customCacheKey = input.readBoolean() ? input.readUTF() : null;
-          return new ProgressiveDownloadAction(uri, isRemoveAction, data, customCacheKey);
+          return new ProgressiveDownloadAction(uri, isRemoveAction, data, customCacheKey, dummy);
         }
       };
 
@@ -51,17 +57,17 @@ public ProgressiveDownloadAction readFromStream(int version, DataInputStream inp
    * @param isRemoveAction Whether this is a remove action. If false, this is a download action.
    * @param data Optional custom data for this action.
    * @param customCacheKey A custom key that uniquely identifies the original stream. If not null it
-   *     is used for cache indexing.
+   * @param dummy
    */
   public ProgressiveDownloadAction(
-      Uri uri, boolean isRemoveAction, @Nullable byte[] data, @Nullable String customCacheKey) {
-    super(TYPE, VERSION, uri, isRemoveAction, data);
+          Uri uri, boolean isRemoveAction, @Nullable byte[] data, @Nullable String customCacheKey, Dummy dummy) {
+    super(TYPE, VERSION, uri, isRemoveAction, data, dummy);
     this.customCacheKey = customCacheKey;
   }
 
   @Override
-  protected ProgressiveDownloader createDownloader(DownloaderConstructorHelper constructorHelper) {
-    return new ProgressiveDownloader(uri, customCacheKey, constructorHelper);
+  protected ProgressiveDownloader createDownloader(DownloaderConstructorHelper constructorHelper, Dummy dummy) {
+    return new ProgressiveDownloader(uri, customCacheKey, constructorHelper, dummy);
   }
 
   @Override
@@ -70,6 +76,9 @@ protected void writeToStream(DataOutputStream output) throws IOException {
     output.writeBoolean(isRemoveAction);
     output.writeInt(data.length);
     output.write(data);
+    byte[] dummyBytes = Util.convertToBytes(mDummy);
+    output.writeInt(dummyBytes.length);
+    output.write(dummyBytes);
     boolean customCacheKeySet = customCacheKey != null;
     output.writeBoolean(customCacheKeySet);
     if (customCacheKeySet) {
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloadHelper.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloadHelper.java
index 49b7e36ea6..c9564ab0b5 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloadHelper.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloadHelper.java
@@ -18,6 +18,8 @@
 import android.net.Uri;
 import android.support.annotation.Nullable;
 import com.google.android.exoplayer2.source.TrackGroupArray;
+import com.vocabimate.protocol.Dummy;
+
 import java.util.List;
 
 /** A {@link DownloadHelper} for progressive streams. */
@@ -51,12 +53,12 @@ public TrackGroupArray getTrackGroups(int periodIndex) {
   }
 
   @Override
-  public DownloadAction getDownloadAction(@Nullable byte[] data, List<TrackKey> trackKeys) {
-    return new ProgressiveDownloadAction(uri, false, data, customCacheKey);
+  public DownloadAction getDownloadAction(@Nullable byte[] data, List<TrackKey> trackKeys, Dummy dummy) {
+    return new ProgressiveDownloadAction(uri, false, data, customCacheKey, dummy);
   }
 
   @Override
-  public DownloadAction getRemoveAction(@Nullable byte[] data) {
-    return new ProgressiveDownloadAction(uri, true, data, customCacheKey);
+  public DownloadAction getRemoveAction(@Nullable byte[] data, Dummy dummy) {
+    return new ProgressiveDownloadAction(uri, true, data, customCacheKey, dummy);
   }
 }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloader.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloader.java
index 8c80a23d67..98a2569ce7 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloader.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/ProgressiveDownloader.java
@@ -23,6 +23,8 @@
 import com.google.android.exoplayer2.upstream.cache.CacheUtil;
 import com.google.android.exoplayer2.upstream.cache.CacheUtil.CachingCounters;
 import com.google.android.exoplayer2.util.PriorityTaskManager;
+import com.vocabimate.protocol.Dummy;
+
 import java.io.IOException;
 import java.util.concurrent.atomic.AtomicBoolean;
 
@@ -45,12 +47,13 @@
    * @param customCacheKey A custom key that uniquely identifies the original stream. Used for cache
    *     indexing. May be null.
    * @param constructorHelper A {@link DownloaderConstructorHelper} instance.
+   * @param dummy
    */
   public ProgressiveDownloader(
-      Uri uri, String customCacheKey, DownloaderConstructorHelper constructorHelper) {
+          Uri uri, String customCacheKey, DownloaderConstructorHelper constructorHelper, Dummy dummy) {
     this.dataSpec = new DataSpec(uri, 0, C.LENGTH_UNSET, customCacheKey, 0);
     this.cache = constructorHelper.getCache();
-    this.dataSource = constructorHelper.buildCacheDataSource(false);
+    this.dataSource = constructorHelper.buildCacheDataSource(false, dummy);
     this.priorityTaskManager = constructorHelper.getPriorityTaskManager();
     cachingCounters = new CachingCounters();
     isCanceled = new AtomicBoolean();
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloadAction.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloadAction.java
index ae57131641..0f9e5dc605 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloadAction.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloadAction.java
@@ -18,9 +18,18 @@
 import android.net.Uri;
 import android.support.annotation.Nullable;
 import com.google.android.exoplayer2.util.Assertions;
+import com.google.android.exoplayer2.util.Util;
+import com.vocabimate.protocol.Dummy;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
+import java.io.ObjectInput;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutput;
+import java.io.ObjectOutputStream;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -51,12 +60,17 @@ public final DownloadAction readFromStream(int version, DataInputStream input)
       int dataLength = input.readInt();
       byte[] data = new byte[dataLength];
       input.readFully(data);
+      int byteArrayLength = input.readInt();
+      byte[] dummyBytes = new byte[byteArrayLength];
+      input.readFully(dummyBytes);
+      Dummy dummy = (Dummy) Util.convertToObject(dummyBytes);
       int keyCount = input.readInt();
       List<K> keys = new ArrayList<>();
       for (int i = 0; i < keyCount; i++) {
         keys.add(readKey(input));
       }
-      return createDownloadAction(uri, isRemoveAction, data, keys);
+
+      return createDownloadAction(uri, isRemoveAction, data, keys, dummy);
     }
 
     /** Deserializes a key from the {@code input}. */
@@ -64,7 +78,7 @@ public final DownloadAction readFromStream(int version, DataInputStream input)
 
     /** Returns a {@link DownloadAction}. */
     protected abstract DownloadAction createDownloadAction(
-        Uri manifestUri, boolean isRemoveAction, byte[] data, List<K> keys);
+            Uri manifestUri, boolean isRemoveAction, byte[] data, List<K> keys, Dummy dummy);
   }
 
   public final List<K> keys;
@@ -76,16 +90,17 @@ protected abstract DownloadAction createDownloadAction(
    * @param isRemoveAction Whether the data will be removed. If {@code false} it will be downloaded.
    * @param data Optional custom data for this action. If {@code null} an empty array will be used.
    * @param keys Keys of tracks to be downloaded. If empty, all tracks will be downloaded. If {@code
-   *     removeAction} is true, {@code keys} must be empty.
+*     removeAction} is true, {@code keys} must be empty.
+   * @param dummy
    */
   protected SegmentDownloadAction(
-      String type,
-      int version,
-      Uri uri,
-      boolean isRemoveAction,
-      @Nullable byte[] data,
-      List<K> keys) {
-    super(type, version, uri, isRemoveAction, data);
+          String type,
+          int version,
+          Uri uri,
+          boolean isRemoveAction,
+          @Nullable byte[] data,
+          List<K> keys, Dummy dummy) {
+    super(type, version, uri, isRemoveAction, data, dummy);
     if (isRemoveAction) {
       Assertions.checkArgument(keys.isEmpty());
       this.keys = Collections.emptyList();
@@ -102,12 +117,16 @@ public final void writeToStream(DataOutputStream output) throws IOException {
     output.writeBoolean(isRemoveAction);
     output.writeInt(data.length);
     output.write(data);
+    byte[] dummyBytes = Util.convertToBytes(mDummy);
+    output.writeInt(dummyBytes.length);
+    output.write(dummyBytes);
     output.writeInt(keys.size());
     for (int i = 0; i < keys.size(); i++) {
       writeKey(output, keys.get(i));
     }
   }
 
+
   /** Serializes the {@code key} into the {@code output}. */
   protected abstract void writeKey(DataOutputStream output, K key) throws IOException;
 
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloader.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloader.java
index 42c7351097..19e8627b04 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloader.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/SegmentDownloader.java
@@ -25,6 +25,7 @@
 import com.google.android.exoplayer2.upstream.cache.CacheUtil;
 import com.google.android.exoplayer2.upstream.cache.CacheUtil.CachingCounters;
 import com.google.android.exoplayer2.util.PriorityTaskManager;
+import com.vocabimate.protocol.Dummy;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -115,14 +116,15 @@ public int compareTo(@NonNull Segment other) {
    * @param streamKeys Keys defining which streams in the manifest should be selected for download.
    *     If empty, all streams are downloaded.
    * @param constructorHelper A {@link DownloaderConstructorHelper} instance.
+   * @param dummy
    */
   public SegmentDownloader(
-      Uri manifestUri, List<K> streamKeys, DownloaderConstructorHelper constructorHelper) {
+          Uri manifestUri, List<K> streamKeys, DownloaderConstructorHelper constructorHelper, Dummy dummy) {
     this.manifestUri = manifestUri;
     this.streamKeys = new ArrayList<>(streamKeys);
     this.cache = constructorHelper.getCache();
-    this.dataSource = constructorHelper.buildCacheDataSource(false);
-    this.offlineDataSource = constructorHelper.buildCacheDataSource(true);
+    this.dataSource = constructorHelper.buildCacheDataSource(false, dummy);
+    this.offlineDataSource = constructorHelper.buildCacheDataSource(true, dummy);
     this.priorityTaskManager = constructorHelper.getPriorityTaskManager();
     totalSegments = C.LENGTH_UNSET;
     isCanceled = new AtomicBoolean();
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/util/Util.java b/library/core/src/main/java/com/google/android/exoplayer2/util/Util.java
index 90c5d17b6d..cc64b3ff5c 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/util/Util.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/util/Util.java
@@ -40,11 +40,17 @@
 import com.google.android.exoplayer2.ParserException;
 import com.google.android.exoplayer2.SeekParameters;
 import com.google.android.exoplayer2.upstream.DataSource;
+
+import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.Closeable;
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.ObjectInput;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutput;
+import java.io.ObjectOutputStream;
 import java.lang.reflect.Method;
 import java.math.BigDecimal;
 import java.nio.charset.Charset;
@@ -1589,4 +1595,49 @@ private static void getDisplaySizeV9(Display display, Point outSize) {
       0XBCB4666D, 0XB8757BDA, 0XB5365D03, 0XB1F740B4
   };
 
+
+  public static byte[] convertToBytes(Object object) {
+    ByteArrayOutputStream bos = new ByteArrayOutputStream();
+    ObjectOutput out = null;
+    try {
+      out = new ObjectOutputStream(bos);
+      out.writeObject(object);
+      out.flush();
+      return bos.toByteArray();
+    } catch (IOException e) {
+      e.printStackTrace();
+    } finally {
+      try {
+        bos.close();
+      } catch (IOException ex) {
+        // ignore close exception
+      }
+    }
+    return null;
+  }
+
+  public static Object convertToObject(byte[] yourBytes) {
+    ByteArrayInputStream bis = new ByteArrayInputStream(yourBytes);
+    ObjectInput in = null;
+    try {
+      in = new ObjectInputStream(bis);
+      Object o = in.readObject();
+      return o;
+    } catch (IOException e) {
+      e.printStackTrace();
+    } catch (ClassNotFoundException e) {
+      e.printStackTrace();
+    } finally {
+      try {
+        if (in != null) {
+          in.close();
+        }
+      } catch (IOException ex) {
+        // ignore close exception
+      }
+    }
+    return null;
+  }
+
+
 }
diff --git a/library/core/src/test/java/com/google/android/exoplayer2/offline/ActionFileTest.java b/library/core/src/test/java/com/google/android/exoplayer2/offline/ActionFileTest.java
index e821bc34a0..2d7bb2584d 100644
--- a/library/core/src/test/java/com/google/android/exoplayer2/offline/ActionFileTest.java
+++ b/library/core/src/test/java/com/google/android/exoplayer2/offline/ActionFileTest.java
@@ -248,7 +248,7 @@ public DownloadAction readFromStream(int version, DataInputStream input) throws
     public static final int VERSION = 0;
 
     private FakeDownloadAction(String type, byte[] data) {
-      super(type, VERSION, Uri.parse("http://test.com"), /* isRemoveAction= */ false, data);
+      super(type, VERSION, Uri.parse("http://test.com"), /* isRemoveAction= */ false, data, dummy);
     }
 
     @Override
diff --git a/library/core/src/test/java/com/google/android/exoplayer2/offline/DownloadManagerTest.java b/library/core/src/test/java/com/google/android/exoplayer2/offline/DownloadManagerTest.java
index 0d0bf73d04..42092710dd 100644
--- a/library/core/src/test/java/com/google/android/exoplayer2/offline/DownloadManagerTest.java
+++ b/library/core/src/test/java/com/google/android/exoplayer2/offline/DownloadManagerTest.java
@@ -500,7 +500,7 @@ private void runOnMainThread(final Runnable r) {
     private final FakeDownloader downloader;
 
     private FakeDownloadAction(Uri uri, boolean isRemoveAction) {
-      super("Fake", /* version= */ 0, uri, isRemoveAction, /* data= */ null);
+      super("Fake", /* version= */ 0, uri, isRemoveAction, /* data= */ null, dummy);
       this.downloader = new FakeDownloader(isRemoveAction);
     }
 
diff --git a/library/core/src/test/java/com/google/android/exoplayer2/offline/ProgressiveDownloadActionTest.java b/library/core/src/test/java/com/google/android/exoplayer2/offline/ProgressiveDownloadActionTest.java
index bc3732e3d3..8a21dd6d58 100644
--- a/library/core/src/test/java/com/google/android/exoplayer2/offline/ProgressiveDownloadActionTest.java
+++ b/library/core/src/test/java/com/google/android/exoplayer2/offline/ProgressiveDownloadActionTest.java
@@ -49,20 +49,20 @@ public void setUp() {
 
   @Test
   public void testDownloadActionIsNotRemoveAction() throws Exception {
-    ProgressiveDownloadAction action = new ProgressiveDownloadAction(uri1, false, null, null);
+    ProgressiveDownloadAction action = new ProgressiveDownloadAction(uri1, false, null, null, dummy);
     assertThat(action.isRemoveAction).isFalse();
   }
 
   @Test
   public void testRemoveActionisRemoveAction() throws Exception {
-    ProgressiveDownloadAction action2 = new ProgressiveDownloadAction(uri1, true, null, null);
+    ProgressiveDownloadAction action2 = new ProgressiveDownloadAction(uri1, true, null, null, dummy);
     assertThat(action2.isRemoveAction).isTrue();
   }
 
   @Test
   public void testCreateDownloader() throws Exception {
     MockitoAnnotations.initMocks(this);
-    ProgressiveDownloadAction action = new ProgressiveDownloadAction(uri1, false, null, null);
+    ProgressiveDownloadAction action = new ProgressiveDownloadAction(uri1, false, null, null, dummy);
     DownloaderConstructorHelper constructorHelper = new DownloaderConstructorHelper(
         Mockito.mock(Cache.class), DummyDataSource.FACTORY);
     assertThat(action.createDownloader(constructorHelper)).isNotNull();
@@ -70,75 +70,75 @@ public void testCreateDownloader() throws Exception {
 
   @Test
   public void testSameUriCacheKeyDifferentAction_IsSameMedia() throws Exception {
-    ProgressiveDownloadAction action1 = new ProgressiveDownloadAction(uri1, true, null, null);
-    ProgressiveDownloadAction action2 = new ProgressiveDownloadAction(uri1, false, null, null);
+    ProgressiveDownloadAction action1 = new ProgressiveDownloadAction(uri1, true, null, null, dummy);
+    ProgressiveDownloadAction action2 = new ProgressiveDownloadAction(uri1, false, null, null, dummy);
     assertSameMedia(action1, action2);
   }
 
   @Test
   public void testNullCacheKeyDifferentUriAction_IsNotSameMedia() throws Exception {
-    ProgressiveDownloadAction action3 = new ProgressiveDownloadAction(uri2, true, null, null);
-    ProgressiveDownloadAction action4 = new ProgressiveDownloadAction(uri1, false, null, null);
+    ProgressiveDownloadAction action3 = new ProgressiveDownloadAction(uri2, true, null, null, dummy);
+    ProgressiveDownloadAction action4 = new ProgressiveDownloadAction(uri1, false, null, null, dummy);
     assertNotSameMedia(action3, action4);
   }
 
   @Test
   public void testSameCacheKeyDifferentUriAction_IsSameMedia() throws Exception {
-    ProgressiveDownloadAction action5 = new ProgressiveDownloadAction(uri2, true, null, "key");
-    ProgressiveDownloadAction action6 = new ProgressiveDownloadAction(uri1, false, null, "key");
+    ProgressiveDownloadAction action5 = new ProgressiveDownloadAction(uri2, true, null, "key", dummy);
+    ProgressiveDownloadAction action6 = new ProgressiveDownloadAction(uri1, false, null, "key", dummy);
     assertSameMedia(action5, action6);
   }
 
   @Test
   public void testSameUriDifferentCacheKeyAction_IsNotSameMedia() throws Exception {
-    ProgressiveDownloadAction action7 = new ProgressiveDownloadAction(uri1, true, null, "key");
-    ProgressiveDownloadAction action8 = new ProgressiveDownloadAction(uri1, false, null, "key2");
+    ProgressiveDownloadAction action7 = new ProgressiveDownloadAction(uri1, true, null, "key", dummy);
+    ProgressiveDownloadAction action8 = new ProgressiveDownloadAction(uri1, false, null, "key2", dummy);
     assertNotSameMedia(action7, action8);
   }
 
   @Test
   public void testSameUriNullCacheKeyAction_IsNotSameMedia() throws Exception {
-    ProgressiveDownloadAction action1 = new ProgressiveDownloadAction(uri1, true, null, "key");
-    ProgressiveDownloadAction action2 = new ProgressiveDownloadAction(uri1, false, null, null);
+    ProgressiveDownloadAction action1 = new ProgressiveDownloadAction(uri1, true, null, "key", dummy);
+    ProgressiveDownloadAction action2 = new ProgressiveDownloadAction(uri1, false, null, null, dummy);
     assertNotSameMedia(action1, action2);
   }
 
   @Test
   public void testEquals() throws Exception {
-    ProgressiveDownloadAction action1 = new ProgressiveDownloadAction(uri1, true, null, null);
+    ProgressiveDownloadAction action1 = new ProgressiveDownloadAction(uri1, true, null, null, dummy);
     assertThat(action1.equals(action1)).isTrue();
 
-    ProgressiveDownloadAction action2 = new ProgressiveDownloadAction(uri1, true, null, null);
-    ProgressiveDownloadAction action3 = new ProgressiveDownloadAction(uri1, true, null, null);
+    ProgressiveDownloadAction action2 = new ProgressiveDownloadAction(uri1, true, null, null, dummy);
+    ProgressiveDownloadAction action3 = new ProgressiveDownloadAction(uri1, true, null, null, dummy);
     assertThat(action2.equals(action3)).isTrue();
 
-    ProgressiveDownloadAction action4 = new ProgressiveDownloadAction(uri1, true, null, null);
-    ProgressiveDownloadAction action5 = new ProgressiveDownloadAction(uri1, false, null, null);
+    ProgressiveDownloadAction action4 = new ProgressiveDownloadAction(uri1, true, null, null, dummy);
+    ProgressiveDownloadAction action5 = new ProgressiveDownloadAction(uri1, false, null, null, dummy);
     assertThat(action4.equals(action5)).isFalse();
 
-    ProgressiveDownloadAction action6 = new ProgressiveDownloadAction(uri1, true, null, null);
-    ProgressiveDownloadAction action7 = new ProgressiveDownloadAction(uri1, true, null, "key");
+    ProgressiveDownloadAction action6 = new ProgressiveDownloadAction(uri1, true, null, null, dummy);
+    ProgressiveDownloadAction action7 = new ProgressiveDownloadAction(uri1, true, null, "key", dummy);
     assertThat(action6.equals(action7)).isFalse();
 
-    ProgressiveDownloadAction action8 = new ProgressiveDownloadAction(uri1, true, null, "key2");
-    ProgressiveDownloadAction action9 = new ProgressiveDownloadAction(uri1, true, null, "key");
+    ProgressiveDownloadAction action8 = new ProgressiveDownloadAction(uri1, true, null, "key2", dummy);
+    ProgressiveDownloadAction action9 = new ProgressiveDownloadAction(uri1, true, null, "key", dummy);
     assertThat(action8.equals(action9)).isFalse();
 
-    ProgressiveDownloadAction action10 = new ProgressiveDownloadAction(uri1, true, null, null);
-    ProgressiveDownloadAction action11 = new ProgressiveDownloadAction(uri2, true, null, null);
+    ProgressiveDownloadAction action10 = new ProgressiveDownloadAction(uri1, true, null, null, dummy);
+    ProgressiveDownloadAction action11 = new ProgressiveDownloadAction(uri2, true, null, null, dummy);
     assertThat(action10.equals(action11)).isFalse();
   }
 
   @Test
   public void testSerializerGetType() throws Exception {
-    ProgressiveDownloadAction action = new ProgressiveDownloadAction(uri1, false, null, null);
+    ProgressiveDownloadAction action = new ProgressiveDownloadAction(uri1, false, null, null, dummy);
     assertThat(action.type).isNotNull();
   }
 
   @Test
   public void testSerializerWriteRead() throws Exception {
-    doTestSerializationRoundTrip(new ProgressiveDownloadAction(uri1, false, null, null));
-    doTestSerializationRoundTrip(new ProgressiveDownloadAction(uri2, true, null, "key"));
+    doTestSerializationRoundTrip(new ProgressiveDownloadAction(uri1, false, null, null, dummy));
+    doTestSerializationRoundTrip(new ProgressiveDownloadAction(uri2, true, null, "key", dummy));
   }
 
   private void assertSameMedia(
diff --git a/library/dash/build.gradle b/library/dash/build.gradle
index 8558408d54..b60d06c4f4 100644
--- a/library/dash/build.gradle
+++ b/library/dash/build.gradle
@@ -39,6 +39,7 @@ dependencies {
     compileOnly 'org.checkerframework:checker-qual:' + checkerframeworkVersion
     implementation 'com.android.support:support-annotations:' + supportLibraryVersion
     testImplementation project(modulePrefix + 'testutils-robolectric')
+    implementation project(':protocol')
 }
 
 ext {
diff --git a/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloadAction.java b/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloadAction.java
index c2facd9626..c2a2a6af00 100644
--- a/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloadAction.java
+++ b/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloadAction.java
@@ -21,6 +21,8 @@
 import com.google.android.exoplayer2.offline.DownloaderConstructorHelper;
 import com.google.android.exoplayer2.offline.SegmentDownloadAction;
 import com.google.android.exoplayer2.source.dash.manifest.RepresentationKey;
+import com.vocabimate.protocol.Dummy;
+
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
@@ -42,8 +44,8 @@ protected RepresentationKey readKey(DataInputStream input) throws IOException {
 
         @Override
         protected DownloadAction createDownloadAction(
-            Uri uri, boolean isRemoveAction, byte[] data, List<RepresentationKey> keys) {
-          return new DashDownloadAction(uri, isRemoveAction, data, keys);
+                Uri uri, boolean isRemoveAction, byte[] data, List<RepresentationKey> keys, com.vocabimate.protocol.Dummy dummy) {
+          return new DashDownloadAction(uri, isRemoveAction, data, keys, dummy);
         }
       };
 
@@ -52,16 +54,17 @@ protected DownloadAction createDownloadAction(
    * @param isRemoveAction Whether the data will be removed. If {@code false} it will be downloaded.
    * @param data Optional custom data for this action.
    * @param keys Keys of representations to be downloaded. If empty, all representations are
-   *     downloaded. If {@code removeAction} is true, {@code keys} must be empty.
+*     downloaded. If {@code removeAction} is true, {@code keys} must be empty.
+   * @param dummy
    */
   public DashDownloadAction(
-      Uri uri, boolean isRemoveAction, @Nullable byte[] data, List<RepresentationKey> keys) {
-    super(TYPE, VERSION, uri, isRemoveAction, data, keys);
+          Uri uri, boolean isRemoveAction, @Nullable byte[] data, List<RepresentationKey> keys, Dummy dummy) {
+    super(TYPE, VERSION, uri, isRemoveAction, data, keys, dummy);
   }
 
   @Override
-  protected DashDownloader createDownloader(DownloaderConstructorHelper constructorHelper) {
-    return new DashDownloader(uri, keys, constructorHelper);
+  protected DashDownloader createDownloader(DownloaderConstructorHelper constructorHelper, Dummy dummy) {
+    return new DashDownloader(uri, keys, constructorHelper, dummy);
   }
 
   @Override
diff --git a/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloadHelper.java b/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloadHelper.java
index bd19ff6587..ebd10bfa63 100644
--- a/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloadHelper.java
+++ b/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloadHelper.java
@@ -86,15 +86,15 @@ public TrackGroupArray getTrackGroups(int periodIndex) {
   }
 
   @Override
-  public DashDownloadAction getDownloadAction(@Nullable byte[] data, List<TrackKey> trackKeys) {
+  public DashDownloadAction getDownloadAction(@Nullable byte[] data, List<TrackKey> trackKeys, com.vocabimate.protocol.Dummy dummy) {
     return new DashDownloadAction(
-        uri, /* isRemoveAction= */ false, data, toRepresentationKeys(trackKeys));
+        uri, /* isRemoveAction= */ false, data, toRepresentationKeys(trackKeys), dummy);
   }
 
   @Override
-  public DashDownloadAction getRemoveAction(@Nullable byte[] data) {
+  public DashDownloadAction getRemoveAction(@Nullable byte[] data, com.vocabimate.protocol.Dummy dummy) {
     return new DashDownloadAction(
-        uri, /* isRemoveAction= */ true, data, Collections.<RepresentationKey>emptyList());
+        uri, /* isRemoveAction= */ true, data, Collections.<RepresentationKey>emptyList(), dummy);
   }
 
   private static List<RepresentationKey> toRepresentationKeys(List<TrackKey> trackKeys) {
diff --git a/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloader.java b/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloader.java
index 8762244558..453cd2f23c 100644
--- a/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloader.java
+++ b/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/offline/DashDownloader.java
@@ -33,6 +33,8 @@
 import com.google.android.exoplayer2.source.dash.manifest.RepresentationKey;
 import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.DataSpec;
+import com.vocabimate.protocol.Dummy;
+
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
@@ -68,12 +70,13 @@
    * @param representationKeys Keys defining which representations in the manifest should be
    *     selected for download. If empty, all representations are downloaded.
    * @param constructorHelper A {@link DownloaderConstructorHelper} instance.
+   * @param dummy
    */
   public DashDownloader(
-      Uri manifestUri,
-      List<RepresentationKey> representationKeys,
-      DownloaderConstructorHelper constructorHelper) {
-    super(manifestUri, representationKeys, constructorHelper);
+          Uri manifestUri,
+          List<RepresentationKey> representationKeys,
+          DownloaderConstructorHelper constructorHelper, Dummy dummy) {
+    super(manifestUri, representationKeys, constructorHelper, dummy);
   }
 
   @Override
diff --git a/library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DashDownloadActionTest.java b/library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DashDownloadActionTest.java
index 43d9bd9965..c319e20096 100644
--- a/library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DashDownloadActionTest.java
+++ b/library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DashDownloadActionTest.java
@@ -200,6 +200,6 @@ private static DashDownloadAction newAction(
       Uri uri, boolean isRemoveAction, @Nullable byte[] data, RepresentationKey... keys) {
     ArrayList<RepresentationKey> keysList = new ArrayList<>();
     Collections.addAll(keysList, keys);
-    return new DashDownloadAction(uri, isRemoveAction, data, keysList);
+    return new DashDownloadAction(uri, isRemoveAction, data, keysList, dummy);
   }
 }
diff --git a/library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DashDownloaderTest.java b/library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DashDownloaderTest.java
index 4c96357528..df992c8089 100644
--- a/library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DashDownloaderTest.java
+++ b/library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DashDownloaderTest.java
@@ -305,7 +305,7 @@ private DashDownloader getDashDownloader(FakeDataSet fakeDataSet, Representation
 
   private DashDownloader getDashDownloader(Factory factory, RepresentationKey... keys) {
     return new DashDownloader(
-        TEST_MPD_URI, keysList(keys), new DownloaderConstructorHelper(cache, factory));
+        TEST_MPD_URI, keysList(keys), new DownloaderConstructorHelper(cache, factory), dummy);
   }
 
   private static ArrayList<RepresentationKey> keysList(RepresentationKey... keys) {
diff --git a/library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DownloadManagerDashTest.java b/library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DownloadManagerDashTest.java
index 8ca2aa083b..c3262a286a 100644
--- a/library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DownloadManagerDashTest.java
+++ b/library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DownloadManagerDashTest.java
@@ -283,6 +283,6 @@ private static DashDownloadAction newAction(
       Uri uri, boolean isRemoveAction, @Nullable byte[] data, RepresentationKey... keys) {
     ArrayList<RepresentationKey> keysList = new ArrayList<>();
     Collections.addAll(keysList, keys);
-    return new DashDownloadAction(uri, isRemoveAction, data, keysList);
+    return new DashDownloadAction(uri, isRemoveAction, data, keysList, dummy);
   }
 }
diff --git a/library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DownloadServiceDashTest.java b/library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DownloadServiceDashTest.java
index 745acd9bbf..836c0c97ab 100644
--- a/library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DownloadServiceDashTest.java
+++ b/library/dash/src/test/java/com/google/android/exoplayer2/source/dash/offline/DownloadServiceDashTest.java
@@ -239,6 +239,6 @@ private static DashDownloadAction newAction(
       Uri uri, boolean isRemoveAction, @Nullable byte[] data, RepresentationKey... keys) {
     ArrayList<RepresentationKey> keysList = new ArrayList<>();
     Collections.addAll(keysList, keys);
-    return new DashDownloadAction(uri, isRemoveAction, data, keysList);
+    return new DashDownloadAction(uri, isRemoveAction, data, keysList, dummy);
   }
 }
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloadAction.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloadAction.java
index e56bf66efd..b58717b91a 100644
--- a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloadAction.java
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloadAction.java
@@ -21,6 +21,8 @@
 import com.google.android.exoplayer2.offline.DownloaderConstructorHelper;
 import com.google.android.exoplayer2.offline.SegmentDownloadAction;
 import com.google.android.exoplayer2.source.hls.playlist.RenditionKey;
+import com.vocabimate.protocol.Dummy;
+
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
@@ -44,8 +46,8 @@ protected RenditionKey readKey(DataInputStream input) throws IOException {
 
         @Override
         protected DownloadAction createDownloadAction(
-            Uri uri, boolean isRemoveAction, byte[] data, List<RenditionKey> keys) {
-          return new HlsDownloadAction(uri, isRemoveAction, data, keys);
+                Uri uri, boolean isRemoveAction, byte[] data, List<RenditionKey> keys, Dummy dummy) {
+          return new HlsDownloadAction(uri, isRemoveAction, data, keys, dummy);
         }
       };
 
@@ -54,16 +56,17 @@ protected DownloadAction createDownloadAction(
    * @param isRemoveAction Whether the data will be removed. If {@code false} it will be downloaded.
    * @param data Optional custom data for this action.
    * @param keys Keys of renditions to be downloaded. If empty, all renditions are downloaded. If
-   *     {@code removeAction} is true, {@code keys} must empty.
+*     {@code removeAction} is true, {@code keys} must empty.
+   * @param dummy
    */
   public HlsDownloadAction(
-      Uri uri, boolean isRemoveAction, @Nullable byte[] data, List<RenditionKey> keys) {
-    super(TYPE, VERSION, uri, isRemoveAction, data, keys);
+          Uri uri, boolean isRemoveAction, @Nullable byte[] data, List<RenditionKey> keys, Dummy dummy) {
+    super(TYPE, VERSION, uri, isRemoveAction, data, keys, dummy);
   }
 
   @Override
-  protected HlsDownloader createDownloader(DownloaderConstructorHelper constructorHelper) {
-    return new HlsDownloader(uri, keys, constructorHelper);
+  protected HlsDownloader createDownloader(DownloaderConstructorHelper constructorHelper, Dummy dummy) {
+    return new HlsDownloader(uri, keys, constructorHelper, dummy);
   }
 
   @Override
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloadHelper.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloadHelper.java
index 7fe03f6cb3..0a1b20bebf 100644
--- a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloadHelper.java
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloadHelper.java
@@ -30,6 +30,8 @@
 import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.ParsingLoadable;
 import com.google.android.exoplayer2.util.Assertions;
+import com.vocabimate.protocol.Dummy;
+
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -97,16 +99,16 @@ public TrackGroupArray getTrackGroups(int periodIndex) {
   }
 
   @Override
-  public HlsDownloadAction getDownloadAction(@Nullable byte[] data, List<TrackKey> trackKeys) {
+  public HlsDownloadAction getDownloadAction(@Nullable byte[] data, List<TrackKey> trackKeys, Dummy dummy) {
     Assertions.checkNotNull(renditionTypes);
     return new HlsDownloadAction(
-        uri, /* isRemoveAction= */ false, data, toRenditionKeys(trackKeys, renditionTypes));
+        uri, /* isRemoveAction= */ false, data, toRenditionKeys(trackKeys, renditionTypes), dummy);
   }
 
   @Override
-  public HlsDownloadAction getRemoveAction(@Nullable byte[] data) {
+  public HlsDownloadAction getRemoveAction(@Nullable byte[] data, Dummy dummy) {
     return new HlsDownloadAction(
-        uri, /* isRemoveAction= */ true, data, Collections.<RenditionKey>emptyList());
+        uri, /* isRemoveAction= */ true, data, Collections.<RenditionKey>emptyList(), dummy);
   }
 
   private static Format[] toFormats(List<HlsMasterPlaylist.HlsUrl> hlsUrls) {
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloader.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloader.java
index bd59eed447..757a95eac6 100644
--- a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloader.java
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloader.java
@@ -29,6 +29,8 @@
 import com.google.android.exoplayer2.upstream.DataSpec;
 import com.google.android.exoplayer2.upstream.ParsingLoadable;
 import com.google.android.exoplayer2.util.UriUtil;
+import com.vocabimate.protocol.Dummy;
+
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.HashSet;
@@ -64,12 +66,13 @@
    * @param renditionKeys Keys defining which renditions in the playlist should be selected for
    *     download. If empty, all renditions are downloaded.
    * @param constructorHelper A {@link DownloaderConstructorHelper} instance.
+   * @param dummy
    */
   public HlsDownloader(
-      Uri playlistUri,
-      List<RenditionKey> renditionKeys,
-      DownloaderConstructorHelper constructorHelper) {
-    super(playlistUri, renditionKeys, constructorHelper);
+          Uri playlistUri,
+          List<RenditionKey> renditionKeys,
+          DownloaderConstructorHelper constructorHelper, Dummy dummy) {
+    super(playlistUri, renditionKeys, constructorHelper, dummy);
   }
 
   @Override
diff --git a/library/hls/src/test/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloaderTest.java b/library/hls/src/test/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloaderTest.java
index 6e816dd8a7..d8b7dd83b3 100644
--- a/library/hls/src/test/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloaderTest.java
+++ b/library/hls/src/test/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloaderTest.java
@@ -184,7 +184,7 @@ public void testDownloadEncMediaPlaylist() throws Exception {
   private HlsDownloader getHlsDownloader(String mediaPlaylistUri, List<RenditionKey> keys) {
     Factory factory = new Factory(null).setFakeDataSet(fakeDataSet);
     return new HlsDownloader(
-        Uri.parse(mediaPlaylistUri), keys, new DownloaderConstructorHelper(cache, factory));
+        Uri.parse(mediaPlaylistUri), keys, new DownloaderConstructorHelper(cache, factory), dummy);
   }
 
   private static ArrayList<RenditionKey> getKeys(int... variantIndices) {
diff --git a/library/smoothstreaming/build.gradle b/library/smoothstreaming/build.gradle
index 46797e47fc..be56c3facd 100644
--- a/library/smoothstreaming/build.gradle
+++ b/library/smoothstreaming/build.gradle
@@ -39,6 +39,7 @@ dependencies {
     compileOnly 'org.checkerframework:checker-qual:' + checkerframeworkVersion
     implementation 'com.android.support:support-annotations:' + supportLibraryVersion
     testImplementation project(modulePrefix + 'testutils-robolectric')
+    implementation project(':protocol')
 }
 
 ext {
diff --git a/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloadAction.java b/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloadAction.java
index d4b3ef6622..57962dfa5e 100644
--- a/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloadAction.java
+++ b/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloadAction.java
@@ -21,6 +21,8 @@
 import com.google.android.exoplayer2.offline.DownloaderConstructorHelper;
 import com.google.android.exoplayer2.offline.SegmentDownloadAction;
 import com.google.android.exoplayer2.source.smoothstreaming.manifest.StreamKey;
+import com.vocabimate.protocol.Dummy;
+
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
@@ -42,8 +44,8 @@ protected StreamKey readKey(DataInputStream input) throws IOException {
 
         @Override
         protected DownloadAction createDownloadAction(
-            Uri uri, boolean isRemoveAction, byte[] data, List<StreamKey> keys) {
-          return new SsDownloadAction(uri, isRemoveAction, data, keys);
+                Uri uri, boolean isRemoveAction, byte[] data, List<StreamKey> keys, com.vocabimate.protocol.Dummy dummy) {
+          return new SsDownloadAction(uri, isRemoveAction, data, keys, dummy);
         }
       };
 
@@ -52,16 +54,17 @@ protected DownloadAction createDownloadAction(
    * @param isRemoveAction Whether the data will be removed. If {@code false} it will be downloaded.
    * @param data Optional custom data for this action.
    * @param keys Keys of streams to be downloaded. If empty, all streams are downloaded. If {@code
-   *     removeAction} is true, {@code keys} must be empty.
+*     removeAction} is true, {@code keys} must be empty.
+   * @param dummy
    */
   public SsDownloadAction(
-      Uri uri, boolean isRemoveAction, @Nullable byte[] data, List<StreamKey> keys) {
-    super(TYPE, VERSION, uri, isRemoveAction, data, keys);
+          Uri uri, boolean isRemoveAction, @Nullable byte[] data, List<StreamKey> keys, Dummy dummy) {
+    super(TYPE, VERSION, uri, isRemoveAction, data, keys, dummy);
   }
 
   @Override
-  protected SsDownloader createDownloader(DownloaderConstructorHelper constructorHelper) {
-    return new SsDownloader(uri, keys, constructorHelper);
+  protected SsDownloader createDownloader(DownloaderConstructorHelper constructorHelper, Dummy dummy) {
+    return new SsDownloader(uri, keys, constructorHelper, dummy);
   }
 
   @Override
diff --git a/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloadHelper.java b/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloadHelper.java
index e60be93c93..098075b01b 100644
--- a/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloadHelper.java
+++ b/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloadHelper.java
@@ -76,14 +76,14 @@ public TrackGroupArray getTrackGroups(int periodIndex) {
   }
 
   @Override
-  public SsDownloadAction getDownloadAction(@Nullable byte[] data, List<TrackKey> trackKeys) {
-    return new SsDownloadAction(uri, /* isRemoveAction= */ false, data, toStreamKeys(trackKeys));
+  public SsDownloadAction getDownloadAction(@Nullable byte[] data, List<TrackKey> trackKeys, com.vocabimate.protocol.Dummy dummy) {
+    return new SsDownloadAction(uri, /* isRemoveAction= */ false, data, toStreamKeys(trackKeys), dummy);
   }
 
   @Override
-  public SsDownloadAction getRemoveAction(@Nullable byte[] data) {
+  public SsDownloadAction getRemoveAction(@Nullable byte[] data, com.vocabimate.protocol.Dummy dummy) {
     return new SsDownloadAction(
-        uri, /* isRemoveAction= */ true, data, Collections.<StreamKey>emptyList());
+        uri, /* isRemoveAction= */ true, data, Collections.<StreamKey>emptyList(), dummy);
   }
 
   private static List<StreamKey> toStreamKeys(List<TrackKey> trackKeys) {
diff --git a/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloader.java b/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloader.java
index 4fef3eb469..b51db072e2 100644
--- a/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloader.java
+++ b/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/offline/SsDownloader.java
@@ -27,6 +27,8 @@
 import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.DataSpec;
 import com.google.android.exoplayer2.upstream.ParsingLoadable;
+import com.vocabimate.protocol.Dummy;
+
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
@@ -61,10 +63,11 @@
    * @param streamKeys Keys defining which streams in the manifest should be selected for download.
    *     If empty, all streams are downloaded.
    * @param constructorHelper A {@link DownloaderConstructorHelper} instance.
+   * @param dummy
    */
   public SsDownloader(
-      Uri manifestUri, List<StreamKey> streamKeys, DownloaderConstructorHelper constructorHelper) {
-    super(SsUtil.fixManifestUri(manifestUri), streamKeys, constructorHelper);
+          Uri manifestUri, List<StreamKey> streamKeys, DownloaderConstructorHelper constructorHelper, Dummy dummy) {
+    super(SsUtil.fixManifestUri(manifestUri), streamKeys, constructorHelper, dummy);
   }
 
   @Override
diff --git a/playbacktests/src/androidTest/java/com/google/android/exoplayer2/playbacktests/gts/DashDownloadTest.java b/playbacktests/src/androidTest/java/com/google/android/exoplayer2/playbacktests/gts/DashDownloadTest.java
index 5267d54bef..aa58d0c00e 100644
--- a/playbacktests/src/androidTest/java/com/google/android/exoplayer2/playbacktests/gts/DashDownloadTest.java
+++ b/playbacktests/src/androidTest/java/com/google/android/exoplayer2/playbacktests/gts/DashDownloadTest.java
@@ -123,7 +123,7 @@ private DashDownloader downloadContent() throws Exception {
     }
     DownloaderConstructorHelper constructorHelper =
         new DownloaderConstructorHelper(cache, httpDataSourceFactory);
-    return new DashDownloader(MANIFEST_URI, keys, constructorHelper);
+    return new DashDownloader(MANIFEST_URI, keys, constructorHelper, dummy);
   }
 
 }
diff --git a/protocol/src/main/java/com/vocabimate/protocol/Dummy.java b/protocol/src/main/java/com/vocabimate/protocol/Dummy.java
new file mode 100644
index 0000000000..78182bd206
--- /dev/null
+++ b/protocol/src/main/java/com/vocabimate/protocol/Dummy.java
@@ -0,0 +1,19 @@
+package com.vocabimate.protocol;
+
+import java.io.Serializable;
+
+/**
+ * Created by Hisham on 18/Oct/2018 - 15:18
+ */
+public class Dummy implements Serializable{
+    private KeyHelperModel keyHelper;
+
+    public Dummy setKeyHelper(KeyHelperModel keyHelper) {
+        this.keyHelper = keyHelper;
+        return this;
+    }
+
+    public KeyHelperModel getKeyHelper() {
+        return keyHelper;
+    }
+}
diff --git a/protocol/src/main/java/com/vocabimate/protocol/TokenDecryptionHelper.java b/protocol/src/main/java/com/vocabimate/protocol/TokenDecryptionHelper.java
index a117f06964..2e795eeb05 100644
--- a/protocol/src/main/java/com/vocabimate/protocol/TokenDecryptionHelper.java
+++ b/protocol/src/main/java/com/vocabimate/protocol/TokenDecryptionHelper.java
@@ -15,8 +15,8 @@ public TokenDecryptionHelper(String token, String tokenEncryptedStringFromByteAr
     public byte[] decrypt(){
 
         String key = token.substring(0, 16);
-//        String iv = token.substring(token.length() - 16, token.length());
-        String iv = token.substring(token.length() - 17, token.length() - 1); // abcdefgh
+        String iv = token.substring(token.length() - 16, token.length());
+//        String iv = token.substring(token.length() - 17, token.length() - 1); // abcdefgh
         byte[] keyBytes = tokenEncryptedStringFromByteArray.getBytes();
         byte[] decryptKey = AesEncryptionUtil.decrypt(key, iv, keyBytes);
         return decryptKey;
diff --git a/protocol/src/main/java/com/vocabimate/protocol/VocabimateHttpUrlConnection.java b/protocol/src/main/java/com/vocabimate/protocol/VocabimateHttpUrlConnection.java
index 3a3cc70a0b..a8cdf2522f 100644
--- a/protocol/src/main/java/com/vocabimate/protocol/VocabimateHttpUrlConnection.java
+++ b/protocol/src/main/java/com/vocabimate/protocol/VocabimateHttpUrlConnection.java
@@ -18,6 +18,9 @@
     protected VocAbsInputStream vocAbsInputStream;
     private KeyHelperModel keyHelper;
 
+    /**
+     * @see com.vocabimate.protocol.VocabimateInputStream VocabimateInputStream
+     */
     public VocabimateHttpUrlConnection(URL url) throws IOException {
         super(url);
         try {
@@ -43,10 +46,10 @@ public void connect() throws IOException {
         URL url = new URL(licence_url);
         HttpURLConnection connection = (HttpURLConnection) url.openConnection();
 
-        if(token == null){
+        if (token == null) {
             vocAbsInputStream.setInputStream(connection.getInputStream());
         }
-        if(token != null) {
+        if (token != null) {
             String result = readStream(connection.getInputStream());
             LicenceModel licenceModel = new Gson().fromJson(result, LicenceModel.class);
             InputStream stream = null;
@@ -57,13 +60,18 @@ public void connect() throws IOException {
 //            for (int i = 0; i < decrypt.length; i++) {
 //                buffer[i] = decrypt[i];
 //            }
-            vocAbsInputStream.setInputStream(stream);
+                vocAbsInputStream.setInputStream(stream);
             }
         }
         connected = true;
         responseCode = 200;
     }
 
+    @Override
+    public int getResponseCode() throws IOException {
+        return responseCode;
+    }
+
     private String readStream(InputStream in) {
         BufferedReader reader = null;
         StringBuffer response = new StringBuffer();
@@ -89,7 +97,7 @@ private String readStream(InputStream in) {
 
     @Override
     public String getContentType() {
-        return super.getContentType(); // application/pgp-keys
+        return "application/pgp-keys";
     }
 
     @Override
@@ -110,11 +118,11 @@ public InputStream getInputStream() throws IOException {
         return vocAbsInputStream;
     }
 
-    public void setKeyHelper(KeyHelperModel keyHelper) {
-        this.keyHelper = keyHelper;
-    }
-
     public KeyHelperModel getKeyHelper() {
         return keyHelper;
     }
+
+    public void setKeyHelper(KeyHelperModel keyHelper) {
+        this.keyHelper = keyHelper;
+    }
 }
diff --git a/protocol/src/main/java/com/vocabimate/protocol/VocabimateInputStream.java b/protocol/src/main/java/com/vocabimate/protocol/VocabimateInputStream.java
index 1c639df003..fc11915170 100644
--- a/protocol/src/main/java/com/vocabimate/protocol/VocabimateInputStream.java
+++ b/protocol/src/main/java/com/vocabimate/protocol/VocabimateInputStream.java
@@ -4,7 +4,8 @@
 import java.io.InputStream;
 
 /**
- * Created by Hisham on 15/Oct/2018 - 17:55
+ * Class is being used using reflection
+ * @see VocabimateHttpUrlConnection
  */
 public class VocabimateInputStream extends VocAbsInputStream {
     @Override
