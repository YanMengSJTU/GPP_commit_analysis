diff --git a/.idea/codeStyleSettings.xml b/.idea/codeStyleSettings.xml
deleted file mode 100644
index 056b47a1e8..0000000000
--- a/.idea/codeStyleSettings.xml
+++ /dev/null
@@ -1,495 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectCodeStyleSettingsManager">
-    <option name="PER_PROJECT_SETTINGS">
-      <value>
-        <option name="OTHER_INDENT_OPTIONS">
-          <value>
-            <option name="INDENT_SIZE" value="2" />
-            <option name="CONTINUATION_INDENT_SIZE" value="4" />
-            <option name="TAB_SIZE" value="2" />
-            <option name="USE_TAB_CHARACTER" value="false" />
-            <option name="SMART_TABS" value="false" />
-            <option name="LABEL_INDENT_SIZE" value="0" />
-            <option name="LABEL_INDENT_ABSOLUTE" value="false" />
-            <option name="USE_RELATIVE_INDENTS" value="false" />
-          </value>
-        </option>
-        <option name="CLASS_COUNT_TO_USE_IMPORT_ON_DEMAND" value="999" />
-        <option name="NAMES_COUNT_TO_USE_IMPORT_ON_DEMAND" value="999" />
-        <option name="PACKAGES_TO_USE_IMPORT_ON_DEMAND">
-          <value />
-        </option>
-        <option name="IMPORT_LAYOUT_TABLE">
-          <value>
-            <package name="" withSubpackages="true" static="true" />
-            <emptyLine />
-            <package name="" withSubpackages="true" static="false" />
-          </value>
-        </option>
-        <option name="RIGHT_MARGIN" value="100" />
-        <option name="JD_ALIGN_PARAM_COMMENTS" value="false" />
-        <option name="JD_ALIGN_EXCEPTION_COMMENTS" value="false" />
-        <option name="JD_P_AT_EMPTY_LINES" value="false" />
-        <option name="JD_KEEP_EMPTY_PARAMETER" value="false" />
-        <option name="JD_KEEP_EMPTY_EXCEPTION" value="false" />
-        <option name="JD_KEEP_EMPTY_RETURN" value="false" />
-        <option name="KEEP_CONTROL_STATEMENT_IN_ONE_LINE" value="false" />
-        <option name="KEEP_BLANK_LINES_IN_CODE" value="1" />
-        <option name="KEEP_BLANK_LINES_BEFORE_RBRACE" value="0" />
-        <option name="ALIGN_MULTILINE_PARAMETERS" value="false" />
-        <option name="ALIGN_MULTILINE_FOR" value="false" />
-        <option name="SPACE_BEFORE_ARRAY_INITIALIZER_LBRACE" value="true" />
-        <option name="CALL_PARAMETERS_WRAP" value="1" />
-        <option name="METHOD_PARAMETERS_WRAP" value="1" />
-        <option name="EXTENDS_LIST_WRAP" value="1" />
-        <option name="THROWS_KEYWORD_WRAP" value="1" />
-        <option name="METHOD_CALL_CHAIN_WRAP" value="1" />
-        <option name="BINARY_OPERATION_WRAP" value="1" />
-        <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />
-        <option name="TERNARY_OPERATION_WRAP" value="1" />
-        <option name="TERNARY_OPERATION_SIGNS_ON_NEXT_LINE" value="true" />
-        <option name="FOR_STATEMENT_WRAP" value="1" />
-        <option name="ARRAY_INITIALIZER_WRAP" value="1" />
-        <option name="WRAP_COMMENTS" value="true" />
-        <option name="IF_BRACE_FORCE" value="3" />
-        <option name="DOWHILE_BRACE_FORCE" value="3" />
-        <option name="WHILE_BRACE_FORCE" value="3" />
-        <option name="FOR_BRACE_FORCE" value="3" />
-        <AndroidXmlCodeStyleSettings>
-          <option name="USE_CUSTOM_SETTINGS" value="true" />
-          <option name="LAYOUT_SETTINGS">
-            <value>
-              <option name="INSERT_BLANK_LINE_BEFORE_TAG" value="false" />
-            </value>
-          </option>
-        </AndroidXmlCodeStyleSettings>
-        <Objective-C>
-          <option name="INDENT_NAMESPACE_MEMBERS" value="0" />
-          <option name="INDENT_C_STRUCT_MEMBERS" value="2" />
-          <option name="INDENT_CLASS_MEMBERS" value="2" />
-          <option name="INDENT_VISIBILITY_KEYWORDS" value="1" />
-          <option name="INDENT_INSIDE_CODE_BLOCK" value="2" />
-          <option name="KEEP_STRUCTURES_IN_ONE_LINE" value="true" />
-          <option name="FUNCTION_PARAMETERS_WRAP" value="5" />
-          <option name="FUNCTION_CALL_ARGUMENTS_WRAP" value="5" />
-          <option name="TEMPLATE_CALL_ARGUMENTS_WRAP" value="5" />
-          <option name="TEMPLATE_CALL_ARGUMENTS_ALIGN_MULTILINE" value="true" />
-          <option name="ALIGN_INIT_LIST_IN_COLUMNS" value="false" />
-          <option name="SPACE_BEFORE_SUPERCLASS_COLON" value="false" />
-        </Objective-C>
-        <Objective-C-extensions>
-          <file>
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Import" />
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Macro" />
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Typedef" />
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Enum" />
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Constant" />
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Global" />
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Struct" />
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="FunctionPredecl" />
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Function" />
-          </file>
-          <class>
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Property" />
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="Synthesize" />
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="InitMethod" />
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="StaticMethod" />
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="InstanceMethod" />
-            <option name="com.jetbrains.cidr.lang.util.OCDeclarationKind" value="DeallocMethod" />
-          </class>
-          <extensions>
-            <pair source="cc" header="h" />
-            <pair source="c" header="h" />
-          </extensions>
-        </Objective-C-extensions>
-        <XML>
-          <option name="XML_ALIGN_ATTRIBUTES" value="false" />
-          <option name="XML_LEGACY_SETTINGS_IMPORTED" value="true" />
-        </XML>
-        <codeStyleSettings language="HTML">
-          <indentOptions>
-            <option name="INDENT_SIZE" value="2" />
-            <option name="CONTINUATION_INDENT_SIZE" value="4" />
-            <option name="TAB_SIZE" value="2" />
-          </indentOptions>
-        </codeStyleSettings>
-        <codeStyleSettings language="JAVA">
-          <option name="KEEP_CONTROL_STATEMENT_IN_ONE_LINE" value="false" />
-          <option name="KEEP_BLANK_LINES_IN_CODE" value="1" />
-          <option name="BLANK_LINES_AFTER_CLASS_HEADER" value="1" />
-          <option name="ALIGN_MULTILINE_PARAMETERS" value="false" />
-          <option name="ALIGN_MULTILINE_RESOURCES" value="false" />
-          <option name="ALIGN_MULTILINE_FOR" value="false" />
-          <option name="CALL_PARAMETERS_WRAP" value="1" />
-          <option name="METHOD_PARAMETERS_WRAP" value="1" />
-          <option name="EXTENDS_LIST_WRAP" value="1" />
-          <option name="THROWS_KEYWORD_WRAP" value="1" />
-          <option name="METHOD_CALL_CHAIN_WRAP" value="1" />
-          <option name="BINARY_OPERATION_WRAP" value="1" />
-          <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />
-          <option name="TERNARY_OPERATION_WRAP" value="1" />
-          <option name="TERNARY_OPERATION_SIGNS_ON_NEXT_LINE" value="true" />
-          <option name="FOR_STATEMENT_WRAP" value="1" />
-          <option name="ARRAY_INITIALIZER_WRAP" value="1" />
-          <option name="IF_BRACE_FORCE" value="3" />
-          <option name="DOWHILE_BRACE_FORCE" value="3" />
-          <option name="WHILE_BRACE_FORCE" value="3" />
-          <option name="FOR_BRACE_FORCE" value="3" />
-          <option name="PARENT_SETTINGS_INSTALLED" value="true" />
-          <indentOptions>
-            <option name="INDENT_SIZE" value="2" />
-            <option name="CONTINUATION_INDENT_SIZE" value="4" />
-            <option name="TAB_SIZE" value="2" />
-          </indentOptions>
-        </codeStyleSettings>
-        <codeStyleSettings language="JSON">
-          <indentOptions>
-            <option name="CONTINUATION_INDENT_SIZE" value="4" />
-            <option name="TAB_SIZE" value="2" />
-          </indentOptions>
-        </codeStyleSettings>
-        <codeStyleSettings language="ObjectiveC">
-          <option name="KEEP_BLANK_LINES_BEFORE_RBRACE" value="1" />
-          <option name="BLANK_LINES_BEFORE_IMPORTS" value="0" />
-          <option name="BLANK_LINES_AFTER_IMPORTS" value="0" />
-          <option name="BLANK_LINES_AROUND_CLASS" value="0" />
-          <option name="BLANK_LINES_AROUND_METHOD" value="0" />
-          <option name="BLANK_LINES_AROUND_METHOD_IN_INTERFACE" value="0" />
-          <option name="ALIGN_MULTILINE_BINARY_OPERATION" value="false" />
-          <option name="BINARY_OPERATION_SIGN_ON_NEXT_LINE" value="true" />
-          <option name="FOR_STATEMENT_WRAP" value="1" />
-          <option name="ASSIGNMENT_WRAP" value="1" />
-          <indentOptions>
-            <option name="INDENT_SIZE" value="2" />
-            <option name="CONTINUATION_INDENT_SIZE" value="4" />
-          </indentOptions>
-        </codeStyleSettings>
-        <codeStyleSettings language="XML">
-          <indentOptions>
-            <option name="INDENT_SIZE" value="2" />
-            <option name="CONTINUATION_INDENT_SIZE" value="2" />
-            <option name="TAB_SIZE" value="2" />
-          </indentOptions>
-          <arrangement>
-            <rules>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>xmlns:android</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>^$</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>xmlns:.*</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>^$</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                  <order>BY_NAME</order>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:id</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>style</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>^$</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>^$</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                  <order>BY_NAME</order>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:.*Style</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                  <order>BY_NAME</order>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:layout_width</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:layout_height</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:layout_weight</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:layout_margin</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:layout_marginTop</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:layout_marginBottom</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:layout_marginStart</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:layout_marginEnd</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:layout_marginLeft</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:layout_marginRight</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:layout_.*</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                  <order>BY_NAME</order>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:padding</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:paddingTop</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:paddingBottom</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:paddingStart</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:paddingEnd</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:paddingLeft</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*:paddingRight</NAME>
-                      <XML_ATTRIBUTE />
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*</NAME>
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res/android</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                  <order>BY_NAME</order>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*</NAME>
-                      <XML_NAMESPACE>http://schemas.android.com/apk/res-auto</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                  <order>BY_NAME</order>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*</NAME>
-                      <XML_NAMESPACE>http://schemas.android.com/tools</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                  <order>BY_NAME</order>
-                </rule>
-              </section>
-              <section>
-                <rule>
-                  <match>
-                    <AND>
-                      <NAME>.*</NAME>
-                      <XML_NAMESPACE>.*</XML_NAMESPACE>
-                    </AND>
-                  </match>
-                  <order>BY_NAME</order>
-                </rule>
-              </section>
-            </rules>
-          </arrangement>
-        </codeStyleSettings>
-      </value>
-    </option>
-    <option name="USE_PER_PROJECT_SETTINGS" value="true" />
-  </component>
-</project>
diff --git a/demos/main/build.gradle b/demos/main/build.gradle
index ae066d9735..06eb6b9f20 100644
--- a/demos/main/build.gradle
+++ b/demos/main/build.gradle
@@ -73,6 +73,7 @@ dependencies {
     withExtensionsImplementation project(path: modulePrefix + 'extension-opus')
     withExtensionsImplementation project(path: modulePrefix + 'extension-vp9')
     withExtensionsImplementation project(path: modulePrefix + 'extension-rtmp')
+    implementation project(path: ':extension-ffmpeg')
 }
 
 apply plugin: 'com.google.android.gms.strict-version-matcher-plugin'
diff --git a/demos/main/src/main/assets/media.exolist.json b/demos/main/src/main/assets/media.exolist.json
index 950697e1cf..1fcdb883d5 100644
--- a/demos/main/src/main/assets/media.exolist.json
+++ b/demos/main/src/main/assets/media.exolist.json
@@ -385,7 +385,7 @@
       },
       {
         "name": "Android screens (Matroska)",
-        "uri": "http://192.168.121.20/share/Planet.Earth.II.S01E05.2160p.UHD.BluRay.HDR.DTS-HD.MA5.1.x265-ULTRAHDCLUB.mkv"
+        "uri": "http://192.168.3.3/share/Fifty.Shades.of.Grey.2015.UNRATED.1080p.BluRay.REMUX.AVC.DTS-HD.MA.5.1-RARBG.mkv"
       },
       {
         "name": "Screens 360P (WebM,VP9,No Audio)",
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/MyRenderersFactory.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/MyRenderersFactory.java
new file mode 100644
index 0000000000..ad69d566b6
--- /dev/null
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/MyRenderersFactory.java
@@ -0,0 +1,542 @@
+package com.google.android.exoplayer2.demo;
+
+/*
+ * Copyright (C) 2017 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+import android.content.Context;
+import android.media.MediaCodec;
+import android.os.Handler;
+import android.os.Looper;
+import android.support.annotation.IntDef;
+import android.support.annotation.Nullable;
+
+import com.google.android.exoplayer2.DefaultRenderersFactory;
+import com.google.android.exoplayer2.ExoPlayerFactory;
+import com.google.android.exoplayer2.Renderer;
+import com.google.android.exoplayer2.RenderersFactory;
+import com.google.android.exoplayer2.SimpleExoPlayer;
+import com.google.android.exoplayer2.audio.AudioCapabilities;
+import com.google.android.exoplayer2.audio.AudioProcessor;
+import com.google.android.exoplayer2.audio.AudioRendererEventListener;
+import com.google.android.exoplayer2.audio.MediaCodecAudioRenderer;
+import com.google.android.exoplayer2.drm.DrmSessionManager;
+import com.google.android.exoplayer2.drm.FrameworkMediaCrypto;
+import com.google.android.exoplayer2.ext.ffmpeg.FfmpegAudioRenderer;
+import com.google.android.exoplayer2.mediacodec.MediaCodecSelector;
+import com.google.android.exoplayer2.metadata.MetadataOutput;
+import com.google.android.exoplayer2.metadata.MetadataRenderer;
+import com.google.android.exoplayer2.text.TextOutput;
+import com.google.android.exoplayer2.text.TextRenderer;
+import com.google.android.exoplayer2.trackselection.TrackSelector;
+import com.google.android.exoplayer2.util.Log;
+import com.google.android.exoplayer2.video.MediaCodecVideoRenderer;
+import com.google.android.exoplayer2.video.VideoRendererEventListener;
+import com.google.android.exoplayer2.video.spherical.CameraMotionRenderer;
+
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.reflect.Constructor;
+import java.util.ArrayList;
+
+/**
+ * Default {@link RenderersFactory} implementation.
+ */
+public class MyRenderersFactory implements RenderersFactory {
+
+    /**
+     * The default maximum duration for which a video renderer can attempt to seamlessly join an
+     * ongoing playback.
+     */
+    public static final long DEFAULT_ALLOWED_VIDEO_JOINING_TIME_MS = 5000;
+
+    /**
+     * Modes for using extension renderers. One of {@link #EXTENSION_RENDERER_MODE_OFF}, {@link
+     * #EXTENSION_RENDERER_MODE_ON} or {@link #EXTENSION_RENDERER_MODE_PREFER}.
+     */
+//    @Documented
+//    @Retention(RetentionPolicy.SOURCE)
+//    @IntDef({EXTENSION_RENDERER_MODE_OFF, EXTENSION_RENDERER_MODE_ON, EXTENSION_RENDERER_MODE_PREFER})
+//    public @interface ExtensionRendererMode {}
+    /**
+     * Do not allow use of extension renderers.
+     */
+    public static final int EXTENSION_RENDERER_MODE_OFF = 0;
+    /**
+     * Allow use of extension renderers. Extension renderers are indexed after core renderers of the
+     * same type. A {@link TrackSelector} that prefers the first suitable renderer will therefore
+     * prefer to use a core renderer to an extension renderer in the case that both are able to play
+     * a given track.
+     */
+    public static final int EXTENSION_RENDERER_MODE_ON = 1;
+    /**
+     * Allow use of extension renderers. Extension renderers are indexed before core renderers of the
+     * same type. A {@link TrackSelector} that prefers the first suitable renderer will therefore
+     * prefer to use an extension renderer to a core renderer in the case that both are able to play
+     * a given track.
+     */
+    public static final int EXTENSION_RENDERER_MODE_PREFER = 2;
+
+    private static final String TAG = "MyRenderersFactory";
+
+    protected static final int MAX_DROPPED_VIDEO_FRAME_COUNT_TO_NOTIFY = 50;
+
+    private final Context context;
+    @Nullable private DrmSessionManager<FrameworkMediaCrypto> drmSessionManager;
+    @DefaultRenderersFactory.ExtensionRendererMode
+    private int extensionRendererMode;
+    private long allowedVideoJoiningTimeMs;
+    private boolean playClearSamplesWithoutKeys;
+    private MediaCodecSelector mediaCodecSelector;
+
+    /** @param context A {@link Context}. */
+    public MyRenderersFactory(Context context) {
+        this.context = context;
+        extensionRendererMode = EXTENSION_RENDERER_MODE_OFF;
+        allowedVideoJoiningTimeMs = DEFAULT_ALLOWED_VIDEO_JOINING_TIME_MS;
+        mediaCodecSelector = MediaCodecSelector.DEFAULT;
+    }
+
+    /**
+     * @deprecated Use {@link #MyRenderersFactory(Context)} and pass {@link DrmSessionManager}
+     *     directly to {@link SimpleExoPlayer} or {@link ExoPlayerFactory}.
+     */
+    @Deprecated
+    @SuppressWarnings("deprecation")
+    public MyRenderersFactory(
+            Context context, @Nullable DrmSessionManager<FrameworkMediaCrypto> drmSessionManager) {
+        this(context, drmSessionManager, EXTENSION_RENDERER_MODE_OFF);
+    }
+
+    /**
+     * @deprecated Use {@link #MyRenderersFactory(Context)} and {@link
+     *     #setExtensionRendererMode(int)}.
+     */
+    @Deprecated
+    @SuppressWarnings("deprecation")
+    public MyRenderersFactory(
+            Context context, @DefaultRenderersFactory.ExtensionRendererMode int extensionRendererMode) {
+        this(context, extensionRendererMode, DEFAULT_ALLOWED_VIDEO_JOINING_TIME_MS);
+    }
+
+    /**
+     * @deprecated Use {@link #MyRenderersFactory(Context)} and {@link
+     *     #setExtensionRendererMode(int)}, and pass {@link DrmSessionManager} directly to {@link
+     *     SimpleExoPlayer} or {@link ExoPlayerFactory}.
+     */
+    @Deprecated
+    @SuppressWarnings("deprecation")
+    public MyRenderersFactory(
+            Context context,
+            @Nullable DrmSessionManager<FrameworkMediaCrypto> drmSessionManager,
+            @DefaultRenderersFactory.ExtensionRendererMode int extensionRendererMode) {
+        this(context, drmSessionManager, extensionRendererMode, DEFAULT_ALLOWED_VIDEO_JOINING_TIME_MS);
+    }
+
+    /**
+     * @deprecated Use {@link #MyRenderersFactory(Context)}, {@link
+     *     #setExtensionRendererMode(int)} and {@link #setAllowedVideoJoiningTimeMs(long)}.
+     */
+    @Deprecated
+    @SuppressWarnings("deprecation")
+    public MyRenderersFactory(
+            Context context,
+            @DefaultRenderersFactory.ExtensionRendererMode int extensionRendererMode,
+            long allowedVideoJoiningTimeMs) {
+        this(context, null, extensionRendererMode, allowedVideoJoiningTimeMs);
+    }
+
+    /**
+     * @deprecated Use {@link #MyRenderersFactory(Context)}, {@link
+     *     #setExtensionRendererMode(int)} and {@link #setAllowedVideoJoiningTimeMs(long)}, and pass
+     *     {@link DrmSessionManager} directly to {@link SimpleExoPlayer} or {@link ExoPlayerFactory}.
+     */
+    @Deprecated
+    public MyRenderersFactory(
+            Context context,
+            @Nullable DrmSessionManager<FrameworkMediaCrypto> drmSessionManager,
+            @DefaultRenderersFactory.ExtensionRendererMode int extensionRendererMode,
+            long allowedVideoJoiningTimeMs) {
+        this.context = context;
+        this.extensionRendererMode = extensionRendererMode;
+        this.allowedVideoJoiningTimeMs = allowedVideoJoiningTimeMs;
+        this.drmSessionManager = drmSessionManager;
+        mediaCodecSelector = MediaCodecSelector.DEFAULT;
+    }
+
+    /**
+     * Sets the extension renderer mode, which determines if and how available extension renderers are
+     * used. Note that extensions must be included in the application build for them to be considered
+     * available.
+     *
+     * <p>The default value is {@link #EXTENSION_RENDERER_MODE_OFF}.
+     *
+     * @param extensionRendererMode The extension renderer mode.
+     * @return This factory, for convenience.
+     */
+    public MyRenderersFactory setExtensionRendererMode(
+            @DefaultRenderersFactory.ExtensionRendererMode int extensionRendererMode) {
+        this.extensionRendererMode = extensionRendererMode;
+        return this;
+    }
+
+    /**
+     * Sets whether renderers are permitted to play clear regions of encrypted media prior to having
+     * obtained the keys necessary to decrypt encrypted regions of the media. For encrypted media that
+     * starts with a short clear region, this allows playback to begin in parallel with key
+     * acquisition, which can reduce startup latency.
+     *
+     * <p>The default value is {@code false}.
+     *
+     * @param playClearSamplesWithoutKeys Whether renderers are permitted to play clear regions of
+     *     encrypted media prior to having obtained the keys necessary to decrypt encrypted regions of
+     *     the media.
+     * @return This factory, for convenience.
+     */
+    public MyRenderersFactory setPlayClearSamplesWithoutKeys(
+            boolean playClearSamplesWithoutKeys) {
+        this.playClearSamplesWithoutKeys = playClearSamplesWithoutKeys;
+        return this;
+    }
+
+    /**
+     * Sets a {@link MediaCodecSelector} for use by {@link MediaCodec} based renderers.
+     *
+     * <p>The default value is {@link MediaCodecSelector#DEFAULT}.
+     *
+     * @param mediaCodecSelector The {@link MediaCodecSelector}.
+     * @return This factory, for convenience.
+     */
+    public MyRenderersFactory setMediaCodecSelector(MediaCodecSelector mediaCodecSelector) {
+        this.mediaCodecSelector = mediaCodecSelector;
+        return this;
+    }
+
+    /**
+     * Sets the maximum duration for which video renderers can attempt to seamlessly join an ongoing
+     * playback.
+     *
+     * <p>The default value is {@link #DEFAULT_ALLOWED_VIDEO_JOINING_TIME_MS}.
+     *
+     * @param allowedVideoJoiningTimeMs The maximum duration for which video renderers can attempt to
+     *     seamlessly join an ongoing playback, in milliseconds.
+     * @return This factory, for convenience.
+     */
+    public MyRenderersFactory setAllowedVideoJoiningTimeMs(long allowedVideoJoiningTimeMs) {
+        this.allowedVideoJoiningTimeMs = allowedVideoJoiningTimeMs;
+        return this;
+    }
+
+    @Override
+    public Renderer[] createRenderers(
+            Handler eventHandler,
+            VideoRendererEventListener videoRendererEventListener,
+            AudioRendererEventListener audioRendererEventListener,
+            TextOutput textRendererOutput,
+            MetadataOutput metadataRendererOutput,
+            @Nullable DrmSessionManager<FrameworkMediaCrypto> drmSessionManager) {
+        if (drmSessionManager == null) {
+            drmSessionManager = this.drmSessionManager;
+        }
+        ArrayList<Renderer> renderersList = new ArrayList<>();
+        buildVideoRenderers(
+                context,
+                extensionRendererMode,
+                mediaCodecSelector,
+                drmSessionManager,
+                playClearSamplesWithoutKeys,
+                eventHandler,
+                videoRendererEventListener,
+                allowedVideoJoiningTimeMs,
+                renderersList);
+        buildAudioRenderers(
+                context,
+                extensionRendererMode,
+                mediaCodecSelector,
+                drmSessionManager,
+                playClearSamplesWithoutKeys,
+                buildAudioProcessors(),
+                eventHandler,
+                audioRendererEventListener,
+                renderersList);
+        buildTextRenderers(context, textRendererOutput, eventHandler.getLooper(),
+                extensionRendererMode, renderersList);
+        buildMetadataRenderers(context, metadataRendererOutput, eventHandler.getLooper(),
+                extensionRendererMode, renderersList);
+        buildCameraMotionRenderers(context, extensionRendererMode, renderersList);
+        buildMiscellaneousRenderers(context, eventHandler, extensionRendererMode, renderersList);
+        return renderersList.toArray(new Renderer[renderersList.size()]);
+    }
+
+    /**
+     * Builds video renderers for use by the player.
+     *
+     * @param context The {@link Context} associated with the player.
+     * @param extensionRendererMode The extension renderer mode.
+     * @param mediaCodecSelector A decoder selector.
+     * @param drmSessionManager An optional {@link DrmSessionManager}. May be null if the player will
+     *     not be used for DRM protected playbacks.
+     * @param playClearSamplesWithoutKeys Whether renderers are permitted to play clear regions of
+     *     encrypted media prior to having obtained the keys necessary to decrypt encrypted regions of
+     *     the media.
+     * @param eventHandler A handler associated with the main thread's looper.
+     * @param eventListener An event listener.
+     * @param allowedVideoJoiningTimeMs The maximum duration for which video renderers can attempt to
+     *     seamlessly join an ongoing playback, in milliseconds.
+     * @param out An array to which the built renderers should be appended.
+     */
+    protected void buildVideoRenderers(
+            Context context,
+            @DefaultRenderersFactory.ExtensionRendererMode int extensionRendererMode,
+            MediaCodecSelector mediaCodecSelector,
+            @Nullable DrmSessionManager<FrameworkMediaCrypto> drmSessionManager,
+            boolean playClearSamplesWithoutKeys,
+            Handler eventHandler,
+            VideoRendererEventListener eventListener,
+            long allowedVideoJoiningTimeMs,
+            ArrayList<Renderer> out) {
+        out.add(
+                new MediaCodecVideoRenderer(
+                        context,
+                        mediaCodecSelector,
+                        allowedVideoJoiningTimeMs,
+                        drmSessionManager,
+                        playClearSamplesWithoutKeys,
+                        eventHandler,
+                        eventListener,
+                        MAX_DROPPED_VIDEO_FRAME_COUNT_TO_NOTIFY));
+
+        if (extensionRendererMode == EXTENSION_RENDERER_MODE_OFF) {
+            return;
+        }
+        int extensionRendererIndex = out.size();
+        if (extensionRendererMode == EXTENSION_RENDERER_MODE_PREFER) {
+            extensionRendererIndex--;
+        }
+
+        try {
+            // Full class names used for constructor args so the LINT rule triggers if any of them move.
+            // LINT.IfChange
+            Class<?> clazz = Class.forName("ext.vp9.LibvpxVideoRenderer");
+            Constructor<?> constructor =
+                    clazz.getConstructor(
+                            boolean.class,
+                            long.class,
+                            android.os.Handler.class,
+                            VideoRendererEventListener.class,
+                            int.class);
+            // LINT.ThenChange(../../../../../../../proguard-rules.txt)
+            Renderer renderer =
+                    (Renderer)
+                            constructor.newInstance(
+                                    true,
+                                    allowedVideoJoiningTimeMs,
+                                    eventHandler,
+                                    eventListener,
+                                    MAX_DROPPED_VIDEO_FRAME_COUNT_TO_NOTIFY);
+            out.add(extensionRendererIndex++, renderer);
+            Log.i(TAG, "Loaded LibvpxVideoRenderer.");
+        } catch (ClassNotFoundException e) {
+            // Expected if the app was built without the extension.
+        } catch (Exception e) {
+            // The extension is present, but instantiation failed.
+            throw new RuntimeException("Error instantiating VP9 extension", e);
+        }
+    }
+
+    /**
+     * Builds audio renderers for use by the player.
+     *
+     * @param context The {@link Context} associated with the player.
+     * @param extensionRendererMode The extension renderer mode.
+     * @param mediaCodecSelector A decoder selector.
+     * @param drmSessionManager An optional {@link DrmSessionManager}. May be null if the player will
+     *     not be used for DRM protected playbacks.
+     * @param playClearSamplesWithoutKeys Whether renderers are permitted to play clear regions of
+     *     encrypted media prior to having obtained the keys necessary to decrypt encrypted regions of
+     *     the media.
+     * @param audioProcessors An array of {@link AudioProcessor}s that will process PCM audio buffers
+     *     before output. May be empty.
+     * @param eventHandler A handler to use when invoking event listeners and outputs.
+     * @param eventListener An event listener.
+     * @param out An array to which the built renderers should be appended.
+     */
+    protected void buildAudioRenderers(
+            Context context,
+            @DefaultRenderersFactory.ExtensionRendererMode int extensionRendererMode,
+            MediaCodecSelector mediaCodecSelector,
+            @Nullable DrmSessionManager<FrameworkMediaCrypto> drmSessionManager,
+            boolean playClearSamplesWithoutKeys,
+            AudioProcessor[] audioProcessors,
+            Handler eventHandler,
+            AudioRendererEventListener eventListener,
+            ArrayList<Renderer> out) {
+        out.add(
+                new MediaCodecAudioRenderer(
+                        context,
+                        mediaCodecSelector,
+                        drmSessionManager,
+                        playClearSamplesWithoutKeys,
+                        eventHandler,
+                        eventListener,
+                        AudioCapabilities.getCapabilities(context),
+                        audioProcessors));
+        out.add(new FfmpegAudioRenderer(eventHandler,eventListener,audioProcessors));
+
+        if (extensionRendererMode == EXTENSION_RENDERER_MODE_OFF) {
+            return;
+        }
+        int extensionRendererIndex = out.size();
+        if (extensionRendererMode == EXTENSION_RENDERER_MODE_PREFER) {
+            extensionRendererIndex--;
+        }
+
+        try {
+            // Full class names used for constructor args so the LINT rule triggers if any of them move.
+            // LINT.IfChange
+            Class<?> clazz = Class.forName("ext.opus.LibopusAudioRenderer");
+            Constructor<?> constructor =
+                    clazz.getConstructor(
+                            android.os.Handler.class,
+                            AudioRendererEventListener.class,
+                            AudioProcessor[].class);
+            // LINT.ThenChange(../../../../../../../proguard-rules.txt)
+            Renderer renderer =
+                    (Renderer) constructor.newInstance(eventHandler, eventListener, audioProcessors);
+            out.add(extensionRendererIndex++, renderer);
+            Log.i(TAG, "Loaded LibopusAudioRenderer.");
+        } catch (ClassNotFoundException e) {
+            // Expected if the app was built without the extension.
+        } catch (Exception e) {
+            // The extension is present, but instantiation failed.
+            throw new RuntimeException("Error instantiating Opus extension", e);
+        }
+
+        try {
+            // Full class names used for constructor args so the LINT rule triggers if any of them move.
+            // LINT.IfChange
+            Class<?> clazz = Class.forName("ext.flac.LibflacAudioRenderer");
+            Constructor<?> constructor =
+                    clazz.getConstructor(
+                            android.os.Handler.class,
+                            AudioRendererEventListener.class,
+                            AudioProcessor[].class);
+            // LINT.ThenChange(../../../../../../../proguard-rules.txt)
+            Renderer renderer =
+                    (Renderer) constructor.newInstance(eventHandler, eventListener, audioProcessors);
+            out.add(extensionRendererIndex++, renderer);
+            Log.i(TAG, "Loaded LibflacAudioRenderer.");
+        } catch (ClassNotFoundException e) {
+            // Expected if the app was built without the extension.
+        } catch (Exception e) {
+            // The extension is present, but instantiation failed.
+            throw new RuntimeException("Error instantiating FLAC extension", e);
+        }
+
+        try {
+            // Full class names used for constructor args so the LINT rule triggers if any of them move.
+            // LINT.IfChange
+            Class<?> clazz =
+                    Class.forName("ext.ffmpeg.FfmpegAudioRenderer");
+            Constructor<?> constructor =
+                    clazz.getConstructor(
+                            android.os.Handler.class,
+                            AudioRendererEventListener.class,
+                            AudioProcessor[].class);
+            // LINT.ThenChange(../../../../../../../proguard-rules.txt)
+            Renderer renderer =
+                    (Renderer) constructor.newInstance(eventHandler, eventListener, audioProcessors);
+            out.add(extensionRendererIndex++, renderer);
+            Log.i(TAG, "Loaded FfmpegAudioRenderer.");
+        } catch (ClassNotFoundException e) {
+            // Expected if the app was built without the extension.
+        } catch (Exception e) {
+            // The extension is present, but instantiation failed.
+            throw new RuntimeException("Error instantiating FFmpeg extension", e);
+        }
+    }
+
+    /**
+     * Builds text renderers for use by the player.
+     *
+     * @param context The {@link Context} associated with the player.
+     * @param output An output for the renderers.
+     * @param outputLooper The looper associated with the thread on which the output should be called.
+     * @param extensionRendererMode The extension renderer mode.
+     * @param out An array to which the built renderers should be appended.
+     */
+    protected void buildTextRenderers(
+            Context context,
+            TextOutput output,
+            Looper outputLooper,
+            @DefaultRenderersFactory.ExtensionRendererMode int extensionRendererMode,
+            ArrayList<Renderer> out) {
+        out.add(new TextRenderer(output, outputLooper));
+    }
+
+    /**
+     * Builds metadata renderers for use by the player.
+     *
+     * @param context The {@link Context} associated with the player.
+     * @param output An output for the renderers.
+     * @param outputLooper The looper associated with the thread on which the output should be called.
+     * @param extensionRendererMode The extension renderer mode.
+     * @param out An array to which the built renderers should be appended.
+     */
+    protected void buildMetadataRenderers(
+            Context context,
+            MetadataOutput output,
+            Looper outputLooper,
+            @DefaultRenderersFactory.ExtensionRendererMode int extensionRendererMode,
+            ArrayList<Renderer> out) {
+        out.add(new MetadataRenderer(output, outputLooper));
+    }
+
+    /**
+     * Builds camera motion renderers for use by the player.
+     *
+     * @param context The {@link Context} associated with the player.
+     * @param extensionRendererMode The extension renderer mode.
+     * @param out An array to which the built renderers should be appended.
+     */
+    protected void buildCameraMotionRenderers(
+            Context context, @DefaultRenderersFactory.ExtensionRendererMode int extensionRendererMode, ArrayList<Renderer> out) {
+        out.add(new CameraMotionRenderer());
+    }
+
+    /**
+     * Builds any miscellaneous renderers used by the player.
+     *
+     * @param context The {@link Context} associated with the player.
+     * @param eventHandler A handler to use when invoking event listeners and outputs.
+     * @param extensionRendererMode The extension renderer mode.
+     * @param out An array to which the built renderers should be appended.
+     */
+    protected void buildMiscellaneousRenderers(Context context, Handler eventHandler,
+                                               @DefaultRenderersFactory.ExtensionRendererMode int extensionRendererMode, ArrayList<Renderer> out) {
+        // Do nothing.
+    }
+
+    /**
+     * Builds an array of {@link AudioProcessor}s that will process PCM audio before output.
+     */
+    protected AudioProcessor[] buildAudioProcessors() {
+        return new AudioProcessor[0];
+    }
+
+}
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
index 2679626420..00d6ca9288 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/PlayerActivity.java
@@ -23,6 +23,7 @@
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.util.Log;
 import android.util.Pair;
 import android.view.KeyEvent;
 import android.view.View;
@@ -39,6 +40,7 @@
 import com.google.android.exoplayer2.PlaybackPreparer;
 import com.google.android.exoplayer2.Player;
 import com.google.android.exoplayer2.SimpleExoPlayer;
+import com.google.android.exoplayer2.audio.AudioCapabilities;
 import com.google.android.exoplayer2.drm.DefaultDrmSessionManager;
 import com.google.android.exoplayer2.drm.FrameworkMediaCrypto;
 import com.google.android.exoplayer2.drm.FrameworkMediaDrm;
@@ -419,16 +421,16 @@ private void initializePlayer() {
               : DefaultRenderersFactory.EXTENSION_RENDERER_MODE_ON)
               : DefaultRenderersFactory.EXTENSION_RENDERER_MODE_OFF;
       extensionRendererMode = DefaultRenderersFactory.EXTENSION_RENDERER_MODE_PREFER;
-      DefaultRenderersFactory renderersFactory =
-          new DefaultRenderersFactory(this, extensionRendererMode);
-
+      /*DefaultRenderersFactory renderersFactory =
+          new DefaultRenderersFactory(this, extensionRendererMode);*/
+      MyRenderersFactory myRenderersFactory = new MyRenderersFactory(this, extensionRendererMode);
       trackSelector = new DefaultTrackSelector(trackSelectionFactory);
       trackSelector.setParameters(trackSelectorParameters);
       lastSeenTrackGroupArray = null;
 
       player =
           ExoPlayerFactory.newSimpleInstance(
-              /* context= */ this, renderersFactory, trackSelector, drmSessionManager);
+              /* context= */ this, myRenderersFactory, trackSelector, drmSessionManager);
       player.addListener(new PlayerEventListener());
       player.setPlayWhenReady(startAutoPlay);
       player.addAnalyticsListener(new EventLogger(trackSelector));
@@ -718,6 +720,7 @@ public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray tra
       updateButtonVisibilities();
       if (trackGroups != lastSeenTrackGroupArray) {
         MappedTrackInfo mappedTrackInfo = trackSelector.getCurrentMappedTrackInfo();
+        Log.d("Kay", "onTracksChanged: mappedTrackInfo :"+mappedTrackInfo.toString());
         if (mappedTrackInfo != null) {
           if (mappedTrackInfo.getTypeSupport(C.TRACK_TYPE_VIDEO)
               == MappedTrackInfo.RENDERER_SUPPORT_UNSUPPORTED_TRACKS) {
@@ -728,6 +731,7 @@ public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray tra
             showToast(R.string.error_unsupported_audio);
           }
         }
+
         lastSeenTrackGroupArray = trackGroups;
       }
     }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java b/library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
index eba02b0c0a..801aa2a09a 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/SimpleExoPlayer.java
@@ -1311,6 +1311,7 @@ public void onAudioSessionId(int sessionId) {
     @Override
     public void onAudioDecoderInitialized(String decoderName, long initializedTimestampMs,
         long initializationDurationMs) {
+      android.util.Log.d(TAG, "onAudioDecoderInitialized: decoderName:"+decoderName);
       for (AudioRendererEventListener audioDebugListener : audioDebugListeners) {
         audioDebugListener.onAudioDecoderInitialized(decoderName, initializedTimestampMs,
             initializationDurationMs);
@@ -1320,6 +1321,7 @@ public void onAudioDecoderInitialized(String decoderName, long initializedTimest
     @Override
     public void onAudioInputFormatChanged(Format format) {
       audioFormat = format;
+      android.util.Log.d(TAG, "onAudioInputFormatChanged: format:"+format.toString());
       for (AudioRendererEventListener audioDebugListener : audioDebugListeners) {
         audioDebugListener.onAudioInputFormatChanged(format);
       }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/util/LibraryLoader.java b/library/core/src/main/java/com/google/android/exoplayer2/util/LibraryLoader.java
index c12bae0a07..15824beeeb 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/util/LibraryLoader.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/util/LibraryLoader.java
@@ -15,13 +15,15 @@
  */
 package com.google.android.exoplayer2.util;
 
+import android.util.Log;
+
 /**
  * Configurable loader for native libraries.
  */
 public final class LibraryLoader {
 
   private String[] nativeLibraries;
-  private boolean loadAttempted;
+  private boolean loadAttempted ;
   private boolean isAvailable;
 
   /**
@@ -51,6 +53,7 @@ public synchronized boolean isAvailable() {
     try {
       for (String lib : nativeLibraries) {
         System.loadLibrary(lib);
+        Log.d("Kay", "isAvailable: loadLibraries:"+lib);
       }
       isAvailable = true;
     } catch (UnsatisfiedLinkError exception) {
