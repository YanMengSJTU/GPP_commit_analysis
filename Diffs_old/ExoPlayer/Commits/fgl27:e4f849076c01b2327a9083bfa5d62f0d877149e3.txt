diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/DefaultExtractorsFactory.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/DefaultExtractorsFactory.java
index 54c78eb33d..02c676dfdf 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/DefaultExtractorsFactory.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/DefaultExtractorsFactory.java
@@ -108,7 +108,7 @@ public synchronized DefaultExtractorsFactory setConstantBitrateSeekingEnabled(
   /**
    * Sets flags for {@link AdtsExtractor} instances created by the factory.
    *
-   * @see AdtsExtractor#AdtsExtractor(long, int)
+   * @see AdtsExtractor#AdtsExtractor(int)
    * @param flags The flags to use.
    * @return The factory, for convenience.
    */
@@ -220,7 +220,6 @@ public synchronized DefaultExtractorsFactory setTsExtractorFlags(
                     : 0));
     extractors[4] =
         new AdtsExtractor(
-            /* firstStreamSampleTimestampUs= */ 0,
             adtsFlags
                 | (constantBitrateSeekingEnabled
                     ? AdtsExtractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/Ac3Extractor.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/Ac3Extractor.java
index 0a0755327c..2f46744ea0 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/Ac3Extractor.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/Ac3Extractor.java
@@ -46,18 +46,13 @@
   private static final int MAX_SYNC_FRAME_SIZE = 2786;
   private static final int ID3_TAG = 0x00494433;
 
-  private final long firstSampleTimestampUs;
   private final Ac3Reader reader;
   private final ParsableByteArray sampleData;
 
   private boolean startedPacket;
 
+  /** Creates a new extractor for AC-3 bitstreams. */
   public Ac3Extractor() {
-    this(0);
-  }
-
-  public Ac3Extractor(long firstSampleTimestampUs) {
-    this.firstSampleTimestampUs = firstSampleTimestampUs;
     reader = new Ac3Reader();
     sampleData = new ParsableByteArray(MAX_SYNC_FRAME_SIZE);
   }
@@ -141,7 +136,7 @@ public int read(ExtractorInput input, PositionHolder seekPosition) throws IOExce
 
     if (!startedPacket) {
       // Pass data to the reader as though it's contained within a single infinitely long packet.
-      reader.packetStarted(firstSampleTimestampUs, FLAG_DATA_ALIGNMENT_INDICATOR);
+      reader.packetStarted(/* pesTimeUs= */ 0, FLAG_DATA_ALIGNMENT_INDICATOR);
       startedPacket = true;
     }
     // TODO: Make it possible for the reader to consume the dataSource directly, so that it becomes
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/Ac4Extractor.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/Ac4Extractor.java
index 4db02e0d83..2e8dcd952b 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/Ac4Extractor.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/Ac4Extractor.java
@@ -54,7 +54,6 @@
 
   private static final int ID3_TAG = 0x00494433;
 
-  private final long firstSampleTimestampUs;
   private final Ac4Reader reader;
   private final ParsableByteArray sampleData;
 
@@ -62,12 +61,6 @@
 
   /** Creates a new extractor for AC-4 bitstreams. */
   public Ac4Extractor() {
-    this(/* firstSampleTimestampUs= */ 0);
-  }
-
-  /** Creates a new extractor for AC-4 bitstreams, using the specified first sample timestamp. */
-  public Ac4Extractor(long firstSampleTimestampUs) {
-    this.firstSampleTimestampUs = firstSampleTimestampUs;
     reader = new Ac4Reader();
     sampleData = new ParsableByteArray(READ_BUFFER_SIZE);
   }
@@ -152,7 +145,7 @@ public int read(ExtractorInput input, PositionHolder seekPosition)
 
     if (!startedPacket) {
       // Pass data to the reader as though it's contained within a single infinitely long packet.
-      reader.packetStarted(firstSampleTimestampUs, FLAG_DATA_ALIGNMENT_INDICATOR);
+      reader.packetStarted(/* pesTimeUs= */ 0, FLAG_DATA_ALIGNMENT_INDICATOR);
       startedPacket = true;
     }
     // TODO: Make it possible for the reader to consume the dataSource directly, so that it becomes
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/AdtsExtractor.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/AdtsExtractor.java
index d1e3217e30..3dd88fbb51 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/AdtsExtractor.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/AdtsExtractor.java
@@ -83,7 +83,6 @@
   private final ParsableByteArray packetBuffer;
   private final ParsableByteArray scratch;
   private final ParsableBitArray scratchBits;
-  private final long firstStreamSampleTimestampUs;
 
   @Nullable private ExtractorOutput extractorOutput;
 
@@ -94,22 +93,17 @@
   private boolean startedPacket;
   private boolean hasOutputSeekMap;
 
+  /** Creates a new extractor for ADTS bitstreams. */
   public AdtsExtractor() {
-    this(0);
-  }
-
-  public AdtsExtractor(long firstStreamSampleTimestampUs) {
-    this(/* firstStreamSampleTimestampUs= */ firstStreamSampleTimestampUs, /* flags= */ 0);
+    this(/* flags= */ 0);
   }
 
   /**
-   * @param firstStreamSampleTimestampUs The timestamp to be used for the first sample of the stream
-   *     output from this extractor.
+   * Creates a new extractor for ADTS bitstreams.
+   *
    * @param flags Flags that control the extractor's behavior.
    */
-  public AdtsExtractor(long firstStreamSampleTimestampUs, @Flags int flags) {
-    this.firstStreamSampleTimestampUs = firstStreamSampleTimestampUs;
-    this.firstSampleTimestampUs = firstStreamSampleTimestampUs;
+  public AdtsExtractor(@Flags int flags) {
     this.flags = flags;
     reader = new AdtsReader(true);
     packetBuffer = new ParsableByteArray(MAX_PACKET_SIZE);
@@ -172,7 +166,7 @@ public void init(ExtractorOutput output) {
   public void seek(long position, long timeUs) {
     startedPacket = false;
     reader.seek();
-    firstSampleTimestampUs = firstStreamSampleTimestampUs + timeUs;
+    firstSampleTimestampUs = timeUs;
   }
 
   @Override
diff --git a/library/core/src/test/java/com/google/android/exoplayer2/extractor/ts/AdtsExtractorSeekTest.java b/library/core/src/test/java/com/google/android/exoplayer2/extractor/ts/AdtsExtractorSeekTest.java
index 4527e41f34..060f7fb81d 100644
--- a/library/core/src/test/java/com/google/android/exoplayer2/extractor/ts/AdtsExtractorSeekTest.java
+++ b/library/core/src/test/java/com/google/android/exoplayer2/extractor/ts/AdtsExtractorSeekTest.java
@@ -217,9 +217,7 @@ public void testSeeking_handlesRandomSeeks_extractsCorrectSamples()
   // Internal methods
 
   private static AdtsExtractor createAdtsExtractor() {
-    return new AdtsExtractor(
-        /* firstStreamSampleTimestampUs= */ 0,
-        /* flags= */ AdtsExtractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING);
+    return new AdtsExtractor(/* flags= */ AdtsExtractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING);
   }
 
   private void assertFirstSampleAfterSeekContainTargetSeekTime(
diff --git a/library/core/src/test/java/com/google/android/exoplayer2/extractor/ts/AdtsExtractorTest.java b/library/core/src/test/java/com/google/android/exoplayer2/extractor/ts/AdtsExtractorTest.java
index 25e2a336ff..feb14d1adb 100644
--- a/library/core/src/test/java/com/google/android/exoplayer2/extractor/ts/AdtsExtractorTest.java
+++ b/library/core/src/test/java/com/google/android/exoplayer2/extractor/ts/AdtsExtractorTest.java
@@ -32,10 +32,7 @@ public void testSample() throws Exception {
   @Test
   public void testSample_withSeeking() throws Exception {
     ExtractorAsserts.assertBehavior(
-        () ->
-            new AdtsExtractor(
-                /* firstStreamSampleTimestampUs= */ 0,
-                /* flags= */ AdtsExtractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING),
+        () -> new AdtsExtractor(/* flags= */ AdtsExtractor.FLAG_ENABLE_CONSTANT_BITRATE_SEEKING),
         "ts/sample_cbs.adts");
   }
 }
