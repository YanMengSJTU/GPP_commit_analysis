diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/webm/WebmExtractor.java b/library/src/main/java/com/google/android/exoplayer/extractor/webm/WebmExtractor.java
index 46a4022b7d..038e033036 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/webm/WebmExtractor.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/webm/WebmExtractor.java
@@ -122,6 +122,9 @@
   private static final int ID_VIDEO = 0xE0;
   private static final int ID_PIXEL_WIDTH = 0xB0;
   private static final int ID_PIXEL_HEIGHT = 0xBA;
+  private static final int ID_DISPLAY_WIDTH = 0x54B0;
+  private static final int ID_DISPLAY_HEIGHT = 0x54BA;
+  private static final int ID_DISPLAY_UNIT = 0x54B2;
   private static final int ID_AUDIO = 0xE1;
   private static final int ID_CHANNELS = 0x9F;
   private static final int ID_SAMPLING_FREQUENCY = 0xB5;
@@ -317,6 +320,9 @@ public int read(ExtractorInput input, PositionHolder seekPosition) throws IOExce
       case ID_BLOCK_DURATION:
       case ID_PIXEL_WIDTH:
       case ID_PIXEL_HEIGHT:
+      case ID_DISPLAY_WIDTH:
+      case ID_DISPLAY_HEIGHT:
+      case ID_DISPLAY_UNIT:
       case ID_TRACK_NUMBER:
       case ID_TRACK_TYPE:
       case ID_DEFAULT_DURATION:
@@ -511,6 +517,15 @@ public int read(ExtractorInput input, PositionHolder seekPosition) throws IOExce
       case ID_PIXEL_HEIGHT:
         currentTrack.height = (int) value;
         return;
+      case ID_DISPLAY_WIDTH:
+        currentTrack.displayWidth = (int) value;
+        return;
+      case ID_DISPLAY_HEIGHT:
+        currentTrack.displayHeight = (int) value;
+        return;
+      case ID_DISPLAY_UNIT:
+        currentTrack.displayUnit = (int) value;
+        return;
       case ID_TRACK_NUMBER:
         currentTrack.number = (int) value;
         return;
@@ -1122,6 +1137,8 @@ public void binaryElement(int id, int contentsSize, ExtractorInput input)
 
   private static final class Track {
 
+    private static final int DISPLAY_UNIT_PIXELS = 0;
+
     // Common elements.
     public String codecId;
     public int number;
@@ -1135,6 +1152,9 @@ public void binaryElement(int id, int contentsSize, ExtractorInput input)
     // Video elements.
     public int width = MediaFormat.NO_VALUE;
     public int height = MediaFormat.NO_VALUE;
+    public int displayWidth = MediaFormat.NO_VALUE;
+    public int displayHeight = MediaFormat.NO_VALUE;
+    public int displayUnit = DISPLAY_UNIT_PIXELS;
 
     // Audio elements. Initially set to their default values.
     public int channelCount = 1;
@@ -1246,8 +1266,17 @@ public void initializeOutput(ExtractorOutput output, int trackId, long durationU
             MediaFormat.NO_VALUE, maxInputSize, durationUs, channelCount, sampleRate,
             initializationData, language);
       } else if (MimeTypes.isVideo(mimeType)) {
+        if (displayUnit == Track.DISPLAY_UNIT_PIXELS) {
+          displayWidth = displayWidth == MediaFormat.NO_VALUE ? width : displayWidth;
+          displayHeight = displayHeight == MediaFormat.NO_VALUE ? height : displayHeight;
+        }
+        float pixelWidthHeightRatio = MediaFormat.NO_VALUE;
+        if (displayWidth != MediaFormat.NO_VALUE && displayHeight != MediaFormat.NO_VALUE) {
+          pixelWidthHeightRatio = ((float) (height * displayWidth)) / (width * displayHeight);
+        }
         format = MediaFormat.createVideoFormat(Integer.toString(trackId), mimeType,
-            MediaFormat.NO_VALUE, maxInputSize, durationUs, width, height, initializationData);
+            MediaFormat.NO_VALUE, maxInputSize, durationUs, width, height, initializationData,
+            MediaFormat.NO_VALUE, pixelWidthHeightRatio);
       } else if (MimeTypes.APPLICATION_SUBRIP.equals(mimeType)) {
         format = MediaFormat.createTextFormat(Integer.toString(trackId), mimeType,
             MediaFormat.NO_VALUE, durationUs, language);
