diff --git a/constants.gradle b/constants.gradle
index 08510e02ae..e61db65ae0 100644
--- a/constants.gradle
+++ b/constants.gradle
@@ -25,7 +25,6 @@ project.ext {
     buildToolsVersion = '27.0.3'
     testSupportLibraryVersion = '0.5'
     supportLibraryVersion = '27.0.0'
-    playServicesLibraryVersion = '15.0.1'
     dexmakerVersion = '1.2'
     mockitoVersion = '1.9.5'
     junitVersion = '4.12'
diff --git a/demos/cast/build.gradle b/demos/cast/build.gradle
index ae6bdd1d94..fbd7c0488e 100644
--- a/demos/cast/build.gradle
+++ b/demos/cast/build.gradle
@@ -18,6 +18,11 @@ android {
     compileSdkVersion project.ext.compileSdkVersion
     buildToolsVersion project.ext.buildToolsVersion
 
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_8
+        targetCompatibility JavaVersion.VERSION_1_8
+    }
+
     defaultConfig {
         versionName project.ext.releaseVersion
         versionCode project.ext.releaseVersionCode
diff --git a/demos/main/src/main/assets/media.exolist.json b/demos/main/src/main/assets/media.exolist.json
index 753770645d..a5ebd2efd8 100644
--- a/demos/main/src/main/assets/media.exolist.json
+++ b/demos/main/src/main/assets/media.exolist.json
@@ -2,6 +2,18 @@
   {
     "name": "HLS",
     "samples": [
+      {
+        "name": "vid5_seg",
+        "uri": "http://54.152.186.92:60801/drm/videoServer/Video/inayat/vid5_seg/playlist.m3u8"
+      },
+      {
+        "name": "vid3_seg",
+        "uri": "http://54.152.186.92:60801/drm/videoServer/Video/inayat/vid3_seg/playlist.m3u8"
+      },
+      {
+        "name": "vid2_seg",
+        "uri": "http://54.152.186.92:60801/drm/videoServer/Video/inayat/vid2_seg/playlist.m3u8"
+      },
       {
         "name": "UnEncrypted Video",
         "uri": "https://vocatest-a40ab.firebaseapp.com/unencrypted/index.m3u8"
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java b/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
index 35f23aa24a..f759615990 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
+++ b/demos/main/src/main/java/com/google/android/exoplayer2/demo/SampleChooserActivity.java
@@ -22,6 +22,7 @@
 import android.net.Uri;
 import android.os.AsyncTask;
 import android.os.Bundle;
+import android.util.Base64;
 import android.util.JsonReader;
 import android.util.Log;
 import android.view.View;
@@ -41,7 +42,9 @@
 import com.google.android.exoplayer2.upstream.DefaultDataSource;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.Util;
+import com.vocabimate.protocol.AesEncryptionUtil;
 import com.vocabimate.protocol.ILicenceTo;
+import com.vocabimate.protocol.LicenceBody;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -50,6 +53,8 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
+import java.util.Random;
+import java.util.UUID;
 
 /** An activity for selecting from a list of media samples. */
 public class SampleChooserActivity extends Activity
@@ -137,58 +142,58 @@ private void onSampleGroups(final List<SampleGroup> groups, boolean sawError) {
   public boolean onChildClick(ExpandableListView parent, View view, int groupPosition, int childPosition, long id) {
     Sample sample = (Sample) view.getTag();
     Intent intent = sample.buildIntent(this);
+      String localEncKey;
 
-    ILicenceTo keyHelperModel = getKeyHelper(id, (UriSample) sample);
+      String localKeyInString = null; // todo get from DB
+      String localEncIV = null; // todo get from DB
+//
+//      byte[] decodeFileInBytes = android.util.Base64.decode(localKeyInString, Base64.DEFAULT);
+//      byte[] localEncKeyBytes = AesEncryptionUtil.decrypt(masterKey, masterIV, decodeFileInBytes);
+//      localEncKey = new String(localEncKeyBytes);
+
+      localEncKey = "Par12345Bar12345";
+      localEncIV = "dppppppppppppppp";
+
+    ILicenceTo keyHelperModel = getKeyHelper(id, (UriSample) sample, localEncKey, localEncIV);
     intent.putExtra("keyHelperModel", keyHelperModel);
     startActivity(intent);
     return true;
   }
 
-  public ILicenceTo getKeyHelper(long videoId, UriSample sample) {
-//    String key = null;
-//    if(sample.uri.toString().contains("tutorial")){
-//      key = "http://54.152.186.92:60801/drm/static/tutorial/tutorial.key";
-//    } else if(sample.uri.toString().contains("sample")){
-//      key = "http://54.152.186.92:60801/static/sample/enc.key";
-//    }
-
-//    keyHelperModel.setVideoId(String.valueOf(model.getVideoId()));
-//    keyHelperModel.setM3u8Path(RetroUtils.BASE_URL +"/drm/" + model.getM3u8Url());
-//    keyHelperModel.setToken("l8TmQpaBEdDGCtbefPfzTx54Bt4nOQLgaH8s3edJDhs=");
-//    keyHelperModel.setLicecnceUrl("http://54.152.186.92:60801/drm/get_key_for_a_video/20");
-
-//    return new KeyHelperModel().setVideoId("videoId: " + videoId)
-//        .setKeyPath(key)
-//        .setM3u8Path(sample.uri.toString());
-//
-//    if(sample.uri.toString().contains("http://54.152.186.92:60801/drm/videoServer/Video/inayat/vid3_seg/playlist.m3u8")) {
-      return new LicenceBody(32, 18, "N",
+  private String TOKEN = "CaoETZZ9-4J-oX8Fy9i8vM8GjZ4PwxvJtwrWzPATx1I=";
+
+  public ILicenceTo getKeyHelper(long videoId, UriSample sample, String localEncKey, String localEncIV) {
+
+//      While Playing
+
+    if(sample.uri.toString().contains("vid5_seg")) {
+      return new LicenceBody(75, 20, "N",
+              "http://54.152.186.92:60801/drm/videoServer/Video/inayat/vid5_seg/playlist.m3u8",
+              TOKEN,
+              "http://54.152.186.92:60801/license/create_license", localEncKey, localEncIV
+      );
+    }
+
+    if(sample.uri.toString().contains("vid3_seg"))
+      return new LicenceBody(75, 18, "N",
               "http://54.152.186.92:60801/drm/videoServer/Video/inayat/vid3_seg/playlist.m3u8",
-              "PROCsVCsQpw8RNBq8YwuZnOrULeREGlW3G9PZukrZmU=",
-              "http://54.152.186.92:60801/license/create_license"
-              );
-//      .setVideoId("videoId: " + videoId)
-//              .setM3u8Path("http://54.152.186.92:60801/drm/videoServer/Video/inayat/vid3_seg/playlist.m3u8")
-//              .setLicecnceUrl("http://54.152.186.92:60801/license/create_license")
-//              .setToken("PROCsVCsQpw8RNBq8YwuZnOrULeREGlW3G9PZukrZmU=")
-//              .setLicenceTo(licenceBody);
-//    }
-//    return null;
-
-//    if(sample.uri.toString().contains("vid30")) {
-//      return new KeyHelperModel().setVideoId("videoId: " + videoId)
-//              .setM3u8Path("https://voca2hosting.firebaseapp.com/vid30/playlist.m3u8")
-//              .setLicecnceUrl("https://voca2hosting.firebaseapp.com/vid30/licence")
-//              .setToken("rmaC0c9VqdoDDCku3MsXLJw_LL2IM_62zw8lOwfJsLU=");
-//    }
-//
-//
-//
-//    return new KeyHelperModel().setVideoId("videoId: " + videoId)
-//        .setM3u8Path("http://54.152.186.92:60801/drm/static/video/inayat/sample_category/vid5/playlist.m3u8")
-//        .setLicecnceUrl("http://54.152.186.92:60801/drm/get_key_for_a_video/20")
-//        .setToken("l8TmQpaBEdDGCtbefPfzTx54Bt4nOQLgaH8s3edJDhs=");
+              TOKEN,
+              "http://54.152.186.92:60801/license/create_license", localEncKey, localEncIV
+      );
+
+
+
+    if(sample.uri.toString().contains("vid2_seg"))
+      return new LicenceBody(75, 1, "N",
+              "http://54.152.186.92:60801/drm/videoServer/Video/inayat/vid2_seg/playlist.m3u8",
+              TOKEN,
+              "http://54.152.186.92:60801/license/create_license", localEncKey, localEncIV
+      );
+
+    return null;
   }
+    String masterKey = "Bar12345Bar12345";
+    String masterIV = "pppppppppppppppp";
 
   private void onSampleDownloadButtonClicked(Sample sample) {
     int downloadUnsupportedStringId = getDownloadUnsupportedStringId(sample);
@@ -197,7 +202,22 @@ private void onSampleDownloadButtonClicked(Sample sample) {
           .show();
     } else {
       UriSample uriSample = (UriSample) sample;
-      ILicenceTo keyHelper = getKeyHelper(5, uriSample);
+
+
+        String localEncKey = UUID.randomUUID().toString().substring(0, 16);
+        String localEncIV = UUID.randomUUID().toString().substring(0, 16);
+      byte[] b = new byte[20];
+      new Random().nextBytes(b);
+
+        byte[] encrypt = AesEncryptionUtil.encrypt(masterKey, masterIV, localEncKey.getBytes());
+        String localKeyInString = new String(android.util.Base64.encode(encrypt, Base64.DEFAULT));
+
+//        // todo --> Save fileInString, IV into Database;
+
+        localEncKey = "Par12345Bar12345";
+        localEncIV = "dppppppppppppppp";
+
+      ILicenceTo keyHelper = getKeyHelper(5, uriSample, localEncKey, localEncIV);
       downloadTracker = ((DemoApplication)getApplication()).getDownloadTracker(keyHelper);
       downloadTracker.toggleDownload(this, sample.name, uriSample.uri, uriSample.extension, keyHelper);
     }
diff --git a/extensions/cast/build.gradle b/extensions/cast/build.gradle
index fa348aaf17..0f6ca2256b 100644
--- a/extensions/cast/build.gradle
+++ b/extensions/cast/build.gradle
@@ -26,7 +26,7 @@ android {
 }
 
 dependencies {
-    api 'com.google.android.gms:play-services-cast-framework:' + playServicesLibraryVersion
+    api 'com.google.android.gms:play-services-cast-framework:16.1.0'
     implementation project(modulePrefix + 'library-core')
     implementation project(modulePrefix + 'library-ui')
     testImplementation project(modulePrefix + 'testutils')
diff --git a/extensions/ima/build.gradle b/extensions/ima/build.gradle
index cec6b8a495..eb184181da 100644
--- a/extensions/ima/build.gradle
+++ b/extensions/ima/build.gradle
@@ -18,6 +18,11 @@ android {
     compileSdkVersion project.ext.compileSdkVersion
     buildToolsVersion project.ext.buildToolsVersion
 
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_8
+        targetCompatibility JavaVersion.VERSION_1_8
+    }
+
     defaultConfig {
         minSdkVersion project.ext.minSdkVersion
         targetSdkVersion project.ext.targetSdkVersion
@@ -26,9 +31,9 @@ android {
 }
 
 dependencies {
-    api 'com.google.ads.interactivemedia.v3:interactivemedia:3.8.7'
+    api 'com.google.ads.interactivemedia.v3:interactivemedia:3.9.4'
     implementation project(modulePrefix + 'library-core')
-    implementation 'com.google.android.gms:play-services-ads:' + playServicesLibraryVersion
+    implementation 'com.google.android.gms:play-services-ads:17.0.0'
     // These dependencies are necessary to force the supportLibraryVersion of
     // com.android.support:support-v4 and com.android.support:customtabs to be
     // used. Else older versions are used, for example via:
@@ -36,6 +41,11 @@ dependencies {
     // |-- com.android.support:customtabs:26.1.0
     implementation 'com.android.support:support-v4:' + supportLibraryVersion
     implementation 'com.android.support:customtabs:' + supportLibraryVersion
+    testImplementation 'com.google.truth:truth:' + truthVersion
+    testImplementation 'junit:junit:' + junitVersion
+    testImplementation 'org.mockito:mockito-core:' + mockitoVersion
+    testImplementation 'org.robolectric:robolectric:' + robolectricVersion
+    testImplementation project(modulePrefix + 'testutils-robolectric')
 }
 
 ext {
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/offline/FilteringManifestParser.java b/library/core/src/main/java/com/google/android/exoplayer2/offline/FilteringManifestParser.java
index 8fec07552b..2c0a2a6774 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/offline/FilteringManifestParser.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/offline/FilteringManifestParser.java
@@ -16,6 +16,8 @@
 package com.google.android.exoplayer2.offline;
 
 import android.net.Uri;
+
+import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.ParsingLoadable.Parser;
 import java.io.IOException;
 import java.io.InputStream;
@@ -38,8 +40,8 @@ public FilteringManifestParser(Parser<T> parser, List<K> trackKeys) {
   }
 
   @Override
-  public T parse(Uri uri, InputStream inputStream) throws IOException {
-    T manifest = parser.parse(uri, inputStream);
+  public T parse(DataSource dataSource, Uri uri, InputStream inputStream) throws IOException {
+    T manifest = parser.parse(dataSource, uri, inputStream);
     return trackKeys == null || trackKeys.isEmpty() ? manifest : manifest.copy(trackKeys);
   }
 }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/source/chunk/Chunk.java b/library/core/src/main/java/com/google/android/exoplayer2/source/chunk/Chunk.java
index 0453a8fa12..b40a10a112 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/source/chunk/Chunk.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/source/chunk/Chunk.java
@@ -64,7 +64,8 @@
    */
   public final long endTimeUs;
 
-  protected final DataSource dataSource;
+//  protected final DataSource dataSource;
+  public final DataSource dataSource; // Novo - it was protected earliar
 
   /**
    * @param dataSource The source from which the data should be loaded.
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultDataSource.java
index b5469db72e..466d01343c 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultDataSource.java
@@ -57,6 +57,10 @@
 
   private final DataSource baseDataSource;
 
+  public DataSource getBaseDataSource() {
+    return baseDataSource;
+  }
+
   // Lazily initialized.
   private DataSource fileDataSource;
   private DataSource assetDataSource;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java
index 05c9ddeb56..93e62d969b 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java
@@ -25,7 +25,6 @@
 import com.google.android.exoplayer2.util.Predicate;
 import com.google.android.exoplayer2.util.Util;
 import com.vocabimate.protocol.ILicenceTo;
-import com.vocabimate.protocol.ILicenceTo;
 import com.vocabimate.protocol.VocabimateHttpUrlConnection;
 
 import java.io.EOFException;
@@ -607,7 +606,7 @@ private int readInternal(byte[] buffer, int offset, int readLength) throws IOExc
      * We then override the read variable with the result received after our encryption.
      * When we get -1 from read variable that means file has ended.
      */
-    if(dataSpec.key != null && (dataSpec.key.contains(".key") || dataSpec.key.contains("vcb"))) {
+    if(dataSpec.key != null && (dataSpec.key.contains(".key") || dataSpec.key.contains("vcb://"))) {
 //      if(inputStream == null){
 //        read = parseData(buffer);
 //      } else {
@@ -616,7 +615,11 @@ private int readInternal(byte[] buffer, int offset, int readLength) throws IOExc
       if (read == 16) {
         byte[] testValue = new byte[16];
         System.arraycopy(buffer, 0, testValue, 0, 16);
-        byte[] finalDataWritten = AesEncryptionUtil.encrypt("Bar12345Bar12345", "pppppppppppppppp", testValue);
+        byte[] finalDataWritten = null;
+        if(this instanceof CustomDataSource){
+          ILicenceTo keyHelperModel = ((CustomDataSource) this).getKeyHelperModel();
+          finalDataWritten = AesEncryptionUtil.encrypt(keyHelperModel.getLocalEncryptionKey(), keyHelperModel.getLocalEncryptionIV(), testValue);
+        }
         System.arraycopy(finalDataWritten, 0, buffer, 0, finalDataWritten.length);
         read = finalDataWritten.length;
       }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/ParsingLoadable.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/ParsingLoadable.java
index 987effcf43..607527c470 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/ParsingLoadable.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/ParsingLoadable.java
@@ -38,13 +38,15 @@
     /**
      * Parses an object from a response.
      *
+     *
+     * @param dataSource
      * @param uri The source {@link Uri} of the response, after any redirection.
      * @param inputStream An {@link InputStream} from which the response data can be read.
      * @return The parsed object.
      * @throws ParserException If an error occurs parsing the data.
      * @throws IOException If an error occurs reading data from the stream.
      */
-    T parse(Uri uri, InputStream inputStream) throws IOException;
+    T parse(DataSource dataSource, Uri uri, InputStream inputStream) throws IOException;
 
   }
 
@@ -135,7 +137,7 @@ public final void load() throws IOException {
     DataSourceInputStream inputStream = new DataSourceInputStream(dataSource, dataSpec);
     try {
       inputStream.open();
-      result = parser.parse(dataSource.getUri(), inputStream);
+      result = parser.parse(dataSource, dataSource.getUri(), inputStream);
     } finally {
       bytesLoaded = inputStream.bytesRead();
       Util.closeQuietly(inputStream);
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/cache/CacheDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/cache/CacheDataSource.java
index 045fc25338..c363528053 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/cache/CacheDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/cache/CacheDataSource.java
@@ -119,6 +119,11 @@
   private final DataSource cacheReadDataSource;
   private final DataSource cacheWriteDataSource;
   private final DataSource upstreamDataSource;
+
+  public DataSource getUpstreamDataSource() {
+    return upstreamDataSource;
+  }
+
   @Nullable private final EventListener eventListener;
 
   private final boolean blockOnCache;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/vocabimate_stream/CustomDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/vocabimate_stream/CustomDataSource.java
index d00210ce3b..75f0347dd2 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/vocabimate_stream/CustomDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/vocabimate_stream/CustomDataSource.java
@@ -5,7 +5,6 @@
 import com.google.android.exoplayer2.upstream.TransferListener;
 import com.google.android.exoplayer2.util.Predicate;
 import com.vocabimate.protocol.ILicenceTo;
-import com.vocabimate.protocol.ILicenceTo;
 import com.vocabimate.protocol.VocabimateStreamHandlerFactory;
 
 import java.net.URL;
@@ -18,216 +17,49 @@
 
     private ILicenceTo licence;
 
-    public CustomDataSource setKeyHelperModel(ILicenceTo licence) {
-        this.licence = licence;
-        return this;
+    public CustomDataSource(String userAgent, Predicate<String> contentTypePredicate) {
+        super(userAgent, contentTypePredicate);
+        init();
     }
 
-    public ILicenceTo getKeyHelperModel() {
-        return licence;
+    public CustomDataSource(String userAgent, Predicate<String> contentTypePredicate, TransferListener<? super DefaultHttpDataSource> listener) {
+        super(userAgent, contentTypePredicate, listener);
+        init();
     }
 
-    @Override
-    public long open(DataSpec dataSpec) throws HttpDataSourceException {
-        return super.open(dataSpec);
+    public CustomDataSource(String userAgent, Predicate<String> contentTypePredicate, TransferListener<? super DefaultHttpDataSource> listener, int connectTimeoutMillis, int readTimeoutMillis) {
+        super(userAgent, contentTypePredicate, listener, connectTimeoutMillis, readTimeoutMillis);
+        init();
     }
 
-    public CustomDataSource(String userAgent, Predicate<String> contentTypePredicate) {
-        super(userAgent, contentTypePredicate);
+    public CustomDataSource(String userAgent, Predicate<String> contentTypePredicate, TransferListener<? super DefaultHttpDataSource> listener, int connectTimeoutMillis, int readTimeoutMillis, boolean allowCrossProtocolRedirects, RequestProperties defaultRequestProperties) {
+        super(userAgent, contentTypePredicate, listener, connectTimeoutMillis, readTimeoutMillis, allowCrossProtocolRedirects, defaultRequestProperties);
         init();
     }
-
     private void init() {
         maybeInstall(new VocabimateStreamHandlerFactory());
 //        URL.setURLStreamHandlerFactory(new VocabimateStreamHandlerFactory());
     }
-
     public static void maybeInstall(URLStreamHandlerFactory factory) { // todo maybe not the perfect way, need to check this later.
-        if(System.getProperty("com.vocabimate.streamHandlerFactoryInstalled") == null) {
+        if (System.getProperty("com.vocabimate.streamHandlerFactoryInstalled") == null) {
             URL.setURLStreamHandlerFactory(factory);
             System.setProperty("com.vocabimate.streamHandlerFactoryInstalled", "true");
         }
     }
 
-    public CustomDataSource(String userAgent, Predicate<String> contentTypePredicate, TransferListener<? super DefaultHttpDataSource> listener) {
-        super(userAgent, contentTypePredicate, listener);
-        init();
+    public ILicenceTo getKeyHelperModel() {
+        return licence;
     }
 
-    public CustomDataSource(String userAgent, Predicate<String> contentTypePredicate, TransferListener<? super DefaultHttpDataSource> listener, int connectTimeoutMillis, int readTimeoutMillis) {
-        super(userAgent, contentTypePredicate, listener, connectTimeoutMillis, readTimeoutMillis);
-        init();
+    public CustomDataSource setKeyHelperModel(ILicenceTo licence) {
+        this.licence = licence;
+        return this;
     }
 
-    public CustomDataSource(String userAgent, Predicate<String> contentTypePredicate, TransferListener<? super DefaultHttpDataSource> listener, int connectTimeoutMillis, int readTimeoutMillis, boolean allowCrossProtocolRedirects, RequestProperties defaultRequestProperties) {
-        super(userAgent, contentTypePredicate, listener, connectTimeoutMillis, readTimeoutMillis, allowCrossProtocolRedirects, defaultRequestProperties);
-        init();
+    @Override
+    public long open(DataSpec dataSpec) throws HttpDataSourceException {
+        return super.open(dataSpec);
     }
 
-//    /**
-//     * Custom method for custom scheme.
-//     */
-//    private HttpURLConnection makeConnectionCustom() throws IOException {
-//
-//        if (this instanceof CustomDataSource) {
-//            KeyHelperModel keyHelper = ((CustomDataSource) this).getKeyHelperModel();
-//            if (keyHelper != null) {
-//                String videoId = keyHelper.getVideoId();
-//                if (videoId == null) {
-//                    throw new NullPointerException("Video id is not set.");
-//                }
-//
-//                URL keyUrl = null;
-//                if (keyHelper.getKeyPath() == null) {
-//                    String licenceUrl = keyHelper.getLicecnceUrl(); //"https://voca2hosting.firebaseapp.com/small_files/license_key_path_absolute.json";
-//                    URL url = new URL(licenceUrl);
-//
-//                    // parse licence
-//                    HttpURLConnection httpURLConnection = null;
-//                    try {
-//                        httpURLConnection = (HttpURLConnection) url.openConnection();
-//                        String token = keyHelper.getToken();
-//                        if(token != null && token.length() > 0) {
-//                            httpURLConnection.setRequestProperty("access_token", token);
-//                        }
-//                        InputStream in = httpURLConnection.getInputStream();
-//                        String result = readStream(in);
-//                        VocaDataSourceHelper.LicenceModel licenceModel = new Gson()
-//                                .fromJson(result, VocaDataSourceHelper.LicenceModel.class);
-//                        if(licenceModel != null && licenceModel.getEncKeyByteString() != null) {
-//                            TokenDecryptionHelper tokenDecryptionHelper = new TokenDecryptionHelper(keyHelper.getToken(), licenceModel.getEncKeyByteString());
-//                            byte[] decrypt = tokenDecryptionHelper.decrypt();
-//                            if (licenceModel.getPath() != null) {
-//                                keyUrl = new URL(licenceModel.getPath());
-//                            }
-//                        }
-//            /*InputStreamReader isw = new InputStreamReader(in);
-//            int data = isw.read();
-//            while (data != -1) {
-//                char current = (char) data;
-//                data = isw.read();
-//                System.out.print(current);
-//            }*/
-//                    } catch (Exception e) {
-//                        e.printStackTrace();
-//                    } finally {
-//                        if (httpURLConnection != null) {
-//                            httpURLConnection.disconnect();
-//                        }
-//                    }
-//                } else {
-//                    keyUrl = new URL(keyHelper.getKeyPath());
-//                }
-//                HttpURLConnection connection = null;
-////    keyUrl = new URL("http://54.152.186.92:60801/static/sample/enc.key"); // temp
-//                if (keyUrl != null) {
-//                    connection = (HttpURLConnection) keyUrl.openConnection();
-//                    connection.setConnectTimeout(connectTimeoutMillis);
-//                    connection.setReadTimeout(readTimeoutMillis);
-//                    if (defaultRequestProperties != null) {
-//                        for (Map.Entry<String, String> property : defaultRequestProperties.getSnapshot()
-//                                .entrySet()) {
-//                            connection.setRequestProperty(property.getKey(), property.getValue());
-//                        }
-//                    }
-//                    for (Map.Entry<String, String> property : requestProperties.getSnapshot().entrySet()) {
-//                        connection.setRequestProperty(property.getKey(), property.getValue());
-//                    }
-//                    connection.setRequestProperty("User-Agent", userAgent);
-//                    connection.setRequestMethod("GET");
-////    if(!TextUtils.isEmpty(TokenManager.getToken())) {
-//                    if (this instanceof CustomDataSource) {
-//                        KeyHelperModel licence = ((CustomDataSource) this).getKeyHelperModel();
-//                        if (licence != null) {
-//                            String token2 = keyHelper.getToken();
-//                            if(token2 != null && token2.length() > 0) {
-//                                connection.setRequestProperty("access_token", token2);
-//                            }
-//                        }
-//                    }
-//
-////    }
-//                    Log.d(TAG, "ResponseCode: " + connection.getResponseCode());
-//                }
-//                return connection;
-//            }
-//        }
-//        return connection;
-//    }
-
-
-//    private int parseData(byte[] buffer) throws IOException {
-//        KeyHelperModel keyHelper = ((CustomDataSource) this).getKeyHelperModel();
-//        if (keyHelper != null) {
-//            String videoId = keyHelper.getVideoId();
-//            if (videoId == null) {
-//                throw new NullPointerException("Video id is not set.");
-//            }
-//            String licenceUrl = keyHelper.getLicecnceUrl(); //"https://voca2hosting.firebaseapp.com/small_files/license_key_path_absolute.json";
-//            URL url = new URL(licenceUrl);
-//
-//            // parse licence
-//            HttpURLConnection licenseConnection = null;
-//            try {
-//                licenseConnection = (HttpURLConnection) url.openConnection();
-//                String token = keyHelper.getToken();
-//                if(token != null && token.length() > 0) {
-//                    licenseConnection.setRequestProperty("access_token", token);
-//                }
-//                InputStream in = licenseConnection.getInputStream();
-//                String result = readStream(in);
-//                LicenceModel licenceModel = new Gson().fromJson(result, LicenceModel.class);
-//                if(licenceModel != null && licenceModel.getLicenseFile().getDecryptionKey() != null) {
-//                    TokenDecryptionHelper tokenDecryptionHelper = new TokenDecryptionHelper(keyHelper.getToken(), licenceModel.getLicenseFile().getDecryptionKey());
-//                    byte[] decrypt = tokenDecryptionHelper.decrypt();
-//                    for (int i = 0; i < decrypt.length; i++) {
-//                        buffer[i] = decrypt[i];
-//                    }
-//                    return 16;
-//                }
-//
-//        /*InputStreamReader isw = new InputStreamReader(in);
-//        int data = isw.read();
-//        while (data != -1) {
-//            char current = (char) data;
-//            data = isw.read();
-//            System.out.print(current);
-//        }*/
-//            } catch (Exception e) {
-//                e.printStackTrace();
-//            } finally {
-//                if (licenseConnection != null) {
-//                    licenseConnection.disconnect();
-//                }
-//            }
-//        }
-//        return -1;
-//    }
-//
-//
-//
-//    private String readStream(InputStream in) {
-//        BufferedReader reader = null;
-//        StringBuffer response = new StringBuffer();
-//        try {
-//            reader = new BufferedReader(new InputStreamReader(in));
-//            String line = "";
-//            while ((line = reader.readLine()) != null) {
-//                response.append(line);
-//            }
-//        } catch (IOException e) {
-//            e.printStackTrace();
-//        } finally {
-//            if (reader != null) {
-//                try {
-//                    reader.close();
-//                } catch (IOException e) {
-//                    e.printStackTrace();
-//                }
-//            }
-//        }
-//        return response.toString();
-//    }
-
 
 }
diff --git a/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashMediaSource.java b/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashMediaSource.java
index 66b933f234..2a43b6ff8f 100644
--- a/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashMediaSource.java
+++ b/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/DashMediaSource.java
@@ -1228,7 +1228,7 @@ public void onLoadCanceled(ParsingLoadable<Long> loadable, long elapsedRealtimeM
   private static final class XsDateTimeParser implements ParsingLoadable.Parser<Long> {
 
     @Override
-    public Long parse(Uri uri, InputStream inputStream) throws IOException {
+    public Long parse(DataSource dataSource, Uri uri, InputStream inputStream) throws IOException {
       String firstLine = new BufferedReader(new InputStreamReader(inputStream)).readLine();
       return Util.parseXsDateTime(firstLine);
     }
@@ -1241,7 +1241,7 @@ public Long parse(Uri uri, InputStream inputStream) throws IOException {
         Pattern.compile("(.+?)(Z|((\\+|-|−)(\\d\\d)(:?(\\d\\d))?))");
 
     @Override
-    public Long parse(Uri uri, InputStream inputStream) throws IOException {
+    public Long parse(DataSource dataSource, Uri uri, InputStream inputStream) throws IOException {
       String firstLine =
           new BufferedReader(new InputStreamReader(inputStream, Charset.forName(C.UTF8_NAME)))
               .readLine();
diff --git a/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/DashManifestParser.java b/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/DashManifestParser.java
index 41a28b2628..3eda2397d9 100644
--- a/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/DashManifestParser.java
+++ b/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/manifest/DashManifestParser.java
@@ -32,6 +32,7 @@
 import com.google.android.exoplayer2.source.dash.manifest.SegmentBase.SegmentTemplate;
 import com.google.android.exoplayer2.source.dash.manifest.SegmentBase.SegmentTimelineElement;
 import com.google.android.exoplayer2.source.dash.manifest.SegmentBase.SingleSegmentBase;
+import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.ParsingLoadable;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.MimeTypes;
@@ -91,7 +92,7 @@ public DashManifestParser(String contentId) {
   // MPD parsing.
 
   @Override
-  public DashManifest parse(Uri uri, InputStream inputStream) throws IOException {
+  public DashManifest parse(DataSource dataSource, Uri uri, InputStream inputStream) throws IOException {
     try {
       XmlPullParser xpp = xmlParserFactory.newPullParser();
       xpp.setInput(inputStream, null);
diff --git a/library/dash/src/test/java/com/google/android/exoplayer2/source/dash/DashMediaSourceTest.java b/library/dash/src/test/java/com/google/android/exoplayer2/source/dash/DashMediaSourceTest.java
index 1c440c70be..f3d88d9468 100644
--- a/library/dash/src/test/java/com/google/android/exoplayer2/source/dash/DashMediaSourceTest.java
+++ b/library/dash/src/test/java/com/google/android/exoplayer2/source/dash/DashMediaSourceTest.java
@@ -70,7 +70,7 @@ public void testIso8601ParserParseMissingTimezone() throws IOException {
 
   private static void assertParseStringToLong(
       long expected, ParsingLoadable.Parser<Long> parser, String data) throws IOException {
-    long actual = parser.parse(null, new ByteArrayInputStream(Util.getUtf8Bytes(data)));
+    long actual = parser.parse(null, null, new ByteArrayInputStream(Util.getUtf8Bytes(data)));
     assertThat(actual).isEqualTo(expected);
   }
 }
diff --git a/library/dash/src/test/java/com/google/android/exoplayer2/source/dash/manifest/DashManifestParserTest.java b/library/dash/src/test/java/com/google/android/exoplayer2/source/dash/manifest/DashManifestParserTest.java
index 6f14c8790f..36924d79ab 100644
--- a/library/dash/src/test/java/com/google/android/exoplayer2/source/dash/manifest/DashManifestParserTest.java
+++ b/library/dash/src/test/java/com/google/android/exoplayer2/source/dash/manifest/DashManifestParserTest.java
@@ -45,10 +45,10 @@
   public void testParseMediaPresentationDescription() throws IOException {
     DashManifestParser parser = new DashManifestParser();
     parser.parse(
-        Uri.parse("https://example.com/test.mpd"),
+            null, Uri.parse("https://example.com/test.mpd"),
         TestUtil.getInputStream(RuntimeEnvironment.application, SAMPLE_MPD_1));
     parser.parse(
-        Uri.parse("https://example.com/test.mpd"),
+            null, Uri.parse("https://example.com/test.mpd"),
         TestUtil.getInputStream(RuntimeEnvironment.application, SAMPLE_MPD_2_UNKNOWN_MIME_TYPE));
   }
 
@@ -57,7 +57,7 @@ public void testParseMediaPresentationDescriptionWithSegmentTemplate() throws IO
     DashManifestParser parser = new DashManifestParser();
     DashManifest mpd =
         parser.parse(
-            Uri.parse("https://example.com/test.mpd"),
+                null, Uri.parse("https://example.com/test.mpd"),
             TestUtil.getInputStream(RuntimeEnvironment.application, SAMPLE_MPD_3_SEGMENT_TEMPLATE));
 
     assertThat(mpd.getPeriodCount()).isEqualTo(1);
@@ -88,7 +88,7 @@ public void testParseMediaPresentationDescriptionCanParseEventStream() throws IO
     DashManifestParser parser = new DashManifestParser();
     DashManifest mpd =
         parser.parse(
-            Uri.parse("https://example.com/test.mpd"),
+                null, Uri.parse("https://example.com/test.mpd"),
             TestUtil.getInputStream(RuntimeEnvironment.application, SAMPLE_MPD_4_EVENT_STREAM));
 
     Period period = mpd.getPeriod(0);
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
index 82e29dc4b3..2391e599c2 100644
--- a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
@@ -32,10 +32,14 @@
 import com.google.android.exoplayer2.trackselection.TrackSelection;
 import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.DataSpec;
+import com.google.android.exoplayer2.upstream.DefaultDataSource;
+import com.google.android.exoplayer2.upstream.cache.CacheDataSource;
+import com.google.android.exoplayer2.upstream.vocabimate_stream.CustomDataSource;
 import com.google.android.exoplayer2.util.TimestampAdjuster;
 import com.google.android.exoplayer2.util.UriUtil;
 import com.google.android.exoplayer2.util.Util;
 import com.vocabimate.protocol.AesEncryptionUtil;
+import com.vocabimate.protocol.ILicenceTo;
 
 import java.io.IOException;
 import java.math.BigInteger;
@@ -383,8 +387,17 @@ public void onChunkLoadCompleted(Chunk chunk) {
        * Here it loads the decryption key, which we should have already encrypted using our AesEncryptionUtil, so we need
        * to decrypt it first. See {@Link DefaultHttpDataSource#readInternal() Line: 616} for more details.
        */
-      if(chunk.dataSpec != null && chunk.dataSpec.uri != null && (chunk.dataSpec.uri.toString().contains(".key") || chunk.dataSpec.uri.toString().contains("vcb"))) { // hisham - decrypting key here
-          encryptionKeyChunk.result = AesEncryptionUtil.decrypt("Bar12345Bar12345", "pppppppppppppppp",encryptionKeyChunk.getResult());
+      if(chunk.dataSpec != null && chunk.dataSpec.uri != null && (chunk.dataSpec.uri.toString().contains(".key") || chunk.dataSpec.uri.toString().contains("vcb://"))) { // hisham - decrypting key here
+        if(chunk.dataSource instanceof CacheDataSource){
+          DataSource upstreamDataSource = ((CacheDataSource) chunk.dataSource).getUpstreamDataSource();
+          if(upstreamDataSource instanceof DefaultDataSource) {
+            DataSource baseDataSource = ((DefaultDataSource) upstreamDataSource).getBaseDataSource();
+            if(baseDataSource instanceof CustomDataSource) {
+              ILicenceTo keyHelperModel = ((CustomDataSource) baseDataSource).getKeyHelperModel();
+              encryptionKeyChunk.result = AesEncryptionUtil.decrypt(keyHelperModel.getLocalEncryptionKey(), keyHelperModel.getLocalEncryptionIV(), encryptionKeyChunk.getResult());
+            }
+          }
+        }
       }
 
       scratchSpace = encryptionKeyChunk.getDataHolder();
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloader.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloader.java
index c775dd7956..4a87949356 100644
--- a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloader.java
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/offline/HlsDownloader.java
@@ -28,6 +28,8 @@
 import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.DataSpec;
 import com.google.android.exoplayer2.upstream.ParsingLoadable;
+import com.google.android.exoplayer2.upstream.cache.CacheDataSource;
+import com.google.android.exoplayer2.upstream.vocabimate_stream.CustomDataSource;
 import com.google.android.exoplayer2.util.UriUtil;
 import com.vocabimate.protocol.ILicenceTo;
 
@@ -114,9 +116,9 @@ protected HlsPlaylist getManifest(DataSource dataSource, Uri uri) throws IOExcep
         HlsMediaPlaylist.Segment initSegment = segment.initializationSegment;
         if (initSegment != null && initSegment != lastInitSegment) {
           lastInitSegment = initSegment;
-          addSegment(segments, mediaPlaylist, initSegment, seenEncryptionKeyUris);
+          addSegment(dataSource,segments, mediaPlaylist, initSegment, seenEncryptionKeyUris);
         }
-        addSegment(segments, mediaPlaylist, segment, seenEncryptionKeyUris);
+        addSegment(dataSource, segments, mediaPlaylist, segment, seenEncryptionKeyUris);
       }
     }
     return segments;
@@ -129,7 +131,7 @@ private static HlsPlaylist loadManifest(DataSource dataSource, Uri uri) throws I
     return loadable.getResult();
   }
 
-  private static void addSegment(
+  private static void addSegment(DataSource dataSource,
       ArrayList<Segment> segments,
       HlsMediaPlaylist mediaPlaylist,
       HlsMediaPlaylist.Segment hlsSegment,
@@ -139,7 +141,15 @@ private static void addSegment(
       Uri keyUri = UriUtil.resolveToUri(mediaPlaylist.baseUri,
           hlsSegment.fullSegmentEncryptionKeyUri);
       if (seenEncryptionKeyUris.add(keyUri)) {
-        segments.add(new Segment(startTimeUs, new DataSpec(keyUri)));
+        if(dataSource instanceof CacheDataSource){
+          if(((CacheDataSource)dataSource).getUpstreamDataSource() instanceof CustomDataSource) {
+            ILicenceTo keyHelperModel = ((CustomDataSource) ((CacheDataSource) dataSource).getUpstreamDataSource()).getKeyHelperModel();
+            keyUri = Uri.parse(keyUri.toString() + keyHelperModel.getUniqueKeyPathForVCB());
+            segments.add(new Segment(startTimeUs, new DataSpec(keyUri)));
+          }
+        } else {
+          segments.add(new Segment(startTimeUs, new DataSpec(keyUri)));
+        }
       }
     }
     Uri resolvedUri = UriUtil.resolveToUri(mediaPlaylist.baseUri, hlsSegment.url);
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsPlaylistParser.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsPlaylistParser.java
index 981668159f..d5a32d6d70 100644
--- a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsPlaylistParser.java
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsPlaylistParser.java
@@ -24,9 +24,15 @@
 import com.google.android.exoplayer2.drm.DrmInitData.SchemeData;
 import com.google.android.exoplayer2.source.UnrecognizedInputFormatException;
 import com.google.android.exoplayer2.source.hls.playlist.HlsMediaPlaylist.Segment;
+import com.google.android.exoplayer2.upstream.DataSource;
+import com.google.android.exoplayer2.upstream.DefaultDataSource;
 import com.google.android.exoplayer2.upstream.ParsingLoadable;
+import com.google.android.exoplayer2.upstream.cache.CacheDataSource;
+import com.google.android.exoplayer2.upstream.vocabimate_stream.CustomDataSource;
 import com.google.android.exoplayer2.util.MimeTypes;
 import com.google.android.exoplayer2.util.Util;
+import com.vocabimate.protocol.ILicenceTo;
+
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStream;
@@ -140,7 +146,7 @@
   private static final Pattern REGEX_FORCED = compileBooleanAttrPattern("FORCED");
 
   @Override
-  public HlsPlaylist parse(Uri uri, InputStream inputStream) throws IOException {
+  public HlsPlaylist parse(DataSource dataSource, Uri uri, InputStream inputStream) throws IOException {
     BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
     Queue<String> extraLines = new ArrayDeque<>();
     String line;
@@ -165,7 +171,7 @@ public HlsPlaylist parse(Uri uri, InputStream inputStream) throws IOException {
             || line.equals(TAG_DISCONTINUITY_SEQUENCE)
             || line.equals(TAG_ENDLIST)) {
           extraLines.add(line);
-          return parseMediaPlaylist(new LineIterator(extraLines, reader), uri.toString());
+          return parseMediaPlaylist(dataSource, new LineIterator(extraLines, reader), uri.toString());
         } else {
           extraLines.add(line);
         }
@@ -337,7 +343,7 @@ private static int parseSelectionFlags(String line) {
         | (parseBooleanAttribute(line, REGEX_AUTOSELECT, false) ? C.SELECTION_FLAG_AUTOSELECT : 0);
   }
 
-  private static HlsMediaPlaylist parseMediaPlaylist(LineIterator iterator, String baseUri)
+  private static HlsMediaPlaylist parseMediaPlaylist(DataSource dataSource, LineIterator iterator, String baseUri)
       throws IOException {
     @HlsMediaPlaylist.PlaylistType int playlistType = HlsMediaPlaylist.PLAYLIST_TYPE_UNKNOWN;
     long startOffsetUs = C.TIME_UNSET;
@@ -417,6 +423,16 @@ private static HlsMediaPlaylist parseMediaPlaylist(LineIterator iterator, String
             if (METHOD_AES_128.equals(method)) {
               // The segment is fully encrypted using an identity key.
               encryptionKeyUri = parseStringAttr(line, REGEX_URI); // hisham - reading the key line in m3u8
+                if(dataSource instanceof CacheDataSource){
+                    DataSource upstreamDataSource = ((CacheDataSource) dataSource).getUpstreamDataSource();
+                    if(upstreamDataSource instanceof DefaultDataSource){
+                        DataSource baseDataSource = ((DefaultDataSource) upstreamDataSource).getBaseDataSource();
+                        if(baseDataSource instanceof CustomDataSource){
+                            ILicenceTo keyHelperModel = ((CustomDataSource) baseDataSource).getKeyHelperModel();
+                            encryptionKeyUri = encryptionKeyUri + keyHelperModel.getUniqueKeyPathForVCB();
+                        }
+                    }
+                }
               //28-09-2018 for custom offline play back
               //it will change in future
 //               if(encryptionKeyUri.contains("vcb://")){
@@ -562,6 +578,10 @@ private static String parseStringAttr(String line, Pattern pattern) throws Parse
 //
 //      return "https://vocatest-a40ab.firebaseapp.com/small_files/enc.key";
 //
+//    }
+
+//    if(line != null && line.contains("vcb://")){
+//        line = line.replace("vcb://", "vcb://" + UUID.randomUUID());
 //    }
 
     Matcher matcher = pattern.matcher(line);
diff --git a/library/hls/src/test/java/com/google/android/exoplayer2/source/hls/playlist/HlsMasterPlaylistParserTest.java b/library/hls/src/test/java/com/google/android/exoplayer2/source/hls/playlist/HlsMasterPlaylistParserTest.java
index 86426e1f94..ba6d57224d 100644
--- a/library/hls/src/test/java/com/google/android/exoplayer2/source/hls/playlist/HlsMasterPlaylistParserTest.java
+++ b/library/hls/src/test/java/com/google/android/exoplayer2/source/hls/playlist/HlsMasterPlaylistParserTest.java
@@ -200,6 +200,6 @@ private static HlsMasterPlaylist parseMasterPlaylist(String uri, String playlist
     Uri playlistUri = Uri.parse(uri);
     ByteArrayInputStream inputStream =
         new ByteArrayInputStream(playlistString.getBytes(Charset.forName(C.UTF8_NAME)));
-    return (HlsMasterPlaylist) new HlsPlaylistParser().parse(playlistUri, inputStream);
+    return (HlsMasterPlaylist) new HlsPlaylistParser().parse(null, playlistUri, inputStream);
   }
 }
diff --git a/library/hls/src/test/java/com/google/android/exoplayer2/source/hls/playlist/HlsMediaPlaylistParserTest.java b/library/hls/src/test/java/com/google/android/exoplayer2/source/hls/playlist/HlsMediaPlaylistParserTest.java
index 7a8a4d7925..258745224d 100644
--- a/library/hls/src/test/java/com/google/android/exoplayer2/source/hls/playlist/HlsMediaPlaylistParserTest.java
+++ b/library/hls/src/test/java/com/google/android/exoplayer2/source/hls/playlist/HlsMediaPlaylistParserTest.java
@@ -73,7 +73,7 @@ public void testParseMediaPlaylist() throws Exception {
             + "#EXT-X-ENDLIST";
     InputStream inputStream =
         new ByteArrayInputStream(playlistString.getBytes(Charset.forName(C.UTF8_NAME)));
-    HlsPlaylist playlist = new HlsPlaylistParser().parse(playlistUri, inputStream);
+    HlsPlaylist playlist = new HlsPlaylistParser().parse(null, playlistUri, inputStream);
 
     HlsMediaPlaylist mediaPlaylist = (HlsMediaPlaylist) playlist;
     assertThat(mediaPlaylist.playlistType).isEqualTo(HlsMediaPlaylist.PLAYLIST_TYPE_VOD);
@@ -159,7 +159,7 @@ public void testParseSampleAesMethod() throws Exception {
     InputStream inputStream =
         new ByteArrayInputStream(playlistString.getBytes(Charset.forName(C.UTF8_NAME)));
     HlsMediaPlaylist playlist =
-        (HlsMediaPlaylist) new HlsPlaylistParser().parse(playlistUri, inputStream);
+        (HlsMediaPlaylist) new HlsPlaylistParser().parse(null, playlistUri, inputStream);
     assertThat(playlist.drmInitData.schemeType).isEqualTo(C.CENC_TYPE_cbcs);
     assertThat(playlist.drmInitData.get(0).matches(C.WIDEVINE_UUID)).isTrue();
   }
@@ -183,7 +183,7 @@ public void testParseSampleAesCencMethod() throws Exception {
     InputStream inputStream =
         new ByteArrayInputStream(playlistString.getBytes(Charset.forName(C.UTF8_NAME)));
     HlsMediaPlaylist playlist =
-        (HlsMediaPlaylist) new HlsPlaylistParser().parse(playlistUri, inputStream);
+        (HlsMediaPlaylist) new HlsPlaylistParser().parse(null, playlistUri, inputStream);
     assertThat(playlist.drmInitData.schemeType).isEqualTo(C.CENC_TYPE_cenc);
     assertThat(playlist.drmInitData.get(0).matches(C.WIDEVINE_UUID)).isTrue();
   }
@@ -207,7 +207,7 @@ public void testParseSampleAesCtrMethod() throws Exception {
     InputStream inputStream =
         new ByteArrayInputStream(playlistString.getBytes(Charset.forName(C.UTF8_NAME)));
     HlsMediaPlaylist playlist =
-        (HlsMediaPlaylist) new HlsPlaylistParser().parse(playlistUri, inputStream);
+        (HlsMediaPlaylist) new HlsPlaylistParser().parse(null, playlistUri, inputStream);
     assertThat(playlist.drmInitData.schemeType).isEqualTo(C.CENC_TYPE_cenc);
     assertThat(playlist.drmInitData.get(0).matches(C.WIDEVINE_UUID)).isTrue();
   }
@@ -240,7 +240,7 @@ public void testGapTag() throws IOException {
     InputStream inputStream =
         new ByteArrayInputStream(playlistString.getBytes(Charset.forName(C.UTF8_NAME)));
     HlsMediaPlaylist playlist =
-        (HlsMediaPlaylist) new HlsPlaylistParser().parse(playlistUri, inputStream);
+        (HlsMediaPlaylist) new HlsPlaylistParser().parse(null, playlistUri, inputStream);
 
     assertThat(playlist.hasEndTag).isFalse();
     assertThat(playlist.segments.get(1).hasGapTag).isFalse();
@@ -269,7 +269,7 @@ public void testMapTag() throws IOException {
     InputStream inputStream =
         new ByteArrayInputStream(playlistString.getBytes(Charset.forName(C.UTF8_NAME)));
     HlsMediaPlaylist playlist =
-        (HlsMediaPlaylist) new HlsPlaylistParser().parse(playlistUri, inputStream);
+        (HlsMediaPlaylist) new HlsPlaylistParser().parse(null, playlistUri, inputStream);
 
     List<Segment> segments = playlist.segments;
     assertThat(segments.get(0).initializationSegment).isNull();
diff --git a/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/manifest/SsManifestParser.java b/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/manifest/SsManifestParser.java
index 3ca5f8d997..27dfb1d685 100644
--- a/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/manifest/SsManifestParser.java
+++ b/library/smoothstreaming/src/main/java/com/google/android/exoplayer2/source/smoothstreaming/manifest/SsManifestParser.java
@@ -27,6 +27,7 @@
 import com.google.android.exoplayer2.extractor.mp4.PsshAtomUtil;
 import com.google.android.exoplayer2.source.smoothstreaming.manifest.SsManifest.ProtectionElement;
 import com.google.android.exoplayer2.source.smoothstreaming.manifest.SsManifest.StreamElement;
+import com.google.android.exoplayer2.upstream.DataSource;
 import com.google.android.exoplayer2.upstream.ParsingLoadable;
 import com.google.android.exoplayer2.util.Assertions;
 import com.google.android.exoplayer2.util.CodecSpecificDataUtil;
@@ -62,7 +63,7 @@ public SsManifestParser() {
   }
 
   @Override
-  public SsManifest parse(Uri uri, InputStream inputStream) throws IOException {
+  public SsManifest parse(DataSource dataSource, Uri uri, InputStream inputStream) throws IOException {
     try {
       XmlPullParser xmlParser = xmlParserFactory.newPullParser();
       xmlParser.setInput(inputStream, null);
diff --git a/library/smoothstreaming/src/test/java/com/google/android/exoplayer2/source/smoothstreaming/manifest/SsManifestParserTest.java b/library/smoothstreaming/src/test/java/com/google/android/exoplayer2/source/smoothstreaming/manifest/SsManifestParserTest.java
index 2ce9fec970..c666fc03b9 100644
--- a/library/smoothstreaming/src/test/java/com/google/android/exoplayer2/source/smoothstreaming/manifest/SsManifestParserTest.java
+++ b/library/smoothstreaming/src/test/java/com/google/android/exoplayer2/source/smoothstreaming/manifest/SsManifestParserTest.java
@@ -35,10 +35,10 @@
   public void testParseSmoothStreamingManifest() throws IOException {
     SsManifestParser parser = new SsManifestParser();
     parser.parse(
-        Uri.parse("https://example.com/test.ismc"),
+            null, Uri.parse("https://example.com/test.ismc"),
         TestUtil.getInputStream(RuntimeEnvironment.application, SAMPLE_ISMC_1));
     parser.parse(
-        Uri.parse("https://example.com/test.ismc"),
+            null, Uri.parse("https://example.com/test.ismc"),
         TestUtil.getInputStream(RuntimeEnvironment.application, SAMPLE_ISMC_2));
   }
 }
diff --git a/protocol/src/main/java/com/vocabimate/protocol/ILicenceTo.java b/protocol/src/main/java/com/vocabimate/protocol/ILicenceTo.java
index 435f60a182..73097678f5 100644
--- a/protocol/src/main/java/com/vocabimate/protocol/ILicenceTo.java
+++ b/protocol/src/main/java/com/vocabimate/protocol/ILicenceTo.java
@@ -11,4 +11,7 @@
     String getToken();
     String getLicenceUrl();
     String getM3U8Path();
+    String getUniqueKeyPathForVCB(); // Every Key must have a unique path, otherwise keys may get replaced or 2nd key with same path dont download
+    String getLocalEncryptionKey();
+    String getLocalEncryptionIV();
 }
diff --git a/protocol/src/main/java/com/vocabimate/protocol/KeyHelper.java b/protocol/src/main/java/com/vocabimate/protocol/KeyHelper.java
index 62d715f744..81b2d0e78f 100644
--- a/protocol/src/main/java/com/vocabimate/protocol/KeyHelper.java
+++ b/protocol/src/main/java/com/vocabimate/protocol/KeyHelper.java
@@ -10,11 +10,15 @@
     private String m3u8Path;
     private String token;
     private String licenceUrl;
+    private String localEncryptionKey;
+    private String localEncryptionIV;
 
-    public KeyHelper(String m3u8Path, String token, String licenceUrl) {
+    public KeyHelper(String m3u8Path, String token, String licenceUrl, String localEncryptionKey, String localEncryptionIV) {
         this.m3u8Path = m3u8Path;
         this.token = token;
         this.licenceUrl = licenceUrl;
+        this.localEncryptionKey = localEncryptionKey;
+        this.localEncryptionIV = localEncryptionIV;
     }
 
     @Override
@@ -31,4 +35,14 @@ public String getLicenceUrl() {
     public String getM3U8Path() {
         return m3u8Path;
     }
+
+    @Override
+    public String getLocalEncryptionIV() {
+        return localEncryptionIV;
+    }
+
+    @Override
+    public String getLocalEncryptionKey() {
+        return localEncryptionKey;
+    }
 }
diff --git a/demos/main/src/main/java/com/google/android/exoplayer2/demo/LicenceBody.java b/protocol/src/main/java/com/vocabimate/protocol/LicenceBody.java
similarity index 70%
rename from demos/main/src/main/java/com/google/android/exoplayer2/demo/LicenceBody.java
rename to protocol/src/main/java/com/vocabimate/protocol/LicenceBody.java
index feca259015..c0cdc5a05f 100644
--- a/demos/main/src/main/java/com/google/android/exoplayer2/demo/LicenceBody.java
+++ b/protocol/src/main/java/com/vocabimate/protocol/LicenceBody.java
@@ -1,4 +1,4 @@
-package com.google.android.exoplayer2.demo;
+package com.vocabimate.protocol;
 
 import com.google.gson.Gson;
 import com.google.gson.annotations.SerializedName;
@@ -14,8 +14,8 @@
     @SerializedName("licenseTO")
     private LicenceBodyInternal licenceBodyInternal;
 
-    public LicenceBody(int userId, int videoId, String delInd, String m3u8Path, String token, String licenceUrl) {
-        super(m3u8Path, token, licenceUrl);
+    public LicenceBody(int userId, int videoId, String delInd, String m3u8Path, String token, String licenceUrl, String localEncryptionKey, String localEncryptionIV) {
+        super(m3u8Path, token, licenceUrl, localEncryptionKey, localEncryptionIV);
         licenceBodyInternal = new LicenceBodyInternal(userId, videoId, delInd);
     }
 
@@ -30,6 +30,15 @@ public String getType() {
     }
 
 
+    /**
+     * @return Unique key path for every video  ex: vcb://{videoId} - vcb://18 or vcb://360p.m3u8/18
+     */
+    @Override
+    public String getUniqueKeyPathForVCB() {
+        return String.valueOf(licenceBodyInternal.videoId);
+    }
+
+
     private class LicenceBodyInternal implements Serializable {
         @SerializedName("userId")
         int userId;
