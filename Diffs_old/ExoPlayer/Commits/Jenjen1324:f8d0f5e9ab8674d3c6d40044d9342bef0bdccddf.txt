diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/TsExtractor.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/TsExtractor.java
index a2f8568cbb..5f27b6ea29 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/TsExtractor.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/TsExtractor.java
@@ -15,12 +15,12 @@
  */
 package com.google.android.exoplayer2.extractor.ts;
 
-import static com.google.android.exoplayer2.extractor.ts.TsPayloadReader.FLAG_PAYLOAD_UNIT_START_INDICATOR;
-
-import androidx.annotation.IntDef;
 import android.util.SparseArray;
 import android.util.SparseBooleanArray;
 import android.util.SparseIntArray;
+
+import androidx.annotation.IntDef;
+
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.ParserException;
 import com.google.android.exoplayer2.extractor.Extractor;
@@ -39,6 +39,7 @@
 import com.google.android.exoplayer2.util.ParsableByteArray;
 import com.google.android.exoplayer2.util.TimestampAdjuster;
 import com.google.android.exoplayer2.util.Util;
+
 import java.io.IOException;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
@@ -48,6 +49,8 @@
 import java.util.Collections;
 import java.util.List;
 
+import static com.google.android.exoplayer2.extractor.ts.TsPayloadReader.FLAG_PAYLOAD_UNIT_START_INDICATOR;
+
 /**
  * Extracts data from the MPEG-2 TS container format.
  */
@@ -583,18 +586,15 @@ public void consume(ParsableByteArray sectionData) {
         }
         remainingEntriesLength -= esInfoLength + 5;
 
-        int trackId = mode == MODE_HLS ? streamType : elementaryPid;
+        int trackId = elementaryPid;
         if (trackIds.get(trackId)) {
           continue;
         }
 
         TsPayloadReader reader = mode == MODE_HLS && streamType == TS_STREAM_TYPE_ID3 ? id3Reader
             : payloadReaderFactory.createPayloadReader(streamType, esInfo);
-        if (mode != MODE_HLS
-            || elementaryPid < trackIdToPidScratch.get(trackId, MAX_PID_PLUS_ONE)) {
-          trackIdToPidScratch.put(trackId, elementaryPid);
-          trackIdToReaderScratch.put(trackId, reader);
-        }
+        trackIdToPidScratch.put(trackId, elementaryPid);
+        trackIdToReaderScratch.put(trackId, reader);
       }
 
       int trackIdCount = trackIdToPidScratch.size();
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsSampleStreamWrapper.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsSampleStreamWrapper.java
index 434b6c2011..e6db974faa 100644
--- a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsSampleStreamWrapper.java
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsSampleStreamWrapper.java
@@ -17,7 +17,9 @@
 
 import android.net.Uri;
 import android.os.Handler;
+
 import androidx.annotation.Nullable;
+
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.FormatHolder;
@@ -47,6 +49,7 @@
 import com.google.android.exoplayer2.util.Log;
 import com.google.android.exoplayer2.util.MimeTypes;
 import com.google.android.exoplayer2.util.Util;
+
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -782,43 +785,56 @@ public void init(int chunkUid, boolean shouldSpliceIn, boolean reusingExtractor)
   public TrackOutput track(int id, int type) {
     int trackCount = sampleQueues.length;
 
-    // Audio and video tracks are handled manually to ignore ids.
-    if (type == C.TRACK_TYPE_AUDIO) {
-      if (audioSampleQueueIndex != C.INDEX_UNSET) {
-        if (audioSampleQueueMappingDone) {
-          return sampleQueueTrackIds[audioSampleQueueIndex] == id
-              ? sampleQueues[audioSampleQueueIndex]
-              : createDummyTrackOutput(id, type);
-        }
-        audioSampleQueueMappingDone = true;
-        sampleQueueTrackIds[audioSampleQueueIndex] = id;
-        return sampleQueues[audioSampleQueueIndex];
-      } else if (tracksEnded) {
-        return createDummyTrackOutput(id, type);
-      }
-    } else if (type == C.TRACK_TYPE_VIDEO) {
-      if (videoSampleQueueIndex != C.INDEX_UNSET) {
-        if (videoSampleQueueMappingDone) {
-          return sampleQueueTrackIds[videoSampleQueueIndex] == id
-              ? sampleQueues[videoSampleQueueIndex]
-              : createDummyTrackOutput(id, type);
-        }
-        videoSampleQueueMappingDone = true;
-        sampleQueueTrackIds[videoSampleQueueIndex] = id;
-        return sampleQueues[videoSampleQueueIndex];
-      } else if (tracksEnded) {
-        return createDummyTrackOutput(id, type);
-      }
-    } else /* sparse track */ {
-      for (int i = 0; i < trackCount; i++) {
-        if (sampleQueueTrackIds[i] == id) {
-          return sampleQueues[i];
-        }
-      }
-      if (tracksEnded) {
-        return createDummyTrackOutput(id, type);
+    for (int i = 0; i < trackCount; i++) {
+      if (sampleQueueTrackIds[i] == id) {
+        return sampleQueues[i];
       }
     }
+
+    if (tracksEnded) {
+      Log.w(TAG, "Unmapped track with id " + id + " of type " + type);
+      return new DummyTrackOutput();
+    }
+
+
+//    // Audio and video tracks are handled manually to ignore ids.
+//    if (type == C.TRACK_TYPE_AUDIO) {
+//      if (audioSampleQueueIndex != C.INDEX_UNSET) {
+//        if (audioSampleQueueMappingDone) {
+//          return sampleQueueTrackIds[audioSampleQueueIndex] == id
+//              ? sampleQueues[audioSampleQueueIndex]
+//              : createDummyTrackOutput(id, type);
+//        }
+//        audioSampleQueueMappingDone = true;
+//        sampleQueueTrackIds[audioSampleQueueIndex] = id;
+//        return sampleQueues[audioSampleQueueIndex];
+//      } else if (tracksEnded) {
+//        return createDummyTrackOutput(id, type);
+//      }
+//    } else if (type == C.TRACK_TYPE_VIDEO) {
+//      if (videoSampleQueueIndex != C.INDEX_UNSET) {
+//        if (videoSampleQueueMappingDone) {
+//          return sampleQueueTrackIds[videoSampleQueueIndex] == id
+//              ? sampleQueues[videoSampleQueueIndex]
+//              : createDummyTrackOutput(id, type);
+//        }
+//        videoSampleQueueMappingDone = true;
+//        sampleQueueTrackIds[videoSampleQueueIndex] = id;
+//        return sampleQueues[videoSampleQueueIndex];
+//      } else if (tracksEnded) {
+//        return createDummyTrackOutput(id, type);
+//      }
+//    } else /* sparse track */ {
+//      for (int i = 0; i < trackCount; i++) {
+//        if (sampleQueueTrackIds[i] == id) {
+//          return sampleQueues[i];
+//        }
+//      }
+//      if (tracksEnded) {
+//        return createDummyTrackOutput(id, type);
+//      }
+//    }
+
     SampleQueue trackOutput = new PrivTimestampStrippingSampleQueue(allocator);
     trackOutput.setSampleOffsetUs(sampleOffsetUs);
     trackOutput.sourceId(chunkUid);
@@ -831,13 +847,13 @@ public TrackOutput track(int id, int type) {
     sampleQueueIsAudioVideoFlags[trackCount] = type == C.TRACK_TYPE_AUDIO
         || type == C.TRACK_TYPE_VIDEO;
     haveAudioVideoSampleQueues |= sampleQueueIsAudioVideoFlags[trackCount];
-    if (type == C.TRACK_TYPE_AUDIO) {
-      audioSampleQueueMappingDone = true;
-      audioSampleQueueIndex = trackCount;
-    } else if (type == C.TRACK_TYPE_VIDEO) {
-      videoSampleQueueMappingDone = true;
-      videoSampleQueueIndex = trackCount;
-    }
+//    if (type == C.TRACK_TYPE_AUDIO) {
+//      audioSampleQueueMappingDone = true;
+//      audioSampleQueueIndex = trackCount;
+//    } else if (type == C.TRACK_TYPE_VIDEO) {
+//      videoSampleQueueMappingDone = true;
+//      videoSampleQueueIndex = trackCount;
+//    }
     if (getTrackTypeScore(type) > getTrackTypeScore(primarySampleQueueType)) {
       primarySampleQueueIndex = trackCount;
       primarySampleQueueType = type;
