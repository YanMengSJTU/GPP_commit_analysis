diff --git a/demo/src/main/java/com/google/android/exoplayer/demo/player/DemoPlayer.java b/demo/src/main/java/com/google/android/exoplayer/demo/player/DemoPlayer.java
index 5bc5c9da1f..dcc3c97726 100644
--- a/demo/src/main/java/com/google/android/exoplayer/demo/player/DemoPlayer.java
+++ b/demo/src/main/java/com/google/android/exoplayer/demo/player/DemoPlayer.java
@@ -60,7 +60,7 @@
  * SmoothStreaming and so on).
  */
 public class DemoPlayer implements ExoPlayer.Listener, ChunkSampleSource.EventListener,
-    HlsSampleSource.EventListener, HlsChunkSource.EventListener, ExtractorSampleSource.EventListener,
+    HlsSampleSource.EventListener, ExtractorSampleSource.EventListener,
     SingleSampleSource.EventListener, DefaultBandwidthMeter.EventListener,
     MediaCodecVideoTrackRenderer.EventListener, MediaCodecAudioTrackRenderer.EventListener,
     StreamingDrmSessionManager.EventListener, DashChunkSource.EventListener, TextRenderer,
@@ -574,12 +574,6 @@ public void onUpstreamDiscarded(int sourceId, long mediaStartTimeMs, long mediaE
     // Do nothing.
   }
 
-  @Override
-  public void onManifestLoadCompleted(byte[] rawResponse)
-  {
-    // Do nothing
-  }
-
   private void maybeReportPlayerState() {
     boolean playWhenReady = player.getPlayWhenReady();
     int playbackState = getPlaybackState();
diff --git a/demo/src/main/java/com/google/android/exoplayer/demo/player/HlsRendererBuilder.java b/demo/src/main/java/com/google/android/exoplayer/demo/player/HlsRendererBuilder.java
index 58090efccb..198b37b9a3 100644
--- a/demo/src/main/java/com/google/android/exoplayer/demo/player/HlsRendererBuilder.java
+++ b/demo/src/main/java/com/google/android/exoplayer/demo/player/HlsRendererBuilder.java
@@ -145,9 +145,7 @@ public void onSingleManifest(HlsPlaylist manifest) {
       DataSource dataSource = new DefaultUriDataSource(context, bandwidthMeter, userAgent);
       HlsChunkSource chunkSource = new HlsChunkSource(true /* isMaster */, dataSource, manifest,
           DefaultHlsTrackSelector.newDefaultInstance(context), bandwidthMeter,
-          timestampAdjusterProvider, HlsChunkSource.ADAPTIVE_MODE_SPLICE,
-          HlsChunkSource.DEFAULT_MIN_BUFFER_TO_SWITCH_UP_MS, HlsChunkSource.DEFAULT_MAX_BUFFER_TO_SWITCH_DOWN_MS,
-          mainHandler, player);
+          timestampAdjusterProvider, HlsChunkSource.ADAPTIVE_MODE_SPLICE);
       HlsSampleSource sampleSource = new HlsSampleSource(chunkSource, loadControl,
           MAIN_BUFFER_SEGMENTS * BUFFER_SEGMENT_SIZE, mainHandler, player, DemoPlayer.TYPE_VIDEO);
       MediaCodecVideoTrackRenderer videoRenderer = new MediaCodecVideoTrackRenderer(context,
diff --git a/library/src/main/java/com/google/android/exoplayer/hls/HlsChunkSource.java b/library/src/main/java/com/google/android/exoplayer/hls/HlsChunkSource.java
index 7a600873d4..ddcacfa5c3 100644
--- a/library/src/main/java/com/google/android/exoplayer/hls/HlsChunkSource.java
+++ b/library/src/main/java/com/google/android/exoplayer/hls/HlsChunkSource.java
@@ -64,10 +64,12 @@
   public interface EventListener extends BaseChunkSampleSourceEventListener {
 
     /**
-     * Invoked when an HLS manifest is loaded
-     * @param rawResponse The raw data of the HLS manifest
+     * Invoked when a media playlist has been loaded.
+    *
+     * @param rawResponse The raw data of the media playlist
      */
-    void onManifestLoadCompleted(byte[] rawResponse);
+    void onMediaPlaylistLoadCompleted(byte[] rawResponse);
+
   }
 
   /**
@@ -601,7 +603,7 @@ public void onChunkLoadCompleted(Chunk chunk) {
         eventHandler.post(new Runnable()  {
           @Override
           public void run() {
-            eventListener.onManifestLoadCompleted(rawResponse);
+            eventListener.onMediaPlaylistLoadCompleted(rawResponse);
           }
         });
       }
@@ -896,8 +898,8 @@ public ExposedTrack(Variant[] adaptiveVariants, int defaultVariantIndex, int max
     private final HlsPlaylistParser playlistParser;
     private final String playlistUrl;
 
-    private HlsMediaPlaylist result;
     private byte[] rawResponse;
+    private HlsMediaPlaylist result;
 
     public MediaPlaylistChunk(DataSource dataSource, DataSpec dataSpec, byte[] scratchSpace,
         HlsPlaylistParser playlistParser, int variantIndex, String playlistUrl) {
@@ -910,18 +912,19 @@ public MediaPlaylistChunk(DataSource dataSource, DataSpec dataSpec, byte[] scrat
 
     @Override
     protected void consume(byte[] data, int limit) throws IOException {
-      result = (HlsMediaPlaylist) playlistParser.parse(playlistUrl,
-          new ByteArrayInputStream(data, 0, limit));
       rawResponse = Arrays.copyOf(data, limit);
+      result = (HlsMediaPlaylist) playlistParser.parse(playlistUrl,
+          new ByteArrayInputStream(rawResponse));
+    }
+
+    public byte[] getRawResponse() {
+      return rawResponse;
     }
 
     public HlsMediaPlaylist getResult() {
       return result;
     }
 
-    public byte[] getRawResponse() {
-      return rawResponse;
-    }
   }
 
   private static final class EncryptionKeyChunk extends DataChunk {
