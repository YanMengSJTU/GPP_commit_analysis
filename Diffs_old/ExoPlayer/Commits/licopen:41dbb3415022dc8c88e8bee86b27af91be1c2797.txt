diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/wav/WavExtractor.java b/library/src/main/java/com/google/android/exoplayer/extractor/wav/WavExtractor.java
index f193c0e622..e3452e228a 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/wav/WavExtractor.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/wav/WavExtractor.java
@@ -37,6 +37,8 @@
   private ExtractorOutput extractorOutput;
   private TrackOutput trackOutput;
   private WavHeader wavHeader;
+  private int bytesPerFrame;
+  private int pendingBytes;
 
   @Override
   public boolean sniff(ExtractorInput input) throws IOException, InterruptedException {
@@ -53,7 +55,7 @@ public void init(ExtractorOutput output) {
 
   @Override
   public void seek() {
-    // Do nothing.
+    pendingBytes = 0;
   }
 
   @Override
@@ -66,6 +68,7 @@ public int read(ExtractorInput input, PositionHolder seekPosition)
         // Someone tried to read a non-WAV or unsupported WAV without sniffing first.
         throw new ParserException("Error initializing WavHeader. Did you sniff first?");
       }
+      bytesPerFrame = wavHeader.getBytesPerFrame();
     }
 
     // If we haven't read in the data start and size, read and store them.
@@ -86,14 +89,28 @@ public int read(ExtractorInput input, PositionHolder seekPosition)
       extractorOutput.seekMap(this);
     }
 
-    long inputPosition = input.getPosition();
+    int bytesAppended = trackOutput.sampleData(input, MAX_INPUT_SIZE - pendingBytes, true);
 
-    int bytesRead = trackOutput.sampleData(input, MAX_INPUT_SIZE, true);
-    if (bytesRead == RESULT_END_OF_INPUT) {
+    if (bytesAppended != RESULT_END_OF_INPUT) {
+      pendingBytes += bytesAppended;
+    }
+
+    // Round down the pending number of bytes to the nearest frame.
+    int frameBytes = pendingBytes / bytesPerFrame * bytesPerFrame;
+    if (frameBytes > 0) {
+      long sampleStartPosition = input.getPosition() - pendingBytes;
+      pendingBytes -= frameBytes;
+      trackOutput.sampleMetadata(
+          wavHeader.getTimeUs(sampleStartPosition),
+          C.SAMPLE_FLAG_SYNC,
+          frameBytes,
+          pendingBytes,
+          null);
+    }
+
+    if (bytesAppended == RESULT_END_OF_INPUT) {
       return RESULT_END_OF_INPUT;
     }
-    trackOutput.sampleMetadata(
-        wavHeader.getTimeUs(inputPosition), C.SAMPLE_FLAG_SYNC, bytesRead, 0, null);
 
     return RESULT_CONTINUE;
   }
diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/wav/WavHeader.java b/library/src/main/java/com/google/android/exoplayer/extractor/wav/WavHeader.java
index 5e0d1afeb6..24fb83ecd8 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/wav/WavHeader.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/wav/WavHeader.java
@@ -68,6 +68,11 @@ public int getBytesPerSample() {
     return blockAlignment / numChannels;
   }
 
+  /** Returns the bytes per frame of this WAV. */
+  public int getBytesPerFrame() {
+    return blockAlignment;
+  }
+
   /** Returns the bitrate of this WAV. */
   public int getBitrate() {
     return sampleRateHz * bitsPerSample * numChannels;
