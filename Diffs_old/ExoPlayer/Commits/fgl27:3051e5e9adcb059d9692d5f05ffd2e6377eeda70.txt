diff --git a/RELEASENOTES.md b/RELEASENOTES.md
index 7afe0a78cd..5279a24698 100644
--- a/RELEASENOTES.md
+++ b/RELEASENOTES.md
@@ -40,6 +40,8 @@
   ([#6153](https://github.com/google/ExoPlayer/issues/6153)).
 * Fix `DataSchemeDataSource` re-opening and range requests
   ([#6192](https://github.com/google/ExoPlayer/issues/6192)).
+* Ensure the `SilenceMediaSource` position is in range
+  ([#6229](https://github.com/google/ExoPlayer/issues/6229)).
 * Flac extension: Parse `VORBIS_COMMENT` metadata
   ([#5527](https://github.com/google/ExoPlayer/issues/5527)).
 
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/source/SilenceMediaSource.java b/library/core/src/main/java/com/google/android/exoplayer2/source/SilenceMediaSource.java
index a5b78ef3f7..c3eab68983 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/source/SilenceMediaSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/source/SilenceMediaSource.java
@@ -117,6 +117,7 @@ public long selectTracks(
         @NullableType SampleStream[] streams,
         boolean[] streamResetFlags,
         long positionUs) {
+      positionUs = constrainSeekPosition(positionUs);
       for (int i = 0; i < selections.length; i++) {
         if (streams[i] != null && (selections[i] == null || !mayRetainStreamFlags[i])) {
           sampleStreams.remove(streams[i]);
@@ -143,6 +144,7 @@ public long readDiscontinuity() {
 
     @Override
     public long seekToUs(long positionUs) {
+      positionUs = constrainSeekPosition(positionUs);
       for (int i = 0; i < sampleStreams.size(); i++) {
         ((SilenceSampleStream) sampleStreams.get(i)).seekTo(positionUs);
       }
@@ -151,7 +153,7 @@ public long seekToUs(long positionUs) {
 
     @Override
     public long getAdjustedSeekPositionUs(long positionUs, SeekParameters seekParameters) {
-      return positionUs;
+      return constrainSeekPosition(positionUs);
     }
 
     @Override
@@ -171,6 +173,10 @@ public boolean continueLoading(long positionUs) {
 
     @Override
     public void reevaluateBuffer(long positionUs) {}
+
+    private long constrainSeekPosition(long positionUs) {
+      return Util.constrainValue(positionUs, 0, durationUs);
+    }
   }
 
   private static final class SilenceSampleStream implements SampleStream {
@@ -186,7 +192,7 @@ public SilenceSampleStream(long durationUs) {
     }
 
     public void seekTo(long positionUs) {
-      positionBytes = getAudioByteCount(positionUs);
+      positionBytes = Util.constrainValue(getAudioByteCount(positionUs), 0, durationBytes);
     }
 
     @Override
