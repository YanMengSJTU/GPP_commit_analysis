diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/AdtsExtractor.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/AdtsExtractor.java
index 0b7b713912..536544f8c0 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/AdtsExtractor.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/AdtsExtractor.java
@@ -27,7 +27,6 @@
 import com.google.android.exoplayer2.util.ParsableBitArray;
 import com.google.android.exoplayer2.util.ParsableByteArray;
 import com.google.android.exoplayer2.util.Util;
-
 import java.io.IOException;
 
 /**
@@ -43,7 +42,7 @@
 
     @Override
     public Extractor[] createExtractors() {
-      return new Extractor[]{new AdtsExtractor()};
+      return new Extractor[] {new AdtsExtractor()};
     }
 
   };
@@ -63,7 +62,6 @@
   private AdtsReader reader;
   private boolean startedPacket;
 
-
   private int mMode = C.TS_STREAM_TYPE_AAC;
   private String encryptionMethod;
   private byte[] encryptionKey;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/AdtsReader.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/AdtsReader.java
index 154f446bae..7fd8b4a854 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/AdtsReader.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/AdtsReader.java
@@ -17,7 +17,6 @@
 
 import android.util.Log;
 import android.util.Pair;
-
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.extractor.DummyTrackOutput;
@@ -29,7 +28,6 @@
 import com.google.android.exoplayer2.util.MimeTypes;
 import com.google.android.exoplayer2.util.ParsableBitArray;
 import com.google.android.exoplayer2.util.ParsableByteArray;
-
 import java.util.Arrays;
 import java.util.Collections;
 
@@ -106,7 +104,7 @@ public AdtsReader(boolean exposeId3) {
 
   /**
    * @param exposeId3 True if the reader should expose ID3 information.
-   * @param language  Track language.
+   * @param language Track language.
    */
   public AdtsReader(boolean exposeId3, String language) {
     adtsScratch = new ParsableBitArray(new byte[HEADER_SIZE + CRC_SIZE]);
@@ -219,8 +217,8 @@ public void packetFinished() {
    * Continues a read from the provided {@code source} into a given {@code target}. It's assumed
    * that the data should be written into {@code target} starting from an offset of zero.
    *
-   * @param source       The source from which to read.
-   * @param target       The target into which data is to be read.
+   * @param source The source from which to read.
+   * @param target The target into which data is to be read.
    * @param targetLength The target length of the read.
    * @return Whether the target length was reached.
    */
@@ -254,13 +252,13 @@ private void setReadingId3HeaderState() {
   /**
    * Sets the state to STATE_READING_SAMPLE.
    *
-   * @param outputToUse           TrackOutput object to write the sample to
+   * @param outputToUse TrackOutput object to write the sample to
    * @param currentSampleDuration Duration of the sample to be read
-   * @param priorReadBytes        Size of prior read bytes
-   * @param sampleSize            Size of the sample
+   * @param priorReadBytes Size of prior read bytes
+   * @param sampleSize Size of the sample
    */
   private void setReadingSampleState(TrackOutput outputToUse, long currentSampleDuration,
-                                     int priorReadBytes, int sampleSize) {
+       int priorReadBytes, int sampleSize) {
     state = STATE_READING_SAMPLE;
     bytesRead = priorReadBytes;
     this.currentOutput = outputToUse;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/DefaultTsPayloadReaderFactory.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/DefaultTsPayloadReaderFactory.java
index e8ccb89fdb..1e482b503e 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/DefaultTsPayloadReaderFactory.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/DefaultTsPayloadReaderFactory.java
@@ -17,15 +17,12 @@
 
 import android.support.annotation.IntDef;
 import android.util.SparseArray;
-
 import com.google.android.exoplayer2.util.HLSEncryptInfo;
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.extractor.ts.TsPayloadReader.EsInfo;
-import com.google.android.exoplayer2.extractor.ts.TsPayloadReader.Factory;
 import com.google.android.exoplayer2.util.MimeTypes;
 import com.google.android.exoplayer2.util.ParsableByteArray;
-
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.util.ArrayList;
@@ -33,9 +30,9 @@
 import java.util.List;
 
 /**
- * Default implementation for {@link Factory}.
+ * Default implementation for {@link TsPayloadReader.Factory}.
  */
-public final class DefaultTsPayloadReaderFactory implements Factory {
+public final class DefaultTsPayloadReaderFactory implements TsPayloadReader.Factory {
 
   /**
    * Flags controlling elementary stream readers' behavior.
@@ -44,8 +41,7 @@
   @IntDef(flag = true, value = {FLAG_ALLOW_NON_IDR_KEYFRAMES, FLAG_IGNORE_AAC_STREAM,
       FLAG_IGNORE_H264_STREAM, FLAG_DETECT_ACCESS_UNITS, FLAG_IGNORE_SPLICE_INFO_STREAM,
       FLAG_OVERRIDE_CAPTION_DESCRIPTORS})
-  public @interface Flags {
-  }
+  public @interface Flags { }
 
   public static final int FLAG_ALLOW_NON_IDR_KEYFRAMES = 1;
   public static final int FLAG_IGNORE_AAC_STREAM = 1 << 1;
@@ -56,8 +52,7 @@
 
   private static final int DESCRIPTOR_TAG_CAPTION_SERVICE = 0x86;
 
-  @Flags
-  private final int flags;
+  @Flags private final int flags;
   private final List<Format> closedCaptionFormats;
 
   public DefaultTsPayloadReaderFactory() {
@@ -66,21 +61,21 @@ public DefaultTsPayloadReaderFactory() {
 
   /**
    * @param flags A combination of {@code FLAG_*} values that control the behavior of the created
-   *              readers.
+   *      readers.
    */
   public DefaultTsPayloadReaderFactory(@Flags int flags) {
     this(flags, Collections.<Format>emptyList());
   }
 
   /**
-   * @param flags                A combination of {@code FLAG_*} values that control the behavior of the created
-   *                             readers.
+   * @param flags A combination of {@code FLAG_*} values that control the behavior of the created
+   *      readers.
    * @param closedCaptionFormats {@link Format}s to be exposed by payload readers for streams with
-   *                             embedded closed captions when no caption service descriptors are provided. If
-   *                             {@link #FLAG_OVERRIDE_CAPTION_DESCRIPTORS} is set, {@code closedCaptionFormats} overrides
-   *                             any descriptor information. If not set, and {@code closedCaptionFormats} is empty, a
-   *                             closed caption track with {@link Format#accessibilityChannel} {@link Format#NO_VALUE} will
-   *                             be exposed.
+   *      embedded closed captions when no caption service descriptors are provided. If
+   *     {@link #FLAG_OVERRIDE_CAPTION_DESCRIPTORS} is set, {@code closedCaptionFormats} overrides
+   *      any descriptor information. If not set, and {@code closedCaptionFormats} is empty, a
+   *      closed caption track with {@link Format#accessibilityChannel} {@link Format#NO_VALUE} will
+   *      be exposed.
    */
   public DefaultTsPayloadReaderFactory(@Flags int flags, List<Format> closedCaptionFormats) {
     this.flags = flags;
@@ -118,7 +113,7 @@ public TsPayloadReader createPayloadReader(int streamType, EsInfo esInfo, HLSEnc
       case C.TS_STREAM_TYPE_SAMPLE_AES_H264:
         return isSet(FLAG_IGNORE_H264_STREAM) ? null
             : new PesReader(new H264Reader(buildSeiReader(esInfo),
-            isSet(FLAG_ALLOW_NON_IDR_KEYFRAMES), isSet(FLAG_DETECT_ACCESS_UNITS), streamType, hlsEncryptInfo));
+                isSet(FLAG_ALLOW_NON_IDR_KEYFRAMES), isSet(FLAG_DETECT_ACCESS_UNITS), streamType, hlsEncryptInfo));
       case TsExtractor.TS_STREAM_TYPE_H265:
         return new PesReader(new H265Reader(buildSeiReader(esInfo)));
       case TsExtractor.TS_STREAM_TYPE_SPLICE_INFO:
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/H264Reader.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/H264Reader.java
index 5d1d0b4049..267b899cf9 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/H264Reader.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/H264Reader.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer2.extractor.ts;
 
 import android.util.SparseArray;
-
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.extractor.ExtractorOutput;
@@ -29,7 +28,6 @@
 import com.google.android.exoplayer2.util.NalUnitUtil.SpsData;
 import com.google.android.exoplayer2.util.ParsableByteArray;
 import com.google.android.exoplayer2.util.ParsableNalUnitBitArray;
-
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -75,11 +73,11 @@
   private boolean bFirstSample;
 
   /**
-   * @param seiReader            An SEI reader for consuming closed caption channels.
+   * @param seiReader An SEI reader for consuming closed caption channels.
    * @param allowNonIdrKeyframes Whether to treat samples consisting of non-IDR I slices as
-   *                             synchronization samples (key-frames).
-   * @param detectAccessUnits    Whether to split the input stream into access units (samples) based on
-   *                             slice headers. Pass {@code false} if the stream contains access unit delimiters (AUDs).
+   *      synchronization samples (key-frames).
+   * @param detectAccessUnits Whether to split the input stream into access units (samples) based on
+   *      slice headers. Pass {@code false} if the stream contains access unit delimiters (AUDs).
    */
   public H264Reader(SeiReader seiReader, boolean allowNonIdrKeyframes, boolean detectAccessUnits) {
     this.seiReader = seiReader;
@@ -290,7 +288,7 @@ private void endNalUnit(int curNALType, long position, int offset, int discardPa
     private boolean sampleIsKeyframe;
 
     public SampleReader(TrackOutput output, boolean allowNonIdrKeyframes,
-                        boolean detectAccessUnits) {
+         boolean detectAccessUnits) {
       this.output = output;
       this.allowNonIdrKeyframes = allowNonIdrKeyframes;
       this.detectAccessUnits = detectAccessUnits;
@@ -327,8 +325,8 @@ public void startNalUnit(long position, int type, long pesTimeUs) {
       nalUnitStartPosition = position;
       if ((allowNonIdrKeyframes && nalUnitType == NAL_UNIT_TYPE_NON_IDR)
           || (detectAccessUnits && (nalUnitType == NAL_UNIT_TYPE_IDR
-          || nalUnitType == NAL_UNIT_TYPE_NON_IDR
-          || nalUnitType == NAL_UNIT_TYPE_PARTITION_A))) {
+              || nalUnitType == NAL_UNIT_TYPE_NON_IDR
+              || nalUnitType == NAL_UNIT_TYPE_PARTITION_A))) {
         // Store the previous header and prepare to populate the new one.
         SliceHeaderData newSliceHeader = previousSliceHeader;
         previousSliceHeader = sliceHeader;
@@ -342,9 +340,9 @@ public void startNalUnit(long position, int type, long pesTimeUs) {
     /**
      * Called to pass stream data. The data passed should not include the 3 byte start code.
      *
-     * @param data   Holds the data being passed.
+     * @param data Holds the data being passed.
      * @param offset The offset of the data in {@code data}.
-     * @param limit  The limit (exclusive) of the data in {@code data}.
+     * @param limit The limit (exclusive) of the data in {@code data}.
      */
     public void appendToNalUnit(byte[] data, int offset, int limit) {
       if (!isFilling) {
@@ -540,9 +538,9 @@ public void setSliceType(int sliceType) {
       }
 
       public void setAll(SpsData spsData, int nalRefIdc, int sliceType, int frameNum,
-                         int picParameterSetId, boolean fieldPicFlag, boolean bottomFieldFlagPresent,
-                         boolean bottomFieldFlag, boolean idrPicFlag, int idrPicId, int picOrderCntLsb,
-                         int deltaPicOrderCntBottom, int deltaPicOrderCnt0, int deltaPicOrderCnt1) {
+           int picParameterSetId, boolean fieldPicFlag, boolean bottomFieldFlagPresent,
+           boolean bottomFieldFlag, boolean idrPicFlag, int idrPicId, int picOrderCntLsb,
+           int deltaPicOrderCntBottom, int deltaPicOrderCnt0, int deltaPicOrderCnt1) {
         this.spsData = spsData;
         this.nalRefIdc = nalRefIdc;
         this.sliceType = sliceType;
@@ -570,14 +568,14 @@ private boolean isFirstVclNalUnitOfPicture(SliceHeaderData other) {
         return isComplete && (!other.isComplete || frameNum != other.frameNum
             || picParameterSetId != other.picParameterSetId || fieldPicFlag != other.fieldPicFlag
             || (bottomFieldFlagPresent && other.bottomFieldFlagPresent
-            && bottomFieldFlag != other.bottomFieldFlag)
+                && bottomFieldFlag != other.bottomFieldFlag)
             || (nalRefIdc != other.nalRefIdc && (nalRefIdc == 0 || other.nalRefIdc == 0))
             || (spsData.picOrderCountType == 0 && other.spsData.picOrderCountType == 0
-            && (picOrderCntLsb != other.picOrderCntLsb
-            || deltaPicOrderCntBottom != other.deltaPicOrderCntBottom))
+                && (picOrderCntLsb != other.picOrderCntLsb
+                    || deltaPicOrderCntBottom != other.deltaPicOrderCntBottom))
             || (spsData.picOrderCountType == 1 && other.spsData.picOrderCountType == 1
-            && (deltaPicOrderCnt0 != other.deltaPicOrderCnt0
-            || deltaPicOrderCnt1 != other.deltaPicOrderCnt1))
+                && (deltaPicOrderCnt0 != other.deltaPicOrderCnt0
+                    || deltaPicOrderCnt1 != other.deltaPicOrderCnt1))
             || idrPicFlag != other.idrPicFlag
             || (idrPicFlag && other.idrPicFlag && idrPicId != other.idrPicId));
       }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/TsExtractor.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/TsExtractor.java
index dade34ed6c..1f573c95fe 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/TsExtractor.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/TsExtractor.java
@@ -19,7 +19,6 @@
 import android.util.SparseArray;
 import android.util.SparseBooleanArray;
 import android.util.SparseIntArray;
-
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.extractor.Extractor;
 import com.google.android.exoplayer2.extractor.ExtractorInput;
@@ -38,7 +37,6 @@
 import com.google.android.exoplayer2.util.ParsableByteArray;
 import com.google.android.exoplayer2.util.TimestampAdjuster;
 import com.google.android.exoplayer2.util.Util;
-
 import java.io.IOException;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -59,7 +57,7 @@
 
     @Override
     public Extractor[] createExtractors() {
-      return new Extractor[]{new TsExtractor()};
+      return new Extractor[] {new TsExtractor()};
     }
 
   };
@@ -69,8 +67,7 @@
    */
   @Retention(RetentionPolicy.SOURCE)
   @IntDef({MODE_MULTI_PMT, MODE_SINGLE_PMT, MODE_HLS})
-  public @interface Mode {
-  }
+  public @interface Mode {}
 
   /**
    * Behave as defined in ISO/IEC 13818-1.
@@ -112,8 +109,7 @@
   private static final int BUFFER_PACKET_COUNT = 5; // Should be at least 2
   private static final int BUFFER_SIZE = TS_PACKET_SIZE * BUFFER_PACKET_COUNT;
 
-  @Mode
-  private final int mode;
+  @Mode private final int mode;
   private final List<TimestampAdjuster> timestampAdjusters;
   private final ParsableByteArray tsPacketBuffer;
   private final ParsableBitArray tsScratch;
@@ -137,17 +133,17 @@ public TsExtractor() {
 
   /**
    * @param defaultTsPayloadReaderFlags A combination of {@link DefaultTsPayloadReaderFactory}
-   *                                    {@code FLAG_*} values that control the behavior of the payload readers.
+   *     {@code FLAG_*} values that control the behavior of the payload readers.
    */
   public TsExtractor(@Flags int defaultTsPayloadReaderFlags) {
     this(MODE_SINGLE_PMT, defaultTsPayloadReaderFlags);
   }
 
   /**
-   * @param mode                        Mode for the extractor. One of {@link #MODE_MULTI_PMT}, {@link #MODE_SINGLE_PMT}
-   *                                    and {@link #MODE_HLS}.
+   * @param mode Mode for the extractor. One of {@link #MODE_MULTI_PMT}, {@link #MODE_SINGLE_PMT}
+   *      and {@link #MODE_HLS}.
    * @param defaultTsPayloadReaderFlags A combination of {@link DefaultTsPayloadReaderFactory}
-   *                                    {@code FLAG_*} values that control the behavior of the payload readers.
+   *     {@code FLAG_*} values that control the behavior of the payload readers.
    */
   public TsExtractor(@Mode int mode, @Flags int defaultTsPayloadReaderFlags) {
     this(mode, new TimestampAdjuster(0),
@@ -156,13 +152,13 @@ public TsExtractor(@Mode int mode, @Flags int defaultTsPayloadReaderFlags) {
 
 
   /**
-   * @param mode                 Mode for the extractor. One of {@link #MODE_MULTI_PMT}, {@link #MODE_SINGLE_PMT}
-   *                             and {@link #MODE_HLS}.
-   * @param timestampAdjuster    A timestamp adjuster for offsetting and scaling sample timestamps.
+   * @param mode Mode for the extractor. One of {@link #MODE_MULTI_PMT}, {@link #MODE_SINGLE_PMT}
+   *      and {@link #MODE_HLS}.
+   * @param timestampAdjuster A timestamp adjuster for offsetting and scaling sample timestamps.
    * @param payloadReaderFactory Factory for injecting a custom set of payload readers.
    */
   public TsExtractor(@Mode int mode, TimestampAdjuster timestampAdjuster,
-                     TsPayloadReader.Factory payloadReaderFactory) {
+       TsPayloadReader.Factory payloadReaderFactory) {
     this.payloadReaderFactory = Assertions.checkNotNull(payloadReaderFactory);
     this.mode = mode;
     if (mode == MODE_SINGLE_PMT || mode == MODE_HLS) {
@@ -180,7 +176,7 @@ public TsExtractor(@Mode int mode, TimestampAdjuster timestampAdjuster,
   }
 
   public TsExtractor(@Mode int mode, TimestampAdjuster timestampAdjuster,
-                     TsPayloadReader.Factory payloadReaderFactory, HLSEncryptInfo hlsEncryptInfo) {
+       TsPayloadReader.Factory payloadReaderFactory, HLSEncryptInfo hlsEncryptInfo) {
     this(mode, timestampAdjuster, payloadReaderFactory);
 
     this.hlsEncryptInfo = hlsEncryptInfo;
@@ -348,7 +344,7 @@ public PatReader() {
 
     @Override
     public void init(TimestampAdjuster timestampAdjuster, ExtractorOutput extractorOutput,
-                     TrackIdGenerator idGenerator) {
+         TrackIdGenerator idGenerator) {
       // Do nothing.
     }
 
@@ -406,7 +402,7 @@ public PmtReader(int pid) {
 
     @Override
     public void init(TimestampAdjuster timestampAdjuster, ExtractorOutput extractorOutput,
-                     TrackIdGenerator idGenerator) {
+         TrackIdGenerator idGenerator) {
       // Do nothing.
     }
 
@@ -506,7 +502,7 @@ public void consume(ParsableByteArray sectionData) {
      * Returns the stream info read from the available descriptors. Sets {@code data}'s position to
      * the end of the descriptors.
      *
-     * @param data   A buffer with its position set to the start of the first descriptor.
+     * @param data A buffer with its position set to the start of the first descriptor.
      * @param length The length of descriptors to read from the current position in {@code data}.
      * @return The stream info read from the available descriptors.
      */
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/TsPayloadReader.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/TsPayloadReader.java
index 17cf720af0..bcf0ec132d 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/TsPayloadReader.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/ts/TsPayloadReader.java
@@ -16,13 +16,11 @@
 package com.google.android.exoplayer2.extractor.ts;
 
 import android.util.SparseArray;
-
 import com.google.android.exoplayer2.extractor.ExtractorOutput;
 import com.google.android.exoplayer2.extractor.TrackOutput;
 import com.google.android.exoplayer2.util.HLSEncryptInfo;
 import com.google.android.exoplayer2.util.ParsableByteArray;
 import com.google.android.exoplayer2.util.TimestampAdjuster;
-
 import java.util.Collections;
 import java.util.List;
 
@@ -50,9 +48,9 @@
      * May return null if the stream type is not supported.
      *
      * @param streamType Stream type value as defined in the PMT entry or associated descriptors.
-     * @param esInfo     Information associated to the elementary stream provided in the PMT.
+     * @param esInfo Information associated to the elementary stream provided in the PMT.
      * @return A {@link TsPayloadReader} for the packet stream carried by the provided pid.
-     * {@code null} if the stream is not supported.
+     *     {@code null} if the stream is not supported.
      */
     TsPayloadReader createPayloadReader(int streamType, EsInfo esInfo, HLSEncryptInfo hlsEncryptInfo);
 
@@ -69,14 +67,14 @@
     public final byte[] descriptorBytes;
 
     /**
-     * @param streamType       The type of the stream as defined by the
-     *                         {@link TsExtractor}{@code .TS_STREAM_TYPE_*}.
-     * @param language         The language of the stream, as defined by ISO/IEC 13818-1, section 2.6.18.
+     * @param streamType The type of the stream as defined by the
+     *      {@link TsExtractor}{@code .TS_STREAM_TYPE_*}.
+     * @param language The language of the stream, as defined by ISO/IEC 13818-1, section 2.6.18.
      * @param dvbSubtitleInfos Information about DVB subtitles associated to the stream.
-     * @param descriptorBytes  The descriptor bytes associated to the stream.
+     * @param descriptorBytes The descriptor bytes associated to the stream.
      */
     public EsInfo(int streamType, String language, List<DvbSubtitleInfo> dvbSubtitleInfos,
-                  byte[] descriptorBytes) {
+         byte[] descriptorBytes) {
       this.streamType = streamType;
       this.language = language;
       this.dvbSubtitleInfos = dvbSubtitleInfos == null ? Collections.<DvbSubtitleInfo>emptyList()
@@ -96,8 +94,8 @@ public EsInfo(int streamType, String language, List<DvbSubtitleInfo> dvbSubtitle
     public final byte[] initializationData;
 
     /**
-     * @param language           The ISO 639-2 three character language.
-     * @param type               The subtitling type.
+     * @param language The ISO 639-2 three character language.
+     * @param type The subtitling type.
      * @param initializationData The composition and ancillary page ids.
      */
     public DvbSubtitleInfo(String language, int type, byte[] initializationData) {
@@ -154,12 +152,12 @@ public int getTrackId() {
 
     /**
      * Returns the last generated format id, with the format {@code "programNumber/trackId"}. If no
-     * {@code programNumber} was provided, the {@code trackId} alone is used as format id. Must be
+     *    {@code programNumber} was provided, the {@code trackId} alone is used as format id. Must be
      * called after the first {@link #generateNewId()} call.
      *
      * @return The last generated format id, with the format {@code "programNumber/trackId"}. If no
-     * {@code programNumber} was provided, the {@code trackId} alone is used as
-     * format id.
+     *     {@code programNumber} was provided, the {@code trackId} alone is used as
+     *     format id.
      */
     public String getFormatId() {
       maybeThrowUninitializedError();
@@ -178,12 +176,12 @@ private void maybeThrowUninitializedError() {
    * Initializes the payload reader.
    *
    * @param timestampAdjuster A timestamp adjuster for offsetting and scaling sample timestamps.
-   * @param extractorOutput   The {@link ExtractorOutput} that receives the extracted data.
-   * @param idGenerator       A {@link PesReader.TrackIdGenerator} that generates unique track ids for the
-   *                          {@link TrackOutput}s.
+   * @param extractorOutput The {@link ExtractorOutput} that receives the extracted data.
+   * @param idGenerator A {@link PesReader.TrackIdGenerator} that generates unique track ids for the
+   *      {@link TrackOutput}s.
    */
   void init(TimestampAdjuster timestampAdjuster, ExtractorOutput extractorOutput,
-            TrackIdGenerator idGenerator);
+       TrackIdGenerator idGenerator);
 
   /**
    * Notifies the reader that a seek has occurred.
@@ -197,7 +195,7 @@ void init(TimestampAdjuster timestampAdjuster, ExtractorOutput extractorOutput,
   /**
    * Consumes the payload of a TS packet.
    *
-   * @param data                      The TS packet. The position will be set to the start of the payload.
+   * @param data The TS packet. The position will be set to the start of the payload.
    * @param payloadUnitStartIndicator Whether payloadUnitStartIndicator was set on the TS packet.
    */
   void consume(ParsableByteArray data, boolean payloadUnitStartIndicator);
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
index 0613328de6..cb71b5b799 100644
--- a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsChunkSource.java
@@ -17,7 +17,6 @@
 
 import android.net.Uri;
 import android.os.SystemClock;
-
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.source.BehindLiveWindowException;
@@ -36,7 +35,6 @@
 import com.google.android.exoplayer2.util.TimestampAdjuster;
 import com.google.android.exoplayer2.util.UriUtil;
 import com.google.android.exoplayer2.util.Util;
-
 import java.io.IOException;
 import java.math.BigInteger;
 import java.util.Arrays;
@@ -107,19 +105,19 @@ public void clear() {
   private TrackSelection trackSelection;
 
   /**
-   * @param playlistTracker           The {@link HlsPlaylistTracker} from which to obtain media playlists.
-   * @param variants                  The available variants.
-   * @param dataSourceFactory         An {@link HlsDataSourceFactory} to create {@link DataSource}s for the
-   *                                  chunks.
+   * @param playlistTracker The {@link HlsPlaylistTracker} from which to obtain media playlists.
+   * @param variants The available variants.
+   * @param dataSourceFactory An {@link HlsDataSourceFactory} to create {@link DataSource}s for the
+   *       chunks.
    * @param timestampAdjusterProvider A provider of {@link TimestampAdjuster} instances. If
-   *                                  multiple {@link HlsChunkSource}s are used for a single playback, they should all share the
-   *                                  same provider.
-   * @param muxedCaptionFormats       List of muxed caption {@link Format}s. Null if no closed caption
-   *                                  information is available in the master playlist.
+   *      multiple {@link HlsChunkSource}s are used for a single playback, they should all share the
+   *      same provider.
+   * @param muxedCaptionFormats List of muxed caption {@link Format}s. Null if no closed caption
+   *      information is available in the master playlist.
    */
   public HlsChunkSource(HlsPlaylistTracker playlistTracker, HlsUrl[] variants,
-                        HlsDataSourceFactory dataSourceFactory, TimestampAdjusterProvider timestampAdjusterProvider,
-                        List<Format> muxedCaptionFormats) {
+       HlsDataSourceFactory dataSourceFactory, TimestampAdjusterProvider timestampAdjusterProvider,
+       List<Format> muxedCaptionFormats) {
     this.playlistTracker = playlistTracker;
     this.variants = variants;
     this.timestampAdjusterProvider = timestampAdjusterProvider;
@@ -178,7 +176,7 @@ public void reset() {
    * Sets whether this chunk source is responsible for initializing timestamp adjusters.
    *
    * @param isTimestampMaster True if this chunk source is responsible for initializing timestamp
-   *                          adjusters.
+   *      adjusters.
    */
   public void setIsTimestampMaster(boolean isTimestampMaster) {
     this.isTimestampMaster = isTimestampMaster;
@@ -192,11 +190,11 @@ public void setIsTimestampMaster(boolean isTimestampMaster) {
    * the end of the stream has not been reached, {@link HlsChunkHolder#playlist} is set to
    * contain the {@link HlsUrl} that refers to the playlist that needs refreshing.
    *
-   * @param previous           The most recently loaded media chunk.
+   * @param previous The most recently loaded media chunk.
    * @param playbackPositionUs The current playback position. If {@code previous} is null then this
-   *                           parameter is the position from which playback is expected to start (or restart) and hence
-   *                           should be interpreted as a seek position.
-   * @param out                A holder to populate.
+   *      parameter is the position from which playback is expected to start (or restart) and hence
+   *      should be interpreted as a seek position.
+   * @param out A holder to populate.
    */
   public void getNextChunk(HlsMediaChunk previous, long playbackPositionUs, HlsChunkHolder out) {
     int oldVariantIndex = previous == null ? C.INDEX_UNSET
@@ -329,9 +327,9 @@ public void onChunkLoadCompleted(Chunk chunk) {
    * Called when the {@link HlsSampleStreamWrapper} encounters an error loading a chunk obtained
    * from this source.
    *
-   * @param chunk      The chunk whose load encountered the error.
+   * @param chunk The chunk whose load encountered the error.
    * @param cancelable Whether the load can be canceled.
-   * @param error      The error.
+   * @param error The error.
    * @return Whether the load should be canceled.
    */
   public boolean onChunkLoadError(Chunk chunk, boolean cancelable, IOException error) {
@@ -342,7 +340,7 @@ public boolean onChunkLoadError(Chunk chunk, boolean cancelable, IOException err
   /**
    * Called when a playlist is blacklisted.
    *
-   * @param url         The url that references the blacklisted playlist.
+   * @param url The url that references the blacklisted playlist.
    * @param blacklistMs The amount of milliseconds for which the playlist was blacklisted.
    */
   public void onPlaylistBlacklisted(HlsUrl url, long blacklistMs) {
@@ -358,7 +356,7 @@ public void onPlaylistBlacklisted(HlsUrl url, long blacklistMs) {
   // Private methods.
 
   private EncryptionKeyChunk newEncryptionKeyChunk(Uri keyUri, String iv, int variantIndex,
-                                                   int trackSelectionReason, Object trackSelectionData) {
+       int trackSelectionReason, Object trackSelectionData) {
     DataSpec dataSpec = new DataSpec(keyUri, 0, C.LENGTH_UNSET, null, DataSpec.FLAG_ALLOW_GZIP);
     return new EncryptionKeyChunk(encryptionDataSource, dataSpec, variants[variantIndex].format,
         trackSelectionReason, trackSelectionData, scratchSpace, iv);
@@ -446,7 +444,7 @@ public Object getSelectionData() {
     private byte[] result;
 
     public EncryptionKeyChunk(DataSource dataSource, DataSpec dataSpec, Format trackFormat,
-                              int trackSelectionReason, Object trackSelectionData, byte[] scratchSpace, String iv) {
+         int trackSelectionReason, Object trackSelectionData, byte[] scratchSpace, String iv) {
       super(dataSource, dataSpec, C.DATA_TYPE_DRM, trackFormat, trackSelectionReason,
           trackSelectionData, scratchSpace);
       this.iv = iv;
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaChunk.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaChunk.java
index ea5418e770..cad5ee0c00 100644
--- a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaChunk.java
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/HlsMediaChunk.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer2.source.hls;
 
 import android.text.TextUtils;
-
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.extractor.DefaultExtractorInput;
@@ -40,7 +39,6 @@
 import com.google.android.exoplayer2.util.ParsableByteArray;
 import com.google.android.exoplayer2.util.TimestampAdjuster;
 import com.google.android.exoplayer2.util.Util;
-
 import java.io.IOException;
 import java.util.Collections;
 import java.util.List;
@@ -109,30 +107,30 @@
 
 
   /**
-   * @param dataSource                  The source from which the data should be loaded.
-   * @param dataSpec                    Defines the data to be loaded.
-   * @param initDataSpec                Defines the initialization data to be fed to new extractors. May be null.
-   * @param hlsUrl                      The url of the playlist from which this chunk was obtained.
-   * @param muxedCaptionFormats         List of muxed caption {@link Format}s. Null if no closed caption
-   *                                    information is available in the master playlist.
-   * @param trackSelectionReason        See {@link #trackSelectionReason}.
-   * @param trackSelectionData          See {@link #trackSelectionData}.
-   * @param startTimeUs                 The start time of the chunk in microseconds.
-   * @param endTimeUs                   The end time of the chunk in microseconds.
-   * @param chunkIndex                  The media sequence number of the chunk.
+   * @param dataSource The source from which the data should be loaded.
+   * @param dataSpec Defines the data to be loaded.
+   * @param initDataSpec Defines the initialization data to be fed to new extractors. May be null.
+   * @param hlsUrl The url of the playlist from which this chunk was obtained.
+   * @param muxedCaptionFormats List of muxed caption {@link Format}s. Null if no closed caption
+   *      information is available in the master playlist.
+   * @param trackSelectionReason See {@link #trackSelectionReason}.
+   * @param trackSelectionData See {@link #trackSelectionData}.
+   * @param startTimeUs The start time of the chunk in microseconds.
+   * @param endTimeUs The end time of the chunk in microseconds.
+   * @param chunkIndex The media sequence number of the chunk.
    * @param discontinuitySequenceNumber The discontinuity sequence number of the chunk.
-   * @param isMasterTimestampSource     True if the chunk can initialize the timestamp adjuster.
-   * @param timestampAdjuster           Adjuster corresponding to the provided discontinuity sequence number.
-   * @param previousChunk               The {@link HlsMediaChunk} that preceded this one. May be null.
-   * @param encryptionKey               For AES encryption chunks, the encryption key.
-   * @param encryptionIv                For AES encryption chunks, the encryption initialization vector.
+   * @param isMasterTimestampSource True if the chunk can initialize the timestamp adjuster.
+   * @param timestampAdjuster Adjuster corresponding to the provided discontinuity sequence number.
+   * @param previousChunk The {@link HlsMediaChunk} that preceded this one. May be null.
+   * @param encryptionKey For AES encryption chunks, the encryption key.
+   * @param encryptionIv For AES encryption chunks, the encryption initialization vector.
    */
   public HlsMediaChunk(DataSource dataSource, DataSpec dataSpec, DataSpec initDataSpec,
-                       HlsUrl hlsUrl, List<Format> muxedCaptionFormats, int trackSelectionReason,
-                       Object trackSelectionData, long startTimeUs, long endTimeUs, int chunkIndex,
-                       int discontinuitySequenceNumber, boolean isMasterTimestampSource,
-                       TimestampAdjuster timestampAdjuster, HlsMediaChunk previousChunk, byte[] encryptionKey,
-                       byte[] encryptionIv, HLSEncryptInfo hlsEncryptInfo) {
+       HlsUrl hlsUrl, List<Format> muxedCaptionFormats, int trackSelectionReason,
+       Object trackSelectionData, long startTimeUs, long endTimeUs, int chunkIndex,
+       int discontinuitySequenceNumber, boolean isMasterTimestampSource,
+       TimestampAdjuster timestampAdjuster, HlsMediaChunk previousChunk, byte[] encryptionKey,
+       byte[] encryptionIv, HLSEncryptInfo hlsEncryptInfo) {
     super(buildDataSource(dataSource, encryptionKey, encryptionIv, hlsEncryptInfo), dataSpec, hlsUrl.format,
         trackSelectionReason, trackSelectionData, startTimeUs, endTimeUs, chunkIndex);
     this.discontinuitySequenceNumber = discontinuitySequenceNumber;
@@ -296,7 +294,7 @@ private void loadMedia() throws IOException, InterruptedException {
    *
    * @param input The {@link ExtractorInput} to obtain the PRIV frame from.
    * @return The parsed, adjusted timestamp in microseconds
-   * @throws IOException          If an error occurred peeking from the input.
+   * @throws IOException If an error occurred peeking from the input.
    * @throws InterruptedException If the thread was interrupted.
    */
   private long peekId3PrivTimestamp(ExtractorInput input) throws IOException, InterruptedException {
@@ -346,7 +344,7 @@ private long peekId3PrivTimestamp(ExtractorInput input) throws IOException, Inte
    * order to decrypt the loaded data. Else returns the original.
    */
   private static DataSource buildDataSource(DataSource dataSource, byte[] encryptionKey,
-                                            byte[] encryptionIv, HLSEncryptInfo hlsEncryptInfo) {
+       byte[] encryptionIv, HLSEncryptInfo hlsEncryptInfo) {
 
     if (hlsEncryptInfo.encryptionMethod != null && hlsEncryptInfo.encryptionMethod.equals("AES-128"))
       return new Aes128DataSource(dataSource, encryptionKey, encryptionIv);
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsMediaPlaylist.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsMediaPlaylist.java
index a362a41058..6d7b058f6c 100644
--- a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsMediaPlaylist.java
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsMediaPlaylist.java
@@ -17,10 +17,8 @@
 
 import android.support.annotation.IntDef;
 import android.support.annotation.NonNull;
-
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.util.HLSEncryptInfo;
-
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.util.Collections;
@@ -48,15 +46,13 @@
 
     public final HLSEncryptInfo hlsEncryptInfo;
 
-
     public Segment(String uri, long byterangeOffset, long byterangeLength) {
       this(uri, 0, -1, C.TIME_UNSET, null, byterangeOffset, byterangeLength);
     }
 
     public Segment(String uri, long durationUs, int relativeDiscontinuitySequence,
-                   long relativeStartTimeUs, HLSEncryptInfo hlsEncryptInfo,
-                   long byterangeOffset, long byterangeLength) {
-
+        long relativeStartTimeUs, HLSEncryptInfo hlsEncryptInfo,
+        long byterangeOffset, long byterangeLength) {
       this.url = uri;
       this.durationUs = durationUs;
       this.relativeDiscontinuitySequence = relativeDiscontinuitySequence;
@@ -83,15 +79,13 @@ public int compareTo(@NonNull Long relativeStartTimeUs) {
    */
   @Retention(RetentionPolicy.SOURCE)
   @IntDef({PLAYLIST_TYPE_UNKNOWN, PLAYLIST_TYPE_VOD, PLAYLIST_TYPE_EVENT})
-  public @interface PlaylistType {
-  }
+  public @interface PlaylistType { }
 
   public static final int PLAYLIST_TYPE_UNKNOWN = 0;
   public static final int PLAYLIST_TYPE_VOD = 1;
   public static final int PLAYLIST_TYPE_EVENT = 2;
 
-  @PlaylistType
-  public final int playlistType;
+  @PlaylistType public final int playlistType;
   public final long startOffsetUs;
   public final long startTimeUs;
   public final boolean hasDiscontinuitySequence;
@@ -107,10 +101,10 @@ public int compareTo(@NonNull Long relativeStartTimeUs) {
   public final long durationUs;
 
   public HlsMediaPlaylist(@PlaylistType int playlistType, String baseUri, long startOffsetUs,
-                          long startTimeUs, boolean hasDiscontinuitySequence, int discontinuitySequence,
-                          int mediaSequence, int version, long targetDurationUs, boolean hasEndTag,
-                          boolean hasProgramDateTime, Segment initializationSegment, List<Segment> segments,
-                          List<String> dateRanges) {
+       long startTimeUs, boolean hasDiscontinuitySequence, int discontinuitySequence,
+       int mediaSequence, int version, long targetDurationUs, boolean hasEndTag,
+       boolean hasProgramDateTime, Segment initializationSegment, List<Segment> segments,
+       List<String> dateRanges) {
     super(baseUri);
     this.playlistType = playlistType;
     this.startTimeUs = startTimeUs;
@@ -163,7 +157,7 @@ public long getEndTimeUs() {
    * and {@code hasDiscontinuitySequence} values. The first two are set to the specified values,
    * {@code hasDiscontinuitySequence} is set to true.
    *
-   * @param startTimeUs           The start time for the returned playlist.
+   * @param startTimeUs The start time for the returned playlist.
    * @param discontinuitySequence The discontinuity sequence for the returned playlist.
    * @return The playlist.
    */
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsPlaylistParser.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsPlaylistParser.java
index 929db90495..6917aebdcd 100644
--- a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsPlaylistParser.java
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/playlist/HlsPlaylistParser.java
@@ -16,7 +16,6 @@
 package com.google.android.exoplayer2.source.hls.playlist;
 
 import android.net.Uri;
-
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.ParserException;
@@ -26,7 +25,6 @@
 import com.google.android.exoplayer2.util.HLSEncryptInfo;
 import com.google.android.exoplayer2.util.MimeTypes;
 import com.google.android.exoplayer2.util.Util;
-
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStream;
@@ -295,7 +293,6 @@ private static HlsMediaPlaylist parseMediaPlaylist(LineIterator iterator, String
     String encryptionKeyUri = null;
     String encryptionIV = null;
     String encryptionMethod = null;
-
     HLSEncryptInfo hlsEncryptInfo;
 
     String line;
