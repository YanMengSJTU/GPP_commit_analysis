diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/FragmentedMp4Extractor.java b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/FragmentedMp4Extractor.java
index a976f2e8aa..6166eb398b 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/mp4/FragmentedMp4Extractor.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/mp4/FragmentedMp4Extractor.java
@@ -154,8 +154,9 @@ public boolean sniff(ExtractorInput input) throws IOException, InterruptedExcept
   public void init(ExtractorOutput output) {
     extractorOutput = output;
     if (sideloadedTrack != null) {
-      trackBundles.put(0, new TrackBundle(sideloadedTrack, new TrackFragment(), output.track(0),
-          new DefaultSampleValues(0, 0, 0, 0)));
+      TrackBundle bundle = new TrackBundle(output.track(0));
+      bundle.init(sideloadedTrack, new DefaultSampleValues(0, 0, 0, 0));
+      trackBundles.put(0, bundle);
       extractorOutput.endTracks();
     }
   }
@@ -323,7 +324,7 @@ private void onMoovContainerAtomRead(ContainerAtom moov) {
       extractorOutput.drmInitData(drmInitData);
     }
 
-    // Read declaration of Track Fragments in the Moov box.
+    // Read declaration of track fragments in the Moov box.
     ContainerAtom mvex = moov.getContainerAtomOfType(Atom.TYPE_mvex);
     SparseArray<DefaultSampleValues> defaultSampleValuesArray = new SparseArray<>();
     int mvexChildrenSize = mvex.leafChildren.size();
@@ -335,24 +336,35 @@ private void onMoovContainerAtomRead(ContainerAtom moov) {
       }
     }
 
-    // Construction of Tracks and TrackOutputs.
-    trackBundles.clear();
+    // Construction of tracks.
+    SparseArray<Track> tracks = new SparseArray<>();
     int moovContainerChildrenSize = moov.containerChildren.size();
-    int trackBundlesSize = 0;
     for (int i = 0; i < moovContainerChildrenSize; i++) {
       Atom.ContainerAtom atom = moov.containerChildren.get(i);
       if (atom.type == Atom.TYPE_trak) {
         Track track = AtomParsers.parseTrak(atom, moov.getLeafAtomOfType(Atom.TYPE_mvhd), false);
         if (track != null) {
-          DefaultSampleValues defaultSampleValues = defaultSampleValuesArray.get(track.id);
-          TrackBundle bundle = new TrackBundle(track, new TrackFragment(),
-              extractorOutput.track(trackBundlesSize++), defaultSampleValues);
-          bundle.output.format(track.mediaFormat);
-          trackBundles.put(track.id, bundle);
+          tracks.put(track.id, track);
         }
       }
     }
-    extractorOutput.endTracks();
+    int trackCount = tracks.size();
+
+    if (trackBundles.size() == 0) {
+      // We need to create the track bundles.
+      for (int i = 0; i < trackCount; i++) {
+        trackBundles.put(tracks.valueAt(i).id, new TrackBundle(extractorOutput.track(i)));
+      }
+      extractorOutput.endTracks();
+    } else {
+      Assertions.checkState(trackBundles.size() == trackCount);
+    }
+
+    // Initialization of tracks and default sample values.
+    for (int i = 0; i < trackCount; i++) {
+      Track track = tracks.valueAt(i);
+      trackBundles.get(track.id).init(track, defaultSampleValuesArray.get(track.id));
+    }
   }
 
   private void onMoofContainerAtomRead(ContainerAtom moof) throws ParserException {
@@ -948,18 +960,24 @@ private static boolean shouldParseContainerAtom(int atom) {
    */
   private static final class TrackBundle {
 
-    public final Track track;
     public final TrackFragment fragment;
     public final TrackOutput output;
-    public final DefaultSampleValues defaultSampleValues;
+
+    public Track track;
+    public DefaultSampleValues defaultSampleValues;
     public int currentSampleIndex;
 
-    public TrackBundle(Track track, TrackFragment fragment, TrackOutput output,
-        DefaultSampleValues defaultSampleValues) {
+    public TrackBundle(TrackOutput output) {
+      fragment = new TrackFragment();
+      this.output = output;
+    }
+
+    public void init(Track track, DefaultSampleValues defaultSampleValues) {
       this.track = Assertions.checkNotNull(track);
-      this.fragment = Assertions.checkNotNull(fragment);
-      this.output = Assertions.checkNotNull(output);
       this.defaultSampleValues = Assertions.checkNotNull(defaultSampleValues);
+      output.format(track.mediaFormat);
+      fragment.reset();
+      currentSampleIndex = 0;
     }
 
   }
