diff --git a/extensions/rtmp/src/main/java/com/google/android/exoplayer2/ext/rtmp/RtmpDataSource.java b/extensions/rtmp/src/main/java/com/google/android/exoplayer2/ext/rtmp/RtmpDataSource.java
index 7b31aa780a..826765b227 100644
--- a/extensions/rtmp/src/main/java/com/google/android/exoplayer2/ext/rtmp/RtmpDataSource.java
+++ b/extensions/rtmp/src/main/java/com/google/android/exoplayer2/ext/rtmp/RtmpDataSource.java
@@ -88,6 +88,18 @@ public int read(byte[] buffer, int offset, int readLength) throws IOException {
     return bytesRead;
   }
 
+  @Override
+  public int read(byte[] buffer, int offset, int readLength, boolean []isMarker) throws IOException {
+    int bytesRead = rtmpClient.read(buffer, offset, readLength, isMarker);
+    if (bytesRead == -1) {
+      return C.RESULT_END_OF_INPUT;
+    }
+    if (listener != null) {
+      listener.onBytesTransferred(this, bytesRead);
+    }
+    return bytesRead;
+  }
+
   @Override
   public void close() {
     if (uri != null) {
@@ -107,4 +119,9 @@ public Uri getUri() {
     return uri;
   }
 
+  @Override
+  public void markerToastDisplay () {
+    rtmpClient.markerToastDisplay();
+  }
+
 }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/DefaultExtractorInput.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/DefaultExtractorInput.java
index c3f6304091..e7fdf0d7c7 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/DefaultExtractorInput.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/DefaultExtractorInput.java
@@ -81,6 +81,28 @@ public void readFully(byte[] target, int offset, int length)
     readFully(target, offset, length, false);
   }
 
+  @Override
+  public boolean readFully(byte[] target, int offset, int length, boolean allowEndOfInput, boolean []isMarker)
+          throws IOException, InterruptedException {
+    int bytesRead = readFromPeekBuffer(target, offset, length);
+    while (bytesRead < length && bytesRead != C.RESULT_END_OF_INPUT) {
+      bytesRead = readFromDataSource(target, offset, length, bytesRead, allowEndOfInput, isMarker);
+    }
+    commitBytesRead(bytesRead);
+    return bytesRead != C.RESULT_END_OF_INPUT;
+  }
+
+  @Override
+  public void readFully(byte[] target, int offset, int length, boolean []isMarker)
+          throws IOException, InterruptedException {
+    readFully(target, offset, length, false, isMarker);
+  }
+
+  @Override
+  public void markerToastDisplay () {
+    dataSource.markerToastDisplay();
+  }
+
   @Override
   public int skip(int length) throws IOException, InterruptedException {
     int bytesSkipped = skipFromPeekBuffer(length);
@@ -267,6 +289,21 @@ private int readFromDataSource(byte[] target, int offset, int length, int bytesA
     return bytesAlreadyRead + bytesRead;
   }
 
+  private int readFromDataSource(byte[] target, int offset, int length, int bytesAlreadyRead,
+                                 boolean allowEndOfInput, boolean [] isMarker) throws InterruptedException, IOException {
+    if (Thread.interrupted()) {
+      throw new InterruptedException();
+    }
+    int bytesRead = dataSource.read(target, offset + bytesAlreadyRead, length - bytesAlreadyRead, isMarker);
+    if (bytesRead == C.RESULT_END_OF_INPUT) {
+      if (bytesAlreadyRead == 0 && allowEndOfInput) {
+        return C.RESULT_END_OF_INPUT;
+      }
+      throw new EOFException();
+    }
+    return bytesAlreadyRead + bytesRead;
+  }
+
   /**
    * Advances the position by the specified number of bytes read.
    *
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/DummyTrackOutput.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/DummyTrackOutput.java
index c023b0de95..7b55836b0e 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/DummyTrackOutput.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/DummyTrackOutput.java
@@ -49,6 +49,11 @@ public void sampleData(ParsableByteArray data, int length) {
     data.skipBytes(length);
   }
 
+  @Override
+  public void sampleData(ExtractorInput input, ParsableByteArray data, int length, boolean isMarker) {
+    data.skipBytes(length);
+  }
+
   @Override
   public void sampleMetadata(long timeUs, @C.BufferFlags int flags, int size, int offset,
       CryptoData cryptoData) {
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/ExtractorInput.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/ExtractorInput.java
index 45650c45fa..a7d6022897 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/ExtractorInput.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/ExtractorInput.java
@@ -66,6 +66,9 @@
   boolean readFully(byte[] target, int offset, int length, boolean allowEndOfInput)
       throws IOException, InterruptedException;
 
+  boolean readFully(byte[] target, int offset, int length, boolean allowEndOfInput, boolean[]isMakrer)
+          throws IOException, InterruptedException;
+
   /**
    * Equivalent to {@code readFully(target, offset, length, false)}.
    *
@@ -77,6 +80,9 @@ boolean readFully(byte[] target, int offset, int length, boolean allowEndOfInput
    * @throws InterruptedException If the thread is interrupted.
    */
   void readFully(byte[] target, int offset, int length) throws IOException, InterruptedException;
+  void readFully(byte[] target, int offset, int length, boolean[] isMarker) throws IOException, InterruptedException;
+
+  void markerToastDisplay () throws IOException;
 
   /**
    * Like {@link #read(byte[], int, int)}, except the data is skipped instead of read.
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/TrackOutput.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/TrackOutput.java
index 6a8cef6b64..f17fb71457 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/TrackOutput.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/TrackOutput.java
@@ -123,6 +123,14 @@ int sampleData(ExtractorInput input, int length, boolean allowEndOfInput)
    */
   void sampleData(ParsableByteArray data, int length);
 
+  /**
+   * Called to write sample data to the output.
+   *
+   * @param data A {@link ParsableByteArray} from which to read the sample data.
+   * @param length The number of bytes to read.
+   */
+  void sampleData(ExtractorInput input, ParsableByteArray data, int length, boolean isMarker);
+
   /**
    * Called when metadata associated with a sample has been extracted from the stream.
    * <p>
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/AudioTagPayloadReader.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/AudioTagPayloadReader.java
index ec5ad88aeb..40cd7c67b3 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/AudioTagPayloadReader.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/AudioTagPayloadReader.java
@@ -19,6 +19,7 @@
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.ParserException;
+import com.google.android.exoplayer2.extractor.ExtractorInput;
 import com.google.android.exoplayer2.extractor.TrackOutput;
 import com.google.android.exoplayer2.util.CodecSpecificDataUtil;
 import com.google.android.exoplayer2.util.MimeTypes;
@@ -112,4 +113,31 @@ protected void parsePayload(ParsableByteArray data, long timeUs) throws ParserEx
     }
   }
 
+  @Override
+  protected void parsePayload(ExtractorInput input, ParsableByteArray data, long timeUs, boolean isMarker) throws ParserException {
+    if (audioFormat == AUDIO_FORMAT_MP3) {
+      int sampleSize = data.bytesLeft();
+      output.sampleData(data, sampleSize);
+      output.sampleMetadata(timeUs, C.BUFFER_FLAG_KEY_FRAME, sampleSize, 0, null);
+    } else {
+      int packetType = data.readUnsignedByte();
+      if (packetType == AAC_PACKET_TYPE_SEQUENCE_HEADER && !hasOutputFormat) {
+        // Parse the sequence header.
+        byte[] audioSpecificConfig = new byte[data.bytesLeft()];
+        data.readBytes(audioSpecificConfig, 0, audioSpecificConfig.length);
+        Pair<Integer, Integer> audioParams = CodecSpecificDataUtil.parseAacAudioSpecificConfig(
+                audioSpecificConfig);
+        Format format = Format.createAudioSampleFormat(null, MimeTypes.AUDIO_AAC, null,
+                Format.NO_VALUE, Format.NO_VALUE, audioParams.second, audioParams.first,
+                Collections.singletonList(audioSpecificConfig), null, 0, null);
+        output.format(format);
+        hasOutputFormat = true;
+      } else if (audioFormat != AUDIO_FORMAT_AAC || packetType == AAC_PACKET_TYPE_AAC_RAW) {
+        int sampleSize = data.bytesLeft();
+        output.sampleData(input, data, sampleSize, isMarker);
+        output.sampleMetadata(timeUs, C.BUFFER_FLAG_KEY_FRAME, sampleSize, 0, null);
+      }
+    }
+  }
+
 }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/FlvExtractor.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/FlvExtractor.java
index 2d921e4af9..f536ff18cb 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/FlvExtractor.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/FlvExtractor.java
@@ -91,6 +91,8 @@
   AudioTagPayloadReader audioReader;
   VideoTagPayloadReader videoReader;
 
+  boolean []isMarker = new boolean [1];
+
   public FlvExtractor() {
     scratch = new ParsableByteArray(4);
     headerBuffer = new ParsableByteArray(FLV_HEADER_SIZE);
@@ -237,7 +239,9 @@ private void skipToTagHeader(ExtractorInput input) throws IOException, Interrupt
    * @throws InterruptedException If the thread was interrupted.
    */
   private boolean readTagHeader(ExtractorInput input) throws IOException, InterruptedException {
-    if (!input.readFully(tagHeaderBuffer.data, 0, FLV_TAG_HEADER_SIZE, true)) {
+
+    isMarker[0] = false;
+    if (!input.readFully(tagHeaderBuffer.data, 0, FLV_TAG_HEADER_SIZE, true, isMarker)) {
       // We've reached the end of the stream.
       return false;
     }
@@ -264,10 +268,24 @@ private boolean readTagData(ExtractorInput input) throws IOException, Interrupte
     boolean wasConsumed = true;
     if (tagType == TAG_TYPE_AUDIO && audioReader != null) {
       ensureReadyForMediaOutput();
-      audioReader.consume(prepareTagData(input), mediaTagTimestampOffsetUs + tagTimestampUs);
+      audioReader.consume(input, prepareTagData(input), mediaTagTimestampOffsetUs + tagTimestampUs,
+              isMarker[0]);
+      isMarker[0] = false;
+//      if (isMarker[0] == true) {
+//        Log.i ("readTagData:", "tagType: AUDIO, invoking toast marker");
+//        input.markerToastDisplay();
+//        isMarker[0] = false;
+//      }
     } else if (tagType == TAG_TYPE_VIDEO && videoReader != null) {
       ensureReadyForMediaOutput();
-      videoReader.consume(prepareTagData(input), mediaTagTimestampOffsetUs + tagTimestampUs);
+      videoReader.consume(input, prepareTagData(input), mediaTagTimestampOffsetUs + tagTimestampUs,
+              isMarker[0]);
+      isMarker[0] = false;
+//      if (isMarker[0] == true) {
+//        Log.i ("readTagData:", "tagType: VIDEO, invoking toast marker");
+//        isMarker[0] = false;
+//        input.markerToastDisplay();
+//      }
     } else if (tagType == TAG_TYPE_SCRIPT_DATA && !outputSeekMap) {
       metadataReader.consume(prepareTagData(input), tagTimestampUs);
       long durationUs = metadataReader.getDurationUs();
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/ScriptTagPayloadReader.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/ScriptTagPayloadReader.java
index 2dec85ffcc..c91730a47d 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/ScriptTagPayloadReader.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/ScriptTagPayloadReader.java
@@ -17,6 +17,7 @@
 
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.ParserException;
+import com.google.android.exoplayer2.extractor.ExtractorInput;
 import com.google.android.exoplayer2.util.ParsableByteArray;
 import java.util.ArrayList;
 import java.util.Date;
@@ -89,6 +90,33 @@ protected void parsePayload(ParsableByteArray data, long timeUs) throws ParserEx
     }
   }
 
+  @Override
+  protected void parsePayload(ExtractorInput input, ParsableByteArray data, long timeUs, boolean isMarker) throws ParserException {
+    int nameType = readAmfType(data);
+    if (nameType != AMF_TYPE_STRING) {
+      // Should never happen.
+      throw new ParserException();
+    }
+    String name = readAmfString(data);
+    if (!NAME_METADATA.equals(name)) {
+      // We're only interested in metadata.
+      return;
+    }
+    int type = readAmfType(data);
+    if (type != AMF_TYPE_ECMA_ARRAY) {
+      // We're not interested in this metadata.
+      return;
+    }
+    // Set the duration to the value contained in the metadata, if present.
+    Map<String, Object> metadata = readAmfEcmaArray(data);
+    if (metadata.containsKey(KEY_DURATION)) {
+      double durationSeconds = (double) metadata.get(KEY_DURATION);
+      if (durationSeconds > 0.0) {
+        durationUs = (long) (durationSeconds * C.MICROS_PER_SECOND);
+      }
+    }
+  }
+
   private static int readAmfType(ParsableByteArray data) {
     return data.readUnsignedByte();
   }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/TagPayloadReader.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/TagPayloadReader.java
index e8652d653f..ee63d90571 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/TagPayloadReader.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/TagPayloadReader.java
@@ -16,6 +16,7 @@
 package com.google.android.exoplayer2.extractor.flv;
 
 import com.google.android.exoplayer2.ParserException;
+import com.google.android.exoplayer2.extractor.ExtractorInput;
 import com.google.android.exoplayer2.extractor.TrackOutput;
 import com.google.android.exoplayer2.util.ParsableByteArray;
 
@@ -65,6 +66,18 @@ public final void consume(ParsableByteArray data, long timeUs) throws ParserExce
       parsePayload(data, timeUs);
     }
   }
+  /**
+   * Consumes payload data.
+   *
+   * @param data The payload data to consume.
+   * @param timeUs The timestamp associated with the payload.
+   * @throws ParserException If an error occurs parsing the data.
+   */
+  public final void consume(ExtractorInput input, ParsableByteArray data, long timeUs, boolean isMarker) throws ParserException {
+    if (parseHeader(data)) {
+      parsePayload(input, data, timeUs, isMarker);
+    }
+  }
 
   /**
    * Parses tag header.
@@ -84,4 +97,13 @@ public final void consume(ParsableByteArray data, long timeUs) throws ParserExce
    */
   protected abstract void parsePayload(ParsableByteArray data, long timeUs) throws ParserException;
 
+  /**
+   * Parses tag payload.
+   *
+   * @param data Buffer where tag payload is stored
+   * @param timeUs Time position of the frame
+   * @throws ParserException If an error occurs parsing the payload.
+   */
+  protected abstract void parsePayload(ExtractorInput input, ParsableByteArray data, long timeUs, boolean isMarker) throws ParserException;
+
 }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/VideoTagPayloadReader.java b/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/VideoTagPayloadReader.java
index 92db91e20b..f75acad4de 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/VideoTagPayloadReader.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/extractor/flv/VideoTagPayloadReader.java
@@ -18,6 +18,7 @@
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.Format;
 import com.google.android.exoplayer2.ParserException;
+import com.google.android.exoplayer2.extractor.ExtractorInput;
 import com.google.android.exoplayer2.extractor.TrackOutput;
 import com.google.android.exoplayer2.util.MimeTypes;
 import com.google.android.exoplayer2.util.NalUnitUtil;
@@ -128,4 +129,57 @@ protected void parsePayload(ParsableByteArray data, long timeUs) throws ParserEx
     }
   }
 
+  @Override
+  protected void parsePayload(ExtractorInput input, ParsableByteArray data, long timeUs, boolean isMarker) throws ParserException {
+    int packetType = data.readUnsignedByte();
+    int compositionTimeMs = data.readInt24();
+
+    timeUs += compositionTimeMs * 1000L;
+    // Parse avc sequence header in case this was not done before.
+    if (packetType == AVC_PACKET_TYPE_SEQUENCE_HEADER && !hasOutputFormat) {
+      ParsableByteArray videoSequence = new ParsableByteArray(new byte[data.bytesLeft()]);
+      data.readBytes(videoSequence.data, 0, data.bytesLeft());
+      AvcConfig avcConfig = AvcConfig.parse(videoSequence);
+      nalUnitLengthFieldLength = avcConfig.nalUnitLengthFieldLength;
+      // Construct and output the format.
+      Format format = Format.createVideoSampleFormat(null, MimeTypes.VIDEO_H264, null,
+              Format.NO_VALUE, Format.NO_VALUE, avcConfig.width, avcConfig.height, Format.NO_VALUE,
+              avcConfig.initializationData, Format.NO_VALUE, avcConfig.pixelWidthAspectRatio, null);
+      output.format(format);
+      hasOutputFormat = true;
+    } else if (packetType == AVC_PACKET_TYPE_AVC_NALU && hasOutputFormat) {
+      // TODO: Deduplicate with Mp4Extractor.
+      // Zero the top three bytes of the array that we'll use to decode nal unit lengths, in case
+      // they're only 1 or 2 bytes long.
+      byte[] nalLengthData = nalLength.data;
+      nalLengthData[0] = 0;
+      nalLengthData[1] = 0;
+      nalLengthData[2] = 0;
+      int nalUnitLengthFieldLengthDiff = 4 - nalUnitLengthFieldLength;
+      // NAL units are length delimited, but the decoder requires start code delimited units.
+      // Loop until we've written the sample to the track output, replacing length delimiters with
+      // start codes as we encounter them.
+      int bytesWritten = 0;
+      int bytesToWrite;
+      while (data.bytesLeft() > 0) {
+        // Read the NAL length so that we know where we find the next one.
+        data.readBytes(nalLength.data, nalUnitLengthFieldLengthDiff, nalUnitLengthFieldLength);
+        nalLength.setPosition(0);
+        bytesToWrite = nalLength.readUnsignedIntToInt();
+
+        // Write a start code for the current NAL unit.
+        nalStartCode.setPosition(0);
+        output.sampleData(nalStartCode, 4);
+        bytesWritten += 4;
+
+        // Write the payload of the NAL unit.
+        output.sampleData(input, data, bytesToWrite, isMarker);
+        if (isMarker)
+          isMarker = false;
+        bytesWritten += bytesToWrite;
+      }
+      output.sampleMetadata(timeUs, frameType == VIDEO_FRAME_KEYFRAME ? C.BUFFER_FLAG_KEY_FRAME : 0,
+              bytesWritten, 0, null);
+    }
+  }
 }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/source/SampleQueue.java b/library/core/src/main/java/com/google/android/exoplayer2/source/SampleQueue.java
index d9090baf3b..17610e51be 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/source/SampleQueue.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/source/SampleQueue.java
@@ -28,7 +28,10 @@
 import com.google.android.exoplayer2.util.ParsableByteArray;
 import java.io.EOFException;
 import java.io.IOException;
+import java.lang.reflect.Array;
 import java.nio.ByteBuffer;
+import java.util.ArrayList;
+import java.util.List;
 
 /**
  * A queue of media samples.
@@ -52,7 +55,7 @@
   public static final int ADVANCE_FAILED = -1;
 
   private static final int INITIAL_SCRATCH_SIZE = 32;
-
+  private ExtractorInput input;
   private final Allocator allocator;
   private final int allocationLength;
   private final SampleMetadataQueue metadataQueue;
@@ -72,6 +75,7 @@
   private Format lastUnadjustedFormat;
   private long sampleOffsetUs;
   private long totalBytesWritten;
+  private List markerLocList;
   private boolean pendingSplice;
   private UpstreamFormatChangedListener upstreamFormatChangeListener;
 
@@ -87,6 +91,7 @@ public SampleQueue(Allocator allocator) {
     firstAllocationNode = new AllocationNode(0, allocationLength);
     readAllocationNode = firstAllocationNode;
     writeAllocationNode = firstAllocationNode;
+    markerLocList = new ArrayList <Long> (30);
   }
 
   // Called by the consuming thread, but only when there is no loading thread.
@@ -435,6 +440,13 @@ private void readEncryptionData(DecoderInputBuffer buffer, SampleExtrasHolder ex
   private void readData(long absolutePosition, ByteBuffer target, int length) {
     advanceReadTo(absolutePosition);
     int remaining = length;
+    if (markerLocList.contains (absolutePosition)) {
+      try {
+        this.input.markerToastDisplay();
+      } catch (IOException e) {
+        e.printStackTrace();
+      }
+    }
     while (remaining > 0) {
       int toCopy = Math.min(remaining, (int) (readAllocationNode.endPosition - absolutePosition));
       Allocation allocation = readAllocationNode.allocation;
@@ -457,6 +469,15 @@ private void readData(long absolutePosition, ByteBuffer target, int length) {
   private void readData(long absolutePosition, byte[] target, int length) {
     advanceReadTo(absolutePosition);
     int remaining = length;
+
+    if (markerLocList.contains (absolutePosition)) {
+      try {
+        this.input.markerToastDisplay();
+      } catch (IOException e) {
+        e.printStackTrace();
+      }
+    }
+
     while (remaining > 0) {
       int toCopy = Math.min(remaining, (int) (readAllocationNode.endPosition - absolutePosition));
       Allocation allocation = readAllocationNode.allocation;
@@ -567,6 +588,21 @@ public void sampleData(ParsableByteArray buffer, int length) {
     }
   }
 
+  @Override
+  public void sampleData(ExtractorInput input, ParsableByteArray buffer, int length, boolean isMarker) {
+    while (length > 0) {
+      int bytesAppended = preAppend(length);
+      buffer.readBytes(writeAllocationNode.allocation.data,
+              writeAllocationNode.translateOffset(totalBytesWritten), bytesAppended);
+      this.input = input;
+      if (isMarker == true) {
+        markerLocList.add (totalBytesWritten);
+      }
+      length -= bytesAppended;
+      postAppend(bytesAppended);
+    }
+  }
+
   @Override
   public void sampleMetadata(long timeUs, @C.BufferFlags int flags, int size, int offset,
       CryptoData cryptoData) {
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/source/chunk/ChunkExtractorWrapper.java b/library/core/src/main/java/com/google/android/exoplayer2/source/chunk/ChunkExtractorWrapper.java
index f043571b69..5ca8473b0c 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/source/chunk/ChunkExtractorWrapper.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/source/chunk/ChunkExtractorWrapper.java
@@ -196,6 +196,11 @@ public void sampleData(ParsableByteArray data, int length) {
       trackOutput.sampleData(data, length);
     }
 
+    @Override
+    public void sampleData(ExtractorInput input, ParsableByteArray data, int length, boolean isMarker) {
+      trackOutput.sampleData(data, length);
+    }
+
     @Override
     public void sampleMetadata(long timeUs, @C.BufferFlags int flags, int size, int offset,
         CryptoData cryptoData) {
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/AssetDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/AssetDataSource.java
index d0b18bb765..628f5efe55 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/AssetDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/AssetDataSource.java
@@ -63,6 +63,12 @@ public AssetDataSource(Context context, TransferListener<? super AssetDataSource
     this.listener = listener;
   }
 
+  @Override
+  public void markerToastDisplay () { }
+
+  @Override
+  public int read(byte[] buffer, int offset, int readLength, boolean []isMarker) throws IOException { return 0;}
+
   @Override
   public long open(DataSpec dataSpec) throws AssetDataSourceException {
     try {
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/ByteArrayDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/ByteArrayDataSource.java
index e5311e783b..0461e0cd13 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/ByteArrayDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/ByteArrayDataSource.java
@@ -40,6 +40,12 @@ public ByteArrayDataSource(byte[] data) {
     this.data = data;
   }
 
+  @Override
+  public void markerToastDisplay () { }
+
+  @Override
+  public int read(byte[] buffer, int offset, int readLength, boolean []isMarker) throws IOException { return 0;}
+
   @Override
   public long open(DataSpec dataSpec) throws IOException {
     uri = dataSpec.uri;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/ContentDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/ContentDataSource.java
index 87642e0eba..2c80bde94f 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/ContentDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/ContentDataSource.java
@@ -67,6 +67,12 @@ public ContentDataSource(Context context, TransferListener<? super ContentDataSo
     this.listener = listener;
   }
 
+  @Override
+  public void markerToastDisplay () { }
+
+  @Override
+  public int read(byte[] buffer, int offset, int readLength, boolean []isMarker) throws IOException { return 0;}
+
   @Override
   public long open(DataSpec dataSpec) throws ContentDataSourceException {
     try {
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DataSchemeDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DataSchemeDataSource.java
index 33d67f3f46..6227714f1b 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DataSchemeDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DataSchemeDataSource.java
@@ -86,4 +86,9 @@ public void close() throws IOException {
     data = null;
   }
 
+  @Override
+  public void markerToastDisplay () { }
+
+  @Override
+  public int read(byte[] buffer, int offset, int readLength, boolean []isMarker) throws IOException { return 0;}
 }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DataSource.java
index ce3230fa43..d19d824f86 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DataSource.java
@@ -71,6 +71,8 @@
    * @throws IOException If an error occurs reading from the source.
    */
   int read(byte[] buffer, int offset, int readLength) throws IOException;
+  void markerToastDisplay ();
+  int read(byte[] buffer, int offset, int readLength, boolean [] isMarker) throws IOException;
 
   /**
    * When the source is open, returns the {@link Uri} from which data is being read. The returned
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultDataSource.java
index b5469db72e..b86dddce36 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultDataSource.java
@@ -118,6 +118,11 @@ public DefaultDataSource(Context context, TransferListener<? super DataSource> l
     this.listener = listener;
     this.baseDataSource = Assertions.checkNotNull(baseDataSource);
   }
+  @Override
+  public void markerToastDisplay () { }
+
+  @Override
+  public int read(byte[] buffer, int offset, int readLength, boolean []isMarker) throws IOException { return 0;}
 
   @Override
   public long open(DataSpec dataSpec) throws IOException {
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java
index a47a5b5348..5f00fb0fe5 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DefaultHttpDataSource.java
@@ -155,6 +155,12 @@ public DefaultHttpDataSource(String userAgent, Predicate<String> contentTypePred
     this.defaultRequestProperties = defaultRequestProperties;
   }
 
+  @Override
+  public void markerToastDisplay () { }
+
+  @Override
+  public int read(byte[] buffer, int offset, int readLength, boolean []isMarker) throws IOException { return 0;}
+
   @Override
   public Uri getUri() {
     return connection == null ? null : Uri.parse(connection.getURL().toString());
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DummyDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DummyDataSource.java
index fa3e14f1c9..f3843c963f 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/DummyDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/DummyDataSource.java
@@ -55,4 +55,11 @@ public void close() throws IOException {
     // do nothing.
   }
 
+  @Override
+  public void markerToastDisplay () { }
+
+  @Override
+  public int read(byte[] buffer, int offset, int readLength, boolean []isMarker) throws IOException { return 0;}
+
+
 }
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/FileDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/FileDataSource.java
index 898d2169b3..1c96b9ba91 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/FileDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/FileDataSource.java
@@ -55,6 +55,12 @@ public FileDataSource(TransferListener<? super FileDataSource> listener) {
     this.listener = listener;
   }
 
+  @Override
+  public void markerToastDisplay () { }
+
+  @Override
+  public int read(byte[] buffer, int offset, int readLength, boolean []isMarker) throws IOException { return 0;}
+
   @Override
   public long open(DataSpec dataSpec) throws FileDataSourceException {
     try {
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/PriorityDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/PriorityDataSource.java
index 729f7fe179..aa42d396d0 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/PriorityDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/PriorityDataSource.java
@@ -51,6 +51,12 @@ public PriorityDataSource(DataSource upstream, PriorityTaskManager priorityTaskM
     this.priority = priority;
   }
 
+  @Override
+  public void markerToastDisplay () { }
+
+  @Override
+  public int read(byte[] buffer, int offset, int readLength, boolean []isMarker) throws IOException { return 0;}
+
   @Override
   public long open(DataSpec dataSpec) throws IOException {
     priorityTaskManager.proceedOrThrow(priority);
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/RawResourceDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/RawResourceDataSource.java
index 1b58c7e095..567a5fad04 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/RawResourceDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/RawResourceDataSource.java
@@ -87,6 +87,12 @@ public RawResourceDataSource(Context context,
     this.listener = listener;
   }
 
+  @Override
+  public void markerToastDisplay () { }
+
+  @Override
+  public int read(byte[] buffer, int offset, int readLength, boolean []isMarker) throws IOException { return 0;}
+
   @Override
   public long open(DataSpec dataSpec) throws RawResourceDataSourceException {
     try {
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/TeeDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/TeeDataSource.java
index 6fcb08e6b5..ed5a4f9038 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/TeeDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/TeeDataSource.java
@@ -40,6 +40,12 @@ public TeeDataSource(DataSource upstream, DataSink dataSink) {
     this.dataSink = Assertions.checkNotNull(dataSink);
   }
 
+  @Override
+  public void markerToastDisplay () { }
+
+  @Override
+  public int read(byte[] buffer, int offset, int readLength, boolean []isMarker) throws IOException { return 0;}
+
   @Override
   public long open(DataSpec dataSpec) throws IOException {
     bytesRemaining = upstream.open(dataSpec);
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/UdpDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/UdpDataSource.java
index 68a04d9182..d4d8f77598 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/UdpDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/UdpDataSource.java
@@ -94,6 +94,12 @@ public UdpDataSource(TransferListener<? super UdpDataSource> listener, int maxPa
     packet = new DatagramPacket(packetBuffer, 0, maxPacketSize);
   }
 
+  @Override
+  public void markerToastDisplay () { }
+
+  @Override
+  public int read(byte[] buffer, int offset, int readLength, boolean []isMarker) throws IOException { return 0;}
+
   @Override
   public long open(DataSpec dataSpec) throws UdpDataSourceException {
     uri = dataSpec.uri;
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/cache/CacheDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/cache/CacheDataSource.java
index 045fc25338..edac430b0a 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/cache/CacheDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/cache/CacheDataSource.java
@@ -304,6 +304,12 @@ public void close() throws IOException {
     }
   }
 
+  @Override
+  public void markerToastDisplay () { }
+
+  @Override
+  public int read(byte[] buffer, int offset, int readLength, boolean []isMarker) throws IOException { return 0;}
+
   /**
    * Opens the next source. If the cache contains data spanning the current read position then
    * {@link #cacheReadDataSource} is opened to read from it. Else {@link #upstreamDataSource} is
diff --git a/library/core/src/main/java/com/google/android/exoplayer2/upstream/crypto/AesCipherDataSource.java b/library/core/src/main/java/com/google/android/exoplayer2/upstream/crypto/AesCipherDataSource.java
index 26ac3b38fa..859858112f 100644
--- a/library/core/src/main/java/com/google/android/exoplayer2/upstream/crypto/AesCipherDataSource.java
+++ b/library/core/src/main/java/com/google/android/exoplayer2/upstream/crypto/AesCipherDataSource.java
@@ -37,6 +37,12 @@ public AesCipherDataSource(byte[] secretKey, DataSource upstream) {
     this.secretKey = secretKey;
   }
 
+  @Override
+  public void markerToastDisplay () { }
+
+  @Override
+  public int read(byte[] buffer, int offset, int readLength, boolean []isMarker) throws IOException { return 0;}
+
   @Override
   public long open(DataSpec dataSpec) throws IOException {
     long dataLength = upstream.open(dataSpec);
diff --git a/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/PlayerEmsgHandler.java b/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/PlayerEmsgHandler.java
index 1bb08c4398..dae99c5593 100644
--- a/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/PlayerEmsgHandler.java
+++ b/library/dash/src/main/java/com/google/android/exoplayer2/source/dash/PlayerEmsgHandler.java
@@ -334,6 +334,11 @@ public void sampleData(ParsableByteArray data, int length) {
       sampleQueue.sampleData(data, length);
     }
 
+    @Override
+    public void sampleData(ExtractorInput input, ParsableByteArray data, int length, boolean isMarker) {
+      sampleQueue.sampleData(data, length);
+    }
+
     @Override
     public void sampleMetadata(
         long timeUs, int flags, int size, int offset, CryptoData encryptionData) {
diff --git a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/Aes128DataSource.java b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/Aes128DataSource.java
index 3f57cba1b0..af4c883abe 100644
--- a/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/Aes128DataSource.java
+++ b/library/hls/src/main/java/com/google/android/exoplayer2/source/hls/Aes128DataSource.java
@@ -60,6 +60,12 @@ public Aes128DataSource(DataSource upstream, byte[] encryptionKey, byte[] encryp
     this.encryptionIv = encryptionIv;
   }
 
+  @Override
+  public void markerToastDisplay () { }
+
+  @Override
+  public int read(byte[] buffer, int offset, int readLength, boolean []isMarker) throws IOException { return 0;}
+
   @Override
   public long open(DataSpec dataSpec) throws IOException {
     Cipher cipher;
diff --git a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTrackOutput.java b/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTrackOutput.java
index 6432842df4..0affc379dc 100644
--- a/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTrackOutput.java
+++ b/testutils/src/main/java/com/google/android/exoplayer2/testutil/FakeTrackOutput.java
@@ -89,6 +89,13 @@ public void sampleData(ParsableByteArray data, int length) {
     sampleData = TestUtil.joinByteArrays(sampleData, newData);
   }
 
+  @Override
+  public void sampleData(ParsableByteArray data, int length, boolean isMarker) {
+    byte[] newData = new byte[length];
+    data.readBytes(newData, 0, length);
+    sampleData = TestUtil.joinByteArrays(sampleData, newData);
+  }
+
   @Override
   public void sampleMetadata(long timeUs, @C.BufferFlags int flags, int size, int offset,
       CryptoData cryptoData) {
