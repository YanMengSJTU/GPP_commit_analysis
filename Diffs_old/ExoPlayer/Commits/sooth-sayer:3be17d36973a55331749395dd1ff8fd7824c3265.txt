diff --git a/library/src/main/java/com/google/android/exoplayer/extractor/webm/WebmExtractor.java b/library/src/main/java/com/google/android/exoplayer/extractor/webm/WebmExtractor.java
index 67d3947c4c..427f07afac 100644
--- a/library/src/main/java/com/google/android/exoplayer/extractor/webm/WebmExtractor.java
+++ b/library/src/main/java/com/google/android/exoplayer/extractor/webm/WebmExtractor.java
@@ -1216,9 +1216,9 @@ public void initializeOutput(ExtractorOutput output, int trackId, long durationU
           nalUnitLengthFieldLength = hevcData.second;
           break;
         case CODEC_ID_FOURCC:
-            Pair<List<byte[]>, BITMAPINFOHEADER> fourccData = parseFourCCPrivate(
+            Pair<List<byte[]>, Long> fourccData = parseFourCCPrivate(
                 new ParsableByteArray(codecPrivate));
-            if (fourccData.second.biCompression != FOURCC_COMPRESSION_VC1)
+            if (fourccData.second != FOURCC_COMPRESSION_VC1)
                 throw new ParserException("Unrecognized codec identifier for FourCC.");
             mimeType = MimeTypes.VIDEO_VC1;
             initializationData = fourccData.first;
@@ -1314,40 +1314,14 @@ public void initializeOutput(ExtractorOutput output, int trackId, long durationU
       this.output.format(format);
     }
 
-    private static class BITMAPINFOHEADER {
-
-        public BITMAPINFOHEADER(ParsableByteArray buffer) {
-
-            biSize = buffer.readLittleEndianUnsignedInt();
-            biWidth = buffer.readLittleEndianInt();
-            biHeight = buffer.readLittleEndianInt();
-            biPlanes = buffer.readLittleEndianUnsignedShort();
-            biBitCount = buffer.readLittleEndianUnsignedShort();
-            biCompression = buffer.readLittleEndianUnsignedInt();
-            biSizeImage = buffer.readLittleEndianUnsignedInt();
-            biXPelsPerMeter = buffer.readLittleEndianInt();
-            biYPelsPerMeter = buffer.readLittleEndianInt();
-            biClrUsed = buffer.readLittleEndianUnsignedInt();
-            biClrImportant = buffer.readLittleEndianUnsignedInt();
-        }
-
-        public long      biSize; // 4 byte unsigned
-        public int       biWidth; // 4 byte
-        public int       biHeight; // 4 byte
-        public int      biPlanes; // 2 byte unsigned
-        public int      biBitCount; // 2 byte unsigned
-        public long      biCompression; // 4 byte unsigned
-        public long      biSizeImage; // 4 byte unsigned
-        public int       biXPelsPerMeter; // 4 byte
-        public int       biYPelsPerMeter; // 4 byte
-        public long      biClrUsed; // 4 byte unsigned
-        public long      biClrImportant; // 4 byte unsigned
-    }
-
-    private static Pair<List<byte[]>, BITMAPINFOHEADER> parseFourCCPrivate(ParsableByteArray buffer)
+    private static Pair<List<byte[]>, Long> parseFourCCPrivate(ParsableByteArray buffer)
             throws ParserException {
         try {
-            BITMAPINFOHEADER header = new BITMAPINFOHEADER(buffer);
+            buffer.setPosition(buffer.getPosition()+16); // size, skip width(4), height(4),
+                                                         // planes(2), and bitcount(2)
+            long biCompression = buffer.readLittleEndianUnsignedInt();
+            buffer.setPosition(buffer.getPosition()+20); // skip sizeimage(4), xpel/meter(4),
+                                                       // ypel/meter(4), clrUsed(4), clrImportant(4)
             List<byte[]> privateData = new ArrayList<>();
             final int baseBytesLeft = buffer.bytesLeft();
             byte[] scratchBytes = new byte[baseBytesLeft];
@@ -1356,14 +1330,14 @@ public BITMAPINFOHEADER(ParsableByteArray buffer) {
             int realStartPos;
             for(realStartPos = 0; realStartPos < (baseBytesLeft - 4); ++realStartPos) {
 
-                if (scratchBytes[0 + realStartPos] == 0x00 && scratchBytes[1 + realStartPos] == 0x00 &&
+                if (scratchBytes[realStartPos] == 0x00 && scratchBytes[1 + realStartPos] == 0x00 &&
                         scratchBytes[2 + realStartPos] == 0x01 && scratchBytes[3 + realStartPos] == 0x0f)
                     break;
             }
             byte[] bytes = new byte[baseBytesLeft - realStartPos];
             System.arraycopy(scratchBytes, realStartPos, bytes, 0, baseBytesLeft - realStartPos);
             privateData.add(bytes);
-            return Pair.create(privateData, header);
+            return Pair.create(privateData, biCompression);
         } catch (ArrayIndexOutOfBoundsException e) {
             throw new ParserException("Error parsing FourCC codec private");
         }
