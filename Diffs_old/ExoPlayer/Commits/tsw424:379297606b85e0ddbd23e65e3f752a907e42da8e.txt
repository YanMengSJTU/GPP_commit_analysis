diff --git a/library/src/androidTest/java/com/google/android/exoplayer/metadata/id3/Id3ParserTest.java b/library/src/androidTest/java/com/google/android/exoplayer/metadata/id3/Id3ParserTest.java
index 7e7182cc5a..b6b242b5ef 100644
--- a/library/src/androidTest/java/com/google/android/exoplayer/metadata/id3/Id3ParserTest.java
+++ b/library/src/androidTest/java/com/google/android/exoplayer/metadata/id3/Id3ParserTest.java
@@ -15,6 +15,9 @@
  */
 package com.google.android.exoplayer.metadata.id3;
 
+import com.google.android.exoplayer.ParserException;
+
+import android.test.MoreAsserts;
 import junit.framework.TestCase;
 
 import java.util.List;
@@ -24,60 +27,45 @@
  */
 public class Id3ParserTest extends TestCase {
 
-  public void testParseTxxxFrame() {
+  public void testParseTxxxFrame() throws ParserException {
     byte[] rawId3 = new byte[] {73, 68, 51, 4, 0, 0, 0, 0, 0, 41, 84, 88, 88, 88, 0, 0, 0, 31, 0, 0,
         3, 0, 109, 100, 105, 97, 108, 111, 103, 95, 86, 73, 78, 68, 73, 67, 79, 49, 53, 50, 55, 54,
         54, 52, 95, 115, 116, 97, 114, 116, 0};
     Id3Parser parser = new Id3Parser();
-    try {
-      List<Id3Frame> id3Frames = parser.parse(rawId3, rawId3.length);
-      assertNotNull(id3Frames);
-      assertEquals(1, id3Frames.size());
-      TxxxFrame txxxFrame = (TxxxFrame) id3Frames.get(0);
-      assertEquals("", txxxFrame.description);
-      assertEquals("mdialog_VINDICO1527664_start", txxxFrame.value);
-    } catch (Exception exception) {
-      fail(exception.getMessage());
-    }
+    List<Id3Frame> id3Frames = parser.parse(rawId3, rawId3.length);
+    assertNotNull(id3Frames);
+    assertEquals(1, id3Frames.size());
+    TxxxFrame txxxFrame = (TxxxFrame) id3Frames.get(0);
+    assertEquals("", txxxFrame.description);
+    assertEquals("mdialog_VINDICO1527664_start", txxxFrame.value);
   }
 
-  public void testParseApicFrame() {
+  public void testParseApicFrame() throws ParserException {
     byte[] rawId3 = new byte[] {73, 68, 51, 4, 0, 0, 0, 0, 0, 45, 65, 80, 73, 67, 0, 0, 0, 35, 0, 0,
         3, 105, 109, 97, 103, 101, 47, 106, 112, 101, 103, 0, 16, 72, 101, 108, 108, 111, 32, 87,
         111, 114, 108, 100, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0};
     Id3Parser parser = new Id3Parser();
-    try {
-      List<Id3Frame> id3Frames = parser.parse(rawId3, rawId3.length);
-      assertNotNull(id3Frames);
-      assertEquals(1, id3Frames.size());
-      ApicFrame apicFrame = (ApicFrame) id3Frames.get(0);
-      assertEquals("image/jpeg", apicFrame.mimeType);
-      assertEquals(16, apicFrame.pictureType);
-      assertEquals("Hello World", apicFrame.description);
-      assertEquals(10, apicFrame.pictureData.length);
-      byte[] dataArray = new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 0};
-      for (int i=0; i<apicFrame.pictureData.length; i++) {
-        assertEquals(dataArray[i], apicFrame.pictureData[i]);
-      }
-    } catch (Exception exception) {
-      fail(exception.getMessage());
-    }
+    List<Id3Frame> id3Frames = parser.parse(rawId3, rawId3.length);
+    assertNotNull(id3Frames);
+    assertEquals(1, id3Frames.size());
+    ApicFrame apicFrame = (ApicFrame) id3Frames.get(0);
+    assertEquals("image/jpeg", apicFrame.mimeType);
+    assertEquals(16, apicFrame.pictureType);
+    assertEquals("Hello World", apicFrame.description);
+    assertEquals(10, apicFrame.pictureData.length);
+    MoreAsserts.assertEquals(new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 0}, apicFrame.pictureData);
   }
 
-  public void testParseTextInformationFrame() {
+  public void testParseTextInformationFrame() throws ParserException {
     byte[] rawId3 = new byte[] {73, 68, 51, 4, 0, 0, 0, 0, 0, 23, 84, 73, 84, 50, 0, 0, 0, 13, 0, 0,
         3, 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 0};
     Id3Parser parser = new Id3Parser();
-    try {
-      List<Id3Frame> id3Frames = parser.parse(rawId3, rawId3.length);
-      assertNotNull(id3Frames);
-      assertEquals(1, id3Frames.size());
-      TextInformationFrame textInformationFrame = (TextInformationFrame) id3Frames.get(0);
-      assertEquals("TIT2", textInformationFrame.id);
-      assertEquals("Hello World", textInformationFrame.description);
-    } catch (Exception exception) {
-      fail(exception.getMessage());
-    }
+    List<Id3Frame> id3Frames = parser.parse(rawId3, rawId3.length);
+    assertNotNull(id3Frames);
+    assertEquals(1, id3Frames.size());
+    TextInformationFrame textInformationFrame = (TextInformationFrame) id3Frames.get(0);
+    assertEquals("TIT2", textInformationFrame.id);
+    assertEquals("Hello World", textInformationFrame.description);
   }
 
 }
diff --git a/library/src/main/java/com/google/android/exoplayer/metadata/MetadataParser.java b/library/src/main/java/com/google/android/exoplayer/metadata/MetadataParser.java
index 654f549b18..f934493dc4 100644
--- a/library/src/main/java/com/google/android/exoplayer/metadata/MetadataParser.java
+++ b/library/src/main/java/com/google/android/exoplayer/metadata/MetadataParser.java
@@ -15,7 +15,7 @@
  */
 package com.google.android.exoplayer.metadata;
 
-import java.io.IOException;
+import com.google.android.exoplayer.ParserException;
 
 /**
  * Parses objects of type <T> from binary data.
@@ -38,8 +38,8 @@
    * @param data The raw binary data from which to parse the metadata.
    * @param size The size of the input data.
    * @return @return A parsed metadata object of type <T>.
-   * @throws IOException If a problem occurred parsing the data.
+   * @throws ParserException If a problem occurred parsing the data.
    */
-  public T parse(byte[] data, int size) throws IOException;
+  public T parse(byte[] data, int size) throws ParserException;
 
 }
diff --git a/library/src/main/java/com/google/android/exoplayer/metadata/id3/Id3Parser.java b/library/src/main/java/com/google/android/exoplayer/metadata/id3/Id3Parser.java
index 3bf6534eb9..7998c8eb60 100644
--- a/library/src/main/java/com/google/android/exoplayer/metadata/id3/Id3Parser.java
+++ b/library/src/main/java/com/google/android/exoplayer/metadata/id3/Id3Parser.java
@@ -43,8 +43,7 @@ public boolean canParse(String mimeType) {
   }
 
   @Override
-  public List<Id3Frame> parse(byte[] data, int size) throws UnsupportedEncodingException,
-      ParserException {
+  public List<Id3Frame> parse(byte[] data, int size) throws ParserException {
     List<Id3Frame> id3Frames = new ArrayList<>();
     ParsableByteArray id3Data = new ParsableByteArray(data, size);
     int id3Size = parseId3Header(id3Data);
@@ -55,7 +54,6 @@ public boolean canParse(String mimeType) {
       int frameId2 = id3Data.readUnsignedByte();
       int frameId3 = id3Data.readUnsignedByte();
       int frameSize = id3Data.readSynchSafeInt();
-
       if (frameSize <= 1) {
         break;
       }
@@ -63,24 +61,28 @@ public boolean canParse(String mimeType) {
       // Skip frame flags.
       id3Data.skipBytes(2);
 
-      Id3Frame frame;
-      if (frameId0 == 'T' && frameId1 == 'X' && frameId2 == 'X' && frameId3 == 'X') {
-        frame = parseTxxxFrame(id3Data, frameSize);
-      } else if (frameId0 == 'P' && frameId1 == 'R' && frameId2 == 'I' && frameId3 == 'V') {
-        frame = parsePrivFrame(id3Data, frameSize);
-      } else if (frameId0 == 'G' && frameId1 == 'E' && frameId2 == 'O' && frameId3 == 'B') {
-        frame = parseGeobFrame(id3Data, frameSize);
-      } else if (frameId0 == 'A' && frameId1 == 'P' && frameId2 == 'I' && frameId3 == 'C') {
-        frame = parseApicFrame(id3Data, frameSize);
-      } else if (frameId0 == 'T') {
-        String id = String.format(Locale.US, "%c%c%c%c", frameId0, frameId1, frameId2, frameId3);
-        frame = parseTextInformationFrame(id3Data, frameSize, id);
-      } else {
-        String id = String.format(Locale.US, "%c%c%c%c", frameId0, frameId1, frameId2, frameId3);
-        frame = parseBinaryFrame(id3Data, frameSize, id);
+      try {
+        Id3Frame frame;
+        if (frameId0 == 'T' && frameId1 == 'X' && frameId2 == 'X' && frameId3 == 'X') {
+          frame = parseTxxxFrame(id3Data, frameSize);
+        } else if (frameId0 == 'P' && frameId1 == 'R' && frameId2 == 'I' && frameId3 == 'V') {
+          frame = parsePrivFrame(id3Data, frameSize);
+        } else if (frameId0 == 'G' && frameId1 == 'E' && frameId2 == 'O' && frameId3 == 'B') {
+          frame = parseGeobFrame(id3Data, frameSize);
+        } else if (frameId0 == 'A' && frameId1 == 'P' && frameId2 == 'I' && frameId3 == 'C') {
+          frame = parseApicFrame(id3Data, frameSize);
+        } else if (frameId0 == 'T') {
+          String id = String.format(Locale.US, "%c%c%c%c", frameId0, frameId1, frameId2, frameId3);
+          frame = parseTextInformationFrame(id3Data, frameSize, id);
+        } else {
+          String id = String.format(Locale.US, "%c%c%c%c", frameId0, frameId1, frameId2, frameId3);
+          frame = parseBinaryFrame(id3Data, frameSize, id);
+        }
+        id3Frames.add(frame);
+        id3Size -= frameSize + 10 /* header size */;
+      } catch (UnsupportedEncodingException e) {
+        throw new ParserException(e);
       }
-      id3Frames.add(frame);
-      id3Size -= frameSize + 10 /* header size */;
     }
 
     return Collections.unmodifiableList(id3Frames);
