diff --git a/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/OpusDecoder.java b/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/OpusDecoder.java
index d494d32b35..d0d7a6911b 100644
--- a/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/OpusDecoder.java
+++ b/extensions/opus/src/main/java/com/google/android/exoplayer/ext/opus/OpusDecoder.java
@@ -162,14 +162,8 @@ public OpusDecoderException decode(InputBuffer inputBuffer, OpusOutputBuffer out
     SampleHolder sampleHolder = inputBuffer.sampleHolder;
     outputBuffer.timestampUs = sampleHolder.timeUs;
     sampleHolder.data.position(sampleHolder.data.position() - sampleHolder.size);
-    int requiredOutputBufferSize =
-        opusGetRequiredOutputBufferSize(sampleHolder.data, sampleHolder.size, SAMPLE_RATE);
-    if (requiredOutputBufferSize < 0) {
-      return new OpusDecoderException("Error when computing required output buffer size.");
-    }
-    outputBuffer.init(requiredOutputBufferSize);
     int result = opusDecode(nativeDecoderContext, sampleHolder.data, sampleHolder.size,
-        outputBuffer.data, outputBuffer.data.capacity());
+        outputBuffer, SAMPLE_RATE);
     if (result < 0) {
       return new OpusDecoderException("Decode error: " + opusGetErrorMessage(result));
     }
@@ -199,9 +193,7 @@ public void release() {
   private native long opusInit(int sampleRate, int channelCount, int numStreams, int numCoupled,
       int gain, byte[] streamMap);
   private native int opusDecode(long decoder, ByteBuffer inputBuffer, int inputSize,
-      ByteBuffer outputBuffer, int outputSize);
-  private native int opusGetRequiredOutputBufferSize(
-      ByteBuffer inputBuffer, int inputSize, int sampleRate);
+      OpusOutputBuffer outputBuffer, int sampleRate);
   private native void opusClose(long decoder);
   private native void opusReset(long decoder);
   private native String opusGetErrorMessage(int errorCode);
diff --git a/extensions/opus/src/main/jni/opus_jni.cc b/extensions/opus/src/main/jni/opus_jni.cc
index b15da26565..602a090ccb 100644
--- a/extensions/opus/src/main/jni/opus_jni.cc
+++ b/extensions/opus/src/main/jni/opus_jni.cc
@@ -37,6 +37,10 @@
     Java_com_google_android_exoplayer_ext_opus_OpusDecoder_ ## NAME \
       (JNIEnv* env, jobject thiz, ##__VA_ARGS__)\
 
+// JNI references for OpusOutputBuffer class.
+static jmethodID initOpusOutputBuffer;
+static jfieldID opusDataField;
+
 jint JNI_OnLoad(JavaVM* vm, void* reserved) {
   JNIEnv* env;
   if (vm->GetEnv(reinterpret_cast<void**>(&env), JNI_VERSION_1_6) != JNI_OK) {
@@ -66,15 +70,33 @@ FUNC(jlong, opusInit, jint sampleRate, jint channelCount, jint numStreams,
     LOGE("Failed to set Opus header gain; status=%s", opus_strerror(status));
     return 0;
   }
+
+  // Populate JNI References.
+  const jclass outputBufferClass = env->FindClass(
+      "com/google/android/exoplayer/ext/opus/OpusOutputBuffer");
+  initOpusOutputBuffer = env->GetMethodID(outputBufferClass, "init", "(I)V");
+  opusDataField =
+      env->GetFieldID(outputBufferClass, "data", "Ljava/nio/ByteBuffer;");
+
   return reinterpret_cast<intptr_t>(decoder);
 }
 
 FUNC(jint, opusDecode, jlong jDecoder, jobject jInputBuffer, jint inputSize,
-     jobject jOutputBuffer, jint outputSize) {
+     jobject jOpusOutputBuffer, jint sampleRate) {
   OpusMSDecoder* decoder = reinterpret_cast<OpusMSDecoder*>(jDecoder);
   const uint8_t* inputBuffer =
       reinterpret_cast<const uint8_t*>(
           env->GetDirectBufferAddress(jInputBuffer));
+
+  const int32_t inputSampleCount =
+      opus_packet_get_nb_samples(inputBuffer, inputSize, sampleRate);
+  const jint outputSize = inputSampleCount * kBytesPerSample * channelCount;
+
+  // resize buffer:
+  env->CallVoidMethod(jOpusOutputBuffer, initOpusOutputBuffer, outputSize);
+  const jobject jOutputBuffer =
+      env->GetObjectField(jOpusOutputBuffer, opusDataField);
+
   int16_t* outputBuffer = reinterpret_cast<int16_t*>(
       env->GetDirectBufferAddress(jOutputBuffer));
   int sampleCount = opus_multistream_decode(decoder, inputBuffer, inputSize,
@@ -83,15 +105,6 @@ FUNC(jint, opusDecode, jlong jDecoder, jobject jInputBuffer, jint inputSize,
                            : sampleCount * kBytesPerSample * channelCount;
 }
 
-FUNC(jint, opusGetRequiredOutputBufferSize, jobject jInputBuffer,
-     jint inputSize, jint sampleRate) {
-  const uint8_t* inputBuffer = reinterpret_cast<const uint8_t*>(
-      env->GetDirectBufferAddress(jInputBuffer));
-  const int32_t sampleCount =
-      opus_packet_get_nb_samples(inputBuffer, inputSize, sampleRate);
-  return sampleCount * kBytesPerSample * channelCount;
-}
-
 FUNC(void, opusClose, jlong jDecoder) {
   OpusMSDecoder* decoder = reinterpret_cast<OpusMSDecoder*>(jDecoder);
   opus_multistream_decoder_destroy(decoder);
diff --git a/extensions/opus/src/main/proguard.cfg b/extensions/opus/src/main/proguard.cfg
index 15e910b1e9..f8bd286f4a 100644
--- a/extensions/opus/src/main/proguard.cfg
+++ b/extensions/opus/src/main/proguard.cfg
@@ -4,3 +4,8 @@
 -keepclasseswithmembernames class * {
     native <methods>;
 }
+
+# Some members of this class are being accessed from native methods. Keep them unobfuscated.
+-keep class com.google.android.exoplayer.ext.opus.OpusOutputBuffer {
+    *;
+}
